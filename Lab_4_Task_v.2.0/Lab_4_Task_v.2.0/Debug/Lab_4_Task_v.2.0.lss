
Lab_4_Task_v.2.0.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00002010  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80002010  80002010  00002410  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00012b3c  80002010  80002010  00002410  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .exception    00000200  80014c00  80014c00  00015000  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       00000898  80014e00  80014e00  00015200  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .dalign       00000004  00000004  00000004  00000000  2**0
                  ALLOC
  6 .data         000005dc  00000008  80015698  00015c08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .balign       00000004  000005e4  80015c74  000161e4  2**0
                  ALLOC
  8 .bss          00000890  000005e8  000005e8  00000000  2**2
                  ALLOC
  9 .heap         0000e188  00000e78  00000e78  00000000  2**0
                  ALLOC
 10 .comment      00000030  00000000  00000000  000161e4  2**0
                  CONTENTS, READONLY
 11 .debug_aranges 00001b18  00000000  00000000  00016218  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubnames 00003aef  00000000  00000000  00017d30  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_info   000366ef  00000000  00000000  0001b81f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 000068dc  00000000  00000000  00051f0e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00018522  00000000  00000000  000587ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000505c  00000000  00000000  00070d0c  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    0000b6d6  00000000  00000000  00075d68  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_loc    0000db50  00000000  00000000  0008143e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_macinfo 0167322c  00000000  00000000  0008ef8e  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .stack        00001000  0000f000  0000f000  00000000  2**0
                  ALLOC
 21 .debug_ranges 00001b60  00000000  00000000  017021c0  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_start>:

  .global _start
  .type _start, @function
_start:
  // Jump to the C runtime startup routine.
  lda.w   pc, _stext
80000000:	48 1f       	lddpc	pc,80000004 <_start+0x4>
80000002:	d7 03       	nop
80000004:	80 00       	ld.sh	r0,r0[0x0]
80000006:	e1 94       	*unknown*

80000008 <_trampoline>:

  .global _trampoline
  .type _trampoline, @function
_trampoline:
  // Jump to program start.
  rjmp    program_start
80000008:	e0 8f 10 00 	bral	80002008 <program_start>
	...

80002008 <program_start>:

  .org  PROGRAM_START_OFFSET
program_start:
  // Jump to the C runtime startup routine.
  lda.w   pc, _stext
80002008:	fe ff 00 04 	ld.w	pc,pc[4]
8000200c:	80 00       	ld.sh	r0,r0[0x0]
8000200e:	e1 94       	*unknown*

Disassembly of section .text:

80002010 <osc_get_rate>:
		return false;
	}
}

static inline uint32_t osc_get_rate(uint8_t id)
{
80002010:	eb cd 40 80 	pushm	r7,lr
80002014:	1a 97       	mov	r7,sp
80002016:	20 1d       	sub	sp,4
80002018:	18 98       	mov	r8,r12
8000201a:	ef 68 ff fc 	st.b	r7[-4],r8
	switch (id) {
8000201e:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80002022:	58 08       	cp.w	r8,0
80002024:	c0 40       	breq	8000202c <osc_get_rate+0x1c>
80002026:	58 28       	cp.w	r8,2
80002028:	c0 70       	breq	80002036 <osc_get_rate+0x26>
8000202a:	c0 98       	rjmp	8000203c <osc_get_rate+0x2c>
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		return BOARD_OSC0_HZ;
8000202c:	e0 68 1b 00 	mov	r8,6912
80002030:	ea 18 00 b7 	orh	r8,0xb7
80002034:	c0 58       	rjmp	8000203e <osc_get_rate+0x2e>
		return BOARD_OSC1_HZ;
#endif

#ifdef BOARD_OSC32_HZ
	case OSC_ID_OSC32:
		return BOARD_OSC32_HZ;
80002036:	e0 68 80 00 	mov	r8,32768
8000203a:	c0 28       	rjmp	8000203e <osc_get_rate+0x2e>
#endif
	default:
		/* unhandled_case(id); */
		return 0;
8000203c:	30 08       	mov	r8,0
	}
}
8000203e:	10 9c       	mov	r12,r8
80002040:	2f fd       	sub	sp,-4
80002042:	e3 cd 80 80 	ldm	sp++,r7,pc
80002046:	d7 03       	nop

80002048 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern bool sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
80002048:	eb cd 40 80 	pushm	r7,lr
8000204c:	1a 97       	mov	r7,sp
		return BOARD_OSC0_HZ;
#endif

#ifdef CONFIG_PLL0_SOURCE
	case SYSCLK_SRC_PLL0:
		return pll_get_default_rate(0);
8000204e:	30 0c       	mov	r12,0
80002050:	f0 1f 00 04 	mcall	80002060 <sysclk_get_main_hz+0x18>
80002054:	18 98       	mov	r8,r12
80002056:	a3 78       	lsl	r8,0x3
80002058:	a1 98       	lsr	r8,0x1

	default:
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
8000205a:	10 9c       	mov	r12,r8
8000205c:	e3 cd 80 80 	ldm	sp++,r7,pc
80002060:	80 00       	ld.sh	r0,r0[0x0]
80002062:	20 10       	sub	r0,1

80002064 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
80002064:	eb cd 40 80 	pushm	r7,lr
80002068:	1a 97       	mov	r7,sp
	return sysclk_get_main_hz() >> CONFIG_SYSCLK_CPU_DIV;
8000206a:	f0 1f 00 04 	mcall	80002078 <sysclk_get_cpu_hz+0x14>
8000206e:	18 98       	mov	r8,r12
}
80002070:	10 9c       	mov	r12,r8
80002072:	e3 cd 80 80 	ldm	sp++,r7,pc
80002076:	00 00       	add	r0,r0
80002078:	80 00       	ld.sh	r0,r0[0x0]
8000207a:	20 48       	sub	r8,4

8000207c <dip204_init>:


/****************************** global functions *****************************/

void dip204_init(backlight_options option, bool backlight_on)
{
8000207c:	eb cd 40 8f 	pushm	r0-r3,r7,lr
80002080:	1a 97       	mov	r7,sp
80002082:	fa cd 01 ac 	sub	sp,sp,428
80002086:	ef 4c fe b8 	st.w	r7[-328],r12
8000208a:	16 98       	mov	r8,r11
8000208c:	ef 68 fe b4 	st.b	r7[-332],r8
  pwm_opt_t pwm_opt;  // pwm option config

  if (option == backlight_PWM)
80002090:	ee f8 fe b8 	ld.w	r8,r7[-328]
80002094:	58 18       	cp.w	r8,1
80002096:	c6 41       	brne	8000215e <dip204_init+0xe2>
  {
    channel_id = DIP204_PWM_CHANNEL;
80002098:	fe f9 0a 84 	ld.w	r9,pc[2692]
8000209c:	30 68       	mov	r8,6
8000209e:	93 08       	st.w	r9[0x0],r8
    gpio_enable_module_pin(DIP204_PWM_PIN, DIP204_PWM_FUNCTION);
800020a0:	30 2b       	mov	r11,2
800020a2:	33 2c       	mov	r12,50
800020a4:	f0 1f 02 9f 	mcall	80002b20 <dip204_init+0xaa4>

    // PWM controller configuration
    pwm_opt.diva=0;
800020a8:	30 08       	mov	r8,0
800020aa:	ef 48 ff 14 	st.w	r7[-236],r8
    pwm_opt.divb=0;
800020ae:	30 08       	mov	r8,0
800020b0:	ef 48 ff 10 	st.w	r7[-240],r8
    pwm_opt.prea=0;
800020b4:	30 08       	mov	r8,0
800020b6:	ef 48 ff 1c 	st.w	r7[-228],r8
    pwm_opt.preb=0;
800020ba:	30 08       	mov	r8,0
800020bc:	ef 48 ff 18 	st.w	r7[-232],r8

    pwm_init(&pwm_opt);
800020c0:	ee c8 00 f0 	sub	r8,r7,240
800020c4:	10 9c       	mov	r12,r8
800020c6:	f0 1f 02 98 	mcall	80002b24 <dip204_init+0xaa8>
    pwm_duty = (backlight_on) ? DIP204_PERIOD_MAX - 1 : 1;
800020ca:	ef 39 fe b4 	ld.ub	r9,r7[-332]
800020ce:	30 08       	mov	r8,0
800020d0:	f0 09 18 00 	cp.b	r9,r8
800020d4:	c0 30       	breq	800020da <dip204_init+0x5e>
800020d6:	33 18       	mov	r8,49
800020d8:	c0 28       	rjmp	800020dc <dip204_init+0x60>
800020da:	30 18       	mov	r8,1
800020dc:	fe f9 0a 4c 	ld.w	r9,pc[2636]
800020e0:	b2 08       	st.h	r9[0x0],r8
    pwm_channel.CMR.calg = PWM_MODE_LEFT_ALIGNED;   // channel mode
800020e2:	fe fa 0a 4a 	ld.w	r10,pc[2634]
800020e6:	74 08       	ld.w	r8,r10[0x0]
800020e8:	30 09       	mov	r9,0
800020ea:	f1 d9 d1 01 	bfins	r8,r9,0x8,0x1
800020ee:	95 08       	st.w	r10[0x0],r8
    pwm_channel.CMR.cpol = PWM_POLARITY_LOW;   // channel polarity
800020f0:	fe fa 0a 3c 	ld.w	r10,pc[2620]
800020f4:	74 08       	ld.w	r8,r10[0x0]
800020f6:	30 09       	mov	r9,0
800020f8:	f1 d9 d1 21 	bfins	r8,r9,0x9,0x1
800020fc:	95 08       	st.w	r10[0x0],r8
    pwm_channel.CMR.cpd = PWM_UPDATE_PERIOD;   // not used the first time
800020fe:	fe fa 0a 2e 	ld.w	r10,pc[2606]
80002102:	74 08       	ld.w	r8,r10[0x0]
80002104:	30 19       	mov	r9,1
80002106:	f1 d9 d1 41 	bfins	r8,r9,0xa,0x1
8000210a:	95 08       	st.w	r10[0x0],r8
    pwm_channel.CMR.cpre = AVR32_PWM_CPRE_MCK_DIV_256;   // channel prescaler
8000210c:	fe fa 0a 20 	ld.w	r10,pc[2592]
80002110:	74 08       	ld.w	r8,r10[0x0]
80002112:	30 89       	mov	r9,8
80002114:	f1 d9 d0 04 	bfins	r8,r9,0x0,0x4
80002118:	95 08       	st.w	r10[0x0],r8
    pwm_channel.cdty = pwm_duty;  // channel duty cycle, should be < CPRD
8000211a:	fe f8 0a 0e 	ld.w	r8,pc[2574]
8000211e:	90 08       	ld.sh	r8,r8[0x0]
80002120:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
80002124:	fe f8 0a 08 	ld.w	r8,pc[2568]
80002128:	91 19       	st.w	r8[0x4],r9
    pwm_channel.cprd = DIP204_PERIOD_MAX;  // channel period
8000212a:	fe f9 0a 02 	ld.w	r9,pc[2562]
8000212e:	33 28       	mov	r8,50
80002130:	93 28       	st.w	r9[0x8],r8
    pwm_channel.cupd = 0;  // channel update is not used here.
80002132:	fe f9 09 fa 	ld.w	r9,pc[2554]
80002136:	30 08       	mov	r8,0
80002138:	93 48       	st.w	r9[0x10],r8

    pwm_channel_init(channel_id, &pwm_channel);
8000213a:	fe f8 09 e2 	ld.w	r8,pc[2530]
8000213e:	70 08       	ld.w	r8,r8[0x0]
80002140:	fe fb 09 ec 	ld.w	r11,pc[2540]
80002144:	10 9c       	mov	r12,r8
80002146:	f0 1f 02 7b 	mcall	80002b30 <dip204_init+0xab4>
    // start PWM
    pwm_start_channels(1 << channel_id);
8000214a:	fe f8 09 d2 	ld.w	r8,pc[2514]
8000214e:	70 09       	ld.w	r9,r8[0x0]
80002150:	30 18       	mov	r8,1
80002152:	f0 09 09 48 	lsl	r8,r8,r9
80002156:	10 9c       	mov	r12,r8
80002158:	f0 1f 02 77 	mcall	80002b34 <dip204_init+0xab8>
8000215c:	c0 e8       	rjmp	80002178 <dip204_init+0xfc>
  }
  else
  {
    if (backlight_on)
8000215e:	ef 39 fe b4 	ld.ub	r9,r7[-332]
80002162:	30 08       	mov	r8,0
80002164:	f0 09 18 00 	cp.b	r9,r8
80002168:	c0 50       	breq	80002172 <dip204_init+0xf6>
    {
      gpio_clr_gpio_pin(DIP204_BACKLIGHT_PIN);
8000216a:	33 2c       	mov	r12,50
8000216c:	f0 1f 02 73 	mcall	80002b38 <dip204_init+0xabc>
80002170:	c0 48       	rjmp	80002178 <dip204_init+0xfc>
    }
    else
    {
      gpio_set_gpio_pin(DIP204_BACKLIGHT_PIN);
80002172:	33 2c       	mov	r12,50
80002174:	f0 1f 02 72 	mcall	80002b3c <dip204_init+0xac0>
    }
  }
  // delay for power on
  delay_ms(20);
80002178:	f0 1f 02 72 	mcall	80002b40 <dip204_init+0xac4>
8000217c:	18 99       	mov	r9,r12
8000217e:	31 48       	mov	r8,20
80002180:	ef 48 ff 24 	st.w	r7[-220],r8
80002184:	ef 49 ff 20 	st.w	r7[-224],r9
80002188:	ee f8 ff 24 	ld.w	r8,r7[-220]
8000218c:	ef 48 ff 2c 	st.w	r7[-212],r8
80002190:	ee f8 ff 20 	ld.w	r8,r7[-224]
80002194:	ef 48 ff 28 	st.w	r7[-216],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
80002198:	ee f0 ff 2c 	ld.w	r0,r7[-212]
8000219c:	30 01       	mov	r1,0
8000219e:	ee f2 ff 28 	ld.w	r2,r7[-216]
800021a2:	30 03       	mov	r3,0
800021a4:	e2 02 02 49 	mul	r9,r1,r2
800021a8:	e6 00 02 48 	mul	r8,r3,r0
800021ac:	10 09       	add	r9,r8
800021ae:	e0 02 06 4a 	mulu.d	r10,r0,r2
800021b2:	16 09       	add	r9,r11
800021b4:	12 9b       	mov	r11,r9
800021b6:	e0 68 03 e7 	mov	r8,999
800021ba:	30 09       	mov	r9,0
800021bc:	10 0a       	add	r10,r8
800021be:	f6 09 00 4b 	adc	r11,r11,r9
800021c2:	e0 68 03 e8 	mov	r8,1000
800021c6:	30 09       	mov	r9,0
800021c8:	f0 1f 02 5f 	mcall	80002b44 <dip204_init+0xac8>
800021cc:	14 98       	mov	r8,r10
800021ce:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
800021d0:	ef 48 ff 34 	st.w	r7[-204],r8
800021d4:	ee c8 01 44 	sub	r8,r7,324
800021d8:	ef 48 ff 30 	st.w	r7[-208],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800021dc:	e1 b8 00 42 	mfsr	r8,0x108
800021e0:	10 99       	mov	r9,r8
800021e2:	ee f8 ff 30 	ld.w	r8,r7[-208]
800021e6:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800021e8:	ee f8 ff 30 	ld.w	r8,r7[-208]
800021ec:	70 09       	ld.w	r9,r8[0x0]
800021ee:	ee f8 ff 34 	ld.w	r8,r7[-204]
800021f2:	10 09       	add	r9,r8
800021f4:	ee f8 ff 30 	ld.w	r8,r7[-208]
800021f8:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
800021fa:	ee f9 ff 30 	ld.w	r9,r7[-208]
800021fe:	30 08       	mov	r8,0
80002200:	f3 68 00 08 	st.b	r9[8],r8
80002204:	ee c8 01 44 	sub	r8,r7,324
80002208:	ef 48 ff 38 	st.w	r7[-200],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000220c:	e1 b8 00 42 	mfsr	r8,0x108
80002210:	ef 48 ff 3c 	st.w	r7[-196],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80002214:	ee f8 ff 38 	ld.w	r8,r7[-200]
80002218:	f1 39 00 08 	ld.ub	r9,r8[8]
8000221c:	30 28       	mov	r8,2
8000221e:	f0 09 18 00 	cp.b	r9,r8
80002222:	c0 31       	brne	80002228 <dip204_init+0x1ac>
    return false;
80002224:	30 08       	mov	r8,0
80002226:	c4 38       	rjmp	800022ac <dip204_init+0x230>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80002228:	ee f8 ff 38 	ld.w	r8,r7[-200]
8000222c:	f1 39 00 08 	ld.ub	r9,r8[8]
80002230:	30 18       	mov	r8,1
80002232:	f0 09 18 00 	cp.b	r9,r8
80002236:	c0 31       	brne	8000223c <dip204_init+0x1c0>
    return true;
80002238:	30 18       	mov	r8,1
8000223a:	c3 98       	rjmp	800022ac <dip204_init+0x230>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000223c:	ee f8 ff 38 	ld.w	r8,r7[-200]
80002240:	70 09       	ld.w	r9,r8[0x0]
80002242:	ee f8 ff 38 	ld.w	r8,r7[-200]
80002246:	70 18       	ld.w	r8,r8[0x4]
80002248:	10 39       	cp.w	r9,r8
8000224a:	e0 88 00 1a 	brls	8000227e <dip204_init+0x202>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000224e:	ee f8 ff 38 	ld.w	r8,r7[-200]
80002252:	70 09       	ld.w	r9,r8[0x0]
80002254:	ee f8 ff 3c 	ld.w	r8,r7[-196]
80002258:	12 38       	cp.w	r8,r9
8000225a:	c1 02       	brcc	8000227a <dip204_init+0x1fe>
8000225c:	ee f8 ff 38 	ld.w	r8,r7[-200]
80002260:	70 19       	ld.w	r9,r8[0x4]
80002262:	ee f8 ff 3c 	ld.w	r8,r7[-196]
80002266:	12 38       	cp.w	r8,r9
80002268:	e0 88 00 09 	brls	8000227a <dip204_init+0x1fe>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
8000226c:	ee f9 ff 38 	ld.w	r9,r7[-200]
80002270:	30 18       	mov	r8,1
80002272:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80002276:	30 18       	mov	r8,1
80002278:	c1 a8       	rjmp	800022ac <dip204_init+0x230>
    }
    return false;
8000227a:	30 08       	mov	r8,0
8000227c:	c1 88       	rjmp	800022ac <dip204_init+0x230>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000227e:	ee f8 ff 38 	ld.w	r8,r7[-200]
80002282:	70 09       	ld.w	r9,r8[0x0]
80002284:	ee f8 ff 3c 	ld.w	r8,r7[-196]
80002288:	12 38       	cp.w	r8,r9
8000228a:	c0 93       	brcs	8000229c <dip204_init+0x220>
8000228c:	ee f8 ff 38 	ld.w	r8,r7[-200]
80002290:	70 19       	ld.w	r9,r8[0x4]
80002292:	ee f8 ff 3c 	ld.w	r8,r7[-196]
80002296:	12 38       	cp.w	r8,r9
80002298:	e0 88 00 09 	brls	800022aa <dip204_init+0x22e>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
8000229c:	ee f9 ff 38 	ld.w	r9,r7[-200]
800022a0:	30 18       	mov	r8,1
800022a2:	f3 68 00 08 	st.b	r9[8],r8
      return true;
800022a6:	30 18       	mov	r8,1
800022a8:	c0 28       	rjmp	800022ac <dip204_init+0x230>
    }
    return false;
800022aa:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
800022ac:	58 08       	cp.w	r8,0
800022ae:	ca b0       	breq	80002204 <dip204_init+0x188>
  // select the LCD chip
  dip204_select();
800022b0:	f0 1f 02 26 	mcall	80002b48 <dip204_init+0xacc>
  // Send Command Start Byte
  dip204_write_byte(DIP204_WRITE_COMMAND);
800022b4:	e0 6c 00 f8 	mov	r12,248
800022b8:	f0 1f 02 25 	mcall	80002b4c <dip204_init+0xad0>
  // Send "extended Function Set" Command  (RE=1)
  dip204_write_byte(0x34);
800022bc:	33 4c       	mov	r12,52
800022be:	f0 1f 02 24 	mcall	80002b4c <dip204_init+0xad0>
  // Wait for command execution
  delay_ms(1);
800022c2:	f0 1f 02 20 	mcall	80002b40 <dip204_init+0xac4>
800022c6:	18 99       	mov	r9,r12
800022c8:	30 18       	mov	r8,1
800022ca:	ef 48 ff 44 	st.w	r7[-188],r8
800022ce:	ef 49 ff 40 	st.w	r7[-192],r9
800022d2:	ee f8 ff 44 	ld.w	r8,r7[-188]
800022d6:	ef 48 ff 4c 	st.w	r7[-180],r8
800022da:	ee f8 ff 40 	ld.w	r8,r7[-192]
800022de:	ef 48 ff 48 	st.w	r7[-184],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
800022e2:	ee fc ff 4c 	ld.w	r12,r7[-180]
800022e6:	ef 4c fe 60 	st.w	r7[-416],r12
800022ea:	30 0b       	mov	r11,0
800022ec:	ef 4b fe 5c 	st.w	r7[-420],r11
800022f0:	ee fa ff 48 	ld.w	r10,r7[-184]
800022f4:	ef 4a fe 58 	st.w	r7[-424],r10
800022f8:	30 09       	mov	r9,0
800022fa:	ef 49 fe 54 	st.w	r7[-428],r9
800022fe:	ee f9 fe 5c 	ld.w	r9,r7[-420]
80002302:	ee f8 fe 58 	ld.w	r8,r7[-424]
80002306:	b1 39       	mul	r9,r8
80002308:	ee f8 fe 54 	ld.w	r8,r7[-428]
8000230c:	ee fc fe 60 	ld.w	r12,r7[-416]
80002310:	b9 38       	mul	r8,r12
80002312:	10 09       	add	r9,r8
80002314:	ee f8 fe 60 	ld.w	r8,r7[-416]
80002318:	ee fc fe 58 	ld.w	r12,r7[-424]
8000231c:	f0 0c 06 4a 	mulu.d	r10,r8,r12
80002320:	16 09       	add	r9,r11
80002322:	12 9b       	mov	r11,r9
80002324:	e0 68 03 e7 	mov	r8,999
80002328:	30 09       	mov	r9,0
8000232a:	10 0a       	add	r10,r8
8000232c:	f6 09 00 4b 	adc	r11,r11,r9
80002330:	e0 68 03 e8 	mov	r8,1000
80002334:	30 09       	mov	r9,0
80002336:	f0 1f 02 04 	mcall	80002b44 <dip204_init+0xac8>
8000233a:	14 98       	mov	r8,r10
8000233c:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
8000233e:	ef 48 ff 54 	st.w	r7[-172],r8
80002342:	ee c8 01 38 	sub	r8,r7,312
80002346:	ef 48 ff 50 	st.w	r7[-176],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000234a:	e1 b8 00 42 	mfsr	r8,0x108
8000234e:	10 99       	mov	r9,r8
80002350:	ee f8 ff 50 	ld.w	r8,r7[-176]
80002354:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002356:	ee f8 ff 50 	ld.w	r8,r7[-176]
8000235a:	70 09       	ld.w	r9,r8[0x0]
8000235c:	ee f8 ff 54 	ld.w	r8,r7[-172]
80002360:	10 09       	add	r9,r8
80002362:	ee f8 ff 50 	ld.w	r8,r7[-176]
80002366:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80002368:	ee f9 ff 50 	ld.w	r9,r7[-176]
8000236c:	30 08       	mov	r8,0
8000236e:	f3 68 00 08 	st.b	r9[8],r8
80002372:	ee c8 01 38 	sub	r8,r7,312
80002376:	ef 48 ff 58 	st.w	r7[-168],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000237a:	e1 b8 00 42 	mfsr	r8,0x108
8000237e:	ef 48 ff 5c 	st.w	r7[-164],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80002382:	ee f8 ff 58 	ld.w	r8,r7[-168]
80002386:	f1 39 00 08 	ld.ub	r9,r8[8]
8000238a:	30 28       	mov	r8,2
8000238c:	f0 09 18 00 	cp.b	r9,r8
80002390:	c0 31       	brne	80002396 <dip204_init+0x31a>
    return false;
80002392:	30 08       	mov	r8,0
80002394:	c4 38       	rjmp	8000241a <dip204_init+0x39e>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80002396:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000239a:	f1 39 00 08 	ld.ub	r9,r8[8]
8000239e:	30 18       	mov	r8,1
800023a0:	f0 09 18 00 	cp.b	r9,r8
800023a4:	c0 31       	brne	800023aa <dip204_init+0x32e>
    return true;
800023a6:	30 18       	mov	r8,1
800023a8:	c3 98       	rjmp	8000241a <dip204_init+0x39e>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800023aa:	ee f8 ff 58 	ld.w	r8,r7[-168]
800023ae:	70 09       	ld.w	r9,r8[0x0]
800023b0:	ee f8 ff 58 	ld.w	r8,r7[-168]
800023b4:	70 18       	ld.w	r8,r8[0x4]
800023b6:	10 39       	cp.w	r9,r8
800023b8:	e0 88 00 1a 	brls	800023ec <dip204_init+0x370>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800023bc:	ee f8 ff 58 	ld.w	r8,r7[-168]
800023c0:	70 09       	ld.w	r9,r8[0x0]
800023c2:	ee f8 ff 5c 	ld.w	r8,r7[-164]
800023c6:	12 38       	cp.w	r8,r9
800023c8:	c1 02       	brcc	800023e8 <dip204_init+0x36c>
800023ca:	ee f8 ff 58 	ld.w	r8,r7[-168]
800023ce:	70 19       	ld.w	r9,r8[0x4]
800023d0:	ee f8 ff 5c 	ld.w	r8,r7[-164]
800023d4:	12 38       	cp.w	r8,r9
800023d6:	e0 88 00 09 	brls	800023e8 <dip204_init+0x36c>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
800023da:	ee f9 ff 58 	ld.w	r9,r7[-168]
800023de:	30 18       	mov	r8,1
800023e0:	f3 68 00 08 	st.b	r9[8],r8
      return true;
800023e4:	30 18       	mov	r8,1
800023e6:	c1 a8       	rjmp	8000241a <dip204_init+0x39e>
    }
    return false;
800023e8:	30 08       	mov	r8,0
800023ea:	c1 88       	rjmp	8000241a <dip204_init+0x39e>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800023ec:	ee f8 ff 58 	ld.w	r8,r7[-168]
800023f0:	70 09       	ld.w	r9,r8[0x0]
800023f2:	ee f8 ff 5c 	ld.w	r8,r7[-164]
800023f6:	12 38       	cp.w	r8,r9
800023f8:	c0 93       	brcs	8000240a <dip204_init+0x38e>
800023fa:	ee f8 ff 58 	ld.w	r8,r7[-168]
800023fe:	70 19       	ld.w	r9,r8[0x4]
80002400:	ee f8 ff 5c 	ld.w	r8,r7[-164]
80002404:	12 38       	cp.w	r8,r9
80002406:	e0 88 00 09 	brls	80002418 <dip204_init+0x39c>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
8000240a:	ee f9 ff 58 	ld.w	r9,r7[-168]
8000240e:	30 18       	mov	r8,1
80002410:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80002414:	30 18       	mov	r8,1
80002416:	c0 28       	rjmp	8000241a <dip204_init+0x39e>
    }
    return false;
80002418:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
8000241a:	58 08       	cp.w	r8,0
8000241c:	ca b0       	breq	80002372 <dip204_init+0x2f6>
  // Send "Enter 4-Line Mode" Command
  dip204_write_byte(0x09);
8000241e:	30 9c       	mov	r12,9
80002420:	f0 1f 01 cb 	mcall	80002b4c <dip204_init+0xad0>
  // Wait for command execution
  delay_ms(1);
80002424:	f0 1f 01 c7 	mcall	80002b40 <dip204_init+0xac4>
80002428:	18 99       	mov	r9,r12
8000242a:	30 18       	mov	r8,1
8000242c:	ef 48 ff 64 	st.w	r7[-156],r8
80002430:	ef 49 ff 60 	st.w	r7[-160],r9
80002434:	ee f8 ff 64 	ld.w	r8,r7[-156]
80002438:	ef 48 ff 6c 	st.w	r7[-148],r8
8000243c:	ee f8 ff 60 	ld.w	r8,r7[-160]
80002440:	ef 48 ff 68 	st.w	r7[-152],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
80002444:	ee fb ff 6c 	ld.w	r11,r7[-148]
80002448:	ef 4b fe 70 	st.w	r7[-400],r11
8000244c:	30 0a       	mov	r10,0
8000244e:	ef 4a fe 6c 	st.w	r7[-404],r10
80002452:	ee f9 ff 68 	ld.w	r9,r7[-152]
80002456:	ef 49 fe 68 	st.w	r7[-408],r9
8000245a:	30 08       	mov	r8,0
8000245c:	ef 48 fe 64 	st.w	r7[-412],r8
80002460:	ee f9 fe 6c 	ld.w	r9,r7[-404]
80002464:	ee fc fe 68 	ld.w	r12,r7[-408]
80002468:	b9 39       	mul	r9,r12
8000246a:	ee f8 fe 64 	ld.w	r8,r7[-412]
8000246e:	ee fb fe 70 	ld.w	r11,r7[-400]
80002472:	b7 38       	mul	r8,r11
80002474:	10 09       	add	r9,r8
80002476:	ee f8 fe 70 	ld.w	r8,r7[-400]
8000247a:	ee fc fe 68 	ld.w	r12,r7[-408]
8000247e:	f0 0c 06 4a 	mulu.d	r10,r8,r12
80002482:	16 09       	add	r9,r11
80002484:	12 9b       	mov	r11,r9
80002486:	e0 68 03 e7 	mov	r8,999
8000248a:	30 09       	mov	r9,0
8000248c:	10 0a       	add	r10,r8
8000248e:	f6 09 00 4b 	adc	r11,r11,r9
80002492:	e0 68 03 e8 	mov	r8,1000
80002496:	30 09       	mov	r9,0
80002498:	f0 1f 01 ab 	mcall	80002b44 <dip204_init+0xac8>
8000249c:	14 98       	mov	r8,r10
8000249e:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
800024a0:	ef 48 ff 74 	st.w	r7[-140],r8
800024a4:	ee c8 01 2c 	sub	r8,r7,300
800024a8:	ef 48 ff 70 	st.w	r7[-144],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800024ac:	e1 b8 00 42 	mfsr	r8,0x108
800024b0:	10 99       	mov	r9,r8
800024b2:	ee f8 ff 70 	ld.w	r8,r7[-144]
800024b6:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800024b8:	ee f8 ff 70 	ld.w	r8,r7[-144]
800024bc:	70 09       	ld.w	r9,r8[0x0]
800024be:	ee f8 ff 74 	ld.w	r8,r7[-140]
800024c2:	10 09       	add	r9,r8
800024c4:	ee f8 ff 70 	ld.w	r8,r7[-144]
800024c8:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
800024ca:	ee f9 ff 70 	ld.w	r9,r7[-144]
800024ce:	30 08       	mov	r8,0
800024d0:	f3 68 00 08 	st.b	r9[8],r8
800024d4:	ee c8 01 2c 	sub	r8,r7,300
800024d8:	ef 48 ff 78 	st.w	r7[-136],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800024dc:	e1 b8 00 42 	mfsr	r8,0x108
800024e0:	ef 48 ff 7c 	st.w	r7[-132],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
800024e4:	ee f8 ff 78 	ld.w	r8,r7[-136]
800024e8:	f1 39 00 08 	ld.ub	r9,r8[8]
800024ec:	30 28       	mov	r8,2
800024ee:	f0 09 18 00 	cp.b	r9,r8
800024f2:	c0 31       	brne	800024f8 <dip204_init+0x47c>
    return false;
800024f4:	30 08       	mov	r8,0
800024f6:	c4 38       	rjmp	8000257c <dip204_init+0x500>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
800024f8:	ee f8 ff 78 	ld.w	r8,r7[-136]
800024fc:	f1 39 00 08 	ld.ub	r9,r8[8]
80002500:	30 18       	mov	r8,1
80002502:	f0 09 18 00 	cp.b	r9,r8
80002506:	c0 31       	brne	8000250c <dip204_init+0x490>
    return true;
80002508:	30 18       	mov	r8,1
8000250a:	c3 98       	rjmp	8000257c <dip204_init+0x500>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000250c:	ee f8 ff 78 	ld.w	r8,r7[-136]
80002510:	70 09       	ld.w	r9,r8[0x0]
80002512:	ee f8 ff 78 	ld.w	r8,r7[-136]
80002516:	70 18       	ld.w	r8,r8[0x4]
80002518:	10 39       	cp.w	r9,r8
8000251a:	e0 88 00 1a 	brls	8000254e <dip204_init+0x4d2>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000251e:	ee f8 ff 78 	ld.w	r8,r7[-136]
80002522:	70 09       	ld.w	r9,r8[0x0]
80002524:	ee f8 ff 7c 	ld.w	r8,r7[-132]
80002528:	12 38       	cp.w	r8,r9
8000252a:	c1 02       	brcc	8000254a <dip204_init+0x4ce>
8000252c:	ee f8 ff 78 	ld.w	r8,r7[-136]
80002530:	70 19       	ld.w	r9,r8[0x4]
80002532:	ee f8 ff 7c 	ld.w	r8,r7[-132]
80002536:	12 38       	cp.w	r8,r9
80002538:	e0 88 00 09 	brls	8000254a <dip204_init+0x4ce>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
8000253c:	ee f9 ff 78 	ld.w	r9,r7[-136]
80002540:	30 18       	mov	r8,1
80002542:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80002546:	30 18       	mov	r8,1
80002548:	c1 a8       	rjmp	8000257c <dip204_init+0x500>
    }
    return false;
8000254a:	30 08       	mov	r8,0
8000254c:	c1 88       	rjmp	8000257c <dip204_init+0x500>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000254e:	ee f8 ff 78 	ld.w	r8,r7[-136]
80002552:	70 09       	ld.w	r9,r8[0x0]
80002554:	ee f8 ff 7c 	ld.w	r8,r7[-132]
80002558:	12 38       	cp.w	r8,r9
8000255a:	c0 93       	brcs	8000256c <dip204_init+0x4f0>
8000255c:	ee f8 ff 78 	ld.w	r8,r7[-136]
80002560:	70 19       	ld.w	r9,r8[0x4]
80002562:	ee f8 ff 7c 	ld.w	r8,r7[-132]
80002566:	12 38       	cp.w	r8,r9
80002568:	e0 88 00 09 	brls	8000257a <dip204_init+0x4fe>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
8000256c:	ee f9 ff 78 	ld.w	r9,r7[-136]
80002570:	30 18       	mov	r8,1
80002572:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80002576:	30 18       	mov	r8,1
80002578:	c0 28       	rjmp	8000257c <dip204_init+0x500>
    }
    return false;
8000257a:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
8000257c:	58 08       	cp.w	r8,0
8000257e:	ca b0       	breq	800024d4 <dip204_init+0x458>
  // Send "Function Set" Command (RE=0)
  dip204_write_byte(0x30);
80002580:	33 0c       	mov	r12,48
80002582:	f0 1f 01 73 	mcall	80002b4c <dip204_init+0xad0>
  // Wait for command execution
  delay_ms(1);
80002586:	f0 1f 01 6f 	mcall	80002b40 <dip204_init+0xac4>
8000258a:	18 99       	mov	r9,r12
8000258c:	30 18       	mov	r8,1
8000258e:	ef 48 ff 84 	st.w	r7[-124],r8
80002592:	ef 49 ff 80 	st.w	r7[-128],r9
80002596:	ee f8 ff 84 	ld.w	r8,r7[-124]
8000259a:	ef 48 ff 8c 	st.w	r7[-116],r8
8000259e:	ee f8 ff 80 	ld.w	r8,r7[-128]
800025a2:	ef 48 ff 88 	st.w	r7[-120],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
800025a6:	ee fb ff 8c 	ld.w	r11,r7[-116]
800025aa:	ef 4b fe 80 	st.w	r7[-384],r11
800025ae:	30 0a       	mov	r10,0
800025b0:	ef 4a fe 7c 	st.w	r7[-388],r10
800025b4:	ee f9 ff 88 	ld.w	r9,r7[-120]
800025b8:	ef 49 fe 78 	st.w	r7[-392],r9
800025bc:	30 08       	mov	r8,0
800025be:	ef 48 fe 74 	st.w	r7[-396],r8
800025c2:	ee f9 fe 7c 	ld.w	r9,r7[-388]
800025c6:	ee fc fe 78 	ld.w	r12,r7[-392]
800025ca:	b9 39       	mul	r9,r12
800025cc:	ee f8 fe 74 	ld.w	r8,r7[-396]
800025d0:	ee fb fe 80 	ld.w	r11,r7[-384]
800025d4:	b7 38       	mul	r8,r11
800025d6:	10 09       	add	r9,r8
800025d8:	ee f8 fe 80 	ld.w	r8,r7[-384]
800025dc:	ee fc fe 78 	ld.w	r12,r7[-392]
800025e0:	f0 0c 06 4a 	mulu.d	r10,r8,r12
800025e4:	16 09       	add	r9,r11
800025e6:	12 9b       	mov	r11,r9
800025e8:	e0 68 03 e7 	mov	r8,999
800025ec:	30 09       	mov	r9,0
800025ee:	10 0a       	add	r10,r8
800025f0:	f6 09 00 4b 	adc	r11,r11,r9
800025f4:	e0 68 03 e8 	mov	r8,1000
800025f8:	30 09       	mov	r9,0
800025fa:	f0 1f 01 53 	mcall	80002b44 <dip204_init+0xac8>
800025fe:	14 98       	mov	r8,r10
80002600:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
80002602:	ef 48 ff 94 	st.w	r7[-108],r8
80002606:	ee c8 01 20 	sub	r8,r7,288
8000260a:	ef 48 ff 90 	st.w	r7[-112],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000260e:	e1 b8 00 42 	mfsr	r8,0x108
80002612:	10 99       	mov	r9,r8
80002614:	ee f8 ff 90 	ld.w	r8,r7[-112]
80002618:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000261a:	ee f8 ff 90 	ld.w	r8,r7[-112]
8000261e:	70 09       	ld.w	r9,r8[0x0]
80002620:	ee f8 ff 94 	ld.w	r8,r7[-108]
80002624:	10 09       	add	r9,r8
80002626:	ee f8 ff 90 	ld.w	r8,r7[-112]
8000262a:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
8000262c:	ee f9 ff 90 	ld.w	r9,r7[-112]
80002630:	30 08       	mov	r8,0
80002632:	f3 68 00 08 	st.b	r9[8],r8
80002636:	ee c8 01 20 	sub	r8,r7,288
8000263a:	ef 48 ff 98 	st.w	r7[-104],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000263e:	e1 b8 00 42 	mfsr	r8,0x108
80002642:	ef 48 ff 9c 	st.w	r7[-100],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80002646:	ee f8 ff 98 	ld.w	r8,r7[-104]
8000264a:	f1 39 00 08 	ld.ub	r9,r8[8]
8000264e:	30 28       	mov	r8,2
80002650:	f0 09 18 00 	cp.b	r9,r8
80002654:	c0 31       	brne	8000265a <dip204_init+0x5de>
    return false;
80002656:	30 08       	mov	r8,0
80002658:	c4 38       	rjmp	800026de <dip204_init+0x662>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
8000265a:	ee f8 ff 98 	ld.w	r8,r7[-104]
8000265e:	f1 39 00 08 	ld.ub	r9,r8[8]
80002662:	30 18       	mov	r8,1
80002664:	f0 09 18 00 	cp.b	r9,r8
80002668:	c0 31       	brne	8000266e <dip204_init+0x5f2>
    return true;
8000266a:	30 18       	mov	r8,1
8000266c:	c3 98       	rjmp	800026de <dip204_init+0x662>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000266e:	ee f8 ff 98 	ld.w	r8,r7[-104]
80002672:	70 09       	ld.w	r9,r8[0x0]
80002674:	ee f8 ff 98 	ld.w	r8,r7[-104]
80002678:	70 18       	ld.w	r8,r8[0x4]
8000267a:	10 39       	cp.w	r9,r8
8000267c:	e0 88 00 1a 	brls	800026b0 <dip204_init+0x634>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002680:	ee f8 ff 98 	ld.w	r8,r7[-104]
80002684:	70 08       	ld.w	r8,r8[0x0]
80002686:	ee f9 ff 9c 	ld.w	r9,r7[-100]
8000268a:	10 39       	cp.w	r9,r8
8000268c:	c1 02       	brcc	800026ac <dip204_init+0x630>
8000268e:	ee f8 ff 98 	ld.w	r8,r7[-104]
80002692:	70 18       	ld.w	r8,r8[0x4]
80002694:	ee f9 ff 9c 	ld.w	r9,r7[-100]
80002698:	10 39       	cp.w	r9,r8
8000269a:	e0 88 00 09 	brls	800026ac <dip204_init+0x630>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
8000269e:	ee f9 ff 98 	ld.w	r9,r7[-104]
800026a2:	30 18       	mov	r8,1
800026a4:	f3 68 00 08 	st.b	r9[8],r8
      return true;
800026a8:	30 18       	mov	r8,1
800026aa:	c1 a8       	rjmp	800026de <dip204_init+0x662>
    }
    return false;
800026ac:	30 08       	mov	r8,0
800026ae:	c1 88       	rjmp	800026de <dip204_init+0x662>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800026b0:	ee f8 ff 98 	ld.w	r8,r7[-104]
800026b4:	70 08       	ld.w	r8,r8[0x0]
800026b6:	ee f9 ff 9c 	ld.w	r9,r7[-100]
800026ba:	10 39       	cp.w	r9,r8
800026bc:	c0 93       	brcs	800026ce <dip204_init+0x652>
800026be:	ee f8 ff 98 	ld.w	r8,r7[-104]
800026c2:	70 18       	ld.w	r8,r8[0x4]
800026c4:	ee f9 ff 9c 	ld.w	r9,r7[-100]
800026c8:	10 39       	cp.w	r9,r8
800026ca:	e0 88 00 09 	brls	800026dc <dip204_init+0x660>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
800026ce:	ee f9 ff 98 	ld.w	r9,r7[-104]
800026d2:	30 18       	mov	r8,1
800026d4:	f3 68 00 08 	st.b	r9[8],r8
      return true;
800026d8:	30 18       	mov	r8,1
800026da:	c0 28       	rjmp	800026de <dip204_init+0x662>
    }
    return false;
800026dc:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
800026de:	58 08       	cp.w	r8,0
800026e0:	ca b0       	breq	80002636 <dip204_init+0x5ba>
  // Send "Display On Command: Display On, Cursor On, Blink On"
  dip204_write_byte(0x0F);
800026e2:	30 fc       	mov	r12,15
800026e4:	f0 1f 01 1a 	mcall	80002b4c <dip204_init+0xad0>
  // Wait for command execution
  delay_ms(1);
800026e8:	f0 1f 01 16 	mcall	80002b40 <dip204_init+0xac4>
800026ec:	18 98       	mov	r8,r12
800026ee:	30 19       	mov	r9,1
800026f0:	ef 49 ff a4 	st.w	r7[-92],r9
800026f4:	ef 48 ff a0 	st.w	r7[-96],r8
800026f8:	ee f8 ff a4 	ld.w	r8,r7[-92]
800026fc:	ef 48 ff ac 	st.w	r7[-84],r8
80002700:	ee f8 ff a0 	ld.w	r8,r7[-96]
80002704:	ef 48 ff a8 	st.w	r7[-88],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
80002708:	ee fb ff ac 	ld.w	r11,r7[-84]
8000270c:	ef 4b fe 90 	st.w	r7[-368],r11
80002710:	30 0a       	mov	r10,0
80002712:	ef 4a fe 8c 	st.w	r7[-372],r10
80002716:	ee f9 ff a8 	ld.w	r9,r7[-88]
8000271a:	ef 49 fe 88 	st.w	r7[-376],r9
8000271e:	30 08       	mov	r8,0
80002720:	ef 48 fe 84 	st.w	r7[-380],r8
80002724:	ee fa fe 8c 	ld.w	r10,r7[-372]
80002728:	ee fc fe 88 	ld.w	r12,r7[-376]
8000272c:	b9 3a       	mul	r10,r12
8000272e:	ee f8 fe 84 	ld.w	r8,r7[-380]
80002732:	ee fb fe 90 	ld.w	r11,r7[-368]
80002736:	b7 38       	mul	r8,r11
80002738:	10 0a       	add	r10,r8
8000273a:	ee fc fe 90 	ld.w	r12,r7[-368]
8000273e:	ee fb fe 88 	ld.w	r11,r7[-376]
80002742:	f8 0b 06 48 	mulu.d	r8,r12,r11
80002746:	12 0a       	add	r10,r9
80002748:	14 99       	mov	r9,r10
8000274a:	e0 6a 03 e7 	mov	r10,999
8000274e:	30 0b       	mov	r11,0
80002750:	f0 0a 00 0a 	add	r10,r8,r10
80002754:	f2 0b 00 4b 	adc	r11,r9,r11
80002758:	e0 68 03 e8 	mov	r8,1000
8000275c:	30 09       	mov	r9,0
8000275e:	f0 1f 00 fa 	mcall	80002b44 <dip204_init+0xac8>
80002762:	14 98       	mov	r8,r10
80002764:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
80002766:	ef 48 ff b4 	st.w	r7[-76],r8
8000276a:	ee c8 01 14 	sub	r8,r7,276
8000276e:	ef 48 ff b0 	st.w	r7[-80],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002772:	e1 b8 00 42 	mfsr	r8,0x108
80002776:	10 99       	mov	r9,r8
80002778:	ee f8 ff b0 	ld.w	r8,r7[-80]
8000277c:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000277e:	ee f8 ff b0 	ld.w	r8,r7[-80]
80002782:	70 09       	ld.w	r9,r8[0x0]
80002784:	ee f8 ff b4 	ld.w	r8,r7[-76]
80002788:	10 09       	add	r9,r8
8000278a:	ee f8 ff b0 	ld.w	r8,r7[-80]
8000278e:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80002790:	ee f9 ff b0 	ld.w	r9,r7[-80]
80002794:	30 08       	mov	r8,0
80002796:	f3 68 00 08 	st.b	r9[8],r8
8000279a:	ee c8 01 14 	sub	r8,r7,276
8000279e:	ef 48 ff b8 	st.w	r7[-72],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800027a2:	e1 b8 00 42 	mfsr	r8,0x108
800027a6:	ef 48 ff bc 	st.w	r7[-68],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
800027aa:	ee f8 ff b8 	ld.w	r8,r7[-72]
800027ae:	f1 39 00 08 	ld.ub	r9,r8[8]
800027b2:	30 28       	mov	r8,2
800027b4:	f0 09 18 00 	cp.b	r9,r8
800027b8:	c0 31       	brne	800027be <dip204_init+0x742>
    return false;
800027ba:	30 08       	mov	r8,0
800027bc:	c4 38       	rjmp	80002842 <dip204_init+0x7c6>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
800027be:	ee f8 ff b8 	ld.w	r8,r7[-72]
800027c2:	f1 39 00 08 	ld.ub	r9,r8[8]
800027c6:	30 18       	mov	r8,1
800027c8:	f0 09 18 00 	cp.b	r9,r8
800027cc:	c0 31       	brne	800027d2 <dip204_init+0x756>
    return true;
800027ce:	30 18       	mov	r8,1
800027d0:	c3 98       	rjmp	80002842 <dip204_init+0x7c6>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800027d2:	ee f8 ff b8 	ld.w	r8,r7[-72]
800027d6:	70 09       	ld.w	r9,r8[0x0]
800027d8:	ee f8 ff b8 	ld.w	r8,r7[-72]
800027dc:	70 18       	ld.w	r8,r8[0x4]
800027de:	10 39       	cp.w	r9,r8
800027e0:	e0 88 00 1a 	brls	80002814 <dip204_init+0x798>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800027e4:	ee f8 ff b8 	ld.w	r8,r7[-72]
800027e8:	70 08       	ld.w	r8,r8[0x0]
800027ea:	ee f9 ff bc 	ld.w	r9,r7[-68]
800027ee:	10 39       	cp.w	r9,r8
800027f0:	c1 02       	brcc	80002810 <dip204_init+0x794>
800027f2:	ee f8 ff b8 	ld.w	r8,r7[-72]
800027f6:	70 18       	ld.w	r8,r8[0x4]
800027f8:	ee f9 ff bc 	ld.w	r9,r7[-68]
800027fc:	10 39       	cp.w	r9,r8
800027fe:	e0 88 00 09 	brls	80002810 <dip204_init+0x794>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80002802:	ee f9 ff b8 	ld.w	r9,r7[-72]
80002806:	30 18       	mov	r8,1
80002808:	f3 68 00 08 	st.b	r9[8],r8
      return true;
8000280c:	30 18       	mov	r8,1
8000280e:	c1 a8       	rjmp	80002842 <dip204_init+0x7c6>
    }
    return false;
80002810:	30 08       	mov	r8,0
80002812:	c1 88       	rjmp	80002842 <dip204_init+0x7c6>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002814:	ee f8 ff b8 	ld.w	r8,r7[-72]
80002818:	70 08       	ld.w	r8,r8[0x0]
8000281a:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000281e:	10 39       	cp.w	r9,r8
80002820:	c0 93       	brcs	80002832 <dip204_init+0x7b6>
80002822:	ee f8 ff b8 	ld.w	r8,r7[-72]
80002826:	70 18       	ld.w	r8,r8[0x4]
80002828:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000282c:	10 39       	cp.w	r9,r8
8000282e:	e0 88 00 09 	brls	80002840 <dip204_init+0x7c4>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80002832:	ee f9 ff b8 	ld.w	r9,r7[-72]
80002836:	30 18       	mov	r8,1
80002838:	f3 68 00 08 	st.b	r9[8],r8
      return true;
8000283c:	30 18       	mov	r8,1
8000283e:	c0 28       	rjmp	80002842 <dip204_init+0x7c6>
    }
    return false;
80002840:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
80002842:	58 08       	cp.w	r8,0
80002844:	ca b0       	breq	8000279a <dip204_init+0x71e>
  // Send "Display Clear" Command
  dip204_write_byte(0x01);
80002846:	30 1c       	mov	r12,1
80002848:	f0 1f 00 c1 	mcall	80002b4c <dip204_init+0xad0>
  // Wait for command execution
  delay_ms(5);
8000284c:	f0 1f 00 bd 	mcall	80002b40 <dip204_init+0xac4>
80002850:	18 98       	mov	r8,r12
80002852:	30 59       	mov	r9,5
80002854:	ef 49 ff c4 	st.w	r7[-60],r9
80002858:	ef 48 ff c0 	st.w	r7[-64],r8
8000285c:	ee f8 ff c4 	ld.w	r8,r7[-60]
80002860:	ef 48 ff cc 	st.w	r7[-52],r8
80002864:	ee f8 ff c0 	ld.w	r8,r7[-64]
80002868:	ef 48 ff c8 	st.w	r7[-56],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
8000286c:	ee fa ff cc 	ld.w	r10,r7[-52]
80002870:	ef 4a fe a0 	st.w	r7[-352],r10
80002874:	30 09       	mov	r9,0
80002876:	ef 49 fe 9c 	st.w	r7[-356],r9
8000287a:	ee f8 ff c8 	ld.w	r8,r7[-56]
8000287e:	ef 48 fe 98 	st.w	r7[-360],r8
80002882:	30 0c       	mov	r12,0
80002884:	ef 4c fe 94 	st.w	r7[-364],r12
80002888:	ee fa fe 9c 	ld.w	r10,r7[-356]
8000288c:	ee fb fe 98 	ld.w	r11,r7[-360]
80002890:	b7 3a       	mul	r10,r11
80002892:	ee f8 fe 94 	ld.w	r8,r7[-364]
80002896:	ee f9 fe a0 	ld.w	r9,r7[-352]
8000289a:	b3 38       	mul	r8,r9
8000289c:	10 0a       	add	r10,r8
8000289e:	ee fc fe a0 	ld.w	r12,r7[-352]
800028a2:	ee fb fe 98 	ld.w	r11,r7[-360]
800028a6:	f8 0b 06 48 	mulu.d	r8,r12,r11
800028aa:	12 0a       	add	r10,r9
800028ac:	14 99       	mov	r9,r10
800028ae:	e0 6a 03 e7 	mov	r10,999
800028b2:	30 0b       	mov	r11,0
800028b4:	f0 0a 00 0a 	add	r10,r8,r10
800028b8:	f2 0b 00 4b 	adc	r11,r9,r11
800028bc:	e0 68 03 e8 	mov	r8,1000
800028c0:	30 09       	mov	r9,0
800028c2:	f0 1f 00 a1 	mcall	80002b44 <dip204_init+0xac8>
800028c6:	14 98       	mov	r8,r10
800028c8:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
800028ca:	ef 48 ff d4 	st.w	r7[-44],r8
800028ce:	ee c8 01 08 	sub	r8,r7,264
800028d2:	ef 48 ff d0 	st.w	r7[-48],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800028d6:	e1 b8 00 42 	mfsr	r8,0x108
800028da:	10 99       	mov	r9,r8
800028dc:	ee f8 ff d0 	ld.w	r8,r7[-48]
800028e0:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800028e2:	ee f8 ff d0 	ld.w	r8,r7[-48]
800028e6:	70 09       	ld.w	r9,r8[0x0]
800028e8:	ee f8 ff d4 	ld.w	r8,r7[-44]
800028ec:	10 09       	add	r9,r8
800028ee:	ee f8 ff d0 	ld.w	r8,r7[-48]
800028f2:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
800028f4:	ee f9 ff d0 	ld.w	r9,r7[-48]
800028f8:	30 08       	mov	r8,0
800028fa:	f3 68 00 08 	st.b	r9[8],r8
800028fe:	ee c8 01 08 	sub	r8,r7,264
80002902:	ef 48 ff d8 	st.w	r7[-40],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002906:	e1 b8 00 42 	mfsr	r8,0x108
8000290a:	ef 48 ff dc 	st.w	r7[-36],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
8000290e:	ee f8 ff d8 	ld.w	r8,r7[-40]
80002912:	f1 39 00 08 	ld.ub	r9,r8[8]
80002916:	30 28       	mov	r8,2
80002918:	f0 09 18 00 	cp.b	r9,r8
8000291c:	c0 31       	brne	80002922 <dip204_init+0x8a6>
    return false;
8000291e:	30 08       	mov	r8,0
80002920:	c4 38       	rjmp	800029a6 <dip204_init+0x92a>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80002922:	ee f8 ff d8 	ld.w	r8,r7[-40]
80002926:	f1 39 00 08 	ld.ub	r9,r8[8]
8000292a:	30 18       	mov	r8,1
8000292c:	f0 09 18 00 	cp.b	r9,r8
80002930:	c0 31       	brne	80002936 <dip204_init+0x8ba>
    return true;
80002932:	30 18       	mov	r8,1
80002934:	c3 98       	rjmp	800029a6 <dip204_init+0x92a>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002936:	ee f8 ff d8 	ld.w	r8,r7[-40]
8000293a:	70 09       	ld.w	r9,r8[0x0]
8000293c:	ee f8 ff d8 	ld.w	r8,r7[-40]
80002940:	70 18       	ld.w	r8,r8[0x4]
80002942:	10 39       	cp.w	r9,r8
80002944:	e0 88 00 1a 	brls	80002978 <dip204_init+0x8fc>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002948:	ee f8 ff d8 	ld.w	r8,r7[-40]
8000294c:	70 08       	ld.w	r8,r8[0x0]
8000294e:	ee f9 ff dc 	ld.w	r9,r7[-36]
80002952:	10 39       	cp.w	r9,r8
80002954:	c1 02       	brcc	80002974 <dip204_init+0x8f8>
80002956:	ee f8 ff d8 	ld.w	r8,r7[-40]
8000295a:	70 18       	ld.w	r8,r8[0x4]
8000295c:	ee f9 ff dc 	ld.w	r9,r7[-36]
80002960:	10 39       	cp.w	r9,r8
80002962:	e0 88 00 09 	brls	80002974 <dip204_init+0x8f8>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80002966:	ee f9 ff d8 	ld.w	r9,r7[-40]
8000296a:	30 18       	mov	r8,1
8000296c:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80002970:	30 18       	mov	r8,1
80002972:	c1 a8       	rjmp	800029a6 <dip204_init+0x92a>
    }
    return false;
80002974:	30 08       	mov	r8,0
80002976:	c1 88       	rjmp	800029a6 <dip204_init+0x92a>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002978:	ee f8 ff d8 	ld.w	r8,r7[-40]
8000297c:	70 08       	ld.w	r8,r8[0x0]
8000297e:	ee f9 ff dc 	ld.w	r9,r7[-36]
80002982:	10 39       	cp.w	r9,r8
80002984:	c0 93       	brcs	80002996 <dip204_init+0x91a>
80002986:	ee f8 ff d8 	ld.w	r8,r7[-40]
8000298a:	70 18       	ld.w	r8,r8[0x4]
8000298c:	ee f9 ff dc 	ld.w	r9,r7[-36]
80002990:	10 39       	cp.w	r9,r8
80002992:	e0 88 00 09 	brls	800029a4 <dip204_init+0x928>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80002996:	ee f9 ff d8 	ld.w	r9,r7[-40]
8000299a:	30 18       	mov	r8,1
8000299c:	f3 68 00 08 	st.b	r9[8],r8
      return true;
800029a0:	30 18       	mov	r8,1
800029a2:	c0 28       	rjmp	800029a6 <dip204_init+0x92a>
    }
    return false;
800029a4:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
800029a6:	58 08       	cp.w	r8,0
800029a8:	ca b0       	breq	800028fe <dip204_init+0x882>
  // Send "Entry Mode Set Command: Increment Mode, Entire Shift off"
  dip204_write_byte(0x06);
800029aa:	30 6c       	mov	r12,6
800029ac:	f0 1f 00 68 	mcall	80002b4c <dip204_init+0xad0>
  // Wait for command execution
  delay_ms(1);
800029b0:	f0 1f 00 64 	mcall	80002b40 <dip204_init+0xac4>
800029b4:	18 98       	mov	r8,r12
800029b6:	30 19       	mov	r9,1
800029b8:	ef 49 ff e4 	st.w	r7[-28],r9
800029bc:	ef 48 ff e0 	st.w	r7[-32],r8
800029c0:	ee f8 ff e4 	ld.w	r8,r7[-28]
800029c4:	ef 48 ff ec 	st.w	r7[-20],r8
800029c8:	ee f8 ff e0 	ld.w	r8,r7[-32]
800029cc:	ef 48 ff e8 	st.w	r7[-24],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
800029d0:	ee fa ff ec 	ld.w	r10,r7[-20]
800029d4:	ef 4a fe b0 	st.w	r7[-336],r10
800029d8:	30 09       	mov	r9,0
800029da:	ef 49 fe ac 	st.w	r7[-340],r9
800029de:	ee f8 ff e8 	ld.w	r8,r7[-24]
800029e2:	ef 48 fe a8 	st.w	r7[-344],r8
800029e6:	30 0c       	mov	r12,0
800029e8:	ef 4c fe a4 	st.w	r7[-348],r12
800029ec:	ee fa fe ac 	ld.w	r10,r7[-340]
800029f0:	ee fb fe a8 	ld.w	r11,r7[-344]
800029f4:	b7 3a       	mul	r10,r11
800029f6:	ee f8 fe a4 	ld.w	r8,r7[-348]
800029fa:	ee f9 fe b0 	ld.w	r9,r7[-336]
800029fe:	b3 38       	mul	r8,r9
80002a00:	10 0a       	add	r10,r8
80002a02:	ee fc fe b0 	ld.w	r12,r7[-336]
80002a06:	ee fb fe a8 	ld.w	r11,r7[-344]
80002a0a:	f8 0b 06 48 	mulu.d	r8,r12,r11
80002a0e:	12 0a       	add	r10,r9
80002a10:	14 99       	mov	r9,r10
80002a12:	e0 6a 03 e7 	mov	r10,999
80002a16:	30 0b       	mov	r11,0
80002a18:	f0 0a 00 0a 	add	r10,r8,r10
80002a1c:	f2 0b 00 4b 	adc	r11,r9,r11
80002a20:	e0 68 03 e8 	mov	r8,1000
80002a24:	30 09       	mov	r9,0
80002a26:	f0 1f 00 48 	mcall	80002b44 <dip204_init+0xac8>
80002a2a:	14 98       	mov	r8,r10
80002a2c:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
80002a2e:	ef 48 ff f4 	st.w	r7[-12],r8
80002a32:	ee c8 00 fc 	sub	r8,r7,252
80002a36:	ef 48 ff f0 	st.w	r7[-16],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002a3a:	e1 b8 00 42 	mfsr	r8,0x108
80002a3e:	10 99       	mov	r9,r8
80002a40:	ee f8 ff f0 	ld.w	r8,r7[-16]
80002a44:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002a46:	ee f8 ff f0 	ld.w	r8,r7[-16]
80002a4a:	70 09       	ld.w	r9,r8[0x0]
80002a4c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002a50:	10 09       	add	r9,r8
80002a52:	ee f8 ff f0 	ld.w	r8,r7[-16]
80002a56:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80002a58:	ee f9 ff f0 	ld.w	r9,r7[-16]
80002a5c:	30 08       	mov	r8,0
80002a5e:	f3 68 00 08 	st.b	r9[8],r8
80002a62:	ee c8 00 fc 	sub	r8,r7,252
80002a66:	ef 48 ff f8 	st.w	r7[-8],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002a6a:	e1 b8 00 42 	mfsr	r8,0x108
80002a6e:	ef 48 ff fc 	st.w	r7[-4],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80002a72:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002a76:	f1 39 00 08 	ld.ub	r9,r8[8]
80002a7a:	30 28       	mov	r8,2
80002a7c:	f0 09 18 00 	cp.b	r9,r8
80002a80:	c0 31       	brne	80002a86 <dip204_init+0xa0a>
    return false;
80002a82:	30 08       	mov	r8,0
80002a84:	c4 38       	rjmp	80002b0a <dip204_init+0xa8e>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80002a86:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002a8a:	f1 39 00 08 	ld.ub	r9,r8[8]
80002a8e:	30 18       	mov	r8,1
80002a90:	f0 09 18 00 	cp.b	r9,r8
80002a94:	c0 31       	brne	80002a9a <dip204_init+0xa1e>
    return true;
80002a96:	30 18       	mov	r8,1
80002a98:	c3 98       	rjmp	80002b0a <dip204_init+0xa8e>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002a9a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002a9e:	70 09       	ld.w	r9,r8[0x0]
80002aa0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002aa4:	70 18       	ld.w	r8,r8[0x4]
80002aa6:	10 39       	cp.w	r9,r8
80002aa8:	e0 88 00 1a 	brls	80002adc <dip204_init+0xa60>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002aac:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002ab0:	70 08       	ld.w	r8,r8[0x0]
80002ab2:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002ab6:	10 39       	cp.w	r9,r8
80002ab8:	c1 02       	brcc	80002ad8 <dip204_init+0xa5c>
80002aba:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002abe:	70 18       	ld.w	r8,r8[0x4]
80002ac0:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002ac4:	10 39       	cp.w	r9,r8
80002ac6:	e0 88 00 09 	brls	80002ad8 <dip204_init+0xa5c>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80002aca:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002ace:	30 18       	mov	r8,1
80002ad0:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80002ad4:	30 18       	mov	r8,1
80002ad6:	c1 a8       	rjmp	80002b0a <dip204_init+0xa8e>
    }
    return false;
80002ad8:	30 08       	mov	r8,0
80002ada:	c1 88       	rjmp	80002b0a <dip204_init+0xa8e>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002adc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002ae0:	70 08       	ld.w	r8,r8[0x0]
80002ae2:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002ae6:	10 39       	cp.w	r9,r8
80002ae8:	c0 93       	brcs	80002afa <dip204_init+0xa7e>
80002aea:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002aee:	70 18       	ld.w	r8,r8[0x4]
80002af0:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002af4:	10 39       	cp.w	r9,r8
80002af6:	e0 88 00 09 	brls	80002b08 <dip204_init+0xa8c>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80002afa:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002afe:	30 18       	mov	r8,1
80002b00:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80002b04:	30 18       	mov	r8,1
80002b06:	c0 28       	rjmp	80002b0a <dip204_init+0xa8e>
    }
    return false;
80002b08:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
80002b0a:	58 08       	cp.w	r8,0
80002b0c:	ca b0       	breq	80002a62 <dip204_init+0x9e6>
  dip204_wait_busy();
80002b0e:	f0 1f 00 11 	mcall	80002b50 <dip204_init+0xad4>
  // unselect chip
  dip204_unselect();
80002b12:	f0 1f 00 11 	mcall	80002b54 <dip204_init+0xad8>
}
80002b16:	29 5d       	sub	sp,-428
80002b18:	e3 cd 80 8f 	ldm	sp++,r0-r3,r7,pc
80002b1c:	00 00       	add	r0,r0
80002b1e:	00 08       	add	r8,r0
80002b20:	80 00       	ld.sh	r0,r0[0x0]
80002b22:	da 4c       	*unknown*
80002b24:	80 00       	ld.sh	r0,r0[0x0]
80002b26:	76 c4       	ld.w	r4,r11[0x30]
80002b28:	00 00       	add	r0,r0
80002b2a:	05 e8       	ld.ub	r8,r2[0x6]
80002b2c:	00 00       	add	r0,r0
80002b2e:	05 ec       	ld.ub	r12,r2[0x6]
80002b30:	80 00       	ld.sh	r0,r0[0x0]
80002b32:	77 58       	ld.w	r8,r11[0x54]
80002b34:	80 00       	ld.sh	r0,r0[0x0]
80002b36:	77 e0       	ld.w	r0,r11[0x78]
80002b38:	80 00       	ld.sh	r0,r0[0x0]
80002b3a:	dd 72       	popm	r0-r9,r11,lr-pc
80002b3c:	80 00       	ld.sh	r0,r0[0x0]
80002b3e:	dd 0a       	popm	r11,pc,r12=-1
80002b40:	80 00       	ld.sh	r0,r0[0x0]
80002b42:	20 64       	sub	r4,6
80002b44:	80 00       	ld.sh	r0,r0[0x0]
80002b46:	f1 b0       	*unknown*
80002b48:	80 00       	ld.sh	r0,r0[0x0]
80002b4a:	2e 00       	sub	r0,-32
80002b4c:	80 00       	ld.sh	r0,r0[0x0]
80002b4e:	2e 30       	sub	r0,-29
80002b50:	80 00       	ld.sh	r0,r0[0x0]
80002b52:	2f 14       	sub	r4,-15
80002b54:	80 00       	ld.sh	r0,r0[0x0]
80002b56:	2e 18       	sub	r8,-31

80002b58 <dip204_hide_cursor>:
  dip204_unselect();
}


void dip204_hide_cursor(void)
{
80002b58:	eb cd 40 80 	pushm	r7,lr
80002b5c:	1a 97       	mov	r7,sp
  /* select the LCD chip */
  dip204_select();
80002b5e:	f0 1f 00 08 	mcall	80002b7c <dip204_hide_cursor+0x24>
  /* Send Command Start Byte */
  dip204_write_byte(DIP204_WRITE_COMMAND);
80002b62:	e0 6c 00 f8 	mov	r12,248
80002b66:	f0 1f 00 07 	mcall	80002b80 <dip204_hide_cursor+0x28>
  /* Send "Display On Command: Display On, Cursor On, Blink On" */
  dip204_write_byte(0x0C);
80002b6a:	30 cc       	mov	r12,12
80002b6c:	f0 1f 00 05 	mcall	80002b80 <dip204_hide_cursor+0x28>
  dip204_wait_busy();
80002b70:	f0 1f 00 05 	mcall	80002b84 <dip204_hide_cursor+0x2c>
  /* unselect chip */
  dip204_unselect();
80002b74:	f0 1f 00 05 	mcall	80002b88 <dip204_hide_cursor+0x30>
}
80002b78:	e3 cd 80 80 	ldm	sp++,r7,pc
80002b7c:	80 00       	ld.sh	r0,r0[0x0]
80002b7e:	2e 00       	sub	r0,-32
80002b80:	80 00       	ld.sh	r0,r0[0x0]
80002b82:	2e 30       	sub	r0,-29
80002b84:	80 00       	ld.sh	r0,r0[0x0]
80002b86:	2f 14       	sub	r4,-15
80002b88:	80 00       	ld.sh	r0,r0[0x0]
80002b8a:	2e 18       	sub	r8,-31

80002b8c <dip204_set_cursor_position>:
  dip204_set_cursor_position(column, line);
}


void dip204_set_cursor_position(unsigned char column, unsigned char line)
{
80002b8c:	eb cd 40 80 	pushm	r7,lr
80002b90:	1a 97       	mov	r7,sp
80002b92:	20 3d       	sub	sp,12
80002b94:	18 99       	mov	r9,r12
80002b96:	16 98       	mov	r8,r11
80002b98:	ef 69 ff f8 	st.b	r7[-8],r9
80002b9c:	ef 68 ff f4 	st.b	r7[-12],r8
  unsigned char address = 0;
80002ba0:	30 08       	mov	r8,0
80002ba2:	ef 68 ff ff 	st.b	r7[-1],r8

  dip204_select();
80002ba6:	f0 1f 00 18 	mcall	80002c04 <dip204_set_cursor_position+0x78>
  if ((column <= 20) && (line <= 4))
80002baa:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80002bae:	31 48       	mov	r8,20
80002bb0:	f0 09 18 00 	cp.b	r9,r8
80002bb4:	e0 8b 00 17 	brhi	80002be2 <dip204_set_cursor_position+0x56>
80002bb8:	ef 39 ff f4 	ld.ub	r9,r7[-12]
80002bbc:	30 48       	mov	r8,4
80002bbe:	f0 09 18 00 	cp.b	r9,r8
80002bc2:	e0 8b 00 10 	brhi	80002be2 <dip204_set_cursor_position+0x56>
  {
    /* Calculate DDRAM address from line and row values */
    address = ( (line-1) * 32 ) + ( column-1 ) + 128;
80002bc6:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80002bca:	20 18       	sub	r8,1
80002bcc:	5c 58       	castu.b	r8
80002bce:	a5 78       	lsl	r8,0x5
80002bd0:	5c 58       	castu.b	r8
80002bd2:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80002bd6:	f2 08 00 08 	add	r8,r9,r8
80002bda:	5c 58       	castu.b	r8
80002bdc:	28 18       	sub	r8,-127
80002bde:	ef 68 ff ff 	st.b	r7[-1],r8
  }
  /* Send Command Start Byte */
  dip204_write_byte(DIP204_WRITE_COMMAND);
80002be2:	e0 6c 00 f8 	mov	r12,248
80002be6:	f0 1f 00 09 	mcall	80002c08 <dip204_set_cursor_position+0x7c>
  /* Send Address lower Nibble */
  dip204_write_byte(address);
80002bea:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80002bee:	10 9c       	mov	r12,r8
80002bf0:	f0 1f 00 06 	mcall	80002c08 <dip204_set_cursor_position+0x7c>
  dip204_wait_busy();
80002bf4:	f0 1f 00 06 	mcall	80002c0c <dip204_set_cursor_position+0x80>
  dip204_unselect();
80002bf8:	f0 1f 00 06 	mcall	80002c10 <dip204_set_cursor_position+0x84>
}
80002bfc:	2f dd       	sub	sp,-12
80002bfe:	e3 cd 80 80 	ldm	sp++,r7,pc
80002c02:	00 00       	add	r0,r0
80002c04:	80 00       	ld.sh	r0,r0[0x0]
80002c06:	2e 00       	sub	r0,-32
80002c08:	80 00       	ld.sh	r0,r0[0x0]
80002c0a:	2e 30       	sub	r0,-29
80002c0c:	80 00       	ld.sh	r0,r0[0x0]
80002c0e:	2f 14       	sub	r4,-15
80002c10:	80 00       	ld.sh	r0,r0[0x0]
80002c12:	2e 18       	sub	r8,-31

80002c14 <dip204_clear_display>:


void dip204_clear_display(void)
{
80002c14:	eb cd 40 8f 	pushm	r0-r3,r7,lr
80002c18:	1a 97       	mov	r7,sp
80002c1a:	20 bd       	sub	sp,44
  dip204_select();
80002c1c:	f0 1f 00 57 	mcall	80002d78 <dip204_clear_display+0x164>
  /* Send Command Start Byte */
  dip204_write_byte(DIP204_WRITE_COMMAND);
80002c20:	e0 6c 00 f8 	mov	r12,248
80002c24:	f0 1f 00 56 	mcall	80002d7c <dip204_clear_display+0x168>
  /* Send Display Clear Command */
  dip204_write_byte(0x01);
80002c28:	30 1c       	mov	r12,1
80002c2a:	f0 1f 00 55 	mcall	80002d7c <dip204_clear_display+0x168>
  /* Wait for command execution */
  delay_ms(4);
80002c2e:	f0 1f 00 55 	mcall	80002d80 <dip204_clear_display+0x16c>
80002c32:	18 98       	mov	r8,r12
80002c34:	30 49       	mov	r9,4
80002c36:	ef 49 ff e4 	st.w	r7[-28],r9
80002c3a:	ef 48 ff e0 	st.w	r7[-32],r8
80002c3e:	ee f8 ff e4 	ld.w	r8,r7[-28]
80002c42:	ef 48 ff ec 	st.w	r7[-20],r8
80002c46:	ee f8 ff e0 	ld.w	r8,r7[-32]
80002c4a:	ef 48 ff e8 	st.w	r7[-24],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
80002c4e:	ee f0 ff ec 	ld.w	r0,r7[-20]
80002c52:	30 01       	mov	r1,0
80002c54:	ee f2 ff e8 	ld.w	r2,r7[-24]
80002c58:	30 03       	mov	r3,0
80002c5a:	e2 02 02 4a 	mul	r10,r1,r2
80002c5e:	e6 00 02 48 	mul	r8,r3,r0
80002c62:	10 0a       	add	r10,r8
80002c64:	e0 02 06 48 	mulu.d	r8,r0,r2
80002c68:	12 0a       	add	r10,r9
80002c6a:	14 99       	mov	r9,r10
80002c6c:	e0 6a 03 e7 	mov	r10,999
80002c70:	30 0b       	mov	r11,0
80002c72:	f0 0a 00 0a 	add	r10,r8,r10
80002c76:	f2 0b 00 4b 	adc	r11,r9,r11
80002c7a:	e0 68 03 e8 	mov	r8,1000
80002c7e:	30 09       	mov	r9,0
80002c80:	f0 1f 00 41 	mcall	80002d84 <dip204_clear_display+0x170>
80002c84:	14 98       	mov	r8,r10
80002c86:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
80002c88:	ef 48 ff f4 	st.w	r7[-12],r8
80002c8c:	ee c8 00 2c 	sub	r8,r7,44
80002c90:	ef 48 ff f0 	st.w	r7[-16],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002c94:	e1 b8 00 42 	mfsr	r8,0x108
80002c98:	10 99       	mov	r9,r8
80002c9a:	ee f8 ff f0 	ld.w	r8,r7[-16]
80002c9e:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002ca0:	ee f8 ff f0 	ld.w	r8,r7[-16]
80002ca4:	70 09       	ld.w	r9,r8[0x0]
80002ca6:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002caa:	10 09       	add	r9,r8
80002cac:	ee f8 ff f0 	ld.w	r8,r7[-16]
80002cb0:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80002cb2:	ee f9 ff f0 	ld.w	r9,r7[-16]
80002cb6:	30 08       	mov	r8,0
80002cb8:	f3 68 00 08 	st.b	r9[8],r8
80002cbc:	ee c8 00 2c 	sub	r8,r7,44
80002cc0:	ef 48 ff f8 	st.w	r7[-8],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002cc4:	e1 b8 00 42 	mfsr	r8,0x108
80002cc8:	ef 48 ff fc 	st.w	r7[-4],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80002ccc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002cd0:	f1 39 00 08 	ld.ub	r9,r8[8]
80002cd4:	30 28       	mov	r8,2
80002cd6:	f0 09 18 00 	cp.b	r9,r8
80002cda:	c0 31       	brne	80002ce0 <dip204_clear_display+0xcc>
    return false;
80002cdc:	30 08       	mov	r8,0
80002cde:	c4 38       	rjmp	80002d64 <dip204_clear_display+0x150>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80002ce0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002ce4:	f1 39 00 08 	ld.ub	r9,r8[8]
80002ce8:	30 18       	mov	r8,1
80002cea:	f0 09 18 00 	cp.b	r9,r8
80002cee:	c0 31       	brne	80002cf4 <dip204_clear_display+0xe0>
    return true;
80002cf0:	30 18       	mov	r8,1
80002cf2:	c3 98       	rjmp	80002d64 <dip204_clear_display+0x150>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002cf4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002cf8:	70 09       	ld.w	r9,r8[0x0]
80002cfa:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002cfe:	70 18       	ld.w	r8,r8[0x4]
80002d00:	10 39       	cp.w	r9,r8
80002d02:	e0 88 00 1a 	brls	80002d36 <dip204_clear_display+0x122>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002d06:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002d0a:	70 08       	ld.w	r8,r8[0x0]
80002d0c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002d10:	10 39       	cp.w	r9,r8
80002d12:	c1 02       	brcc	80002d32 <dip204_clear_display+0x11e>
80002d14:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002d18:	70 18       	ld.w	r8,r8[0x4]
80002d1a:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002d1e:	10 39       	cp.w	r9,r8
80002d20:	e0 88 00 09 	brls	80002d32 <dip204_clear_display+0x11e>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80002d24:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002d28:	30 18       	mov	r8,1
80002d2a:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80002d2e:	30 18       	mov	r8,1
80002d30:	c1 a8       	rjmp	80002d64 <dip204_clear_display+0x150>
    }
    return false;
80002d32:	30 08       	mov	r8,0
80002d34:	c1 88       	rjmp	80002d64 <dip204_clear_display+0x150>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002d36:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002d3a:	70 08       	ld.w	r8,r8[0x0]
80002d3c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002d40:	10 39       	cp.w	r9,r8
80002d42:	c0 93       	brcs	80002d54 <dip204_clear_display+0x140>
80002d44:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002d48:	70 18       	ld.w	r8,r8[0x4]
80002d4a:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002d4e:	10 39       	cp.w	r9,r8
80002d50:	e0 88 00 09 	brls	80002d62 <dip204_clear_display+0x14e>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80002d54:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002d58:	30 18       	mov	r8,1
80002d5a:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80002d5e:	30 18       	mov	r8,1
80002d60:	c0 28       	rjmp	80002d64 <dip204_clear_display+0x150>
    }
    return false;
80002d62:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
80002d64:	58 08       	cp.w	r8,0
80002d66:	ca b0       	breq	80002cbc <dip204_clear_display+0xa8>
  dip204_wait_busy();
80002d68:	f0 1f 00 08 	mcall	80002d88 <dip204_clear_display+0x174>
  dip204_unselect();
80002d6c:	f0 1f 00 08 	mcall	80002d8c <dip204_clear_display+0x178>
}
80002d70:	2f 5d       	sub	sp,-44
80002d72:	e3 cd 80 8f 	ldm	sp++,r0-r3,r7,pc
80002d76:	00 00       	add	r0,r0
80002d78:	80 00       	ld.sh	r0,r0[0x0]
80002d7a:	2e 00       	sub	r0,-32
80002d7c:	80 00       	ld.sh	r0,r0[0x0]
80002d7e:	2e 30       	sub	r0,-29
80002d80:	80 00       	ld.sh	r0,r0[0x0]
80002d82:	20 64       	sub	r4,6
80002d84:	80 00       	ld.sh	r0,r0[0x0]
80002d86:	f1 b0       	*unknown*
80002d88:	80 00       	ld.sh	r0,r0[0x0]
80002d8a:	2f 14       	sub	r4,-15
80002d8c:	80 00       	ld.sh	r0,r0[0x0]
80002d8e:	2e 18       	sub	r8,-31

80002d90 <dip204_write_string>:


void dip204_write_string(const char *string)
{
80002d90:	eb cd 40 80 	pushm	r7,lr
80002d94:	1a 97       	mov	r7,sp
80002d96:	20 2d       	sub	sp,8
80002d98:	ef 4c ff f8 	st.w	r7[-8],r12
  unsigned char i=0;
80002d9c:	30 08       	mov	r8,0
80002d9e:	ef 68 ff ff 	st.b	r7[-1],r8

  dip204_select();
80002da2:	f0 1f 00 14 	mcall	80002df0 <dip204_write_string+0x60>
  /* for all chars in string */
  while(string[i]!=0)
80002da6:	c1 68       	rjmp	80002dd2 <dip204_write_string+0x42>
  {
    /* Send Write Data Start Byte */
    dip204_write_byte(DIP204_WRITE_DATA);
80002da8:	e0 6c 00 fa 	mov	r12,250
80002dac:	f0 1f 00 12 	mcall	80002df4 <dip204_write_string+0x64>
    /* Send byte */
    dip204_write_byte(string[i]);
80002db0:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80002db4:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002db8:	f2 08 00 08 	add	r8,r9,r8
80002dbc:	11 88       	ld.ub	r8,r8[0x0]
80002dbe:	10 9c       	mov	r12,r8
80002dc0:	f0 1f 00 0d 	mcall	80002df4 <dip204_write_string+0x64>
    /* go to next char */
    i++;
80002dc4:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80002dc8:	2f f8       	sub	r8,-1
80002dca:	ef 68 ff ff 	st.b	r7[-1],r8
    dip204_wait_busy();
80002dce:	f0 1f 00 0b 	mcall	80002df8 <dip204_write_string+0x68>
{
  unsigned char i=0;

  dip204_select();
  /* for all chars in string */
  while(string[i]!=0)
80002dd2:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80002dd6:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002dda:	f2 08 00 08 	add	r8,r9,r8
80002dde:	11 88       	ld.ub	r8,r8[0x0]
80002de0:	58 08       	cp.w	r8,0
80002de2:	ce 31       	brne	80002da8 <dip204_write_string+0x18>
    dip204_write_byte(string[i]);
    /* go to next char */
    i++;
    dip204_wait_busy();
  }
  dip204_unselect();
80002de4:	f0 1f 00 06 	mcall	80002dfc <dip204_write_string+0x6c>
}
80002de8:	2f ed       	sub	sp,-8
80002dea:	e3 cd 80 80 	ldm	sp++,r7,pc
80002dee:	00 00       	add	r0,r0
80002df0:	80 00       	ld.sh	r0,r0[0x0]
80002df2:	2e 00       	sub	r0,-32
80002df4:	80 00       	ld.sh	r0,r0[0x0]
80002df6:	2e 30       	sub	r0,-29
80002df8:	80 00       	ld.sh	r0,r0[0x0]
80002dfa:	2f 14       	sub	r4,-15
80002dfc:	80 00       	ld.sh	r0,r0[0x0]
80002dfe:	2e 18       	sub	r8,-31

80002e00 <dip204_select>:

/*! \brief function to select the LCD
 *
 */
static void dip204_select(void)
{
80002e00:	eb cd 40 80 	pushm	r7,lr
80002e04:	1a 97       	mov	r7,sp
  spi_selectChip(DIP204_SPI, DIP204_SPI_NPCS);
80002e06:	30 2b       	mov	r11,2
80002e08:	fe 7c 28 00 	mov	r12,-55296
80002e0c:	f0 1f 00 02 	mcall	80002e14 <dip204_select+0x14>
}
80002e10:	e3 cd 80 80 	ldm	sp++,r7,pc
80002e14:	80 00       	ld.sh	r0,r0[0x0]
80002e16:	85 c0       	st.w	r2[0x30],r0

80002e18 <dip204_unselect>:

/*! \brief function to unselect the LCD
 *
 */
static void dip204_unselect(void)
{
80002e18:	eb cd 40 80 	pushm	r7,lr
80002e1c:	1a 97       	mov	r7,sp
#ifdef _ASSERT_ENABLE_
  spi_status =
#endif
  spi_unselectChip(DIP204_SPI, DIP204_SPI_NPCS);
80002e1e:	30 2b       	mov	r11,2
80002e20:	fe 7c 28 00 	mov	r12,-55296
80002e24:	f0 1f 00 02 	mcall	80002e2c <dip204_unselect+0x14>
  Assert( SPI_OK==spi_status );
}
80002e28:	e3 cd 80 80 	ldm	sp++,r7,pc
80002e2c:	80 00       	ld.sh	r0,r0[0x0]
80002e2e:	86 58       	ld.sh	r8,r3[0xa]

80002e30 <dip204_write_byte>:
 *
 *  \param  byte  Input. byte to write to the LCD (D7 .. D0)
 *
 */
static void dip204_write_byte(unsigned char byte)
{
80002e30:	eb cd 40 80 	pushm	r7,lr
80002e34:	1a 97       	mov	r7,sp
80002e36:	20 3d       	sub	sp,12
80002e38:	18 98       	mov	r8,r12
80002e3a:	ef 68 ff f4 	st.b	r7[-12],r8
  unsigned char reverse;

  switch (byte)
80002e3e:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80002e42:	f0 c8 00 f8 	sub	r8,r8,248
80002e46:	58 68       	cp.w	r8,6
80002e48:	e0 8b 00 10 	brhi	80002e68 <dip204_write_byte+0x38>
80002e4c:	30 19       	mov	r9,1
80002e4e:	f2 08 09 48 	lsl	r8,r9,r8
80002e52:	e2 18 00 55 	andl	r8,0x55,COH
80002e56:	c0 90       	breq	80002e68 <dip204_write_byte+0x38>
    {
      /* send D7 to D0 */
#ifdef _ASSERT_ENABLE_
      spi_status =
#endif
      spi_write(DIP204_SPI, byte);
80002e58:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80002e5c:	10 9b       	mov	r11,r8
80002e5e:	fe 7c 28 00 	mov	r12,-55296
80002e62:	f0 1f 00 15 	mcall	80002eb4 <dip204_write_byte+0x84>
      Assert( SPI_OK==spi_status );
      break;
80002e66:	c2 48       	rjmp	80002eae <dip204_write_byte+0x7e>
    }
    /* LSB first for all other data */
    default:
    {
      /* reverse byte */
      reverse = bit_reverse8(byte);
80002e68:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80002e6c:	ef 48 ff fc 	st.w	r7[-4],r8
80002e70:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002e74:	5c 98       	brev	r8
80002e76:	ef 48 ff fc 	st.w	r7[-4],r8
80002e7a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002e7e:	b9 88       	lsr	r8,0x18
80002e80:	ef 68 ff fb 	st.b	r7[-5],r8
      /* send D0 to D3 */
#ifdef _ASSERT_ENABLE_
      spi_status =
#endif
      spi_write(DIP204_SPI, (reverse & 0xF0));
80002e84:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80002e88:	e2 18 00 f0 	andl	r8,0xf0,COH
80002e8c:	10 9b       	mov	r11,r8
80002e8e:	fe 7c 28 00 	mov	r12,-55296
80002e92:	f0 1f 00 09 	mcall	80002eb4 <dip204_write_byte+0x84>
      Assert( SPI_OK==spi_status );
      /* send D4 to D7 */
#ifdef _ASSERT_ENABLE_
      spi_status =
#endif
      spi_write(DIP204_SPI, ((reverse << 4) & 0xF0));
80002e96:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80002e9a:	a5 68       	lsl	r8,0x4
80002e9c:	5c 88       	casts.h	r8
80002e9e:	5c 78       	castu.h	r8
80002ea0:	f1 d8 c0 08 	bfextu	r8,r8,0x0,0x8
80002ea4:	10 9b       	mov	r11,r8
80002ea6:	fe 7c 28 00 	mov	r12,-55296
80002eaa:	f0 1f 00 03 	mcall	80002eb4 <dip204_write_byte+0x84>
      Assert( SPI_OK==spi_status );
      break;
    }
  }
}
80002eae:	2f dd       	sub	sp,-12
80002eb0:	e3 cd 80 80 	ldm	sp++,r7,pc
80002eb4:	80 00       	ld.sh	r0,r0[0x0]
80002eb6:	88 62       	ld.sh	r2,r4[0xc]

80002eb8 <dip204_read_byte>:
 *
 *  \param  byte  Input. byte read from the LCD (D7 .. D0)
 *
 */
static void dip204_read_byte(unsigned char *byte)
{
80002eb8:	eb cd 40 80 	pushm	r7,lr
80002ebc:	1a 97       	mov	r7,sp
80002ebe:	20 3d       	sub	sp,12
80002ec0:	ef 4c ff f4 	st.w	r7[-12],r12
  unsigned short reverse = 0x00;
80002ec4:	30 08       	mov	r8,0
80002ec6:	ef 58 ff fa 	st.h	r7[-6],r8

  /* dummy write */
#ifdef _ASSERT_ENABLE_
  spi_status =
#endif
  spi_write(DIP204_SPI, 0x00);
80002eca:	30 0b       	mov	r11,0
80002ecc:	fe 7c 28 00 	mov	r12,-55296
80002ed0:	f0 1f 00 0f 	mcall	80002f0c <dip204_read_byte+0x54>
  Assert( SPI_OK==spi_status );
  /* read RSR register */
#ifdef _ASSERT_ENABLE_
  spi_status =
#endif
  spi_read(DIP204_SPI, &reverse);
80002ed4:	ee c8 00 06 	sub	r8,r7,6
80002ed8:	10 9b       	mov	r11,r8
80002eda:	fe 7c 28 00 	mov	r12,-55296
80002ede:	f0 1f 00 0d 	mcall	80002f10 <dip204_read_byte+0x58>
  Assert( SPI_OK==spi_status );
  /* Revert received byte (issued LSB first by the LCD) */
  *byte = bit_reverse8(reverse);
80002ee2:	ef 08 ff fa 	ld.sh	r8,r7[-6]
80002ee6:	5c 58       	castu.b	r8
80002ee8:	ef 48 ff fc 	st.w	r7[-4],r8
80002eec:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002ef0:	5c 98       	brev	r8
80002ef2:	ef 48 ff fc 	st.w	r7[-4],r8
80002ef6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002efa:	b9 88       	lsr	r8,0x18
80002efc:	5c 58       	castu.b	r8
80002efe:	ee f9 ff f4 	ld.w	r9,r7[-12]
80002f02:	b2 88       	st.b	r9[0x0],r8
}
80002f04:	2f dd       	sub	sp,-12
80002f06:	e3 cd 80 80 	ldm	sp++,r7,pc
80002f0a:	00 00       	add	r0,r0
80002f0c:	80 00       	ld.sh	r0,r0[0x0]
80002f0e:	88 62       	ld.sh	r2,r4[0xc]
80002f10:	80 00       	ld.sh	r0,r0[0x0]
80002f12:	88 ba       	ld.uh	r10,r4[0x6]

80002f14 <dip204_wait_busy>:

/*! \brief function to wait for LCD becomes not busy
 *
 */
static void dip204_wait_busy(void)
{
80002f14:	eb cd 40 80 	pushm	r7,lr
80002f18:	1a 97       	mov	r7,sp
80002f1a:	20 1d       	sub	sp,4
  unsigned char status = 0x00;
80002f1c:	30 08       	mov	r8,0
80002f1e:	ef 68 ff ff 	st.b	r7[-1],r8

  /* send read command to LCD */
  dip204_write_byte(DIP204_READ_COMMAND);
80002f22:	e0 6c 00 fc 	mov	r12,252
80002f26:	f0 1f 00 09 	mcall	80002f48 <dip204_wait_busy+0x34>
  /* read next byte */
  do {
  dip204_read_byte(&status);
80002f2a:	ee c8 00 01 	sub	r8,r7,1
80002f2e:	10 9c       	mov	r12,r8
80002f30:	f0 1f 00 07 	mcall	80002f4c <dip204_wait_busy+0x38>
  /* keep D7 to know status */
  }while (status & 0x80);
80002f34:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80002f38:	10 99       	mov	r9,r8
80002f3a:	30 08       	mov	r8,0
80002f3c:	f0 09 18 00 	cp.b	r9,r8
80002f40:	cf 55       	brlt	80002f2a <dip204_wait_busy+0x16>
}
80002f42:	2f fd       	sub	sp,-4
80002f44:	e3 cd 80 80 	ldm	sp++,r7,pc
80002f48:	80 00       	ld.sh	r0,r0[0x0]
80002f4a:	2e 30       	sub	r0,-29
80002f4c:	80 00       	ld.sh	r0,r0[0x0]
80002f4e:	2e b8       	sub	r8,-21

80002f50 <sd_mmc_spi_internal_init>:
//!
//!
//! @return bit
//!   The memory is ready     -> true (always)
bool sd_mmc_spi_internal_init(void)
{
80002f50:	eb cd 40 80 	pushm	r7,lr
80002f54:	1a 97       	mov	r7,sp
80002f56:	20 3d       	sub	sp,12
  uint16_t retry;
  int i;
  int if_cond;

  // Start at low frequency
  sd_mmc_opt.baudrate = 400000;
80002f58:	fe f8 02 c8 	ld.w	r8,pc[712]
80002f5c:	e6 69 1a 80 	mov	r9,400000
80002f60:	91 19       	st.w	r8[0x4],r9
  spi_setupChipReg(SD_MMC_SPI, &sd_mmc_opt, sd_mmc_pba_hz);
80002f62:	fe f8 02 c2 	ld.w	r8,pc[706]
80002f66:	70 08       	ld.w	r8,r8[0x0]
80002f68:	10 9a       	mov	r10,r8
80002f6a:	fe fb 02 b6 	ld.w	r11,pc[694]
80002f6e:	fe 7c 28 00 	mov	r12,-55296
80002f72:	f0 1f 00 ae 	mcall	80003228 <sd_mmc_spi_internal_init+0x2d8>

  /* card needs 74 cycles minimum to start up */
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
80002f76:	30 1b       	mov	r11,1
80002f78:	fe 7c 28 00 	mov	r12,-55296
80002f7c:	f0 1f 00 ac 	mcall	8000322c <sd_mmc_spi_internal_init+0x2dc>
  for(i = 0; i < 10; ++i) {
80002f80:	30 08       	mov	r8,0
80002f82:	ef 48 ff f8 	st.w	r7[-8],r8
80002f86:	c0 c8       	rjmp	80002f9e <sd_mmc_spi_internal_init+0x4e>
    spi_write(SD_MMC_SPI,0xFF);
80002f88:	e0 6b 00 ff 	mov	r11,255
80002f8c:	fe 7c 28 00 	mov	r12,-55296
80002f90:	f0 1f 00 a8 	mcall	80003230 <sd_mmc_spi_internal_init+0x2e0>
  sd_mmc_opt.baudrate = 400000;
  spi_setupChipReg(SD_MMC_SPI, &sd_mmc_opt, sd_mmc_pba_hz);

  /* card needs 74 cycles minimum to start up */
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
  for(i = 0; i < 10; ++i) {
80002f94:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002f98:	2f f8       	sub	r8,-1
80002f9a:	ef 48 ff f8 	st.w	r7[-8],r8
80002f9e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002fa2:	58 98       	cp.w	r8,9
80002fa4:	fe 9a ff f2 	brle	80002f88 <sd_mmc_spi_internal_init+0x38>
    spi_write(SD_MMC_SPI,0xFF);
  }
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80002fa8:	30 1b       	mov	r11,1
80002faa:	fe 7c 28 00 	mov	r12,-55296
80002fae:	f0 1f 00 a2 	mcall	80003234 <sd_mmc_spi_internal_init+0x2e4>

  // RESET THE MEMORY CARD
  sd_mmc_spi_init_done = false;
80002fb2:	fe f9 02 86 	ld.w	r9,pc[646]
80002fb6:	30 08       	mov	r8,0
80002fb8:	b2 88       	st.b	r9[0x0],r8
  card_type = MMC_CARD;
80002fba:	fe f9 02 82 	ld.w	r9,pc[642]
80002fbe:	30 08       	mov	r8,0
80002fc0:	b2 88       	st.b	r9[0x0],r8
  retry = 0;
80002fc2:	30 08       	mov	r8,0
80002fc4:	ef 58 ff f6 	st.h	r7[-10],r8
  do
  {
    // reset card and go to SPI mode
    r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0);
80002fc8:	30 0b       	mov	r11,0
80002fca:	30 0c       	mov	r12,0
80002fcc:	f0 1f 00 9d 	mcall	80003240 <sd_mmc_spi_internal_init+0x2f0>
80002fd0:	18 98       	mov	r8,r12
80002fd2:	fe f9 02 72 	ld.w	r9,pc[626]
80002fd6:	b2 88       	st.b	r9[0x0],r8
    spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80002fd8:	e0 6b 00 ff 	mov	r11,255
80002fdc:	fe 7c 28 00 	mov	r12,-55296
80002fe0:	f0 1f 00 94 	mcall	80003230 <sd_mmc_spi_internal_init+0x2e0>
    // do retry counter
    retry++;
80002fe4:	ef 08 ff f6 	ld.sh	r8,r7[-10]
80002fe8:	2f f8       	sub	r8,-1
80002fea:	ef 58 ff f6 	st.h	r7[-10],r8
    if(retry > 100)
80002fee:	ef 09 ff f6 	ld.sh	r9,r7[-10]
80002ff2:	36 48       	mov	r8,100
80002ff4:	f0 09 19 00 	cp.h	r9,r8
80002ff8:	e0 88 00 04 	brls	80003000 <sd_mmc_spi_internal_init+0xb0>
      return false;
80002ffc:	30 08       	mov	r8,0
80002ffe:	c0 d9       	rjmp	80003218 <sd_mmc_spi_internal_init+0x2c8>
  }
  while(r1 != 0x01);   // check memory enters idle_state
80003000:	fe f8 02 44 	ld.w	r8,pc[580]
80003004:	11 89       	ld.ub	r9,r8[0x0]
80003006:	30 18       	mov	r8,1
80003008:	f0 09 18 00 	cp.b	r9,r8
8000300c:	cd e1       	brne	80002fc8 <sd_mmc_spi_internal_init+0x78>

  if_cond = sd_mmc_spi_get_if();
8000300e:	f0 1f 00 8f 	mcall	80003248 <sd_mmc_spi_internal_init+0x2f8>
80003012:	18 98       	mov	r8,r12
80003014:	ef 48 ff fc 	st.w	r7[-4],r8
  if(if_cond == -1) {
80003018:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000301c:	5b f8       	cp.w	r8,-1
8000301e:	c0 31       	brne	80003024 <sd_mmc_spi_internal_init+0xd4>
      return false; // card is bad
80003020:	30 08       	mov	r8,0
80003022:	cf b8       	rjmp	80003218 <sd_mmc_spi_internal_init+0x2c8>
  } else if (if_cond == 1) {
80003024:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003028:	58 18       	cp.w	r8,1
8000302a:	c0 61       	brne	80003036 <sd_mmc_spi_internal_init+0xe6>
      card_type = SD_CARD_2;
8000302c:	fe f9 02 10 	ld.w	r9,pc[528]
80003030:	30 28       	mov	r8,2
80003032:	b2 88       	st.b	r9[0x0],r8
80003034:	c4 c8       	rjmp	800030cc <sd_mmc_spi_internal_init+0x17c>
  } else {
    // IDENTIFICATION OF THE CARD TYPE (SD or MMC)
    // Both cards will accept CMD55 command but only the SD card will respond to ACMD41
    r1 = sd_mmc_spi_send_command(SD_APP_CMD55,0);
80003036:	30 0b       	mov	r11,0
80003038:	33 7c       	mov	r12,55
8000303a:	f0 1f 00 82 	mcall	80003240 <sd_mmc_spi_internal_init+0x2f0>
8000303e:	18 98       	mov	r8,r12
80003040:	fe f9 02 04 	ld.w	r9,pc[516]
80003044:	b2 88       	st.b	r9[0x0],r8
    spi_write(SD_MMC_SPI,0xFF);  // write dummy byte
80003046:	e0 6b 00 ff 	mov	r11,255
8000304a:	fe 7c 28 00 	mov	r12,-55296
8000304e:	f0 1f 00 79 	mcall	80003230 <sd_mmc_spi_internal_init+0x2e0>

    r1 = sd_mmc_spi_send_command(SD_SEND_OP_COND_ACMD, 0);
80003052:	30 0b       	mov	r11,0
80003054:	32 9c       	mov	r12,41
80003056:	f0 1f 00 7b 	mcall	80003240 <sd_mmc_spi_internal_init+0x2f0>
8000305a:	18 98       	mov	r8,r12
8000305c:	4f a9       	lddpc	r9,80003244 <sd_mmc_spi_internal_init+0x2f4>
8000305e:	b2 88       	st.b	r9[0x0],r8
    spi_write(SD_MMC_SPI,0xFF);  // write dummy byte
80003060:	e0 6b 00 ff 	mov	r11,255
80003064:	fe 7c 28 00 	mov	r12,-55296
80003068:	f0 1f 00 72 	mcall	80003230 <sd_mmc_spi_internal_init+0x2e0>

    if ((r1&0xFE) == 0) {   // ignore "in_idle_state" flag bit
8000306c:	4f 68       	lddpc	r8,80003244 <sd_mmc_spi_internal_init+0x2f4>
8000306e:	11 88       	ld.ub	r8,r8[0x0]
80003070:	e2 18 00 fe 	andl	r8,0xfe,COH
80003074:	c0 51       	brne	8000307e <sd_mmc_spi_internal_init+0x12e>
      card_type = SD_CARD;    // card has accepted the command, this is a SD card
80003076:	4f 29       	lddpc	r9,8000323c <sd_mmc_spi_internal_init+0x2ec>
80003078:	30 18       	mov	r8,1
8000307a:	b2 88       	st.b	r9[0x0],r8
8000307c:	c2 88       	rjmp	800030cc <sd_mmc_spi_internal_init+0x17c>
    } else {
      card_type = MMC_CARD;   // card has not responded, this is a MMC card
8000307e:	4f 09       	lddpc	r9,8000323c <sd_mmc_spi_internal_init+0x2ec>
80003080:	30 08       	mov	r8,0
80003082:	b2 88       	st.b	r9[0x0],r8
      // reset card again
      retry = 0;
80003084:	30 08       	mov	r8,0
80003086:	ef 58 ff f6 	st.h	r7[-10],r8
      do {
        // reset card again
        r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0);
8000308a:	30 0b       	mov	r11,0
8000308c:	30 0c       	mov	r12,0
8000308e:	f0 1f 00 6d 	mcall	80003240 <sd_mmc_spi_internal_init+0x2f0>
80003092:	18 98       	mov	r8,r12
80003094:	4e c9       	lddpc	r9,80003244 <sd_mmc_spi_internal_init+0x2f4>
80003096:	b2 88       	st.b	r9[0x0],r8
        spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80003098:	e0 6b 00 ff 	mov	r11,255
8000309c:	fe 7c 28 00 	mov	r12,-55296
800030a0:	f0 1f 00 64 	mcall	80003230 <sd_mmc_spi_internal_init+0x2e0>
        // do retry counter
        retry++;
800030a4:	ef 08 ff f6 	ld.sh	r8,r7[-10]
800030a8:	2f f8       	sub	r8,-1
800030aa:	ef 58 ff f6 	st.h	r7[-10],r8
        if(retry > 100)
800030ae:	ef 09 ff f6 	ld.sh	r9,r7[-10]
800030b2:	36 48       	mov	r8,100
800030b4:	f0 09 19 00 	cp.h	r9,r8
800030b8:	e0 88 00 04 	brls	800030c0 <sd_mmc_spi_internal_init+0x170>
          return false;
800030bc:	30 08       	mov	r8,0
800030be:	ca d8       	rjmp	80003218 <sd_mmc_spi_internal_init+0x2c8>
      }
      while(r1 != 0x01);   // check memory enters idle_state
800030c0:	4e 18       	lddpc	r8,80003244 <sd_mmc_spi_internal_init+0x2f4>
800030c2:	11 89       	ld.ub	r9,r8[0x0]
800030c4:	30 18       	mov	r8,1
800030c6:	f0 09 18 00 	cp.b	r9,r8
800030ca:	ce 01       	brne	8000308a <sd_mmc_spi_internal_init+0x13a>
    }
  }

  // CONTINUE INTERNAL INITIALIZATION OF THE CARD
  // Continue sending CMD1 while memory card is in idle state
  retry = 0;
800030cc:	30 08       	mov	r8,0
800030ce:	ef 58 ff f6 	st.h	r7[-10],r8
  do {
    switch(card_type) {
800030d2:	4d b8       	lddpc	r8,8000323c <sd_mmc_spi_internal_init+0x2ec>
800030d4:	11 88       	ld.ub	r8,r8[0x0]
800030d6:	58 18       	cp.w	r8,1
800030d8:	c1 30       	breq	800030fe <sd_mmc_spi_internal_init+0x1ae>
800030da:	58 28       	cp.w	r8,2
800030dc:	c2 30       	breq	80003122 <sd_mmc_spi_internal_init+0x1d2>
800030de:	58 08       	cp.w	r8,0
800030e0:	c3 31       	brne	80003146 <sd_mmc_spi_internal_init+0x1f6>
    case MMC_CARD:
      r1 = sd_mmc_spi_send_command(MMC_SEND_OP_COND, 0);
800030e2:	30 0b       	mov	r11,0
800030e4:	30 1c       	mov	r12,1
800030e6:	f0 1f 00 57 	mcall	80003240 <sd_mmc_spi_internal_init+0x2f0>
800030ea:	18 98       	mov	r8,r12
800030ec:	4d 69       	lddpc	r9,80003244 <sd_mmc_spi_internal_init+0x2f4>
800030ee:	b2 88       	st.b	r9[0x0],r8
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
800030f0:	e0 6b 00 ff 	mov	r11,255
800030f4:	fe 7c 28 00 	mov	r12,-55296
800030f8:	f0 1f 00 4e 	mcall	80003230 <sd_mmc_spi_internal_init+0x2e0>
      break;
800030fc:	c2 58       	rjmp	80003146 <sd_mmc_spi_internal_init+0x1f6>
    case SD_CARD:
      sd_mmc_spi_send_command(SD_APP_CMD55,0);
800030fe:	30 0b       	mov	r11,0
80003100:	33 7c       	mov	r12,55
80003102:	f0 1f 00 50 	mcall	80003240 <sd_mmc_spi_internal_init+0x2f0>
      r1 = sd_mmc_spi_send_command(SD_SEND_OP_COND_ACMD, 0);
80003106:	30 0b       	mov	r11,0
80003108:	32 9c       	mov	r12,41
8000310a:	f0 1f 00 4e 	mcall	80003240 <sd_mmc_spi_internal_init+0x2f0>
8000310e:	18 98       	mov	r8,r12
80003110:	4c d9       	lddpc	r9,80003244 <sd_mmc_spi_internal_init+0x2f4>
80003112:	b2 88       	st.b	r9[0x0],r8
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80003114:	e0 6b 00 ff 	mov	r11,255
80003118:	fe 7c 28 00 	mov	r12,-55296
8000311c:	f0 1f 00 45 	mcall	80003230 <sd_mmc_spi_internal_init+0x2e0>
      break;
80003120:	c1 38       	rjmp	80003146 <sd_mmc_spi_internal_init+0x1f6>
    case SD_CARD_2:
      // set high capacity bit mask
      sd_mmc_spi_send_command(SD_APP_CMD55,0);
80003122:	30 0b       	mov	r11,0
80003124:	33 7c       	mov	r12,55
80003126:	f0 1f 00 47 	mcall	80003240 <sd_mmc_spi_internal_init+0x2f0>
      r1 = sd_mmc_spi_send_command(SD_SEND_OP_COND_ACMD, 0x40000000);
8000312a:	fc 1b 40 00 	movh	r11,0x4000
8000312e:	32 9c       	mov	r12,41
80003130:	f0 1f 00 44 	mcall	80003240 <sd_mmc_spi_internal_init+0x2f0>
80003134:	18 98       	mov	r8,r12
80003136:	4c 49       	lddpc	r9,80003244 <sd_mmc_spi_internal_init+0x2f4>
80003138:	b2 88       	st.b	r9[0x0],r8
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
8000313a:	e0 6b 00 ff 	mov	r11,255
8000313e:	fe 7c 28 00 	mov	r12,-55296
80003142:	f0 1f 00 3c 	mcall	80003230 <sd_mmc_spi_internal_init+0x2e0>
      break;
    }
     // do retry counter
     retry++;
80003146:	ef 08 ff f6 	ld.sh	r8,r7[-10]
8000314a:	2f f8       	sub	r8,-1
8000314c:	ef 58 ff f6 	st.h	r7[-10],r8
     if(retry == 50000)    // measured approx. 500 on several cards
80003150:	ef 09 ff f6 	ld.sh	r9,r7[-10]
80003154:	fe 78 c3 50 	mov	r8,-15536
80003158:	f0 09 19 00 	cp.h	r9,r8
8000315c:	c0 31       	brne	80003162 <sd_mmc_spi_internal_init+0x212>
        return false;
8000315e:	30 08       	mov	r8,0
80003160:	c5 c8       	rjmp	80003218 <sd_mmc_spi_internal_init+0x2c8>
  } while (r1);
80003162:	4b 98       	lddpc	r8,80003244 <sd_mmc_spi_internal_init+0x2f4>
80003164:	11 88       	ld.ub	r8,r8[0x0]
80003166:	58 08       	cp.w	r8,0
80003168:	cb 51       	brne	800030d2 <sd_mmc_spi_internal_init+0x182>

  // CHECK FOR SDHC
  if(card_type == SD_CARD_2) {
8000316a:	4b 58       	lddpc	r8,8000323c <sd_mmc_spi_internal_init+0x2ec>
8000316c:	11 89       	ld.ub	r9,r8[0x0]
8000316e:	30 28       	mov	r8,2
80003170:	f0 09 18 00 	cp.b	r9,r8
80003174:	c1 31       	brne	8000319a <sd_mmc_spi_internal_init+0x24a>
    if_cond = sd_mmc_spi_check_hc();
80003176:	f0 1f 00 36 	mcall	8000324c <sd_mmc_spi_internal_init+0x2fc>
8000317a:	18 98       	mov	r8,r12
8000317c:	ef 48 ff fc 	st.w	r7[-4],r8
    if (if_cond == -1) {
80003180:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003184:	5b f8       	cp.w	r8,-1
80003186:	c0 31       	brne	8000318c <sd_mmc_spi_internal_init+0x23c>
      return false;
80003188:	30 08       	mov	r8,0
8000318a:	c4 78       	rjmp	80003218 <sd_mmc_spi_internal_init+0x2c8>
    } else if (if_cond == 1){
8000318c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003190:	58 18       	cp.w	r8,1
80003192:	c0 41       	brne	8000319a <sd_mmc_spi_internal_init+0x24a>
          card_type = SD_CARD_2_SDHC;
80003194:	4a a9       	lddpc	r9,8000323c <sd_mmc_spi_internal_init+0x2ec>
80003196:	30 38       	mov	r8,3
80003198:	b2 88       	st.b	r9[0x0],r8
      }
  }

  // DISABLE CRC TO SIMPLIFY AND SPEED UP COMMUNICATIONS
  r1 = sd_mmc_spi_send_command(MMC_CRC_ON_OFF, 0);  // disable CRC (should be already initialized on SPI init)
8000319a:	30 0b       	mov	r11,0
8000319c:	33 bc       	mov	r12,59
8000319e:	f0 1f 00 29 	mcall	80003240 <sd_mmc_spi_internal_init+0x2f0>
800031a2:	18 98       	mov	r8,r12
800031a4:	4a 89       	lddpc	r9,80003244 <sd_mmc_spi_internal_init+0x2f4>
800031a6:	b2 88       	st.b	r9[0x0],r8
  spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
800031a8:	e0 6b 00 ff 	mov	r11,255
800031ac:	fe 7c 28 00 	mov	r12,-55296
800031b0:	f0 1f 00 20 	mcall	80003230 <sd_mmc_spi_internal_init+0x2e0>

  // SET BLOCK LENGTH TO 512 BYTES
  r1 = sd_mmc_spi_send_command(MMC_SET_BLOCKLEN, 512);
800031b4:	e0 6b 02 00 	mov	r11,512
800031b8:	31 0c       	mov	r12,16
800031ba:	f0 1f 00 22 	mcall	80003240 <sd_mmc_spi_internal_init+0x2f0>
800031be:	18 98       	mov	r8,r12
800031c0:	4a 19       	lddpc	r9,80003244 <sd_mmc_spi_internal_init+0x2f4>
800031c2:	b2 88       	st.b	r9[0x0],r8
  spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
800031c4:	e0 6b 00 ff 	mov	r11,255
800031c8:	fe 7c 28 00 	mov	r12,-55296
800031cc:	f0 1f 00 19 	mcall	80003230 <sd_mmc_spi_internal_init+0x2e0>
  if (r1 != 0x00)
800031d0:	49 d8       	lddpc	r8,80003244 <sd_mmc_spi_internal_init+0x2f4>
800031d2:	11 88       	ld.ub	r8,r8[0x0]
800031d4:	58 08       	cp.w	r8,0
800031d6:	c0 30       	breq	800031dc <sd_mmc_spi_internal_init+0x28c>
    return false;    // card unsupported if block length of 512b is not accepted
800031d8:	30 08       	mov	r8,0
800031da:	c1 f8       	rjmp	80003218 <sd_mmc_spi_internal_init+0x2c8>

  // GET CARD SPECIFIC DATA
  if (false ==  sd_mmc_spi_get_csd(csd))
800031dc:	49 dc       	lddpc	r12,80003250 <sd_mmc_spi_internal_init+0x300>
800031de:	f0 1f 00 1e 	mcall	80003254 <sd_mmc_spi_internal_init+0x304>
800031e2:	18 98       	mov	r8,r12
800031e4:	ec 18 00 01 	eorl	r8,0x1
800031e8:	5c 58       	castu.b	r8
800031ea:	c0 30       	breq	800031f0 <sd_mmc_spi_internal_init+0x2a0>
    return false;
800031ec:	30 08       	mov	r8,0
800031ee:	c1 58       	rjmp	80003218 <sd_mmc_spi_internal_init+0x2c8>

  // GET CARD CAPACITY and NUMBER OF SECTORS
  sd_mmc_spi_get_capacity();
800031f0:	f0 1f 00 1a 	mcall	80003258 <sd_mmc_spi_internal_init+0x308>
#if (defined SD_MMC_READ_CID) && (SD_MMC_READ_CID == true)
  if (false ==  sd_mmc_spi_get_cid(cid))
    return false;
#endif

  sd_mmc_spi_init_done = true;
800031f4:	49 19       	lddpc	r9,80003238 <sd_mmc_spi_internal_init+0x2e8>
800031f6:	30 18       	mov	r8,1
800031f8:	b2 88       	st.b	r9[0x0],r8

  // Set SPI Speed to MAX
  sd_mmc_opt.baudrate = SD_MMC_SPI_MASTER_SPEED;
800031fa:	48 a8       	lddpc	r8,80003220 <sd_mmc_spi_internal_init+0x2d0>
800031fc:	e0 69 1b 00 	mov	r9,6912
80003200:	ea 19 00 b7 	orh	r9,0xb7
80003204:	91 19       	st.w	r8[0x4],r9
  spi_setupChipReg(SD_MMC_SPI, &sd_mmc_opt, sd_mmc_pba_hz);
80003206:	48 88       	lddpc	r8,80003224 <sd_mmc_spi_internal_init+0x2d4>
80003208:	70 08       	ld.w	r8,r8[0x0]
8000320a:	10 9a       	mov	r10,r8
8000320c:	48 5b       	lddpc	r11,80003220 <sd_mmc_spi_internal_init+0x2d0>
8000320e:	fe 7c 28 00 	mov	r12,-55296
80003212:	f0 1f 00 06 	mcall	80003228 <sd_mmc_spi_internal_init+0x2d8>
  return true;
80003216:	30 18       	mov	r8,1
}
80003218:	10 9c       	mov	r12,r8
8000321a:	2f dd       	sub	sp,-12
8000321c:	e3 cd 80 80 	ldm	sp++,r7,pc
80003220:	00 00       	add	r0,r0
80003222:	06 10       	sub	r0,r3
80003224:	00 00       	add	r0,r0
80003226:	06 20       	rsub	r0,r3
80003228:	80 00       	ld.sh	r0,r0[0x0]
8000322a:	86 c4       	ld.uh	r4,r3[0x8]
8000322c:	80 00       	ld.sh	r0,r0[0x0]
8000322e:	85 c0       	st.w	r2[0x30],r0
80003230:	80 00       	ld.sh	r0,r0[0x0]
80003232:	88 62       	ld.sh	r2,r4[0xc]
80003234:	80 00       	ld.sh	r0,r0[0x0]
80003236:	86 58       	ld.sh	r8,r3[0xa]
80003238:	00 00       	add	r0,r0
8000323a:	06 24       	rsub	r4,r3
8000323c:	00 00       	add	r0,r0
8000323e:	0b 0e       	ld.w	lr,r5++
80003240:	80 00       	ld.sh	r0,r0[0x0]
80003242:	32 9c       	mov	r12,41
80003244:	00 00       	add	r0,r0
80003246:	0b 20       	ld.uh	r0,r5++
80003248:	80 00       	ld.sh	r0,r0[0x0]
8000324a:	34 50       	mov	r0,69
8000324c:	80 00       	ld.sh	r0,r0[0x0]
8000324e:	35 30       	mov	r0,83
80003250:	00 00       	add	r0,r0
80003252:	0b 10       	ld.sh	r0,r5++
80003254:	80 00       	ld.sh	r0,r0[0x0]
80003256:	35 ec       	mov	r12,94
80003258:	80 00       	ld.sh	r0,r0[0x0]
8000325a:	37 30       	mov	r0,115

8000325c <sd_mmc_spi_init>:
//!
//!
//! @return bit
//!   The memory is ready     -> true (always)
bool sd_mmc_spi_init(spi_options_t spiOptions, unsigned int pba_hz)
{
8000325c:	eb cd 40 80 	pushm	r7,lr
80003260:	1a 97       	mov	r7,sp
80003262:	20 1d       	sub	sp,4
80003264:	ee c8 ff f8 	sub	r8,r7,-8
80003268:	ef 4c ff fc 	st.w	r7[-4],r12
  // Keep SPI options internally
  sd_mmc_pba_hz = pba_hz;
8000326c:	48 89       	lddpc	r9,8000328c <sd_mmc_spi_init+0x30>
8000326e:	ee fa ff fc 	ld.w	r10,r7[-4]
80003272:	93 0a       	st.w	r9[0x0],r10
  memcpy( &sd_mmc_opt, &spiOptions, sizeof(spi_options_t) );
80003274:	31 0a       	mov	r10,16
80003276:	10 9b       	mov	r11,r8
80003278:	48 6c       	lddpc	r12,80003290 <sd_mmc_spi_init+0x34>
8000327a:	f0 1f 00 07 	mcall	80003294 <sd_mmc_spi_init+0x38>

  // Initialize the SD/MMC controller.
  return sd_mmc_spi_internal_init();
8000327e:	f0 1f 00 07 	mcall	80003298 <sd_mmc_spi_init+0x3c>
80003282:	18 98       	mov	r8,r12
}
80003284:	10 9c       	mov	r12,r8
80003286:	2f fd       	sub	sp,-4
80003288:	e3 cd 80 80 	ldm	sp++,r7,pc
8000328c:	00 00       	add	r0,r0
8000328e:	06 20       	rsub	r0,r3
80003290:	00 00       	add	r0,r0
80003292:	06 10       	sub	r0,r3
80003294:	80 00       	ld.sh	r0,r0[0x0]
80003296:	f4 3a 80 00 	sub	r10,-688128
8000329a:	2f 50       	sub	r0,-11

8000329c <sd_mmc_spi_send_command>:
//! @param  arg       argument of the command
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
8000329c:	eb cd 40 80 	pushm	r7,lr
800032a0:	1a 97       	mov	r7,sp
800032a2:	20 2d       	sub	sp,8
800032a4:	18 98       	mov	r8,r12
800032a6:	ef 4b ff f8 	st.w	r7[-8],r11
800032aa:	ef 68 ff fc 	st.b	r7[-4],r8
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
800032ae:	30 1b       	mov	r11,1
800032b0:	fe 7c 28 00 	mov	r12,-55296
800032b4:	f0 1f 00 0c 	mcall	800032e4 <sd_mmc_spi_send_command+0x48>
  r1 = sd_mmc_spi_command(command, arg);
800032b8:	ef 38 ff fc 	ld.ub	r8,r7[-4]
800032bc:	ee fb ff f8 	ld.w	r11,r7[-8]
800032c0:	10 9c       	mov	r12,r8
800032c2:	f0 1f 00 0a 	mcall	800032e8 <sd_mmc_spi_send_command+0x4c>
800032c6:	18 98       	mov	r8,r12
800032c8:	48 99       	lddpc	r9,800032ec <sd_mmc_spi_send_command+0x50>
800032ca:	b2 88       	st.b	r9[0x0],r8
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800032cc:	30 1b       	mov	r11,1
800032ce:	fe 7c 28 00 	mov	r12,-55296
800032d2:	f0 1f 00 08 	mcall	800032f0 <sd_mmc_spi_send_command+0x54>
  return r1;
800032d6:	48 68       	lddpc	r8,800032ec <sd_mmc_spi_send_command+0x50>
800032d8:	11 88       	ld.ub	r8,r8[0x0]
}
800032da:	10 9c       	mov	r12,r8
800032dc:	2f ed       	sub	sp,-8
800032de:	e3 cd 80 80 	ldm	sp++,r7,pc
800032e2:	00 00       	add	r0,r0
800032e4:	80 00       	ld.sh	r0,r0[0x0]
800032e6:	85 c0       	st.w	r2[0x30],r0
800032e8:	80 00       	ld.sh	r0,r0[0x0]
800032ea:	32 f4       	mov	r4,47
800032ec:	00 00       	add	r0,r0
800032ee:	0b 20       	ld.uh	r0,r5++
800032f0:	80 00       	ld.sh	r0,r0[0x0]
800032f2:	86 58       	ld.sh	r8,r3[0xa]

800032f4 <sd_mmc_spi_command>:
//! @param  arg       argument of the command
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF time out error)
uint8_t sd_mmc_spi_command(uint8_t command, uint32_t arg)
{
800032f4:	eb cd 40 80 	pushm	r7,lr
800032f8:	1a 97       	mov	r7,sp
800032fa:	20 3d       	sub	sp,12
800032fc:	18 98       	mov	r8,r12
800032fe:	ef 4b ff f4 	st.w	r7[-12],r11
80003302:	ef 68 ff f8 	st.b	r7[-8],r8
  uint8_t retry;

  spi_write(SD_MMC_SPI, 0xFF);            // write dummy byte
80003306:	e0 6b 00 ff 	mov	r11,255
8000330a:	fe 7c 28 00 	mov	r12,-55296
8000330e:	f0 1f 00 3b 	mcall	800033f8 <sd_mmc_spi_command+0x104>
  spi_write(SD_MMC_SPI, command | 0x40);  // send command
80003312:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80003316:	a7 a8       	sbr	r8,0x6
80003318:	5c 58       	castu.b	r8
8000331a:	10 9b       	mov	r11,r8
8000331c:	fe 7c 28 00 	mov	r12,-55296
80003320:	f0 1f 00 36 	mcall	800033f8 <sd_mmc_spi_command+0x104>
  spi_write(SD_MMC_SPI, arg>>24);         // send parameter
80003324:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003328:	b9 88       	lsr	r8,0x18
8000332a:	5c 88       	casts.h	r8
8000332c:	5c 78       	castu.h	r8
8000332e:	10 9b       	mov	r11,r8
80003330:	fe 7c 28 00 	mov	r12,-55296
80003334:	f0 1f 00 31 	mcall	800033f8 <sd_mmc_spi_command+0x104>
  spi_write(SD_MMC_SPI, arg>>16);
80003338:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000333c:	b1 88       	lsr	r8,0x10
8000333e:	5c 88       	casts.h	r8
80003340:	5c 78       	castu.h	r8
80003342:	10 9b       	mov	r11,r8
80003344:	fe 7c 28 00 	mov	r12,-55296
80003348:	f0 1f 00 2c 	mcall	800033f8 <sd_mmc_spi_command+0x104>
  spi_write(SD_MMC_SPI, arg>>8 );
8000334c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003350:	a9 88       	lsr	r8,0x8
80003352:	5c 88       	casts.h	r8
80003354:	5c 78       	castu.h	r8
80003356:	10 9b       	mov	r11,r8
80003358:	fe 7c 28 00 	mov	r12,-55296
8000335c:	f0 1f 00 27 	mcall	800033f8 <sd_mmc_spi_command+0x104>
  spi_write(SD_MMC_SPI, arg    );
80003360:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003364:	5c 88       	casts.h	r8
80003366:	5c 78       	castu.h	r8
80003368:	10 9b       	mov	r11,r8
8000336a:	fe 7c 28 00 	mov	r12,-55296
8000336e:	f0 1f 00 23 	mcall	800033f8 <sd_mmc_spi_command+0x104>
  switch(command)
80003372:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80003376:	58 08       	cp.w	r8,0
80003378:	c0 40       	breq	80003380 <sd_mmc_spi_command+0x8c>
8000337a:	58 88       	cp.w	r8,8
8000337c:	c0 90       	breq	8000338e <sd_mmc_spi_command+0x9a>
8000337e:	c0 f8       	rjmp	8000339c <sd_mmc_spi_command+0xa8>
  {
      case MMC_GO_IDLE_STATE:
         spi_write(SD_MMC_SPI, 0x95);
80003380:	e0 6b 00 95 	mov	r11,149
80003384:	fe 7c 28 00 	mov	r12,-55296
80003388:	f0 1f 00 1c 	mcall	800033f8 <sd_mmc_spi_command+0x104>
         break;
8000338c:	c0 e8       	rjmp	800033a8 <sd_mmc_spi_command+0xb4>
      case MMC_SEND_IF_COND:
         spi_write(SD_MMC_SPI, 0x87);
8000338e:	e0 6b 00 87 	mov	r11,135
80003392:	fe 7c 28 00 	mov	r12,-55296
80003396:	f0 1f 00 19 	mcall	800033f8 <sd_mmc_spi_command+0x104>
         break;
8000339a:	c0 78       	rjmp	800033a8 <sd_mmc_spi_command+0xb4>
      default:
         spi_write(SD_MMC_SPI, 0xff);
8000339c:	e0 6b 00 ff 	mov	r11,255
800033a0:	fe 7c 28 00 	mov	r12,-55296
800033a4:	f0 1f 00 15 	mcall	800033f8 <sd_mmc_spi_command+0x104>
  }

  // end command
  // wait for response
  // if more than 8 retries, card has timed-out and return the received 0xFF
  retry = 0;
800033a8:	30 08       	mov	r8,0
800033aa:	ef 68 ff ff 	st.b	r7[-1],r8
  r1    = 0xFF;
800033ae:	49 49       	lddpc	r9,800033fc <sd_mmc_spi_command+0x108>
800033b0:	3f f8       	mov	r8,-1
800033b2:	b2 88       	st.b	r9[0x0],r8
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) == 0xFF)
800033b4:	c0 d8       	rjmp	800033ce <sd_mmc_spi_command+0xda>
  {
    retry++;
800033b6:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800033ba:	2f f8       	sub	r8,-1
800033bc:	ef 68 ff ff 	st.b	r7[-1],r8
    if(retry > 10) break;
800033c0:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800033c4:	30 a8       	mov	r8,10
800033c6:	f0 09 18 00 	cp.b	r9,r8
800033ca:	e0 8b 00 10 	brhi	800033ea <sd_mmc_spi_command+0xf6>
  // end command
  // wait for response
  // if more than 8 retries, card has timed-out and return the received 0xFF
  retry = 0;
  r1    = 0xFF;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) == 0xFF)
800033ce:	e0 6c 00 ff 	mov	r12,255
800033d2:	f0 1f 00 0c 	mcall	80003400 <sd_mmc_spi_command+0x10c>
800033d6:	18 98       	mov	r8,r12
800033d8:	48 99       	lddpc	r9,800033fc <sd_mmc_spi_command+0x108>
800033da:	b2 88       	st.b	r9[0x0],r8
800033dc:	48 88       	lddpc	r8,800033fc <sd_mmc_spi_command+0x108>
800033de:	11 89       	ld.ub	r9,r8[0x0]
800033e0:	3f f8       	mov	r8,-1
800033e2:	f0 09 18 00 	cp.b	r9,r8
800033e6:	ce 80       	breq	800033b6 <sd_mmc_spi_command+0xc2>
800033e8:	c0 28       	rjmp	800033ec <sd_mmc_spi_command+0xf8>
  {
    retry++;
    if(retry > 10) break;
800033ea:	d7 03       	nop
  }
  return r1;
800033ec:	48 48       	lddpc	r8,800033fc <sd_mmc_spi_command+0x108>
800033ee:	11 88       	ld.ub	r8,r8[0x0]
}
800033f0:	10 9c       	mov	r12,r8
800033f2:	2f dd       	sub	sp,-12
800033f4:	e3 cd 80 80 	ldm	sp++,r7,pc
800033f8:	80 00       	ld.sh	r0,r0[0x0]
800033fa:	88 62       	ld.sh	r2,r4[0xc]
800033fc:	00 00       	add	r0,r0
800033fe:	0b 20       	ld.uh	r0,r5++
80003400:	80 00       	ld.sh	r0,r0[0x0]
80003402:	34 04       	mov	r4,64

80003404 <sd_mmc_spi_send_and_read>:
//! @param  data_to_send   byte to send over SPI
//!
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
80003404:	eb cd 40 80 	pushm	r7,lr
80003408:	1a 97       	mov	r7,sp
8000340a:	20 2d       	sub	sp,8
8000340c:	18 98       	mov	r8,r12
8000340e:	ef 68 ff f8 	st.b	r7[-8],r8
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
80003412:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80003416:	10 9b       	mov	r11,r8
80003418:	fe 7c 28 00 	mov	r12,-55296
8000341c:	f0 1f 00 0b 	mcall	80003448 <sd_mmc_spi_send_and_read+0x44>
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
80003420:	ee c8 00 02 	sub	r8,r7,2
80003424:	10 9b       	mov	r11,r8
80003426:	fe 7c 28 00 	mov	r12,-55296
8000342a:	f0 1f 00 09 	mcall	8000344c <sd_mmc_spi_send_and_read+0x48>
8000342e:	18 98       	mov	r8,r12
80003430:	58 18       	cp.w	r8,1
80003432:	c0 41       	brne	8000343a <sd_mmc_spi_send_and_read+0x36>
     return 0xFF;
80003434:	e0 68 00 ff 	mov	r8,255
80003438:	c0 48       	rjmp	80003440 <sd_mmc_spi_send_and_read+0x3c>
   return data_read;
8000343a:	ef 08 ff fe 	ld.sh	r8,r7[-2]
8000343e:	5c 58       	castu.b	r8
}
80003440:	10 9c       	mov	r12,r8
80003442:	2f ed       	sub	sp,-8
80003444:	e3 cd 80 80 	ldm	sp++,r7,pc
80003448:	80 00       	ld.sh	r0,r0[0x0]
8000344a:	88 62       	ld.sh	r2,r4[0xc]
8000344c:	80 00       	ld.sh	r0,r0[0x0]
8000344e:	88 ba       	ld.uh	r10,r4[0x6]

80003450 <sd_mmc_spi_get_if>:
//!                true
//!                SD_MMC


int sd_mmc_spi_get_if(void)
{
80003450:	eb cd 40 80 	pushm	r7,lr
80003454:	1a 97       	mov	r7,sp
  // wait for MMC not busy
  if (false == sd_mmc_spi_wait_not_busy())
80003456:	f0 1f 00 31 	mcall	80003518 <sd_mmc_spi_get_if+0xc8>
8000345a:	18 98       	mov	r8,r12
8000345c:	ec 18 00 01 	eorl	r8,0x1
80003460:	5c 58       	castu.b	r8
80003462:	c0 30       	breq	80003468 <sd_mmc_spi_get_if+0x18>
    return SD_FAILURE;
80003464:	3f f8       	mov	r8,-1
80003466:	c5 58       	rjmp	80003510 <sd_mmc_spi_get_if+0xc0>

  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
80003468:	30 1b       	mov	r11,1
8000346a:	fe 7c 28 00 	mov	r12,-55296
8000346e:	f0 1f 00 2c 	mcall	8000351c <sd_mmc_spi_get_if+0xcc>
  r1 = sd_mmc_spi_command(MMC_SEND_IF_COND, 0x000001AA);
80003472:	e0 6b 01 aa 	mov	r11,426
80003476:	30 8c       	mov	r12,8
80003478:	f0 1f 00 2a 	mcall	80003520 <sd_mmc_spi_get_if+0xd0>
8000347c:	18 98       	mov	r8,r12
8000347e:	4a a9       	lddpc	r9,80003524 <sd_mmc_spi_get_if+0xd4>
80003480:	b2 88       	st.b	r9[0x0],r8
  // check for valid response
  if((r1 & MMC_R1_ILLEGAL_COM) != 0) {
80003482:	4a 98       	lddpc	r8,80003524 <sd_mmc_spi_get_if+0xd4>
80003484:	11 88       	ld.ub	r8,r8[0x0]
80003486:	e2 18 00 04 	andl	r8,0x4,COH
8000348a:	c0 80       	breq	8000349a <sd_mmc_spi_get_if+0x4a>
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
8000348c:	30 1b       	mov	r11,1
8000348e:	fe 7c 28 00 	mov	r12,-55296
80003492:	f0 1f 00 26 	mcall	80003528 <sd_mmc_spi_get_if+0xd8>
    return SD_MMC;
80003496:	30 08       	mov	r8,0
80003498:	c3 c8       	rjmp	80003510 <sd_mmc_spi_get_if+0xc0>
  }
  r1 = sd_mmc_spi_send_and_read(0xFF);
8000349a:	e0 6c 00 ff 	mov	r12,255
8000349e:	f0 1f 00 24 	mcall	8000352c <sd_mmc_spi_get_if+0xdc>
800034a2:	18 98       	mov	r8,r12
800034a4:	4a 09       	lddpc	r9,80003524 <sd_mmc_spi_get_if+0xd4>
800034a6:	b2 88       	st.b	r9[0x0],r8
  r1 = sd_mmc_spi_send_and_read(0xFF);
800034a8:	e0 6c 00 ff 	mov	r12,255
800034ac:	f0 1f 00 20 	mcall	8000352c <sd_mmc_spi_get_if+0xdc>
800034b0:	18 98       	mov	r8,r12
800034b2:	49 d9       	lddpc	r9,80003524 <sd_mmc_spi_get_if+0xd4>
800034b4:	b2 88       	st.b	r9[0x0],r8
  r1 = sd_mmc_spi_send_and_read(0xFF);
800034b6:	e0 6c 00 ff 	mov	r12,255
800034ba:	f0 1f 00 1d 	mcall	8000352c <sd_mmc_spi_get_if+0xdc>
800034be:	18 98       	mov	r8,r12
800034c0:	49 99       	lddpc	r9,80003524 <sd_mmc_spi_get_if+0xd4>
800034c2:	b2 88       	st.b	r9[0x0],r8
  if((r1 & 0x01) == 0) {
800034c4:	49 88       	lddpc	r8,80003524 <sd_mmc_spi_get_if+0xd4>
800034c6:	11 88       	ld.ub	r8,r8[0x0]
800034c8:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800034cc:	c0 81       	brne	800034dc <sd_mmc_spi_get_if+0x8c>
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800034ce:	30 1b       	mov	r11,1
800034d0:	fe 7c 28 00 	mov	r12,-55296
800034d4:	f0 1f 00 15 	mcall	80003528 <sd_mmc_spi_get_if+0xd8>
    return SD_FAILURE;
800034d8:	3f f8       	mov	r8,-1
800034da:	c1 b8       	rjmp	80003510 <sd_mmc_spi_get_if+0xc0>
  }
  r1 = sd_mmc_spi_send_and_read(0xFF);
800034dc:	e0 6c 00 ff 	mov	r12,255
800034e0:	f0 1f 00 13 	mcall	8000352c <sd_mmc_spi_get_if+0xdc>
800034e4:	18 98       	mov	r8,r12
800034e6:	49 09       	lddpc	r9,80003524 <sd_mmc_spi_get_if+0xd4>
800034e8:	b2 88       	st.b	r9[0x0],r8
  if(r1 != 0xaa) {
800034ea:	48 f8       	lddpc	r8,80003524 <sd_mmc_spi_get_if+0xd4>
800034ec:	11 89       	ld.ub	r9,r8[0x0]
800034ee:	3a a8       	mov	r8,-86
800034f0:	f0 09 18 00 	cp.b	r9,r8
800034f4:	c0 80       	breq	80003504 <sd_mmc_spi_get_if+0xb4>
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800034f6:	30 1b       	mov	r11,1
800034f8:	fe 7c 28 00 	mov	r12,-55296
800034fc:	f0 1f 00 0b 	mcall	80003528 <sd_mmc_spi_get_if+0xd8>
    return SD_FAILURE; /* wrong test pattern */
80003500:	3f f8       	mov	r8,-1
80003502:	c0 78       	rjmp	80003510 <sd_mmc_spi_get_if+0xc0>
  }
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80003504:	30 1b       	mov	r11,1
80003506:	fe 7c 28 00 	mov	r12,-55296
8000350a:	f0 1f 00 08 	mcall	80003528 <sd_mmc_spi_get_if+0xd8>
  return true;
8000350e:	30 18       	mov	r8,1
}
80003510:	10 9c       	mov	r12,r8
80003512:	e3 cd 80 80 	ldm	sp++,r7,pc
80003516:	00 00       	add	r0,r0
80003518:	80 00       	ld.sh	r0,r0[0x0]
8000351a:	39 20       	mov	r0,-110
8000351c:	80 00       	ld.sh	r0,r0[0x0]
8000351e:	85 c0       	st.w	r2[0x30],r0
80003520:	80 00       	ld.sh	r0,r0[0x0]
80003522:	32 f4       	mov	r4,47
80003524:	00 00       	add	r0,r0
80003526:	0b 20       	ld.uh	r0,r5++
80003528:	80 00       	ld.sh	r0,r0[0x0]
8000352a:	86 58       	ld.sh	r8,r3[0xa]
8000352c:	80 00       	ld.sh	r0,r0[0x0]
8000352e:	34 04       	mov	r4,64

80003530 <sd_mmc_spi_check_hc>:
//!           SD_CARD      Detected card is SD
//!           ERROR


int sd_mmc_spi_check_hc(void)
{
80003530:	eb cd 40 80 	pushm	r7,lr
80003534:	1a 97       	mov	r7,sp
80003536:	20 1d       	sub	sp,4
  unsigned char hc_bit;
  // wait for MMC not busy
  if (false == sd_mmc_spi_wait_not_busy())
80003538:	f0 1f 00 27 	mcall	800035d4 <sd_mmc_spi_check_hc+0xa4>
8000353c:	18 98       	mov	r8,r12
8000353e:	ec 18 00 01 	eorl	r8,0x1
80003542:	5c 58       	castu.b	r8
80003544:	c0 30       	breq	8000354a <sd_mmc_spi_check_hc+0x1a>
    return SD_FAILURE;
80003546:	3f f8       	mov	r8,-1
80003548:	c4 18       	rjmp	800035ca <sd_mmc_spi_check_hc+0x9a>

  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
8000354a:	30 1b       	mov	r11,1
8000354c:	fe 7c 28 00 	mov	r12,-55296
80003550:	f0 1f 00 22 	mcall	800035d8 <sd_mmc_spi_check_hc+0xa8>
  r1 = sd_mmc_spi_command(SD_READ_OCR, 0);
80003554:	30 0b       	mov	r11,0
80003556:	33 ac       	mov	r12,58
80003558:	f0 1f 00 21 	mcall	800035dc <sd_mmc_spi_check_hc+0xac>
8000355c:	18 98       	mov	r8,r12
8000355e:	4a 19       	lddpc	r9,800035e0 <sd_mmc_spi_check_hc+0xb0>
80003560:	b2 88       	st.b	r9[0x0],r8
  // check for valid response
  if(r1 != 0) {
80003562:	4a 08       	lddpc	r8,800035e0 <sd_mmc_spi_check_hc+0xb0>
80003564:	11 88       	ld.ub	r8,r8[0x0]
80003566:	58 08       	cp.w	r8,0
80003568:	c0 80       	breq	80003578 <sd_mmc_spi_check_hc+0x48>
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
8000356a:	30 1b       	mov	r11,1
8000356c:	fe 7c 28 00 	mov	r12,-55296
80003570:	f0 1f 00 1d 	mcall	800035e4 <sd_mmc_spi_check_hc+0xb4>
    return SD_FAILURE;
80003574:	3f f8       	mov	r8,-1
80003576:	c2 a8       	rjmp	800035ca <sd_mmc_spi_check_hc+0x9a>
  }
  hc_bit = sd_mmc_spi_send_and_read(0xFF);
80003578:	e0 6c 00 ff 	mov	r12,255
8000357c:	f0 1f 00 1b 	mcall	800035e8 <sd_mmc_spi_check_hc+0xb8>
80003580:	18 98       	mov	r8,r12
80003582:	ef 68 ff ff 	st.b	r7[-1],r8
  r1 = sd_mmc_spi_send_and_read(0xFF);
80003586:	e0 6c 00 ff 	mov	r12,255
8000358a:	f0 1f 00 18 	mcall	800035e8 <sd_mmc_spi_check_hc+0xb8>
8000358e:	18 98       	mov	r8,r12
80003590:	49 49       	lddpc	r9,800035e0 <sd_mmc_spi_check_hc+0xb0>
80003592:	b2 88       	st.b	r9[0x0],r8
  r1 = sd_mmc_spi_send_and_read(0xFF);
80003594:	e0 6c 00 ff 	mov	r12,255
80003598:	f0 1f 00 14 	mcall	800035e8 <sd_mmc_spi_check_hc+0xb8>
8000359c:	18 98       	mov	r8,r12
8000359e:	49 19       	lddpc	r9,800035e0 <sd_mmc_spi_check_hc+0xb0>
800035a0:	b2 88       	st.b	r9[0x0],r8
  r1 = sd_mmc_spi_send_and_read(0xFF);
800035a2:	e0 6c 00 ff 	mov	r12,255
800035a6:	f0 1f 00 11 	mcall	800035e8 <sd_mmc_spi_check_hc+0xb8>
800035aa:	18 98       	mov	r8,r12
800035ac:	48 d9       	lddpc	r9,800035e0 <sd_mmc_spi_check_hc+0xb0>
800035ae:	b2 88       	st.b	r9[0x0],r8
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800035b0:	30 1b       	mov	r11,1
800035b2:	fe 7c 28 00 	mov	r12,-55296
800035b6:	f0 1f 00 0c 	mcall	800035e4 <sd_mmc_spi_check_hc+0xb4>
  if(hc_bit & 0x40) {
800035ba:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800035be:	e2 18 00 40 	andl	r8,0x40,COH
800035c2:	c0 30       	breq	800035c8 <sd_mmc_spi_check_hc+0x98>
      return SDHC_CARD;
800035c4:	30 18       	mov	r8,1
800035c6:	c0 28       	rjmp	800035ca <sd_mmc_spi_check_hc+0x9a>
  }
  return 0;
800035c8:	30 08       	mov	r8,0
}
800035ca:	10 9c       	mov	r12,r8
800035cc:	2f fd       	sub	sp,-4
800035ce:	e3 cd 80 80 	ldm	sp++,r7,pc
800035d2:	00 00       	add	r0,r0
800035d4:	80 00       	ld.sh	r0,r0[0x0]
800035d6:	39 20       	mov	r0,-110
800035d8:	80 00       	ld.sh	r0,r0[0x0]
800035da:	85 c0       	st.w	r2[0x30],r0
800035dc:	80 00       	ld.sh	r0,r0[0x0]
800035de:	32 f4       	mov	r4,47
800035e0:	00 00       	add	r0,r0
800035e2:	0b 20       	ld.uh	r0,r5++
800035e4:	80 00       	ld.sh	r0,r0[0x0]
800035e6:	86 58       	ld.sh	r8,r3[0xa]
800035e8:	80 00       	ld.sh	r0,r0[0x0]
800035ea:	34 04       	mov	r4,64

800035ec <sd_mmc_spi_get_csd>:
//! @param  buffer to fill
//!
//! @return bit
//!         true / false
bool sd_mmc_spi_get_csd(uint8_t *buffer)
{
800035ec:	eb cd 40 80 	pushm	r7,lr
800035f0:	1a 97       	mov	r7,sp
800035f2:	20 2d       	sub	sp,8
800035f4:	ef 4c ff f8 	st.w	r7[-8],r12
uint8_t retry;
unsigned short data_read;
  // wait for MMC not busy
  if (false == sd_mmc_spi_wait_not_busy())
800035f8:	f0 1f 00 45 	mcall	8000370c <sd_mmc_spi_get_csd+0x120>
800035fc:	18 98       	mov	r8,r12
800035fe:	ec 18 00 01 	eorl	r8,0x1
80003602:	5c 58       	castu.b	r8
80003604:	c0 30       	breq	8000360a <sd_mmc_spi_get_csd+0x1e>
    return false;
80003606:	30 08       	mov	r8,0
80003608:	c7 d8       	rjmp	80003702 <sd_mmc_spi_get_csd+0x116>

  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
8000360a:	30 1b       	mov	r11,1
8000360c:	fe 7c 28 00 	mov	r12,-55296
80003610:	f0 1f 00 40 	mcall	80003710 <sd_mmc_spi_get_csd+0x124>
  // issue command
  r1 = sd_mmc_spi_command(MMC_SEND_CSD, 0);
80003614:	30 0b       	mov	r11,0
80003616:	30 9c       	mov	r12,9
80003618:	f0 1f 00 3f 	mcall	80003714 <sd_mmc_spi_get_csd+0x128>
8000361c:	18 98       	mov	r8,r12
8000361e:	4b f9       	lddpc	r9,80003718 <sd_mmc_spi_get_csd+0x12c>
80003620:	b2 88       	st.b	r9[0x0],r8
  // check for valid response
  if(r1 != 0x00)
80003622:	4b e8       	lddpc	r8,80003718 <sd_mmc_spi_get_csd+0x12c>
80003624:	11 88       	ld.ub	r8,r8[0x0]
80003626:	58 08       	cp.w	r8,0
80003628:	c0 b0       	breq	8000363e <sd_mmc_spi_get_csd+0x52>
  {
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
8000362a:	30 1b       	mov	r11,1
8000362c:	fe 7c 28 00 	mov	r12,-55296
80003630:	f0 1f 00 3b 	mcall	8000371c <sd_mmc_spi_get_csd+0x130>
    sd_mmc_spi_init_done = false;
80003634:	4b b9       	lddpc	r9,80003720 <sd_mmc_spi_get_csd+0x134>
80003636:	30 08       	mov	r8,0
80003638:	b2 88       	st.b	r9[0x0],r8
    return false;
8000363a:	30 08       	mov	r8,0
8000363c:	c6 38       	rjmp	80003702 <sd_mmc_spi_get_csd+0x116>
  }
  // wait for block start
  retry = 0;
8000363e:	30 08       	mov	r8,0
80003640:	ef 68 ff ff 	st.b	r7[-1],r8
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != MMC_STARTBLOCK_READ)
80003644:	c1 48       	rjmp	8000366c <sd_mmc_spi_get_csd+0x80>
  {
    if (retry > 8)
80003646:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000364a:	30 88       	mov	r8,8
8000364c:	f0 09 18 00 	cp.b	r9,r8
80003650:	e0 88 00 09 	brls	80003662 <sd_mmc_spi_get_csd+0x76>
    {
      spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80003654:	30 1b       	mov	r11,1
80003656:	fe 7c 28 00 	mov	r12,-55296
8000365a:	f0 1f 00 31 	mcall	8000371c <sd_mmc_spi_get_csd+0x130>
      return false;
8000365e:	30 08       	mov	r8,0
80003660:	c5 18       	rjmp	80003702 <sd_mmc_spi_get_csd+0x116>
    }
    retry++;
80003662:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80003666:	2f f8       	sub	r8,-1
80003668:	ef 68 ff ff 	st.b	r7[-1],r8
    sd_mmc_spi_init_done = false;
    return false;
  }
  // wait for block start
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != MMC_STARTBLOCK_READ)
8000366c:	e0 6c 00 ff 	mov	r12,255
80003670:	f0 1f 00 2d 	mcall	80003724 <sd_mmc_spi_get_csd+0x138>
80003674:	18 98       	mov	r8,r12
80003676:	4a 99       	lddpc	r9,80003718 <sd_mmc_spi_get_csd+0x12c>
80003678:	b2 88       	st.b	r9[0x0],r8
8000367a:	4a 88       	lddpc	r8,80003718 <sd_mmc_spi_get_csd+0x12c>
8000367c:	11 89       	ld.ub	r9,r8[0x0]
8000367e:	3f e8       	mov	r8,-2
80003680:	f0 09 18 00 	cp.b	r9,r8
80003684:	ce 11       	brne	80003646 <sd_mmc_spi_get_csd+0x5a>
      return false;
    }
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
80003686:	30 08       	mov	r8,0
80003688:	ef 68 ff ff 	st.b	r7[-1],r8
8000368c:	c1 c8       	rjmp	800036c4 <sd_mmc_spi_get_csd+0xd8>
  {
   spi_write(SD_MMC_SPI,0xFF);
8000368e:	e0 6b 00 ff 	mov	r11,255
80003692:	fe 7c 28 00 	mov	r12,-55296
80003696:	f0 1f 00 25 	mcall	80003728 <sd_mmc_spi_get_csd+0x13c>
   spi_read(SD_MMC_SPI,&data_read);
8000369a:	ee c8 00 04 	sub	r8,r7,4
8000369e:	10 9b       	mov	r11,r8
800036a0:	fe 7c 28 00 	mov	r12,-55296
800036a4:	f0 1f 00 22 	mcall	8000372c <sd_mmc_spi_get_csd+0x140>
    buffer[retry] = data_read;
800036a8:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800036ac:	ee f9 ff f8 	ld.w	r9,r7[-8]
800036b0:	10 09       	add	r9,r8
800036b2:	ef 08 ff fc 	ld.sh	r8,r7[-4]
800036b6:	5c 58       	castu.b	r8
800036b8:	b2 88       	st.b	r9[0x0],r8
      return false;
    }
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
800036ba:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800036be:	2f f8       	sub	r8,-1
800036c0:	ef 68 ff ff 	st.b	r7[-1],r8
800036c4:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800036c8:	30 f8       	mov	r8,15
800036ca:	f0 09 18 00 	cp.b	r9,r8
800036ce:	fe 98 ff e0 	brls	8000368e <sd_mmc_spi_get_csd+0xa2>
  {
   spi_write(SD_MMC_SPI,0xFF);
   spi_read(SD_MMC_SPI,&data_read);
    buffer[retry] = data_read;
  }
   spi_write(SD_MMC_SPI,0xFF);   // load CRC (not used)
800036d2:	e0 6b 00 ff 	mov	r11,255
800036d6:	fe 7c 28 00 	mov	r12,-55296
800036da:	f0 1f 00 14 	mcall	80003728 <sd_mmc_spi_get_csd+0x13c>
   spi_write(SD_MMC_SPI,0xFF);
800036de:	e0 6b 00 ff 	mov	r11,255
800036e2:	fe 7c 28 00 	mov	r12,-55296
800036e6:	f0 1f 00 11 	mcall	80003728 <sd_mmc_spi_get_csd+0x13c>
   spi_write(SD_MMC_SPI,0xFF);   // give clock again to end transaction
800036ea:	e0 6b 00 ff 	mov	r11,255
800036ee:	fe 7c 28 00 	mov	r12,-55296
800036f2:	f0 1f 00 0e 	mcall	80003728 <sd_mmc_spi_get_csd+0x13c>
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800036f6:	30 1b       	mov	r11,1
800036f8:	fe 7c 28 00 	mov	r12,-55296
800036fc:	f0 1f 00 08 	mcall	8000371c <sd_mmc_spi_get_csd+0x130>
  return true;
80003700:	30 18       	mov	r8,1
}
80003702:	10 9c       	mov	r12,r8
80003704:	2f ed       	sub	sp,-8
80003706:	e3 cd 80 80 	ldm	sp++,r7,pc
8000370a:	00 00       	add	r0,r0
8000370c:	80 00       	ld.sh	r0,r0[0x0]
8000370e:	39 20       	mov	r0,-110
80003710:	80 00       	ld.sh	r0,r0[0x0]
80003712:	85 c0       	st.w	r2[0x30],r0
80003714:	80 00       	ld.sh	r0,r0[0x0]
80003716:	32 f4       	mov	r4,47
80003718:	00 00       	add	r0,r0
8000371a:	0b 20       	ld.uh	r0,r5++
8000371c:	80 00       	ld.sh	r0,r0[0x0]
8000371e:	86 58       	ld.sh	r8,r3[0xa]
80003720:	00 00       	add	r0,r0
80003722:	06 24       	rsub	r4,r3
80003724:	80 00       	ld.sh	r0,r0[0x0]
80003726:	34 04       	mov	r4,64
80003728:	80 00       	ld.sh	r0,r0[0x0]
8000372a:	88 62       	ld.sh	r2,r4[0xc]
8000372c:	80 00       	ld.sh	r0,r0[0x0]
8000372e:	88 ba       	ld.uh	r10,r4[0x6]

80003730 <sd_mmc_spi_get_capacity>:
//!         [39]    == data[11] && 0x80
//!
//! @return bit
//!         true
void sd_mmc_spi_get_capacity(void)
{
80003730:	eb cd 40 8f 	pushm	r0-r3,r7,lr
80003734:	1a 97       	mov	r7,sp
80003736:	20 2d       	sub	sp,8
  uint8_t  read_bl_len;
  uint8_t  erase_grp_size;
  uint8_t  erase_grp_mult;

  // extract variables from CSD array
  read_bl_len = csd[5] & 0x0F;
80003738:	4f 4c       	lddpc	r12,80003908 <sd_mmc_spi_get_capacity+0x1d8>
8000373a:	19 dc       	ld.ub	r12,r12[0x5]
8000373c:	f9 dc c0 04 	bfextu	r12,r12,0x0,0x4
80003740:	ef 6c ff fd 	st.b	r7[-3],r12
  if (card_type == SD_CARD_2_SDHC) {
80003744:	4f 2c       	lddpc	r12,8000390c <sd_mmc_spi_get_capacity+0x1dc>
80003746:	19 8e       	ld.ub	lr,r12[0x0]
80003748:	30 3c       	mov	r12,3
8000374a:	f8 0e 18 00 	cp.b	lr,r12
8000374e:	c4 71       	brne	800037dc <sd_mmc_spi_get_capacity+0xac>
    c_size = ((csd[7] & 0x3F) << 16) | (csd[8] << 8) | csd[9];
80003750:	4e ec       	lddpc	r12,80003908 <sd_mmc_spi_get_capacity+0x1d8>
80003752:	19 fc       	ld.ub	r12,r12[0x7]
80003754:	f9 dc c0 06 	bfextu	r12,r12,0x0,0x6
80003758:	f8 0e 15 10 	lsl	lr,r12,0x10
8000375c:	4e bc       	lddpc	r12,80003908 <sd_mmc_spi_get_capacity+0x1d8>
8000375e:	f9 3c 00 08 	ld.ub	r12,r12[8]
80003762:	a9 6c       	lsl	r12,0x8
80003764:	18 4e       	or	lr,r12
80003766:	4e 9c       	lddpc	r12,80003908 <sd_mmc_spi_get_capacity+0x1d8>
80003768:	f9 3c 00 09 	ld.ub	r12,r12[9]
8000376c:	fd ec 10 0c 	or	r12,lr,r12
80003770:	ef 4c ff f8 	st.w	r7[-8],r12
    ++c_size;
80003774:	ee fc ff f8 	ld.w	r12,r7[-8]
80003778:	2f fc       	sub	r12,-1
8000377a:	ef 4c ff f8 	st.w	r7[-8],r12
    capacity = (uint64_t)c_size << 19;
8000377e:	ee f2 ff f8 	ld.w	r2,r7[-8]
80003782:	30 03       	mov	r3,0
80003784:	e4 0c 16 0d 	lsr	r12,r2,0xd
80003788:	e6 0b 15 13 	lsl	r11,r3,0x13
8000378c:	f9 eb 10 0b 	or	r11,r12,r11
80003790:	e4 0a 15 13 	lsl	r10,r2,0x13
80003794:	4d fc       	lddpc	r12,80003910 <sd_mmc_spi_get_capacity+0x1e0>
80003796:	f8 eb 00 00 	st.d	r12[0],r10
    capacity_mult = (c_size >> 13) & 0x01FF;
8000379a:	ee fa ff f8 	ld.w	r10,r7[-8]
8000379e:	ad 9a       	lsr	r10,0xd
800037a0:	5c 8a       	casts.h	r10
800037a2:	5c 8a       	casts.h	r10
800037a4:	f5 da c0 09 	bfextu	r10,r10,0x0,0x9
800037a8:	4d bb       	lddpc	r11,80003914 <sd_mmc_spi_get_capacity+0x1e4>
800037aa:	b6 0a       	st.h	r11[0x0],r10
    sd_mmc_spi_last_block_address = (capacity >> 9) + (capacity_mult << 23) - 1;
800037ac:	4d 9a       	lddpc	r10,80003910 <sd_mmc_spi_get_capacity+0x1e0>
800037ae:	f4 ea 00 00 	ld.d	r10,r10[0]
800037b2:	f6 0c 15 17 	lsl	r12,r11,0x17
800037b6:	f4 08 16 09 	lsr	r8,r10,0x9
800037ba:	f9 e8 10 08 	or	r8,r12,r8
800037be:	f6 09 16 09 	lsr	r9,r11,0x9
800037c2:	10 99       	mov	r9,r8
800037c4:	4d 48       	lddpc	r8,80003914 <sd_mmc_spi_get_capacity+0x1e4>
800037c6:	90 08       	ld.sh	r8,r8[0x0]
800037c8:	5c 88       	casts.h	r8
800037ca:	5c 78       	castu.h	r8
800037cc:	b7 78       	lsl	r8,0x17
800037ce:	f2 08 00 08 	add	r8,r9,r8
800037d2:	f0 c9 00 01 	sub	r9,r8,1
800037d6:	4d 18       	lddpc	r8,80003918 <sd_mmc_spi_get_capacity+0x1e8>
800037d8:	91 09       	st.w	r8[0x0],r9
800037da:	c5 28       	rjmp	8000387e <sd_mmc_spi_get_capacity+0x14e>
  } else {
    c_size      = ((csd[6] & 0x03) << 10) + (csd[7] << 2) + ((csd[8] & 0xC0) >> 6);
800037dc:	4c b8       	lddpc	r8,80003908 <sd_mmc_spi_get_capacity+0x1d8>
800037de:	11 e8       	ld.ub	r8,r8[0x6]
800037e0:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
800037e4:	f0 09 15 0a 	lsl	r9,r8,0xa
800037e8:	4c 88       	lddpc	r8,80003908 <sd_mmc_spi_get_capacity+0x1d8>
800037ea:	11 f8       	ld.ub	r8,r8[0x7]
800037ec:	a3 68       	lsl	r8,0x2
800037ee:	10 09       	add	r9,r8
800037f0:	4c 68       	lddpc	r8,80003908 <sd_mmc_spi_get_capacity+0x1d8>
800037f2:	f1 38 00 08 	ld.ub	r8,r8[8]
800037f6:	a7 88       	lsr	r8,0x6
800037f8:	5c 58       	castu.b	r8
800037fa:	f2 08 00 08 	add	r8,r9,r8
800037fe:	ef 48 ff f8 	st.w	r7[-8],r8
    c_size_mult = ((csd[9] & 0x03) << 1) + ((csd[10] & 0x80) >> 7);
80003802:	4c 28       	lddpc	r8,80003908 <sd_mmc_spi_get_capacity+0x1d8>
80003804:	f1 38 00 09 	ld.ub	r8,r8[9]
80003808:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
8000380c:	a1 78       	lsl	r8,0x1
8000380e:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80003812:	4b e8       	lddpc	r8,80003908 <sd_mmc_spi_get_capacity+0x1d8>
80003814:	f1 38 00 0a 	ld.ub	r8,r8[10]
80003818:	a7 98       	lsr	r8,0x7
8000381a:	5c 58       	castu.b	r8
8000381c:	f2 08 00 08 	add	r8,r9,r8
80003820:	ef 68 ff fc 	st.b	r7[-4],r8
    sd_mmc_spi_last_block_address = ((uint32_t)(c_size + 1) * (uint32_t)((1 << (c_size_mult + 2)))) - 1;
80003824:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003828:	f0 c9 ff ff 	sub	r9,r8,-1
8000382c:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80003830:	2f e8       	sub	r8,-2
80003832:	f2 08 09 48 	lsl	r8,r9,r8
80003836:	f0 c9 00 01 	sub	r9,r8,1
8000383a:	4b 88       	lddpc	r8,80003918 <sd_mmc_spi_get_capacity+0x1e8>
8000383c:	91 09       	st.w	r8[0x0],r9
    capacity = (1 << read_bl_len) * (sd_mmc_spi_last_block_address + 1);
8000383e:	4b 78       	lddpc	r8,80003918 <sd_mmc_spi_get_capacity+0x1e8>
80003840:	70 08       	ld.w	r8,r8[0x0]
80003842:	f0 c9 ff ff 	sub	r9,r8,-1
80003846:	ef 38 ff fd 	ld.ub	r8,r7[-3]
8000384a:	f2 08 09 48 	lsl	r8,r9,r8
8000384e:	10 90       	mov	r0,r8
80003850:	30 01       	mov	r1,0
80003852:	4b 08       	lddpc	r8,80003910 <sd_mmc_spi_get_capacity+0x1e0>
80003854:	f0 e1 00 00 	st.d	r8[0],r0
    capacity_mult = 0;
80003858:	4a f9       	lddpc	r9,80003914 <sd_mmc_spi_get_capacity+0x1e4>
8000385a:	30 08       	mov	r8,0
8000385c:	b2 08       	st.h	r9[0x0],r8
    if (read_bl_len > 9) {  // 9 means 2^9 = 512b
8000385e:	ef 39 ff fd 	ld.ub	r9,r7[-3]
80003862:	30 98       	mov	r8,9
80003864:	f0 09 18 00 	cp.b	r9,r8
80003868:	e0 88 00 0b 	brls	8000387e <sd_mmc_spi_get_capacity+0x14e>
      sd_mmc_spi_last_block_address <<= (read_bl_len - 9);
8000386c:	4a b8       	lddpc	r8,80003918 <sd_mmc_spi_get_capacity+0x1e8>
8000386e:	70 09       	ld.w	r9,r8[0x0]
80003870:	ef 38 ff fd 	ld.ub	r8,r7[-3]
80003874:	20 98       	sub	r8,9
80003876:	f2 08 09 49 	lsl	r9,r9,r8
8000387a:	4a 88       	lddpc	r8,80003918 <sd_mmc_spi_get_capacity+0x1e8>
8000387c:	91 09       	st.w	r8[0x0],r9
    }
  }
  if (card_type == MMC_CARD)
8000387e:	4a 48       	lddpc	r8,8000390c <sd_mmc_spi_get_capacity+0x1dc>
80003880:	11 88       	ld.ub	r8,r8[0x0]
80003882:	58 08       	cp.w	r8,0
80003884:	c1 c1       	brne	800038bc <sd_mmc_spi_get_capacity+0x18c>
  {
    erase_grp_size = ((csd[10] & 0x7C) >> 2);
80003886:	4a 18       	lddpc	r8,80003908 <sd_mmc_spi_get_capacity+0x1d8>
80003888:	f1 38 00 0a 	ld.ub	r8,r8[10]
8000388c:	e2 18 00 7c 	andl	r8,0x7c,COH
80003890:	a3 48       	asr	r8,0x2
80003892:	ef 68 ff fe 	st.b	r7[-2],r8
    erase_grp_mult = ((csd[10] & 0x03) << 3) | ((csd[11] & 0xE0) >> 5);
80003896:	49 d8       	lddpc	r8,80003908 <sd_mmc_spi_get_capacity+0x1d8>
80003898:	f1 38 00 0a 	ld.ub	r8,r8[10]
8000389c:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
800038a0:	a3 78       	lsl	r8,0x3
800038a2:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800038a6:	49 98       	lddpc	r8,80003908 <sd_mmc_spi_get_capacity+0x1d8>
800038a8:	f1 38 00 0b 	ld.ub	r8,r8[11]
800038ac:	a5 98       	lsr	r8,0x5
800038ae:	5c 58       	castu.b	r8
800038b0:	f3 e8 10 08 	or	r8,r9,r8
800038b4:	5c 58       	castu.b	r8
800038b6:	ef 68 ff ff 	st.b	r7[-1],r8
800038ba:	c1 58       	rjmp	800038e4 <sd_mmc_spi_get_capacity+0x1b4>
  }
  else
  {
    erase_grp_size = ((csd[10] & 0x3F) << 1) + ((csd[11] & 0x80) >> 7);
800038bc:	49 38       	lddpc	r8,80003908 <sd_mmc_spi_get_capacity+0x1d8>
800038be:	f1 38 00 0a 	ld.ub	r8,r8[10]
800038c2:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6
800038c6:	a1 78       	lsl	r8,0x1
800038c8:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800038cc:	48 f8       	lddpc	r8,80003908 <sd_mmc_spi_get_capacity+0x1d8>
800038ce:	f1 38 00 0b 	ld.ub	r8,r8[11]
800038d2:	a7 98       	lsr	r8,0x7
800038d4:	5c 58       	castu.b	r8
800038d6:	f2 08 00 08 	add	r8,r9,r8
800038da:	ef 68 ff fe 	st.b	r7[-2],r8
    erase_grp_mult = 0;
800038de:	30 08       	mov	r8,0
800038e0:	ef 68 ff ff 	st.b	r7[-1],r8
  }
  erase_group_size = (erase_grp_size + 1) * (erase_grp_mult + 1);
800038e4:	ef 38 ff fe 	ld.ub	r8,r7[-2]
800038e8:	2f f8       	sub	r8,-1
800038ea:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
800038ee:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800038f2:	2f f8       	sub	r8,-1
800038f4:	5c 88       	casts.h	r8
800038f6:	f2 08 02 48 	mul	r8,r9,r8
800038fa:	5c 88       	casts.h	r8
800038fc:	48 89       	lddpc	r9,8000391c <sd_mmc_spi_get_capacity+0x1ec>
800038fe:	b2 08       	st.h	r9[0x0],r8
}
80003900:	2f ed       	sub	sp,-8
80003902:	e3 cd 80 8f 	ldm	sp++,r0-r3,r7,pc
80003906:	00 00       	add	r0,r0
80003908:	00 00       	add	r0,r0
8000390a:	0b 10       	ld.sh	r0,r5++
8000390c:	00 00       	add	r0,r0
8000390e:	0b 0e       	ld.w	lr,r5++
80003910:	00 00       	add	r0,r0
80003912:	0a fc       	st.b	--r5,r12
80003914:	00 00       	add	r0,r0
80003916:	0b 04       	ld.w	r4,r5++
80003918:	00 00       	add	r0,r0
8000391a:	0b 08       	ld.w	r8,r5++
8000391c:	00 00       	add	r0,r0
8000391e:	0b 06       	ld.w	r6,r5++

80003920 <sd_mmc_spi_wait_not_busy>:
//! @brief This function waits until the SD/MMC is not busy.
//!
//! @return bit
//!          true when card is not busy
bool sd_mmc_spi_wait_not_busy(void)
{
80003920:	eb cd 40 80 	pushm	r7,lr
80003924:	1a 97       	mov	r7,sp
80003926:	20 1d       	sub	sp,4
  uint32_t retry;

  // Select the SD_MMC memory gl_ptr_mem points to
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
80003928:	30 1b       	mov	r11,1
8000392a:	fe 7c 28 00 	mov	r12,-55296
8000392e:	f0 1f 00 18 	mcall	8000398c <sd_mmc_spi_wait_not_busy+0x6c>
  retry = 0;
80003932:	30 08       	mov	r8,0
80003934:	ef 48 ff fc 	st.w	r7[-4],r8
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != 0xFF)
80003938:	c1 28       	rjmp	8000395c <sd_mmc_spi_wait_not_busy+0x3c>
  {
    retry++;
8000393a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000393e:	2f f8       	sub	r8,-1
80003940:	ef 48 ff fc 	st.w	r7[-4],r8
    if (retry == 200000)
80003944:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003948:	e2 58 0d 40 	cp.w	r8,200000
8000394c:	c0 81       	brne	8000395c <sd_mmc_spi_wait_not_busy+0x3c>
    {
      spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
8000394e:	30 1b       	mov	r11,1
80003950:	fe 7c 28 00 	mov	r12,-55296
80003954:	f0 1f 00 0f 	mcall	80003990 <sd_mmc_spi_wait_not_busy+0x70>
      return false;
80003958:	30 08       	mov	r8,0
8000395a:	c1 48       	rjmp	80003982 <sd_mmc_spi_wait_not_busy+0x62>
  uint32_t retry;

  // Select the SD_MMC memory gl_ptr_mem points to
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != 0xFF)
8000395c:	e0 6c 00 ff 	mov	r12,255
80003960:	f0 1f 00 0d 	mcall	80003994 <sd_mmc_spi_wait_not_busy+0x74>
80003964:	18 98       	mov	r8,r12
80003966:	48 d9       	lddpc	r9,80003998 <sd_mmc_spi_wait_not_busy+0x78>
80003968:	b2 88       	st.b	r9[0x0],r8
8000396a:	48 c8       	lddpc	r8,80003998 <sd_mmc_spi_wait_not_busy+0x78>
8000396c:	11 89       	ld.ub	r9,r8[0x0]
8000396e:	3f f8       	mov	r8,-1
80003970:	f0 09 18 00 	cp.b	r9,r8
80003974:	ce 31       	brne	8000393a <sd_mmc_spi_wait_not_busy+0x1a>
    {
      spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
      return false;
    }
  }
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
80003976:	30 1b       	mov	r11,1
80003978:	fe 7c 28 00 	mov	r12,-55296
8000397c:	f0 1f 00 05 	mcall	80003990 <sd_mmc_spi_wait_not_busy+0x70>
  return true;
80003980:	30 18       	mov	r8,1
}
80003982:	10 9c       	mov	r12,r8
80003984:	2f fd       	sub	sp,-4
80003986:	e3 cd 80 80 	ldm	sp++,r7,pc
8000398a:	00 00       	add	r0,r0
8000398c:	80 00       	ld.sh	r0,r0[0x0]
8000398e:	85 c0       	st.w	r2[0x30],r0
80003990:	80 00       	ld.sh	r0,r0[0x0]
80003992:	86 58       	ld.sh	r8,r3[0xa]
80003994:	80 00       	ld.sh	r0,r0[0x0]
80003996:	34 04       	mov	r4,64
80003998:	00 00       	add	r0,r0
8000399a:	0b 20       	ld.uh	r0,r5++

8000399c <sd_mmc_spi_check_presence>:
//!
//! @return bit
//!   The memory is present (true)
//!   The memory does not respond (disconnected) (false)
bool sd_mmc_spi_check_presence(void)
{
8000399c:	eb cd 40 80 	pushm	r7,lr
800039a0:	1a 97       	mov	r7,sp
800039a2:	20 1d       	sub	sp,4
  uint16_t retry;

  retry = 0;
800039a4:	30 08       	mov	r8,0
800039a6:	ef 58 ff fe 	st.h	r7[-2],r8
  if (sd_mmc_spi_init_done == false)
800039aa:	4a 08       	lddpc	r8,80003a28 <sd_mmc_spi_check_presence+0x8c>
800039ac:	11 88       	ld.ub	r8,r8[0x0]
800039ae:	ec 18 00 01 	eorl	r8,0x1
800039b2:	5c 58       	castu.b	r8
800039b4:	c2 50       	breq	800039fe <sd_mmc_spi_check_presence+0x62>
  {
    // If memory is not initialized, try to initialize it (CMD0)
    // If no valid response, there is no card
    while ((r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0)) != 0x01)
800039b6:	c1 58       	rjmp	800039e0 <sd_mmc_spi_check_presence+0x44>
    {
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
800039b8:	e0 6b 00 ff 	mov	r11,255
800039bc:	fe 7c 28 00 	mov	r12,-55296
800039c0:	f0 1f 00 1b 	mcall	80003a2c <sd_mmc_spi_check_presence+0x90>
      retry++;
800039c4:	ef 08 ff fe 	ld.sh	r8,r7[-2]
800039c8:	2f f8       	sub	r8,-1
800039ca:	ef 58 ff fe 	st.h	r7[-2],r8
      if (retry > 10)
800039ce:	ef 09 ff fe 	ld.sh	r9,r7[-2]
800039d2:	30 a8       	mov	r8,10
800039d4:	f0 09 19 00 	cp.h	r9,r8
800039d8:	e0 88 00 04 	brls	800039e0 <sd_mmc_spi_check_presence+0x44>
        return false;
800039dc:	30 08       	mov	r8,0
800039de:	c2 18       	rjmp	80003a20 <sd_mmc_spi_check_presence+0x84>
  retry = 0;
  if (sd_mmc_spi_init_done == false)
  {
    // If memory is not initialized, try to initialize it (CMD0)
    // If no valid response, there is no card
    while ((r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0)) != 0x01)
800039e0:	30 0b       	mov	r11,0
800039e2:	30 0c       	mov	r12,0
800039e4:	f0 1f 00 13 	mcall	80003a30 <sd_mmc_spi_check_presence+0x94>
800039e8:	18 98       	mov	r8,r12
800039ea:	49 39       	lddpc	r9,80003a34 <sd_mmc_spi_check_presence+0x98>
800039ec:	b2 88       	st.b	r9[0x0],r8
800039ee:	49 28       	lddpc	r8,80003a34 <sd_mmc_spi_check_presence+0x98>
800039f0:	11 89       	ld.ub	r9,r8[0x0]
800039f2:	30 18       	mov	r8,1
800039f4:	f0 09 18 00 	cp.b	r9,r8
800039f8:	ce 01       	brne	800039b8 <sd_mmc_spi_check_presence+0x1c>
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
      retry++;
      if (retry > 10)
        return false;
    }
    return true;
800039fa:	30 18       	mov	r8,1
800039fc:	c1 28       	rjmp	80003a20 <sd_mmc_spi_check_presence+0x84>
  }
  else
  {
    // If memory already initialized, send a CRC command (CMD59) (supported only if card is initialized)
    if ((r1 = sd_mmc_spi_send_command(MMC_CRC_ON_OFF, 0)) == 0x00)
800039fe:	30 0b       	mov	r11,0
80003a00:	33 bc       	mov	r12,59
80003a02:	f0 1f 00 0c 	mcall	80003a30 <sd_mmc_spi_check_presence+0x94>
80003a06:	18 98       	mov	r8,r12
80003a08:	48 b9       	lddpc	r9,80003a34 <sd_mmc_spi_check_presence+0x98>
80003a0a:	b2 88       	st.b	r9[0x0],r8
80003a0c:	48 a8       	lddpc	r8,80003a34 <sd_mmc_spi_check_presence+0x98>
80003a0e:	11 88       	ld.ub	r8,r8[0x0]
80003a10:	58 08       	cp.w	r8,0
80003a12:	c0 31       	brne	80003a18 <sd_mmc_spi_check_presence+0x7c>
      return true;
80003a14:	30 18       	mov	r8,1
80003a16:	c0 58       	rjmp	80003a20 <sd_mmc_spi_check_presence+0x84>
    sd_mmc_spi_init_done = false;
80003a18:	48 49       	lddpc	r9,80003a28 <sd_mmc_spi_check_presence+0x8c>
80003a1a:	30 08       	mov	r8,0
80003a1c:	b2 88       	st.b	r9[0x0],r8
    return false;
80003a1e:	30 08       	mov	r8,0
  }
}
80003a20:	10 9c       	mov	r12,r8
80003a22:	2f fd       	sub	sp,-4
80003a24:	e3 cd 80 80 	ldm	sp++,r7,pc
80003a28:	00 00       	add	r0,r0
80003a2a:	06 24       	rsub	r4,r3
80003a2c:	80 00       	ld.sh	r0,r0[0x0]
80003a2e:	88 62       	ld.sh	r2,r4[0xc]
80003a30:	80 00       	ld.sh	r0,r0[0x0]
80003a32:	32 9c       	mov	r12,41
80003a34:	00 00       	add	r0,r0
80003a36:	0b 20       	ld.uh	r0,r5++

80003a38 <sd_mmc_spi_mem_check>:
//!
//! @return bit
//!   The memory is ready     -> true
//!   The memory check failed -> false
bool sd_mmc_spi_mem_check(void)
{
80003a38:	eb cd 40 80 	pushm	r7,lr
80003a3c:	1a 97       	mov	r7,sp
  if (sd_mmc_spi_check_presence())
80003a3e:	f0 1f 00 0b 	mcall	80003a68 <sd_mmc_spi_mem_check+0x30>
80003a42:	18 98       	mov	r8,r12
80003a44:	58 08       	cp.w	r8,0
80003a46:	c0 d0       	breq	80003a60 <sd_mmc_spi_mem_check+0x28>
  {
    if (sd_mmc_spi_init_done == false)
80003a48:	48 98       	lddpc	r8,80003a6c <sd_mmc_spi_mem_check+0x34>
80003a4a:	11 88       	ld.ub	r8,r8[0x0]
80003a4c:	ec 18 00 01 	eorl	r8,0x1
80003a50:	5c 58       	castu.b	r8
80003a52:	c0 50       	breq	80003a5c <sd_mmc_spi_mem_check+0x24>
    {
      return sd_mmc_spi_internal_init();
80003a54:	f0 1f 00 07 	mcall	80003a70 <sd_mmc_spi_mem_check+0x38>
80003a58:	18 98       	mov	r8,r12
80003a5a:	c0 48       	rjmp	80003a62 <sd_mmc_spi_mem_check+0x2a>
    }
    else
      return true;
80003a5c:	30 18       	mov	r8,1
80003a5e:	c0 28       	rjmp	80003a62 <sd_mmc_spi_mem_check+0x2a>
  }
  return false;
80003a60:	30 08       	mov	r8,0
}
80003a62:	10 9c       	mov	r12,r8
80003a64:	e3 cd 80 80 	ldm	sp++,r7,pc
80003a68:	80 00       	ld.sh	r0,r0[0x0]
80003a6a:	39 9c       	mov	r12,-103
80003a6c:	00 00       	add	r0,r0
80003a6e:	06 24       	rsub	r4,r3
80003a70:	80 00       	ld.sh	r0,r0[0x0]
80003a72:	2f 50       	sub	r0,-11

80003a74 <sd_mmc_spi_read_open>:
//! @param  pos   Sector address
//!
//! @return bit
//!   The open succeeded      -> true
bool sd_mmc_spi_read_open (uint32_t pos)
{
80003a74:	eb cd 40 80 	pushm	r7,lr
80003a78:	1a 97       	mov	r7,sp
80003a7a:	20 1d       	sub	sp,4
80003a7c:	ef 4c ff fc 	st.w	r7[-4],r12
  // Set the global memory ptr at a Byte address.
  gl_ptr_mem = pos << 9;        // gl_ptr_mem = pos * 512
80003a80:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003a84:	f0 09 15 09 	lsl	r9,r8,0x9
80003a88:	48 58       	lddpc	r8,80003a9c <sd_mmc_spi_read_open+0x28>
80003a8a:	91 09       	st.w	r8[0x0],r9

  // wait for MMC not busy
  return sd_mmc_spi_wait_not_busy();
80003a8c:	f0 1f 00 05 	mcall	80003aa0 <sd_mmc_spi_read_open+0x2c>
80003a90:	18 98       	mov	r8,r12
}
80003a92:	10 9c       	mov	r12,r8
80003a94:	2f fd       	sub	sp,-4
80003a96:	e3 cd 80 80 	ldm	sp++,r7,pc
80003a9a:	00 00       	add	r0,r0
80003a9c:	00 00       	add	r0,r0
80003a9e:	06 0c       	add	r12,r3
80003aa0:	80 00       	ld.sh	r0,r0[0x0]
80003aa2:	39 20       	mov	r0,-110

80003aa4 <sd_mmc_spi_read_close>:

//!
//! @brief This function unselects the current SD_MMC memory.
//!
bool sd_mmc_spi_read_close (void)
{
80003aa4:	eb cd 40 80 	pushm	r7,lr
80003aa8:	1a 97       	mov	r7,sp
  if (false == sd_mmc_spi_wait_not_busy())
80003aaa:	f0 1f 00 07 	mcall	80003ac4 <sd_mmc_spi_read_close+0x20>
80003aae:	18 98       	mov	r8,r12
80003ab0:	ec 18 00 01 	eorl	r8,0x1
80003ab4:	5c 58       	castu.b	r8
80003ab6:	c0 30       	breq	80003abc <sd_mmc_spi_read_close+0x18>
    return false;
80003ab8:	30 08       	mov	r8,0
80003aba:	c0 28       	rjmp	80003abe <sd_mmc_spi_read_close+0x1a>
  return true;
80003abc:	30 18       	mov	r8,1
}
80003abe:	10 9c       	mov	r12,r8
80003ac0:	e3 cd 80 80 	ldm	sp++,r7,pc
80003ac4:	80 00       	ld.sh	r0,r0[0x0]
80003ac6:	39 20       	mov	r0,-110

80003ac8 <sd_mmc_spi_write_open>:
//! @param  pos   Sector address
//!
//! @return bit
//!   The open succeeded      -> true
bool sd_mmc_spi_write_open (uint32_t pos)
{
80003ac8:	eb cd 40 80 	pushm	r7,lr
80003acc:	1a 97       	mov	r7,sp
80003ace:	20 1d       	sub	sp,4
80003ad0:	ef 4c ff fc 	st.w	r7[-4],r12
  // Set the global memory ptr at a Byte address.
  gl_ptr_mem = pos << 9; // gl_ptr_mem = pos * 512
80003ad4:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003ad8:	f0 09 15 09 	lsl	r9,r8,0x9
80003adc:	48 58       	lddpc	r8,80003af0 <sd_mmc_spi_write_open+0x28>
80003ade:	91 09       	st.w	r8[0x0],r9

  // wait for MMC not busy
  return sd_mmc_spi_wait_not_busy();
80003ae0:	f0 1f 00 05 	mcall	80003af4 <sd_mmc_spi_write_open+0x2c>
80003ae4:	18 98       	mov	r8,r12
}
80003ae6:	10 9c       	mov	r12,r8
80003ae8:	2f fd       	sub	sp,-4
80003aea:	e3 cd 80 80 	ldm	sp++,r7,pc
80003aee:	00 00       	add	r0,r0
80003af0:	00 00       	add	r0,r0
80003af2:	06 0c       	add	r12,r3
80003af4:	80 00       	ld.sh	r0,r0[0x0]
80003af6:	39 20       	mov	r0,-110

80003af8 <sd_mmc_spi_write_close>:
//!
//! @brief This function fills the end of the logical sector (512B) and launch
//! page programming.
//!
void sd_mmc_spi_write_close (void)
{
80003af8:	eb cd 40 80 	pushm	r7,lr
80003afc:	1a 97       	mov	r7,sp

}
80003afe:	e3 cd 80 80 	ldm	sp++,r7,pc
80003b02:	d7 03       	nop

80003b04 <sd_mmc_spi_read_sector_to_ram>:
//! @return bit
//!   The read succeeded   -> true
//!   The read failed (bad address, etc.)  -> false
//!/
bool sd_mmc_spi_read_sector_to_ram(void *ram)
{
80003b04:	eb cd 40 80 	pushm	r7,lr
80003b08:	1a 97       	mov	r7,sp
80003b0a:	20 4d       	sub	sp,16
80003b0c:	ef 4c ff f0 	st.w	r7[-16],r12
  uint8_t *_ram = ram;
80003b10:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003b14:	ef 48 ff f8 	st.w	r7[-8],r8
  uint16_t  i;
  uint16_t  read_time_out;
  unsigned short data_read;
  // wait for MMC not busy
  if (false == sd_mmc_spi_wait_not_busy())
80003b18:	f0 1f 00 5e 	mcall	80003c90 <sd_mmc_spi_read_sector_to_ram+0x18c>
80003b1c:	18 98       	mov	r8,r12
80003b1e:	ec 18 00 01 	eorl	r8,0x1
80003b22:	5c 58       	castu.b	r8
80003b24:	c0 30       	breq	80003b2a <sd_mmc_spi_read_sector_to_ram+0x26>
    return false;
80003b26:	30 08       	mov	r8,0
80003b28:	ca f8       	rjmp	80003c86 <sd_mmc_spi_read_sector_to_ram+0x182>

  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
80003b2a:	30 1b       	mov	r11,1
80003b2c:	fe 7c 28 00 	mov	r12,-55296
80003b30:	f0 1f 00 59 	mcall	80003c94 <sd_mmc_spi_read_sector_to_ram+0x190>

  // issue command
  if(card_type == SD_CARD_2_SDHC) {
80003b34:	4d 98       	lddpc	r8,80003c98 <sd_mmc_spi_read_sector_to_ram+0x194>
80003b36:	11 89       	ld.ub	r9,r8[0x0]
80003b38:	30 38       	mov	r8,3
80003b3a:	f0 09 18 00 	cp.b	r9,r8
80003b3e:	c0 c1       	brne	80003b56 <sd_mmc_spi_read_sector_to_ram+0x52>
    r1 = sd_mmc_spi_command(MMC_READ_SINGLE_BLOCK, gl_ptr_mem>>9);
80003b40:	4d 78       	lddpc	r8,80003c9c <sd_mmc_spi_read_sector_to_ram+0x198>
80003b42:	70 08       	ld.w	r8,r8[0x0]
80003b44:	a9 98       	lsr	r8,0x9
80003b46:	10 9b       	mov	r11,r8
80003b48:	31 1c       	mov	r12,17
80003b4a:	f0 1f 00 56 	mcall	80003ca0 <sd_mmc_spi_read_sector_to_ram+0x19c>
80003b4e:	18 98       	mov	r8,r12
80003b50:	4d 59       	lddpc	r9,80003ca4 <sd_mmc_spi_read_sector_to_ram+0x1a0>
80003b52:	b2 88       	st.b	r9[0x0],r8
80003b54:	c0 a8       	rjmp	80003b68 <sd_mmc_spi_read_sector_to_ram+0x64>
  } else {
    r1 = sd_mmc_spi_command(MMC_READ_SINGLE_BLOCK, gl_ptr_mem);
80003b56:	4d 28       	lddpc	r8,80003c9c <sd_mmc_spi_read_sector_to_ram+0x198>
80003b58:	70 08       	ld.w	r8,r8[0x0]
80003b5a:	10 9b       	mov	r11,r8
80003b5c:	31 1c       	mov	r12,17
80003b5e:	f0 1f 00 51 	mcall	80003ca0 <sd_mmc_spi_read_sector_to_ram+0x19c>
80003b62:	18 98       	mov	r8,r12
80003b64:	4d 09       	lddpc	r9,80003ca4 <sd_mmc_spi_read_sector_to_ram+0x1a0>
80003b66:	b2 88       	st.b	r9[0x0],r8
  }

  // check for valid response
  if (r1 != 0x00)
80003b68:	4c f8       	lddpc	r8,80003ca4 <sd_mmc_spi_read_sector_to_ram+0x1a0>
80003b6a:	11 88       	ld.ub	r8,r8[0x0]
80003b6c:	58 08       	cp.w	r8,0
80003b6e:	c0 80       	breq	80003b7e <sd_mmc_spi_read_sector_to_ram+0x7a>
  {
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80003b70:	30 1b       	mov	r11,1
80003b72:	fe 7c 28 00 	mov	r12,-55296
80003b76:	f0 1f 00 4d 	mcall	80003ca8 <sd_mmc_spi_read_sector_to_ram+0x1a4>
    return false;
80003b7a:	30 08       	mov	r8,0
80003b7c:	c8 58       	rjmp	80003c86 <sd_mmc_spi_read_sector_to_ram+0x182>
  }

  // wait for token (may be a datablock start token OR a data error token !)
  read_time_out = 30000;
80003b7e:	e0 68 75 30 	mov	r8,30000
80003b82:	ef 58 ff fe 	st.h	r7[-2],r8
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) == 0xFF)
80003b86:	c1 38       	rjmp	80003bac <sd_mmc_spi_read_sector_to_ram+0xa8>
  {
     read_time_out--;
80003b88:	ef 08 ff fe 	ld.sh	r8,r7[-2]
80003b8c:	20 18       	sub	r8,1
80003b8e:	ef 58 ff fe 	st.h	r7[-2],r8
     if (read_time_out == 0)   // TIME-OUT
80003b92:	ef 09 ff fe 	ld.sh	r9,r7[-2]
80003b96:	30 08       	mov	r8,0
80003b98:	f0 09 19 00 	cp.h	r9,r8
80003b9c:	c0 81       	brne	80003bac <sd_mmc_spi_read_sector_to_ram+0xa8>
     {
       spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS); // unselect SD_MMC_SPI
80003b9e:	30 1b       	mov	r11,1
80003ba0:	fe 7c 28 00 	mov	r12,-55296
80003ba4:	f0 1f 00 41 	mcall	80003ca8 <sd_mmc_spi_read_sector_to_ram+0x1a4>
       return false;
80003ba8:	30 08       	mov	r8,0
80003baa:	c6 e8       	rjmp	80003c86 <sd_mmc_spi_read_sector_to_ram+0x182>
    return false;
  }

  // wait for token (may be a datablock start token OR a data error token !)
  read_time_out = 30000;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) == 0xFF)
80003bac:	e0 6c 00 ff 	mov	r12,255
80003bb0:	f0 1f 00 3f 	mcall	80003cac <sd_mmc_spi_read_sector_to_ram+0x1a8>
80003bb4:	18 98       	mov	r8,r12
80003bb6:	4b c9       	lddpc	r9,80003ca4 <sd_mmc_spi_read_sector_to_ram+0x1a0>
80003bb8:	b2 88       	st.b	r9[0x0],r8
80003bba:	4b b8       	lddpc	r8,80003ca4 <sd_mmc_spi_read_sector_to_ram+0x1a0>
80003bbc:	11 89       	ld.ub	r9,r8[0x0]
80003bbe:	3f f8       	mov	r8,-1
80003bc0:	f0 09 18 00 	cp.b	r9,r8
80003bc4:	ce 20       	breq	80003b88 <sd_mmc_spi_read_sector_to_ram+0x84>
       return false;
     }
  }

  // check token
  if (r1 != MMC_STARTBLOCK_READ)
80003bc6:	4b 88       	lddpc	r8,80003ca4 <sd_mmc_spi_read_sector_to_ram+0x1a0>
80003bc8:	11 89       	ld.ub	r9,r8[0x0]
80003bca:	3f e8       	mov	r8,-2
80003bcc:	f0 09 18 00 	cp.b	r9,r8
80003bd0:	c0 e0       	breq	80003bec <sd_mmc_spi_read_sector_to_ram+0xe8>
  {
    spi_write(SD_MMC_SPI,0xFF);
80003bd2:	e0 6b 00 ff 	mov	r11,255
80003bd6:	fe 7c 28 00 	mov	r12,-55296
80003bda:	f0 1f 00 36 	mcall	80003cb0 <sd_mmc_spi_read_sector_to_ram+0x1ac>
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80003bde:	30 1b       	mov	r11,1
80003be0:	fe 7c 28 00 	mov	r12,-55296
80003be4:	f0 1f 00 31 	mcall	80003ca8 <sd_mmc_spi_read_sector_to_ram+0x1a4>
    return false;
80003be8:	30 08       	mov	r8,0
80003bea:	c4 e8       	rjmp	80003c86 <sd_mmc_spi_read_sector_to_ram+0x182>
  }

  // store datablock
  for(i=0;i<MMC_SECTOR_SIZE;i++)
80003bec:	30 08       	mov	r8,0
80003bee:	ef 58 ff fc 	st.h	r7[-4],r8
80003bf2:	c1 e8       	rjmp	80003c2e <sd_mmc_spi_read_sector_to_ram+0x12a>
  {
    spi_write(SD_MMC_SPI,0xFF);
80003bf4:	e0 6b 00 ff 	mov	r11,255
80003bf8:	fe 7c 28 00 	mov	r12,-55296
80003bfc:	f0 1f 00 2d 	mcall	80003cb0 <sd_mmc_spi_read_sector_to_ram+0x1ac>
    spi_read(SD_MMC_SPI,&data_read);
80003c00:	ee c8 00 0a 	sub	r8,r7,10
80003c04:	10 9b       	mov	r11,r8
80003c06:	fe 7c 28 00 	mov	r12,-55296
80003c0a:	f0 1f 00 2b 	mcall	80003cb4 <sd_mmc_spi_read_sector_to_ram+0x1b0>
    *_ram++=data_read;
80003c0e:	ef 08 ff f6 	ld.sh	r8,r7[-10]
80003c12:	5c 58       	castu.b	r8
80003c14:	ee f9 ff f8 	ld.w	r9,r7[-8]
80003c18:	b2 88       	st.b	r9[0x0],r8
80003c1a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003c1e:	2f f8       	sub	r8,-1
80003c20:	ef 48 ff f8 	st.w	r7[-8],r8
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
    return false;
  }

  // store datablock
  for(i=0;i<MMC_SECTOR_SIZE;i++)
80003c24:	ef 08 ff fc 	ld.sh	r8,r7[-4]
80003c28:	2f f8       	sub	r8,-1
80003c2a:	ef 58 ff fc 	st.h	r7[-4],r8
80003c2e:	ef 09 ff fc 	ld.sh	r9,r7[-4]
80003c32:	e0 68 01 ff 	mov	r8,511
80003c36:	f0 09 19 00 	cp.h	r9,r8
80003c3a:	fe 98 ff dd 	brls	80003bf4 <sd_mmc_spi_read_sector_to_ram+0xf0>
  {
    spi_write(SD_MMC_SPI,0xFF);
    spi_read(SD_MMC_SPI,&data_read);
    *_ram++=data_read;
  }
  gl_ptr_mem += 512;     // Update the memory pointer.
80003c3e:	49 88       	lddpc	r8,80003c9c <sd_mmc_spi_read_sector_to_ram+0x198>
80003c40:	70 08       	ld.w	r8,r8[0x0]
80003c42:	f0 c9 fe 00 	sub	r9,r8,-512
80003c46:	49 68       	lddpc	r8,80003c9c <sd_mmc_spi_read_sector_to_ram+0x198>
80003c48:	91 09       	st.w	r8[0x0],r9

  // load 16-bit CRC (ignored)
  spi_write(SD_MMC_SPI,0xFF);
80003c4a:	e0 6b 00 ff 	mov	r11,255
80003c4e:	fe 7c 28 00 	mov	r12,-55296
80003c52:	f0 1f 00 18 	mcall	80003cb0 <sd_mmc_spi_read_sector_to_ram+0x1ac>
  spi_write(SD_MMC_SPI,0xFF);
80003c56:	e0 6b 00 ff 	mov	r11,255
80003c5a:	fe 7c 28 00 	mov	r12,-55296
80003c5e:	f0 1f 00 15 	mcall	80003cb0 <sd_mmc_spi_read_sector_to_ram+0x1ac>

  // continue delivering some clock cycles
  spi_write(SD_MMC_SPI,0xFF);
80003c62:	e0 6b 00 ff 	mov	r11,255
80003c66:	fe 7c 28 00 	mov	r12,-55296
80003c6a:	f0 1f 00 12 	mcall	80003cb0 <sd_mmc_spi_read_sector_to_ram+0x1ac>
  spi_write(SD_MMC_SPI,0xFF);
80003c6e:	e0 6b 00 ff 	mov	r11,255
80003c72:	fe 7c 28 00 	mov	r12,-55296
80003c76:	f0 1f 00 0f 	mcall	80003cb0 <sd_mmc_spi_read_sector_to_ram+0x1ac>

  // release chip select
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80003c7a:	30 1b       	mov	r11,1
80003c7c:	fe 7c 28 00 	mov	r12,-55296
80003c80:	f0 1f 00 0a 	mcall	80003ca8 <sd_mmc_spi_read_sector_to_ram+0x1a4>

  return true;   // Read done.
80003c84:	30 18       	mov	r8,1
}
80003c86:	10 9c       	mov	r12,r8
80003c88:	2f cd       	sub	sp,-16
80003c8a:	e3 cd 80 80 	ldm	sp++,r7,pc
80003c8e:	00 00       	add	r0,r0
80003c90:	80 00       	ld.sh	r0,r0[0x0]
80003c92:	39 20       	mov	r0,-110
80003c94:	80 00       	ld.sh	r0,r0[0x0]
80003c96:	85 c0       	st.w	r2[0x30],r0
80003c98:	00 00       	add	r0,r0
80003c9a:	0b 0e       	ld.w	lr,r5++
80003c9c:	00 00       	add	r0,r0
80003c9e:	06 0c       	add	r12,r3
80003ca0:	80 00       	ld.sh	r0,r0[0x0]
80003ca2:	32 f4       	mov	r4,47
80003ca4:	00 00       	add	r0,r0
80003ca6:	0b 20       	ld.uh	r0,r5++
80003ca8:	80 00       	ld.sh	r0,r0[0x0]
80003caa:	86 58       	ld.sh	r8,r3[0xa]
80003cac:	80 00       	ld.sh	r0,r0[0x0]
80003cae:	34 04       	mov	r4,64
80003cb0:	80 00       	ld.sh	r0,r0[0x0]
80003cb2:	88 62       	ld.sh	r2,r4[0xc]
80003cb4:	80 00       	ld.sh	r0,r0[0x0]
80003cb6:	88 ba       	ld.uh	r10,r4[0x6]

80003cb8 <sd_mmc_spi_write_sector_from_ram>:
//! @return bit
//!   The write succeeded   -> true
//!   The write failed      -> false
//!
bool sd_mmc_spi_write_sector_from_ram(const void *ram)
{
80003cb8:	eb cd 40 80 	pushm	r7,lr
80003cbc:	1a 97       	mov	r7,sp
80003cbe:	20 3d       	sub	sp,12
80003cc0:	ef 4c ff f4 	st.w	r7[-12],r12
  const uint8_t *_ram = ram;
80003cc4:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003cc8:	ef 48 ff f8 	st.w	r7[-8],r8
  uint16_t i;

  // wait for MMC not busy
  if (false == sd_mmc_spi_wait_not_busy())
80003ccc:	f0 1f 00 5f 	mcall	80003e48 <sd_mmc_spi_write_sector_from_ram+0x190>
80003cd0:	18 98       	mov	r8,r12
80003cd2:	ec 18 00 01 	eorl	r8,0x1
80003cd6:	5c 58       	castu.b	r8
80003cd8:	c0 30       	breq	80003cde <sd_mmc_spi_write_sector_from_ram+0x26>
    return false;
80003cda:	30 08       	mov	r8,0
80003cdc:	cb 18       	rjmp	80003e3e <sd_mmc_spi_write_sector_from_ram+0x186>

  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
80003cde:	30 1b       	mov	r11,1
80003ce0:	fe 7c 28 00 	mov	r12,-55296
80003ce4:	f0 1f 00 5a 	mcall	80003e4c <sd_mmc_spi_write_sector_from_ram+0x194>

  // issue command
  if(card_type == SD_CARD_2_SDHC) {
80003ce8:	4d a8       	lddpc	r8,80003e50 <sd_mmc_spi_write_sector_from_ram+0x198>
80003cea:	11 89       	ld.ub	r9,r8[0x0]
80003cec:	30 38       	mov	r8,3
80003cee:	f0 09 18 00 	cp.b	r9,r8
80003cf2:	c0 c1       	brne	80003d0a <sd_mmc_spi_write_sector_from_ram+0x52>
    r1 = sd_mmc_spi_command(MMC_WRITE_BLOCK, gl_ptr_mem>>9);
80003cf4:	4d 88       	lddpc	r8,80003e54 <sd_mmc_spi_write_sector_from_ram+0x19c>
80003cf6:	70 08       	ld.w	r8,r8[0x0]
80003cf8:	a9 98       	lsr	r8,0x9
80003cfa:	10 9b       	mov	r11,r8
80003cfc:	31 8c       	mov	r12,24
80003cfe:	f0 1f 00 57 	mcall	80003e58 <sd_mmc_spi_write_sector_from_ram+0x1a0>
80003d02:	18 98       	mov	r8,r12
80003d04:	4d 69       	lddpc	r9,80003e5c <sd_mmc_spi_write_sector_from_ram+0x1a4>
80003d06:	b2 88       	st.b	r9[0x0],r8
80003d08:	c0 a8       	rjmp	80003d1c <sd_mmc_spi_write_sector_from_ram+0x64>
  } else {
    r1 = sd_mmc_spi_command(MMC_WRITE_BLOCK, gl_ptr_mem);
80003d0a:	4d 38       	lddpc	r8,80003e54 <sd_mmc_spi_write_sector_from_ram+0x19c>
80003d0c:	70 08       	ld.w	r8,r8[0x0]
80003d0e:	10 9b       	mov	r11,r8
80003d10:	31 8c       	mov	r12,24
80003d12:	f0 1f 00 52 	mcall	80003e58 <sd_mmc_spi_write_sector_from_ram+0x1a0>
80003d16:	18 98       	mov	r8,r12
80003d18:	4d 19       	lddpc	r9,80003e5c <sd_mmc_spi_write_sector_from_ram+0x1a4>
80003d1a:	b2 88       	st.b	r9[0x0],r8
  }

  // check for valid response
  if(r1 != 0x00)
80003d1c:	4d 08       	lddpc	r8,80003e5c <sd_mmc_spi_write_sector_from_ram+0x1a4>
80003d1e:	11 88       	ld.ub	r8,r8[0x0]
80003d20:	58 08       	cp.w	r8,0
80003d22:	c0 80       	breq	80003d32 <sd_mmc_spi_write_sector_from_ram+0x7a>
  {
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
80003d24:	30 1b       	mov	r11,1
80003d26:	fe 7c 28 00 	mov	r12,-55296
80003d2a:	f0 1f 00 4e 	mcall	80003e60 <sd_mmc_spi_write_sector_from_ram+0x1a8>
    return false;
80003d2e:	30 08       	mov	r8,0
80003d30:	c8 78       	rjmp	80003e3e <sd_mmc_spi_write_sector_from_ram+0x186>
  }
  // send dummy
  spi_write(SD_MMC_SPI,0xFF);   // give clock again to end transaction
80003d32:	e0 6b 00 ff 	mov	r11,255
80003d36:	fe 7c 28 00 	mov	r12,-55296
80003d3a:	f0 1f 00 4b 	mcall	80003e64 <sd_mmc_spi_write_sector_from_ram+0x1ac>

  // send data start token
  spi_write(SD_MMC_SPI,MMC_STARTBLOCK_WRITE);
80003d3e:	e0 6b 00 fe 	mov	r11,254
80003d42:	fe 7c 28 00 	mov	r12,-55296
80003d46:	f0 1f 00 48 	mcall	80003e64 <sd_mmc_spi_write_sector_from_ram+0x1ac>
  // write data
  for(i=0;i<MMC_SECTOR_SIZE;i++)
80003d4a:	30 08       	mov	r8,0
80003d4c:	ef 58 ff fe 	st.h	r7[-2],r8
80003d50:	c1 38       	rjmp	80003d76 <sd_mmc_spi_write_sector_from_ram+0xbe>
  {
    spi_write(SD_MMC_SPI,*_ram++);
80003d52:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003d56:	11 88       	ld.ub	r8,r8[0x0]
80003d58:	ee f9 ff f8 	ld.w	r9,r7[-8]
80003d5c:	2f f9       	sub	r9,-1
80003d5e:	ef 49 ff f8 	st.w	r7[-8],r9
80003d62:	10 9b       	mov	r11,r8
80003d64:	fe 7c 28 00 	mov	r12,-55296
80003d68:	f0 1f 00 3f 	mcall	80003e64 <sd_mmc_spi_write_sector_from_ram+0x1ac>
  spi_write(SD_MMC_SPI,0xFF);   // give clock again to end transaction

  // send data start token
  spi_write(SD_MMC_SPI,MMC_STARTBLOCK_WRITE);
  // write data
  for(i=0;i<MMC_SECTOR_SIZE;i++)
80003d6c:	ef 08 ff fe 	ld.sh	r8,r7[-2]
80003d70:	2f f8       	sub	r8,-1
80003d72:	ef 58 ff fe 	st.h	r7[-2],r8
80003d76:	ef 09 ff fe 	ld.sh	r9,r7[-2]
80003d7a:	e0 68 01 ff 	mov	r8,511
80003d7e:	f0 09 19 00 	cp.h	r9,r8
80003d82:	fe 98 ff e8 	brls	80003d52 <sd_mmc_spi_write_sector_from_ram+0x9a>
  {
    spi_write(SD_MMC_SPI,*_ram++);
  }

  spi_write(SD_MMC_SPI,0xFF);    // send CRC (field required but value ignored)
80003d86:	e0 6b 00 ff 	mov	r11,255
80003d8a:	fe 7c 28 00 	mov	r12,-55296
80003d8e:	f0 1f 00 36 	mcall	80003e64 <sd_mmc_spi_write_sector_from_ram+0x1ac>
  spi_write(SD_MMC_SPI,0xFF);
80003d92:	e0 6b 00 ff 	mov	r11,255
80003d96:	fe 7c 28 00 	mov	r12,-55296
80003d9a:	f0 1f 00 33 	mcall	80003e64 <sd_mmc_spi_write_sector_from_ram+0x1ac>

  // read data response token
  r1 = sd_mmc_spi_send_and_read(0xFF);
80003d9e:	e0 6c 00 ff 	mov	r12,255
80003da2:	f0 1f 00 32 	mcall	80003e68 <sd_mmc_spi_write_sector_from_ram+0x1b0>
80003da6:	18 98       	mov	r8,r12
80003da8:	4a d9       	lddpc	r9,80003e5c <sd_mmc_spi_write_sector_from_ram+0x1a4>
80003daa:	b2 88       	st.b	r9[0x0],r8
  if( (r1&MMC_DR_MASK) != MMC_DR_ACCEPT)
80003dac:	4a c8       	lddpc	r8,80003e5c <sd_mmc_spi_write_sector_from_ram+0x1a4>
80003dae:	11 88       	ld.ub	r8,r8[0x0]
80003db0:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80003db4:	58 58       	cp.w	r8,5
80003db6:	c1 40       	breq	80003dde <sd_mmc_spi_write_sector_from_ram+0x126>
  {
    spi_write(SD_MMC_SPI,0xFF);    // send dummy bytes
80003db8:	e0 6b 00 ff 	mov	r11,255
80003dbc:	fe 7c 28 00 	mov	r12,-55296
80003dc0:	f0 1f 00 29 	mcall	80003e64 <sd_mmc_spi_write_sector_from_ram+0x1ac>
    spi_write(SD_MMC_SPI,0xFF);
80003dc4:	e0 6b 00 ff 	mov	r11,255
80003dc8:	fe 7c 28 00 	mov	r12,-55296
80003dcc:	f0 1f 00 26 	mcall	80003e64 <sd_mmc_spi_write_sector_from_ram+0x1ac>
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
80003dd0:	30 1b       	mov	r11,1
80003dd2:	fe 7c 28 00 	mov	r12,-55296
80003dd6:	f0 1f 00 23 	mcall	80003e60 <sd_mmc_spi_write_sector_from_ram+0x1a8>
    return false;         // return ERROR byte
80003dda:	30 08       	mov	r8,0
80003ddc:	c3 18       	rjmp	80003e3e <sd_mmc_spi_write_sector_from_ram+0x186>
  }

  spi_write(SD_MMC_SPI,0xFF);    // send dummy bytes
80003dde:	e0 6b 00 ff 	mov	r11,255
80003de2:	fe 7c 28 00 	mov	r12,-55296
80003de6:	f0 1f 00 20 	mcall	80003e64 <sd_mmc_spi_write_sector_from_ram+0x1ac>
  spi_write(SD_MMC_SPI,0xFF);
80003dea:	e0 6b 00 ff 	mov	r11,255
80003dee:	fe 7c 28 00 	mov	r12,-55296
80003df2:	f0 1f 00 1d 	mcall	80003e64 <sd_mmc_spi_write_sector_from_ram+0x1ac>

  // release chip select
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80003df6:	30 1b       	mov	r11,1
80003df8:	fe 7c 28 00 	mov	r12,-55296
80003dfc:	f0 1f 00 19 	mcall	80003e60 <sd_mmc_spi_write_sector_from_ram+0x1a8>
  gl_ptr_mem += 512;        // Update the memory pointer.
80003e00:	49 58       	lddpc	r8,80003e54 <sd_mmc_spi_write_sector_from_ram+0x19c>
80003e02:	70 08       	ld.w	r8,r8[0x0]
80003e04:	f0 c9 fe 00 	sub	r9,r8,-512
80003e08:	49 38       	lddpc	r8,80003e54 <sd_mmc_spi_write_sector_from_ram+0x19c>
80003e0a:	91 09       	st.w	r8[0x0],r9

  // wait card not busy after last programming operation
  i=0;
80003e0c:	30 08       	mov	r8,0
80003e0e:	ef 58 ff fe 	st.h	r7[-2],r8
  while (false == sd_mmc_spi_wait_not_busy())
80003e12:	c0 e8       	rjmp	80003e2e <sd_mmc_spi_write_sector_from_ram+0x176>
  {
    i++;
80003e14:	ef 08 ff fe 	ld.sh	r8,r7[-2]
80003e18:	2f f8       	sub	r8,-1
80003e1a:	ef 58 ff fe 	st.h	r7[-2],r8
    if (i == 10)
80003e1e:	ef 09 ff fe 	ld.sh	r9,r7[-2]
80003e22:	30 a8       	mov	r8,10
80003e24:	f0 09 19 00 	cp.h	r9,r8
80003e28:	c0 31       	brne	80003e2e <sd_mmc_spi_write_sector_from_ram+0x176>
      return false;
80003e2a:	30 08       	mov	r8,0
80003e2c:	c0 98       	rjmp	80003e3e <sd_mmc_spi_write_sector_from_ram+0x186>
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
  gl_ptr_mem += 512;        // Update the memory pointer.

  // wait card not busy after last programming operation
  i=0;
  while (false == sd_mmc_spi_wait_not_busy())
80003e2e:	f0 1f 00 07 	mcall	80003e48 <sd_mmc_spi_write_sector_from_ram+0x190>
80003e32:	18 98       	mov	r8,r12
80003e34:	ec 18 00 01 	eorl	r8,0x1
80003e38:	5c 58       	castu.b	r8
80003e3a:	ce d1       	brne	80003e14 <sd_mmc_spi_write_sector_from_ram+0x15c>
    i++;
    if (i == 10)
      return false;
  }

  return true;                  // Write done
80003e3c:	30 18       	mov	r8,1
}
80003e3e:	10 9c       	mov	r12,r8
80003e40:	2f dd       	sub	sp,-12
80003e42:	e3 cd 80 80 	ldm	sp++,r7,pc
80003e46:	00 00       	add	r0,r0
80003e48:	80 00       	ld.sh	r0,r0[0x0]
80003e4a:	39 20       	mov	r0,-110
80003e4c:	80 00       	ld.sh	r0,r0[0x0]
80003e4e:	85 c0       	st.w	r2[0x30],r0
80003e50:	00 00       	add	r0,r0
80003e52:	0b 0e       	ld.w	lr,r5++
80003e54:	00 00       	add	r0,r0
80003e56:	06 0c       	add	r12,r3
80003e58:	80 00       	ld.sh	r0,r0[0x0]
80003e5a:	32 f4       	mov	r4,47
80003e5c:	00 00       	add	r0,r0
80003e5e:	0b 20       	ld.uh	r0,r5++
80003e60:	80 00       	ld.sh	r0,r0[0x0]
80003e62:	86 58       	ld.sh	r8,r3[0xa]
80003e64:	80 00       	ld.sh	r0,r0[0x0]
80003e66:	88 62       	ld.sh	r2,r4[0xc]
80003e68:	80 00       	ld.sh	r0,r0[0x0]
80003e6a:	34 04       	mov	r4,64

80003e6c <flashc_set_wait_state>:
	return (AVR32_FLASHC.fcr & AVR32_FLASHC_FCR_FWS_MASK) >> AVR32_FLASHC_FCR_FWS_OFFSET;
}


void flashc_set_wait_state(unsigned int wait_state)
{
80003e6c:	eb cd 40 80 	pushm	r7,lr
80003e70:	1a 97       	mov	r7,sp
80003e72:	20 2d       	sub	sp,8
80003e74:	ef 4c ff f8 	st.w	r7[-8],r12
	u_avr32_flashc_fcr_t u_avr32_flashc_fcr = {AVR32_FLASHC.fcr};
80003e78:	fe 68 14 00 	mov	r8,-125952
80003e7c:	70 08       	ld.w	r8,r8[0x0]
80003e7e:	30 09       	mov	r9,0
80003e80:	ef 49 ff fc 	st.w	r7[-4],r9
80003e84:	ef 48 ff fc 	st.w	r7[-4],r8
	u_avr32_flashc_fcr.FCR.fws = wait_state;
80003e88:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003e8c:	5c 58       	castu.b	r8
80003e8e:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80003e92:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80003e96:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003e9a:	f1 d9 d0 c1 	bfins	r8,r9,0x6,0x1
80003e9e:	ef 48 ff fc 	st.w	r7[-4],r8
	AVR32_FLASHC.fcr = u_avr32_flashc_fcr.fcr;
80003ea2:	fe 68 14 00 	mov	r8,-125952
80003ea6:	ee f9 ff fc 	ld.w	r9,r7[-4]
80003eaa:	91 09       	st.w	r8[0x0],r9
}
80003eac:	2f ed       	sub	sp,-8
80003eae:	e3 cd 80 80 	ldm	sp++,r7,pc
80003eb2:	d7 03       	nop

80003eb4 <flashc_set_bus_freq>:


void flashc_set_bus_freq(unsigned int cpu_f_hz)
{
80003eb4:	eb cd 40 80 	pushm	r7,lr
80003eb8:	1a 97       	mov	r7,sp
80003eba:	20 1d       	sub	sp,4
80003ebc:	ef 4c ff fc 	st.w	r7[-4],r12
	if (cpu_f_hz >= AVR32_FLASHC_FWS_0_MAX_FREQ) {
80003ec0:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003ec4:	e0 69 8a 3f 	mov	r9,35391
80003ec8:	ea 19 01 f7 	orh	r9,0x1f7
80003ecc:	12 38       	cp.w	r8,r9
80003ece:	e0 88 00 06 	brls	80003eda <flashc_set_bus_freq+0x26>
		// Set 1 WS.
		flashc_set_wait_state(1);
80003ed2:	30 1c       	mov	r12,1
80003ed4:	f0 1f 00 05 	mcall	80003ee8 <flashc_set_bus_freq+0x34>
80003ed8:	c0 48       	rjmp	80003ee0 <flashc_set_bus_freq+0x2c>
	} else {
		// Set 0 WS.
		flashc_set_wait_state(0);
80003eda:	30 0c       	mov	r12,0
80003edc:	f0 1f 00 03 	mcall	80003ee8 <flashc_set_bus_freq+0x34>
	}
}
80003ee0:	2f fd       	sub	sp,-4
80003ee2:	e3 cd 80 80 	ldm	sp++,r7,pc
80003ee6:	00 00       	add	r0,r0
80003ee8:	80 00       	ld.sh	r0,r0[0x0]
80003eea:	3e 6c       	mov	r12,-26

80003eec <cpu_irq_save>:
#endif

typedef uint32_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
80003eec:	eb cd 40 80 	pushm	r7,lr
80003ef0:	1a 97       	mov	r7,sp
80003ef2:	20 1d       	sub	sp,4
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80003ef4:	e1 b8 00 00 	mfsr	r8,0x0
80003ef8:	ef 48 ff fc 	st.w	r7[-4],r8
	cpu_irq_disable();
80003efc:	d3 03       	ssrf	0x10

	return flags;
80003efe:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
80003f02:	10 9c       	mov	r12,r8
80003f04:	2f fd       	sub	sp,-4
80003f06:	e3 cd 80 80 	ldm	sp++,r7,pc

80003f0a <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
80003f0a:	eb cd 40 80 	pushm	r7,lr
80003f0e:	1a 97       	mov	r7,sp
80003f10:	20 1d       	sub	sp,4
80003f12:	ef 4c ff fc 	st.w	r7[-4],r12
	return !(flags & AVR32_SR_GM_MASK);
80003f16:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003f1a:	e6 18 00 01 	andh	r8,0x1,COH
80003f1e:	5f 08       	sreq	r8
80003f20:	5c 58       	castu.b	r8
}
80003f22:	10 9c       	mov	r12,r8
80003f24:	2f fd       	sub	sp,-4
80003f26:	e3 cd 80 80 	ldm	sp++,r7,pc
80003f2a:	d7 03       	nop

80003f2c <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
80003f2c:	eb cd 40 80 	pushm	r7,lr
80003f30:	1a 97       	mov	r7,sp
80003f32:	20 1d       	sub	sp,4
80003f34:	ef 4c ff fc 	st.w	r7[-4],r12
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80003f38:	ee fc ff fc 	ld.w	r12,r7[-4]
80003f3c:	f0 1f 00 05 	mcall	80003f50 <cpu_irq_restore+0x24>
80003f40:	18 98       	mov	r8,r12
80003f42:	58 08       	cp.w	r8,0
80003f44:	c0 20       	breq	80003f48 <cpu_irq_restore+0x1c>
      cpu_irq_enable();
80003f46:	d5 03       	csrf	0x10
   }

	barrier();
}
80003f48:	2f fd       	sub	sp,-4
80003f4a:	e3 cd 80 80 	ldm	sp++,r7,pc
80003f4e:	00 00       	add	r0,r0
80003f50:	80 00       	ld.sh	r0,r0[0x0]
80003f52:	3f 0a       	mov	r10,-16

80003f54 <sleepmgr_lock_mode>:
 * not put the device to sleep in the deeper sleep modes.
 *
 * \param mode Sleep mode to lock.
 */
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
80003f54:	eb cd 40 80 	pushm	r7,lr
80003f58:	1a 97       	mov	r7,sp
80003f5a:	20 2d       	sub	sp,8
80003f5c:	ef 4c ff f8 	st.w	r7[-8],r12
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
80003f60:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003f64:	48 f9       	lddpc	r9,80003fa0 <sleepmgr_lock_mode+0x4c>
80003f66:	f2 08 07 09 	ld.ub	r9,r9[r8]
80003f6a:	3f f8       	mov	r8,-1
80003f6c:	f0 09 18 00 	cp.b	r9,r8
80003f70:	c0 21       	brne	80003f74 <sleepmgr_lock_mode+0x20>
		while (true) {
			// Warning: maximum value of sleepmgr_locks buffer is no more than 255.
			// Check APP or change the data type to uint16_t.
		}
80003f72:	c0 08       	rjmp	80003f72 <sleepmgr_lock_mode+0x1e>
	}

	// Enter a critical section
	flags = cpu_irq_save();
80003f74:	f0 1f 00 0c 	mcall	80003fa4 <sleepmgr_lock_mode+0x50>
80003f78:	18 98       	mov	r8,r12
80003f7a:	ef 48 ff fc 	st.w	r7[-4],r8

	++sleepmgr_locks[mode];
80003f7e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003f82:	48 89       	lddpc	r9,80003fa0 <sleepmgr_lock_mode+0x4c>
80003f84:	f2 08 07 09 	ld.ub	r9,r9[r8]
80003f88:	2f f9       	sub	r9,-1
80003f8a:	5c 59       	castu.b	r9
80003f8c:	48 5a       	lddpc	r10,80003fa0 <sleepmgr_lock_mode+0x4c>
80003f8e:	f4 08 0b 09 	st.b	r10[r8],r9

	// Leave the critical section
	cpu_irq_restore(flags);
80003f92:	ee fc ff fc 	ld.w	r12,r7[-4]
80003f96:	f0 1f 00 05 	mcall	80003fa8 <sleepmgr_lock_mode+0x54>
#else
	UNUSED(mode);
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
80003f9a:	2f ed       	sub	sp,-8
80003f9c:	e3 cd 80 80 	ldm	sp++,r7,pc
80003fa0:	00 00       	add	r0,r0
80003fa2:	0b 3c       	ld.ub	r12,r5++
80003fa4:	80 00       	ld.sh	r0,r0[0x0]
80003fa6:	3e ec       	mov	r12,-18
80003fa8:	80 00       	ld.sh	r0,r0[0x0]
80003faa:	3f 2c       	mov	r12,-14

80003fac <sleepmgr_unlock_mode>:
 * manager can put the device to sleep in the deeper sleep modes.
 *
 * \param mode Sleep mode to unlock.
 */
static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
{
80003fac:	eb cd 40 80 	pushm	r7,lr
80003fb0:	1a 97       	mov	r7,sp
80003fb2:	20 2d       	sub	sp,8
80003fb4:	ef 4c ff f8 	st.w	r7[-8],r12
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] == 0) {
80003fb8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003fbc:	48 e9       	lddpc	r9,80003ff4 <sleepmgr_unlock_mode+0x48>
80003fbe:	f2 08 07 08 	ld.ub	r8,r9[r8]
80003fc2:	58 08       	cp.w	r8,0
80003fc4:	c0 21       	brne	80003fc8 <sleepmgr_unlock_mode+0x1c>
		while (true) {
			// Warning: minimum value of sleepmgr_locks buffer is no less than 0.
			// Check APP.
		}
80003fc6:	c0 08       	rjmp	80003fc6 <sleepmgr_unlock_mode+0x1a>
	}

	// Enter a critical section
	flags = cpu_irq_save();
80003fc8:	f0 1f 00 0c 	mcall	80003ff8 <sleepmgr_unlock_mode+0x4c>
80003fcc:	18 98       	mov	r8,r12
80003fce:	ef 48 ff fc 	st.w	r7[-4],r8

	--sleepmgr_locks[mode];
80003fd2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003fd6:	48 89       	lddpc	r9,80003ff4 <sleepmgr_unlock_mode+0x48>
80003fd8:	f2 08 07 09 	ld.ub	r9,r9[r8]
80003fdc:	20 19       	sub	r9,1
80003fde:	5c 59       	castu.b	r9
80003fe0:	48 5a       	lddpc	r10,80003ff4 <sleepmgr_unlock_mode+0x48>
80003fe2:	f4 08 0b 09 	st.b	r10[r8],r9

	// Leave the critical section
	cpu_irq_restore(flags);
80003fe6:	ee fc ff fc 	ld.w	r12,r7[-4]
80003fea:	f0 1f 00 05 	mcall	80003ffc <sleepmgr_unlock_mode+0x50>
#else
	UNUSED(mode);
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
80003fee:	2f ed       	sub	sp,-8
80003ff0:	e3 cd 80 80 	ldm	sp++,r7,pc
80003ff4:	00 00       	add	r0,r0
80003ff6:	0b 3c       	ld.ub	r12,r5++
80003ff8:	80 00       	ld.sh	r0,r0[0x0]
80003ffa:	3e ec       	mov	r12,-18
80003ffc:	80 00       	ld.sh	r0,r0[0x0]
80003ffe:	3f 2c       	mov	r12,-14

80004000 <udd_sleep_mode>:
/*! \brief Authorize or not the CPU powerdown mode
 *
 * \param b_enable   true to authorize powerdown mode
 */
static void udd_sleep_mode(bool b_idle)
{
80004000:	eb cd 40 80 	pushm	r7,lr
80004004:	1a 97       	mov	r7,sp
80004006:	20 1d       	sub	sp,4
80004008:	18 98       	mov	r8,r12
8000400a:	ef 68 ff fc 	st.b	r7[-4],r8
	if (!b_idle && udd_b_idle) {
8000400e:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80004012:	ec 18 00 01 	eorl	r8,0x1
80004016:	5c 58       	castu.b	r8
80004018:	c0 80       	breq	80004028 <udd_sleep_mode+0x28>
8000401a:	48 f8       	lddpc	r8,80004054 <udd_sleep_mode+0x54>
8000401c:	11 88       	ld.ub	r8,r8[0x0]
8000401e:	58 08       	cp.w	r8,0
80004020:	c0 40       	breq	80004028 <udd_sleep_mode+0x28>
		sleepmgr_unlock_mode(USBB_SLEEP_MODE_USB_IDLE);
80004022:	30 1c       	mov	r12,1
80004024:	f0 1f 00 0d 	mcall	80004058 <udd_sleep_mode+0x58>
	}
	if (b_idle && !udd_b_idle) {
80004028:	ef 39 ff fc 	ld.ub	r9,r7[-4]
8000402c:	30 08       	mov	r8,0
8000402e:	f0 09 18 00 	cp.b	r9,r8
80004032:	c0 a0       	breq	80004046 <udd_sleep_mode+0x46>
80004034:	48 88       	lddpc	r8,80004054 <udd_sleep_mode+0x54>
80004036:	11 88       	ld.ub	r8,r8[0x0]
80004038:	ec 18 00 01 	eorl	r8,0x1
8000403c:	5c 58       	castu.b	r8
8000403e:	c0 40       	breq	80004046 <udd_sleep_mode+0x46>
		sleepmgr_lock_mode(USBB_SLEEP_MODE_USB_IDLE);
80004040:	30 1c       	mov	r12,1
80004042:	f0 1f 00 07 	mcall	8000405c <udd_sleep_mode+0x5c>
	}
	udd_b_idle = b_idle;
80004046:	48 49       	lddpc	r9,80004054 <udd_sleep_mode+0x54>
80004048:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000404c:	b2 88       	st.b	r9[0x0],r8
}
8000404e:	2f fd       	sub	sp,-4
80004050:	e3 cd 80 80 	ldm	sp++,r7,pc
80004054:	00 00       	add	r0,r0
80004056:	06 25       	rsub	r5,r3
80004058:	80 00       	ld.sh	r0,r0[0x0]
8000405a:	3f ac       	mov	r12,-6
8000405c:	80 00       	ld.sh	r0,r0[0x0]
8000405e:	3f 54       	mov	r4,-11

80004060 <udd_interrupt>:
ISR_FREERTOS(udd_interrupt, AVR32_USBB_IRQ_GROUP, UDD_USB_INT_LEVEL)
#  else
ISR(udd_interrupt, AVR32_USBB_IRQ_GROUP, UDD_USB_INT_LEVEL)
#  endif
#endif
{
80004060:	eb cd 40 80 	pushm	r7,lr
80004064:	1a 97       	mov	r7,sp
	if (Is_udd_sof()) {
80004066:	fe 68 00 04 	mov	r8,-131068
8000406a:	70 08       	ld.w	r8,r8[0x0]
8000406c:	e2 18 00 04 	andl	r8,0x4,COH
80004070:	c1 00       	breq	80004090 <udd_interrupt+0x30>
		udd_ack_sof();
80004072:	fe 68 00 08 	mov	r8,-131064
80004076:	30 49       	mov	r9,4
80004078:	91 09       	st.w	r8[0x0],r9
		if (Is_udd_full_speed_mode()) {
8000407a:	fe 68 08 04 	mov	r8,-129020
8000407e:	70 08       	ld.w	r8,r8[0x0]
80004080:	e2 18 30 00 	andl	r8,0x3000,COH
80004084:	ad 88       	lsr	r8,0xc
80004086:	e0 81 00 a2 	brne	800041ca <udd_interrupt+0x16a>
			udc_sof_notify();
8000408a:	f0 1f 00 57 	mcall	800041e4 <udd_interrupt+0x184>
		}
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
#endif
		goto udd_interrupt_end;
8000408e:	ca 38       	rjmp	800041d4 <udd_interrupt+0x174>
	}
	if (Is_udd_msof()) {
80004090:	fe 68 00 04 	mov	r8,-131068
80004094:	70 08       	ld.w	r8,r8[0x0]
80004096:	e2 18 00 02 	andl	r8,0x2,COH
8000409a:	c0 80       	breq	800040aa <udd_interrupt+0x4a>
		udd_ack_msof();
8000409c:	fe 68 00 08 	mov	r8,-131064
800040a0:	30 29       	mov	r9,2
800040a2:	91 09       	st.w	r8[0x0],r9
		udc_sof_notify();
800040a4:	f0 1f 00 50 	mcall	800041e4 <udd_interrupt+0x184>
		goto udd_interrupt_end;
800040a8:	c9 68       	rjmp	800041d4 <udd_interrupt+0x174>
	}

	if (udd_ctrl_interrupt())
800040aa:	f0 1f 00 50 	mcall	800041e8 <udd_interrupt+0x188>
800040ae:	18 98       	mov	r8,r12
800040b0:	58 08       	cp.w	r8,0
800040b2:	e0 81 00 8e 	brne	800041ce <udd_interrupt+0x16e>
		goto udd_interrupt_end; // Interrupt acked by control endpoint managed

#if (0 != USB_DEVICE_MAX_EP)
	if (udd_ep_interrupt())
800040b6:	f0 1f 00 4e 	mcall	800041ec <udd_interrupt+0x18c>
800040ba:	18 98       	mov	r8,r12
800040bc:	58 08       	cp.w	r8,0
800040be:	e0 81 00 8a 	brne	800041d2 <udd_interrupt+0x172>
		goto udd_interrupt_end; // Interrupt acked by bulk/interrupt/isochronous endpoint managed
#endif

	// USB bus reset detection
	if (Is_udd_reset()) {
800040c2:	fe 68 00 04 	mov	r8,-131068
800040c6:	70 08       	ld.w	r8,r8[0x0]
800040c8:	e2 18 00 08 	andl	r8,0x8,COH
800040cc:	c0 e0       	breq	800040e8 <udd_interrupt+0x88>
		udd_ack_reset();
800040ce:	fe 68 00 08 	mov	r8,-131064
800040d2:	30 89       	mov	r9,8
800040d4:	91 09       	st.w	r8[0x0],r9
		// Abort all jobs on-going
#if (USB_DEVICE_MAX_EP != 0)
		udd_ep_job_table_kill();
800040d6:	f0 1f 00 47 	mcall	800041f0 <udd_interrupt+0x190>
#endif
		// Reset USB Device Stack Core
		udc_reset();
800040da:	f0 1f 00 47 	mcall	800041f4 <udd_interrupt+0x194>
		// Reset endpoint control
		udd_reset_ep_ctrl();
800040de:	f0 1f 00 47 	mcall	800041f8 <udd_interrupt+0x198>
		// Reset endpoint control management
		udd_ctrl_init();
800040e2:	f0 1f 00 47 	mcall	800041fc <udd_interrupt+0x19c>
		goto udd_interrupt_end;
800040e6:	c7 78       	rjmp	800041d4 <udd_interrupt+0x174>
	}

	if (Is_udd_suspend_interrupt_enabled() && Is_udd_suspend()) {
800040e8:	fe 68 00 10 	mov	r8,-131056
800040ec:	70 08       	ld.w	r8,r8[0x0]
800040ee:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800040f2:	5c 58       	castu.b	r8
800040f4:	c2 20       	breq	80004138 <udd_interrupt+0xd8>
800040f6:	fe 68 00 04 	mov	r8,-131068
800040fa:	70 08       	ld.w	r8,r8[0x0]
800040fc:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80004100:	5c 58       	castu.b	r8
80004102:	c1 b0       	breq	80004138 <udd_interrupt+0xd8>
		otg_unfreeze_clock();
80004104:	fe 68 08 00 	mov	r8,-129024
80004108:	fe 69 08 00 	mov	r9,-129024
8000410c:	72 09       	ld.w	r9,r9[0x0]
8000410e:	af c9       	cbr	r9,0xe
80004110:	91 09       	st.w	r8[0x0],r9
		// The suspend interrupt is automatic acked when a wakeup occur
		udd_disable_suspend_interrupt();
80004112:	fe 68 00 14 	mov	r8,-131052
80004116:	30 19       	mov	r9,1
80004118:	91 09       	st.w	r8[0x0],r9
		udd_enable_wake_up_interrupt();
8000411a:	fe 68 00 18 	mov	r8,-131048
8000411e:	31 09       	mov	r9,16
80004120:	91 09       	st.w	r8[0x0],r9
		otg_freeze_clock(); // Mandatory to exit of sleep mode after a wakeup event
80004122:	fe 68 08 00 	mov	r8,-129024
80004126:	fe 69 08 00 	mov	r9,-129024
8000412a:	72 09       	ld.w	r9,r9[0x0]
8000412c:	af a9       	sbr	r9,0xe
8000412e:	91 09       	st.w	r8[0x0],r9
		udd_sleep_mode(false); // Enter in SUSPEND mode
80004130:	30 0c       	mov	r12,0
80004132:	f0 1f 00 34 	mcall	80004200 <udd_interrupt+0x1a0>
#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
#endif
		goto udd_interrupt_end;
80004136:	c4 f8       	rjmp	800041d4 <udd_interrupt+0x174>
	}

	if (Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) {
80004138:	fe 68 00 10 	mov	r8,-131056
8000413c:	70 08       	ld.w	r8,r8[0x0]
8000413e:	e2 18 00 10 	andl	r8,0x10,COH
80004142:	c2 00       	breq	80004182 <udd_interrupt+0x122>
80004144:	fe 68 00 04 	mov	r8,-131068
80004148:	70 08       	ld.w	r8,r8[0x0]
8000414a:	e2 18 00 10 	andl	r8,0x10,COH
8000414e:	c1 a0       	breq	80004182 <udd_interrupt+0x122>
		// Ack wakeup interrupt and enable suspend interrupt
		otg_unfreeze_clock();
80004150:	fe 68 08 00 	mov	r8,-129024
80004154:	fe 69 08 00 	mov	r9,-129024
80004158:	72 09       	ld.w	r9,r9[0x0]
8000415a:	af c9       	cbr	r9,0xe
8000415c:	91 09       	st.w	r8[0x0],r9

		// Check USB clock ready after suspend and eventually sleep USB clock
		while( !Is_otg_clock_usable() );
8000415e:	fe 68 08 04 	mov	r8,-129020
80004162:	70 08       	ld.w	r8,r8[0x0]
80004164:	e2 18 40 00 	andl	r8,0x4000,COH
80004168:	cf b0       	breq	8000415e <udd_interrupt+0xfe>

		// The wakeup interrupt is automatic acked when a suspend occur
		udd_disable_wake_up_interrupt();
8000416a:	fe 68 00 14 	mov	r8,-131052
8000416e:	31 09       	mov	r9,16
80004170:	91 09       	st.w	r8[0x0],r9
		udd_enable_suspend_interrupt();
80004172:	fe 68 00 18 	mov	r8,-131048
80004176:	30 19       	mov	r9,1
80004178:	91 09       	st.w	r8[0x0],r9
		udd_sleep_mode(true); // Enter in IDLE mode
8000417a:	30 1c       	mov	r12,1
8000417c:	f0 1f 00 21 	mcall	80004200 <udd_interrupt+0x1a0>
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
#endif
		goto udd_interrupt_end;
80004180:	c2 a8       	rjmp	800041d4 <udd_interrupt+0x174>
	}

	if (Is_otg_vbus_transition()) {
80004182:	fe 68 08 04 	mov	r8,-129020
80004186:	70 08       	ld.w	r8,r8[0x0]
80004188:	e2 18 00 02 	andl	r8,0x2,COH
8000418c:	c2 40       	breq	800041d4 <udd_interrupt+0x174>
		// Ack Vbus transition and send status to high level
		otg_unfreeze_clock();
8000418e:	fe 68 08 00 	mov	r8,-129024
80004192:	fe 69 08 00 	mov	r9,-129024
80004196:	72 09       	ld.w	r9,r9[0x0]
80004198:	af c9       	cbr	r9,0xe
8000419a:	91 09       	st.w	r8[0x0],r9
		otg_ack_vbus_transition();
8000419c:	fe 68 08 08 	mov	r8,-129016
800041a0:	30 29       	mov	r9,2
800041a2:	91 09       	st.w	r8[0x0],r9
		otg_freeze_clock();
800041a4:	fe 68 08 00 	mov	r8,-129024
800041a8:	fe 69 08 00 	mov	r9,-129024
800041ac:	72 09       	ld.w	r9,r9[0x0]
800041ae:	af a9       	sbr	r9,0xe
800041b0:	91 09       	st.w	r8[0x0],r9
#ifndef USB_DEVICE_ATTACH_AUTO_DISABLE
		if (Is_otg_vbus_high()) {
800041b2:	fe 68 08 04 	mov	r8,-129020
800041b6:	70 08       	ld.w	r8,r8[0x0]
800041b8:	e2 18 08 00 	andl	r8,0x800,COH
800041bc:	c0 40       	breq	800041c4 <udd_interrupt+0x164>
			udd_attach();
800041be:	f0 1f 00 12 	mcall	80004204 <udd_interrupt+0x1a4>
800041c2:	c0 98       	rjmp	800041d4 <udd_interrupt+0x174>
		} else {
			udd_detach();
800041c4:	f0 1f 00 11 	mcall	80004208 <udd_interrupt+0x1a8>
800041c8:	c0 68       	rjmp	800041d4 <udd_interrupt+0x174>
			udc_sof_notify();
		}
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
#endif
		goto udd_interrupt_end;
800041ca:	d7 03       	nop
800041cc:	c0 48       	rjmp	800041d4 <udd_interrupt+0x174>
		udc_sof_notify();
		goto udd_interrupt_end;
	}

	if (udd_ctrl_interrupt())
		goto udd_interrupt_end; // Interrupt acked by control endpoint managed
800041ce:	d7 03       	nop
800041d0:	c0 28       	rjmp	800041d4 <udd_interrupt+0x174>

#if (0 != USB_DEVICE_MAX_EP)
	if (udd_ep_interrupt())
		goto udd_interrupt_end; // Interrupt acked by bulk/interrupt/isochronous endpoint managed
800041d2:	d7 03       	nop
		UDC_VBUS_EVENT(Is_otg_vbus_high());
#endif
		goto udd_interrupt_end;
	}
udd_interrupt_end:
	otg_data_memory_barrier();
800041d4:	fe 68 00 00 	mov	r8,-131072
800041d8:	f0 f8 08 18 	ld.w	r8,r8[2072]
	// consider that exiting from the USB interrupt will require a context switch.
	return pdTRUE;
#else
	return;
#endif
}
800041dc:	e3 cd 40 80 	ldm	sp++,r7,lr
800041e0:	d6 03       	rete
800041e2:	00 00       	add	r0,r0
800041e4:	80 00       	ld.sh	r0,r0[0x0]
800041e6:	6d 38       	ld.w	r8,r6[0x4c]
800041e8:	80 00       	ld.sh	r0,r0[0x0]
800041ea:	54 a0       	stdsp	sp[0x128],r0
800041ec:	80 00       	ld.sh	r0,r0[0x0]
800041ee:	59 50       	cp.w	r0,21
800041f0:	80 00       	ld.sh	r0,r0[0x0]
800041f2:	55 d4       	stdsp	sp[0x174],r4
800041f4:	80 00       	ld.sh	r0,r0[0x0]
800041f6:	6c d4       	ld.w	r4,r6[0x34]
800041f8:	80 00       	ld.sh	r0,r0[0x0]
800041fa:	4d 20       	lddpc	r0,80004340 <udd_attach+0x14>
800041fc:	80 00       	ld.sh	r0,r0[0x0]
800041fe:	4e 04       	lddpc	r4,8000437c <udd_attach+0x50>
80004200:	80 00       	ld.sh	r0,r0[0x0]
80004202:	40 00       	lddsp	r0,sp[0x0]
80004204:	80 00       	ld.sh	r0,r0[0x0]
80004206:	43 2c       	lddsp	r12,sp[0xc8]
80004208:	80 00       	ld.sh	r0,r0[0x0]
8000420a:	43 dc       	lddsp	r12,sp[0xf4]

8000420c <udd_enable>:
	return true;
}


void udd_enable(void)
{
8000420c:	eb cd 40 80 	pushm	r7,lr
80004210:	1a 97       	mov	r7,sp
80004212:	20 2d       	sub	sp,8
	irqflags_t flags;

	flags = cpu_irq_save();
80004214:	f0 1f 00 3e 	mcall	8000430c <udd_enable+0x100>
80004218:	18 98       	mov	r8,r12
8000421a:	ef 48 ff f8 	st.w	r7[-8],r8
		cpu_irq_restore(flags);
		return;
	}
#else
	//* SINGLE DEVICE MODE INITIALIZATION
	sysclk_enable_usb();
8000421e:	f0 1f 00 3d 	mcall	80004310 <udd_enable+0x104>

	// Here, only the device mode is possible, then link USBB interrupt to UDD interrupt
	irq_register_handler(
80004222:	30 0a       	mov	r10,0
80004224:	e0 6b 02 20 	mov	r11,544
80004228:	4b bc       	lddpc	r12,80004314 <udd_enable+0x108>
8000422a:	f0 1f 00 3c 	mcall	80004318 <udd_enable+0x10c>
8000422e:	30 18       	mov	r8,1
80004230:	ef 48 ff fc 	st.w	r7[-4],r8
 *  AVR32_PM_AWEN_xxxxWEN_MASK in the part-specific header file under
 *  "toolchain folder"/avr32/inc(lude)/avr32/)
 */
__always_inline static void pm_asyn_wake_up_enable(unsigned long awen_mask)
{
  AVR32_PM.awen |= awen_mask;
80004234:	fe 78 0c 00 	mov	r8,-62464
80004238:	fe 79 0c 00 	mov	r9,-62464
8000423c:	f2 fa 01 44 	ld.w	r10,r9[324]
80004240:	ee f9 ff fc 	ld.w	r9,r7[-4]
80004244:	f5 e9 10 09 	or	r9,r10,r9
80004248:	f1 49 01 44 	st.w	r8[324],r9
		cpu_irq_restore(flags);
		return; // Device is not the current mode
	}
# else
	// ID pin not used then force device mode
	otg_disable_id_pin();
8000424c:	fe 68 08 00 	mov	r8,-129024
80004250:	fe 69 08 00 	mov	r9,-129024
80004254:	72 09       	ld.w	r9,r9[0x0]
80004256:	b9 c9       	cbr	r9,0x18
80004258:	91 09       	st.w	r8[0x0],r9
	otg_force_device_mode();
8000425a:	fe 68 08 00 	mov	r8,-129024
8000425e:	fe 69 08 00 	mov	r9,-129024
80004262:	72 09       	ld.w	r9,r9[0x0]
80004264:	b9 b9       	sbr	r9,0x19
80004266:	91 09       	st.w	r8[0x0],r9
# endif

	// Enable USB hardware
	otg_enable_pad();
80004268:	fe 68 08 00 	mov	r8,-129024
8000426c:	fe 69 08 00 	mov	r9,-129024
80004270:	72 09       	ld.w	r9,r9[0x0]
80004272:	ad a9       	sbr	r9,0xc
80004274:	91 09       	st.w	r8[0x0],r9
	otg_enable();
80004276:	fe 68 08 00 	mov	r8,-129024
8000427a:	fe 69 08 00 	mov	r9,-129024
8000427e:	72 09       	ld.w	r9,r9[0x0]
80004280:	af b9       	sbr	r9,0xf
80004282:	91 09       	st.w	r8[0x0],r9
	otg_unfreeze_clock();
80004284:	fe 68 08 00 	mov	r8,-129024
80004288:	fe 69 08 00 	mov	r9,-129024
8000428c:	72 09       	ld.w	r9,r9[0x0]
8000428e:	af c9       	cbr	r9,0xe
80004290:	91 09       	st.w	r8[0x0],r9
	(void)Is_otg_clock_frozen();
80004292:	fe 68 08 00 	mov	r8,-129024
80004296:	70 08       	ld.w	r8,r8[0x0]

	// Reset internal variables
#if (0!=USB_DEVICE_MAX_EP)
	udd_ep_job_table_reset();
80004298:	f0 1f 00 21 	mcall	8000431c <udd_enable+0x110>

	// Set the USB speed requested by configuration file
#ifdef USB_DEVICE_LOW_SPEED
	udd_low_speed_enable();
#else
	udd_low_speed_disable();
8000429c:	fe 68 00 00 	mov	r8,-131072
800042a0:	fe 69 00 00 	mov	r9,-131072
800042a4:	72 09       	ld.w	r9,r9[0x0]
800042a6:	ad c9       	cbr	r9,0xc
800042a8:	91 09       	st.w	r8[0x0],r9
#  ifdef USB_DEVICE_HS_SUPPORT
	udd_high_speed_enable();
#  else
	udd_high_speed_disable();
800042aa:	fe 68 00 00 	mov	r8,-131072
800042ae:	fe 69 00 00 	mov	r9,-131072
800042b2:	72 09       	ld.w	r9,r9[0x0]
800042b4:	e8 19 0c 00 	orl	r9,0xc00
800042b8:	91 09       	st.w	r8[0x0],r9
#  endif
#endif
	otg_ack_vbus_transition();
800042ba:	fe 68 08 08 	mov	r8,-129016
800042be:	30 29       	mov	r9,2
800042c0:	91 09       	st.w	r8[0x0],r9
	// Force Vbus interrupt in case of Vbus always with a high level
	// This is possible with a short timing between a Host mode stop/start.
	if (Is_otg_vbus_high()) {
800042c2:	fe 68 08 04 	mov	r8,-129020
800042c6:	70 08       	ld.w	r8,r8[0x0]
800042c8:	e2 18 08 00 	andl	r8,0x800,COH
800042cc:	c0 50       	breq	800042d6 <udd_enable+0xca>
		otg_raise_vbus_transition();
800042ce:	fe 68 08 0c 	mov	r8,-129012
800042d2:	30 29       	mov	r9,2
800042d4:	91 09       	st.w	r8[0x0],r9
	}
	otg_enable_vbus_interrupt();
800042d6:	fe 68 08 00 	mov	r8,-129024
800042da:	fe 69 08 00 	mov	r9,-129024
800042de:	72 09       	ld.w	r9,r9[0x0]
800042e0:	a1 b9       	sbr	r9,0x1
800042e2:	91 09       	st.w	r8[0x0],r9
	otg_freeze_clock();
800042e4:	fe 68 08 00 	mov	r8,-129024
800042e8:	fe 69 08 00 	mov	r9,-129024
800042ec:	72 09       	ld.w	r9,r9[0x0]
800042ee:	af a9       	sbr	r9,0xe
800042f0:	91 09       	st.w	r8[0x0],r9

#ifndef UDD_NO_SLEEP_MGR
	// Initialize the sleep mode authorized for the USB suspend mode
	udd_b_idle = false;
800042f2:	48 c9       	lddpc	r9,80004320 <udd_enable+0x114>
800042f4:	30 08       	mov	r8,0
800042f6:	b2 88       	st.b	r9[0x0],r8
	sleepmgr_lock_mode(USBB_SLEEP_MODE_USB_SUSPEND);
800042f8:	30 3c       	mov	r12,3
800042fa:	f0 1f 00 0b 	mcall	80004324 <udd_enable+0x118>
#endif

	cpu_irq_restore(flags);
800042fe:	ee fc ff f8 	ld.w	r12,r7[-8]
80004302:	f0 1f 00 0a 	mcall	80004328 <udd_enable+0x11c>
}
80004306:	2f ed       	sub	sp,-8
80004308:	e3 cd 80 80 	ldm	sp++,r7,pc
8000430c:	80 00       	ld.sh	r0,r0[0x0]
8000430e:	3e ec       	mov	r12,-18
80004310:	80 00       	ld.sh	r0,r0[0x0]
80004312:	83 dc       	st.w	r1[0x34],r12
80004314:	80 00       	ld.sh	r0,r0[0x0]
80004316:	40 60       	lddsp	r0,sp[0x18]
80004318:	80 00       	ld.sh	r0,r0[0x0]
8000431a:	e0 c0 80 00 	sub	r0,r0,-32768
8000431e:	55 68       	stdsp	sp[0x158],r8
80004320:	00 00       	add	r0,r0
80004322:	06 25       	rsub	r5,r3
80004324:	80 00       	ld.sh	r0,r0[0x0]
80004326:	3f 54       	mov	r4,-11
80004328:	80 00       	ld.sh	r0,r0[0x0]
8000432a:	3f 2c       	mov	r12,-14

8000432c <udd_attach>:
	cpu_irq_restore(flags);
}


void udd_attach(void)
{
8000432c:	eb cd 40 80 	pushm	r7,lr
80004330:	1a 97       	mov	r7,sp
80004332:	20 1d       	sub	sp,4
	irqflags_t flags;
	flags = cpu_irq_save();
80004334:	f0 1f 00 27 	mcall	800043d0 <udd_attach+0xa4>
80004338:	18 98       	mov	r8,r12
8000433a:	ef 48 ff fc 	st.w	r7[-4],r8

	// At startup the USB bus state is unknown,
	// therefore the state is considered IDLE to not miss any USB event
	udd_sleep_mode(true);
8000433e:	30 1c       	mov	r12,1
80004340:	f0 1f 00 25 	mcall	800043d4 <udd_attach+0xa8>
	otg_unfreeze_clock();
80004344:	fe 68 08 00 	mov	r8,-129024
80004348:	fe 69 08 00 	mov	r9,-129024
8000434c:	72 09       	ld.w	r9,r9[0x0]
8000434e:	af c9       	cbr	r9,0xe
80004350:	91 09       	st.w	r8[0x0],r9
	while( !Is_otg_clock_usable() );
80004352:	fe 68 08 04 	mov	r8,-129020
80004356:	70 08       	ld.w	r8,r8[0x0]
80004358:	e2 18 40 00 	andl	r8,0x4000,COH
8000435c:	cf b0       	breq	80004352 <udd_attach+0x26>

	// Authorize attach if Vbus is present
	udd_attach_device();
8000435e:	fe 68 00 00 	mov	r8,-131072
80004362:	fe 69 00 00 	mov	r9,-131072
80004366:	72 09       	ld.w	r9,r9[0x0]
80004368:	a9 c9       	cbr	r9,0x8
8000436a:	91 09       	st.w	r8[0x0],r9

	// Enable USB line events
	udd_enable_reset_interrupt();
8000436c:	fe 68 00 18 	mov	r8,-131048
80004370:	30 89       	mov	r9,8
80004372:	91 09       	st.w	r8[0x0],r9
	udd_enable_suspend_interrupt();
80004374:	fe 68 00 18 	mov	r8,-131048
80004378:	30 19       	mov	r9,1
8000437a:	91 09       	st.w	r8[0x0],r9
	udd_enable_wake_up_interrupt();
8000437c:	fe 68 00 18 	mov	r8,-131048
80004380:	31 09       	mov	r9,16
80004382:	91 09       	st.w	r8[0x0],r9
	udd_enable_sof_interrupt();
80004384:	fe 68 00 18 	mov	r8,-131048
80004388:	30 49       	mov	r9,4
8000438a:	91 09       	st.w	r8[0x0],r9
#ifdef USB_DEVICE_HS_SUPPORT
	udd_enable_msof_interrupt();
#endif
	// Reset following interrupts flag
	udd_ack_reset();
8000438c:	fe 68 00 08 	mov	r8,-131064
80004390:	30 89       	mov	r9,8
80004392:	91 09       	st.w	r8[0x0],r9
	udd_ack_sof();
80004394:	fe 68 00 08 	mov	r8,-131064
80004398:	30 49       	mov	r9,4
8000439a:	91 09       	st.w	r8[0x0],r9
	udd_ack_msof();
8000439c:	fe 68 00 08 	mov	r8,-131064
800043a0:	30 29       	mov	r9,2
800043a2:	91 09       	st.w	r8[0x0],r9
#if UC3A3
	// With UTMI, the first suspend is detected but must be cleared to reoccur interrupt
	udd_ack_suspend();
#else
	// The first suspend interrupt is not detected else raise it
	udd_raise_suspend();
800043a4:	fe 68 00 0c 	mov	r8,-131060
800043a8:	30 19       	mov	r9,1
800043aa:	91 09       	st.w	r8[0x0],r9
#endif
	udd_ack_wake_up();
800043ac:	fe 68 00 08 	mov	r8,-131064
800043b0:	31 09       	mov	r9,16
800043b2:	91 09       	st.w	r8[0x0],r9
	otg_freeze_clock();
800043b4:	fe 68 08 00 	mov	r8,-129024
800043b8:	fe 69 08 00 	mov	r9,-129024
800043bc:	72 09       	ld.w	r9,r9[0x0]
800043be:	af a9       	sbr	r9,0xe
800043c0:	91 09       	st.w	r8[0x0],r9
	cpu_irq_restore(flags);
800043c2:	ee fc ff fc 	ld.w	r12,r7[-4]
800043c6:	f0 1f 00 05 	mcall	800043d8 <udd_attach+0xac>
}
800043ca:	2f fd       	sub	sp,-4
800043cc:	e3 cd 80 80 	ldm	sp++,r7,pc
800043d0:	80 00       	ld.sh	r0,r0[0x0]
800043d2:	3e ec       	mov	r12,-18
800043d4:	80 00       	ld.sh	r0,r0[0x0]
800043d6:	40 00       	lddsp	r0,sp[0x0]
800043d8:	80 00       	ld.sh	r0,r0[0x0]
800043da:	3f 2c       	mov	r12,-14

800043dc <udd_detach>:


void udd_detach(void)
{
800043dc:	eb cd 40 80 	pushm	r7,lr
800043e0:	1a 97       	mov	r7,sp
	otg_unfreeze_clock();
800043e2:	fe 68 08 00 	mov	r8,-129024
800043e6:	fe 69 08 00 	mov	r9,-129024
800043ea:	72 09       	ld.w	r9,r9[0x0]
800043ec:	af c9       	cbr	r9,0xe
800043ee:	91 09       	st.w	r8[0x0],r9

	// Detach device from the bus
	udd_detach_device();
800043f0:	fe 68 00 00 	mov	r8,-131072
800043f4:	fe 69 00 00 	mov	r9,-131072
800043f8:	72 09       	ld.w	r9,r9[0x0]
800043fa:	a9 a9       	sbr	r9,0x8
800043fc:	91 09       	st.w	r8[0x0],r9
	otg_freeze_clock();
800043fe:	fe 68 08 00 	mov	r8,-129024
80004402:	fe 69 08 00 	mov	r9,-129024
80004406:	72 09       	ld.w	r9,r9[0x0]
80004408:	af a9       	sbr	r9,0xe
8000440a:	91 09       	st.w	r8[0x0],r9
	udd_sleep_mode(false);
8000440c:	30 0c       	mov	r12,0
8000440e:	f0 1f 00 03 	mcall	80004418 <udd_detach+0x3c>
}
80004412:	e3 cd 80 80 	ldm	sp++,r7,pc
80004416:	00 00       	add	r0,r0
80004418:	80 00       	ld.sh	r0,r0[0x0]
8000441a:	40 00       	lddsp	r0,sp[0x0]

8000441c <udd_is_high_speed>:


bool udd_is_high_speed(void)
{
8000441c:	eb cd 40 80 	pushm	r7,lr
80004420:	1a 97       	mov	r7,sp
#ifdef USB_DEVICE_HS_SUPPORT
	return !Is_udd_full_speed_mode();
#else
	return false;
80004422:	30 08       	mov	r8,0
#endif
}
80004424:	10 9c       	mov	r12,r8
80004426:	e3 cd 80 80 	ldm	sp++,r7,pc

8000442a <udd_set_address>:


void udd_set_address(uint8_t address)
{
8000442a:	eb cd 40 80 	pushm	r7,lr
8000442e:	1a 97       	mov	r7,sp
80004430:	20 1d       	sub	sp,4
80004432:	18 98       	mov	r8,r12
80004434:	ef 68 ff fc 	st.b	r7[-4],r8
	udd_disable_address();
80004438:	fe 68 00 00 	mov	r8,-131072
8000443c:	fe 69 00 00 	mov	r9,-131072
80004440:	72 09       	ld.w	r9,r9[0x0]
80004442:	a7 d9       	cbr	r9,0x7
80004444:	91 09       	st.w	r8[0x0],r9
	udd_configure_address(address);
80004446:	fe 68 00 00 	mov	r8,-131072
8000444a:	fe 69 00 00 	mov	r9,-131072
8000444e:	72 09       	ld.w	r9,r9[0x0]
80004450:	12 9a       	mov	r10,r9
80004452:	e0 1a ff 80 	andl	r10,0xff80
80004456:	ef 39 ff fc 	ld.ub	r9,r7[-4]
8000445a:	f3 d9 c0 07 	bfextu	r9,r9,0x0,0x7
8000445e:	f5 e9 10 09 	or	r9,r10,r9
80004462:	91 09       	st.w	r8[0x0],r9
	udd_enable_address();
80004464:	fe 68 00 00 	mov	r8,-131072
80004468:	fe 69 00 00 	mov	r9,-131072
8000446c:	72 09       	ld.w	r9,r9[0x0]
8000446e:	a7 b9       	sbr	r9,0x7
80004470:	91 09       	st.w	r8[0x0],r9
}
80004472:	2f fd       	sub	sp,-4
80004474:	e3 cd 80 80 	ldm	sp++,r7,pc

80004478 <udd_getaddress>:


uint8_t udd_getaddress(void)
{
80004478:	eb cd 40 80 	pushm	r7,lr
8000447c:	1a 97       	mov	r7,sp
	return udd_get_configured_address();
8000447e:	fe 68 00 00 	mov	r8,-131072
80004482:	70 08       	ld.w	r8,r8[0x0]
80004484:	5c 58       	castu.b	r8
80004486:	f1 d8 c0 07 	bfextu	r8,r8,0x0,0x7
}
8000448a:	10 9c       	mov	r12,r8
8000448c:	e3 cd 80 80 	ldm	sp++,r7,pc

80004490 <udd_get_frame_number>:


uint16_t udd_get_frame_number(void)
{
80004490:	eb cd 40 80 	pushm	r7,lr
80004494:	1a 97       	mov	r7,sp
	return udd_frame_number();
80004496:	fe 68 00 20 	mov	r8,-131040
8000449a:	70 08       	ld.w	r8,r8[0x0]
8000449c:	e2 18 3f f8 	andl	r8,0x3ff8,COH
800044a0:	a3 98       	lsr	r8,0x3
800044a2:	5c 88       	casts.h	r8
}
800044a4:	10 9c       	mov	r12,r8
800044a6:	e3 cd 80 80 	ldm	sp++,r7,pc

800044aa <udd_get_micro_frame_number>:

uint16_t udd_get_micro_frame_number(void)
{
800044aa:	eb cd 40 80 	pushm	r7,lr
800044ae:	1a 97       	mov	r7,sp
	return udd_micro_frame_number();
800044b0:	fe 68 00 00 	mov	r8,-131072
800044b4:	70 88       	ld.w	r8,r8[0x20]
800044b6:	5c 88       	casts.h	r8
800044b8:	5c 88       	casts.h	r8
800044ba:	f1 d8 c0 0e 	bfextu	r8,r8,0x0,0xe
}
800044be:	10 9c       	mov	r12,r8
800044c0:	e3 cd 80 80 	ldm	sp++,r7,pc

800044c4 <udd_set_setup_payload>:
	}
}


void udd_set_setup_payload( uint8_t *payload, uint16_t payload_size )
{
800044c4:	eb cd 40 80 	pushm	r7,lr
800044c8:	1a 97       	mov	r7,sp
800044ca:	20 2d       	sub	sp,8
800044cc:	ef 4c ff fc 	st.w	r7[-4],r12
800044d0:	16 98       	mov	r8,r11
800044d2:	ef 58 ff f8 	st.h	r7[-8],r8
	udd_g_ctrlreq.payload = payload;
800044d6:	48 68       	lddpc	r8,800044ec <udd_set_setup_payload+0x28>
800044d8:	ee f9 ff fc 	ld.w	r9,r7[-4]
800044dc:	91 29       	st.w	r8[0x8],r9
	udd_g_ctrlreq.payload_size = payload_size;
800044de:	48 49       	lddpc	r9,800044ec <udd_set_setup_payload+0x28>
800044e0:	ef 08 ff f8 	ld.sh	r8,r7[-8]
800044e4:	b2 68       	st.h	r9[0xc],r8
}
800044e6:	2f ed       	sub	sp,-8
800044e8:	e3 cd 80 80 	ldm	sp++,r7,pc
800044ec:	00 00       	add	r0,r0
800044ee:	0b 24       	ld.uh	r4,r5++

800044f0 <udd_ep_alloc>:


#if (0!=USB_DEVICE_MAX_EP)
bool udd_ep_alloc(udd_ep_id_t ep, uint8_t bmAttributes,
		uint16_t MaxEndpointSize)
{
800044f0:	eb cd 40 80 	pushm	r7,lr
800044f4:	1a 97       	mov	r7,sp
800044f6:	20 dd       	sub	sp,52
800044f8:	16 99       	mov	r9,r11
800044fa:	14 98       	mov	r8,r10
800044fc:	18 9a       	mov	r10,r12
800044fe:	ef 6a ff d4 	st.b	r7[-44],r10
80004502:	ef 69 ff d0 	st.b	r7[-48],r9
80004506:	ef 58 ff cc 	st.h	r7[-52],r8
	bool b_dir_in;
	uint16_t ep_allocated;
	uint8_t bank, i;

	b_dir_in = ep & USB_EP_DIR_IN;
8000450a:	ef 38 ff d4 	ld.ub	r8,r7[-44]
8000450e:	a7 98       	lsr	r8,0x7
80004510:	ef 68 ff db 	st.b	r7[-37],r8
	ep = ep & USB_EP_ADDR_MASK;
80004514:	ef 38 ff d4 	ld.ub	r8,r7[-44]
80004518:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
8000451c:	ef 68 ff d4 	st.b	r7[-44],r8

	if (ep > USB_DEVICE_MAX_EP) {
80004520:	ef 39 ff d4 	ld.ub	r9,r7[-44]
80004524:	30 38       	mov	r8,3
80004526:	f0 09 18 00 	cp.b	r9,r8
8000452a:	e0 88 00 04 	brls	80004532 <udd_ep_alloc+0x42>
		return false;
8000452e:	30 08       	mov	r8,0
80004530:	c7 f9       	rjmp	8000482e <udd_ep_alloc+0x33e>
	}
	if (Is_udd_endpoint_enabled(ep)) {
80004532:	fe 68 00 00 	mov	r8,-131072
80004536:	70 79       	ld.w	r9,r8[0x1c]
80004538:	ef 38 ff d4 	ld.ub	r8,r7[-44]
8000453c:	30 1a       	mov	r10,1
8000453e:	f4 08 09 48 	lsl	r8,r10,r8
80004542:	f3 e8 00 08 	and	r8,r9,r8
80004546:	c0 30       	breq	8000454c <udd_ep_alloc+0x5c>
		return false;
80004548:	30 08       	mov	r8,0
8000454a:	c7 29       	rjmp	8000482e <udd_ep_alloc+0x33e>
	}

	// Bank choice
	switch(bmAttributes&USB_EP_TYPE_MASK) {
8000454c:	ef 38 ff d0 	ld.ub	r8,r7[-48]
80004550:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
80004554:	58 28       	cp.w	r8,2
80004556:	c0 d0       	breq	80004570 <udd_ep_alloc+0x80>
80004558:	58 38       	cp.w	r8,3
8000455a:	c0 70       	breq	80004568 <udd_ep_alloc+0x78>
8000455c:	58 18       	cp.w	r8,1
8000455e:	c0 d1       	brne	80004578 <udd_ep_alloc+0x88>
	case USB_EP_TYPE_ISOCHRONOUS:
		bank = UDD_ISOCHRONOUS_NB_BANK(ep);
80004560:	30 28       	mov	r8,2
80004562:	ef 68 ff de 	st.b	r7[-34],r8
		break;
80004566:	c0 b8       	rjmp	8000457c <udd_ep_alloc+0x8c>
	case USB_EP_TYPE_INTERRUPT:
		bank = UDD_INTERRUPT_NB_BANK(ep);
80004568:	30 18       	mov	r8,1
8000456a:	ef 68 ff de 	st.b	r7[-34],r8
		break;
8000456e:	c0 78       	rjmp	8000457c <udd_ep_alloc+0x8c>
	case USB_EP_TYPE_BULK:
		bank = UDD_BULK_NB_BANK(ep);
80004570:	30 28       	mov	r8,2
80004572:	ef 68 ff de 	st.b	r7[-34],r8
		break;
80004576:	c0 38       	rjmp	8000457c <udd_ep_alloc+0x8c>
	default:
		Assert(false);
		return false;
80004578:	30 08       	mov	r8,0
8000457a:	c5 a9       	rjmp	8000482e <udd_ep_alloc+0x33e>
	}
	switch(bank) {
8000457c:	ef 38 ff de 	ld.ub	r8,r7[-34]
80004580:	58 28       	cp.w	r8,2
80004582:	c0 90       	breq	80004594 <udd_ep_alloc+0xa4>
80004584:	58 38       	cp.w	r8,3
80004586:	c0 b0       	breq	8000459c <udd_ep_alloc+0xac>
80004588:	58 18       	cp.w	r8,1
8000458a:	c0 d1       	brne	800045a4 <udd_ep_alloc+0xb4>
	case 1:
		bank = AVR32_USBB_UECFG0_EPBK_SINGLE;
8000458c:	30 08       	mov	r8,0
8000458e:	ef 68 ff de 	st.b	r7[-34],r8
		break;
80004592:	c0 b8       	rjmp	800045a8 <udd_ep_alloc+0xb8>
	case 2:
		bank = AVR32_USBB_UECFG0_EPBK_DOUBLE;
80004594:	30 18       	mov	r8,1
80004596:	ef 68 ff de 	st.b	r7[-34],r8
		break;
8000459a:	c0 78       	rjmp	800045a8 <udd_ep_alloc+0xb8>
	case 3:
		bank = AVR32_USBB_UECFG0_EPBK_TRIPLE;
8000459c:	30 28       	mov	r8,2
8000459e:	ef 68 ff de 	st.b	r7[-34],r8
		break;
800045a2:	c0 38       	rjmp	800045a8 <udd_ep_alloc+0xb8>
	default:
		Assert(false);
		return false;
800045a4:	30 08       	mov	r8,0
800045a6:	c4 49       	rjmp	8000482e <udd_ep_alloc+0x33e>
	Assert(MaxEndpointSize < 1024);
	Assert((MaxEndpointSize == 1023) || !(MaxEndpointSize & (MaxEndpointSize - 1)));
	Assert(MaxEndpointSize >= 8);

	// Set configuration of new endpoint
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
800045a8:	ef 38 ff d4 	ld.ub	r8,r7[-44]
800045ac:	a3 68       	lsl	r8,0x2
800045ae:	e0 38 ff 00 	sub	r8,130816
800045b2:	ef 39 ff d4 	ld.ub	r9,r7[-44]
800045b6:	a3 69       	lsl	r9,0x2
800045b8:	e0 39 ff 00 	sub	r9,130816
800045bc:	72 09       	ld.w	r9,r9[0x0]
800045be:	12 9a       	mov	r10,r9
800045c0:	e0 1a e6 83 	andl	r10,0xe683
800045c4:	ef 39 ff d0 	ld.ub	r9,r7[-48]
800045c8:	ab 79       	lsl	r9,0xb
800045ca:	12 9b       	mov	r11,r9
800045cc:	e2 1b 18 00 	andl	r11,0x1800,COH
800045d0:	ef 39 ff db 	ld.ub	r9,r7[-37]
800045d4:	a9 69       	lsl	r9,0x8
800045d6:	e2 19 01 00 	andl	r9,0x100,COH
800045da:	12 4b       	or	r11,r9
800045dc:	ef 19 ff cc 	ld.uh	r9,r7[-52]
800045e0:	ef 49 ff f0 	st.w	r7[-16],r9
800045e4:	30 89       	mov	r9,8
800045e6:	ef 49 ff f4 	st.w	r7[-12],r9
800045ea:	ee f9 ff f0 	ld.w	r9,r7[-16]
800045ee:	ee fc ff f4 	ld.w	r12,r7[-12]
800045f2:	f2 0c 0c 49 	max	r9,r9,r12
800045f6:	ef 49 ff ec 	st.w	r7[-20],r9
800045fa:	ee f9 ff ec 	ld.w	r9,r7[-20]
800045fe:	ef 49 ff e4 	st.w	r7[-28],r9
80004602:	e0 69 04 00 	mov	r9,1024
80004606:	ef 49 ff e8 	st.w	r7[-24],r9
8000460a:	ee f9 ff e4 	ld.w	r9,r7[-28]
8000460e:	ee fc ff e8 	ld.w	r12,r7[-24]
80004612:	f2 0c 0d 49 	min	r9,r9,r12
80004616:	ef 49 ff e0 	st.w	r7[-32],r9
8000461a:	ee f9 ff e0 	ld.w	r9,r7[-32]
8000461e:	a1 79       	lsl	r9,0x1
80004620:	20 19       	sub	r9,1
80004622:	f2 09 12 00 	clz	r9,r9
80004626:	f2 09 11 1c 	rsub	r9,r9,28
8000462a:	a5 69       	lsl	r9,0x4
8000462c:	12 4b       	or	r11,r9
8000462e:	ef 39 ff de 	ld.ub	r9,r7[-34]
80004632:	a3 69       	lsl	r9,0x2
80004634:	e2 19 00 0c 	andl	r9,0xc,COH
80004638:	f7 e9 10 09 	or	r9,r11,r9
8000463c:	e2 19 19 7c 	andl	r9,0x197c,COH
80004640:	f5 e9 10 09 	or	r9,r10,r9
80004644:	91 09       	st.w	r8[0x0],r9
			MaxEndpointSize, bank);
	ep_allocated = 1 << ep;
80004646:	ef 38 ff d4 	ld.ub	r8,r7[-44]
8000464a:	30 19       	mov	r9,1
8000464c:	f2 08 09 48 	lsl	r8,r9,r8
80004650:	ef 58 ff dc 	st.h	r7[-36],r8

	// Unalloc endpoints superior
	for (i = USB_DEVICE_MAX_EP; i > ep; i--) {
80004654:	30 38       	mov	r8,3
80004656:	ef 68 ff df 	st.b	r7[-33],r8
8000465a:	c3 a8       	rjmp	800046ce <udd_ep_alloc+0x1de>
		if (Is_udd_endpoint_enabled(i)) {
8000465c:	fe 68 00 00 	mov	r8,-131072
80004660:	70 79       	ld.w	r9,r8[0x1c]
80004662:	ef 38 ff df 	ld.ub	r8,r7[-33]
80004666:	30 1a       	mov	r10,1
80004668:	f4 08 09 48 	lsl	r8,r10,r8
8000466c:	f3 e8 00 08 	and	r8,r9,r8
80004670:	c2 a0       	breq	800046c4 <udd_ep_alloc+0x1d4>
			ep_allocated |= 1 << i;
80004672:	ef 38 ff df 	ld.ub	r8,r7[-33]
80004676:	30 19       	mov	r9,1
80004678:	f2 08 09 48 	lsl	r8,r9,r8
8000467c:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
80004680:	ef 08 ff dc 	ld.sh	r8,r7[-36]
80004684:	f3 e8 10 08 	or	r8,r9,r8
80004688:	5c 88       	casts.h	r8
8000468a:	ef 58 ff dc 	st.h	r7[-36],r8
			udd_disable_endpoint(i);
8000468e:	fe 68 00 00 	mov	r8,-131072
80004692:	fe 69 00 00 	mov	r9,-131072
80004696:	72 7a       	ld.w	r10,r9[0x1c]
80004698:	ef 39 ff df 	ld.ub	r9,r7[-33]
8000469c:	30 1b       	mov	r11,1
8000469e:	f6 09 09 49 	lsl	r9,r11,r9
800046a2:	5c d9       	com	r9
800046a4:	f5 e9 00 09 	and	r9,r10,r9
800046a8:	91 79       	st.w	r8[0x1c],r9
			udd_unallocate_memory(i);
800046aa:	ef 38 ff df 	ld.ub	r8,r7[-33]
800046ae:	a3 68       	lsl	r8,0x2
800046b0:	e0 38 ff 00 	sub	r8,130816
800046b4:	ef 39 ff df 	ld.ub	r9,r7[-33]
800046b8:	a3 69       	lsl	r9,0x2
800046ba:	e0 39 ff 00 	sub	r9,130816
800046be:	72 09       	ld.w	r9,r9[0x0]
800046c0:	a1 d9       	cbr	r9,0x1
800046c2:	91 09       	st.w	r8[0x0],r9
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
			MaxEndpointSize, bank);
	ep_allocated = 1 << ep;

	// Unalloc endpoints superior
	for (i = USB_DEVICE_MAX_EP; i > ep; i--) {
800046c4:	ef 38 ff df 	ld.ub	r8,r7[-33]
800046c8:	20 18       	sub	r8,1
800046ca:	ef 68 ff df 	st.b	r7[-33],r8
800046ce:	ef 39 ff df 	ld.ub	r9,r7[-33]
800046d2:	ef 38 ff d4 	ld.ub	r8,r7[-44]
800046d6:	f0 09 18 00 	cp.b	r9,r8
800046da:	fe 9b ff c1 	brhi	8000465c <udd_ep_alloc+0x16c>
			udd_unallocate_memory(i);
		}
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
800046de:	ef 38 ff d4 	ld.ub	r8,r7[-44]
800046e2:	ef 68 ff df 	st.b	r7[-33],r8
800046e6:	c9 c8       	rjmp	8000481e <udd_ep_alloc+0x32e>
		if (ep_allocated & (1 << i)) {
800046e8:	ef 19 ff dc 	ld.uh	r9,r7[-36]
800046ec:	ef 38 ff df 	ld.ub	r8,r7[-33]
800046f0:	f2 08 08 48 	asr	r8,r9,r8
800046f4:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800046f8:	5c 58       	castu.b	r8
800046fa:	e0 80 00 8d 	breq	80004814 <udd_ep_alloc+0x324>
			udd_ep_job_t *ptr_job = &udd_ep_job[i - 1];
800046fe:	ef 38 ff df 	ld.ub	r8,r7[-33]
80004702:	f0 c9 00 01 	sub	r9,r8,1
80004706:	12 98       	mov	r8,r9
80004708:	a3 68       	lsl	r8,0x2
8000470a:	12 08       	add	r8,r9
8000470c:	a3 68       	lsl	r8,0x2
8000470e:	10 99       	mov	r9,r8
80004710:	4c a8       	lddpc	r8,80004838 <udd_ep_alloc+0x348>
80004712:	f2 08 00 08 	add	r8,r9,r8
80004716:	ef 48 ff f8 	st.w	r7[-8],r8
			bool b_restart = ptr_job->busy;
8000471a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000471e:	70 08       	ld.w	r8,r8[0x0]
80004720:	e6 18 80 00 	andh	r8,0x8000,COH
80004724:	5f 18       	srne	r8
80004726:	ef 68 ff ff 	st.b	r7[-1],r8
			ptr_job->busy = false;
8000472a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000472e:	72 08       	ld.w	r8,r9[0x0]
80004730:	30 0a       	mov	r10,0
80004732:	f1 da d3 e1 	bfins	r8,r10,0x1f,0x1
80004736:	93 08       	st.w	r9[0x0],r8

			udd_allocate_memory(i);
80004738:	ef 38 ff df 	ld.ub	r8,r7[-33]
8000473c:	a3 68       	lsl	r8,0x2
8000473e:	e0 38 ff 00 	sub	r8,130816
80004742:	ef 39 ff df 	ld.ub	r9,r7[-33]
80004746:	a3 69       	lsl	r9,0x2
80004748:	e0 39 ff 00 	sub	r9,130816
8000474c:	72 09       	ld.w	r9,r9[0x0]
8000474e:	a1 b9       	sbr	r9,0x1
80004750:	91 09       	st.w	r8[0x0],r9
			udd_enable_endpoint(i);
80004752:	fe 68 00 00 	mov	r8,-131072
80004756:	fe 69 00 00 	mov	r9,-131072
8000475a:	72 7a       	ld.w	r10,r9[0x1c]
8000475c:	ef 39 ff df 	ld.ub	r9,r7[-33]
80004760:	30 1b       	mov	r11,1
80004762:	f6 09 09 49 	lsl	r9,r11,r9
80004766:	f5 e9 10 09 	or	r9,r10,r9
8000476a:	91 79       	st.w	r8[0x1c],r9
			if (!Is_udd_endpoint_configured(i)) {
8000476c:	ef 38 ff df 	ld.ub	r8,r7[-33]
80004770:	a3 68       	lsl	r8,0x2
80004772:	e0 38 fe d0 	sub	r8,130768
80004776:	70 08       	ld.w	r8,r8[0x0]
80004778:	e6 18 00 04 	andh	r8,0x4,COH
8000477c:	c2 61       	brne	800047c8 <udd_ep_alloc+0x2d8>
				if (NULL == ptr_job->call_trans) {
8000477e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004782:	70 48       	ld.w	r8,r8[0x10]
80004784:	58 08       	cp.w	r8,0
80004786:	c0 31       	brne	8000478c <udd_ep_alloc+0x29c>
					return false;
80004788:	30 08       	mov	r8,0
8000478a:	c5 28       	rjmp	8000482e <udd_ep_alloc+0x33e>
				}
				if (Is_udd_endpoint_in(i)) {
8000478c:	ef 38 ff df 	ld.ub	r8,r7[-33]
80004790:	a3 68       	lsl	r8,0x2
80004792:	e0 38 ff 00 	sub	r8,130816
80004796:	70 08       	ld.w	r8,r8[0x0]
80004798:	e2 18 01 00 	andl	r8,0x100,COH
8000479c:	c0 90       	breq	800047ae <udd_ep_alloc+0x2be>
					i |= USB_EP_DIR_IN;
8000479e:	ef 38 ff df 	ld.ub	r8,r7[-33]
800047a2:	ea 18 ff ff 	orh	r8,0xffff
800047a6:	e8 18 ff 80 	orl	r8,0xff80
800047aa:	ef 68 ff df 	st.b	r7[-33],r8
				}				
				ptr_job->call_trans(UDD_EP_TRANSFER_ABORT,
800047ae:	ee f8 ff f8 	ld.w	r8,r7[-8]
800047b2:	70 48       	ld.w	r8,r8[0x10]
800047b4:	ef 3a ff df 	ld.ub	r10,r7[-33]
800047b8:	ee f9 ff f8 	ld.w	r9,r7[-8]
800047bc:	72 29       	ld.w	r9,r9[0x8]
800047be:	12 9b       	mov	r11,r9
800047c0:	30 1c       	mov	r12,1
800047c2:	5d 18       	icall	r8
						ptr_job->buf_size, i);
				return false;
800047c4:	30 08       	mov	r8,0
800047c6:	c3 48       	rjmp	8000482e <udd_ep_alloc+0x33e>
			}
			udd_enable_endpoint_bank_autoswitch(i);
800047c8:	ef 38 ff df 	ld.ub	r8,r7[-33]
800047cc:	a3 68       	lsl	r8,0x2
800047ce:	e0 38 ff 00 	sub	r8,130816
800047d2:	ef 39 ff df 	ld.ub	r9,r7[-33]
800047d6:	a3 69       	lsl	r9,0x2
800047d8:	e0 39 ff 00 	sub	r9,130816
800047dc:	72 09       	ld.w	r9,r9[0x0]
800047de:	a9 b9       	sbr	r9,0x9
800047e0:	91 09       	st.w	r8[0x0],r9
			if (b_restart) {
800047e2:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800047e6:	30 08       	mov	r8,0
800047e8:	f0 09 18 00 	cp.b	r9,r8
800047ec:	c1 40       	breq	80004814 <udd_ep_alloc+0x324>
				// Re-run the job
				udd_ep_run(i, ptr_job->b_shortpacket,
800047ee:	ee f8 ff f8 	ld.w	r8,r7[-8]
800047f2:	70 48       	ld.w	r8,r8[0x10]
800047f4:	ee f9 ff f8 	ld.w	r9,r7[-8]
800047f8:	72 29       	ld.w	r9,r9[0x8]
800047fa:	ee fa ff f8 	ld.w	r10,r7[-8]
800047fe:	74 1a       	ld.w	r10,r10[0x4]
80004800:	ee fb ff f8 	ld.w	r11,r7[-8]
80004804:	76 0b       	ld.w	r11,r11[0x0]
80004806:	e6 1b 40 00 	andh	r11,0x4000,COH
8000480a:	5f 1b       	srne	r11
8000480c:	ef 3c ff df 	ld.ub	r12,r7[-33]
80004810:	f0 1f 00 0b 	mcall	8000483c <udd_ep_alloc+0x34c>
			udd_unallocate_memory(i);
		}
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
80004814:	ef 38 ff df 	ld.ub	r8,r7[-33]
80004818:	2f f8       	sub	r8,-1
8000481a:	ef 68 ff df 	st.b	r7[-33],r8
8000481e:	ef 39 ff df 	ld.ub	r9,r7[-33]
80004822:	30 38       	mov	r8,3
80004824:	f0 09 18 00 	cp.b	r9,r8
80004828:	fe 98 ff 60 	brls	800046e8 <udd_ep_alloc+0x1f8>
						ptr_job->buf_size,
						ptr_job->call_trans);
			}
		}
	}
	return true;
8000482c:	30 18       	mov	r8,1
}
8000482e:	10 9c       	mov	r12,r8
80004830:	2f 3d       	sub	sp,-52
80004832:	e3 cd 80 80 	ldm	sp++,r7,pc
80004836:	00 00       	add	r0,r0
80004838:	00 00       	add	r0,r0
8000483a:	06 30       	cp.w	r0,r3
8000483c:	80 00       	ld.sh	r0,r0[0x0]
8000483e:	4b 60       	lddpc	r0,80004914 <udd_ep_set_halt+0x8>

80004840 <udd_ep_free>:


void udd_ep_free(udd_ep_id_t ep)
{
80004840:	eb cd 40 80 	pushm	r7,lr
80004844:	1a 97       	mov	r7,sp
80004846:	20 2d       	sub	sp,8
80004848:	18 98       	mov	r8,r12
8000484a:	ef 68 ff f8 	st.b	r7[-8],r8
	uint8_t index = ep & USB_EP_ADDR_MASK;
8000484e:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80004852:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80004856:	ef 68 ff ff 	st.b	r7[-1],r8

	if (USB_DEVICE_MAX_EP < index) {
8000485a:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000485e:	30 38       	mov	r8,3
80004860:	f0 09 18 00 	cp.b	r9,r8
80004864:	e0 8b 00 33 	brhi	800048ca <udd_ep_free+0x8a>
		return;
	}
	udd_disable_endpoint(index);
80004868:	fe 68 00 00 	mov	r8,-131072
8000486c:	fe 69 00 00 	mov	r9,-131072
80004870:	72 7a       	ld.w	r10,r9[0x1c]
80004872:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80004876:	30 1b       	mov	r11,1
80004878:	f6 09 09 49 	lsl	r9,r11,r9
8000487c:	5c d9       	com	r9
8000487e:	f5 e9 00 09 	and	r9,r10,r9
80004882:	91 79       	st.w	r8[0x1c],r9
	udd_unallocate_memory(index);
80004884:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80004888:	a3 68       	lsl	r8,0x2
8000488a:	e0 38 ff 00 	sub	r8,130816
8000488e:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80004892:	a3 69       	lsl	r9,0x2
80004894:	e0 39 ff 00 	sub	r9,130816
80004898:	72 09       	ld.w	r9,r9[0x0]
8000489a:	a1 d9       	cbr	r9,0x1
8000489c:	91 09       	st.w	r8[0x0],r9
	udd_ep_abort_job(ep);
8000489e:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800048a2:	10 9c       	mov	r12,r8
800048a4:	f0 1f 00 0c 	mcall	800048d4 <udd_ep_free+0x94>
	udd_ep_job[index - 1].stall_requested = false;
800048a8:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800048ac:	f0 c9 00 01 	sub	r9,r8,1
800048b0:	48 aa       	lddpc	r10,800048d8 <udd_ep_free+0x98>
800048b2:	12 98       	mov	r8,r9
800048b4:	a3 68       	lsl	r8,0x2
800048b6:	12 08       	add	r8,r9
800048b8:	a3 68       	lsl	r8,0x2
800048ba:	f4 08 00 09 	add	r9,r10,r8
800048be:	72 08       	ld.w	r8,r9[0x0]
800048c0:	30 0a       	mov	r10,0
800048c2:	f1 da d3 a1 	bfins	r8,r10,0x1d,0x1
800048c6:	93 08       	st.w	r9[0x0],r8
800048c8:	c0 28       	rjmp	800048cc <udd_ep_free+0x8c>
void udd_ep_free(udd_ep_id_t ep)
{
	uint8_t index = ep & USB_EP_ADDR_MASK;

	if (USB_DEVICE_MAX_EP < index) {
		return;
800048ca:	d7 03       	nop
	}
	udd_disable_endpoint(index);
	udd_unallocate_memory(index);
	udd_ep_abort_job(ep);
	udd_ep_job[index - 1].stall_requested = false;
}
800048cc:	2f ed       	sub	sp,-8
800048ce:	e3 cd 80 80 	ldm	sp++,r7,pc
800048d2:	00 00       	add	r0,r0
800048d4:	80 00       	ld.sh	r0,r0[0x0]
800048d6:	56 30       	stdsp	sp[0x18c],r0
800048d8:	00 00       	add	r0,r0
800048da:	06 30       	cp.w	r0,r3

800048dc <udd_ep_is_halted>:


bool udd_ep_is_halted(udd_ep_id_t ep)
{
800048dc:	eb cd 40 80 	pushm	r7,lr
800048e0:	1a 97       	mov	r7,sp
800048e2:	20 1d       	sub	sp,4
800048e4:	18 98       	mov	r8,r12
800048e6:	ef 68 ff fc 	st.b	r7[-4],r8
	return Is_udd_endpoint_stall_requested(ep & USB_EP_ADDR_MASK);
800048ea:	ef 38 ff fc 	ld.ub	r8,r7[-4]
800048ee:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
800048f2:	a3 68       	lsl	r8,0x2
800048f4:	e0 38 fe 40 	sub	r8,130624
800048f8:	70 08       	ld.w	r8,r8[0x0]
800048fa:	e6 18 00 08 	andh	r8,0x8,COH
800048fe:	5f 18       	srne	r8
80004900:	5c 58       	castu.b	r8
}
80004902:	10 9c       	mov	r12,r8
80004904:	2f fd       	sub	sp,-4
80004906:	e3 cd 80 80 	ldm	sp++,r7,pc
8000490a:	d7 03       	nop

8000490c <udd_ep_set_halt>:


bool udd_ep_set_halt(udd_ep_id_t ep)
{
8000490c:	eb cd 40 80 	pushm	r7,lr
80004910:	1a 97       	mov	r7,sp
80004912:	20 3d       	sub	sp,12
80004914:	18 98       	mov	r8,r12
80004916:	ef 68 ff f4 	st.b	r7[-12],r8
	udd_ep_job_t *ptr_job;
	uint8_t index = ep & USB_EP_ADDR_MASK;
8000491a:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000491e:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80004922:	ef 68 ff ff 	st.b	r7[-1],r8

	if (USB_DEVICE_MAX_EP < index) {
80004926:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000492a:	30 38       	mov	r8,3
8000492c:	f0 09 18 00 	cp.b	r9,r8
80004930:	e0 88 00 04 	brls	80004938 <udd_ep_set_halt+0x2c>
		return false;
80004934:	30 08       	mov	r8,0
80004936:	c6 f8       	rjmp	80004a14 <udd_ep_set_halt+0x108>
	}

	ptr_job = &udd_ep_job[index - 1];
80004938:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000493c:	f0 c9 00 01 	sub	r9,r8,1
80004940:	12 98       	mov	r8,r9
80004942:	a3 68       	lsl	r8,0x2
80004944:	12 08       	add	r8,r9
80004946:	a3 68       	lsl	r8,0x2
80004948:	10 99       	mov	r9,r8
8000494a:	4b 58       	lddpc	r8,80004a1c <udd_ep_set_halt+0x110>
8000494c:	f2 08 00 08 	add	r8,r9,r8
80004950:	ef 48 ff f8 	st.w	r7[-8],r8

	if (Is_udd_endpoint_stall_requested(index) // Endpoint stalled
80004954:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80004958:	a3 68       	lsl	r8,0x2
8000495a:	e0 38 fe 40 	sub	r8,130624
8000495e:	70 08       	ld.w	r8,r8[0x0]
80004960:	e6 18 00 08 	andh	r8,0x8,COH
80004964:	c0 71       	brne	80004972 <udd_ep_set_halt+0x66>
			|| ptr_job->stall_requested) { // Endpoint stall is requested
80004966:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000496a:	70 08       	ld.w	r8,r8[0x0]
8000496c:	e6 18 20 00 	andh	r8,0x2000,COH
		return false;
	}

	ptr_job = &udd_ep_job[index - 1];

	if (Is_udd_endpoint_stall_requested(index) // Endpoint stalled
80004970:	c0 30       	breq	80004976 <udd_ep_set_halt+0x6a>
			|| ptr_job->stall_requested) { // Endpoint stall is requested
		return true; // Already STALL
80004972:	30 18       	mov	r8,1
80004974:	c5 08       	rjmp	80004a14 <udd_ep_set_halt+0x108>
	}

	if (ptr_job->busy == true) {
80004976:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000497a:	70 08       	ld.w	r8,r8[0x0]
8000497c:	e6 18 80 00 	andh	r8,0x8000,COH
80004980:	c0 30       	breq	80004986 <udd_ep_set_halt+0x7a>
		return false; // Job on going, stall impossible
80004982:	30 08       	mov	r8,0
80004984:	c4 88       	rjmp	80004a14 <udd_ep_set_halt+0x108>
	}

	if ((ep & USB_EP_DIR_IN) && (0 != udd_nb_busy_bank(index))) {
80004986:	ef 39 ff f4 	ld.ub	r9,r7[-12]
8000498a:	30 08       	mov	r8,0
8000498c:	f0 09 18 00 	cp.b	r9,r8
80004990:	c2 54       	brge	800049da <udd_ep_set_halt+0xce>
80004992:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80004996:	a3 68       	lsl	r8,0x2
80004998:	e0 38 fe d0 	sub	r8,130768
8000499c:	70 08       	ld.w	r8,r8[0x0]
8000499e:	e2 18 30 00 	andl	r8,0x3000,COH
800049a2:	ad 88       	lsr	r8,0xc
800049a4:	c1 b0       	breq	800049da <udd_ep_set_halt+0xce>
			// Delay the stall after the end of IN transfer on USB line
			ptr_job->stall_requested = true;
800049a6:	ee f9 ff f8 	ld.w	r9,r7[-8]
800049aa:	72 08       	ld.w	r8,r9[0x0]
800049ac:	30 1a       	mov	r10,1
800049ae:	f1 da d3 a1 	bfins	r8,r10,0x1d,0x1
800049b2:	93 08       	st.w	r9[0x0],r8
			udd_enable_bank_interrupt(index);
800049b4:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800049b8:	a3 68       	lsl	r8,0x2
800049ba:	e0 38 fe 10 	sub	r8,130576
800049be:	e0 69 10 00 	mov	r9,4096
800049c2:	91 09       	st.w	r8[0x0],r9
			udd_enable_endpoint_interrupt(index);
800049c4:	fe 68 00 00 	mov	r8,-131072
800049c8:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800049cc:	e0 6a 10 00 	mov	r10,4096
800049d0:	f4 09 09 49 	lsl	r9,r10,r9
800049d4:	91 69       	st.w	r8[0x18],r9
			return true;
800049d6:	30 18       	mov	r8,1
800049d8:	c1 e8       	rjmp	80004a14 <udd_ep_set_halt+0x108>
	}
	
	// Stall endpoint immediately
	udd_disable_endpoint_bank_autoswitch(index);
800049da:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800049de:	a3 68       	lsl	r8,0x2
800049e0:	e0 38 ff 00 	sub	r8,130816
800049e4:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800049e8:	a3 69       	lsl	r9,0x2
800049ea:	e0 39 ff 00 	sub	r9,130816
800049ee:	72 09       	ld.w	r9,r9[0x0]
800049f0:	a9 d9       	cbr	r9,0x9
800049f2:	91 09       	st.w	r8[0x0],r9
	udd_ack_stall(index);
800049f4:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800049f8:	a3 68       	lsl	r8,0x2
800049fa:	e0 38 fe a0 	sub	r8,130720
800049fe:	34 09       	mov	r9,64
80004a00:	91 09       	st.w	r8[0x0],r9
	udd_enable_stall_handshake(index);
80004a02:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80004a06:	a3 68       	lsl	r8,0x2
80004a08:	e0 38 fe 10 	sub	r8,130576
80004a0c:	e8 69 00 00 	mov	r9,524288
80004a10:	91 09       	st.w	r8[0x0],r9
	return true;
80004a12:	30 18       	mov	r8,1
}
80004a14:	10 9c       	mov	r12,r8
80004a16:	2f dd       	sub	sp,-12
80004a18:	e3 cd 80 80 	ldm	sp++,r7,pc
80004a1c:	00 00       	add	r0,r0
80004a1e:	06 30       	cp.w	r0,r3

80004a20 <udd_ep_clear_halt>:


bool udd_ep_clear_halt(udd_ep_id_t ep)
{
80004a20:	eb cd 40 80 	pushm	r7,lr
80004a24:	1a 97       	mov	r7,sp
80004a26:	20 3d       	sub	sp,12
80004a28:	18 98       	mov	r8,r12
80004a2a:	ef 68 ff f4 	st.b	r7[-12],r8
	bool b_stall_cleared = false;
80004a2e:	30 08       	mov	r8,0
80004a30:	ef 68 ff fb 	st.b	r7[-5],r8
	udd_ep_job_t *ptr_job;

	ep &= USB_EP_ADDR_MASK;
80004a34:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80004a38:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80004a3c:	ef 68 ff f4 	st.b	r7[-12],r8
	if (USB_DEVICE_MAX_EP < ep)
80004a40:	ef 39 ff f4 	ld.ub	r9,r7[-12]
80004a44:	30 38       	mov	r8,3
80004a46:	f0 09 18 00 	cp.b	r9,r8
80004a4a:	e0 88 00 04 	brls	80004a52 <udd_ep_clear_halt+0x32>
		return false;
80004a4e:	30 08       	mov	r8,0
80004a50:	c8 18       	rjmp	80004b52 <udd_ep_clear_halt+0x132>
	ptr_job = &udd_ep_job[ep - 1];
80004a52:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80004a56:	f0 c9 00 01 	sub	r9,r8,1
80004a5a:	12 98       	mov	r8,r9
80004a5c:	a3 68       	lsl	r8,0x2
80004a5e:	12 08       	add	r8,r9
80004a60:	a3 68       	lsl	r8,0x2
80004a62:	10 99       	mov	r9,r8
80004a64:	4b e8       	lddpc	r8,80004b5c <udd_ep_clear_halt+0x13c>
80004a66:	f2 08 00 08 	add	r8,r9,r8
80004a6a:	ef 48 ff fc 	st.w	r7[-4],r8

	if (ptr_job->stall_requested) {
80004a6e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004a72:	70 08       	ld.w	r8,r8[0x0]
80004a74:	e6 18 20 00 	andh	r8,0x2000,COH
80004a78:	c1 c0       	breq	80004ab0 <udd_ep_clear_halt+0x90>
		// Endpoint stall has been requested but not done
		// Remove stall request
		ptr_job->stall_requested = false;
80004a7a:	ee f9 ff fc 	ld.w	r9,r7[-4]
80004a7e:	72 08       	ld.w	r8,r9[0x0]
80004a80:	30 0a       	mov	r10,0
80004a82:	f1 da d3 a1 	bfins	r8,r10,0x1d,0x1
80004a86:	93 08       	st.w	r9[0x0],r8
		udd_disable_bank_interrupt(ep);
80004a88:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80004a8c:	a3 68       	lsl	r8,0x2
80004a8e:	e0 38 fd e0 	sub	r8,130528
80004a92:	e0 69 10 00 	mov	r9,4096
80004a96:	91 09       	st.w	r8[0x0],r9
		udd_disable_endpoint_interrupt(ep);
80004a98:	fe 68 00 00 	mov	r8,-131072
80004a9c:	ef 39 ff f4 	ld.ub	r9,r7[-12]
80004aa0:	e0 6a 10 00 	mov	r10,4096
80004aa4:	f4 09 09 49 	lsl	r9,r10,r9
80004aa8:	91 59       	st.w	r8[0x14],r9
		b_stall_cleared = true;
80004aaa:	30 18       	mov	r8,1
80004aac:	ef 68 ff fb 	st.b	r7[-5],r8
	}
	if (Is_udd_endpoint_stall_requested(ep)) { 
80004ab0:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80004ab4:	a3 68       	lsl	r8,0x2
80004ab6:	e0 38 fe 40 	sub	r8,130624
80004aba:	70 08       	ld.w	r8,r8[0x0]
80004abc:	e6 18 00 08 	andh	r8,0x8,COH
80004ac0:	c3 10       	breq	80004b22 <udd_ep_clear_halt+0x102>
		if (Is_udd_stall(ep)) {
80004ac2:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80004ac6:	a3 68       	lsl	r8,0x2
80004ac8:	e0 38 fe d0 	sub	r8,130768
80004acc:	70 08       	ld.w	r8,r8[0x0]
80004ace:	e2 18 00 40 	andl	r8,0x40,COH
80004ad2:	c1 00       	breq	80004af2 <udd_ep_clear_halt+0xd2>
			udd_ack_stall(ep);
80004ad4:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80004ad8:	a3 68       	lsl	r8,0x2
80004ada:	e0 38 fe a0 	sub	r8,130720
80004ade:	34 09       	mov	r9,64
80004ae0:	91 09       	st.w	r8[0x0],r9
			// A packet has been stalled
			// then reset datatoggle
			udd_reset_data_toggle(ep);
80004ae2:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80004ae6:	a3 68       	lsl	r8,0x2
80004ae8:	e0 38 fe 10 	sub	r8,130576
80004aec:	e4 69 00 00 	mov	r9,262144
80004af0:	91 09       	st.w	r8[0x0],r9
		}
		// Disable stall
		udd_disable_stall_handshake(ep);
80004af2:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80004af6:	a3 68       	lsl	r8,0x2
80004af8:	e0 38 fd e0 	sub	r8,130528
80004afc:	e8 69 00 00 	mov	r9,524288
80004b00:	91 09       	st.w	r8[0x0],r9
		udd_enable_endpoint_bank_autoswitch(ep);
80004b02:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80004b06:	a3 68       	lsl	r8,0x2
80004b08:	e0 38 ff 00 	sub	r8,130816
80004b0c:	ef 39 ff f4 	ld.ub	r9,r7[-12]
80004b10:	a3 69       	lsl	r9,0x2
80004b12:	e0 39 ff 00 	sub	r9,130816
80004b16:	72 09       	ld.w	r9,r9[0x0]
80004b18:	a9 b9       	sbr	r9,0x9
80004b1a:	91 09       	st.w	r8[0x0],r9
		b_stall_cleared = true;
80004b1c:	30 18       	mov	r8,1
80004b1e:	ef 68 ff fb 	st.b	r7[-5],r8
	}
	if (b_stall_cleared) {
80004b22:	ef 39 ff fb 	ld.ub	r9,r7[-5]
80004b26:	30 08       	mov	r8,0
80004b28:	f0 09 18 00 	cp.b	r9,r8
80004b2c:	c1 20       	breq	80004b50 <udd_ep_clear_halt+0x130>
		// If a job is register on clear halt action
		// then execute callback
		if (ptr_job->busy == true) {
80004b2e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004b32:	70 08       	ld.w	r8,r8[0x0]
80004b34:	e6 18 80 00 	andh	r8,0x8000,COH
80004b38:	c0 c0       	breq	80004b50 <udd_ep_clear_halt+0x130>
			ptr_job->busy = false;
80004b3a:	ee f9 ff fc 	ld.w	r9,r7[-4]
80004b3e:	72 08       	ld.w	r8,r9[0x0]
80004b40:	30 0a       	mov	r10,0
80004b42:	f1 da d3 e1 	bfins	r8,r10,0x1f,0x1
80004b46:	93 08       	st.w	r9[0x0],r8
			ptr_job->call_nohalt();
80004b48:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004b4c:	70 48       	ld.w	r8,r8[0x10]
80004b4e:	5d 18       	icall	r8
		}
	}
	return true;
80004b50:	30 18       	mov	r8,1
}
80004b52:	10 9c       	mov	r12,r8
80004b54:	2f dd       	sub	sp,-12
80004b56:	e3 cd 80 80 	ldm	sp++,r7,pc
80004b5a:	00 00       	add	r0,r0
80004b5c:	00 00       	add	r0,r0
80004b5e:	06 30       	cp.w	r0,r3

80004b60 <udd_ep_run>:


bool udd_ep_run(udd_ep_id_t ep, bool b_shortpacket,
		uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
80004b60:	eb cd 40 80 	pushm	r7,lr
80004b64:	1a 97       	mov	r7,sp
80004b66:	20 7d       	sub	sp,28
80004b68:	ef 4a ff ec 	st.w	r7[-20],r10
80004b6c:	ef 49 ff e8 	st.w	r7[-24],r9
80004b70:	ef 48 ff e4 	st.w	r7[-28],r8
80004b74:	18 98       	mov	r8,r12
80004b76:	ef 68 ff f4 	st.b	r7[-12],r8
80004b7a:	16 98       	mov	r8,r11
80004b7c:	ef 68 ff f0 	st.b	r7[-16],r8
	udd_ep_job_t *ptr_job;
	irqflags_t flags;

	ep &= USB_EP_ADDR_MASK;
80004b80:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80004b84:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80004b88:	ef 68 ff f4 	st.b	r7[-12],r8
	if (USB_DEVICE_MAX_EP < ep) {
80004b8c:	ef 39 ff f4 	ld.ub	r9,r7[-12]
80004b90:	30 38       	mov	r8,3
80004b92:	f0 09 18 00 	cp.b	r9,r8
80004b96:	e0 88 00 04 	brls	80004b9e <udd_ep_run+0x3e>
		return false;
80004b9a:	30 08       	mov	r8,0
80004b9c:	c6 88       	rjmp	80004c6c <udd_ep_run+0x10c>
	}

	// Get job about endpoint
	ptr_job = &udd_ep_job[ep - 1];
80004b9e:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80004ba2:	f0 c9 00 01 	sub	r9,r8,1
80004ba6:	12 98       	mov	r8,r9
80004ba8:	a3 68       	lsl	r8,0x2
80004baa:	12 08       	add	r8,r9
80004bac:	a3 68       	lsl	r8,0x2
80004bae:	10 99       	mov	r9,r8
80004bb0:	4b 18       	lddpc	r8,80004c74 <udd_ep_run+0x114>
80004bb2:	f2 08 00 08 	add	r8,r9,r8
80004bb6:	ef 48 ff f8 	st.w	r7[-8],r8

	if ((!Is_udd_endpoint_enabled(ep))
80004bba:	fe 68 00 00 	mov	r8,-131072
80004bbe:	70 79       	ld.w	r9,r8[0x1c]
80004bc0:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80004bc4:	30 1a       	mov	r10,1
80004bc6:	f4 08 09 48 	lsl	r8,r10,r8
80004bca:	f3 e8 00 08 	and	r8,r9,r8
80004bce:	c1 00       	breq	80004bee <udd_ep_run+0x8e>
			|| Is_udd_endpoint_stall_requested(ep)
80004bd0:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80004bd4:	a3 68       	lsl	r8,0x2
80004bd6:	e0 38 fe 40 	sub	r8,130624
80004bda:	70 08       	ld.w	r8,r8[0x0]
80004bdc:	e6 18 00 08 	andh	r8,0x8,COH
	}

	// Get job about endpoint
	ptr_job = &udd_ep_job[ep - 1];

	if ((!Is_udd_endpoint_enabled(ep))
80004be0:	c0 71       	brne	80004bee <udd_ep_run+0x8e>
			|| Is_udd_endpoint_stall_requested(ep)
			|| ptr_job->stall_requested) {
80004be2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004be6:	70 08       	ld.w	r8,r8[0x0]
80004be8:	e6 18 20 00 	andh	r8,0x2000,COH
	}

	// Get job about endpoint
	ptr_job = &udd_ep_job[ep - 1];

	if ((!Is_udd_endpoint_enabled(ep))
80004bec:	c0 30       	breq	80004bf2 <udd_ep_run+0x92>
			|| Is_udd_endpoint_stall_requested(ep)
			|| ptr_job->stall_requested) {
		return false; // Endpoint is halted
80004bee:	30 08       	mov	r8,0
80004bf0:	c3 e8       	rjmp	80004c6c <udd_ep_run+0x10c>
	}

	flags = cpu_irq_save();
80004bf2:	f0 1f 00 22 	mcall	80004c78 <udd_ep_run+0x118>
80004bf6:	18 98       	mov	r8,r12
80004bf8:	ef 48 ff fc 	st.w	r7[-4],r8
	if (ptr_job->busy == true) {
80004bfc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004c00:	70 08       	ld.w	r8,r8[0x0]
80004c02:	e6 18 80 00 	andh	r8,0x8000,COH
80004c06:	c0 70       	breq	80004c14 <udd_ep_run+0xb4>
		cpu_irq_restore(flags);
80004c08:	ee fc ff fc 	ld.w	r12,r7[-4]
80004c0c:	f0 1f 00 1c 	mcall	80004c7c <udd_ep_run+0x11c>
		return false; // Job already on going
80004c10:	30 08       	mov	r8,0
80004c12:	c2 d8       	rjmp	80004c6c <udd_ep_run+0x10c>
	}
	ptr_job->busy = true;
80004c14:	ee f9 ff f8 	ld.w	r9,r7[-8]
80004c18:	72 08       	ld.w	r8,r9[0x0]
80004c1a:	30 1a       	mov	r10,1
80004c1c:	f1 da d3 e1 	bfins	r8,r10,0x1f,0x1
80004c20:	93 08       	st.w	r9[0x0],r8
	cpu_irq_restore(flags);
80004c22:	ee fc ff fc 	ld.w	r12,r7[-4]
80004c26:	f0 1f 00 16 	mcall	80004c7c <udd_ep_run+0x11c>

	// No job running. Let's setup a new one.
	//
	ptr_job->buf = buf;
80004c2a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004c2e:	ee f9 ff ec 	ld.w	r9,r7[-20]
80004c32:	91 19       	st.w	r8[0x4],r9
	ptr_job->buf_size = buf_size;
80004c34:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004c38:	ee f9 ff e8 	ld.w	r9,r7[-24]
80004c3c:	91 29       	st.w	r8[0x8],r9
	ptr_job->nb_trans = 0;
80004c3e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004c42:	30 09       	mov	r9,0
80004c44:	91 39       	st.w	r8[0xc],r9
	ptr_job->call_trans = callback;
80004c46:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004c4a:	ee f9 ff e4 	ld.w	r9,r7[-28]
80004c4e:	91 49       	st.w	r8[0x10],r9
	ptr_job->b_shortpacket = b_shortpacket;
80004c50:	ee f9 ff f8 	ld.w	r9,r7[-8]
80004c54:	72 08       	ld.w	r8,r9[0x0]
80004c56:	ef 3a ff f0 	ld.ub	r10,r7[-16]
80004c5a:	f1 da d3 c1 	bfins	r8,r10,0x1e,0x1
80004c5e:	93 08       	st.w	r9[0x0],r8


	// Request first transfer
	udd_ep_trans_done(ep);
80004c60:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80004c64:	10 9c       	mov	r12,r8
80004c66:	f0 1f 00 07 	mcall	80004c80 <udd_ep_run+0x120>
	return true;
80004c6a:	30 18       	mov	r8,1
}
80004c6c:	10 9c       	mov	r12,r8
80004c6e:	2f 9d       	sub	sp,-28
80004c70:	e3 cd 80 80 	ldm	sp++,r7,pc
80004c74:	00 00       	add	r0,r0
80004c76:	06 30       	cp.w	r0,r3
80004c78:	80 00       	ld.sh	r0,r0[0x0]
80004c7a:	3e ec       	mov	r12,-18
80004c7c:	80 00       	ld.sh	r0,r0[0x0]
80004c7e:	3f 2c       	mov	r12,-14
80004c80:	80 00       	ld.sh	r0,r0[0x0]
80004c82:	57 00       	stdsp	sp[0x1c0],r0

80004c84 <udd_ep_abort>:


void udd_ep_abort(udd_ep_id_t ep)
{
80004c84:	eb cd 40 80 	pushm	r7,lr
80004c88:	1a 97       	mov	r7,sp
80004c8a:	20 2d       	sub	sp,8
80004c8c:	18 98       	mov	r8,r12
80004c8e:	ef 68 ff f8 	st.b	r7[-8],r8
	uint8_t index = ep & USB_EP_ADDR_MASK;
80004c92:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80004c96:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80004c9a:	ef 68 ff ff 	st.b	r7[-1],r8

	// Stop DMA transfer
	udd_disable_endpoint_dma_interrupt(index);
80004c9e:	fe 68 00 00 	mov	r8,-131072
80004ca2:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80004ca6:	20 19       	sub	r9,1
80004ca8:	fc 1a 02 00 	movh	r10,0x200
80004cac:	f4 09 09 49 	lsl	r9,r10,r9
80004cb0:	91 59       	st.w	r8[0x14],r9
	udd_endpoint_dma_set_control(index, 0);
80004cb2:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80004cb6:	a5 68       	lsl	r8,0x4
80004cb8:	e0 38 fd 00 	sub	r8,130304
80004cbc:	30 09       	mov	r9,0
80004cbe:	91 29       	st.w	r8[0x8],r9
	// Kill banks
	udd_disable_endpoint_interrupt(index);
80004cc0:	fe 68 00 00 	mov	r8,-131072
80004cc4:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80004cc8:	e0 6a 10 00 	mov	r10,4096
80004ccc:	f4 09 09 49 	lsl	r9,r10,r9
80004cd0:	91 59       	st.w	r8[0x14],r9
	while (udd_nb_busy_bank(index)) {
80004cd2:	c1 28       	rjmp	80004cf6 <udd_ep_abort+0x72>
		udd_kill_last_in_bank(index);
80004cd4:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80004cd8:	a3 68       	lsl	r8,0x2
80004cda:	e0 38 fe 10 	sub	r8,130576
80004cde:	e0 69 20 00 	mov	r9,8192
80004ce2:	91 09       	st.w	r8[0x0],r9
		while(Is_udd_killing_last_in_bank(index));
80004ce4:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80004ce8:	a3 68       	lsl	r8,0x2
80004cea:	e0 38 fe 40 	sub	r8,130624
80004cee:	70 08       	ld.w	r8,r8[0x0]
80004cf0:	e2 18 20 00 	andl	r8,0x2000,COH
80004cf4:	cf 81       	brne	80004ce4 <udd_ep_abort+0x60>
	// Stop DMA transfer
	udd_disable_endpoint_dma_interrupt(index);
	udd_endpoint_dma_set_control(index, 0);
	// Kill banks
	udd_disable_endpoint_interrupt(index);
	while (udd_nb_busy_bank(index)) {
80004cf6:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80004cfa:	a3 68       	lsl	r8,0x2
80004cfc:	e0 38 fe d0 	sub	r8,130768
80004d00:	70 08       	ld.w	r8,r8[0x0]
80004d02:	e2 18 30 00 	andl	r8,0x3000,COH
80004d06:	ad 88       	lsr	r8,0xc
80004d08:	ce 61       	brne	80004cd4 <udd_ep_abort+0x50>
		udd_kill_last_in_bank(index);
		while(Is_udd_killing_last_in_bank(index));
	}
	udd_ep_abort_job(ep);
80004d0a:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80004d0e:	10 9c       	mov	r12,r8
80004d10:	f0 1f 00 03 	mcall	80004d1c <udd_ep_abort+0x98>
}
80004d14:	2f ed       	sub	sp,-8
80004d16:	e3 cd 80 80 	ldm	sp++,r7,pc
80004d1a:	00 00       	add	r0,r0
80004d1c:	80 00       	ld.sh	r0,r0[0x0]
80004d1e:	56 30       	stdsp	sp[0x18c],r0

80004d20 <udd_reset_ep_ctrl>:

//--------------------------------------------------------
//--- INTERNAL ROUTINES TO MANAGED THE CONTROL ENDPOINT

static void udd_reset_ep_ctrl(void)
{
80004d20:	eb cd 40 80 	pushm	r7,lr
80004d24:	1a 97       	mov	r7,sp
80004d26:	20 7d       	sub	sp,28
	irqflags_t flags;

	// Reset USB address to 0
	udd_configure_address(0);
80004d28:	fe 68 00 00 	mov	r8,-131072
80004d2c:	fe 69 00 00 	mov	r9,-131072
80004d30:	72 09       	ld.w	r9,r9[0x0]
80004d32:	e0 19 ff 80 	andl	r9,0xff80
80004d36:	91 09       	st.w	r8[0x0],r9
	udd_enable_address();
80004d38:	fe 68 00 00 	mov	r8,-131072
80004d3c:	fe 69 00 00 	mov	r9,-131072
80004d40:	72 09       	ld.w	r9,r9[0x0]
80004d42:	a7 b9       	sbr	r9,0x7
80004d44:	91 09       	st.w	r8[0x0],r9

	// Alloc and configure control endpoint
	udd_configure_endpoint(0,
80004d46:	fe 68 01 00 	mov	r8,-130816
80004d4a:	fe 69 01 00 	mov	r9,-130816
80004d4e:	72 09       	ld.w	r9,r9[0x0]
80004d50:	12 9a       	mov	r10,r9
80004d52:	e0 1a e6 83 	andl	r10,0xe683
80004d56:	34 09       	mov	r9,64
80004d58:	ef 49 ff f8 	st.w	r7[-8],r9
80004d5c:	30 89       	mov	r9,8
80004d5e:	ef 49 ff fc 	st.w	r7[-4],r9
80004d62:	ee f9 ff f8 	ld.w	r9,r7[-8]
80004d66:	ee fb ff fc 	ld.w	r11,r7[-4]
80004d6a:	f2 0b 0c 49 	max	r9,r9,r11
80004d6e:	ef 49 ff f4 	st.w	r7[-12],r9
80004d72:	ee f9 ff f4 	ld.w	r9,r7[-12]
80004d76:	ef 49 ff ec 	st.w	r7[-20],r9
80004d7a:	e0 69 04 00 	mov	r9,1024
80004d7e:	ef 49 ff f0 	st.w	r7[-16],r9
80004d82:	ee f9 ff ec 	ld.w	r9,r7[-20]
80004d86:	ee fb ff f0 	ld.w	r11,r7[-16]
80004d8a:	f2 0b 0d 49 	min	r9,r9,r11
80004d8e:	ef 49 ff e8 	st.w	r7[-24],r9
80004d92:	ee f9 ff e8 	ld.w	r9,r7[-24]
80004d96:	a1 79       	lsl	r9,0x1
80004d98:	20 19       	sub	r9,1
80004d9a:	f2 09 12 00 	clz	r9,r9
80004d9e:	f2 09 11 1c 	rsub	r9,r9,28
80004da2:	a5 69       	lsl	r9,0x4
80004da4:	e2 19 19 7c 	andl	r9,0x197c,COH
80004da8:	f5 e9 10 09 	or	r9,r10,r9
80004dac:	91 09       	st.w	r8[0x0],r9
			USB_EP_TYPE_CONTROL,
			0,
			USB_DEVICE_EP_CTRL_SIZE, AVR32_USBB_UECFG0_EPBK_SINGLE);

	udd_allocate_memory(0);
80004dae:	fe 68 01 00 	mov	r8,-130816
80004db2:	fe 69 01 00 	mov	r9,-130816
80004db6:	72 09       	ld.w	r9,r9[0x0]
80004db8:	a1 b9       	sbr	r9,0x1
80004dba:	91 09       	st.w	r8[0x0],r9
	udd_enable_endpoint(0);
80004dbc:	fe 68 00 00 	mov	r8,-131072
80004dc0:	fe 69 00 00 	mov	r9,-131072
80004dc4:	72 79       	ld.w	r9,r9[0x1c]
80004dc6:	a1 a9       	sbr	r9,0x0
80004dc8:	91 79       	st.w	r8[0x1c],r9
	flags = cpu_irq_save();
80004dca:	f0 1f 00 0d 	mcall	80004dfc <udd_reset_ep_ctrl+0xdc>
80004dce:	18 98       	mov	r8,r12
80004dd0:	ef 48 ff e4 	st.w	r7[-28],r8
	udd_enable_setup_received_interrupt(0);
80004dd4:	fe 68 01 f0 	mov	r8,-130576
80004dd8:	30 49       	mov	r9,4
80004dda:	91 09       	st.w	r8[0x0],r9
	udd_enable_out_received_interrupt(0);
80004ddc:	fe 68 01 f0 	mov	r8,-130576
80004de0:	30 29       	mov	r9,2
80004de2:	91 09       	st.w	r8[0x0],r9
	udd_enable_endpoint_interrupt(0);
80004de4:	fe 68 00 00 	mov	r8,-131072
80004de8:	e0 69 10 00 	mov	r9,4096
80004dec:	91 69       	st.w	r8[0x18],r9
	cpu_irq_restore(flags);
80004dee:	ee fc ff e4 	ld.w	r12,r7[-28]
80004df2:	f0 1f 00 04 	mcall	80004e00 <udd_reset_ep_ctrl+0xe0>
}
80004df6:	2f 9d       	sub	sp,-28
80004df8:	e3 cd 80 80 	ldm	sp++,r7,pc
80004dfc:	80 00       	ld.sh	r0,r0[0x0]
80004dfe:	3e ec       	mov	r12,-18
80004e00:	80 00       	ld.sh	r0,r0[0x0]
80004e02:	3f 2c       	mov	r12,-14

80004e04 <udd_ctrl_init>:

static void udd_ctrl_init(void)
{
80004e04:	eb cd 40 80 	pushm	r7,lr
80004e08:	1a 97       	mov	r7,sp
80004e0a:	20 1d       	sub	sp,4
	irqflags_t flags;
	flags = cpu_irq_save();
80004e0c:	f0 1f 00 10 	mcall	80004e4c <udd_ctrl_init+0x48>
80004e10:	18 98       	mov	r8,r12
80004e12:	ef 48 ff fc 	st.w	r7[-4],r8
	// In case of abort of IN Data Phase:
	// No need to abort IN transfer (rise TXINI),
	// because it is automatically done by hardware when a Setup packet is received.
	// But the interrupt must be disabled to don't generate interrupt TXINI
	// after SETUP reception.
	udd_disable_in_send_interrupt(0);
80004e16:	fe 68 02 20 	mov	r8,-130528
80004e1a:	30 19       	mov	r9,1
80004e1c:	91 09       	st.w	r8[0x0],r9
	cpu_irq_restore(flags);
80004e1e:	ee fc ff fc 	ld.w	r12,r7[-4]
80004e22:	f0 1f 00 0c 	mcall	80004e50 <udd_ctrl_init+0x4c>

	// In case of OUT ZLP event is no processed before Setup event occurs
	udd_ack_out_received(0);
80004e26:	fe 68 01 60 	mov	r8,-130720
80004e2a:	30 29       	mov	r9,2
80004e2c:	91 09       	st.w	r8[0x0],r9

	udd_g_ctrlreq.callback = NULL;
80004e2e:	48 a8       	lddpc	r8,80004e54 <udd_ctrl_init+0x50>
80004e30:	30 09       	mov	r9,0
80004e32:	91 49       	st.w	r8[0x10],r9
	udd_g_ctrlreq.over_under_run = NULL;
80004e34:	48 88       	lddpc	r8,80004e54 <udd_ctrl_init+0x50>
80004e36:	30 09       	mov	r9,0
80004e38:	91 59       	st.w	r8[0x14],r9
	udd_g_ctrlreq.payload_size = 0;
80004e3a:	48 79       	lddpc	r9,80004e54 <udd_ctrl_init+0x50>
80004e3c:	30 08       	mov	r8,0
80004e3e:	b2 68       	st.h	r9[0xc],r8
	udd_ep_control_state = UDD_EPCTRL_SETUP;
80004e40:	48 68       	lddpc	r8,80004e58 <udd_ctrl_init+0x54>
80004e42:	30 09       	mov	r9,0
80004e44:	91 09       	st.w	r8[0x0],r9
}
80004e46:	2f fd       	sub	sp,-4
80004e48:	e3 cd 80 80 	ldm	sp++,r7,pc
80004e4c:	80 00       	ld.sh	r0,r0[0x0]
80004e4e:	3e ec       	mov	r12,-18
80004e50:	80 00       	ld.sh	r0,r0[0x0]
80004e52:	3f 2c       	mov	r12,-14
80004e54:	00 00       	add	r0,r0
80004e56:	0b 24       	ld.uh	r4,r5++
80004e58:	00 00       	add	r0,r0
80004e5a:	06 28       	rsub	r8,r3

80004e5c <udd_ctrl_setup_received>:


static void udd_ctrl_setup_received(void)
{
80004e5c:	eb cd 40 80 	pushm	r7,lr
80004e60:	1a 97       	mov	r7,sp
80004e62:	20 3d       	sub	sp,12
	irqflags_t flags;
	uint8_t i;

	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
80004e64:	4c b8       	lddpc	r8,80004f90 <udd_ctrl_setup_received+0x134>
80004e66:	70 08       	ld.w	r8,r8[0x0]
80004e68:	58 08       	cp.w	r8,0
80004e6a:	c0 50       	breq	80004e74 <udd_ctrl_setup_received+0x18>
		// May be a hidden DATA or ZLP phase
		// or protocol abort
		udd_ctrl_endofrequest();
80004e6c:	f0 1f 00 4a 	mcall	80004f94 <udd_ctrl_setup_received+0x138>

		// Reinitializes control endpoint management
		udd_ctrl_init();
80004e70:	f0 1f 00 4a 	mcall	80004f98 <udd_ctrl_setup_received+0x13c>
	}
	// Fill setup request structure
	if (8 != udd_byte_count(0)) {
80004e74:	fe 68 01 30 	mov	r8,-130768
80004e78:	70 08       	ld.w	r8,r8[0x0]
80004e7a:	e6 18 7f f0 	andh	r8,0x7ff0,COH
80004e7e:	b5 88       	lsr	r8,0x14
80004e80:	58 88       	cp.w	r8,8
80004e82:	c0 80       	breq	80004e92 <udd_ctrl_setup_received+0x36>
		udd_ctrl_stall_data();
80004e84:	f0 1f 00 46 	mcall	80004f9c <udd_ctrl_setup_received+0x140>
		udd_ack_setup_received(0);
80004e88:	fe 68 01 60 	mov	r8,-130720
80004e8c:	30 49       	mov	r9,4
80004e8e:	91 09       	st.w	r8[0x0],r9
		return; // Error data number doesn't correspond to SETUP packet
80004e90:	c7 d8       	rjmp	80004f8a <udd_ctrl_setup_received+0x12e>
	}
	uint8_t *ptr = (uint8_t *) & udd_get_endpoint_fifo_access(0,8);
80004e92:	fc 18 e0 00 	movh	r8,0xe000
80004e96:	ef 48 ff fc 	st.w	r7[-4],r8
	for (i = 0; i < 8; i++) {
80004e9a:	30 08       	mov	r8,0
80004e9c:	ef 68 ff fb 	st.b	r7[-5],r8
80004ea0:	c1 38       	rjmp	80004ec6 <udd_ctrl_setup_received+0x6a>
		((uint8_t*) &udd_g_ctrlreq.req)[i] = *ptr++;
80004ea2:	ef 39 ff fb 	ld.ub	r9,r7[-5]
80004ea6:	4b f8       	lddpc	r8,80004fa0 <udd_ctrl_setup_received+0x144>
80004ea8:	10 09       	add	r9,r8
80004eaa:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004eae:	11 88       	ld.ub	r8,r8[0x0]
80004eb0:	b2 88       	st.b	r9[0x0],r8
80004eb2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004eb6:	2f f8       	sub	r8,-1
80004eb8:	ef 48 ff fc 	st.w	r7[-4],r8
		udd_ctrl_stall_data();
		udd_ack_setup_received(0);
		return; // Error data number doesn't correspond to SETUP packet
	}
	uint8_t *ptr = (uint8_t *) & udd_get_endpoint_fifo_access(0,8);
	for (i = 0; i < 8; i++) {
80004ebc:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80004ec0:	2f f8       	sub	r8,-1
80004ec2:	ef 68 ff fb 	st.b	r7[-5],r8
80004ec6:	ef 39 ff fb 	ld.ub	r9,r7[-5]
80004eca:	30 78       	mov	r8,7
80004ecc:	f0 09 18 00 	cp.b	r9,r8
80004ed0:	fe 98 ff e9 	brls	80004ea2 <udd_ctrl_setup_received+0x46>
		((uint8_t*) &udd_g_ctrlreq.req)[i] = *ptr++;
	}
	// Manage LSB/MSB to fit with CPU usage
	udd_g_ctrlreq.req.wValue = le16_to_cpu(udd_g_ctrlreq.req.wValue);
80004ed4:	4b 38       	lddpc	r8,80004fa0 <udd_ctrl_setup_received+0x144>
80004ed6:	90 18       	ld.sh	r8,r8[0x2]
80004ed8:	5c 88       	casts.h	r8
80004eda:	5c c8       	swap.bh	r8
80004edc:	5c 88       	casts.h	r8
80004ede:	4b 19       	lddpc	r9,80004fa0 <udd_ctrl_setup_received+0x144>
80004ee0:	b2 18       	st.h	r9[0x2],r8
	udd_g_ctrlreq.req.wIndex = le16_to_cpu(udd_g_ctrlreq.req.wIndex);
80004ee2:	4b 08       	lddpc	r8,80004fa0 <udd_ctrl_setup_received+0x144>
80004ee4:	90 28       	ld.sh	r8,r8[0x4]
80004ee6:	5c 88       	casts.h	r8
80004ee8:	5c c8       	swap.bh	r8
80004eea:	5c 88       	casts.h	r8
80004eec:	4a d9       	lddpc	r9,80004fa0 <udd_ctrl_setup_received+0x144>
80004eee:	b2 28       	st.h	r9[0x4],r8
	udd_g_ctrlreq.req.wLength = le16_to_cpu(udd_g_ctrlreq.req.wLength);
80004ef0:	4a c8       	lddpc	r8,80004fa0 <udd_ctrl_setup_received+0x144>
80004ef2:	90 38       	ld.sh	r8,r8[0x6]
80004ef4:	5c 88       	casts.h	r8
80004ef6:	5c c8       	swap.bh	r8
80004ef8:	5c 88       	casts.h	r8
80004efa:	4a a9       	lddpc	r9,80004fa0 <udd_ctrl_setup_received+0x144>
80004efc:	b2 38       	st.h	r9[0x6],r8

	// Decode setup request
	if (udc_process_setup() == false) {
80004efe:	f0 1f 00 2a 	mcall	80004fa4 <udd_ctrl_setup_received+0x148>
80004f02:	18 98       	mov	r8,r12
80004f04:	ec 18 00 01 	eorl	r8,0x1
80004f08:	5c 58       	castu.b	r8
80004f0a:	c0 80       	breq	80004f1a <udd_ctrl_setup_received+0xbe>
		// Setup request unknown then stall it
		udd_ctrl_stall_data();
80004f0c:	f0 1f 00 24 	mcall	80004f9c <udd_ctrl_setup_received+0x140>
		udd_ack_setup_received(0);
80004f10:	fe 68 01 60 	mov	r8,-130720
80004f14:	30 49       	mov	r9,4
80004f16:	91 09       	st.w	r8[0x0],r9
		return;
80004f18:	c3 98       	rjmp	80004f8a <udd_ctrl_setup_received+0x12e>
	}
	udd_ack_setup_received(0);
80004f1a:	fe 68 01 60 	mov	r8,-130720
80004f1e:	30 49       	mov	r9,4
80004f20:	91 09       	st.w	r8[0x0],r9

	if (Udd_setup_is_in()) {
80004f22:	4a 08       	lddpc	r8,80004fa0 <udd_ctrl_setup_received+0x144>
80004f24:	11 88       	ld.ub	r8,r8[0x0]
80004f26:	10 99       	mov	r9,r8
80004f28:	30 08       	mov	r8,0
80004f2a:	f0 09 18 00 	cp.b	r9,r8
80004f2e:	c0 d4       	brge	80004f48 <udd_ctrl_setup_received+0xec>
		// IN data phase requested
		udd_ctrl_prev_payload_nb_trans = 0;
80004f30:	49 e9       	lddpc	r9,80004fa8 <udd_ctrl_setup_received+0x14c>
80004f32:	30 08       	mov	r8,0
80004f34:	b2 08       	st.h	r9[0x0],r8
		udd_ctrl_payload_nb_trans = 0;
80004f36:	49 e9       	lddpc	r9,80004fac <udd_ctrl_setup_received+0x150>
80004f38:	30 08       	mov	r8,0
80004f3a:	b2 08       	st.h	r9[0x0],r8
		udd_ep_control_state = UDD_EPCTRL_DATA_IN;
80004f3c:	49 58       	lddpc	r8,80004f90 <udd_ctrl_setup_received+0x134>
80004f3e:	30 29       	mov	r9,2
80004f40:	91 09       	st.w	r8[0x0],r9
		udd_ctrl_in_sent(); // Send first data transfer
80004f42:	f0 1f 00 1c 	mcall	80004fb0 <udd_ctrl_setup_received+0x154>
80004f46:	c2 28       	rjmp	80004f8a <udd_ctrl_setup_received+0x12e>
	} else {
		if (0 == udd_g_ctrlreq.req.wLength) {
80004f48:	49 68       	lddpc	r8,80004fa0 <udd_ctrl_setup_received+0x144>
80004f4a:	90 38       	ld.sh	r8,r8[0x6]
80004f4c:	58 08       	cp.w	r8,0
80004f4e:	c0 41       	brne	80004f56 <udd_ctrl_setup_received+0xfa>
			// No data phase requested
			// Send IN ZLP to ACK setup request
			udd_ctrl_send_zlp_in();
80004f50:	f0 1f 00 19 	mcall	80004fb4 <udd_ctrl_setup_received+0x158>
			return;
80004f54:	c1 b8       	rjmp	80004f8a <udd_ctrl_setup_received+0x12e>
		}
		// OUT data phase requested
		udd_ctrl_prev_payload_nb_trans = 0;
80004f56:	49 59       	lddpc	r9,80004fa8 <udd_ctrl_setup_received+0x14c>
80004f58:	30 08       	mov	r8,0
80004f5a:	b2 08       	st.h	r9[0x0],r8
		udd_ctrl_payload_nb_trans = 0;
80004f5c:	49 49       	lddpc	r9,80004fac <udd_ctrl_setup_received+0x150>
80004f5e:	30 08       	mov	r8,0
80004f60:	b2 08       	st.h	r9[0x0],r8
		udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
80004f62:	48 c8       	lddpc	r8,80004f90 <udd_ctrl_setup_received+0x134>
80004f64:	30 19       	mov	r9,1
80004f66:	91 09       	st.w	r8[0x0],r9
		// To detect a protocol error, enable nak interrupt on data IN phase
		udd_ack_nak_in(0);
80004f68:	fe 68 01 60 	mov	r8,-130720
80004f6c:	31 09       	mov	r9,16
80004f6e:	91 09       	st.w	r8[0x0],r9
		flags = cpu_irq_save();
80004f70:	f0 1f 00 12 	mcall	80004fb8 <udd_ctrl_setup_received+0x15c>
80004f74:	18 98       	mov	r8,r12
80004f76:	ef 48 ff f4 	st.w	r7[-12],r8
		udd_enable_nak_in_interrupt(0);
80004f7a:	fe 68 01 f0 	mov	r8,-130576
80004f7e:	31 09       	mov	r9,16
80004f80:	91 09       	st.w	r8[0x0],r9
		cpu_irq_restore(flags);
80004f82:	ee fc ff f4 	ld.w	r12,r7[-12]
80004f86:	f0 1f 00 0e 	mcall	80004fbc <udd_ctrl_setup_received+0x160>
	}
}
80004f8a:	2f dd       	sub	sp,-12
80004f8c:	e3 cd 80 80 	ldm	sp++,r7,pc
80004f90:	00 00       	add	r0,r0
80004f92:	06 28       	rsub	r8,r3
80004f94:	80 00       	ld.sh	r0,r0[0x0]
80004f96:	54 84       	stdsp	sp[0x120],r4
80004f98:	80 00       	ld.sh	r0,r0[0x0]
80004f9a:	4e 04       	lddpc	r4,80005118 <udd_ctrl_in_sent+0x158>
80004f9c:	80 00       	ld.sh	r0,r0[0x0]
80004f9e:	53 cc       	stdsp	sp[0xf0],r12
80004fa0:	00 00       	add	r0,r0
80004fa2:	0b 24       	ld.uh	r4,r5++
80004fa4:	80 00       	ld.sh	r0,r0[0x0]
80004fa6:	76 0c       	ld.w	r12,r11[0x0]
80004fa8:	00 00       	add	r0,r0
80004faa:	06 2c       	rsub	r12,r3
80004fac:	00 00       	add	r0,r0
80004fae:	06 2e       	rsub	lr,r3
80004fb0:	80 00       	ld.sh	r0,r0[0x0]
80004fb2:	4f c0       	lddpc	r0,800051a0 <udd_ctrl_out_received+0x40>
80004fb4:	80 00       	ld.sh	r0,r0[0x0]
80004fb6:	53 ec       	stdsp	sp[0xf8],r12
80004fb8:	80 00       	ld.sh	r0,r0[0x0]
80004fba:	3e ec       	mov	r12,-18
80004fbc:	80 00       	ld.sh	r0,r0[0x0]
80004fbe:	3f 2c       	mov	r12,-14

80004fc0 <udd_ctrl_in_sent>:


static void udd_ctrl_in_sent(void)
{
80004fc0:	eb cd 40 80 	pushm	r7,lr
80004fc4:	1a 97       	mov	r7,sp
80004fc6:	20 4d       	sub	sp,16
	uint16_t nb_remain;
	uint8_t i;
	uint8_t *ptr_dest, *ptr_src;
	irqflags_t flags;

	flags = cpu_irq_save();
80004fc8:	f0 1f 00 5c 	mcall	80005138 <udd_ctrl_in_sent+0x178>
80004fcc:	18 98       	mov	r8,r12
80004fce:	ef 48 ff fc 	st.w	r7[-4],r8
	udd_disable_in_send_interrupt(0);
80004fd2:	fe 68 02 20 	mov	r8,-130528
80004fd6:	30 19       	mov	r9,1
80004fd8:	91 09       	st.w	r8[0x0],r9
	cpu_irq_restore(flags);
80004fda:	ee fc ff fc 	ld.w	r12,r7[-4]
80004fde:	f0 1f 00 58 	mcall	8000513c <udd_ctrl_in_sent+0x17c>

	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
80004fe2:	4d 88       	lddpc	r8,80005140 <udd_ctrl_in_sent+0x180>
80004fe4:	70 08       	ld.w	r8,r8[0x0]
80004fe6:	58 38       	cp.w	r8,3
80004fe8:	c0 61       	brne	80004ff4 <udd_ctrl_in_sent+0x34>
		// ZLP on IN is sent, then valid end of setup request
		udd_ctrl_endofrequest();
80004fea:	f0 1f 00 57 	mcall	80005144 <udd_ctrl_in_sent+0x184>
		// Reinitializes control endpoint management
		udd_ctrl_init();
80004fee:	f0 1f 00 57 	mcall	80005148 <udd_ctrl_in_sent+0x188>
		return;
80004ff2:	c9 f8       	rjmp	80005130 <udd_ctrl_in_sent+0x170>
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_IN);

	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
80004ff4:	4d 68       	lddpc	r8,8000514c <udd_ctrl_in_sent+0x18c>
80004ff6:	90 69       	ld.sh	r9,r8[0xc]
80004ff8:	4d 68       	lddpc	r8,80005150 <udd_ctrl_in_sent+0x190>
80004ffa:	90 08       	ld.sh	r8,r8[0x0]
80004ffc:	10 19       	sub	r9,r8
80004ffe:	ef 59 ff f0 	st.h	r7[-16],r9
	if (0 == nb_remain) {
80005002:	ef 09 ff f0 	ld.sh	r9,r7[-16]
80005006:	30 08       	mov	r8,0
80005008:	f0 09 19 00 	cp.h	r9,r8
8000500c:	c2 b1       	brne	80005062 <udd_ctrl_in_sent+0xa2>
		// All content of current buffer payload are sent
		// Update number of total data sending by previous payload buffer
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
8000500e:	4d 28       	lddpc	r8,80005154 <udd_ctrl_in_sent+0x194>
80005010:	90 09       	ld.sh	r9,r8[0x0]
80005012:	4d 08       	lddpc	r8,80005150 <udd_ctrl_in_sent+0x190>
80005014:	90 08       	ld.sh	r8,r8[0x0]
80005016:	f2 08 00 08 	add	r8,r9,r8
8000501a:	5c 88       	casts.h	r8
8000501c:	4c e9       	lddpc	r9,80005154 <udd_ctrl_in_sent+0x194>
8000501e:	b2 08       	st.h	r9[0x0],r8
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_nb_trans)
80005020:	4c b8       	lddpc	r8,8000514c <udd_ctrl_in_sent+0x18c>
80005022:	90 39       	ld.sh	r9,r8[0x6]
80005024:	4c c8       	lddpc	r8,80005154 <udd_ctrl_in_sent+0x194>
80005026:	90 08       	ld.sh	r8,r8[0x0]
80005028:	f0 09 19 00 	cp.h	r9,r8
8000502c:	c0 50       	breq	80005036 <udd_ctrl_in_sent+0x76>
8000502e:	4c b8       	lddpc	r8,80005158 <udd_ctrl_in_sent+0x198>
80005030:	11 88       	ld.ub	r8,r8[0x0]
80005032:	58 08       	cp.w	r8,0
80005034:	c0 40       	breq	8000503c <udd_ctrl_in_sent+0x7c>
					|| b_shortpacket) {
			// All data requested are transfered or a short packet has been sent
			// then it is the end of data phase.
			// Generate an OUT ZLP for handshake phase.
			udd_ctrl_send_zlp_out();
80005036:	f0 1f 00 4a 	mcall	8000515c <udd_ctrl_in_sent+0x19c>
			return;
8000503a:	c7 b8       	rjmp	80005130 <udd_ctrl_in_sent+0x170>
		}
		// Need of new buffer because the data phase is not complete
		if ((!udd_g_ctrlreq.over_under_run)
8000503c:	4c 48       	lddpc	r8,8000514c <udd_ctrl_in_sent+0x18c>
8000503e:	70 58       	ld.w	r8,r8[0x14]
80005040:	58 08       	cp.w	r8,0
80005042:	c1 00       	breq	80005062 <udd_ctrl_in_sent+0xa2>
80005044:	4c 28       	lddpc	r8,8000514c <udd_ctrl_in_sent+0x18c>
80005046:	70 58       	ld.w	r8,r8[0x14]
80005048:	5d 18       	icall	r8
8000504a:	18 98       	mov	r8,r12
8000504c:	ec 18 00 01 	eorl	r8,0x1
80005050:	5c 58       	castu.b	r8
80005052:	c0 81       	brne	80005062 <udd_ctrl_in_sent+0xa2>
				|| (!udd_g_ctrlreq.over_under_run())) {
			// Underrun then send zlp on IN
			// Here nb_remain=0 and allows to send a IN ZLP
		} else {
			// A new payload buffer is given
			udd_ctrl_payload_nb_trans = 0;
80005054:	4b f9       	lddpc	r9,80005150 <udd_ctrl_in_sent+0x190>
80005056:	30 08       	mov	r8,0
80005058:	b2 08       	st.h	r9[0x0],r8
			nb_remain = udd_g_ctrlreq.payload_size;
8000505a:	4b d8       	lddpc	r8,8000514c <udd_ctrl_in_sent+0x18c>
8000505c:	90 68       	ld.sh	r8,r8[0xc]
8000505e:	ef 58 ff f0 	st.h	r7[-16],r8
		}
	}
	// Continue transfer and send next data
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
80005062:	ef 09 ff f0 	ld.sh	r9,r7[-16]
80005066:	33 f8       	mov	r8,63
80005068:	f0 09 19 00 	cp.h	r9,r8
8000506c:	e0 88 00 09 	brls	8000507e <udd_ctrl_in_sent+0xbe>
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
80005070:	34 08       	mov	r8,64
80005072:	ef 58 ff f0 	st.h	r7[-16],r8
		b_shortpacket = false;
80005076:	4b 99       	lddpc	r9,80005158 <udd_ctrl_in_sent+0x198>
80005078:	30 08       	mov	r8,0
8000507a:	b2 88       	st.b	r9[0x0],r8
8000507c:	c0 48       	rjmp	80005084 <udd_ctrl_in_sent+0xc4>
	} else {
		b_shortpacket = true;
8000507e:	4b 79       	lddpc	r9,80005158 <udd_ctrl_in_sent+0x198>
80005080:	30 18       	mov	r8,1
80005082:	b2 88       	st.b	r9[0x0],r8
	}
	// Fill buffer of endpoint control
	ptr_dest = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
80005084:	fc 18 e0 00 	movh	r8,0xe000
80005088:	ef 48 ff f4 	st.w	r7[-12],r8
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
8000508c:	4b 08       	lddpc	r8,8000514c <udd_ctrl_in_sent+0x18c>
8000508e:	70 29       	ld.w	r9,r8[0x8]
80005090:	4b 08       	lddpc	r8,80005150 <udd_ctrl_in_sent+0x190>
80005092:	90 08       	ld.sh	r8,r8[0x0]
80005094:	5c 78       	castu.h	r8
80005096:	f2 08 00 08 	add	r8,r9,r8
8000509a:	ef 48 ff f8 	st.w	r7[-8],r8
	// The IN data don't must be written in endpoint 0 DPRAM during
	// a next setup reception in same endpoint 0 DPRAM.
	// Thereby, an OUT ZLP reception must check before IN data write
	// and if no OUT ZLP is received the data must be written quickly (800us)
	// before an eventually ZLP OUT and SETUP reception
	flags = cpu_irq_save();
8000509e:	f0 1f 00 27 	mcall	80005138 <udd_ctrl_in_sent+0x178>
800050a2:	18 98       	mov	r8,r12
800050a4:	ef 48 ff fc 	st.w	r7[-4],r8
	if (Is_udd_out_received(0)) {
800050a8:	fe 68 01 30 	mov	r8,-130768
800050ac:	70 08       	ld.w	r8,r8[0x0]
800050ae:	e2 18 00 02 	andl	r8,0x2,COH
800050b2:	c0 90       	breq	800050c4 <udd_ctrl_in_sent+0x104>
		// IN DATA phase aborted by OUT ZLP
		cpu_irq_restore(flags);
800050b4:	ee fc ff fc 	ld.w	r12,r7[-4]
800050b8:	f0 1f 00 21 	mcall	8000513c <udd_ctrl_in_sent+0x17c>
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
800050bc:	4a 18       	lddpc	r8,80005140 <udd_ctrl_in_sent+0x180>
800050be:	30 49       	mov	r9,4
800050c0:	91 09       	st.w	r8[0x0],r9
		return; // Exit of IN DATA phase
800050c2:	c3 78       	rjmp	80005130 <udd_ctrl_in_sent+0x170>
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
800050c4:	30 08       	mov	r8,0
800050c6:	ef 68 ff f3 	st.b	r7[-13],r8
800050ca:	c1 68       	rjmp	800050f6 <udd_ctrl_in_sent+0x136>
		*ptr_dest++ = *ptr_src++;
800050cc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800050d0:	11 88       	ld.ub	r8,r8[0x0]
800050d2:	ee f9 ff f4 	ld.w	r9,r7[-12]
800050d6:	b2 88       	st.b	r9[0x0],r8
800050d8:	ee f8 ff f4 	ld.w	r8,r7[-12]
800050dc:	2f f8       	sub	r8,-1
800050de:	ef 48 ff f4 	st.w	r7[-12],r8
800050e2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800050e6:	2f f8       	sub	r8,-1
800050e8:	ef 48 ff f8 	st.w	r7[-8],r8
		cpu_irq_restore(flags);
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
		return; // Exit of IN DATA phase
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
800050ec:	ef 38 ff f3 	ld.ub	r8,r7[-13]
800050f0:	2f f8       	sub	r8,-1
800050f2:	ef 68 ff f3 	st.b	r7[-13],r8
800050f6:	ef 38 ff f3 	ld.ub	r8,r7[-13]
800050fa:	ef 09 ff f0 	ld.sh	r9,r7[-16]
800050fe:	f0 09 19 00 	cp.h	r9,r8
80005102:	fe 9b ff e5 	brhi	800050cc <udd_ctrl_in_sent+0x10c>
		*ptr_dest++ = *ptr_src++;
	}
	udd_ctrl_payload_nb_trans += nb_remain;
80005106:	49 38       	lddpc	r8,80005150 <udd_ctrl_in_sent+0x190>
80005108:	90 08       	ld.sh	r8,r8[0x0]
8000510a:	ef 09 ff f0 	ld.sh	r9,r7[-16]
8000510e:	f2 08 00 08 	add	r8,r9,r8
80005112:	5c 88       	casts.h	r8
80005114:	48 f9       	lddpc	r9,80005150 <udd_ctrl_in_sent+0x190>
80005116:	b2 08       	st.h	r9[0x0],r8

	// Validate and send the data available in the control endpoint buffer
	udd_ack_in_send(0);
80005118:	fe 68 01 60 	mov	r8,-130720
8000511c:	30 19       	mov	r9,1
8000511e:	91 09       	st.w	r8[0x0],r9
	udd_enable_in_send_interrupt(0);
80005120:	fe 68 01 f0 	mov	r8,-130576
80005124:	30 19       	mov	r9,1
80005126:	91 09       	st.w	r8[0x0],r9
	// In case of abort of DATA IN phase, no need to enable nak OUT interrupt
	// because OUT endpoint is already free and ZLP OUT accepted.
	cpu_irq_restore(flags);
80005128:	ee fc ff fc 	ld.w	r12,r7[-4]
8000512c:	f0 1f 00 04 	mcall	8000513c <udd_ctrl_in_sent+0x17c>
}
80005130:	2f cd       	sub	sp,-16
80005132:	e3 cd 80 80 	ldm	sp++,r7,pc
80005136:	00 00       	add	r0,r0
80005138:	80 00       	ld.sh	r0,r0[0x0]
8000513a:	3e ec       	mov	r12,-18
8000513c:	80 00       	ld.sh	r0,r0[0x0]
8000513e:	3f 2c       	mov	r12,-14
80005140:	00 00       	add	r0,r0
80005142:	06 28       	rsub	r8,r3
80005144:	80 00       	ld.sh	r0,r0[0x0]
80005146:	54 84       	stdsp	sp[0x120],r4
80005148:	80 00       	ld.sh	r0,r0[0x0]
8000514a:	4e 04       	lddpc	r4,800052c8 <udd_ctrl_out_received+0x168>
8000514c:	00 00       	add	r0,r0
8000514e:	0b 24       	ld.uh	r4,r5++
80005150:	00 00       	add	r0,r0
80005152:	06 2e       	rsub	lr,r3
80005154:	00 00       	add	r0,r0
80005156:	06 2c       	rsub	r12,r3
80005158:	00 00       	add	r0,r0
8000515a:	06 6c       	and	r12,r3
8000515c:	80 00       	ld.sh	r0,r0[0x0]
8000515e:	54 40       	stdsp	sp[0x110],r0

80005160 <udd_ctrl_out_received>:


static void udd_ctrl_out_received(void)
{
80005160:	eb cd 40 80 	pushm	r7,lr
80005164:	1a 97       	mov	r7,sp
80005166:	20 4d       	sub	sp,16
	irqflags_t flags;
	uint8_t i;
	uint16_t nb_data;

	if (UDD_EPCTRL_DATA_OUT != udd_ep_control_state) {
80005168:	4f 18       	lddpc	r8,8000532c <udd_ctrl_out_received+0x1cc>
8000516a:	70 08       	ld.w	r8,r8[0x0]
8000516c:	58 18       	cp.w	r8,1
8000516e:	c1 10       	breq	80005190 <udd_ctrl_out_received+0x30>
		if ((UDD_EPCTRL_DATA_IN == udd_ep_control_state)
80005170:	4e f8       	lddpc	r8,8000532c <udd_ctrl_out_received+0x1cc>
80005172:	70 08       	ld.w	r8,r8[0x0]
80005174:	58 28       	cp.w	r8,2
80005176:	c0 50       	breq	80005180 <udd_ctrl_out_received+0x20>
				|| (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP ==
80005178:	4e d8       	lddpc	r8,8000532c <udd_ctrl_out_received+0x1cc>
8000517a:	70 08       	ld.w	r8,r8[0x0]
	irqflags_t flags;
	uint8_t i;
	uint16_t nb_data;

	if (UDD_EPCTRL_DATA_OUT != udd_ep_control_state) {
		if ((UDD_EPCTRL_DATA_IN == udd_ep_control_state)
8000517c:	58 48       	cp.w	r8,4
8000517e:	c0 41       	brne	80005186 <udd_ctrl_out_received+0x26>
						udd_ep_control_state)) {
			// End of SETUP request:
			// - Data IN Phase aborted,
			// - or last Data IN Phase hidden by ZLP OUT sending quickly,
			// - or ZLP OUT received normally.
			udd_ctrl_endofrequest();
80005180:	f0 1f 00 6c 	mcall	80005330 <udd_ctrl_out_received+0x1d0>
	irqflags_t flags;
	uint8_t i;
	uint16_t nb_data;

	if (UDD_EPCTRL_DATA_OUT != udd_ep_control_state) {
		if ((UDD_EPCTRL_DATA_IN == udd_ep_control_state)
80005184:	c0 38       	rjmp	8000518a <udd_ctrl_out_received+0x2a>
			// - or last Data IN Phase hidden by ZLP OUT sending quickly,
			// - or ZLP OUT received normally.
			udd_ctrl_endofrequest();
		} else {
			// Protocol error during SETUP request
			udd_ctrl_stall_data();
80005186:	f0 1f 00 6c 	mcall	80005334 <udd_ctrl_out_received+0x1d4>
		}
		// Reinitializes control endpoint management
		udd_ctrl_init();
8000518a:	f0 1f 00 6c 	mcall	80005338 <udd_ctrl_out_received+0x1d8>
		return;
8000518e:	cc b8       	rjmp	80005324 <udd_ctrl_out_received+0x1c4>
	}
	// Read data received during OUT phase
	nb_data = udd_byte_count(0);
80005190:	fe 68 01 30 	mov	r8,-130768
80005194:	70 08       	ld.w	r8,r8[0x0]
80005196:	e6 18 7f f0 	andh	r8,0x7ff0,COH
8000519a:	b5 88       	lsr	r8,0x14
8000519c:	ef 58 ff f6 	st.h	r7[-10],r8
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
800051a0:	4e 78       	lddpc	r8,8000533c <udd_ctrl_out_received+0x1dc>
800051a2:	90 68       	ld.sh	r8,r8[0xc]
800051a4:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
800051a8:	4e 68       	lddpc	r8,80005340 <udd_ctrl_out_received+0x1e0>
800051aa:	90 08       	ld.sh	r8,r8[0x0]
800051ac:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
800051b0:	ef 18 ff f6 	ld.uh	r8,r7[-10]
800051b4:	f4 08 00 08 	add	r8,r10,r8
800051b8:	10 39       	cp.w	r9,r8
800051ba:	c0 84       	brge	800051ca <udd_ctrl_out_received+0x6a>
		// Payload buffer too small
		nb_data = udd_g_ctrlreq.payload_size -
800051bc:	4e 08       	lddpc	r8,8000533c <udd_ctrl_out_received+0x1dc>
800051be:	90 69       	ld.sh	r9,r8[0xc]
800051c0:	4e 08       	lddpc	r8,80005340 <udd_ctrl_out_received+0x1e0>
800051c2:	90 08       	ld.sh	r8,r8[0x0]
800051c4:	10 19       	sub	r9,r8
800051c6:	ef 59 ff f6 	st.h	r7[-10],r9
				udd_ctrl_payload_nb_trans;
	}
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
800051ca:	fc 18 e0 00 	movh	r8,0xe000
800051ce:	ef 48 ff f8 	st.w	r7[-8],r8
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
800051d2:	4d b8       	lddpc	r8,8000533c <udd_ctrl_out_received+0x1dc>
800051d4:	70 29       	ld.w	r9,r8[0x8]
800051d6:	4d b8       	lddpc	r8,80005340 <udd_ctrl_out_received+0x1e0>
800051d8:	90 08       	ld.sh	r8,r8[0x0]
800051da:	5c 78       	castu.h	r8
800051dc:	f2 08 00 08 	add	r8,r9,r8
800051e0:	ef 48 ff fc 	st.w	r7[-4],r8
	for (i = 0; i < nb_data; i++) {
800051e4:	30 08       	mov	r8,0
800051e6:	ef 68 ff f5 	st.b	r7[-11],r8
800051ea:	c1 68       	rjmp	80005216 <udd_ctrl_out_received+0xb6>
		*ptr_dest++ = *ptr_src++;
800051ec:	ee f8 ff f8 	ld.w	r8,r7[-8]
800051f0:	11 88       	ld.ub	r8,r8[0x0]
800051f2:	ee f9 ff fc 	ld.w	r9,r7[-4]
800051f6:	b2 88       	st.b	r9[0x0],r8
800051f8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800051fc:	2f f8       	sub	r8,-1
800051fe:	ef 48 ff fc 	st.w	r7[-4],r8
80005202:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005206:	2f f8       	sub	r8,-1
80005208:	ef 48 ff f8 	st.w	r7[-8],r8
		nb_data = udd_g_ctrlreq.payload_size -
				udd_ctrl_payload_nb_trans;
	}
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
	for (i = 0; i < nb_data; i++) {
8000520c:	ef 38 ff f5 	ld.ub	r8,r7[-11]
80005210:	2f f8       	sub	r8,-1
80005212:	ef 68 ff f5 	st.b	r7[-11],r8
80005216:	ef 38 ff f5 	ld.ub	r8,r7[-11]
8000521a:	ef 09 ff f6 	ld.sh	r9,r7[-10]
8000521e:	f0 09 19 00 	cp.h	r9,r8
80005222:	fe 9b ff e5 	brhi	800051ec <udd_ctrl_out_received+0x8c>
		*ptr_dest++ = *ptr_src++;
	}
	udd_ctrl_payload_nb_trans += nb_data;
80005226:	4c 78       	lddpc	r8,80005340 <udd_ctrl_out_received+0x1e0>
80005228:	90 08       	ld.sh	r8,r8[0x0]
8000522a:	ef 09 ff f6 	ld.sh	r9,r7[-10]
8000522e:	f2 08 00 08 	add	r8,r9,r8
80005232:	5c 88       	casts.h	r8
80005234:	4c 39       	lddpc	r9,80005340 <udd_ctrl_out_received+0x1e0>
80005236:	b2 08       	st.h	r9[0x0],r8

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
80005238:	ef 09 ff f6 	ld.sh	r9,r7[-10]
8000523c:	34 08       	mov	r8,64
8000523e:	f0 09 19 00 	cp.h	r9,r8
80005242:	c1 11       	brne	80005264 <udd_ctrl_out_received+0x104>
			|| (udd_g_ctrlreq.req.wLength <=
80005244:	4b e8       	lddpc	r8,8000533c <udd_ctrl_out_received+0x1dc>
80005246:	90 38       	ld.sh	r8,r8[0x6]
80005248:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
					(udd_ctrl_prev_payload_nb_trans +
8000524c:	4b e8       	lddpc	r8,80005344 <udd_ctrl_out_received+0x1e4>
8000524e:	90 08       	ld.sh	r8,r8[0x0]
80005250:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
80005254:	4b b8       	lddpc	r8,80005340 <udd_ctrl_out_received+0x1e0>
80005256:	90 08       	ld.sh	r8,r8[0x0]
80005258:	5c 78       	castu.h	r8
8000525a:	f4 08 00 08 	add	r8,r10,r8
	for (i = 0; i < nb_data; i++) {
		*ptr_dest++ = *ptr_src++;
	}
	udd_ctrl_payload_nb_trans += nb_data;

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
8000525e:	10 39       	cp.w	r9,r8
80005260:	e0 89 00 20 	brgt	800052a0 <udd_ctrl_out_received+0x140>
							udd_ctrl_payload_nb_trans)))
	{
		// End of reception because it is a short packet
		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
80005264:	4b 78       	lddpc	r8,80005340 <udd_ctrl_out_received+0x1e0>
80005266:	90 08       	ld.sh	r8,r8[0x0]
80005268:	4b 59       	lddpc	r9,8000533c <udd_ctrl_out_received+0x1dc>
8000526a:	b2 68       	st.h	r9[0xc],r8
		if (NULL != udd_g_ctrlreq.over_under_run) {
8000526c:	4b 48       	lddpc	r8,8000533c <udd_ctrl_out_received+0x1dc>
8000526e:	70 58       	ld.w	r8,r8[0x14]
80005270:	58 08       	cp.w	r8,0
80005272:	c1 00       	breq	80005292 <udd_ctrl_out_received+0x132>
			if (!udd_g_ctrlreq.over_under_run()) {
80005274:	4b 28       	lddpc	r8,8000533c <udd_ctrl_out_received+0x1dc>
80005276:	70 58       	ld.w	r8,r8[0x14]
80005278:	5d 18       	icall	r8
8000527a:	18 98       	mov	r8,r12
8000527c:	ec 18 00 01 	eorl	r8,0x1
80005280:	5c 58       	castu.b	r8
80005282:	c0 80       	breq	80005292 <udd_ctrl_out_received+0x132>
				// Stall ZLP
				udd_ctrl_stall_data();
80005284:	f0 1f 00 2c 	mcall	80005334 <udd_ctrl_out_received+0x1d4>
				// Ack reception of OUT to replace NAK by a STALL
				udd_ack_out_received(0);
80005288:	fe 68 01 60 	mov	r8,-130720
8000528c:	30 29       	mov	r9,2
8000528e:	91 09       	st.w	r8[0x0],r9
				return;
80005290:	c4 a8       	rjmp	80005324 <udd_ctrl_out_received+0x1c4>
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ack_out_received(0);
80005292:	fe 68 01 60 	mov	r8,-130720
80005296:	30 29       	mov	r9,2
80005298:	91 09       	st.w	r8[0x0],r9
		udd_ctrl_send_zlp_in();
8000529a:	f0 1f 00 2c 	mcall	80005348 <udd_ctrl_out_received+0x1e8>
		return;
8000529e:	c4 38       	rjmp	80005324 <udd_ctrl_out_received+0x1c4>
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
800052a0:	4a 78       	lddpc	r8,8000533c <udd_ctrl_out_received+0x1dc>
800052a2:	90 69       	ld.sh	r9,r8[0xc]
800052a4:	4a 78       	lddpc	r8,80005340 <udd_ctrl_out_received+0x1e0>
800052a6:	90 08       	ld.sh	r8,r8[0x0]
800052a8:	f0 09 19 00 	cp.h	r9,r8
800052ac:	c2 71       	brne	800052fa <udd_ctrl_out_received+0x19a>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
800052ae:	4a 48       	lddpc	r8,8000533c <udd_ctrl_out_received+0x1dc>
800052b0:	70 58       	ld.w	r8,r8[0x14]
800052b2:	58 08       	cp.w	r8,0
800052b4:	c0 81       	brne	800052c4 <udd_ctrl_out_received+0x164>
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
800052b6:	f0 1f 00 20 	mcall	80005334 <udd_ctrl_out_received+0x1d4>
			// Ack reception of OUT to replace NAK by a STALL
			udd_ack_out_received(0);
800052ba:	fe 68 01 60 	mov	r8,-130720
800052be:	30 29       	mov	r9,2
800052c0:	91 09       	st.w	r8[0x0],r9
			return;
800052c2:	c3 18       	rjmp	80005324 <udd_ctrl_out_received+0x1c4>
		}
		if (!udd_g_ctrlreq.over_under_run()) {
800052c4:	49 e8       	lddpc	r8,8000533c <udd_ctrl_out_received+0x1dc>
800052c6:	70 58       	ld.w	r8,r8[0x14]
800052c8:	5d 18       	icall	r8
800052ca:	18 98       	mov	r8,r12
800052cc:	ec 18 00 01 	eorl	r8,0x1
800052d0:	5c 58       	castu.b	r8
800052d2:	c0 80       	breq	800052e2 <udd_ctrl_out_received+0x182>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
800052d4:	f0 1f 00 18 	mcall	80005334 <udd_ctrl_out_received+0x1d4>
			// Ack reception of OUT to replace NAK by a STALL
			udd_ack_out_received(0);
800052d8:	fe 68 01 60 	mov	r8,-130720
800052dc:	30 29       	mov	r9,2
800052de:	91 09       	st.w	r8[0x0],r9
			return;
800052e0:	c2 28       	rjmp	80005324 <udd_ctrl_out_received+0x1c4>
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
800052e2:	49 98       	lddpc	r8,80005344 <udd_ctrl_out_received+0x1e4>
800052e4:	90 09       	ld.sh	r9,r8[0x0]
800052e6:	49 78       	lddpc	r8,80005340 <udd_ctrl_out_received+0x1e0>
800052e8:	90 08       	ld.sh	r8,r8[0x0]
800052ea:	f2 08 00 08 	add	r8,r9,r8
800052ee:	5c 88       	casts.h	r8
800052f0:	49 59       	lddpc	r9,80005344 <udd_ctrl_out_received+0x1e4>
800052f2:	b2 08       	st.h	r9[0x0],r8
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
800052f4:	49 39       	lddpc	r9,80005340 <udd_ctrl_out_received+0x1e0>
800052f6:	30 08       	mov	r8,0
800052f8:	b2 08       	st.h	r9[0x0],r8
	}
	// Free buffer of control endpoint to authorize next reception
	udd_ack_out_received(0);
800052fa:	fe 68 01 60 	mov	r8,-130720
800052fe:	30 29       	mov	r9,2
80005300:	91 09       	st.w	r8[0x0],r9
	// To detect a protocol error, enable nak interrupt on data IN phase
	udd_ack_nak_in(0);
80005302:	fe 68 01 60 	mov	r8,-130720
80005306:	31 09       	mov	r9,16
80005308:	91 09       	st.w	r8[0x0],r9
	flags = cpu_irq_save();
8000530a:	f0 1f 00 11 	mcall	8000534c <udd_ctrl_out_received+0x1ec>
8000530e:	18 98       	mov	r8,r12
80005310:	ef 48 ff f0 	st.w	r7[-16],r8
	udd_enable_nak_in_interrupt(0);
80005314:	fe 68 01 f0 	mov	r8,-130576
80005318:	31 09       	mov	r9,16
8000531a:	91 09       	st.w	r8[0x0],r9
	cpu_irq_restore(flags);
8000531c:	ee fc ff f0 	ld.w	r12,r7[-16]
80005320:	f0 1f 00 0c 	mcall	80005350 <udd_ctrl_out_received+0x1f0>
}
80005324:	2f cd       	sub	sp,-16
80005326:	e3 cd 80 80 	ldm	sp++,r7,pc
8000532a:	00 00       	add	r0,r0
8000532c:	00 00       	add	r0,r0
8000532e:	06 28       	rsub	r8,r3
80005330:	80 00       	ld.sh	r0,r0[0x0]
80005332:	54 84       	stdsp	sp[0x120],r4
80005334:	80 00       	ld.sh	r0,r0[0x0]
80005336:	53 cc       	stdsp	sp[0xf0],r12
80005338:	80 00       	ld.sh	r0,r0[0x0]
8000533a:	4e 04       	lddpc	r4,800054b8 <udd_ctrl_interrupt+0x18>
8000533c:	00 00       	add	r0,r0
8000533e:	0b 24       	ld.uh	r4,r5++
80005340:	00 00       	add	r0,r0
80005342:	06 2e       	rsub	lr,r3
80005344:	00 00       	add	r0,r0
80005346:	06 2c       	rsub	r12,r3
80005348:	80 00       	ld.sh	r0,r0[0x0]
8000534a:	53 ec       	stdsp	sp[0xf8],r12
8000534c:	80 00       	ld.sh	r0,r0[0x0]
8000534e:	3e ec       	mov	r12,-18
80005350:	80 00       	ld.sh	r0,r0[0x0]
80005352:	3f 2c       	mov	r12,-14

80005354 <udd_ctrl_underflow>:


static void udd_ctrl_underflow(void)
{
80005354:	eb cd 40 80 	pushm	r7,lr
80005358:	1a 97       	mov	r7,sp
	if (Is_udd_out_received(0))
8000535a:	fe 68 01 30 	mov	r8,-130768
8000535e:	70 08       	ld.w	r8,r8[0x0]
80005360:	e2 18 00 02 	andl	r8,0x2,COH
80005364:	c1 21       	brne	80005388 <udd_ctrl_underflow+0x34>
		return; // underflow ignored if OUT data is received

	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
80005366:	48 b8       	lddpc	r8,80005390 <udd_ctrl_underflow+0x3c>
80005368:	70 08       	ld.w	r8,r8[0x0]
8000536a:	58 18       	cp.w	r8,1
8000536c:	c0 41       	brne	80005374 <udd_ctrl_underflow+0x20>
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
8000536e:	f0 1f 00 0a 	mcall	80005394 <udd_ctrl_underflow+0x40>
80005372:	c0 c8       	rjmp	8000538a <udd_ctrl_underflow+0x36>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
80005374:	48 78       	lddpc	r8,80005390 <udd_ctrl_underflow+0x3c>
80005376:	70 08       	ld.w	r8,r8[0x0]
80005378:	58 48       	cp.w	r8,4
8000537a:	c0 81       	brne	8000538a <udd_ctrl_underflow+0x36>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data
		udd_enable_stall_handshake(0);
8000537c:	fe 68 01 f0 	mov	r8,-130576
80005380:	e8 69 00 00 	mov	r9,524288
80005384:	91 09       	st.w	r8[0x0],r9
80005386:	c0 28       	rjmp	8000538a <udd_ctrl_underflow+0x36>


static void udd_ctrl_underflow(void)
{
	if (Is_udd_out_received(0))
		return; // underflow ignored if OUT data is received
80005388:	d7 03       	nop
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data
		udd_enable_stall_handshake(0);
	}
}
8000538a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000538e:	00 00       	add	r0,r0
80005390:	00 00       	add	r0,r0
80005392:	06 28       	rsub	r8,r3
80005394:	80 00       	ld.sh	r0,r0[0x0]
80005396:	53 ec       	stdsp	sp[0xf8],r12

80005398 <udd_ctrl_overflow>:


static void udd_ctrl_overflow(void)
{
80005398:	eb cd 40 80 	pushm	r7,lr
8000539c:	1a 97       	mov	r7,sp
	if (Is_udd_in_send(0))
8000539e:	fe 68 01 30 	mov	r8,-130768
800053a2:	70 08       	ld.w	r8,r8[0x0]
800053a4:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800053a8:	5c 58       	castu.b	r8
800053aa:	c0 b1       	brne	800053c0 <udd_ctrl_overflow+0x28>
		return; // overflow ignored if IN data is received

	// The case of UDD_EPCTRL_DATA_IN is not managed
	// because the OUT endpoint is already free and OUT ZLP accepted

	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
800053ac:	48 78       	lddpc	r8,800053c8 <udd_ctrl_overflow+0x30>
800053ae:	70 08       	ld.w	r8,r8[0x0]
800053b0:	58 38       	cp.w	r8,3
800053b2:	c0 81       	brne	800053c2 <udd_ctrl_overflow+0x2a>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data
		udd_enable_stall_handshake(0);
800053b4:	fe 68 01 f0 	mov	r8,-130576
800053b8:	e8 69 00 00 	mov	r9,524288
800053bc:	91 09       	st.w	r8[0x0],r9
800053be:	c0 28       	rjmp	800053c2 <udd_ctrl_overflow+0x2a>


static void udd_ctrl_overflow(void)
{
	if (Is_udd_in_send(0))
		return; // overflow ignored if IN data is received
800053c0:	d7 03       	nop
	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data
		udd_enable_stall_handshake(0);
	}
}
800053c2:	e3 cd 80 80 	ldm	sp++,r7,pc
800053c6:	00 00       	add	r0,r0
800053c8:	00 00       	add	r0,r0
800053ca:	06 28       	rsub	r8,r3

800053cc <udd_ctrl_stall_data>:


static void udd_ctrl_stall_data(void)
{
800053cc:	eb cd 40 80 	pushm	r7,lr
800053d0:	1a 97       	mov	r7,sp
	// Stall all packets on IN & OUT control endpoint
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
800053d2:	48 68       	lddpc	r8,800053e8 <udd_ctrl_stall_data+0x1c>
800053d4:	30 59       	mov	r9,5
800053d6:	91 09       	st.w	r8[0x0],r9
	udd_enable_stall_handshake(0);
800053d8:	fe 68 01 f0 	mov	r8,-130576
800053dc:	e8 69 00 00 	mov	r9,524288
800053e0:	91 09       	st.w	r8[0x0],r9
}
800053e2:	e3 cd 80 80 	ldm	sp++,r7,pc
800053e6:	00 00       	add	r0,r0
800053e8:	00 00       	add	r0,r0
800053ea:	06 28       	rsub	r8,r3

800053ec <udd_ctrl_send_zlp_in>:


static void udd_ctrl_send_zlp_in(void)
{
800053ec:	eb cd 40 80 	pushm	r7,lr
800053f0:	1a 97       	mov	r7,sp
800053f2:	20 1d       	sub	sp,4
	irqflags_t flags;

	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
800053f4:	49 08       	lddpc	r8,80005434 <udd_ctrl_send_zlp_in+0x48>
800053f6:	30 39       	mov	r9,3
800053f8:	91 09       	st.w	r8[0x0],r9

	// Validate and send empty IN packet on control endpoint
	flags = cpu_irq_save();
800053fa:	f0 1f 00 10 	mcall	80005438 <udd_ctrl_send_zlp_in+0x4c>
800053fe:	18 98       	mov	r8,r12
80005400:	ef 48 ff fc 	st.w	r7[-4],r8
	// Send ZLP on IN endpoint
	udd_ack_in_send(0);
80005404:	fe 68 01 60 	mov	r8,-130720
80005408:	30 19       	mov	r9,1
8000540a:	91 09       	st.w	r8[0x0],r9
	udd_enable_in_send_interrupt(0);
8000540c:	fe 68 01 f0 	mov	r8,-130576
80005410:	30 19       	mov	r9,1
80005412:	91 09       	st.w	r8[0x0],r9
	// To detect a protocol error, enable nak interrupt on data OUT phase
	udd_ack_nak_out(0);
80005414:	fe 68 01 60 	mov	r8,-130720
80005418:	30 89       	mov	r9,8
8000541a:	91 09       	st.w	r8[0x0],r9
	udd_enable_nak_out_interrupt(0);
8000541c:	fe 68 01 f0 	mov	r8,-130576
80005420:	30 89       	mov	r9,8
80005422:	91 09       	st.w	r8[0x0],r9
	cpu_irq_restore(flags);
80005424:	ee fc ff fc 	ld.w	r12,r7[-4]
80005428:	f0 1f 00 05 	mcall	8000543c <udd_ctrl_send_zlp_in+0x50>
}
8000542c:	2f fd       	sub	sp,-4
8000542e:	e3 cd 80 80 	ldm	sp++,r7,pc
80005432:	00 00       	add	r0,r0
80005434:	00 00       	add	r0,r0
80005436:	06 28       	rsub	r8,r3
80005438:	80 00       	ld.sh	r0,r0[0x0]
8000543a:	3e ec       	mov	r12,-18
8000543c:	80 00       	ld.sh	r0,r0[0x0]
8000543e:	3f 2c       	mov	r12,-14

80005440 <udd_ctrl_send_zlp_out>:


static void udd_ctrl_send_zlp_out(void)
{
80005440:	eb cd 40 80 	pushm	r7,lr
80005444:	1a 97       	mov	r7,sp
80005446:	20 1d       	sub	sp,4
	irqflags_t flags;

	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
80005448:	48 c8       	lddpc	r8,80005478 <udd_ctrl_send_zlp_out+0x38>
8000544a:	30 49       	mov	r9,4
8000544c:	91 09       	st.w	r8[0x0],r9
	// No action is necessary to accept OUT ZLP
	// because the buffer of control endpoint is already free

	// To detect a protocol error, enable nak interrupt on data IN phase
	flags = cpu_irq_save();
8000544e:	f0 1f 00 0c 	mcall	8000547c <udd_ctrl_send_zlp_out+0x3c>
80005452:	18 98       	mov	r8,r12
80005454:	ef 48 ff fc 	st.w	r7[-4],r8
	udd_ack_nak_in(0);
80005458:	fe 68 01 60 	mov	r8,-130720
8000545c:	31 09       	mov	r9,16
8000545e:	91 09       	st.w	r8[0x0],r9
	udd_enable_nak_in_interrupt(0);
80005460:	fe 68 01 f0 	mov	r8,-130576
80005464:	31 09       	mov	r9,16
80005466:	91 09       	st.w	r8[0x0],r9
	cpu_irq_restore(flags);
80005468:	ee fc ff fc 	ld.w	r12,r7[-4]
8000546c:	f0 1f 00 05 	mcall	80005480 <udd_ctrl_send_zlp_out+0x40>
}
80005470:	2f fd       	sub	sp,-4
80005472:	e3 cd 80 80 	ldm	sp++,r7,pc
80005476:	00 00       	add	r0,r0
80005478:	00 00       	add	r0,r0
8000547a:	06 28       	rsub	r8,r3
8000547c:	80 00       	ld.sh	r0,r0[0x0]
8000547e:	3e ec       	mov	r12,-18
80005480:	80 00       	ld.sh	r0,r0[0x0]
80005482:	3f 2c       	mov	r12,-14

80005484 <udd_ctrl_endofrequest>:


static void udd_ctrl_endofrequest(void)
{
80005484:	eb cd 40 80 	pushm	r7,lr
80005488:	1a 97       	mov	r7,sp
	// If a callback is registered then call it
	if (udd_g_ctrlreq.callback) {
8000548a:	48 58       	lddpc	r8,8000549c <udd_ctrl_endofrequest+0x18>
8000548c:	70 48       	ld.w	r8,r8[0x10]
8000548e:	58 08       	cp.w	r8,0
80005490:	c0 40       	breq	80005498 <udd_ctrl_endofrequest+0x14>
		udd_g_ctrlreq.callback();
80005492:	48 38       	lddpc	r8,8000549c <udd_ctrl_endofrequest+0x18>
80005494:	70 48       	ld.w	r8,r8[0x10]
80005496:	5d 18       	icall	r8
	}
}
80005498:	e3 cd 80 80 	ldm	sp++,r7,pc
8000549c:	00 00       	add	r0,r0
8000549e:	0b 24       	ld.uh	r4,r5++

800054a0 <udd_ctrl_interrupt>:


static bool udd_ctrl_interrupt(void)
{
800054a0:	eb cd 40 80 	pushm	r7,lr
800054a4:	1a 97       	mov	r7,sp

	if (!Is_udd_endpoint_interrupt(0))
800054a6:	fe 68 00 00 	mov	r8,-131072
800054aa:	70 18       	ld.w	r8,r8[0x4]
800054ac:	e2 18 10 00 	andl	r8,0x1000,COH
800054b0:	c0 31       	brne	800054b6 <udd_ctrl_interrupt+0x16>
		return false; // No interrupt events on control endpoint
800054b2:	30 08       	mov	r8,0
800054b4:	c4 c8       	rjmp	8000554c <udd_ctrl_interrupt+0xac>

	// By default disable overflow and underflow interrupt
	udd_disable_nak_in_interrupt(0);
800054b6:	fe 68 02 20 	mov	r8,-130528
800054ba:	31 09       	mov	r9,16
800054bc:	91 09       	st.w	r8[0x0],r9
	udd_disable_nak_out_interrupt(0);
800054be:	fe 68 02 20 	mov	r8,-130528
800054c2:	30 89       	mov	r9,8
800054c4:	91 09       	st.w	r8[0x0],r9


	// Search event on control endpoint
	if (Is_udd_setup_received(0)) {
800054c6:	fe 68 01 30 	mov	r8,-130768
800054ca:	70 08       	ld.w	r8,r8[0x0]
800054cc:	e2 18 00 04 	andl	r8,0x4,COH
800054d0:	c0 50       	breq	800054da <udd_ctrl_interrupt+0x3a>
		// SETUP packet received
		udd_ctrl_setup_received();
800054d2:	f0 1f 00 21 	mcall	80005554 <udd_ctrl_interrupt+0xb4>
		return true;
800054d6:	30 18       	mov	r8,1
800054d8:	c3 a8       	rjmp	8000554c <udd_ctrl_interrupt+0xac>
	}
	if (Is_udd_in_send(0) && Is_udd_in_send_interrupt_enabled(0)) {
800054da:	fe 68 01 30 	mov	r8,-130768
800054de:	70 08       	ld.w	r8,r8[0x0]
800054e0:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800054e4:	5c 58       	castu.b	r8
800054e6:	c0 c0       	breq	800054fe <udd_ctrl_interrupt+0x5e>
800054e8:	fe 68 01 c0 	mov	r8,-130624
800054ec:	70 08       	ld.w	r8,r8[0x0]
800054ee:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800054f2:	5c 58       	castu.b	r8
800054f4:	c0 50       	breq	800054fe <udd_ctrl_interrupt+0x5e>
		// IN packet sent
		udd_ctrl_in_sent();
800054f6:	f0 1f 00 19 	mcall	80005558 <udd_ctrl_interrupt+0xb8>
		return true;
800054fa:	30 18       	mov	r8,1
800054fc:	c2 88       	rjmp	8000554c <udd_ctrl_interrupt+0xac>
	}
	if (Is_udd_out_received(0)) {
800054fe:	fe 68 01 30 	mov	r8,-130768
80005502:	70 08       	ld.w	r8,r8[0x0]
80005504:	e2 18 00 02 	andl	r8,0x2,COH
80005508:	c0 50       	breq	80005512 <udd_ctrl_interrupt+0x72>
		// OUT packet received
		udd_ctrl_out_received();
8000550a:	f0 1f 00 15 	mcall	8000555c <udd_ctrl_interrupt+0xbc>
		return true;
8000550e:	30 18       	mov	r8,1
80005510:	c1 e8       	rjmp	8000554c <udd_ctrl_interrupt+0xac>
	}
	if (Is_udd_nak_out(0)) {
80005512:	fe 68 01 30 	mov	r8,-130768
80005516:	70 08       	ld.w	r8,r8[0x0]
80005518:	e2 18 00 08 	andl	r8,0x8,COH
8000551c:	c0 90       	breq	8000552e <udd_ctrl_interrupt+0x8e>
		// Overflow on OUT packet
		udd_ack_nak_out(0);
8000551e:	fe 68 01 60 	mov	r8,-130720
80005522:	30 89       	mov	r9,8
80005524:	91 09       	st.w	r8[0x0],r9
		udd_ctrl_overflow();
80005526:	f0 1f 00 0f 	mcall	80005560 <udd_ctrl_interrupt+0xc0>
		return true;
8000552a:	30 18       	mov	r8,1
8000552c:	c1 08       	rjmp	8000554c <udd_ctrl_interrupt+0xac>
	}
	if (Is_udd_nak_in(0)) {
8000552e:	fe 68 01 30 	mov	r8,-130768
80005532:	70 08       	ld.w	r8,r8[0x0]
80005534:	e2 18 00 10 	andl	r8,0x10,COH
80005538:	c0 90       	breq	8000554a <udd_ctrl_interrupt+0xaa>
		// Underflow on IN packet
		udd_ack_nak_in(0);
8000553a:	fe 68 01 60 	mov	r8,-130720
8000553e:	31 09       	mov	r9,16
80005540:	91 09       	st.w	r8[0x0],r9
		udd_ctrl_underflow();
80005542:	f0 1f 00 09 	mcall	80005564 <udd_ctrl_interrupt+0xc4>
		return true;
80005546:	30 18       	mov	r8,1
80005548:	c0 28       	rjmp	8000554c <udd_ctrl_interrupt+0xac>
	}
	return false;
8000554a:	30 08       	mov	r8,0
}
8000554c:	10 9c       	mov	r12,r8
8000554e:	e3 cd 80 80 	ldm	sp++,r7,pc
80005552:	00 00       	add	r0,r0
80005554:	80 00       	ld.sh	r0,r0[0x0]
80005556:	4e 5c       	lddpc	r12,800056e8 <udd_ep_finish_job+0x6c>
80005558:	80 00       	ld.sh	r0,r0[0x0]
8000555a:	4f c0       	lddpc	r0,80005748 <udd_ep_trans_done+0x48>
8000555c:	80 00       	ld.sh	r0,r0[0x0]
8000555e:	51 60       	stdsp	sp[0x58],r0
80005560:	80 00       	ld.sh	r0,r0[0x0]
80005562:	53 98       	stdsp	sp[0xe4],r8
80005564:	80 00       	ld.sh	r0,r0[0x0]
80005566:	53 54       	stdsp	sp[0xd4],r4

80005568 <udd_ep_job_table_reset>:
//--- INTERNAL ROUTINES TO MANAGED THE BULK/INTERRUPT/ISOCHRONOUS ENDPOINTS

#if (0!=USB_DEVICE_MAX_EP)

static void udd_ep_job_table_reset(void)
{
80005568:	eb cd 40 80 	pushm	r7,lr
8000556c:	1a 97       	mov	r7,sp
8000556e:	20 1d       	sub	sp,4
	uint8_t i;
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
80005570:	30 08       	mov	r8,0
80005572:	ef 68 ff ff 	st.b	r7[-1],r8
80005576:	c2 28       	rjmp	800055ba <udd_ep_job_table_reset+0x52>
		udd_ep_job[i].busy = false;
80005578:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000557c:	49 5a       	lddpc	r10,800055d0 <udd_ep_job_table_reset+0x68>
8000557e:	12 98       	mov	r8,r9
80005580:	a3 68       	lsl	r8,0x2
80005582:	12 08       	add	r8,r9
80005584:	a3 68       	lsl	r8,0x2
80005586:	f4 08 00 09 	add	r9,r10,r8
8000558a:	72 08       	ld.w	r8,r9[0x0]
8000558c:	30 0a       	mov	r10,0
8000558e:	f1 da d3 e1 	bfins	r8,r10,0x1f,0x1
80005592:	93 08       	st.w	r9[0x0],r8
		udd_ep_job[i].stall_requested = false;
80005594:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80005598:	48 ea       	lddpc	r10,800055d0 <udd_ep_job_table_reset+0x68>
8000559a:	12 98       	mov	r8,r9
8000559c:	a3 68       	lsl	r8,0x2
8000559e:	12 08       	add	r8,r9
800055a0:	a3 68       	lsl	r8,0x2
800055a2:	f4 08 00 09 	add	r9,r10,r8
800055a6:	72 08       	ld.w	r8,r9[0x0]
800055a8:	30 0a       	mov	r10,0
800055aa:	f1 da d3 a1 	bfins	r8,r10,0x1d,0x1
800055ae:	93 08       	st.w	r9[0x0],r8
#if (0!=USB_DEVICE_MAX_EP)

static void udd_ep_job_table_reset(void)
{
	uint8_t i;
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
800055b0:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800055b4:	2f f8       	sub	r8,-1
800055b6:	ef 68 ff ff 	st.b	r7[-1],r8
800055ba:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800055be:	30 28       	mov	r8,2
800055c0:	f0 09 18 00 	cp.b	r9,r8
800055c4:	fe 98 ff da 	brls	80005578 <udd_ep_job_table_reset+0x10>
		udd_ep_job[i].busy = false;
		udd_ep_job[i].stall_requested = false;
	}
}
800055c8:	2f fd       	sub	sp,-4
800055ca:	e3 cd 80 80 	ldm	sp++,r7,pc
800055ce:	00 00       	add	r0,r0
800055d0:	00 00       	add	r0,r0
800055d2:	06 30       	cp.w	r0,r3

800055d4 <udd_ep_job_table_kill>:


static void udd_ep_job_table_kill(void)
{
800055d4:	eb cd 40 80 	pushm	r7,lr
800055d8:	1a 97       	mov	r7,sp
800055da:	20 1d       	sub	sp,4
	uint8_t i;

	// For each endpoint, kill job
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
800055dc:	30 08       	mov	r8,0
800055de:	ef 68 ff ff 	st.b	r7[-1],r8
800055e2:	c1 98       	rjmp	80005614 <udd_ep_job_table_kill+0x40>
		udd_ep_finish_job(&udd_ep_job[i], true, i + 1);
800055e4:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800055e8:	2f f8       	sub	r8,-1
800055ea:	5c 58       	castu.b	r8
800055ec:	10 9a       	mov	r10,r8
800055ee:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800055f2:	12 98       	mov	r8,r9
800055f4:	a3 68       	lsl	r8,0x2
800055f6:	12 08       	add	r8,r9
800055f8:	a3 68       	lsl	r8,0x2
800055fa:	10 99       	mov	r9,r8
800055fc:	48 b8       	lddpc	r8,80005628 <udd_ep_job_table_kill+0x54>
800055fe:	f2 08 00 08 	add	r8,r9,r8
80005602:	30 1b       	mov	r11,1
80005604:	10 9c       	mov	r12,r8
80005606:	f0 1f 00 0a 	mcall	8000562c <udd_ep_job_table_kill+0x58>
static void udd_ep_job_table_kill(void)
{
	uint8_t i;

	// For each endpoint, kill job
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
8000560a:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000560e:	2f f8       	sub	r8,-1
80005610:	ef 68 ff ff 	st.b	r7[-1],r8
80005614:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80005618:	30 28       	mov	r8,2
8000561a:	f0 09 18 00 	cp.b	r9,r8
8000561e:	fe 98 ff e3 	brls	800055e4 <udd_ep_job_table_kill+0x10>
		udd_ep_finish_job(&udd_ep_job[i], true, i + 1);
	}
}
80005622:	2f fd       	sub	sp,-4
80005624:	e3 cd 80 80 	ldm	sp++,r7,pc
80005628:	00 00       	add	r0,r0
8000562a:	06 30       	cp.w	r0,r3
8000562c:	80 00       	ld.sh	r0,r0[0x0]
8000562e:	56 7c       	stdsp	sp[0x19c],r12

80005630 <udd_ep_abort_job>:


static void udd_ep_abort_job(udd_ep_id_t ep)
{
80005630:	eb cd 40 80 	pushm	r7,lr
80005634:	1a 97       	mov	r7,sp
80005636:	20 1d       	sub	sp,4
80005638:	18 98       	mov	r8,r12
8000563a:	ef 68 ff fc 	st.b	r7[-4],r8
	ep &= USB_EP_ADDR_MASK;
8000563e:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80005642:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80005646:	ef 68 ff fc 	st.b	r7[-4],r8

	// Abort job on endpoint
	udd_ep_finish_job(&udd_ep_job[ep - 1], true, ep);
8000564a:	ef 3a ff fc 	ld.ub	r10,r7[-4]
8000564e:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80005652:	f0 c9 00 01 	sub	r9,r8,1
80005656:	12 98       	mov	r8,r9
80005658:	a3 68       	lsl	r8,0x2
8000565a:	12 08       	add	r8,r9
8000565c:	a3 68       	lsl	r8,0x2
8000565e:	10 99       	mov	r9,r8
80005660:	48 58       	lddpc	r8,80005674 <udd_ep_abort_job+0x44>
80005662:	f2 08 00 08 	add	r8,r9,r8
80005666:	30 1b       	mov	r11,1
80005668:	10 9c       	mov	r12,r8
8000566a:	f0 1f 00 04 	mcall	80005678 <udd_ep_abort_job+0x48>
}
8000566e:	2f fd       	sub	sp,-4
80005670:	e3 cd 80 80 	ldm	sp++,r7,pc
80005674:	00 00       	add	r0,r0
80005676:	06 30       	cp.w	r0,r3
80005678:	80 00       	ld.sh	r0,r0[0x0]
8000567a:	56 7c       	stdsp	sp[0x19c],r12

8000567c <udd_ep_finish_job>:


static void udd_ep_finish_job(udd_ep_job_t * ptr_job, bool b_abort, uint8_t ep_num)
{
8000567c:	eb cd 40 80 	pushm	r7,lr
80005680:	1a 97       	mov	r7,sp
80005682:	20 3d       	sub	sp,12
80005684:	ef 4c ff fc 	st.w	r7[-4],r12
80005688:	16 99       	mov	r9,r11
8000568a:	14 98       	mov	r8,r10
8000568c:	ef 69 ff f8 	st.b	r7[-8],r9
80005690:	ef 68 ff f4 	st.b	r7[-12],r8
	if (ptr_job->busy == false) {
80005694:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005698:	70 08       	ld.w	r8,r8[0x0]
8000569a:	e6 18 80 00 	andh	r8,0x8000,COH
8000569e:	c2 b0       	breq	800056f4 <udd_ep_finish_job+0x78>
		return; // No on-going job
	}
	ptr_job->busy = false;
800056a0:	ee f9 ff fc 	ld.w	r9,r7[-4]
800056a4:	72 08       	ld.w	r8,r9[0x0]
800056a6:	30 0a       	mov	r10,0
800056a8:	f1 da d3 e1 	bfins	r8,r10,0x1f,0x1
800056ac:	93 08       	st.w	r9[0x0],r8
	if (NULL == ptr_job->call_trans) {
800056ae:	ee f8 ff fc 	ld.w	r8,r7[-4]
800056b2:	70 48       	ld.w	r8,r8[0x10]
800056b4:	58 08       	cp.w	r8,0
800056b6:	c2 10       	breq	800056f8 <udd_ep_finish_job+0x7c>
		return; // No callback linked to job
	}
	if (Is_udd_endpoint_in(ep_num)) {
800056b8:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800056bc:	a3 68       	lsl	r8,0x2
800056be:	e0 38 ff 00 	sub	r8,130816
800056c2:	70 08       	ld.w	r8,r8[0x0]
800056c4:	e2 18 01 00 	andl	r8,0x100,COH
800056c8:	c0 90       	breq	800056da <udd_ep_finish_job+0x5e>
		ep_num |= USB_EP_DIR_IN;
800056ca:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800056ce:	ea 18 ff ff 	orh	r8,0xffff
800056d2:	e8 18 ff 80 	orl	r8,0xff80
800056d6:	ef 68 ff f4 	st.b	r7[-12],r8
	}
	ptr_job->call_trans((b_abort) ? UDD_EP_TRANSFER_ABORT :
800056da:	ee f8 ff fc 	ld.w	r8,r7[-4]
800056de:	70 48       	ld.w	r8,r8[0x10]
800056e0:	ef 3a ff f4 	ld.ub	r10,r7[-12]
800056e4:	ee f9 ff fc 	ld.w	r9,r7[-4]
800056e8:	72 2b       	ld.w	r11,r9[0x8]
800056ea:	ef 39 ff f8 	ld.ub	r9,r7[-8]
800056ee:	12 9c       	mov	r12,r9
800056f0:	5d 18       	icall	r8
800056f2:	c0 48       	rjmp	800056fa <udd_ep_finish_job+0x7e>


static void udd_ep_finish_job(udd_ep_job_t * ptr_job, bool b_abort, uint8_t ep_num)
{
	if (ptr_job->busy == false) {
		return; // No on-going job
800056f4:	d7 03       	nop
800056f6:	c0 28       	rjmp	800056fa <udd_ep_finish_job+0x7e>
	}
	ptr_job->busy = false;
	if (NULL == ptr_job->call_trans) {
		return; // No callback linked to job
800056f8:	d7 03       	nop
	if (Is_udd_endpoint_in(ep_num)) {
		ep_num |= USB_EP_DIR_IN;
	}
	ptr_job->call_trans((b_abort) ? UDD_EP_TRANSFER_ABORT :
			UDD_EP_TRANSFER_OK, ptr_job->buf_size, ep_num);
}
800056fa:	2f dd       	sub	sp,-12
800056fc:	e3 cd 80 80 	ldm	sp++,r7,pc

80005700 <udd_ep_trans_done>:

static void udd_ep_trans_done(udd_ep_id_t ep)
{
80005700:	eb cd 40 80 	pushm	r7,lr
80005704:	1a 97       	mov	r7,sp
80005706:	20 5d       	sub	sp,20
80005708:	18 98       	mov	r8,r12
8000570a:	ef 68 ff ec 	st.b	r7[-20],r8
	uint32_t udd_dma_ctrl = 0;
8000570e:	30 08       	mov	r8,0
80005710:	ef 48 ff f0 	st.w	r7[-16],r8
	udd_ep_job_t *ptr_job;
	iram_size_t next_trans;
	irqflags_t flags;

	// Get job corresponding at endpoint
	ptr_job = &udd_ep_job[ep - 1];
80005714:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80005718:	f0 c9 00 01 	sub	r9,r8,1
8000571c:	12 98       	mov	r8,r9
8000571e:	a3 68       	lsl	r8,0x2
80005720:	12 08       	add	r8,r9
80005722:	a3 68       	lsl	r8,0x2
80005724:	10 99       	mov	r9,r8
80005726:	fe f8 02 1a 	ld.w	r8,pc[538]
8000572a:	f2 08 00 08 	add	r8,r9,r8
8000572e:	ef 48 ff f4 	st.w	r7[-12],r8

	if (!ptr_job->busy) {
80005732:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005736:	70 08       	ld.w	r8,r8[0x0]
80005738:	e6 18 80 00 	andh	r8,0x8000,COH
8000573c:	e0 80 00 fe 	breq	80005938 <udd_ep_trans_done+0x238>
		return; // No job is running, then ignore it (system error)
	}

	if (ptr_job->nb_trans != ptr_job->buf_size) {
80005740:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005744:	70 39       	ld.w	r9,r8[0xc]
80005746:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000574a:	70 28       	ld.w	r8,r8[0x8]
8000574c:	10 39       	cp.w	r9,r8
8000574e:	e0 80 00 b5 	breq	800058b8 <udd_ep_trans_done+0x1b8>
		// Need to send or receive other data
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
80005752:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005756:	70 29       	ld.w	r9,r8[0x8]
80005758:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000575c:	70 38       	ld.w	r8,r8[0xc]
8000575e:	10 19       	sub	r9,r8
80005760:	ef 49 ff f8 	st.w	r7[-8],r9

		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
80005764:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005768:	e0 58 00 00 	cp.w	r8,65536
8000576c:	e0 88 00 0a 	brls	80005780 <udd_ep_trans_done+0x80>
			// The USB hardware support a maximum
			// transfer size of UDD_ENDPOINT_MAX_TRANS Bytes
			next_trans = UDD_ENDPOINT_MAX_TRANS;
80005770:	e0 78 00 00 	mov	r8,65536
80005774:	ef 48 ff f8 	st.w	r7[-8],r8

			// Set 0 to transfer the maximum
			udd_dma_ctrl = (0 <<
80005778:	30 08       	mov	r8,0
8000577a:	ef 48 ff f0 	st.w	r7[-16],r8
8000577e:	c0 68       	rjmp	8000578a <udd_ep_trans_done+0x8a>
					AVR32_USBB_UDDMA1_CONTROL_CH_BYTE_LENGTH_OFFSET)
					& AVR32_USBB_UDDMA1_CONTROL_CH_BYTE_LENGTH_MASK;
		} else {
			udd_dma_ctrl = (next_trans <<
80005780:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005784:	b1 68       	lsl	r8,0x10
80005786:	ef 48 ff f0 	st.w	r7[-16],r8
					AVR32_USBB_UDDMA1_CONTROL_CH_BYTE_LENGTH_OFFSET)
					& AVR32_USBB_UDDMA1_CONTROL_CH_BYTE_LENGTH_MASK;
		}
		if (Is_udd_endpoint_in(ep)) {
8000578a:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8000578e:	a3 68       	lsl	r8,0x2
80005790:	e0 38 ff 00 	sub	r8,130816
80005794:	70 08       	ld.w	r8,r8[0x0]
80005796:	e2 18 01 00 	andl	r8,0x100,COH
8000579a:	c2 10       	breq	800057dc <udd_ep_trans_done+0xdc>
			if (0 != next_trans % udd_get_endpoint_size(ep)) {
8000579c:	ef 38 ff ec 	ld.ub	r8,r7[-20]
800057a0:	a3 68       	lsl	r8,0x2
800057a2:	e0 38 ff 00 	sub	r8,130816
800057a6:	70 08       	ld.w	r8,r8[0x0]
800057a8:	e2 18 00 70 	andl	r8,0x70,COH
800057ac:	a5 88       	lsr	r8,0x4
800057ae:	30 89       	mov	r9,8
800057b0:	f2 08 09 48 	lsl	r8,r9,r8
800057b4:	20 18       	sub	r8,1
800057b6:	10 99       	mov	r9,r8
800057b8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800057bc:	f3 e8 00 08 	and	r8,r9,r8
800057c0:	c3 00       	breq	80005820 <udd_ep_trans_done+0x120>
				// Enable short packet option
				// else the DMA transfer is accepted
				// and interrupt DMA valid but nothing is sent.
				udd_dma_ctrl |= AVR32_USBB_UDDMA1_CONTROL_DMAEND_EN_MASK;
800057c2:	ee f8 ff f0 	ld.w	r8,r7[-16]
800057c6:	a3 b8       	sbr	r8,0x3
800057c8:	ef 48 ff f0 	st.w	r7[-16],r8
				// No need to request another ZLP
				ptr_job->b_shortpacket = false;
800057cc:	ee f9 ff f4 	ld.w	r9,r7[-12]
800057d0:	72 08       	ld.w	r8,r9[0x0]
800057d2:	30 0a       	mov	r10,0
800057d4:	f1 da d3 c1 	bfins	r8,r10,0x1e,0x1
800057d8:	93 08       	st.w	r9[0x0],r8
800057da:	c2 38       	rjmp	80005820 <udd_ep_trans_done+0x120>
			}
		} else {
			if ((USB_EP_TYPE_ISOCHRONOUS != udd_get_endpoint_type(ep))
800057dc:	ef 38 ff ec 	ld.ub	r8,r7[-20]
800057e0:	a3 68       	lsl	r8,0x2
800057e2:	e0 38 ff 00 	sub	r8,130816
800057e6:	70 08       	ld.w	r8,r8[0x0]
800057e8:	e2 18 18 00 	andl	r8,0x1800,COH
800057ec:	ab 98       	lsr	r8,0xb
800057ee:	58 18       	cp.w	r8,1
800057f0:	c1 21       	brne	80005814 <udd_ep_trans_done+0x114>
					|| (next_trans <= udd_get_endpoint_size(ep))) {
800057f2:	ef 38 ff ec 	ld.ub	r8,r7[-20]
800057f6:	a3 68       	lsl	r8,0x2
800057f8:	e0 38 ff 00 	sub	r8,130816
800057fc:	70 08       	ld.w	r8,r8[0x0]
800057fe:	e2 18 00 70 	andl	r8,0x70,COH
80005802:	a5 88       	lsr	r8,0x4
80005804:	30 89       	mov	r9,8
80005806:	f2 08 09 48 	lsl	r8,r9,r8
8000580a:	10 99       	mov	r9,r8
				udd_dma_ctrl |= AVR32_USBB_UDDMA1_CONTROL_DMAEND_EN_MASK;
				// No need to request another ZLP
				ptr_job->b_shortpacket = false;
			}
		} else {
			if ((USB_EP_TYPE_ISOCHRONOUS != udd_get_endpoint_type(ep))
8000580c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005810:	10 39       	cp.w	r9,r8
80005812:	c0 73       	brcs	80005820 <udd_ep_trans_done+0x120>
					|| (next_trans <= udd_get_endpoint_size(ep))) {

				// Enable short packet reception
				udd_dma_ctrl |= AVR32_USBB_UDDMA1_CONTROL_EOT_IRQ_EN_MASK
80005814:	ee f8 ff f0 	ld.w	r8,r7[-16]
80005818:	e8 18 00 14 	orl	r8,0x14
8000581c:	ef 48 ff f0 	st.w	r7[-16],r8
						| AVR32_USBB_UDDMA1_CONTROL_BUFF_CLOSE_IN_EN_MASK;
			}
		}

		// Start USB DMA to fill or read fifo of the selected endpoint
		udd_endpoint_dma_set_addr(ep, (U32) &ptr_job->buf[ptr_job->nb_trans]);
80005820:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80005824:	a5 68       	lsl	r8,0x4
80005826:	e0 38 fd 00 	sub	r8,130304
8000582a:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000582e:	72 1a       	ld.w	r10,r9[0x4]
80005830:	ee f9 ff f4 	ld.w	r9,r7[-12]
80005834:	72 39       	ld.w	r9,r9[0xc]
80005836:	f4 09 00 09 	add	r9,r10,r9
8000583a:	91 19       	st.w	r8[0x4],r9
		udd_dma_ctrl |= AVR32_USBB_UDDMA1_CONTROL_EOBUFF_IRQ_EN_MASK |
8000583c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80005840:	e8 18 00 21 	orl	r8,0x21
80005844:	ef 48 ff f0 	st.w	r7[-16],r8
				AVR32_USBB_UDDMA1_CONTROL_CH_EN_MASK;

		// Disable IRQs to have a short sequence
		// between read of EOT_STA and DMA enable
		flags = cpu_irq_save();
80005848:	f0 1f 00 3f 	mcall	80005944 <udd_ep_trans_done+0x244>
8000584c:	18 98       	mov	r8,r12
8000584e:	ef 48 ff fc 	st.w	r7[-4],r8
		if ( !(udd_endpoint_dma_get_status(ep)
80005852:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80005856:	a5 68       	lsl	r8,0x4
80005858:	e0 38 fd 00 	sub	r8,130304
8000585c:	70 38       	ld.w	r8,r8[0xc]
8000585e:	e2 18 00 10 	andl	r8,0x10,COH
80005862:	c2 11       	brne	800058a4 <udd_ep_trans_done+0x1a4>
				& AVR32_USBB_UDDMA1_STATUS_EOT_STA_MASK)) {
			udd_endpoint_dma_set_control(ep, udd_dma_ctrl);
80005864:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80005868:	a5 68       	lsl	r8,0x4
8000586a:	e0 38 fd 00 	sub	r8,130304
8000586e:	ee f9 ff f0 	ld.w	r9,r7[-16]
80005872:	91 29       	st.w	r8[0x8],r9
			ptr_job->nb_trans += next_trans;
80005874:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005878:	70 39       	ld.w	r9,r8[0xc]
8000587a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000587e:	10 09       	add	r9,r8
80005880:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005884:	91 39       	st.w	r8[0xc],r9
			udd_enable_endpoint_dma_interrupt(ep);
80005886:	fe 68 00 00 	mov	r8,-131072
8000588a:	ef 39 ff ec 	ld.ub	r9,r7[-20]
8000588e:	20 19       	sub	r9,1
80005890:	fc 1a 02 00 	movh	r10,0x200
80005894:	f4 09 09 49 	lsl	r9,r10,r9
80005898:	91 69       	st.w	r8[0x18],r9
			cpu_irq_restore(flags);
8000589a:	ee fc ff fc 	ld.w	r12,r7[-4]
8000589e:	f0 1f 00 2b 	mcall	80005948 <udd_ep_trans_done+0x248>
			return;
800058a2:	c4 c8       	rjmp	8000593a <udd_ep_trans_done+0x23a>
		}
		cpu_irq_restore(flags);
800058a4:	ee fc ff fc 	ld.w	r12,r7[-4]
800058a8:	f0 1f 00 28 	mcall	80005948 <udd_ep_trans_done+0x248>

		// Here a ZLP has been received
		// and the DMA transfer must be not started.
		// It is the end of transfer
		ptr_job->buf_size = ptr_job->nb_trans;
800058ac:	ee f8 ff f4 	ld.w	r8,r7[-12]
800058b0:	70 39       	ld.w	r9,r8[0xc]
800058b2:	ee f8 ff f4 	ld.w	r8,r7[-12]
800058b6:	91 29       	st.w	r8[0x8],r9
	}
	if (Is_udd_endpoint_in(ep)) {
800058b8:	ef 38 ff ec 	ld.ub	r8,r7[-20]
800058bc:	a3 68       	lsl	r8,0x2
800058be:	e0 38 ff 00 	sub	r8,130816
800058c2:	70 08       	ld.w	r8,r8[0x0]
800058c4:	e2 18 01 00 	andl	r8,0x100,COH
800058c8:	c2 f0       	breq	80005926 <udd_ep_trans_done+0x226>
		if (ptr_job->b_shortpacket) {
800058ca:	ee f8 ff f4 	ld.w	r8,r7[-12]
800058ce:	70 08       	ld.w	r8,r8[0x0]
800058d0:	e6 18 40 00 	andh	r8,0x4000,COH
800058d4:	c2 90       	breq	80005926 <udd_ep_trans_done+0x226>
			// Need to send a ZLP (No possible with USB DMA)
			// enable interrupt to wait a free bank to sent ZLP
			udd_ack_in_send(ep);
800058d6:	ef 38 ff ec 	ld.ub	r8,r7[-20]
800058da:	a3 68       	lsl	r8,0x2
800058dc:	e0 38 fe a0 	sub	r8,130720
800058e0:	30 19       	mov	r9,1
800058e2:	91 09       	st.w	r8[0x0],r9
			if (Is_udd_write_enabled(ep)) {
800058e4:	ef 38 ff ec 	ld.ub	r8,r7[-20]
800058e8:	a3 68       	lsl	r8,0x2
800058ea:	e0 38 fe d0 	sub	r8,130768
800058ee:	70 08       	ld.w	r8,r8[0x0]
800058f0:	e6 18 00 01 	andh	r8,0x1,COH
800058f4:	c0 80       	breq	80005904 <udd_ep_trans_done+0x204>
				// Force interrupt in case of ep already free
				udd_raise_in_send(ep);
800058f6:	ef 38 ff ec 	ld.ub	r8,r7[-20]
800058fa:	a3 68       	lsl	r8,0x2
800058fc:	e0 38 fe 70 	sub	r8,130672
80005900:	30 19       	mov	r9,1
80005902:	91 09       	st.w	r8[0x0],r9
			}
			udd_enable_in_send_interrupt(ep);
80005904:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80005908:	a3 68       	lsl	r8,0x2
8000590a:	e0 38 fe 10 	sub	r8,130576
8000590e:	30 19       	mov	r9,1
80005910:	91 09       	st.w	r8[0x0],r9
			udd_enable_endpoint_interrupt(ep);
80005912:	fe 68 00 00 	mov	r8,-131072
80005916:	ef 39 ff ec 	ld.ub	r9,r7[-20]
8000591a:	e0 6a 10 00 	mov	r10,4096
8000591e:	f4 09 09 49 	lsl	r9,r10,r9
80005922:	91 69       	st.w	r8[0x18],r9
			return;
80005924:	c0 b8       	rjmp	8000593a <udd_ep_trans_done+0x23a>
		}
	}
	// Call callback to signal end of transfer
	udd_ep_finish_job(ptr_job, false, ep);
80005926:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8000592a:	10 9a       	mov	r10,r8
8000592c:	30 0b       	mov	r11,0
8000592e:	ee fc ff f4 	ld.w	r12,r7[-12]
80005932:	f0 1f 00 07 	mcall	8000594c <udd_ep_trans_done+0x24c>
80005936:	c0 28       	rjmp	8000593a <udd_ep_trans_done+0x23a>

	// Get job corresponding at endpoint
	ptr_job = &udd_ep_job[ep - 1];

	if (!ptr_job->busy) {
		return; // No job is running, then ignore it (system error)
80005938:	d7 03       	nop
			return;
		}
	}
	// Call callback to signal end of transfer
	udd_ep_finish_job(ptr_job, false, ep);
}
8000593a:	2f bd       	sub	sp,-20
8000593c:	e3 cd 80 80 	ldm	sp++,r7,pc
80005940:	00 00       	add	r0,r0
80005942:	06 30       	cp.w	r0,r3
80005944:	80 00       	ld.sh	r0,r0[0x0]
80005946:	3e ec       	mov	r12,-18
80005948:	80 00       	ld.sh	r0,r0[0x0]
8000594a:	3f 2c       	mov	r12,-14
8000594c:	80 00       	ld.sh	r0,r0[0x0]
8000594e:	56 7c       	stdsp	sp[0x19c],r12

80005950 <udd_ep_interrupt>:


static bool udd_ep_interrupt(void)
{
80005950:	eb cd 40 80 	pushm	r7,lr
80005954:	1a 97       	mov	r7,sp
80005956:	20 3d       	sub	sp,12
	udd_ep_id_t ep;
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
80005958:	30 18       	mov	r8,1
8000595a:	ef 68 ff f7 	st.b	r7[-9],r8
8000595e:	cf 18       	rjmp	80005b40 <udd_ep_interrupt+0x1f0>
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
80005960:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80005964:	f0 c9 00 01 	sub	r9,r8,1
80005968:	12 98       	mov	r8,r9
8000596a:	a3 68       	lsl	r8,0x2
8000596c:	12 08       	add	r8,r9
8000596e:	a3 68       	lsl	r8,0x2
80005970:	10 99       	mov	r9,r8
80005972:	4f a8       	lddpc	r8,80005b58 <udd_ep_interrupt+0x208>
80005974:	f2 08 00 08 	add	r8,r9,r8
80005978:	ef 48 ff f8 	st.w	r7[-8],r8

		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
8000597c:	fe 68 00 00 	mov	r8,-131072
80005980:	70 49       	ld.w	r9,r8[0x10]
80005982:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80005986:	20 18       	sub	r8,1
80005988:	fc 1a 02 00 	movh	r10,0x200
8000598c:	f4 08 09 48 	lsl	r8,r10,r8
80005990:	f3 e8 00 08 	and	r8,r9,r8
80005994:	c4 70       	breq	80005a22 <udd_ep_interrupt+0xd2>
				&& Is_udd_endpoint_dma_interrupt(ep)) {
80005996:	fe 68 00 00 	mov	r8,-131072
8000599a:	70 19       	ld.w	r9,r8[0x4]
8000599c:	ef 38 ff f7 	ld.ub	r8,r7[-9]
800059a0:	20 18       	sub	r8,1
800059a2:	fc 1a 02 00 	movh	r10,0x200
800059a6:	f4 08 09 48 	lsl	r8,r10,r8
800059aa:	f3 e8 00 08 	and	r8,r9,r8
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];

		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
800059ae:	c3 a0       	breq	80005a22 <udd_ep_interrupt+0xd2>
				&& Is_udd_endpoint_dma_interrupt(ep)) {
			uint32_t nb_remaining;
			if( udd_endpoint_dma_get_status(ep)
800059b0:	ef 38 ff f7 	ld.ub	r8,r7[-9]
800059b4:	a5 68       	lsl	r8,0x4
800059b6:	e0 38 fd 00 	sub	r8,130304
800059ba:	70 38       	ld.w	r8,r8[0xc]
800059bc:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800059c0:	5c 58       	castu.b	r8
800059c2:	c0 30       	breq	800059c8 <udd_ep_interrupt+0x78>
					& AVR32_USBB_UDDMA1_STATUS_CH_EN_MASK) {
				return true; // Ignore EOT_STA interrupt
800059c4:	30 18       	mov	r8,1
800059c6:	cc 58       	rjmp	80005b50 <udd_ep_interrupt+0x200>
			}
			udd_disable_endpoint_dma_interrupt(ep);
800059c8:	fe 68 00 00 	mov	r8,-131072
800059cc:	ef 39 ff f7 	ld.ub	r9,r7[-9]
800059d0:	20 19       	sub	r9,1
800059d2:	fc 1a 02 00 	movh	r10,0x200
800059d6:	f4 09 09 49 	lsl	r9,r10,r9
800059da:	91 59       	st.w	r8[0x14],r9
			// Save number of data no transfered
			nb_remaining = (udd_endpoint_dma_get_status(ep) &
800059dc:	ef 38 ff f7 	ld.ub	r8,r7[-9]
800059e0:	a5 68       	lsl	r8,0x4
800059e2:	e0 38 fd 00 	sub	r8,130304
800059e6:	70 38       	ld.w	r8,r8[0xc]
800059e8:	b1 88       	lsr	r8,0x10
800059ea:	ef 48 ff fc 	st.w	r7[-4],r8
					AVR32_USBB_UDDMA1_STATUS_CH_BYTE_CNT_MASK)
					>> AVR32_USBB_UDDMA1_STATUS_CH_BYTE_CNT_OFFSET;
			if (nb_remaining) {
800059ee:	ee f8 ff fc 	ld.w	r8,r7[-4]
800059f2:	58 08       	cp.w	r8,0
800059f4:	c1 00       	breq	80005a14 <udd_ep_interrupt+0xc4>
				// Transfer no complete (short packet or ZLP) then:
				// Update number of data transfered
				ptr_job->nb_trans -= nb_remaining;
800059f6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800059fa:	70 39       	ld.w	r9,r8[0xc]
800059fc:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005a00:	10 19       	sub	r9,r8
80005a02:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005a06:	91 39       	st.w	r8[0xc],r9
				// Set transfer complete to stop the transfer
				ptr_job->buf_size = ptr_job->nb_trans;
80005a08:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005a0c:	70 39       	ld.w	r9,r8[0xc]
80005a0e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005a12:	91 29       	st.w	r8[0x8],r9
			}
			udd_ep_trans_done(ep);
80005a14:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80005a18:	10 9c       	mov	r12,r8
80005a1a:	f0 1f 00 51 	mcall	80005b5c <udd_ep_interrupt+0x20c>
			return true;
80005a1e:	30 18       	mov	r8,1
80005a20:	c9 88       	rjmp	80005b50 <udd_ep_interrupt+0x200>
		}
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
80005a22:	fe 68 00 00 	mov	r8,-131072
80005a26:	70 49       	ld.w	r9,r8[0x10]
80005a28:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80005a2c:	e0 6a 10 00 	mov	r10,4096
80005a30:	f4 08 09 48 	lsl	r8,r10,r8
80005a34:	f3 e8 00 08 	and	r8,r9,r8
80005a38:	c7 f0       	breq	80005b36 <udd_ep_interrupt+0x1e6>
			if (Is_udd_in_send_interrupt_enabled(ep) && Is_udd_in_send(ep)) {
80005a3a:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80005a3e:	a3 68       	lsl	r8,0x2
80005a40:	e0 38 fe 40 	sub	r8,130624
80005a44:	70 08       	ld.w	r8,r8[0x0]
80005a46:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80005a4a:	5c 58       	castu.b	r8
80005a4c:	c2 b0       	breq	80005aa2 <udd_ep_interrupt+0x152>
80005a4e:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80005a52:	a3 68       	lsl	r8,0x2
80005a54:	e0 38 fe d0 	sub	r8,130768
80005a58:	70 08       	ld.w	r8,r8[0x0]
80005a5a:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80005a5e:	5c 58       	castu.b	r8
80005a60:	c2 10       	breq	80005aa2 <udd_ep_interrupt+0x152>
				udd_disable_in_send_interrupt(ep);
80005a62:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80005a66:	a3 68       	lsl	r8,0x2
80005a68:	e0 38 fd e0 	sub	r8,130528
80005a6c:	30 19       	mov	r9,1
80005a6e:	91 09       	st.w	r8[0x0],r9
				// One bank is free then send a ZLP
				udd_ack_in_send(ep);
80005a70:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80005a74:	a3 68       	lsl	r8,0x2
80005a76:	e0 38 fe a0 	sub	r8,130720
80005a7a:	30 19       	mov	r9,1
80005a7c:	91 09       	st.w	r8[0x0],r9
				udd_ack_fifocon(ep);
80005a7e:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80005a82:	a3 68       	lsl	r8,0x2
80005a84:	e0 38 fd e0 	sub	r8,130528
80005a88:	e0 69 40 00 	mov	r9,16384
80005a8c:	91 09       	st.w	r8[0x0],r9
				udd_ep_finish_job(ptr_job, false, ep);
80005a8e:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80005a92:	10 9a       	mov	r10,r8
80005a94:	30 0b       	mov	r11,0
80005a96:	ee fc ff f8 	ld.w	r12,r7[-8]
80005a9a:	f0 1f 00 32 	mcall	80005b60 <udd_ep_interrupt+0x210>
				return true;
80005a9e:	30 18       	mov	r8,1
80005aa0:	c5 88       	rjmp	80005b50 <udd_ep_interrupt+0x200>
			}
			if (Is_udd_bank_interrupt_enabled(ep) && (0 == udd_nb_busy_bank(ep))) {
80005aa2:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80005aa6:	a3 68       	lsl	r8,0x2
80005aa8:	e0 38 fe 40 	sub	r8,130624
80005aac:	70 08       	ld.w	r8,r8[0x0]
80005aae:	e2 18 10 00 	andl	r8,0x1000,COH
80005ab2:	c4 20       	breq	80005b36 <udd_ep_interrupt+0x1e6>
80005ab4:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80005ab8:	a3 68       	lsl	r8,0x2
80005aba:	e0 38 fe d0 	sub	r8,130768
80005abe:	70 08       	ld.w	r8,r8[0x0]
80005ac0:	e2 18 30 00 	andl	r8,0x3000,COH
80005ac4:	ad 88       	lsr	r8,0xc
80005ac6:	c3 81       	brne	80005b36 <udd_ep_interrupt+0x1e6>
				// End of background transfer on IN endpoint
				udd_disable_bank_interrupt(ep);
80005ac8:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80005acc:	a3 68       	lsl	r8,0x2
80005ace:	e0 38 fd e0 	sub	r8,130528
80005ad2:	e0 69 10 00 	mov	r9,4096
80005ad6:	91 09       	st.w	r8[0x0],r9
				udd_disable_endpoint_interrupt(ep);
80005ad8:	fe 68 00 00 	mov	r8,-131072
80005adc:	ef 39 ff f7 	ld.ub	r9,r7[-9]
80005ae0:	e0 6a 10 00 	mov	r10,4096
80005ae4:	f4 09 09 49 	lsl	r9,r10,r9
80005ae8:	91 59       	st.w	r8[0x14],r9

				Assert(ptr_job->stall_requested);
				// A stall has been requested during background transfer
				ptr_job->stall_requested = false;
80005aea:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005aee:	72 08       	ld.w	r8,r9[0x0]
80005af0:	30 0a       	mov	r10,0
80005af2:	f1 da d3 a1 	bfins	r8,r10,0x1d,0x1
80005af6:	93 08       	st.w	r9[0x0],r8
				udd_disable_endpoint_bank_autoswitch(ep);
80005af8:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80005afc:	a3 68       	lsl	r8,0x2
80005afe:	e0 38 ff 00 	sub	r8,130816
80005b02:	ef 39 ff f7 	ld.ub	r9,r7[-9]
80005b06:	a3 69       	lsl	r9,0x2
80005b08:	e0 39 ff 00 	sub	r9,130816
80005b0c:	72 09       	ld.w	r9,r9[0x0]
80005b0e:	a9 d9       	cbr	r9,0x9
80005b10:	91 09       	st.w	r8[0x0],r9
				udd_enable_stall_handshake(ep);
80005b12:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80005b16:	a3 68       	lsl	r8,0x2
80005b18:	e0 38 fe 10 	sub	r8,130576
80005b1c:	e8 69 00 00 	mov	r9,524288
80005b20:	91 09       	st.w	r8[0x0],r9
				udd_reset_data_toggle(ep);
80005b22:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80005b26:	a3 68       	lsl	r8,0x2
80005b28:	e0 38 fe 10 	sub	r8,130576
80005b2c:	e4 69 00 00 	mov	r9,262144
80005b30:	91 09       	st.w	r8[0x0],r9
				return true;
80005b32:	30 18       	mov	r8,1
80005b34:	c0 e8       	rjmp	80005b50 <udd_ep_interrupt+0x200>
{
	udd_ep_id_t ep;
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
80005b36:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80005b3a:	2f f8       	sub	r8,-1
80005b3c:	ef 68 ff f7 	st.b	r7[-9],r8
80005b40:	ef 39 ff f7 	ld.ub	r9,r7[-9]
80005b44:	30 38       	mov	r8,3
80005b46:	f0 09 18 00 	cp.b	r9,r8
80005b4a:	fe 98 ff 0b 	brls	80005960 <udd_ep_interrupt+0x10>
				udd_reset_data_toggle(ep);
				return true;
			}
		}
	}
	return false;
80005b4e:	30 08       	mov	r8,0
}
80005b50:	10 9c       	mov	r12,r8
80005b52:	2f dd       	sub	sp,-12
80005b54:	e3 cd 80 80 	ldm	sp++,r7,pc
80005b58:	00 00       	add	r0,r0
80005b5a:	06 30       	cp.w	r0,r3
80005b5c:	80 00       	ld.sh	r0,r0[0x0]
80005b5e:	57 00       	stdsp	sp[0x1c0],r0
80005b60:	80 00       	ld.sh	r0,r0[0x0]
80005b62:	56 7c       	stdsp	sp[0x19c],r12

80005b64 <cpu_irq_save>:
#endif

typedef uint32_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
80005b64:	eb cd 40 80 	pushm	r7,lr
80005b68:	1a 97       	mov	r7,sp
80005b6a:	20 1d       	sub	sp,4
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80005b6c:	e1 b8 00 00 	mfsr	r8,0x0
80005b70:	ef 48 ff fc 	st.w	r7[-4],r8
	cpu_irq_disable();
80005b74:	d3 03       	ssrf	0x10

	return flags;
80005b76:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
80005b7a:	10 9c       	mov	r12,r8
80005b7c:	2f fd       	sub	sp,-4
80005b7e:	e3 cd 80 80 	ldm	sp++,r7,pc

80005b82 <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
80005b82:	eb cd 40 80 	pushm	r7,lr
80005b86:	1a 97       	mov	r7,sp
80005b88:	20 1d       	sub	sp,4
80005b8a:	ef 4c ff fc 	st.w	r7[-4],r12
	return !(flags & AVR32_SR_GM_MASK);
80005b8e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005b92:	e6 18 00 01 	andh	r8,0x1,COH
80005b96:	5f 08       	sreq	r8
80005b98:	5c 58       	castu.b	r8
}
80005b9a:	10 9c       	mov	r12,r8
80005b9c:	2f fd       	sub	sp,-4
80005b9e:	e3 cd 80 80 	ldm	sp++,r7,pc
80005ba2:	d7 03       	nop

80005ba4 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
80005ba4:	eb cd 40 80 	pushm	r7,lr
80005ba8:	1a 97       	mov	r7,sp
80005baa:	20 1d       	sub	sp,4
80005bac:	ef 4c ff fc 	st.w	r7[-4],r12
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80005bb0:	ee fc ff fc 	ld.w	r12,r7[-4]
80005bb4:	f0 1f 00 05 	mcall	80005bc8 <cpu_irq_restore+0x24>
80005bb8:	18 98       	mov	r8,r12
80005bba:	58 08       	cp.w	r8,0
80005bbc:	c0 20       	breq	80005bc0 <cpu_irq_restore+0x1c>
      cpu_irq_enable();
80005bbe:	d5 03       	csrf	0x10
   }

	barrier();
}
80005bc0:	2f fd       	sub	sp,-4
80005bc2:	e3 cd 80 80 	ldm	sp++,r7,pc
80005bc6:	00 00       	add	r0,r0
80005bc8:	80 00       	ld.sh	r0,r0[0x0]
80005bca:	5b 82       	cp.w	r2,-8

80005bcc <udi_cdc_comm_enable>:
static volatile bool udi_cdc_tx_both_buf_to_send[UDI_CDC_PORT_NB];

//@}

bool udi_cdc_comm_enable(void)
{
80005bcc:	eb cd 40 80 	pushm	r7,lr
80005bd0:	1a 97       	mov	r7,sp
80005bd2:	20 1d       	sub	sp,4
	uint8_t port;
	uint8_t iface_comm_num;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
80005bd4:	30 08       	mov	r8,0
80005bd6:	ef 68 ff fe 	st.b	r7[-2],r8
	udi_cdc_nb_comm_enabled = 0;
80005bda:	4d c9       	lddpc	r9,80005d48 <udi_cdc_comm_enable+0x17c>
80005bdc:	30 08       	mov	r8,0
80005bde:	b2 88       	st.b	r9[0x0],r8
	}
	port = udi_cdc_nb_comm_enabled;
#endif

	// Initialize control signal management
	udi_cdc_state[port] = CPU_TO_LE16(0);
80005be0:	ef 3a ff fe 	ld.ub	r10,r7[-2]
80005be4:	4d a9       	lddpc	r9,80005d4c <udi_cdc_comm_enable+0x180>
80005be6:	30 08       	mov	r8,0
80005be8:	f2 0a 0a 18 	st.h	r9[r10<<0x1],r8

	uid_cdc_state_msg[port].header.bmRequestType =
80005bec:	ef 39 ff fe 	ld.ub	r9,r7[-2]
80005bf0:	4d 8a       	lddpc	r10,80005d50 <udi_cdc_comm_enable+0x184>
80005bf2:	12 98       	mov	r8,r9
80005bf4:	a3 68       	lsl	r8,0x2
80005bf6:	12 08       	add	r8,r9
80005bf8:	a1 78       	lsl	r8,0x1
80005bfa:	f4 08 00 09 	add	r9,r10,r8
80005bfe:	3a 18       	mov	r8,-95
80005c00:	b2 88       	st.b	r9[0x0],r8
			USB_REQ_DIR_IN | USB_REQ_TYPE_CLASS |
			USB_REQ_RECIP_INTERFACE;
	uid_cdc_state_msg[port].header.bNotification = USB_REQ_CDC_NOTIFY_SERIAL_STATE;
80005c02:	ef 39 ff fe 	ld.ub	r9,r7[-2]
80005c06:	4d 3a       	lddpc	r10,80005d50 <udi_cdc_comm_enable+0x184>
80005c08:	12 98       	mov	r8,r9
80005c0a:	a3 68       	lsl	r8,0x2
80005c0c:	12 08       	add	r8,r9
80005c0e:	a1 78       	lsl	r8,0x1
80005c10:	f4 08 00 09 	add	r9,r10,r8
80005c14:	32 08       	mov	r8,32
80005c16:	b2 98       	st.b	r9[0x1],r8
	uid_cdc_state_msg[port].header.wValue = LE16(0);
80005c18:	ef 39 ff fe 	ld.ub	r9,r7[-2]
80005c1c:	4c da       	lddpc	r10,80005d50 <udi_cdc_comm_enable+0x184>
80005c1e:	12 98       	mov	r8,r9
80005c20:	a3 68       	lsl	r8,0x2
80005c22:	12 08       	add	r8,r9
80005c24:	a1 78       	lsl	r8,0x1
80005c26:	f4 08 00 09 	add	r9,r10,r8
80005c2a:	30 08       	mov	r8,0
80005c2c:	b2 18       	st.h	r9[0x2],r8

	switch (port) {
80005c2e:	ef 38 ff fe 	ld.ub	r8,r7[-2]
80005c32:	58 08       	cp.w	r8,0
80005c34:	c0 51       	brne	80005c3e <udi_cdc_comm_enable+0x72>
#define UDI_CDC_PORT_TO_IFACE_COMM(index, unused) \
	case index: \
		iface_comm_num = UDI_CDC_COMM_IFACE_NUMBER_##index; \
		break;
	MREPEAT(UDI_CDC_PORT_NB, UDI_CDC_PORT_TO_IFACE_COMM, ~)
80005c36:	30 08       	mov	r8,0
80005c38:	ef 68 ff ff 	st.b	r7[-1],r8
80005c3c:	c0 48       	rjmp	80005c44 <udi_cdc_comm_enable+0x78>
#undef UDI_CDC_PORT_TO_IFACE_COMM
	default:
		iface_comm_num = UDI_CDC_COMM_IFACE_NUMBER_0;
80005c3e:	30 08       	mov	r8,0
80005c40:	ef 68 ff ff 	st.b	r7[-1],r8
		break;
	}

	uid_cdc_state_msg[port].header.wIndex = LE16(iface_comm_num);
80005c44:	ef 39 ff fe 	ld.ub	r9,r7[-2]
80005c48:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80005c4c:	a9 48       	asr	r8,0x8
80005c4e:	f5 d8 b0 10 	bfexts	r10,r8,0x0,0x10
80005c52:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80005c56:	a9 68       	lsl	r8,0x8
80005c58:	5c 88       	casts.h	r8
80005c5a:	f5 e8 10 08 	or	r8,r10,r8
80005c5e:	5c 88       	casts.h	r8
80005c60:	10 9a       	mov	r10,r8
80005c62:	4b cb       	lddpc	r11,80005d50 <udi_cdc_comm_enable+0x184>
80005c64:	12 98       	mov	r8,r9
80005c66:	a3 68       	lsl	r8,0x2
80005c68:	12 08       	add	r8,r9
80005c6a:	a1 78       	lsl	r8,0x1
80005c6c:	f6 08 00 08 	add	r8,r11,r8
80005c70:	f0 c9 ff fc 	sub	r9,r8,-4
80005c74:	14 98       	mov	r8,r10
80005c76:	b2 08       	st.h	r9[0x0],r8
	uid_cdc_state_msg[port].header.wLength = LE16(2);
80005c78:	ef 39 ff fe 	ld.ub	r9,r7[-2]
80005c7c:	4b 5a       	lddpc	r10,80005d50 <udi_cdc_comm_enable+0x184>
80005c7e:	12 98       	mov	r8,r9
80005c80:	a3 68       	lsl	r8,0x2
80005c82:	12 08       	add	r8,r9
80005c84:	a1 78       	lsl	r8,0x1
80005c86:	f4 08 00 08 	add	r8,r10,r8
80005c8a:	f0 c9 ff fc 	sub	r9,r8,-4
80005c8e:	e0 68 02 00 	mov	r8,512
80005c92:	b2 18       	st.h	r9[0x2],r8
	uid_cdc_state_msg[port].value = CPU_TO_LE16(0);
80005c94:	ef 39 ff fe 	ld.ub	r9,r7[-2]
80005c98:	4a ea       	lddpc	r10,80005d50 <udi_cdc_comm_enable+0x184>
80005c9a:	12 98       	mov	r8,r9
80005c9c:	a3 68       	lsl	r8,0x2
80005c9e:	12 08       	add	r8,r9
80005ca0:	a1 78       	lsl	r8,0x1
80005ca2:	f4 08 00 08 	add	r8,r10,r8
80005ca6:	f0 c9 ff f8 	sub	r9,r8,-8
80005caa:	30 08       	mov	r8,0
80005cac:	b2 08       	st.h	r9[0x0],r8

	udi_cdc_line_coding[port].dwDTERate = CPU_TO_LE32(UDI_CDC_DEFAULT_RATE);
80005cae:	ef 39 ff fe 	ld.ub	r9,r7[-2]
80005cb2:	4a 9a       	lddpc	r10,80005d54 <udi_cdc_comm_enable+0x188>
80005cb4:	12 98       	mov	r8,r9
80005cb6:	a3 78       	lsl	r8,0x3
80005cb8:	12 18       	sub	r8,r9
80005cba:	f4 08 00 08 	add	r8,r10,r8
80005cbe:	11 89       	ld.ub	r9,r8[0x0]
80005cc0:	e2 19 00 00 	andl	r9,0x0,COH
80005cc4:	b0 89       	st.b	r8[0x0],r9
80005cc6:	11 99       	ld.ub	r9,r8[0x1]
80005cc8:	e2 19 00 00 	andl	r9,0x0,COH
80005ccc:	ea 19 ff ff 	orh	r9,0xffff
80005cd0:	e8 19 ff c2 	orl	r9,0xffc2
80005cd4:	b0 99       	st.b	r8[0x1],r9
80005cd6:	11 a9       	ld.ub	r9,r8[0x2]
80005cd8:	e2 19 00 00 	andl	r9,0x0,COH
80005cdc:	a1 a9       	sbr	r9,0x0
80005cde:	b0 a9       	st.b	r8[0x2],r9
80005ce0:	11 b9       	ld.ub	r9,r8[0x3]
80005ce2:	e2 19 00 00 	andl	r9,0x0,COH
80005ce6:	b0 b9       	st.b	r8[0x3],r9
	udi_cdc_line_coding[port].bCharFormat = UDI_CDC_DEFAULT_STOPBITS;
80005ce8:	ef 39 ff fe 	ld.ub	r9,r7[-2]
80005cec:	49 aa       	lddpc	r10,80005d54 <udi_cdc_comm_enable+0x188>
80005cee:	12 98       	mov	r8,r9
80005cf0:	a3 78       	lsl	r8,0x3
80005cf2:	12 18       	sub	r8,r9
80005cf4:	f4 08 00 08 	add	r8,r10,r8
80005cf8:	f0 c9 ff fc 	sub	r9,r8,-4
80005cfc:	30 08       	mov	r8,0
80005cfe:	b2 88       	st.b	r9[0x0],r8
	udi_cdc_line_coding[port].bParityType = UDI_CDC_DEFAULT_PARITY;
80005d00:	ef 39 ff fe 	ld.ub	r9,r7[-2]
80005d04:	49 4a       	lddpc	r10,80005d54 <udi_cdc_comm_enable+0x188>
80005d06:	12 98       	mov	r8,r9
80005d08:	a3 78       	lsl	r8,0x3
80005d0a:	12 18       	sub	r8,r9
80005d0c:	f4 08 00 08 	add	r8,r10,r8
80005d10:	f0 c9 ff fc 	sub	r9,r8,-4
80005d14:	30 08       	mov	r8,0
80005d16:	b2 98       	st.b	r9[0x1],r8
	udi_cdc_line_coding[port].bDataBits = UDI_CDC_DEFAULT_DATABITS;
80005d18:	ef 39 ff fe 	ld.ub	r9,r7[-2]
80005d1c:	48 ea       	lddpc	r10,80005d54 <udi_cdc_comm_enable+0x188>
80005d1e:	12 98       	mov	r8,r9
80005d20:	a3 78       	lsl	r8,0x3
80005d22:	12 18       	sub	r8,r9
80005d24:	f4 08 00 08 	add	r8,r10,r8
80005d28:	f0 c9 ff fc 	sub	r9,r8,-4
80005d2c:	30 88       	mov	r8,8
80005d2e:	b2 a8       	st.b	r9[0x2],r8
	// to initialize memories or indicate that interface is enabled
	UDI_CDC_SET_CODING_EXT(port,(&udi_cdc_line_coding[port]));
	if (!UDI_CDC_ENABLE_EXT(port)) {
		return false;
	}
	udi_cdc_nb_comm_enabled++;
80005d30:	48 68       	lddpc	r8,80005d48 <udi_cdc_comm_enable+0x17c>
80005d32:	11 88       	ld.ub	r8,r8[0x0]
80005d34:	5c 58       	castu.b	r8
80005d36:	2f f8       	sub	r8,-1
80005d38:	5c 58       	castu.b	r8
80005d3a:	48 49       	lddpc	r9,80005d48 <udi_cdc_comm_enable+0x17c>
80005d3c:	b2 88       	st.b	r9[0x0],r8
	return true;
80005d3e:	30 18       	mov	r8,1
}
80005d40:	10 9c       	mov	r12,r8
80005d42:	2f fd       	sub	sp,-4
80005d44:	e3 cd 80 80 	ldm	sp++,r7,pc
80005d48:	00 00       	add	r0,r0
80005d4a:	06 88       	andn	r8,r3
80005d4c:	00 00       	add	r0,r0
80005d4e:	06 78       	tst	r8,r3
80005d50:	00 00       	add	r0,r0
80005d52:	06 7c       	tst	r12,r3
80005d54:	00 00       	add	r0,r0
80005d56:	06 70       	tst	r0,r3

80005d58 <udi_cdc_data_enable>:

bool udi_cdc_data_enable(void)
{
80005d58:	eb cd 40 80 	pushm	r7,lr
80005d5c:	1a 97       	mov	r7,sp
80005d5e:	20 1d       	sub	sp,4
	uint8_t port;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
80005d60:	30 08       	mov	r8,0
80005d62:	ef 68 ff ff 	st.b	r7[-1],r8
	udi_cdc_nb_data_enabled = 0;
80005d66:	4b a9       	lddpc	r9,80005e4c <udi_cdc_data_enable+0xf4>
80005d68:	30 08       	mov	r8,0
80005d6a:	b2 88       	st.b	r9[0x0],r8
	}
	port = udi_cdc_nb_data_enabled;
#endif

	// Initialize TX management
	udi_cdc_tx_trans_ongoing[port] = false;
80005d6c:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80005d70:	4b 8a       	lddpc	r10,80005e50 <udi_cdc_data_enable+0xf8>
80005d72:	30 08       	mov	r8,0
80005d74:	f4 09 0b 08 	st.b	r10[r9],r8
	udi_cdc_tx_both_buf_to_send[port] = false;
80005d78:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80005d7c:	4b 6a       	lddpc	r10,80005e54 <udi_cdc_data_enable+0xfc>
80005d7e:	30 08       	mov	r8,0
80005d80:	f4 09 0b 08 	st.b	r10[r9],r8
	udi_cdc_tx_buf_sel[port] = 0;
80005d84:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80005d88:	4b 4a       	lddpc	r10,80005e58 <udi_cdc_data_enable+0x100>
80005d8a:	30 08       	mov	r8,0
80005d8c:	f4 09 0b 08 	st.b	r10[r9],r8
	udi_cdc_tx_buf_nb[port][0] = 0;
80005d90:	ef 3a ff ff 	ld.ub	r10,r7[-1]
80005d94:	4b 29       	lddpc	r9,80005e5c <udi_cdc_data_enable+0x104>
80005d96:	30 08       	mov	r8,0
80005d98:	f2 0a 0a 28 	st.h	r9[r10<<0x2],r8
	udi_cdc_tx_buf_nb[port][1] = 0;
80005d9c:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80005da0:	4a f9       	lddpc	r9,80005e5c <udi_cdc_data_enable+0x104>
80005da2:	a1 78       	lsl	r8,0x1
80005da4:	f0 ca ff ff 	sub	r10,r8,-1
80005da8:	30 08       	mov	r8,0
80005daa:	f2 0a 0a 18 	st.h	r9[r10<<0x1],r8
	udi_cdc_tx_sof_num[port] = 0;
80005dae:	ef 3a ff ff 	ld.ub	r10,r7[-1]
80005db2:	4a c9       	lddpc	r9,80005e60 <udi_cdc_data_enable+0x108>
80005db4:	30 08       	mov	r8,0
80005db6:	f2 0a 0a 18 	st.h	r9[r10<<0x1],r8
	udi_cdc_tx_send(port);
80005dba:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80005dbe:	10 9c       	mov	r12,r8
80005dc0:	f0 1f 00 29 	mcall	80005e64 <udi_cdc_data_enable+0x10c>

	// Initialize RX management
	udi_cdc_rx_trans_ongoing[port] = false;
80005dc4:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80005dc8:	4a 8a       	lddpc	r10,80005e68 <udi_cdc_data_enable+0x110>
80005dca:	30 08       	mov	r8,0
80005dcc:	f4 09 0b 08 	st.b	r10[r9],r8
	udi_cdc_rx_buf_sel[port] = 0;
80005dd0:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80005dd4:	4a 6a       	lddpc	r10,80005e6c <udi_cdc_data_enable+0x114>
80005dd6:	30 08       	mov	r8,0
80005dd8:	f4 09 0b 08 	st.b	r10[r9],r8
	udi_cdc_rx_buf_nb[port][0] = 0;
80005ddc:	ef 3a ff ff 	ld.ub	r10,r7[-1]
80005de0:	4a 49       	lddpc	r9,80005e70 <udi_cdc_data_enable+0x118>
80005de2:	30 08       	mov	r8,0
80005de4:	f2 0a 0a 28 	st.h	r9[r10<<0x2],r8
	udi_cdc_rx_buf_nb[port][1] = 0;
80005de8:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80005dec:	4a 19       	lddpc	r9,80005e70 <udi_cdc_data_enable+0x118>
80005dee:	a1 78       	lsl	r8,0x1
80005df0:	f0 ca ff ff 	sub	r10,r8,-1
80005df4:	30 08       	mov	r8,0
80005df6:	f2 0a 0a 18 	st.h	r9[r10<<0x1],r8
	udi_cdc_rx_pos[port] = 0;
80005dfa:	ef 3a ff ff 	ld.ub	r10,r7[-1]
80005dfe:	49 e9       	lddpc	r9,80005e74 <udi_cdc_data_enable+0x11c>
80005e00:	30 08       	mov	r8,0
80005e02:	f2 0a 0a 18 	st.h	r9[r10<<0x1],r8
	if (!udi_cdc_rx_start(port)) {
80005e06:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80005e0a:	10 9c       	mov	r12,r8
80005e0c:	f0 1f 00 1b 	mcall	80005e78 <udi_cdc_data_enable+0x120>
80005e10:	18 98       	mov	r8,r12
80005e12:	ec 18 00 01 	eorl	r8,0x1
80005e16:	5c 58       	castu.b	r8
80005e18:	c0 30       	breq	80005e1e <udi_cdc_data_enable+0xc6>
		return false;
80005e1a:	30 08       	mov	r8,0
80005e1c:	c1 48       	rjmp	80005e44 <udi_cdc_data_enable+0xec>
	}
	udi_cdc_nb_data_enabled++;
80005e1e:	48 c8       	lddpc	r8,80005e4c <udi_cdc_data_enable+0xf4>
80005e20:	11 88       	ld.ub	r8,r8[0x0]
80005e22:	5c 58       	castu.b	r8
80005e24:	2f f8       	sub	r8,-1
80005e26:	5c 58       	castu.b	r8
80005e28:	48 99       	lddpc	r9,80005e4c <udi_cdc_data_enable+0xf4>
80005e2a:	b2 88       	st.b	r9[0x0],r8
	if (udi_cdc_nb_data_enabled == UDI_CDC_PORT_NB) {
80005e2c:	48 88       	lddpc	r8,80005e4c <udi_cdc_data_enable+0xf4>
80005e2e:	11 88       	ld.ub	r8,r8[0x0]
80005e30:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80005e34:	30 18       	mov	r8,1
80005e36:	f0 09 18 00 	cp.b	r9,r8
80005e3a:	c0 41       	brne	80005e42 <udi_cdc_data_enable+0xea>
		udi_cdc_data_running = true;
80005e3c:	49 09       	lddpc	r9,80005e7c <udi_cdc_data_enable+0x124>
80005e3e:	30 18       	mov	r8,1
80005e40:	b2 88       	st.b	r9[0x0],r8
	}
	return true;
80005e42:	30 18       	mov	r8,1
}
80005e44:	10 9c       	mov	r12,r8
80005e46:	2f fd       	sub	sp,-4
80005e48:	e3 cd 80 80 	ldm	sp++,r7,pc
80005e4c:	00 00       	add	r0,r0
80005e4e:	06 89       	andn	r9,r3
80005e50:	00 00       	add	r0,r0
80005e52:	07 a8       	ld.ub	r8,r3[0x2]
80005e54:	00 00       	add	r0,r0
80005e56:	07 ac       	ld.ub	r12,r3[0x2]
80005e58:	00 00       	add	r0,r0
80005e5a:	07 a0       	ld.ub	r0,r3[0x2]
80005e5c:	00 00       	add	r0,r0
80005e5e:	07 9c       	ld.ub	r12,r3[0x1]
80005e60:	00 00       	add	r0,r0
80005e62:	07 a4       	ld.ub	r4,r3[0x2]
80005e64:	80 00       	ld.sh	r0,r0[0x0]
80005e66:	62 d0       	ld.w	r0,r1[0x34]
80005e68:	00 00       	add	r0,r0
80005e6a:	07 18       	ld.sh	r8,r3++
80005e6c:	00 00       	add	r0,r0
80005e6e:	07 10       	ld.sh	r0,r3++
80005e70:	00 00       	add	r0,r0
80005e72:	07 0c       	ld.w	r12,r3++
80005e74:	00 00       	add	r0,r0
80005e76:	07 14       	ld.sh	r4,r3++
80005e78:	80 00       	ld.sh	r0,r0[0x0]
80005e7a:	60 40       	ld.w	r0,r0[0x10]
80005e7c:	00 00       	add	r0,r0
80005e7e:	06 8a       	andn	r10,r3

80005e80 <udi_cdc_comm_disable>:

void udi_cdc_comm_disable(void)
{
80005e80:	eb cd 40 80 	pushm	r7,lr
80005e84:	1a 97       	mov	r7,sp
	Assert(udi_cdc_nb_comm_enabled != 0);
	udi_cdc_nb_comm_enabled--;
80005e86:	48 58       	lddpc	r8,80005e98 <udi_cdc_comm_disable+0x18>
80005e88:	11 88       	ld.ub	r8,r8[0x0]
80005e8a:	5c 58       	castu.b	r8
80005e8c:	20 18       	sub	r8,1
80005e8e:	5c 58       	castu.b	r8
80005e90:	48 29       	lddpc	r9,80005e98 <udi_cdc_comm_disable+0x18>
80005e92:	b2 88       	st.b	r9[0x0],r8
}
80005e94:	e3 cd 80 80 	ldm	sp++,r7,pc
80005e98:	00 00       	add	r0,r0
80005e9a:	06 88       	andn	r8,r3

80005e9c <udi_cdc_data_disable>:

void udi_cdc_data_disable(void)
{
80005e9c:	eb cd 40 80 	pushm	r7,lr
80005ea0:	1a 97       	mov	r7,sp
80005ea2:	20 1d       	sub	sp,4
	uint8_t port;

	Assert(udi_cdc_nb_data_enabled != 0);
	udi_cdc_nb_data_enabled--;
80005ea4:	48 98       	lddpc	r8,80005ec8 <udi_cdc_data_disable+0x2c>
80005ea6:	11 88       	ld.ub	r8,r8[0x0]
80005ea8:	5c 58       	castu.b	r8
80005eaa:	20 18       	sub	r8,1
80005eac:	5c 58       	castu.b	r8
80005eae:	48 79       	lddpc	r9,80005ec8 <udi_cdc_data_disable+0x2c>
80005eb0:	b2 88       	st.b	r9[0x0],r8
	port = udi_cdc_nb_data_enabled;
80005eb2:	48 68       	lddpc	r8,80005ec8 <udi_cdc_data_disable+0x2c>
80005eb4:	11 88       	ld.ub	r8,r8[0x0]
80005eb6:	ef 68 ff ff 	st.b	r7[-1],r8
	UDI_CDC_DISABLE_EXT(port);
	udi_cdc_data_running = false;
80005eba:	48 59       	lddpc	r9,80005ecc <udi_cdc_data_disable+0x30>
80005ebc:	30 08       	mov	r8,0
80005ebe:	b2 88       	st.b	r9[0x0],r8
}
80005ec0:	2f fd       	sub	sp,-4
80005ec2:	e3 cd 80 80 	ldm	sp++,r7,pc
80005ec6:	00 00       	add	r0,r0
80005ec8:	00 00       	add	r0,r0
80005eca:	06 89       	andn	r9,r3
80005ecc:	00 00       	add	r0,r0
80005ece:	06 8a       	andn	r10,r3

80005ed0 <udi_cdc_comm_setup>:

bool udi_cdc_comm_setup(void)
{
80005ed0:	eb cd 40 80 	pushm	r7,lr
80005ed4:	1a 97       	mov	r7,sp
80005ed6:	20 1d       	sub	sp,4
	uint8_t port = udi_cdc_setup_to_port();
80005ed8:	f0 1f 00 34 	mcall	80005fa8 <udi_cdc_comm_setup+0xd8>
80005edc:	18 98       	mov	r8,r12
80005ede:	ef 68 ff ff 	st.b	r7[-1],r8

	if (Udd_setup_is_in()) {
80005ee2:	4b 38       	lddpc	r8,80005fac <udi_cdc_comm_setup+0xdc>
80005ee4:	11 88       	ld.ub	r8,r8[0x0]
80005ee6:	10 99       	mov	r9,r8
80005ee8:	30 08       	mov	r8,0
80005eea:	f0 09 18 00 	cp.b	r9,r8
80005eee:	c2 44       	brge	80005f36 <udi_cdc_comm_setup+0x66>
		// GET Interface Requests
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
80005ef0:	4a f8       	lddpc	r8,80005fac <udi_cdc_comm_setup+0xdc>
80005ef2:	11 88       	ld.ub	r8,r8[0x0]
80005ef4:	e2 18 00 60 	andl	r8,0x60,COH
80005ef8:	e0 48 00 20 	cp.w	r8,32
80005efc:	c1 d1       	brne	80005f36 <udi_cdc_comm_setup+0x66>
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
80005efe:	4a c8       	lddpc	r8,80005fac <udi_cdc_comm_setup+0xdc>
80005f00:	11 98       	ld.ub	r8,r8[0x1]
80005f02:	e0 48 00 21 	cp.w	r8,33
80005f06:	c1 81       	brne	80005f36 <udi_cdc_comm_setup+0x66>
			case USB_REQ_CDC_GET_LINE_CODING:
				// Get configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
80005f08:	4a 98       	lddpc	r8,80005fac <udi_cdc_comm_setup+0xdc>
80005f0a:	90 39       	ld.sh	r9,r8[0x6]
80005f0c:	30 78       	mov	r8,7
80005f0e:	f0 09 19 00 	cp.h	r9,r8
80005f12:	c0 30       	breq	80005f18 <udi_cdc_comm_setup+0x48>
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
80005f14:	30 08       	mov	r8,0
80005f16:	c4 48       	rjmp	80005f9e <udi_cdc_comm_setup+0xce>
				udd_g_ctrlreq.payload =
						(uint8_t *) &
80005f18:	4a 6a       	lddpc	r10,80005fb0 <udi_cdc_comm_setup+0xe0>
80005f1a:	ef 39 ff ff 	ld.ub	r9,r7[-1]
						udi_cdc_line_coding[port];
80005f1e:	12 98       	mov	r8,r9
80005f20:	a3 78       	lsl	r8,0x3
80005f22:	12 18       	sub	r8,r9
				// Get configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
				udd_g_ctrlreq.payload =
						(uint8_t *) &
80005f24:	f4 08 00 09 	add	r9,r10,r8
			case USB_REQ_CDC_GET_LINE_CODING:
				// Get configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
				udd_g_ctrlreq.payload =
80005f28:	4a 18       	lddpc	r8,80005fac <udi_cdc_comm_setup+0xdc>
80005f2a:	91 29       	st.w	r8[0x8],r9
						(uint8_t *) &
						udi_cdc_line_coding[port];
				udd_g_ctrlreq.payload_size =
80005f2c:	4a 09       	lddpc	r9,80005fac <udi_cdc_comm_setup+0xdc>
80005f2e:	30 78       	mov	r8,7
80005f30:	b2 68       	st.h	r9[0xc],r8
						sizeof(usb_cdc_line_coding_t);
				return true;
80005f32:	30 18       	mov	r8,1
80005f34:	c3 58       	rjmp	80005f9e <udi_cdc_comm_setup+0xce>
			}
		}
	}
	if (Udd_setup_is_out()) {
80005f36:	49 e8       	lddpc	r8,80005fac <udi_cdc_comm_setup+0xdc>
80005f38:	11 88       	ld.ub	r8,r8[0x0]
80005f3a:	10 99       	mov	r9,r8
80005f3c:	30 08       	mov	r8,0
80005f3e:	f0 09 18 00 	cp.b	r9,r8
80005f42:	c2 d5       	brlt	80005f9c <udi_cdc_comm_setup+0xcc>
		// SET Interface Requests
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
80005f44:	49 a8       	lddpc	r8,80005fac <udi_cdc_comm_setup+0xdc>
80005f46:	11 88       	ld.ub	r8,r8[0x0]
80005f48:	e2 18 00 60 	andl	r8,0x60,COH
80005f4c:	e0 48 00 20 	cp.w	r8,32
80005f50:	c2 61       	brne	80005f9c <udi_cdc_comm_setup+0xcc>
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
80005f52:	49 78       	lddpc	r8,80005fac <udi_cdc_comm_setup+0xdc>
80005f54:	11 98       	ld.ub	r8,r8[0x1]
80005f56:	e0 48 00 20 	cp.w	r8,32
80005f5a:	c0 50       	breq	80005f64 <udi_cdc_comm_setup+0x94>
80005f5c:	e0 48 00 22 	cp.w	r8,34
80005f60:	c1 c0       	breq	80005f98 <udi_cdc_comm_setup+0xc8>
80005f62:	c1 d8       	rjmp	80005f9c <udi_cdc_comm_setup+0xcc>
			case USB_REQ_CDC_SET_LINE_CODING:
				// Change configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
80005f64:	49 28       	lddpc	r8,80005fac <udi_cdc_comm_setup+0xdc>
80005f66:	90 39       	ld.sh	r9,r8[0x6]
80005f68:	30 78       	mov	r8,7
80005f6a:	f0 09 19 00 	cp.h	r9,r8
80005f6e:	c0 30       	breq	80005f74 <udi_cdc_comm_setup+0xa4>
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
80005f70:	30 08       	mov	r8,0
80005f72:	c1 68       	rjmp	80005f9e <udi_cdc_comm_setup+0xce>
				udd_g_ctrlreq.callback =
80005f74:	48 e8       	lddpc	r8,80005fac <udi_cdc_comm_setup+0xdc>
80005f76:	49 09       	lddpc	r9,80005fb4 <udi_cdc_comm_setup+0xe4>
80005f78:	91 49       	st.w	r8[0x10],r9
						udi_cdc_line_coding_received;
				udd_g_ctrlreq.payload =
						(uint8_t *) &
80005f7a:	48 ea       	lddpc	r10,80005fb0 <udi_cdc_comm_setup+0xe0>
80005f7c:	ef 39 ff ff 	ld.ub	r9,r7[-1]
						udi_cdc_line_coding[port];
80005f80:	12 98       	mov	r8,r9
80005f82:	a3 78       	lsl	r8,0x3
80005f84:	12 18       	sub	r8,r9
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
				udd_g_ctrlreq.callback =
						udi_cdc_line_coding_received;
				udd_g_ctrlreq.payload =
						(uint8_t *) &
80005f86:	f4 08 00 09 	add	r9,r10,r8
				if (sizeof(usb_cdc_line_coding_t) !=
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
				udd_g_ctrlreq.callback =
						udi_cdc_line_coding_received;
				udd_g_ctrlreq.payload =
80005f8a:	48 98       	lddpc	r8,80005fac <udi_cdc_comm_setup+0xdc>
80005f8c:	91 29       	st.w	r8[0x8],r9
						(uint8_t *) &
						udi_cdc_line_coding[port];
				udd_g_ctrlreq.payload_size =
80005f8e:	48 89       	lddpc	r9,80005fac <udi_cdc_comm_setup+0xdc>
80005f90:	30 78       	mov	r8,7
80005f92:	b2 68       	st.h	r9[0xc],r8
						sizeof(usb_cdc_line_coding_t);
				return true;
80005f94:	30 18       	mov	r8,1
80005f96:	c0 48       	rjmp	80005f9e <udi_cdc_comm_setup+0xce>
						(udd_g_ctrlreq.req.wValue
						 & CDC_CTRL_SIGNAL_DTE_PRESENT)));
				UDI_CDC_SET_RTS_EXT(port, (0 !=
						(udd_g_ctrlreq.req.wValue
						 & CDC_CTRL_SIGNAL_ACTIVATE_CARRIER)));
				return true;
80005f98:	30 18       	mov	r8,1
80005f9a:	c0 28       	rjmp	80005f9e <udi_cdc_comm_setup+0xce>
			}
		}
	}
	return false;  // request Not supported
80005f9c:	30 08       	mov	r8,0
}
80005f9e:	10 9c       	mov	r12,r8
80005fa0:	2f fd       	sub	sp,-4
80005fa2:	e3 cd 80 80 	ldm	sp++,r7,pc
80005fa6:	00 00       	add	r0,r0
80005fa8:	80 00       	ld.sh	r0,r0[0x0]
80005faa:	5f f0       	sral	r0
80005fac:	00 00       	add	r0,r0
80005fae:	0b 24       	ld.uh	r4,r5++
80005fb0:	00 00       	add	r0,r0
80005fb2:	06 70       	tst	r0,r3
80005fb4:	80 00       	ld.sh	r0,r0[0x0]
80005fb6:	60 24       	ld.w	r4,r0[0x8]

80005fb8 <udi_cdc_data_setup>:

bool udi_cdc_data_setup(void)
{
80005fb8:	eb cd 40 80 	pushm	r7,lr
80005fbc:	1a 97       	mov	r7,sp
	return false;  // request Not supported
80005fbe:	30 08       	mov	r8,0
}
80005fc0:	10 9c       	mov	r12,r8
80005fc2:	e3 cd 80 80 	ldm	sp++,r7,pc

80005fc6 <udi_cdc_getsetting>:

uint8_t udi_cdc_getsetting(void)
{
80005fc6:	eb cd 40 80 	pushm	r7,lr
80005fca:	1a 97       	mov	r7,sp
	return 0;      // CDC don't have multiple alternate setting
80005fcc:	30 08       	mov	r8,0
}
80005fce:	10 9c       	mov	r12,r8
80005fd0:	e3 cd 80 80 	ldm	sp++,r7,pc

80005fd4 <udi_cdc_data_sof_notify>:

void udi_cdc_data_sof_notify(void)
{
80005fd4:	eb cd 40 80 	pushm	r7,lr
80005fd8:	1a 97       	mov	r7,sp
	static uint8_t port_notify = 0;

	// A call of udi_cdc_data_sof_notify() is done for each port
	udi_cdc_tx_send(port_notify);
80005fda:	48 48       	lddpc	r8,80005fe8 <udi_cdc_data_sof_notify+0x14>
80005fdc:	11 88       	ld.ub	r8,r8[0x0]
80005fde:	10 9c       	mov	r12,r8
80005fe0:	f0 1f 00 03 	mcall	80005fec <udi_cdc_data_sof_notify+0x18>
	port_notify++;
	if (port_notify >= UDI_CDC_PORT_NB) {
		port_notify = 0;
	}
#endif
}
80005fe4:	e3 cd 80 80 	ldm	sp++,r7,pc
80005fe8:	00 00       	add	r0,r0
80005fea:	07 b2       	ld.ub	r2,r3[0x3]
80005fec:	80 00       	ld.sh	r0,r0[0x0]
80005fee:	62 d0       	ld.w	r0,r1[0x34]

80005ff0 <udi_cdc_setup_to_port>:

//-------------------------------------------------
//------- Internal routines to control serial line

static uint8_t udi_cdc_setup_to_port(void)
{
80005ff0:	eb cd 40 80 	pushm	r7,lr
80005ff4:	1a 97       	mov	r7,sp
80005ff6:	20 1d       	sub	sp,4
	uint8_t port;

	switch (udd_g_ctrlreq.req.wIndex & 0xFF) {
80005ff8:	48 a8       	lddpc	r8,80006020 <udi_cdc_setup_to_port+0x30>
80005ffa:	90 28       	ld.sh	r8,r8[0x4]
80005ffc:	5c 78       	castu.h	r8
80005ffe:	f1 d8 c0 08 	bfextu	r8,r8,0x0,0x8
80006002:	c0 51       	brne	8000600c <udi_cdc_setup_to_port+0x1c>
#define UDI_CDC_IFACE_COMM_TO_PORT(iface, unused) \
	case UDI_CDC_COMM_IFACE_NUMBER_##iface: \
		port = iface; \
		break;
	MREPEAT(UDI_CDC_PORT_NB, UDI_CDC_IFACE_COMM_TO_PORT, ~)
80006004:	30 08       	mov	r8,0
80006006:	ef 68 ff ff 	st.b	r7[-1],r8
8000600a:	c0 48       	rjmp	80006012 <udi_cdc_setup_to_port+0x22>
#undef UDI_CDC_IFACE_COMM_TO_PORT
	default:
		port = 0;
8000600c:	30 08       	mov	r8,0
8000600e:	ef 68 ff ff 	st.b	r7[-1],r8
		break;
	}
	return port;
80006012:	ef 38 ff ff 	ld.ub	r8,r7[-1]
}
80006016:	10 9c       	mov	r12,r8
80006018:	2f fd       	sub	sp,-4
8000601a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000601e:	00 00       	add	r0,r0
80006020:	00 00       	add	r0,r0
80006022:	0b 24       	ld.uh	r4,r5++

80006024 <udi_cdc_line_coding_received>:

static void udi_cdc_line_coding_received(void)
{
80006024:	eb cd 40 80 	pushm	r7,lr
80006028:	1a 97       	mov	r7,sp
8000602a:	20 1d       	sub	sp,4
	uint8_t port = udi_cdc_setup_to_port();
8000602c:	f0 1f 00 04 	mcall	8000603c <udi_cdc_line_coding_received+0x18>
80006030:	18 98       	mov	r8,r12
80006032:	ef 68 ff ff 	st.b	r7[-1],r8
	UNUSED(port);

	UDI_CDC_SET_CODING_EXT(port, (&udi_cdc_line_coding[port]));
}
80006036:	2f fd       	sub	sp,-4
80006038:	e3 cd 80 80 	ldm	sp++,r7,pc
8000603c:	80 00       	ld.sh	r0,r0[0x0]
8000603e:	5f f0       	sral	r0

80006040 <udi_cdc_rx_start>:
//-------------------------------------------------
//------- Internal routines to process data transfer


static bool udi_cdc_rx_start(uint8_t port)
{
80006040:	eb cd 40 80 	pushm	r7,lr
80006044:	1a 97       	mov	r7,sp
80006046:	20 3d       	sub	sp,12
80006048:	18 98       	mov	r8,r12
8000604a:	ef 68 ff f4 	st.b	r7[-12],r8
	irqflags_t flags;
	uint8_t buf_sel_trans;
	udd_ep_id_t ep;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
8000604e:	30 08       	mov	r8,0
80006050:	ef 68 ff f4 	st.b	r7[-12],r8
#endif

	flags = cpu_irq_save();
80006054:	f0 1f 00 39 	mcall	80006138 <udi_cdc_rx_start+0xf8>
80006058:	18 98       	mov	r8,r12
8000605a:	ef 48 ff f8 	st.w	r7[-8],r8
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
8000605e:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80006062:	4b 79       	lddpc	r9,8000613c <udi_cdc_rx_start+0xfc>
80006064:	f2 08 07 08 	ld.ub	r8,r9[r8]
80006068:	ef 68 ff fe 	st.b	r7[-2],r8
	if (udi_cdc_rx_trans_ongoing[port] ||
8000606c:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80006070:	4b 49       	lddpc	r9,80006140 <udi_cdc_rx_start+0x100>
80006072:	f2 08 07 08 	ld.ub	r8,r9[r8]
80006076:	5c 58       	castu.b	r8
80006078:	c1 61       	brne	800060a4 <udi_cdc_rx_start+0x64>
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
8000607a:	ef 39 ff f4 	ld.ub	r9,r7[-12]
8000607e:	4b 28       	lddpc	r8,80006144 <udi_cdc_rx_start+0x104>
80006080:	f0 09 04 18 	ld.sh	r8,r8[r9<<0x1]
80006084:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
80006088:	ef 3b ff f4 	ld.ub	r11,r7[-12]
8000608c:	ef 3a ff fe 	ld.ub	r10,r7[-2]
80006090:	4a e8       	lddpc	r8,80006148 <udi_cdc_rx_start+0x108>
80006092:	a1 7b       	lsl	r11,0x1
80006094:	f6 0a 00 0a 	add	r10,r11,r10
80006098:	f0 0a 04 18 	ld.sh	r8,r8[r10<<0x1]
8000609c:	5c 88       	casts.h	r8
	port = 0;
#endif

	flags = cpu_irq_save();
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
	if (udi_cdc_rx_trans_ongoing[port] ||
8000609e:	f0 09 19 00 	cp.h	r9,r8
800060a2:	c0 72       	brcc	800060b0 <udi_cdc_rx_start+0x70>
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
		// Transfer already on-going or current buffer no empty
		cpu_irq_restore(flags);
800060a4:	ee fc ff f8 	ld.w	r12,r7[-8]
800060a8:	f0 1f 00 29 	mcall	8000614c <udi_cdc_rx_start+0x10c>
		return false;
800060ac:	30 08       	mov	r8,0
800060ae:	c4 08       	rjmp	8000612e <udi_cdc_rx_start+0xee>
	}

	// Change current buffer
	udi_cdc_rx_pos[port] = 0;
800060b0:	ef 3a ff f4 	ld.ub	r10,r7[-12]
800060b4:	4a 49       	lddpc	r9,80006144 <udi_cdc_rx_start+0x104>
800060b6:	30 08       	mov	r8,0
800060b8:	f2 0a 0a 18 	st.h	r9[r10<<0x1],r8
	udi_cdc_rx_buf_sel[port] = (buf_sel_trans==0)?1:0;
800060bc:	ef 3a ff f4 	ld.ub	r10,r7[-12]
800060c0:	ef 39 ff fe 	ld.ub	r9,r7[-2]
800060c4:	30 08       	mov	r8,0
800060c6:	f0 09 18 00 	cp.b	r9,r8
800060ca:	5f 08       	sreq	r8
800060cc:	49 c9       	lddpc	r9,8000613c <udi_cdc_rx_start+0xfc>
800060ce:	f2 0a 0b 08 	st.b	r9[r10],r8

	// Start transfer on RX
	udi_cdc_rx_trans_ongoing[port] = true;
800060d2:	ef 39 ff f4 	ld.ub	r9,r7[-12]
800060d6:	49 ba       	lddpc	r10,80006140 <udi_cdc_rx_start+0x100>
800060d8:	30 18       	mov	r8,1
800060da:	f4 09 0b 08 	st.b	r10[r9],r8
	cpu_irq_restore(flags);
800060de:	ee fc ff f8 	ld.w	r12,r7[-8]
800060e2:	f0 1f 00 1b 	mcall	8000614c <udi_cdc_rx_start+0x10c>

	if (udi_cdc_multi_is_rx_ready(port)) {
800060e6:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800060ea:	10 9c       	mov	r12,r8
800060ec:	f0 1f 00 19 	mcall	80006150 <udi_cdc_rx_start+0x110>
		UDI_CDC_RX_NOTIFY(port);
	}
	// Send the buffer with enable of short packet
	switch (port) {
800060f0:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800060f4:	58 08       	cp.w	r8,0
800060f6:	c0 51       	brne	80006100 <udi_cdc_rx_start+0xc0>
#define UDI_CDC_PORT_TO_DATA_EP_OUT(index, unused) \
	case index: \
		ep = UDI_CDC_DATA_EP_OUT_##index; \
		break;
	MREPEAT(UDI_CDC_PORT_NB, UDI_CDC_PORT_TO_DATA_EP_OUT, ~)
800060f8:	30 28       	mov	r8,2
800060fa:	ef 68 ff ff 	st.b	r7[-1],r8
800060fe:	c0 48       	rjmp	80006106 <udi_cdc_rx_start+0xc6>
#undef UDI_CDC_PORT_TO_DATA_EP_OUT
	default:
		ep = UDI_CDC_DATA_EP_OUT_0;
80006100:	30 28       	mov	r8,2
80006102:	ef 68 ff ff 	st.b	r7[-1],r8
		break;
	}
	return udd_ep_run(ep,
80006106:	49 49       	lddpc	r9,80006154 <udi_cdc_rx_start+0x114>
80006108:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000610c:	f0 0a 15 01 	lsl	r10,r8,0x1
80006110:	ef 38 ff fe 	ld.ub	r8,r7[-2]
80006114:	f4 08 00 08 	add	r8,r10,r8
80006118:	a7 68       	lsl	r8,0x6
8000611a:	f2 08 00 0a 	add	r10,r9,r8
8000611e:	ef 3c ff ff 	ld.ub	r12,r7[-1]
80006122:	48 e8       	lddpc	r8,80006158 <udi_cdc_rx_start+0x118>
80006124:	34 09       	mov	r9,64
80006126:	30 1b       	mov	r11,1
80006128:	f0 1f 00 0d 	mcall	8000615c <udi_cdc_rx_start+0x11c>
8000612c:	18 98       	mov	r8,r12
			true,
			udi_cdc_rx_buf[port][buf_sel_trans],
			UDI_CDC_RX_BUFFERS,
			udi_cdc_data_received);
}
8000612e:	10 9c       	mov	r12,r8
80006130:	2f dd       	sub	sp,-12
80006132:	e3 cd 80 80 	ldm	sp++,r7,pc
80006136:	00 00       	add	r0,r0
80006138:	80 00       	ld.sh	r0,r0[0x0]
8000613a:	5b 64       	cp.w	r4,-10
8000613c:	00 00       	add	r0,r0
8000613e:	07 10       	ld.sh	r0,r3++
80006140:	00 00       	add	r0,r0
80006142:	07 18       	ld.sh	r8,r3++
80006144:	00 00       	add	r0,r0
80006146:	07 14       	ld.sh	r4,r3++
80006148:	00 00       	add	r0,r0
8000614a:	07 0c       	ld.w	r12,r3++
8000614c:	80 00       	ld.sh	r0,r0[0x0]
8000614e:	5b a4       	cp.w	r4,-6
80006150:	80 00       	ld.sh	r0,r0[0x0]
80006152:	65 8c       	ld.w	r12,r2[0x60]
80006154:	00 00       	add	r0,r0
80006156:	06 8c       	andn	r12,r3
80006158:	80 00       	ld.sh	r0,r0[0x0]
8000615a:	61 60       	ld.w	r0,r0[0x58]
8000615c:	80 00       	ld.sh	r0,r0[0x0]
8000615e:	4b 60       	lddpc	r0,80006234 <udi_cdc_data_sent>

80006160 <udi_cdc_data_received>:


static void udi_cdc_data_received(udd_ep_status_t status, iram_size_t n, udd_ep_id_t ep)
{
80006160:	eb cd 40 80 	pushm	r7,lr
80006164:	1a 97       	mov	r7,sp
80006166:	20 4d       	sub	sp,16
80006168:	ef 4c ff f8 	st.w	r7[-8],r12
8000616c:	ef 4b ff f4 	st.w	r7[-12],r11
80006170:	14 98       	mov	r8,r10
80006172:	ef 68 ff f0 	st.b	r7[-16],r8
	uint8_t buf_sel_trans;
	uint8_t port;

	switch (ep) {
80006176:	ef 38 ff f0 	ld.ub	r8,r7[-16]
8000617a:	58 28       	cp.w	r8,2
8000617c:	c0 51       	brne	80006186 <udi_cdc_data_received+0x26>
#define UDI_CDC_DATA_EP_OUT_TO_PORT(index, unused) \
	case UDI_CDC_DATA_EP_OUT_##index: \
		port = index; \
		break;
	MREPEAT(UDI_CDC_PORT_NB, UDI_CDC_DATA_EP_OUT_TO_PORT, ~)
8000617e:	30 08       	mov	r8,0
80006180:	ef 68 ff ff 	st.b	r7[-1],r8
80006184:	c0 48       	rjmp	8000618c <udi_cdc_data_received+0x2c>
#undef UDI_CDC_DATA_EP_OUT_TO_PORT
	default:
		port = 0;
80006186:	30 08       	mov	r8,0
80006188:	ef 68 ff ff 	st.b	r7[-1],r8
		break;
	}

	if (UDD_EP_TRANSFER_OK != status) {
8000618c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006190:	58 08       	cp.w	r8,0
80006192:	c4 01       	brne	80006212 <udi_cdc_data_received+0xb2>
		// Abort reception
		return;
	}
	buf_sel_trans = (udi_cdc_rx_buf_sel[port]==0)?1:0;
80006194:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80006198:	4a 19       	lddpc	r9,8000621c <udi_cdc_data_received+0xbc>
8000619a:	f2 08 07 08 	ld.ub	r8,r9[r8]
8000619e:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800061a2:	30 08       	mov	r8,0
800061a4:	f0 09 18 00 	cp.b	r9,r8
800061a8:	5f 08       	sreq	r8
800061aa:	ef 68 ff fe 	st.b	r7[-2],r8
	if (!n) {
800061ae:	ee f8 ff f4 	ld.w	r8,r7[-12]
800061b2:	58 08       	cp.w	r8,0
800061b4:	c1 61       	brne	800061e0 <udi_cdc_data_received+0x80>
		udd_ep_run( ep,
800061b6:	49 b9       	lddpc	r9,80006220 <udi_cdc_data_received+0xc0>
800061b8:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800061bc:	f0 0a 15 01 	lsl	r10,r8,0x1
800061c0:	ef 38 ff fe 	ld.ub	r8,r7[-2]
800061c4:	f4 08 00 08 	add	r8,r10,r8
800061c8:	a7 68       	lsl	r8,0x6
800061ca:	f2 08 00 0a 	add	r10,r9,r8
800061ce:	ef 3c ff f0 	ld.ub	r12,r7[-16]
800061d2:	fe c8 00 72 	sub	r8,pc,114
800061d6:	34 09       	mov	r9,64
800061d8:	30 1b       	mov	r11,1
800061da:	f0 1f 00 13 	mcall	80006224 <udi_cdc_data_received+0xc4>
				true,
				udi_cdc_rx_buf[port][buf_sel_trans],
				UDI_CDC_RX_BUFFERS,
				udi_cdc_data_received);
		return;
800061de:	c1 b8       	rjmp	80006214 <udi_cdc_data_received+0xb4>
	}
	udi_cdc_rx_buf_nb[port][buf_sel_trans] = n;
800061e0:	ef 3b ff ff 	ld.ub	r11,r7[-1]
800061e4:	ef 3a ff fe 	ld.ub	r10,r7[-2]
800061e8:	ee f8 ff f4 	ld.w	r8,r7[-12]
800061ec:	5c 88       	casts.h	r8
800061ee:	48 f9       	lddpc	r9,80006228 <udi_cdc_data_received+0xc8>
800061f0:	a1 7b       	lsl	r11,0x1
800061f2:	f6 0a 00 0a 	add	r10,r11,r10
800061f6:	f2 0a 0a 18 	st.h	r9[r10<<0x1],r8
	udi_cdc_rx_trans_ongoing[port] = false;
800061fa:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800061fe:	48 ca       	lddpc	r10,8000622c <udi_cdc_data_received+0xcc>
80006200:	30 08       	mov	r8,0
80006202:	f4 09 0b 08 	st.b	r10[r9],r8
	udi_cdc_rx_start(port);
80006206:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000620a:	10 9c       	mov	r12,r8
8000620c:	f0 1f 00 09 	mcall	80006230 <udi_cdc_data_received+0xd0>
80006210:	c0 28       	rjmp	80006214 <udi_cdc_data_received+0xb4>
		break;
	}

	if (UDD_EP_TRANSFER_OK != status) {
		// Abort reception
		return;
80006212:	d7 03       	nop
		return;
	}
	udi_cdc_rx_buf_nb[port][buf_sel_trans] = n;
	udi_cdc_rx_trans_ongoing[port] = false;
	udi_cdc_rx_start(port);
}
80006214:	2f cd       	sub	sp,-16
80006216:	e3 cd 80 80 	ldm	sp++,r7,pc
8000621a:	00 00       	add	r0,r0
8000621c:	00 00       	add	r0,r0
8000621e:	07 10       	ld.sh	r0,r3++
80006220:	00 00       	add	r0,r0
80006222:	06 8c       	andn	r12,r3
80006224:	80 00       	ld.sh	r0,r0[0x0]
80006226:	4b 60       	lddpc	r0,800062fc <udi_cdc_tx_send+0x2c>
80006228:	00 00       	add	r0,r0
8000622a:	07 0c       	ld.w	r12,r3++
8000622c:	00 00       	add	r0,r0
8000622e:	07 18       	ld.sh	r8,r3++
80006230:	80 00       	ld.sh	r0,r0[0x0]
80006232:	60 40       	ld.w	r0,r0[0x10]

80006234 <udi_cdc_data_sent>:


static void udi_cdc_data_sent(udd_ep_status_t status, iram_size_t n, udd_ep_id_t ep)
{
80006234:	eb cd 40 80 	pushm	r7,lr
80006238:	1a 97       	mov	r7,sp
8000623a:	20 4d       	sub	sp,16
8000623c:	ef 4c ff f8 	st.w	r7[-8],r12
80006240:	ef 4b ff f4 	st.w	r7[-12],r11
80006244:	14 98       	mov	r8,r10
80006246:	ef 68 ff f0 	st.b	r7[-16],r8
	uint8_t port;
	UNUSED(n);

	switch (ep) {
8000624a:	ef 38 ff f0 	ld.ub	r8,r7[-16]
8000624e:	e0 48 00 81 	cp.w	r8,129
80006252:	c0 51       	brne	8000625c <udi_cdc_data_sent+0x28>
#define UDI_CDC_DATA_EP_IN_TO_PORT(index, unused) \
	case UDI_CDC_DATA_EP_IN_##index: \
		port = index; \
		break;
	MREPEAT(UDI_CDC_PORT_NB, UDI_CDC_DATA_EP_IN_TO_PORT, ~)
80006254:	30 08       	mov	r8,0
80006256:	ef 68 ff ff 	st.b	r7[-1],r8
8000625a:	c0 48       	rjmp	80006262 <udi_cdc_data_sent+0x2e>
#undef UDI_CDC_DATA_EP_IN_TO_PORT
	default:
		port = 0;
8000625c:	30 08       	mov	r8,0
8000625e:	ef 68 ff ff 	st.b	r7[-1],r8
		break;
	}

	if (UDD_EP_TRANSFER_OK != status) {
80006262:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006266:	58 08       	cp.w	r8,0
80006268:	c2 61       	brne	800062b4 <udi_cdc_data_sent+0x80>
		// Abort transfer
		return;
	}
	udi_cdc_tx_buf_nb[port][(udi_cdc_tx_buf_sel[port]==0)?1:0] = 0;
8000626a:	ef 3a ff ff 	ld.ub	r10,r7[-1]
8000626e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80006272:	49 39       	lddpc	r9,800062bc <udi_cdc_data_sent+0x88>
80006274:	f2 08 07 08 	ld.ub	r8,r9[r8]
80006278:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8000627c:	30 08       	mov	r8,0
8000627e:	f0 09 18 00 	cp.b	r9,r8
80006282:	5f 08       	sreq	r8
80006284:	48 f9       	lddpc	r9,800062c0 <udi_cdc_data_sent+0x8c>
80006286:	a1 7a       	lsl	r10,0x1
80006288:	10 0a       	add	r10,r8
8000628a:	30 08       	mov	r8,0
8000628c:	f2 0a 0a 18 	st.h	r9[r10<<0x1],r8
	udi_cdc_tx_both_buf_to_send[port] = false;
80006290:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80006294:	48 ca       	lddpc	r10,800062c4 <udi_cdc_data_sent+0x90>
80006296:	30 08       	mov	r8,0
80006298:	f4 09 0b 08 	st.b	r10[r9],r8
	udi_cdc_tx_trans_ongoing[port] = false;
8000629c:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800062a0:	48 aa       	lddpc	r10,800062c8 <udi_cdc_data_sent+0x94>
800062a2:	30 08       	mov	r8,0
800062a4:	f4 09 0b 08 	st.b	r10[r9],r8

	if (n != 0) {
		UDI_CDC_TX_EMPTY_NOTIFY(port);
	}
	udi_cdc_tx_send(port);
800062a8:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800062ac:	10 9c       	mov	r12,r8
800062ae:	f0 1f 00 08 	mcall	800062cc <udi_cdc_data_sent+0x98>
800062b2:	c0 28       	rjmp	800062b6 <udi_cdc_data_sent+0x82>
		break;
	}

	if (UDD_EP_TRANSFER_OK != status) {
		// Abort transfer
		return;
800062b4:	d7 03       	nop

	if (n != 0) {
		UDI_CDC_TX_EMPTY_NOTIFY(port);
	}
	udi_cdc_tx_send(port);
}
800062b6:	2f cd       	sub	sp,-16
800062b8:	e3 cd 80 80 	ldm	sp++,r7,pc
800062bc:	00 00       	add	r0,r0
800062be:	07 a0       	ld.ub	r0,r3[0x2]
800062c0:	00 00       	add	r0,r0
800062c2:	07 9c       	ld.ub	r12,r3[0x1]
800062c4:	00 00       	add	r0,r0
800062c6:	07 ac       	ld.ub	r12,r3[0x2]
800062c8:	00 00       	add	r0,r0
800062ca:	07 a8       	ld.ub	r8,r3[0x2]
800062cc:	80 00       	ld.sh	r0,r0[0x0]
800062ce:	62 d0       	ld.w	r0,r1[0x34]

800062d0 <udi_cdc_tx_send>:


static void udi_cdc_tx_send(uint8_t port)
{
800062d0:	eb cd 40 c0 	pushm	r6-r7,lr
800062d4:	1a 97       	mov	r7,sp
800062d6:	20 3d       	sub	sp,12
800062d8:	18 98       	mov	r8,r12
800062da:	ef 68 ff f4 	st.b	r7[-12],r8
	bool b_short_packet;
	udd_ep_id_t ep;
	static uint16_t sof_zlp_counter = 0;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
800062de:	30 08       	mov	r8,0
800062e0:	ef 68 ff f4 	st.b	r7[-12],r8
#endif

	if (udi_cdc_tx_trans_ongoing[port]) {
800062e4:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800062e8:	4f a9       	lddpc	r9,800064d0 <udi_cdc_tx_send+0x200>
800062ea:	f2 08 07 08 	ld.ub	r8,r9[r8]
800062ee:	5c 58       	castu.b	r8
800062f0:	e0 81 00 e9 	brne	800064c2 <udi_cdc_tx_send+0x1f2>
		return; // Already on going or wait next SOF to send next data
	}
	if (udd_is_high_speed()) {
800062f4:	f0 1f 00 78 	mcall	800064d4 <udi_cdc_tx_send+0x204>
800062f8:	18 98       	mov	r8,r12
800062fa:	58 08       	cp.w	r8,0
800062fc:	c0 e0       	breq	80006318 <udi_cdc_tx_send+0x48>
		if (udi_cdc_tx_sof_num[port] == udd_get_micro_frame_number()) {
800062fe:	ef 39 ff f4 	ld.ub	r9,r7[-12]
80006302:	4f 68       	lddpc	r8,800064d8 <udi_cdc_tx_send+0x208>
80006304:	f0 09 04 16 	ld.sh	r6,r8[r9<<0x1]
80006308:	f0 1f 00 75 	mcall	800064dc <udi_cdc_tx_send+0x20c>
8000630c:	18 98       	mov	r8,r12
8000630e:	5c 88       	casts.h	r8
80006310:	f0 06 19 00 	cp.h	r6,r8
80006314:	c0 f1       	brne	80006332 <udi_cdc_tx_send+0x62>
			return; // Wait next SOF to send next data
80006316:	cd 98       	rjmp	800064c8 <udi_cdc_tx_send+0x1f8>
		}
	}else{
		if (udi_cdc_tx_sof_num[port] == udd_get_frame_number()) {
80006318:	ef 39 ff f4 	ld.ub	r9,r7[-12]
8000631c:	4e f8       	lddpc	r8,800064d8 <udi_cdc_tx_send+0x208>
8000631e:	f0 09 04 16 	ld.sh	r6,r8[r9<<0x1]
80006322:	f0 1f 00 70 	mcall	800064e0 <udi_cdc_tx_send+0x210>
80006326:	18 98       	mov	r8,r12
80006328:	5c 88       	casts.h	r8
8000632a:	f0 06 19 00 	cp.h	r6,r8
8000632e:	e0 80 00 cc 	breq	800064c6 <udi_cdc_tx_send+0x1f6>
			return; // Wait next SOF to send next data
		}
	}

	flags = cpu_irq_save(); // to protect udi_cdc_tx_buf_sel
80006332:	f0 1f 00 6d 	mcall	800064e4 <udi_cdc_tx_send+0x214>
80006336:	18 98       	mov	r8,r12
80006338:	ef 48 ff f8 	st.w	r7[-8],r8
	buf_sel_trans = udi_cdc_tx_buf_sel[port];
8000633c:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80006340:	4e a9       	lddpc	r9,800064e8 <udi_cdc_tx_send+0x218>
80006342:	f2 08 07 08 	ld.ub	r8,r9[r8]
80006346:	ef 68 ff fd 	st.b	r7[-3],r8
	if (udi_cdc_tx_buf_nb[port][buf_sel_trans] == 0) {
8000634a:	ef 3a ff f4 	ld.ub	r10,r7[-12]
8000634e:	ef 39 ff fd 	ld.ub	r9,r7[-3]
80006352:	4e 78       	lddpc	r8,800064ec <udi_cdc_tx_send+0x21c>
80006354:	a1 7a       	lsl	r10,0x1
80006356:	f4 09 00 09 	add	r9,r10,r9
8000635a:	f0 09 04 18 	ld.sh	r8,r8[r9<<0x1]
8000635e:	58 08       	cp.w	r8,0
80006360:	c2 71       	brne	800063ae <udi_cdc_tx_send+0xde>
		sof_zlp_counter++;
80006362:	4e 48       	lddpc	r8,800064f0 <udi_cdc_tx_send+0x220>
80006364:	90 08       	ld.sh	r8,r8[0x0]
80006366:	2f f8       	sub	r8,-1
80006368:	5c 88       	casts.h	r8
8000636a:	4e 29       	lddpc	r9,800064f0 <udi_cdc_tx_send+0x220>
8000636c:	b2 08       	st.h	r9[0x0],r8
		if (((!udd_is_high_speed()) && (sof_zlp_counter < 100))
8000636e:	f0 1f 00 5a 	mcall	800064d4 <udi_cdc_tx_send+0x204>
80006372:	18 98       	mov	r8,r12
80006374:	ec 18 00 01 	eorl	r8,0x1
80006378:	5c 58       	castu.b	r8
8000637a:	c0 80       	breq	8000638a <udi_cdc_tx_send+0xba>
8000637c:	4d d8       	lddpc	r8,800064f0 <udi_cdc_tx_send+0x220>
8000637e:	90 09       	ld.sh	r9,r8[0x0]
80006380:	36 38       	mov	r8,99
80006382:	f0 09 19 00 	cp.h	r9,r8
80006386:	e0 88 00 0f 	brls	800063a4 <udi_cdc_tx_send+0xd4>
8000638a:	f0 1f 00 53 	mcall	800064d4 <udi_cdc_tx_send+0x204>
8000638e:	18 98       	mov	r8,r12
80006390:	58 08       	cp.w	r8,0
80006392:	c0 e0       	breq	800063ae <udi_cdc_tx_send+0xde>
				|| (udd_is_high_speed() && (sof_zlp_counter < 800))) {
80006394:	4d 78       	lddpc	r8,800064f0 <udi_cdc_tx_send+0x220>
80006396:	90 09       	ld.sh	r9,r8[0x0]

	flags = cpu_irq_save(); // to protect udi_cdc_tx_buf_sel
	buf_sel_trans = udi_cdc_tx_buf_sel[port];
	if (udi_cdc_tx_buf_nb[port][buf_sel_trans] == 0) {
		sof_zlp_counter++;
		if (((!udd_is_high_speed()) && (sof_zlp_counter < 100))
80006398:	e0 68 03 1f 	mov	r8,799
8000639c:	f0 09 19 00 	cp.h	r9,r8
800063a0:	e0 8b 00 07 	brhi	800063ae <udi_cdc_tx_send+0xde>
				|| (udd_is_high_speed() && (sof_zlp_counter < 800))) {
			cpu_irq_restore(flags);
800063a4:	ee fc ff f8 	ld.w	r12,r7[-8]
800063a8:	f0 1f 00 53 	mcall	800064f4 <udi_cdc_tx_send+0x224>
			return;
800063ac:	c8 e8       	rjmp	800064c8 <udi_cdc_tx_send+0x1f8>
		}
	}
	sof_zlp_counter = 0;
800063ae:	4d 19       	lddpc	r9,800064f0 <udi_cdc_tx_send+0x220>
800063b0:	30 08       	mov	r8,0
800063b2:	b2 08       	st.h	r9[0x0],r8

	if (!udi_cdc_tx_both_buf_to_send[port]) {
800063b4:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800063b8:	4d 09       	lddpc	r9,800064f8 <udi_cdc_tx_send+0x228>
800063ba:	f2 08 07 08 	ld.ub	r8,r9[r8]
800063be:	5c 58       	castu.b	r8
800063c0:	ec 18 00 01 	eorl	r8,0x1
800063c4:	5c 58       	castu.b	r8
800063c6:	c0 d0       	breq	800063e0 <udi_cdc_tx_send+0x110>
		// Send current Buffer
		// and switch the current buffer
		udi_cdc_tx_buf_sel[port] = (buf_sel_trans==0)?1:0;
800063c8:	ef 3a ff f4 	ld.ub	r10,r7[-12]
800063cc:	ef 39 ff fd 	ld.ub	r9,r7[-3]
800063d0:	30 08       	mov	r8,0
800063d2:	f0 09 18 00 	cp.b	r9,r8
800063d6:	5f 08       	sreq	r8
800063d8:	4c 49       	lddpc	r9,800064e8 <udi_cdc_tx_send+0x218>
800063da:	f2 0a 0b 08 	st.b	r9[r10],r8
800063de:	c0 98       	rjmp	800063f0 <udi_cdc_tx_send+0x120>
	}else{
		// Send the other Buffer
		// and no switch the current buffer
		buf_sel_trans = (buf_sel_trans==0)?1:0;
800063e0:	ef 39 ff fd 	ld.ub	r9,r7[-3]
800063e4:	30 08       	mov	r8,0
800063e6:	f0 09 18 00 	cp.b	r9,r8
800063ea:	5f 08       	sreq	r8
800063ec:	ef 68 ff fd 	st.b	r7[-3],r8
	}
	udi_cdc_tx_trans_ongoing[port] = true;
800063f0:	ef 39 ff f4 	ld.ub	r9,r7[-12]
800063f4:	4b 7a       	lddpc	r10,800064d0 <udi_cdc_tx_send+0x200>
800063f6:	30 18       	mov	r8,1
800063f8:	f4 09 0b 08 	st.b	r10[r9],r8
	cpu_irq_restore(flags);
800063fc:	ee fc ff f8 	ld.w	r12,r7[-8]
80006400:	f0 1f 00 3d 	mcall	800064f4 <udi_cdc_tx_send+0x224>

	b_short_packet = (udi_cdc_tx_buf_nb[port][buf_sel_trans] != UDI_CDC_TX_BUFFERS);
80006404:	ef 3a ff f4 	ld.ub	r10,r7[-12]
80006408:	ef 39 ff fd 	ld.ub	r9,r7[-3]
8000640c:	4b 88       	lddpc	r8,800064ec <udi_cdc_tx_send+0x21c>
8000640e:	a1 7a       	lsl	r10,0x1
80006410:	f4 09 00 09 	add	r9,r10,r9
80006414:	f0 09 04 19 	ld.sh	r9,r8[r9<<0x1]
80006418:	34 08       	mov	r8,64
8000641a:	f0 09 19 00 	cp.h	r9,r8
8000641e:	5f 18       	srne	r8
80006420:	ef 68 ff fe 	st.b	r7[-2],r8
	if (b_short_packet) {
80006424:	ef 39 ff fe 	ld.ub	r9,r7[-2]
80006428:	30 08       	mov	r8,0
8000642a:	f0 09 18 00 	cp.b	r9,r8
8000642e:	c1 a0       	breq	80006462 <udi_cdc_tx_send+0x192>
		if (udd_is_high_speed()) {
80006430:	f0 1f 00 29 	mcall	800064d4 <udi_cdc_tx_send+0x204>
80006434:	18 98       	mov	r8,r12
80006436:	58 08       	cp.w	r8,0
80006438:	c0 b0       	breq	8000644e <udi_cdc_tx_send+0x17e>
			udi_cdc_tx_sof_num[port] = udd_get_micro_frame_number();
8000643a:	ef 36 ff f4 	ld.ub	r6,r7[-12]
8000643e:	f0 1f 00 28 	mcall	800064dc <udi_cdc_tx_send+0x20c>
80006442:	18 98       	mov	r8,r12
80006444:	5c 88       	casts.h	r8
80006446:	4a 59       	lddpc	r9,800064d8 <udi_cdc_tx_send+0x208>
80006448:	f2 06 0a 18 	st.h	r9[r6<<0x1],r8
8000644c:	c1 18       	rjmp	8000646e <udi_cdc_tx_send+0x19e>
		}else{
			udi_cdc_tx_sof_num[port] = udd_get_frame_number();
8000644e:	ef 36 ff f4 	ld.ub	r6,r7[-12]
80006452:	f0 1f 00 24 	mcall	800064e0 <udi_cdc_tx_send+0x210>
80006456:	18 98       	mov	r8,r12
80006458:	5c 88       	casts.h	r8
8000645a:	4a 09       	lddpc	r9,800064d8 <udi_cdc_tx_send+0x208>
8000645c:	f2 06 0a 18 	st.h	r9[r6<<0x1],r8
80006460:	c0 78       	rjmp	8000646e <udi_cdc_tx_send+0x19e>
		}
	}else{
		udi_cdc_tx_sof_num[port] = 0; // Force next transfer without wait SOF
80006462:	ef 3a ff f4 	ld.ub	r10,r7[-12]
80006466:	49 d9       	lddpc	r9,800064d8 <udi_cdc_tx_send+0x208>
80006468:	30 08       	mov	r8,0
8000646a:	f2 0a 0a 18 	st.h	r9[r10<<0x1],r8
	}

	// Send the buffer with enable of short packet
	switch (port) {
8000646e:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80006472:	58 08       	cp.w	r8,0
80006474:	c0 51       	brne	8000647e <udi_cdc_tx_send+0x1ae>
#define UDI_CDC_PORT_TO_DATA_EP_IN(index, unused) \
	case index: \
		ep = UDI_CDC_DATA_EP_IN_##index; \
		break;
	MREPEAT(UDI_CDC_PORT_NB, UDI_CDC_PORT_TO_DATA_EP_IN, ~)
80006476:	38 18       	mov	r8,-127
80006478:	ef 68 ff ff 	st.b	r7[-1],r8
8000647c:	c0 48       	rjmp	80006484 <udi_cdc_tx_send+0x1b4>
#undef UDI_CDC_PORT_TO_DATA_EP_IN
	default:
		ep = UDI_CDC_DATA_EP_IN_0;
8000647e:	38 18       	mov	r8,-127
80006480:	ef 68 ff ff 	st.b	r7[-1],r8
		break;
	}
	udd_ep_run( ep,
			b_short_packet,
			udi_cdc_tx_buf[port][buf_sel_trans],
			udi_cdc_tx_buf_nb[port][buf_sel_trans],
80006484:	ef 3a ff f4 	ld.ub	r10,r7[-12]
80006488:	ef 39 ff fd 	ld.ub	r9,r7[-3]
8000648c:	49 88       	lddpc	r8,800064ec <udi_cdc_tx_send+0x21c>
8000648e:	a1 7a       	lsl	r10,0x1
80006490:	f4 09 00 09 	add	r9,r10,r9
80006494:	f0 09 04 18 	ld.sh	r8,r8[r9<<0x1]
#undef UDI_CDC_PORT_TO_DATA_EP_IN
	default:
		ep = UDI_CDC_DATA_EP_IN_0;
		break;
	}
	udd_ep_run( ep,
80006498:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
8000649c:	49 8a       	lddpc	r10,800064fc <udi_cdc_tx_send+0x22c>
8000649e:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800064a2:	f0 0b 15 01 	lsl	r11,r8,0x1
800064a6:	ef 38 ff fd 	ld.ub	r8,r7[-3]
800064aa:	f6 08 00 08 	add	r8,r11,r8
800064ae:	a7 68       	lsl	r8,0x6
800064b0:	10 0a       	add	r10,r8
800064b2:	ef 3b ff fe 	ld.ub	r11,r7[-2]
800064b6:	ef 3c ff ff 	ld.ub	r12,r7[-1]
800064ba:	49 28       	lddpc	r8,80006500 <udi_cdc_tx_send+0x230>
800064bc:	f0 1f 00 12 	mcall	80006504 <udi_cdc_tx_send+0x234>
800064c0:	c0 48       	rjmp	800064c8 <udi_cdc_tx_send+0x1f8>
#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	if (udi_cdc_tx_trans_ongoing[port]) {
		return; // Already on going or wait next SOF to send next data
800064c2:	d7 03       	nop
800064c4:	c0 28       	rjmp	800064c8 <udi_cdc_tx_send+0x1f8>
		if (udi_cdc_tx_sof_num[port] == udd_get_micro_frame_number()) {
			return; // Wait next SOF to send next data
		}
	}else{
		if (udi_cdc_tx_sof_num[port] == udd_get_frame_number()) {
			return; // Wait next SOF to send next data
800064c6:	d7 03       	nop
	udd_ep_run( ep,
			b_short_packet,
			udi_cdc_tx_buf[port][buf_sel_trans],
			udi_cdc_tx_buf_nb[port][buf_sel_trans],
			udi_cdc_data_sent);
}
800064c8:	2f dd       	sub	sp,-12
800064ca:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800064ce:	00 00       	add	r0,r0
800064d0:	00 00       	add	r0,r0
800064d2:	07 a8       	ld.ub	r8,r3[0x2]
800064d4:	80 00       	ld.sh	r0,r0[0x0]
800064d6:	44 1c       	lddsp	r12,sp[0x104]
800064d8:	00 00       	add	r0,r0
800064da:	07 a4       	ld.ub	r4,r3[0x2]
800064dc:	80 00       	ld.sh	r0,r0[0x0]
800064de:	44 aa       	lddsp	r10,sp[0x128]
800064e0:	80 00       	ld.sh	r0,r0[0x0]
800064e2:	44 90       	lddsp	r0,sp[0x124]
800064e4:	80 00       	ld.sh	r0,r0[0x0]
800064e6:	5b 64       	cp.w	r4,-10
800064e8:	00 00       	add	r0,r0
800064ea:	07 a0       	ld.ub	r0,r3[0x2]
800064ec:	00 00       	add	r0,r0
800064ee:	07 9c       	ld.ub	r12,r3[0x1]
800064f0:	00 00       	add	r0,r0
800064f2:	07 b0       	ld.ub	r0,r3[0x3]
800064f4:	80 00       	ld.sh	r0,r0[0x0]
800064f6:	5b a4       	cp.w	r4,-6
800064f8:	00 00       	add	r0,r0
800064fa:	07 ac       	ld.ub	r12,r3[0x2]
800064fc:	00 00       	add	r0,r0
800064fe:	07 1c       	ld.sh	r12,r3++
80006500:	80 00       	ld.sh	r0,r0[0x0]
80006502:	62 34       	ld.w	r4,r1[0xc]
80006504:	80 00       	ld.sh	r0,r0[0x0]
80006506:	4b 60       	lddpc	r0,800065dc <udi_cdc_multi_read_buf+0xc>

80006508 <udi_cdc_multi_get_nb_received_data>:
{
	udi_cdc_ctrl_state_change(port, true, CDC_SERIAL_STATE_OVERRUN);
}

iram_size_t udi_cdc_multi_get_nb_received_data(uint8_t port)
{
80006508:	eb cd 40 80 	pushm	r7,lr
8000650c:	1a 97       	mov	r7,sp
8000650e:	20 4d       	sub	sp,16
80006510:	18 98       	mov	r8,r12
80006512:	ef 68 ff f0 	st.b	r7[-16],r8
	irqflags_t flags;
	uint16_t pos;
	iram_size_t nb_received;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
80006516:	30 08       	mov	r8,0
80006518:	ef 68 ff f0 	st.b	r7[-16],r8
#endif
	flags = cpu_irq_save();
8000651c:	f0 1f 00 17 	mcall	80006578 <udi_cdc_multi_get_nb_received_data+0x70>
80006520:	18 98       	mov	r8,r12
80006522:	ef 48 ff f4 	st.w	r7[-12],r8
	pos = udi_cdc_rx_pos[port];
80006526:	ef 39 ff f0 	ld.ub	r9,r7[-16]
8000652a:	49 58       	lddpc	r8,8000657c <udi_cdc_multi_get_nb_received_data+0x74>
8000652c:	f0 09 04 18 	ld.sh	r8,r8[r9<<0x1]
80006530:	ef 58 ff fa 	st.h	r7[-6],r8
	nb_received = udi_cdc_rx_buf_nb[port][udi_cdc_rx_buf_sel[port]] - pos;
80006534:	ef 3a ff f0 	ld.ub	r10,r7[-16]
80006538:	ef 38 ff f0 	ld.ub	r8,r7[-16]
8000653c:	49 19       	lddpc	r9,80006580 <udi_cdc_multi_get_nb_received_data+0x78>
8000653e:	f2 08 07 08 	ld.ub	r8,r9[r8]
80006542:	5c 58       	castu.b	r8
80006544:	10 99       	mov	r9,r8
80006546:	49 08       	lddpc	r8,80006584 <udi_cdc_multi_get_nb_received_data+0x7c>
80006548:	a1 7a       	lsl	r10,0x1
8000654a:	f4 09 00 09 	add	r9,r10,r9
8000654e:	f0 09 04 18 	ld.sh	r8,r8[r9<<0x1]
80006552:	5c 88       	casts.h	r8
80006554:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
80006558:	ef 18 ff fa 	ld.uh	r8,r7[-6]
8000655c:	f2 08 01 08 	sub	r8,r9,r8
80006560:	ef 48 ff fc 	st.w	r7[-4],r8
	cpu_irq_restore(flags);
80006564:	ee fc ff f4 	ld.w	r12,r7[-12]
80006568:	f0 1f 00 08 	mcall	80006588 <udi_cdc_multi_get_nb_received_data+0x80>
	return nb_received;
8000656c:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
80006570:	10 9c       	mov	r12,r8
80006572:	2f cd       	sub	sp,-16
80006574:	e3 cd 80 80 	ldm	sp++,r7,pc
80006578:	80 00       	ld.sh	r0,r0[0x0]
8000657a:	5b 64       	cp.w	r4,-10
8000657c:	00 00       	add	r0,r0
8000657e:	07 14       	ld.sh	r4,r3++
80006580:	00 00       	add	r0,r0
80006582:	07 10       	ld.sh	r0,r3++
80006584:	00 00       	add	r0,r0
80006586:	07 0c       	ld.w	r12,r3++
80006588:	80 00       	ld.sh	r0,r0[0x0]
8000658a:	5b a4       	cp.w	r4,-6

8000658c <udi_cdc_multi_is_rx_ready>:
{
	return udi_cdc_multi_get_nb_received_data(0);
}

bool udi_cdc_multi_is_rx_ready(uint8_t port)
{
8000658c:	eb cd 40 80 	pushm	r7,lr
80006590:	1a 97       	mov	r7,sp
80006592:	20 1d       	sub	sp,4
80006594:	18 98       	mov	r8,r12
80006596:	ef 68 ff fc 	st.b	r7[-4],r8
	return (udi_cdc_multi_get_nb_received_data(port) > 0);
8000659a:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000659e:	10 9c       	mov	r12,r8
800065a0:	f0 1f 00 05 	mcall	800065b4 <udi_cdc_multi_is_rx_ready+0x28>
800065a4:	18 98       	mov	r8,r12
800065a6:	58 08       	cp.w	r8,0
800065a8:	5f 18       	srne	r8
800065aa:	5c 58       	castu.b	r8
}
800065ac:	10 9c       	mov	r12,r8
800065ae:	2f fd       	sub	sp,-4
800065b0:	e3 cd 80 80 	ldm	sp++,r7,pc
800065b4:	80 00       	ld.sh	r0,r0[0x0]
800065b6:	65 08       	ld.w	r8,r2[0x40]

800065b8 <udi_cdc_is_rx_ready>:

bool udi_cdc_is_rx_ready(void)
{
800065b8:	eb cd 40 80 	pushm	r7,lr
800065bc:	1a 97       	mov	r7,sp
	return udi_cdc_multi_is_rx_ready(0);
800065be:	30 0c       	mov	r12,0
800065c0:	f0 1f 00 03 	mcall	800065cc <udi_cdc_is_rx_ready+0x14>
800065c4:	18 98       	mov	r8,r12
}
800065c6:	10 9c       	mov	r12,r8
800065c8:	e3 cd 80 80 	ldm	sp++,r7,pc
800065cc:	80 00       	ld.sh	r0,r0[0x0]
800065ce:	65 8c       	ld.w	r12,r2[0x60]

800065d0 <udi_cdc_multi_read_buf>:
{
	return udi_cdc_multi_getc(0);
}

iram_size_t udi_cdc_multi_read_buf(uint8_t port, void* buf, iram_size_t size)
{
800065d0:	eb cd 40 80 	pushm	r7,lr
800065d4:	1a 97       	mov	r7,sp
800065d6:	20 7d       	sub	sp,28
800065d8:	18 98       	mov	r8,r12
800065da:	ef 4b ff e8 	st.w	r7[-24],r11
800065de:	ef 4a ff e4 	st.w	r7[-28],r10
800065e2:	ef 68 ff ec 	st.b	r7[-20],r8
	irqflags_t flags;
	uint8_t *ptr_buf = (uint8_t *)buf;
800065e6:	ee f8 ff e8 	ld.w	r8,r7[-24]
800065ea:	ef 48 ff f4 	st.w	r7[-12],r8
	uint16_t pos;
	uint8_t buf_sel;
	bool again;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
800065ee:	30 08       	mov	r8,0
800065f0:	ef 68 ff ec 	st.b	r7[-20],r8
800065f4:	c0 48       	rjmp	800065fc <udi_cdc_multi_read_buf+0x2c>
	cpu_irq_restore(flags);
	while (again) {
		if (!udi_cdc_data_running) {
			return size;
		}
		goto udi_cdc_read_buf_loop_wait;
800065f6:	d7 03       	nop
800065f8:	c0 28       	rjmp	800065fc <udi_cdc_multi_read_buf+0x2c>
	ptr_buf += copy_nb;
	size -= copy_nb;
	udi_cdc_rx_start(port);

	if (size) {
		goto udi_cdc_read_buf_loop_wait;
800065fa:	d7 03       	nop
	port = 0;
#endif

udi_cdc_read_buf_loop_wait:
	// Check available data
	flags = cpu_irq_save();
800065fc:	f0 1f 00 50 	mcall	8000673c <udi_cdc_multi_read_buf+0x16c>
80006600:	18 98       	mov	r8,r12
80006602:	ef 48 ff f0 	st.w	r7[-16],r8
	pos = udi_cdc_rx_pos[port];
80006606:	ef 39 ff ec 	ld.ub	r9,r7[-20]
8000660a:	4c e8       	lddpc	r8,80006740 <udi_cdc_multi_read_buf+0x170>
8000660c:	f0 09 04 18 	ld.sh	r8,r8[r9<<0x1]
80006610:	ef 58 ff fc 	st.h	r7[-4],r8
	buf_sel = udi_cdc_rx_buf_sel[port];
80006614:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80006618:	4c b9       	lddpc	r9,80006744 <udi_cdc_multi_read_buf+0x174>
8000661a:	f2 08 07 08 	ld.ub	r8,r9[r8]
8000661e:	ef 68 ff fe 	st.b	r7[-2],r8
	again = pos >= udi_cdc_rx_buf_nb[port][buf_sel];
80006622:	ef 3a ff ec 	ld.ub	r10,r7[-20]
80006626:	ef 39 ff fe 	ld.ub	r9,r7[-2]
8000662a:	4c 88       	lddpc	r8,80006748 <udi_cdc_multi_read_buf+0x178>
8000662c:	a1 7a       	lsl	r10,0x1
8000662e:	f4 09 00 09 	add	r9,r10,r9
80006632:	f0 09 04 18 	ld.sh	r8,r8[r9<<0x1]
80006636:	5c 88       	casts.h	r8
80006638:	ef 09 ff fc 	ld.sh	r9,r7[-4]
8000663c:	f0 09 19 00 	cp.h	r9,r8
80006640:	5f 28       	srhs	r8
80006642:	ef 68 ff ff 	st.b	r7[-1],r8
	cpu_irq_restore(flags);
80006646:	ee fc ff f0 	ld.w	r12,r7[-16]
8000664a:	f0 1f 00 41 	mcall	8000674c <udi_cdc_multi_read_buf+0x17c>
	while (again) {
8000664e:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80006652:	30 08       	mov	r8,0
80006654:	f0 09 18 00 	cp.b	r9,r8
80006658:	c0 b0       	breq	8000666e <udi_cdc_multi_read_buf+0x9e>
		if (!udi_cdc_data_running) {
8000665a:	4b e8       	lddpc	r8,80006750 <udi_cdc_multi_read_buf+0x180>
8000665c:	11 88       	ld.ub	r8,r8[0x0]
8000665e:	5c 58       	castu.b	r8
80006660:	ec 18 00 01 	eorl	r8,0x1
80006664:	5c 58       	castu.b	r8
80006666:	cc 80       	breq	800065f6 <udi_cdc_multi_read_buf+0x26>
			return size;
80006668:	ee f8 ff e4 	ld.w	r8,r7[-28]
8000666c:	c6 38       	rjmp	80006732 <udi_cdc_multi_read_buf+0x162>
		}
		goto udi_cdc_read_buf_loop_wait;
	}

	// Read data
	copy_nb = udi_cdc_rx_buf_nb[port][buf_sel] - pos;
8000666e:	ef 3a ff ec 	ld.ub	r10,r7[-20]
80006672:	ef 39 ff fe 	ld.ub	r9,r7[-2]
80006676:	4b 58       	lddpc	r8,80006748 <udi_cdc_multi_read_buf+0x178>
80006678:	a1 7a       	lsl	r10,0x1
8000667a:	f4 09 00 09 	add	r9,r10,r9
8000667e:	f0 09 04 18 	ld.sh	r8,r8[r9<<0x1]
80006682:	5c 88       	casts.h	r8
80006684:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
80006688:	ef 18 ff fc 	ld.uh	r8,r7[-4]
8000668c:	f2 08 01 08 	sub	r8,r9,r8
80006690:	ef 48 ff f8 	st.w	r7[-8],r8
	if (copy_nb>size) {
80006694:	ee f9 ff f8 	ld.w	r9,r7[-8]
80006698:	ee f8 ff e4 	ld.w	r8,r7[-28]
8000669c:	10 39       	cp.w	r9,r8
8000669e:	e0 88 00 06 	brls	800066aa <udi_cdc_multi_read_buf+0xda>
		copy_nb = size;
800066a2:	ee f8 ff e4 	ld.w	r8,r7[-28]
800066a6:	ef 48 ff f8 	st.w	r7[-8],r8
	}
	memcpy(ptr_buf, &udi_cdc_rx_buf[port][buf_sel][pos], copy_nb);
800066aa:	ef 38 ff ec 	ld.ub	r8,r7[-20]
800066ae:	f0 09 15 01 	lsl	r9,r8,0x1
800066b2:	ef 38 ff fe 	ld.ub	r8,r7[-2]
800066b6:	f2 08 00 08 	add	r8,r9,r8
800066ba:	f0 09 15 06 	lsl	r9,r8,0x6
800066be:	ef 18 ff fc 	ld.uh	r8,r7[-4]
800066c2:	10 09       	add	r9,r8
800066c4:	4a 48       	lddpc	r8,80006754 <udi_cdc_multi_read_buf+0x184>
800066c6:	f2 08 00 08 	add	r8,r9,r8
800066ca:	ee fa ff f8 	ld.w	r10,r7[-8]
800066ce:	10 9b       	mov	r11,r8
800066d0:	ee fc ff f4 	ld.w	r12,r7[-12]
800066d4:	f0 1f 00 21 	mcall	80006758 <udi_cdc_multi_read_buf+0x188>
	udi_cdc_rx_pos[port] += copy_nb;
800066d8:	ef 3a ff ec 	ld.ub	r10,r7[-20]
800066dc:	ef 39 ff ec 	ld.ub	r9,r7[-20]
800066e0:	49 88       	lddpc	r8,80006740 <udi_cdc_multi_read_buf+0x170>
800066e2:	f0 09 04 18 	ld.sh	r8,r8[r9<<0x1]
800066e6:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
800066ea:	ee f8 ff f8 	ld.w	r8,r7[-8]
800066ee:	5c 88       	casts.h	r8
800066f0:	f2 08 00 08 	add	r8,r9,r8
800066f4:	5c 88       	casts.h	r8
800066f6:	49 39       	lddpc	r9,80006740 <udi_cdc_multi_read_buf+0x170>
800066f8:	f2 0a 0a 18 	st.h	r9[r10<<0x1],r8
	ptr_buf += copy_nb;
800066fc:	ee f9 ff f4 	ld.w	r9,r7[-12]
80006700:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006704:	f2 08 00 08 	add	r8,r9,r8
80006708:	ef 48 ff f4 	st.w	r7[-12],r8
	size -= copy_nb;
8000670c:	ee f9 ff e4 	ld.w	r9,r7[-28]
80006710:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006714:	f2 08 01 08 	sub	r8,r9,r8
80006718:	ef 48 ff e4 	st.w	r7[-28],r8
	udi_cdc_rx_start(port);
8000671c:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80006720:	10 9c       	mov	r12,r8
80006722:	f0 1f 00 0f 	mcall	8000675c <udi_cdc_multi_read_buf+0x18c>

	if (size) {
80006726:	ee f8 ff e4 	ld.w	r8,r7[-28]
8000672a:	58 08       	cp.w	r8,0
8000672c:	fe 91 ff 67 	brne	800065fa <udi_cdc_multi_read_buf+0x2a>
		goto udi_cdc_read_buf_loop_wait;
	}
	return 0;
80006730:	30 08       	mov	r8,0
}
80006732:	10 9c       	mov	r12,r8
80006734:	2f 9d       	sub	sp,-28
80006736:	e3 cd 80 80 	ldm	sp++,r7,pc
8000673a:	00 00       	add	r0,r0
8000673c:	80 00       	ld.sh	r0,r0[0x0]
8000673e:	5b 64       	cp.w	r4,-10
80006740:	00 00       	add	r0,r0
80006742:	07 14       	ld.sh	r4,r3++
80006744:	00 00       	add	r0,r0
80006746:	07 10       	ld.sh	r0,r3++
80006748:	00 00       	add	r0,r0
8000674a:	07 0c       	ld.w	r12,r3++
8000674c:	80 00       	ld.sh	r0,r0[0x0]
8000674e:	5b a4       	cp.w	r4,-6
80006750:	00 00       	add	r0,r0
80006752:	06 8a       	andn	r10,r3
80006754:	00 00       	add	r0,r0
80006756:	06 8c       	andn	r12,r3
80006758:	80 00       	ld.sh	r0,r0[0x0]
8000675a:	f4 3a 80 00 	sub	r10,-688128
8000675e:	60 40       	ld.w	r0,r0[0x10]

80006760 <udi_cdc_read_buf>:

iram_size_t udi_cdc_read_buf(void* buf, iram_size_t size)
{
80006760:	eb cd 40 80 	pushm	r7,lr
80006764:	1a 97       	mov	r7,sp
80006766:	20 2d       	sub	sp,8
80006768:	ef 4c ff fc 	st.w	r7[-4],r12
8000676c:	ef 4b ff f8 	st.w	r7[-8],r11
	return udi_cdc_multi_read_buf(0, buf, size);
80006770:	ee fa ff f8 	ld.w	r10,r7[-8]
80006774:	ee fb ff fc 	ld.w	r11,r7[-4]
80006778:	30 0c       	mov	r12,0
8000677a:	f0 1f 00 04 	mcall	80006788 <udi_cdc_read_buf+0x28>
8000677e:	18 98       	mov	r8,r12
}
80006780:	10 9c       	mov	r12,r8
80006782:	2f ed       	sub	sp,-8
80006784:	e3 cd 80 80 	ldm	sp++,r7,pc
80006788:	80 00       	ld.sh	r0,r0[0x0]
8000678a:	65 d0       	ld.w	r0,r2[0x74]

8000678c <udi_cdc_multi_get_free_tx_buffer>:

iram_size_t udi_cdc_multi_get_free_tx_buffer(uint8_t port)
{
8000678c:	eb cd 40 80 	pushm	r7,lr
80006790:	1a 97       	mov	r7,sp
80006792:	20 5d       	sub	sp,20
80006794:	18 98       	mov	r8,r12
80006796:	ef 68 ff ec 	st.b	r7[-20],r8
	irqflags_t flags;
	iram_size_t buf_sel_nb, retval;
	uint8_t buf_sel;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
8000679a:	30 08       	mov	r8,0
8000679c:	ef 68 ff ec 	st.b	r7[-20],r8
#endif

	flags = cpu_irq_save();
800067a0:	f0 1f 00 2b 	mcall	8000684c <udi_cdc_multi_get_free_tx_buffer+0xc0>
800067a4:	18 98       	mov	r8,r12
800067a6:	ef 48 ff f0 	st.w	r7[-16],r8
	buf_sel = udi_cdc_tx_buf_sel[port];
800067aa:	ef 38 ff ec 	ld.ub	r8,r7[-20]
800067ae:	4a 99       	lddpc	r9,80006850 <udi_cdc_multi_get_free_tx_buffer+0xc4>
800067b0:	f2 08 07 08 	ld.ub	r8,r9[r8]
800067b4:	ef 68 ff ff 	st.b	r7[-1],r8
	buf_sel_nb = udi_cdc_tx_buf_nb[port][buf_sel];
800067b8:	ef 3a ff ec 	ld.ub	r10,r7[-20]
800067bc:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800067c0:	4a 58       	lddpc	r8,80006854 <udi_cdc_multi_get_free_tx_buffer+0xc8>
800067c2:	a1 7a       	lsl	r10,0x1
800067c4:	f4 09 00 09 	add	r9,r10,r9
800067c8:	f0 09 04 18 	ld.sh	r8,r8[r9<<0x1]
800067cc:	5c 78       	castu.h	r8
800067ce:	ef 48 ff f4 	st.w	r7[-12],r8
	if (buf_sel_nb == UDI_CDC_TX_BUFFERS) {
800067d2:	ee f8 ff f4 	ld.w	r8,r7[-12]
800067d6:	e0 48 00 40 	cp.w	r8,64
800067da:	c2 91       	brne	8000682c <udi_cdc_multi_get_free_tx_buffer+0xa0>
		if ((!udi_cdc_tx_trans_ongoing[port])
800067dc:	ef 38 ff ec 	ld.ub	r8,r7[-20]
800067e0:	49 e9       	lddpc	r9,80006858 <udi_cdc_multi_get_free_tx_buffer+0xcc>
800067e2:	f2 08 07 08 	ld.ub	r8,r9[r8]
800067e6:	5c 58       	castu.b	r8
800067e8:	ec 18 00 01 	eorl	r8,0x1
800067ec:	5c 58       	castu.b	r8
800067ee:	c1 f0       	breq	8000682c <udi_cdc_multi_get_free_tx_buffer+0xa0>
800067f0:	ef 38 ff ec 	ld.ub	r8,r7[-20]
			&& (!udi_cdc_tx_both_buf_to_send[port])) {
800067f4:	49 a9       	lddpc	r9,8000685c <udi_cdc_multi_get_free_tx_buffer+0xd0>
800067f6:	f2 08 07 08 	ld.ub	r8,r9[r8]
800067fa:	5c 58       	castu.b	r8

	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
	buf_sel_nb = udi_cdc_tx_buf_nb[port][buf_sel];
	if (buf_sel_nb == UDI_CDC_TX_BUFFERS) {
		if ((!udi_cdc_tx_trans_ongoing[port])
800067fc:	ec 18 00 01 	eorl	r8,0x1
80006800:	5c 58       	castu.b	r8
80006802:	c1 50       	breq	8000682c <udi_cdc_multi_get_free_tx_buffer+0xa0>
			&& (!udi_cdc_tx_both_buf_to_send[port])) {
			/* One buffer is full, but the other buffer is not used.
			 * (not used = transfer on-going)
			 * then move to the other buffer to store data */
			udi_cdc_tx_both_buf_to_send[port] = true;
80006804:	ef 39 ff ec 	ld.ub	r9,r7[-20]
80006808:	49 5a       	lddpc	r10,8000685c <udi_cdc_multi_get_free_tx_buffer+0xd0>
8000680a:	30 18       	mov	r8,1
8000680c:	f4 09 0b 08 	st.b	r10[r9],r8
			udi_cdc_tx_buf_sel[port] = (buf_sel == 0)? 1 : 0;
80006810:	ef 3a ff ec 	ld.ub	r10,r7[-20]
80006814:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80006818:	30 08       	mov	r8,0
8000681a:	f0 09 18 00 	cp.b	r9,r8
8000681e:	5f 08       	sreq	r8
80006820:	48 c9       	lddpc	r9,80006850 <udi_cdc_multi_get_free_tx_buffer+0xc4>
80006822:	f2 0a 0b 08 	st.b	r9[r10],r8
			buf_sel_nb = 0;
80006826:	30 08       	mov	r8,0
80006828:	ef 48 ff f4 	st.w	r7[-12],r8
		}
	}
	retval = UDI_CDC_TX_BUFFERS - buf_sel_nb;  
8000682c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80006830:	f0 08 11 40 	rsub	r8,r8,64
80006834:	ef 48 ff f8 	st.w	r7[-8],r8
	cpu_irq_restore(flags);
80006838:	ee fc ff f0 	ld.w	r12,r7[-16]
8000683c:	f0 1f 00 09 	mcall	80006860 <udi_cdc_multi_get_free_tx_buffer+0xd4>
	return retval;
80006840:	ee f8 ff f8 	ld.w	r8,r7[-8]
}
80006844:	10 9c       	mov	r12,r8
80006846:	2f bd       	sub	sp,-20
80006848:	e3 cd 80 80 	ldm	sp++,r7,pc
8000684c:	80 00       	ld.sh	r0,r0[0x0]
8000684e:	5b 64       	cp.w	r4,-10
80006850:	00 00       	add	r0,r0
80006852:	07 a0       	ld.ub	r0,r3[0x2]
80006854:	00 00       	add	r0,r0
80006856:	07 9c       	ld.ub	r12,r3[0x1]
80006858:	00 00       	add	r0,r0
8000685a:	07 a8       	ld.ub	r8,r3[0x2]
8000685c:	00 00       	add	r0,r0
8000685e:	07 ac       	ld.ub	r12,r3[0x2]
80006860:	80 00       	ld.sh	r0,r0[0x0]
80006862:	5b a4       	cp.w	r4,-6

80006864 <udi_cdc_multi_is_tx_ready>:
{
	return udi_cdc_multi_get_free_tx_buffer(0);
}

bool udi_cdc_multi_is_tx_ready(uint8_t port)
{
80006864:	eb cd 40 80 	pushm	r7,lr
80006868:	1a 97       	mov	r7,sp
8000686a:	20 1d       	sub	sp,4
8000686c:	18 98       	mov	r8,r12
8000686e:	ef 68 ff fc 	st.b	r7[-4],r8
	return (udi_cdc_multi_get_free_tx_buffer(port) != 0);
80006872:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80006876:	10 9c       	mov	r12,r8
80006878:	f0 1f 00 05 	mcall	8000688c <udi_cdc_multi_is_tx_ready+0x28>
8000687c:	18 98       	mov	r8,r12
8000687e:	58 08       	cp.w	r8,0
80006880:	5f 18       	srne	r8
80006882:	5c 58       	castu.b	r8
}
80006884:	10 9c       	mov	r12,r8
80006886:	2f fd       	sub	sp,-4
80006888:	e3 cd 80 80 	ldm	sp++,r7,pc
8000688c:	80 00       	ld.sh	r0,r0[0x0]
8000688e:	67 8c       	ld.w	r12,r3[0x60]

80006890 <udi_cdc_multi_putc>:
{
	return udi_cdc_multi_is_tx_ready(0);
}

int udi_cdc_multi_putc(uint8_t port, int value)
{
80006890:	eb cd 40 e0 	pushm	r5-r7,lr
80006894:	1a 97       	mov	r7,sp
80006896:	20 4d       	sub	sp,16
80006898:	18 98       	mov	r8,r12
8000689a:	ef 4b ff f0 	st.w	r7[-16],r11
8000689e:	ef 68 ff f4 	st.b	r7[-12],r8
	irqflags_t flags;
	bool b_databit_9;
	uint8_t buf_sel;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
800068a2:	30 08       	mov	r8,0
800068a4:	ef 68 ff f4 	st.b	r7[-12],r8
#endif

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);
800068a8:	ef 39 ff f4 	ld.ub	r9,r7[-12]
800068ac:	4b 6a       	lddpc	r10,80006984 <udi_cdc_multi_putc+0xf4>
800068ae:	12 98       	mov	r8,r9
800068b0:	a3 78       	lsl	r8,0x3
800068b2:	12 18       	sub	r8,r9
800068b4:	f4 08 00 08 	add	r8,r10,r8
800068b8:	2f c8       	sub	r8,-4
800068ba:	11 a9       	ld.ub	r9,r8[0x2]
800068bc:	30 98       	mov	r8,9
800068be:	f0 09 18 00 	cp.b	r9,r8
800068c2:	5f 08       	sreq	r8
800068c4:	ef 68 ff fe 	st.b	r7[-2],r8
800068c8:	c0 28       	rjmp	800068cc <udi_cdc_multi_putc+0x3c>
	// Check available space
	if (!udi_cdc_multi_is_tx_ready(port)) {
		if (!udi_cdc_data_running) {
			return false;
		}
		goto udi_cdc_putc_process_one_byte;
800068ca:	d7 03       	nop

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);

udi_cdc_putc_process_one_byte:
	// Check available space
	if (!udi_cdc_multi_is_tx_ready(port)) {
800068cc:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800068d0:	10 9c       	mov	r12,r8
800068d2:	f0 1f 00 2e 	mcall	80006988 <udi_cdc_multi_putc+0xf8>
800068d6:	18 98       	mov	r8,r12
800068d8:	ec 18 00 01 	eorl	r8,0x1
800068dc:	5c 58       	castu.b	r8
800068de:	c0 a0       	breq	800068f2 <udi_cdc_multi_putc+0x62>
		if (!udi_cdc_data_running) {
800068e0:	4a b8       	lddpc	r8,8000698c <udi_cdc_multi_putc+0xfc>
800068e2:	11 88       	ld.ub	r8,r8[0x0]
800068e4:	5c 58       	castu.b	r8
800068e6:	ec 18 00 01 	eorl	r8,0x1
800068ea:	5c 58       	castu.b	r8
800068ec:	ce f0       	breq	800068ca <udi_cdc_multi_putc+0x3a>
			return false;
800068ee:	30 08       	mov	r8,0
800068f0:	c4 68       	rjmp	8000697c <udi_cdc_multi_putc+0xec>
		}
		goto udi_cdc_putc_process_one_byte;
	}

	// Write value
	flags = cpu_irq_save();
800068f2:	f0 1f 00 28 	mcall	80006990 <udi_cdc_multi_putc+0x100>
800068f6:	18 98       	mov	r8,r12
800068f8:	ef 48 ff f8 	st.w	r7[-8],r8
	buf_sel = udi_cdc_tx_buf_sel[port];
800068fc:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80006900:	4a 59       	lddpc	r9,80006994 <udi_cdc_multi_putc+0x104>
80006902:	f2 08 07 08 	ld.ub	r8,r9[r8]
80006906:	ef 68 ff ff 	st.b	r7[-1],r8
	udi_cdc_tx_buf[port][buf_sel][udi_cdc_tx_buf_nb[port][buf_sel]++] = value;
8000690a:	ef 35 ff f4 	ld.ub	r5,r7[-12]
8000690e:	ef 36 ff ff 	ld.ub	r6,r7[-1]
80006912:	ef 3a ff f4 	ld.ub	r10,r7[-12]
80006916:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000691a:	4a 08       	lddpc	r8,80006998 <udi_cdc_multi_putc+0x108>
8000691c:	f4 0b 15 01 	lsl	r11,r10,0x1
80006920:	12 0b       	add	r11,r9
80006922:	f0 0b 04 18 	ld.sh	r8,r8[r11<<0x1]
80006926:	f9 d8 c0 10 	bfextu	r12,r8,0x0,0x10
8000692a:	ee fb ff f0 	ld.w	r11,r7[-16]
8000692e:	5c 5b       	castu.b	r11
80006930:	49 be       	lddpc	lr,8000699c <udi_cdc_multi_putc+0x10c>
80006932:	a1 75       	lsl	r5,0x1
80006934:	ea 06 00 06 	add	r6,r5,r6
80006938:	a7 66       	lsl	r6,0x6
8000693a:	ec 0c 00 0c 	add	r12,r6,r12
8000693e:	fc 0c 00 0c 	add	r12,lr,r12
80006942:	b8 8b       	st.b	r12[0x0],r11
80006944:	2f f8       	sub	r8,-1
80006946:	5c 88       	casts.h	r8
80006948:	49 4b       	lddpc	r11,80006998 <udi_cdc_multi_putc+0x108>
8000694a:	a1 7a       	lsl	r10,0x1
8000694c:	f4 09 00 09 	add	r9,r10,r9
80006950:	f6 09 0a 18 	st.h	r11[r9<<0x1],r8
	cpu_irq_restore(flags);
80006954:	ee fc ff f8 	ld.w	r12,r7[-8]
80006958:	f0 1f 00 12 	mcall	800069a0 <udi_cdc_multi_putc+0x110>

	if (b_databit_9) {
8000695c:	ef 39 ff fe 	ld.ub	r9,r7[-2]
80006960:	30 08       	mov	r8,0
80006962:	f0 09 18 00 	cp.b	r9,r8
80006966:	c0 a0       	breq	8000697a <udi_cdc_multi_putc+0xea>
		// Send MSB
		b_databit_9 = false;
80006968:	30 08       	mov	r8,0
8000696a:	ef 68 ff fe 	st.b	r7[-2],r8
		value = value >> 8;
8000696e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80006972:	a9 48       	asr	r8,0x8
80006974:	ef 48 ff f0 	st.w	r7[-16],r8
		goto udi_cdc_putc_process_one_byte;
80006978:	ca ab       	rjmp	800068cc <udi_cdc_multi_putc+0x3c>
	}
	return true;
8000697a:	30 18       	mov	r8,1
}
8000697c:	10 9c       	mov	r12,r8
8000697e:	2f cd       	sub	sp,-16
80006980:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80006984:	00 00       	add	r0,r0
80006986:	06 70       	tst	r0,r3
80006988:	80 00       	ld.sh	r0,r0[0x0]
8000698a:	68 64       	ld.w	r4,r4[0x18]
8000698c:	00 00       	add	r0,r0
8000698e:	06 8a       	andn	r10,r3
80006990:	80 00       	ld.sh	r0,r0[0x0]
80006992:	5b 64       	cp.w	r4,-10
80006994:	00 00       	add	r0,r0
80006996:	07 a0       	ld.ub	r0,r3[0x2]
80006998:	00 00       	add	r0,r0
8000699a:	07 9c       	ld.ub	r12,r3[0x1]
8000699c:	00 00       	add	r0,r0
8000699e:	07 1c       	ld.sh	r12,r3++
800069a0:	80 00       	ld.sh	r0,r0[0x0]
800069a2:	5b a4       	cp.w	r4,-6

800069a4 <udi_cdc_putc>:

int udi_cdc_putc(int value)
{
800069a4:	eb cd 40 80 	pushm	r7,lr
800069a8:	1a 97       	mov	r7,sp
800069aa:	20 1d       	sub	sp,4
800069ac:	ef 4c ff fc 	st.w	r7[-4],r12
	return udi_cdc_multi_putc(0, value);
800069b0:	ee fb ff fc 	ld.w	r11,r7[-4]
800069b4:	30 0c       	mov	r12,0
800069b6:	f0 1f 00 04 	mcall	800069c4 <udi_cdc_putc+0x20>
800069ba:	18 98       	mov	r8,r12
}
800069bc:	10 9c       	mov	r12,r8
800069be:	2f fd       	sub	sp,-4
800069c0:	e3 cd 80 80 	ldm	sp++,r7,pc
800069c4:	80 00       	ld.sh	r0,r0[0x0]
800069c6:	68 90       	ld.w	r0,r4[0x24]

800069c8 <udc_get_eof_conf>:
 * \brief Returns a value to check the end of USB Configuration descriptor
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
800069c8:	eb cd 40 80 	pushm	r7,lr
800069cc:	1a 97       	mov	r7,sp
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
800069ce:	48 b8       	lddpc	r8,800069f8 <udc_get_eof_conf+0x30>
800069d0:	70 08       	ld.w	r8,r8[0x0]
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
800069d2:	70 09       	ld.w	r9,r8[0x0]
			udc_ptr_conf->desc +
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
800069d4:	48 98       	lddpc	r8,800069f8 <udc_get_eof_conf+0x30>
800069d6:	70 08       	ld.w	r8,r8[0x0]
800069d8:	70 08       	ld.w	r8,r8[0x0]
800069da:	11 aa       	ld.ub	r10,r8[0x2]
800069dc:	a9 6a       	lsl	r10,0x8
800069de:	11 b8       	ld.ub	r8,r8[0x3]
800069e0:	14 48       	or	r8,r10
800069e2:	5c 88       	casts.h	r8
800069e4:	5c 88       	casts.h	r8
800069e6:	5c c8       	swap.bh	r8
800069e8:	5c 88       	casts.h	r8
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
800069ea:	5c 78       	castu.h	r8
800069ec:	f2 08 00 08 	add	r8,r9,r8
			udc_ptr_conf->desc +
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
}
800069f0:	10 9c       	mov	r12,r8
800069f2:	e3 cd 80 80 	ldm	sp++,r7,pc
800069f6:	00 00       	add	r0,r0
800069f8:	00 00       	add	r0,r0
800069fa:	07 c0       	ld.ub	r0,r3[0x4]

800069fc <udc_next_desc_in_iface>:
 * \return address of specific descriptor found
 * \return NULL if it is the end of global interface descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_next_desc_in_iface(usb_conf_desc_t
		UDC_DESC_STORAGE * desc, uint8_t desc_id)
{
800069fc:	eb cd 40 80 	pushm	r7,lr
80006a00:	1a 97       	mov	r7,sp
80006a02:	20 3d       	sub	sp,12
80006a04:	ef 4c ff f8 	st.w	r7[-8],r12
80006a08:	16 98       	mov	r8,r11
80006a0a:	ef 68 ff f4 	st.b	r7[-12],r8
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
80006a0e:	f0 1f 00 1d 	mcall	80006a80 <udc_next_desc_in_iface+0x84>
80006a12:	18 98       	mov	r8,r12
80006a14:	ef 48 ff fc 	st.w	r7[-4],r8
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
80006a18:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006a1c:	11 88       	ld.ub	r8,r8[0x0]
80006a1e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80006a22:	f2 08 00 08 	add	r8,r9,r8
80006a26:	ef 48 ff f8 	st.w	r7[-8],r8
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
80006a2a:	c1 c8       	rjmp	80006a62 <udc_next_desc_in_iface+0x66>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
80006a2c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006a30:	11 99       	ld.ub	r9,r8[0x1]
80006a32:	30 48       	mov	r8,4
80006a34:	f0 09 18 00 	cp.b	r9,r8
80006a38:	c1 d0       	breq	80006a72 <udc_next_desc_in_iface+0x76>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
80006a3a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006a3e:	11 98       	ld.ub	r8,r8[0x1]
80006a40:	ef 39 ff f4 	ld.ub	r9,r7[-12]
80006a44:	f0 09 18 00 	cp.b	r9,r8
80006a48:	c0 41       	brne	80006a50 <udc_next_desc_in_iface+0x54>
			return desc; // Specific descriptor found
80006a4a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006a4e:	c1 48       	rjmp	80006a76 <udc_next_desc_in_iface+0x7a>
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
80006a50:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006a54:	11 88       	ld.ub	r8,r8[0x0]
80006a56:	ee f9 ff f8 	ld.w	r9,r7[-8]
80006a5a:	f2 08 00 08 	add	r8,r9,r8
80006a5e:	ef 48 ff f8 	st.w	r7[-8],r8
	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
80006a62:	ee f9 ff fc 	ld.w	r9,r7[-4]
80006a66:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006a6a:	10 39       	cp.w	r9,r8
80006a6c:	fe 9b ff e0 	brhi	80006a2c <udc_next_desc_in_iface+0x30>
80006a70:	c0 28       	rjmp	80006a74 <udc_next_desc_in_iface+0x78>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
			break; // End of global interface descriptor
80006a72:	d7 03       	nop
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
	}
	return NULL; // No specific descriptor found
80006a74:	30 08       	mov	r8,0
}
80006a76:	10 9c       	mov	r12,r8
80006a78:	2f dd       	sub	sp,-12
80006a7a:	e3 cd 80 80 	ldm	sp++,r7,pc
80006a7e:	00 00       	add	r0,r0
80006a80:	80 00       	ld.sh	r0,r0[0x0]
80006a82:	69 c8       	ld.w	r8,r4[0x70]

80006a84 <udc_update_iface_desc>:
 * \param setting_num   Setting number of interface to find
 *
 * \return 1 if found or 0 if not found
 */
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
80006a84:	eb cd 40 80 	pushm	r7,lr
80006a88:	1a 97       	mov	r7,sp
80006a8a:	20 3d       	sub	sp,12
80006a8c:	18 99       	mov	r9,r12
80006a8e:	16 98       	mov	r8,r11
80006a90:	ef 69 ff f8 	st.b	r7[-8],r9
80006a94:	ef 68 ff f4 	st.b	r7[-12],r8
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_end_desc;

	if (0 == udc_num_configuration) {
80006a98:	4a 58       	lddpc	r8,80006b2c <udc_update_iface_desc+0xa8>
80006a9a:	11 88       	ld.ub	r8,r8[0x0]
80006a9c:	58 08       	cp.w	r8,0
80006a9e:	c0 31       	brne	80006aa4 <udc_update_iface_desc+0x20>
		return false;
80006aa0:	30 08       	mov	r8,0
80006aa2:	c4 18       	rjmp	80006b24 <udc_update_iface_desc+0xa0>
	}

	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
80006aa4:	4a 38       	lddpc	r8,80006b30 <udc_update_iface_desc+0xac>
80006aa6:	70 08       	ld.w	r8,r8[0x0]
80006aa8:	70 08       	ld.w	r8,r8[0x0]
80006aaa:	11 c8       	ld.ub	r8,r8[0x4]
80006aac:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80006ab0:	f0 09 18 00 	cp.b	r9,r8
80006ab4:	c0 33       	brcs	80006aba <udc_update_iface_desc+0x36>
		return false;
80006ab6:	30 08       	mov	r8,0
80006ab8:	c3 68       	rjmp	80006b24 <udc_update_iface_desc+0xa0>
	}

	// Start at the beginning of configuration descriptor
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;
80006aba:	49 e8       	lddpc	r8,80006b30 <udc_update_iface_desc+0xac>
80006abc:	70 08       	ld.w	r8,r8[0x0]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
		return false;
	}

	// Start at the beginning of configuration descriptor
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
80006abe:	70 08       	ld.w	r8,r8[0x0]
80006ac0:	10 99       	mov	r9,r8
80006ac2:	49 d8       	lddpc	r8,80006b34 <udc_update_iface_desc+0xb0>
80006ac4:	91 09       	st.w	r8[0x0],r9
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
80006ac6:	f0 1f 00 1d 	mcall	80006b38 <udc_update_iface_desc+0xb4>
80006aca:	18 98       	mov	r8,r12
80006acc:	ef 48 ff fc 	st.w	r7[-4],r8
	while (ptr_end_desc >
80006ad0:	c2 28       	rjmp	80006b14 <udc_update_iface_desc+0x90>
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
80006ad2:	49 98       	lddpc	r8,80006b34 <udc_update_iface_desc+0xb0>
80006ad4:	70 08       	ld.w	r8,r8[0x0]
80006ad6:	11 99       	ld.ub	r9,r8[0x1]
80006ad8:	30 48       	mov	r8,4
80006ada:	f0 09 18 00 	cp.b	r9,r8
80006ade:	c1 31       	brne	80006b04 <udc_update_iface_desc+0x80>
			// A interface descriptor is found
			// Check interface and alternate setting number
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
80006ae0:	49 58       	lddpc	r8,80006b34 <udc_update_iface_desc+0xb0>
80006ae2:	70 08       	ld.w	r8,r8[0x0]
80006ae4:	11 a8       	ld.ub	r8,r8[0x2]
80006ae6:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80006aea:	f0 09 18 00 	cp.b	r9,r8
80006aee:	c0 b1       	brne	80006b04 <udc_update_iface_desc+0x80>
					(setting_num ==
					udc_ptr_iface->bAlternateSetting)) {
80006af0:	49 18       	lddpc	r8,80006b34 <udc_update_iface_desc+0xb0>
80006af2:	70 08       	ld.w	r8,r8[0x0]
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
			// A interface descriptor is found
			// Check interface and alternate setting number
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
					(setting_num ==
80006af4:	11 b8       	ld.ub	r8,r8[0x3]
	while (ptr_end_desc >
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
			// A interface descriptor is found
			// Check interface and alternate setting number
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
80006af6:	ef 39 ff f4 	ld.ub	r9,r7[-12]
80006afa:	f0 09 18 00 	cp.b	r9,r8
80006afe:	c0 31       	brne	80006b04 <udc_update_iface_desc+0x80>
					(setting_num ==
					udc_ptr_iface->bAlternateSetting)) {
				return true; // Interface found
80006b00:	30 18       	mov	r8,1
80006b02:	c1 18       	rjmp	80006b24 <udc_update_iface_desc+0xa0>
			}
		}
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
80006b04:	48 c8       	lddpc	r8,80006b34 <udc_update_iface_desc+0xb0>
80006b06:	70 09       	ld.w	r9,r8[0x0]
				(uint8_t *) udc_ptr_iface +
				udc_ptr_iface->bLength);
80006b08:	48 b8       	lddpc	r8,80006b34 <udc_update_iface_desc+0xb0>
80006b0a:	70 08       	ld.w	r8,r8[0x0]
					udc_ptr_iface->bAlternateSetting)) {
				return true; // Interface found
			}
		}
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
80006b0c:	11 88       	ld.ub	r8,r8[0x0]
80006b0e:	10 09       	add	r9,r8
80006b10:	48 98       	lddpc	r8,80006b34 <udc_update_iface_desc+0xb0>
80006b12:	91 09       	st.w	r8[0x0],r9
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
80006b14:	48 88       	lddpc	r8,80006b34 <udc_update_iface_desc+0xb0>
80006b16:	70 08       	ld.w	r8,r8[0x0]
80006b18:	ee f9 ff fc 	ld.w	r9,r7[-4]
80006b1c:	10 39       	cp.w	r9,r8
80006b1e:	fe 9b ff da 	brhi	80006ad2 <udc_update_iface_desc+0x4e>
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
				(uint8_t *) udc_ptr_iface +
				udc_ptr_iface->bLength);
	}
	return false; // Interface not found
80006b22:	30 08       	mov	r8,0
}
80006b24:	10 9c       	mov	r12,r8
80006b26:	2f dd       	sub	sp,-12
80006b28:	e3 cd 80 80 	ldm	sp++,r7,pc
80006b2c:	00 00       	add	r0,r0
80006b2e:	07 bc       	ld.ub	r12,r3[0x3]
80006b30:	00 00       	add	r0,r0
80006b32:	07 c0       	ld.ub	r0,r3[0x4]
80006b34:	00 00       	add	r0,r0
80006b36:	07 c4       	ld.ub	r4,r3[0x4]
80006b38:	80 00       	ld.sh	r0,r0[0x0]
80006b3a:	69 c8       	ld.w	r8,r4[0x70]

80006b3c <udc_iface_disable>:
 * \param iface_num     Interface number to disable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_disable(uint8_t iface_num)
{
80006b3c:	eb cd 40 80 	pushm	r7,lr
80006b40:	1a 97       	mov	r7,sp
80006b42:	20 3d       	sub	sp,12
80006b44:	18 98       	mov	r8,r12
80006b46:	ef 68 ff f4 	st.b	r7[-12],r8
	udi_api_t UDC_DESC_STORAGE *udi_api;

	// Select first alternate setting of the interface
	// to update udc_ptr_iface before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
80006b4a:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80006b4e:	30 0b       	mov	r11,0
80006b50:	10 9c       	mov	r12,r8
80006b52:	f0 1f 00 25 	mcall	80006be4 <udc_iface_disable+0xa8>
80006b56:	18 98       	mov	r8,r12
80006b58:	ec 18 00 01 	eorl	r8,0x1
80006b5c:	5c 58       	castu.b	r8
80006b5e:	c0 30       	breq	80006b64 <udc_iface_disable+0x28>
		return false;
80006b60:	30 08       	mov	r8,0
80006b62:	c3 d8       	rjmp	80006bdc <udc_iface_disable+0xa0>
	}

	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
80006b64:	4a 18       	lddpc	r8,80006be8 <udc_iface_disable+0xac>
80006b66:	70 08       	ld.w	r8,r8[0x0]
80006b68:	70 19       	ld.w	r9,r8[0x4]
80006b6a:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80006b6e:	a3 68       	lsl	r8,0x2
80006b70:	f2 08 00 08 	add	r8,r9,r8
80006b74:	70 08       	ld.w	r8,r8[0x0]
80006b76:	ef 48 ff f8 	st.w	r7[-8],r8

#if (0!=USB_DEVICE_MAX_EP)
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
80006b7a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006b7e:	70 38       	ld.w	r8,r8[0xc]
80006b80:	5d 18       	icall	r8
80006b82:	18 98       	mov	r8,r12
80006b84:	10 99       	mov	r9,r8
80006b86:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80006b8a:	12 9b       	mov	r11,r9
80006b8c:	10 9c       	mov	r12,r8
80006b8e:	f0 1f 00 16 	mcall	80006be4 <udc_iface_disable+0xa8>
80006b92:	18 98       	mov	r8,r12
80006b94:	ec 18 00 01 	eorl	r8,0x1
80006b98:	5c 58       	castu.b	r8
80006b9a:	c0 30       	breq	80006ba0 <udc_iface_disable+0x64>
		return false;
80006b9c:	30 08       	mov	r8,0
80006b9e:	c1 f8       	rjmp	80006bdc <udc_iface_disable+0xa0>
	}

	// Start at the beginning of interface descriptor
	{
		usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
80006ba0:	49 38       	lddpc	r8,80006bec <udc_iface_disable+0xb0>
80006ba2:	70 08       	ld.w	r8,r8[0x0]
80006ba4:	ef 48 ff fc 	st.w	r7[-4],r8
		while (1) {
			// Search Endpoint descriptor included in global interface descriptor
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
80006ba8:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006bac:	30 5b       	mov	r11,5
80006bae:	10 9c       	mov	r12,r8
80006bb0:	f0 1f 00 10 	mcall	80006bf0 <udc_iface_disable+0xb4>
80006bb4:	18 98       	mov	r8,r12
80006bb6:	ef 48 ff fc 	st.w	r7[-4],r8
					udc_next_desc_in_iface((UDC_DESC_STORAGE
					usb_conf_desc_t *)
					ep_desc, USB_DT_ENDPOINT);
			if (NULL == ep_desc) {
80006bba:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006bbe:	58 08       	cp.w	r8,0
80006bc0:	c0 71       	brne	80006bce <udc_iface_disable+0x92>
		}
	}
#endif

	// Disable interface
	udi_api->disable();
80006bc2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006bc6:	70 18       	ld.w	r8,r8[0x4]
80006bc8:	5d 18       	icall	r8
	return true;
80006bca:	30 18       	mov	r8,1
80006bcc:	c0 88       	rjmp	80006bdc <udc_iface_disable+0xa0>
					ep_desc, USB_DT_ENDPOINT);
			if (NULL == ep_desc) {
				break;
			}
			// Free the endpoint used by the interface
			udd_ep_free(ep_desc->bEndpointAddress);
80006bce:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006bd2:	11 a8       	ld.ub	r8,r8[0x2]
80006bd4:	10 9c       	mov	r12,r8
80006bd6:	f0 1f 00 08 	mcall	80006bf4 <udc_iface_disable+0xb8>
		}
80006bda:	ce 7b       	rjmp	80006ba8 <udc_iface_disable+0x6c>
#endif

	// Disable interface
	udi_api->disable();
	return true;
}
80006bdc:	10 9c       	mov	r12,r8
80006bde:	2f dd       	sub	sp,-12
80006be0:	e3 cd 80 80 	ldm	sp++,r7,pc
80006be4:	80 00       	ld.sh	r0,r0[0x0]
80006be6:	6a 84       	ld.w	r4,r5[0x20]
80006be8:	00 00       	add	r0,r0
80006bea:	07 c0       	ld.ub	r0,r3[0x4]
80006bec:	00 00       	add	r0,r0
80006bee:	07 c4       	ld.ub	r4,r3[0x4]
80006bf0:	80 00       	ld.sh	r0,r0[0x0]
80006bf2:	69 fc       	ld.w	r12,r4[0x7c]
80006bf4:	80 00       	ld.sh	r0,r0[0x0]
80006bf6:	48 40       	lddpc	r0,80006c04 <udc_iface_enable+0xc>

80006bf8 <udc_iface_enable>:
 * \param setting_num   Setting number to enable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_enable(uint8_t iface_num, uint8_t setting_num)
{
80006bf8:	eb cd 40 80 	pushm	r7,lr
80006bfc:	1a 97       	mov	r7,sp
80006bfe:	20 3d       	sub	sp,12
80006c00:	18 99       	mov	r9,r12
80006c02:	16 98       	mov	r8,r11
80006c04:	ef 69 ff f8 	st.b	r7[-8],r9
80006c08:	ef 68 ff f4 	st.b	r7[-12],r8
	// Select the interface descriptor
	if (!udc_update_iface_desc(iface_num, setting_num)) {
80006c0c:	ef 39 ff f4 	ld.ub	r9,r7[-12]
80006c10:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80006c14:	12 9b       	mov	r11,r9
80006c16:	10 9c       	mov	r12,r8
80006c18:	f0 1f 00 25 	mcall	80006cac <udc_iface_enable+0xb4>
80006c1c:	18 98       	mov	r8,r12
80006c1e:	ec 18 00 01 	eorl	r8,0x1
80006c22:	5c 58       	castu.b	r8
80006c24:	c0 30       	breq	80006c2a <udc_iface_enable+0x32>
		return false;
80006c26:	30 08       	mov	r8,0
80006c28:	c3 e8       	rjmp	80006ca4 <udc_iface_enable+0xac>

#if (0!=USB_DEVICE_MAX_EP)
	usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;

	// Start at the beginning of the global interface descriptor
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
80006c2a:	4a 28       	lddpc	r8,80006cb0 <udc_iface_enable+0xb8>
80006c2c:	70 08       	ld.w	r8,r8[0x0]
80006c2e:	ef 48 ff fc 	st.w	r7[-4],r8
80006c32:	c0 28       	rjmp	80006c36 <udc_iface_enable+0x3e>
				ep_desc->bmAttributes,
				le16_to_cpu
				(ep_desc->wMaxPacketSize))) {
			return false;
		}
	}
80006c34:	d7 03       	nop

	// Start at the beginning of the global interface descriptor
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
	while (1) {
		// Search Endpoint descriptor included in the global interface descriptor
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
80006c36:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006c3a:	30 5b       	mov	r11,5
80006c3c:	10 9c       	mov	r12,r8
80006c3e:	f0 1f 00 1e 	mcall	80006cb4 <udc_iface_enable+0xbc>
80006c42:	18 98       	mov	r8,r12
80006c44:	ef 48 ff fc 	st.w	r7[-4],r8
				udc_next_desc_in_iface((UDC_DESC_STORAGE
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
80006c48:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006c4c:	58 08       	cp.w	r8,0
80006c4e:	c0 e1       	brne	80006c6a <udc_iface_enable+0x72>
			return false;
		}
	}
#endif
	// Enable the interface
	return udc_ptr_conf->udi_apis[iface_num]->enable();
80006c50:	49 a8       	lddpc	r8,80006cb8 <udc_iface_enable+0xc0>
80006c52:	70 08       	ld.w	r8,r8[0x0]
80006c54:	70 19       	ld.w	r9,r8[0x4]
80006c56:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80006c5a:	a3 68       	lsl	r8,0x2
80006c5c:	f2 08 00 08 	add	r8,r9,r8
80006c60:	70 08       	ld.w	r8,r8[0x0]
80006c62:	70 08       	ld.w	r8,r8[0x0]
80006c64:	5d 18       	icall	r8
80006c66:	18 98       	mov	r8,r12
80006c68:	c1 e8       	rjmp	80006ca4 <udc_iface_enable+0xac>
		if (NULL == ep_desc)
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
				ep_desc->bmAttributes,
				le16_to_cpu
80006c6a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006c6e:	11 c9       	ld.ub	r9,r8[0x4]
80006c70:	a9 69       	lsl	r9,0x8
80006c72:	11 d8       	ld.ub	r8,r8[0x5]
80006c74:	12 48       	or	r8,r9
80006c76:	5c 88       	casts.h	r8
80006c78:	5c 88       	casts.h	r8
80006c7a:	5c c8       	swap.bh	r8
80006c7c:	5c 88       	casts.h	r8
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
80006c7e:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
				ep_desc->bmAttributes,
80006c82:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006c86:	11 b8       	ld.ub	r8,r8[0x3]
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
80006c88:	10 99       	mov	r9,r8
80006c8a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006c8e:	11 a8       	ld.ub	r8,r8[0x2]
80006c90:	12 9b       	mov	r11,r9
80006c92:	10 9c       	mov	r12,r8
80006c94:	f0 1f 00 0a 	mcall	80006cbc <udc_iface_enable+0xc4>
80006c98:	18 98       	mov	r8,r12
80006c9a:	ec 18 00 01 	eorl	r8,0x1
80006c9e:	5c 58       	castu.b	r8
80006ca0:	cc a0       	breq	80006c34 <udc_iface_enable+0x3c>
				ep_desc->bmAttributes,
				le16_to_cpu
				(ep_desc->wMaxPacketSize))) {
			return false;
80006ca2:	30 08       	mov	r8,0
		}
	}
#endif
	// Enable the interface
	return udc_ptr_conf->udi_apis[iface_num]->enable();
}
80006ca4:	10 9c       	mov	r12,r8
80006ca6:	2f dd       	sub	sp,-12
80006ca8:	e3 cd 80 80 	ldm	sp++,r7,pc
80006cac:	80 00       	ld.sh	r0,r0[0x0]
80006cae:	6a 84       	ld.w	r4,r5[0x20]
80006cb0:	00 00       	add	r0,r0
80006cb2:	07 c4       	ld.ub	r4,r3[0x4]
80006cb4:	80 00       	ld.sh	r0,r0[0x0]
80006cb6:	69 fc       	ld.w	r12,r4[0x7c]
80006cb8:	00 00       	add	r0,r0
80006cba:	07 c0       	ld.ub	r0,r3[0x4]
80006cbc:	80 00       	ld.sh	r0,r0[0x0]
80006cbe:	44 f0       	lddsp	r0,sp[0x13c]

80006cc0 <udc_start>:

/*! \brief Start the USB Device stack
 */
void udc_start(void)
{
80006cc0:	eb cd 40 80 	pushm	r7,lr
80006cc4:	1a 97       	mov	r7,sp
	udd_enable();
80006cc6:	f0 1f 00 03 	mcall	80006cd0 <udc_start+0x10>
}
80006cca:	e3 cd 80 80 	ldm	sp++,r7,pc
80006cce:	00 00       	add	r0,r0
80006cd0:	80 00       	ld.sh	r0,r0[0x0]
80006cd2:	42 0c       	lddsp	r12,sp[0x80]

80006cd4 <udc_reset>:
/**
 * \brief Reset the current configuration of the USB device,
 * This routines can be called by UDD when a RESET on the USB line occurs.
 */
void udc_reset(void)
{
80006cd4:	eb cd 40 80 	pushm	r7,lr
80006cd8:	1a 97       	mov	r7,sp
80006cda:	20 1d       	sub	sp,4
	uint8_t iface_num;

	if (udc_num_configuration) {
80006cdc:	49 38       	lddpc	r8,80006d28 <udc_reset+0x54>
80006cde:	11 88       	ld.ub	r8,r8[0x0]
80006ce0:	58 08       	cp.w	r8,0
80006ce2:	c1 80       	breq	80006d12 <udc_reset+0x3e>
		for (iface_num = 0;
80006ce4:	30 08       	mov	r8,0
80006ce6:	ef 68 ff ff 	st.b	r7[-1],r8
80006cea:	c0 b8       	rjmp	80006d00 <udc_reset+0x2c>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
80006cec:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80006cf0:	10 9c       	mov	r12,r8
80006cf2:	f0 1f 00 0f 	mcall	80006d2c <udc_reset+0x58>
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
80006cf6:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80006cfa:	2f f8       	sub	r8,-1
80006cfc:	ef 68 ff ff 	st.b	r7[-1],r8
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
80006d00:	48 c8       	lddpc	r8,80006d30 <udc_reset+0x5c>
80006d02:	70 08       	ld.w	r8,r8[0x0]
80006d04:	70 08       	ld.w	r8,r8[0x0]
80006d06:	11 c8       	ld.ub	r8,r8[0x4]
void udc_reset(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
80006d08:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80006d0c:	f0 09 18 00 	cp.b	r9,r8
80006d10:	ce e3       	brcs	80006cec <udc_reset+0x18>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
		}
	}
	udc_num_configuration = 0;
80006d12:	48 69       	lddpc	r9,80006d28 <udc_reset+0x54>
80006d14:	30 08       	mov	r8,0
80006d16:	b2 88       	st.b	r9[0x0],r8
	if (CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP) & udc_device_status) {
		// Remote wakeup is enabled then disable it
		UDC_REMOTEWAKEUP_DISABLE();
	}
#endif
	udc_device_status =
80006d18:	48 79       	lddpc	r9,80006d34 <udc_reset+0x60>
80006d1a:	e0 68 01 00 	mov	r8,256
80006d1e:	b2 08       	st.h	r9[0x0],r8
#if (USB_DEVICE_ATTR & USB_CONFIG_ATTR_SELF_POWERED)
			CPU_TO_LE16(USB_DEV_STATUS_SELF_POWERED);
#else
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}
80006d20:	2f fd       	sub	sp,-4
80006d22:	e3 cd 80 80 	ldm	sp++,r7,pc
80006d26:	00 00       	add	r0,r0
80006d28:	00 00       	add	r0,r0
80006d2a:	07 bc       	ld.ub	r12,r3[0x3]
80006d2c:	80 00       	ld.sh	r0,r0[0x0]
80006d2e:	6b 3c       	ld.w	r12,r5[0x4c]
80006d30:	00 00       	add	r0,r0
80006d32:	07 c0       	ld.ub	r0,r3[0x4]
80006d34:	00 00       	add	r0,r0
80006d36:	07 b4       	ld.ub	r4,r3[0x3]

80006d38 <udc_sof_notify>:

void udc_sof_notify(void)
{
80006d38:	eb cd 40 80 	pushm	r7,lr
80006d3c:	1a 97       	mov	r7,sp
80006d3e:	20 1d       	sub	sp,4
	uint8_t iface_num;

	if (udc_num_configuration) {
80006d40:	49 88       	lddpc	r8,80006da0 <udc_sof_notify+0x68>
80006d42:	11 88       	ld.ub	r8,r8[0x0]
80006d44:	58 08       	cp.w	r8,0
80006d46:	c2 a0       	breq	80006d9a <udc_sof_notify+0x62>
		for (iface_num = 0;
80006d48:	30 08       	mov	r8,0
80006d4a:	ef 68 ff ff 	st.b	r7[-1],r8
80006d4e:	c1 d8       	rjmp	80006d88 <udc_sof_notify+0x50>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
80006d50:	49 58       	lddpc	r8,80006da4 <udc_sof_notify+0x6c>
80006d52:	70 08       	ld.w	r8,r8[0x0]
80006d54:	70 19       	ld.w	r9,r8[0x4]
80006d56:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80006d5a:	a3 68       	lsl	r8,0x2
80006d5c:	f2 08 00 08 	add	r8,r9,r8
80006d60:	70 08       	ld.w	r8,r8[0x0]
80006d62:	70 48       	ld.w	r8,r8[0x10]
80006d64:	58 08       	cp.w	r8,0
80006d66:	c0 c0       	breq	80006d7e <udc_sof_notify+0x46>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
80006d68:	48 f8       	lddpc	r8,80006da4 <udc_sof_notify+0x6c>
80006d6a:	70 08       	ld.w	r8,r8[0x0]
80006d6c:	70 19       	ld.w	r9,r8[0x4]
80006d6e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80006d72:	a3 68       	lsl	r8,0x2
80006d74:	f2 08 00 08 	add	r8,r9,r8
80006d78:	70 08       	ld.w	r8,r8[0x0]
80006d7a:	70 48       	ld.w	r8,r8[0x10]
80006d7c:	5d 18       	icall	r8
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
80006d7e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80006d82:	2f f8       	sub	r8,-1
80006d84:	ef 68 ff ff 	st.b	r7[-1],r8
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
80006d88:	48 78       	lddpc	r8,80006da4 <udc_sof_notify+0x6c>
80006d8a:	70 08       	ld.w	r8,r8[0x0]
80006d8c:	70 08       	ld.w	r8,r8[0x0]
80006d8e:	11 c8       	ld.ub	r8,r8[0x4]
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
80006d90:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80006d94:	f0 09 18 00 	cp.b	r9,r8
80006d98:	cd c3       	brcs	80006d50 <udc_sof_notify+0x18>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
			}
		}
	}
}
80006d9a:	2f fd       	sub	sp,-4
80006d9c:	e3 cd 80 80 	ldm	sp++,r7,pc
80006da0:	00 00       	add	r0,r0
80006da2:	07 bc       	ld.ub	r12,r3[0x3]
80006da4:	00 00       	add	r0,r0
80006da6:	07 c0       	ld.ub	r0,r3[0x4]

80006da8 <udc_req_std_dev_get_status>:
 * \brief Standard device request to get device status
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
80006da8:	eb cd 40 80 	pushm	r7,lr
80006dac:	1a 97       	mov	r7,sp
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
80006dae:	48 98       	lddpc	r8,80006dd0 <udc_req_std_dev_get_status+0x28>
80006db0:	90 39       	ld.sh	r9,r8[0x6]
80006db2:	30 28       	mov	r8,2
80006db4:	f0 09 19 00 	cp.h	r9,r8
80006db8:	c0 30       	breq	80006dbe <udc_req_std_dev_get_status+0x16>
		return false;
80006dba:	30 08       	mov	r8,0
80006dbc:	c0 78       	rjmp	80006dca <udc_req_std_dev_get_status+0x22>
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
80006dbe:	48 68       	lddpc	r8,80006dd4 <udc_req_std_dev_get_status+0x2c>
80006dc0:	30 2b       	mov	r11,2
80006dc2:	10 9c       	mov	r12,r8
80006dc4:	f0 1f 00 05 	mcall	80006dd8 <udc_req_std_dev_get_status+0x30>
			sizeof(udc_device_status));
	return true;
80006dc8:	30 18       	mov	r8,1
}
80006dca:	10 9c       	mov	r12,r8
80006dcc:	e3 cd 80 80 	ldm	sp++,r7,pc
80006dd0:	00 00       	add	r0,r0
80006dd2:	0b 24       	ld.uh	r4,r5++
80006dd4:	00 00       	add	r0,r0
80006dd6:	07 b4       	ld.ub	r4,r3[0x3]
80006dd8:	80 00       	ld.sh	r0,r0[0x0]
80006dda:	44 c4       	lddsp	r4,sp[0x130]

80006ddc <udc_req_std_ep_get_status>:
 * \brief Standard endpoint request to get endpoint status
 *
 * \return true if success
 */
static bool udc_req_std_ep_get_status(void)
{
80006ddc:	eb cd 40 80 	pushm	r7,lr
80006de0:	1a 97       	mov	r7,sp
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
80006de2:	49 18       	lddpc	r8,80006e24 <udc_req_std_ep_get_status+0x48>
80006de4:	90 39       	ld.sh	r9,r8[0x6]
80006de6:	30 28       	mov	r8,2
80006de8:	f0 09 19 00 	cp.h	r9,r8
80006dec:	c0 30       	breq	80006df2 <udc_req_std_ep_get_status+0x16>
		return false;
80006dee:	30 08       	mov	r8,0
80006df0:	c1 68       	rjmp	80006e1c <udc_req_std_ep_get_status+0x40>
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
80006df2:	48 d8       	lddpc	r8,80006e24 <udc_req_std_ep_get_status+0x48>
80006df4:	90 28       	ld.sh	r8,r8[0x4]
80006df6:	5c 58       	castu.b	r8
80006df8:	10 9c       	mov	r12,r8
80006dfa:	f0 1f 00 0c 	mcall	80006e28 <udc_req_std_ep_get_status+0x4c>
80006dfe:	18 98       	mov	r8,r12
80006e00:	58 08       	cp.w	r8,0
80006e02:	c0 40       	breq	80006e0a <udc_req_std_ep_get_status+0x2e>
80006e04:	e0 68 01 00 	mov	r8,256
80006e08:	c0 28       	rjmp	80006e0c <udc_req_std_ep_get_status+0x30>
80006e0a:	30 08       	mov	r8,0
80006e0c:	48 89       	lddpc	r9,80006e2c <udc_req_std_ep_get_status+0x50>
80006e0e:	b2 08       	st.h	r9[0x0],r8
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
80006e10:	48 78       	lddpc	r8,80006e2c <udc_req_std_ep_get_status+0x50>
80006e12:	30 2b       	mov	r11,2
80006e14:	10 9c       	mov	r12,r8
80006e16:	f0 1f 00 07 	mcall	80006e30 <udc_req_std_ep_get_status+0x54>
			sizeof(udc_ep_status));
	return true;
80006e1a:	30 18       	mov	r8,1
}
80006e1c:	10 9c       	mov	r12,r8
80006e1e:	e3 cd 80 80 	ldm	sp++,r7,pc
80006e22:	00 00       	add	r0,r0
80006e24:	00 00       	add	r0,r0
80006e26:	0b 24       	ld.uh	r4,r5++
80006e28:	80 00       	ld.sh	r0,r0[0x0]
80006e2a:	48 dc       	lddpc	r12,80006e5c <udc_req_std_dev_clear_feature+0x28>
80006e2c:	00 00       	add	r0,r0
80006e2e:	07 c8       	ld.ub	r8,r3[0x4]
80006e30:	80 00       	ld.sh	r0,r0[0x0]
80006e32:	44 c4       	lddsp	r4,sp[0x130]

80006e34 <udc_req_std_dev_clear_feature>:
 * \brief Standard device request to change device status
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
80006e34:	eb cd 40 80 	pushm	r7,lr
80006e38:	1a 97       	mov	r7,sp
	if (udd_g_ctrlreq.req.wLength) {
80006e3a:	48 d8       	lddpc	r8,80006e6c <udc_req_std_dev_clear_feature+0x38>
80006e3c:	90 38       	ld.sh	r8,r8[0x6]
80006e3e:	58 08       	cp.w	r8,0
80006e40:	c0 30       	breq	80006e46 <udc_req_std_dev_clear_feature+0x12>
		return false;
80006e42:	30 08       	mov	r8,0
80006e44:	c1 08       	rjmp	80006e64 <udc_req_std_dev_clear_feature+0x30>
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
80006e46:	48 a8       	lddpc	r8,80006e6c <udc_req_std_dev_clear_feature+0x38>
80006e48:	90 19       	ld.sh	r9,r8[0x2]
80006e4a:	30 18       	mov	r8,1
80006e4c:	f0 09 19 00 	cp.h	r9,r8
80006e50:	c0 91       	brne	80006e62 <udc_req_std_dev_clear_feature+0x2e>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
80006e52:	48 88       	lddpc	r8,80006e70 <udc_req_std_dev_clear_feature+0x3c>
80006e54:	90 08       	ld.sh	r8,r8[0x0]
80006e56:	a9 d8       	cbr	r8,0x9
80006e58:	5c 88       	casts.h	r8
80006e5a:	48 69       	lddpc	r9,80006e70 <udc_req_std_dev_clear_feature+0x3c>
80006e5c:	b2 08       	st.h	r9[0x0],r8
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
#endif
		return true;
80006e5e:	30 18       	mov	r8,1
80006e60:	c0 28       	rjmp	80006e64 <udc_req_std_dev_clear_feature+0x30>
	}
	return false;
80006e62:	30 08       	mov	r8,0
}
80006e64:	10 9c       	mov	r12,r8
80006e66:	e3 cd 80 80 	ldm	sp++,r7,pc
80006e6a:	00 00       	add	r0,r0
80006e6c:	00 00       	add	r0,r0
80006e6e:	0b 24       	ld.uh	r4,r5++
80006e70:	00 00       	add	r0,r0
80006e72:	07 b4       	ld.ub	r4,r3[0x3]

80006e74 <udc_req_std_ep_clear_feature>:
 * \brief Standard endpoint request to clear endpoint feature
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
80006e74:	eb cd 40 80 	pushm	r7,lr
80006e78:	1a 97       	mov	r7,sp
	if (udd_g_ctrlreq.req.wLength) {
80006e7a:	48 c8       	lddpc	r8,80006ea8 <udc_req_std_ep_clear_feature+0x34>
80006e7c:	90 38       	ld.sh	r8,r8[0x6]
80006e7e:	58 08       	cp.w	r8,0
80006e80:	c0 30       	breq	80006e86 <udc_req_std_ep_clear_feature+0x12>
		return false;
80006e82:	30 08       	mov	r8,0
80006e84:	c0 e8       	rjmp	80006ea0 <udc_req_std_ep_clear_feature+0x2c>
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
80006e86:	48 98       	lddpc	r8,80006ea8 <udc_req_std_ep_clear_feature+0x34>
80006e88:	90 18       	ld.sh	r8,r8[0x2]
80006e8a:	58 08       	cp.w	r8,0
80006e8c:	c0 91       	brne	80006e9e <udc_req_std_ep_clear_feature+0x2a>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
80006e8e:	48 78       	lddpc	r8,80006ea8 <udc_req_std_ep_clear_feature+0x34>
80006e90:	90 28       	ld.sh	r8,r8[0x4]
80006e92:	5c 58       	castu.b	r8
80006e94:	10 9c       	mov	r12,r8
80006e96:	f0 1f 00 06 	mcall	80006eac <udc_req_std_ep_clear_feature+0x38>
80006e9a:	18 98       	mov	r8,r12
80006e9c:	c0 28       	rjmp	80006ea0 <udc_req_std_ep_clear_feature+0x2c>
	}
	return false;
80006e9e:	30 08       	mov	r8,0
}
80006ea0:	10 9c       	mov	r12,r8
80006ea2:	e3 cd 80 80 	ldm	sp++,r7,pc
80006ea6:	00 00       	add	r0,r0
80006ea8:	00 00       	add	r0,r0
80006eaa:	0b 24       	ld.uh	r4,r5++
80006eac:	80 00       	ld.sh	r0,r0[0x0]
80006eae:	4a 20       	lddpc	r0,80006f34 <udc_valid_address+0xc>

80006eb0 <udc_req_std_dev_set_feature>:
 * \brief Standard device request to set a feature
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_feature(void)
{
80006eb0:	eb cd 40 80 	pushm	r7,lr
80006eb4:	1a 97       	mov	r7,sp
	if (udd_g_ctrlreq.req.wLength) {
80006eb6:	48 98       	lddpc	r8,80006ed8 <udc_req_std_dev_set_feature+0x28>
80006eb8:	90 38       	ld.sh	r8,r8[0x6]
80006eba:	58 08       	cp.w	r8,0
80006ebc:	c0 30       	breq	80006ec2 <udc_req_std_dev_set_feature+0x12>
		return false;
80006ebe:	30 08       	mov	r8,0
80006ec0:	c0 98       	rjmp	80006ed2 <udc_req_std_dev_set_feature+0x22>
	}

	switch (udd_g_ctrlreq.req.wValue) {
80006ec2:	48 68       	lddpc	r8,80006ed8 <udc_req_std_dev_set_feature+0x28>
80006ec4:	90 18       	ld.sh	r8,r8[0x2]
80006ec6:	5c 78       	castu.h	r8
80006ec8:	58 18       	cp.w	r8,1
80006eca:	c0 31       	brne	80006ed0 <udc_req_std_dev_set_feature+0x20>
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		udc_device_status |= CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP);
		UDC_REMOTEWAKEUP_ENABLE();
		return true;
#else
		return false;
80006ecc:	30 08       	mov	r8,0
80006ece:	c0 28       	rjmp	80006ed2 <udc_req_std_dev_set_feature+0x22>
		break;
#endif
	default:
		break;
	}
	return false;
80006ed0:	30 08       	mov	r8,0
}
80006ed2:	10 9c       	mov	r12,r8
80006ed4:	e3 cd 80 80 	ldm	sp++,r7,pc
80006ed8:	00 00       	add	r0,r0
80006eda:	0b 24       	ld.uh	r4,r5++

80006edc <udc_req_std_ep_set_feature>:
 *
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
80006edc:	eb cd 40 80 	pushm	r7,lr
80006ee0:	1a 97       	mov	r7,sp
	if (udd_g_ctrlreq.req.wLength) {
80006ee2:	48 f8       	lddpc	r8,80006f1c <udc_req_std_ep_set_feature+0x40>
80006ee4:	90 38       	ld.sh	r8,r8[0x6]
80006ee6:	58 08       	cp.w	r8,0
80006ee8:	c0 30       	breq	80006eee <udc_req_std_ep_set_feature+0x12>
		return false;
80006eea:	30 08       	mov	r8,0
80006eec:	c1 48       	rjmp	80006f14 <udc_req_std_ep_set_feature+0x38>
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
80006eee:	48 c8       	lddpc	r8,80006f1c <udc_req_std_ep_set_feature+0x40>
80006ef0:	90 18       	ld.sh	r8,r8[0x2]
80006ef2:	58 08       	cp.w	r8,0
80006ef4:	c0 f1       	brne	80006f12 <udc_req_std_ep_set_feature+0x36>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
80006ef6:	48 a8       	lddpc	r8,80006f1c <udc_req_std_ep_set_feature+0x40>
80006ef8:	90 28       	ld.sh	r8,r8[0x4]
80006efa:	5c 58       	castu.b	r8
80006efc:	10 9c       	mov	r12,r8
80006efe:	f0 1f 00 09 	mcall	80006f20 <udc_req_std_ep_set_feature+0x44>
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
80006f02:	48 78       	lddpc	r8,80006f1c <udc_req_std_ep_set_feature+0x40>
80006f04:	90 28       	ld.sh	r8,r8[0x4]
80006f06:	5c 58       	castu.b	r8
80006f08:	10 9c       	mov	r12,r8
80006f0a:	f0 1f 00 07 	mcall	80006f24 <udc_req_std_ep_set_feature+0x48>
80006f0e:	18 98       	mov	r8,r12
80006f10:	c0 28       	rjmp	80006f14 <udc_req_std_ep_set_feature+0x38>
	}
	return false;
80006f12:	30 08       	mov	r8,0
}
80006f14:	10 9c       	mov	r12,r8
80006f16:	e3 cd 80 80 	ldm	sp++,r7,pc
80006f1a:	00 00       	add	r0,r0
80006f1c:	00 00       	add	r0,r0
80006f1e:	0b 24       	ld.uh	r4,r5++
80006f20:	80 00       	ld.sh	r0,r0[0x0]
80006f22:	4c 84       	lddpc	r4,80007040 <udc_req_std_dev_get_descriptor+0x1c>
80006f24:	80 00       	ld.sh	r0,r0[0x0]
80006f26:	49 0c       	lddpc	r12,80006f64 <udc_req_std_dev_set_address+0x18>

80006f28 <udc_valid_address>:
/**
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
80006f28:	eb cd 40 80 	pushm	r7,lr
80006f2c:	1a 97       	mov	r7,sp
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
80006f2e:	48 68       	lddpc	r8,80006f44 <udc_valid_address+0x1c>
80006f30:	90 18       	ld.sh	r8,r8[0x2]
80006f32:	5c 58       	castu.b	r8
80006f34:	f1 d8 c0 07 	bfextu	r8,r8,0x0,0x7
80006f38:	10 9c       	mov	r12,r8
80006f3a:	f0 1f 00 04 	mcall	80006f48 <udc_valid_address+0x20>
}
80006f3e:	e3 cd 80 80 	ldm	sp++,r7,pc
80006f42:	00 00       	add	r0,r0
80006f44:	00 00       	add	r0,r0
80006f46:	0b 24       	ld.uh	r4,r5++
80006f48:	80 00       	ld.sh	r0,r0[0x0]
80006f4a:	44 2a       	lddsp	r10,sp[0x108]

80006f4c <udc_req_std_dev_set_address>:
 * \brief Standard device request to set device address
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
80006f4c:	eb cd 40 80 	pushm	r7,lr
80006f50:	1a 97       	mov	r7,sp
	if (udd_g_ctrlreq.req.wLength) {
80006f52:	48 78       	lddpc	r8,80006f6c <udc_req_std_dev_set_address+0x20>
80006f54:	90 38       	ld.sh	r8,r8[0x6]
80006f56:	58 08       	cp.w	r8,0
80006f58:	c0 30       	breq	80006f5e <udc_req_std_dev_set_address+0x12>
		return false;
80006f5a:	30 08       	mov	r8,0
80006f5c:	c0 58       	rjmp	80006f66 <udc_req_std_dev_set_address+0x1a>
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
80006f5e:	48 48       	lddpc	r8,80006f6c <udc_req_std_dev_set_address+0x20>
80006f60:	48 49       	lddpc	r9,80006f70 <udc_req_std_dev_set_address+0x24>
80006f62:	91 49       	st.w	r8[0x10],r9
	return true;
80006f64:	30 18       	mov	r8,1
}
80006f66:	10 9c       	mov	r12,r8
80006f68:	e3 cd 80 80 	ldm	sp++,r7,pc
80006f6c:	00 00       	add	r0,r0
80006f6e:	0b 24       	ld.uh	r4,r5++
80006f70:	80 00       	ld.sh	r0,r0[0x0]
80006f72:	6f 28       	ld.w	r8,r7[0x48]

80006f74 <udc_req_std_dev_get_str_desc>:
 * \brief Standard device request to get device string descriptor
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_str_desc(void)
{
80006f74:	eb cd 40 80 	pushm	r7,lr
80006f78:	1a 97       	mov	r7,sp
80006f7a:	20 3d       	sub	sp,12
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;
80006f7c:	30 08       	mov	r8,0
80006f7e:	ef 68 ff ff 	st.b	r7[-1],r8

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
80006f82:	4a 58       	lddpc	r8,80007014 <udc_req_std_dev_get_str_desc+0xa0>
80006f84:	90 18       	ld.sh	r8,r8[0x2]
80006f86:	5c 78       	castu.h	r8
80006f88:	f1 d8 c0 08 	bfextu	r8,r8,0x0,0x8
80006f8c:	c0 c1       	brne	80006fa4 <udc_req_std_dev_get_str_desc+0x30>
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
80006f8e:	30 4b       	mov	r11,4
80006f90:	4a 2c       	lddpc	r12,80007018 <udc_req_std_dev_get_str_desc+0xa4>
80006f92:	f0 1f 00 23 	mcall	8000701c <udc_req_std_dev_get_str_desc+0xa8>
		}
#endif
		return false;
	}

	if (str_length) {
80006f96:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80006f9a:	30 08       	mov	r8,0
80006f9c:	f0 09 18 00 	cp.b	r9,r8
80006fa0:	c0 41       	brne	80006fa8 <udc_req_std_dev_get_str_desc+0x34>
80006fa2:	c3 38       	rjmp	80007008 <udc_req_std_dev_get_str_desc+0x94>
#ifdef UDC_GET_EXTRA_STRING
		if (UDC_GET_EXTRA_STRING()) {
			break;
		}
#endif
		return false;
80006fa4:	30 08       	mov	r8,0
80006fa6:	c3 28       	rjmp	8000700a <udc_req_std_dev_get_str_desc+0x96>
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
80006fa8:	30 08       	mov	r8,0
80006faa:	ef 68 ff f7 	st.b	r7[-9],r8
80006fae:	c1 88       	rjmp	80006fde <udc_req_std_dev_get_str_desc+0x6a>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
80006fb0:	ef 3b ff f7 	ld.ub	r11,r7[-9]
80006fb4:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80006fb8:	ee f9 ff f8 	ld.w	r9,r7[-8]
80006fbc:	f2 08 00 08 	add	r8,r9,r8
80006fc0:	11 88       	ld.ub	r8,r8[0x0]
80006fc2:	5c c8       	swap.bh	r8
80006fc4:	5c 88       	casts.h	r8
80006fc6:	10 99       	mov	r9,r8
80006fc8:	49 6a       	lddpc	r10,80007020 <udc_req_std_dev_get_str_desc+0xac>
80006fca:	f6 08 15 01 	lsl	r8,r11,0x1
80006fce:	f4 08 00 08 	add	r8,r10,r8
80006fd2:	b0 19       	st.h	r8[0x2],r9
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
80006fd4:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80006fd8:	2f f8       	sub	r8,-1
80006fda:	ef 68 ff f7 	st.b	r7[-9],r8
80006fde:	ef 39 ff f7 	ld.ub	r9,r7[-9]
80006fe2:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80006fe6:	f0 09 18 00 	cp.b	r9,r8
80006fea:	ce 33       	brcs	80006fb0 <udc_req_std_dev_get_str_desc+0x3c>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
80006fec:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80006ff0:	2f f8       	sub	r8,-1
80006ff2:	5c 58       	castu.b	r8
80006ff4:	a1 78       	lsl	r8,0x1
80006ff6:	5c 58       	castu.b	r8
80006ff8:	48 a9       	lddpc	r9,80007020 <udc_req_std_dev_get_str_desc+0xac>
80006ffa:	b2 88       	st.b	r9[0x0],r8
		udd_set_setup_payload(
			(uint8_t *) &udc_string_desc,
			udc_string_desc.header.bLength);
80006ffc:	48 98       	lddpc	r8,80007020 <udc_req_std_dev_get_str_desc+0xac>
80006ffe:	11 88       	ld.ub	r8,r8[0x0]
		for(i = 0; i < str_length; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
		udd_set_setup_payload(
80007000:	10 9b       	mov	r11,r8
80007002:	48 8c       	lddpc	r12,80007020 <udc_req_std_dev_get_str_desc+0xac>
80007004:	f0 1f 00 06 	mcall	8000701c <udc_req_std_dev_get_str_desc+0xa8>
			(uint8_t *) &udc_string_desc,
			udc_string_desc.header.bLength);
	}

	return true;
80007008:	30 18       	mov	r8,1
}
8000700a:	10 9c       	mov	r12,r8
8000700c:	2f dd       	sub	sp,-12
8000700e:	e3 cd 80 80 	ldm	sp++,r7,pc
80007012:	00 00       	add	r0,r0
80007014:	00 00       	add	r0,r0
80007016:	0b 24       	ld.uh	r4,r5++
80007018:	00 00       	add	r0,r0
8000701a:	00 34       	cp.w	r4,r0
8000701c:	80 00       	ld.sh	r0,r0[0x0]
8000701e:	44 c4       	lddsp	r4,sp[0x130]
80007020:	00 00       	add	r0,r0
80007022:	00 38       	cp.w	r8,r0

80007024 <udc_req_std_dev_get_descriptor>:
 * \brief Standard device request to get descriptors about USB device
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_descriptor(void)
{
80007024:	eb cd 40 80 	pushm	r7,lr
80007028:	1a 97       	mov	r7,sp
8000702a:	20 1d       	sub	sp,4
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
8000702c:	4c 18       	lddpc	r8,80007130 <udc_req_std_dev_get_descriptor+0x10c>
8000702e:	90 18       	ld.sh	r8,r8[0x2]
80007030:	ef 68 ff ff 	st.b	r7[-1],r8

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
80007034:	4b f8       	lddpc	r8,80007130 <udc_req_std_dev_get_descriptor+0x10c>
80007036:	90 18       	ld.sh	r8,r8[0x2]
80007038:	5c 78       	castu.h	r8
8000703a:	a9 88       	lsr	r8,0x8
8000703c:	5c 88       	casts.h	r8
8000703e:	5c 58       	castu.b	r8
80007040:	58 28       	cp.w	r8,2
80007042:	c1 60       	breq	8000706e <udc_req_std_dev_get_descriptor+0x4a>
80007044:	e0 89 00 05 	brgt	8000704e <udc_req_std_dev_get_descriptor+0x2a>
80007048:	58 18       	cp.w	r8,1
8000704a:	c0 70       	breq	80007058 <udc_req_std_dev_get_descriptor+0x34>
8000704c:	c5 f8       	rjmp	8000710a <udc_req_std_dev_get_descriptor+0xe6>
8000704e:	58 38       	cp.w	r8,3
80007050:	c5 40       	breq	800070f8 <udc_req_std_dev_get_descriptor+0xd4>
80007052:	58 f8       	cp.w	r8,15
80007054:	c3 c0       	breq	800070cc <udc_req_std_dev_get_descriptor+0xa8>
80007056:	c5 a8       	rjmp	8000710a <udc_req_std_dev_get_descriptor+0xe6>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
80007058:	4b 78       	lddpc	r8,80007134 <udc_req_std_dev_get_descriptor+0x110>
8000705a:	70 08       	ld.w	r8,r8[0x0]
8000705c:	11 88       	ld.ub	r8,r8[0x0]
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
8000705e:	10 99       	mov	r9,r8
80007060:	4b 58       	lddpc	r8,80007134 <udc_req_std_dev_get_descriptor+0x110>
80007062:	70 08       	ld.w	r8,r8[0x0]
80007064:	12 9b       	mov	r11,r9
80007066:	10 9c       	mov	r12,r8
80007068:	f0 1f 00 34 	mcall	80007138 <udc_req_std_dev_get_descriptor+0x114>
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
		}
		break;
8000706c:	c5 28       	rjmp	80007110 <udc_req_std_dev_get_descriptor+0xec>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
8000706e:	4b 28       	lddpc	r8,80007134 <udc_req_std_dev_get_descriptor+0x110>
80007070:	70 08       	ld.w	r8,r8[0x0]
80007072:	f1 38 00 11 	ld.ub	r8,r8[17]
80007076:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000707a:	f0 09 18 00 	cp.b	r9,r8
8000707e:	c0 33       	brcs	80007084 <udc_req_std_dev_get_descriptor+0x60>
					bNumConfigurations) {
				return false;
80007080:	30 08       	mov	r8,0
80007082:	c5 38       	rjmp	80007128 <udc_req_std_dev_get_descriptor+0x104>
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
80007084:	4a c8       	lddpc	r8,80007134 <udc_req_std_dev_get_descriptor+0x110>
80007086:	70 19       	ld.w	r9,r8[0x4]
80007088:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000708c:	a3 78       	lsl	r8,0x3
8000708e:	f2 08 00 08 	add	r8,r9,r8
80007092:	70 08       	ld.w	r8,r8[0x0]
80007094:	11 a9       	ld.ub	r9,r8[0x2]
80007096:	a9 69       	lsl	r9,0x8
80007098:	11 b8       	ld.ub	r8,r8[0x3]
8000709a:	12 48       	or	r8,r9
8000709c:	5c 88       	casts.h	r8
8000709e:	5c 88       	casts.h	r8
800070a0:	5c c8       	swap.bh	r8
800070a2:	5c 88       	casts.h	r8
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
800070a4:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
800070a8:	4a 38       	lddpc	r8,80007134 <udc_req_std_dev_get_descriptor+0x110>
800070aa:	70 1a       	ld.w	r10,r8[0x4]
800070ac:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800070b0:	a3 78       	lsl	r8,0x3
800070b2:	f4 08 00 08 	add	r8,r10,r8
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
800070b6:	70 08       	ld.w	r8,r8[0x0]
800070b8:	12 9b       	mov	r11,r9
800070ba:	10 9c       	mov	r12,r8
800070bc:	f0 1f 00 1f 	mcall	80007138 <udc_req_std_dev_get_descriptor+0x114>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
800070c0:	49 c8       	lddpc	r8,80007130 <udc_req_std_dev_get_descriptor+0x10c>
800070c2:	70 28       	ld.w	r8,r8[0x8]
800070c4:	10 99       	mov	r9,r8
800070c6:	30 28       	mov	r8,2
800070c8:	b2 98       	st.b	r9[0x1],r8
				USB_DT_CONFIGURATION;
		break;
800070ca:	c2 38       	rjmp	80007110 <udc_req_std_dev_get_descriptor+0xec>
		break;
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
800070cc:	49 a8       	lddpc	r8,80007134 <udc_req_std_dev_get_descriptor+0x110>
800070ce:	70 28       	ld.w	r8,r8[0x8]
800070d0:	58 08       	cp.w	r8,0
800070d2:	c0 31       	brne	800070d8 <udc_req_std_dev_get_descriptor+0xb4>
			return false;
800070d4:	30 08       	mov	r8,0
800070d6:	c2 98       	rjmp	80007128 <udc_req_std_dev_get_descriptor+0x104>
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
				udc_config.conf_bos->wTotalLength);
800070d8:	49 78       	lddpc	r8,80007134 <udc_req_std_dev_get_descriptor+0x110>
800070da:	70 28       	ld.w	r8,r8[0x8]
800070dc:	11 a9       	ld.ub	r9,r8[0x2]
800070de:	a9 69       	lsl	r9,0x8
800070e0:	11 b8       	ld.ub	r8,r8[0x3]
800070e2:	12 48       	or	r8,r9
800070e4:	5c 88       	casts.h	r8
	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
			return false;
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
800070e6:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
800070ea:	49 38       	lddpc	r8,80007134 <udc_req_std_dev_get_descriptor+0x110>
800070ec:	70 28       	ld.w	r8,r8[0x8]
800070ee:	12 9b       	mov	r11,r9
800070f0:	10 9c       	mov	r12,r8
800070f2:	f0 1f 00 12 	mcall	80007138 <udc_req_std_dev_get_descriptor+0x114>
				udc_config.conf_bos->wTotalLength);
		break;
800070f6:	c0 d8       	rjmp	80007110 <udc_req_std_dev_get_descriptor+0xec>

	case USB_DT_STRING:
		// String descriptor requested
		if (!udc_req_std_dev_get_str_desc()) {
800070f8:	f0 1f 00 11 	mcall	8000713c <udc_req_std_dev_get_descriptor+0x118>
800070fc:	18 98       	mov	r8,r12
800070fe:	ec 18 00 01 	eorl	r8,0x1
80007102:	5c 58       	castu.b	r8
80007104:	c0 50       	breq	8000710e <udc_req_std_dev_get_descriptor+0xea>
			return false;
80007106:	30 08       	mov	r8,0
80007108:	c1 08       	rjmp	80007128 <udc_req_std_dev_get_descriptor+0x104>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
8000710a:	30 08       	mov	r8,0
8000710c:	c0 e8       	rjmp	80007128 <udc_req_std_dev_get_descriptor+0x104>
	case USB_DT_STRING:
		// String descriptor requested
		if (!udc_req_std_dev_get_str_desc()) {
			return false;
		}
		break;
8000710e:	d7 03       	nop
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
80007110:	48 88       	lddpc	r8,80007130 <udc_req_std_dev_get_descriptor+0x10c>
80007112:	90 39       	ld.sh	r9,r8[0x6]
80007114:	48 78       	lddpc	r8,80007130 <udc_req_std_dev_get_descriptor+0x10c>
80007116:	90 68       	ld.sh	r8,r8[0xc]
80007118:	f0 09 19 00 	cp.h	r9,r8
8000711c:	c0 52       	brcc	80007126 <udc_req_std_dev_get_descriptor+0x102>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
8000711e:	48 58       	lddpc	r8,80007130 <udc_req_std_dev_get_descriptor+0x10c>
80007120:	90 38       	ld.sh	r8,r8[0x6]
80007122:	48 49       	lddpc	r9,80007130 <udc_req_std_dev_get_descriptor+0x10c>
80007124:	b2 68       	st.h	r9[0xc],r8
	}
	return true;
80007126:	30 18       	mov	r8,1
}
80007128:	10 9c       	mov	r12,r8
8000712a:	2f fd       	sub	sp,-4
8000712c:	e3 cd 80 80 	ldm	sp++,r7,pc
80007130:	00 00       	add	r0,r0
80007132:	0b 24       	ld.uh	r4,r5++
80007134:	00 00       	add	r0,r0
80007136:	00 a4       	st.w	r0++,r4
80007138:	80 00       	ld.sh	r0,r0[0x0]
8000713a:	44 c4       	lddsp	r4,sp[0x130]
8000713c:	80 00       	ld.sh	r0,r0[0x0]
8000713e:	6f 74       	ld.w	r4,r7[0x5c]

80007140 <udc_req_std_dev_get_configuration>:
 * \brief Standard device request to get configuration number
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
80007140:	eb cd 40 80 	pushm	r7,lr
80007144:	1a 97       	mov	r7,sp
	if (udd_g_ctrlreq.req.wLength != 1) {
80007146:	48 98       	lddpc	r8,80007168 <udc_req_std_dev_get_configuration+0x28>
80007148:	90 39       	ld.sh	r9,r8[0x6]
8000714a:	30 18       	mov	r8,1
8000714c:	f0 09 19 00 	cp.h	r9,r8
80007150:	c0 30       	breq	80007156 <udc_req_std_dev_get_configuration+0x16>
		return false;
80007152:	30 08       	mov	r8,0
80007154:	c0 68       	rjmp	80007160 <udc_req_std_dev_get_configuration+0x20>
	}

	udd_set_setup_payload(&udc_num_configuration,1);
80007156:	30 1b       	mov	r11,1
80007158:	48 5c       	lddpc	r12,8000716c <udc_req_std_dev_get_configuration+0x2c>
8000715a:	f0 1f 00 06 	mcall	80007170 <udc_req_std_dev_get_configuration+0x30>
	return true;
8000715e:	30 18       	mov	r8,1
}
80007160:	10 9c       	mov	r12,r8
80007162:	e3 cd 80 80 	ldm	sp++,r7,pc
80007166:	00 00       	add	r0,r0
80007168:	00 00       	add	r0,r0
8000716a:	0b 24       	ld.uh	r4,r5++
8000716c:	00 00       	add	r0,r0
8000716e:	07 bc       	ld.ub	r12,r3[0x3]
80007170:	80 00       	ld.sh	r0,r0[0x0]
80007172:	44 c4       	lddsp	r4,sp[0x130]

80007174 <udc_req_std_dev_set_configuration>:
 * \brief Standard device request to enable a configuration
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_configuration(void)
{
80007174:	eb cd 40 80 	pushm	r7,lr
80007178:	1a 97       	mov	r7,sp
8000717a:	20 1d       	sub	sp,4
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
8000717c:	4a b8       	lddpc	r8,80007228 <udc_req_std_dev_set_configuration+0xb4>
8000717e:	90 38       	ld.sh	r8,r8[0x6]
80007180:	58 08       	cp.w	r8,0
80007182:	c0 30       	breq	80007188 <udc_req_std_dev_set_configuration+0x14>
		return false;
80007184:	30 08       	mov	r8,0
80007186:	c4 c8       	rjmp	8000721e <udc_req_std_dev_set_configuration+0xaa>
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
80007188:	f0 1f 00 29 	mcall	8000722c <udc_req_std_dev_set_configuration+0xb8>
8000718c:	18 98       	mov	r8,r12
8000718e:	58 08       	cp.w	r8,0
80007190:	c0 31       	brne	80007196 <udc_req_std_dev_set_configuration+0x22>
		return false;
80007192:	30 08       	mov	r8,0
80007194:	c4 58       	rjmp	8000721e <udc_req_std_dev_set_configuration+0xaa>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
80007196:	4a 58       	lddpc	r8,80007228 <udc_req_std_dev_set_configuration+0xb4>
80007198:	90 18       	ld.sh	r8,r8[0x2]
8000719a:	5c 78       	castu.h	r8
8000719c:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
				udc_config.confdev_lsfs->bNumConfigurations) {
800071a0:	4a 48       	lddpc	r8,80007230 <udc_req_std_dev_set_configuration+0xbc>
800071a2:	70 08       	ld.w	r8,r8[0x0]
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
800071a4:	f1 38 00 11 	ld.ub	r8,r8[17]
800071a8:	10 39       	cp.w	r9,r8
800071aa:	e0 8a 00 04 	brle	800071b2 <udc_req_std_dev_set_configuration+0x3e>
				udc_config.confdev_lsfs->bNumConfigurations) {
			return false;
800071ae:	30 08       	mov	r8,0
800071b0:	c3 78       	rjmp	8000721e <udc_req_std_dev_set_configuration+0xaa>
		}
	}

	// Reset current configuration
	udc_reset();
800071b2:	f0 1f 00 21 	mcall	80007234 <udc_req_std_dev_set_configuration+0xc0>

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
800071b6:	49 d8       	lddpc	r8,80007228 <udc_req_std_dev_set_configuration+0xb4>
800071b8:	90 18       	ld.sh	r8,r8[0x2]
800071ba:	5c 58       	castu.b	r8
800071bc:	49 f9       	lddpc	r9,80007238 <udc_req_std_dev_set_configuration+0xc4>
800071be:	b2 88       	st.b	r9[0x0],r8
	if (udc_num_configuration == 0) {
800071c0:	49 e8       	lddpc	r8,80007238 <udc_req_std_dev_set_configuration+0xc4>
800071c2:	11 88       	ld.ub	r8,r8[0x0]
800071c4:	58 08       	cp.w	r8,0
800071c6:	c0 31       	brne	800071cc <udc_req_std_dev_set_configuration+0x58>
		return true; // Default empty configuration requested
800071c8:	30 18       	mov	r8,1
800071ca:	c2 a8       	rjmp	8000721e <udc_req_std_dev_set_configuration+0xaa>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
800071cc:	49 98       	lddpc	r8,80007230 <udc_req_std_dev_set_configuration+0xbc>
800071ce:	70 19       	ld.w	r9,r8[0x4]
800071d0:	49 a8       	lddpc	r8,80007238 <udc_req_std_dev_set_configuration+0xc4>
800071d2:	11 88       	ld.ub	r8,r8[0x0]
800071d4:	20 18       	sub	r8,1
800071d6:	a3 78       	lsl	r8,0x3
800071d8:	10 09       	add	r9,r8
800071da:	49 98       	lddpc	r8,8000723c <udc_req_std_dev_set_configuration+0xc8>
800071dc:	91 09       	st.w	r8[0x0],r9
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
800071de:	30 08       	mov	r8,0
800071e0:	ef 68 ff ff 	st.b	r7[-1],r8
800071e4:	c1 38       	rjmp	8000720a <udc_req_std_dev_set_configuration+0x96>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
800071e6:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800071ea:	30 0b       	mov	r11,0
800071ec:	10 9c       	mov	r12,r8
800071ee:	f0 1f 00 15 	mcall	80007240 <udc_req_std_dev_set_configuration+0xcc>
800071f2:	18 98       	mov	r8,r12
800071f4:	ec 18 00 01 	eorl	r8,0x1
800071f8:	5c 58       	castu.b	r8
800071fa:	c0 30       	breq	80007200 <udc_req_std_dev_set_configuration+0x8c>
			return false;
800071fc:	30 08       	mov	r8,0
800071fe:	c1 08       	rjmp	8000721e <udc_req_std_dev_set_configuration+0xaa>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
80007200:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80007204:	2f f8       	sub	r8,-1
80007206:	ef 68 ff ff 	st.b	r7[-1],r8
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
8000720a:	48 d8       	lddpc	r8,8000723c <udc_req_std_dev_set_configuration+0xc8>
8000720c:	70 08       	ld.w	r8,r8[0x0]
8000720e:	70 08       	ld.w	r8,r8[0x0]
80007210:	11 c8       	ld.ub	r8,r8[0x4]
80007212:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80007216:	f0 09 18 00 	cp.b	r9,r8
8000721a:	ce 63       	brcs	800071e6 <udc_req_std_dev_set_configuration+0x72>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
			return false;
		}
	}
	return true;
8000721c:	30 18       	mov	r8,1
}
8000721e:	10 9c       	mov	r12,r8
80007220:	2f fd       	sub	sp,-4
80007222:	e3 cd 80 80 	ldm	sp++,r7,pc
80007226:	00 00       	add	r0,r0
80007228:	00 00       	add	r0,r0
8000722a:	0b 24       	ld.uh	r4,r5++
8000722c:	80 00       	ld.sh	r0,r0[0x0]
8000722e:	44 78       	lddsp	r8,sp[0x11c]
80007230:	00 00       	add	r0,r0
80007232:	00 a4       	st.w	r0++,r4
80007234:	80 00       	ld.sh	r0,r0[0x0]
80007236:	6c d4       	ld.w	r4,r6[0x34]
80007238:	00 00       	add	r0,r0
8000723a:	07 bc       	ld.ub	r12,r3[0x3]
8000723c:	00 00       	add	r0,r0
8000723e:	07 c0       	ld.ub	r0,r3[0x4]
80007240:	80 00       	ld.sh	r0,r0[0x0]
80007242:	6b f8       	ld.w	r8,r5[0x7c]

80007244 <udc_req_std_iface_get_setting>:
 * to get the alternate setting number of an interface
 *
 * \return true if success
 */
static bool udc_req_std_iface_get_setting(void)
{
80007244:	eb cd 40 80 	pushm	r7,lr
80007248:	1a 97       	mov	r7,sp
8000724a:	20 2d       	sub	sp,8
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
8000724c:	4a 38       	lddpc	r8,800072d8 <udc_req_std_iface_get_setting+0x94>
8000724e:	90 39       	ld.sh	r9,r8[0x6]
80007250:	30 18       	mov	r8,1
80007252:	f0 09 19 00 	cp.h	r9,r8
80007256:	c0 30       	breq	8000725c <udc_req_std_iface_get_setting+0x18>
		return false; // Error in request
80007258:	30 08       	mov	r8,0
8000725a:	c3 a8       	rjmp	800072ce <udc_req_std_iface_get_setting+0x8a>
	}
	if (!udc_num_configuration) {
8000725c:	4a 08       	lddpc	r8,800072dc <udc_req_std_iface_get_setting+0x98>
8000725e:	11 88       	ld.ub	r8,r8[0x0]
80007260:	58 08       	cp.w	r8,0
80007262:	c0 31       	brne	80007268 <udc_req_std_iface_get_setting+0x24>
		return false; // The device is not is configured state yet
80007264:	30 08       	mov	r8,0
80007266:	c3 48       	rjmp	800072ce <udc_req_std_iface_get_setting+0x8a>
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
80007268:	49 c8       	lddpc	r8,800072d8 <udc_req_std_iface_get_setting+0x94>
8000726a:	90 28       	ld.sh	r8,r8[0x4]
8000726c:	ef 68 ff fb 	st.b	r7[-5],r8
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
80007270:	49 c8       	lddpc	r8,800072e0 <udc_req_std_iface_get_setting+0x9c>
80007272:	70 08       	ld.w	r8,r8[0x0]
80007274:	70 08       	ld.w	r8,r8[0x0]
80007276:	11 c8       	ld.ub	r8,r8[0x4]
80007278:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8000727c:	f0 09 18 00 	cp.b	r9,r8
80007280:	c0 33       	brcs	80007286 <udc_req_std_iface_get_setting+0x42>
		return false;
80007282:	30 08       	mov	r8,0
80007284:	c2 58       	rjmp	800072ce <udc_req_std_iface_get_setting+0x8a>
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
80007286:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000728a:	30 0b       	mov	r11,0
8000728c:	10 9c       	mov	r12,r8
8000728e:	f0 1f 00 16 	mcall	800072e4 <udc_req_std_iface_get_setting+0xa0>
80007292:	18 98       	mov	r8,r12
80007294:	ec 18 00 01 	eorl	r8,0x1
80007298:	5c 58       	castu.b	r8
8000729a:	c0 30       	breq	800072a0 <udc_req_std_iface_get_setting+0x5c>
		return false;
8000729c:	30 08       	mov	r8,0
8000729e:	c1 88       	rjmp	800072ce <udc_req_std_iface_get_setting+0x8a>
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
800072a0:	49 08       	lddpc	r8,800072e0 <udc_req_std_iface_get_setting+0x9c>
800072a2:	70 08       	ld.w	r8,r8[0x0]
800072a4:	70 19       	ld.w	r9,r8[0x4]
800072a6:	ef 38 ff fb 	ld.ub	r8,r7[-5]
800072aa:	a3 68       	lsl	r8,0x2
800072ac:	f2 08 00 08 	add	r8,r9,r8
800072b0:	70 08       	ld.w	r8,r8[0x0]
800072b2:	ef 48 ff fc 	st.w	r7[-4],r8
	udc_iface_setting = udi_api->getsetting();
800072b6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800072ba:	70 38       	ld.w	r8,r8[0xc]
800072bc:	5d 18       	icall	r8
800072be:	18 98       	mov	r8,r12
800072c0:	48 a9       	lddpc	r9,800072e8 <udc_req_std_iface_get_setting+0xa4>
800072c2:	b2 88       	st.b	r9[0x0],r8

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
800072c4:	30 1b       	mov	r11,1
800072c6:	48 9c       	lddpc	r12,800072e8 <udc_req_std_iface_get_setting+0xa4>
800072c8:	f0 1f 00 09 	mcall	800072ec <udc_req_std_iface_get_setting+0xa8>
	return true;
800072cc:	30 18       	mov	r8,1
}
800072ce:	10 9c       	mov	r12,r8
800072d0:	2f ed       	sub	sp,-8
800072d2:	e3 cd 80 80 	ldm	sp++,r7,pc
800072d6:	00 00       	add	r0,r0
800072d8:	00 00       	add	r0,r0
800072da:	0b 24       	ld.uh	r4,r5++
800072dc:	00 00       	add	r0,r0
800072de:	07 bc       	ld.ub	r12,r3[0x3]
800072e0:	00 00       	add	r0,r0
800072e2:	07 c0       	ld.ub	r0,r3[0x4]
800072e4:	80 00       	ld.sh	r0,r0[0x0]
800072e6:	6a 84       	ld.w	r4,r5[0x20]
800072e8:	00 00       	add	r0,r0
800072ea:	07 b8       	ld.ub	r8,r3[0x3]
800072ec:	80 00       	ld.sh	r0,r0[0x0]
800072ee:	44 c4       	lddsp	r4,sp[0x130]

800072f0 <udc_req_std_iface_set_setting>:
 * to set an alternate setting of an interface
 *
 * \return true if success
 */
static bool udc_req_std_iface_set_setting(void)
{
800072f0:	eb cd 40 80 	pushm	r7,lr
800072f4:	1a 97       	mov	r7,sp
800072f6:	20 1d       	sub	sp,4
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
800072f8:	49 78       	lddpc	r8,80007354 <udc_req_std_iface_set_setting+0x64>
800072fa:	90 38       	ld.sh	r8,r8[0x6]
800072fc:	58 08       	cp.w	r8,0
800072fe:	c0 30       	breq	80007304 <udc_req_std_iface_set_setting+0x14>
		return false; // Error in request
80007300:	30 08       	mov	r8,0
80007302:	c2 48       	rjmp	8000734a <udc_req_std_iface_set_setting+0x5a>
	}
	if (!udc_num_configuration) {
80007304:	49 58       	lddpc	r8,80007358 <udc_req_std_iface_set_setting+0x68>
80007306:	11 88       	ld.ub	r8,r8[0x0]
80007308:	58 08       	cp.w	r8,0
8000730a:	c0 31       	brne	80007310 <udc_req_std_iface_set_setting+0x20>
		return false; // The device is not is configured state yet
8000730c:	30 08       	mov	r8,0
8000730e:	c1 e8       	rjmp	8000734a <udc_req_std_iface_set_setting+0x5a>
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
80007310:	49 18       	lddpc	r8,80007354 <udc_req_std_iface_set_setting+0x64>
80007312:	90 28       	ld.sh	r8,r8[0x4]
80007314:	ef 68 ff fe 	st.b	r7[-2],r8
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
80007318:	48 f8       	lddpc	r8,80007354 <udc_req_std_iface_set_setting+0x64>
8000731a:	90 18       	ld.sh	r8,r8[0x2]
8000731c:	ef 68 ff ff 	st.b	r7[-1],r8

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
80007320:	ef 38 ff fe 	ld.ub	r8,r7[-2]
80007324:	10 9c       	mov	r12,r8
80007326:	f0 1f 00 0e 	mcall	8000735c <udc_req_std_iface_set_setting+0x6c>
8000732a:	18 98       	mov	r8,r12
8000732c:	ec 18 00 01 	eorl	r8,0x1
80007330:	5c 58       	castu.b	r8
80007332:	c0 30       	breq	80007338 <udc_req_std_iface_set_setting+0x48>
		return false;
80007334:	30 08       	mov	r8,0
80007336:	c0 a8       	rjmp	8000734a <udc_req_std_iface_set_setting+0x5a>
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
80007338:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000733c:	ef 38 ff fe 	ld.ub	r8,r7[-2]
80007340:	12 9b       	mov	r11,r9
80007342:	10 9c       	mov	r12,r8
80007344:	f0 1f 00 07 	mcall	80007360 <udc_req_std_iface_set_setting+0x70>
80007348:	18 98       	mov	r8,r12
}
8000734a:	10 9c       	mov	r12,r8
8000734c:	2f fd       	sub	sp,-4
8000734e:	e3 cd 80 80 	ldm	sp++,r7,pc
80007352:	00 00       	add	r0,r0
80007354:	00 00       	add	r0,r0
80007356:	0b 24       	ld.uh	r4,r5++
80007358:	00 00       	add	r0,r0
8000735a:	07 bc       	ld.ub	r12,r3[0x3]
8000735c:	80 00       	ld.sh	r0,r0[0x0]
8000735e:	6b 3c       	ld.w	r12,r5[0x4c]
80007360:	80 00       	ld.sh	r0,r0[0x0]
80007362:	6b f8       	ld.w	r8,r5[0x7c]

80007364 <udc_reqstd>:
 * \brief Main routine to manage the standard USB SETUP request
 *
 * \return true if the request is supported
 */
static bool udc_reqstd(void)
{
80007364:	eb cd 40 80 	pushm	r7,lr
80007368:	1a 97       	mov	r7,sp
	if (Udd_setup_is_in()) {
8000736a:	4c 78       	lddpc	r8,80007484 <udc_reqstd+0x120>
8000736c:	11 88       	ld.ub	r8,r8[0x0]
8000736e:	10 99       	mov	r9,r8
80007370:	30 08       	mov	r8,0
80007372:	f0 09 18 00 	cp.b	r9,r8
80007376:	c3 c4       	brge	800073ee <udc_reqstd+0x8a>
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
80007378:	4c 38       	lddpc	r8,80007484 <udc_reqstd+0x120>
8000737a:	90 38       	ld.sh	r8,r8[0x6]
8000737c:	58 08       	cp.w	r8,0
8000737e:	c0 31       	brne	80007384 <udc_reqstd+0x20>
			return false; // Error for USB host
80007380:	30 08       	mov	r8,0
80007382:	c7 d8       	rjmp	8000747c <udc_reqstd+0x118>
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
80007384:	4c 08       	lddpc	r8,80007484 <udc_reqstd+0x120>
80007386:	11 88       	ld.ub	r8,r8[0x0]
80007388:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000738c:	c1 51       	brne	800073b6 <udc_reqstd+0x52>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
8000738e:	4b e8       	lddpc	r8,80007484 <udc_reqstd+0x120>
80007390:	11 98       	ld.ub	r8,r8[0x1]
80007392:	58 68       	cp.w	r8,6
80007394:	c0 90       	breq	800073a6 <udc_reqstd+0x42>
80007396:	58 88       	cp.w	r8,8
80007398:	c0 b0       	breq	800073ae <udc_reqstd+0x4a>
8000739a:	58 08       	cp.w	r8,0
8000739c:	c0 d1       	brne	800073b6 <udc_reqstd+0x52>
			case USB_REQ_GET_STATUS:
				return udc_req_std_dev_get_status();
8000739e:	f0 1f 00 3b 	mcall	80007488 <udc_reqstd+0x124>
800073a2:	18 98       	mov	r8,r12
800073a4:	c6 c8       	rjmp	8000747c <udc_reqstd+0x118>
			case USB_REQ_GET_DESCRIPTOR:
				return udc_req_std_dev_get_descriptor();
800073a6:	f0 1f 00 3a 	mcall	8000748c <udc_reqstd+0x128>
800073aa:	18 98       	mov	r8,r12
800073ac:	c6 88       	rjmp	8000747c <udc_reqstd+0x118>
			case USB_REQ_GET_CONFIGURATION:
				return udc_req_std_dev_get_configuration();
800073ae:	f0 1f 00 39 	mcall	80007490 <udc_reqstd+0x12c>
800073b2:	18 98       	mov	r8,r12
800073b4:	c6 48       	rjmp	8000747c <udc_reqstd+0x118>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
800073b6:	4b 48       	lddpc	r8,80007484 <udc_reqstd+0x120>
800073b8:	11 88       	ld.ub	r8,r8[0x0]
800073ba:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800073be:	58 18       	cp.w	r8,1
800073c0:	c0 91       	brne	800073d2 <udc_reqstd+0x6e>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
800073c2:	4b 18       	lddpc	r8,80007484 <udc_reqstd+0x120>
800073c4:	11 98       	ld.ub	r8,r8[0x1]
800073c6:	58 a8       	cp.w	r8,10
800073c8:	c0 51       	brne	800073d2 <udc_reqstd+0x6e>
			case USB_REQ_GET_INTERFACE:
				return udc_req_std_iface_get_setting();
800073ca:	f0 1f 00 33 	mcall	80007494 <udc_reqstd+0x130>
800073ce:	18 98       	mov	r8,r12
800073d0:	c5 68       	rjmp	8000747c <udc_reqstd+0x118>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
800073d2:	4a d8       	lddpc	r8,80007484 <udc_reqstd+0x120>
800073d4:	11 88       	ld.ub	r8,r8[0x0]
800073d6:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800073da:	58 28       	cp.w	r8,2
800073dc:	c4 f1       	brne	8000747a <udc_reqstd+0x116>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
800073de:	4a a8       	lddpc	r8,80007484 <udc_reqstd+0x120>
800073e0:	11 98       	ld.ub	r8,r8[0x1]
800073e2:	58 08       	cp.w	r8,0
800073e4:	c4 b1       	brne	8000747a <udc_reqstd+0x116>
			case USB_REQ_GET_STATUS:
				return udc_req_std_ep_get_status();
800073e6:	f0 1f 00 2d 	mcall	80007498 <udc_reqstd+0x134>
800073ea:	18 98       	mov	r8,r12
800073ec:	c4 88       	rjmp	8000747c <udc_reqstd+0x118>
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
800073ee:	4a 68       	lddpc	r8,80007484 <udc_reqstd+0x120>
800073f0:	11 88       	ld.ub	r8,r8[0x0]
800073f2:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800073f6:	c1 f1       	brne	80007434 <udc_reqstd+0xd0>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
800073f8:	4a 38       	lddpc	r8,80007484 <udc_reqstd+0x120>
800073fa:	11 98       	ld.ub	r8,r8[0x1]
800073fc:	58 38       	cp.w	r8,3
800073fe:	c1 30       	breq	80007424 <udc_reqstd+0xc0>
80007400:	e0 89 00 05 	brgt	8000740a <udc_reqstd+0xa6>
80007404:	58 18       	cp.w	r8,1
80007406:	c0 b0       	breq	8000741c <udc_reqstd+0xb8>
80007408:	c1 68       	rjmp	80007434 <udc_reqstd+0xd0>
8000740a:	58 58       	cp.w	r8,5
8000740c:	c0 40       	breq	80007414 <udc_reqstd+0xb0>
8000740e:	58 98       	cp.w	r8,9
80007410:	c0 e0       	breq	8000742c <udc_reqstd+0xc8>
80007412:	c1 18       	rjmp	80007434 <udc_reqstd+0xd0>
			case USB_REQ_SET_ADDRESS:
				return udc_req_std_dev_set_address();
80007414:	f0 1f 00 22 	mcall	8000749c <udc_reqstd+0x138>
80007418:	18 98       	mov	r8,r12
8000741a:	c3 18       	rjmp	8000747c <udc_reqstd+0x118>
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_dev_clear_feature();
8000741c:	f0 1f 00 21 	mcall	800074a0 <udc_reqstd+0x13c>
80007420:	18 98       	mov	r8,r12
80007422:	c2 d8       	rjmp	8000747c <udc_reqstd+0x118>
			case USB_REQ_SET_FEATURE:
				return udc_req_std_dev_set_feature();
80007424:	f0 1f 00 20 	mcall	800074a4 <udc_reqstd+0x140>
80007428:	18 98       	mov	r8,r12
8000742a:	c2 98       	rjmp	8000747c <udc_reqstd+0x118>
			case USB_REQ_SET_CONFIGURATION:
				return udc_req_std_dev_set_configuration();
8000742c:	f0 1f 00 1f 	mcall	800074a8 <udc_reqstd+0x144>
80007430:	18 98       	mov	r8,r12
80007432:	c2 58       	rjmp	8000747c <udc_reqstd+0x118>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
80007434:	49 48       	lddpc	r8,80007484 <udc_reqstd+0x120>
80007436:	11 88       	ld.ub	r8,r8[0x0]
80007438:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000743c:	58 18       	cp.w	r8,1
8000743e:	c0 91       	brne	80007450 <udc_reqstd+0xec>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
80007440:	49 18       	lddpc	r8,80007484 <udc_reqstd+0x120>
80007442:	11 98       	ld.ub	r8,r8[0x1]
80007444:	58 b8       	cp.w	r8,11
80007446:	c0 51       	brne	80007450 <udc_reqstd+0xec>
			case USB_REQ_SET_INTERFACE:
				return udc_req_std_iface_set_setting();
80007448:	f0 1f 00 19 	mcall	800074ac <udc_reqstd+0x148>
8000744c:	18 98       	mov	r8,r12
8000744e:	c1 78       	rjmp	8000747c <udc_reqstd+0x118>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
80007450:	48 d8       	lddpc	r8,80007484 <udc_reqstd+0x120>
80007452:	11 88       	ld.ub	r8,r8[0x0]
80007454:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80007458:	58 28       	cp.w	r8,2
8000745a:	c1 01       	brne	8000747a <udc_reqstd+0x116>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
8000745c:	48 a8       	lddpc	r8,80007484 <udc_reqstd+0x120>
8000745e:	11 98       	ld.ub	r8,r8[0x1]
80007460:	58 18       	cp.w	r8,1
80007462:	c0 40       	breq	8000746a <udc_reqstd+0x106>
80007464:	58 38       	cp.w	r8,3
80007466:	c0 60       	breq	80007472 <udc_reqstd+0x10e>
80007468:	c0 98       	rjmp	8000747a <udc_reqstd+0x116>
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_ep_clear_feature();
8000746a:	f0 1f 00 12 	mcall	800074b0 <udc_reqstd+0x14c>
8000746e:	18 98       	mov	r8,r12
80007470:	c0 68       	rjmp	8000747c <udc_reqstd+0x118>
			case USB_REQ_SET_FEATURE:
				return udc_req_std_ep_set_feature();
80007472:	f0 1f 00 11 	mcall	800074b4 <udc_reqstd+0x150>
80007476:	18 98       	mov	r8,r12
80007478:	c0 28       	rjmp	8000747c <udc_reqstd+0x118>
				break;
			}
		}
#endif
	}
	return false;
8000747a:	30 08       	mov	r8,0
}
8000747c:	10 9c       	mov	r12,r8
8000747e:	e3 cd 80 80 	ldm	sp++,r7,pc
80007482:	00 00       	add	r0,r0
80007484:	00 00       	add	r0,r0
80007486:	0b 24       	ld.uh	r4,r5++
80007488:	80 00       	ld.sh	r0,r0[0x0]
8000748a:	6d a8       	ld.w	r8,r6[0x68]
8000748c:	80 00       	ld.sh	r0,r0[0x0]
8000748e:	70 24       	ld.w	r4,r8[0x8]
80007490:	80 00       	ld.sh	r0,r0[0x0]
80007492:	71 40       	ld.w	r0,r8[0x50]
80007494:	80 00       	ld.sh	r0,r0[0x0]
80007496:	72 44       	ld.w	r4,r9[0x10]
80007498:	80 00       	ld.sh	r0,r0[0x0]
8000749a:	6d dc       	ld.w	r12,r6[0x74]
8000749c:	80 00       	ld.sh	r0,r0[0x0]
8000749e:	6f 4c       	ld.w	r12,r7[0x50]
800074a0:	80 00       	ld.sh	r0,r0[0x0]
800074a2:	6e 34       	ld.w	r4,r7[0xc]
800074a4:	80 00       	ld.sh	r0,r0[0x0]
800074a6:	6e b0       	ld.w	r0,r7[0x2c]
800074a8:	80 00       	ld.sh	r0,r0[0x0]
800074aa:	71 74       	ld.w	r4,r8[0x5c]
800074ac:	80 00       	ld.sh	r0,r0[0x0]
800074ae:	72 f0       	ld.w	r0,r9[0x3c]
800074b0:	80 00       	ld.sh	r0,r0[0x0]
800074b2:	6e 74       	ld.w	r4,r7[0x1c]
800074b4:	80 00       	ld.sh	r0,r0[0x0]
800074b6:	6e dc       	ld.w	r12,r7[0x34]

800074b8 <udc_req_iface>:
 * \brief Send the SETUP interface request to UDI
 *
 * \return true if the request is supported
 */
static bool udc_req_iface(void)
{
800074b8:	eb cd 40 80 	pushm	r7,lr
800074bc:	1a 97       	mov	r7,sp
800074be:	20 2d       	sub	sp,8
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
800074c0:	4a 58       	lddpc	r8,80007554 <udc_req_iface+0x9c>
800074c2:	11 88       	ld.ub	r8,r8[0x0]
800074c4:	58 08       	cp.w	r8,0
800074c6:	c0 31       	brne	800074cc <udc_req_iface+0x14>
		return false; // The device is not is configured state yet
800074c8:	30 08       	mov	r8,0
800074ca:	c4 08       	rjmp	8000754a <udc_req_iface+0x92>
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
800074cc:	4a 38       	lddpc	r8,80007558 <udc_req_iface+0xa0>
800074ce:	90 28       	ld.sh	r8,r8[0x4]
800074d0:	ef 68 ff fb 	st.b	r7[-5],r8
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
800074d4:	4a 28       	lddpc	r8,8000755c <udc_req_iface+0xa4>
800074d6:	70 08       	ld.w	r8,r8[0x0]
800074d8:	70 08       	ld.w	r8,r8[0x0]
800074da:	11 c8       	ld.ub	r8,r8[0x4]
800074dc:	ef 39 ff fb 	ld.ub	r9,r7[-5]
800074e0:	f0 09 18 00 	cp.b	r9,r8
800074e4:	c0 33       	brcs	800074ea <udc_req_iface+0x32>
		return false;
800074e6:	30 08       	mov	r8,0
800074e8:	c3 18       	rjmp	8000754a <udc_req_iface+0x92>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
800074ea:	ef 38 ff fb 	ld.ub	r8,r7[-5]
800074ee:	30 0b       	mov	r11,0
800074f0:	10 9c       	mov	r12,r8
800074f2:	f0 1f 00 1c 	mcall	80007560 <udc_req_iface+0xa8>
800074f6:	18 98       	mov	r8,r12
800074f8:	ec 18 00 01 	eorl	r8,0x1
800074fc:	5c 58       	castu.b	r8
800074fe:	c0 30       	breq	80007504 <udc_req_iface+0x4c>
		return false;
80007500:	30 08       	mov	r8,0
80007502:	c2 48       	rjmp	8000754a <udc_req_iface+0x92>
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
80007504:	49 68       	lddpc	r8,8000755c <udc_req_iface+0xa4>
80007506:	70 08       	ld.w	r8,r8[0x0]
80007508:	70 19       	ld.w	r9,r8[0x4]
8000750a:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000750e:	a3 68       	lsl	r8,0x2
80007510:	f2 08 00 08 	add	r8,r9,r8
80007514:	70 08       	ld.w	r8,r8[0x0]
80007516:	ef 48 ff fc 	st.w	r7[-4],r8
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
8000751a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000751e:	70 38       	ld.w	r8,r8[0xc]
80007520:	5d 18       	icall	r8
80007522:	18 98       	mov	r8,r12
80007524:	10 99       	mov	r9,r8
80007526:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000752a:	12 9b       	mov	r11,r9
8000752c:	10 9c       	mov	r12,r8
8000752e:	f0 1f 00 0d 	mcall	80007560 <udc_req_iface+0xa8>
80007532:	18 98       	mov	r8,r12
80007534:	ec 18 00 01 	eorl	r8,0x1
80007538:	5c 58       	castu.b	r8
8000753a:	c0 30       	breq	80007540 <udc_req_iface+0x88>
		return false;
8000753c:	30 08       	mov	r8,0
8000753e:	c0 68       	rjmp	8000754a <udc_req_iface+0x92>
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
80007540:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007544:	70 28       	ld.w	r8,r8[0x8]
80007546:	5d 18       	icall	r8
80007548:	18 98       	mov	r8,r12
}
8000754a:	10 9c       	mov	r12,r8
8000754c:	2f ed       	sub	sp,-8
8000754e:	e3 cd 80 80 	ldm	sp++,r7,pc
80007552:	00 00       	add	r0,r0
80007554:	00 00       	add	r0,r0
80007556:	07 bc       	ld.ub	r12,r3[0x3]
80007558:	00 00       	add	r0,r0
8000755a:	0b 24       	ld.uh	r4,r5++
8000755c:	00 00       	add	r0,r0
8000755e:	07 c0       	ld.ub	r0,r3[0x4]
80007560:	80 00       	ld.sh	r0,r0[0x0]
80007562:	6a 84       	ld.w	r4,r5[0x20]

80007564 <udc_req_ep>:
 * \brief Send the SETUP interface request to UDI
 *
 * \return true if the request is supported
 */
static bool udc_req_ep(void)
{
80007564:	eb cd 40 80 	pushm	r7,lr
80007568:	1a 97       	mov	r7,sp
8000756a:	20 2d       	sub	sp,8
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
8000756c:	4a 48       	lddpc	r8,800075fc <udc_req_ep+0x98>
8000756e:	11 88       	ld.ub	r8,r8[0x0]
80007570:	58 08       	cp.w	r8,0
80007572:	c0 31       	brne	80007578 <udc_req_ep+0x14>
		return false; // The device is not is configured state yet
80007574:	30 08       	mov	r8,0
80007576:	c3 f8       	rjmp	800075f4 <udc_req_ep+0x90>
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
80007578:	4a 28       	lddpc	r8,80007600 <udc_req_ep+0x9c>
8000757a:	90 28       	ld.sh	r8,r8[0x4]
8000757c:	ef 68 ff fb 	st.b	r7[-5],r8
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
80007580:	30 08       	mov	r8,0
80007582:	ef 68 ff fb 	st.b	r7[-5],r8
80007586:	c2 d8       	rjmp	800075e0 <udc_req_ep+0x7c>
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
80007588:	49 f8       	lddpc	r8,80007604 <udc_req_ep+0xa0>
8000758a:	70 08       	ld.w	r8,r8[0x0]
8000758c:	70 19       	ld.w	r9,r8[0x4]
8000758e:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80007592:	a3 68       	lsl	r8,0x2
80007594:	f2 08 00 08 	add	r8,r9,r8
80007598:	70 08       	ld.w	r8,r8[0x0]
8000759a:	ef 48 ff fc 	st.w	r7[-4],r8
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
8000759e:	ee f8 ff fc 	ld.w	r8,r7[-4]
800075a2:	70 38       	ld.w	r8,r8[0xc]
800075a4:	5d 18       	icall	r8
800075a6:	18 98       	mov	r8,r12
800075a8:	10 99       	mov	r9,r8
800075aa:	ef 38 ff fb 	ld.ub	r8,r7[-5]
800075ae:	12 9b       	mov	r11,r9
800075b0:	10 9c       	mov	r12,r8
800075b2:	f0 1f 00 16 	mcall	80007608 <udc_req_ep+0xa4>
800075b6:	18 98       	mov	r8,r12
800075b8:	ec 18 00 01 	eorl	r8,0x1
800075bc:	5c 58       	castu.b	r8
800075be:	c0 30       	breq	800075c4 <udc_req_ep+0x60>
			return false;
800075c0:	30 08       	mov	r8,0
800075c2:	c1 98       	rjmp	800075f4 <udc_req_ep+0x90>
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
800075c4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800075c8:	70 28       	ld.w	r8,r8[0x8]
800075ca:	5d 18       	icall	r8
800075cc:	18 98       	mov	r8,r12
800075ce:	58 08       	cp.w	r8,0
800075d0:	c0 30       	breq	800075d6 <udc_req_ep+0x72>
			return true;
800075d2:	30 18       	mov	r8,1
800075d4:	c1 08       	rjmp	800075f4 <udc_req_ep+0x90>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
800075d6:	ef 38 ff fb 	ld.ub	r8,r7[-5]
800075da:	2f f8       	sub	r8,-1
800075dc:	ef 68 ff fb 	st.b	r7[-5],r8
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
800075e0:	48 98       	lddpc	r8,80007604 <udc_req_ep+0xa0>
800075e2:	70 08       	ld.w	r8,r8[0x0]
800075e4:	70 08       	ld.w	r8,r8[0x0]
800075e6:	11 c8       	ld.ub	r8,r8[0x4]
800075e8:	ef 39 ff fb 	ld.ub	r9,r7[-5]
800075ec:	f0 09 18 00 	cp.b	r9,r8
800075f0:	cc c3       	brcs	80007588 <udc_req_ep+0x24>
		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
		}
	}
	return false;
800075f2:	30 08       	mov	r8,0
}
800075f4:	10 9c       	mov	r12,r8
800075f6:	2f ed       	sub	sp,-8
800075f8:	e3 cd 80 80 	ldm	sp++,r7,pc
800075fc:	00 00       	add	r0,r0
800075fe:	07 bc       	ld.ub	r12,r3[0x3]
80007600:	00 00       	add	r0,r0
80007602:	0b 24       	ld.uh	r4,r5++
80007604:	00 00       	add	r0,r0
80007606:	07 c0       	ld.ub	r0,r3[0x4]
80007608:	80 00       	ld.sh	r0,r0[0x0]
8000760a:	6a 84       	ld.w	r4,r5[0x20]

8000760c <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
8000760c:	eb cd 40 80 	pushm	r7,lr
80007610:	1a 97       	mov	r7,sp
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
80007612:	4a 19       	lddpc	r9,80007694 <udc_process_setup+0x88>
80007614:	30 08       	mov	r8,0
80007616:	b2 68       	st.h	r9[0xc],r8
	udd_g_ctrlreq.callback = NULL;
80007618:	49 f8       	lddpc	r8,80007694 <udc_process_setup+0x88>
8000761a:	30 09       	mov	r9,0
8000761c:	91 49       	st.w	r8[0x10],r9
	udd_g_ctrlreq.over_under_run = NULL;
8000761e:	49 e8       	lddpc	r8,80007694 <udc_process_setup+0x88>
80007620:	30 09       	mov	r9,0
80007622:	91 59       	st.w	r8[0x14],r9

	if (Udd_setup_is_in()) {
80007624:	49 c8       	lddpc	r8,80007694 <udc_process_setup+0x88>
80007626:	11 88       	ld.ub	r8,r8[0x0]
80007628:	10 99       	mov	r9,r8
8000762a:	30 08       	mov	r8,0
8000762c:	f0 09 18 00 	cp.b	r9,r8
80007630:	c0 74       	brge	8000763e <udc_process_setup+0x32>
		if (udd_g_ctrlreq.req.wLength == 0) {
80007632:	49 98       	lddpc	r8,80007694 <udc_process_setup+0x88>
80007634:	90 38       	ld.sh	r8,r8[0x6]
80007636:	58 08       	cp.w	r8,0
80007638:	c0 31       	brne	8000763e <udc_process_setup+0x32>
			return false; // Error from USB host
8000763a:	30 08       	mov	r8,0
8000763c:	c2 88       	rjmp	8000768c <udc_process_setup+0x80>
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
8000763e:	49 68       	lddpc	r8,80007694 <udc_process_setup+0x88>
80007640:	11 88       	ld.ub	r8,r8[0x0]
80007642:	e2 18 00 60 	andl	r8,0x60,COH
80007646:	c0 81       	brne	80007656 <udc_process_setup+0x4a>
		if (udc_reqstd()) {
80007648:	f0 1f 00 14 	mcall	80007698 <udc_process_setup+0x8c>
8000764c:	18 98       	mov	r8,r12
8000764e:	58 08       	cp.w	r8,0
80007650:	c0 30       	breq	80007656 <udc_process_setup+0x4a>
			return true;
80007652:	30 18       	mov	r8,1
80007654:	c1 c8       	rjmp	8000768c <udc_process_setup+0x80>
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
80007656:	49 08       	lddpc	r8,80007694 <udc_process_setup+0x88>
80007658:	11 88       	ld.ub	r8,r8[0x0]
8000765a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000765e:	58 18       	cp.w	r8,1
80007660:	c0 81       	brne	80007670 <udc_process_setup+0x64>
		if (udc_req_iface()) {
80007662:	f0 1f 00 0f 	mcall	8000769c <udc_process_setup+0x90>
80007666:	18 98       	mov	r8,r12
80007668:	58 08       	cp.w	r8,0
8000766a:	c0 30       	breq	80007670 <udc_process_setup+0x64>
			return true;
8000766c:	30 18       	mov	r8,1
8000766e:	c0 f8       	rjmp	8000768c <udc_process_setup+0x80>
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
80007670:	48 98       	lddpc	r8,80007694 <udc_process_setup+0x88>
80007672:	11 88       	ld.ub	r8,r8[0x0]
80007674:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80007678:	58 28       	cp.w	r8,2
8000767a:	c0 81       	brne	8000768a <udc_process_setup+0x7e>
		if (udc_req_ep()) {
8000767c:	f0 1f 00 09 	mcall	800076a0 <udc_process_setup+0x94>
80007680:	18 98       	mov	r8,r12
80007682:	58 08       	cp.w	r8,0
80007684:	c0 30       	breq	8000768a <udc_process_setup+0x7e>
			return true;
80007686:	30 18       	mov	r8,1
80007688:	c0 28       	rjmp	8000768c <udc_process_setup+0x80>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
8000768a:	30 08       	mov	r8,0
#endif
}
8000768c:	10 9c       	mov	r12,r8
8000768e:	e3 cd 80 80 	ldm	sp++,r7,pc
80007692:	00 00       	add	r0,r0
80007694:	00 00       	add	r0,r0
80007696:	0b 24       	ld.uh	r4,r5++
80007698:	80 00       	ld.sh	r0,r0[0x0]
8000769a:	73 64       	ld.w	r4,r9[0x58]
8000769c:	80 00       	ld.sh	r0,r0[0x0]
8000769e:	74 b8       	ld.w	r8,r10[0x2c]
800076a0:	80 00       	ld.sh	r0,r0[0x0]
800076a2:	75 64       	ld.w	r4,r10[0x58]

800076a4 <cpu_irq_is_enabled_flags>:

	return flags;
}

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
800076a4:	eb cd 40 80 	pushm	r7,lr
800076a8:	1a 97       	mov	r7,sp
800076aa:	20 1d       	sub	sp,4
800076ac:	ef 4c ff fc 	st.w	r7[-4],r12
	return !(flags & AVR32_SR_GM_MASK);
800076b0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800076b4:	e6 18 00 01 	andh	r8,0x1,COH
800076b8:	5f 08       	sreq	r8
800076ba:	5c 58       	castu.b	r8
}
800076bc:	10 9c       	mov	r12,r8
800076be:	2f fd       	sub	sp,-4
800076c0:	e3 cd 80 80 	ldm	sp++,r7,pc

800076c4 <pwm_init>:
#include "compiler.h"
#include "pwm.h"


int pwm_init(const pwm_opt_t *opt)
{
800076c4:	eb cd 40 80 	pushm	r7,lr
800076c8:	1a 97       	mov	r7,sp
800076ca:	20 3d       	sub	sp,12
800076cc:	ef 4c ff f4 	st.w	r7[-12],r12
  volatile avr32_pwm_t *pwm = &AVR32_PWM;
800076d0:	fe 78 30 00 	mov	r8,-53248
800076d4:	ef 48 ff f8 	st.w	r7[-8],r8
  bool global_interrupt_enabled = Is_global_interrupt_enabled();
800076d8:	e1 b8 00 00 	mfsr	r8,0x0
800076dc:	10 9c       	mov	r12,r8
800076de:	f0 1f 00 1e 	mcall	80007754 <pwm_init+0x90>
800076e2:	18 98       	mov	r8,r12
800076e4:	ef 68 ff ff 	st.b	r7[-1],r8

  if (opt == 0 ) // Null pointer.
800076e8:	ee f8 ff f4 	ld.w	r8,r7[-12]
800076ec:	58 08       	cp.w	r8,0
800076ee:	c0 31       	brne	800076f4 <pwm_init+0x30>
    return PWM_INVALID_INPUT;
800076f0:	30 18       	mov	r8,1
800076f2:	c2 c8       	rjmp	8000774a <pwm_init+0x86>

  // Disable interrupt.
  if (global_interrupt_enabled) Disable_global_interrupt();
800076f4:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800076f8:	30 08       	mov	r8,0
800076fa:	f0 09 18 00 	cp.b	r9,r8
800076fe:	c0 20       	breq	80007702 <pwm_init+0x3e>
80007700:	d3 03       	ssrf	0x10
  pwm->idr = ((1 << (AVR32_PWM_LINES_MSB + 1)) - 1) << AVR32_PWM_IDR_CHID0_OFFSET;
80007702:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007706:	37 f9       	mov	r9,127
80007708:	91 59       	st.w	r8[0x14],r9
  pwm->isr;
8000770a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000770e:	70 78       	ld.w	r8,r8[0x1c]
  if (global_interrupt_enabled) Enable_global_interrupt();
80007710:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80007714:	30 08       	mov	r8,0
80007716:	f0 09 18 00 	cp.b	r9,r8
8000771a:	c0 20       	breq	8000771e <pwm_init+0x5a>
8000771c:	d5 03       	csrf	0x10

  // Set PWM mode register.
  pwm->mr =
    ((opt->diva)<<AVR32_PWM_DIVA_OFFSET) |
8000771e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80007722:	70 19       	ld.w	r9,r8[0x4]
    ((opt->divb)<<AVR32_PWM_DIVB_OFFSET) |
80007724:	ee f8 ff f4 	ld.w	r8,r7[-12]
80007728:	70 08       	ld.w	r8,r8[0x0]
8000772a:	b1 68       	lsl	r8,0x10
8000772c:	10 49       	or	r9,r8
    ((opt->prea)<<AVR32_PWM_PREA_OFFSET) |
8000772e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80007732:	70 38       	ld.w	r8,r8[0xc]
80007734:	a9 68       	lsl	r8,0x8
80007736:	10 49       	or	r9,r8
    ((opt->preb)<<AVR32_PWM_PREB_OFFSET)
80007738:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000773c:	70 28       	ld.w	r8,r8[0x8]
8000773e:	b9 68       	lsl	r8,0x18
  pwm->isr;
  if (global_interrupt_enabled) Enable_global_interrupt();

  // Set PWM mode register.
  pwm->mr =
    ((opt->diva)<<AVR32_PWM_DIVA_OFFSET) |
80007740:	10 49       	or	r9,r8
  pwm->idr = ((1 << (AVR32_PWM_LINES_MSB + 1)) - 1) << AVR32_PWM_IDR_CHID0_OFFSET;
  pwm->isr;
  if (global_interrupt_enabled) Enable_global_interrupt();

  // Set PWM mode register.
  pwm->mr =
80007742:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007746:	91 09       	st.w	r8[0x0],r9
    ((opt->divb)<<AVR32_PWM_DIVB_OFFSET) |
    ((opt->prea)<<AVR32_PWM_PREA_OFFSET) |
    ((opt->preb)<<AVR32_PWM_PREB_OFFSET)
    ;

  return PWM_SUCCESS;
80007748:	30 08       	mov	r8,0
}
8000774a:	10 9c       	mov	r12,r8
8000774c:	2f dd       	sub	sp,-12
8000774e:	e3 cd 80 80 	ldm	sp++,r7,pc
80007752:	00 00       	add	r0,r0
80007754:	80 00       	ld.sh	r0,r0[0x0]
80007756:	76 a4       	ld.w	r4,r11[0x28]

80007758 <pwm_channel_init>:


int pwm_channel_init( unsigned int channel_id, const avr32_pwm_channel_t *pwm_channel)
{
80007758:	eb cd 40 80 	pushm	r7,lr
8000775c:	1a 97       	mov	r7,sp
8000775e:	20 3d       	sub	sp,12
80007760:	ef 4c ff f8 	st.w	r7[-8],r12
80007764:	ef 4b ff f4 	st.w	r7[-12],r11
  volatile avr32_pwm_t *pwm = &AVR32_PWM;
80007768:	fe 78 30 00 	mov	r8,-53248
8000776c:	ef 48 ff fc 	st.w	r7[-4],r8

  if (pwm_channel == 0) // Null pointer.
80007770:	ee f8 ff f4 	ld.w	r8,r7[-12]
80007774:	58 08       	cp.w	r8,0
80007776:	c0 31       	brne	8000777c <pwm_channel_init+0x24>
    return PWM_INVALID_ARGUMENT;
80007778:	30 18       	mov	r8,1
8000777a:	c2 f8       	rjmp	800077d8 <pwm_channel_init+0x80>
  if (channel_id > AVR32_PWM_LINES_MSB) // Control input values.
8000777c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007780:	58 68       	cp.w	r8,6
80007782:	e0 88 00 04 	brls	8000778a <pwm_channel_init+0x32>
    return PWM_INVALID_INPUT;
80007786:	30 18       	mov	r8,1
80007788:	c2 88       	rjmp	800077d8 <pwm_channel_init+0x80>

  pwm->channel[channel_id].cmr= pwm_channel->cmr;   // Channel mode.
8000778a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000778e:	ee f9 ff f4 	ld.w	r9,r7[-12]
80007792:	72 09       	ld.w	r9,r9[0x0]
80007794:	ee fa ff fc 	ld.w	r10,r7[-4]
80007798:	2f 08       	sub	r8,-16
8000779a:	a5 78       	lsl	r8,0x5
8000779c:	f4 08 00 08 	add	r8,r10,r8
800077a0:	91 09       	st.w	r8[0x0],r9
  pwm->channel[channel_id].cdty= pwm_channel->cdty; // Duty cycle, should be < CPRD.
800077a2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800077a6:	ee f9 ff f4 	ld.w	r9,r7[-12]
800077aa:	72 19       	ld.w	r9,r9[0x4]
800077ac:	ee fa ff fc 	ld.w	r10,r7[-4]
800077b0:	a5 78       	lsl	r8,0x5
800077b2:	f4 08 00 08 	add	r8,r10,r8
800077b6:	f0 c8 fd fc 	sub	r8,r8,-516
800077ba:	91 09       	st.w	r8[0x0],r9
  pwm->channel[channel_id].cprd= pwm_channel->cprd; // Channel period.
800077bc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800077c0:	ee f9 ff f4 	ld.w	r9,r7[-12]
800077c4:	72 29       	ld.w	r9,r9[0x8]
800077c6:	ee fa ff fc 	ld.w	r10,r7[-4]
800077ca:	a5 78       	lsl	r8,0x5
800077cc:	f4 08 00 08 	add	r8,r10,r8
800077d0:	f0 c8 fd f8 	sub	r8,r8,-520
800077d4:	91 09       	st.w	r8[0x0],r9

  return PWM_SUCCESS;
800077d6:	30 08       	mov	r8,0
}
800077d8:	10 9c       	mov	r12,r8
800077da:	2f dd       	sub	sp,-12
800077dc:	e3 cd 80 80 	ldm	sp++,r7,pc

800077e0 <pwm_start_channels>:


int pwm_start_channels(unsigned long channels_bitmask)
{
800077e0:	eb cd 40 80 	pushm	r7,lr
800077e4:	1a 97       	mov	r7,sp
800077e6:	20 1d       	sub	sp,4
800077e8:	ef 4c ff fc 	st.w	r7[-4],r12
  if (channels_bitmask & ~((1 << (AVR32_PWM_LINES_MSB + 1)) - 1))
800077ec:	ee f8 ff fc 	ld.w	r8,r7[-4]
800077f0:	e0 18 ff 80 	andl	r8,0xff80
800077f4:	c0 30       	breq	800077fa <pwm_start_channels+0x1a>
    return PWM_INVALID_INPUT;
800077f6:	30 18       	mov	r8,1
800077f8:	c0 78       	rjmp	80007806 <pwm_start_channels+0x26>

  AVR32_PWM.ena = channels_bitmask; // Enable channels.
800077fa:	fe 78 30 00 	mov	r8,-53248
800077fe:	ee f9 ff fc 	ld.w	r9,r7[-4]
80007802:	91 19       	st.w	r8[0x4],r9

  return PWM_SUCCESS;
80007804:	30 08       	mov	r8,0
}
80007806:	10 9c       	mov	r12,r8
80007808:	2f fd       	sub	sp,-4
8000780a:	e3 cd 80 80 	ldm	sp++,r7,pc

8000780e <cpu_irq_is_enabled_flags>:

	return flags;
}

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
8000780e:	eb cd 40 80 	pushm	r7,lr
80007812:	1a 97       	mov	r7,sp
80007814:	20 1d       	sub	sp,4
80007816:	ef 4c ff fc 	st.w	r7[-4],r12
	return !(flags & AVR32_SR_GM_MASK);
8000781a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000781e:	e6 18 00 01 	andh	r8,0x1,COH
80007822:	5f 08       	sreq	r8
80007824:	5c 58       	castu.b	r8
}
80007826:	10 9c       	mov	r12,r8
80007828:	2f fd       	sub	sp,-4
8000782a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000782e:	d7 03       	nop

80007830 <tc_configure_interrupts>:
  return tc->channel[channel].imr;
}


int tc_configure_interrupts(volatile avr32_tc_t *tc, unsigned int channel, const tc_interrupt_t *bitfield)
{
80007830:	eb cd 40 80 	pushm	r7,lr
80007834:	1a 97       	mov	r7,sp
80007836:	20 4d       	sub	sp,16
80007838:	ef 4c ff f8 	st.w	r7[-8],r12
8000783c:	ef 4b ff f4 	st.w	r7[-12],r11
80007840:	ef 4a ff f0 	st.w	r7[-16],r10
  bool global_interrupt_enabled = Is_global_interrupt_enabled();
80007844:	e1 b8 00 00 	mfsr	r8,0x0
80007848:	10 9c       	mov	r12,r8
8000784a:	f0 1f 00 73 	mcall	80007a14 <tc_configure_interrupts+0x1e4>
8000784e:	18 98       	mov	r8,r12
80007850:	ef 68 ff ff 	st.b	r7[-1],r8

  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
80007854:	ee f8 ff f4 	ld.w	r8,r7[-12]
80007858:	58 28       	cp.w	r8,2
8000785a:	e0 88 00 04 	brls	80007862 <tc_configure_interrupts+0x32>
    return TC_INVALID_ARGUMENT;
8000785e:	3f f8       	mov	r8,-1
80007860:	cd 68       	rjmp	80007a0c <tc_configure_interrupts+0x1dc>

  // Enable the appropriate interrupts.
  tc->channel[channel].ier = bitfield->etrgs << AVR32_TC_ETRGS_OFFSET |
80007862:	ee fb ff f4 	ld.w	r11,r7[-12]
80007866:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000786a:	70 08       	ld.w	r8,r8[0x0]
8000786c:	f1 d8 c0 e1 	bfextu	r8,r8,0x7,0x1
80007870:	5c 58       	castu.b	r8
80007872:	f0 09 15 07 	lsl	r9,r8,0x7
                             bitfield->ldrbs << AVR32_TC_LDRBS_OFFSET |
80007876:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000787a:	70 08       	ld.w	r8,r8[0x0]
8000787c:	f1 d8 c0 c1 	bfextu	r8,r8,0x6,0x1
80007880:	5c 58       	castu.b	r8
80007882:	a7 68       	lsl	r8,0x6
80007884:	10 49       	or	r9,r8
                             bitfield->ldras << AVR32_TC_LDRAS_OFFSET |
80007886:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000788a:	70 08       	ld.w	r8,r8[0x0]
8000788c:	f1 d8 c0 a1 	bfextu	r8,r8,0x5,0x1
80007890:	5c 58       	castu.b	r8
80007892:	a5 78       	lsl	r8,0x5
80007894:	10 49       	or	r9,r8
                             bitfield->cpcs << AVR32_TC_CPCS_OFFSET |
80007896:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000789a:	70 08       	ld.w	r8,r8[0x0]
8000789c:	f1 d8 c0 81 	bfextu	r8,r8,0x4,0x1
800078a0:	5c 58       	castu.b	r8
800078a2:	a5 68       	lsl	r8,0x4
800078a4:	10 49       	or	r9,r8
                             bitfield->cpbs << AVR32_TC_CPBS_OFFSET |
800078a6:	ee f8 ff f0 	ld.w	r8,r7[-16]
800078aa:	70 08       	ld.w	r8,r8[0x0]
800078ac:	f1 d8 c0 61 	bfextu	r8,r8,0x3,0x1
800078b0:	5c 58       	castu.b	r8
800078b2:	a3 78       	lsl	r8,0x3
800078b4:	10 49       	or	r9,r8
                             bitfield->cpas << AVR32_TC_CPAS_OFFSET |
800078b6:	ee f8 ff f0 	ld.w	r8,r7[-16]
800078ba:	70 08       	ld.w	r8,r8[0x0]
800078bc:	f1 d8 c0 41 	bfextu	r8,r8,0x2,0x1
800078c0:	5c 58       	castu.b	r8
800078c2:	a3 68       	lsl	r8,0x2
800078c4:	10 49       	or	r9,r8
                             bitfield->lovrs << AVR32_TC_LOVRS_OFFSET |
800078c6:	ee f8 ff f0 	ld.w	r8,r7[-16]
800078ca:	70 08       	ld.w	r8,r8[0x0]
800078cc:	f1 d8 c0 21 	bfextu	r8,r8,0x1,0x1
800078d0:	5c 58       	castu.b	r8
800078d2:	a1 78       	lsl	r8,0x1
800078d4:	10 49       	or	r9,r8
                             bitfield->covfs << AVR32_TC_COVFS_OFFSET;
800078d6:	ee f8 ff f0 	ld.w	r8,r7[-16]
800078da:	70 08       	ld.w	r8,r8[0x0]
800078dc:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800078e0:	5c 58       	castu.b	r8
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
    return TC_INVALID_ARGUMENT;

  // Enable the appropriate interrupts.
  tc->channel[channel].ier = bitfield->etrgs << AVR32_TC_ETRGS_OFFSET |
800078e2:	f3 e8 10 08 	or	r8,r9,r8
800078e6:	10 99       	mov	r9,r8
800078e8:	ee fa ff f8 	ld.w	r10,r7[-8]
800078ec:	f6 08 15 06 	lsl	r8,r11,0x6
800078f0:	f4 08 00 08 	add	r8,r10,r8
800078f4:	2d c8       	sub	r8,-36
800078f6:	91 09       	st.w	r8[0x0],r9
                             bitfield->cpas << AVR32_TC_CPAS_OFFSET |
                             bitfield->lovrs << AVR32_TC_LOVRS_OFFSET |
                             bitfield->covfs << AVR32_TC_COVFS_OFFSET;

  // Disable the appropriate interrupts.
  if (global_interrupt_enabled) Disable_global_interrupt();
800078f8:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800078fc:	30 08       	mov	r8,0
800078fe:	f0 09 18 00 	cp.b	r9,r8
80007902:	c0 20       	breq	80007906 <tc_configure_interrupts+0xd6>
80007904:	d3 03       	ssrf	0x10
  tc->channel[channel].idr = (~bitfield->etrgs & 1) << AVR32_TC_ETRGS_OFFSET |
80007906:	ee fb ff f4 	ld.w	r11,r7[-12]
8000790a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000790e:	70 08       	ld.w	r8,r8[0x0]
80007910:	f1 d8 c0 e1 	bfextu	r8,r8,0x7,0x1
80007914:	5c 58       	castu.b	r8
80007916:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000791a:	c0 41       	brne	80007922 <tc_configure_interrupts+0xf2>
8000791c:	e0 69 00 80 	mov	r9,128
80007920:	c0 28       	rjmp	80007924 <tc_configure_interrupts+0xf4>
80007922:	30 09       	mov	r9,0
                             (~bitfield->ldrbs & 1) << AVR32_TC_LDRBS_OFFSET |
80007924:	ee f8 ff f0 	ld.w	r8,r7[-16]
80007928:	70 08       	ld.w	r8,r8[0x0]
8000792a:	f1 d8 c0 c1 	bfextu	r8,r8,0x6,0x1
8000792e:	5c 58       	castu.b	r8
80007930:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80007934:	c0 31       	brne	8000793a <tc_configure_interrupts+0x10a>
80007936:	34 08       	mov	r8,64
80007938:	c0 28       	rjmp	8000793c <tc_configure_interrupts+0x10c>
8000793a:	30 08       	mov	r8,0
8000793c:	10 49       	or	r9,r8
                             (~bitfield->ldras & 1) << AVR32_TC_LDRAS_OFFSET |
8000793e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80007942:	70 08       	ld.w	r8,r8[0x0]
80007944:	f1 d8 c0 a1 	bfextu	r8,r8,0x5,0x1
80007948:	5c 58       	castu.b	r8
8000794a:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000794e:	c0 31       	brne	80007954 <tc_configure_interrupts+0x124>
80007950:	32 08       	mov	r8,32
80007952:	c0 28       	rjmp	80007956 <tc_configure_interrupts+0x126>
80007954:	30 08       	mov	r8,0
80007956:	10 49       	or	r9,r8
                             (~bitfield->cpcs & 1) << AVR32_TC_CPCS_OFFSET |
80007958:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000795c:	70 08       	ld.w	r8,r8[0x0]
8000795e:	f1 d8 c0 81 	bfextu	r8,r8,0x4,0x1
80007962:	5c 58       	castu.b	r8
80007964:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80007968:	c0 31       	brne	8000796e <tc_configure_interrupts+0x13e>
8000796a:	31 08       	mov	r8,16
8000796c:	c0 28       	rjmp	80007970 <tc_configure_interrupts+0x140>
8000796e:	30 08       	mov	r8,0
80007970:	10 49       	or	r9,r8
                             (~bitfield->cpbs & 1) << AVR32_TC_CPBS_OFFSET |
80007972:	ee f8 ff f0 	ld.w	r8,r7[-16]
80007976:	70 08       	ld.w	r8,r8[0x0]
80007978:	f1 d8 c0 61 	bfextu	r8,r8,0x3,0x1
8000797c:	5c 58       	castu.b	r8
8000797e:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80007982:	c0 31       	brne	80007988 <tc_configure_interrupts+0x158>
80007984:	30 88       	mov	r8,8
80007986:	c0 28       	rjmp	8000798a <tc_configure_interrupts+0x15a>
80007988:	30 08       	mov	r8,0
8000798a:	10 49       	or	r9,r8
                             (~bitfield->cpas & 1) << AVR32_TC_CPAS_OFFSET |
8000798c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80007990:	70 08       	ld.w	r8,r8[0x0]
80007992:	f1 d8 c0 41 	bfextu	r8,r8,0x2,0x1
80007996:	5c 58       	castu.b	r8
80007998:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000799c:	c0 31       	brne	800079a2 <tc_configure_interrupts+0x172>
8000799e:	30 48       	mov	r8,4
800079a0:	c0 28       	rjmp	800079a4 <tc_configure_interrupts+0x174>
800079a2:	30 08       	mov	r8,0
800079a4:	10 49       	or	r9,r8
                             (~bitfield->lovrs & 1) << AVR32_TC_LOVRS_OFFSET |
800079a6:	ee f8 ff f0 	ld.w	r8,r7[-16]
800079aa:	70 08       	ld.w	r8,r8[0x0]
800079ac:	f1 d8 c0 21 	bfextu	r8,r8,0x1,0x1
800079b0:	5c 58       	castu.b	r8
800079b2:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800079b6:	c0 31       	brne	800079bc <tc_configure_interrupts+0x18c>
800079b8:	30 28       	mov	r8,2
800079ba:	c0 28       	rjmp	800079be <tc_configure_interrupts+0x18e>
800079bc:	30 08       	mov	r8,0
800079be:	10 49       	or	r9,r8
                             (~bitfield->covfs & 1) << AVR32_TC_COVFS_OFFSET;
800079c0:	ee f8 ff f0 	ld.w	r8,r7[-16]
800079c4:	70 08       	ld.w	r8,r8[0x0]
800079c6:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800079ca:	5c 58       	castu.b	r8
800079cc:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800079d0:	5f 08       	sreq	r8
                             bitfield->lovrs << AVR32_TC_LOVRS_OFFSET |
                             bitfield->covfs << AVR32_TC_COVFS_OFFSET;

  // Disable the appropriate interrupts.
  if (global_interrupt_enabled) Disable_global_interrupt();
  tc->channel[channel].idr = (~bitfield->etrgs & 1) << AVR32_TC_ETRGS_OFFSET |
800079d2:	f3 e8 10 08 	or	r8,r9,r8
800079d6:	10 99       	mov	r9,r8
800079d8:	ee fa ff f8 	ld.w	r10,r7[-8]
800079dc:	f6 08 15 06 	lsl	r8,r11,0x6
800079e0:	f4 08 00 08 	add	r8,r10,r8
800079e4:	2d 88       	sub	r8,-40
800079e6:	91 09       	st.w	r8[0x0],r9
                             (~bitfield->cpcs & 1) << AVR32_TC_CPCS_OFFSET |
                             (~bitfield->cpbs & 1) << AVR32_TC_CPBS_OFFSET |
                             (~bitfield->cpas & 1) << AVR32_TC_CPAS_OFFSET |
                             (~bitfield->lovrs & 1) << AVR32_TC_LOVRS_OFFSET |
                             (~bitfield->covfs & 1) << AVR32_TC_COVFS_OFFSET;
  tc->channel[channel].sr;
800079e8:	ee f8 ff f4 	ld.w	r8,r7[-12]
800079ec:	ee f9 ff f8 	ld.w	r9,r7[-8]
800079f0:	a1 78       	lsl	r8,0x1
800079f2:	2f f8       	sub	r8,-1
800079f4:	a5 78       	lsl	r8,0x5
800079f6:	f2 08 00 08 	add	r8,r9,r8
800079fa:	70 08       	ld.w	r8,r8[0x0]
  if (global_interrupt_enabled) Enable_global_interrupt();
800079fc:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80007a00:	30 08       	mov	r8,0
80007a02:	f0 09 18 00 	cp.b	r9,r8
80007a06:	c0 20       	breq	80007a0a <tc_configure_interrupts+0x1da>
80007a08:	d5 03       	csrf	0x10

  return 0;
80007a0a:	30 08       	mov	r8,0
}
80007a0c:	10 9c       	mov	r12,r8
80007a0e:	2f cd       	sub	sp,-16
80007a10:	e3 cd 80 80 	ldm	sp++,r7,pc
80007a14:	80 00       	ld.sh	r0,r0[0x0]
80007a16:	78 0e       	ld.w	lr,r12[0x0]

80007a18 <tc_init_waveform>:
  return 0;
}


int tc_init_waveform(volatile avr32_tc_t *tc, const tc_waveform_opt_t *opt)
{
80007a18:	eb cd 40 80 	pushm	r7,lr
80007a1c:	1a 97       	mov	r7,sp
80007a1e:	20 2d       	sub	sp,8
80007a20:	ef 4c ff fc 	st.w	r7[-4],r12
80007a24:	ef 4b ff f8 	st.w	r7[-8],r11
  // Check for valid input.
  if (opt->channel >= TC_NUMBER_OF_CHANNELS)
80007a28:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007a2c:	70 08       	ld.w	r8,r8[0x0]
80007a2e:	58 28       	cp.w	r8,2
80007a30:	e0 88 00 04 	brls	80007a38 <tc_init_waveform+0x20>
    return TC_INVALID_ARGUMENT;
80007a34:	3f f8       	mov	r8,-1
80007a36:	c9 78       	rjmp	80007b64 <tc_init_waveform+0x14c>

  // GENERATE SIGNALS: Waveform operating mode.
  tc->channel[opt->channel].cmr = opt->bswtrg << AVR32_TC_BSWTRG_OFFSET |
80007a38:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007a3c:	70 09       	ld.w	r9,r8[0x0]
80007a3e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007a42:	70 18       	ld.w	r8,r8[0x4]
80007a44:	f1 d8 c3 c2 	bfextu	r8,r8,0x1e,0x2
80007a48:	5c 58       	castu.b	r8
80007a4a:	f0 0a 15 1e 	lsl	r10,r8,0x1e
                                  opt->beevt << AVR32_TC_BEEVT_OFFSET |
80007a4e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007a52:	70 18       	ld.w	r8,r8[0x4]
80007a54:	f1 d8 c3 82 	bfextu	r8,r8,0x1c,0x2
80007a58:	5c 58       	castu.b	r8
80007a5a:	bd 68       	lsl	r8,0x1c
80007a5c:	10 4a       	or	r10,r8
                                  opt->bcpc << AVR32_TC_BCPC_OFFSET |
80007a5e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007a62:	70 18       	ld.w	r8,r8[0x4]
80007a64:	f1 d8 c3 42 	bfextu	r8,r8,0x1a,0x2
80007a68:	5c 58       	castu.b	r8
80007a6a:	bb 68       	lsl	r8,0x1a
80007a6c:	10 4a       	or	r10,r8
                                  opt->bcpb << AVR32_TC_BCPB_OFFSET |
80007a6e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007a72:	70 18       	ld.w	r8,r8[0x4]
80007a74:	f1 d8 c3 02 	bfextu	r8,r8,0x18,0x2
80007a78:	5c 58       	castu.b	r8
80007a7a:	b9 68       	lsl	r8,0x18
80007a7c:	10 4a       	or	r10,r8
                                  opt->aswtrg << AVR32_TC_ASWTRG_OFFSET |
80007a7e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007a82:	70 18       	ld.w	r8,r8[0x4]
80007a84:	f1 d8 c2 c2 	bfextu	r8,r8,0x16,0x2
80007a88:	5c 58       	castu.b	r8
80007a8a:	b7 68       	lsl	r8,0x16
80007a8c:	10 4a       	or	r10,r8
                                  opt->aeevt << AVR32_TC_AEEVT_OFFSET |
80007a8e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007a92:	70 18       	ld.w	r8,r8[0x4]
80007a94:	f1 d8 c2 82 	bfextu	r8,r8,0x14,0x2
80007a98:	5c 58       	castu.b	r8
80007a9a:	b5 68       	lsl	r8,0x14
80007a9c:	10 4a       	or	r10,r8
                                  opt->acpc << AVR32_TC_ACPC_OFFSET |
80007a9e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007aa2:	70 18       	ld.w	r8,r8[0x4]
80007aa4:	f1 d8 c2 42 	bfextu	r8,r8,0x12,0x2
80007aa8:	5c 58       	castu.b	r8
80007aaa:	b3 68       	lsl	r8,0x12
80007aac:	10 4a       	or	r10,r8
                                  opt->acpa << AVR32_TC_ACPA_OFFSET |
80007aae:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007ab2:	70 18       	ld.w	r8,r8[0x4]
80007ab4:	f1 d8 c2 02 	bfextu	r8,r8,0x10,0x2
80007ab8:	5c 58       	castu.b	r8
80007aba:	b1 68       	lsl	r8,0x10
80007abc:	f5 e8 10 08 	or	r8,r10,r8
                                  1 << AVR32_TC_WAVE_OFFSET |
80007ac0:	10 9a       	mov	r10,r8
80007ac2:	af ba       	sbr	r10,0xf
                                  opt->wavsel << AVR32_TC_WAVSEL_OFFSET |
80007ac4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007ac8:	70 18       	ld.w	r8,r8[0x4]
80007aca:	f1 d8 c1 a2 	bfextu	r8,r8,0xd,0x2
80007ace:	5c 58       	castu.b	r8
80007ad0:	ad 78       	lsl	r8,0xd
80007ad2:	10 4a       	or	r10,r8
                                  opt->enetrg << AVR32_TC_ENETRG_OFFSET |
80007ad4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007ad8:	70 18       	ld.w	r8,r8[0x4]
80007ada:	f1 d8 c1 81 	bfextu	r8,r8,0xc,0x1
80007ade:	5c 58       	castu.b	r8
80007ae0:	ad 68       	lsl	r8,0xc
80007ae2:	10 4a       	or	r10,r8
                                  opt->eevt << AVR32_TC_EEVT_OFFSET |
80007ae4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007ae8:	70 18       	ld.w	r8,r8[0x4]
80007aea:	f1 d8 c1 42 	bfextu	r8,r8,0xa,0x2
80007aee:	5c 58       	castu.b	r8
80007af0:	ab 68       	lsl	r8,0xa
80007af2:	10 4a       	or	r10,r8
                                  opt->eevtedg << AVR32_TC_EEVTEDG_OFFSET |
80007af4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007af8:	70 18       	ld.w	r8,r8[0x4]
80007afa:	f1 d8 c1 02 	bfextu	r8,r8,0x8,0x2
80007afe:	5c 58       	castu.b	r8
80007b00:	a9 68       	lsl	r8,0x8
80007b02:	10 4a       	or	r10,r8
                                  opt->cpcdis << AVR32_TC_CPCDIS_OFFSET |
80007b04:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007b08:	70 18       	ld.w	r8,r8[0x4]
80007b0a:	f1 d8 c0 e1 	bfextu	r8,r8,0x7,0x1
80007b0e:	5c 58       	castu.b	r8
80007b10:	a7 78       	lsl	r8,0x7
80007b12:	10 4a       	or	r10,r8
                                  opt->cpcstop << AVR32_TC_CPCSTOP_OFFSET |
80007b14:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007b18:	70 18       	ld.w	r8,r8[0x4]
80007b1a:	f1 d8 c0 c1 	bfextu	r8,r8,0x6,0x1
80007b1e:	5c 58       	castu.b	r8
80007b20:	a7 68       	lsl	r8,0x6
80007b22:	10 4a       	or	r10,r8
                                  opt->burst << AVR32_TC_BURST_OFFSET |
80007b24:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007b28:	70 18       	ld.w	r8,r8[0x4]
80007b2a:	f1 d8 c0 82 	bfextu	r8,r8,0x4,0x2
80007b2e:	5c 58       	castu.b	r8
80007b30:	a5 68       	lsl	r8,0x4
80007b32:	10 4a       	or	r10,r8
                                  opt->clki << AVR32_TC_CLKI_OFFSET |
80007b34:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007b38:	70 18       	ld.w	r8,r8[0x4]
80007b3a:	f1 d8 c0 61 	bfextu	r8,r8,0x3,0x1
80007b3e:	5c 58       	castu.b	r8
80007b40:	a3 78       	lsl	r8,0x3
80007b42:	10 4a       	or	r10,r8
                                  opt->tcclks << AVR32_TC_TCCLKS_OFFSET;
80007b44:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007b48:	70 18       	ld.w	r8,r8[0x4]
80007b4a:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80007b4e:	5c 58       	castu.b	r8
  // Check for valid input.
  if (opt->channel >= TC_NUMBER_OF_CHANNELS)
    return TC_INVALID_ARGUMENT;

  // GENERATE SIGNALS: Waveform operating mode.
  tc->channel[opt->channel].cmr = opt->bswtrg << AVR32_TC_BSWTRG_OFFSET |
80007b50:	f5 e8 10 08 	or	r8,r10,r8
80007b54:	10 9a       	mov	r10,r8
80007b56:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007b5a:	a5 69       	lsl	r9,0x4
80007b5c:	2f f9       	sub	r9,-1
80007b5e:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
                                  opt->cpcstop << AVR32_TC_CPCSTOP_OFFSET |
                                  opt->burst << AVR32_TC_BURST_OFFSET |
                                  opt->clki << AVR32_TC_CLKI_OFFSET |
                                  opt->tcclks << AVR32_TC_TCCLKS_OFFSET;

  return 0;
80007b62:	30 08       	mov	r8,0
}
80007b64:	10 9c       	mov	r12,r8
80007b66:	2f ed       	sub	sp,-8
80007b68:	e3 cd 80 80 	ldm	sp++,r7,pc

80007b6c <tc_start>:


int tc_start(volatile avr32_tc_t *tc, unsigned int channel)
{
80007b6c:	eb cd 40 80 	pushm	r7,lr
80007b70:	1a 97       	mov	r7,sp
80007b72:	20 2d       	sub	sp,8
80007b74:	ef 4c ff fc 	st.w	r7[-4],r12
80007b78:	ef 4b ff f8 	st.w	r7[-8],r11
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
80007b7c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007b80:	58 28       	cp.w	r8,2
80007b82:	e0 88 00 04 	brls	80007b8a <tc_start+0x1e>
    return TC_INVALID_ARGUMENT;
80007b86:	3f f8       	mov	r8,-1
80007b88:	c0 b8       	rjmp	80007b9e <tc_start+0x32>

  // Enable, reset and start the selected timer/counter channel.
  tc->channel[channel].ccr = AVR32_TC_SWTRG_MASK | AVR32_TC_CLKEN_MASK;
80007b8a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007b8e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80007b92:	a7 68       	lsl	r8,0x6
80007b94:	f2 08 00 08 	add	r8,r9,r8
80007b98:	30 59       	mov	r9,5
80007b9a:	91 09       	st.w	r8[0x0],r9

  return 0;
80007b9c:	30 08       	mov	r8,0
}
80007b9e:	10 9c       	mov	r12,r8
80007ba0:	2f ed       	sub	sp,-8
80007ba2:	e3 cd 80 80 	ldm	sp++,r7,pc

80007ba6 <tc_read_sr>:
  tc->bcr = AVR32_TC_BCR_SYNC_MASK;
}


int tc_read_sr(volatile avr32_tc_t *tc, unsigned int channel)
{
80007ba6:	eb cd 40 80 	pushm	r7,lr
80007baa:	1a 97       	mov	r7,sp
80007bac:	20 2d       	sub	sp,8
80007bae:	ef 4c ff fc 	st.w	r7[-4],r12
80007bb2:	ef 4b ff f8 	st.w	r7[-8],r11
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
80007bb6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007bba:	58 28       	cp.w	r8,2
80007bbc:	e0 88 00 04 	brls	80007bc4 <tc_read_sr+0x1e>
    return TC_INVALID_ARGUMENT;
80007bc0:	3f f8       	mov	r8,-1
80007bc2:	c0 b8       	rjmp	80007bd8 <tc_read_sr+0x32>

  return tc->channel[channel].sr;
80007bc4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007bc8:	ee f9 ff fc 	ld.w	r9,r7[-4]
80007bcc:	a1 78       	lsl	r8,0x1
80007bce:	2f f8       	sub	r8,-1
80007bd0:	a5 78       	lsl	r8,0x5
80007bd2:	f2 08 00 08 	add	r8,r9,r8
80007bd6:	70 08       	ld.w	r8,r8[0x0]
}
80007bd8:	10 9c       	mov	r12,r8
80007bda:	2f ed       	sub	sp,-8
80007bdc:	e3 cd 80 80 	ldm	sp++,r7,pc

80007be0 <tc_write_rc>:
  return value;
}


int tc_write_rc(volatile avr32_tc_t *tc, unsigned int channel, unsigned short value)
{
80007be0:	eb cd 40 80 	pushm	r7,lr
80007be4:	1a 97       	mov	r7,sp
80007be6:	20 3d       	sub	sp,12
80007be8:	ef 4c ff fc 	st.w	r7[-4],r12
80007bec:	ef 4b ff f8 	st.w	r7[-8],r11
80007bf0:	14 98       	mov	r8,r10
80007bf2:	ef 58 ff f4 	st.h	r7[-12],r8
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
80007bf6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007bfa:	58 28       	cp.w	r8,2
80007bfc:	e0 88 00 04 	brls	80007c04 <tc_write_rc+0x24>
    return TC_INVALID_ARGUMENT;
80007c00:	3f f8       	mov	r8,-1
80007c02:	c2 78       	rjmp	80007c50 <tc_write_rc+0x70>

  // This function is only available in WAVEFORM mode.
  if (Tst_bits(tc->channel[channel].cmr, AVR32_TC_WAVE_MASK))
80007c04:	ee f9 ff f8 	ld.w	r9,r7[-8]
80007c08:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007c0c:	a5 69       	lsl	r9,0x4
80007c0e:	2f f9       	sub	r9,-1
80007c10:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80007c14:	e2 18 80 00 	andl	r8,0x8000,COH
80007c18:	c1 a0       	breq	80007c4c <tc_write_rc+0x6c>
    Wr_bitfield(tc->channel[channel].rc, AVR32_TC_RC_MASK, value);
80007c1a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007c1e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80007c22:	ee fa ff fc 	ld.w	r10,r7[-4]
80007c26:	a7 69       	lsl	r9,0x6
80007c28:	f4 09 00 09 	add	r9,r10,r9
80007c2c:	2e 49       	sub	r9,-28
80007c2e:	72 09       	ld.w	r9,r9[0x0]
80007c30:	12 9a       	mov	r10,r9
80007c32:	e0 1a 00 00 	andl	r10,0x0
80007c36:	ef 19 ff f4 	ld.uh	r9,r7[-12]
80007c3a:	f5 e9 10 09 	or	r9,r10,r9
80007c3e:	ee fa ff fc 	ld.w	r10,r7[-4]
80007c42:	a7 68       	lsl	r8,0x6
80007c44:	f4 08 00 08 	add	r8,r10,r8
80007c48:	2e 48       	sub	r8,-28
80007c4a:	91 09       	st.w	r8[0x0],r9

  return value;
80007c4c:	ef 18 ff f4 	ld.uh	r8,r7[-12]
}
80007c50:	10 9c       	mov	r12,r8
80007c52:	2f dd       	sub	sp,-12
80007c54:	e3 cd 80 80 	ldm	sp++,r7,pc

80007c58 <cpu_irq_save>:
#endif

typedef uint32_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
80007c58:	eb cd 40 80 	pushm	r7,lr
80007c5c:	1a 97       	mov	r7,sp
80007c5e:	20 1d       	sub	sp,4
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80007c60:	e1 b8 00 00 	mfsr	r8,0x0
80007c64:	ef 48 ff fc 	st.w	r7[-4],r8
	cpu_irq_disable();
80007c68:	d3 03       	ssrf	0x10

	return flags;
80007c6a:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
80007c6e:	10 9c       	mov	r12,r8
80007c70:	2f fd       	sub	sp,-4
80007c72:	e3 cd 80 80 	ldm	sp++,r7,pc

80007c76 <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
80007c76:	eb cd 40 80 	pushm	r7,lr
80007c7a:	1a 97       	mov	r7,sp
80007c7c:	20 1d       	sub	sp,4
80007c7e:	ef 4c ff fc 	st.w	r7[-4],r12
	return !(flags & AVR32_SR_GM_MASK);
80007c82:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007c86:	e6 18 00 01 	andh	r8,0x1,COH
80007c8a:	5f 08       	sreq	r8
80007c8c:	5c 58       	castu.b	r8
}
80007c8e:	10 9c       	mov	r12,r8
80007c90:	2f fd       	sub	sp,-4
80007c92:	e3 cd 80 80 	ldm	sp++,r7,pc
80007c96:	d7 03       	nop

80007c98 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
80007c98:	eb cd 40 80 	pushm	r7,lr
80007c9c:	1a 97       	mov	r7,sp
80007c9e:	20 1d       	sub	sp,4
80007ca0:	ef 4c ff fc 	st.w	r7[-4],r12
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80007ca4:	ee fc ff fc 	ld.w	r12,r7[-4]
80007ca8:	f0 1f 00 05 	mcall	80007cbc <cpu_irq_restore+0x24>
80007cac:	18 98       	mov	r8,r12
80007cae:	58 08       	cp.w	r8,0
80007cb0:	c0 20       	breq	80007cb4 <cpu_irq_restore+0x1c>
      cpu_irq_enable();
80007cb2:	d5 03       	csrf	0x10
   }

	barrier();
}
80007cb4:	2f fd       	sub	sp,-4
80007cb6:	e3 cd 80 80 	ldm	sp++,r7,pc
80007cba:	00 00       	add	r0,r0
80007cbc:	80 00       	ld.sh	r0,r0[0x0]
80007cbe:	7c 76       	ld.w	r6,lr[0x1c]

80007cc0 <osc_enable>:
#include <stdbool.h>
#include <stdint.h>
#include <avr32/io.h>

static inline void osc_enable(uint8_t id)
{
80007cc0:	eb cd 40 80 	pushm	r7,lr
80007cc4:	1a 97       	mov	r7,sp
80007cc6:	20 3d       	sub	sp,12
80007cc8:	18 98       	mov	r8,r12
80007cca:	ef 68 ff f4 	st.b	r7[-12],r8
	irqflags_t flags;
	uint32_t   oscctrl;

	flags = cpu_irq_save();
80007cce:	f0 1f 00 1f 	mcall	80007d48 <osc_enable+0x88>
80007cd2:	18 98       	mov	r8,r12
80007cd4:	ef 48 ff f8 	st.w	r7[-8],r8

	switch (id) {
80007cd8:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80007cdc:	58 08       	cp.w	r8,0
80007cde:	c0 40       	breq	80007ce6 <osc_enable+0x26>
80007ce0:	58 28       	cp.w	r8,2
80007ce2:	c1 90       	breq	80007d14 <osc_enable+0x54>
80007ce4:	c2 b8       	rjmp	80007d3a <osc_enable+0x7a>
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		oscctrl = OSC0_STARTUP_VALUE <<
80007ce6:	e0 68 03 00 	mov	r8,768
80007cea:	ef 48 ff fc 	st.w	r7[-4],r8
				AVR32_PM_OSCCTRL0_STARTUP_OFFSET;
		oscctrl |= OSC0_MODE_VALUE << AVR32_PM_OSCCTRL0_MODE_OFFSET;
80007cee:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007cf2:	e8 18 00 07 	orl	r8,0x7
80007cf6:	ef 48 ff fc 	st.w	r7[-4],r8
		AVR32_PM.oscctrl0 = oscctrl;
80007cfa:	fe 78 0c 00 	mov	r8,-62464
80007cfe:	ee f9 ff fc 	ld.w	r9,r7[-4]
80007d02:	91 a9       	st.w	r8[0x28],r9
		AVR32_PM.mcctrl |= 1U << AVR32_PM_MCCTRL_OSC0EN;
80007d04:	fe 78 0c 00 	mov	r8,-62464
80007d08:	fe 79 0c 00 	mov	r9,-62464
80007d0c:	72 09       	ld.w	r9,r9[0x0]
80007d0e:	a3 a9       	sbr	r9,0x2
80007d10:	91 09       	st.w	r8[0x0],r9
		break;
80007d12:	c1 48       	rjmp	80007d3a <osc_enable+0x7a>
		break;
#endif

#ifdef BOARD_OSC32_HZ
	case OSC_ID_OSC32:
		oscctrl = OSC32_STARTUP_VALUE
80007d14:	e2 68 00 00 	mov	r8,131072
80007d18:	ef 48 ff fc 	st.w	r7[-4],r8
				<< AVR32_PM_OSCCTRL32_STARTUP_OFFSET;
		oscctrl |= OSC32_MODE_VALUE << AVR32_PM_OSCCTRL32_MODE_OFFSET;
80007d1c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007d20:	a9 a8       	sbr	r8,0x8
80007d22:	ef 48 ff fc 	st.w	r7[-4],r8
		oscctrl |= 1 << AVR32_PM_OSCCTRL32_OSC32EN_OFFSET;
80007d26:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007d2a:	a1 a8       	sbr	r8,0x0
80007d2c:	ef 48 ff fc 	st.w	r7[-4],r8
		AVR32_PM.oscctrl32 = oscctrl;
80007d30:	fe 78 0c 00 	mov	r8,-62464
80007d34:	ee f9 ff fc 	ld.w	r9,r7[-4]
80007d38:	91 c9       	st.w	r8[0x30],r9
	default:
		/* unhandled_case(id); */
		break;
	}

	cpu_irq_restore(flags);
80007d3a:	ee fc ff f8 	ld.w	r12,r7[-8]
80007d3e:	f0 1f 00 04 	mcall	80007d4c <osc_enable+0x8c>
}
80007d42:	2f dd       	sub	sp,-12
80007d44:	e3 cd 80 80 	ldm	sp++,r7,pc
80007d48:	80 00       	ld.sh	r0,r0[0x0]
80007d4a:	7c 58       	ld.w	r8,lr[0x14]
80007d4c:	80 00       	ld.sh	r0,r0[0x0]
80007d4e:	7c 98       	ld.w	r8,lr[0x24]

80007d50 <osc_is_ready>:
	}
	cpu_irq_restore(flags);
}

static inline bool osc_is_ready(uint8_t id)
{
80007d50:	eb cd 40 80 	pushm	r7,lr
80007d54:	1a 97       	mov	r7,sp
80007d56:	20 1d       	sub	sp,4
80007d58:	18 98       	mov	r8,r12
80007d5a:	ef 68 ff fc 	st.b	r7[-4],r8
	switch (id) {
80007d5e:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80007d62:	58 08       	cp.w	r8,0
80007d64:	c0 40       	breq	80007d6c <osc_is_ready+0x1c>
80007d66:	58 28       	cp.w	r8,2
80007d68:	c0 a0       	breq	80007d7c <osc_is_ready+0x2c>
80007d6a:	c1 18       	rjmp	80007d8c <osc_is_ready+0x3c>
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		return !!(AVR32_PM.poscsr & (1U << AVR32_PM_POSCSR_OSC0RDY));
80007d6c:	fe 78 0c 00 	mov	r8,-62464
80007d70:	71 58       	ld.w	r8,r8[0x54]
80007d72:	e2 18 00 80 	andl	r8,0x80,COH
80007d76:	5f 18       	srne	r8
80007d78:	5c 58       	castu.b	r8
80007d7a:	c0 a8       	rjmp	80007d8e <osc_is_ready+0x3e>
		return !!(AVR32_PM.poscsr & (1U << AVR32_PM_POSCSR_OSC1RDY));
#endif

#ifdef BOARD_OSC32_HZ
	case OSC_ID_OSC32:
		return !!(AVR32_PM.poscsr & (1U << AVR32_PM_POSCSR_OSC32RDY));
80007d7c:	fe 78 0c 00 	mov	r8,-62464
80007d80:	71 58       	ld.w	r8,r8[0x54]
80007d82:	e2 18 02 00 	andl	r8,0x200,COH
80007d86:	5f 18       	srne	r8
80007d88:	5c 58       	castu.b	r8
80007d8a:	c0 28       	rjmp	80007d8e <osc_is_ready+0x3e>
#endif

	default:
		/* unhandled_case(id); */
		return false;
80007d8c:	30 08       	mov	r8,0
	}
}
80007d8e:	10 9c       	mov	r12,r8
80007d90:	2f fd       	sub	sp,-4
80007d92:	e3 cd 80 80 	ldm	sp++,r7,pc

80007d96 <osc_get_rate>:

static inline uint32_t osc_get_rate(uint8_t id)
{
80007d96:	eb cd 40 80 	pushm	r7,lr
80007d9a:	1a 97       	mov	r7,sp
80007d9c:	20 1d       	sub	sp,4
80007d9e:	18 98       	mov	r8,r12
80007da0:	ef 68 ff fc 	st.b	r7[-4],r8
	switch (id) {
80007da4:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80007da8:	58 08       	cp.w	r8,0
80007daa:	c0 40       	breq	80007db2 <osc_get_rate+0x1c>
80007dac:	58 28       	cp.w	r8,2
80007dae:	c0 70       	breq	80007dbc <osc_get_rate+0x26>
80007db0:	c0 98       	rjmp	80007dc2 <osc_get_rate+0x2c>
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		return BOARD_OSC0_HZ;
80007db2:	e0 68 1b 00 	mov	r8,6912
80007db6:	ea 18 00 b7 	orh	r8,0xb7
80007dba:	c0 58       	rjmp	80007dc4 <osc_get_rate+0x2e>
		return BOARD_OSC1_HZ;
#endif

#ifdef BOARD_OSC32_HZ
	case OSC_ID_OSC32:
		return BOARD_OSC32_HZ;
80007dbc:	e0 68 80 00 	mov	r8,32768
80007dc0:	c0 28       	rjmp	80007dc4 <osc_get_rate+0x2e>
#endif
	default:
		/* unhandled_case(id); */
		return 0;
80007dc2:	30 08       	mov	r8,0
	}
}
80007dc4:	10 9c       	mov	r12,r8
80007dc6:	2f fd       	sub	sp,-4
80007dc8:	e3 cd 80 80 	ldm	sp++,r7,pc

80007dcc <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
80007dcc:	eb cd 40 80 	pushm	r7,lr
80007dd0:	1a 97       	mov	r7,sp
80007dd2:	20 1d       	sub	sp,4
80007dd4:	18 98       	mov	r8,r12
80007dd6:	ef 68 ff fc 	st.b	r7[-4],r8
	while (!osc_is_ready(id)) {
80007dda:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80007dde:	10 9c       	mov	r12,r8
80007de0:	f0 1f 00 05 	mcall	80007df4 <osc_wait_ready+0x28>
80007de4:	18 98       	mov	r8,r12
80007de6:	ec 18 00 01 	eorl	r8,0x1
80007dea:	5c 58       	castu.b	r8
80007dec:	cf 71       	brne	80007dda <osc_wait_ready+0xe>
		/* Do nothing */
	}
}
80007dee:	2f fd       	sub	sp,-4
80007df0:	e3 cd 80 80 	ldm	sp++,r7,pc
80007df4:	80 00       	ld.sh	r0,r0[0x0]
80007df6:	7d 50       	ld.w	r0,lr[0x54]

80007df8 <pll_config_set_option>:
			* CONFIG_PLL##pll_id##_MUL)                            \
			/ CONFIG_PLL##pll_id##_DIV)

static inline void pll_config_set_option(struct pll_config *cfg,
		unsigned int option)
{
80007df8:	eb cd 40 80 	pushm	r7,lr
80007dfc:	1a 97       	mov	r7,sp
80007dfe:	20 2d       	sub	sp,8
80007e00:	ef 4c ff fc 	st.w	r7[-4],r12
80007e04:	ef 4b ff f8 	st.w	r7[-8],r11
	Assert(option < PLL_NR_OPTIONS);

	cfg->ctrl |= 1U << (AVR32_PM_PLL0_PLLOPT + option);
80007e08:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007e0c:	70 09       	ld.w	r9,r8[0x0]
80007e0e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007e12:	2f e8       	sub	r8,-2
80007e14:	30 1a       	mov	r10,1
80007e16:	f4 08 09 48 	lsl	r8,r10,r8
80007e1a:	10 49       	or	r9,r8
80007e1c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007e20:	91 09       	st.w	r8[0x0],r9
}
80007e22:	2f ed       	sub	sp,-8
80007e24:	e3 cd 80 80 	ldm	sp++,r7,pc

80007e28 <pll_config_init>:
 * The PLL options #PLL_OPT_VCO_RANGE_LOW and #PLL_OPT_OUTPUT_DIV will
 * be set automatically based on the calculated target frequency.
 */
static inline void pll_config_init(struct pll_config *cfg,
		enum pll_source src, unsigned int div, unsigned int mul)
{
80007e28:	eb cd 40 80 	pushm	r7,lr
80007e2c:	1a 97       	mov	r7,sp
80007e2e:	20 5d       	sub	sp,20
80007e30:	ef 4c ff f8 	st.w	r7[-8],r12
80007e34:	ef 4b ff f4 	st.w	r7[-12],r11
80007e38:	ef 4a ff f0 	st.w	r7[-16],r10
80007e3c:	ef 49 ff ec 	st.w	r7[-20],r9
	uint32_t vco_hz;

	Assert(src < PLL_NR_SOURCES);

	/* Calculate internal VCO frequency */
	vco_hz = osc_get_rate(src) * mul;
80007e40:	ee f8 ff f4 	ld.w	r8,r7[-12]
80007e44:	5c 58       	castu.b	r8
80007e46:	10 9c       	mov	r12,r8
80007e48:	f0 1f 00 2e 	mcall	80007f00 <pll_config_init+0xd8>
80007e4c:	18 99       	mov	r9,r12
80007e4e:	ee f8 ff ec 	ld.w	r8,r7[-20]
80007e52:	f2 08 02 48 	mul	r8,r9,r8
80007e56:	ef 48 ff fc 	st.w	r7[-4],r8
	vco_hz /= div;
80007e5a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007e5e:	ee f9 ff f0 	ld.w	r9,r7[-16]
80007e62:	f0 09 0d 08 	divu	r8,r8,r9
80007e66:	ef 48 ff fc 	st.w	r7[-4],r8
	Assert(vco_hz >= PLL_MIN_HZ);
	Assert(vco_hz <= PLL_MAX_HZ);

	cfg->ctrl = 0;
80007e6a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007e6e:	30 09       	mov	r9,0
80007e70:	91 09       	st.w	r8[0x0],r9

	/* Bring the internal VCO frequency up to the minimum value */
	if ((vco_hz < PLL_MIN_HZ * 2) && (mul <= 8)) {
80007e72:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007e76:	e0 69 b3 ff 	mov	r9,46079
80007e7a:	ea 19 04 c4 	orh	r9,0x4c4
80007e7e:	12 38       	cp.w	r8,r9
80007e80:	e0 8b 00 16 	brhi	80007eac <pll_config_init+0x84>
80007e84:	ee f8 ff ec 	ld.w	r8,r7[-20]
80007e88:	58 88       	cp.w	r8,8
80007e8a:	e0 8b 00 11 	brhi	80007eac <pll_config_init+0x84>
		mul *= 2;
80007e8e:	ee f8 ff ec 	ld.w	r8,r7[-20]
80007e92:	a1 78       	lsl	r8,0x1
80007e94:	ef 48 ff ec 	st.w	r7[-20],r8
		vco_hz *= 2;
80007e98:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007e9c:	a1 78       	lsl	r8,0x1
80007e9e:	ef 48 ff fc 	st.w	r7[-4],r8
		pll_config_set_option(cfg, PLL_OPT_OUTPUT_DIV);
80007ea2:	30 1b       	mov	r11,1
80007ea4:	ee fc ff f8 	ld.w	r12,r7[-8]
80007ea8:	f0 1f 00 17 	mcall	80007f04 <pll_config_init+0xdc>
	}

	/* Set VCO frequency range according to calculated value */
	if (vco_hz < PLL_VCO_LOW_THRESHOLD)
80007eac:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007eb0:	e0 69 fe 7f 	mov	r9,65151
80007eb4:	ea 19 0a 21 	orh	r9,0xa21
80007eb8:	12 38       	cp.w	r8,r9
80007eba:	e0 8b 00 07 	brhi	80007ec8 <pll_config_init+0xa0>
		pll_config_set_option(cfg, PLL_OPT_VCO_RANGE_LOW);
80007ebe:	30 0b       	mov	r11,0
80007ec0:	ee fc ff f8 	ld.w	r12,r7[-8]
80007ec4:	f0 1f 00 10 	mcall	80007f04 <pll_config_init+0xdc>

	Assert((mul > 2) && (mul <= 16));
	Assert((div > 0) && (div <= 15));

	cfg->ctrl |= ((mul - 1) << AVR32_PM_PLL0_PLLMUL)
80007ec8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007ecc:	70 09       	ld.w	r9,r8[0x0]
80007ece:	ee f8 ff ec 	ld.w	r8,r7[-20]
80007ed2:	20 18       	sub	r8,1
80007ed4:	f0 0a 15 10 	lsl	r10,r8,0x10
			| (div << AVR32_PM_PLL0_PLLDIV)
80007ed8:	ee f8 ff f0 	ld.w	r8,r7[-16]
80007edc:	a9 68       	lsl	r8,0x8
			| (PLL_MAX_STARTUP_CYCLES << AVR32_PM_PLL0_PLLCOUNT)
80007ede:	10 4a       	or	r10,r8
			| (src << AVR32_PM_PLL0_PLLOSC);
80007ee0:	ee f8 ff f4 	ld.w	r8,r7[-12]
80007ee4:	a1 78       	lsl	r8,0x1
		pll_config_set_option(cfg, PLL_OPT_VCO_RANGE_LOW);

	Assert((mul > 2) && (mul <= 16));
	Assert((div > 0) && (div <= 15));

	cfg->ctrl |= ((mul - 1) << AVR32_PM_PLL0_PLLMUL)
80007ee6:	f5 e8 10 08 	or	r8,r10,r8
80007eea:	f3 e8 10 08 	or	r8,r9,r8
80007eee:	10 99       	mov	r9,r8
80007ef0:	ea 19 3f 00 	orh	r9,0x3f00
80007ef4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007ef8:	91 09       	st.w	r8[0x0],r9
			| (div << AVR32_PM_PLL0_PLLDIV)
			| (PLL_MAX_STARTUP_CYCLES << AVR32_PM_PLL0_PLLCOUNT)
			| (src << AVR32_PM_PLL0_PLLOSC);
}
80007efa:	2f bd       	sub	sp,-20
80007efc:	e3 cd 80 80 	ldm	sp++,r7,pc
80007f00:	80 00       	ld.sh	r0,r0[0x0]
80007f02:	7d 96       	ld.w	r6,lr[0x64]
80007f04:	80 00       	ld.sh	r0,r0[0x0]
80007f06:	7d f8       	ld.w	r8,lr[0x7c]

80007f08 <pll_enable>:
	AVR32_PM.pll[pll_id] = cfg->ctrl;
}

static inline void pll_enable(const struct pll_config *cfg,
		unsigned int pll_id)
{
80007f08:	eb cd 40 80 	pushm	r7,lr
80007f0c:	1a 97       	mov	r7,sp
80007f0e:	20 2d       	sub	sp,8
80007f10:	ef 4c ff fc 	st.w	r7[-4],r12
80007f14:	ef 4b ff f8 	st.w	r7[-8],r11
	Assert(pll_id < NR_PLLS);

	AVR32_PM.pll[pll_id] = cfg->ctrl | (1U << AVR32_PM_PLL0_PLLEN);
80007f18:	fe 78 0c 00 	mov	r8,-62464
80007f1c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80007f20:	ee fa ff fc 	ld.w	r10,r7[-4]
80007f24:	74 0a       	ld.w	r10,r10[0x0]
80007f26:	a1 aa       	sbr	r10,0x0
80007f28:	2f 89       	sub	r9,-8
80007f2a:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
}
80007f2e:	2f ed       	sub	sp,-8
80007f30:	e3 cd 80 80 	ldm	sp++,r7,pc

80007f34 <pll_is_locked>:

	AVR32_PM.pll[pll_id] = 0;
}

static inline bool pll_is_locked(unsigned int pll_id)
{
80007f34:	eb cd 40 80 	pushm	r7,lr
80007f38:	1a 97       	mov	r7,sp
80007f3a:	20 1d       	sub	sp,4
80007f3c:	ef 4c ff fc 	st.w	r7[-4],r12
	Assert(pll_id < NR_PLLS);

	return !!(AVR32_PM.poscsr & (1U << (AVR32_PM_POSCSR_LOCK0 + pll_id)));
80007f40:	fe 78 0c 00 	mov	r8,-62464
80007f44:	71 59       	ld.w	r9,r8[0x54]
80007f46:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007f4a:	30 1a       	mov	r10,1
80007f4c:	f4 08 09 48 	lsl	r8,r10,r8
80007f50:	f3 e8 00 08 	and	r8,r9,r8
80007f54:	5f 18       	srne	r8
80007f56:	5c 58       	castu.b	r8
}
80007f58:	10 9c       	mov	r12,r8
80007f5a:	2f fd       	sub	sp,-4
80007f5c:	e3 cd 80 80 	ldm	sp++,r7,pc

80007f60 <pll_enable_source>:

static inline void pll_enable_source(enum pll_source src)
{
80007f60:	eb cd 40 80 	pushm	r7,lr
80007f64:	1a 97       	mov	r7,sp
80007f66:	20 1d       	sub	sp,4
80007f68:	ef 4c ff fc 	st.w	r7[-4],r12
	switch (src) {
80007f6c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007f70:	58 08       	cp.w	r8,0
80007f72:	c0 40       	breq	80007f7a <pll_enable_source+0x1a>
80007f74:	58 18       	cp.w	r8,1
80007f76:	c1 10       	breq	80007f98 <pll_enable_source+0x38>
80007f78:	c2 08       	rjmp	80007fb8 <pll_enable_source+0x58>
	case PLL_SRC_OSC0:
		if (!osc_is_ready(OSC_ID_OSC0)) {
80007f7a:	30 0c       	mov	r12,0
80007f7c:	f0 1f 00 11 	mcall	80007fc0 <pll_enable_source+0x60>
80007f80:	18 98       	mov	r8,r12
80007f82:	ec 18 00 01 	eorl	r8,0x1
80007f86:	5c 58       	castu.b	r8
80007f88:	c1 70       	breq	80007fb6 <pll_enable_source+0x56>
			osc_enable(OSC_ID_OSC0);
80007f8a:	30 0c       	mov	r12,0
80007f8c:	f0 1f 00 0e 	mcall	80007fc4 <pll_enable_source+0x64>
			osc_wait_ready(OSC_ID_OSC0);
80007f90:	30 0c       	mov	r12,0
80007f92:	f0 1f 00 0e 	mcall	80007fc8 <pll_enable_source+0x68>
		}
		break;
80007f96:	c1 18       	rjmp	80007fb8 <pll_enable_source+0x58>

	case PLL_SRC_OSC1:
		if (!osc_is_ready(OSC_ID_OSC1)) {
80007f98:	30 1c       	mov	r12,1
80007f9a:	f0 1f 00 0a 	mcall	80007fc0 <pll_enable_source+0x60>
80007f9e:	18 98       	mov	r8,r12
80007fa0:	ec 18 00 01 	eorl	r8,0x1
80007fa4:	5c 58       	castu.b	r8
80007fa6:	c0 90       	breq	80007fb8 <pll_enable_source+0x58>
			osc_enable(OSC_ID_OSC1);
80007fa8:	30 1c       	mov	r12,1
80007faa:	f0 1f 00 07 	mcall	80007fc4 <pll_enable_source+0x64>
			osc_wait_ready(OSC_ID_OSC1);
80007fae:	30 1c       	mov	r12,1
80007fb0:	f0 1f 00 06 	mcall	80007fc8 <pll_enable_source+0x68>
80007fb4:	c0 28       	rjmp	80007fb8 <pll_enable_source+0x58>
	case PLL_SRC_OSC0:
		if (!osc_is_ready(OSC_ID_OSC0)) {
			osc_enable(OSC_ID_OSC0);
			osc_wait_ready(OSC_ID_OSC0);
		}
		break;
80007fb6:	d7 03       	nop

	default:
		Assert(false);
		break;
	}
}
80007fb8:	2f fd       	sub	sp,-4
80007fba:	e3 cd 80 80 	ldm	sp++,r7,pc
80007fbe:	00 00       	add	r0,r0
80007fc0:	80 00       	ld.sh	r0,r0[0x0]
80007fc2:	7d 50       	ld.w	r0,lr[0x54]
80007fc4:	80 00       	ld.sh	r0,r0[0x0]
80007fc6:	7c c0       	ld.w	r0,lr[0x30]
80007fc8:	80 00       	ld.sh	r0,r0[0x0]
80007fca:	7d cc       	ld.w	r12,lr[0x70]

80007fcc <pll_enable_config_defaults>:

static inline void pll_enable_config_defaults(unsigned int pll_id)
{
80007fcc:	eb cd 40 80 	pushm	r7,lr
80007fd0:	1a 97       	mov	r7,sp
80007fd2:	20 2d       	sub	sp,8
80007fd4:	ef 4c ff f8 	st.w	r7[-8],r12
	struct pll_config pllcfg;

	if (pll_is_locked(pll_id)) {
80007fd8:	ee fc ff f8 	ld.w	r12,r7[-8]
80007fdc:	f0 1f 00 15 	mcall	80008030 <pll_enable_config_defaults+0x64>
80007fe0:	18 98       	mov	r8,r12
80007fe2:	58 08       	cp.w	r8,0
80007fe4:	c2 11       	brne	80008026 <pll_enable_config_defaults+0x5a>
		return; // Pll already running
	}
	switch (pll_id) {
80007fe6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007fea:	58 08       	cp.w	r8,0
80007fec:	c0 c1       	brne	80008004 <pll_enable_config_defaults+0x38>
#ifdef CONFIG_PLL0_SOURCE
	case 0:
		pll_enable_source(CONFIG_PLL0_SOURCE);
80007fee:	30 0c       	mov	r12,0
80007ff0:	f0 1f 00 11 	mcall	80008034 <pll_enable_config_defaults+0x68>
		pll_config_init(&pllcfg,
80007ff4:	ee c8 00 04 	sub	r8,r7,4
80007ff8:	30 89       	mov	r9,8
80007ffa:	30 2a       	mov	r10,2
80007ffc:	30 0b       	mov	r11,0
80007ffe:	10 9c       	mov	r12,r8
80008000:	f0 1f 00 0e 	mcall	80008038 <pll_enable_config_defaults+0x6c>
#endif
	default:
		Assert(false);
		break;
	}
	pll_enable(&pllcfg, pll_id);
80008004:	ee c8 00 04 	sub	r8,r7,4
80008008:	ee fb ff f8 	ld.w	r11,r7[-8]
8000800c:	10 9c       	mov	r12,r8
8000800e:	f0 1f 00 0c 	mcall	8000803c <pll_enable_config_defaults+0x70>
	while (!pll_is_locked(pll_id));
80008012:	ee fc ff f8 	ld.w	r12,r7[-8]
80008016:	f0 1f 00 07 	mcall	80008030 <pll_enable_config_defaults+0x64>
8000801a:	18 98       	mov	r8,r12
8000801c:	ec 18 00 01 	eorl	r8,0x1
80008020:	5c 58       	castu.b	r8
80008022:	cf 81       	brne	80008012 <pll_enable_config_defaults+0x46>
80008024:	c0 28       	rjmp	80008028 <pll_enable_config_defaults+0x5c>
static inline void pll_enable_config_defaults(unsigned int pll_id)
{
	struct pll_config pllcfg;

	if (pll_is_locked(pll_id)) {
		return; // Pll already running
80008026:	d7 03       	nop
		Assert(false);
		break;
	}
	pll_enable(&pllcfg, pll_id);
	while (!pll_is_locked(pll_id));
}
80008028:	2f ed       	sub	sp,-8
8000802a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000802e:	00 00       	add	r0,r0
80008030:	80 00       	ld.sh	r0,r0[0x0]
80008032:	7f 34       	ld.w	r4,pc[0x4c]
80008034:	80 00       	ld.sh	r0,r0[0x0]
80008036:	7f 60       	ld.w	r0,pc[0x58]
80008038:	80 00       	ld.sh	r0,r0[0x0]
8000803a:	7e 28       	ld.w	r8,pc[0x8]
8000803c:	80 00       	ld.sh	r0,r0[0x0]
8000803e:	7f 08       	ld.w	r8,pc[0x40]

80008040 <genclk_config_defaults>:
	uint32_t ctrl;
};

static inline void genclk_config_defaults(struct genclk_config *cfg,
		unsigned int id)
{
80008040:	eb cd 40 80 	pushm	r7,lr
80008044:	1a 97       	mov	r7,sp
80008046:	20 2d       	sub	sp,8
80008048:	ef 4c ff fc 	st.w	r7[-4],r12
8000804c:	ef 4b ff f8 	st.w	r7[-8],r11
	cfg->ctrl = 0;
80008050:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008054:	30 09       	mov	r9,0
80008056:	91 09       	st.w	r8[0x0],r9
}
80008058:	2f ed       	sub	sp,-8
8000805a:	e3 cd 80 80 	ldm	sp++,r7,pc

8000805e <genclk_config_set_source>:
	AVR32_PM.gcctrl[id] = cfg->ctrl;
}

static inline void genclk_config_set_source(struct genclk_config *cfg,
		enum genclk_source src)
{
8000805e:	eb cd 40 80 	pushm	r7,lr
80008062:	1a 97       	mov	r7,sp
80008064:	20 3d       	sub	sp,12
80008066:	ef 4c ff f8 	st.w	r7[-8],r12
8000806a:	ef 4b ff f4 	st.w	r7[-12],r11
	uint32_t mask;

	mask = AVR32_PM_GCCTRL_OSCSEL_MASK | AVR32_PM_GCCTRL_PLLSEL_MASK;
8000806e:	30 38       	mov	r8,3
80008070:	ef 48 ff fc 	st.w	r7[-4],r8
	Assert(!(src & ~mask));

	cfg->ctrl = (cfg->ctrl & ~mask) | (src << AVR32_PM_GCCTRL_OSCSEL);
80008074:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008078:	70 09       	ld.w	r9,r8[0x0]
8000807a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000807e:	5c d8       	com	r8
80008080:	10 69       	and	r9,r8
80008082:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008086:	10 49       	or	r9,r8
80008088:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000808c:	91 09       	st.w	r8[0x0],r9
}
8000808e:	2f dd       	sub	sp,-12
80008090:	e3 cd 80 80 	ldm	sp++,r7,pc

80008094 <genclk_config_set_divider>:

static inline void genclk_config_set_divider(struct genclk_config *cfg,
		unsigned int divider)
{
80008094:	eb cd 40 80 	pushm	r7,lr
80008098:	1a 97       	mov	r7,sp
8000809a:	20 2d       	sub	sp,8
8000809c:	ef 4c ff fc 	st.w	r7[-4],r12
800080a0:	ef 4b ff f8 	st.w	r7[-8],r11
	Assert((divider > 0) && (divider <= GENCLK_DIV_MAX));

	/* Clear all the bits we're about to modify */
	cfg->ctrl &= ~(AVR32_PM_GCCTRL_DIVEN_MASK | AVR32_PM_GCCTRL_DIV_MASK);
800080a4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800080a8:	70 08       	ld.w	r8,r8[0x0]
800080aa:	10 99       	mov	r9,r8
800080ac:	e0 19 00 ef 	andl	r9,0xef
800080b0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800080b4:	91 09       	st.w	r8[0x0],r9

	if (divider > 1) {
800080b6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800080ba:	58 18       	cp.w	r8,1
800080bc:	e0 88 00 16 	brls	800080e8 <genclk_config_set_divider+0x54>
		cfg->ctrl |= 1U << AVR32_PM_GCCTRL_DIVEN;
800080c0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800080c4:	70 08       	ld.w	r8,r8[0x0]
800080c6:	10 99       	mov	r9,r8
800080c8:	a5 a9       	sbr	r9,0x4
800080ca:	ee f8 ff fc 	ld.w	r8,r7[-4]
800080ce:	91 09       	st.w	r8[0x0],r9
		cfg->ctrl |= ((divider >> 1) - 1) << AVR32_PM_GCCTRL_DIV;
800080d0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800080d4:	70 09       	ld.w	r9,r8[0x0]
800080d6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800080da:	a1 98       	lsr	r8,0x1
800080dc:	20 18       	sub	r8,1
800080de:	a9 68       	lsl	r8,0x8
800080e0:	10 49       	or	r9,r8
800080e2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800080e6:	91 09       	st.w	r8[0x0],r9
	}
}
800080e8:	2f ed       	sub	sp,-8
800080ea:	e3 cd 80 80 	ldm	sp++,r7,pc

800080ee <genclk_enable>:

static inline void genclk_enable(const struct genclk_config *cfg,
		unsigned int id)
{
800080ee:	eb cd 40 80 	pushm	r7,lr
800080f2:	1a 97       	mov	r7,sp
800080f4:	20 2d       	sub	sp,8
800080f6:	ef 4c ff fc 	st.w	r7[-4],r12
800080fa:	ef 4b ff f8 	st.w	r7[-8],r11
	AVR32_PM.gcctrl[id] = cfg->ctrl | (1U << AVR32_PM_GCCTRL_CEN);
800080fe:	fe 78 0c 00 	mov	r8,-62464
80008102:	ee f9 ff f8 	ld.w	r9,r7[-8]
80008106:	ee fa ff fc 	ld.w	r10,r7[-4]
8000810a:	74 0a       	ld.w	r10,r10[0x0]
8000810c:	a3 aa       	sbr	r10,0x2
8000810e:	2e 89       	sub	r9,-24
80008110:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
}
80008114:	2f ed       	sub	sp,-8
80008116:	e3 cd 80 80 	ldm	sp++,r7,pc
8000811a:	d7 03       	nop

8000811c <genclk_enable_source>:
{
	AVR32_PM.gcctrl[id] = 0;
}

static inline void genclk_enable_source(enum genclk_source src)
{
8000811c:	eb cd 40 80 	pushm	r7,lr
80008120:	1a 97       	mov	r7,sp
80008122:	20 1d       	sub	sp,4
80008124:	ef 4c ff fc 	st.w	r7[-4],r12
	switch (src) {
80008128:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000812c:	58 08       	cp.w	r8,0
8000812e:	c0 40       	breq	80008136 <genclk_enable_source+0x1a>
80008130:	58 28       	cp.w	r8,2
80008132:	c1 10       	breq	80008154 <genclk_enable_source+0x38>
80008134:	c1 58       	rjmp	8000815e <genclk_enable_source+0x42>
#ifdef BOARD_OSC0_HZ
	case GENCLK_SRC_OSC0:
		if (!osc_is_ready(OSC_ID_OSC0)) {
80008136:	30 0c       	mov	r12,0
80008138:	f0 1f 00 0b 	mcall	80008164 <genclk_enable_source+0x48>
8000813c:	18 98       	mov	r8,r12
8000813e:	ec 18 00 01 	eorl	r8,0x1
80008142:	5c 58       	castu.b	r8
80008144:	c0 c0       	breq	8000815c <genclk_enable_source+0x40>
			osc_enable(OSC_ID_OSC0);
80008146:	30 0c       	mov	r12,0
80008148:	f0 1f 00 08 	mcall	80008168 <genclk_enable_source+0x4c>
			osc_wait_ready(OSC_ID_OSC0);
8000814c:	30 0c       	mov	r12,0
8000814e:	f0 1f 00 08 	mcall	8000816c <genclk_enable_source+0x50>
		}
		break;
80008152:	c0 68       	rjmp	8000815e <genclk_enable_source+0x42>
		break;
#endif

#ifdef CONFIG_PLL0_SOURCE
	case GENCLK_SRC_PLL0: {
		pll_enable_config_defaults(0);
80008154:	30 0c       	mov	r12,0
80008156:	f0 1f 00 07 	mcall	80008170 <genclk_enable_source+0x54>
8000815a:	c0 28       	rjmp	8000815e <genclk_enable_source+0x42>
	case GENCLK_SRC_OSC0:
		if (!osc_is_ready(OSC_ID_OSC0)) {
			osc_enable(OSC_ID_OSC0);
			osc_wait_ready(OSC_ID_OSC0);
		}
		break;
8000815c:	d7 03       	nop

	default:
		Assert(false);
		break;
	}
}
8000815e:	2f fd       	sub	sp,-4
80008160:	e3 cd 80 80 	ldm	sp++,r7,pc
80008164:	80 00       	ld.sh	r0,r0[0x0]
80008166:	7d 50       	ld.w	r0,lr[0x54]
80008168:	80 00       	ld.sh	r0,r0[0x0]
8000816a:	7c c0       	ld.w	r0,lr[0x30]
8000816c:	80 00       	ld.sh	r0,r0[0x0]
8000816e:	7d cc       	ld.w	r12,lr[0x70]
80008170:	80 00       	ld.sh	r0,r0[0x0]
80008172:	7f cc       	ld.w	r12,pc[0x70]

80008174 <genclk_enable_config>:
 * \param id      The ID of the generic clock.
 * \param src     The source clock of the generic clock.
 * \param divider The divider used to generate the generic clock.
 */
static inline void genclk_enable_config(unsigned int id, enum genclk_source src, unsigned int divider)
{
80008174:	eb cd 40 80 	pushm	r7,lr
80008178:	1a 97       	mov	r7,sp
8000817a:	20 4d       	sub	sp,16
8000817c:	ef 4c ff f8 	st.w	r7[-8],r12
80008180:	ef 4b ff f4 	st.w	r7[-12],r11
80008184:	ef 4a ff f0 	st.w	r7[-16],r10
	struct genclk_config gcfg;

	genclk_config_defaults(&gcfg, id);
80008188:	ee c8 00 04 	sub	r8,r7,4
8000818c:	ee fb ff f8 	ld.w	r11,r7[-8]
80008190:	10 9c       	mov	r12,r8
80008192:	f0 1f 00 10 	mcall	800081d0 <genclk_enable_config+0x5c>
	genclk_enable_source(src);
80008196:	ee fc ff f4 	ld.w	r12,r7[-12]
8000819a:	f0 1f 00 0f 	mcall	800081d4 <genclk_enable_config+0x60>
	genclk_config_set_source(&gcfg, src);
8000819e:	ee c8 00 04 	sub	r8,r7,4
800081a2:	ee fb ff f4 	ld.w	r11,r7[-12]
800081a6:	10 9c       	mov	r12,r8
800081a8:	f0 1f 00 0c 	mcall	800081d8 <genclk_enable_config+0x64>
	genclk_config_set_divider(&gcfg, divider);
800081ac:	ee c8 00 04 	sub	r8,r7,4
800081b0:	ee fb ff f0 	ld.w	r11,r7[-16]
800081b4:	10 9c       	mov	r12,r8
800081b6:	f0 1f 00 0a 	mcall	800081dc <genclk_enable_config+0x68>
	genclk_enable(&gcfg, id);
800081ba:	ee c8 00 04 	sub	r8,r7,4
800081be:	ee fb ff f8 	ld.w	r11,r7[-8]
800081c2:	10 9c       	mov	r12,r8
800081c4:	f0 1f 00 07 	mcall	800081e0 <genclk_enable_config+0x6c>
}
800081c8:	2f cd       	sub	sp,-16
800081ca:	e3 cd 80 80 	ldm	sp++,r7,pc
800081ce:	00 00       	add	r0,r0
800081d0:	80 00       	ld.sh	r0,r0[0x0]
800081d2:	80 40       	ld.sh	r0,r0[0x8]
800081d4:	80 00       	ld.sh	r0,r0[0x0]
800081d6:	81 1c       	st.w	r0[0x4],r12
800081d8:	80 00       	ld.sh	r0,r0[0x0]
800081da:	80 5e       	ld.sh	lr,r0[0xa]
800081dc:	80 00       	ld.sh	r0,r0[0x0]
800081de:	80 94       	ld.uh	r4,r0[0x2]
800081e0:	80 00       	ld.sh	r0,r0[0x0]
800081e2:	80 ee       	ld.uh	lr,r0[0xc]

800081e4 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern bool sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
800081e4:	eb cd 40 80 	pushm	r7,lr
800081e8:	1a 97       	mov	r7,sp
		return BOARD_OSC0_HZ;
#endif

#ifdef CONFIG_PLL0_SOURCE
	case SYSCLK_SRC_PLL0:
		return pll_get_default_rate(0);
800081ea:	30 0c       	mov	r12,0
800081ec:	f0 1f 00 04 	mcall	800081fc <sysclk_get_main_hz+0x18>
800081f0:	18 98       	mov	r8,r12
800081f2:	a3 78       	lsl	r8,0x3
800081f4:	a1 98       	lsr	r8,0x1

	default:
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
800081f6:	10 9c       	mov	r12,r8
800081f8:	e3 cd 80 80 	ldm	sp++,r7,pc
800081fc:	80 00       	ld.sh	r0,r0[0x0]
800081fe:	7d 96       	ld.w	r6,lr[0x64]

80008200 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
80008200:	eb cd 40 80 	pushm	r7,lr
80008204:	1a 97       	mov	r7,sp
	return sysclk_get_main_hz() >> CONFIG_SYSCLK_CPU_DIV;
80008206:	f0 1f 00 04 	mcall	80008214 <sysclk_get_cpu_hz+0x14>
8000820a:	18 98       	mov	r8,r12
}
8000820c:	10 9c       	mov	r12,r8
8000820e:	e3 cd 80 80 	ldm	sp++,r7,pc
80008212:	00 00       	add	r0,r0
80008214:	80 00       	ld.sh	r0,r0[0x0]
80008216:	81 e4       	st.w	r0[0x38],r4

80008218 <sysclk_enable_hsb_module>:
/**
 * \brief Enable a module clock derived from the HSB clock
 * \param index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_enable_hsb_module(unsigned int index)
{
80008218:	eb cd 40 80 	pushm	r7,lr
8000821c:	1a 97       	mov	r7,sp
8000821e:	20 1d       	sub	sp,4
80008220:	ef 4c ff fc 	st.w	r7[-4],r12
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_HSB, index);
80008224:	ee fb ff fc 	ld.w	r11,r7[-4]
80008228:	30 1c       	mov	r12,1
8000822a:	f0 1f 00 03 	mcall	80008234 <sysclk_enable_hsb_module+0x1c>
}
8000822e:	2f fd       	sub	sp,-4
80008230:	e3 cd 80 80 	ldm	sp++,r7,pc
80008234:	80 00       	ld.sh	r0,r0[0x0]
80008236:	83 0c       	st.w	r1[0x0],r12

80008238 <sysclk_set_prescalers>:
 * \param pba_shift The PBA clock will be divided by \f$2^{pba\_shift}\f$
 * \param pbb_shift The PBB clock will be divided by \f$2^{pbb\_shift}\f$
 */
static inline void sysclk_set_prescalers(unsigned int cpu_shift,
		unsigned int pba_shift, unsigned int pbb_shift)
{
80008238:	eb cd 40 80 	pushm	r7,lr
8000823c:	1a 97       	mov	r7,sp
8000823e:	20 4d       	sub	sp,16
80008240:	ef 4c ff f8 	st.w	r7[-8],r12
80008244:	ef 4b ff f4 	st.w	r7[-12],r11
80008248:	ef 4a ff f0 	st.w	r7[-16],r10
	uint32_t cksel = 0;
8000824c:	30 08       	mov	r8,0
8000824e:	ef 48 ff fc 	st.w	r7[-4],r8

	Assert(cpu_shift <= pba_shift);
	Assert(cpu_shift <= pbb_shift);

	if (cpu_shift > 0)
80008252:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008256:	58 08       	cp.w	r8,0
80008258:	c0 70       	breq	80008266 <sysclk_set_prescalers+0x2e>
		cksel = ((cpu_shift - 1) << AVR32_PM_CKSEL_CPUSEL)
8000825a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000825e:	20 18       	sub	r8,1
80008260:	a7 b8       	sbr	r8,0x7
80008262:	ef 48 ff fc 	st.w	r7[-4],r8
				| (1U << AVR32_PM_CKSEL_CPUDIV);

	if (pba_shift > 0)
80008266:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000826a:	58 08       	cp.w	r8,0
8000826c:	c0 d0       	breq	80008286 <sysclk_set_prescalers+0x4e>
		cksel |= ((pba_shift - 1) << AVR32_PM_CKSEL_PBASEL)
8000826e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008272:	20 18       	sub	r8,1
80008274:	f0 09 15 10 	lsl	r9,r8,0x10
80008278:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000827c:	f3 e8 10 08 	or	r8,r9,r8
80008280:	b7 b8       	sbr	r8,0x17
80008282:	ef 48 ff fc 	st.w	r7[-4],r8
				| (1U << AVR32_PM_CKSEL_PBADIV);

	if (pbb_shift > 0)
80008286:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000828a:	58 08       	cp.w	r8,0
8000828c:	c0 d0       	breq	800082a6 <sysclk_set_prescalers+0x6e>
		cksel |= ((pbb_shift - 1) << AVR32_PM_CKSEL_PBBSEL)
8000828e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80008292:	20 18       	sub	r8,1
80008294:	f0 09 15 18 	lsl	r9,r8,0x18
80008298:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000829c:	f3 e8 10 08 	or	r8,r9,r8
800082a0:	bf b8       	sbr	r8,0x1f
800082a2:	ef 48 ff fc 	st.w	r7[-4],r8
				| (1U << AVR32_PM_CKSEL_PBBDIV);

	AVR32_PM.cksel = cksel;
800082a6:	fe 78 0c 00 	mov	r8,-62464
800082aa:	ee f9 ff fc 	ld.w	r9,r7[-4]
800082ae:	91 19       	st.w	r8[0x4],r9
}
800082b0:	2f cd       	sub	sp,-16
800082b2:	e3 cd 80 80 	ldm	sp++,r7,pc
800082b6:	d7 03       	nop

800082b8 <sysclk_set_source>:
 *
 * \param src The new system clock source. Must be one of the constants
 * from the <em>System Clock Sources</em> section.
 */
static inline void sysclk_set_source(uint_fast8_t src)
{
800082b8:	eb cd 40 80 	pushm	r7,lr
800082bc:	1a 97       	mov	r7,sp
800082be:	20 3d       	sub	sp,12
800082c0:	ef 4c ff f4 	st.w	r7[-12],r12
	irqflags_t flags;
	uint32_t   mcctrl;

	Assert(src <= SYSCLK_SRC_PLL0);

	flags = cpu_irq_save();
800082c4:	f0 1f 00 10 	mcall	80008304 <sysclk_set_source+0x4c>
800082c8:	18 98       	mov	r8,r12
800082ca:	ef 48 ff f8 	st.w	r7[-8],r8
	mcctrl = AVR32_PM.mcctrl & ~AVR32_PM_MCCTRL_MCSEL_MASK;
800082ce:	fe 78 0c 00 	mov	r8,-62464
800082d2:	70 08       	ld.w	r8,r8[0x0]
800082d4:	e0 18 ff fc 	andl	r8,0xfffc
800082d8:	ef 48 ff fc 	st.w	r7[-4],r8
	mcctrl |= src << AVR32_PM_MCCTRL_MCSEL;
800082dc:	ee f9 ff fc 	ld.w	r9,r7[-4]
800082e0:	ee f8 ff f4 	ld.w	r8,r7[-12]
800082e4:	f3 e8 10 08 	or	r8,r9,r8
800082e8:	ef 48 ff fc 	st.w	r7[-4],r8
	AVR32_PM.mcctrl = mcctrl;
800082ec:	fe 78 0c 00 	mov	r8,-62464
800082f0:	ee f9 ff fc 	ld.w	r9,r7[-4]
800082f4:	91 09       	st.w	r8[0x0],r9
	cpu_irq_restore(flags);
800082f6:	ee fc ff f8 	ld.w	r12,r7[-8]
800082fa:	f0 1f 00 04 	mcall	80008308 <sysclk_set_source+0x50>
}
800082fe:	2f dd       	sub	sp,-12
80008300:	e3 cd 80 80 	ldm	sp++,r7,pc
80008304:	80 00       	ld.sh	r0,r0[0x0]
80008306:	7c 58       	ld.w	r8,lr[0x14]
80008308:	80 00       	ld.sh	r0,r0[0x0]
8000830a:	7c 98       	ld.w	r8,lr[0x24]

8000830c <sysclk_priv_enable_module>:
 * \param bus_id Bus index, given by the \c AVR32_PM_CLK_GRP_xxx definitions.
 * \param module_index Index of the module to be enabled. This is the
 * bit number in the corresponding xxxMASK register.
 */
void sysclk_priv_enable_module(unsigned int bus_id, unsigned int module_index)
{
8000830c:	eb cd 40 80 	pushm	r7,lr
80008310:	1a 97       	mov	r7,sp
80008312:	20 4d       	sub	sp,16
80008314:	ef 4c ff f4 	st.w	r7[-12],r12
80008318:	ef 4b ff f0 	st.w	r7[-16],r11
	irqflags_t flags;
	uint32_t   mask;

	flags = cpu_irq_save();
8000831c:	f0 1f 00 17 	mcall	80008378 <sysclk_priv_enable_module+0x6c>
80008320:	18 98       	mov	r8,r12
80008322:	ef 48 ff f8 	st.w	r7[-8],r8

	/*
	 * Poll MSKRDY before changing mask rather than after, as it's
	 * highly unlikely to actually be cleared at this point.
	 */
	while (!(AVR32_PM.poscsr & (1U << AVR32_PM_POSCSR_MSKRDY))) {
80008326:	fe 78 0c 00 	mov	r8,-62464
8000832a:	71 58       	ld.w	r8,r8[0x54]
8000832c:	e2 18 00 40 	andl	r8,0x40,COH
80008330:	cf b0       	breq	80008326 <sysclk_priv_enable_module+0x1a>
		/* Do nothing */
	}

	/* Enable the clock */
	mask = *(&AVR32_PM.cpumask + bus_id);
80008332:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008336:	a3 68       	lsl	r8,0x2
80008338:	e0 28 f3 f8 	sub	r8,62456
8000833c:	70 08       	ld.w	r8,r8[0x0]
8000833e:	ef 48 ff fc 	st.w	r7[-4],r8
	mask |= 1U << module_index;
80008342:	ee f8 ff f0 	ld.w	r8,r7[-16]
80008346:	30 19       	mov	r9,1
80008348:	f2 08 09 48 	lsl	r8,r9,r8
8000834c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80008350:	f3 e8 10 08 	or	r8,r9,r8
80008354:	ef 48 ff fc 	st.w	r7[-4],r8
	*(&AVR32_PM.cpumask + bus_id) = mask;
80008358:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000835c:	a3 68       	lsl	r8,0x2
8000835e:	e0 28 f3 f8 	sub	r8,62456
80008362:	ee f9 ff fc 	ld.w	r9,r7[-4]
80008366:	91 09       	st.w	r8[0x0],r9

	cpu_irq_restore(flags);
80008368:	ee fc ff f8 	ld.w	r12,r7[-8]
8000836c:	f0 1f 00 04 	mcall	8000837c <sysclk_priv_enable_module+0x70>
}
80008370:	2f cd       	sub	sp,-16
80008372:	e3 cd 80 80 	ldm	sp++,r7,pc
80008376:	00 00       	add	r0,r0
80008378:	80 00       	ld.sh	r0,r0[0x0]
8000837a:	7c 58       	ld.w	r8,lr[0x14]
8000837c:	80 00       	ld.sh	r0,r0[0x0]
8000837e:	7c 98       	ld.w	r8,lr[0x24]

80008380 <sysclk_enable_pbb_module>:
/**
 * \brief Enable a module clock derived from the PBB clock
 * \param index Index of the module clock in the PBBMASK register
 */
void sysclk_enable_pbb_module(unsigned int index)
{
80008380:	eb cd 40 80 	pushm	r7,lr
80008384:	1a 97       	mov	r7,sp
80008386:	20 2d       	sub	sp,8
80008388:	ef 4c ff f8 	st.w	r7[-8],r12
	irqflags_t flags;

	/* Enable the bridge if necessary */
	flags = cpu_irq_save();
8000838c:	f0 1f 00 0f 	mcall	800083c8 <sysclk_enable_pbb_module+0x48>
80008390:	18 98       	mov	r8,r12
80008392:	ef 48 ff fc 	st.w	r7[-4],r8

	if (!sysclk_pbb_refcount)
80008396:	48 e8       	lddpc	r8,800083cc <sysclk_enable_pbb_module+0x4c>
80008398:	11 88       	ld.ub	r8,r8[0x0]
8000839a:	58 08       	cp.w	r8,0
8000839c:	c0 41       	brne	800083a4 <sysclk_enable_pbb_module+0x24>
		sysclk_enable_hsb_module(SYSCLK_PBB_BRIDGE);
8000839e:	30 2c       	mov	r12,2
800083a0:	f0 1f 00 0c 	mcall	800083d0 <sysclk_enable_pbb_module+0x50>

	sysclk_pbb_refcount++;
800083a4:	48 a8       	lddpc	r8,800083cc <sysclk_enable_pbb_module+0x4c>
800083a6:	11 88       	ld.ub	r8,r8[0x0]
800083a8:	2f f8       	sub	r8,-1
800083aa:	5c 58       	castu.b	r8
800083ac:	48 89       	lddpc	r9,800083cc <sysclk_enable_pbb_module+0x4c>
800083ae:	b2 88       	st.b	r9[0x0],r8

	cpu_irq_restore(flags);
800083b0:	ee fc ff fc 	ld.w	r12,r7[-4]
800083b4:	f0 1f 00 08 	mcall	800083d4 <sysclk_enable_pbb_module+0x54>

	/* Enable the module */
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_PBB, index);
800083b8:	ee fb ff f8 	ld.w	r11,r7[-8]
800083bc:	30 3c       	mov	r12,3
800083be:	f0 1f 00 07 	mcall	800083d8 <sysclk_enable_pbb_module+0x58>
}
800083c2:	2f ed       	sub	sp,-8
800083c4:	e3 cd 80 80 	ldm	sp++,r7,pc
800083c8:	80 00       	ld.sh	r0,r0[0x0]
800083ca:	7c 58       	ld.w	r8,lr[0x14]
800083cc:	00 00       	add	r0,r0
800083ce:	07 ca       	ld.ub	r10,r3[0x4]
800083d0:	80 00       	ld.sh	r0,r0[0x0]
800083d2:	82 18       	ld.sh	r8,r1[0x2]
800083d4:	80 00       	ld.sh	r0,r0[0x0]
800083d6:	7c 98       	ld.w	r8,lr[0x24]
800083d8:	80 00       	ld.sh	r0,r0[0x0]
800083da:	83 0c       	st.w	r1[0x0],r12

800083dc <sysclk_enable_usb>:
 * \pre The USB generic clock must be configured to 48MHz.
 * CONFIG_USBCLK_SOURCE and CONFIG_USBCLK_DIV must be defined with proper
 * configuration. The selected clock source must also be configured.
 */
void sysclk_enable_usb(void)
{
800083dc:	eb cd 40 80 	pushm	r7,lr
800083e0:	1a 97       	mov	r7,sp
	sysclk_enable_pbb_module(SYSCLK_USBB_REGS);
800083e2:	30 1c       	mov	r12,1
800083e4:	f0 1f 00 06 	mcall	800083fc <sysclk_enable_usb+0x20>
	sysclk_enable_hsb_module(SYSCLK_USBB_DATA);
800083e8:	30 3c       	mov	r12,3
800083ea:	f0 1f 00 06 	mcall	80008400 <sysclk_enable_usb+0x24>
	genclk_enable_config(AVR32_PM_GCLK_USBB, CONFIG_USBCLK_SOURCE, CONFIG_USBCLK_DIV);
800083ee:	30 1a       	mov	r10,1
800083f0:	30 2b       	mov	r11,2
800083f2:	30 4c       	mov	r12,4
800083f4:	f0 1f 00 04 	mcall	80008404 <sysclk_enable_usb+0x28>
}
800083f8:	e3 cd 80 80 	ldm	sp++,r7,pc
800083fc:	80 00       	ld.sh	r0,r0[0x0]
800083fe:	83 80       	st.w	r1[0x20],r0
80008400:	80 00       	ld.sh	r0,r0[0x0]
80008402:	82 18       	ld.sh	r8,r1[0x2]
80008404:	80 00       	ld.sh	r0,r0[0x0]
80008406:	81 74       	st.w	r0[0x1c],r4

80008408 <sysclk_init>:
}
#endif // CONFIG_USBCLK_SOURCE


void sysclk_init(void)
{
80008408:	eb cd 40 80 	pushm	r7,lr
8000840c:	1a 97       	mov	r7,sp
	/* Set up system clock dividers if different from defaults */
	if ((CONFIG_SYSCLK_CPU_DIV > 0) || (CONFIG_SYSCLK_PBA_DIV > 0) ||
			(CONFIG_SYSCLK_PBB_DIV > 0)) {
		sysclk_set_prescalers(CONFIG_SYSCLK_CPU_DIV,
8000840e:	30 0a       	mov	r10,0
80008410:	30 2b       	mov	r11,2
80008412:	30 0c       	mov	r12,0
80008414:	f0 1f 00 08 	mcall	80008434 <sysclk_init+0x2c>
		break;
#endif

#ifdef CONFIG_PLL0_SOURCE
	case SYSCLK_SRC_PLL0: {
		pll_enable_config_defaults(0);
80008418:	30 0c       	mov	r12,0
8000841a:	f0 1f 00 08 	mcall	80008438 <sysclk_init+0x30>
		// Set a flash wait state depending on the new cpu frequency.
		flash_set_bus_freq(sysclk_get_cpu_hz());
8000841e:	f0 1f 00 08 	mcall	8000843c <sysclk_init+0x34>
80008422:	18 98       	mov	r8,r12
80008424:	10 9c       	mov	r12,r8
80008426:	f0 1f 00 07 	mcall	80008440 <sysclk_init+0x38>
		sysclk_set_source(SYSCLK_SRC_PLL0);
8000842a:	30 2c       	mov	r12,2
8000842c:	f0 1f 00 06 	mcall	80008444 <sysclk_init+0x3c>

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = true;
#endif
}
80008430:	e3 cd 80 80 	ldm	sp++,r7,pc
80008434:	80 00       	ld.sh	r0,r0[0x0]
80008436:	82 38       	ld.sh	r8,r1[0x6]
80008438:	80 00       	ld.sh	r0,r0[0x0]
8000843a:	7f cc       	ld.w	r12,pc[0x70]
8000843c:	80 00       	ld.sh	r0,r0[0x0]
8000843e:	82 00       	ld.sh	r0,r1[0x0]
80008440:	80 00       	ld.sh	r0,r0[0x0]
80008442:	3e b4       	mov	r4,-21
80008444:	80 00       	ld.sh	r0,r0[0x0]
80008446:	82 b8       	ld.uh	r8,r1[0x6]

80008448 <getBaudDiv>:
/** The SPI mutex. */
xSemaphoreHandle xSPIMutex;
#endif

int16_t getBaudDiv(const uint32_t baudrate, uint32_t pb_hz)
{
80008448:	eb cd 40 80 	pushm	r7,lr
8000844c:	1a 97       	mov	r7,sp
8000844e:	20 3d       	sub	sp,12
80008450:	ef 4c ff f8 	st.w	r7[-8],r12
80008454:	ef 4b ff f4 	st.w	r7[-12],r11
	uint32_t baudDiv = div_ceil(pb_hz, baudrate);
80008458:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000845c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008460:	f2 08 00 08 	add	r8,r9,r8
80008464:	20 18       	sub	r8,1
80008466:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000846a:	f0 09 0d 08 	divu	r8,r8,r9
8000846e:	ef 48 ff fc 	st.w	r7[-4],r8

	if (baudDiv <= 0 || baudDiv > 255) {
80008472:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008476:	58 08       	cp.w	r8,0
80008478:	c0 70       	breq	80008486 <getBaudDiv+0x3e>
8000847a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000847e:	e0 48 00 ff 	cp.w	r8,255
80008482:	e0 88 00 04 	brls	8000848a <getBaudDiv+0x42>
		return -1;
80008486:	3f f8       	mov	r8,-1
80008488:	c0 48       	rjmp	80008490 <getBaudDiv+0x48>
	}

	return baudDiv;
8000848a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000848e:	5c 88       	casts.h	r8
}
80008490:	10 9c       	mov	r12,r8
80008492:	2f dd       	sub	sp,-12
80008494:	e3 cd 80 80 	ldm	sp++,r7,pc

80008498 <spi_initMaster>:
	return SPI_OK;
}

spi_status_t spi_initMaster(volatile avr32_spi_t *spi,
		const spi_options_t *options)
{
80008498:	eb cd 40 80 	pushm	r7,lr
8000849c:	1a 97       	mov	r7,sp
8000849e:	20 3d       	sub	sp,12
800084a0:	ef 4c ff f8 	st.w	r7[-8],r12
800084a4:	ef 4b ff f4 	st.w	r7[-12],r11
	u_avr32_spi_mr_t u_avr32_spi_mr;

	if (options->modfdis > 1) {
800084a8:	ee f8 ff f4 	ld.w	r8,r7[-12]
800084ac:	f1 39 00 0d 	ld.ub	r9,r8[13]
800084b0:	30 18       	mov	r8,1
800084b2:	f0 09 18 00 	cp.b	r9,r8
800084b6:	e0 88 00 04 	brls	800084be <spi_initMaster+0x26>
		return SPI_ERROR_ARGUMENT;
800084ba:	30 28       	mov	r8,2
800084bc:	c3 48       	rjmp	80008524 <spi_initMaster+0x8c>
	}

	/* Reset. */
	spi->cr = AVR32_SPI_CR_SWRST_MASK;
800084be:	ee f8 ff f8 	ld.w	r8,r7[-8]
800084c2:	e0 69 00 80 	mov	r9,128
800084c6:	91 09       	st.w	r8[0x0],r9

	/* Master Mode. */
	u_avr32_spi_mr.mr = spi->mr;
800084c8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800084cc:	70 18       	ld.w	r8,r8[0x4]
800084ce:	ef 48 ff fc 	st.w	r7[-4],r8
	u_avr32_spi_mr.MR.mstr = 1;
800084d2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800084d6:	30 19       	mov	r9,1
800084d8:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
800084dc:	ef 48 ff fc 	st.w	r7[-4],r8
	u_avr32_spi_mr.MR.modfdis = options->modfdis;
800084e0:	ee f8 ff f4 	ld.w	r8,r7[-12]
800084e4:	f1 38 00 0d 	ld.ub	r8,r8[13]
800084e8:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800084ec:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800084f0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800084f4:	f1 d9 d0 81 	bfins	r8,r9,0x4,0x1
800084f8:	ef 48 ff fc 	st.w	r7[-4],r8
	u_avr32_spi_mr.MR.llb = 0;
800084fc:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008500:	30 09       	mov	r9,0
80008502:	f1 d9 d0 e1 	bfins	r8,r9,0x7,0x1
80008506:	ef 48 ff fc 	st.w	r7[-4],r8
	u_avr32_spi_mr.MR.pcs = (1 << AVR32_SPI_MR_PCS_SIZE) - 1;
8000850a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000850e:	30 f9       	mov	r9,15
80008510:	f1 d9 d2 04 	bfins	r8,r9,0x10,0x4
80008514:	ef 48 ff fc 	st.w	r7[-4],r8
	spi->mr = u_avr32_spi_mr.mr;
80008518:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000851c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008520:	91 19       	st.w	r8[0x4],r9

	return SPI_OK;
80008522:	30 08       	mov	r8,0
}
80008524:	10 9c       	mov	r12,r8
80008526:	2f dd       	sub	sp,-12
80008528:	e3 cd 80 80 	ldm	sp++,r7,pc

8000852c <spi_selectionMode>:

spi_status_t spi_selectionMode(volatile avr32_spi_t *spi,
		uint8_t variable_ps,
		uint8_t pcs_decode,
		uint8_t delay)
{
8000852c:	eb cd 40 80 	pushm	r7,lr
80008530:	1a 97       	mov	r7,sp
80008532:	20 5d       	sub	sp,20
80008534:	ef 4c ff f8 	st.w	r7[-8],r12
80008538:	12 98       	mov	r8,r9
8000853a:	16 99       	mov	r9,r11
8000853c:	ef 69 ff f4 	st.b	r7[-12],r9
80008540:	14 99       	mov	r9,r10
80008542:	ef 69 ff f0 	st.b	r7[-16],r9
80008546:	ef 68 ff ec 	st.b	r7[-20],r8
	u_avr32_spi_mr_t u_avr32_spi_mr;

	if (variable_ps > 1 ||
8000854a:	ef 39 ff f4 	ld.ub	r9,r7[-12]
8000854e:	30 18       	mov	r8,1
80008550:	f0 09 18 00 	cp.b	r9,r8
80008554:	e0 8b 00 09 	brhi	80008566 <spi_selectionMode+0x3a>
80008558:	ef 39 ff f0 	ld.ub	r9,r7[-16]
8000855c:	30 18       	mov	r8,1
8000855e:	f0 09 18 00 	cp.b	r9,r8
80008562:	e0 88 00 04 	brls	8000856a <spi_selectionMode+0x3e>
			pcs_decode > 1) {
		return SPI_ERROR_ARGUMENT;
80008566:	30 28       	mov	r8,2
80008568:	c2 88       	rjmp	800085b8 <spi_selectionMode+0x8c>
	}

	u_avr32_spi_mr.mr = spi->mr;
8000856a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000856e:	70 18       	ld.w	r8,r8[0x4]
80008570:	ef 48 ff fc 	st.w	r7[-4],r8
	u_avr32_spi_mr.MR.ps = variable_ps;
80008574:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80008578:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000857c:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80008580:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008584:	f1 d9 d0 21 	bfins	r8,r9,0x1,0x1
80008588:	ef 48 ff fc 	st.w	r7[-4],r8
	u_avr32_spi_mr.MR.pcsdec = pcs_decode;
8000858c:	ef 38 ff f0 	ld.ub	r8,r7[-16]
80008590:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80008594:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80008598:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000859c:	f1 d9 d0 41 	bfins	r8,r9,0x2,0x1
800085a0:	ef 48 ff fc 	st.w	r7[-4],r8
	u_avr32_spi_mr.MR.dlybcs = delay;
800085a4:	ef 38 ff ec 	ld.ub	r8,r7[-20]
800085a8:	ef 68 ff fc 	st.b	r7[-4],r8
	spi->mr = u_avr32_spi_mr.mr;
800085ac:	ee f9 ff fc 	ld.w	r9,r7[-4]
800085b0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800085b4:	91 19       	st.w	r8[0x4],r9

	return SPI_OK;
800085b6:	30 08       	mov	r8,0
}
800085b8:	10 9c       	mov	r12,r8
800085ba:	2f bd       	sub	sp,-20
800085bc:	e3 cd 80 80 	ldm	sp++,r7,pc

800085c0 <spi_selectChip>:

spi_status_t spi_selectChip(volatile avr32_spi_t *spi, uint8_t chip)
{
800085c0:	eb cd 40 80 	pushm	r7,lr
800085c4:	1a 97       	mov	r7,sp
800085c6:	20 2d       	sub	sp,8
800085c8:	ef 4c ff fc 	st.w	r7[-4],r12
800085cc:	16 98       	mov	r8,r11
800085ce:	ef 68 ff f8 	st.b	r7[-8],r8
	while (pdFALSE == xSemaphoreTake(xSPIMutex, 20)) {
	}
#endif

	/* Assert all lines; no peripheral is selected. */
	spi->mr |= AVR32_SPI_MR_PCS_MASK;
800085d2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800085d6:	70 18       	ld.w	r8,r8[0x4]
800085d8:	10 99       	mov	r9,r8
800085da:	ea 19 00 0f 	orh	r9,0xf
800085de:	ee f8 ff fc 	ld.w	r8,r7[-4]
800085e2:	91 19       	st.w	r8[0x4],r9

	if (spi->mr & AVR32_SPI_MR_PCSDEC_MASK) {
800085e4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800085e8:	70 18       	ld.w	r8,r8[0x4]
800085ea:	e2 18 00 04 	andl	r8,0x4,COH
800085ee:	c1 90       	breq	80008620 <spi_selectChip+0x60>
		/* The signal is decoded; allow up to 15 chips. */
		if (chip > 14) {
800085f0:	ef 39 ff f8 	ld.ub	r9,r7[-8]
800085f4:	30 e8       	mov	r8,14
800085f6:	f0 09 18 00 	cp.b	r9,r8
800085fa:	e0 88 00 04 	brls	80008602 <spi_selectChip+0x42>
			return SPI_ERROR_ARGUMENT;
800085fe:	30 28       	mov	r8,2
80008600:	c2 88       	rjmp	80008650 <spi_selectChip+0x90>
		}

		spi->mr &= ~AVR32_SPI_MR_PCS_MASK |
80008602:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008606:	70 19       	ld.w	r9,r8[0x4]
				(chip << AVR32_SPI_MR_PCS_OFFSET);
80008608:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000860c:	b1 68       	lsl	r8,0x10
		/* The signal is decoded; allow up to 15 chips. */
		if (chip > 14) {
			return SPI_ERROR_ARGUMENT;
		}

		spi->mr &= ~AVR32_SPI_MR_PCS_MASK |
8000860e:	ea 18 ff f0 	orh	r8,0xfff0
80008612:	e8 18 ff ff 	orl	r8,0xffff
80008616:	10 69       	and	r9,r8
80008618:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000861c:	91 19       	st.w	r8[0x4],r9
8000861e:	c1 88       	rjmp	8000864e <spi_selectChip+0x8e>
				(chip << AVR32_SPI_MR_PCS_OFFSET);
	} else {
		if (chip > 3) {
80008620:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80008624:	30 38       	mov	r8,3
80008626:	f0 09 18 00 	cp.b	r9,r8
8000862a:	e0 88 00 04 	brls	80008632 <spi_selectChip+0x72>
			return SPI_ERROR_ARGUMENT;
8000862e:	30 28       	mov	r8,2
80008630:	c1 08       	rjmp	80008650 <spi_selectChip+0x90>
		}

		spi->mr &= ~(1 << (AVR32_SPI_MR_PCS_OFFSET + chip));
80008632:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008636:	70 19       	ld.w	r9,r8[0x4]
80008638:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000863c:	2f 08       	sub	r8,-16
8000863e:	30 1a       	mov	r10,1
80008640:	f4 08 09 48 	lsl	r8,r10,r8
80008644:	5c d8       	com	r8
80008646:	10 69       	and	r9,r8
80008648:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000864c:	91 19       	st.w	r8[0x4],r9
	}

	return SPI_OK;
8000864e:	30 08       	mov	r8,0
}
80008650:	10 9c       	mov	r12,r8
80008652:	2f ed       	sub	sp,-8
80008654:	e3 cd 80 80 	ldm	sp++,r7,pc

80008658 <spi_unselectChip>:

spi_status_t spi_unselectChip(volatile avr32_spi_t *spi, uint8_t chip)
{
80008658:	eb cd 40 80 	pushm	r7,lr
8000865c:	1a 97       	mov	r7,sp
8000865e:	20 3d       	sub	sp,12
80008660:	ef 4c ff f8 	st.w	r7[-8],r12
80008664:	16 98       	mov	r8,r11
80008666:	ef 68 ff f4 	st.b	r7[-12],r8
	uint32_t timeout = SPI_TIMEOUT;
8000866a:	e0 68 3a 98 	mov	r8,15000
8000866e:	ef 48 ff fc 	st.w	r7[-4],r8

	while (!(spi->sr & AVR32_SPI_SR_TXEMPTY_MASK)) {
80008672:	c0 f8       	rjmp	80008690 <spi_unselectChip+0x38>
		if (!timeout--) {
80008674:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008678:	58 08       	cp.w	r8,0
8000867a:	5f 08       	sreq	r8
8000867c:	5c 58       	castu.b	r8
8000867e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80008682:	20 19       	sub	r9,1
80008684:	ef 49 ff fc 	st.w	r7[-4],r9
80008688:	58 08       	cp.w	r8,0
8000868a:	c0 30       	breq	80008690 <spi_unselectChip+0x38>
			return SPI_ERROR_TIMEOUT;
8000868c:	30 18       	mov	r8,1
8000868e:	c1 68       	rjmp	800086ba <spi_unselectChip+0x62>

spi_status_t spi_unselectChip(volatile avr32_spi_t *spi, uint8_t chip)
{
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TXEMPTY_MASK)) {
80008690:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008694:	70 48       	ld.w	r8,r8[0x10]
80008696:	e2 18 02 00 	andl	r8,0x200,COH
8000869a:	ce d0       	breq	80008674 <spi_unselectChip+0x1c>
			return SPI_ERROR_TIMEOUT;
		}
	}

	/* Assert all lines; no peripheral is selected. */
	spi->mr |= AVR32_SPI_MR_PCS_MASK;
8000869c:	ee f8 ff f8 	ld.w	r8,r7[-8]
800086a0:	70 18       	ld.w	r8,r8[0x4]
800086a2:	10 99       	mov	r9,r8
800086a4:	ea 19 00 0f 	orh	r9,0xf
800086a8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800086ac:	91 19       	st.w	r8[0x4],r9

	/* Last transfer, so de-assert the current NPCS if CSAAT is set. */
	spi->cr = AVR32_SPI_CR_LASTXFER_MASK;
800086ae:	ee f8 ff f8 	ld.w	r8,r7[-8]
800086b2:	fc 19 01 00 	movh	r9,0x100
800086b6:	91 09       	st.w	r8[0x0],r9

#ifdef FREERTOS_USED
	xSemaphoreGive(xSPIMutex);
#endif

	return SPI_OK;
800086b8:	30 08       	mov	r8,0
}
800086ba:	10 9c       	mov	r12,r8
800086bc:	2f dd       	sub	sp,-12
800086be:	e3 cd 80 80 	ldm	sp++,r7,pc
800086c2:	d7 03       	nop

800086c4 <spi_setupChipReg>:

spi_status_t spi_setupChipReg(volatile avr32_spi_t *spi,
		const spi_options_t *options,
		uint32_t pb_hz)
{
800086c4:	eb cd 40 80 	pushm	r7,lr
800086c8:	1a 97       	mov	r7,sp
800086ca:	20 5d       	sub	sp,20
800086cc:	ef 4c ff f4 	st.w	r7[-12],r12
800086d0:	ef 4b ff f0 	st.w	r7[-16],r11
800086d4:	ef 4a ff ec 	st.w	r7[-20],r10
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
800086d8:	ee f8 ff f0 	ld.w	r8,r7[-16]
800086dc:	f1 39 00 0c 	ld.ub	r9,r8[12]
800086e0:	30 38       	mov	r8,3
800086e2:	f0 09 18 00 	cp.b	r9,r8
800086e6:	e0 8b 00 1d 	brhi	80008720 <spi_setupChipReg+0x5c>
			options->stay_act > 1 ||
800086ea:	ee f8 ff f0 	ld.w	r8,r7[-16]
800086ee:	f1 39 00 0b 	ld.ub	r9,r8[11]
		const spi_options_t *options,
		uint32_t pb_hz)
{
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
800086f2:	30 18       	mov	r8,1
800086f4:	f0 09 18 00 	cp.b	r9,r8
800086f8:	e0 8b 00 14 	brhi	80008720 <spi_setupChipReg+0x5c>
			options->stay_act > 1 ||
			options->bits < 8 || options->bits > 16) {
800086fc:	ee f8 ff f0 	ld.w	r8,r7[-16]
80008700:	f1 39 00 08 	ld.ub	r9,r8[8]
		const spi_options_t *options,
		uint32_t pb_hz)
{
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
80008704:	30 78       	mov	r8,7
80008706:	f0 09 18 00 	cp.b	r9,r8
8000870a:	e0 88 00 0b 	brls	80008720 <spi_setupChipReg+0x5c>
			options->stay_act > 1 ||
			options->bits < 8 || options->bits > 16) {
8000870e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80008712:	f1 39 00 08 	ld.ub	r9,r8[8]
		const spi_options_t *options,
		uint32_t pb_hz)
{
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
80008716:	31 08       	mov	r8,16
80008718:	f0 09 18 00 	cp.b	r9,r8
8000871c:	e0 88 00 04 	brls	80008724 <spi_setupChipReg+0x60>
			options->stay_act > 1 ||
			options->bits < 8 || options->bits > 16) {
		return SPI_ERROR_ARGUMENT;
80008720:	30 28       	mov	r8,2
80008722:	c8 d8       	rjmp	8000883c <spi_setupChipReg+0x178>
	}

	int baudDiv = getBaudDiv(options->baudrate, pb_hz);
80008724:	ee f8 ff f0 	ld.w	r8,r7[-16]
80008728:	70 18       	ld.w	r8,r8[0x4]
8000872a:	ee fb ff ec 	ld.w	r11,r7[-20]
8000872e:	10 9c       	mov	r12,r8
80008730:	f0 1f 00 45 	mcall	80008844 <spi_setupChipReg+0x180>
80008734:	18 98       	mov	r8,r12
80008736:	ef 48 ff fc 	st.w	r7[-4],r8

	if (baudDiv < 0) {
8000873a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000873e:	58 08       	cp.w	r8,0
80008740:	c0 34       	brge	80008746 <spi_setupChipReg+0x82>
		return SPI_ERROR_ARGUMENT;
80008742:	30 28       	mov	r8,2
80008744:	c7 c8       	rjmp	8000883c <spi_setupChipReg+0x178>
	}

	/* Will use CSR0 offsets; these are the same for CSR0 to CSR3. */
	u_avr32_spi_csr.csr = 0;
80008746:	30 08       	mov	r8,0
80008748:	ef 48 ff f8 	st.w	r7[-8],r8
	u_avr32_spi_csr.CSR.cpol   = options->spi_mode >> 1;
8000874c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80008750:	f1 38 00 0c 	ld.ub	r8,r8[12]
80008754:	a1 98       	lsr	r8,0x1
80008756:	5c 58       	castu.b	r8
80008758:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000875c:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80008760:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008764:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
80008768:	ef 48 ff f8 	st.w	r7[-8],r8
	u_avr32_spi_csr.CSR.ncpha  = (options->spi_mode & 0x1) ^ 0x1;
8000876c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80008770:	f1 38 00 0c 	ld.ub	r8,r8[12]
80008774:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80008778:	5f 08       	sreq	r8
8000877a:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8000877e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008782:	f1 d9 d0 21 	bfins	r8,r9,0x1,0x1
80008786:	ef 48 ff f8 	st.w	r7[-8],r8
	u_avr32_spi_csr.CSR.csaat  = options->stay_act;
8000878a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000878e:	f1 38 00 0b 	ld.ub	r8,r8[11]
80008792:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80008796:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8000879a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000879e:	f1 d9 d0 61 	bfins	r8,r9,0x3,0x1
800087a2:	ef 48 ff f8 	st.w	r7[-8],r8
	u_avr32_spi_csr.CSR.bits   = options->bits - 8;
800087a6:	ee f8 ff f0 	ld.w	r8,r7[-16]
800087aa:	f1 38 00 08 	ld.ub	r8,r8[8]
800087ae:	20 88       	sub	r8,8
800087b0:	5c 58       	castu.b	r8
800087b2:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
800087b6:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800087ba:	ee f8 ff f8 	ld.w	r8,r7[-8]
800087be:	f1 d9 d0 84 	bfins	r8,r9,0x4,0x4
800087c2:	ef 48 ff f8 	st.w	r7[-8],r8
	u_avr32_spi_csr.CSR.scbr   = baudDiv;
800087c6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800087ca:	5c 58       	castu.b	r8
800087cc:	ef 68 ff fa 	st.b	r7[-6],r8
	u_avr32_spi_csr.CSR.dlybs  = options->spck_delay;
800087d0:	ee f8 ff f0 	ld.w	r8,r7[-16]
800087d4:	f1 38 00 09 	ld.ub	r8,r8[9]
800087d8:	ef 68 ff f9 	st.b	r7[-7],r8
	u_avr32_spi_csr.CSR.dlybct = options->trans_delay;
800087dc:	ee f8 ff f0 	ld.w	r8,r7[-16]
800087e0:	f1 38 00 0a 	ld.ub	r8,r8[10]
800087e4:	ef 68 ff f8 	st.b	r7[-8],r8

	switch (options->reg) {
800087e8:	ee f8 ff f0 	ld.w	r8,r7[-16]
800087ec:	11 88       	ld.ub	r8,r8[0x0]
800087ee:	58 18       	cp.w	r8,1
800087f0:	c1 10       	breq	80008812 <spi_setupChipReg+0x14e>
800087f2:	e0 89 00 05 	brgt	800087fc <spi_setupChipReg+0x138>
800087f6:	58 08       	cp.w	r8,0
800087f8:	c0 70       	breq	80008806 <spi_setupChipReg+0x142>
800087fa:	c1 e8       	rjmp	80008836 <spi_setupChipReg+0x172>
800087fc:	58 28       	cp.w	r8,2
800087fe:	c1 00       	breq	8000881e <spi_setupChipReg+0x15a>
80008800:	58 38       	cp.w	r8,3
80008802:	c1 40       	breq	8000882a <spi_setupChipReg+0x166>
80008804:	c1 98       	rjmp	80008836 <spi_setupChipReg+0x172>
	case 0:
		spi->csr0 = u_avr32_spi_csr.csr;
80008806:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000880a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000880e:	91 c9       	st.w	r8[0x30],r9
		break;
80008810:	c1 58       	rjmp	8000883a <spi_setupChipReg+0x176>

	case 1:
		spi->csr1 = u_avr32_spi_csr.csr;
80008812:	ee f9 ff f8 	ld.w	r9,r7[-8]
80008816:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000881a:	91 d9       	st.w	r8[0x34],r9
		break;
8000881c:	c0 f8       	rjmp	8000883a <spi_setupChipReg+0x176>

	case 2:
		spi->csr2 = u_avr32_spi_csr.csr;
8000881e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80008822:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008826:	91 e9       	st.w	r8[0x38],r9
		break;
80008828:	c0 98       	rjmp	8000883a <spi_setupChipReg+0x176>

	case 3:
		spi->csr3 = u_avr32_spi_csr.csr;
8000882a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000882e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008832:	91 f9       	st.w	r8[0x3c],r9
		break;
80008834:	c0 38       	rjmp	8000883a <spi_setupChipReg+0x176>

	default:
		return SPI_ERROR_ARGUMENT;
80008836:	30 28       	mov	r8,2
80008838:	c0 28       	rjmp	8000883c <spi_setupChipReg+0x178>
			}
		}
	}
#endif

	return SPI_OK;
8000883a:	30 08       	mov	r8,0
}
8000883c:	10 9c       	mov	r12,r8
8000883e:	2f bd       	sub	sp,-20
80008840:	e3 cd 80 80 	ldm	sp++,r7,pc
80008844:	80 00       	ld.sh	r0,r0[0x0]
80008846:	84 48       	ld.sh	r8,r2[0x8]

80008848 <spi_enable>:

void spi_enable(volatile avr32_spi_t *spi)
{
80008848:	eb cd 40 80 	pushm	r7,lr
8000884c:	1a 97       	mov	r7,sp
8000884e:	20 1d       	sub	sp,4
80008850:	ef 4c ff fc 	st.w	r7[-4],r12
	spi->cr = AVR32_SPI_CR_SPIEN_MASK;
80008854:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008858:	30 19       	mov	r9,1
8000885a:	91 09       	st.w	r8[0x0],r9
}
8000885c:	2f fd       	sub	sp,-4
8000885e:	e3 cd 80 80 	ldm	sp++,r7,pc

80008862 <spi_write>:
{
	return ((spi->sr & AVR32_SPI_SR_TDRE_MASK) != 0);
}

spi_status_t spi_write(volatile avr32_spi_t *spi, uint16_t data)
{
80008862:	eb cd 40 80 	pushm	r7,lr
80008866:	1a 97       	mov	r7,sp
80008868:	20 3d       	sub	sp,12
8000886a:	ef 4c ff f8 	st.w	r7[-8],r12
8000886e:	16 98       	mov	r8,r11
80008870:	ef 58 ff f4 	st.h	r7[-12],r8
	uint32_t timeout = SPI_TIMEOUT;
80008874:	e0 68 3a 98 	mov	r8,15000
80008878:	ef 48 ff fc 	st.w	r7[-4],r8

	while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK)) {
8000887c:	c0 f8       	rjmp	8000889a <spi_write+0x38>
		if (!timeout--) {
8000887e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008882:	58 08       	cp.w	r8,0
80008884:	5f 08       	sreq	r8
80008886:	5c 58       	castu.b	r8
80008888:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000888c:	20 19       	sub	r9,1
8000888e:	ef 49 ff fc 	st.w	r7[-4],r9
80008892:	58 08       	cp.w	r8,0
80008894:	c0 30       	breq	8000889a <spi_write+0x38>
			return SPI_ERROR_TIMEOUT;
80008896:	30 18       	mov	r8,1
80008898:	c0 d8       	rjmp	800088b2 <spi_write+0x50>

spi_status_t spi_write(volatile avr32_spi_t *spi, uint16_t data)
{
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK)) {
8000889a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000889e:	70 48       	ld.w	r8,r8[0x10]
800088a0:	e2 18 00 02 	andl	r8,0x2,COH
800088a4:	ce d0       	breq	8000887e <spi_write+0x1c>
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
		}
	}

	spi->tdr = data << AVR32_SPI_TDR_TD_OFFSET;
800088a6:	ef 19 ff f4 	ld.uh	r9,r7[-12]
800088aa:	ee f8 ff f8 	ld.w	r8,r7[-8]
800088ae:	91 39       	st.w	r8[0xc],r9

	return SPI_OK;
800088b0:	30 08       	mov	r8,0
}
800088b2:	10 9c       	mov	r12,r8
800088b4:	2f dd       	sub	sp,-12
800088b6:	e3 cd 80 80 	ldm	sp++,r7,pc

800088ba <spi_read>:
{
	return ((spi->sr & AVR32_SPI_SR_RDRF_MASK) != 0);
}

spi_status_t spi_read(volatile avr32_spi_t *spi, uint16_t *data)
{
800088ba:	eb cd 40 80 	pushm	r7,lr
800088be:	1a 97       	mov	r7,sp
800088c0:	20 3d       	sub	sp,12
800088c2:	ef 4c ff f8 	st.w	r7[-8],r12
800088c6:	ef 4b ff f4 	st.w	r7[-12],r11
	unsigned int timeout = SPI_TIMEOUT;
800088ca:	e0 68 3a 98 	mov	r8,15000
800088ce:	ef 48 ff fc 	st.w	r7[-4],r8

	while ((spi->sr &
800088d2:	c0 f8       	rjmp	800088f0 <spi_read+0x36>
			(AVR32_SPI_SR_RDRF_MASK | AVR32_SPI_SR_TXEMPTY_MASK)) !=
			(AVR32_SPI_SR_RDRF_MASK | AVR32_SPI_SR_TXEMPTY_MASK)) {
		if (!timeout--) {
800088d4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800088d8:	58 08       	cp.w	r8,0
800088da:	5f 08       	sreq	r8
800088dc:	5c 58       	castu.b	r8
800088de:	ee f9 ff fc 	ld.w	r9,r7[-4]
800088e2:	20 19       	sub	r9,1
800088e4:	ef 49 ff fc 	st.w	r7[-4],r9
800088e8:	58 08       	cp.w	r8,0
800088ea:	c0 30       	breq	800088f0 <spi_read+0x36>
			return SPI_ERROR_TIMEOUT;
800088ec:	30 18       	mov	r8,1
800088ee:	c1 18       	rjmp	80008910 <spi_read+0x56>

spi_status_t spi_read(volatile avr32_spi_t *spi, uint16_t *data)
{
	unsigned int timeout = SPI_TIMEOUT;

	while ((spi->sr &
800088f0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800088f4:	70 48       	ld.w	r8,r8[0x10]
800088f6:	e2 18 02 01 	andl	r8,0x201,COH
800088fa:	e0 48 02 01 	cp.w	r8,513
800088fe:	ce b1       	brne	800088d4 <spi_read+0x1a>
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
		}
	}

	*data = spi->rdr >> AVR32_SPI_RDR_RD_OFFSET;
80008900:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008904:	70 28       	ld.w	r8,r8[0x8]
80008906:	5c 88       	casts.h	r8
80008908:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000890c:	b2 08       	st.h	r9[0x0],r8

	return SPI_OK;
8000890e:	30 08       	mov	r8,0
}
80008910:	10 9c       	mov	r12,r8
80008912:	2f dd       	sub	sp,-12
80008914:	e3 cd 80 80 	ldm	sp++,r7,pc

80008918 <sd_mmc_spi_mem_init>:

//_____ D E C L A R A T I O N ______________________________________________


void sd_mmc_spi_mem_init(void)
{
80008918:	eb cd 40 80 	pushm	r7,lr
8000891c:	1a 97       	mov	r7,sp
  sd_mmc_spi_internal_init();        // Restart Init of SD/MMC card after previous first init
8000891e:	f0 1f 00 03 	mcall	80008928 <sd_mmc_spi_mem_init+0x10>
}
80008922:	e3 cd 80 80 	ldm	sp++,r7,pc
80008926:	00 00       	add	r0,r0
80008928:	80 00       	ld.sh	r0,r0[0x0]
8000892a:	2f 50       	sub	r0,-11

8000892c <sd_mmc_spi_test_unit_ready>:



Ctrl_status sd_mmc_spi_test_unit_ready(void)
{
8000892c:	eb cd 40 80 	pushm	r7,lr
80008930:	1a 97       	mov	r7,sp
  Sd_mmc_spi_access_signal_on();
  switch (sd_mmc_spi_presence_status)
80008932:	49 b8       	lddpc	r8,8000899c <sd_mmc_spi_test_unit_ready+0x70>
80008934:	11 88       	ld.ub	r8,r8[0x0]
80008936:	58 18       	cp.w	r8,1
80008938:	c1 40       	breq	80008960 <sd_mmc_spi_test_unit_ready+0x34>
8000893a:	58 28       	cp.w	r8,2
8000893c:	c2 30       	breq	80008982 <sd_mmc_spi_test_unit_ready+0x56>
8000893e:	58 08       	cp.w	r8,0
80008940:	c2 61       	brne	8000898c <sd_mmc_spi_test_unit_ready+0x60>
  {
    case SD_MMC_REMOVED:
      sd_mmc_spi_init_done = false;
80008942:	49 89       	lddpc	r9,800089a0 <sd_mmc_spi_test_unit_ready+0x74>
80008944:	30 08       	mov	r8,0
80008946:	b2 88       	st.b	r9[0x0],r8
      if (sd_mmc_spi_mem_check())
80008948:	f0 1f 00 17 	mcall	800089a4 <sd_mmc_spi_test_unit_ready+0x78>
8000894c:	18 98       	mov	r8,r12
8000894e:	58 08       	cp.w	r8,0
80008950:	c0 60       	breq	8000895c <sd_mmc_spi_test_unit_ready+0x30>
      {
        sd_mmc_spi_presence_status = SD_MMC_INSERTED;
80008952:	49 39       	lddpc	r9,8000899c <sd_mmc_spi_test_unit_ready+0x70>
80008954:	30 18       	mov	r8,1
80008956:	b2 88       	st.b	r9[0x0],r8
        Sd_mmc_spi_access_signal_off();
        return CTRL_BUSY;
80008958:	30 38       	mov	r8,3
8000895a:	c1 d8       	rjmp	80008994 <sd_mmc_spi_test_unit_ready+0x68>
      }
      Sd_mmc_spi_access_signal_off();
      return CTRL_NO_PRESENT;
8000895c:	30 28       	mov	r8,2
8000895e:	c1 b8       	rjmp	80008994 <sd_mmc_spi_test_unit_ready+0x68>

    case SD_MMC_INSERTED:
      if (!sd_mmc_spi_mem_check())
80008960:	f0 1f 00 11 	mcall	800089a4 <sd_mmc_spi_test_unit_ready+0x78>
80008964:	18 98       	mov	r8,r12
80008966:	ec 18 00 01 	eorl	r8,0x1
8000896a:	5c 58       	castu.b	r8
8000896c:	c0 90       	breq	8000897e <sd_mmc_spi_test_unit_ready+0x52>
      {
        sd_mmc_spi_presence_status = SD_MMC_REMOVING;
8000896e:	48 c9       	lddpc	r9,8000899c <sd_mmc_spi_test_unit_ready+0x70>
80008970:	30 28       	mov	r8,2
80008972:	b2 88       	st.b	r9[0x0],r8
        sd_mmc_spi_init_done = false;
80008974:	48 b9       	lddpc	r9,800089a0 <sd_mmc_spi_test_unit_ready+0x74>
80008976:	30 08       	mov	r8,0
80008978:	b2 88       	st.b	r9[0x0],r8
        Sd_mmc_spi_access_signal_off();
        return CTRL_BUSY;
8000897a:	30 38       	mov	r8,3
8000897c:	c0 c8       	rjmp	80008994 <sd_mmc_spi_test_unit_ready+0x68>
      }
      Sd_mmc_spi_access_signal_off();
      return CTRL_GOOD;
8000897e:	30 08       	mov	r8,0
80008980:	c0 a8       	rjmp	80008994 <sd_mmc_spi_test_unit_ready+0x68>

    case SD_MMC_REMOVING:
      sd_mmc_spi_presence_status = SD_MMC_REMOVED;
80008982:	48 79       	lddpc	r9,8000899c <sd_mmc_spi_test_unit_ready+0x70>
80008984:	30 08       	mov	r8,0
80008986:	b2 88       	st.b	r9[0x0],r8
      Sd_mmc_spi_access_signal_off();
      return CTRL_NO_PRESENT;
80008988:	30 28       	mov	r8,2
8000898a:	c0 58       	rjmp	80008994 <sd_mmc_spi_test_unit_ready+0x68>

    default:
      sd_mmc_spi_presence_status = SD_MMC_REMOVED;
8000898c:	48 49       	lddpc	r9,8000899c <sd_mmc_spi_test_unit_ready+0x70>
8000898e:	30 08       	mov	r8,0
80008990:	b2 88       	st.b	r9[0x0],r8
      Sd_mmc_spi_access_signal_off();
      return CTRL_BUSY;
80008992:	30 38       	mov	r8,3
    }
    else
      return CTRL_NO_PRESENT;
  }
*/
}
80008994:	10 9c       	mov	r12,r8
80008996:	e3 cd 80 80 	ldm	sp++,r7,pc
8000899a:	00 00       	add	r0,r0
8000899c:	00 00       	add	r0,r0
8000899e:	00 b0       	st.h	r0++,r0
800089a0:	00 00       	add	r0,r0
800089a2:	06 24       	rsub	r4,r3
800089a4:	80 00       	ld.sh	r0,r0[0x0]
800089a6:	3a 38       	mov	r8,-93

800089a8 <sd_mmc_spi_read_capacity>:



Ctrl_status sd_mmc_spi_read_capacity(uint32_t *nb_sector)
{
800089a8:	eb cd 40 80 	pushm	r7,lr
800089ac:	1a 97       	mov	r7,sp
800089ae:	20 1d       	sub	sp,4
800089b0:	ef 4c ff fc 	st.w	r7[-4],r12
//   sd_mmc_spi_check_presence();   // omitted because creates interferences with "sd_mmc_spi_test_unit_ready()" function
   Sd_mmc_spi_access_signal_on();

   if (!sd_mmc_spi_init_done)
800089b4:	48 d8       	lddpc	r8,800089e8 <sd_mmc_spi_read_capacity+0x40>
800089b6:	11 88       	ld.ub	r8,r8[0x0]
800089b8:	ec 18 00 01 	eorl	r8,0x1
800089bc:	5c 58       	castu.b	r8
800089be:	c0 30       	breq	800089c4 <sd_mmc_spi_read_capacity+0x1c>
   {
      sd_mmc_spi_mem_init();
800089c0:	f0 1f 00 0b 	mcall	800089ec <sd_mmc_spi_read_capacity+0x44>
   }

   if (sd_mmc_spi_init_done)
800089c4:	48 98       	lddpc	r8,800089e8 <sd_mmc_spi_read_capacity+0x40>
800089c6:	11 88       	ld.ub	r8,r8[0x0]
800089c8:	58 08       	cp.w	r8,0
800089ca:	c0 a0       	breq	800089de <sd_mmc_spi_read_capacity+0x36>
   {
     *nb_sector = sd_mmc_spi_last_block_address+1;
800089cc:	48 98       	lddpc	r8,800089f0 <sd_mmc_spi_read_capacity+0x48>
800089ce:	70 08       	ld.w	r8,r8[0x0]
800089d0:	f0 c9 ff ff 	sub	r9,r8,-1
800089d4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800089d8:	91 09       	st.w	r8[0x0],r9
     Sd_mmc_spi_access_signal_off();
     return CTRL_GOOD;
800089da:	30 08       	mov	r8,0
800089dc:	c0 28       	rjmp	800089e0 <sd_mmc_spi_read_capacity+0x38>
   }
   else
   {
     Sd_mmc_spi_access_signal_off();
     return CTRL_NO_PRESENT;
800089de:	30 28       	mov	r8,2
   }
}
800089e0:	10 9c       	mov	r12,r8
800089e2:	2f fd       	sub	sp,-4
800089e4:	e3 cd 80 80 	ldm	sp++,r7,pc
800089e8:	00 00       	add	r0,r0
800089ea:	06 24       	rsub	r4,r3
800089ec:	80 00       	ld.sh	r0,r0[0x0]
800089ee:	89 18       	st.w	r4[0x4],r8
800089f0:	00 00       	add	r0,r0
800089f2:	0b 08       	ld.w	r8,r5++

800089f4 <sd_mmc_spi_wr_protect>:
//! which cannot be for a SD_MMC.
//!
//! @return false  -> the memory is not write-protected (always)
//!/
bool  sd_mmc_spi_wr_protect(void)
{
800089f4:	eb cd 40 80 	pushm	r7,lr
800089f8:	1a 97       	mov	r7,sp
   return false;
800089fa:	30 08       	mov	r8,0
}
800089fc:	10 9c       	mov	r12,r8
800089fe:	e3 cd 80 80 	ldm	sp++,r7,pc

80008a02 <sd_mmc_spi_removal>:
//! @brief This function tells if the memory has been removed or not.
//!
//! @return false  -> The memory isn't removed
//!/
bool  sd_mmc_spi_removal(void)
{
80008a02:	eb cd 40 80 	pushm	r7,lr
80008a06:	1a 97       	mov	r7,sp
  return false;
80008a08:	30 08       	mov	r8,0
//  return ((sd_mmc_spi_check_presence()) ? false : true);
}
80008a0a:	10 9c       	mov	r12,r8
80008a0c:	e3 cd 80 80 	ldm	sp++,r7,pc

80008a10 <sd_mmc_spi_mem_2_ram>:
//------------ Standard functions for read/write 1 sector to 1 sector ram buffer -----------------

#if ACCESS_MEM_TO_RAM == true

Ctrl_status sd_mmc_spi_mem_2_ram(uint32_t addr, void *ram)
{
80008a10:	eb cd 40 80 	pushm	r7,lr
80008a14:	1a 97       	mov	r7,sp
80008a16:	20 2d       	sub	sp,8
80008a18:	ef 4c ff fc 	st.w	r7[-4],r12
80008a1c:	ef 4b ff f8 	st.w	r7[-8],r11
   Sd_mmc_spi_access_signal_on();
   sd_mmc_spi_check_presence();
80008a20:	f0 1f 00 1c 	mcall	80008a90 <sd_mmc_spi_mem_2_ram+0x80>

   if (!sd_mmc_spi_init_done)
80008a24:	49 c8       	lddpc	r8,80008a94 <sd_mmc_spi_mem_2_ram+0x84>
80008a26:	11 88       	ld.ub	r8,r8[0x0]
80008a28:	ec 18 00 01 	eorl	r8,0x1
80008a2c:	5c 58       	castu.b	r8
80008a2e:	c0 30       	breq	80008a34 <sd_mmc_spi_mem_2_ram+0x24>
   {
      sd_mmc_spi_mem_init();
80008a30:	f0 1f 00 1a 	mcall	80008a98 <sd_mmc_spi_mem_2_ram+0x88>
   }

   if (!sd_mmc_spi_init_done)
80008a34:	49 88       	lddpc	r8,80008a94 <sd_mmc_spi_mem_2_ram+0x84>
80008a36:	11 88       	ld.ub	r8,r8[0x0]
80008a38:	ec 18 00 01 	eorl	r8,0x1
80008a3c:	5c 58       	castu.b	r8
80008a3e:	c0 30       	breq	80008a44 <sd_mmc_spi_mem_2_ram+0x34>
     return CTRL_NO_PRESENT;
80008a40:	30 28       	mov	r8,2
80008a42:	c2 28       	rjmp	80008a86 <sd_mmc_spi_mem_2_ram+0x76>

   if( !sd_mmc_spi_read_open(addr) )
80008a44:	ee fc ff fc 	ld.w	r12,r7[-4]
80008a48:	f0 1f 00 15 	mcall	80008a9c <sd_mmc_spi_mem_2_ram+0x8c>
80008a4c:	18 98       	mov	r8,r12
80008a4e:	ec 18 00 01 	eorl	r8,0x1
80008a52:	5c 58       	castu.b	r8
80008a54:	c1 31       	brne	80008a7a <sd_mmc_spi_mem_2_ram+0x6a>
     goto sd_mmc_spi_mem_2_ram_fail;

   if( !sd_mmc_spi_read_sector_to_ram(ram))
80008a56:	ee fc ff f8 	ld.w	r12,r7[-8]
80008a5a:	f0 1f 00 12 	mcall	80008aa0 <sd_mmc_spi_mem_2_ram+0x90>
80008a5e:	18 98       	mov	r8,r12
80008a60:	ec 18 00 01 	eorl	r8,0x1
80008a64:	5c 58       	castu.b	r8
80008a66:	c0 c1       	brne	80008a7e <sd_mmc_spi_mem_2_ram+0x6e>
     goto sd_mmc_spi_mem_2_ram_fail;

   if( !sd_mmc_spi_read_close() )
80008a68:	f0 1f 00 0f 	mcall	80008aa4 <sd_mmc_spi_mem_2_ram+0x94>
80008a6c:	18 98       	mov	r8,r12
80008a6e:	ec 18 00 01 	eorl	r8,0x1
80008a72:	5c 58       	castu.b	r8
80008a74:	c0 71       	brne	80008a82 <sd_mmc_spi_mem_2_ram+0x72>
     goto sd_mmc_spi_mem_2_ram_fail;

   Sd_mmc_spi_access_signal_off();
   return CTRL_GOOD;
80008a76:	30 08       	mov	r8,0
80008a78:	c0 78       	rjmp	80008a86 <sd_mmc_spi_mem_2_ram+0x76>

   if (!sd_mmc_spi_init_done)
     return CTRL_NO_PRESENT;

   if( !sd_mmc_spi_read_open(addr) )
     goto sd_mmc_spi_mem_2_ram_fail;
80008a7a:	d7 03       	nop
80008a7c:	c0 48       	rjmp	80008a84 <sd_mmc_spi_mem_2_ram+0x74>

   if( !sd_mmc_spi_read_sector_to_ram(ram))
     goto sd_mmc_spi_mem_2_ram_fail;
80008a7e:	d7 03       	nop
80008a80:	c0 28       	rjmp	80008a84 <sd_mmc_spi_mem_2_ram+0x74>

   if( !sd_mmc_spi_read_close() )
     goto sd_mmc_spi_mem_2_ram_fail;
80008a82:	d7 03       	nop
   Sd_mmc_spi_access_signal_off();
   return CTRL_GOOD;

sd_mmc_spi_mem_2_ram_fail:
   Sd_mmc_spi_access_signal_off();
   return CTRL_FAIL;
80008a84:	30 18       	mov	r8,1
}
80008a86:	10 9c       	mov	r12,r8
80008a88:	2f ed       	sub	sp,-8
80008a8a:	e3 cd 80 80 	ldm	sp++,r7,pc
80008a8e:	00 00       	add	r0,r0
80008a90:	80 00       	ld.sh	r0,r0[0x0]
80008a92:	39 9c       	mov	r12,-103
80008a94:	00 00       	add	r0,r0
80008a96:	06 24       	rsub	r4,r3
80008a98:	80 00       	ld.sh	r0,r0[0x0]
80008a9a:	89 18       	st.w	r4[0x4],r8
80008a9c:	80 00       	ld.sh	r0,r0[0x0]
80008a9e:	3a 74       	mov	r4,-89
80008aa0:	80 00       	ld.sh	r0,r0[0x0]
80008aa2:	3b 04       	mov	r4,-80
80008aa4:	80 00       	ld.sh	r0,r0[0x0]
80008aa6:	3a a4       	mov	r4,-86

80008aa8 <sd_mmc_spi_ram_2_mem>:
//! @return                Ctrl_status
//!   It is ready      ->    CTRL_GOOD
//!   An error occurs  ->    CTRL_FAIL
//!
Ctrl_status    sd_mmc_spi_ram_2_mem(uint32_t addr, const void *ram)
{
80008aa8:	eb cd 40 80 	pushm	r7,lr
80008aac:	1a 97       	mov	r7,sp
80008aae:	20 2d       	sub	sp,8
80008ab0:	ef 4c ff fc 	st.w	r7[-4],r12
80008ab4:	ef 4b ff f8 	st.w	r7[-8],r11
   Sd_mmc_spi_access_signal_on();
   sd_mmc_spi_check_presence();
80008ab8:	f0 1f 00 14 	mcall	80008b08 <sd_mmc_spi_ram_2_mem+0x60>

   if (!sd_mmc_spi_init_done)
80008abc:	49 48       	lddpc	r8,80008b0c <sd_mmc_spi_ram_2_mem+0x64>
80008abe:	11 88       	ld.ub	r8,r8[0x0]
80008ac0:	ec 18 00 01 	eorl	r8,0x1
80008ac4:	5c 58       	castu.b	r8
80008ac6:	c0 30       	breq	80008acc <sd_mmc_spi_ram_2_mem+0x24>
   {
      sd_mmc_spi_mem_init();
80008ac8:	f0 1f 00 12 	mcall	80008b10 <sd_mmc_spi_ram_2_mem+0x68>
   }

   if (sd_mmc_spi_init_done)
80008acc:	49 08       	lddpc	r8,80008b0c <sd_mmc_spi_ram_2_mem+0x64>
80008ace:	11 88       	ld.ub	r8,r8[0x0]
80008ad0:	58 08       	cp.w	r8,0
80008ad2:	c1 60       	breq	80008afe <sd_mmc_spi_ram_2_mem+0x56>
   {
     sd_mmc_spi_write_open(addr);
80008ad4:	ee fc ff fc 	ld.w	r12,r7[-4]
80008ad8:	f0 1f 00 0f 	mcall	80008b14 <sd_mmc_spi_ram_2_mem+0x6c>
     if (!sd_mmc_spi_write_sector_from_ram(ram))
80008adc:	ee fc ff f8 	ld.w	r12,r7[-8]
80008ae0:	f0 1f 00 0e 	mcall	80008b18 <sd_mmc_spi_ram_2_mem+0x70>
80008ae4:	18 98       	mov	r8,r12
80008ae6:	ec 18 00 01 	eorl	r8,0x1
80008aea:	5c 58       	castu.b	r8
80008aec:	c0 50       	breq	80008af6 <sd_mmc_spi_ram_2_mem+0x4e>
     {
       sd_mmc_spi_write_close();
80008aee:	f0 1f 00 0c 	mcall	80008b1c <sd_mmc_spi_ram_2_mem+0x74>
       Sd_mmc_spi_access_signal_off();
       return CTRL_NO_PRESENT;
80008af2:	30 28       	mov	r8,2
80008af4:	c0 68       	rjmp	80008b00 <sd_mmc_spi_ram_2_mem+0x58>
     }
     sd_mmc_spi_write_close();
80008af6:	f0 1f 00 0a 	mcall	80008b1c <sd_mmc_spi_ram_2_mem+0x74>
     Sd_mmc_spi_access_signal_off();
     return CTRL_GOOD;
80008afa:	30 08       	mov	r8,0
80008afc:	c0 28       	rjmp	80008b00 <sd_mmc_spi_ram_2_mem+0x58>
   }
   Sd_mmc_spi_access_signal_off();

   return CTRL_NO_PRESENT;
80008afe:	30 28       	mov	r8,2
}
80008b00:	10 9c       	mov	r12,r8
80008b02:	2f ed       	sub	sp,-8
80008b04:	e3 cd 80 80 	ldm	sp++,r7,pc
80008b08:	80 00       	ld.sh	r0,r0[0x0]
80008b0a:	39 9c       	mov	r12,-103
80008b0c:	00 00       	add	r0,r0
80008b0e:	06 24       	rsub	r4,r3
80008b10:	80 00       	ld.sh	r0,r0[0x0]
80008b12:	89 18       	st.w	r4[0x4],r8
80008b14:	80 00       	ld.sh	r0,r0[0x0]
80008b16:	3a c8       	mov	r8,-84
80008b18:	80 00       	ld.sh	r0,r0[0x0]
80008b1a:	3c b8       	mov	r8,-53
80008b1c:	80 00       	ld.sh	r0,r0[0x0]
80008b1e:	3a f8       	mov	r8,-81

80008b20 <adc_configure>:
 * If not called, ADC channels will have side effects
 *
 * \param *adc Base address of the ADC
 */
void adc_configure(volatile avr32_adc_t *adc)
{
80008b20:	eb cd 40 80 	pushm	r7,lr
80008b24:	1a 97       	mov	r7,sp
80008b26:	20 1d       	sub	sp,4
80008b28:	ef 4c ff fc 	st.w	r7[-4],r12
	adc->mr |= 1 << AVR32_ADC_LOWRES_OFFSET;
#endif

	/* Set Sample/Hold time to max so that the ADC capacitor should be
	 * loaded entirely */
	adc->mr |= 0xF << AVR32_ADC_SHTIM_OFFSET;
80008b2c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008b30:	70 18       	ld.w	r8,r8[0x4]
80008b32:	10 99       	mov	r9,r8
80008b34:	ea 19 0f 00 	orh	r9,0xf00
80008b38:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008b3c:	91 19       	st.w	r8[0x4],r9

	/* Set Startup to max so that the ADC capacitor should be loaded
	 * entirely */
	adc->mr |= 0x1F << AVR32_ADC_STARTUP_OFFSET;
80008b3e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008b42:	70 18       	ld.w	r8,r8[0x4]
80008b44:	10 99       	mov	r9,r8
80008b46:	ea 19 00 1f 	orh	r9,0x1f
80008b4a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008b4e:	91 19       	st.w	r8[0x4],r9
}
80008b50:	2f fd       	sub	sp,-4
80008b52:	e3 cd 80 80 	ldm	sp++,r7,pc

80008b56 <adc_start>:

/** \brief Start analog to digital conversion
 * \param *adc Base address of the ADC
 */
void adc_start(volatile avr32_adc_t *adc)
{
80008b56:	eb cd 40 80 	pushm	r7,lr
80008b5a:	1a 97       	mov	r7,sp
80008b5c:	20 1d       	sub	sp,4
80008b5e:	ef 4c ff fc 	st.w	r7[-4],r12
	Assert( adc != NULL );

	/* start conversion */
	adc->cr = AVR32_ADC_START_MASK;
80008b62:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008b66:	30 29       	mov	r9,2
80008b68:	91 09       	st.w	r8[0x0],r9
}
80008b6a:	2f fd       	sub	sp,-4
80008b6c:	e3 cd 80 80 	ldm	sp++,r7,pc

80008b70 <adc_enable>:
 *
 * \param *adc Base address of the ADC
 * \param  channel   channel to enable (0 to 7)
 */
void adc_enable(volatile avr32_adc_t *adc, uint16_t channel)
{
80008b70:	eb cd 40 80 	pushm	r7,lr
80008b74:	1a 97       	mov	r7,sp
80008b76:	20 2d       	sub	sp,8
80008b78:	ef 4c ff fc 	st.w	r7[-4],r12
80008b7c:	16 98       	mov	r8,r11
80008b7e:	ef 58 ff f8 	st.h	r7[-8],r8
	Assert( adc != NULL );
	Assert( channel <= AVR32_ADC_CHANNELS_MSB ); /* check if channel exist
	                                              **/

	/* enable channel */
	adc->cher = (1 << channel);
80008b82:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80008b86:	30 19       	mov	r9,1
80008b88:	f2 08 09 48 	lsl	r8,r9,r8
80008b8c:	10 99       	mov	r9,r8
80008b8e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008b92:	91 49       	st.w	r8[0x10],r9
}
80008b94:	2f ed       	sub	sp,-8
80008b96:	e3 cd 80 80 	ldm	sp++,r7,pc

80008b9a <adc_check_eoc>:
 * \param  channel   channel to check (0 to 7)
 * \return bool      true if conversion not running
 *                   false if conversion running
 */
bool adc_check_eoc(volatile avr32_adc_t *adc, uint16_t channel)
{
80008b9a:	eb cd 40 80 	pushm	r7,lr
80008b9e:	1a 97       	mov	r7,sp
80008ba0:	20 2d       	sub	sp,8
80008ba2:	ef 4c ff fc 	st.w	r7[-4],r12
80008ba6:	16 98       	mov	r8,r11
80008ba8:	ef 58 ff f8 	st.h	r7[-8],r8
	Assert( adc != NULL );
	Assert( channel <= AVR32_ADC_CHANNELS_MSB ); /* check if channel exist
	                                              **/

	/* get SR register : EOC bit for channel */
	return ((adc->sr & (1 << channel)) ? true : false);
80008bac:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008bb0:	70 79       	ld.w	r9,r8[0x1c]
80008bb2:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80008bb6:	30 1a       	mov	r10,1
80008bb8:	f4 08 09 48 	lsl	r8,r10,r8
80008bbc:	f3 e8 00 08 	and	r8,r9,r8
80008bc0:	5f 18       	srne	r8
80008bc2:	5c 58       	castu.b	r8
}
80008bc4:	10 9c       	mov	r12,r8
80008bc6:	2f ed       	sub	sp,-8
80008bc8:	e3 cd 80 80 	ldm	sp++,r7,pc

80008bcc <adc_get_value>:
 * \param *adc Base address of the ADC
 * \param  channel   channel to handle (0 to 7)
 * \return The value acquired (unsigned long)
 */
uint32_t adc_get_value(volatile avr32_adc_t *adc, uint16_t channel)
{
80008bcc:	eb cd 40 80 	pushm	r7,lr
80008bd0:	1a 97       	mov	r7,sp
80008bd2:	20 2d       	sub	sp,8
80008bd4:	ef 4c ff fc 	st.w	r7[-4],r12
80008bd8:	16 98       	mov	r8,r11
80008bda:	ef 58 ff f8 	st.h	r7[-8],r8
	Assert( adc != NULL );
	Assert( channel <= AVR32_ADC_CHANNELS_MSB );

	/* wait for end of conversion */
	while (adc_check_eoc(adc, channel) != true) {
80008bde:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80008be2:	10 9b       	mov	r11,r8
80008be4:	ee fc ff fc 	ld.w	r12,r7[-4]
80008be8:	f0 1f 00 0b 	mcall	80008c14 <adc_get_value+0x48>
80008bec:	18 98       	mov	r8,r12
80008bee:	ec 18 00 01 	eorl	r8,0x1
80008bf2:	5c 58       	castu.b	r8
80008bf4:	cf 51       	brne	80008bde <adc_get_value+0x12>
	}

	return *((uint32_t *)((&(adc->cdr0)) + channel));
80008bf6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008bfa:	f0 c9 ff d0 	sub	r9,r8,-48
80008bfe:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80008c02:	a3 68       	lsl	r8,0x2
80008c04:	f2 08 00 08 	add	r8,r9,r8
80008c08:	70 08       	ld.w	r8,r8[0x0]
}
80008c0a:	10 9c       	mov	r12,r8
80008c0c:	2f ed       	sub	sp,-8
80008c0e:	e3 cd 80 80 	ldm	sp++,r7,pc
80008c12:	00 00       	add	r0,r0
80008c14:	80 00       	ld.sh	r0,r0[0x0]
80008c16:	8b 9a       	st.w	r5[0x24],r10

80008c18 <fat_check_device>:
//! @verbatim
//! This function updates all navigator data when the device state change.
//! @endverbatim
//!
bool  fat_check_device( void )
{
80008c18:	eb cd 40 80 	pushm	r7,lr
80008c1c:	1a 97       	mov	r7,sp
80008c1e:	20 2d       	sub	sp,8
   uint8_t retry=0;
80008c20:	30 08       	mov	r8,0
80008c22:	ef 68 ff fa 	st.b	r7[-6],r8
   uint8_t i;
#endif
   Ctrl_status status;

   // Possibility to ignore the disk check. Used to take time during multi read/write access
   if( g_b_no_check_disk )
80008c26:	4c 18       	lddpc	r8,80008d28 <fat_check_device+0x110>
80008c28:	11 88       	ld.ub	r8,r8[0x0]
80008c2a:	58 08       	cp.w	r8,0
80008c2c:	c0 30       	breq	80008c32 <fat_check_device+0x1a>
      return true;
80008c2e:	30 18       	mov	r8,1
80008c30:	c7 78       	rjmp	80008d1e <fat_check_device+0x106>

   if( 0xFF == fs_g_nav.u8_lun )
80008c32:	4b f8       	lddpc	r8,80008d2c <fat_check_device+0x114>
80008c34:	11 89       	ld.ub	r9,r8[0x0]
80008c36:	3f f8       	mov	r8,-1
80008c38:	f0 09 18 00 	cp.b	r9,r8
80008c3c:	c0 61       	brne	80008c48 <fat_check_device+0x30>
   {
      fs_g_status = FS_ERR_HW;
80008c3e:	4b d9       	lddpc	r9,80008d30 <fat_check_device+0x118>
80008c40:	30 18       	mov	r8,1
80008c42:	b2 88       	st.b	r9[0x0],r8
      return false;                                // No device selected
80008c44:	30 08       	mov	r8,0
80008c46:	c6 c8       	rjmp	80008d1e <fat_check_device+0x106>
   }

   for( retry=0 ; retry<100 ; retry++ )
80008c48:	30 08       	mov	r8,0
80008c4a:	ef 68 ff fa 	st.b	r7[-6],r8
80008c4e:	c5 e8       	rjmp	80008d0a <fat_check_device+0xf2>
   {
      // Check device
      status = mem_test_unit_ready( fs_g_nav.u8_lun );
80008c50:	4b 78       	lddpc	r8,80008d2c <fat_check_device+0x114>
80008c52:	11 88       	ld.ub	r8,r8[0x0]
80008c54:	10 9c       	mov	r12,r8
80008c56:	f0 1f 00 38 	mcall	80008d34 <fat_check_device+0x11c>
80008c5a:	18 98       	mov	r8,r12
80008c5c:	ef 48 ff fc 	st.w	r7[-4],r8
      if( CTRL_GOOD       == status )
80008c60:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008c64:	58 08       	cp.w	r8,0
80008c66:	c0 31       	brne	80008c6c <fat_check_device+0x54>
         return true;                              // drive ready
80008c68:	30 18       	mov	r8,1
80008c6a:	c5 a8       	rjmp	80008d1e <fat_check_device+0x106>

      //* HERE error or state change
      // Clean all navigator data which use this device
      fs_g_nav_fast.u8_type_fat = FS_TYPE_FAT_UNM; // By default the fat isn't mounted
80008c6c:	4b 39       	lddpc	r9,80008d38 <fat_check_device+0x120>
80008c6e:	30 08       	mov	r8,0
80008c70:	b2 88       	st.b	r9[0x0],r8
      Fat_file_close();                            // By default the file is not open
80008c72:	4b 39       	lddpc	r9,80008d3c <fat_check_device+0x124>
80008c74:	30 08       	mov	r8,0
80008c76:	b2 88       	st.b	r9[0x0],r8
#if (FS_NB_NAVIGATOR > 1)
      for( i=0 ; i!=(FS_NB_NAVIGATOR-1) ; i++ )
80008c78:	30 08       	mov	r8,0
80008c7a:	ef 68 ff fb 	st.b	r7[-5],r8
80008c7e:	c2 08       	rjmp	80008cbe <fat_check_device+0xa6>
      {
         if( fs_g_nav.u8_lun == fs_g_navext[i].u8_lun )
80008c80:	4a b8       	lddpc	r8,80008d2c <fat_check_device+0x114>
80008c82:	11 89       	ld.ub	r9,r8[0x0]
80008c84:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80008c88:	4a ea       	lddpc	r10,80008d40 <fat_check_device+0x128>
80008c8a:	f0 08 10 34 	mul	r8,r8,52
80008c8e:	f4 08 00 08 	add	r8,r10,r8
80008c92:	11 88       	ld.ub	r8,r8[0x0]
80008c94:	f0 09 18 00 	cp.b	r9,r8
80008c98:	c0 e1       	brne	80008cb4 <fat_check_device+0x9c>
         {
            fs_g_navext_fast[i].u8_type_fat     = FS_TYPE_FAT_UNM;   // By default the fat isn't mounted
80008c9a:	ef 3a ff fb 	ld.ub	r10,r7[-5]
80008c9e:	4a a9       	lddpc	r9,80008d44 <fat_check_device+0x12c>
80008ca0:	30 08       	mov	r8,0
80008ca2:	f2 0a 0b 28 	st.b	r9[r10<<0x2],r8
            fs_g_navext_entry[i].u8_open_mode   = 0;                 // By default the file is not open
80008ca6:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80008caa:	4a 89       	lddpc	r9,80008d48 <fat_check_device+0x130>
80008cac:	a5 68       	lsl	r8,0x4
80008cae:	10 09       	add	r9,r8
80008cb0:	30 08       	mov	r8,0
80008cb2:	b2 88       	st.b	r9[0x0],r8
      //* HERE error or state change
      // Clean all navigator data which use this device
      fs_g_nav_fast.u8_type_fat = FS_TYPE_FAT_UNM; // By default the fat isn't mounted
      Fat_file_close();                            // By default the file is not open
#if (FS_NB_NAVIGATOR > 1)
      for( i=0 ; i!=(FS_NB_NAVIGATOR-1) ; i++ )
80008cb4:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80008cb8:	2f f8       	sub	r8,-1
80008cba:	ef 68 ff fb 	st.b	r7[-5],r8
80008cbe:	ef 39 ff fb 	ld.ub	r9,r7[-5]
80008cc2:	30 18       	mov	r8,1
80008cc4:	f0 09 18 00 	cp.b	r9,r8
80008cc8:	cd c1       	brne	80008c80 <fat_check_device+0x68>
            fs_g_navext_entry[i].u8_open_mode   = 0;                 // By default the file is not open
         }
      }
#endif
      // If the internal cache corresponding at device then clean it
      if( fs_g_nav.u8_lun == fs_g_sectorcache.u8_lun )
80008cca:	49 98       	lddpc	r8,80008d2c <fat_check_device+0x114>
80008ccc:	11 89       	ld.ub	r9,r8[0x0]
80008cce:	4a 08       	lddpc	r8,80008d4c <fat_check_device+0x134>
80008cd0:	11 88       	ld.ub	r8,r8[0x0]
80008cd2:	f0 09 18 00 	cp.b	r9,r8
80008cd6:	c0 31       	brne	80008cdc <fat_check_device+0xc4>
      {
         fat_cache_reset();
80008cd8:	f0 1f 00 1e 	mcall	80008d50 <fat_check_device+0x138>
      }
      fat_cache_clusterlist_reset();
80008cdc:	f0 1f 00 1e 	mcall	80008d54 <fat_check_device+0x13c>

      fs_g_status = FS_ERR_HW;                     // By default HW error
80008ce0:	49 49       	lddpc	r9,80008d30 <fat_check_device+0x118>
80008ce2:	30 18       	mov	r8,1
80008ce4:	b2 88       	st.b	r9[0x0],r8
      if( CTRL_BUSY == status )
80008ce6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008cea:	58 38       	cp.w	r8,3
80008cec:	c0 71       	brne	80008cfa <fat_check_device+0xe2>
   {
      fs_g_status = FS_ERR_HW;
      return false;                                // No device selected
   }

   for( retry=0 ; retry<100 ; retry++ )
80008cee:	ef 38 ff fa 	ld.ub	r8,r7[-6]
80008cf2:	2f f8       	sub	r8,-1
80008cf4:	ef 68 ff fa 	st.b	r7[-6],r8
80008cf8:	c0 98       	rjmp	80008d0a <fat_check_device+0xf2>

      fs_g_status = FS_ERR_HW;                     // By default HW error
      if( CTRL_BUSY == status )
         continue;                                 // If device busy then retry

      if( CTRL_NO_PRESENT == status )
80008cfa:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008cfe:	58 28       	cp.w	r8,2
80008d00:	c0 d1       	brne	80008d1a <fat_check_device+0x102>
         fs_g_status = FS_ERR_HW_NO_PRESENT;       // Update error flag
80008d02:	48 c9       	lddpc	r9,80008d30 <fat_check_device+0x118>
80008d04:	31 88       	mov	r8,24
80008d06:	b2 88       	st.b	r9[0x0],r8
      break;                                       // FAIL or NOT PRESENT = fatal error = no retry
80008d08:	c0 a8       	rjmp	80008d1c <fat_check_device+0x104>
   {
      fs_g_status = FS_ERR_HW;
      return false;                                // No device selected
   }

   for( retry=0 ; retry<100 ; retry++ )
80008d0a:	ef 39 ff fa 	ld.ub	r9,r7[-6]
80008d0e:	36 38       	mov	r8,99
80008d10:	f0 09 18 00 	cp.b	r9,r8
80008d14:	fe 98 ff 9e 	brls	80008c50 <fat_check_device+0x38>
80008d18:	c0 28       	rjmp	80008d1c <fat_check_device+0x104>
      if( CTRL_BUSY == status )
         continue;                                 // If device busy then retry

      if( CTRL_NO_PRESENT == status )
         fs_g_status = FS_ERR_HW_NO_PRESENT;       // Update error flag
      break;                                       // FAIL or NOT PRESENT = fatal error = no retry
80008d1a:	d7 03       	nop
   }
   return false;
80008d1c:	30 08       	mov	r8,0
}
80008d1e:	10 9c       	mov	r12,r8
80008d20:	2f ed       	sub	sp,-8
80008d22:	e3 cd 80 80 	ldm	sp++,r7,pc
80008d26:	00 00       	add	r0,r0
80008d28:	00 00       	add	r0,r0
80008d2a:	0b 5a       	ld.sh	r10,--r5
80008d2c:	00 00       	add	r0,r0
80008d2e:	0d 88       	ld.ub	r8,r6[0x0]
80008d30:	00 00       	add	r0,r0
80008d32:	0d d8       	ld.ub	r8,r6[0x5]
80008d34:	80 00       	ld.sh	r0,r0[0x0]
80008d36:	ae 6c       	st.h	r7[0xc],r12
80008d38:	00 00       	add	r0,r0
80008d3a:	0d d4       	ld.ub	r4,r6[0x5]
80008d3c:	00 00       	add	r0,r0
80008d3e:	0b 48       	ld.w	r8,--r5
80008d40:	00 00       	add	r0,r0
80008d42:	0d dc       	ld.ub	r12,r6[0x5]
80008d44:	00 00       	add	r0,r0
80008d46:	0d d0       	ld.ub	r0,r6[0x5]
80008d48:	00 00       	add	r0,r0
80008d4a:	0d c0       	ld.ub	r0,r6[0x4]
80008d4c:	00 00       	add	r0,r0
80008d4e:	0e 10       	sub	r0,r7
80008d50:	80 00       	ld.sh	r0,r0[0x0]
80008d52:	ab 74       	lsl	r4,0xb
80008d54:	80 00       	ld.sh	r0,r0[0x0]
80008d56:	99 f4       	st.w	r12[0x3c],r4

80008d58 <fat_check_mount>:
//!
//! @return    true  partition mounted
//! @return    false otherwise
//!
bool  fat_check_mount( void )
{
80008d58:	eb cd 40 80 	pushm	r7,lr
80008d5c:	1a 97       	mov	r7,sp
   if( !fat_check_device() )
80008d5e:	f0 1f 00 0f 	mcall	80008d98 <fat_check_mount+0x40>
80008d62:	18 98       	mov	r8,r12
80008d64:	ec 18 00 01 	eorl	r8,0x1
80008d68:	5c 58       	castu.b	r8
80008d6a:	c0 30       	breq	80008d70 <fat_check_mount+0x18>
      return false;
80008d6c:	30 08       	mov	r8,0
80008d6e:	c1 28       	rjmp	80008d92 <fat_check_mount+0x3a>
   if (FS_TYPE_FAT_UNM == fs_g_nav_fast.u8_type_fat)
80008d70:	48 b8       	lddpc	r8,80008d9c <fat_check_mount+0x44>
80008d72:	11 88       	ld.ub	r8,r8[0x0]
80008d74:	58 08       	cp.w	r8,0
80008d76:	c0 d1       	brne	80008d90 <fat_check_mount+0x38>
   {
      if( !fat_mount() )
80008d78:	f0 1f 00 0a 	mcall	80008da0 <fat_check_mount+0x48>
80008d7c:	18 98       	mov	r8,r12
80008d7e:	ec 18 00 01 	eorl	r8,0x1
80008d82:	5c 58       	castu.b	r8
80008d84:	c0 60       	breq	80008d90 <fat_check_mount+0x38>
      {
         fs_g_status = FS_ERR_NO_MOUNT;
80008d86:	48 89       	lddpc	r9,80008da4 <fat_check_mount+0x4c>
80008d88:	30 e8       	mov	r8,14
80008d8a:	b2 88       	st.b	r9[0x0],r8
         return false;
80008d8c:	30 08       	mov	r8,0
80008d8e:	c0 28       	rjmp	80008d92 <fat_check_mount+0x3a>
      }
   }
   return true;
80008d90:	30 18       	mov	r8,1
}
80008d92:	10 9c       	mov	r12,r8
80008d94:	e3 cd 80 80 	ldm	sp++,r7,pc
80008d98:	80 00       	ld.sh	r0,r0[0x0]
80008d9a:	8c 18       	ld.sh	r8,r6[0x2]
80008d9c:	00 00       	add	r0,r0
80008d9e:	0d d4       	ld.ub	r4,r6[0x5]
80008da0:	80 00       	ld.sh	r0,r0[0x0]
80008da2:	af fc       	*unknown*
80008da4:	00 00       	add	r0,r0
80008da6:	0d d8       	ld.ub	r8,r6[0x5]

80008da8 <fat_check_noopen>:
//!
//! @return    true  no file opened
//! @return    false otherwise
//!
bool  fat_check_noopen( void )
{
80008da8:	eb cd 40 80 	pushm	r7,lr
80008dac:	1a 97       	mov	r7,sp
   if( !fat_check_device() )
80008dae:	f0 1f 00 0f 	mcall	80008de8 <fat_check_noopen+0x40>
80008db2:	18 98       	mov	r8,r12
80008db4:	ec 18 00 01 	eorl	r8,0x1
80008db8:	5c 58       	castu.b	r8
80008dba:	c0 30       	breq	80008dc0 <fat_check_noopen+0x18>
      return true;
80008dbc:	30 18       	mov	r8,1
80008dbe:	c1 18       	rjmp	80008de0 <fat_check_noopen+0x38>
   if (FS_TYPE_FAT_UNM == fs_g_nav_fast.u8_type_fat)
80008dc0:	48 b8       	lddpc	r8,80008dec <fat_check_noopen+0x44>
80008dc2:	11 88       	ld.ub	r8,r8[0x0]
80008dc4:	58 08       	cp.w	r8,0
80008dc6:	c0 31       	brne	80008dcc <fat_check_noopen+0x24>
      return true;
80008dc8:	30 18       	mov	r8,1
80008dca:	c0 b8       	rjmp	80008de0 <fat_check_noopen+0x38>
   if( Fat_file_is_open() )
80008dcc:	48 98       	lddpc	r8,80008df0 <fat_check_noopen+0x48>
80008dce:	11 88       	ld.ub	r8,r8[0x0]
80008dd0:	58 08       	cp.w	r8,0
80008dd2:	c0 60       	breq	80008dde <fat_check_noopen+0x36>
   {
      fs_g_status = FS_ERR_TOO_FILE_OPEN;  // The navigation have already open a file
80008dd4:	48 89       	lddpc	r9,80008df4 <fat_check_noopen+0x4c>
80008dd6:	30 58       	mov	r8,5
80008dd8:	b2 88       	st.b	r9[0x0],r8
      return false;
80008dda:	30 08       	mov	r8,0
80008ddc:	c0 28       	rjmp	80008de0 <fat_check_noopen+0x38>
   }
   return true;
80008dde:	30 18       	mov	r8,1
}
80008de0:	10 9c       	mov	r12,r8
80008de2:	e3 cd 80 80 	ldm	sp++,r7,pc
80008de6:	00 00       	add	r0,r0
80008de8:	80 00       	ld.sh	r0,r0[0x0]
80008dea:	8c 18       	ld.sh	r8,r6[0x2]
80008dec:	00 00       	add	r0,r0
80008dee:	0d d4       	ld.ub	r4,r6[0x5]
80008df0:	00 00       	add	r0,r0
80008df2:	0b 48       	ld.w	r8,--r5
80008df4:	00 00       	add	r0,r0
80008df6:	0d d8       	ld.ub	r8,r6[0x5]

80008df8 <fat_check_open>:
//!
//! @return    true  a file is opened
//! @return    false otherwise
//!
bool  fat_check_open( void )
{
80008df8:	eb cd 40 80 	pushm	r7,lr
80008dfc:	1a 97       	mov	r7,sp
   if( Fat_file_isnot_open() )
80008dfe:	48 78       	lddpc	r8,80008e18 <fat_check_open+0x20>
80008e00:	11 88       	ld.ub	r8,r8[0x0]
80008e02:	58 08       	cp.w	r8,0
80008e04:	c0 61       	brne	80008e10 <fat_check_open+0x18>
   {
      fs_g_status = FS_ERR_FILE_NO_OPEN;
80008e06:	48 69       	lddpc	r9,80008e1c <fat_check_open+0x24>
80008e08:	31 78       	mov	r8,23
80008e0a:	b2 88       	st.b	r9[0x0],r8
      return false;
80008e0c:	30 08       	mov	r8,0
80008e0e:	c0 28       	rjmp	80008e12 <fat_check_open+0x1a>
   }
   return true;
80008e10:	30 18       	mov	r8,1
}
80008e12:	10 9c       	mov	r12,r8
80008e14:	e3 cd 80 80 	ldm	sp++,r7,pc
80008e18:	00 00       	add	r0,r0
80008e1a:	0b 48       	ld.w	r8,--r5
80008e1c:	00 00       	add	r0,r0
80008e1e:	0d d8       	ld.ub	r8,r6[0x5]

80008e20 <fat_check_select>:
//!
//! @return    true  a file is selected
//! @return    false otherwise
//!
bool  fat_check_select( void )
{
80008e20:	eb cd 40 80 	pushm	r7,lr
80008e24:	1a 97       	mov	r7,sp
   if (FS_NO_SEL == fs_g_nav_fast.u16_entry_pos_sel_file)
80008e26:	48 88       	lddpc	r8,80008e44 <fat_check_select+0x24>
80008e28:	90 19       	ld.sh	r9,r8[0x2]
80008e2a:	3f f8       	mov	r8,-1
80008e2c:	f0 09 19 00 	cp.h	r9,r8
80008e30:	c0 61       	brne	80008e3c <fat_check_select+0x1c>
   {
      fs_g_status = FS_ERR_NO_FILE_SEL;
80008e32:	48 69       	lddpc	r9,80008e48 <fat_check_select+0x28>
80008e34:	30 f8       	mov	r8,15
80008e36:	b2 88       	st.b	r9[0x0],r8
      return false;
80008e38:	30 08       	mov	r8,0
80008e3a:	c0 28       	rjmp	80008e3e <fat_check_select+0x1e>
   }
   return true;
80008e3c:	30 18       	mov	r8,1
}
80008e3e:	10 9c       	mov	r12,r8
80008e40:	e3 cd 80 80 	ldm	sp++,r7,pc
80008e44:	00 00       	add	r0,r0
80008e46:	0d d4       	ld.ub	r4,r6[0x5]
80008e48:	00 00       	add	r0,r0
80008e4a:	0d d8       	ld.ub	r8,r6[0x5]

80008e4c <fat_check_mount_noopen>:
//!
//! @return    true  partition mounted and no file is opened
//! @return    false otherwise
//!
bool  fat_check_mount_noopen( void )
{
80008e4c:	eb cd 40 80 	pushm	r7,lr
80008e50:	1a 97       	mov	r7,sp
   if( !fat_check_mount() )
80008e52:	f0 1f 00 08 	mcall	80008e70 <fat_check_mount_noopen+0x24>
80008e56:	18 98       	mov	r8,r12
80008e58:	ec 18 00 01 	eorl	r8,0x1
80008e5c:	5c 58       	castu.b	r8
80008e5e:	c0 30       	breq	80008e64 <fat_check_mount_noopen+0x18>
      return false;
80008e60:	30 08       	mov	r8,0
80008e62:	c0 48       	rjmp	80008e6a <fat_check_mount_noopen+0x1e>
   return fat_check_noopen();
80008e64:	f0 1f 00 04 	mcall	80008e74 <fat_check_mount_noopen+0x28>
80008e68:	18 98       	mov	r8,r12
}
80008e6a:	10 9c       	mov	r12,r8
80008e6c:	e3 cd 80 80 	ldm	sp++,r7,pc
80008e70:	80 00       	ld.sh	r0,r0[0x0]
80008e72:	8d 58       	st.w	r6[0x14],r8
80008e74:	80 00       	ld.sh	r0,r0[0x0]
80008e76:	8d a8       	st.w	r6[0x28],r8

80008e78 <fat_check_mount_select_noopen>:
//!
//! @return    true  partition mounted and no file is opened and a file is selected
//! @return    false otherwise
//!
bool  fat_check_mount_select_noopen( void )
{
80008e78:	eb cd 40 80 	pushm	r7,lr
80008e7c:	1a 97       	mov	r7,sp
   if( !fat_check_mount() )
80008e7e:	f0 1f 00 0d 	mcall	80008eb0 <fat_check_mount_select_noopen+0x38>
80008e82:	18 98       	mov	r8,r12
80008e84:	ec 18 00 01 	eorl	r8,0x1
80008e88:	5c 58       	castu.b	r8
80008e8a:	c0 30       	breq	80008e90 <fat_check_mount_select_noopen+0x18>
      return false;
80008e8c:	30 08       	mov	r8,0
80008e8e:	c0 d8       	rjmp	80008ea8 <fat_check_mount_select_noopen+0x30>
   if( !fat_check_select() )
80008e90:	f0 1f 00 09 	mcall	80008eb4 <fat_check_mount_select_noopen+0x3c>
80008e94:	18 98       	mov	r8,r12
80008e96:	ec 18 00 01 	eorl	r8,0x1
80008e9a:	5c 58       	castu.b	r8
80008e9c:	c0 30       	breq	80008ea2 <fat_check_mount_select_noopen+0x2a>
      return false;
80008e9e:	30 08       	mov	r8,0
80008ea0:	c0 48       	rjmp	80008ea8 <fat_check_mount_select_noopen+0x30>
   return fat_check_noopen();
80008ea2:	f0 1f 00 06 	mcall	80008eb8 <fat_check_mount_select_noopen+0x40>
80008ea6:	18 98       	mov	r8,r12
}
80008ea8:	10 9c       	mov	r12,r8
80008eaa:	e3 cd 80 80 	ldm	sp++,r7,pc
80008eae:	00 00       	add	r0,r0
80008eb0:	80 00       	ld.sh	r0,r0[0x0]
80008eb2:	8d 58       	st.w	r6[0x14],r8
80008eb4:	80 00       	ld.sh	r0,r0[0x0]
80008eb6:	8e 20       	ld.sh	r0,r7[0x4]
80008eb8:	80 00       	ld.sh	r0,r0[0x0]
80008eba:	8d a8       	st.w	r6[0x28],r8

80008ebc <fat_check_mount_select_open>:
//!
//! @return    true  partition mounted and a file is opened
//! @return    false otherwise
//!
bool  fat_check_mount_select_open( void )
{
80008ebc:	eb cd 40 80 	pushm	r7,lr
80008ec0:	1a 97       	mov	r7,sp
   if( !fat_check_mount() )
80008ec2:	f0 1f 00 0d 	mcall	80008ef4 <fat_check_mount_select_open+0x38>
80008ec6:	18 98       	mov	r8,r12
80008ec8:	ec 18 00 01 	eorl	r8,0x1
80008ecc:	5c 58       	castu.b	r8
80008ece:	c0 30       	breq	80008ed4 <fat_check_mount_select_open+0x18>
      return false;
80008ed0:	30 08       	mov	r8,0
80008ed2:	c0 d8       	rjmp	80008eec <fat_check_mount_select_open+0x30>
   if( !fat_check_select() )
80008ed4:	f0 1f 00 09 	mcall	80008ef8 <fat_check_mount_select_open+0x3c>
80008ed8:	18 98       	mov	r8,r12
80008eda:	ec 18 00 01 	eorl	r8,0x1
80008ede:	5c 58       	castu.b	r8
80008ee0:	c0 30       	breq	80008ee6 <fat_check_mount_select_open+0x2a>
      return false;
80008ee2:	30 08       	mov	r8,0
80008ee4:	c0 48       	rjmp	80008eec <fat_check_mount_select_open+0x30>
   return fat_check_open();
80008ee6:	f0 1f 00 06 	mcall	80008efc <fat_check_mount_select_open+0x40>
80008eea:	18 98       	mov	r8,r12
}
80008eec:	10 9c       	mov	r12,r8
80008eee:	e3 cd 80 80 	ldm	sp++,r7,pc
80008ef2:	00 00       	add	r0,r0
80008ef4:	80 00       	ld.sh	r0,r0[0x0]
80008ef6:	8d 58       	st.w	r6[0x14],r8
80008ef8:	80 00       	ld.sh	r0,r0[0x0]
80008efa:	8e 20       	ld.sh	r0,r7[0x4]
80008efc:	80 00       	ld.sh	r0,r0[0x0]
80008efe:	8d f8       	st.w	r6[0x3c],r8

80008f00 <fat_check_mount_select>:
//!
//! @return    true  partition mounted and a file is selected
//! @return    false otherwise
//!
bool  fat_check_mount_select( void )
{
80008f00:	eb cd 40 80 	pushm	r7,lr
80008f04:	1a 97       	mov	r7,sp
   if( !fat_check_mount() )
80008f06:	f0 1f 00 08 	mcall	80008f24 <fat_check_mount_select+0x24>
80008f0a:	18 98       	mov	r8,r12
80008f0c:	ec 18 00 01 	eorl	r8,0x1
80008f10:	5c 58       	castu.b	r8
80008f12:	c0 30       	breq	80008f18 <fat_check_mount_select+0x18>
      return false;
80008f14:	30 08       	mov	r8,0
80008f16:	c0 48       	rjmp	80008f1e <fat_check_mount_select+0x1e>
   return fat_check_select();
80008f18:	f0 1f 00 04 	mcall	80008f28 <fat_check_mount_select+0x28>
80008f1c:	18 98       	mov	r8,r12
}
80008f1e:	10 9c       	mov	r12,r8
80008f20:	e3 cd 80 80 	ldm	sp++,r7,pc
80008f24:	80 00       	ld.sh	r0,r0[0x0]
80008f26:	8d 58       	st.w	r6[0x14],r8
80008f28:	80 00       	ld.sh	r0,r0[0x0]
80008f2a:	8e 20       	ld.sh	r0,r7[0x4]

80008f2c <fat_check_is_file>:
//!
//! @return    true  It is a file and not a directory
//! @return    false otherwise
//!
bool  fat_check_is_file( void )
{
80008f2c:	eb cd 40 80 	pushm	r7,lr
80008f30:	1a 97       	mov	r7,sp
   if( Fat_is_not_a_file )
80008f32:	48 a8       	lddpc	r8,80008f58 <fat_check_is_file+0x2c>
80008f34:	11 a8       	ld.ub	r8,r8[0x2]
80008f36:	e2 18 00 10 	andl	r8,0x10,COH
80008f3a:	c0 61       	brne	80008f46 <fat_check_is_file+0x1a>
80008f3c:	48 78       	lddpc	r8,80008f58 <fat_check_is_file+0x2c>
80008f3e:	11 a8       	ld.ub	r8,r8[0x2]
80008f40:	e2 18 00 08 	andl	r8,0x8,COH
80008f44:	c0 60       	breq	80008f50 <fat_check_is_file+0x24>
   {
      fs_g_status = FS_ERR_NO_FILE;   // It isn't a file, it is a directory or a volume id
80008f46:	48 69       	lddpc	r9,80008f5c <fat_check_is_file+0x30>
80008f48:	31 38       	mov	r8,19
80008f4a:	b2 88       	st.b	r9[0x0],r8
      return false;
80008f4c:	30 08       	mov	r8,0
80008f4e:	c0 28       	rjmp	80008f52 <fat_check_is_file+0x26>
   }
   return true;
80008f50:	30 18       	mov	r8,1
}
80008f52:	10 9c       	mov	r12,r8
80008f54:	e3 cd 80 80 	ldm	sp++,r7,pc
80008f58:	00 00       	add	r0,r0
80008f5a:	0b 48       	ld.w	r8,--r5
80008f5c:	00 00       	add	r0,r0
80008f5e:	0d d8       	ld.ub	r8,r6[0x5]

80008f60 <fat_cluster_list>:
//!   fs_g_seg.u32_addr          The memory segment address corresponding at the beginning of cluster list (only for action FS_CLUST_ACT_SEG & FS_CLUST_ACT_ONE)
//!   fs_g_seg.u32_size_or_pos   The memory segment size corresponding at cluster list read or cleared (unit 512B)
//! @endverbatim
//!
bool  fat_cluster_list( uint8_t opt_action, bool b_for_file )
{
80008f60:	eb cd 40 80 	pushm	r7,lr
80008f64:	1a 97       	mov	r7,sp
80008f66:	20 4d       	sub	sp,16
80008f68:	18 99       	mov	r9,r12
80008f6a:	16 98       	mov	r8,r11
80008f6c:	ef 69 ff f4 	st.b	r7[-12],r9
80008f70:	ef 68 ff f0 	st.b	r7[-16],r8
   _MEM_TYPE_FAST_ uint32_t u32_tmp;
   _MEM_TYPE_FAST_ uint8_t u8_cluster_status;

   fs_g_status = FS_ERR_FS;      // By default system error
80008f74:	fe f9 04 5c 	ld.w	r9,pc[1116]
80008f78:	30 88       	mov	r8,8
80008f7a:	b2 88       	st.b	r9[0x0],r8

   if(  Is_fat32
80008f7c:	fe f8 04 58 	ld.w	r8,pc[1112]
80008f80:	11 89       	ld.ub	r9,r8[0x0]
80008f82:	30 38       	mov	r8,3
80008f84:	f0 09 18 00 	cp.b	r9,r8
80008f88:	c1 21       	brne	80008fac <fat_cluster_list+0x4c>
80008f8a:	ef 39 ff f4 	ld.ub	r9,r7[-12]
80008f8e:	30 38       	mov	r8,3
80008f90:	f0 09 18 00 	cp.b	r9,r8
80008f94:	c0 c1       	brne	80008fac <fat_cluster_list+0x4c>
   &&  (FS_CLUST_ACT_CLR == opt_action) )
   {
#if (FSFEATURE_WRITE_COMPLET == (FS_LEVEL_FEATURES & FSFEATURE_WRITE_COMPLET) )
      // Clear free space information storage in FAT32
      if( !fat_write_fat32_FSInfo( 0xFFFFFFFF ))
80008f96:	3f fc       	mov	r12,-1
80008f98:	f0 1f 01 10 	mcall	800093d8 <fat_cluster_list+0x478>
80008f9c:	18 98       	mov	r8,r12
80008f9e:	ec 18 00 01 	eorl	r8,0x1
80008fa2:	5c 58       	castu.b	r8
80008fa4:	c0 40       	breq	80008fac <fat_cluster_list+0x4c>
         return false;
80008fa6:	30 08       	mov	r8,0
80008fa8:	e0 8f 02 0f 	bral	800093c6 <fat_cluster_list+0x466>
#else
      return false;
#endif
   }

   if ( 0 == fs_g_seg.u32_addr )
80008fac:	fe f8 04 30 	ld.w	r8,pc[1072]
80008fb0:	70 08       	ld.w	r8,r8[0x0]
80008fb2:	58 08       	cp.w	r8,0
80008fb4:	c5 71       	brne	80009062 <fat_cluster_list+0x102>
   {
      // Cluster list of root directory
      if( FS_CLUST_ACT_CLR == opt_action )
80008fb6:	ef 39 ff f4 	ld.ub	r9,r7[-12]
80008fba:	30 38       	mov	r8,3
80008fbc:	f0 09 18 00 	cp.b	r9,r8
80008fc0:	c0 41       	brne	80008fc8 <fat_cluster_list+0x68>
         return false;           // Impossible to erase ROOT DIR
80008fc2:	30 08       	mov	r8,0
80008fc4:	e0 8f 02 01 	bral	800093c6 <fat_cluster_list+0x466>

      if ( Is_fat12 || Is_fat16 )
80008fc8:	fe f8 04 0c 	ld.w	r8,pc[1036]
80008fcc:	11 89       	ld.ub	r9,r8[0x0]
80008fce:	30 18       	mov	r8,1
80008fd0:	f0 09 18 00 	cp.b	r9,r8
80008fd4:	c0 80       	breq	80008fe4 <fat_cluster_list+0x84>
80008fd6:	fe f8 03 fe 	ld.w	r8,pc[1022]
80008fda:	11 89       	ld.ub	r9,r8[0x0]
80008fdc:	30 28       	mov	r8,2
80008fde:	f0 09 18 00 	cp.b	r9,r8
80008fe2:	c3 21       	brne	80009046 <fat_cluster_list+0xe6>
      {
         // For a FAT 12 & 16, the root dir isn't a cluster list
         // Check the position
         if ( fs_g_seg.u32_size_or_pos < fs_g_nav.rootdir.seg.u16_size )
80008fe4:	fe f8 03 f8 	ld.w	r8,pc[1016]
80008fe8:	70 19       	ld.w	r9,r8[0x4]
80008fea:	fe f8 03 f6 	ld.w	r8,pc[1014]
80008fee:	f1 08 00 1a 	ld.sh	r8,r8[26]
80008ff2:	5c 78       	castu.h	r8
80008ff4:	10 39       	cp.w	r9,r8
80008ff6:	c2 12       	brcc	80009038 <fat_cluster_list+0xd8>
         {
            // Compute the start address and the size
            fs_g_seg.u32_addr = fs_g_nav.u32_ptr_fat + fs_g_nav.rootdir.seg.u16_pos + fs_g_seg.u32_size_or_pos;
80008ff8:	fe f8 03 e8 	ld.w	r8,pc[1000]
80008ffc:	70 49       	ld.w	r9,r8[0x10]
80008ffe:	fe f8 03 e2 	ld.w	r8,pc[994]
80009002:	f1 08 00 18 	ld.sh	r8,r8[24]
80009006:	5c 78       	castu.h	r8
80009008:	10 09       	add	r9,r8
8000900a:	fe f8 03 d2 	ld.w	r8,pc[978]
8000900e:	70 18       	ld.w	r8,r8[0x4]
80009010:	10 09       	add	r9,r8
80009012:	fe f8 03 ca 	ld.w	r8,pc[970]
80009016:	91 09       	st.w	r8[0x0],r9
            fs_g_seg.u32_size_or_pos = fs_g_nav.rootdir.seg.u16_size - fs_g_seg.u32_size_or_pos;
80009018:	fe f8 03 c8 	ld.w	r8,pc[968]
8000901c:	f1 08 00 1a 	ld.sh	r8,r8[26]
80009020:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
80009024:	fe f8 03 b8 	ld.w	r8,pc[952]
80009028:	70 18       	ld.w	r8,r8[0x4]
8000902a:	10 19       	sub	r9,r8
8000902c:	fe f8 03 b0 	ld.w	r8,pc[944]
80009030:	91 19       	st.w	r8[0x4],r9
            return true;
80009032:	30 18       	mov	r8,1
80009034:	e0 8f 01 c9 	bral	800093c6 <fat_cluster_list+0x466>
         } else {
            fs_g_status = FS_ERR_OUT_LIST;
80009038:	fe f9 03 98 	ld.w	r9,pc[920]
8000903c:	31 a8       	mov	r8,26
8000903e:	b2 88       	st.b	r9[0x0],r8
            return false;        // Position outside the root area
80009040:	30 08       	mov	r8,0
80009042:	e0 8f 01 c2 	bral	800093c6 <fat_cluster_list+0x466>
         }
      }
      if ( Is_fat32 )
80009046:	fe f8 03 8e 	ld.w	r8,pc[910]
8000904a:	11 89       	ld.ub	r9,r8[0x0]
8000904c:	30 38       	mov	r8,3
8000904e:	f0 09 18 00 	cp.b	r9,r8
80009052:	c0 e1       	brne	8000906e <fat_cluster_list+0x10e>
      {
         // For FAT 32, the root is a cluster list and the first cluster is reading during the mount
         fs_g_cluster.u32_pos = fs_g_nav.rootdir.u32_cluster;
80009054:	fe f8 03 8c 	ld.w	r8,pc[908]
80009058:	70 69       	ld.w	r9,r8[0x18]
8000905a:	fe f8 03 8a 	ld.w	r8,pc[906]
8000905e:	91 09       	st.w	r8[0x0],r9
80009060:	c0 78       	rjmp	8000906e <fat_cluster_list+0x10e>
      }
   } else {
      // It is the first cluster of a cluster list
      fs_g_cluster.u32_pos = fs_g_seg.u32_addr;
80009062:	fe f8 03 7a 	ld.w	r8,pc[890]
80009066:	70 09       	ld.w	r9,r8[0x0]
80009068:	fe f8 03 7c 	ld.w	r8,pc[892]
8000906c:	91 09       	st.w	r8[0x0],r9
   }

   // Management of cluster list caches
   if( FS_CLUST_ACT_CLR != opt_action )
8000906e:	ef 39 ff f4 	ld.ub	r9,r7[-12]
80009072:	30 38       	mov	r8,3
80009074:	f0 09 18 00 	cp.b	r9,r8
80009078:	c0 c0       	breq	80009090 <fat_cluster_list+0x130>
   {
      if( fat_cache_clusterlist_update_read( b_for_file ) )
8000907a:	ef 38 ff f0 	ld.ub	r8,r7[-16]
8000907e:	10 9c       	mov	r12,r8
80009080:	f0 1f 00 da 	mcall	800093e8 <fat_cluster_list+0x488>
80009084:	18 98       	mov	r8,r12
80009086:	58 08       	cp.w	r8,0
80009088:	c0 80       	breq	80009098 <fat_cluster_list+0x138>
         return true;            // Segment found in cache
8000908a:	30 18       	mov	r8,1
8000908c:	e0 8f 01 9d 	bral	800093c6 <fat_cluster_list+0x466>
      // Segment not found & cache ready to update
   }else{
      fat_cache_clusterlist_reset();   // It is a clear action then clear cluster list caches
80009090:	f0 1f 00 d7 	mcall	800093ec <fat_cluster_list+0x48c>
#if (FS_LEVEL_FEATURES > FSFEATURE_READ)
      fat_clear_info_fat_mod();        // Init cache on fat modification range
80009094:	f0 1f 00 d7 	mcall	800093f0 <fat_cluster_list+0x490>
#endif  // FS_LEVEL_FEATURES
   }

   // Init loop with a start segment no found
   MSB0( fs_g_seg.u32_addr ) = 0xFF;
80009098:	fe f9 03 44 	ld.w	r9,pc[836]
8000909c:	3f f8       	mov	r8,-1
8000909e:	b2 88       	st.b	r9[0x0],r8

   //**** Loop to read the cluster list
   while ( 1 )
   {
      if ( fs_g_seg.u32_size_or_pos < fs_g_nav.u8_BPB_SecPerClus )
800090a0:	fe f8 03 3c 	ld.w	r8,pc[828]
800090a4:	70 19       	ld.w	r9,r8[0x4]
800090a6:	fe f8 03 3a 	ld.w	r8,pc[826]
800090aa:	11 98       	ld.ub	r8,r8[0x1]
800090ac:	10 39       	cp.w	r9,r8
800090ae:	e0 82 00 9b 	brhs	800091e4 <fat_cluster_list+0x284>
      {
         // The segment starts in this cluster
         // Compute the sector address of this cluster
         fs_g_seg.u32_addr = ((fs_g_cluster.u32_pos - 2) * fs_g_nav.u8_BPB_SecPerClus)
800090b2:	fe f8 03 32 	ld.w	r8,pc[818]
800090b6:	70 08       	ld.w	r8,r8[0x0]
800090b8:	f0 c9 00 02 	sub	r9,r8,2
800090bc:	fe f8 03 24 	ld.w	r8,pc[804]
800090c0:	11 98       	ld.ub	r8,r8[0x1]
800090c2:	b1 39       	mul	r9,r8
                           + fs_g_nav.u32_ptr_fat + fs_g_nav.u32_offset_data + fs_g_seg.u32_size_or_pos;
800090c4:	fe f8 03 1c 	ld.w	r8,pc[796]
800090c8:	70 48       	ld.w	r8,r8[0x10]
800090ca:	10 09       	add	r9,r8
800090cc:	fe f8 03 14 	ld.w	r8,pc[788]
800090d0:	70 58       	ld.w	r8,r8[0x14]
800090d2:	10 09       	add	r9,r8
   {
      if ( fs_g_seg.u32_size_or_pos < fs_g_nav.u8_BPB_SecPerClus )
      {
         // The segment starts in this cluster
         // Compute the sector address of this cluster
         fs_g_seg.u32_addr = ((fs_g_cluster.u32_pos - 2) * fs_g_nav.u8_BPB_SecPerClus)
800090d4:	fe f8 03 08 	ld.w	r8,pc[776]
800090d8:	70 18       	ld.w	r8,r8[0x4]
800090da:	10 09       	add	r9,r8
800090dc:	fe f8 03 00 	ld.w	r8,pc[768]
800090e0:	91 09       	st.w	r8[0x0],r9
                           + fs_g_nav.u32_ptr_fat + fs_g_nav.u32_offset_data + fs_g_seg.u32_size_or_pos;

         if ( FS_CLUST_ACT_ONE == opt_action )
800090e2:	ef 39 ff f4 	ld.ub	r9,r7[-12]
800090e6:	30 28       	mov	r8,2
800090e8:	f0 09 18 00 	cp.b	r9,r8
800090ec:	c1 51       	brne	80009116 <fat_cluster_list+0x1b6>
         {
            // Compute the maximum size
            fs_g_seg.u32_size_or_pos = fs_g_nav.u8_BPB_SecPerClus-fs_g_seg.u32_size_or_pos;
800090ee:	fe f8 02 f2 	ld.w	r8,pc[754]
800090f2:	11 98       	ld.ub	r8,r8[0x1]
800090f4:	10 99       	mov	r9,r8
800090f6:	fe f8 02 e6 	ld.w	r8,pc[742]
800090fa:	70 18       	ld.w	r8,r8[0x4]
800090fc:	10 19       	sub	r9,r8
800090fe:	fe f8 02 de 	ld.w	r8,pc[734]
80009102:	91 19       	st.w	r8[0x4],r9
            fat_cache_clusterlist_update_finish();
80009104:	f0 1f 00 bc 	mcall	800093f4 <fat_cluster_list+0x494>
            // Send a size of one sector
            fs_g_seg.u32_size_or_pos = 1;
80009108:	fe f8 02 d4 	ld.w	r8,pc[724]
8000910c:	30 19       	mov	r9,1
8000910e:	91 19       	st.w	r8[0x4],r9
            return true;
80009110:	30 18       	mov	r8,1
80009112:	e0 8f 01 5a 	bral	800093c6 <fat_cluster_list+0x466>
         }
         // Update the segment size
         fs_g_seg.u32_size_or_pos = fs_g_nav.u8_BPB_SecPerClus - LSB0( fs_g_seg.u32_size_or_pos );
80009116:	fe f8 02 ca 	ld.w	r8,pc[714]
8000911a:	11 98       	ld.ub	r8,r8[0x1]
8000911c:	10 99       	mov	r9,r8
8000911e:	fe f8 02 be 	ld.w	r8,pc[702]
80009122:	2f c8       	sub	r8,-4
80009124:	2f d8       	sub	r8,-3
80009126:	11 88       	ld.ub	r8,r8[0x0]
80009128:	f2 08 01 08 	sub	r8,r9,r8
8000912c:	10 99       	mov	r9,r8
8000912e:	fe f8 02 ae 	ld.w	r8,pc[686]
80009132:	91 19       	st.w	r8[0x4],r9

         // Take time, during read cluster list on FAT 16 & 32
         if( (FS_CLUST_ACT_SEG == opt_action)
80009134:	ef 39 ff f4 	ld.ub	r9,r7[-12]
80009138:	30 18       	mov	r8,1
8000913a:	f0 09 18 00 	cp.b	r9,r8
8000913e:	c5 31       	brne	800091e4 <fat_cluster_list+0x284>
         &&  (!Is_fat12) )
80009140:	fe f8 02 94 	ld.w	r8,pc[660]
80009144:	11 89       	ld.ub	r9,r8[0x0]
         }
         // Update the segment size
         fs_g_seg.u32_size_or_pos = fs_g_nav.u8_BPB_SecPerClus - LSB0( fs_g_seg.u32_size_or_pos );

         // Take time, during read cluster list on FAT 16 & 32
         if( (FS_CLUST_ACT_SEG == opt_action)
80009146:	30 18       	mov	r8,1
80009148:	f0 09 18 00 	cp.b	r9,r8
8000914c:	c4 c0       	breq	800091e4 <fat_cluster_list+0x284>
         &&  (!Is_fat12) )
         {
            // Init loop with the current cluster
            u32_tmp = fs_g_cluster.u32_pos;
8000914e:	fe f8 02 96 	ld.w	r8,pc[662]
80009152:	70 08       	ld.w	r8,r8[0x0]
80009154:	ef 48 ff f8 	st.w	r7[-8],r8
            if( !fat_cluster_val( FS_CLUST_VAL_READ ))
80009158:	30 0c       	mov	r12,0
8000915a:	f0 1f 00 a8 	mcall	800093f8 <fat_cluster_list+0x498>
8000915e:	18 98       	mov	r8,r12
80009160:	ec 18 00 01 	eorl	r8,0x1
80009164:	5c 58       	castu.b	r8
80009166:	c0 50       	breq	80009170 <fat_cluster_list+0x210>
               return false;
80009168:	30 08       	mov	r8,0
8000916a:	e0 8f 01 2e 	bral	800093c6 <fat_cluster_list+0x466>
                  fs_g_seg.u32_size_or_pos += u32_tmp * fs_g_nav.u8_BPB_SecPerClus;
                  break;
               }
               if( !fat_cluster_readnext() )
                  return false;
            }
8000916e:	d7 03       	nop
            if( !fat_cluster_val( FS_CLUST_VAL_READ ))
               return false;
            // Read cluster list, while this one is continue
            while(1)
            {
               if ( (++fs_g_cluster.u32_pos) != fs_g_cluster.u32_val )
80009170:	fe f8 02 74 	ld.w	r8,pc[628]
80009174:	70 08       	ld.w	r8,r8[0x0]
80009176:	f0 c9 ff ff 	sub	r9,r8,-1
8000917a:	fe f8 02 6a 	ld.w	r8,pc[618]
8000917e:	91 09       	st.w	r8[0x0],r9
80009180:	fe f8 02 64 	ld.w	r8,pc[612]
80009184:	70 09       	ld.w	r9,r8[0x0]
80009186:	fe f8 02 5e 	ld.w	r8,pc[606]
8000918a:	70 18       	ld.w	r8,r8[0x4]
8000918c:	10 39       	cp.w	r9,r8
8000918e:	c2 20       	breq	800091d2 <fat_cluster_list+0x272>
               {
                  fs_g_cluster.u32_pos--;                   // Recompute previous value
80009190:	fe f8 02 54 	ld.w	r8,pc[596]
80009194:	70 08       	ld.w	r8,r8[0x0]
80009196:	f0 c9 00 01 	sub	r9,r8,1
8000919a:	fe f8 02 4a 	ld.w	r8,pc[586]
8000919e:	91 09       	st.w	r8[0x0],r9
                  u32_tmp = fs_g_cluster.u32_pos - u32_tmp; // Compute the size of cluster list
800091a0:	fe f8 02 44 	ld.w	r8,pc[580]
800091a4:	70 09       	ld.w	r9,r8[0x0]
800091a6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800091aa:	f2 08 01 08 	sub	r8,r9,r8
800091ae:	ef 48 ff f8 	st.w	r7[-8],r8
                  fs_g_seg.u32_size_or_pos += u32_tmp * fs_g_nav.u8_BPB_SecPerClus;
800091b2:	fe f8 02 2a 	ld.w	r8,pc[554]
800091b6:	70 19       	ld.w	r9,r8[0x4]
800091b8:	fe f8 02 28 	ld.w	r8,pc[552]
800091bc:	11 98       	ld.ub	r8,r8[0x1]
800091be:	10 9a       	mov	r10,r8
800091c0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800091c4:	f4 08 02 48 	mul	r8,r10,r8
800091c8:	10 09       	add	r9,r8
800091ca:	fe f8 02 12 	ld.w	r8,pc[530]
800091ce:	91 19       	st.w	r8[0x4],r9
                  break;
800091d0:	c0 a8       	rjmp	800091e4 <fat_cluster_list+0x284>
               }
               if( !fat_cluster_readnext() )
800091d2:	f0 1f 00 8b 	mcall	800093fc <fat_cluster_list+0x49c>
800091d6:	18 98       	mov	r8,r12
800091d8:	ec 18 00 01 	eorl	r8,0x1
800091dc:	5c 58       	castu.b	r8
800091de:	cc 80       	breq	8000916e <fat_cluster_list+0x20e>
                  return false;
800091e0:	30 08       	mov	r8,0
800091e2:	cf 28       	rjmp	800093c6 <fat_cluster_list+0x466>
            }
         }
      }
      // Get the cluster value
      if( !fat_cluster_val( FS_CLUST_VAL_READ ))
800091e4:	30 0c       	mov	r12,0
800091e6:	f0 1f 00 85 	mcall	800093f8 <fat_cluster_list+0x498>
800091ea:	18 98       	mov	r8,r12
800091ec:	ec 18 00 01 	eorl	r8,0x1
800091f0:	5c 58       	castu.b	r8
800091f2:	c0 30       	breq	800091f8 <fat_cluster_list+0x298>
         return false;
800091f4:	30 08       	mov	r8,0
800091f6:	ce 88       	rjmp	800093c6 <fat_cluster_list+0x466>

      // Read and check the status of the new cluster
      u8_cluster_status = fat_checkcluster();
800091f8:	f0 1f 00 82 	mcall	80009400 <fat_cluster_list+0x4a0>
800091fc:	18 98       	mov	r8,r12
800091fe:	ef 68 ff ff 	st.b	r7[-1],r8
      if (FS_CLUS_BAD == u8_cluster_status)
80009202:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80009206:	30 18       	mov	r8,1
80009208:	f0 09 18 00 	cp.b	r9,r8
8000920c:	c0 31       	brne	80009212 <fat_cluster_list+0x2b2>
         return false; // error, end of cluster list
8000920e:	30 08       	mov	r8,0
80009210:	cd b8       	rjmp	800093c6 <fat_cluster_list+0x466>

      if (0xFF == MSB0(fs_g_seg.u32_addr))
80009212:	4f 38       	lddpc	r8,800093dc <fat_cluster_list+0x47c>
80009214:	11 89       	ld.ub	r9,r8[0x0]
80009216:	3f f8       	mov	r8,-1
80009218:	f0 09 18 00 	cp.b	r9,r8
8000921c:	e0 81 00 7b 	brne	80009312 <fat_cluster_list+0x3b2>
      {
         // The beginning of the segment isn't found
         if (FS_CLUS_END == u8_cluster_status)
80009220:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80009224:	30 28       	mov	r8,2
80009226:	f0 09 18 00 	cp.b	r9,r8
8000922a:	c4 91       	brne	800092bc <fat_cluster_list+0x35c>
         {
            u32_tmp = fs_g_seg.u32_size_or_pos;       // Save number of sector remaining
8000922c:	4e c8       	lddpc	r8,800093dc <fat_cluster_list+0x47c>
8000922e:	70 18       	ld.w	r8,r8[0x4]
80009230:	ef 48 ff f8 	st.w	r7[-8],r8

            // Compute the sector address of this last cluster to take time during a future request with the same cluster list
            fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_start -= fs_g_seg.u32_size_or_pos;
80009234:	4f 48       	lddpc	r8,80009404 <fat_cluster_list+0x4a4>
80009236:	11 88       	ld.ub	r8,r8[0x0]
80009238:	10 99       	mov	r9,r8
8000923a:	4f 38       	lddpc	r8,80009404 <fat_cluster_list+0x4a4>
8000923c:	11 88       	ld.ub	r8,r8[0x0]
8000923e:	10 9a       	mov	r10,r8
80009240:	4f 2b       	lddpc	r11,80009408 <fat_cluster_list+0x4a8>
80009242:	14 98       	mov	r8,r10
80009244:	a3 68       	lsl	r8,0x2
80009246:	14 08       	add	r8,r10
80009248:	a3 68       	lsl	r8,0x2
8000924a:	f6 08 00 08 	add	r8,r11,r8
8000924e:	2f 88       	sub	r8,-8
80009250:	70 0a       	ld.w	r10,r8[0x0]
80009252:	4e 38       	lddpc	r8,800093dc <fat_cluster_list+0x47c>
80009254:	70 18       	ld.w	r8,r8[0x4]
80009256:	10 1a       	sub	r10,r8
80009258:	4e cb       	lddpc	r11,80009408 <fat_cluster_list+0x4a8>
8000925a:	12 98       	mov	r8,r9
8000925c:	a3 68       	lsl	r8,0x2
8000925e:	12 08       	add	r8,r9
80009260:	a3 68       	lsl	r8,0x2
80009262:	f6 08 00 08 	add	r8,r11,r8
80009266:	2f 88       	sub	r8,-8
80009268:	91 0a       	st.w	r8[0x0],r10
            fs_g_seg.u32_addr = ((fs_g_cluster.u32_pos - 2) * fs_g_nav.u8_BPB_SecPerClus)
8000926a:	4d f8       	lddpc	r8,800093e4 <fat_cluster_list+0x484>
8000926c:	70 08       	ld.w	r8,r8[0x0]
8000926e:	f0 c9 00 02 	sub	r9,r8,2
80009272:	4d c8       	lddpc	r8,800093e0 <fat_cluster_list+0x480>
80009274:	11 98       	ld.ub	r8,r8[0x1]
80009276:	b1 39       	mul	r9,r8
                              + fs_g_nav.u32_ptr_fat + fs_g_nav.u32_offset_data;
80009278:	4d a8       	lddpc	r8,800093e0 <fat_cluster_list+0x480>
8000927a:	70 48       	ld.w	r8,r8[0x10]
8000927c:	10 09       	add	r9,r8
         {
            u32_tmp = fs_g_seg.u32_size_or_pos;       // Save number of sector remaining

            // Compute the sector address of this last cluster to take time during a future request with the same cluster list
            fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_start -= fs_g_seg.u32_size_or_pos;
            fs_g_seg.u32_addr = ((fs_g_cluster.u32_pos - 2) * fs_g_nav.u8_BPB_SecPerClus)
8000927e:	4d 98       	lddpc	r8,800093e0 <fat_cluster_list+0x480>
80009280:	70 58       	ld.w	r8,r8[0x14]
80009282:	10 09       	add	r9,r8
80009284:	4d 68       	lddpc	r8,800093dc <fat_cluster_list+0x47c>
80009286:	91 09       	st.w	r8[0x0],r9
                              + fs_g_nav.u32_ptr_fat + fs_g_nav.u32_offset_data;
            fs_g_seg.u32_size_or_pos = fs_g_nav.u8_BPB_SecPerClus;
80009288:	4d 68       	lddpc	r8,800093e0 <fat_cluster_list+0x480>
8000928a:	11 98       	ld.ub	r8,r8[0x1]
8000928c:	10 99       	mov	r9,r8
8000928e:	4d 48       	lddpc	r8,800093dc <fat_cluster_list+0x47c>
80009290:	91 19       	st.w	r8[0x4],r9
            if (FS_CLUST_ACT_CLR != opt_action)
80009292:	ef 39 ff f4 	ld.ub	r9,r7[-12]
80009296:	30 38       	mov	r8,3
80009298:	f0 09 18 00 	cp.b	r9,r8
8000929c:	c0 30       	breq	800092a2 <fat_cluster_list+0x342>
               fat_cache_clusterlist_update_finish();
8000929e:	f0 1f 00 56 	mcall	800093f4 <fat_cluster_list+0x494>

            // The position is outside the cluster list
            fs_g_seg.u32_addr = fs_g_cluster.u32_pos; // Send the last cluster value
800092a2:	4d 18       	lddpc	r8,800093e4 <fat_cluster_list+0x484>
800092a4:	70 09       	ld.w	r9,r8[0x0]
800092a6:	4c e8       	lddpc	r8,800093dc <fat_cluster_list+0x47c>
800092a8:	91 09       	st.w	r8[0x0],r9
            fs_g_seg.u32_size_or_pos = u32_tmp;       // Restore number of sector remaining
800092aa:	4c d8       	lddpc	r8,800093dc <fat_cluster_list+0x47c>
800092ac:	ee f9 ff f8 	ld.w	r9,r7[-8]
800092b0:	91 19       	st.w	r8[0x4],r9
            fs_g_status = FS_ERR_OUT_LIST;
800092b2:	4c 89       	lddpc	r9,800093d0 <fat_cluster_list+0x470>
800092b4:	31 a8       	mov	r8,26
800092b6:	b2 88       	st.b	r9[0x0],r8
            return false;
800092b8:	30 08       	mov	r8,0
800092ba:	c8 68       	rjmp	800093c6 <fat_cluster_list+0x466>
         }
         // Good cluster then continue
         fs_g_seg.u32_size_or_pos -= fs_g_nav.u8_BPB_SecPerClus;
800092bc:	4c 88       	lddpc	r8,800093dc <fat_cluster_list+0x47c>
800092be:	70 19       	ld.w	r9,r8[0x4]
800092c0:	4c 88       	lddpc	r8,800093e0 <fat_cluster_list+0x480>
800092c2:	11 98       	ld.ub	r8,r8[0x1]
800092c4:	10 19       	sub	r9,r8
800092c6:	4c 68       	lddpc	r8,800093dc <fat_cluster_list+0x47c>
800092c8:	91 19       	st.w	r8[0x4],r9
#if (FS_LEVEL_FEATURES > FSFEATURE_READ)
         if (FS_CLUST_ACT_CLR == opt_action)
800092ca:	ef 39 ff f4 	ld.ub	r9,r7[-12]
800092ce:	30 38       	mov	r8,3
800092d0:	f0 09 18 00 	cp.b	r9,r8
800092d4:	e0 81 00 73 	brne	800093ba <fat_cluster_list+0x45a>
         {
            if( fs_g_seg.u32_size_or_pos == 0)
800092d8:	4c 18       	lddpc	r8,800093dc <fat_cluster_list+0x47c>
800092da:	70 18       	ld.w	r8,r8[0x4]
800092dc:	58 08       	cp.w	r8,0
800092de:	c6 e1       	brne	800093ba <fat_cluster_list+0x45a>
            {
               // At cluster position, set the flag end of cluster list
               fs_g_seg.u32_addr = fs_g_cluster.u32_val; // Save the next cluster
800092e0:	4c 18       	lddpc	r8,800093e4 <fat_cluster_list+0x484>
800092e2:	70 19       	ld.w	r9,r8[0x4]
800092e4:	4b e8       	lddpc	r8,800093dc <fat_cluster_list+0x47c>
800092e6:	91 09       	st.w	r8[0x0],r9
               fs_g_cluster.u32_val = FS_CLUST_VAL_EOL;
800092e8:	4b f8       	lddpc	r8,800093e4 <fat_cluster_list+0x484>
800092ea:	e0 69 ff ff 	mov	r9,65535
800092ee:	ea 19 0f ff 	orh	r9,0xfff
800092f2:	91 19       	st.w	r8[0x4],r9
               if( !fat_cluster_val( FS_CLUST_VAL_WRITE ))
800092f4:	30 1c       	mov	r12,1
800092f6:	f0 1f 00 41 	mcall	800093f8 <fat_cluster_list+0x498>
800092fa:	18 98       	mov	r8,r12
800092fc:	ec 18 00 01 	eorl	r8,0x1
80009300:	5c 58       	castu.b	r8
80009302:	c0 30       	breq	80009308 <fat_cluster_list+0x3a8>
                  return false;
80009304:	30 08       	mov	r8,0
80009306:	c6 08       	rjmp	800093c6 <fat_cluster_list+0x466>
               fs_g_cluster.u32_val = fs_g_seg.u32_addr; // Restore the next cluster
80009308:	4b 58       	lddpc	r8,800093dc <fat_cluster_list+0x47c>
8000930a:	70 09       	ld.w	r9,r8[0x0]
8000930c:	4b 68       	lddpc	r8,800093e4 <fat_cluster_list+0x484>
8000930e:	91 19       	st.w	r8[0x4],r9
80009310:	c5 58       	rjmp	800093ba <fat_cluster_list+0x45a>
#endif  // FS_LEVEL_FEATURES
      }
      else
      {
         // The beginning of segment is found
         if (FS_CLUST_ACT_SEG == opt_action)
80009312:	ef 39 ff f4 	ld.ub	r9,r7[-12]
80009316:	30 18       	mov	r8,1
80009318:	f0 09 18 00 	cp.b	r9,r8
8000931c:	c0 d1       	brne	80009336 <fat_cluster_list+0x3d6>
         {
            if ( (fs_g_cluster.u32_pos+1) != fs_g_cluster.u32_val )
8000931e:	4b 28       	lddpc	r8,800093e4 <fat_cluster_list+0x484>
80009320:	70 08       	ld.w	r8,r8[0x0]
80009322:	f0 c9 ff ff 	sub	r9,r8,-1
80009326:	4b 08       	lddpc	r8,800093e4 <fat_cluster_list+0x484>
80009328:	70 18       	ld.w	r8,r8[0x4]
8000932a:	10 39       	cp.w	r9,r8
8000932c:	c0 50       	breq	80009336 <fat_cluster_list+0x3d6>
            {
               // The cluster is not a continue cluster or a invalid cluster
               fat_cache_clusterlist_update_finish();
8000932e:	f0 1f 00 32 	mcall	800093f4 <fat_cluster_list+0x494>
               return true;                              // End of segment
80009332:	30 18       	mov	r8,1
80009334:	c4 98       	rjmp	800093c6 <fat_cluster_list+0x466>
            }
         }
#if (FS_LEVEL_FEATURES > FSFEATURE_READ)
         if (FS_CLUST_ACT_CLR == opt_action)
80009336:	ef 39 ff f4 	ld.ub	r9,r7[-12]
8000933a:	30 38       	mov	r8,3
8000933c:	f0 09 18 00 	cp.b	r9,r8
80009340:	c2 21       	brne	80009384 <fat_cluster_list+0x424>
         {
            //** Clear cluster position
            fs_g_seg.u32_addr = fs_g_cluster.u32_val;    // Save the next cluster
80009342:	4a 98       	lddpc	r8,800093e4 <fat_cluster_list+0x484>
80009344:	70 19       	ld.w	r9,r8[0x4]
80009346:	4a 68       	lddpc	r8,800093dc <fat_cluster_list+0x47c>
80009348:	91 09       	st.w	r8[0x0],r9
            fs_g_cluster.u32_val = 0;                    // by default free cluster
8000934a:	4a 78       	lddpc	r8,800093e4 <fat_cluster_list+0x484>
8000934c:	30 09       	mov	r9,0
8000934e:	91 19       	st.w	r8[0x4],r9
            // If it is the first cluster (fs_g_seg.u32_size_or_pos <= fs_g_nav.u8_BPB_SecPerClus)
            // and doesn't start at the beginning of cluster (fs_g_seg.u32_size_or_pos != fs_g_nav.u8_BPB_SecPerClus)
            if (fs_g_seg.u32_size_or_pos < fs_g_nav.u8_BPB_SecPerClus)
80009350:	4a 38       	lddpc	r8,800093dc <fat_cluster_list+0x47c>
80009352:	70 19       	ld.w	r9,r8[0x4]
80009354:	4a 38       	lddpc	r8,800093e0 <fat_cluster_list+0x480>
80009356:	11 98       	ld.ub	r8,r8[0x1]
80009358:	10 39       	cp.w	r9,r8
8000935a:	c0 72       	brcc	80009368 <fat_cluster_list+0x408>
            {
               fs_g_cluster.u32_val = FS_CLUST_VAL_EOL;  // End of cluster list allocated
8000935c:	4a 28       	lddpc	r8,800093e4 <fat_cluster_list+0x484>
8000935e:	e0 69 ff ff 	mov	r9,65535
80009362:	ea 19 0f ff 	orh	r9,0xfff
80009366:	91 19       	st.w	r8[0x4],r9
            }
            if( !fat_cluster_val( FS_CLUST_VAL_WRITE ))
80009368:	30 1c       	mov	r12,1
8000936a:	f0 1f 00 24 	mcall	800093f8 <fat_cluster_list+0x498>
8000936e:	18 98       	mov	r8,r12
80009370:	ec 18 00 01 	eorl	r8,0x1
80009374:	5c 58       	castu.b	r8
80009376:	c0 30       	breq	8000937c <fat_cluster_list+0x41c>
               return false;
80009378:	30 08       	mov	r8,0
8000937a:	c2 68       	rjmp	800093c6 <fat_cluster_list+0x466>
            fs_g_cluster.u32_val = fs_g_seg.u32_addr;    // Restore the next cluster
8000937c:	49 88       	lddpc	r8,800093dc <fat_cluster_list+0x47c>
8000937e:	70 09       	ld.w	r9,r8[0x0]
80009380:	49 98       	lddpc	r8,800093e4 <fat_cluster_list+0x484>
80009382:	91 19       	st.w	r8[0x4],r9
            // !!!! because it isn't possible that MSB0( fs_g_cluster.val ) = 0xFF.
         }
#endif  // FS_LEVEL_FEATURES

         // Check the end of cluster list
         if (FS_CLUS_END == u8_cluster_status)
80009384:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80009388:	30 28       	mov	r8,2
8000938a:	f0 09 18 00 	cp.b	r9,r8
8000938e:	c0 f1       	brne	800093ac <fat_cluster_list+0x44c>
         {
#if (FS_LEVEL_FEATURES > FSFEATURE_READ)
            if (FS_CLUST_ACT_CLR == opt_action)
80009390:	ef 39 ff f4 	ld.ub	r9,r7[-12]
80009394:	30 38       	mov	r8,3
80009396:	f0 09 18 00 	cp.b	r9,r8
8000939a:	c0 51       	brne	800093a4 <fat_cluster_list+0x444>
            {
               return fat_update_fat2();
8000939c:	f0 1f 00 1c 	mcall	8000940c <fat_cluster_list+0x4ac>
800093a0:	18 98       	mov	r8,r12
800093a2:	c1 28       	rjmp	800093c6 <fat_cluster_list+0x466>
            }
#endif  // FS_LEVEL_FEATURES
            fat_cache_clusterlist_update_finish();
800093a4:	f0 1f 00 14 	mcall	800093f4 <fat_cluster_list+0x494>
            return true; // End of segment
800093a8:	30 18       	mov	r8,1
800093aa:	c0 e8       	rjmp	800093c6 <fat_cluster_list+0x466>
         }

         // Update the segment size
         fs_g_seg.u32_size_or_pos += fs_g_nav.u8_BPB_SecPerClus;
800093ac:	48 c8       	lddpc	r8,800093dc <fat_cluster_list+0x47c>
800093ae:	70 19       	ld.w	r9,r8[0x4]
800093b0:	48 c8       	lddpc	r8,800093e0 <fat_cluster_list+0x480>
800093b2:	11 98       	ld.ub	r8,r8[0x1]
800093b4:	10 09       	add	r9,r8
800093b6:	48 a8       	lddpc	r8,800093dc <fat_cluster_list+0x47c>
800093b8:	91 19       	st.w	r8[0x4],r9
      }
      // HERE, Continue to read the cluster list
      // The next cluster is the value of previous cluster
      fs_g_cluster.u32_pos = fs_g_cluster.u32_val;
800093ba:	48 b8       	lddpc	r8,800093e4 <fat_cluster_list+0x484>
800093bc:	70 19       	ld.w	r9,r8[0x4]
800093be:	48 a8       	lddpc	r8,800093e4 <fat_cluster_list+0x484>
800093c0:	91 09       	st.w	r8[0x0],r9
   }  // End of main loop
800093c2:	fe 9f fe 6f 	bral	800090a0 <fat_cluster_list+0x140>
}
800093c6:	10 9c       	mov	r12,r8
800093c8:	2f cd       	sub	sp,-16
800093ca:	e3 cd 80 80 	ldm	sp++,r7,pc
800093ce:	00 00       	add	r0,r0
800093d0:	00 00       	add	r0,r0
800093d2:	0d d8       	ld.ub	r8,r6[0x5]
800093d4:	00 00       	add	r0,r0
800093d6:	0d d4       	ld.ub	r4,r6[0x5]
800093d8:	80 00       	ld.sh	r0,r0[0x0]
800093da:	b5 d8       	cbr	r8,0x15
800093dc:	00 00       	add	r0,r0
800093de:	0e 30       	cp.w	r0,r7
800093e0:	00 00       	add	r0,r0
800093e2:	0d 88       	ld.ub	r8,r6[0x0]
800093e4:	00 00       	add	r0,r0
800093e6:	0e 28       	rsub	r8,r7
800093e8:	80 00       	ld.sh	r0,r0[0x0]
800093ea:	9d 28       	st.w	lr[0x8],r8
800093ec:	80 00       	ld.sh	r0,r0[0x0]
800093ee:	99 f4       	st.w	r12[0x3c],r4
800093f0:	80 00       	ld.sh	r0,r0[0x0]
800093f2:	c5 c0       	breq	800094aa <fat_cluster_val+0x9a>
800093f4:	80 00       	ld.sh	r0,r0[0x0]
800093f6:	9b 58       	st.w	sp[0x14],r8
800093f8:	80 00       	ld.sh	r0,r0[0x0]
800093fa:	94 10       	ld.sh	r0,r10[0x2]
800093fc:	80 00       	ld.sh	r0,r0[0x0]
800093fe:	98 60       	ld.sh	r0,r12[0xc]
80009400:	80 00       	ld.sh	r0,r0[0x0]
80009402:	99 48       	st.w	r12[0x10],r8
80009404:	00 00       	add	r0,r0
80009406:	0d da       	ld.ub	r10,r6[0x5]
80009408:	00 00       	add	r0,r0
8000940a:	0b 5c       	ld.sh	r12,--r5
8000940c:	80 00       	ld.sh	r0,r0[0x0]
8000940e:	c5 e0       	breq	800094ca <fat_cluster_val+0xba>

80009410 <fat_cluster_val>:
//!   fs_g_u16_pos_fat        position in FAT of the cluster to read or write
//!                           value init in case of the fat_cluster_readnext() routine is used after
//! @endverbatim
//!
bool  fat_cluster_val( bool b_mode )
{
80009410:	eb cd 40 80 	pushm	r7,lr
80009414:	1a 97       	mov	r7,sp
80009416:	20 4d       	sub	sp,16
80009418:	18 98       	mov	r8,r12
8000941a:	ef 68 ff f0 	st.b	r7[-16],r8
   _MEM_TYPE_FAST_ uint32_t   u32_offset_fat =0;
8000941e:	30 08       	mov	r8,0
80009420:	ef 48 ff f4 	st.w	r7[-12],r8
   _MEM_TYPE_FAST_ uint8_t    u8_data1, u8_data2,u8_data3,u8_data4;
   _MEM_TYPE_FAST_ PTR_CACHE u8_ptr_cluster;

   //**** Compute the cluster position in FAT (sector address & position in sector)
   if ( Is_fat32 )
80009424:	fe f8 04 14 	ld.w	r8,pc[1044]
80009428:	11 89       	ld.ub	r9,r8[0x0]
8000942a:	30 38       	mov	r8,3
8000942c:	f0 09 18 00 	cp.b	r9,r8
80009430:	c1 41       	brne	80009458 <fat_cluster_val+0x48>
   {
      // FAT 32
      // Optimization of -> u32_offset_fat = fs_g_cluster.pos * 4 / FS_CACHE_SIZE;
      // Optimization of -> u32_offset_fat = fs_g_cluster.pos / 128
      u32_offset_fat = fs_g_cluster.u32_pos >> (8-1);
80009432:	fe f8 04 0a 	ld.w	r8,pc[1034]
80009436:	70 08       	ld.w	r8,r8[0x0]
80009438:	a7 98       	lsr	r8,0x7
8000943a:	ef 48 ff f4 	st.w	r7[-12],r8

      // Optimization of -> fs_g_u16_pos_fat = (fs_g_cluster.u32_pos * 4) % FS_CACHE_SIZE;
      // Optimization of -> fs_g_u16_pos_fat = (fs_g_cluster.u32_pos % 128) * 4
      fs_g_u16_pos_fat = ((uint16_t)(LSB0(fs_g_cluster.u32_pos) & 0x7F))<< 2;
8000943e:	fe f8 03 fe 	ld.w	r8,pc[1022]
80009442:	2f d8       	sub	r8,-3
80009444:	11 88       	ld.ub	r8,r8[0x0]
80009446:	5c 88       	casts.h	r8
80009448:	f1 d8 c0 07 	bfextu	r8,r8,0x0,0x7
8000944c:	a3 68       	lsl	r8,0x2
8000944e:	5c 88       	casts.h	r8
80009450:	fe f9 03 f0 	ld.w	r9,pc[1008]
80009454:	b2 08       	st.h	r9[0x0],r8
80009456:	c4 08       	rjmp	800094d6 <fat_cluster_val+0xc6>
   }
   else if ( Is_fat16 )
80009458:	fe f8 03 e0 	ld.w	r8,pc[992]
8000945c:	11 89       	ld.ub	r9,r8[0x0]
8000945e:	30 28       	mov	r8,2
80009460:	f0 09 18 00 	cp.b	r9,r8
80009464:	c1 11       	brne	80009486 <fat_cluster_val+0x76>
   {
      // FAT 16
      // Optimization of -> u32_offset_fat = fs_g_cluster.u32_pos * 2 / FS_CACHE_SIZE = fs_g_cluster.u32_pos / 256;
      u32_offset_fat = LSB1(fs_g_cluster.u32_pos);
80009466:	fe f8 03 d6 	ld.w	r8,pc[982]
8000946a:	2f e8       	sub	r8,-2
8000946c:	11 88       	ld.ub	r8,r8[0x0]
8000946e:	ef 48 ff f4 	st.w	r7[-12],r8
      // Optimization of -> fs_g_u16_pos_fat = (fs_g_cluster.u32_pos * 2) % FS_CACHE_SIZE;
      // Optimization of -> fs_g_u16_pos_fat = (fs_g_cluster.u32_pos % 256) * 2
      fs_g_u16_pos_fat = ((uint16_t)LSB0(fs_g_cluster.u32_pos)) <<1;
80009472:	fe f8 03 ca 	ld.w	r8,pc[970]
80009476:	2f d8       	sub	r8,-3
80009478:	11 88       	ld.ub	r8,r8[0x0]
8000947a:	a1 78       	lsl	r8,0x1
8000947c:	5c 88       	casts.h	r8
8000947e:	fe f9 03 c2 	ld.w	r9,pc[962]
80009482:	b2 08       	st.h	r9[0x0],r8
80009484:	c2 98       	rjmp	800094d6 <fat_cluster_val+0xc6>
   }
   else if ( Is_fat12 )
80009486:	fe f8 03 b2 	ld.w	r8,pc[946]
8000948a:	11 89       	ld.ub	r9,r8[0x0]
8000948c:	30 18       	mov	r8,1
8000948e:	f0 09 18 00 	cp.b	r9,r8
80009492:	c2 21       	brne	800094d6 <fat_cluster_val+0xc6>
   {
      // FAT 12
      // Optimization of -> fs_g_u16_pos_fat = fs_g_cluster.u32_pos + (fs_g_cluster.u32_pos/ 2)
      fs_g_u16_pos_fat = (uint16_t)fs_g_cluster.u32_pos + ((uint16_t)fs_g_cluster.u32_pos >>1);
80009494:	fe f8 03 a8 	ld.w	r8,pc[936]
80009498:	70 08       	ld.w	r8,r8[0x0]
8000949a:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
8000949e:	fe f8 03 9e 	ld.w	r8,pc[926]
800094a2:	70 08       	ld.w	r8,r8[0x0]
800094a4:	5c 88       	casts.h	r8
800094a6:	5c 78       	castu.h	r8
800094a8:	a1 98       	lsr	r8,0x1
800094aa:	5c 88       	casts.h	r8
800094ac:	f2 08 00 08 	add	r8,r9,r8
800094b0:	5c 88       	casts.h	r8
800094b2:	fe f9 03 8e 	ld.w	r9,pc[910]
800094b6:	b2 08       	st.h	r9[0x0],r8
      // Optimization of -> u32_offset_fat = fs_g_cluster.u32_pos / FS_CACHE_SIZE
      u32_offset_fat = MSB(fs_g_u16_pos_fat) >> 1;
800094b8:	fe f8 03 88 	ld.w	r8,pc[904]
800094bc:	11 88       	ld.ub	r8,r8[0x0]
800094be:	a1 98       	lsr	r8,0x1
800094c0:	5c 58       	castu.b	r8
800094c2:	ef 48 ff f4 	st.w	r7[-12],r8
      // Optimization of -> fs_g_u16_pos_fat = fs_g_u16_pos_fat % FS_CACHE_SIZE
      MSB( fs_g_u16_pos_fat ) &= 0x01;
800094c6:	fe f9 03 7a 	ld.w	r9,pc[890]
800094ca:	fe f8 03 76 	ld.w	r8,pc[886]
800094ce:	11 88       	ld.ub	r8,r8[0x0]
800094d0:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800094d4:	b2 88       	st.b	r9[0x0],r8
   }

#if (FS_LEVEL_FEATURES > FSFEATURE_READ)
   if (b_mode)
800094d6:	ef 39 ff f0 	ld.ub	r9,r7[-16]
800094da:	30 08       	mov	r8,0
800094dc:	f0 09 18 00 	cp.b	r9,r8
800094e0:	c3 a0       	breq	80009554 <fat_cluster_val+0x144>
   {
      // Update information about FAT modification
      if( fs_g_u32_first_mod_fat > u32_offset_fat )
800094e2:	fe f8 03 62 	ld.w	r8,pc[866]
800094e6:	70 09       	ld.w	r9,r8[0x0]
800094e8:	ee f8 ff f4 	ld.w	r8,r7[-12]
800094ec:	10 39       	cp.w	r9,r8
800094ee:	e0 88 00 07 	brls	800094fc <fat_cluster_val+0xec>
      {
         fs_g_u32_first_mod_fat = u32_offset_fat;
800094f2:	fe f8 03 52 	ld.w	r8,pc[850]
800094f6:	ee f9 ff f4 	ld.w	r9,r7[-12]
800094fa:	91 09       	st.w	r8[0x0],r9
      }
      if( fs_g_u32_last_mod_fat < u32_offset_fat )
800094fc:	fe f8 03 4c 	ld.w	r8,pc[844]
80009500:	70 09       	ld.w	r9,r8[0x0]
80009502:	ee f8 ff f4 	ld.w	r8,r7[-12]
80009506:	10 39       	cp.w	r9,r8
80009508:	c0 62       	brcc	80009514 <fat_cluster_val+0x104>
      {
         fs_g_u32_last_mod_fat = u32_offset_fat;
8000950a:	fe f8 03 3e 	ld.w	r8,pc[830]
8000950e:	ee f9 ff f4 	ld.w	r9,r7[-12]
80009512:	91 09       	st.w	r8[0x0],r9
      }
      if ( Is_fat12 )
80009514:	fe f8 03 24 	ld.w	r8,pc[804]
80009518:	11 89       	ld.ub	r9,r8[0x0]
8000951a:	30 18       	mov	r8,1
8000951c:	f0 09 18 00 	cp.b	r9,r8
80009520:	c1 a1       	brne	80009554 <fat_cluster_val+0x144>
      {  // A cluster may be stored on two sectors
         if( fs_g_u16_pos_fat == (FS_CACHE_SIZE-1) )
80009522:	fe f8 03 1e 	ld.w	r8,pc[798]
80009526:	90 09       	ld.sh	r9,r8[0x0]
80009528:	e0 68 01 ff 	mov	r8,511
8000952c:	f0 09 19 00 	cp.h	r9,r8
80009530:	c1 21       	brne	80009554 <fat_cluster_val+0x144>
         {  // Count the next FAT sector
            if( fs_g_u32_last_mod_fat < (u32_offset_fat+1) )
80009532:	ee f8 ff f4 	ld.w	r8,r7[-12]
80009536:	f0 c9 ff ff 	sub	r9,r8,-1
8000953a:	fe f8 03 0e 	ld.w	r8,pc[782]
8000953e:	70 08       	ld.w	r8,r8[0x0]
80009540:	10 39       	cp.w	r9,r8
80009542:	e0 88 00 09 	brls	80009554 <fat_cluster_val+0x144>
            {
               fs_g_u32_last_mod_fat = (u32_offset_fat+1);
80009546:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000954a:	f0 c9 ff ff 	sub	r9,r8,-1
8000954e:	fe f8 02 fa 	ld.w	r8,pc[762]
80009552:	91 09       	st.w	r8[0x0],r9
      }
   }
#endif  // FS_LEVEL_FEATURES

   //**** Read cluster sector in FAT
   fs_gu32_addrsector = fs_g_nav.u32_ptr_fat + u32_offset_fat;   // Computed logical sector address
80009554:	fe f8 02 f8 	ld.w	r8,pc[760]
80009558:	70 49       	ld.w	r9,r8[0x10]
8000955a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000955e:	10 09       	add	r9,r8
80009560:	fe f8 02 f0 	ld.w	r8,pc[752]
80009564:	91 09       	st.w	r8[0x0],r9
   if( !fat_cache_read_sector( true ))
80009566:	30 1c       	mov	r12,1
80009568:	f0 1f 00 bb 	mcall	80009854 <fat_cluster_val+0x444>
8000956c:	18 98       	mov	r8,r12
8000956e:	ec 18 00 01 	eorl	r8,0x1
80009572:	5c 58       	castu.b	r8
80009574:	c0 40       	breq	8000957c <fat_cluster_val+0x16c>
      return false;
80009576:	30 08       	mov	r8,0
80009578:	e0 8f 01 5c 	bral	80009830 <fat_cluster_val+0x420>

   // Read cluster information
   u8_ptr_cluster = &fs_g_sector[fs_g_u16_pos_fat];
8000957c:	fe f8 02 c4 	ld.w	r8,pc[708]
80009580:	90 08       	ld.sh	r8,r8[0x0]
80009582:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
80009586:	fe f8 02 d2 	ld.w	r8,pc[722]
8000958a:	f2 08 00 08 	add	r8,r9,r8
8000958e:	ef 48 ff fc 	st.w	r7[-4],r8
   u8_data1 = u8_ptr_cluster[0];
80009592:	ee f8 ff fc 	ld.w	r8,r7[-4]
80009596:	11 88       	ld.ub	r8,r8[0x0]
80009598:	ef 68 ff f8 	st.b	r7[-8],r8
   // Remark: if (fs_g_u16_pos_fat+1)=512 then it isn't a mistake, because this value will be erase in next lines
   u8_data2 = u8_ptr_cluster[1];
8000959c:	ee f8 ff fc 	ld.w	r8,r7[-4]
800095a0:	2f f8       	sub	r8,-1
800095a2:	11 88       	ld.ub	r8,r8[0x0]
800095a4:	ef 68 ff f9 	st.b	r7[-7],r8
   u8_data3 = u8_ptr_cluster[2];
800095a8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800095ac:	2f e8       	sub	r8,-2
800095ae:	11 88       	ld.ub	r8,r8[0x0]
800095b0:	ef 68 ff fa 	st.b	r7[-6],r8
   u8_data4 = u8_ptr_cluster[3];
800095b4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800095b8:	2f d8       	sub	r8,-3
800095ba:	11 88       	ld.ub	r8,r8[0x0]
800095bc:	ef 68 ff fb 	st.b	r7[-5],r8

   if ( Is_fat12 )
800095c0:	fe f8 02 78 	ld.w	r8,pc[632]
800095c4:	11 89       	ld.ub	r9,r8[0x0]
800095c6:	30 18       	mov	r8,1
800095c8:	f0 09 18 00 	cp.b	r9,r8
800095cc:	c2 01       	brne	8000960c <fat_cluster_val+0x1fc>
   {   // A cluster may be stored on two sectors
      if(  fs_g_u16_pos_fat == (FS_CACHE_SIZE-1) )
800095ce:	fe f8 02 72 	ld.w	r8,pc[626]
800095d2:	90 09       	ld.sh	r9,r8[0x0]
800095d4:	e0 68 01 ff 	mov	r8,511
800095d8:	f0 09 19 00 	cp.h	r9,r8
800095dc:	c1 81       	brne	8000960c <fat_cluster_val+0x1fc>
      {  // Go to next sector
         fs_gu32_addrsector++;
800095de:	fe f8 02 72 	ld.w	r8,pc[626]
800095e2:	70 08       	ld.w	r8,r8[0x0]
800095e4:	f0 c9 ff ff 	sub	r9,r8,-1
800095e8:	fe f8 02 68 	ld.w	r8,pc[616]
800095ec:	91 09       	st.w	r8[0x0],r9
         if( !fat_cache_read_sector( true ))
800095ee:	30 1c       	mov	r12,1
800095f0:	f0 1f 00 99 	mcall	80009854 <fat_cluster_val+0x444>
800095f4:	18 98       	mov	r8,r12
800095f6:	ec 18 00 01 	eorl	r8,0x1
800095fa:	5c 58       	castu.b	r8
800095fc:	c0 30       	breq	80009602 <fat_cluster_val+0x1f2>
           return false;
800095fe:	30 08       	mov	r8,0
80009600:	c1 89       	rjmp	80009830 <fat_cluster_val+0x420>
         u8_data2 = fs_g_sector[0];
80009602:	fe f8 02 56 	ld.w	r8,pc[598]
80009606:	11 88       	ld.ub	r8,r8[0x0]
80009608:	ef 68 ff f9 	st.b	r7[-7],r8
      }
   }

   if (false == b_mode)
8000960c:	ef 38 ff f0 	ld.ub	r8,r7[-16]
80009610:	ec 18 00 01 	eorl	r8,0x1
80009614:	5c 58       	castu.b	r8
80009616:	c6 e0       	breq	800096f2 <fat_cluster_val+0x2e2>
   {
      //**** Read the cluster value
      LSB0( fs_g_cluster.u32_val ) = u8_data1;  // FAT 12,16,32
80009618:	fe f8 02 24 	ld.w	r8,pc[548]
8000961c:	2f c8       	sub	r8,-4
8000961e:	f0 c9 ff fd 	sub	r9,r8,-3
80009622:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80009626:	b2 88       	st.b	r9[0x0],r8
      LSB1( fs_g_cluster.u32_val ) = u8_data2;  // FAT 12,16,32
80009628:	fe f8 02 14 	ld.w	r8,pc[532]
8000962c:	2f c8       	sub	r8,-4
8000962e:	f0 c9 ff fe 	sub	r9,r8,-2
80009632:	ef 38 ff f9 	ld.ub	r8,r7[-7]
80009636:	b2 88       	st.b	r9[0x0],r8

      if ( Is_fat32 )
80009638:	fe f8 02 00 	ld.w	r8,pc[512]
8000963c:	11 89       	ld.ub	r9,r8[0x0]
8000963e:	30 38       	mov	r8,3
80009640:	f0 09 18 00 	cp.b	r9,r8
80009644:	c1 11       	brne	80009666 <fat_cluster_val+0x256>
      {  // FAT 32
         LSB2( fs_g_cluster.u32_val ) = u8_data3;
80009646:	4f e8       	lddpc	r8,8000983c <fat_cluster_val+0x42c>
80009648:	2f c8       	sub	r8,-4
8000964a:	f0 c9 ff ff 	sub	r9,r8,-1
8000964e:	ef 38 ff fa 	ld.ub	r8,r7[-6]
80009652:	b2 88       	st.b	r9[0x0],r8
         LSB3( fs_g_cluster.u32_val ) = u8_data4 & 0x0F; // The high 4 bits are reserved
80009654:	4f a8       	lddpc	r8,8000983c <fat_cluster_val+0x42c>
80009656:	f0 c9 ff fc 	sub	r9,r8,-4
8000965a:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000965e:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80009662:	b2 88       	st.b	r9[0x0],r8
80009664:	ce 58       	rjmp	8000982e <fat_cluster_val+0x41e>
      }
      else
      {  // FAT 12 & 16 don't use the high bytes
         LSB2( fs_g_cluster.u32_val ) = 0;
80009666:	4f 68       	lddpc	r8,8000983c <fat_cluster_val+0x42c>
80009668:	2f c8       	sub	r8,-4
8000966a:	f0 c9 ff ff 	sub	r9,r8,-1
8000966e:	30 08       	mov	r8,0
80009670:	b2 88       	st.b	r9[0x0],r8
         LSB3( fs_g_cluster.u32_val ) = 0;
80009672:	4f 38       	lddpc	r8,8000983c <fat_cluster_val+0x42c>
80009674:	f0 c9 ff fc 	sub	r9,r8,-4
80009678:	30 08       	mov	r8,0
8000967a:	b2 88       	st.b	r9[0x0],r8

         // FAT 12 translate 16bits value to 12bits
         if ( Is_fat12 )
8000967c:	4e f8       	lddpc	r8,80009838 <fat_cluster_val+0x428>
8000967e:	11 89       	ld.ub	r9,r8[0x0]
80009680:	30 18       	mov	r8,1
80009682:	f0 09 18 00 	cp.b	r9,r8
80009686:	e0 81 00 d4 	brne	8000982e <fat_cluster_val+0x41e>
         {
            if ( 0x01 & LSB0(fs_g_cluster.u32_pos) )
8000968a:	4e d8       	lddpc	r8,8000983c <fat_cluster_val+0x42c>
8000968c:	2f d8       	sub	r8,-3
8000968e:	11 88       	ld.ub	r8,r8[0x0]
80009690:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80009694:	5c 58       	castu.b	r8
80009696:	c2 20       	breq	800096da <fat_cluster_val+0x2ca>
            {  // Read cluster is ODD
               LSB0( fs_g_cluster.u32_val ) = (LSB1( fs_g_cluster.u32_val ) <<4 ) + (LSB0( fs_g_cluster.u32_val ) >>4 );
80009698:	4e 98       	lddpc	r8,8000983c <fat_cluster_val+0x42c>
8000969a:	2f c8       	sub	r8,-4
8000969c:	f0 ca ff fd 	sub	r10,r8,-3
800096a0:	4e 78       	lddpc	r8,8000983c <fat_cluster_val+0x42c>
800096a2:	2f c8       	sub	r8,-4
800096a4:	2f e8       	sub	r8,-2
800096a6:	11 88       	ld.ub	r8,r8[0x0]
800096a8:	a5 68       	lsl	r8,0x4
800096aa:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800096ae:	4e 48       	lddpc	r8,8000983c <fat_cluster_val+0x42c>
800096b0:	2f c8       	sub	r8,-4
800096b2:	2f d8       	sub	r8,-3
800096b4:	11 88       	ld.ub	r8,r8[0x0]
800096b6:	a5 88       	lsr	r8,0x4
800096b8:	5c 58       	castu.b	r8
800096ba:	f2 08 00 08 	add	r8,r9,r8
800096be:	5c 58       	castu.b	r8
800096c0:	b4 88       	st.b	r10[0x0],r8
               LSB1( fs_g_cluster.u32_val ) =  LSB1( fs_g_cluster.u32_val ) >>4 ;
800096c2:	4d f8       	lddpc	r8,8000983c <fat_cluster_val+0x42c>
800096c4:	2f c8       	sub	r8,-4
800096c6:	f0 c9 ff fe 	sub	r9,r8,-2
800096ca:	4d d8       	lddpc	r8,8000983c <fat_cluster_val+0x42c>
800096cc:	2f c8       	sub	r8,-4
800096ce:	2f e8       	sub	r8,-2
800096d0:	11 88       	ld.ub	r8,r8[0x0]
800096d2:	a5 88       	lsr	r8,0x4
800096d4:	5c 58       	castu.b	r8
800096d6:	b2 88       	st.b	r9[0x0],r8
800096d8:	ca b8       	rjmp	8000982e <fat_cluster_val+0x41e>
            }
            else
            {  // Read cluster is EVEN
               LSB1( fs_g_cluster.u32_val ) &= 0x0F;
800096da:	4d 98       	lddpc	r8,8000983c <fat_cluster_val+0x42c>
800096dc:	2f c8       	sub	r8,-4
800096de:	f0 c9 ff fe 	sub	r9,r8,-2
800096e2:	4d 78       	lddpc	r8,8000983c <fat_cluster_val+0x42c>
800096e4:	2f c8       	sub	r8,-4
800096e6:	2f e8       	sub	r8,-2
800096e8:	11 88       	ld.ub	r8,r8[0x0]
800096ea:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
800096ee:	b2 88       	st.b	r9[0x0],r8
800096f0:	c9 f8       	rjmp	8000982e <fat_cluster_val+0x41e>
         }
      }
   } else {
#if (FS_LEVEL_FEATURES > FSFEATURE_READ)
      //**** Write the cluster value
      if ( Is_fat12 )
800096f2:	4d 28       	lddpc	r8,80009838 <fat_cluster_val+0x428>
800096f4:	11 89       	ld.ub	r9,r8[0x0]
800096f6:	30 18       	mov	r8,1
800096f8:	f0 09 18 00 	cp.b	r9,r8
800096fc:	c6 11       	brne	800097be <fat_cluster_val+0x3ae>
      {
         // FAT 12, translate cluster value
         if ( 0x01 & LSB0(fs_g_cluster.u32_pos) )
800096fe:	4d 08       	lddpc	r8,8000983c <fat_cluster_val+0x42c>
80009700:	2f d8       	sub	r8,-3
80009702:	11 88       	ld.ub	r8,r8[0x0]
80009704:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80009708:	5c 58       	castu.b	r8
8000970a:	c2 00       	breq	8000974a <fat_cluster_val+0x33a>
         {  // Cluster writing is ODD
            u8_data1 = (u8_data1 & 0x0F) + (LSB0( fs_g_cluster.u32_val )<<4);
8000970c:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80009710:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80009714:	4c a9       	lddpc	r9,8000983c <fat_cluster_val+0x42c>
80009716:	2f c9       	sub	r9,-4
80009718:	2f d9       	sub	r9,-3
8000971a:	13 89       	ld.ub	r9,r9[0x0]
8000971c:	a5 69       	lsl	r9,0x4
8000971e:	5c 59       	castu.b	r9
80009720:	12 08       	add	r8,r9
80009722:	ef 68 ff f8 	st.b	r7[-8],r8
            u8_data2 = (LSB1( fs_g_cluster.u32_val )<<4) + (LSB0( fs_g_cluster.u32_val )>>4) ;
80009726:	4c 68       	lddpc	r8,8000983c <fat_cluster_val+0x42c>
80009728:	2f c8       	sub	r8,-4
8000972a:	2f e8       	sub	r8,-2
8000972c:	11 88       	ld.ub	r8,r8[0x0]
8000972e:	a5 68       	lsl	r8,0x4
80009730:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80009734:	4c 28       	lddpc	r8,8000983c <fat_cluster_val+0x42c>
80009736:	2f c8       	sub	r8,-4
80009738:	2f d8       	sub	r8,-3
8000973a:	11 88       	ld.ub	r8,r8[0x0]
8000973c:	a5 88       	lsr	r8,0x4
8000973e:	5c 58       	castu.b	r8
80009740:	f2 08 00 08 	add	r8,r9,r8
80009744:	ef 68 ff f9 	st.b	r7[-7],r8
80009748:	c1 58       	rjmp	80009772 <fat_cluster_val+0x362>
         } else {
            // Cluster writing is EVEN
            u8_data1 = LSB0( fs_g_cluster.u32_val );
8000974a:	4b d8       	lddpc	r8,8000983c <fat_cluster_val+0x42c>
8000974c:	2f c8       	sub	r8,-4
8000974e:	2f d8       	sub	r8,-3
80009750:	11 88       	ld.ub	r8,r8[0x0]
80009752:	ef 68 ff f8 	st.b	r7[-8],r8
            u8_data2 = (u8_data2 & 0xF0) + (LSB1( fs_g_cluster.u32_val ) & 0x0F) ;
80009756:	ef 39 ff f9 	ld.ub	r9,r7[-7]
8000975a:	e2 19 00 f0 	andl	r9,0xf0,COH
8000975e:	4b 88       	lddpc	r8,8000983c <fat_cluster_val+0x42c>
80009760:	2f c8       	sub	r8,-4
80009762:	2f e8       	sub	r8,-2
80009764:	11 88       	ld.ub	r8,r8[0x0]
80009766:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
8000976a:	f2 08 00 08 	add	r8,r9,r8
8000976e:	ef 68 ff f9 	st.b	r7[-7],r8
         }

         // A cluster may be stored on two sectors
         if( fs_g_u16_pos_fat == (FS_CACHE_SIZE-1) )
80009772:	4b 48       	lddpc	r8,80009840 <fat_cluster_val+0x430>
80009774:	90 09       	ld.sh	r9,r8[0x0]
80009776:	e0 68 01 ff 	mov	r8,511
8000977a:	f0 09 19 00 	cp.h	r9,r8
8000977e:	c4 a1       	brne	80009812 <fat_cluster_val+0x402>
         {
            fs_g_sector[0] = u8_data2;
80009780:	4b 69       	lddpc	r9,80009858 <fat_cluster_val+0x448>
80009782:	ef 38 ff f9 	ld.ub	r8,r7[-7]
80009786:	b2 88       	st.b	r9[0x0],r8
            fat_cache_mark_sector_as_dirty();
80009788:	f0 1f 00 35 	mcall	8000985c <fat_cluster_val+0x44c>
            // Go to previous sector
            fs_gu32_addrsector--;
8000978c:	4b 18       	lddpc	r8,80009850 <fat_cluster_val+0x440>
8000978e:	70 08       	ld.w	r8,r8[0x0]
80009790:	f0 c9 00 01 	sub	r9,r8,1
80009794:	4a f8       	lddpc	r8,80009850 <fat_cluster_val+0x440>
80009796:	91 09       	st.w	r8[0x0],r9
            if( !fat_cache_read_sector( true ))
80009798:	30 1c       	mov	r12,1
8000979a:	f0 1f 00 2f 	mcall	80009854 <fat_cluster_val+0x444>
8000979e:	18 98       	mov	r8,r12
800097a0:	ec 18 00 01 	eorl	r8,0x1
800097a4:	5c 58       	castu.b	r8
800097a6:	c0 30       	breq	800097ac <fat_cluster_val+0x39c>
              return false;
800097a8:	30 08       	mov	r8,0
800097aa:	c4 38       	rjmp	80009830 <fat_cluster_val+0x420>
            // Modify the previous sector
            fs_g_sector[ FS_CACHE_SIZE-1 ] = u8_data1;
800097ac:	4a b9       	lddpc	r9,80009858 <fat_cluster_val+0x448>
800097ae:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800097b2:	f3 68 01 ff 	st.b	r9[511],r8
            fat_cache_mark_sector_as_dirty();
800097b6:	f0 1f 00 2a 	mcall	8000985c <fat_cluster_val+0x44c>
            return true;
800097ba:	30 18       	mov	r8,1
800097bc:	c3 a8       	rjmp	80009830 <fat_cluster_val+0x420>
         }
      }
      else
      {
         // FAT 16 & 32
         u8_data1 = LSB0( fs_g_cluster.u32_val );
800097be:	4a 08       	lddpc	r8,8000983c <fat_cluster_val+0x42c>
800097c0:	2f c8       	sub	r8,-4
800097c2:	2f d8       	sub	r8,-3
800097c4:	11 88       	ld.ub	r8,r8[0x0]
800097c6:	ef 68 ff f8 	st.b	r7[-8],r8
         u8_data2 = LSB1( fs_g_cluster.u32_val );
800097ca:	49 d8       	lddpc	r8,8000983c <fat_cluster_val+0x42c>
800097cc:	2f c8       	sub	r8,-4
800097ce:	2f e8       	sub	r8,-2
800097d0:	11 88       	ld.ub	r8,r8[0x0]
800097d2:	ef 68 ff f9 	st.b	r7[-7],r8
         if ( Is_fat32 )
800097d6:	49 98       	lddpc	r8,80009838 <fat_cluster_val+0x428>
800097d8:	11 89       	ld.ub	r9,r8[0x0]
800097da:	30 38       	mov	r8,3
800097dc:	f0 09 18 00 	cp.b	r9,r8
800097e0:	c1 91       	brne	80009812 <fat_cluster_val+0x402>
         {  // FAT 32
            u8_ptr_cluster[2] = LSB2( fs_g_cluster.u32_val );
800097e2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800097e6:	f0 c9 ff fe 	sub	r9,r8,-2
800097ea:	49 58       	lddpc	r8,8000983c <fat_cluster_val+0x42c>
800097ec:	2f c8       	sub	r8,-4
800097ee:	2f f8       	sub	r8,-1
800097f0:	11 88       	ld.ub	r8,r8[0x0]
800097f2:	b2 88       	st.b	r9[0x0],r8
            u8_ptr_cluster[3] = LSB3( fs_g_cluster.u32_val ) + (u8_data4 & 0xF0); // The high 4 bits are reserved
800097f4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800097f8:	f0 ca ff fd 	sub	r10,r8,-3
800097fc:	49 08       	lddpc	r8,8000983c <fat_cluster_val+0x42c>
800097fe:	2f c8       	sub	r8,-4
80009800:	11 89       	ld.ub	r9,r8[0x0]
80009802:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80009806:	e2 18 00 f0 	andl	r8,0xf0,COH
8000980a:	f2 08 00 08 	add	r8,r9,r8
8000980e:	5c 58       	castu.b	r8
80009810:	b4 88       	st.b	r10[0x0],r8
         }
      }
      // Here for FAT 32, 16 & 12 (only if the cluster values are in the same sector)
      u8_ptr_cluster[0] = u8_data1;
80009812:	ee f9 ff fc 	ld.w	r9,r7[-4]
80009816:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000981a:	b2 88       	st.b	r9[0x0],r8
      u8_ptr_cluster[1] = u8_data2;
8000981c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80009820:	f0 c9 ff ff 	sub	r9,r8,-1
80009824:	ef 38 ff f9 	ld.ub	r8,r7[-7]
80009828:	b2 88       	st.b	r9[0x0],r8
      fat_cache_mark_sector_as_dirty();
8000982a:	f0 1f 00 0d 	mcall	8000985c <fat_cluster_val+0x44c>
      fs_g_status = FS_ERR_COMMAND;
      return false;
#endif  // FS_LEVEL_FEATURES
   }

   return true;
8000982e:	30 18       	mov	r8,1
}
80009830:	10 9c       	mov	r12,r8
80009832:	2f cd       	sub	sp,-16
80009834:	e3 cd 80 80 	ldm	sp++,r7,pc
80009838:	00 00       	add	r0,r0
8000983a:	0d d4       	ld.ub	r4,r6[0x5]
8000983c:	00 00       	add	r0,r0
8000983e:	0e 28       	rsub	r8,r7
80009840:	00 00       	add	r0,r0
80009842:	0b 58       	ld.sh	r8,--r5
80009844:	00 00       	add	r0,r0
80009846:	0d bc       	ld.ub	r12,r6[0x3]
80009848:	00 00       	add	r0,r0
8000984a:	0b 84       	ld.ub	r4,r5[0x0]
8000984c:	00 00       	add	r0,r0
8000984e:	0d 88       	ld.ub	r8,r6[0x0]
80009850:	00 00       	add	r0,r0
80009852:	0b 44       	ld.w	r4,--r5
80009854:	80 00       	ld.sh	r0,r0[0x0]
80009856:	aa c8       	st.b	r5[0x4],r8
80009858:	00 00       	add	r0,r0
8000985a:	0b 88       	ld.ub	r8,r5[0x0]
8000985c:	80 00       	ld.sh	r0,r0[0x0]
8000985e:	ab b8       	sbr	r8,0xb

80009860 <fat_cluster_readnext>:
//!   fs_g_u16_pos_fat        read cluster position in FAT
//!   fs_g_cluster.u32_val    value of cluster read
//! @endverbatim
//!
bool  fat_cluster_readnext( void )
{
80009860:	eb cd 40 80 	pushm	r7,lr
80009864:	1a 97       	mov	r7,sp
   // Compute the next cluster position in FAT
   if ( Is_fat32 )
80009866:	4b 38       	lddpc	r8,80009930 <fat_cluster_readnext+0xd0>
80009868:	11 89       	ld.ub	r9,r8[0x0]
8000986a:	30 38       	mov	r8,3
8000986c:	f0 09 18 00 	cp.b	r9,r8
80009870:	c0 81       	brne	80009880 <fat_cluster_readnext+0x20>
   {
      fs_g_u16_pos_fat += 4;
80009872:	4b 18       	lddpc	r8,80009934 <fat_cluster_readnext+0xd4>
80009874:	90 08       	ld.sh	r8,r8[0x0]
80009876:	2f c8       	sub	r8,-4
80009878:	5c 88       	casts.h	r8
8000987a:	4a f9       	lddpc	r9,80009934 <fat_cluster_readnext+0xd4>
8000987c:	b2 08       	st.h	r9[0x0],r8
8000987e:	c0 78       	rjmp	8000988c <fat_cluster_readnext+0x2c>
   }else{
      // Is_fat16
      fs_g_u16_pos_fat += 2;
80009880:	4a d8       	lddpc	r8,80009934 <fat_cluster_readnext+0xd4>
80009882:	90 08       	ld.sh	r8,r8[0x0]
80009884:	2f e8       	sub	r8,-2
80009886:	5c 88       	casts.h	r8
80009888:	4a b9       	lddpc	r9,80009934 <fat_cluster_readnext+0xd4>
8000988a:	b2 08       	st.h	r9[0x0],r8
   }

   // Check if next cluster is in internal cache
   if( FS_CACHE_SIZE == fs_g_u16_pos_fat )
8000988c:	4a a8       	lddpc	r8,80009934 <fat_cluster_readnext+0xd4>
8000988e:	90 09       	ld.sh	r9,r8[0x0]
80009890:	e0 68 02 00 	mov	r8,512
80009894:	f0 09 19 00 	cp.h	r9,r8
80009898:	c1 41       	brne	800098c0 <fat_cluster_readnext+0x60>
   {
      // Update cache
      fs_g_u16_pos_fat = 0;
8000989a:	4a 79       	lddpc	r9,80009934 <fat_cluster_readnext+0xd4>
8000989c:	30 08       	mov	r8,0
8000989e:	b2 08       	st.h	r9[0x0],r8
      fs_gu32_addrsector++;
800098a0:	4a 68       	lddpc	r8,80009938 <fat_cluster_readnext+0xd8>
800098a2:	70 08       	ld.w	r8,r8[0x0]
800098a4:	f0 c9 ff ff 	sub	r9,r8,-1
800098a8:	4a 48       	lddpc	r8,80009938 <fat_cluster_readnext+0xd8>
800098aa:	91 09       	st.w	r8[0x0],r9
      if( !fat_cache_read_sector( true ))
800098ac:	30 1c       	mov	r12,1
800098ae:	f0 1f 00 24 	mcall	8000993c <fat_cluster_readnext+0xdc>
800098b2:	18 98       	mov	r8,r12
800098b4:	ec 18 00 01 	eorl	r8,0x1
800098b8:	5c 58       	castu.b	r8
800098ba:	c0 30       	breq	800098c0 <fat_cluster_readnext+0x60>
         return false;
800098bc:	30 08       	mov	r8,0
800098be:	c3 68       	rjmp	8000992a <fat_cluster_readnext+0xca>
   }

   //**** Read the cluster value
   LSB0( fs_g_cluster.u32_val ) = fs_g_sector[fs_g_u16_pos_fat+0];  // FAT 16,32
800098c0:	4a 08       	lddpc	r8,80009940 <fat_cluster_readnext+0xe0>
800098c2:	2f c8       	sub	r8,-4
800098c4:	f0 c9 ff fd 	sub	r9,r8,-3
800098c8:	49 b8       	lddpc	r8,80009934 <fat_cluster_readnext+0xd4>
800098ca:	90 08       	ld.sh	r8,r8[0x0]
800098cc:	5c 78       	castu.h	r8
800098ce:	49 ea       	lddpc	r10,80009944 <fat_cluster_readnext+0xe4>
800098d0:	f4 08 07 08 	ld.ub	r8,r10[r8]
800098d4:	b2 88       	st.b	r9[0x0],r8
   LSB1( fs_g_cluster.u32_val ) = fs_g_sector[fs_g_u16_pos_fat+1];  // FAT 16,32
800098d6:	49 b8       	lddpc	r8,80009940 <fat_cluster_readnext+0xe0>
800098d8:	2f c8       	sub	r8,-4
800098da:	f0 c9 ff fe 	sub	r9,r8,-2
800098de:	49 68       	lddpc	r8,80009934 <fat_cluster_readnext+0xd4>
800098e0:	90 08       	ld.sh	r8,r8[0x0]
800098e2:	5c 78       	castu.h	r8
800098e4:	2f f8       	sub	r8,-1
800098e6:	49 8a       	lddpc	r10,80009944 <fat_cluster_readnext+0xe4>
800098e8:	f4 08 07 08 	ld.ub	r8,r10[r8]
800098ec:	b2 88       	st.b	r9[0x0],r8

   if ( Is_fat32 )
800098ee:	49 18       	lddpc	r8,80009930 <fat_cluster_readnext+0xd0>
800098f0:	11 89       	ld.ub	r9,r8[0x0]
800098f2:	30 38       	mov	r8,3
800098f4:	f0 09 18 00 	cp.b	r9,r8
800098f8:	c1 81       	brne	80009928 <fat_cluster_readnext+0xc8>
   {  // FAT 32
      LSB2( fs_g_cluster.u32_val ) = fs_g_sector[fs_g_u16_pos_fat+2];
800098fa:	49 28       	lddpc	r8,80009940 <fat_cluster_readnext+0xe0>
800098fc:	2f c8       	sub	r8,-4
800098fe:	f0 c9 ff ff 	sub	r9,r8,-1
80009902:	48 d8       	lddpc	r8,80009934 <fat_cluster_readnext+0xd4>
80009904:	90 08       	ld.sh	r8,r8[0x0]
80009906:	5c 78       	castu.h	r8
80009908:	2f e8       	sub	r8,-2
8000990a:	48 fa       	lddpc	r10,80009944 <fat_cluster_readnext+0xe4>
8000990c:	f4 08 07 08 	ld.ub	r8,r10[r8]
80009910:	b2 88       	st.b	r9[0x0],r8
      LSB3( fs_g_cluster.u32_val ) = fs_g_sector[fs_g_u16_pos_fat+3];
80009912:	48 c8       	lddpc	r8,80009940 <fat_cluster_readnext+0xe0>
80009914:	f0 c9 ff fc 	sub	r9,r8,-4
80009918:	48 78       	lddpc	r8,80009934 <fat_cluster_readnext+0xd4>
8000991a:	90 08       	ld.sh	r8,r8[0x0]
8000991c:	5c 78       	castu.h	r8
8000991e:	2f d8       	sub	r8,-3
80009920:	48 9a       	lddpc	r10,80009944 <fat_cluster_readnext+0xe4>
80009922:	f4 08 07 08 	ld.ub	r8,r10[r8]
80009926:	b2 88       	st.b	r9[0x0],r8
   }
   return true;
80009928:	30 18       	mov	r8,1
}
8000992a:	10 9c       	mov	r12,r8
8000992c:	e3 cd 80 80 	ldm	sp++,r7,pc
80009930:	00 00       	add	r0,r0
80009932:	0d d4       	ld.ub	r4,r6[0x5]
80009934:	00 00       	add	r0,r0
80009936:	0b 58       	ld.sh	r8,--r5
80009938:	00 00       	add	r0,r0
8000993a:	0b 44       	ld.w	r4,--r5
8000993c:	80 00       	ld.sh	r0,r0[0x0]
8000993e:	aa c8       	st.b	r5[0x4],r8
80009940:	00 00       	add	r0,r0
80009942:	0e 28       	rsub	r8,r7
80009944:	00 00       	add	r0,r0
80009946:	0b 88       	ld.ub	r8,r5[0x0]

80009948 <fat_checkcluster>:
//! IN :
//!   fs_g_cluster.u32_val       value to check
//! @endverbatim
//!
uint8_t    fat_checkcluster( void )
{
80009948:	eb cd 40 80 	pushm	r7,lr
8000994c:	1a 97       	mov	r7,sp
  if ( !fs_g_cluster.u32_val )
8000994e:	4a 88       	lddpc	r8,800099ec <fat_checkcluster+0xa4>
80009950:	70 18       	ld.w	r8,r8[0x4]
80009952:	58 08       	cp.w	r8,0
80009954:	c0 31       	brne	8000995a <fat_checkcluster+0x12>
    return FS_CLUS_BAD;
80009956:	30 18       	mov	r8,1
80009958:	c4 78       	rjmp	800099e6 <fat_checkcluster+0x9e>

  // Cluster bad if (FAT12 == 0x0FF7) (FAT16 == 0xFFF7) (FAT32 == 0x0FFFFFF7)
  // Last cluster if (FAT12 > 0x0FF7) (FAT16 > 0xFFF7) (FAT32 > 0x0FFFFFF7)
  if ( Is_fat32 )
8000995a:	4a 68       	lddpc	r8,800099f0 <fat_checkcluster+0xa8>
8000995c:	11 89       	ld.ub	r9,r8[0x0]
8000995e:	30 38       	mov	r8,3
80009960:	f0 09 18 00 	cp.b	r9,r8
80009964:	c1 61       	brne	80009990 <fat_checkcluster+0x48>
  {
    if (fs_g_cluster.u32_val >= 0x0FFFFFF8)
80009966:	4a 28       	lddpc	r8,800099ec <fat_checkcluster+0xa4>
80009968:	70 18       	ld.w	r8,r8[0x4]
8000996a:	e0 69 ff f7 	mov	r9,65527
8000996e:	ea 19 0f ff 	orh	r9,0xfff
80009972:	12 38       	cp.w	r8,r9
80009974:	e0 88 00 04 	brls	8000997c <fat_checkcluster+0x34>
      return FS_CLUS_END;
80009978:	30 28       	mov	r8,2
8000997a:	c3 68       	rjmp	800099e6 <fat_checkcluster+0x9e>
    else if (fs_g_cluster.u32_val == 0x0FFFFFF7)
8000997c:	49 c8       	lddpc	r8,800099ec <fat_checkcluster+0xa4>
8000997e:	70 18       	ld.w	r8,r8[0x4]
80009980:	e0 69 ff f7 	mov	r9,65527
80009984:	ea 19 0f ff 	orh	r9,0xfff
80009988:	12 38       	cp.w	r8,r9
8000998a:	c2 d1       	brne	800099e4 <fat_checkcluster+0x9c>
      return FS_CLUS_BAD;
8000998c:	30 18       	mov	r8,1
8000998e:	c2 c8       	rjmp	800099e6 <fat_checkcluster+0x9e>
  }
  else if ( Is_fat16 )
80009990:	49 88       	lddpc	r8,800099f0 <fat_checkcluster+0xa8>
80009992:	11 89       	ld.ub	r9,r8[0x0]
80009994:	30 28       	mov	r8,2
80009996:	f0 09 18 00 	cp.b	r9,r8
8000999a:	c1 01       	brne	800099ba <fat_checkcluster+0x72>
  {
    if (fs_g_cluster.u32_val >= 0xFFF8)
8000999c:	49 48       	lddpc	r8,800099ec <fat_checkcluster+0xa4>
8000999e:	70 18       	ld.w	r8,r8[0x4]
800099a0:	e0 48 ff f7 	cp.w	r8,65527
800099a4:	e0 88 00 04 	brls	800099ac <fat_checkcluster+0x64>
      return FS_CLUS_END;
800099a8:	30 28       	mov	r8,2
800099aa:	c1 e8       	rjmp	800099e6 <fat_checkcluster+0x9e>
    else if (fs_g_cluster.u32_val == 0xFFF7)
800099ac:	49 08       	lddpc	r8,800099ec <fat_checkcluster+0xa4>
800099ae:	70 18       	ld.w	r8,r8[0x4]
800099b0:	e0 48 ff f7 	cp.w	r8,65527
800099b4:	c1 81       	brne	800099e4 <fat_checkcluster+0x9c>
      return FS_CLUS_BAD;
800099b6:	30 18       	mov	r8,1
800099b8:	c1 78       	rjmp	800099e6 <fat_checkcluster+0x9e>
  }
  else if ( Is_fat12 )
800099ba:	48 e8       	lddpc	r8,800099f0 <fat_checkcluster+0xa8>
800099bc:	11 89       	ld.ub	r9,r8[0x0]
800099be:	30 18       	mov	r8,1
800099c0:	f0 09 18 00 	cp.b	r9,r8
800099c4:	c1 01       	brne	800099e4 <fat_checkcluster+0x9c>
  {
    if (fs_g_cluster.u32_val >= 0xFF8)
800099c6:	48 a8       	lddpc	r8,800099ec <fat_checkcluster+0xa4>
800099c8:	70 18       	ld.w	r8,r8[0x4]
800099ca:	e0 48 0f f7 	cp.w	r8,4087
800099ce:	e0 88 00 04 	brls	800099d6 <fat_checkcluster+0x8e>
      return FS_CLUS_END;
800099d2:	30 28       	mov	r8,2
800099d4:	c0 98       	rjmp	800099e6 <fat_checkcluster+0x9e>
    else if (fs_g_cluster.u32_val == 0xFF7)
800099d6:	48 68       	lddpc	r8,800099ec <fat_checkcluster+0xa4>
800099d8:	70 18       	ld.w	r8,r8[0x4]
800099da:	e0 48 0f f7 	cp.w	r8,4087
800099de:	c0 31       	brne	800099e4 <fat_checkcluster+0x9c>
      return FS_CLUS_BAD;
800099e0:	30 18       	mov	r8,1
800099e2:	c0 28       	rjmp	800099e6 <fat_checkcluster+0x9e>
  }

  return FS_CLUS_OK;
800099e4:	30 08       	mov	r8,0
}
800099e6:	10 9c       	mov	r12,r8
800099e8:	e3 cd 80 80 	ldm	sp++,r7,pc
800099ec:	00 00       	add	r0,r0
800099ee:	0e 28       	rsub	r8,r7
800099f0:	00 00       	add	r0,r0
800099f2:	0d d4       	ld.ub	r4,r6[0x5]

800099f4 <fat_cache_clusterlist_reset>:
//! @{

//! This function resets the cluster list caches
//!
void  fat_cache_clusterlist_reset( void )
{
800099f4:	eb cd 40 80 	pushm	r7,lr
800099f8:	1a 97       	mov	r7,sp
800099fa:	20 1d       	sub	sp,4
   uint8_t u8_i;
   fs_g_u8_current_cache=0;
800099fc:	4a 09       	lddpc	r9,80009a7c <fat_cache_clusterlist_reset+0x88>
800099fe:	30 08       	mov	r8,0
80009a00:	b2 88       	st.b	r9[0x0],r8
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
80009a02:	30 08       	mov	r8,0
80009a04:	ef 68 ff ff 	st.b	r7[-1],r8
80009a08:	c2 f8       	rjmp	80009a66 <fat_cache_clusterlist_reset+0x72>
   {
      // The cache list is split in two cache (file cluster list and directory cluster list)
      fs_g_cache_clusterlist[u8_i].b_cache_file = (u8_i<FS_NB_CACHE_CLUSLIST)?true:false;
80009a0a:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80009a0e:	ef 3a ff ff 	ld.ub	r10,r7[-1]
80009a12:	30 08       	mov	r8,0
80009a14:	f0 0a 18 00 	cp.b	r10,r8
80009a18:	5f 08       	sreq	r8
80009a1a:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
80009a1e:	49 9b       	lddpc	r11,80009a80 <fat_cache_clusterlist_reset+0x8c>
80009a20:	12 98       	mov	r8,r9
80009a22:	a3 68       	lsl	r8,0x2
80009a24:	12 08       	add	r8,r9
80009a26:	a3 68       	lsl	r8,0x2
80009a28:	f6 08 00 09 	add	r9,r11,r8
80009a2c:	14 98       	mov	r8,r10
80009a2e:	b2 88       	st.b	r9[0x0],r8
      fs_g_cache_clusterlist[u8_i].u8_lun = 0xFF;
80009a30:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80009a34:	49 3a       	lddpc	r10,80009a80 <fat_cache_clusterlist_reset+0x8c>
80009a36:	12 98       	mov	r8,r9
80009a38:	a3 68       	lsl	r8,0x2
80009a3a:	12 08       	add	r8,r9
80009a3c:	a3 68       	lsl	r8,0x2
80009a3e:	f4 08 00 09 	add	r9,r10,r8
80009a42:	3f f8       	mov	r8,-1
80009a44:	b2 a8       	st.b	r9[0x2],r8
      fs_g_cache_clusterlist[u8_i].u8_level_use = 0xFF;
80009a46:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80009a4a:	48 ea       	lddpc	r10,80009a80 <fat_cache_clusterlist_reset+0x8c>
80009a4c:	12 98       	mov	r8,r9
80009a4e:	a3 68       	lsl	r8,0x2
80009a50:	12 08       	add	r8,r9
80009a52:	a3 68       	lsl	r8,0x2
80009a54:	f4 08 00 09 	add	r9,r10,r8
80009a58:	3f f8       	mov	r8,-1
80009a5a:	b2 98       	st.b	r9[0x1],r8
//!
void  fat_cache_clusterlist_reset( void )
{
   uint8_t u8_i;
   fs_g_u8_current_cache=0;
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
80009a5c:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80009a60:	2f f8       	sub	r8,-1
80009a62:	ef 68 ff ff 	st.b	r7[-1],r8
80009a66:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80009a6a:	30 18       	mov	r8,1
80009a6c:	f0 09 18 00 	cp.b	r9,r8
80009a70:	fe 98 ff cd 	brls	80009a0a <fat_cache_clusterlist_reset+0x16>
      // The cache list is split in two cache (file cluster list and directory cluster list)
      fs_g_cache_clusterlist[u8_i].b_cache_file = (u8_i<FS_NB_CACHE_CLUSLIST)?true:false;
      fs_g_cache_clusterlist[u8_i].u8_lun = 0xFF;
      fs_g_cache_clusterlist[u8_i].u8_level_use = 0xFF;
   }
}
80009a74:	2f fd       	sub	sp,-4
80009a76:	e3 cd 80 80 	ldm	sp++,r7,pc
80009a7a:	00 00       	add	r0,r0
80009a7c:	00 00       	add	r0,r0
80009a7e:	0d da       	ld.ub	r10,r6[0x5]
80009a80:	00 00       	add	r0,r0
80009a82:	0b 5c       	ld.sh	r12,--r5

80009a84 <fat_cache_clusterlist_update_start>:
//! This function initializes a cache in cluster list caches
//!
//! @param     b_for_file  If true then it is a file cluster list else a directory cluster list  <br>
//!
void  fat_cache_clusterlist_update_start( bool b_for_file )
{
80009a84:	eb cd 40 80 	pushm	r7,lr
80009a88:	1a 97       	mov	r7,sp
80009a8a:	20 2d       	sub	sp,8
80009a8c:	18 98       	mov	r8,r12
80009a8e:	ef 68 ff f8 	st.b	r7[-8],r8
   // Get the OLD cache (=max level used)
   uint8_t u8_i;
   for( u8_i=0; u8_i<((FS_NB_CACHE_CLUSLIST*2)-1); u8_i++ ) // (FS_NB_CACHE_CLUSLIST*2)-1, in case of error
80009a92:	30 08       	mov	r8,0
80009a94:	ef 68 ff ff 	st.b	r7[-1],r8
80009a98:	c1 58       	rjmp	80009ac2 <fat_cache_clusterlist_update_start+0x3e>
   {
      if( fs_g_cache_clusterlist[u8_i].b_cache_file == b_for_file )
80009a9a:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80009a9e:	4a ba       	lddpc	r10,80009b48 <fat_cache_clusterlist_update_start+0xc4>
80009aa0:	12 98       	mov	r8,r9
80009aa2:	a3 68       	lsl	r8,0x2
80009aa4:	12 08       	add	r8,r9
80009aa6:	a3 68       	lsl	r8,0x2
80009aa8:	f4 08 00 08 	add	r8,r10,r8
80009aac:	11 88       	ld.ub	r8,r8[0x0]
80009aae:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80009ab2:	f0 09 18 00 	cp.b	r9,r8
80009ab6:	c0 d0       	breq	80009ad0 <fat_cache_clusterlist_update_start+0x4c>
//!
void  fat_cache_clusterlist_update_start( bool b_for_file )
{
   // Get the OLD cache (=max level used)
   uint8_t u8_i;
   for( u8_i=0; u8_i<((FS_NB_CACHE_CLUSLIST*2)-1); u8_i++ ) // (FS_NB_CACHE_CLUSLIST*2)-1, in case of error
80009ab8:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80009abc:	2f f8       	sub	r8,-1
80009abe:	ef 68 ff ff 	st.b	r7[-1],r8
80009ac2:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80009ac6:	30 08       	mov	r8,0
80009ac8:	f0 09 18 00 	cp.b	r9,r8
80009acc:	ce 70       	breq	80009a9a <fat_cache_clusterlist_update_start+0x16>
80009ace:	c0 28       	rjmp	80009ad2 <fat_cache_clusterlist_update_start+0x4e>
      if( fs_g_cache_clusterlist[u8_i].b_cache_file == b_for_file )
      {
#if (FS_NB_CACHE_CLUSLIST>1)
         if( (FS_NB_CACHE_CLUSLIST-2) < fs_g_cache_clusterlist[u8_i].u8_level_use )
#endif
            break;
80009ad0:	d7 03       	nop
      }
   }
   fs_g_u8_current_cache = u8_i;
80009ad2:	49 f9       	lddpc	r9,80009b4c <fat_cache_clusterlist_update_start+0xc8>
80009ad4:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80009ad8:	b2 88       	st.b	r9[0x0],r8
   fs_g_cache_clusterlist[fs_g_u8_current_cache].b_cache_file = b_for_file;
80009ada:	49 d8       	lddpc	r8,80009b4c <fat_cache_clusterlist_update_start+0xc8>
80009adc:	11 88       	ld.ub	r8,r8[0x0]
80009ade:	10 99       	mov	r9,r8
80009ae0:	49 aa       	lddpc	r10,80009b48 <fat_cache_clusterlist_update_start+0xc4>
80009ae2:	12 98       	mov	r8,r9
80009ae4:	a3 68       	lsl	r8,0x2
80009ae6:	12 08       	add	r8,r9
80009ae8:	a3 68       	lsl	r8,0x2
80009aea:	f4 08 00 09 	add	r9,r10,r8
80009aee:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80009af2:	b2 88       	st.b	r9[0x0],r8
   fs_g_cache_clusterlist[fs_g_u8_current_cache].u8_lun       = 0xFF;                     // invalid cache
80009af4:	49 68       	lddpc	r8,80009b4c <fat_cache_clusterlist_update_start+0xc8>
80009af6:	11 88       	ld.ub	r8,r8[0x0]
80009af8:	10 99       	mov	r9,r8
80009afa:	49 4a       	lddpc	r10,80009b48 <fat_cache_clusterlist_update_start+0xc4>
80009afc:	12 98       	mov	r8,r9
80009afe:	a3 68       	lsl	r8,0x2
80009b00:	12 08       	add	r8,r9
80009b02:	a3 68       	lsl	r8,0x2
80009b04:	f4 08 00 09 	add	r9,r10,r8
80009b08:	3f f8       	mov	r8,-1
80009b0a:	b2 a8       	st.b	r9[0x2],r8
   fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_cluster  = fs_g_cluster.u32_pos;
80009b0c:	49 08       	lddpc	r8,80009b4c <fat_cache_clusterlist_update_start+0xc8>
80009b0e:	11 88       	ld.ub	r8,r8[0x0]
80009b10:	10 99       	mov	r9,r8
80009b12:	49 08       	lddpc	r8,80009b50 <fat_cache_clusterlist_update_start+0xcc>
80009b14:	70 0b       	ld.w	r11,r8[0x0]
80009b16:	48 da       	lddpc	r10,80009b48 <fat_cache_clusterlist_update_start+0xc4>
80009b18:	12 98       	mov	r8,r9
80009b1a:	a3 68       	lsl	r8,0x2
80009b1c:	12 08       	add	r8,r9
80009b1e:	2f f8       	sub	r8,-1
80009b20:	f4 08 09 2b 	st.w	r10[r8<<0x2],r11
   fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_start    = fs_g_seg.u32_size_or_pos;
80009b24:	48 a8       	lddpc	r8,80009b4c <fat_cache_clusterlist_update_start+0xc8>
80009b26:	11 88       	ld.ub	r8,r8[0x0]
80009b28:	10 99       	mov	r9,r8
80009b2a:	48 b8       	lddpc	r8,80009b54 <fat_cache_clusterlist_update_start+0xd0>
80009b2c:	70 1a       	ld.w	r10,r8[0x4]
80009b2e:	48 7b       	lddpc	r11,80009b48 <fat_cache_clusterlist_update_start+0xc4>
80009b30:	12 98       	mov	r8,r9
80009b32:	a3 68       	lsl	r8,0x2
80009b34:	12 08       	add	r8,r9
80009b36:	a3 68       	lsl	r8,0x2
80009b38:	f6 08 00 08 	add	r8,r11,r8
80009b3c:	2f 88       	sub	r8,-8
80009b3e:	91 0a       	st.w	r8[0x0],r10
}
80009b40:	2f ed       	sub	sp,-8
80009b42:	e3 cd 80 80 	ldm	sp++,r7,pc
80009b46:	00 00       	add	r0,r0
80009b48:	00 00       	add	r0,r0
80009b4a:	0b 5c       	ld.sh	r12,--r5
80009b4c:	00 00       	add	r0,r0
80009b4e:	0d da       	ld.ub	r10,r6[0x5]
80009b50:	00 00       	add	r0,r0
80009b52:	0e 28       	rsub	r8,r7
80009b54:	00 00       	add	r0,r0
80009b56:	0e 30       	cp.w	r0,r7

80009b58 <fat_cache_clusterlist_update_finish>:


//! This function updates a cache of cluster list caches
//!
void  fat_cache_clusterlist_update_finish( void )
{
80009b58:	eb cd 40 80 	pushm	r7,lr
80009b5c:	1a 97       	mov	r7,sp
80009b5e:	20 1d       	sub	sp,4
   uint8_t u8_cluster_offset = fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_start % fs_g_nav.u8_BPB_SecPerClus;
80009b60:	4b 28       	lddpc	r8,80009c28 <fat_cache_clusterlist_update_finish+0xd0>
80009b62:	11 88       	ld.ub	r8,r8[0x0]
80009b64:	10 99       	mov	r9,r8
80009b66:	4b 2a       	lddpc	r10,80009c2c <fat_cache_clusterlist_update_finish+0xd4>
80009b68:	12 98       	mov	r8,r9
80009b6a:	a3 68       	lsl	r8,0x2
80009b6c:	12 08       	add	r8,r9
80009b6e:	a3 68       	lsl	r8,0x2
80009b70:	f4 08 00 08 	add	r8,r10,r8
80009b74:	2f 88       	sub	r8,-8
80009b76:	70 08       	ld.w	r8,r8[0x0]
80009b78:	4a e9       	lddpc	r9,80009c30 <fat_cache_clusterlist_update_finish+0xd8>
80009b7a:	13 99       	ld.ub	r9,r9[0x1]
80009b7c:	f0 09 0d 08 	divu	r8,r8,r9
80009b80:	12 98       	mov	r8,r9
80009b82:	ef 68 ff ff 	st.b	r7[-1],r8
   fs_g_cache_clusterlist[fs_g_u8_current_cache].u8_lun       = fs_g_nav.u8_lun;          // valid cache
80009b86:	4a 98       	lddpc	r8,80009c28 <fat_cache_clusterlist_update_finish+0xd0>
80009b88:	11 88       	ld.ub	r8,r8[0x0]
80009b8a:	10 99       	mov	r9,r8
80009b8c:	4a 98       	lddpc	r8,80009c30 <fat_cache_clusterlist_update_finish+0xd8>
80009b8e:	11 8a       	ld.ub	r10,r8[0x0]
80009b90:	4a 7b       	lddpc	r11,80009c2c <fat_cache_clusterlist_update_finish+0xd4>
80009b92:	12 98       	mov	r8,r9
80009b94:	a3 68       	lsl	r8,0x2
80009b96:	12 08       	add	r8,r9
80009b98:	a3 68       	lsl	r8,0x2
80009b9a:	f6 08 00 09 	add	r9,r11,r8
80009b9e:	14 98       	mov	r8,r10
80009ba0:	b2 a8       	st.b	r9[0x2],r8
   fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_start   -= u8_cluster_offset;
80009ba2:	4a 28       	lddpc	r8,80009c28 <fat_cache_clusterlist_update_finish+0xd0>
80009ba4:	11 88       	ld.ub	r8,r8[0x0]
80009ba6:	10 99       	mov	r9,r8
80009ba8:	4a 08       	lddpc	r8,80009c28 <fat_cache_clusterlist_update_finish+0xd0>
80009baa:	11 88       	ld.ub	r8,r8[0x0]
80009bac:	10 9a       	mov	r10,r8
80009bae:	4a 0b       	lddpc	r11,80009c2c <fat_cache_clusterlist_update_finish+0xd4>
80009bb0:	14 98       	mov	r8,r10
80009bb2:	a3 68       	lsl	r8,0x2
80009bb4:	14 08       	add	r8,r10
80009bb6:	a3 68       	lsl	r8,0x2
80009bb8:	f6 08 00 08 	add	r8,r11,r8
80009bbc:	2f 88       	sub	r8,-8
80009bbe:	70 0a       	ld.w	r10,r8[0x0]
80009bc0:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80009bc4:	10 1a       	sub	r10,r8
80009bc6:	49 ab       	lddpc	r11,80009c2c <fat_cache_clusterlist_update_finish+0xd4>
80009bc8:	12 98       	mov	r8,r9
80009bca:	a3 68       	lsl	r8,0x2
80009bcc:	12 08       	add	r8,r9
80009bce:	a3 68       	lsl	r8,0x2
80009bd0:	f6 08 00 08 	add	r8,r11,r8
80009bd4:	2f 88       	sub	r8,-8
80009bd6:	91 0a       	st.w	r8[0x0],r10
   fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_addr     = fs_g_seg.u32_addr - u8_cluster_offset;
80009bd8:	49 48       	lddpc	r8,80009c28 <fat_cache_clusterlist_update_finish+0xd0>
80009bda:	11 88       	ld.ub	r8,r8[0x0]
80009bdc:	10 99       	mov	r9,r8
80009bde:	49 68       	lddpc	r8,80009c34 <fat_cache_clusterlist_update_finish+0xdc>
80009be0:	70 0a       	ld.w	r10,r8[0x0]
80009be2:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80009be6:	10 1a       	sub	r10,r8
80009be8:	49 1b       	lddpc	r11,80009c2c <fat_cache_clusterlist_update_finish+0xd4>
80009bea:	12 98       	mov	r8,r9
80009bec:	a3 68       	lsl	r8,0x2
80009bee:	12 08       	add	r8,r9
80009bf0:	a3 68       	lsl	r8,0x2
80009bf2:	f6 08 00 08 	add	r8,r11,r8
80009bf6:	2f 48       	sub	r8,-12
80009bf8:	91 0a       	st.w	r8[0x0],r10
   fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_size     = fs_g_seg.u32_size_or_pos + u8_cluster_offset;
80009bfa:	48 c8       	lddpc	r8,80009c28 <fat_cache_clusterlist_update_finish+0xd0>
80009bfc:	11 88       	ld.ub	r8,r8[0x0]
80009bfe:	10 99       	mov	r9,r8
80009c00:	48 d8       	lddpc	r8,80009c34 <fat_cache_clusterlist_update_finish+0xdc>
80009c02:	70 1a       	ld.w	r10,r8[0x4]
80009c04:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80009c08:	10 0a       	add	r10,r8
80009c0a:	48 9b       	lddpc	r11,80009c2c <fat_cache_clusterlist_update_finish+0xd4>
80009c0c:	12 98       	mov	r8,r9
80009c0e:	a3 68       	lsl	r8,0x2
80009c10:	12 08       	add	r8,r9
80009c12:	a3 68       	lsl	r8,0x2
80009c14:	f6 08 00 08 	add	r8,r11,r8
80009c18:	2f 08       	sub	r8,-16
80009c1a:	91 0a       	st.w	r8[0x0],r10

   // Update the "level used" of cache
   fat_cache_clusterlist_update_select();
80009c1c:	f0 1f 00 07 	mcall	80009c38 <fat_cache_clusterlist_update_finish+0xe0>
}
80009c20:	2f fd       	sub	sp,-4
80009c22:	e3 cd 80 80 	ldm	sp++,r7,pc
80009c26:	00 00       	add	r0,r0
80009c28:	00 00       	add	r0,r0
80009c2a:	0d da       	ld.ub	r10,r6[0x5]
80009c2c:	00 00       	add	r0,r0
80009c2e:	0b 5c       	ld.sh	r12,--r5
80009c30:	00 00       	add	r0,r0
80009c32:	0d 88       	ld.ub	r8,r6[0x0]
80009c34:	00 00       	add	r0,r0
80009c36:	0e 30       	cp.w	r0,r7
80009c38:	80 00       	ld.sh	r0,r0[0x0]
80009c3a:	9c 3c       	ld.sh	r12,lr[0x6]

80009c3c <fat_cache_clusterlist_update_select>:


//! This function signals that a cache is used
//!
void  fat_cache_clusterlist_update_select( void )
{
80009c3c:	eb cd 40 80 	pushm	r7,lr
80009c40:	1a 97       	mov	r7,sp
80009c42:	20 1d       	sub	sp,4
   uint8_t u8_i;
   uint8_t u8_level_to_update;
   bool b_file_cache;

   b_file_cache         = fs_g_cache_clusterlist[ fs_g_u8_current_cache ].b_cache_file;
80009c44:	4b 78       	lddpc	r8,80009d20 <fat_cache_clusterlist_update_select+0xe4>
80009c46:	11 88       	ld.ub	r8,r8[0x0]
80009c48:	10 99       	mov	r9,r8
80009c4a:	4b 7a       	lddpc	r10,80009d24 <fat_cache_clusterlist_update_select+0xe8>
80009c4c:	12 98       	mov	r8,r9
80009c4e:	a3 68       	lsl	r8,0x2
80009c50:	12 08       	add	r8,r9
80009c52:	a3 68       	lsl	r8,0x2
80009c54:	f4 08 00 08 	add	r8,r10,r8
80009c58:	11 88       	ld.ub	r8,r8[0x0]
80009c5a:	ef 68 ff ff 	st.b	r7[-1],r8
   u8_level_to_update   = fs_g_cache_clusterlist[ fs_g_u8_current_cache ].u8_level_use;
80009c5e:	4b 18       	lddpc	r8,80009d20 <fat_cache_clusterlist_update_select+0xe4>
80009c60:	11 88       	ld.ub	r8,r8[0x0]
80009c62:	10 99       	mov	r9,r8
80009c64:	4b 0a       	lddpc	r10,80009d24 <fat_cache_clusterlist_update_select+0xe8>
80009c66:	12 98       	mov	r8,r9
80009c68:	a3 68       	lsl	r8,0x2
80009c6a:	12 08       	add	r8,r9
80009c6c:	a3 68       	lsl	r8,0x2
80009c6e:	f4 08 00 08 	add	r8,r10,r8
80009c72:	11 98       	ld.ub	r8,r8[0x1]
80009c74:	ef 68 ff fe 	st.b	r7[-2],r8
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
80009c78:	30 08       	mov	r8,0
80009c7a:	ef 68 ff fd 	st.b	r7[-3],r8
80009c7e:	c3 b8       	rjmp	80009cf4 <fat_cache_clusterlist_update_select+0xb8>
   {
      if( fs_g_cache_clusterlist[u8_i].b_cache_file == b_file_cache )
80009c80:	ef 39 ff fd 	ld.ub	r9,r7[-3]
80009c84:	4a 8a       	lddpc	r10,80009d24 <fat_cache_clusterlist_update_select+0xe8>
80009c86:	12 98       	mov	r8,r9
80009c88:	a3 68       	lsl	r8,0x2
80009c8a:	12 08       	add	r8,r9
80009c8c:	a3 68       	lsl	r8,0x2
80009c8e:	f4 08 00 08 	add	r8,r10,r8
80009c92:	11 88       	ld.ub	r8,r8[0x0]
80009c94:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80009c98:	f0 09 18 00 	cp.b	r9,r8
80009c9c:	c2 71       	brne	80009cea <fat_cache_clusterlist_update_select+0xae>
         if( u8_level_to_update > fs_g_cache_clusterlist[u8_i].u8_level_use )
80009c9e:	ef 39 ff fd 	ld.ub	r9,r7[-3]
80009ca2:	4a 1a       	lddpc	r10,80009d24 <fat_cache_clusterlist_update_select+0xe8>
80009ca4:	12 98       	mov	r8,r9
80009ca6:	a3 68       	lsl	r8,0x2
80009ca8:	12 08       	add	r8,r9
80009caa:	a3 68       	lsl	r8,0x2
80009cac:	f4 08 00 08 	add	r8,r10,r8
80009cb0:	11 98       	ld.ub	r8,r8[0x1]
80009cb2:	ef 39 ff fe 	ld.ub	r9,r7[-2]
80009cb6:	f0 09 18 00 	cp.b	r9,r8
80009cba:	e0 88 00 18 	brls	80009cea <fat_cache_clusterlist_update_select+0xae>
           fs_g_cache_clusterlist[u8_i].u8_level_use++;
80009cbe:	ef 39 ff fd 	ld.ub	r9,r7[-3]
80009cc2:	49 9a       	lddpc	r10,80009d24 <fat_cache_clusterlist_update_select+0xe8>
80009cc4:	12 98       	mov	r8,r9
80009cc6:	a3 68       	lsl	r8,0x2
80009cc8:	12 08       	add	r8,r9
80009cca:	a3 68       	lsl	r8,0x2
80009ccc:	f4 08 00 08 	add	r8,r10,r8
80009cd0:	11 98       	ld.ub	r8,r8[0x1]
80009cd2:	2f f8       	sub	r8,-1
80009cd4:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
80009cd8:	49 3b       	lddpc	r11,80009d24 <fat_cache_clusterlist_update_select+0xe8>
80009cda:	12 98       	mov	r8,r9
80009cdc:	a3 68       	lsl	r8,0x2
80009cde:	12 08       	add	r8,r9
80009ce0:	a3 68       	lsl	r8,0x2
80009ce2:	f6 08 00 09 	add	r9,r11,r8
80009ce6:	14 98       	mov	r8,r10
80009ce8:	b2 98       	st.b	r9[0x1],r8
   uint8_t u8_level_to_update;
   bool b_file_cache;

   b_file_cache         = fs_g_cache_clusterlist[ fs_g_u8_current_cache ].b_cache_file;
   u8_level_to_update   = fs_g_cache_clusterlist[ fs_g_u8_current_cache ].u8_level_use;
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
80009cea:	ef 38 ff fd 	ld.ub	r8,r7[-3]
80009cee:	2f f8       	sub	r8,-1
80009cf0:	ef 68 ff fd 	st.b	r7[-3],r8
80009cf4:	ef 39 ff fd 	ld.ub	r9,r7[-3]
80009cf8:	30 18       	mov	r8,1
80009cfa:	f0 09 18 00 	cp.b	r9,r8
80009cfe:	fe 98 ff c1 	brls	80009c80 <fat_cache_clusterlist_update_select+0x44>
   {
      if( fs_g_cache_clusterlist[u8_i].b_cache_file == b_file_cache )
         if( u8_level_to_update > fs_g_cache_clusterlist[u8_i].u8_level_use )
           fs_g_cache_clusterlist[u8_i].u8_level_use++;
   }
   fs_g_cache_clusterlist[  fs_g_u8_current_cache  ].u8_level_use = 0;
80009d02:	48 88       	lddpc	r8,80009d20 <fat_cache_clusterlist_update_select+0xe4>
80009d04:	11 88       	ld.ub	r8,r8[0x0]
80009d06:	10 99       	mov	r9,r8
80009d08:	48 7a       	lddpc	r10,80009d24 <fat_cache_clusterlist_update_select+0xe8>
80009d0a:	12 98       	mov	r8,r9
80009d0c:	a3 68       	lsl	r8,0x2
80009d0e:	12 08       	add	r8,r9
80009d10:	a3 68       	lsl	r8,0x2
80009d12:	f4 08 00 09 	add	r9,r10,r8
80009d16:	30 08       	mov	r8,0
80009d18:	b2 98       	st.b	r9[0x1],r8
}
80009d1a:	2f fd       	sub	sp,-4
80009d1c:	e3 cd 80 80 	ldm	sp++,r7,pc
80009d20:	00 00       	add	r0,r0
80009d22:	0d da       	ld.ub	r10,r6[0x5]
80009d24:	00 00       	add	r0,r0
80009d26:	0b 5c       	ld.sh	r12,--r5

80009d28 <fat_cache_clusterlist_update_read>:
//!
//! @return    true  cluster list found and global variable fs_g_seg updated
//! @return    false no found in cluster list caches
//!
bool  fat_cache_clusterlist_update_read( bool b_for_file )
{
80009d28:	eb cd 40 80 	pushm	r7,lr
80009d2c:	1a 97       	mov	r7,sp
80009d2e:	20 3d       	sub	sp,12
80009d30:	18 98       	mov	r8,r12
80009d32:	ef 68 ff f4 	st.b	r7[-12],r8
   uint32_t u32_tmp;
   uint8_t u8_i;
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
80009d36:	30 08       	mov	r8,0
80009d38:	ef 68 ff ff 	st.b	r7[-1],r8
80009d3c:	c1 29       	rjmp	80009f60 <fat_cache_clusterlist_update_read+0x238>
   {
      if( (fs_g_cache_clusterlist[u8_i].b_cache_file == b_for_file)
80009d3e:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80009d42:	fe fa 02 42 	ld.w	r10,pc[578]
80009d46:	12 98       	mov	r8,r9
80009d48:	a3 68       	lsl	r8,0x2
80009d4a:	12 08       	add	r8,r9
80009d4c:	a3 68       	lsl	r8,0x2
80009d4e:	f4 08 00 08 	add	r8,r10,r8
80009d52:	11 88       	ld.ub	r8,r8[0x0]
80009d54:	ef 39 ff f4 	ld.ub	r9,r7[-12]
80009d58:	f0 09 18 00 	cp.b	r9,r8
80009d5c:	e0 81 00 fd 	brne	80009f56 <fat_cache_clusterlist_update_read+0x22e>
      &&  (fs_g_cache_clusterlist[u8_i].u8_lun == fs_g_nav.u8_lun ) )
80009d60:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80009d64:	fe fa 02 20 	ld.w	r10,pc[544]
80009d68:	12 98       	mov	r8,r9
80009d6a:	a3 68       	lsl	r8,0x2
80009d6c:	12 08       	add	r8,r9
80009d6e:	a3 68       	lsl	r8,0x2
80009d70:	f4 08 00 08 	add	r8,r10,r8
80009d74:	11 a9       	ld.ub	r9,r8[0x2]
80009d76:	fe f8 02 12 	ld.w	r8,pc[530]
80009d7a:	11 88       	ld.ub	r8,r8[0x0]
{
   uint32_t u32_tmp;
   uint8_t u8_i;
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
   {
      if( (fs_g_cache_clusterlist[u8_i].b_cache_file == b_for_file)
80009d7c:	f0 09 18 00 	cp.b	r9,r8
80009d80:	e0 81 00 eb 	brne	80009f56 <fat_cache_clusterlist_update_read+0x22e>
      &&  (fs_g_cache_clusterlist[u8_i].u8_lun == fs_g_nav.u8_lun ) )
      {
         if( fs_g_cache_clusterlist[u8_i].u32_cluster == fs_g_cluster.u32_pos )
80009d84:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80009d88:	4f fa       	lddpc	r10,80009f84 <fat_cache_clusterlist_update_read+0x25c>
80009d8a:	12 98       	mov	r8,r9
80009d8c:	a3 68       	lsl	r8,0x2
80009d8e:	12 08       	add	r8,r9
80009d90:	2f f8       	sub	r8,-1
80009d92:	f4 08 03 29 	ld.w	r9,r10[r8<<0x2]
80009d96:	4f e8       	lddpc	r8,80009f8c <fat_cache_clusterlist_update_read+0x264>
80009d98:	70 08       	ld.w	r8,r8[0x0]
80009d9a:	10 39       	cp.w	r9,r8
80009d9c:	e0 81 00 dd 	brne	80009f56 <fat_cache_clusterlist_update_read+0x22e>
         {
            if( fs_g_cache_clusterlist[u8_i].u32_start <= fs_g_seg.u32_size_or_pos )
80009da0:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80009da4:	4f 8a       	lddpc	r10,80009f84 <fat_cache_clusterlist_update_read+0x25c>
80009da6:	12 98       	mov	r8,r9
80009da8:	a3 68       	lsl	r8,0x2
80009daa:	12 08       	add	r8,r9
80009dac:	a3 68       	lsl	r8,0x2
80009dae:	f4 08 00 08 	add	r8,r10,r8
80009db2:	2f 88       	sub	r8,-8
80009db4:	70 09       	ld.w	r9,r8[0x0]
80009db6:	4f 78       	lddpc	r8,80009f90 <fat_cache_clusterlist_update_read+0x268>
80009db8:	70 18       	ld.w	r8,r8[0x4]
80009dba:	10 39       	cp.w	r9,r8
80009dbc:	e0 8b 00 cd 	brhi	80009f56 <fat_cache_clusterlist_update_read+0x22e>
            {
               // The segment research is in or after the cache
               if( fs_g_cache_clusterlist[u8_i].u32_size  > (fs_g_seg.u32_size_or_pos-fs_g_cache_clusterlist[u8_i].u32_start) )
80009dc0:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80009dc4:	4f 0a       	lddpc	r10,80009f84 <fat_cache_clusterlist_update_read+0x25c>
80009dc6:	12 98       	mov	r8,r9
80009dc8:	a3 68       	lsl	r8,0x2
80009dca:	12 08       	add	r8,r9
80009dcc:	a3 68       	lsl	r8,0x2
80009dce:	f4 08 00 08 	add	r8,r10,r8
80009dd2:	2f 08       	sub	r8,-16
80009dd4:	70 0a       	ld.w	r10,r8[0x0]
80009dd6:	4e f8       	lddpc	r8,80009f90 <fat_cache_clusterlist_update_read+0x268>
80009dd8:	70 1b       	ld.w	r11,r8[0x4]
80009dda:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80009dde:	4e ac       	lddpc	r12,80009f84 <fat_cache_clusterlist_update_read+0x25c>
80009de0:	12 98       	mov	r8,r9
80009de2:	a3 68       	lsl	r8,0x2
80009de4:	12 08       	add	r8,r9
80009de6:	a3 68       	lsl	r8,0x2
80009de8:	f8 08 00 08 	add	r8,r12,r8
80009dec:	2f 88       	sub	r8,-8
80009dee:	70 08       	ld.w	r8,r8[0x0]
80009df0:	f6 08 01 08 	sub	r8,r11,r8
80009df4:	10 3a       	cp.w	r10,r8
80009df6:	e0 88 00 3b 	brls	80009e6c <fat_cache_clusterlist_update_read+0x144>
               {
                  //** The segment research is in cache, then compute the segment infos
                  fs_g_seg.u32_size_or_pos -= fs_g_cache_clusterlist[u8_i].u32_start;
80009dfa:	4e 68       	lddpc	r8,80009f90 <fat_cache_clusterlist_update_read+0x268>
80009dfc:	70 1a       	ld.w	r10,r8[0x4]
80009dfe:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80009e02:	4e 1b       	lddpc	r11,80009f84 <fat_cache_clusterlist_update_read+0x25c>
80009e04:	12 98       	mov	r8,r9
80009e06:	a3 68       	lsl	r8,0x2
80009e08:	12 08       	add	r8,r9
80009e0a:	a3 68       	lsl	r8,0x2
80009e0c:	f6 08 00 08 	add	r8,r11,r8
80009e10:	2f 88       	sub	r8,-8
80009e12:	70 08       	ld.w	r8,r8[0x0]
80009e14:	f4 08 01 09 	sub	r9,r10,r8
80009e18:	4d e8       	lddpc	r8,80009f90 <fat_cache_clusterlist_update_read+0x268>
80009e1a:	91 19       	st.w	r8[0x4],r9
                  fs_g_seg.u32_addr = fs_g_cache_clusterlist[u8_i].u32_addr + fs_g_seg.u32_size_or_pos;
80009e1c:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80009e20:	4d 9a       	lddpc	r10,80009f84 <fat_cache_clusterlist_update_read+0x25c>
80009e22:	12 98       	mov	r8,r9
80009e24:	a3 68       	lsl	r8,0x2
80009e26:	12 08       	add	r8,r9
80009e28:	a3 68       	lsl	r8,0x2
80009e2a:	f4 08 00 08 	add	r8,r10,r8
80009e2e:	2f 48       	sub	r8,-12
80009e30:	70 09       	ld.w	r9,r8[0x0]
80009e32:	4d 88       	lddpc	r8,80009f90 <fat_cache_clusterlist_update_read+0x268>
80009e34:	70 18       	ld.w	r8,r8[0x4]
80009e36:	10 09       	add	r9,r8
80009e38:	4d 68       	lddpc	r8,80009f90 <fat_cache_clusterlist_update_read+0x268>
80009e3a:	91 09       	st.w	r8[0x0],r9
                  fs_g_seg.u32_size_or_pos = fs_g_cache_clusterlist[u8_i].u32_size - fs_g_seg.u32_size_or_pos;
80009e3c:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80009e40:	4d 1a       	lddpc	r10,80009f84 <fat_cache_clusterlist_update_read+0x25c>
80009e42:	12 98       	mov	r8,r9
80009e44:	a3 68       	lsl	r8,0x2
80009e46:	12 08       	add	r8,r9
80009e48:	a3 68       	lsl	r8,0x2
80009e4a:	f4 08 00 08 	add	r8,r10,r8
80009e4e:	2f 08       	sub	r8,-16
80009e50:	70 09       	ld.w	r9,r8[0x0]
80009e52:	4d 08       	lddpc	r8,80009f90 <fat_cache_clusterlist_update_read+0x268>
80009e54:	70 18       	ld.w	r8,r8[0x4]
80009e56:	10 19       	sub	r9,r8
80009e58:	4c e8       	lddpc	r8,80009f90 <fat_cache_clusterlist_update_read+0x268>
80009e5a:	91 19       	st.w	r8[0x4],r9
                  fs_g_u8_current_cache = u8_i;
80009e5c:	4c e9       	lddpc	r9,80009f94 <fat_cache_clusterlist_update_read+0x26c>
80009e5e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80009e62:	b2 88       	st.b	r9[0x0],r8
                  fat_cache_clusterlist_update_select();
80009e64:	f0 1f 00 4d 	mcall	80009f98 <fat_cache_clusterlist_update_read+0x270>
                  return true;   // the segment is in cluster list cache
80009e68:	30 18       	mov	r8,1
80009e6a:	c8 88       	rjmp	80009f7a <fat_cache_clusterlist_update_read+0x252>
               }else{
                  //** It is after the cache then get cache information and continue to read the cluster list in FAT
                  // Store the result in this cache
                  fs_g_u8_current_cache = u8_i;
80009e6c:	4c a9       	lddpc	r9,80009f94 <fat_cache_clusterlist_update_read+0x26c>
80009e6e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80009e72:	b2 88       	st.b	r9[0x0],r8
                  fs_g_cache_clusterlist[fs_g_u8_current_cache].u8_lun       = 0xFF;   // invalid cache
80009e74:	4c 88       	lddpc	r8,80009f94 <fat_cache_clusterlist_update_read+0x26c>
80009e76:	11 88       	ld.ub	r8,r8[0x0]
80009e78:	10 99       	mov	r9,r8
80009e7a:	4c 3a       	lddpc	r10,80009f84 <fat_cache_clusterlist_update_read+0x25c>
80009e7c:	12 98       	mov	r8,r9
80009e7e:	a3 68       	lsl	r8,0x2
80009e80:	12 08       	add	r8,r9
80009e82:	a3 68       	lsl	r8,0x2
80009e84:	f4 08 00 09 	add	r9,r10,r8
80009e88:	3f f8       	mov	r8,-1
80009e8a:	b2 a8       	st.b	r9[0x2],r8
                  // fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_cluster  = fs_g_cluster.u32_pos;  // It is the same cluster start

                  // Get cache information to take time during the next FAT access
                  // Compute the cluster number corresponding at the last cluster of the cluster list cache
                  fs_g_cluster.u32_pos     = ((fs_g_cache_clusterlist[u8_i].u32_addr -fs_g_nav.u32_ptr_fat - fs_g_nav.u32_offset_data + fs_g_cache_clusterlist[u8_i].u32_size -1)
80009e8c:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80009e90:	4b da       	lddpc	r10,80009f84 <fat_cache_clusterlist_update_read+0x25c>
80009e92:	12 98       	mov	r8,r9
80009e94:	a3 68       	lsl	r8,0x2
80009e96:	12 08       	add	r8,r9
80009e98:	a3 68       	lsl	r8,0x2
80009e9a:	f4 08 00 08 	add	r8,r10,r8
80009e9e:	2f 48       	sub	r8,-12
80009ea0:	70 09       	ld.w	r9,r8[0x0]
80009ea2:	4b a8       	lddpc	r8,80009f88 <fat_cache_clusterlist_update_read+0x260>
80009ea4:	70 48       	ld.w	r8,r8[0x10]
80009ea6:	10 19       	sub	r9,r8
80009ea8:	4b 88       	lddpc	r8,80009f88 <fat_cache_clusterlist_update_read+0x260>
80009eaa:	70 58       	ld.w	r8,r8[0x14]
80009eac:	f2 08 01 0a 	sub	r10,r9,r8
80009eb0:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80009eb4:	4b 4b       	lddpc	r11,80009f84 <fat_cache_clusterlist_update_read+0x25c>
80009eb6:	12 98       	mov	r8,r9
80009eb8:	a3 68       	lsl	r8,0x2
80009eba:	12 08       	add	r8,r9
80009ebc:	a3 68       	lsl	r8,0x2
80009ebe:	f6 08 00 08 	add	r8,r11,r8
80009ec2:	2f 08       	sub	r8,-16
80009ec4:	70 08       	ld.w	r8,r8[0x0]
80009ec6:	f4 08 00 08 	add	r8,r10,r8
80009eca:	20 18       	sub	r8,1
80009ecc:	4a f9       	lddpc	r9,80009f88 <fat_cache_clusterlist_update_read+0x260>
80009ece:	13 99       	ld.ub	r9,r9[0x1]
80009ed0:	f0 09 0d 08 	divu	r8,r8,r9
80009ed4:	f0 c9 ff fe 	sub	r9,r8,-2
80009ed8:	4a d8       	lddpc	r8,80009f8c <fat_cache_clusterlist_update_read+0x264>
80009eda:	91 09       	st.w	r8[0x0],r9
                                             / fs_g_nav.u8_BPB_SecPerClus) +2;
                  u32_tmp  = fs_g_seg.u32_size_or_pos;                                 // save position ask
80009edc:	4a d8       	lddpc	r8,80009f90 <fat_cache_clusterlist_update_read+0x268>
80009ede:	70 18       	ld.w	r8,r8[0x4]
80009ee0:	ef 48 ff f8 	st.w	r7[-8],r8
                  // Compute the position of the end of cluster list cache, and decrement the position asked
                  fs_g_seg.u32_size_or_pos-= ((fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_start + fs_g_cache_clusterlist[u8_i].u32_size -1)
80009ee4:	4a b8       	lddpc	r8,80009f90 <fat_cache_clusterlist_update_read+0x268>
80009ee6:	70 1a       	ld.w	r10,r8[0x4]
80009ee8:	4a b8       	lddpc	r8,80009f94 <fat_cache_clusterlist_update_read+0x26c>
80009eea:	11 88       	ld.ub	r8,r8[0x0]
80009eec:	10 99       	mov	r9,r8
80009eee:	4a 6b       	lddpc	r11,80009f84 <fat_cache_clusterlist_update_read+0x25c>
80009ef0:	12 98       	mov	r8,r9
80009ef2:	a3 68       	lsl	r8,0x2
80009ef4:	12 08       	add	r8,r9
80009ef6:	a3 68       	lsl	r8,0x2
80009ef8:	f6 08 00 08 	add	r8,r11,r8
80009efc:	2f 88       	sub	r8,-8
80009efe:	70 0b       	ld.w	r11,r8[0x0]
80009f00:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80009f04:	4a 0c       	lddpc	r12,80009f84 <fat_cache_clusterlist_update_read+0x25c>
80009f06:	12 98       	mov	r8,r9
80009f08:	a3 68       	lsl	r8,0x2
80009f0a:	12 08       	add	r8,r9
80009f0c:	a3 68       	lsl	r8,0x2
80009f0e:	f8 08 00 08 	add	r8,r12,r8
80009f12:	2f 08       	sub	r8,-16
80009f14:	70 08       	ld.w	r8,r8[0x0]
80009f16:	f6 08 00 08 	add	r8,r11,r8
80009f1a:	20 18       	sub	r8,1
80009f1c:	49 b9       	lddpc	r9,80009f88 <fat_cache_clusterlist_update_read+0x260>
80009f1e:	13 99       	ld.ub	r9,r9[0x1]
80009f20:	f0 09 0d 08 	divu	r8,r8,r9
80009f24:	10 99       	mov	r9,r8
80009f26:	49 98       	lddpc	r8,80009f88 <fat_cache_clusterlist_update_read+0x260>
80009f28:	11 98       	ld.ub	r8,r8[0x1]
80009f2a:	f2 08 02 48 	mul	r8,r9,r8
80009f2e:	f4 08 01 09 	sub	r9,r10,r8
80009f32:	49 88       	lddpc	r8,80009f90 <fat_cache_clusterlist_update_read+0x268>
80009f34:	91 19       	st.w	r8[0x4],r9
                                             / fs_g_nav.u8_BPB_SecPerClus)
                                             * fs_g_nav.u8_BPB_SecPerClus;
                  fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_start = u32_tmp;   // Update cache with the position asked
80009f36:	49 88       	lddpc	r8,80009f94 <fat_cache_clusterlist_update_read+0x26c>
80009f38:	11 88       	ld.ub	r8,r8[0x0]
80009f3a:	10 99       	mov	r9,r8
80009f3c:	49 2a       	lddpc	r10,80009f84 <fat_cache_clusterlist_update_read+0x25c>
80009f3e:	12 98       	mov	r8,r9
80009f40:	a3 68       	lsl	r8,0x2
80009f42:	12 08       	add	r8,r9
80009f44:	a3 68       	lsl	r8,0x2
80009f46:	f4 08 00 08 	add	r8,r10,r8
80009f4a:	2f 88       	sub	r8,-8
80009f4c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80009f50:	91 09       	st.w	r8[0x0],r9
                  return false;                                                        // The segment isn't in cluster list cache
80009f52:	30 08       	mov	r8,0
80009f54:	c1 38       	rjmp	80009f7a <fat_cache_clusterlist_update_read+0x252>
//!
bool  fat_cache_clusterlist_update_read( bool b_for_file )
{
   uint32_t u32_tmp;
   uint8_t u8_i;
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
80009f56:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80009f5a:	2f f8       	sub	r8,-1
80009f5c:	ef 68 ff ff 	st.b	r7[-1],r8
80009f60:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80009f64:	30 18       	mov	r8,1
80009f66:	f0 09 18 00 	cp.b	r9,r8
80009f6a:	fe 98 fe ea 	brls	80009d3e <fat_cache_clusterlist_update_read+0x16>
            }
         }
      }
   }
   // No found in cache then read FAT and store the result in cache
   fat_cache_clusterlist_update_start(b_for_file);
80009f6e:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80009f72:	10 9c       	mov	r12,r8
80009f74:	f0 1f 00 0a 	mcall	80009f9c <fat_cache_clusterlist_update_read+0x274>
   return false;
80009f78:	30 08       	mov	r8,0
}
80009f7a:	10 9c       	mov	r12,r8
80009f7c:	2f dd       	sub	sp,-12
80009f7e:	e3 cd 80 80 	ldm	sp++,r7,pc
80009f82:	00 00       	add	r0,r0
80009f84:	00 00       	add	r0,r0
80009f86:	0b 5c       	ld.sh	r12,--r5
80009f88:	00 00       	add	r0,r0
80009f8a:	0d 88       	ld.ub	r8,r6[0x0]
80009f8c:	00 00       	add	r0,r0
80009f8e:	0e 28       	rsub	r8,r7
80009f90:	00 00       	add	r0,r0
80009f92:	0e 30       	cp.w	r0,r7
80009f94:	00 00       	add	r0,r0
80009f96:	0d da       	ld.ub	r10,r6[0x5]
80009f98:	80 00       	ld.sh	r0,r0[0x0]
80009f9a:	9c 3c       	ld.sh	r12,lr[0x6]
80009f9c:	80 00       	ld.sh	r0,r0[0x0]
80009f9e:	9a 84       	ld.uh	r4,sp[0x0]

80009fa0 <fat_read_file>:
//!   fs_g_nav_entry.u32_cluster       First cluster of selected file
//!   fs_g_nav_entry.u32_pos_in_file   Position in file (unit byte)
//! @endverbatim
//!
bool  fat_read_file( uint8_t mode )
{
80009fa0:	eb cd 40 80 	pushm	r7,lr
80009fa4:	1a 97       	mov	r7,sp
80009fa6:	20 2d       	sub	sp,8
80009fa8:	18 98       	mov	r8,r12
80009faa:	ef 68 ff f8 	st.b	r7[-8],r8
   uint32_t   u32_sector_pos;

   // Compute sector position
   u32_sector_pos = fs_g_nav_entry.u32_pos_in_file >> FS_512B_SHIFT_BIT;
80009fae:	4b f8       	lddpc	r8,8000a0a8 <fat_read_file+0x108>
80009fb0:	70 38       	ld.w	r8,r8[0xc]
80009fb2:	a9 98       	lsr	r8,0x9
80009fb4:	ef 48 ff fc 	st.w	r7[-4],r8

   if(FS_CLUST_ACT_ONE  == mode)
80009fb8:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80009fbc:	30 28       	mov	r8,2
80009fbe:	f0 09 18 00 	cp.b	r9,r8
80009fc2:	c1 61       	brne	80009fee <fat_read_file+0x4e>
   {
      if( (fs_g_sectorcache.u8_lun                 == fs_g_nav.u8_lun )
80009fc4:	4b a8       	lddpc	r8,8000a0ac <fat_read_file+0x10c>
80009fc6:	11 89       	ld.ub	r9,r8[0x0]
80009fc8:	4b a8       	lddpc	r8,8000a0b0 <fat_read_file+0x110>
80009fca:	11 88       	ld.ub	r8,r8[0x0]
80009fcc:	f0 09 18 00 	cp.b	r9,r8
80009fd0:	c2 51       	brne	8000a01a <fat_read_file+0x7a>
      &&  (fs_g_sectorcache.u32_clusterlist_start  == fs_g_nav_entry.u32_cluster )
80009fd2:	4b 78       	lddpc	r8,8000a0ac <fat_read_file+0x10c>
80009fd4:	70 39       	ld.w	r9,r8[0xc]
80009fd6:	4b 58       	lddpc	r8,8000a0a8 <fat_read_file+0x108>
80009fd8:	70 18       	ld.w	r8,r8[0x4]
   // Compute sector position
   u32_sector_pos = fs_g_nav_entry.u32_pos_in_file >> FS_512B_SHIFT_BIT;

   if(FS_CLUST_ACT_ONE  == mode)
   {
      if( (fs_g_sectorcache.u8_lun                 == fs_g_nav.u8_lun )
80009fda:	10 39       	cp.w	r9,r8
80009fdc:	c1 f1       	brne	8000a01a <fat_read_file+0x7a>
      &&  (fs_g_sectorcache.u32_clusterlist_start  == fs_g_nav_entry.u32_cluster )
      &&  (fs_g_sectorcache.u32_clusterlist_pos    == u32_sector_pos ) )
80009fde:	4b 48       	lddpc	r8,8000a0ac <fat_read_file+0x10c>
80009fe0:	70 49       	ld.w	r9,r8[0x10]
   // Compute sector position
   u32_sector_pos = fs_g_nav_entry.u32_pos_in_file >> FS_512B_SHIFT_BIT;

   if(FS_CLUST_ACT_ONE  == mode)
   {
      if( (fs_g_sectorcache.u8_lun                 == fs_g_nav.u8_lun )
80009fe2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80009fe6:	10 39       	cp.w	r9,r8
80009fe8:	c1 91       	brne	8000a01a <fat_read_file+0x7a>
      &&  (fs_g_sectorcache.u32_clusterlist_start  == fs_g_nav_entry.u32_cluster )
      &&  (fs_g_sectorcache.u32_clusterlist_pos    == u32_sector_pos ) )
      {
         return true;      // The internal cache contains the sector requested
80009fea:	30 18       	mov	r8,1
80009fec:	c5 a8       	rjmp	8000a0a0 <fat_read_file+0x100>
      }
   }
   else
   {
      if( FS_CLUST_ACT_CLR == mode )
80009fee:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80009ff2:	30 38       	mov	r8,3
80009ff4:	f0 09 18 00 	cp.b	r9,r8
80009ff8:	c1 11       	brne	8000a01a <fat_read_file+0x7a>
      {
         // Clear cluster list
         if( 0 == fs_g_nav_entry.u32_cluster )
80009ffa:	4a c8       	lddpc	r8,8000a0a8 <fat_read_file+0x108>
80009ffc:	70 18       	ld.w	r8,r8[0x4]
80009ffe:	58 08       	cp.w	r8,0
8000a000:	c0 31       	brne	8000a006 <fat_read_file+0x66>
            return true;   // No cluster list is linked with the file, then no clear is necessary
8000a002:	30 18       	mov	r8,1
8000a004:	c4 e8       	rjmp	8000a0a0 <fat_read_file+0x100>

         if(0 != (fs_g_nav_entry.u32_pos_in_file & FS_512B_MASK) )
8000a006:	4a 98       	lddpc	r8,8000a0a8 <fat_read_file+0x108>
8000a008:	70 38       	ld.w	r8,r8[0xc]
8000a00a:	f1 d8 c0 09 	bfextu	r8,r8,0x0,0x9
8000a00e:	c0 60       	breq	8000a01a <fat_read_file+0x7a>
         {
            // The actual sector is used, then start clear on the next sector
            u32_sector_pos++;
8000a010:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a014:	2f f8       	sub	r8,-1
8000a016:	ef 48 ff fc 	st.w	r7[-4],r8
         }
      }
   }

   // Get the segment which start at the current position
   fs_g_seg.u32_addr = fs_g_nav_entry.u32_cluster;
8000a01a:	4a 48       	lddpc	r8,8000a0a8 <fat_read_file+0x108>
8000a01c:	70 19       	ld.w	r9,r8[0x4]
8000a01e:	4a 68       	lddpc	r8,8000a0b4 <fat_read_file+0x114>
8000a020:	91 09       	st.w	r8[0x0],r9
   fs_g_seg.u32_size_or_pos = u32_sector_pos;
8000a022:	4a 58       	lddpc	r8,8000a0b4 <fat_read_file+0x114>
8000a024:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000a028:	91 19       	st.w	r8[0x4],r9
   if( FS_CLUST_ACT_ONE != mode )
8000a02a:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000a02e:	30 28       	mov	r8,2
8000a030:	f0 09 18 00 	cp.b	r9,r8
8000a034:	c0 c0       	breq	8000a04c <fat_read_file+0xac>
   {
      if( fat_cluster_list( mode, true ) )
8000a036:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000a03a:	30 1b       	mov	r11,1
8000a03c:	10 9c       	mov	r12,r8
8000a03e:	f0 1f 00 1f 	mcall	8000a0b8 <fat_read_file+0x118>
8000a042:	18 98       	mov	r8,r12
8000a044:	58 08       	cp.w	r8,0
8000a046:	c1 e0       	breq	8000a082 <fat_read_file+0xe2>
         return true;      // Get or clear segment OK
8000a048:	30 18       	mov	r8,1
8000a04a:	c2 b8       	rjmp	8000a0a0 <fat_read_file+0x100>
   }
   else
   {
      if( fat_cluster_list( FS_CLUST_ACT_SEG, true ) )   // Read all segment
8000a04c:	30 1b       	mov	r11,1
8000a04e:	30 1c       	mov	r12,1
8000a050:	f0 1f 00 1a 	mcall	8000a0b8 <fat_read_file+0x118>
8000a054:	18 98       	mov	r8,r12
8000a056:	58 08       	cp.w	r8,0
8000a058:	c1 50       	breq	8000a082 <fat_read_file+0xe2>
      {
         // Read the sector corresponding at the position file (= first sector of segment)
         fs_gu32_addrsector = fs_g_seg.u32_addr ;
8000a05a:	49 78       	lddpc	r8,8000a0b4 <fat_read_file+0x114>
8000a05c:	70 09       	ld.w	r9,r8[0x0]
8000a05e:	49 88       	lddpc	r8,8000a0bc <fat_read_file+0x11c>
8000a060:	91 09       	st.w	r8[0x0],r9
         if( fat_cache_read_sector( true ) )
8000a062:	30 1c       	mov	r12,1
8000a064:	f0 1f 00 17 	mcall	8000a0c0 <fat_read_file+0x120>
8000a068:	18 98       	mov	r8,r12
8000a06a:	58 08       	cp.w	r8,0
8000a06c:	c0 b0       	breq	8000a082 <fat_read_file+0xe2>
         {
            fs_g_sectorcache.u32_clusterlist_start  = fs_g_nav_entry.u32_cluster;
8000a06e:	48 f8       	lddpc	r8,8000a0a8 <fat_read_file+0x108>
8000a070:	70 19       	ld.w	r9,r8[0x4]
8000a072:	48 f8       	lddpc	r8,8000a0ac <fat_read_file+0x10c>
8000a074:	91 39       	st.w	r8[0xc],r9
            fs_g_sectorcache.u32_clusterlist_pos    = u32_sector_pos;
8000a076:	48 e8       	lddpc	r8,8000a0ac <fat_read_file+0x10c>
8000a078:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000a07c:	91 49       	st.w	r8[0x10],r9
            return true;
8000a07e:	30 18       	mov	r8,1
8000a080:	c1 08       	rjmp	8000a0a0 <fat_read_file+0x100>
         }
      }
   }
   if( (FS_CLUST_ACT_CLR == mode       )
8000a082:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000a086:	30 38       	mov	r8,3
8000a088:	f0 09 18 00 	cp.b	r9,r8
8000a08c:	c0 91       	brne	8000a09e <fat_read_file+0xfe>
   &&  (FS_ERR_OUT_LIST  == fs_g_status) )
8000a08e:	48 e8       	lddpc	r8,8000a0c4 <fat_read_file+0x124>
8000a090:	11 89       	ld.ub	r9,r8[0x0]
            fs_g_sectorcache.u32_clusterlist_pos    = u32_sector_pos;
            return true;
         }
      }
   }
   if( (FS_CLUST_ACT_CLR == mode       )
8000a092:	31 a8       	mov	r8,26
8000a094:	f0 09 18 00 	cp.b	r9,r8
8000a098:	c0 31       	brne	8000a09e <fat_read_file+0xfe>
   &&  (FS_ERR_OUT_LIST  == fs_g_status) )
   {
      // It is possible to clear nothing
      return true;
8000a09a:	30 18       	mov	r8,1
8000a09c:	c0 28       	rjmp	8000a0a0 <fat_read_file+0x100>
   }
   return false;
8000a09e:	30 08       	mov	r8,0
}
8000a0a0:	10 9c       	mov	r12,r8
8000a0a2:	2f ed       	sub	sp,-8
8000a0a4:	e3 cd 80 80 	ldm	sp++,r7,pc
8000a0a8:	00 00       	add	r0,r0
8000a0aa:	0b 48       	ld.w	r8,--r5
8000a0ac:	00 00       	add	r0,r0
8000a0ae:	0e 10       	sub	r0,r7
8000a0b0:	00 00       	add	r0,r0
8000a0b2:	0d 88       	ld.ub	r8,r6[0x0]
8000a0b4:	00 00       	add	r0,r0
8000a0b6:	0e 30       	cp.w	r0,r7
8000a0b8:	80 00       	ld.sh	r0,r0[0x0]
8000a0ba:	8f 60       	st.w	r7[0x18],r0
8000a0bc:	00 00       	add	r0,r0
8000a0be:	0b 44       	ld.w	r4,--r5
8000a0c0:	80 00       	ld.sh	r0,r0[0x0]
8000a0c2:	aa c8       	st.b	r5[0x4],r8
8000a0c4:	00 00       	add	r0,r0
8000a0c6:	0d d8       	ld.ub	r8,r6[0x5]

8000a0c8 <fat_write_file>:
//!   fs_g_nav_entry.u32_cluster       First cluster of selected file
//!   fs_g_nav_entry.u32_pos_in_file   Position in the file (unit byte)
//! @endverbatim
//!
bool  fat_write_file( uint8_t mode , uint32_t u32_nb_sector_write )
{
8000a0c8:	eb cd 40 80 	pushm	r7,lr
8000a0cc:	1a 97       	mov	r7,sp
8000a0ce:	20 2d       	sub	sp,8
8000a0d0:	18 98       	mov	r8,r12
8000a0d2:	ef 4b ff f8 	st.w	r7[-8],r11
8000a0d6:	ef 68 ff fc 	st.b	r7[-4],r8
   if( 0 == fs_g_nav_entry.u32_cluster )
8000a0da:	4d 18       	lddpc	r8,8000a21c <fat_write_file+0x154>
8000a0dc:	70 18       	ld.w	r8,r8[0x4]
8000a0de:	58 08       	cp.w	r8,0
8000a0e0:	c0 b1       	brne	8000a0f6 <fat_write_file+0x2e>
   {
      // File don't have a cluster list, then alloc the first cluster list of the file
      MSB0(fs_g_seg.u32_addr)    = 0xFF;     // It is a new cluster list
8000a0e2:	4d 09       	lddpc	r9,8000a220 <fat_write_file+0x158>
8000a0e4:	3f f8       	mov	r8,-1
8000a0e6:	b2 88       	st.b	r9[0x0],r8
      // Update cluster list caches
      // fs_g_cluster.u32_pos    = ?         // To fill after alloc
      fs_g_seg.u32_size_or_pos   = 0;
8000a0e8:	4c e8       	lddpc	r8,8000a220 <fat_write_file+0x158>
8000a0ea:	30 09       	mov	r9,0
8000a0ec:	91 19       	st.w	r8[0x4],r9
      fat_cache_clusterlist_update_start(true);
8000a0ee:	30 1c       	mov	r12,1
8000a0f0:	f0 1f 00 4d 	mcall	8000a224 <fat_write_file+0x15c>
8000a0f4:	c3 a8       	rjmp	8000a168 <fat_write_file+0xa0>
   }
   else
   {
      if( fat_read_file( mode ) )
8000a0f6:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000a0fa:	10 9c       	mov	r12,r8
8000a0fc:	f0 1f 00 4b 	mcall	8000a228 <fat_write_file+0x160>
8000a100:	18 98       	mov	r8,r12
8000a102:	58 08       	cp.w	r8,0
8000a104:	c0 30       	breq	8000a10a <fat_write_file+0x42>
         return true;      // A segment is available (no alloc necessary)
8000a106:	30 18       	mov	r8,1
8000a108:	c8 68       	rjmp	8000a214 <fat_write_file+0x14c>

      if( FS_ERR_OUT_LIST != fs_g_status )
8000a10a:	4c 98       	lddpc	r8,8000a22c <fat_write_file+0x164>
8000a10c:	11 89       	ld.ub	r9,r8[0x0]
8000a10e:	31 a8       	mov	r8,26
8000a110:	f0 09 18 00 	cp.b	r9,r8
8000a114:	c0 30       	breq	8000a11a <fat_write_file+0x52>
      {
         return false;     // Error system
8000a116:	30 08       	mov	r8,0
8000a118:	c7 e8       	rjmp	8000a214 <fat_write_file+0x14c>
      }
      // fat_read_file is outsize the list then the current cluster list cache contains the last cluster

      // Initialize cluster list caches before alloc routine
      fs_g_cache_clusterlist[fs_g_u8_current_cache].u8_lun       = 0xFF;                     // invalid cache
8000a11a:	4c 68       	lddpc	r8,8000a230 <fat_write_file+0x168>
8000a11c:	11 88       	ld.ub	r8,r8[0x0]
8000a11e:	10 99       	mov	r9,r8
8000a120:	4c 5a       	lddpc	r10,8000a234 <fat_write_file+0x16c>
8000a122:	12 98       	mov	r8,r9
8000a124:	a3 68       	lsl	r8,0x2
8000a126:	12 08       	add	r8,r9
8000a128:	a3 68       	lsl	r8,0x2
8000a12a:	f4 08 00 09 	add	r9,r10,r8
8000a12e:	3f f8       	mov	r8,-1
8000a130:	b2 a8       	st.b	r9[0x2],r8
      // fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_cluster  = fs_g_cluster.u32_pos;  // it is the same
      fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_start += fs_g_nav.u8_BPB_SecPerClus; // Position of next cluster (the first new)
8000a132:	4c 08       	lddpc	r8,8000a230 <fat_write_file+0x168>
8000a134:	11 88       	ld.ub	r8,r8[0x0]
8000a136:	10 99       	mov	r9,r8
8000a138:	4b e8       	lddpc	r8,8000a230 <fat_write_file+0x168>
8000a13a:	11 88       	ld.ub	r8,r8[0x0]
8000a13c:	10 9a       	mov	r10,r8
8000a13e:	4b eb       	lddpc	r11,8000a234 <fat_write_file+0x16c>
8000a140:	14 98       	mov	r8,r10
8000a142:	a3 68       	lsl	r8,0x2
8000a144:	14 08       	add	r8,r10
8000a146:	a3 68       	lsl	r8,0x2
8000a148:	f6 08 00 08 	add	r8,r11,r8
8000a14c:	2f 88       	sub	r8,-8
8000a14e:	70 0a       	ld.w	r10,r8[0x0]
8000a150:	4b a8       	lddpc	r8,8000a238 <fat_write_file+0x170>
8000a152:	11 98       	ld.ub	r8,r8[0x1]
8000a154:	10 0a       	add	r10,r8
8000a156:	4b 8b       	lddpc	r11,8000a234 <fat_write_file+0x16c>
8000a158:	12 98       	mov	r8,r9
8000a15a:	a3 68       	lsl	r8,0x2
8000a15c:	12 08       	add	r8,r9
8000a15e:	a3 68       	lsl	r8,0x2
8000a160:	f6 08 00 08 	add	r8,r11,r8
8000a164:	2f 88       	sub	r8,-8
8000a166:	91 0a       	st.w	r8[0x0],r10
   }

   // Alloc a cluster list
   if( FS_CLUST_ACT_SEG == mode )
8000a168:	ef 39 ff fc 	ld.ub	r9,r7[-4]
8000a16c:	30 18       	mov	r8,1
8000a16e:	f0 09 18 00 	cp.b	r9,r8
8000a172:	c0 61       	brne	8000a17e <fat_write_file+0xb6>
   {
      fs_g_seg.u32_size_or_pos = u32_nb_sector_write;
8000a174:	4a b8       	lddpc	r8,8000a220 <fat_write_file+0x158>
8000a176:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000a17a:	91 19       	st.w	r8[0x4],r9
8000a17c:	c0 48       	rjmp	8000a184 <fat_write_file+0xbc>
   }else{
      fs_g_seg.u32_size_or_pos = 1;                                                          // only one sector
8000a17e:	4a 98       	lddpc	r8,8000a220 <fat_write_file+0x158>
8000a180:	30 19       	mov	r9,1
8000a182:	91 19       	st.w	r8[0x4],r9
   }

   //note: fs_g_seg.u32_addr is already initialized with the last cluster value (see fat_cluster_list())
   if( !fat_allocfreespace())
8000a184:	f0 1f 00 2e 	mcall	8000a23c <fat_write_file+0x174>
8000a188:	18 98       	mov	r8,r12
8000a18a:	ec 18 00 01 	eorl	r8,0x1
8000a18e:	5c 58       	castu.b	r8
8000a190:	c0 30       	breq	8000a196 <fat_write_file+0xce>
      return false;
8000a192:	30 08       	mov	r8,0
8000a194:	c4 08       	rjmp	8000a214 <fat_write_file+0x14c>
   //note: fs_g_seg.u32_addr is the first cluster of the cluster list allocated by alloc_free_space()
   //note: fs_g_seg.u32_size_or_pos = number of sectors remaining

   if( 0 == fs_g_nav_entry.u32_cluster )
8000a196:	4a 28       	lddpc	r8,8000a21c <fat_write_file+0x154>
8000a198:	70 18       	ld.w	r8,r8[0x4]
8000a19a:	58 08       	cp.w	r8,0
8000a19c:	c1 11       	brne	8000a1be <fat_write_file+0xf6>
   {
      // It is the first cluster list of file, then update following values in cluster list cache
      // fs_g_seg.u32_addr = already contains the first cluster of the file (see alloc_free_space())
      fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_cluster = fs_g_seg.u32_addr;
8000a19e:	4a 58       	lddpc	r8,8000a230 <fat_write_file+0x168>
8000a1a0:	11 88       	ld.ub	r8,r8[0x0]
8000a1a2:	10 99       	mov	r9,r8
8000a1a4:	49 f8       	lddpc	r8,8000a220 <fat_write_file+0x158>
8000a1a6:	70 0b       	ld.w	r11,r8[0x0]
8000a1a8:	4a 3a       	lddpc	r10,8000a234 <fat_write_file+0x16c>
8000a1aa:	12 98       	mov	r8,r9
8000a1ac:	a3 68       	lsl	r8,0x2
8000a1ae:	12 08       	add	r8,r9
8000a1b0:	2f f8       	sub	r8,-1
8000a1b2:	f4 08 09 2b 	st.w	r10[r8<<0x2],r11
      // Update file entry
      fs_g_nav_entry.u32_cluster = fs_g_seg.u32_addr;
8000a1b6:	49 b8       	lddpc	r8,8000a220 <fat_write_file+0x158>
8000a1b8:	70 09       	ld.w	r9,r8[0x0]
8000a1ba:	49 98       	lddpc	r8,8000a21c <fat_write_file+0x154>
8000a1bc:	91 19       	st.w	r8[0x4],r9
   }

   // Update cluster list cache
   if( FS_CLUST_ACT_SEG == mode )
8000a1be:	ef 39 ff fc 	ld.ub	r9,r7[-4]
8000a1c2:	30 18       	mov	r8,1
8000a1c4:	f0 09 18 00 	cp.b	r9,r8
8000a1c8:	c0 91       	brne	8000a1da <fat_write_file+0x112>
   {
      fs_g_seg.u32_size_or_pos = u32_nb_sector_write - fs_g_seg.u32_size_or_pos;
8000a1ca:	49 68       	lddpc	r8,8000a220 <fat_write_file+0x158>
8000a1cc:	70 18       	ld.w	r8,r8[0x4]
8000a1ce:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000a1d2:	10 19       	sub	r9,r8
8000a1d4:	49 38       	lddpc	r8,8000a220 <fat_write_file+0x158>
8000a1d6:	91 19       	st.w	r8[0x4],r9
8000a1d8:	c0 78       	rjmp	8000a1e6 <fat_write_file+0x11e>
   }else{
      fs_g_seg.u32_size_or_pos = 1 - fs_g_seg.u32_size_or_pos;
8000a1da:	49 28       	lddpc	r8,8000a220 <fat_write_file+0x158>
8000a1dc:	70 18       	ld.w	r8,r8[0x4]
8000a1de:	f0 09 11 01 	rsub	r9,r8,1
8000a1e2:	49 08       	lddpc	r8,8000a220 <fat_write_file+0x158>
8000a1e4:	91 19       	st.w	r8[0x4],r9
   }
   fs_g_seg.u32_addr = ((fs_g_seg.u32_addr - 2) * fs_g_nav.u8_BPB_SecPerClus)
8000a1e6:	48 f8       	lddpc	r8,8000a220 <fat_write_file+0x158>
8000a1e8:	70 08       	ld.w	r8,r8[0x0]
8000a1ea:	f0 c9 00 02 	sub	r9,r8,2
8000a1ee:	49 38       	lddpc	r8,8000a238 <fat_write_file+0x170>
8000a1f0:	11 98       	ld.ub	r8,r8[0x1]
8000a1f2:	b1 39       	mul	r9,r8
                     + fs_g_nav.u32_ptr_fat + fs_g_nav.u32_offset_data;
8000a1f4:	49 18       	lddpc	r8,8000a238 <fat_write_file+0x170>
8000a1f6:	70 48       	ld.w	r8,r8[0x10]
8000a1f8:	10 09       	add	r9,r8
   {
      fs_g_seg.u32_size_or_pos = u32_nb_sector_write - fs_g_seg.u32_size_or_pos;
   }else{
      fs_g_seg.u32_size_or_pos = 1 - fs_g_seg.u32_size_or_pos;
   }
   fs_g_seg.u32_addr = ((fs_g_seg.u32_addr - 2) * fs_g_nav.u8_BPB_SecPerClus)
8000a1fa:	49 08       	lddpc	r8,8000a238 <fat_write_file+0x170>
8000a1fc:	70 58       	ld.w	r8,r8[0x14]
8000a1fe:	10 09       	add	r9,r8
8000a200:	48 88       	lddpc	r8,8000a220 <fat_write_file+0x158>
8000a202:	91 09       	st.w	r8[0x0],r9
                     + fs_g_nav.u32_ptr_fat + fs_g_nav.u32_offset_data;
   fat_cache_clusterlist_update_finish();
8000a204:	f0 1f 00 0f 	mcall	8000a240 <fat_write_file+0x178>

   return fat_read_file( mode );    // load the new cluster list
8000a208:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000a20c:	10 9c       	mov	r12,r8
8000a20e:	f0 1f 00 07 	mcall	8000a228 <fat_write_file+0x160>
8000a212:	18 98       	mov	r8,r12
}
8000a214:	10 9c       	mov	r12,r8
8000a216:	2f ed       	sub	sp,-8
8000a218:	e3 cd 80 80 	ldm	sp++,r7,pc
8000a21c:	00 00       	add	r0,r0
8000a21e:	0b 48       	ld.w	r8,--r5
8000a220:	00 00       	add	r0,r0
8000a222:	0e 30       	cp.w	r0,r7
8000a224:	80 00       	ld.sh	r0,r0[0x0]
8000a226:	9a 84       	ld.uh	r4,sp[0x0]
8000a228:	80 00       	ld.sh	r0,r0[0x0]
8000a22a:	9f a0       	st.w	pc[0x28],r0
8000a22c:	00 00       	add	r0,r0
8000a22e:	0d d8       	ld.ub	r8,r6[0x5]
8000a230:	00 00       	add	r0,r0
8000a232:	0d da       	ld.ub	r10,r6[0x5]
8000a234:	00 00       	add	r0,r0
8000a236:	0b 5c       	ld.sh	r12,--r5
8000a238:	00 00       	add	r0,r0
8000a23a:	0d 88       	ld.ub	r8,r6[0x0]
8000a23c:	80 00       	ld.sh	r0,r0[0x0]
8000a23e:	c3 cc       	rcall	8000a2b6 <fat_read_dir+0x72>
8000a240:	80 00       	ld.sh	r0,r0[0x0]
8000a242:	9b 58       	st.w	sp[0x14],r8

8000a244 <fat_read_dir>:
//!   fs_g_nav.u32_cluster_sel_dir           First cluster of current directory
//!   fs_g_nav_fast.u16_entry_pos_sel_file   Position in directory (unit entry)
//! @endverbatim
//!
bool  fat_read_dir( void )
{
8000a244:	eb cd 40 80 	pushm	r7,lr
8000a248:	1a 97       	mov	r7,sp
8000a24a:	20 1d       	sub	sp,4
   uint32_t u32_cluster_pos;

   // Compute the cluster list position corresponding of the current entry
   u32_cluster_pos = fs_g_nav_fast.u16_entry_pos_sel_file >> (FS_512B_SHIFT_BIT - FS_SHIFT_B_TO_FILE_ENTRY);
8000a24c:	4a 38       	lddpc	r8,8000a2d8 <fat_read_dir+0x94>
8000a24e:	90 18       	ld.sh	r8,r8[0x2]
8000a250:	5c 78       	castu.h	r8
8000a252:	a5 88       	lsr	r8,0x4
8000a254:	5c 88       	casts.h	r8
8000a256:	5c 78       	castu.h	r8
8000a258:	ef 48 ff fc 	st.w	r7[-4],r8

   if( (fs_g_sectorcache.u8_lun                 == fs_g_nav.u8_lun )
8000a25c:	4a 08       	lddpc	r8,8000a2dc <fat_read_dir+0x98>
8000a25e:	11 89       	ld.ub	r9,r8[0x0]
8000a260:	4a 08       	lddpc	r8,8000a2e0 <fat_read_dir+0x9c>
8000a262:	11 88       	ld.ub	r8,r8[0x0]
8000a264:	f0 09 18 00 	cp.b	r9,r8
8000a268:	c0 f1       	brne	8000a286 <fat_read_dir+0x42>
   &&  (fs_g_sectorcache.u32_clusterlist_start  == fs_g_nav.u32_cluster_sel_dir )
8000a26a:	49 d8       	lddpc	r8,8000a2dc <fat_read_dir+0x98>
8000a26c:	70 39       	ld.w	r9,r8[0xc]
8000a26e:	49 d8       	lddpc	r8,8000a2e0 <fat_read_dir+0x9c>
8000a270:	70 88       	ld.w	r8,r8[0x20]
   uint32_t u32_cluster_pos;

   // Compute the cluster list position corresponding of the current entry
   u32_cluster_pos = fs_g_nav_fast.u16_entry_pos_sel_file >> (FS_512B_SHIFT_BIT - FS_SHIFT_B_TO_FILE_ENTRY);

   if( (fs_g_sectorcache.u8_lun                 == fs_g_nav.u8_lun )
8000a272:	10 39       	cp.w	r9,r8
8000a274:	c0 91       	brne	8000a286 <fat_read_dir+0x42>
   &&  (fs_g_sectorcache.u32_clusterlist_start  == fs_g_nav.u32_cluster_sel_dir )
   &&  (fs_g_sectorcache.u32_clusterlist_pos    == u32_cluster_pos ) )
8000a276:	49 a8       	lddpc	r8,8000a2dc <fat_read_dir+0x98>
8000a278:	70 49       	ld.w	r9,r8[0x10]
   uint32_t u32_cluster_pos;

   // Compute the cluster list position corresponding of the current entry
   u32_cluster_pos = fs_g_nav_fast.u16_entry_pos_sel_file >> (FS_512B_SHIFT_BIT - FS_SHIFT_B_TO_FILE_ENTRY);

   if( (fs_g_sectorcache.u8_lun                 == fs_g_nav.u8_lun )
8000a27a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a27e:	10 39       	cp.w	r9,r8
8000a280:	c0 31       	brne	8000a286 <fat_read_dir+0x42>
   &&  (fs_g_sectorcache.u32_clusterlist_start  == fs_g_nav.u32_cluster_sel_dir )
   &&  (fs_g_sectorcache.u32_clusterlist_pos    == u32_cluster_pos ) )
   {
         return true;      // The internal cache contains the sector asked
8000a282:	30 18       	mov	r8,1
8000a284:	c2 58       	rjmp	8000a2ce <fat_read_dir+0x8a>
   }

   // Get sector address corresponding at cluster list position
   fs_g_seg.u32_addr = fs_g_nav.u32_cluster_sel_dir;
8000a286:	49 78       	lddpc	r8,8000a2e0 <fat_read_dir+0x9c>
8000a288:	70 89       	ld.w	r9,r8[0x20]
8000a28a:	49 78       	lddpc	r8,8000a2e4 <fat_read_dir+0xa0>
8000a28c:	91 09       	st.w	r8[0x0],r9
   fs_g_seg.u32_size_or_pos = u32_cluster_pos;
8000a28e:	49 68       	lddpc	r8,8000a2e4 <fat_read_dir+0xa0>
8000a290:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000a294:	91 19       	st.w	r8[0x4],r9
   if( fat_cluster_list( FS_CLUST_ACT_ONE, false ) )
8000a296:	30 0b       	mov	r11,0
8000a298:	30 2c       	mov	r12,2
8000a29a:	f0 1f 00 14 	mcall	8000a2e8 <fat_read_dir+0xa4>
8000a29e:	18 98       	mov	r8,r12
8000a2a0:	58 08       	cp.w	r8,0
8000a2a2:	c1 50       	breq	8000a2cc <fat_read_dir+0x88>
   {
      // Read the sector
      fs_gu32_addrsector = fs_g_seg.u32_addr;
8000a2a4:	49 08       	lddpc	r8,8000a2e4 <fat_read_dir+0xa0>
8000a2a6:	70 09       	ld.w	r9,r8[0x0]
8000a2a8:	49 18       	lddpc	r8,8000a2ec <fat_read_dir+0xa8>
8000a2aa:	91 09       	st.w	r8[0x0],r9
      if( fat_cache_read_sector( true ) )
8000a2ac:	30 1c       	mov	r12,1
8000a2ae:	f0 1f 00 11 	mcall	8000a2f0 <fat_read_dir+0xac>
8000a2b2:	18 98       	mov	r8,r12
8000a2b4:	58 08       	cp.w	r8,0
8000a2b6:	c0 b0       	breq	8000a2cc <fat_read_dir+0x88>
      {
         // Update information about internal sector cache
         fs_g_sectorcache.u32_clusterlist_start  = fs_g_nav.u32_cluster_sel_dir;
8000a2b8:	48 a8       	lddpc	r8,8000a2e0 <fat_read_dir+0x9c>
8000a2ba:	70 89       	ld.w	r9,r8[0x20]
8000a2bc:	48 88       	lddpc	r8,8000a2dc <fat_read_dir+0x98>
8000a2be:	91 39       	st.w	r8[0xc],r9
         fs_g_sectorcache.u32_clusterlist_pos    = u32_cluster_pos;
8000a2c0:	48 78       	lddpc	r8,8000a2dc <fat_read_dir+0x98>
8000a2c2:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000a2c6:	91 49       	st.w	r8[0x10],r9
         return true;
8000a2c8:	30 18       	mov	r8,1
8000a2ca:	c0 28       	rjmp	8000a2ce <fat_read_dir+0x8a>
      }
   }
   return false;
8000a2cc:	30 08       	mov	r8,0
}
8000a2ce:	10 9c       	mov	r12,r8
8000a2d0:	2f fd       	sub	sp,-4
8000a2d2:	e3 cd 80 80 	ldm	sp++,r7,pc
8000a2d6:	00 00       	add	r0,r0
8000a2d8:	00 00       	add	r0,r0
8000a2da:	0d d4       	ld.ub	r4,r6[0x5]
8000a2dc:	00 00       	add	r0,r0
8000a2de:	0e 10       	sub	r0,r7
8000a2e0:	00 00       	add	r0,r0
8000a2e2:	0d 88       	ld.ub	r8,r6[0x0]
8000a2e4:	00 00       	add	r0,r0
8000a2e6:	0e 30       	cp.w	r0,r7
8000a2e8:	80 00       	ld.sh	r0,r0[0x0]
8000a2ea:	8f 60       	st.w	r7[0x18],r0
8000a2ec:	00 00       	add	r0,r0
8000a2ee:	0b 44       	ld.w	r4,--r5
8000a2f0:	80 00       	ld.sh	r0,r0[0x0]
8000a2f2:	aa c8       	st.b	r5[0x4],r8

8000a2f4 <fat_entry_check>:
//!   fs_g_sector       The directory sector corresponding at the current position
//!   fs_g_nav_fast.u16_entry_pos_sel_file    Position in directory of the entry file (unit entry)
//! @endverbatim
//!
bool  fat_entry_check( bool b_type )
{
8000a2f4:	eb cd 40 80 	pushm	r7,lr
8000a2f8:	1a 97       	mov	r7,sp
8000a2fa:	20 3d       	sub	sp,12
8000a2fc:	18 98       	mov	r8,r12
8000a2fe:	ef 68 ff f4 	st.b	r7[-12],r8
   PTR_CACHE u8_ptr_entry;
   uint8_t u8_first_byte, u8_seconde_byte;
   uint8_t u8_attribut;

   u8_ptr_entry = fat_get_ptr_entry();
8000a302:	f0 1f 00 2e 	mcall	8000a3b8 <fat_entry_check+0xc4>
8000a306:	18 98       	mov	r8,r12
8000a308:	ef 48 ff f8 	st.w	r7[-8],r8

   u8_first_byte = u8_ptr_entry[0];
8000a30c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a310:	11 88       	ld.ub	r8,r8[0x0]
8000a312:	ef 68 ff fd 	st.b	r7[-3],r8
   if ( FS_ENTRY_END == u8_first_byte )
8000a316:	ef 39 ff fd 	ld.ub	r9,r7[-3]
8000a31a:	30 08       	mov	r8,0
8000a31c:	f0 09 18 00 	cp.b	r9,r8
8000a320:	c0 61       	brne	8000a32c <fat_entry_check+0x38>
   {
      fs_g_status = FS_ERR_ENTRY_EMPTY;   // end of directory
8000a322:	4a 79       	lddpc	r9,8000a3bc <fat_entry_check+0xc8>
8000a324:	30 a8       	mov	r8,10
8000a326:	b2 88       	st.b	r9[0x0],r8
      return false;
8000a328:	30 08       	mov	r8,0
8000a32a:	c4 38       	rjmp	8000a3b0 <fat_entry_check+0xbc>
   }
   fs_g_status = FS_ERR_ENTRY_BAD;        // by default BAD ENTRY
8000a32c:	4a 49       	lddpc	r9,8000a3bc <fat_entry_check+0xc8>
8000a32e:	30 b8       	mov	r8,11
8000a330:	b2 88       	st.b	r9[0x0],r8
   if ( FS_ENTRY_DEL == u8_first_byte )      { return false;   } // entry deleted
8000a332:	ef 39 ff fd 	ld.ub	r9,r7[-3]
8000a336:	3e 58       	mov	r8,-27
8000a338:	f0 09 18 00 	cp.b	r9,r8
8000a33c:	c0 31       	brne	8000a342 <fat_entry_check+0x4e>
8000a33e:	30 08       	mov	r8,0
8000a340:	c3 88       	rjmp	8000a3b0 <fat_entry_check+0xbc>
   if (   '.'  == u8_first_byte )            { return false;   } // current dir "."
8000a342:	ef 39 ff fd 	ld.ub	r9,r7[-3]
8000a346:	32 e8       	mov	r8,46
8000a348:	f0 09 18 00 	cp.b	r9,r8
8000a34c:	c0 31       	brne	8000a352 <fat_entry_check+0x5e>
8000a34e:	30 08       	mov	r8,0
8000a350:	c3 08       	rjmp	8000a3b0 <fat_entry_check+0xbc>
   u8_seconde_byte = u8_ptr_entry[1];
8000a352:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a356:	2f f8       	sub	r8,-1
8000a358:	11 88       	ld.ub	r8,r8[0x0]
8000a35a:	ef 68 ff fe 	st.b	r7[-2],r8
   if ( ('.'  == u8_first_byte)
8000a35e:	ef 39 ff fd 	ld.ub	r9,r7[-3]
8000a362:	32 e8       	mov	r8,46
8000a364:	f0 09 18 00 	cp.b	r9,r8
8000a368:	c0 91       	brne	8000a37a <fat_entry_check+0x86>
8000a36a:	ef 39 ff fe 	ld.ub	r9,r7[-2]
8000a36e:	32 e8       	mov	r8,46
8000a370:	f0 09 18 00 	cp.b	r9,r8
8000a374:	c0 31       	brne	8000a37a <fat_entry_check+0x86>
   &&   ('.'  == u8_seconde_byte) )          { return false;   } // current dir ".."
8000a376:	30 08       	mov	r8,0
8000a378:	c1 c8       	rjmp	8000a3b0 <fat_entry_check+0xbc>

   // Check Attribute
   u8_attribut = u8_ptr_entry[11];
8000a37a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a37e:	2f 58       	sub	r8,-11
8000a380:	11 88       	ld.ub	r8,r8[0x0]
8000a382:	ef 68 ff ff 	st.b	r7[-1],r8
   if ( FS_ATTR_VOLUME_ID & u8_attribut )    { return false;   } // volume id
8000a386:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000a38a:	e2 18 00 08 	andl	r8,0x8,COH
8000a38e:	c0 30       	breq	8000a394 <fat_entry_check+0xa0>
8000a390:	30 08       	mov	r8,0
8000a392:	c0 f8       	rjmp	8000a3b0 <fat_entry_check+0xbc>
   // Optimization, this line isn't necessary because the next test control this case
   // if ( FS_ATTR_LFN_ENTRY == *u8_ptr_entry) { return false;   } // long file name

   // Check entry type
   if( FS_ATTR_DIRECTORY & u8_attribut )
8000a394:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000a398:	e2 18 00 10 	andl	r8,0x10,COH
8000a39c:	c0 80       	breq	8000a3ac <fat_entry_check+0xb8>
   {
      return (FS_DIR == b_type);
8000a39e:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000a3a2:	ec 18 00 01 	eorl	r8,0x1
8000a3a6:	5c 58       	castu.b	r8
8000a3a8:	5c 58       	castu.b	r8
8000a3aa:	c0 38       	rjmp	8000a3b0 <fat_entry_check+0xbc>
   }else{
      return (FS_FILE == b_type);
8000a3ac:	ef 38 ff f4 	ld.ub	r8,r7[-12]
   }
}
8000a3b0:	10 9c       	mov	r12,r8
8000a3b2:	2f dd       	sub	sp,-12
8000a3b4:	e3 cd 80 80 	ldm	sp++,r7,pc
8000a3b8:	80 00       	ld.sh	r0,r0[0x0]
8000a3ba:	aa a0       	st.b	r5[0x2],r0
8000a3bc:	00 00       	add	r0,r0
8000a3be:	0d d8       	ld.ub	r8,r6[0x5]

8000a3c0 <fat_get_entry_info>:
//! OUT:
//!   fs_g_nav_entry. u32_cluster, u8_attr, u32_size
//! @endverbatim
//!
void  fat_get_entry_info( void )
{
8000a3c0:	eb cd 40 80 	pushm	r7,lr
8000a3c4:	1a 97       	mov	r7,sp
8000a3c6:	20 1d       	sub	sp,4
   PTR_CACHE ptr_entry;

   ptr_entry = fat_get_ptr_entry();
8000a3c8:	f0 1f 00 32 	mcall	8000a490 <fat_get_entry_info+0xd0>
8000a3cc:	18 98       	mov	r8,r12
8000a3ce:	ef 48 ff fc 	st.w	r7[-4],r8

   // Get Attribute
   ptr_entry+= 11;
8000a3d2:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a3d6:	2f 58       	sub	r8,-11
8000a3d8:	ef 48 ff fc 	st.w	r7[-4],r8
   fs_g_nav_entry.u8_attr = ptr_entry[0];
8000a3dc:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a3e0:	11 88       	ld.ub	r8,r8[0x0]
8000a3e2:	4a d9       	lddpc	r9,8000a494 <fat_get_entry_info+0xd4>
8000a3e4:	b2 a8       	st.b	r9[0x2],r8

   // Get the first cluster of the file cluster list
   ptr_entry += (20-11);
8000a3e6:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a3ea:	2f 78       	sub	r8,-9
8000a3ec:	ef 48 ff fc 	st.w	r7[-4],r8
   LSB2(fs_g_nav_entry.u32_cluster) = ptr_entry[0];
8000a3f0:	4a 98       	lddpc	r8,8000a494 <fat_get_entry_info+0xd4>
8000a3f2:	2f c8       	sub	r8,-4
8000a3f4:	f0 c9 ff ff 	sub	r9,r8,-1
8000a3f8:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a3fc:	11 88       	ld.ub	r8,r8[0x0]
8000a3fe:	b2 88       	st.b	r9[0x0],r8
   LSB3(fs_g_nav_entry.u32_cluster) = ptr_entry[1];
8000a400:	4a 58       	lddpc	r8,8000a494 <fat_get_entry_info+0xd4>
8000a402:	f0 c9 ff fc 	sub	r9,r8,-4
8000a406:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a40a:	2f f8       	sub	r8,-1
8000a40c:	11 88       	ld.ub	r8,r8[0x0]
8000a40e:	b2 88       	st.b	r9[0x0],r8
   ptr_entry += (26-20);
8000a410:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a414:	2f a8       	sub	r8,-6
8000a416:	ef 48 ff fc 	st.w	r7[-4],r8
   LSB0(fs_g_nav_entry.u32_cluster) = ptr_entry[0];
8000a41a:	49 f8       	lddpc	r8,8000a494 <fat_get_entry_info+0xd4>
8000a41c:	2f c8       	sub	r8,-4
8000a41e:	f0 c9 ff fd 	sub	r9,r8,-3
8000a422:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a426:	11 88       	ld.ub	r8,r8[0x0]
8000a428:	b2 88       	st.b	r9[0x0],r8
   LSB1(fs_g_nav_entry.u32_cluster) = ptr_entry[1];
8000a42a:	49 b8       	lddpc	r8,8000a494 <fat_get_entry_info+0xd4>
8000a42c:	2f c8       	sub	r8,-4
8000a42e:	f0 c9 ff fe 	sub	r9,r8,-2
8000a432:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a436:	2f f8       	sub	r8,-1
8000a438:	11 88       	ld.ub	r8,r8[0x0]
8000a43a:	b2 88       	st.b	r9[0x0],r8

   // Get the size of file
   ptr_entry += (28-26);
8000a43c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a440:	2f e8       	sub	r8,-2
8000a442:	ef 48 ff fc 	st.w	r7[-4],r8
   LSB0(fs_g_nav_entry.u32_size) = ptr_entry[0];
8000a446:	49 48       	lddpc	r8,8000a494 <fat_get_entry_info+0xd4>
8000a448:	2f 88       	sub	r8,-8
8000a44a:	f0 c9 ff fd 	sub	r9,r8,-3
8000a44e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a452:	11 88       	ld.ub	r8,r8[0x0]
8000a454:	b2 88       	st.b	r9[0x0],r8
   LSB1(fs_g_nav_entry.u32_size) = ptr_entry[1];
8000a456:	49 08       	lddpc	r8,8000a494 <fat_get_entry_info+0xd4>
8000a458:	2f 88       	sub	r8,-8
8000a45a:	f0 c9 ff fe 	sub	r9,r8,-2
8000a45e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a462:	2f f8       	sub	r8,-1
8000a464:	11 88       	ld.ub	r8,r8[0x0]
8000a466:	b2 88       	st.b	r9[0x0],r8
   LSB2(fs_g_nav_entry.u32_size) = ptr_entry[2];
8000a468:	48 b8       	lddpc	r8,8000a494 <fat_get_entry_info+0xd4>
8000a46a:	2f 88       	sub	r8,-8
8000a46c:	f0 c9 ff ff 	sub	r9,r8,-1
8000a470:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a474:	2f e8       	sub	r8,-2
8000a476:	11 88       	ld.ub	r8,r8[0x0]
8000a478:	b2 88       	st.b	r9[0x0],r8
   LSB3(fs_g_nav_entry.u32_size) = ptr_entry[3];
8000a47a:	48 78       	lddpc	r8,8000a494 <fat_get_entry_info+0xd4>
8000a47c:	f0 c9 ff f8 	sub	r9,r8,-8
8000a480:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a484:	2f d8       	sub	r8,-3
8000a486:	11 88       	ld.ub	r8,r8[0x0]
8000a488:	b2 88       	st.b	r9[0x0],r8
}
8000a48a:	2f fd       	sub	sp,-4
8000a48c:	e3 cd 80 80 	ldm	sp++,r7,pc
8000a490:	80 00       	ld.sh	r0,r0[0x0]
8000a492:	aa a0       	st.b	r5[0x2],r0
8000a494:	00 00       	add	r0,r0
8000a496:	0b 48       	ld.w	r8,--r5

8000a498 <fat_entry_is_dir>:
//!
//! @return    true,    this entry is a directory
//! @return    false,   otherwise
//!
bool  fat_entry_is_dir(void)
{
8000a498:	eb cd 40 80 	pushm	r7,lr
8000a49c:	1a 97       	mov	r7,sp
   fs_g_status = FS_ERR_NO_DIR;
8000a49e:	48 79       	lddpc	r9,8000a4b8 <fat_entry_is_dir+0x20>
8000a4a0:	30 d8       	mov	r8,13
8000a4a2:	b2 88       	st.b	r9[0x0],r8
   return (FS_ATTR_DIRECTORY & fs_g_nav_entry.u8_attr);
8000a4a4:	48 68       	lddpc	r8,8000a4bc <fat_entry_is_dir+0x24>
8000a4a6:	11 a8       	ld.ub	r8,r8[0x2]
8000a4a8:	e2 18 00 10 	andl	r8,0x10,COH
8000a4ac:	5f 18       	srne	r8
8000a4ae:	5c 58       	castu.b	r8
}
8000a4b0:	10 9c       	mov	r12,r8
8000a4b2:	e3 cd 80 80 	ldm	sp++,r7,pc
8000a4b6:	00 00       	add	r0,r0
8000a4b8:	00 00       	add	r0,r0
8000a4ba:	0d d8       	ld.ub	r8,r6[0x5]
8000a4bc:	00 00       	add	r0,r0
8000a4be:	0b 48       	ld.w	r8,--r5

8000a4c0 <fat_clear_entry_info_and_ptr>:


//! This function resets the selection pointers
//!
void  fat_clear_entry_info_and_ptr( void )
{
8000a4c0:	eb cd 40 80 	pushm	r7,lr
8000a4c4:	1a 97       	mov	r7,sp
   fs_g_nav_fast.u16_entry_pos_sel_file= FS_NO_SEL;
8000a4c6:	49 09       	lddpc	r9,8000a504 <fat_clear_entry_info_and_ptr+0x44>
8000a4c8:	3f f8       	mov	r8,-1
8000a4ca:	b2 18       	st.h	r9[0x2],r8
   fs_g_nav.u16_pos_sel_file           = FS_NO_SEL;
8000a4cc:	48 f9       	lddpc	r9,8000a508 <fat_clear_entry_info_and_ptr+0x48>
8000a4ce:	3f f8       	mov	r8,-1
8000a4d0:	f3 58 00 24 	st.h	r9[36],r8
   if( !fs_g_nav.b_mode_nav_single )
8000a4d4:	48 d8       	lddpc	r8,8000a508 <fat_clear_entry_info_and_ptr+0x48>
8000a4d6:	f1 38 00 2d 	ld.ub	r8,r8[45]
8000a4da:	58 08       	cp.w	r8,0
8000a4dc:	c0 51       	brne	8000a4e6 <fat_clear_entry_info_and_ptr+0x26>
   {
      fs_g_nav.b_mode_nav                 = FS_DIR;
8000a4de:	48 b9       	lddpc	r9,8000a508 <fat_clear_entry_info_and_ptr+0x48>
8000a4e0:	30 08       	mov	r8,0
8000a4e2:	f3 68 00 2c 	st.b	r9[44],r8
   }
   fs_g_nav_entry.u8_attr     = 0;
8000a4e6:	48 a9       	lddpc	r9,8000a50c <fat_clear_entry_info_and_ptr+0x4c>
8000a4e8:	30 08       	mov	r8,0
8000a4ea:	b2 a8       	st.b	r9[0x2],r8
   fs_g_nav_entry.u32_cluster = 0;
8000a4ec:	48 88       	lddpc	r8,8000a50c <fat_clear_entry_info_and_ptr+0x4c>
8000a4ee:	30 09       	mov	r9,0
8000a4f0:	91 19       	st.w	r8[0x4],r9
   fs_g_nav_entry.u32_size    = 0;
8000a4f2:	48 78       	lddpc	r8,8000a50c <fat_clear_entry_info_and_ptr+0x4c>
8000a4f4:	30 09       	mov	r9,0
8000a4f6:	91 29       	st.w	r8[0x8],r9
   Fat_file_close();
8000a4f8:	48 59       	lddpc	r9,8000a50c <fat_clear_entry_info_and_ptr+0x4c>
8000a4fa:	30 08       	mov	r8,0
8000a4fc:	b2 88       	st.b	r9[0x0],r8
}
8000a4fe:	e3 cd 80 80 	ldm	sp++,r7,pc
8000a502:	00 00       	add	r0,r0
8000a504:	00 00       	add	r0,r0
8000a506:	0d d4       	ld.ub	r4,r6[0x5]
8000a508:	00 00       	add	r0,r0
8000a50a:	0d 88       	ld.ub	r8,r6[0x0]
8000a50c:	00 00       	add	r0,r0
8000a50e:	0b 48       	ld.w	r8,--r5

8000a510 <fat_write_entry_file>:
//! OUT:
//!   fs_g_sector    Updated
//! @endverbatim
//!
void  fat_write_entry_file( void )
{
8000a510:	eb cd 40 80 	pushm	r7,lr
8000a514:	1a 97       	mov	r7,sp
8000a516:	20 1d       	sub	sp,4
   PTR_CACHE ptr_entry;

   fat_cache_mark_sector_as_dirty();
8000a518:	f0 1f 00 32 	mcall	8000a5e0 <fat_write_entry_file+0xd0>
   ptr_entry = fat_get_ptr_entry();
8000a51c:	f0 1f 00 32 	mcall	8000a5e4 <fat_write_entry_file+0xd4>
8000a520:	18 98       	mov	r8,r12
8000a522:	ef 48 ff fc 	st.w	r7[-4],r8
      if( 0 == fs_g_nav_entry.u32_size )
         fs_g_nav_entry.u32_cluster = 0;
   }

   //! Write the Attribute
   ptr_entry+= 11;
8000a526:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a52a:	2f 58       	sub	r8,-11
8000a52c:	ef 48 ff fc 	st.w	r7[-4],r8
   ptr_entry[0] = fs_g_nav_entry.u8_attr;
8000a530:	4a e8       	lddpc	r8,8000a5e8 <fat_write_entry_file+0xd8>
8000a532:	11 a8       	ld.ub	r8,r8[0x2]
8000a534:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000a538:	b2 88       	st.b	r9[0x0],r8

   // Write the first cluster of file cluster list
   ptr_entry += (20-11);
8000a53a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a53e:	2f 78       	sub	r8,-9
8000a540:	ef 48 ff fc 	st.w	r7[-4],r8
   ptr_entry[0] = LSB2(fs_g_nav_entry.u32_cluster);
8000a544:	4a 98       	lddpc	r8,8000a5e8 <fat_write_entry_file+0xd8>
8000a546:	2f c8       	sub	r8,-4
8000a548:	2f f8       	sub	r8,-1
8000a54a:	11 88       	ld.ub	r8,r8[0x0]
8000a54c:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000a550:	b2 88       	st.b	r9[0x0],r8
   ptr_entry[1] = LSB3(fs_g_nav_entry.u32_cluster);
8000a552:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a556:	f0 c9 ff ff 	sub	r9,r8,-1
8000a55a:	4a 48       	lddpc	r8,8000a5e8 <fat_write_entry_file+0xd8>
8000a55c:	2f c8       	sub	r8,-4
8000a55e:	11 88       	ld.ub	r8,r8[0x0]
8000a560:	b2 88       	st.b	r9[0x0],r8
   ptr_entry += (26-20);
8000a562:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a566:	2f a8       	sub	r8,-6
8000a568:	ef 48 ff fc 	st.w	r7[-4],r8
   ptr_entry[0] = LSB0(fs_g_nav_entry.u32_cluster);
8000a56c:	49 f8       	lddpc	r8,8000a5e8 <fat_write_entry_file+0xd8>
8000a56e:	2f c8       	sub	r8,-4
8000a570:	2f d8       	sub	r8,-3
8000a572:	11 88       	ld.ub	r8,r8[0x0]
8000a574:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000a578:	b2 88       	st.b	r9[0x0],r8
   ptr_entry[1] = LSB1(fs_g_nav_entry.u32_cluster);
8000a57a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a57e:	f0 c9 ff ff 	sub	r9,r8,-1
8000a582:	49 a8       	lddpc	r8,8000a5e8 <fat_write_entry_file+0xd8>
8000a584:	2f c8       	sub	r8,-4
8000a586:	2f e8       	sub	r8,-2
8000a588:	11 88       	ld.ub	r8,r8[0x0]
8000a58a:	b2 88       	st.b	r9[0x0],r8

   //! Write the size of file
   ptr_entry += (28-26);
8000a58c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a590:	2f e8       	sub	r8,-2
8000a592:	ef 48 ff fc 	st.w	r7[-4],r8
   ptr_entry[0] = LSB0(fs_g_nav_entry.u32_size);
8000a596:	49 58       	lddpc	r8,8000a5e8 <fat_write_entry_file+0xd8>
8000a598:	2f 88       	sub	r8,-8
8000a59a:	2f d8       	sub	r8,-3
8000a59c:	11 88       	ld.ub	r8,r8[0x0]
8000a59e:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000a5a2:	b2 88       	st.b	r9[0x0],r8
   ptr_entry[1] = LSB1(fs_g_nav_entry.u32_size);
8000a5a4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a5a8:	f0 c9 ff ff 	sub	r9,r8,-1
8000a5ac:	48 f8       	lddpc	r8,8000a5e8 <fat_write_entry_file+0xd8>
8000a5ae:	2f 88       	sub	r8,-8
8000a5b0:	2f e8       	sub	r8,-2
8000a5b2:	11 88       	ld.ub	r8,r8[0x0]
8000a5b4:	b2 88       	st.b	r9[0x0],r8
   ptr_entry[2] = LSB2(fs_g_nav_entry.u32_size);
8000a5b6:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a5ba:	f0 c9 ff fe 	sub	r9,r8,-2
8000a5be:	48 b8       	lddpc	r8,8000a5e8 <fat_write_entry_file+0xd8>
8000a5c0:	2f 88       	sub	r8,-8
8000a5c2:	2f f8       	sub	r8,-1
8000a5c4:	11 88       	ld.ub	r8,r8[0x0]
8000a5c6:	b2 88       	st.b	r9[0x0],r8
   ptr_entry[3] = LSB3(fs_g_nav_entry.u32_size);
8000a5c8:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a5cc:	f0 c9 ff fd 	sub	r9,r8,-3
8000a5d0:	48 68       	lddpc	r8,8000a5e8 <fat_write_entry_file+0xd8>
8000a5d2:	2f 88       	sub	r8,-8
8000a5d4:	11 88       	ld.ub	r8,r8[0x0]
8000a5d6:	b2 88       	st.b	r9[0x0],r8
}
8000a5d8:	2f fd       	sub	sp,-4
8000a5da:	e3 cd 80 80 	ldm	sp++,r7,pc
8000a5de:	00 00       	add	r0,r0
8000a5e0:	80 00       	ld.sh	r0,r0[0x0]
8000a5e2:	ab b8       	sbr	r8,0xb
8000a5e4:	80 00       	ld.sh	r0,r0[0x0]
8000a5e6:	aa a0       	st.b	r5[0x2],r0
8000a5e8:	00 00       	add	r0,r0
8000a5ea:	0b 48       	ld.w	r8,--r5

8000a5ec <fat_entry_shortname>:
//!   fs_g_sector       The directory sector corresponding at the current position
//!   fs_g_nav_fast.u16_entry_pos_sel_file    Position in directory of the entry file (unit entry)
//! @endverbatim
//!
bool  fat_entry_shortname( FS_STRING sz_name , uint8_t u8_size_max , bool b_mode )
{
8000a5ec:	eb cd 40 80 	pushm	r7,lr
8000a5f0:	1a 97       	mov	r7,sp
8000a5f2:	20 6d       	sub	sp,24
8000a5f4:	ef 4c ff f0 	st.w	r7[-16],r12
8000a5f8:	16 99       	mov	r9,r11
8000a5fa:	14 98       	mov	r8,r10
8000a5fc:	ef 69 ff ec 	st.b	r7[-20],r9
8000a600:	ef 68 ff e8 	st.b	r7[-24],r8
   bool b_extension_nostart = true;
8000a604:	30 18       	mov	r8,1
8000a606:	ef 68 ff f4 	st.b	r7[-12],r8
   uint8_t u8_pos_name;
   uint8_t u8_entry_char, u8_szname_char;
   PTR_CACHE ptr_entry;
   uint8_t u8_pos_entry;

   fs_g_status = FS_ERR_NAME_INCORRECT;  // by default the name don't corresponding at filter name
8000a60a:	4e e9       	lddpc	r9,8000a7c0 <fat_entry_shortname+0x1d4>
8000a60c:	31 68       	mov	r8,22
8000a60e:	b2 88       	st.b	r9[0x0],r8

   u8_pos_name = 0;
8000a610:	30 08       	mov	r8,0
8000a612:	ef 68 ff f5 	st.b	r7[-11],r8
   u8_pos_entry = 0;
8000a616:	30 08       	mov	r8,0
8000a618:	ef 68 ff ff 	st.b	r7[-1],r8
   ptr_entry = fat_get_ptr_entry();
8000a61c:	f0 1f 00 6a 	mcall	8000a7c4 <fat_entry_shortname+0x1d8>
8000a620:	18 98       	mov	r8,r12
8000a622:	ef 48 ff f8 	st.w	r7[-8],r8

   // for each characters of short name
   while( 1 )
   {
      if( FS_SIZE_SFNAME == u8_pos_entry )
8000a626:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000a62a:	30 b8       	mov	r8,11
8000a62c:	f0 09 18 00 	cp.b	r9,r8
8000a630:	c0 51       	brne	8000a63a <fat_entry_shortname+0x4e>
      {
         u8_entry_char = 0;   // end of name
8000a632:	30 08       	mov	r8,0
8000a634:	ef 68 ff f6 	st.b	r7[-10],r8
8000a638:	c3 88       	rjmp	8000a6a8 <fat_entry_shortname+0xbc>
      }
      else
      {
         u8_entry_char = ptr_entry[ u8_pos_entry ];
8000a63a:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000a63e:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000a642:	f2 08 00 08 	add	r8,r9,r8
8000a646:	11 88       	ld.ub	r8,r8[0x0]
8000a648:	ef 68 ff f6 	st.b	r7[-10],r8
         if( ((FS_SIZE_SFNAME_WITHOUT_EXT == u8_pos_entry) && b_extension_nostart)  // end of name and '.' character not written
8000a64c:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000a650:	30 88       	mov	r8,8
8000a652:	f0 09 18 00 	cp.b	r9,r8
8000a656:	c0 71       	brne	8000a664 <fat_entry_shortname+0x78>
8000a658:	ef 39 ff f4 	ld.ub	r9,r7[-12]
8000a65c:	30 08       	mov	r8,0
8000a65e:	f0 09 18 00 	cp.b	r9,r8
8000a662:	c0 71       	brne	8000a670 <fat_entry_shortname+0x84>
8000a664:	ef 39 ff f6 	ld.ub	r9,r7[-10]
8000a668:	32 08       	mov	r8,32
8000a66a:	f0 09 18 00 	cp.b	r9,r8
8000a66e:	c1 d1       	brne	8000a6a8 <fat_entry_shortname+0xbc>
         ||  ( ' ' == u8_entry_char) )
         {
            // end of name or extension
            if( (FS_SIZE_SFNAME_WITHOUT_EXT >= u8_pos_entry)         // End of name without extension
8000a670:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000a674:	30 88       	mov	r8,8
8000a676:	f0 09 18 00 	cp.b	r9,r8
8000a67a:	e0 8b 00 14 	brhi	8000a6a2 <fat_entry_shortname+0xb6>
            &&  (' ' != ptr_entry[ FS_SIZE_SFNAME_WITHOUT_EXT ]) )   // extension exists
8000a67e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a682:	2f 88       	sub	r8,-8
8000a684:	11 89       	ld.ub	r9,r8[0x0]
         u8_entry_char = ptr_entry[ u8_pos_entry ];
         if( ((FS_SIZE_SFNAME_WITHOUT_EXT == u8_pos_entry) && b_extension_nostart)  // end of name and '.' character not written
         ||  ( ' ' == u8_entry_char) )
         {
            // end of name or extension
            if( (FS_SIZE_SFNAME_WITHOUT_EXT >= u8_pos_entry)         // End of name without extension
8000a686:	32 08       	mov	r8,32
8000a688:	f0 09 18 00 	cp.b	r9,r8
8000a68c:	c0 b0       	breq	8000a6a2 <fat_entry_shortname+0xb6>
            &&  (' ' != ptr_entry[ FS_SIZE_SFNAME_WITHOUT_EXT ]) )   // extension exists
            {
               // go to extension position
               b_extension_nostart = false;
8000a68e:	30 08       	mov	r8,0
8000a690:	ef 68 ff f4 	st.b	r7[-12],r8
               u8_pos_entry = FS_SIZE_SFNAME_WITHOUT_EXT-1;
8000a694:	30 78       	mov	r8,7
8000a696:	ef 68 ff ff 	st.b	r7[-1],r8
               u8_entry_char = '.';
8000a69a:	32 e8       	mov	r8,46
8000a69c:	ef 68 ff f6 	st.b	r7[-10],r8
         u8_entry_char = ptr_entry[ u8_pos_entry ];
         if( ((FS_SIZE_SFNAME_WITHOUT_EXT == u8_pos_entry) && b_extension_nostart)  // end of name and '.' character not written
         ||  ( ' ' == u8_entry_char) )
         {
            // end of name or extension
            if( (FS_SIZE_SFNAME_WITHOUT_EXT >= u8_pos_entry)         // End of name without extension
8000a6a0:	c0 48       	rjmp	8000a6a8 <fat_entry_shortname+0xbc>
               u8_pos_entry = FS_SIZE_SFNAME_WITHOUT_EXT-1;
               u8_entry_char = '.';
            }
            else
            {
               u8_entry_char = 0;                                    // end of name
8000a6a2:	30 08       	mov	r8,0
8000a6a4:	ef 68 ff f6 	st.b	r7[-10],r8
            }
         }
      }

      if( FS_NAME_GET == b_mode )
8000a6a8:	ef 39 ff e8 	ld.ub	r9,r7[-24]
8000a6ac:	30 08       	mov	r8,0
8000a6ae:	f0 09 18 00 	cp.b	r9,r8
8000a6b2:	c2 a0       	breq	8000a706 <fat_entry_shortname+0x11a>
      {
         if( !g_b_string_length )
8000a6b4:	4c 58       	lddpc	r8,8000a7c8 <fat_entry_shortname+0x1dc>
8000a6b6:	11 88       	ld.ub	r8,r8[0x0]
8000a6b8:	ec 18 00 01 	eorl	r8,0x1
8000a6bc:	5c 58       	castu.b	r8
8000a6be:	c5 30       	breq	8000a764 <fat_entry_shortname+0x178>
         {
            if(u8_pos_name >= (u8_size_max-1))
8000a6c0:	ef 39 ff f5 	ld.ub	r9,r7[-11]
8000a6c4:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8000a6c8:	20 18       	sub	r8,1
8000a6ca:	10 39       	cp.w	r9,r8
8000a6cc:	c0 45       	brlt	8000a6d4 <fat_entry_shortname+0xe8>
               u8_entry_char = 0;                                    // buffer full then force end of string
8000a6ce:	30 08       	mov	r8,0
8000a6d0:	ef 68 ff f6 	st.b	r7[-10],r8

            if( ('A'<=u8_entry_char) && (u8_entry_char<='Z'))
8000a6d4:	ef 39 ff f6 	ld.ub	r9,r7[-10]
8000a6d8:	34 08       	mov	r8,64
8000a6da:	f0 09 18 00 	cp.b	r9,r8
8000a6de:	e0 88 00 0e 	brls	8000a6fa <fat_entry_shortname+0x10e>
8000a6e2:	ef 39 ff f6 	ld.ub	r9,r7[-10]
8000a6e6:	35 a8       	mov	r8,90
8000a6e8:	f0 09 18 00 	cp.b	r9,r8
8000a6ec:	e0 8b 00 07 	brhi	8000a6fa <fat_entry_shortname+0x10e>
               u8_entry_char += ('a'-'A');                           // display short name in down case
8000a6f0:	ef 38 ff f6 	ld.ub	r8,r7[-10]
8000a6f4:	2e 08       	sub	r8,-32
8000a6f6:	ef 68 ff f6 	st.b	r7[-10],r8

            if( Is_unicode )
            {
               ((FS_STR_UNICODE)sz_name)[0] = u8_entry_char;
            }else{
               sz_name[0] = u8_entry_char;
8000a6fa:	ee f9 ff f0 	ld.w	r9,r7[-16]
8000a6fe:	ef 38 ff f6 	ld.ub	r8,r7[-10]
8000a702:	b2 88       	st.b	r9[0x0],r8
8000a704:	c3 08       	rjmp	8000a764 <fat_entry_shortname+0x178>

         if( Is_unicode )
         {
            u8_szname_char = ((FS_STR_UNICODE)sz_name)[0];
         }else{
            u8_szname_char = sz_name[0];
8000a706:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000a70a:	11 88       	ld.ub	r8,r8[0x0]
8000a70c:	ef 68 ff f7 	st.b	r7[-9],r8
         }
         if ('*' == u8_szname_char)
8000a710:	ef 39 ff f7 	ld.ub	r9,r7[-9]
8000a714:	32 a8       	mov	r8,42
8000a716:	f0 09 18 00 	cp.b	r9,r8
8000a71a:	c0 31       	brne	8000a720 <fat_entry_shortname+0x134>
         {  // end of filter name which authorize all next character
            return true;   //*** The name is correct ***
8000a71c:	30 18       	mov	r8,1
8000a71e:	c4 c8       	rjmp	8000a7b6 <fat_entry_shortname+0x1ca>
         }

         if( (0 != u8_entry_char) || (('\\' != u8_szname_char) && ('/' != u8_szname_char)) )
8000a720:	ef 39 ff f6 	ld.ub	r9,r7[-10]
8000a724:	30 08       	mov	r8,0
8000a726:	f0 09 18 00 	cp.b	r9,r8
8000a72a:	c0 d1       	brne	8000a744 <fat_entry_shortname+0x158>
8000a72c:	ef 39 ff f7 	ld.ub	r9,r7[-9]
8000a730:	35 c8       	mov	r8,92
8000a732:	f0 09 18 00 	cp.b	r9,r8
8000a736:	c1 70       	breq	8000a764 <fat_entry_shortname+0x178>
8000a738:	ef 39 ff f7 	ld.ub	r9,r7[-9]
8000a73c:	32 f8       	mov	r8,47
8000a73e:	f0 09 18 00 	cp.b	r9,r8
8000a742:	c1 10       	breq	8000a764 <fat_entry_shortname+0x178>
         {
            if((u8_szname_char != u8_entry_char)
8000a744:	ef 39 ff f7 	ld.ub	r9,r7[-9]
8000a748:	ef 38 ff f6 	ld.ub	r8,r7[-10]
8000a74c:	f0 09 18 00 	cp.b	r9,r8
8000a750:	c0 a0       	breq	8000a764 <fat_entry_shortname+0x178>
            && (u8_szname_char != (u8_entry_char+('a'-'A'))) )  // no case sensitive
8000a752:	ef 39 ff f7 	ld.ub	r9,r7[-9]
8000a756:	ef 38 ff f6 	ld.ub	r8,r7[-10]
8000a75a:	2e 08       	sub	r8,-32
            return true;   //*** The name is correct ***
         }

         if( (0 != u8_entry_char) || (('\\' != u8_szname_char) && ('/' != u8_szname_char)) )
         {
            if((u8_szname_char != u8_entry_char)
8000a75c:	10 39       	cp.w	r9,r8
8000a75e:	c0 30       	breq	8000a764 <fat_entry_shortname+0x178>
            && (u8_szname_char != (u8_entry_char+('a'-'A'))) )  // no case sensitive
               return false;  // short name not equal
8000a760:	30 08       	mov	r8,0
8000a762:	c2 a8       	rjmp	8000a7b6 <fat_entry_shortname+0x1ca>
         }
      }

      // For each characters
      if (0 == u8_entry_char)
8000a764:	ef 39 ff f6 	ld.ub	r9,r7[-10]
8000a768:	30 08       	mov	r8,0
8000a76a:	f0 09 18 00 	cp.b	r9,r8
8000a76e:	c0 e1       	brne	8000a78a <fat_entry_shortname+0x19e>
      {
         if( g_b_string_length )
8000a770:	49 68       	lddpc	r8,8000a7c8 <fat_entry_shortname+0x1dc>
8000a772:	11 88       	ld.ub	r8,r8[0x0]
8000a774:	58 08       	cp.w	r8,0
8000a776:	c0 80       	breq	8000a786 <fat_entry_shortname+0x19a>
         {
            ((FS_STR_UNICODE)sz_name)[0] = u8_pos_name+1;      // Get length name
8000a778:	ee f9 ff f0 	ld.w	r9,r7[-16]
8000a77c:	ef 38 ff f5 	ld.ub	r8,r7[-11]
8000a780:	2f f8       	sub	r8,-1
8000a782:	5c 88       	casts.h	r8
8000a784:	b2 08       	st.h	r9[0x0],r8
         }
         return true;   // End of test correct or end of get name
8000a786:	30 18       	mov	r8,1
8000a788:	c1 78       	rjmp	8000a7b6 <fat_entry_shortname+0x1ca>
      }
      if( !g_b_string_length )
8000a78a:	49 08       	lddpc	r8,8000a7c8 <fat_entry_shortname+0x1dc>
8000a78c:	11 88       	ld.ub	r8,r8[0x0]
8000a78e:	ec 18 00 01 	eorl	r8,0x1
8000a792:	5c 58       	castu.b	r8
8000a794:	c0 60       	breq	8000a7a0 <fat_entry_shortname+0x1b4>
      {
         sz_name += (Is_unicode? 2 : 1 );
8000a796:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000a79a:	2f f8       	sub	r8,-1
8000a79c:	ef 48 ff f0 	st.w	r7[-16],r8
      }
      u8_pos_name++;
8000a7a0:	ef 38 ff f5 	ld.ub	r8,r7[-11]
8000a7a4:	2f f8       	sub	r8,-1
8000a7a6:	ef 68 ff f5 	st.b	r7[-11],r8
      u8_pos_entry++;
8000a7aa:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000a7ae:	2f f8       	sub	r8,-1
8000a7b0:	ef 68 ff ff 	st.b	r7[-1],r8
   }
8000a7b4:	c3 9b       	rjmp	8000a626 <fat_entry_shortname+0x3a>
}
8000a7b6:	10 9c       	mov	r12,r8
8000a7b8:	2f ad       	sub	sp,-24
8000a7ba:	e3 cd 80 80 	ldm	sp++,r7,pc
8000a7be:	00 00       	add	r0,r0
8000a7c0:	00 00       	add	r0,r0
8000a7c2:	0d d8       	ld.ub	r8,r6[0x5]
8000a7c4:	80 00       	ld.sh	r0,r0[0x0]
8000a7c6:	aa a0       	st.b	r5[0x2],r0
8000a7c8:	00 00       	add	r0,r0
8000a7ca:	0d d9       	ld.ub	r9,r6[0x5]

8000a7cc <fat_entry_longname>:
//!   fs_g_sector       The directory sector corresponding at the current position
//!   fs_g_nav_fast.u16_entry_pos_sel_file    Position in directory of the entry file (unit entry)
//! @endverbatim
//!
bool  fat_entry_longname( FS_STRING sz_name , uint8_t u8_size_max , bool b_mode , bool b_match_case )
{
8000a7cc:	eb cd 40 80 	pushm	r7,lr
8000a7d0:	1a 97       	mov	r7,sp
8000a7d2:	20 7d       	sub	sp,28
8000a7d4:	ef 4c ff f0 	st.w	r7[-16],r12
8000a7d8:	12 98       	mov	r8,r9
8000a7da:	16 99       	mov	r9,r11
8000a7dc:	ef 69 ff ec 	st.b	r7[-20],r9
8000a7e0:	14 99       	mov	r9,r10
8000a7e2:	ef 69 ff e8 	st.b	r7[-24],r9
8000a7e6:	ef 68 ff e4 	st.b	r7[-28],r8
   uint8_t u8_pos_name;
   PTR_CACHE ptr_entry;
   uint16_t u16_unicode_entry;
   uint16_t u16_unicode_szname;

   ptr_entry = fat_get_ptr_entry();
8000a7ea:	f0 1f 00 99 	mcall	8000aa4c <fat_entry_longname+0x280>
8000a7ee:	18 98       	mov	r8,r12
8000a7f0:	ef 48 ff f8 	st.w	r7[-8],r8

   if( (FS_ENTRY_END == *ptr_entry )            // end of directory
8000a7f4:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a7f8:	11 88       	ld.ub	r8,r8[0x0]
8000a7fa:	58 08       	cp.w	r8,0
8000a7fc:	c1 00       	breq	8000a81c <fat_entry_longname+0x50>
   ||  (FS_ENTRY_DEL == *ptr_entry )            // entry deleted
8000a7fe:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a802:	11 89       	ld.ub	r9,r8[0x0]
   uint16_t u16_unicode_entry;
   uint16_t u16_unicode_szname;

   ptr_entry = fat_get_ptr_entry();

   if( (FS_ENTRY_END == *ptr_entry )            // end of directory
8000a804:	3e 58       	mov	r8,-27
8000a806:	f0 09 18 00 	cp.b	r9,r8
8000a80a:	c0 90       	breq	8000a81c <fat_entry_longname+0x50>
   ||  (FS_ENTRY_DEL == *ptr_entry )            // entry deleted
   ||  (FS_ATTR_LFN_ENTRY != ptr_entry[11]) )   // no long name
8000a80c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a810:	2f 58       	sub	r8,-11
8000a812:	11 89       	ld.ub	r9,r8[0x0]
   uint16_t u16_unicode_entry;
   uint16_t u16_unicode_szname;

   ptr_entry = fat_get_ptr_entry();

   if( (FS_ENTRY_END == *ptr_entry )            // end of directory
8000a814:	30 f8       	mov	r8,15
8000a816:	f0 09 18 00 	cp.b	r9,r8
8000a81a:	c0 70       	breq	8000a828 <fat_entry_longname+0x5c>
   ||  (FS_ENTRY_DEL == *ptr_entry )            // entry deleted
   ||  (FS_ATTR_LFN_ENTRY != ptr_entry[11]) )   // no long name
   {
      fs_g_status = FS_ERR_ENTRY_BAD;
8000a81c:	fe f9 02 34 	ld.w	r9,pc[564]
8000a820:	30 b8       	mov	r8,11
8000a822:	b2 88       	st.b	r9[0x0],r8
      return false;
8000a824:	30 08       	mov	r8,0
8000a826:	c0 e9       	rjmp	8000aa42 <fat_entry_longname+0x276>
   }

   if( g_b_string_length )
8000a828:	fe f8 02 2c 	ld.w	r8,pc[556]
8000a82c:	11 88       	ld.ub	r8,r8[0x0]
8000a82e:	58 08       	cp.w	r8,0
8000a830:	c0 d0       	breq	8000a84a <fat_entry_longname+0x7e>
   {
      if ( 0 == (FS_ENTRY_LFN_LAST & *ptr_entry))
8000a832:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a836:	11 88       	ld.ub	r8,r8[0x0]
8000a838:	e2 18 00 40 	andl	r8,0x40,COH
8000a83c:	c0 71       	brne	8000a84a <fat_entry_longname+0x7e>
      {
         // no necessary -> ((FS_STR_UNICODE)sz_name)[0] = FS_SIZE_LFN_ENTRY;
         fs_g_status = FS_NO_LAST_LFN_ENTRY;
8000a83e:	fe f9 02 12 	ld.w	r9,pc[530]
8000a842:	31 08       	mov	r8,16
8000a844:	b2 88       	st.b	r9[0x0],r8
         return false;                          // Other entry long name
8000a846:	30 08       	mov	r8,0
8000a848:	cf d8       	rjmp	8000aa42 <fat_entry_longname+0x276>
      }
   }

   ptr_entry++;                                 // The long name start at offset 1 of the entry file
8000a84a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a84e:	2f f8       	sub	r8,-1
8000a850:	ef 48 ff f8 	st.w	r7[-8],r8

   u8_pos_name=0;
8000a854:	30 08       	mov	r8,0
8000a856:	ef 68 ff f7 	st.b	r7[-9],r8
   while( 1 )
   {
      LSB(u16_unicode_entry) = ptr_entry[0];
8000a85a:	ee c8 00 0c 	sub	r8,r7,12
8000a85e:	f0 c9 ff ff 	sub	r9,r8,-1
8000a862:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a866:	11 88       	ld.ub	r8,r8[0x0]
8000a868:	b2 88       	st.b	r9[0x0],r8
      MSB(u16_unicode_entry) = ptr_entry[1];
8000a86a:	ee c9 00 0c 	sub	r9,r7,12
8000a86e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a872:	2f f8       	sub	r8,-1
8000a874:	11 88       	ld.ub	r8,r8[0x0]
8000a876:	b2 88       	st.b	r9[0x0],r8
      if( FS_NAME_GET == b_mode )
8000a878:	ef 39 ff e8 	ld.ub	r9,r7[-24]
8000a87c:	30 08       	mov	r8,0
8000a87e:	f0 09 18 00 	cp.b	r9,r8
8000a882:	c1 b0       	breq	8000a8b8 <fat_entry_longname+0xec>
      {
         if( !g_b_string_length )
8000a884:	4f 48       	lddpc	r8,8000aa54 <fat_entry_longname+0x288>
8000a886:	11 88       	ld.ub	r8,r8[0x0]
8000a888:	ec 18 00 01 	eorl	r8,0x1
8000a88c:	5c 58       	castu.b	r8
8000a88e:	c5 a0       	breq	8000a942 <fat_entry_longname+0x176>
         {
            // Check the end of buffer
            if( u8_pos_name>=(u8_size_max-1) )
8000a890:	ef 39 ff f7 	ld.ub	r9,r7[-9]
8000a894:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8000a898:	20 18       	sub	r8,1
8000a89a:	10 39       	cp.w	r9,r8
8000a89c:	c0 75       	brlt	8000a8aa <fat_entry_longname+0xde>
               // Write end of string
               if( Is_unicode )
               {
                  ((FS_STR_UNICODE)sz_name)[0] = 0;
               }else{
                  sz_name[0] = 0;
8000a89e:	ee f9 ff f0 	ld.w	r9,r7[-16]
8000a8a2:	30 08       	mov	r8,0
8000a8a4:	b2 88       	st.b	r9[0x0],r8
               }
               return true;                     // the buffer is full
8000a8a6:	30 18       	mov	r8,1
8000a8a8:	cc d8       	rjmp	8000aa42 <fat_entry_longname+0x276>
            // Read and store the long name
            if( Is_unicode )
            {
               ((FS_STR_UNICODE)sz_name)[0] = u16_unicode_entry;
            }else{
               sz_name[0] = (uint8_t)u16_unicode_entry;
8000a8aa:	ef 08 ff f4 	ld.sh	r8,r7[-12]
8000a8ae:	5c 58       	castu.b	r8
8000a8b0:	ee f9 ff f0 	ld.w	r9,r7[-16]
8000a8b4:	b2 88       	st.b	r9[0x0],r8
8000a8b6:	c4 68       	rjmp	8000a942 <fat_entry_longname+0x176>
      {
         if( Is_unicode )
         {
            u16_unicode_szname = ((FS_STR_UNICODE)sz_name)[0];
         }else{
            u16_unicode_szname = sz_name[0];
8000a8b8:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000a8bc:	11 88       	ld.ub	r8,r8[0x0]
8000a8be:	ef 58 ff fe 	st.h	r7[-2],r8
         }
         // Check the name
         if( '*' == u16_unicode_szname )
8000a8c2:	ef 09 ff fe 	ld.sh	r9,r7[-2]
8000a8c6:	32 a8       	mov	r8,42
8000a8c8:	f0 09 19 00 	cp.h	r9,r8
8000a8cc:	c0 31       	brne	8000a8d2 <fat_entry_longname+0x106>
         {  // end of filter name which authorize all next character
            return true;   //*** The name is correct ***
8000a8ce:	30 18       	mov	r8,1
8000a8d0:	cb 98       	rjmp	8000aa42 <fat_entry_longname+0x276>
         }

         if( ((0 != u16_unicode_entry ) || (( '\\' != u16_unicode_szname) && ( '/' != u16_unicode_szname)) )
8000a8d2:	ef 08 ff f4 	ld.sh	r8,r7[-12]
8000a8d6:	58 08       	cp.w	r8,0
8000a8d8:	c0 d1       	brne	8000a8f2 <fat_entry_longname+0x126>
8000a8da:	ef 09 ff fe 	ld.sh	r9,r7[-2]
8000a8de:	35 c8       	mov	r8,92
8000a8e0:	f0 09 19 00 	cp.h	r9,r8
8000a8e4:	c2 f0       	breq	8000a942 <fat_entry_longname+0x176>
8000a8e6:	ef 09 ff fe 	ld.sh	r9,r7[-2]
8000a8ea:	32 f8       	mov	r8,47
8000a8ec:	f0 09 19 00 	cp.h	r9,r8
8000a8f0:	c2 90       	breq	8000a942 <fat_entry_longname+0x176>
         &&  ((u16_unicode_szname != (u16_unicode_entry+('a'-'A'))) || b_match_case)
8000a8f2:	ef 19 ff fe 	ld.uh	r9,r7[-2]
8000a8f6:	ef 08 ff f4 	ld.sh	r8,r7[-12]
8000a8fa:	5c 78       	castu.h	r8
8000a8fc:	2e 08       	sub	r8,-32
         if( '*' == u16_unicode_szname )
         {  // end of filter name which authorize all next character
            return true;   //*** The name is correct ***
         }

         if( ((0 != u16_unicode_entry ) || (( '\\' != u16_unicode_szname) && ( '/' != u16_unicode_szname)) )
8000a8fe:	10 39       	cp.w	r9,r8
8000a900:	c0 71       	brne	8000a90e <fat_entry_longname+0x142>
8000a902:	ef 39 ff e4 	ld.ub	r9,r7[-28]
8000a906:	30 08       	mov	r8,0
8000a908:	f0 09 18 00 	cp.b	r9,r8
8000a90c:	c1 b0       	breq	8000a942 <fat_entry_longname+0x176>
         &&  ((u16_unicode_szname != (u16_unicode_entry+('a'-'A'))) || b_match_case)
         &&  ((u16_unicode_szname != (u16_unicode_entry-('a'-'A'))) || b_match_case)
8000a90e:	ef 19 ff fe 	ld.uh	r9,r7[-2]
8000a912:	ef 08 ff f4 	ld.sh	r8,r7[-12]
8000a916:	5c 78       	castu.h	r8
8000a918:	22 08       	sub	r8,32
         if( '*' == u16_unicode_szname )
         {  // end of filter name which authorize all next character
            return true;   //*** The name is correct ***
         }

         if( ((0 != u16_unicode_entry ) || (( '\\' != u16_unicode_szname) && ( '/' != u16_unicode_szname)) )
8000a91a:	10 39       	cp.w	r9,r8
8000a91c:	c0 71       	brne	8000a92a <fat_entry_longname+0x15e>
8000a91e:	ef 39 ff e4 	ld.ub	r9,r7[-28]
8000a922:	30 08       	mov	r8,0
8000a924:	f0 09 18 00 	cp.b	r9,r8
8000a928:	c0 d0       	breq	8000a942 <fat_entry_longname+0x176>
         &&  ((u16_unicode_szname != (u16_unicode_entry+('a'-'A'))) || b_match_case)
         &&  ((u16_unicode_szname != (u16_unicode_entry-('a'-'A'))) || b_match_case)
         &&  (u16_unicode_szname != u16_unicode_entry) )
8000a92a:	ef 08 ff f4 	ld.sh	r8,r7[-12]
         if( '*' == u16_unicode_szname )
         {  // end of filter name which authorize all next character
            return true;   //*** The name is correct ***
         }

         if( ((0 != u16_unicode_entry ) || (( '\\' != u16_unicode_szname) && ( '/' != u16_unicode_szname)) )
8000a92e:	ef 09 ff fe 	ld.sh	r9,r7[-2]
8000a932:	f0 09 19 00 	cp.h	r9,r8
8000a936:	c0 60       	breq	8000a942 <fat_entry_longname+0x176>
         &&  ((u16_unicode_szname != (u16_unicode_entry+('a'-'A'))) || b_match_case)
         &&  ((u16_unicode_szname != (u16_unicode_entry-('a'-'A'))) || b_match_case)
         &&  (u16_unicode_szname != u16_unicode_entry) )
         {
           fs_g_status = FS_ERR_NAME_INCORRECT; //  The name don't corresponding at filter name
8000a938:	4c 69       	lddpc	r9,8000aa50 <fat_entry_longname+0x284>
8000a93a:	31 68       	mov	r8,22
8000a93c:	b2 88       	st.b	r9[0x0],r8
           return false;
8000a93e:	30 08       	mov	r8,0
8000a940:	c8 18       	rjmp	8000aa42 <fat_entry_longname+0x276>
         }
      }

      if( 0 == u16_unicode_entry)
8000a942:	ef 08 ff f4 	ld.sh	r8,r7[-12]
8000a946:	58 08       	cp.w	r8,0
8000a948:	c0 e1       	brne	8000a964 <fat_entry_longname+0x198>
      {
         if( g_b_string_length )
8000a94a:	4c 38       	lddpc	r8,8000aa54 <fat_entry_longname+0x288>
8000a94c:	11 88       	ld.ub	r8,r8[0x0]
8000a94e:	58 08       	cp.w	r8,0
8000a950:	c0 80       	breq	8000a960 <fat_entry_longname+0x194>
         {
            ((FS_STR_UNICODE)sz_name)[0] = u8_pos_name+1;
8000a952:	ee f9 ff f0 	ld.w	r9,r7[-16]
8000a956:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000a95a:	2f f8       	sub	r8,-1
8000a95c:	5c 88       	casts.h	r8
8000a95e:	b2 08       	st.h	r9[0x0],r8
         }
         return true;                           // Last long name entry
8000a960:	30 18       	mov	r8,1
8000a962:	c7 08       	rjmp	8000aa42 <fat_entry_longname+0x276>
      }
      if( 4 == u8_pos_name )
8000a964:	ef 39 ff f7 	ld.ub	r9,r7[-9]
8000a968:	30 48       	mov	r8,4
8000a96a:	f0 09 18 00 	cp.b	r9,r8
8000a96e:	c0 61       	brne	8000a97a <fat_entry_longname+0x1ae>
         ptr_entry += 3;                        // Go to second character
8000a970:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a974:	2f d8       	sub	r8,-3
8000a976:	ef 48 ff f8 	st.w	r7[-8],r8

      if( 10 == u8_pos_name )
8000a97a:	ef 39 ff f7 	ld.ub	r9,r7[-9]
8000a97e:	30 a8       	mov	r8,10
8000a980:	f0 09 18 00 	cp.b	r9,r8
8000a984:	c0 61       	brne	8000a990 <fat_entry_longname+0x1c4>
         ptr_entry += 2;                        // Go to third character
8000a986:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a98a:	2f e8       	sub	r8,-2
8000a98c:	ef 48 ff f8 	st.w	r7[-8],r8

      if( 12 == u8_pos_name )
8000a990:	ef 39 ff f7 	ld.ub	r9,r7[-9]
8000a994:	30 c8       	mov	r8,12
8000a996:	f0 09 18 00 	cp.b	r9,r8
8000a99a:	c3 e1       	brne	8000aa16 <fat_entry_longname+0x24a>
      {  // End of entry long name
         ptr_entry -= (FS_SIZE_FILE_ENTRY-2);   // Go to the first byte of the file entry
8000a99c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a9a0:	21 e8       	sub	r8,30
8000a9a2:	ef 48 ff f8 	st.w	r7[-8],r8
         if ( 0 == (FS_ENTRY_LFN_LAST & ptr_entry[0]))
8000a9a6:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a9aa:	11 88       	ld.ub	r8,r8[0x0]
8000a9ac:	e2 18 00 40 	andl	r8,0x40,COH
8000a9b0:	c0 61       	brne	8000a9bc <fat_entry_longname+0x1f0>
         {
            fs_g_status = FS_NO_LAST_LFN_ENTRY;
8000a9b2:	4a 89       	lddpc	r9,8000aa50 <fat_entry_longname+0x284>
8000a9b4:	31 08       	mov	r8,16
8000a9b6:	b2 88       	st.b	r9[0x0],r8
            return false;                       // Other long name entry is present
8000a9b8:	30 08       	mov	r8,0
8000a9ba:	c4 48       	rjmp	8000aa42 <fat_entry_longname+0x276>
         }
         else
         {  // It is the last long name entry
            // then it is the end of name
            if( (FS_NAME_GET == b_mode) && g_b_string_length )
8000a9bc:	ef 39 ff e8 	ld.ub	r9,r7[-24]
8000a9c0:	30 08       	mov	r8,0
8000a9c2:	f0 09 18 00 	cp.b	r9,r8
8000a9c6:	c0 b0       	breq	8000a9dc <fat_entry_longname+0x210>
8000a9c8:	4a 38       	lddpc	r8,8000aa54 <fat_entry_longname+0x288>
8000a9ca:	11 88       	ld.ub	r8,r8[0x0]
8000a9cc:	58 08       	cp.w	r8,0
8000a9ce:	c0 70       	breq	8000a9dc <fat_entry_longname+0x210>
            {
               ((FS_STR_UNICODE)sz_name)[0] = 14;
8000a9d0:	ee f9 ff f0 	ld.w	r9,r7[-16]
8000a9d4:	30 e8       	mov	r8,14
8000a9d6:	b2 08       	st.h	r9[0x0],r8
               return true;
8000a9d8:	30 18       	mov	r8,1
8000a9da:	c3 48       	rjmp	8000aa42 <fat_entry_longname+0x276>
            }
            sz_name += (Is_unicode? 2 : 1 );
8000a9dc:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000a9e0:	2f f8       	sub	r8,-1
8000a9e2:	ef 48 ff f0 	st.w	r7[-16],r8
            if( FS_NAME_GET == b_mode )
8000a9e6:	ef 39 ff e8 	ld.ub	r9,r7[-24]
8000a9ea:	30 08       	mov	r8,0
8000a9ec:	f0 09 18 00 	cp.b	r9,r8
8000a9f0:	c0 70       	breq	8000a9fe <fat_entry_longname+0x232>
               // Write end of string UNICODE
               if( Is_unicode )
               {
                  ((FS_STR_UNICODE)sz_name)[0] = 0;
               }else{
                  sz_name[0] = 0;
8000a9f2:	ee f9 ff f0 	ld.w	r9,r7[-16]
8000a9f6:	30 08       	mov	r8,0
8000a9f8:	b2 88       	st.b	r9[0x0],r8
               }
               return true;
8000a9fa:	30 18       	mov	r8,1
8000a9fc:	c2 38       	rjmp	8000aa42 <fat_entry_longname+0x276>
               // if it is the end of filter
               if( Is_unicode )
               {
                  u16_unicode_szname = ((FS_STR_UNICODE)sz_name)[0];
               }else{
                  u16_unicode_szname = sz_name[0];
8000a9fe:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000aa02:	11 88       	ld.ub	r8,r8[0x0]
8000aa04:	ef 58 ff fe 	st.h	r7[-2],r8
               }
               return fat_check_eof_name(u16_unicode_szname);
8000aa08:	ef 18 ff fe 	ld.uh	r8,r7[-2]
8000aa0c:	10 9c       	mov	r12,r8
8000aa0e:	f0 1f 00 13 	mcall	8000aa58 <fat_entry_longname+0x28c>
8000aa12:	18 98       	mov	r8,r12
8000aa14:	c1 78       	rjmp	8000aa42 <fat_entry_longname+0x276>
            }
         }
      }

      if( !g_b_string_length )
8000aa16:	49 08       	lddpc	r8,8000aa54 <fat_entry_longname+0x288>
8000aa18:	11 88       	ld.ub	r8,r8[0x0]
8000aa1a:	ec 18 00 01 	eorl	r8,0x1
8000aa1e:	5c 58       	castu.b	r8
8000aa20:	c0 60       	breq	8000aa2c <fat_entry_longname+0x260>
      {
         sz_name += (Is_unicode? 2 : 1 );
8000aa22:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000aa26:	2f f8       	sub	r8,-1
8000aa28:	ef 48 ff f0 	st.w	r7[-16],r8
      }
      u8_pos_name++;
8000aa2c:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000aa30:	2f f8       	sub	r8,-1
8000aa32:	ef 68 ff f7 	st.b	r7[-9],r8
      ptr_entry+=2;
8000aa36:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000aa3a:	2f e8       	sub	r8,-2
8000aa3c:	ef 48 ff f8 	st.w	r7[-8],r8
   }
8000aa40:	c0 db       	rjmp	8000a85a <fat_entry_longname+0x8e>
}
8000aa42:	10 9c       	mov	r12,r8
8000aa44:	2f 9d       	sub	sp,-28
8000aa46:	e3 cd 80 80 	ldm	sp++,r7,pc
8000aa4a:	00 00       	add	r0,r0
8000aa4c:	80 00       	ld.sh	r0,r0[0x0]
8000aa4e:	aa a0       	st.b	r5[0x2],r0
8000aa50:	00 00       	add	r0,r0
8000aa52:	0d d8       	ld.ub	r8,r6[0x5]
8000aa54:	00 00       	add	r0,r0
8000aa56:	0d d9       	ld.ub	r9,r6[0x5]
8000aa58:	80 00       	ld.sh	r0,r0[0x0]
8000aa5a:	aa 5c       	st.h	r5[0xa],r12

8000aa5c <fat_check_eof_name>:
//!
//! @return    true, it is a character to signal a end of name (0,'\\','/')
//! @return    false, otherwise
//!
bool  fat_check_eof_name( uint16_t character )
{
8000aa5c:	eb cd 40 80 	pushm	r7,lr
8000aa60:	1a 97       	mov	r7,sp
8000aa62:	20 1d       	sub	sp,4
8000aa64:	18 98       	mov	r8,r12
8000aa66:	ef 58 ff fc 	st.h	r7[-4],r8
   return (('\0'==character)||('\\'==character)||('/'==character));
8000aa6a:	ef 09 ff fc 	ld.sh	r9,r7[-4]
8000aa6e:	30 08       	mov	r8,0
8000aa70:	f0 09 19 00 	cp.h	r9,r8
8000aa74:	c0 d0       	breq	8000aa8e <fat_check_eof_name+0x32>
8000aa76:	ef 09 ff fc 	ld.sh	r9,r7[-4]
8000aa7a:	35 c8       	mov	r8,92
8000aa7c:	f0 09 19 00 	cp.h	r9,r8
8000aa80:	c0 70       	breq	8000aa8e <fat_check_eof_name+0x32>
8000aa82:	ef 09 ff fc 	ld.sh	r9,r7[-4]
8000aa86:	32 f8       	mov	r8,47
8000aa88:	f0 09 19 00 	cp.h	r9,r8
8000aa8c:	c0 31       	brne	8000aa92 <fat_check_eof_name+0x36>
8000aa8e:	30 18       	mov	r8,1
8000aa90:	c0 28       	rjmp	8000aa94 <fat_check_eof_name+0x38>
8000aa92:	30 08       	mov	r8,0
8000aa94:	5c 58       	castu.b	r8
}
8000aa96:	10 9c       	mov	r12,r8
8000aa98:	2f fd       	sub	sp,-4
8000aa9a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000aa9e:	d7 03       	nop

8000aaa0 <fat_get_ptr_entry>:
//! This function returns a cache pointer on the current entry
//!
//! @return a pointer on the internal cache
//!
PTR_CACHE fat_get_ptr_entry( void )
{
8000aaa0:	eb cd 40 80 	pushm	r7,lr
8000aaa4:	1a 97       	mov	r7,sp
   return &fs_g_sector[(fs_g_nav_fast.u16_entry_pos_sel_file * FS_SIZE_FILE_ENTRY) & FS_512B_MASK];
8000aaa6:	48 78       	lddpc	r8,8000aac0 <fat_get_ptr_entry+0x20>
8000aaa8:	90 18       	ld.sh	r8,r8[0x2]
8000aaaa:	5c 78       	castu.h	r8
8000aaac:	a5 78       	lsl	r8,0x5
8000aaae:	f3 d8 c0 09 	bfextu	r9,r8,0x0,0x9
8000aab2:	48 58       	lddpc	r8,8000aac4 <fat_get_ptr_entry+0x24>
8000aab4:	f2 08 00 08 	add	r8,r9,r8
}
8000aab8:	10 9c       	mov	r12,r8
8000aaba:	e3 cd 80 80 	ldm	sp++,r7,pc
8000aabe:	00 00       	add	r0,r0
8000aac0:	00 00       	add	r0,r0
8000aac2:	0d d4       	ld.ub	r4,r6[0x5]
8000aac4:	00 00       	add	r0,r0
8000aac6:	0b 88       	ld.ub	r8,r5[0x0]

8000aac8 <fat_cache_read_sector>:
//!   fs_g_nav.u8_lun      drive number to read
//!   fs_gu32_addrsector   address to read (unit sector)
//! @endverbatim
//!
bool  fat_cache_read_sector( bool b_load )
{
8000aac8:	eb cd 40 80 	pushm	r7,lr
8000aacc:	1a 97       	mov	r7,sp
8000aace:	20 1d       	sub	sp,4
8000aad0:	18 98       	mov	r8,r12
8000aad2:	ef 68 ff fc 	st.b	r7[-4],r8
   // Check if the sector asked is the same in cache
   if( (fs_g_sectorcache.u8_lun     == fs_g_nav.u8_lun )
8000aad6:	4a 08       	lddpc	r8,8000ab54 <fat_cache_read_sector+0x8c>
8000aad8:	11 89       	ld.ub	r9,r8[0x0]
8000aada:	4a 08       	lddpc	r8,8000ab58 <fat_cache_read_sector+0x90>
8000aadc:	11 88       	ld.ub	r8,r8[0x0]
8000aade:	f0 09 18 00 	cp.b	r9,r8
8000aae2:	c0 91       	brne	8000aaf4 <fat_cache_read_sector+0x2c>
   &&  (fs_g_sectorcache.u32_addr   == fs_gu32_addrsector ) )
8000aae4:	49 c8       	lddpc	r8,8000ab54 <fat_cache_read_sector+0x8c>
8000aae6:	70 19       	ld.w	r9,r8[0x4]
8000aae8:	49 d8       	lddpc	r8,8000ab5c <fat_cache_read_sector+0x94>
8000aaea:	70 08       	ld.w	r8,r8[0x0]
//! @endverbatim
//!
bool  fat_cache_read_sector( bool b_load )
{
   // Check if the sector asked is the same in cache
   if( (fs_g_sectorcache.u8_lun     == fs_g_nav.u8_lun )
8000aaec:	10 39       	cp.w	r9,r8
8000aaee:	c0 31       	brne	8000aaf4 <fat_cache_read_sector+0x2c>
   &&  (fs_g_sectorcache.u32_addr   == fs_gu32_addrsector ) )
   {
      return true;
8000aaf0:	30 18       	mov	r8,1
8000aaf2:	c2 c8       	rjmp	8000ab4a <fat_cache_read_sector+0x82>
   }

   // Write previous cache before fill cache with a new sector
   if( !fat_cache_flush())
8000aaf4:	f0 1f 00 1b 	mcall	8000ab60 <fat_cache_read_sector+0x98>
8000aaf8:	18 98       	mov	r8,r12
8000aafa:	ec 18 00 01 	eorl	r8,0x1
8000aafe:	5c 58       	castu.b	r8
8000ab00:	c0 30       	breq	8000ab06 <fat_cache_read_sector+0x3e>
      return false;
8000ab02:	30 08       	mov	r8,0
8000ab04:	c2 38       	rjmp	8000ab4a <fat_cache_read_sector+0x82>

   // Delete informations about the caches
   fat_cache_reset();
8000ab06:	f0 1f 00 18 	mcall	8000ab64 <fat_cache_read_sector+0x9c>

   // Init sector cache
   fs_g_sectorcache.u32_addr = fs_gu32_addrsector;
8000ab0a:	49 58       	lddpc	r8,8000ab5c <fat_cache_read_sector+0x94>
8000ab0c:	70 09       	ld.w	r9,r8[0x0]
8000ab0e:	49 28       	lddpc	r8,8000ab54 <fat_cache_read_sector+0x8c>
8000ab10:	91 19       	st.w	r8[0x4],r9
   if( b_load )
8000ab12:	ef 39 ff fc 	ld.ub	r9,r7[-4]
8000ab16:	30 08       	mov	r8,0
8000ab18:	f0 09 18 00 	cp.b	r9,r8
8000ab1c:	c1 20       	breq	8000ab40 <fat_cache_read_sector+0x78>
   {
      // Load the sector from memory
      if( CTRL_GOOD != memory_2_ram( fs_g_nav.u8_lun  , fs_g_sectorcache.u32_addr, fs_g_sector))
8000ab1e:	48 e8       	lddpc	r8,8000ab54 <fat_cache_read_sector+0x8c>
8000ab20:	70 19       	ld.w	r9,r8[0x4]
8000ab22:	48 e8       	lddpc	r8,8000ab58 <fat_cache_read_sector+0x90>
8000ab24:	11 88       	ld.ub	r8,r8[0x0]
8000ab26:	49 1a       	lddpc	r10,8000ab68 <fat_cache_read_sector+0xa0>
8000ab28:	12 9b       	mov	r11,r9
8000ab2a:	10 9c       	mov	r12,r8
8000ab2c:	f0 1f 00 10 	mcall	8000ab6c <fat_cache_read_sector+0xa4>
8000ab30:	18 98       	mov	r8,r12
8000ab32:	58 08       	cp.w	r8,0
8000ab34:	c0 60       	breq	8000ab40 <fat_cache_read_sector+0x78>
      {
         fs_g_status = FS_ERR_HW;
8000ab36:	48 f9       	lddpc	r9,8000ab70 <fat_cache_read_sector+0xa8>
8000ab38:	30 18       	mov	r8,1
8000ab3a:	b2 88       	st.b	r9[0x0],r8
         return false;
8000ab3c:	30 08       	mov	r8,0
8000ab3e:	c0 68       	rjmp	8000ab4a <fat_cache_read_sector+0x82>
      }
   }
   // Valid sector cache
   fs_g_sectorcache.u8_lun = fs_g_nav.u8_lun;
8000ab40:	48 68       	lddpc	r8,8000ab58 <fat_cache_read_sector+0x90>
8000ab42:	11 88       	ld.ub	r8,r8[0x0]
8000ab44:	48 49       	lddpc	r9,8000ab54 <fat_cache_read_sector+0x8c>
8000ab46:	b2 88       	st.b	r9[0x0],r8
   return true;
8000ab48:	30 18       	mov	r8,1
}
8000ab4a:	10 9c       	mov	r12,r8
8000ab4c:	2f fd       	sub	sp,-4
8000ab4e:	e3 cd 80 80 	ldm	sp++,r7,pc
8000ab52:	00 00       	add	r0,r0
8000ab54:	00 00       	add	r0,r0
8000ab56:	0e 10       	sub	r0,r7
8000ab58:	00 00       	add	r0,r0
8000ab5a:	0d 88       	ld.ub	r8,r6[0x0]
8000ab5c:	00 00       	add	r0,r0
8000ab5e:	0b 44       	ld.w	r4,--r5
8000ab60:	80 00       	ld.sh	r0,r0[0x0]
8000ab62:	ab d0       	cbr	r0,0xb
8000ab64:	80 00       	ld.sh	r0,r0[0x0]
8000ab66:	ab 74       	lsl	r4,0xb
8000ab68:	00 00       	add	r0,r0
8000ab6a:	0b 88       	ld.ub	r8,r5[0x0]
8000ab6c:	80 00       	ld.sh	r0,r0[0x0]
8000ab6e:	af 24       	st.d	r7++,r4
8000ab70:	00 00       	add	r0,r0
8000ab72:	0d d8       	ld.ub	r8,r6[0x5]

8000ab74 <fat_cache_reset>:


//! This function resets the sector cache
//!
void  fat_cache_reset( void )
{
8000ab74:	eb cd 40 80 	pushm	r7,lr
8000ab78:	1a 97       	mov	r7,sp
   fs_g_sectorcache.u8_lun                = FS_BUF_SECTOR_EMPTY;
8000ab7a:	48 79       	lddpc	r9,8000ab94 <fat_cache_reset+0x20>
8000ab7c:	3f f8       	mov	r8,-1
8000ab7e:	b2 88       	st.b	r9[0x0],r8
   fs_g_sectorcache.u8_dirty              = false;
8000ab80:	48 59       	lddpc	r9,8000ab94 <fat_cache_reset+0x20>
8000ab82:	30 08       	mov	r8,0
8000ab84:	f3 68 00 08 	st.b	r9[8],r8
   fs_g_sectorcache.u32_clusterlist_start = 0xFFFFFFFF;
8000ab88:	48 38       	lddpc	r8,8000ab94 <fat_cache_reset+0x20>
8000ab8a:	3f f9       	mov	r9,-1
8000ab8c:	91 39       	st.w	r8[0xc],r9
}
8000ab8e:	e3 cd 80 80 	ldm	sp++,r7,pc
8000ab92:	00 00       	add	r0,r0
8000ab94:	00 00       	add	r0,r0
8000ab96:	0e 10       	sub	r0,r7

8000ab98 <fat_cache_clear>:

#if (FS_LEVEL_FEATURES > FSFEATURE_READ)
//! This function clears the sector cache
//!
void  fat_cache_clear( void )
{
8000ab98:	eb cd 40 80 	pushm	r7,lr
8000ab9c:	1a 97       	mov	r7,sp
   memset( fs_g_sector , 0 , FS_CACHE_SIZE );
8000ab9e:	e0 6a 02 00 	mov	r10,512
8000aba2:	30 0b       	mov	r11,0
8000aba4:	48 3c       	lddpc	r12,8000abb0 <fat_cache_clear+0x18>
8000aba6:	f0 1f 00 04 	mcall	8000abb4 <fat_cache_clear+0x1c>
}
8000abaa:	e3 cd 80 80 	ldm	sp++,r7,pc
8000abae:	00 00       	add	r0,r0
8000abb0:	00 00       	add	r0,r0
8000abb2:	0b 88       	ld.ub	r8,r5[0x0]
8000abb4:	80 00       	ld.sh	r0,r0[0x0]
8000abb6:	f5 82       	*unknown*

8000abb8 <fat_cache_mark_sector_as_dirty>:


//! This function sets a flag to signal that sector cache is modified
//!
void  fat_cache_mark_sector_as_dirty( void )
{
8000abb8:	eb cd 40 80 	pushm	r7,lr
8000abbc:	1a 97       	mov	r7,sp
   fs_g_sectorcache.u8_dirty = true;
8000abbe:	48 49       	lddpc	r9,8000abcc <fat_cache_mark_sector_as_dirty+0x14>
8000abc0:	30 18       	mov	r8,1
8000abc2:	f3 68 00 08 	st.b	r9[8],r8
}
8000abc6:	e3 cd 80 80 	ldm	sp++,r7,pc
8000abca:	00 00       	add	r0,r0
8000abcc:	00 00       	add	r0,r0
8000abce:	0e 10       	sub	r0,r7

8000abd0 <fat_cache_flush>:
//!
//! @return    false in case of error, see global value "fs_g_status" for more detail
//! @return    true otherwise
//!
bool  fat_cache_flush( void )
{
8000abd0:	eb cd 40 80 	pushm	r7,lr
8000abd4:	1a 97       	mov	r7,sp
   // If the cache is modified, then write the sector cache on the device
   if ( true == fs_g_sectorcache.u8_dirty )
8000abd6:	49 78       	lddpc	r8,8000ac30 <fat_cache_flush+0x60>
8000abd8:	f1 39 00 08 	ld.ub	r9,r8[8]
8000abdc:	30 18       	mov	r8,1
8000abde:	f0 09 18 00 	cp.b	r9,r8
8000abe2:	c2 31       	brne	8000ac28 <fat_cache_flush+0x58>
   {
      fs_g_sectorcache.u8_dirty = false; // Always clear, although an error occur
8000abe4:	49 39       	lddpc	r9,8000ac30 <fat_cache_flush+0x60>
8000abe6:	30 08       	mov	r8,0
8000abe8:	f3 68 00 08 	st.b	r9[8],r8
      if( mem_wr_protect( fs_g_sectorcache.u8_lun  ))
8000abec:	49 18       	lddpc	r8,8000ac30 <fat_cache_flush+0x60>
8000abee:	11 88       	ld.ub	r8,r8[0x0]
8000abf0:	10 9c       	mov	r12,r8
8000abf2:	f0 1f 00 11 	mcall	8000ac34 <fat_cache_flush+0x64>
8000abf6:	18 98       	mov	r8,r12
8000abf8:	58 08       	cp.w	r8,0
8000abfa:	c0 60       	breq	8000ac06 <fat_cache_flush+0x36>
      {
         fs_g_status = FS_LUN_WP;
8000abfc:	48 f9       	lddpc	r9,8000ac38 <fat_cache_flush+0x68>
8000abfe:	31 48       	mov	r8,20
8000ac00:	b2 88       	st.b	r9[0x0],r8
         return false;
8000ac02:	30 08       	mov	r8,0
8000ac04:	c1 38       	rjmp	8000ac2a <fat_cache_flush+0x5a>
      }
      if (CTRL_GOOD != ram_2_memory( fs_g_sectorcache.u8_lun , fs_g_sectorcache.u32_addr , fs_g_sector ))
8000ac06:	48 b8       	lddpc	r8,8000ac30 <fat_cache_flush+0x60>
8000ac08:	70 19       	ld.w	r9,r8[0x4]
8000ac0a:	48 a8       	lddpc	r8,8000ac30 <fat_cache_flush+0x60>
8000ac0c:	11 88       	ld.ub	r8,r8[0x0]
8000ac0e:	48 ca       	lddpc	r10,8000ac3c <fat_cache_flush+0x6c>
8000ac10:	12 9b       	mov	r11,r9
8000ac12:	10 9c       	mov	r12,r8
8000ac14:	f0 1f 00 0b 	mcall	8000ac40 <fat_cache_flush+0x70>
8000ac18:	18 98       	mov	r8,r12
8000ac1a:	58 08       	cp.w	r8,0
8000ac1c:	c0 60       	breq	8000ac28 <fat_cache_flush+0x58>
      {
         fs_g_status = FS_ERR_HW;
8000ac1e:	48 79       	lddpc	r9,8000ac38 <fat_cache_flush+0x68>
8000ac20:	30 18       	mov	r8,1
8000ac22:	b2 88       	st.b	r9[0x0],r8
         return false;
8000ac24:	30 08       	mov	r8,0
8000ac26:	c0 28       	rjmp	8000ac2a <fat_cache_flush+0x5a>
      }
   }
   return true;
8000ac28:	30 18       	mov	r8,1
}
8000ac2a:	10 9c       	mov	r12,r8
8000ac2c:	e3 cd 80 80 	ldm	sp++,r7,pc
8000ac30:	00 00       	add	r0,r0
8000ac32:	0e 10       	sub	r0,r7
8000ac34:	80 00       	ld.sh	r0,r0[0x0]
8000ac36:	ae dc       	st.b	r7[0x5],r12
8000ac38:	00 00       	add	r0,r0
8000ac3a:	0d d8       	ld.ub	r8,r6[0x5]
8000ac3c:	00 00       	add	r0,r0
8000ac3e:	0b 88       	ld.ub	r8,r5[0x0]
8000ac40:	80 00       	ld.sh	r0,r0[0x0]
8000ac42:	af 90       	lsr	r0,0xf

8000ac44 <fat_check_nav_access_file>:
//!            mode true,  File opened then write access not possibles <br>
//!            mode false, File opened in write mode then read access not possibles <br>
//! @return    true, access file possibles
//!
bool  fat_check_nav_access_file( bool mode )
{
8000ac44:	eb cd 40 80 	pushm	r7,lr
8000ac48:	1a 97       	mov	r7,sp
8000ac4a:	20 2d       	sub	sp,8
8000ac4c:	18 98       	mov	r8,r12
8000ac4e:	ef 68 ff f8 	st.b	r7[-8],r8
   uint8_t i;

   // For each navigators
   for( i=0 ; i!=(FS_NB_NAVIGATOR-1) ; i++ )
8000ac52:	30 08       	mov	r8,0
8000ac54:	ef 68 ff ff 	st.b	r7[-1],r8
8000ac58:	c5 68       	rjmp	8000ad04 <fat_check_nav_access_file+0xc0>
   {
      // Disk mounted ?
      if( FS_TYPE_FAT_UNM != fs_g_navext_fast[i].u8_type_fat )
8000ac5a:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000ac5e:	4b 08       	lddpc	r8,8000ad1c <fat_check_nav_access_file+0xd8>
8000ac60:	f0 09 07 28 	ld.ub	r8,r8[r9<<0x2]
8000ac64:	58 08       	cp.w	r8,0
8000ac66:	c4 a0       	breq	8000acfa <fat_check_nav_access_file+0xb6>
      // Is it the same disk ?
      if( fs_g_nav.u8_lun == fs_g_navext[i].u8_lun )
8000ac68:	4a e8       	lddpc	r8,8000ad20 <fat_check_nav_access_file+0xdc>
8000ac6a:	11 89       	ld.ub	r9,r8[0x0]
8000ac6c:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000ac70:	4a da       	lddpc	r10,8000ad24 <fat_check_nav_access_file+0xe0>
8000ac72:	f0 08 10 34 	mul	r8,r8,52
8000ac76:	f4 08 00 08 	add	r8,r10,r8
8000ac7a:	11 88       	ld.ub	r8,r8[0x0]
8000ac7c:	f0 09 18 00 	cp.b	r9,r8
8000ac80:	c3 d1       	brne	8000acfa <fat_check_nav_access_file+0xb6>
#if (FS_MULTI_PARTITION == true)
      // Is it the same partition ?
      if( fs_g_nav.u8_partition == fs_g_navext[i].u8_partition )
#endif
      // Is it the same directory ?
      if( fs_g_nav.u32_cluster_sel_dir == fs_g_navext[i].u32_cluster_sel_dir )
8000ac82:	4a 88       	lddpc	r8,8000ad20 <fat_check_nav_access_file+0xdc>
8000ac84:	70 89       	ld.w	r9,r8[0x20]
8000ac86:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000ac8a:	4a 7a       	lddpc	r10,8000ad24 <fat_check_nav_access_file+0xe0>
8000ac8c:	f0 08 10 34 	mul	r8,r8,52
8000ac90:	f4 08 00 08 	add	r8,r10,r8
8000ac94:	2e 08       	sub	r8,-32
8000ac96:	70 08       	ld.w	r8,r8[0x0]
8000ac98:	10 39       	cp.w	r9,r8
8000ac9a:	c3 01       	brne	8000acfa <fat_check_nav_access_file+0xb6>
      // Is it the same file ?
      if( fs_g_nav_fast.u16_entry_pos_sel_file == fs_g_navext_fast[i].u16_entry_pos_sel_file )
8000ac9c:	4a 38       	lddpc	r8,8000ad28 <fat_check_nav_access_file+0xe4>
8000ac9e:	90 19       	ld.sh	r9,r8[0x2]
8000aca0:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000aca4:	49 ea       	lddpc	r10,8000ad1c <fat_check_nav_access_file+0xd8>
8000aca6:	a3 68       	lsl	r8,0x2
8000aca8:	f4 08 00 08 	add	r8,r10,r8
8000acac:	90 18       	ld.sh	r8,r8[0x2]
8000acae:	f0 09 19 00 	cp.h	r9,r8
8000acb2:	c2 41       	brne	8000acfa <fat_check_nav_access_file+0xb6>
      {
         if( mode )
8000acb4:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000acb8:	30 08       	mov	r8,0
8000acba:	f0 09 18 00 	cp.b	r9,r8
8000acbe:	c0 f0       	breq	8000acdc <fat_check_nav_access_file+0x98>
         {
            // Is it open ?
            if( fs_g_navext_entry[i].u8_open_mode!=0 )
8000acc0:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000acc4:	49 a9       	lddpc	r9,8000ad2c <fat_check_nav_access_file+0xe8>
8000acc6:	a5 68       	lsl	r8,0x4
8000acc8:	f2 08 00 08 	add	r8,r9,r8
8000accc:	11 88       	ld.ub	r8,r8[0x0]
8000acce:	58 08       	cp.w	r8,0
8000acd0:	c1 50       	breq	8000acfa <fat_check_nav_access_file+0xb6>
            {
               fs_g_status = FS_ERR_FILE_OPEN;
8000acd2:	49 89       	lddpc	r9,8000ad30 <fat_check_nav_access_file+0xec>
8000acd4:	32 88       	mov	r8,40
8000acd6:	b2 88       	st.b	r9[0x0],r8
               return false;  // File opened then write access not possible
8000acd8:	30 08       	mov	r8,0
8000acda:	c1 c8       	rjmp	8000ad12 <fat_check_nav_access_file+0xce>
            }
         }
         else
         {
            // Is it open in write mode ?
            if( fs_g_navext_entry[i].u8_open_mode & FOPEN_WRITE_ACCESS )
8000acdc:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000ace0:	49 39       	lddpc	r9,8000ad2c <fat_check_nav_access_file+0xe8>
8000ace2:	a5 68       	lsl	r8,0x4
8000ace4:	f2 08 00 08 	add	r8,r9,r8
8000ace8:	11 88       	ld.ub	r8,r8[0x0]
8000acea:	e2 18 00 02 	andl	r8,0x2,COH
8000acee:	c0 60       	breq	8000acfa <fat_check_nav_access_file+0xb6>
            {
               fs_g_status = FS_ERR_FILE_OPEN_WR;
8000acf0:	49 09       	lddpc	r9,8000ad30 <fat_check_nav_access_file+0xec>
8000acf2:	32 98       	mov	r8,41
8000acf4:	b2 88       	st.b	r9[0x0],r8
               return false;  // File opened in write mode then read access not possible
8000acf6:	30 08       	mov	r8,0
8000acf8:	c0 d8       	rjmp	8000ad12 <fat_check_nav_access_file+0xce>
bool  fat_check_nav_access_file( bool mode )
{
   uint8_t i;

   // For each navigators
   for( i=0 ; i!=(FS_NB_NAVIGATOR-1) ; i++ )
8000acfa:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000acfe:	2f f8       	sub	r8,-1
8000ad00:	ef 68 ff ff 	st.b	r7[-1],r8
8000ad04:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000ad08:	30 18       	mov	r8,1
8000ad0a:	f0 09 18 00 	cp.b	r9,r8
8000ad0e:	ca 61       	brne	8000ac5a <fat_check_nav_access_file+0x16>
               return false;  // File opened in write mode then read access not possible
            }
         }
      }
   }
   return true;
8000ad10:	30 18       	mov	r8,1
}
8000ad12:	10 9c       	mov	r12,r8
8000ad14:	2f ed       	sub	sp,-8
8000ad16:	e3 cd 80 80 	ldm	sp++,r7,pc
8000ad1a:	00 00       	add	r0,r0
8000ad1c:	00 00       	add	r0,r0
8000ad1e:	0d d0       	ld.ub	r0,r6[0x5]
8000ad20:	00 00       	add	r0,r0
8000ad22:	0d 88       	ld.ub	r8,r6[0x0]
8000ad24:	00 00       	add	r0,r0
8000ad26:	0d dc       	ld.ub	r12,r6[0x5]
8000ad28:	00 00       	add	r0,r0
8000ad2a:	0d d4       	ld.ub	r4,r6[0x5]
8000ad2c:	00 00       	add	r0,r0
8000ad2e:	0d c0       	ld.ub	r0,r6[0x4]
8000ad30:	00 00       	add	r0,r0
8000ad32:	0d d8       	ld.ub	r8,r6[0x5]

8000ad34 <fat_invert_nav>:
//! This function inverts the current navigation with another
//!
//! @param     u8_idnav    Id navigator to invert
//!
void  fat_invert_nav( uint8_t u8_idnav )
{
8000ad34:	eb cd 40 80 	pushm	r7,lr
8000ad38:	1a 97       	mov	r7,sp
8000ad3a:	20 ed       	sub	sp,56
8000ad3c:	18 98       	mov	r8,r12
8000ad3e:	ef 68 ff c8 	st.b	r7[-56],r8
   _MEM_TYPE_SLOW_ uint8_t Temp[Max(Max(sizeof(Fs_management),sizeof(Fs_management_entry)),sizeof(Fs_management_fast))];

   if( u8_idnav == 0 )
8000ad42:	ef 39 ff c8 	ld.ub	r9,r7[-56]
8000ad46:	30 08       	mov	r8,0
8000ad48:	f0 09 18 00 	cp.b	r9,r8
8000ad4c:	c6 a0       	breq	8000ae20 <fat_invert_nav+0xec>
      return;
   u8_idnav--;
8000ad4e:	ef 38 ff c8 	ld.ub	r8,r7[-56]
8000ad52:	20 18       	sub	r8,1
8000ad54:	ef 68 ff c8 	st.b	r7[-56],r8

   memcpy_ram2ram(Temp,                              (uint8_t*)&fs_g_nav,                     sizeof(Fs_management));
8000ad58:	ee c8 00 34 	sub	r8,r7,52
8000ad5c:	33 4a       	mov	r10,52
8000ad5e:	4b 3b       	lddpc	r11,8000ae28 <fat_invert_nav+0xf4>
8000ad60:	10 9c       	mov	r12,r8
8000ad62:	f0 1f 00 33 	mcall	8000ae2c <fat_invert_nav+0xf8>
   memcpy_ram2ram((uint8_t*)&fs_g_nav,                    (uint8_t*)&fs_g_navext[u8_idnav],        sizeof(Fs_management));
8000ad66:	ef 38 ff c8 	ld.ub	r8,r7[-56]
8000ad6a:	f0 09 10 34 	mul	r9,r8,52
8000ad6e:	4b 18       	lddpc	r8,8000ae30 <fat_invert_nav+0xfc>
8000ad70:	f2 08 00 08 	add	r8,r9,r8
8000ad74:	33 4a       	mov	r10,52
8000ad76:	10 9b       	mov	r11,r8
8000ad78:	4a cc       	lddpc	r12,8000ae28 <fat_invert_nav+0xf4>
8000ad7a:	f0 1f 00 2d 	mcall	8000ae2c <fat_invert_nav+0xf8>
   memcpy_ram2ram((uint8_t*)&fs_g_navext[u8_idnav],       Temp,                               sizeof(Fs_management));
8000ad7e:	ef 38 ff c8 	ld.ub	r8,r7[-56]
8000ad82:	f0 09 10 34 	mul	r9,r8,52
8000ad86:	4a b8       	lddpc	r8,8000ae30 <fat_invert_nav+0xfc>
8000ad88:	f2 08 00 08 	add	r8,r9,r8
8000ad8c:	ee c9 00 34 	sub	r9,r7,52
8000ad90:	33 4a       	mov	r10,52
8000ad92:	12 9b       	mov	r11,r9
8000ad94:	10 9c       	mov	r12,r8
8000ad96:	f0 1f 00 26 	mcall	8000ae2c <fat_invert_nav+0xf8>

   memcpy_ram2ram(Temp,                              (uint8_t*)&fs_g_nav_entry,               sizeof(Fs_management_entry));
8000ad9a:	ee c8 00 34 	sub	r8,r7,52
8000ad9e:	31 0a       	mov	r10,16
8000ada0:	4a 5b       	lddpc	r11,8000ae34 <fat_invert_nav+0x100>
8000ada2:	10 9c       	mov	r12,r8
8000ada4:	f0 1f 00 22 	mcall	8000ae2c <fat_invert_nav+0xf8>
   memcpy_ram2ram((uint8_t*)&fs_g_nav_entry,              (uint8_t*)&fs_g_navext_entry[u8_idnav],  sizeof(Fs_management_entry));
8000ada8:	ef 38 ff c8 	ld.ub	r8,r7[-56]
8000adac:	f0 09 15 04 	lsl	r9,r8,0x4
8000adb0:	4a 28       	lddpc	r8,8000ae38 <fat_invert_nav+0x104>
8000adb2:	f2 08 00 08 	add	r8,r9,r8
8000adb6:	31 0a       	mov	r10,16
8000adb8:	10 9b       	mov	r11,r8
8000adba:	49 fc       	lddpc	r12,8000ae34 <fat_invert_nav+0x100>
8000adbc:	f0 1f 00 1c 	mcall	8000ae2c <fat_invert_nav+0xf8>
   memcpy_ram2ram((uint8_t*)&fs_g_navext_entry[u8_idnav], Temp,                               sizeof(Fs_management_entry));
8000adc0:	ef 38 ff c8 	ld.ub	r8,r7[-56]
8000adc4:	f0 09 15 04 	lsl	r9,r8,0x4
8000adc8:	49 c8       	lddpc	r8,8000ae38 <fat_invert_nav+0x104>
8000adca:	f2 08 00 08 	add	r8,r9,r8
8000adce:	ee c9 00 34 	sub	r9,r7,52
8000add2:	31 0a       	mov	r10,16
8000add4:	12 9b       	mov	r11,r9
8000add6:	10 9c       	mov	r12,r8
8000add8:	f0 1f 00 15 	mcall	8000ae2c <fat_invert_nav+0xf8>

   memcpy_ram2ram(Temp,                              (uint8_t*)&fs_g_nav_fast,                sizeof(Fs_management_fast));
8000addc:	ee c8 00 34 	sub	r8,r7,52
8000ade0:	30 4a       	mov	r10,4
8000ade2:	49 7b       	lddpc	r11,8000ae3c <fat_invert_nav+0x108>
8000ade4:	10 9c       	mov	r12,r8
8000ade6:	f0 1f 00 12 	mcall	8000ae2c <fat_invert_nav+0xf8>
   memcpy_ram2ram((uint8_t*)&fs_g_nav_fast,               (uint8_t*)&fs_g_navext_fast[u8_idnav],   sizeof(Fs_management_fast));
8000adea:	ef 38 ff c8 	ld.ub	r8,r7[-56]
8000adee:	f0 09 15 02 	lsl	r9,r8,0x2
8000adf2:	49 48       	lddpc	r8,8000ae40 <fat_invert_nav+0x10c>
8000adf4:	f2 08 00 08 	add	r8,r9,r8
8000adf8:	30 4a       	mov	r10,4
8000adfa:	10 9b       	mov	r11,r8
8000adfc:	49 0c       	lddpc	r12,8000ae3c <fat_invert_nav+0x108>
8000adfe:	f0 1f 00 0c 	mcall	8000ae2c <fat_invert_nav+0xf8>
   memcpy_ram2ram((uint8_t*)&fs_g_navext_fast[u8_idnav],  Temp,                               sizeof(Fs_management_fast));
8000ae02:	ef 38 ff c8 	ld.ub	r8,r7[-56]
8000ae06:	f0 09 15 02 	lsl	r9,r8,0x2
8000ae0a:	48 e8       	lddpc	r8,8000ae40 <fat_invert_nav+0x10c>
8000ae0c:	f2 08 00 08 	add	r8,r9,r8
8000ae10:	ee c9 00 34 	sub	r9,r7,52
8000ae14:	30 4a       	mov	r10,4
8000ae16:	12 9b       	mov	r11,r9
8000ae18:	10 9c       	mov	r12,r8
8000ae1a:	f0 1f 00 05 	mcall	8000ae2c <fat_invert_nav+0xf8>
8000ae1e:	c0 28       	rjmp	8000ae22 <fat_invert_nav+0xee>
void  fat_invert_nav( uint8_t u8_idnav )
{
   _MEM_TYPE_SLOW_ uint8_t Temp[Max(Max(sizeof(Fs_management),sizeof(Fs_management_entry)),sizeof(Fs_management_fast))];

   if( u8_idnav == 0 )
      return;
8000ae20:	d7 03       	nop
   memcpy_ram2ram((uint8_t*)&fs_g_navext_entry[u8_idnav], Temp,                               sizeof(Fs_management_entry));

   memcpy_ram2ram(Temp,                              (uint8_t*)&fs_g_nav_fast,                sizeof(Fs_management_fast));
   memcpy_ram2ram((uint8_t*)&fs_g_nav_fast,               (uint8_t*)&fs_g_navext_fast[u8_idnav],   sizeof(Fs_management_fast));
   memcpy_ram2ram((uint8_t*)&fs_g_navext_fast[u8_idnav],  Temp,                               sizeof(Fs_management_fast));
}
8000ae22:	2f 2d       	sub	sp,-56
8000ae24:	e3 cd 80 80 	ldm	sp++,r7,pc
8000ae28:	00 00       	add	r0,r0
8000ae2a:	0d 88       	ld.ub	r8,r6[0x0]
8000ae2c:	80 00       	ld.sh	r0,r0[0x0]
8000ae2e:	f4 3a 00 00 	sub	r10,-720896
8000ae32:	0d dc       	ld.ub	r12,r6[0x5]
8000ae34:	00 00       	add	r0,r0
8000ae36:	0b 48       	ld.w	r8,--r5
8000ae38:	00 00       	add	r0,r0
8000ae3a:	0d c0       	ld.ub	r0,r6[0x4]
8000ae3c:	00 00       	add	r0,r0
8000ae3e:	0d d4       	ld.ub	r4,r6[0x5]
8000ae40:	00 00       	add	r0,r0
8000ae42:	0d d0       	ld.ub	r0,r6[0x5]
8000ae44:	22 53       	sub	r3,37
8000ae46:	44 2f       	lddsp	pc,sp[0x108]
8000ae48:	4d 4d       	lddpc	sp,8000af98 <ram_2_memory+0x8>
8000ae4a:	43 20       	lddsp	r0,sp[0xc8]
8000ae4c:	43 61       	lddsp	r1,sp[0xd8]
8000ae4e:	72 64       	ld.w	r4,r9[0x18]
8000ae50:	20 6f       	sub	pc,6
8000ae52:	76 65       	ld.w	r5,r11[0x18]
8000ae54:	72 20       	ld.w	r0,r9[0x8]
8000ae56:	53 50       	stdsp	sp[0xd4],r0
8000ae58:	49 22       	lddpc	r2,8000aea0 <mem_test_unit_ready+0x34>
	...

8000ae5c <get_nb_lun>:

#endif  // FREERTOS_USED


U8 get_nb_lun(void)
{
8000ae5c:	eb cd 40 80 	pushm	r7,lr
8000ae60:	1a 97       	mov	r7,sp

  Ctrl_access_unlock();

  return nb_lun;
#else
  return MAX_LUN;
8000ae62:	30 18       	mov	r8,1
#endif
}
8000ae64:	10 9c       	mov	r12,r8
8000ae66:	e3 cd 80 80 	ldm	sp++,r7,pc
8000ae6a:	d7 03       	nop

8000ae6c <mem_test_unit_ready>:
  return LUN_ID_0;
}


Ctrl_status mem_test_unit_ready(U8 lun)
{
8000ae6c:	eb cd 40 80 	pushm	r7,lr
8000ae70:	1a 97       	mov	r7,sp
8000ae72:	20 2d       	sub	sp,8
8000ae74:	18 98       	mov	r8,r12
8000ae76:	ef 68 ff f8 	st.b	r7[-8],r8
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
8000ae7a:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000ae7e:	30 08       	mov	r8,0
8000ae80:	f0 09 18 00 	cp.b	r9,r8
8000ae84:	c0 b1       	brne	8000ae9a <mem_test_unit_ready+0x2e>
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
8000ae86:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000ae8a:	48 99       	lddpc	r9,8000aeac <mem_test_unit_ready+0x40>
8000ae8c:	a5 78       	lsl	r8,0x5
8000ae8e:	f2 08 00 08 	add	r8,r9,r8
8000ae92:	70 08       	ld.w	r8,r8[0x0]
8000ae94:	5d 18       	icall	r8
8000ae96:	18 98       	mov	r8,r12
8000ae98:	c0 28       	rjmp	8000ae9c <mem_test_unit_ready+0x30>
{
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
8000ae9a:	30 18       	mov	r8,1
8000ae9c:	ef 48 ff fc 	st.w	r7[-4],r8
                             CTRL_FAIL;
#endif

  Ctrl_access_unlock();

  return status;
8000aea0:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8000aea4:	10 9c       	mov	r12,r8
8000aea6:	2f ed       	sub	sp,-8
8000aea8:	e3 cd 80 80 	ldm	sp++,r7,pc
8000aeac:	80 01       	ld.sh	r1,r0[0x0]
8000aeae:	4e 00       	lddpc	r0,8000b02c <fat_mount+0x30>

8000aeb0 <mem_sector_size>:
  return status;
}


U8 mem_sector_size(U8 lun)
{
8000aeb0:	eb cd 40 80 	pushm	r7,lr
8000aeb4:	1a 97       	mov	r7,sp
8000aeb6:	20 2d       	sub	sp,8
8000aeb8:	18 98       	mov	r8,r12
8000aeba:	ef 68 ff f8 	st.b	r7[-8],r8
  U8 sector_size;

  if (!Ctrl_access_lock()) return 0;

  sector_size =
8000aebe:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000aec2:	30 08       	mov	r8,0
8000aec4:	f0 09 18 00 	cp.b	r9,r8
8000aec8:	5f 08       	sreq	r8
8000aeca:	ef 68 ff ff 	st.b	r7[-1],r8
                                  0;
#endif

  Ctrl_access_unlock();

  return sector_size;
8000aece:	ef 38 ff ff 	ld.ub	r8,r7[-1]
}
8000aed2:	10 9c       	mov	r12,r8
8000aed4:	2f ed       	sub	sp,-8
8000aed6:	e3 cd 80 80 	ldm	sp++,r7,pc
8000aeda:	d7 03       	nop

8000aedc <mem_wr_protect>:

  return unloaded;
}

bool mem_wr_protect(U8 lun)
{
8000aedc:	eb cd 40 80 	pushm	r7,lr
8000aee0:	1a 97       	mov	r7,sp
8000aee2:	20 2d       	sub	sp,8
8000aee4:	18 98       	mov	r8,r12
8000aee6:	ef 68 ff f8 	st.b	r7[-8],r8
  bool wr_protect;

  if (!Ctrl_access_lock()) return true;

  wr_protect =
8000aeea:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000aeee:	30 08       	mov	r8,0
8000aef0:	f0 09 18 00 	cp.b	r9,r8
8000aef4:	c0 c1       	brne	8000af0c <mem_wr_protect+0x30>
#if MAX_LUN
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
8000aef6:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000aefa:	48 a9       	lddpc	r9,8000af20 <mem_wr_protect+0x44>
8000aefc:	a5 78       	lsl	r8,0x5
8000aefe:	f2 08 00 08 	add	r8,r9,r8
8000af02:	2f 48       	sub	r8,-12
8000af04:	70 08       	ld.w	r8,r8[0x0]
8000af06:	5d 18       	icall	r8
8000af08:	18 98       	mov	r8,r12
8000af0a:	c0 28       	rjmp	8000af0e <mem_wr_protect+0x32>
{
  bool wr_protect;

  if (!Ctrl_access_lock()) return true;

  wr_protect =
8000af0c:	30 18       	mov	r8,1
8000af0e:	ef 68 ff ff 	st.b	r7[-1],r8
                                 true;
#endif

  Ctrl_access_unlock();

  return wr_protect;
8000af12:	ef 38 ff ff 	ld.ub	r8,r7[-1]
}
8000af16:	10 9c       	mov	r12,r8
8000af18:	2f ed       	sub	sp,-8
8000af1a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000af1e:	00 00       	add	r0,r0
8000af20:	80 01       	ld.sh	r1,r0[0x0]
8000af22:	4e 00       	lddpc	r0,8000b0a0 <fat_mount+0xa4>

8000af24 <memory_2_ram>:
 */
//! @{


Ctrl_status memory_2_ram(U8 lun, U32 addr, void *ram)
{
8000af24:	eb cd 40 80 	pushm	r7,lr
8000af28:	1a 97       	mov	r7,sp
8000af2a:	20 4d       	sub	sp,16
8000af2c:	18 98       	mov	r8,r12
8000af2e:	ef 4b ff f4 	st.w	r7[-12],r11
8000af32:	ef 4a ff f0 	st.w	r7[-16],r10
8000af36:	ef 68 ff f8 	st.b	r7[-8],r8
  UNUSED(lun);
#endif

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(1);
8000af3a:	32 0c       	mov	r12,32
8000af3c:	f0 1f 00 12 	mcall	8000af84 <memory_2_ram+0x60>
  status =
8000af40:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000af44:	30 08       	mov	r8,0
8000af46:	f0 09 18 00 	cp.b	r9,r8
8000af4a:	c1 01       	brne	8000af6a <memory_2_ram+0x46>
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
8000af4c:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000af50:	48 e9       	lddpc	r9,8000af88 <memory_2_ram+0x64>
8000af52:	a5 78       	lsl	r8,0x5
8000af54:	f2 08 00 08 	add	r8,r9,r8
8000af58:	2e c8       	sub	r8,-20
8000af5a:	70 08       	ld.w	r8,r8[0x0]
8000af5c:	ee fb ff f0 	ld.w	r11,r7[-16]
8000af60:	ee fc ff f4 	ld.w	r12,r7[-12]
8000af64:	5d 18       	icall	r8
8000af66:	18 98       	mov	r8,r12
8000af68:	c0 28       	rjmp	8000af6c <memory_2_ram+0x48>
#endif

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(1);
  status =
8000af6a:	30 18       	mov	r8,1
8000af6c:	ef 48 ff fc 	st.w	r7[-4],r8
#if LUN_USB == ENABLE
                             Lun_usb_mem_2_ram(addr, ram);
#else
                             CTRL_FAIL;
#endif
  memory_stop_read_action();
8000af70:	32 0c       	mov	r12,32
8000af72:	f0 1f 00 07 	mcall	8000af8c <memory_2_ram+0x68>

  Ctrl_access_unlock();

  return status;
8000af76:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8000af7a:	10 9c       	mov	r12,r8
8000af7c:	2f cd       	sub	sp,-16
8000af7e:	e3 cd 80 80 	ldm	sp++,r7,pc
8000af82:	00 00       	add	r0,r0
8000af84:	80 00       	ld.sh	r0,r0[0x0]
8000af86:	d9 28       	*unknown*
8000af88:	80 01       	ld.sh	r1,r0[0x0]
8000af8a:	4e 00       	lddpc	r0,8000b108 <fat_mount+0x10c>
8000af8c:	80 00       	ld.sh	r0,r0[0x0]
8000af8e:	d8 70       	acall	0x87

8000af90 <ram_2_memory>:


Ctrl_status ram_2_memory(U8 lun, U32 addr, const void *ram)
{
8000af90:	eb cd 40 80 	pushm	r7,lr
8000af94:	1a 97       	mov	r7,sp
8000af96:	20 4d       	sub	sp,16
8000af98:	18 98       	mov	r8,r12
8000af9a:	ef 4b ff f4 	st.w	r7[-12],r11
8000af9e:	ef 4a ff f0 	st.w	r7[-16],r10
8000afa2:	ef 68 ff f8 	st.b	r7[-8],r8
  UNUSED(lun);
#endif

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(1);
8000afa6:	31 0c       	mov	r12,16
8000afa8:	f0 1f 00 12 	mcall	8000aff0 <ram_2_memory+0x60>
  status =
8000afac:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000afb0:	30 08       	mov	r8,0
8000afb2:	f0 09 18 00 	cp.b	r9,r8
8000afb6:	c1 01       	brne	8000afd6 <ram_2_memory+0x46>
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
8000afb8:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000afbc:	48 e9       	lddpc	r9,8000aff4 <ram_2_memory+0x64>
8000afbe:	a5 78       	lsl	r8,0x5
8000afc0:	f2 08 00 08 	add	r8,r9,r8
8000afc4:	2e 88       	sub	r8,-24
8000afc6:	70 08       	ld.w	r8,r8[0x0]
8000afc8:	ee fb ff f0 	ld.w	r11,r7[-16]
8000afcc:	ee fc ff f4 	ld.w	r12,r7[-12]
8000afd0:	5d 18       	icall	r8
8000afd2:	18 98       	mov	r8,r12
8000afd4:	c0 28       	rjmp	8000afd8 <ram_2_memory+0x48>
#endif

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(1);
  status =
8000afd6:	30 18       	mov	r8,1
8000afd8:	ef 48 ff fc 	st.w	r7[-4],r8
#if LUN_USB == ENABLE
                             Lun_usb_ram_2_mem(addr, ram);
#else
                             CTRL_FAIL;
#endif
  memory_stop_write_action();
8000afdc:	31 0c       	mov	r12,16
8000afde:	f0 1f 00 07 	mcall	8000aff8 <ram_2_memory+0x68>

  Ctrl_access_unlock();

  return status;
8000afe2:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8000afe6:	10 9c       	mov	r12,r8
8000afe8:	2f cd       	sub	sp,-16
8000afea:	e3 cd 80 80 	ldm	sp++,r7,pc
8000afee:	00 00       	add	r0,r0
8000aff0:	80 00       	ld.sh	r0,r0[0x0]
8000aff2:	d9 28       	*unknown*
8000aff4:	80 01       	ld.sh	r1,r0[0x0]
8000aff6:	4e 00       	lddpc	r0,8000b174 <fat_mount+0x178>
8000aff8:	80 00       	ld.sh	r0,r0[0x0]
8000affa:	d8 70       	acall	0x87

8000affc <fat_mount>:
//! If the FS_MULTI_PARTITION option is disabled
//! then the mount routine selects the first partition supported by file system. <br>
//! @endverbatim
//!
bool  fat_mount( void )
{
8000affc:	eb cd 40 80 	pushm	r7,lr
8000b000:	1a 97       	mov	r7,sp
8000b002:	20 2d       	sub	sp,8
   uint8_t  u8_tmp;
   uint16_t u16_tmp;
   uint32_t u32_tmp;

   // Select the root directory
   fs_g_nav.u32_cluster_sel_dir   = 0;
8000b004:	fe f8 05 b0 	ld.w	r8,pc[1456]
8000b008:	30 09       	mov	r9,0
8000b00a:	91 89       	st.w	r8[0x20],r9
   // No selected file
   fat_clear_entry_info_and_ptr();
8000b00c:	f0 1f 01 6b 	mcall	8000b5b8 <fat_mount+0x5bc>

   fs_g_nav_fast.u8_type_fat = FS_TYPE_FAT_UNM;
8000b010:	fe f9 05 ac 	ld.w	r9,pc[1452]
8000b014:	30 08       	mov	r8,0
8000b016:	b2 88       	st.b	r9[0x0],r8
   fs_gu32_addrsector = 0;    // Start read at the beginning of memory
8000b018:	fe f8 05 a8 	ld.w	r8,pc[1448]
8000b01c:	30 09       	mov	r9,0
8000b01e:	91 09       	st.w	r8[0x0],r9

   // Check if the drive is available
   if( !fat_check_device() )
8000b020:	f0 1f 01 69 	mcall	8000b5c4 <fat_mount+0x5c8>
8000b024:	18 98       	mov	r8,r12
8000b026:	ec 18 00 01 	eorl	r8,0x1
8000b02a:	5c 58       	castu.b	r8
8000b02c:	c0 40       	breq	8000b034 <fat_mount+0x38>
      return false;
8000b02e:	30 08       	mov	r8,0
8000b030:	e0 8f 02 be 	bral	8000b5ac <fat_mount+0x5b0>

   while( 1 )  // Search a valid partition
   {
      // Read one sector
      if( !fat_cache_read_sector( true ))
8000b034:	30 1c       	mov	r12,1
8000b036:	f0 1f 01 65 	mcall	8000b5c8 <fat_mount+0x5cc>
8000b03a:	18 98       	mov	r8,r12
8000b03c:	ec 18 00 01 	eorl	r8,0x1
8000b040:	5c 58       	castu.b	r8
8000b042:	c0 40       	breq	8000b04a <fat_mount+0x4e>
         return false;
8000b044:	30 08       	mov	r8,0
8000b046:	e0 8f 02 b3 	bral	8000b5ac <fat_mount+0x5b0>

      // Check PBR/MBR signature
      if ( (fs_g_sector[510] != FS_BR_SIGNATURE_LOW  )
8000b04a:	fe f8 05 82 	ld.w	r8,pc[1410]
8000b04e:	f1 39 01 fe 	ld.ub	r9,r8[510]
8000b052:	35 58       	mov	r8,85
8000b054:	f0 09 18 00 	cp.b	r9,r8
8000b058:	c1 00       	breq	8000b078 <fat_mount+0x7c>
      &&   (fs_g_sector[511] != FS_BR_SIGNATURE_HIGH ) )
8000b05a:	fe f8 05 72 	ld.w	r8,pc[1394]
8000b05e:	f1 39 01 ff 	ld.ub	r9,r8[511]
      // Read one sector
      if( !fat_cache_read_sector( true ))
         return false;

      // Check PBR/MBR signature
      if ( (fs_g_sector[510] != FS_BR_SIGNATURE_LOW  )
8000b062:	3a a8       	mov	r8,-86
8000b064:	f0 09 18 00 	cp.b	r9,r8
8000b068:	c0 80       	breq	8000b078 <fat_mount+0x7c>
      &&   (fs_g_sector[511] != FS_BR_SIGNATURE_HIGH ) )
      {
         fs_g_status = FS_ERR_NO_FORMAT;
8000b06a:	fe f9 05 66 	ld.w	r9,pc[1382]
8000b06e:	30 28       	mov	r8,2
8000b070:	b2 88       	st.b	r9[0x0],r8
         return false;
8000b072:	30 08       	mov	r8,0
8000b074:	e0 8f 02 9c 	bral	8000b5ac <fat_mount+0x5b0>
      }

      if ( 0 == fs_gu32_addrsector )
8000b078:	fe f8 05 48 	ld.w	r8,pc[1352]
8000b07c:	70 08       	ld.w	r8,r8[0x0]
8000b07e:	58 08       	cp.w	r8,0
8000b080:	e0 81 00 f2 	brne	8000b264 <fat_mount+0x268>
         //** first sector then check a MBR structure
         // Search the first partition supported
#if (FS_MULTI_PARTITION == true)
         u16_tmp=0;  // Init to "no valid partition found"
#endif
         for( u8_tmp=0 ; u8_tmp!=4 ; u8_tmp++ )
8000b084:	30 08       	mov	r8,0
8000b086:	ef 68 ff ff 	st.b	r7[-1],r8
8000b08a:	c8 a8       	rjmp	8000b19e <fat_mount+0x1a2>
         {
            // The first sector must be a MBR, then check the partition entry in the MBR
            if ( ((fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+0] == FS_PART_BOOTABLE             )||
8000b08c:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000b090:	a5 68       	lsl	r8,0x4
8000b092:	5c 88       	casts.h	r8
8000b094:	f0 c8 fe 42 	sub	r8,r8,-446
8000b098:	5c 88       	casts.h	r8
8000b09a:	5c 78       	castu.h	r8
8000b09c:	fe f9 05 30 	ld.w	r9,pc[1328]
8000b0a0:	f2 08 07 09 	ld.ub	r9,r9[r8]
8000b0a4:	38 08       	mov	r8,-128
8000b0a6:	f0 09 18 00 	cp.b	r9,r8
8000b0aa:	c0 f0       	breq	8000b0c8 <fat_mount+0xcc>
                  (fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+0] == FS_PART_NO_BOOTABLE          )  )
8000b0ac:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000b0b0:	a5 68       	lsl	r8,0x4
8000b0b2:	5c 88       	casts.h	r8
8000b0b4:	f0 c8 fe 42 	sub	r8,r8,-446
8000b0b8:	5c 88       	casts.h	r8
8000b0ba:	5c 78       	castu.h	r8
8000b0bc:	fe f9 05 10 	ld.w	r9,pc[1296]
8000b0c0:	f2 08 07 08 	ld.ub	r8,r9[r8]
         u16_tmp=0;  // Init to "no valid partition found"
#endif
         for( u8_tmp=0 ; u8_tmp!=4 ; u8_tmp++ )
         {
            // The first sector must be a MBR, then check the partition entry in the MBR
            if ( ((fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+0] == FS_PART_BOOTABLE             )||
8000b0c4:	58 08       	cp.w	r8,0
8000b0c6:	c6 71       	brne	8000b194 <fat_mount+0x198>
                  (fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+0] == FS_PART_NO_BOOTABLE          )  )
            &&   ((fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+4] == FS_PART_TYPE_FAT12           )||
8000b0c8:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000b0cc:	a5 68       	lsl	r8,0x4
8000b0ce:	5c 88       	casts.h	r8
8000b0d0:	f0 c8 fe 42 	sub	r8,r8,-446
8000b0d4:	5c 88       	casts.h	r8
8000b0d6:	5c 78       	castu.h	r8
8000b0d8:	2f c8       	sub	r8,-4
8000b0da:	fe f9 04 f2 	ld.w	r9,pc[1266]
8000b0de:	f2 08 07 09 	ld.ub	r9,r9[r8]
         u16_tmp=0;  // Init to "no valid partition found"
#endif
         for( u8_tmp=0 ; u8_tmp!=4 ; u8_tmp++ )
         {
            // The first sector must be a MBR, then check the partition entry in the MBR
            if ( ((fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+0] == FS_PART_BOOTABLE             )||
8000b0e2:	30 18       	mov	r8,1
8000b0e4:	f0 09 18 00 	cp.b	r9,r8
8000b0e8:	c6 20       	breq	8000b1ac <fat_mount+0x1b0>
                  (fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+0] == FS_PART_NO_BOOTABLE          )  )
            &&   ((fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+4] == FS_PART_TYPE_FAT12           )||
                  (fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+4] == FS_PART_TYPE_FAT16_INF32M    )||
8000b0ea:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000b0ee:	a5 68       	lsl	r8,0x4
8000b0f0:	5c 88       	casts.h	r8
8000b0f2:	f0 c8 fe 42 	sub	r8,r8,-446
8000b0f6:	5c 88       	casts.h	r8
8000b0f8:	5c 78       	castu.h	r8
8000b0fa:	2f c8       	sub	r8,-4
8000b0fc:	fe f9 04 d0 	ld.w	r9,pc[1232]
8000b100:	f2 08 07 09 	ld.ub	r9,r9[r8]
         u16_tmp=0;  // Init to "no valid partition found"
#endif
         for( u8_tmp=0 ; u8_tmp!=4 ; u8_tmp++ )
         {
            // The first sector must be a MBR, then check the partition entry in the MBR
            if ( ((fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+0] == FS_PART_BOOTABLE             )||
8000b104:	30 48       	mov	r8,4
8000b106:	f0 09 18 00 	cp.b	r9,r8
8000b10a:	c5 10       	breq	8000b1ac <fat_mount+0x1b0>
                  (fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+0] == FS_PART_NO_BOOTABLE          )  )
            &&   ((fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+4] == FS_PART_TYPE_FAT12           )||
                  (fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+4] == FS_PART_TYPE_FAT16_INF32M    )||
                  (fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+4] == FS_PART_TYPE_FAT16_SUP32M    )||
8000b10c:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000b110:	a5 68       	lsl	r8,0x4
8000b112:	5c 88       	casts.h	r8
8000b114:	f0 c8 fe 42 	sub	r8,r8,-446
8000b118:	5c 88       	casts.h	r8
8000b11a:	5c 78       	castu.h	r8
8000b11c:	2f c8       	sub	r8,-4
8000b11e:	fe f9 04 ae 	ld.w	r9,pc[1198]
8000b122:	f2 08 07 09 	ld.ub	r9,r9[r8]
         u16_tmp=0;  // Init to "no valid partition found"
#endif
         for( u8_tmp=0 ; u8_tmp!=4 ; u8_tmp++ )
         {
            // The first sector must be a MBR, then check the partition entry in the MBR
            if ( ((fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+0] == FS_PART_BOOTABLE             )||
8000b126:	30 68       	mov	r8,6
8000b128:	f0 09 18 00 	cp.b	r9,r8
8000b12c:	c4 00       	breq	8000b1ac <fat_mount+0x1b0>
                  (fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+0] == FS_PART_NO_BOOTABLE          )  )
            &&   ((fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+4] == FS_PART_TYPE_FAT12           )||
                  (fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+4] == FS_PART_TYPE_FAT16_INF32M    )||
                  (fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+4] == FS_PART_TYPE_FAT16_SUP32M    )||
                  (fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+4] == FS_PART_TYPE_FAT16_SUP32M_BIS)||
8000b12e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000b132:	a5 68       	lsl	r8,0x4
8000b134:	5c 88       	casts.h	r8
8000b136:	f0 c8 fe 42 	sub	r8,r8,-446
8000b13a:	5c 88       	casts.h	r8
8000b13c:	5c 78       	castu.h	r8
8000b13e:	2f c8       	sub	r8,-4
8000b140:	fe f9 04 8c 	ld.w	r9,pc[1164]
8000b144:	f2 08 07 09 	ld.ub	r9,r9[r8]
         u16_tmp=0;  // Init to "no valid partition found"
#endif
         for( u8_tmp=0 ; u8_tmp!=4 ; u8_tmp++ )
         {
            // The first sector must be a MBR, then check the partition entry in the MBR
            if ( ((fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+0] == FS_PART_BOOTABLE             )||
8000b148:	30 e8       	mov	r8,14
8000b14a:	f0 09 18 00 	cp.b	r9,r8
8000b14e:	c2 f0       	breq	8000b1ac <fat_mount+0x1b0>
                  (fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+0] == FS_PART_NO_BOOTABLE          )  )
            &&   ((fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+4] == FS_PART_TYPE_FAT12           )||
                  (fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+4] == FS_PART_TYPE_FAT16_INF32M    )||
                  (fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+4] == FS_PART_TYPE_FAT16_SUP32M    )||
                  (fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+4] == FS_PART_TYPE_FAT16_SUP32M_BIS)||
                  (fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+4] == FS_PART_TYPE_FAT32           )||
8000b150:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000b154:	a5 68       	lsl	r8,0x4
8000b156:	5c 88       	casts.h	r8
8000b158:	f0 c8 fe 42 	sub	r8,r8,-446
8000b15c:	5c 88       	casts.h	r8
8000b15e:	5c 78       	castu.h	r8
8000b160:	2f c8       	sub	r8,-4
8000b162:	fe f9 04 6a 	ld.w	r9,pc[1130]
8000b166:	f2 08 07 09 	ld.ub	r9,r9[r8]
         u16_tmp=0;  // Init to "no valid partition found"
#endif
         for( u8_tmp=0 ; u8_tmp!=4 ; u8_tmp++ )
         {
            // The first sector must be a MBR, then check the partition entry in the MBR
            if ( ((fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+0] == FS_PART_BOOTABLE             )||
8000b16a:	30 b8       	mov	r8,11
8000b16c:	f0 09 18 00 	cp.b	r9,r8
8000b170:	c1 e0       	breq	8000b1ac <fat_mount+0x1b0>
            &&   ((fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+4] == FS_PART_TYPE_FAT12           )||
                  (fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+4] == FS_PART_TYPE_FAT16_INF32M    )||
                  (fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+4] == FS_PART_TYPE_FAT16_SUP32M    )||
                  (fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+4] == FS_PART_TYPE_FAT16_SUP32M_BIS)||
                  (fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+4] == FS_PART_TYPE_FAT32           )||
                  (fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+4] == FS_PART_TYPE_FAT32_BIS       )) )
8000b172:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000b176:	a5 68       	lsl	r8,0x4
8000b178:	5c 88       	casts.h	r8
8000b17a:	f0 c8 fe 42 	sub	r8,r8,-446
8000b17e:	5c 88       	casts.h	r8
8000b180:	5c 78       	castu.h	r8
8000b182:	2f c8       	sub	r8,-4
8000b184:	fe f9 04 48 	ld.w	r9,pc[1096]
8000b188:	f2 08 07 09 	ld.ub	r9,r9[r8]
         u16_tmp=0;  // Init to "no valid partition found"
#endif
         for( u8_tmp=0 ; u8_tmp!=4 ; u8_tmp++ )
         {
            // The first sector must be a MBR, then check the partition entry in the MBR
            if ( ((fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+0] == FS_PART_BOOTABLE             )||
8000b18c:	30 c8       	mov	r8,12
8000b18e:	f0 09 18 00 	cp.b	r9,r8
8000b192:	c0 d0       	breq	8000b1ac <fat_mount+0x1b0>
         //** first sector then check a MBR structure
         // Search the first partition supported
#if (FS_MULTI_PARTITION == true)
         u16_tmp=0;  // Init to "no valid partition found"
#endif
         for( u8_tmp=0 ; u8_tmp!=4 ; u8_tmp++ )
8000b194:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000b198:	2f f8       	sub	r8,-1
8000b19a:	ef 68 ff ff 	st.b	r7[-1],r8
8000b19e:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000b1a2:	30 48       	mov	r8,4
8000b1a4:	f0 09 18 00 	cp.b	r9,r8
8000b1a8:	fe 91 ff 72 	brne	8000b08c <fat_mount+0x90>
#else
               break;
#endif
            }
         }
         if( u8_tmp != 4 )
8000b1ac:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000b1b0:	30 48       	mov	r8,4
8000b1b2:	f0 09 18 00 	cp.b	r9,r8
8000b1b6:	c5 70       	breq	8000b264 <fat_mount+0x268>
         {
            // Partition found -> Get partition position (unit sector) at offset 8
            LSB0(fs_gu32_addrsector) = fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+8];
8000b1b8:	fe f8 04 08 	ld.w	r8,pc[1032]
8000b1bc:	f0 c9 ff fd 	sub	r9,r8,-3
8000b1c0:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000b1c4:	a5 68       	lsl	r8,0x4
8000b1c6:	5c 88       	casts.h	r8
8000b1c8:	f0 c8 fe 42 	sub	r8,r8,-446
8000b1cc:	5c 88       	casts.h	r8
8000b1ce:	5c 78       	castu.h	r8
8000b1d0:	2f 88       	sub	r8,-8
8000b1d2:	fe fa 03 fa 	ld.w	r10,pc[1018]
8000b1d6:	f4 08 07 08 	ld.ub	r8,r10[r8]
8000b1da:	b2 88       	st.b	r9[0x0],r8
            LSB1(fs_gu32_addrsector) = fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+9];
8000b1dc:	fe f8 03 e4 	ld.w	r8,pc[996]
8000b1e0:	f0 c9 ff fe 	sub	r9,r8,-2
8000b1e4:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000b1e8:	a5 68       	lsl	r8,0x4
8000b1ea:	5c 88       	casts.h	r8
8000b1ec:	f0 c8 fe 42 	sub	r8,r8,-446
8000b1f0:	5c 88       	casts.h	r8
8000b1f2:	5c 78       	castu.h	r8
8000b1f4:	2f 78       	sub	r8,-9
8000b1f6:	fe fa 03 d6 	ld.w	r10,pc[982]
8000b1fa:	f4 08 07 08 	ld.ub	r8,r10[r8]
8000b1fe:	b2 88       	st.b	r9[0x0],r8
            LSB2(fs_gu32_addrsector) = fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+10];
8000b200:	fe f8 03 c0 	ld.w	r8,pc[960]
8000b204:	f0 c9 ff ff 	sub	r9,r8,-1
8000b208:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000b20c:	a5 68       	lsl	r8,0x4
8000b20e:	5c 88       	casts.h	r8
8000b210:	f0 c8 fe 42 	sub	r8,r8,-446
8000b214:	5c 88       	casts.h	r8
8000b216:	5c 78       	castu.h	r8
8000b218:	2f 68       	sub	r8,-10
8000b21a:	fe fa 03 b2 	ld.w	r10,pc[946]
8000b21e:	f4 08 07 08 	ld.ub	r8,r10[r8]
8000b222:	b2 88       	st.b	r9[0x0],r8
            LSB3(fs_gu32_addrsector) = fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+11];
8000b224:	fe f9 03 9c 	ld.w	r9,pc[924]
8000b228:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000b22c:	a5 68       	lsl	r8,0x4
8000b22e:	5c 88       	casts.h	r8
8000b230:	f0 c8 fe 42 	sub	r8,r8,-446
8000b234:	5c 88       	casts.h	r8
8000b236:	5c 78       	castu.h	r8
8000b238:	2f 58       	sub	r8,-11
8000b23a:	fe fa 03 92 	ld.w	r10,pc[914]
8000b23e:	f4 08 07 08 	ld.ub	r8,r10[r8]
8000b242:	b2 88       	st.b	r9[0x0],r8
            fs_gu32_addrsector *= mem_sector_size( fs_g_nav.u8_lun );
8000b244:	fe f8 03 70 	ld.w	r8,pc[880]
8000b248:	11 88       	ld.ub	r8,r8[0x0]
8000b24a:	10 9c       	mov	r12,r8
8000b24c:	f0 1f 00 e2 	mcall	8000b5d4 <fat_mount+0x5d8>
8000b250:	18 98       	mov	r8,r12
8000b252:	10 99       	mov	r9,r8
8000b254:	fe f8 03 6c 	ld.w	r8,pc[876]
8000b258:	70 08       	ld.w	r8,r8[0x0]
8000b25a:	b1 39       	mul	r9,r8
8000b25c:	fe f8 03 64 	ld.w	r8,pc[868]
8000b260:	91 09       	st.w	r8[0x0],r9
         break;   // valid PBR found
      }
      // PBR not found
      fs_g_status = FS_ERR_NO_PART;
      return false;
   }
8000b262:	ce 9a       	rjmp	8000b034 <fat_mount+0x38>
         }
#endif
      }

      //** Check a PBR structure
      if ( (fs_g_sector[0] == 0xEB) &&          // PBR Byte 0
8000b264:	fe f8 03 68 	ld.w	r8,pc[872]
8000b268:	11 89       	ld.ub	r9,r8[0x0]
8000b26a:	3e b8       	mov	r8,-21
8000b26c:	f0 09 18 00 	cp.b	r9,r8
8000b270:	c4 21       	brne	8000b2f4 <fat_mount+0x2f8>
           (fs_g_sector[2] == 0x90) &&          // PBR Byte 2
8000b272:	fe f8 03 5a 	ld.w	r8,pc[858]
8000b276:	11 a9       	ld.ub	r9,r8[0x2]
         }
#endif
      }

      //** Check a PBR structure
      if ( (fs_g_sector[0] == 0xEB) &&          // PBR Byte 0
8000b278:	39 08       	mov	r8,-112
8000b27a:	f0 09 18 00 	cp.b	r9,r8
8000b27e:	c3 b1       	brne	8000b2f4 <fat_mount+0x2f8>
           (fs_g_sector[2] == 0x90) &&          // PBR Byte 2
           ((fs_g_sector[21] & 0xF0) == 0xF0) ) // PBR Byte 21 : Media byte
8000b280:	fe f8 03 4c 	ld.w	r8,pc[844]
8000b284:	f1 38 00 15 	ld.ub	r8,r8[21]
8000b288:	e2 18 00 f0 	andl	r8,0xf0,COH
         }
#endif
      }

      //** Check a PBR structure
      if ( (fs_g_sector[0] == 0xEB) &&          // PBR Byte 0
8000b28c:	e0 48 00 f0 	cp.w	r8,240
8000b290:	c3 21       	brne	8000b2f4 <fat_mount+0x2f8>
      // PBR not found
      fs_g_status = FS_ERR_NO_PART;
      return false;
   }

   fs_g_status = FS_ERR_NO_SUPPORT_PART;  // by default partition no supported
8000b292:	fe f9 03 3e 	ld.w	r9,pc[830]
8000b296:	30 48       	mov	r8,4
8000b298:	b2 88       	st.b	r9[0x0],r8

   // Get sector size of File System (unit 512B)
   // To translate from sector disk unit to sector 512B unit
   u8_sector_size = HIGH_16_BPB_BytsPerSec/2;
8000b29a:	fe f8 03 32 	ld.w	r8,pc[818]
8000b29e:	f1 38 00 0c 	ld.ub	r8,r8[12]
8000b2a2:	a1 98       	lsr	r8,0x1
8000b2a4:	ef 68 ff fe 	st.b	r7[-2],r8

   // Read BPB_SecPerClus (unit sector)
   fs_g_nav.u8_BPB_SecPerClus = U8_BPB_SecPerClus * u8_sector_size;
8000b2a8:	fe f8 03 24 	ld.w	r8,pc[804]
8000b2ac:	f1 38 00 0d 	ld.ub	r8,r8[13]
8000b2b0:	ef 39 ff fe 	ld.ub	r9,r7[-2]
8000b2b4:	f2 08 02 48 	mul	r8,r9,r8
8000b2b8:	5c 58       	castu.b	r8
8000b2ba:	fe f9 02 fa 	ld.w	r9,pc[762]
8000b2be:	b2 98       	st.b	r9[0x1],r8

   //** FAT Type determination (algorithm of "Hardware White Paper FAT")
   // Get FAT size (unit sector)
   u32_tmp=0;
8000b2c0:	30 08       	mov	r8,0
8000b2c2:	ef 48 ff f8 	st.w	r7[-8],r8
   LSB0( u32_tmp ) = LOW_16_BPB_FATSz16;
8000b2c6:	ee c8 00 08 	sub	r8,r7,8
8000b2ca:	f0 c9 ff fd 	sub	r9,r8,-3
8000b2ce:	fe f8 02 fe 	ld.w	r8,pc[766]
8000b2d2:	f1 38 00 16 	ld.ub	r8,r8[22]
8000b2d6:	b2 88       	st.b	r9[0x0],r8
   LSB1( u32_tmp ) = HIGH_16_BPB_FATSz16;
8000b2d8:	ee c8 00 08 	sub	r8,r7,8
8000b2dc:	f0 c9 ff fe 	sub	r9,r8,-2
8000b2e0:	fe f8 02 ec 	ld.w	r8,pc[748]
8000b2e4:	f1 38 00 17 	ld.ub	r8,r8[23]
8000b2e8:	b2 88       	st.b	r9[0x0],r8
   if ( 0==u32_tmp )
8000b2ea:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b2ee:	58 08       	cp.w	r8,0
8000b2f0:	c0 90       	breq	8000b302 <fat_mount+0x306>
8000b2f2:	c2 a8       	rjmp	8000b346 <fat_mount+0x34a>
           ((fs_g_sector[21] & 0xF0) == 0xF0) ) // PBR Byte 21 : Media byte
      {
         break;   // valid PBR found
      }
      // PBR not found
      fs_g_status = FS_ERR_NO_PART;
8000b2f4:	fe f9 02 dc 	ld.w	r9,pc[732]
8000b2f8:	30 38       	mov	r8,3
8000b2fa:	b2 88       	st.b	r9[0x0],r8
      return false;
8000b2fc:	30 08       	mov	r8,0
8000b2fe:	e0 8f 01 57 	bral	8000b5ac <fat_mount+0x5b0>
   u32_tmp=0;
   LSB0( u32_tmp ) = LOW_16_BPB_FATSz16;
   LSB1( u32_tmp ) = HIGH_16_BPB_FATSz16;
   if ( 0==u32_tmp )
   {
      LSB0( u32_tmp ) = LOW0_32_BPB_FATSz32;
8000b302:	ee c8 00 08 	sub	r8,r7,8
8000b306:	f0 c9 ff fd 	sub	r9,r8,-3
8000b30a:	fe f8 02 c2 	ld.w	r8,pc[706]
8000b30e:	f1 38 00 24 	ld.ub	r8,r8[36]
8000b312:	b2 88       	st.b	r9[0x0],r8
      LSB1( u32_tmp ) = LOW1_32_BPB_FATSz32;
8000b314:	ee c8 00 08 	sub	r8,r7,8
8000b318:	f0 c9 ff fe 	sub	r9,r8,-2
8000b31c:	fe f8 02 b0 	ld.w	r8,pc[688]
8000b320:	f1 38 00 25 	ld.ub	r8,r8[37]
8000b324:	b2 88       	st.b	r9[0x0],r8
      LSB2( u32_tmp ) = LOW2_32_BPB_FATSz32;
8000b326:	ee c8 00 08 	sub	r8,r7,8
8000b32a:	f0 c9 ff ff 	sub	r9,r8,-1
8000b32e:	fe f8 02 9e 	ld.w	r8,pc[670]
8000b332:	f1 38 00 26 	ld.ub	r8,r8[38]
8000b336:	b2 88       	st.b	r9[0x0],r8
      LSB3( u32_tmp ) = LOW3_32_BPB_FATSz32;
8000b338:	ee c9 00 08 	sub	r9,r7,8
8000b33c:	fe f8 02 90 	ld.w	r8,pc[656]
8000b340:	f1 38 00 27 	ld.ub	r8,r8[39]
8000b344:	b2 88       	st.b	r9[0x0],r8
   }
   fs_g_nav.u32_fat_size = u32_tmp * u8_sector_size;
8000b346:	ef 39 ff fe 	ld.ub	r9,r7[-2]
8000b34a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b34e:	b1 39       	mul	r9,r8
8000b350:	fe f8 02 64 	ld.w	r8,pc[612]
8000b354:	91 19       	st.w	r8[0x4],r9

   // Get total count of sectors in partition
   if ( (0==LOW_16_BPB_TotSec16) && (0==HIGH_16_BPB_TotSec16) )
8000b356:	fe f8 02 76 	ld.w	r8,pc[630]
8000b35a:	f1 38 00 13 	ld.ub	r8,r8[19]
8000b35e:	58 08       	cp.w	r8,0
8000b360:	c2 a1       	brne	8000b3b4 <fat_mount+0x3b8>
8000b362:	fe f8 02 6a 	ld.w	r8,pc[618]
8000b366:	f1 38 00 14 	ld.ub	r8,r8[20]
8000b36a:	58 08       	cp.w	r8,0
8000b36c:	c2 41       	brne	8000b3b4 <fat_mount+0x3b8>
   {
      LSB0( u32_tmp ) = LOW0_32_BPB_TotSec32;
8000b36e:	ee c8 00 08 	sub	r8,r7,8
8000b372:	f0 c9 ff fd 	sub	r9,r8,-3
8000b376:	fe f8 02 56 	ld.w	r8,pc[598]
8000b37a:	f1 38 00 20 	ld.ub	r8,r8[32]
8000b37e:	b2 88       	st.b	r9[0x0],r8
      LSB1( u32_tmp ) = LOW1_32_BPB_TotSec32;
8000b380:	ee c8 00 08 	sub	r8,r7,8
8000b384:	f0 c9 ff fe 	sub	r9,r8,-2
8000b388:	fe f8 02 44 	ld.w	r8,pc[580]
8000b38c:	f1 38 00 21 	ld.ub	r8,r8[33]
8000b390:	b2 88       	st.b	r9[0x0],r8
      LSB2( u32_tmp ) = LOW2_32_BPB_TotSec32;
8000b392:	ee c8 00 08 	sub	r8,r7,8
8000b396:	f0 c9 ff ff 	sub	r9,r8,-1
8000b39a:	fe f8 02 32 	ld.w	r8,pc[562]
8000b39e:	f1 38 00 22 	ld.ub	r8,r8[34]
8000b3a2:	b2 88       	st.b	r9[0x0],r8
      LSB3( u32_tmp ) = LOW3_32_BPB_TotSec32;
8000b3a4:	ee c9 00 08 	sub	r9,r7,8
8000b3a8:	fe f8 02 24 	ld.w	r8,pc[548]
8000b3ac:	f1 38 00 23 	ld.ub	r8,r8[35]
8000b3b0:	b2 88       	st.b	r9[0x0],r8
      LSB3( u32_tmp ) = LOW3_32_BPB_FATSz32;
   }
   fs_g_nav.u32_fat_size = u32_tmp * u8_sector_size;

   // Get total count of sectors in partition
   if ( (0==LOW_16_BPB_TotSec16) && (0==HIGH_16_BPB_TotSec16) )
8000b3b2:	c1 d8       	rjmp	8000b3ec <fat_mount+0x3f0>
      LSB2( u32_tmp ) = LOW2_32_BPB_TotSec32;
      LSB3( u32_tmp ) = LOW3_32_BPB_TotSec32;
   }
   else
   {
      LSB0( u32_tmp ) = LOW_16_BPB_TotSec16;
8000b3b4:	ee c8 00 08 	sub	r8,r7,8
8000b3b8:	f0 c9 ff fd 	sub	r9,r8,-3
8000b3bc:	fe f8 02 10 	ld.w	r8,pc[528]
8000b3c0:	f1 38 00 13 	ld.ub	r8,r8[19]
8000b3c4:	b2 88       	st.b	r9[0x0],r8
      LSB1( u32_tmp ) = HIGH_16_BPB_TotSec16;
8000b3c6:	ee c8 00 08 	sub	r8,r7,8
8000b3ca:	f0 c9 ff fe 	sub	r9,r8,-2
8000b3ce:	fe f8 01 fe 	ld.w	r8,pc[510]
8000b3d2:	f1 38 00 14 	ld.ub	r8,r8[20]
8000b3d6:	b2 88       	st.b	r9[0x0],r8
      LSB2( u32_tmp ) = 0;
8000b3d8:	ee c8 00 08 	sub	r8,r7,8
8000b3dc:	f0 c9 ff ff 	sub	r9,r8,-1
8000b3e0:	30 08       	mov	r8,0
8000b3e2:	b2 88       	st.b	r9[0x0],r8
      LSB3( u32_tmp ) = 0;
8000b3e4:	ee c9 00 08 	sub	r9,r7,8
8000b3e8:	30 08       	mov	r8,0
8000b3ea:	b2 88       	st.b	r9[0x0],r8
   }
   u32_tmp *= u8_sector_size;   // Translate from sector disk unit to sector 512B unit
8000b3ec:	ef 39 ff fe 	ld.ub	r9,r7[-2]
8000b3f0:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b3f4:	f2 08 02 48 	mul	r8,r9,r8
8000b3f8:	ef 48 ff f8 	st.w	r7[-8],r8

   // Compute the offset (unit 512B) between the end of FAT (beginning of root dir in FAT1x) and the beginning of PBR
   fs_g_nav.rootdir.seg.u16_pos = FS_NB_FAT * (uint16_t)fs_g_nav.u32_fat_size;
8000b3fc:	4e e8       	lddpc	r8,8000b5b4 <fat_mount+0x5b8>
8000b3fe:	70 18       	ld.w	r8,r8[0x4]
8000b400:	5c 88       	casts.h	r8
8000b402:	a1 78       	lsl	r8,0x1
8000b404:	5c 88       	casts.h	r8
8000b406:	4e c9       	lddpc	r9,8000b5b4 <fat_mount+0x5b8>
8000b408:	f3 58 00 18 	st.h	r9[24],r8

   // Compute the root directory size (unit sector), for FAT32 is always 0
   LSB( u16_tmp ) = LOW_16_BPB_RootEntCnt;
8000b40c:	ee c8 00 04 	sub	r8,r7,4
8000b410:	f0 c9 ff ff 	sub	r9,r8,-1
8000b414:	4e e8       	lddpc	r8,8000b5cc <fat_mount+0x5d0>
8000b416:	f1 38 00 11 	ld.ub	r8,r8[17]
8000b41a:	b2 88       	st.b	r9[0x0],r8
   MSB( u16_tmp ) = HIGH_16_BPB_RootEntCnt;
8000b41c:	ee c9 00 04 	sub	r9,r7,4
8000b420:	4e b8       	lddpc	r8,8000b5cc <fat_mount+0x5d0>
8000b422:	f1 38 00 12 	ld.ub	r8,r8[18]
8000b426:	b2 88       	st.b	r9[0x0],r8
   fs_g_nav.rootdir.seg.u16_size = ((u16_tmp * FS_SIZE_FILE_ENTRY) + ((FS_512B*u8_sector_size)-1)) / (FS_512B*u8_sector_size);
8000b428:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8000b42c:	f0 09 15 04 	lsl	r9,r8,0x4
8000b430:	ef 08 ff fc 	ld.sh	r8,r7[-4]
8000b434:	5c 78       	castu.h	r8
8000b436:	f2 08 00 08 	add	r8,r9,r8
8000b43a:	a5 78       	lsl	r8,0x5
8000b43c:	20 18       	sub	r8,1
8000b43e:	ef 39 ff fe 	ld.ub	r9,r7[-2]
8000b442:	a9 79       	lsl	r9,0x9
8000b444:	f0 09 0c 08 	divs	r8,r8,r9
8000b448:	5c 88       	casts.h	r8
8000b44a:	4d b9       	lddpc	r9,8000b5b4 <fat_mount+0x5b8>
8000b44c:	f3 58 00 1a 	st.h	r9[26],r8
   fs_g_nav.rootdir.seg.u16_size *= u8_sector_size;
8000b450:	4d 98       	lddpc	r8,8000b5b4 <fat_mount+0x5b8>
8000b452:	f1 09 00 1a 	ld.sh	r9,r8[26]
8000b456:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8000b45a:	f2 08 02 48 	mul	r8,r9,r8
8000b45e:	5c 88       	casts.h	r8
8000b460:	4d 59       	lddpc	r9,8000b5b4 <fat_mount+0x5b8>
8000b462:	f3 58 00 1a 	st.h	r9[26],r8

   // Get number of reserved sector
   LSB( u16_tmp ) = LOW_16_BPB_ResvSecCnt;
8000b466:	ee c8 00 04 	sub	r8,r7,4
8000b46a:	f0 c9 ff ff 	sub	r9,r8,-1
8000b46e:	4d 88       	lddpc	r8,8000b5cc <fat_mount+0x5d0>
8000b470:	f1 38 00 0e 	ld.ub	r8,r8[14]
8000b474:	b2 88       	st.b	r9[0x0],r8
   MSB( u16_tmp ) = HIGH_16_BPB_ResvSecCnt;
8000b476:	ee c9 00 04 	sub	r9,r7,4
8000b47a:	4d 58       	lddpc	r8,8000b5cc <fat_mount+0x5d0>
8000b47c:	f1 38 00 0f 	ld.ub	r8,r8[15]
8000b480:	b2 88       	st.b	r9[0x0],r8
   // Get FSInfo position
   fs_g_nav.u16_offset_FSInfo = (u16_tmp-LOW_16_BPB_FSInfo)*u8_sector_size;
8000b482:	ef 08 ff fc 	ld.sh	r8,r7[-4]
8000b486:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
8000b48a:	4d 18       	lddpc	r8,8000b5cc <fat_mount+0x5d0>
8000b48c:	f1 38 00 30 	ld.ub	r8,r8[48]
8000b490:	f2 08 01 08 	sub	r8,r9,r8
8000b494:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
8000b498:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8000b49c:	f2 08 02 48 	mul	r8,r9,r8
8000b4a0:	5c 88       	casts.h	r8
8000b4a2:	4c 59       	lddpc	r9,8000b5b4 <fat_mount+0x5b8>
8000b4a4:	b2 48       	st.h	r9[0x8],r8
   u16_tmp *= u8_sector_size; // number of reserved sector translated in unit 512B
8000b4a6:	ef 39 ff fe 	ld.ub	r9,r7[-2]
8000b4aa:	ef 08 ff fc 	ld.sh	r8,r7[-4]
8000b4ae:	f2 08 02 48 	mul	r8,r9,r8
8000b4b2:	5c 88       	casts.h	r8
8000b4b4:	ef 58 ff fc 	st.h	r7[-4],r8

   // Compute the FAT address (unit 512B)
   fs_g_nav.u32_ptr_fat = fs_gu32_addrsector + u16_tmp;
8000b4b8:	ef 08 ff fc 	ld.sh	r8,r7[-4]
8000b4bc:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
8000b4c0:	4c 08       	lddpc	r8,8000b5c0 <fat_mount+0x5c4>
8000b4c2:	70 08       	ld.w	r8,r8[0x0]
8000b4c4:	10 09       	add	r9,r8
8000b4c6:	4b c8       	lddpc	r8,8000b5b4 <fat_mount+0x5b8>
8000b4c8:	91 49       	st.w	r8[0x10],r9

   // Compute the offset (unit 512B) between the first data cluster and the FAT beginning
   fs_g_nav.u32_offset_data = (FS_NB_FAT * fs_g_nav.u32_fat_size) + (uint32_t)fs_g_nav.rootdir.seg.u16_size;
8000b4ca:	4b b8       	lddpc	r8,8000b5b4 <fat_mount+0x5b8>
8000b4cc:	70 18       	ld.w	r8,r8[0x4]
8000b4ce:	f0 09 15 01 	lsl	r9,r8,0x1
8000b4d2:	4b 98       	lddpc	r8,8000b5b4 <fat_mount+0x5b8>
8000b4d4:	f1 08 00 1a 	ld.sh	r8,r8[26]
8000b4d8:	5c 78       	castu.h	r8
8000b4da:	10 09       	add	r9,r8
8000b4dc:	4b 68       	lddpc	r8,8000b5b4 <fat_mount+0x5b8>
8000b4de:	91 59       	st.w	r8[0x14],r9

   // Compute the data region (clusters space = Total - Sector used) size (unit 512B)
   u32_tmp -= ((uint32_t)u16_tmp + fs_g_nav.u32_offset_data);
8000b4e0:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000b4e4:	ef 08 ff fc 	ld.sh	r8,r7[-4]
8000b4e8:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
8000b4ec:	4b 28       	lddpc	r8,8000b5b4 <fat_mount+0x5b8>
8000b4ee:	70 58       	ld.w	r8,r8[0x14]
8000b4f0:	f4 08 00 08 	add	r8,r10,r8
8000b4f4:	f2 08 01 08 	sub	r8,r9,r8
8000b4f8:	ef 48 ff f8 	st.w	r7[-8],r8

   // Compute the count of CLUSTER in the data region
   // !!!Optimization -> u32_CountofCluster (unit 512B)/ fs_g_nav.u8_BPB_SecPerClus (unit 512B & power of 2)
   if (!fs_g_nav.u8_BPB_SecPerClus)
8000b4fc:	4a e8       	lddpc	r8,8000b5b4 <fat_mount+0x5b8>
8000b4fe:	11 98       	ld.ub	r8,r8[0x1]
8000b500:	58 08       	cp.w	r8,0
8000b502:	c0 31       	brne	8000b508 <fat_mount+0x50c>
     return false;
8000b504:	30 08       	mov	r8,0
8000b506:	c5 38       	rjmp	8000b5ac <fat_mount+0x5b0>
   for( u8_tmp = fs_g_nav.u8_BPB_SecPerClus; u8_tmp!=1 ; u8_tmp >>= 1 )
8000b508:	4a b8       	lddpc	r8,8000b5b4 <fat_mount+0x5b8>
8000b50a:	11 98       	ld.ub	r8,r8[0x1]
8000b50c:	ef 68 ff ff 	st.b	r7[-1],r8
8000b510:	c0 b8       	rjmp	8000b526 <fat_mount+0x52a>
   {
     u32_tmp  >>= 1;   // This computation round down
8000b512:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b516:	a1 98       	lsr	r8,0x1
8000b518:	ef 48 ff f8 	st.w	r7[-8],r8

   // Compute the count of CLUSTER in the data region
   // !!!Optimization -> u32_CountofCluster (unit 512B)/ fs_g_nav.u8_BPB_SecPerClus (unit 512B & power of 2)
   if (!fs_g_nav.u8_BPB_SecPerClus)
     return false;
   for( u8_tmp = fs_g_nav.u8_BPB_SecPerClus; u8_tmp!=1 ; u8_tmp >>= 1 )
8000b51c:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000b520:	a1 98       	lsr	r8,0x1
8000b522:	ef 68 ff ff 	st.b	r7[-1],r8
8000b526:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000b52a:	30 18       	mov	r8,1
8000b52c:	f0 09 18 00 	cp.b	r9,r8
8000b530:	cf 11       	brne	8000b512 <fat_mount+0x516>
   {
     u32_tmp  >>= 1;   // This computation round down
   }
   fs_g_nav.u32_CountofCluster = u32_tmp+2; // The total of cluster include the two reserved clusters
8000b532:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b536:	f0 c9 ff fe 	sub	r9,r8,-2
8000b53a:	49 f8       	lddpc	r8,8000b5b4 <fat_mount+0x5b8>
8000b53c:	91 39       	st.w	r8[0xc],r9

   // Determine the FAT type
   if (u32_tmp < FS_FAT12_MAX_CLUSTERS)
8000b53e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b542:	e0 48 0f f4 	cp.w	r8,4084
8000b546:	e0 8b 00 06 	brhi	8000b552 <fat_mount+0x556>
   {
      // Is FAT 12
#if (FS_FAT_12 == false)
      return false;
#endif
      fs_g_nav_fast.u8_type_fat = FS_TYPE_FAT_12;
8000b54a:	49 d9       	lddpc	r9,8000b5bc <fat_mount+0x5c0>
8000b54c:	30 18       	mov	r8,1
8000b54e:	b2 88       	st.b	r9[0x0],r8
8000b550:	c2 d8       	rjmp	8000b5aa <fat_mount+0x5ae>
   } else {
   if (u32_tmp < FS_FAT16_MAX_CLUSTERS)
8000b552:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b556:	e0 48 ff f4 	cp.w	r8,65524
8000b55a:	e0 8b 00 06 	brhi	8000b566 <fat_mount+0x56a>
   {
      // Is FAT 16
#if (FS_FAT_16 == false)
      return FS_NO_SUPPORT_PART;
#endif
      fs_g_nav_fast.u8_type_fat = FS_TYPE_FAT_16;
8000b55e:	49 89       	lddpc	r9,8000b5bc <fat_mount+0x5c0>
8000b560:	30 28       	mov	r8,2
8000b562:	b2 88       	st.b	r9[0x0],r8
8000b564:	c2 38       	rjmp	8000b5aa <fat_mount+0x5ae>
   } else {
      // Is FAT 32
#if (FS_FAT_32 == false)
      return false;
#endif
      fs_g_nav_fast.u8_type_fat = FS_TYPE_FAT_32;
8000b566:	49 69       	lddpc	r9,8000b5bc <fat_mount+0x5c0>
8000b568:	30 38       	mov	r8,3
8000b56a:	b2 88       	st.b	r9[0x0],r8
      // In FAT32, the root dir is like another directory, this one have a cluster list
      // Get the first cluster number of root
      LSB0( fs_g_nav.rootdir.u32_cluster ) = LOW0_32_BPB_RootClus;
8000b56c:	49 28       	lddpc	r8,8000b5b4 <fat_mount+0x5b8>
8000b56e:	2e 88       	sub	r8,-24
8000b570:	f0 c9 ff fd 	sub	r9,r8,-3
8000b574:	49 68       	lddpc	r8,8000b5cc <fat_mount+0x5d0>
8000b576:	f1 38 00 2c 	ld.ub	r8,r8[44]
8000b57a:	b2 88       	st.b	r9[0x0],r8
      LSB1( fs_g_nav.rootdir.u32_cluster ) = LOW1_32_BPB_RootClus;
8000b57c:	48 e8       	lddpc	r8,8000b5b4 <fat_mount+0x5b8>
8000b57e:	2e 88       	sub	r8,-24
8000b580:	f0 c9 ff fe 	sub	r9,r8,-2
8000b584:	49 28       	lddpc	r8,8000b5cc <fat_mount+0x5d0>
8000b586:	f1 38 00 2d 	ld.ub	r8,r8[45]
8000b58a:	b2 88       	st.b	r9[0x0],r8
      LSB2( fs_g_nav.rootdir.u32_cluster ) = LOW2_32_BPB_RootClus;
8000b58c:	48 a8       	lddpc	r8,8000b5b4 <fat_mount+0x5b8>
8000b58e:	2e 88       	sub	r8,-24
8000b590:	f0 c9 ff ff 	sub	r9,r8,-1
8000b594:	48 e8       	lddpc	r8,8000b5cc <fat_mount+0x5d0>
8000b596:	f1 38 00 2e 	ld.ub	r8,r8[46]
8000b59a:	b2 88       	st.b	r9[0x0],r8
      LSB3( fs_g_nav.rootdir.u32_cluster ) = LOW3_32_BPB_RootClus;
8000b59c:	48 68       	lddpc	r8,8000b5b4 <fat_mount+0x5b8>
8000b59e:	f0 c9 ff e8 	sub	r9,r8,-24
8000b5a2:	48 b8       	lddpc	r8,8000b5cc <fat_mount+0x5d0>
8000b5a4:	f1 38 00 2f 	ld.ub	r8,r8[47]
8000b5a8:	b2 88       	st.b	r9[0x0],r8
   }
   }

   return true;
8000b5aa:	30 18       	mov	r8,1
}
8000b5ac:	10 9c       	mov	r12,r8
8000b5ae:	2f ed       	sub	sp,-8
8000b5b0:	e3 cd 80 80 	ldm	sp++,r7,pc
8000b5b4:	00 00       	add	r0,r0
8000b5b6:	0d 88       	ld.ub	r8,r6[0x0]
8000b5b8:	80 00       	ld.sh	r0,r0[0x0]
8000b5ba:	a4 c0       	st.b	r2[0x4],r0
8000b5bc:	00 00       	add	r0,r0
8000b5be:	0d d4       	ld.ub	r4,r6[0x5]
8000b5c0:	00 00       	add	r0,r0
8000b5c2:	0b 44       	ld.w	r4,--r5
8000b5c4:	80 00       	ld.sh	r0,r0[0x0]
8000b5c6:	8c 18       	ld.sh	r8,r6[0x2]
8000b5c8:	80 00       	ld.sh	r0,r0[0x0]
8000b5ca:	aa c8       	st.b	r5[0x4],r8
8000b5cc:	00 00       	add	r0,r0
8000b5ce:	0b 88       	ld.ub	r8,r5[0x0]
8000b5d0:	00 00       	add	r0,r0
8000b5d2:	0d d8       	ld.ub	r8,r6[0x5]
8000b5d4:	80 00       	ld.sh	r0,r0[0x0]
8000b5d6:	ae b0       	st.b	r7[0x3],r0

8000b5d8 <fat_write_fat32_FSInfo>:
//!
//! @return    false in case of error, see global value "fs_g_status" for more detail
//! @return    true otherwise
//!
bool  fat_write_fat32_FSInfo( uint32_t u32_nb_free_cluster )
{
8000b5d8:	eb cd 40 80 	pushm	r7,lr
8000b5dc:	1a 97       	mov	r7,sp
8000b5de:	20 1d       	sub	sp,4
8000b5e0:	ef 4c ff fc 	st.w	r7[-4],r12
   // Init sector
   fs_gu32_addrsector = fs_g_nav.u32_ptr_fat - fs_g_nav.u16_offset_FSInfo;
8000b5e4:	4a a8       	lddpc	r8,8000b68c <fat_write_fat32_FSInfo+0xb4>
8000b5e6:	70 49       	ld.w	r9,r8[0x10]
8000b5e8:	4a 98       	lddpc	r8,8000b68c <fat_write_fat32_FSInfo+0xb4>
8000b5ea:	90 48       	ld.sh	r8,r8[0x8]
8000b5ec:	5c 78       	castu.h	r8
8000b5ee:	10 19       	sub	r9,r8
8000b5f0:	4a 88       	lddpc	r8,8000b690 <fat_write_fat32_FSInfo+0xb8>
8000b5f2:	91 09       	st.w	r8[0x0],r9

   if( !fat_cache_read_sector( false ))
8000b5f4:	30 0c       	mov	r12,0
8000b5f6:	f0 1f 00 28 	mcall	8000b694 <fat_write_fat32_FSInfo+0xbc>
8000b5fa:	18 98       	mov	r8,r12
8000b5fc:	ec 18 00 01 	eorl	r8,0x1
8000b600:	5c 58       	castu.b	r8
8000b602:	c0 30       	breq	8000b608 <fat_write_fat32_FSInfo+0x30>
      return false;
8000b604:	30 08       	mov	r8,0
8000b606:	c3 f8       	rjmp	8000b684 <fat_write_fat32_FSInfo+0xac>
   fat_cache_mark_sector_as_dirty();
8000b608:	f0 1f 00 24 	mcall	8000b698 <fat_write_fat32_FSInfo+0xc0>
   fat_cache_clear();
8000b60c:	f0 1f 00 24 	mcall	8000b69c <fat_write_fat32_FSInfo+0xc4>

   // Fill sector
   // offset 00-04, This lead signature
   memcpy_code2ram( &fs_g_sector[0], const_FSI_LeadSig, sizeof(const_FSI_LeadSig) );
8000b610:	30 4a       	mov	r10,4
8000b612:	4a 4b       	lddpc	r11,8000b6a0 <fat_write_fat32_FSInfo+0xc8>
8000b614:	4a 4c       	lddpc	r12,8000b6a4 <fat_write_fat32_FSInfo+0xcc>
8000b616:	f0 1f 00 25 	mcall	8000b6a8 <fat_write_fat32_FSInfo+0xd0>
   // offset 004-483, reserved (fill with 0)
   // offset 484-487, signature
   memcpy_code2ram( &fs_g_sector[484], const_FSI_StrucSig, sizeof(const_FSI_StrucSig) );
8000b61a:	4a 38       	lddpc	r8,8000b6a4 <fat_write_fat32_FSInfo+0xcc>
8000b61c:	f0 c8 fe 1c 	sub	r8,r8,-484
8000b620:	30 4a       	mov	r10,4
8000b622:	4a 3b       	lddpc	r11,8000b6ac <fat_write_fat32_FSInfo+0xd4>
8000b624:	10 9c       	mov	r12,r8
8000b626:	f0 1f 00 21 	mcall	8000b6a8 <fat_write_fat32_FSInfo+0xd0>
   // offset 488-491, free cluster count (by default NO value)
   fs_g_sector[488] = LSB0(u32_nb_free_cluster);
8000b62a:	ee c8 00 04 	sub	r8,r7,4
8000b62e:	2f d8       	sub	r8,-3
8000b630:	11 88       	ld.ub	r8,r8[0x0]
8000b632:	49 d9       	lddpc	r9,8000b6a4 <fat_write_fat32_FSInfo+0xcc>
8000b634:	f3 68 01 e8 	st.b	r9[488],r8
   fs_g_sector[489] = LSB1(u32_nb_free_cluster);
8000b638:	ee c8 00 04 	sub	r8,r7,4
8000b63c:	2f e8       	sub	r8,-2
8000b63e:	11 88       	ld.ub	r8,r8[0x0]
8000b640:	49 99       	lddpc	r9,8000b6a4 <fat_write_fat32_FSInfo+0xcc>
8000b642:	f3 68 01 e9 	st.b	r9[489],r8
   fs_g_sector[490] = LSB2(u32_nb_free_cluster);
8000b646:	ee c8 00 04 	sub	r8,r7,4
8000b64a:	2f f8       	sub	r8,-1
8000b64c:	11 88       	ld.ub	r8,r8[0x0]
8000b64e:	49 69       	lddpc	r9,8000b6a4 <fat_write_fat32_FSInfo+0xcc>
8000b650:	f3 68 01 ea 	st.b	r9[490],r8
   fs_g_sector[491] = LSB3(u32_nb_free_cluster);
8000b654:	ee c8 00 04 	sub	r8,r7,4
8000b658:	11 88       	ld.ub	r8,r8[0x0]
8000b65a:	49 39       	lddpc	r9,8000b6a4 <fat_write_fat32_FSInfo+0xcc>
8000b65c:	f3 68 01 eb 	st.b	r9[491],r8
   // offset 492-495, indicates the cluster number at which the driver should start looking for free clusters (by default NO value)
   memset( &fs_g_sector[492] , 0xFF , 4 );
8000b660:	49 18       	lddpc	r8,8000b6a4 <fat_write_fat32_FSInfo+0xcc>
8000b662:	f0 c8 fe 14 	sub	r8,r8,-492
8000b666:	30 4a       	mov	r10,4
8000b668:	e0 6b 00 ff 	mov	r11,255
8000b66c:	10 9c       	mov	r12,r8
8000b66e:	f0 1f 00 11 	mcall	8000b6b0 <fat_write_fat32_FSInfo+0xd8>
   // offset 496-509, reserved (fill with 0)
   // offset 510-511, Signature
   fs_g_sector[510] = FS_BR_SIGNATURE_LOW;
8000b672:	48 d9       	lddpc	r9,8000b6a4 <fat_write_fat32_FSInfo+0xcc>
8000b674:	35 58       	mov	r8,85
8000b676:	f3 68 01 fe 	st.b	r9[510],r8
   fs_g_sector[511] = FS_BR_SIGNATURE_HIGH;
8000b67a:	48 b9       	lddpc	r9,8000b6a4 <fat_write_fat32_FSInfo+0xcc>
8000b67c:	3a a8       	mov	r8,-86
8000b67e:	f3 68 01 ff 	st.b	r9[511],r8
   return true;
8000b682:	30 18       	mov	r8,1
}
8000b684:	10 9c       	mov	r12,r8
8000b686:	2f fd       	sub	sp,-4
8000b688:	e3 cd 80 80 	ldm	sp++,r7,pc
8000b68c:	00 00       	add	r0,r0
8000b68e:	0d 88       	ld.ub	r8,r6[0x0]
8000b690:	00 00       	add	r0,r0
8000b692:	0b 44       	ld.w	r4,--r5
8000b694:	80 00       	ld.sh	r0,r0[0x0]
8000b696:	aa c8       	st.b	r5[0x4],r8
8000b698:	80 00       	ld.sh	r0,r0[0x0]
8000b69a:	ab b8       	sbr	r8,0xb
8000b69c:	80 00       	ld.sh	r0,r0[0x0]
8000b69e:	ab 98       	lsr	r8,0xb
8000b6a0:	80 01       	ld.sh	r1,r0[0x0]
8000b6a2:	4e 20       	lddpc	r0,8000b828 <fat_create_entry_file_name+0x48>
8000b6a4:	00 00       	add	r0,r0
8000b6a6:	0b 88       	ld.ub	r8,r5[0x0]
8000b6a8:	80 00       	ld.sh	r0,r0[0x0]
8000b6aa:	f4 3a 80 01 	sub	r10,-688127
8000b6ae:	4e 24       	lddpc	r4,8000b834 <fat_create_entry_file_name+0x54>
8000b6b0:	80 00       	ld.sh	r0,r0[0x0]
8000b6b2:	f5 82       	*unknown*

8000b6b4 <fat_initialize_dir>:
//! OUT:
//!   update the sector cache with init directory data
//! @endverbatim
//!
bool  fat_initialize_dir( void )
{
8000b6b4:	eb cd 40 80 	pushm	r7,lr
8000b6b8:	1a 97       	mov	r7,sp
8000b6ba:	20 1d       	sub	sp,4
   uint8_t u8_i;

   // Clear the cluster corresponding at directory
   if( !fat_clear_cluster())
8000b6bc:	f0 1f 00 44 	mcall	8000b7cc <fat_initialize_dir+0x118>
8000b6c0:	18 98       	mov	r8,r12
8000b6c2:	ec 18 00 01 	eorl	r8,0x1
8000b6c6:	5c 58       	castu.b	r8
8000b6c8:	c0 30       	breq	8000b6ce <fat_initialize_dir+0x1a>
      return false;
8000b6ca:	30 08       	mov	r8,0
8000b6cc:	c7 b8       	rjmp	8000b7c2 <fat_initialize_dir+0x10e>
   fat_cache_mark_sector_as_dirty();
8000b6ce:	f0 1f 00 41 	mcall	8000b7d0 <fat_initialize_dir+0x11c>
   // here, the internal cache is the first sector of the cluster

   // Create the dot "." entry, this one is a directory that points to itself
   fs_g_sector[0]='.';
8000b6d2:	4c 19       	lddpc	r9,8000b7d4 <fat_initialize_dir+0x120>
8000b6d4:	32 e8       	mov	r8,46
8000b6d6:	b2 88       	st.b	r9[0x0],r8
   for( u8_i=1 ; u8_i<11 ; u8_i++ )
8000b6d8:	30 18       	mov	r8,1
8000b6da:	ef 68 ff ff 	st.b	r7[-1],r8
8000b6de:	c0 c8       	rjmp	8000b6f6 <fat_initialize_dir+0x42>
      fs_g_sector[u8_i]=' ';
8000b6e0:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000b6e4:	4b ca       	lddpc	r10,8000b7d4 <fat_initialize_dir+0x120>
8000b6e6:	32 08       	mov	r8,32
8000b6e8:	f4 09 0b 08 	st.b	r10[r9],r8
   fat_cache_mark_sector_as_dirty();
   // here, the internal cache is the first sector of the cluster

   // Create the dot "." entry, this one is a directory that points to itself
   fs_g_sector[0]='.';
   for( u8_i=1 ; u8_i<11 ; u8_i++ )
8000b6ec:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000b6f0:	2f f8       	sub	r8,-1
8000b6f2:	ef 68 ff ff 	st.b	r7[-1],r8
8000b6f6:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000b6fa:	30 a8       	mov	r8,10
8000b6fc:	f0 09 18 00 	cp.b	r9,r8
8000b700:	fe 98 ff f0 	brls	8000b6e0 <fat_initialize_dir+0x2c>
      fs_g_sector[u8_i]=' ';
   fs_g_sector[11]=FS_ATTR_DIRECTORY;
8000b704:	4b 49       	lddpc	r9,8000b7d4 <fat_initialize_dir+0x120>
8000b706:	31 08       	mov	r8,16
8000b708:	f3 68 00 0b 	st.b	r9[11],r8
   fs_g_sector[26]= LSB0( fs_g_nav_entry.u32_cluster );
8000b70c:	4b 38       	lddpc	r8,8000b7d8 <fat_initialize_dir+0x124>
8000b70e:	2f c8       	sub	r8,-4
8000b710:	2f d8       	sub	r8,-3
8000b712:	11 88       	ld.ub	r8,r8[0x0]
8000b714:	4b 09       	lddpc	r9,8000b7d4 <fat_initialize_dir+0x120>
8000b716:	f3 68 00 1a 	st.b	r9[26],r8
   fs_g_sector[27]= LSB1( fs_g_nav_entry.u32_cluster );
8000b71a:	4b 08       	lddpc	r8,8000b7d8 <fat_initialize_dir+0x124>
8000b71c:	2f c8       	sub	r8,-4
8000b71e:	2f e8       	sub	r8,-2
8000b720:	11 88       	ld.ub	r8,r8[0x0]
8000b722:	4a d9       	lddpc	r9,8000b7d4 <fat_initialize_dir+0x120>
8000b724:	f3 68 00 1b 	st.b	r9[27],r8
   fs_g_sector[20]= LSB2( fs_g_nav_entry.u32_cluster );
8000b728:	4a c8       	lddpc	r8,8000b7d8 <fat_initialize_dir+0x124>
8000b72a:	2f c8       	sub	r8,-4
8000b72c:	2f f8       	sub	r8,-1
8000b72e:	11 88       	ld.ub	r8,r8[0x0]
8000b730:	4a 99       	lddpc	r9,8000b7d4 <fat_initialize_dir+0x120>
8000b732:	f3 68 00 14 	st.b	r9[20],r8
   fs_g_sector[21]= LSB3( fs_g_nav_entry.u32_cluster );
8000b736:	4a 98       	lddpc	r8,8000b7d8 <fat_initialize_dir+0x124>
8000b738:	2f c8       	sub	r8,-4
8000b73a:	11 88       	ld.ub	r8,r8[0x0]
8000b73c:	4a 69       	lddpc	r9,8000b7d4 <fat_initialize_dir+0x120>
8000b73e:	f3 68 00 15 	st.b	r9[21],r8
   // Create the dotdot ".." entry, this one points to the starting cluster of the parent directory
   fs_g_sector[FS_SIZE_FILE_ENTRY+0]='.';
8000b742:	4a 59       	lddpc	r9,8000b7d4 <fat_initialize_dir+0x120>
8000b744:	32 e8       	mov	r8,46
8000b746:	f3 68 00 20 	st.b	r9[32],r8
   fs_g_sector[FS_SIZE_FILE_ENTRY+1]='.';
8000b74a:	4a 39       	lddpc	r9,8000b7d4 <fat_initialize_dir+0x120>
8000b74c:	32 e8       	mov	r8,46
8000b74e:	f3 68 00 21 	st.b	r9[33],r8
   for( u8_i=2 ; u8_i<11 ; u8_i++ )
8000b752:	30 28       	mov	r8,2
8000b754:	ef 68 ff ff 	st.b	r7[-1],r8
8000b758:	c0 e8       	rjmp	8000b774 <fat_initialize_dir+0xc0>
      fs_g_sector[FS_SIZE_FILE_ENTRY+u8_i]=' ';
8000b75a:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000b75e:	f0 c9 ff e0 	sub	r9,r8,-32
8000b762:	49 da       	lddpc	r10,8000b7d4 <fat_initialize_dir+0x120>
8000b764:	32 08       	mov	r8,32
8000b766:	f4 09 0b 08 	st.b	r10[r9],r8
   fs_g_sector[20]= LSB2( fs_g_nav_entry.u32_cluster );
   fs_g_sector[21]= LSB3( fs_g_nav_entry.u32_cluster );
   // Create the dotdot ".." entry, this one points to the starting cluster of the parent directory
   fs_g_sector[FS_SIZE_FILE_ENTRY+0]='.';
   fs_g_sector[FS_SIZE_FILE_ENTRY+1]='.';
   for( u8_i=2 ; u8_i<11 ; u8_i++ )
8000b76a:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000b76e:	2f f8       	sub	r8,-1
8000b770:	ef 68 ff ff 	st.b	r7[-1],r8
8000b774:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000b778:	30 a8       	mov	r8,10
8000b77a:	f0 09 18 00 	cp.b	r9,r8
8000b77e:	fe 98 ff ee 	brls	8000b75a <fat_initialize_dir+0xa6>
      fs_g_sector[FS_SIZE_FILE_ENTRY+u8_i]=' ';
   fs_g_sector[FS_SIZE_FILE_ENTRY+11]=FS_ATTR_DIRECTORY;
8000b782:	49 59       	lddpc	r9,8000b7d4 <fat_initialize_dir+0x120>
8000b784:	31 08       	mov	r8,16
8000b786:	f3 68 00 2b 	st.b	r9[43],r8
   fs_g_sector[FS_SIZE_FILE_ENTRY+26]= LSB0( fs_g_nav.u32_cluster_sel_dir );
8000b78a:	49 58       	lddpc	r8,8000b7dc <fat_initialize_dir+0x128>
8000b78c:	2e 08       	sub	r8,-32
8000b78e:	2f d8       	sub	r8,-3
8000b790:	11 88       	ld.ub	r8,r8[0x0]
8000b792:	49 19       	lddpc	r9,8000b7d4 <fat_initialize_dir+0x120>
8000b794:	f3 68 00 3a 	st.b	r9[58],r8
   fs_g_sector[FS_SIZE_FILE_ENTRY+27]= LSB1( fs_g_nav.u32_cluster_sel_dir );
8000b798:	49 18       	lddpc	r8,8000b7dc <fat_initialize_dir+0x128>
8000b79a:	2e 08       	sub	r8,-32
8000b79c:	2f e8       	sub	r8,-2
8000b79e:	11 88       	ld.ub	r8,r8[0x0]
8000b7a0:	48 d9       	lddpc	r9,8000b7d4 <fat_initialize_dir+0x120>
8000b7a2:	f3 68 00 3b 	st.b	r9[59],r8
   fs_g_sector[FS_SIZE_FILE_ENTRY+20]= LSB2( fs_g_nav.u32_cluster_sel_dir );
8000b7a6:	48 e8       	lddpc	r8,8000b7dc <fat_initialize_dir+0x128>
8000b7a8:	2e 08       	sub	r8,-32
8000b7aa:	2f f8       	sub	r8,-1
8000b7ac:	11 88       	ld.ub	r8,r8[0x0]
8000b7ae:	48 a9       	lddpc	r9,8000b7d4 <fat_initialize_dir+0x120>
8000b7b0:	f3 68 00 34 	st.b	r9[52],r8
   fs_g_sector[FS_SIZE_FILE_ENTRY+21]= LSB3( fs_g_nav.u32_cluster_sel_dir );
8000b7b4:	48 a8       	lddpc	r8,8000b7dc <fat_initialize_dir+0x128>
8000b7b6:	2e 08       	sub	r8,-32
8000b7b8:	11 88       	ld.ub	r8,r8[0x0]
8000b7ba:	48 79       	lddpc	r9,8000b7d4 <fat_initialize_dir+0x120>
8000b7bc:	f3 68 00 35 	st.b	r9[53],r8

   return true;
8000b7c0:	30 18       	mov	r8,1
}
8000b7c2:	10 9c       	mov	r12,r8
8000b7c4:	2f fd       	sub	sp,-4
8000b7c6:	e3 cd 80 80 	ldm	sp++,r7,pc
8000b7ca:	00 00       	add	r0,r0
8000b7cc:	80 00       	ld.sh	r0,r0[0x0]
8000b7ce:	c6 74       	brge	8000b89c <fat_create_entry_file_name+0xbc>
8000b7d0:	80 00       	ld.sh	r0,r0[0x0]
8000b7d2:	ab b8       	sbr	r8,0xb
8000b7d4:	00 00       	add	r0,r0
8000b7d6:	0b 88       	ld.ub	r8,r5[0x0]
8000b7d8:	00 00       	add	r0,r0
8000b7da:	0b 48       	ld.w	r8,--r5
8000b7dc:	00 00       	add	r0,r0
8000b7de:	0d 88       	ld.ub	r8,r6[0x0]

8000b7e0 <fat_create_entry_file_name>:
//! b_unicode is a global flag to select UNICODE or ASCII
//! The name must be terminated by NULL and it can't have two dot characters.
//! @endverbatim
//!
bool  fat_create_entry_file_name( FS_STRING sz_name )
{
8000b7e0:	eb cd 40 80 	pushm	r7,lr
8000b7e4:	1a 97       	mov	r7,sp
8000b7e6:	20 2d       	sub	sp,8
8000b7e8:	ef 4c ff f8 	st.w	r7[-8],r12
   uint8_t u8_i, u8_nb;
   uint8_t u8_crc, u8_nb_entry;

   // Compute the number of entry for this name
   u8_nb_entry = fat_check_name( sz_name  );
8000b7ec:	ee fc ff f8 	ld.w	r12,r7[-8]
8000b7f0:	f0 1f 00 43 	mcall	8000b8fc <fat_create_entry_file_name+0x11c>
8000b7f4:	18 98       	mov	r8,r12
8000b7f6:	ef 68 ff ff 	st.b	r7[-1],r8
   if( 0 == u8_nb_entry )
8000b7fa:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000b7fe:	30 08       	mov	r8,0
8000b800:	f0 09 18 00 	cp.b	r9,r8
8000b804:	c0 31       	brne	8000b80a <fat_create_entry_file_name+0x2a>
      return false;
8000b806:	30 08       	mov	r8,0
8000b808:	c7 58       	rjmp	8000b8f2 <fat_create_entry_file_name+0x112>

   // Search a unique short entry
   u8_nb = fat_find_short_entry_name( sz_name  );
8000b80a:	ee fc ff f8 	ld.w	r12,r7[-8]
8000b80e:	f0 1f 00 3d 	mcall	8000b900 <fat_create_entry_file_name+0x120>
8000b812:	18 98       	mov	r8,r12
8000b814:	ef 68 ff fd 	st.b	r7[-3],r8
   if( 0 == u8_nb )
8000b818:	ef 39 ff fd 	ld.ub	r9,r7[-3]
8000b81c:	30 08       	mov	r8,0
8000b81e:	f0 09 18 00 	cp.b	r9,r8
8000b822:	c0 61       	brne	8000b82e <fat_create_entry_file_name+0x4e>
   {
      fs_g_status = FS_ERR_FILE_EXIST;
8000b824:	4b 89       	lddpc	r9,8000b904 <fat_create_entry_file_name+0x124>
8000b826:	32 a8       	mov	r8,42
8000b828:	b2 88       	st.b	r9[0x0],r8
      return false;  // All short name exist
8000b82a:	30 08       	mov	r8,0
8000b82c:	c6 38       	rjmp	8000b8f2 <fat_create_entry_file_name+0x112>
   }

   // Alloc a space for entries
   if( !fat_alloc_entry_free( u8_nb_entry ))
8000b82e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000b832:	10 9c       	mov	r12,r8
8000b834:	f0 1f 00 35 	mcall	8000b908 <fat_create_entry_file_name+0x128>
8000b838:	18 98       	mov	r8,r12
8000b83a:	ec 18 00 01 	eorl	r8,0x1
8000b83e:	5c 58       	castu.b	r8
8000b840:	c0 30       	breq	8000b846 <fat_create_entry_file_name+0x66>
      return false;
8000b842:	30 08       	mov	r8,0
8000b844:	c5 78       	rjmp	8000b8f2 <fat_create_entry_file_name+0x112>
   // Remark: here the pointer of entry is on the last free entry of new space allocated

   // Add short name entry
   u8_crc = fat_create_short_entry_name( sz_name , 0 , u8_nb, false  );
8000b846:	ef 38 ff fd 	ld.ub	r8,r7[-3]
8000b84a:	30 09       	mov	r9,0
8000b84c:	10 9a       	mov	r10,r8
8000b84e:	30 0b       	mov	r11,0
8000b850:	ee fc ff f8 	ld.w	r12,r7[-8]
8000b854:	f0 1f 00 2e 	mcall	8000b90c <fat_create_entry_file_name+0x12c>
8000b858:	18 98       	mov	r8,r12
8000b85a:	ef 68 ff fe 	st.b	r7[-2],r8
   u8_nb_entry--;
8000b85e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000b862:	20 18       	sub	r8,1
8000b864:	ef 68 ff ff 	st.b	r7[-1],r8

   // For each long name entry
   for( u8_i=1 ; u8_i<=u8_nb_entry ; u8_i++ )
8000b868:	30 18       	mov	r8,1
8000b86a:	ef 68 ff fc 	st.b	r7[-4],r8
8000b86e:	c3 08       	rjmp	8000b8ce <fat_create_entry_file_name+0xee>
   {
      // Go to previous entry
      fs_g_nav_fast.u16_entry_pos_sel_file--;
8000b870:	4a 88       	lddpc	r8,8000b910 <fat_create_entry_file_name+0x130>
8000b872:	90 18       	ld.sh	r8,r8[0x2]
8000b874:	20 18       	sub	r8,1
8000b876:	5c 88       	casts.h	r8
8000b878:	4a 69       	lddpc	r9,8000b910 <fat_create_entry_file_name+0x130>
8000b87a:	b2 18       	st.h	r9[0x2],r8
      if( !fat_read_dir())
8000b87c:	f0 1f 00 26 	mcall	8000b914 <fat_create_entry_file_name+0x134>
8000b880:	18 98       	mov	r8,r12
8000b882:	ec 18 00 01 	eorl	r8,0x1
8000b886:	5c 58       	castu.b	r8
8000b888:	c0 30       	breq	8000b88e <fat_create_entry_file_name+0xae>
         return false;
8000b88a:	30 08       	mov	r8,0
8000b88c:	c3 38       	rjmp	8000b8f2 <fat_create_entry_file_name+0x112>
      // Write a long name entry
      if( u8_i == u8_nb_entry )
8000b88e:	ef 39 ff fc 	ld.ub	r9,r7[-4]
8000b892:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000b896:	f0 09 18 00 	cp.b	r9,r8
8000b89a:	c0 61       	brne	8000b8a6 <fat_create_entry_file_name+0xc6>
      {
         u8_i += FS_ENTRY_LFN_LAST;
8000b89c:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000b8a0:	2c 08       	sub	r8,-64
8000b8a2:	ef 68 ff fc 	st.b	r7[-4],r8
      }
      fat_create_long_name_entry( sz_name , u8_crc , u8_i );
8000b8a6:	ef 39 ff fc 	ld.ub	r9,r7[-4]
8000b8aa:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8000b8ae:	12 9a       	mov	r10,r9
8000b8b0:	10 9b       	mov	r11,r8
8000b8b2:	ee fc ff f8 	ld.w	r12,r7[-8]
8000b8b6:	f0 1f 00 19 	mcall	8000b918 <fat_create_entry_file_name+0x138>
      sz_name += FS_SIZE_LFN_ENTRY*(Is_unicode? 2 : 1 );
8000b8ba:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b8be:	2f 38       	sub	r8,-13
8000b8c0:	ef 48 ff f8 	st.w	r7[-8],r8
   // Add short name entry
   u8_crc = fat_create_short_entry_name( sz_name , 0 , u8_nb, false  );
   u8_nb_entry--;

   // For each long name entry
   for( u8_i=1 ; u8_i<=u8_nb_entry ; u8_i++ )
8000b8c4:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000b8c8:	2f f8       	sub	r8,-1
8000b8ca:	ef 68 ff fc 	st.b	r7[-4],r8
8000b8ce:	ef 39 ff fc 	ld.ub	r9,r7[-4]
8000b8d2:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000b8d6:	f0 09 18 00 	cp.b	r9,r8
8000b8da:	fe 98 ff cb 	brls	8000b870 <fat_create_entry_file_name+0x90>
      }
      fat_create_long_name_entry( sz_name , u8_crc , u8_i );
      sz_name += FS_SIZE_LFN_ENTRY*(Is_unicode? 2 : 1 );
  }
  // Go back to the short name entry
  fs_g_nav_fast.u16_entry_pos_sel_file += u8_nb_entry;
8000b8de:	48 d8       	lddpc	r8,8000b910 <fat_create_entry_file_name+0x130>
8000b8e0:	90 19       	ld.sh	r9,r8[0x2]
8000b8e2:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000b8e6:	f2 08 00 08 	add	r8,r9,r8
8000b8ea:	5c 88       	casts.h	r8
8000b8ec:	48 99       	lddpc	r9,8000b910 <fat_create_entry_file_name+0x130>
8000b8ee:	b2 18       	st.h	r9[0x2],r8
  return true;
8000b8f0:	30 18       	mov	r8,1
}
8000b8f2:	10 9c       	mov	r12,r8
8000b8f4:	2f ed       	sub	sp,-8
8000b8f6:	e3 cd 80 80 	ldm	sp++,r7,pc
8000b8fa:	00 00       	add	r0,r0
8000b8fc:	80 00       	ld.sh	r0,r0[0x0]
8000b8fe:	be f4       	st.b	pc[0x7],r4
8000b900:	80 00       	ld.sh	r0,r0[0x0]
8000b902:	bd b4       	sbr	r4,0x1d
8000b904:	00 00       	add	r0,r0
8000b906:	0d d8       	ld.ub	r8,r6[0x5]
8000b908:	80 00       	ld.sh	r0,r0[0x0]
8000b90a:	c0 64       	brge	8000b916 <fat_create_entry_file_name+0x136>
8000b90c:	80 00       	ld.sh	r0,r0[0x0]
8000b90e:	ba 78       	st.h	sp[0xe],r8
8000b910:	00 00       	add	r0,r0
8000b912:	0d d4       	ld.ub	r4,r6[0x5]
8000b914:	80 00       	ld.sh	r0,r0[0x0]
8000b916:	a2 44       	st.h	r1[0x8],r4
8000b918:	80 00       	ld.sh	r0,r0[0x0]
8000b91a:	b9 1c       	ld.d	r12,--r12

8000b91c <fat_create_long_name_entry>:
//! @verbatim
//! OUT: Update the entry in internal cache sector with a new long name entry
//! @endverbatim
//!
void  fat_create_long_name_entry( FS_STRING sz_name , uint8_t u8_crc , uint8_t u8_id  )
{
8000b91c:	eb cd 40 80 	pushm	r7,lr
8000b920:	1a 97       	mov	r7,sp
8000b922:	20 6d       	sub	sp,24
8000b924:	ef 4c ff f0 	st.w	r7[-16],r12
8000b928:	16 99       	mov	r9,r11
8000b92a:	14 98       	mov	r8,r10
8000b92c:	ef 69 ff ec 	st.b	r7[-20],r9
8000b930:	ef 68 ff e8 	st.b	r7[-24],r8
   PTR_CACHE ptr_entry;
   bool b_end_of_name = false;
8000b934:	30 08       	mov	r8,0
8000b936:	ef 68 ff ff 	st.b	r7[-1],r8

   fat_cache_mark_sector_as_dirty();
8000b93a:	f0 1f 00 4e 	mcall	8000ba70 <fat_create_long_name_entry+0x154>
   ptr_entry = fat_get_ptr_entry();
8000b93e:	f0 1f 00 4e 	mcall	8000ba74 <fat_create_long_name_entry+0x158>
8000b942:	18 98       	mov	r8,r12
8000b944:	ef 48 ff f8 	st.w	r7[-8],r8
   *ptr_entry = u8_id;
8000b948:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000b94c:	ef 38 ff e8 	ld.ub	r8,r7[-24]
8000b950:	b2 88       	st.b	r9[0x0],r8
   ptr_entry++;   // The long name start at offset 1 of the entry file
8000b952:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b956:	2f f8       	sub	r8,-1
8000b958:	ef 48 ff f8 	st.w	r7[-8],r8

   for( u8_id=1; u8_id<FS_SIZE_FILE_ENTRY ; u8_id++ , ptr_entry++ )
8000b95c:	30 18       	mov	r8,1
8000b95e:	ef 68 ff e8 	st.b	r7[-24],r8
8000b962:	c7 c8       	rjmp	8000ba5a <fat_create_long_name_entry+0x13e>
   {
      // fields with no character
      if( 11 == u8_id)
8000b964:	ef 39 ff e8 	ld.ub	r9,r7[-24]
8000b968:	30 b8       	mov	r8,11
8000b96a:	f0 09 18 00 	cp.b	r9,r8
8000b96e:	c0 61       	brne	8000b97a <fat_create_long_name_entry+0x5e>
      {
         *ptr_entry = FS_ATTR_LFN_ENTRY;  // Attribute field
8000b970:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000b974:	30 f8       	mov	r8,15
8000b976:	b2 88       	st.b	r9[0x0],r8
         continue;
8000b978:	c6 78       	rjmp	8000ba46 <fat_create_long_name_entry+0x12a>
      }
      if( (12 == u8_id)
8000b97a:	ef 39 ff e8 	ld.ub	r9,r7[-24]
8000b97e:	30 c8       	mov	r8,12
8000b980:	f0 09 18 00 	cp.b	r9,r8
8000b984:	c5 c0       	breq	8000ba3c <fat_create_long_name_entry+0x120>
8000b986:	ef 39 ff e8 	ld.ub	r9,r7[-24]
8000b98a:	31 a8       	mov	r8,26
8000b98c:	f0 09 18 00 	cp.b	r9,r8
8000b990:	c5 80       	breq	8000ba40 <fat_create_long_name_entry+0x124>
8000b992:	ef 39 ff e8 	ld.ub	r9,r7[-24]
8000b996:	31 b8       	mov	r8,27
8000b998:	f0 09 18 00 	cp.b	r9,r8
8000b99c:	c5 40       	breq	8000ba44 <fat_create_long_name_entry+0x128>
      {
         // Reserved field
         // *ptr_entry = 0x00;            // No necessary because the cache must be clean
         continue;
      }
      if( 13 == u8_id)
8000b99e:	ef 39 ff e8 	ld.ub	r9,r7[-24]
8000b9a2:	30 d8       	mov	r8,13
8000b9a4:	f0 09 18 00 	cp.b	r9,r8
8000b9a8:	c0 71       	brne	8000b9b6 <fat_create_long_name_entry+0x9a>
      {
         *ptr_entry = u8_crc;             // CRC field
8000b9aa:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000b9ae:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8000b9b2:	b2 88       	st.b	r9[0x0],r8
         continue;
8000b9b4:	c4 98       	rjmp	8000ba46 <fat_create_long_name_entry+0x12a>
      }

      // fields with a character
      if( !b_end_of_name )
8000b9b6:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000b9ba:	ec 18 00 01 	eorl	r8,0x1
8000b9be:	5c 58       	castu.b	r8
8000b9c0:	c3 90       	breq	8000ba32 <fat_create_long_name_entry+0x116>
         uint16_t u16_tmp;
         if( Is_unicode )
         {
            u16_tmp = ((FS_STR_UNICODE)sz_name)[0];
         }else{
            u16_tmp = sz_name[0];
8000b9c2:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000b9c6:	11 88       	ld.ub	r8,r8[0x0]
8000b9c8:	ef 58 ff f6 	st.h	r7[-10],r8
         }
         if(('\\' == u16_tmp )
8000b9cc:	ef 09 ff f6 	ld.sh	r9,r7[-10]
8000b9d0:	35 c8       	mov	r8,92
8000b9d2:	f0 09 19 00 	cp.h	r9,r8
8000b9d6:	c0 70       	breq	8000b9e4 <fat_create_long_name_entry+0xc8>
         || ('/'  == u16_tmp ) )
8000b9d8:	ef 09 ff f6 	ld.sh	r9,r7[-10]
         {
            u16_tmp = ((FS_STR_UNICODE)sz_name)[0];
         }else{
            u16_tmp = sz_name[0];
         }
         if(('\\' == u16_tmp )
8000b9dc:	32 f8       	mov	r8,47
8000b9de:	f0 09 19 00 	cp.h	r9,r8
8000b9e2:	c0 41       	brne	8000b9ea <fat_create_long_name_entry+0xce>
         || ('/'  == u16_tmp ) )
         {  // end of name
            u16_tmp = 0;                  // Set a end of name flag
8000b9e4:	30 08       	mov	r8,0
8000b9e6:	ef 58 ff f6 	st.h	r7[-10],r8
         }
         if( 0 == u16_tmp )
8000b9ea:	ef 08 ff f6 	ld.sh	r8,r7[-10]
8000b9ee:	58 08       	cp.w	r8,0
8000b9f0:	c0 41       	brne	8000b9f8 <fat_create_long_name_entry+0xdc>
         {
            b_end_of_name = true;
8000b9f2:	30 18       	mov	r8,1
8000b9f4:	ef 68 ff ff 	st.b	r7[-1],r8
         }
         *ptr_entry = LSB(u16_tmp);
8000b9f8:	ee c8 00 0a 	sub	r8,r7,10
8000b9fc:	2f f8       	sub	r8,-1
8000b9fe:	11 88       	ld.ub	r8,r8[0x0]
8000ba00:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000ba04:	b2 88       	st.b	r9[0x0],r8
         ptr_entry++;
8000ba06:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000ba0a:	2f f8       	sub	r8,-1
8000ba0c:	ef 48 ff f8 	st.w	r7[-8],r8
         *ptr_entry = MSB(u16_tmp);
8000ba10:	ee c8 00 0a 	sub	r8,r7,10
8000ba14:	11 88       	ld.ub	r8,r8[0x0]
8000ba16:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000ba1a:	b2 88       	st.b	r9[0x0],r8
         u8_id++;
8000ba1c:	ef 38 ff e8 	ld.ub	r8,r7[-24]
8000ba20:	2f f8       	sub	r8,-1
8000ba22:	ef 68 ff e8 	st.b	r7[-24],r8
         sz_name += (Is_unicode? 2 : 1 );
8000ba26:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000ba2a:	2f f8       	sub	r8,-1
8000ba2c:	ef 48 ff f0 	st.w	r7[-16],r8
8000ba30:	c0 b8       	rjmp	8000ba46 <fat_create_long_name_entry+0x12a>
      }
      else
      {  // end of name
         *ptr_entry = 0xFF;               // Padding mandatory
8000ba32:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000ba36:	3f f8       	mov	r8,-1
8000ba38:	b2 88       	st.b	r9[0x0],r8
8000ba3a:	c0 68       	rjmp	8000ba46 <fat_create_long_name_entry+0x12a>
      ||  (26 == u8_id)
      ||  (27 == u8_id) )
      {
         // Reserved field
         // *ptr_entry = 0x00;            // No necessary because the cache must be clean
         continue;
8000ba3c:	d7 03       	nop
8000ba3e:	c0 48       	rjmp	8000ba46 <fat_create_long_name_entry+0x12a>
8000ba40:	d7 03       	nop
8000ba42:	c0 28       	rjmp	8000ba46 <fat_create_long_name_entry+0x12a>
8000ba44:	d7 03       	nop
   fat_cache_mark_sector_as_dirty();
   ptr_entry = fat_get_ptr_entry();
   *ptr_entry = u8_id;
   ptr_entry++;   // The long name start at offset 1 of the entry file

   for( u8_id=1; u8_id<FS_SIZE_FILE_ENTRY ; u8_id++ , ptr_entry++ )
8000ba46:	ef 38 ff e8 	ld.ub	r8,r7[-24]
8000ba4a:	2f f8       	sub	r8,-1
8000ba4c:	ef 68 ff e8 	st.b	r7[-24],r8
8000ba50:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000ba54:	2f f8       	sub	r8,-1
8000ba56:	ef 48 ff f8 	st.w	r7[-8],r8
8000ba5a:	ef 39 ff e8 	ld.ub	r9,r7[-24]
8000ba5e:	31 f8       	mov	r8,31
8000ba60:	f0 09 18 00 	cp.b	r9,r8
8000ba64:	fe 98 ff 80 	brls	8000b964 <fat_create_long_name_entry+0x48>
      else
      {  // end of name
         *ptr_entry = 0xFF;               // Padding mandatory
      }
   } // end of loop
}
8000ba68:	2f ad       	sub	sp,-24
8000ba6a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000ba6e:	00 00       	add	r0,r0
8000ba70:	80 00       	ld.sh	r0,r0[0x0]
8000ba72:	ab b8       	sbr	r8,0xb
8000ba74:	80 00       	ld.sh	r0,r0[0x0]
8000ba76:	aa a0       	st.b	r5[0x2],r0

8000ba78 <fat_create_short_entry_name>:
//!                           false to write in internal cache
//!
//! @return    short name CRC
//!
uint8_t    fat_create_short_entry_name( FS_STRING sz_name , FS_STRING short_name , uint8_t nb , bool mode  )
{
8000ba78:	eb cd 40 80 	pushm	r7,lr
8000ba7c:	1a 97       	mov	r7,sp
8000ba7e:	20 7d       	sub	sp,28
8000ba80:	ef 4c ff f0 	st.w	r7[-16],r12
8000ba84:	ef 4b ff ec 	st.w	r7[-20],r11
8000ba88:	12 98       	mov	r8,r9
8000ba8a:	14 99       	mov	r9,r10
8000ba8c:	ef 69 ff e8 	st.b	r7[-24],r9
8000ba90:	ef 68 ff e4 	st.b	r7[-28],r8
   PTR_CACHE ptr_entry = 0;
8000ba94:	30 08       	mov	r8,0
8000ba96:	ef 48 ff f4 	st.w	r7[-12],r8
   uint8_t u8_i, u8_step, character;
   uint8_t crc;
   uint8_t nb_digit;

   if( !mode )
8000ba9a:	ef 38 ff e4 	ld.ub	r8,r7[-28]
8000ba9e:	ec 18 00 01 	eorl	r8,0x1
8000baa2:	5c 58       	castu.b	r8
8000baa4:	c0 80       	breq	8000bab4 <fat_create_short_entry_name+0x3c>
   {
      // Modify internal cache to create short name entry in the current entry
      fat_cache_mark_sector_as_dirty();
8000baa6:	f0 1f 00 c0 	mcall	8000bda4 <fat_create_short_entry_name+0x32c>
      // Get pointer on current entry
      ptr_entry = fat_get_ptr_entry();
8000baaa:	f0 1f 00 c0 	mcall	8000bda8 <fat_create_short_entry_name+0x330>
8000baae:	18 98       	mov	r8,r12
8000bab0:	ef 48 ff f4 	st.w	r7[-12],r8
   }

   // Compute the digit number
   if( nb < 10 )        nb_digit = 1;
8000bab4:	ef 39 ff e8 	ld.ub	r9,r7[-24]
8000bab8:	30 98       	mov	r8,9
8000baba:	f0 09 18 00 	cp.b	r9,r8
8000babe:	e0 8b 00 06 	brhi	8000baca <fat_create_short_entry_name+0x52>
8000bac2:	30 18       	mov	r8,1
8000bac4:	ef 68 ff ff 	st.b	r7[-1],r8
8000bac8:	c0 f8       	rjmp	8000bae6 <fat_create_short_entry_name+0x6e>
   else if( nb < 100 )  nb_digit = 2;
8000baca:	ef 39 ff e8 	ld.ub	r9,r7[-24]
8000bace:	36 38       	mov	r8,99
8000bad0:	f0 09 18 00 	cp.b	r9,r8
8000bad4:	e0 8b 00 06 	brhi	8000bae0 <fat_create_short_entry_name+0x68>
8000bad8:	30 28       	mov	r8,2
8000bada:	ef 68 ff ff 	st.b	r7[-1],r8
8000bade:	c0 48       	rjmp	8000bae6 <fat_create_short_entry_name+0x6e>
   else                 nb_digit = 3;
8000bae0:	30 38       	mov	r8,3
8000bae2:	ef 68 ff ff 	st.b	r7[-1],r8

   crc = u8_i = 0;
8000bae6:	30 08       	mov	r8,0
8000bae8:	ef 68 ff fb 	st.b	r7[-5],r8
8000baec:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000baf0:	ef 68 ff fe 	st.b	r7[-2],r8
   u8_step = 1;
8000baf4:	30 18       	mov	r8,1
8000baf6:	ef 68 ff fc 	st.b	r7[-4],r8
   {
      if( Is_unicode )
      {
         character = ((FS_STR_UNICODE)sz_name)[0];
      }else{
         character = sz_name[0];
8000bafa:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000bafe:	11 88       	ld.ub	r8,r8[0x0]
8000bb00:	ef 68 ff fd 	st.b	r7[-3],r8
      }

      if( 1 == u8_step )
8000bb04:	ef 39 ff fc 	ld.ub	r9,r7[-4]
8000bb08:	30 18       	mov	r8,1
8000bb0a:	f0 09 18 00 	cp.b	r9,r8
8000bb0e:	c1 e1       	brne	8000bb4a <fat_create_short_entry_name+0xd2>
      {  // step 1 = translate the name
         if( ((FS_SIZE_SFNAME_WITHOUT_EXT-(1+nb_digit)) == u8_i)    // name field is full (-2 for "~1")
8000bb10:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000bb14:	5c d8       	com	r8
8000bb16:	f0 c9 ff f8 	sub	r9,r8,-8
8000bb1a:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000bb1e:	10 39       	cp.w	r9,r8
8000bb20:	c0 f0       	breq	8000bb3e <fat_create_short_entry_name+0xc6>
8000bb22:	ef 39 ff fd 	ld.ub	r9,r7[-3]
8000bb26:	32 e8       	mov	r8,46
8000bb28:	f0 09 18 00 	cp.b	r9,r8
8000bb2c:	c0 90       	breq	8000bb3e <fat_create_short_entry_name+0xc6>
8000bb2e:	ef 38 ff fd 	ld.ub	r8,r7[-3]
8000bb32:	10 9c       	mov	r12,r8
8000bb34:	f0 1f 00 9e 	mcall	8000bdac <fat_create_short_entry_name+0x334>
8000bb38:	18 98       	mov	r8,r12
8000bb3a:	58 08       	cp.w	r8,0
8000bb3c:	c0 70       	breq	8000bb4a <fat_create_short_entry_name+0xd2>
         ||  ('.'    == character)                       // is the end of name without extension
         ||  fat_check_eof_name(character)            )  // is the end of name
         {
            u8_step++;                                   // go to next step
8000bb3e:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000bb42:	2f f8       	sub	r8,-1
8000bb44:	ef 68 ff fc 	st.b	r7[-4],r8
            continue;
8000bb48:	c2 c9       	rjmp	8000bda0 <fat_create_short_entry_name+0x328>
         }
      }
      if( 8 == u8_step )
8000bb4a:	ef 39 ff fc 	ld.ub	r9,r7[-4]
8000bb4e:	30 88       	mov	r8,8
8000bb50:	f0 09 18 00 	cp.b	r9,r8
8000bb54:	c1 51       	brne	8000bb7e <fat_create_short_entry_name+0x106>
      {  // step 8 = translate the extension
         if( (u8_i == FS_SIZE_SFNAME)                    // name field is full
8000bb56:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8000bb5a:	30 b8       	mov	r8,11
8000bb5c:	f0 09 18 00 	cp.b	r9,r8
8000bb60:	c0 90       	breq	8000bb72 <fat_create_short_entry_name+0xfa>
8000bb62:	ef 38 ff fd 	ld.ub	r8,r7[-3]
8000bb66:	10 9c       	mov	r12,r8
8000bb68:	f0 1f 00 91 	mcall	8000bdac <fat_create_short_entry_name+0x334>
8000bb6c:	18 98       	mov	r8,r12
8000bb6e:	58 08       	cp.w	r8,0
8000bb70:	c0 70       	breq	8000bb7e <fat_create_short_entry_name+0x106>
         ||  fat_check_eof_name(character)            )  // is the end of name
         {
            u8_step++;                                   // go to next step
8000bb72:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000bb76:	2f f8       	sub	r8,-1
8000bb78:	ef 68 ff fc 	st.b	r7[-4],r8
            continue;
8000bb7c:	c1 29       	rjmp	8000bda0 <fat_create_short_entry_name+0x328>
         }
      }
      if( (1==u8_step) || (8==u8_step) )
8000bb7e:	ef 39 ff fc 	ld.ub	r9,r7[-4]
8000bb82:	30 18       	mov	r8,1
8000bb84:	f0 09 18 00 	cp.b	r9,r8
8000bb88:	c0 70       	breq	8000bb96 <fat_create_short_entry_name+0x11e>
8000bb8a:	ef 39 ff fc 	ld.ub	r9,r7[-4]
8000bb8e:	30 88       	mov	r8,8
8000bb90:	f0 09 18 00 	cp.b	r9,r8
8000bb94:	c1 51       	brne	8000bbbe <fat_create_short_entry_name+0x146>
      {  // steps to translate name
         character = fat_translate_char_shortname( character );
8000bb96:	ef 38 ff fd 	ld.ub	r8,r7[-3]
8000bb9a:	10 9c       	mov	r12,r8
8000bb9c:	f0 1f 00 85 	mcall	8000bdb0 <fat_create_short_entry_name+0x338>
8000bba0:	18 98       	mov	r8,r12
8000bba2:	ef 68 ff fd 	st.b	r7[-3],r8
         sz_name += (Is_unicode? 2 : 1 );
8000bba6:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000bbaa:	2f f8       	sub	r8,-1
8000bbac:	ef 48 ff f0 	st.w	r7[-16],r8
         if( 0 == character )
8000bbb0:	ef 39 ff fd 	ld.ub	r9,r7[-3]
8000bbb4:	30 08       	mov	r8,0
8000bbb6:	f0 09 18 00 	cp.b	r9,r8
8000bbba:	c0 21       	brne	8000bbbe <fat_create_short_entry_name+0x146>
         {
            continue;                                    // Bad character, ignore this one
8000bbbc:	cf 28       	rjmp	8000bda0 <fat_create_short_entry_name+0x328>
         }
      }
      if( 7 == u8_step )
8000bbbe:	ef 39 ff fc 	ld.ub	r9,r7[-4]
8000bbc2:	30 78       	mov	r8,7
8000bbc4:	f0 09 18 00 	cp.b	r9,r8
8000bbc8:	c1 b1       	brne	8000bbfe <fat_create_short_entry_name+0x186>
      {  // step 5 = find character '.'
         if( ('.'    == character)                       // is the end of name without extension
8000bbca:	ef 39 ff fd 	ld.ub	r9,r7[-3]
8000bbce:	32 e8       	mov	r8,46
8000bbd0:	f0 09 18 00 	cp.b	r9,r8
8000bbd4:	c0 90       	breq	8000bbe6 <fat_create_short_entry_name+0x16e>
8000bbd6:	ef 38 ff fd 	ld.ub	r8,r7[-3]
8000bbda:	10 9c       	mov	r12,r8
8000bbdc:	f0 1f 00 74 	mcall	8000bdac <fat_create_short_entry_name+0x334>
8000bbe0:	18 98       	mov	r8,r12
8000bbe2:	58 08       	cp.w	r8,0
8000bbe4:	c0 70       	breq	8000bbf2 <fat_create_short_entry_name+0x17a>
         ||  fat_check_eof_name(character)            )  // is the end of name
         {
            u8_step++;                                   // go to next step
8000bbe6:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000bbea:	2f f8       	sub	r8,-1
8000bbec:	ef 68 ff fc 	st.b	r7[-4],r8
            continue;                                    // Bad character, ignore this one
         }
      }
      if( 7 == u8_step )
      {  // step 5 = find character '.'
         if( ('.'    == character)                       // is the end of name without extension
8000bbf0:	c0 68       	rjmp	8000bbfc <fat_create_short_entry_name+0x184>
         ||  fat_check_eof_name(character)            )  // is the end of name
         {
            u8_step++;                                   // go to next step
         } else {
            sz_name += (Is_unicode? 2 : 1 );
8000bbf2:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000bbf6:	2f f8       	sub	r8,-1
8000bbf8:	ef 48 ff f0 	st.w	r7[-16],r8
         }
         continue;                                       // this step don't add a character in the short name
8000bbfc:	cd 28       	rjmp	8000bda0 <fat_create_short_entry_name+0x328>
      }
      if( 6 == u8_step )
8000bbfe:	ef 39 ff fc 	ld.ub	r9,r7[-4]
8000bc02:	30 68       	mov	r8,6
8000bc04:	f0 09 18 00 	cp.b	r9,r8
8000bc08:	c1 01       	brne	8000bc28 <fat_create_short_entry_name+0x1b0>
      {  // step 4 = add padding
         if( u8_i == FS_SIZE_SFNAME_WITHOUT_EXT )        // end of field name without extension
8000bc0a:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8000bc0e:	30 88       	mov	r8,8
8000bc10:	f0 09 18 00 	cp.b	r9,r8
8000bc14:	c0 71       	brne	8000bc22 <fat_create_short_entry_name+0x1aa>
         {
            u8_step++;                                   // go to next step
8000bc16:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000bc1a:	2f f8       	sub	r8,-1
8000bc1c:	ef 68 ff fc 	st.b	r7[-4],r8
            continue;
8000bc20:	cc 08       	rjmp	8000bda0 <fat_create_short_entry_name+0x328>
         }
         character = ' ';
8000bc22:	32 08       	mov	r8,32
8000bc24:	ef 68 ff fd 	st.b	r7[-3],r8
      }
      if( 9 == u8_step )
8000bc28:	ef 39 ff fc 	ld.ub	r9,r7[-4]
8000bc2c:	30 98       	mov	r8,9
8000bc2e:	f0 09 18 00 	cp.b	r9,r8
8000bc32:	c1 01       	brne	8000bc52 <fat_create_short_entry_name+0x1da>
      {  // step 7 = add padding in extension name
         if( u8_i == FS_SIZE_SFNAME )                    // end of field name with extension
8000bc34:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8000bc38:	30 b8       	mov	r8,11
8000bc3a:	f0 09 18 00 	cp.b	r9,r8
8000bc3e:	c0 71       	brne	8000bc4c <fat_create_short_entry_name+0x1d4>

      // Compute the CRC of the short name
      crc = (crc >> 1) + ((crc & 1) << 7);               // rotate
      crc += character;                                  // add next char
   } // End of loop while
   return crc;
8000bc40:	ef 38 ff fe 	ld.ub	r8,r7[-2]
}
8000bc44:	10 9c       	mov	r12,r8
8000bc46:	2f 9d       	sub	sp,-28
8000bc48:	e3 cd 80 80 	ldm	sp++,r7,pc
      {  // step 7 = add padding in extension name
         if( u8_i == FS_SIZE_SFNAME )                    // end of field name with extension
         {
            break;                                       // end of loop while(1)
         }
         character = ' ';
8000bc4c:	32 08       	mov	r8,32
8000bc4e:	ef 68 ff fd 	st.b	r7[-3],r8
      }
      if( 5 == u8_step )
8000bc52:	ef 39 ff fc 	ld.ub	r9,r7[-4]
8000bc56:	30 58       	mov	r8,5
8000bc58:	f0 09 18 00 	cp.b	r9,r8
8000bc5c:	c1 91       	brne	8000bc8e <fat_create_short_entry_name+0x216>
      {  // step 4 = add unit 1 of number
         character = '0'+(nb%10);
8000bc5e:	ef 3a ff e8 	ld.ub	r10,r7[-24]
8000bc62:	e0 68 cc cd 	mov	r8,52429
8000bc66:	ea 18 cc cc 	orh	r8,0xcccc
8000bc6a:	f4 08 06 48 	mulu.d	r8,r10,r8
8000bc6e:	a3 99       	lsr	r9,0x3
8000bc70:	12 98       	mov	r8,r9
8000bc72:	a3 68       	lsl	r8,0x2
8000bc74:	12 08       	add	r8,r9
8000bc76:	a1 78       	lsl	r8,0x1
8000bc78:	f4 08 01 08 	sub	r8,r10,r8
8000bc7c:	5c 58       	castu.b	r8
8000bc7e:	2d 08       	sub	r8,-48
8000bc80:	ef 68 ff fd 	st.b	r7[-3],r8
         u8_step++;                                      // go to next step
8000bc84:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000bc88:	2f f8       	sub	r8,-1
8000bc8a:	ef 68 ff fc 	st.b	r7[-4],r8
      }
      if( 4 == u8_step )
8000bc8e:	ef 39 ff fc 	ld.ub	r9,r7[-4]
8000bc92:	30 48       	mov	r8,4
8000bc94:	f0 09 18 00 	cp.b	r9,r8
8000bc98:	c2 21       	brne	8000bcdc <fat_create_short_entry_name+0x264>
      {  // step 3 = add unit 10 of number
         character = '0'+((nb%100)/10);
8000bc9a:	ef 3a ff e8 	ld.ub	r10,r7[-24]
8000bc9e:	e0 68 85 1f 	mov	r8,34079
8000bca2:	ea 18 51 eb 	orh	r8,0x51eb
8000bca6:	f4 08 06 48 	mulu.d	r8,r10,r8
8000bcaa:	f2 08 16 05 	lsr	r8,r9,0x5
8000bcae:	f0 08 10 64 	mul	r8,r8,100
8000bcb2:	f4 08 01 08 	sub	r8,r10,r8
8000bcb6:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8000bcba:	e0 68 cc cd 	mov	r8,52429
8000bcbe:	ea 18 cc cc 	orh	r8,0xcccc
8000bcc2:	f2 08 06 48 	mulu.d	r8,r9,r8
8000bcc6:	f2 08 16 03 	lsr	r8,r9,0x3
8000bcca:	5c 58       	castu.b	r8
8000bccc:	2d 08       	sub	r8,-48
8000bcce:	ef 68 ff fd 	st.b	r7[-3],r8
         u8_step++;                                      // go to next step
8000bcd2:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000bcd6:	2f f8       	sub	r8,-1
8000bcd8:	ef 68 ff fc 	st.b	r7[-4],r8
      }
      if( 3 == u8_step )
8000bcdc:	ef 39 ff fc 	ld.ub	r9,r7[-4]
8000bce0:	30 38       	mov	r8,3
8000bce2:	f0 09 18 00 	cp.b	r9,r8
8000bce6:	c1 41       	brne	8000bd0e <fat_create_short_entry_name+0x296>
      {  // step 2 = add unit 100 of number
         character = '0'+(nb/100);
8000bce8:	ef 39 ff e8 	ld.ub	r9,r7[-24]
8000bcec:	e0 68 85 1f 	mov	r8,34079
8000bcf0:	ea 18 51 eb 	orh	r8,0x51eb
8000bcf4:	f2 08 06 48 	mulu.d	r8,r9,r8
8000bcf8:	f2 08 16 05 	lsr	r8,r9,0x5
8000bcfc:	5c 58       	castu.b	r8
8000bcfe:	2d 08       	sub	r8,-48
8000bd00:	ef 68 ff fd 	st.b	r7[-3],r8
         u8_step++;                                      // go to next step
8000bd04:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000bd08:	2f f8       	sub	r8,-1
8000bd0a:	ef 68 ff fc 	st.b	r7[-4],r8
      }
      if( 2 == u8_step )
8000bd0e:	ef 39 ff fc 	ld.ub	r9,r7[-4]
8000bd12:	30 28       	mov	r8,2
8000bd14:	f0 09 18 00 	cp.b	r9,r8
8000bd18:	c0 e1       	brne	8000bd34 <fat_create_short_entry_name+0x2bc>
      {  // step 2 = add character '~'
         character = '~';
8000bd1a:	37 e8       	mov	r8,126
8000bd1c:	ef 68 ff fd 	st.b	r7[-3],r8
         u8_step+=(4-nb_digit);                          // go to next step
8000bd20:	ef 39 ff fc 	ld.ub	r9,r7[-4]
8000bd24:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000bd28:	f2 08 01 08 	sub	r8,r9,r8
8000bd2c:	5c 58       	castu.b	r8
8000bd2e:	2f c8       	sub	r8,-4
8000bd30:	ef 68 ff fc 	st.b	r7[-4],r8
      }

      if( mode )
8000bd34:	ef 39 ff e4 	ld.ub	r9,r7[-28]
8000bd38:	30 08       	mov	r8,0
8000bd3a:	f0 09 18 00 	cp.b	r9,r8
8000bd3e:	c0 c0       	breq	8000bd56 <fat_create_short_entry_name+0x2de>
      {
         // Record the short name in buffer
         *short_name = character;
8000bd40:	ee f9 ff ec 	ld.w	r9,r7[-20]
8000bd44:	ef 38 ff fd 	ld.ub	r8,r7[-3]
8000bd48:	b2 88       	st.b	r9[0x0],r8
         short_name++;
8000bd4a:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000bd4e:	2f f8       	sub	r8,-1
8000bd50:	ef 48 ff ec 	st.w	r7[-20],r8
8000bd54:	c0 b8       	rjmp	8000bd6a <fat_create_short_entry_name+0x2f2>
      }else{
         // Record the character in short entry file
         *ptr_entry = character;
8000bd56:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000bd5a:	ef 38 ff fd 	ld.ub	r8,r7[-3]
8000bd5e:	b2 88       	st.b	r9[0x0],r8
         ptr_entry++;
8000bd60:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000bd64:	2f f8       	sub	r8,-1
8000bd66:	ef 48 ff f4 	st.w	r7[-12],r8
      }
      u8_i++;
8000bd6a:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000bd6e:	2f f8       	sub	r8,-1
8000bd70:	ef 68 ff fb 	st.b	r7[-5],r8

      // Compute the CRC of the short name
      crc = (crc >> 1) + ((crc & 1) << 7);               // rotate
8000bd74:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8000bd78:	a1 98       	lsr	r8,0x1
8000bd7a:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8000bd7e:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8000bd82:	a7 78       	lsl	r8,0x7
8000bd84:	5c 58       	castu.b	r8
8000bd86:	f2 08 00 08 	add	r8,r9,r8
8000bd8a:	ef 68 ff fe 	st.b	r7[-2],r8
      crc += character;                                  // add next char
8000bd8e:	ef 39 ff fe 	ld.ub	r9,r7[-2]
8000bd92:	ef 38 ff fd 	ld.ub	r8,r7[-3]
8000bd96:	f2 08 00 08 	add	r8,r9,r8
8000bd9a:	ef 68 ff fe 	st.b	r7[-2],r8
   } // End of loop while
8000bd9e:	ca ea       	rjmp	8000bafa <fat_create_short_entry_name+0x82>
8000bda0:	ca da       	rjmp	8000bafa <fat_create_short_entry_name+0x82>
8000bda2:	00 00       	add	r0,r0
8000bda4:	80 00       	ld.sh	r0,r0[0x0]
8000bda6:	ab b8       	sbr	r8,0xb
8000bda8:	80 00       	ld.sh	r0,r0[0x0]
8000bdaa:	aa a0       	st.b	r5[0x2],r0
8000bdac:	80 00       	ld.sh	r0,r0[0x0]
8000bdae:	aa 5c       	st.h	r5[0xa],r12
8000bdb0:	80 00       	ld.sh	r0,r0[0x0]
8000bdb2:	bf c8       	cbr	r8,0x1e

8000bdb4 <fat_find_short_entry_name>:
//!
//! @return the number used to create the short name
//! @return 0 in case of error
//!
uint8_t    fat_find_short_entry_name( FS_STRING sz_name  )
{
8000bdb4:	eb cd 40 80 	pushm	r7,lr
8000bdb8:	1a 97       	mov	r7,sp
8000bdba:	20 4d       	sub	sp,16
8000bdbc:	ef 4c ff f0 	st.w	r7[-16],r12
   char _MEM_TYPE_SLOW_ short_name[11];
   uint8_t u8_nb;

   u8_nb = 0;
8000bdc0:	30 08       	mov	r8,0
8000bdc2:	ef 68 ff ff 	st.b	r7[-1],r8
8000bdc6:	c0 28       	rjmp	8000bdca <fat_find_short_entry_name+0x16>
            break;                                       // Short name exist
         if( FS_ERR_ENTRY_EMPTY == fs_g_status )
            return u8_nb;                                // Short name don't exist, then good number
         fs_g_nav_fast.u16_entry_pos_sel_file++;         // Go to next entry
      }
   }
8000bdc8:	d7 03       	nop
   uint8_t u8_nb;

   u8_nb = 0;
   while(1)
   {
      if( 0xFF == u8_nb )
8000bdca:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000bdce:	3f f8       	mov	r8,-1
8000bdd0:	f0 09 18 00 	cp.b	r9,r8
8000bdd4:	c0 31       	brne	8000bdda <fat_find_short_entry_name+0x26>
         return 0;                                       // All short name exist
8000bdd6:	30 08       	mov	r8,0
8000bdd8:	c3 d8       	rjmp	8000be52 <fat_find_short_entry_name+0x9e>

      u8_nb++;                                           // Try next short name
8000bdda:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000bdde:	2f f8       	sub	r8,-1
8000bde0:	ef 68 ff ff 	st.b	r7[-1],r8
      fat_create_short_entry_name( sz_name , short_name , u8_nb , true  ); // Compute the short name
8000bde4:	ef 3a ff ff 	ld.ub	r10,r7[-1]
8000bde8:	ee c8 00 0c 	sub	r8,r7,12
8000bdec:	30 19       	mov	r9,1
8000bdee:	10 9b       	mov	r11,r8
8000bdf0:	ee fc ff f0 	ld.w	r12,r7[-16]
8000bdf4:	f0 1f 00 1a 	mcall	8000be5c <fat_find_short_entry_name+0xa8>
      fs_g_nav_fast.u16_entry_pos_sel_file = 0;          // Go to beginning of directory
8000bdf8:	49 a9       	lddpc	r9,8000be60 <fat_find_short_entry_name+0xac>
8000bdfa:	30 08       	mov	r8,0
8000bdfc:	b2 18       	st.h	r9[0x2],r8
      // Scan directory to find a short entry
      while(1)
      {
         if ( !fat_read_dir())                           // Read directory
8000bdfe:	f0 1f 00 1a 	mcall	8000be64 <fat_find_short_entry_name+0xb0>
8000be02:	18 98       	mov	r8,r12
8000be04:	ec 18 00 01 	eorl	r8,0x1
8000be08:	5c 58       	castu.b	r8
8000be0a:	c0 c0       	breq	8000be22 <fat_find_short_entry_name+0x6e>
         {
            if( FS_ERR_OUT_LIST == fs_g_status )
8000be0c:	49 78       	lddpc	r8,8000be68 <fat_find_short_entry_name+0xb4>
8000be0e:	11 89       	ld.ub	r9,r8[0x0]
8000be10:	31 a8       	mov	r8,26
8000be12:	f0 09 18 00 	cp.b	r9,r8
8000be16:	c0 41       	brne	8000be1e <fat_find_short_entry_name+0x6a>
               return u8_nb;                             // short name don't exist, then good number
8000be18:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000be1c:	c1 b8       	rjmp	8000be52 <fat_find_short_entry_name+0x9e>
            return 0;                                    // System or Disk Error
8000be1e:	30 08       	mov	r8,0
8000be20:	c1 98       	rjmp	8000be52 <fat_find_short_entry_name+0x9e>
         }
         if( fat_entry_shortname_compare( short_name ) ) // Check entry
8000be22:	ee c8 00 0c 	sub	r8,r7,12
8000be26:	10 9c       	mov	r12,r8
8000be28:	f0 1f 00 11 	mcall	8000be6c <fat_find_short_entry_name+0xb8>
8000be2c:	18 98       	mov	r8,r12
8000be2e:	58 08       	cp.w	r8,0
8000be30:	cc c1       	brne	8000bdc8 <fat_find_short_entry_name+0x14>
            break;                                       // Short name exist
         if( FS_ERR_ENTRY_EMPTY == fs_g_status )
8000be32:	48 e8       	lddpc	r8,8000be68 <fat_find_short_entry_name+0xb4>
8000be34:	11 89       	ld.ub	r9,r8[0x0]
8000be36:	30 a8       	mov	r8,10
8000be38:	f0 09 18 00 	cp.b	r9,r8
8000be3c:	c0 41       	brne	8000be44 <fat_find_short_entry_name+0x90>
            return u8_nb;                                // Short name don't exist, then good number
8000be3e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000be42:	c0 88       	rjmp	8000be52 <fat_find_short_entry_name+0x9e>
         fs_g_nav_fast.u16_entry_pos_sel_file++;         // Go to next entry
8000be44:	48 78       	lddpc	r8,8000be60 <fat_find_short_entry_name+0xac>
8000be46:	90 18       	ld.sh	r8,r8[0x2]
8000be48:	2f f8       	sub	r8,-1
8000be4a:	5c 88       	casts.h	r8
8000be4c:	48 59       	lddpc	r9,8000be60 <fat_find_short_entry_name+0xac>
8000be4e:	b2 18       	st.h	r9[0x2],r8
      }
8000be50:	cd 7b       	rjmp	8000bdfe <fat_find_short_entry_name+0x4a>
   }
}
8000be52:	10 9c       	mov	r12,r8
8000be54:	2f cd       	sub	sp,-16
8000be56:	e3 cd 80 80 	ldm	sp++,r7,pc
8000be5a:	00 00       	add	r0,r0
8000be5c:	80 00       	ld.sh	r0,r0[0x0]
8000be5e:	ba 78       	st.h	sp[0xe],r8
8000be60:	00 00       	add	r0,r0
8000be62:	0d d4       	ld.ub	r4,r6[0x5]
8000be64:	80 00       	ld.sh	r0,r0[0x0]
8000be66:	a2 44       	st.h	r1[0x8],r4
8000be68:	00 00       	add	r0,r0
8000be6a:	0d d8       	ld.ub	r8,r6[0x5]
8000be6c:	80 00       	ld.sh	r0,r0[0x0]
8000be6e:	be 70       	st.h	pc[0xe],r0

8000be70 <fat_entry_shortname_compare>:
//!
//! @return    true it is the same
//! @return    false in case of error, see global value "fs_g_status" for more detail
//!
bool  fat_entry_shortname_compare( FS_STRING short_name )
{
8000be70:	eb cd 40 80 	pushm	r7,lr
8000be74:	1a 97       	mov	r7,sp
8000be76:	20 2d       	sub	sp,8
8000be78:	ef 4c ff f8 	st.w	r7[-8],r12
   PTR_CACHE ptr_entry;

   ptr_entry = fat_get_ptr_entry();
8000be7c:	f0 1f 00 1b 	mcall	8000bee8 <fat_entry_shortname_compare+0x78>
8000be80:	18 98       	mov	r8,r12
8000be82:	ef 48 ff fc 	st.w	r7[-4],r8
   if( FS_ENTRY_END == *ptr_entry )             // end of directory
8000be86:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000be8a:	11 88       	ld.ub	r8,r8[0x0]
8000be8c:	58 08       	cp.w	r8,0
8000be8e:	c0 61       	brne	8000be9a <fat_entry_shortname_compare+0x2a>
   {
      fs_g_status = FS_ERR_ENTRY_EMPTY;
8000be90:	49 79       	lddpc	r9,8000beec <fat_entry_shortname_compare+0x7c>
8000be92:	30 a8       	mov	r8,10
8000be94:	b2 88       	st.b	r9[0x0],r8
      return false;
8000be96:	30 08       	mov	r8,0
8000be98:	c2 38       	rjmp	8000bede <fat_entry_shortname_compare+0x6e>
   }
   if( (FS_ENTRY_DEL == *ptr_entry )            // deleted entry
8000be9a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000be9e:	11 89       	ld.ub	r9,r8[0x0]
8000bea0:	3e 58       	mov	r8,-27
8000bea2:	f0 09 18 00 	cp.b	r9,r8
8000bea6:	c0 90       	breq	8000beb8 <fat_entry_shortname_compare+0x48>
   ||  (FS_ATTR_LFN_ENTRY == ptr_entry[11]) )   // long file name
8000bea8:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000beac:	2f 58       	sub	r8,-11
8000beae:	11 89       	ld.ub	r9,r8[0x0]
   if( FS_ENTRY_END == *ptr_entry )             // end of directory
   {
      fs_g_status = FS_ERR_ENTRY_EMPTY;
      return false;
   }
   if( (FS_ENTRY_DEL == *ptr_entry )            // deleted entry
8000beb0:	30 f8       	mov	r8,15
8000beb2:	f0 09 18 00 	cp.b	r9,r8
8000beb6:	c0 61       	brne	8000bec2 <fat_entry_shortname_compare+0x52>
   ||  (FS_ATTR_LFN_ENTRY == ptr_entry[11]) )   // long file name
   {
      fs_g_status = FS_ERR_ENTRY_BAD;
8000beb8:	48 d9       	lddpc	r9,8000beec <fat_entry_shortname_compare+0x7c>
8000beba:	30 b8       	mov	r8,11
8000bebc:	b2 88       	st.b	r9[0x0],r8
      return false;
8000bebe:	30 08       	mov	r8,0
8000bec0:	c0 f8       	rjmp	8000bede <fat_entry_shortname_compare+0x6e>
   }
   fs_g_status = FS_ERR_ENTRY_BAD;              // by default this entry is different then bad
8000bec2:	48 b9       	lddpc	r9,8000beec <fat_entry_shortname_compare+0x7c>
8000bec4:	30 b8       	mov	r8,11
8000bec6:	b2 88       	st.b	r9[0x0],r8
   return (0==memcmp_ram2ram(ptr_entry , short_name , 8+3 ));
8000bec8:	30 ba       	mov	r10,11
8000beca:	ee fb ff f8 	ld.w	r11,r7[-8]
8000bece:	ee fc ff fc 	ld.w	r12,r7[-4]
8000bed2:	f0 1f 00 08 	mcall	8000bef0 <fat_entry_shortname_compare+0x80>
8000bed6:	18 98       	mov	r8,r12
8000bed8:	58 08       	cp.w	r8,0
8000beda:	5f 08       	sreq	r8
8000bedc:	5c 58       	castu.b	r8
}
8000bede:	10 9c       	mov	r12,r8
8000bee0:	2f ed       	sub	sp,-8
8000bee2:	e3 cd 80 80 	ldm	sp++,r7,pc
8000bee6:	00 00       	add	r0,r0
8000bee8:	80 00       	ld.sh	r0,r0[0x0]
8000beea:	aa a0       	st.b	r5[0x2],r0
8000beec:	00 00       	add	r0,r0
8000beee:	0d d8       	ld.ub	r8,r6[0x5]
8000bef0:	80 00       	ld.sh	r0,r0[0x0]
8000bef2:	f4 14 eb cd 	cache	r4[973],0x1d

8000bef4 <fat_check_name>:
//!
//! @return    number of entry file to store the name (short + long name) <br>
//!            if name incorrect then 0 is returned.
//!
uint8_t    fat_check_name( FS_STRING sz_name  )
{
8000bef4:	eb cd 40 80 	pushm	r7,lr
8000bef8:	1a 97       	mov	r7,sp
8000befa:	20 3d       	sub	sp,12
8000befc:	ef 4c ff f4 	st.w	r7[-12],r12
   uint8_t u8_nb_entry, u8_i, u8_j;
   uint16_t u16_character;

   u8_nb_entry = 2;        // a short entry + one long name entry minimum
8000bf00:	30 28       	mov	r8,2
8000bf02:	ef 68 ff fb 	st.b	r7[-5],r8
   u8_i = FS_SIZE_LFN_ENTRY;
8000bf06:	30 d8       	mov	r8,13
8000bf08:	ef 68 ff fc 	st.b	r7[-4],r8
   {
      if( Is_unicode )
      {
         u16_character = ((FS_STR_UNICODE)sz_name)[0];
      }else{
         u16_character = sz_name[0];
8000bf0c:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000bf10:	11 88       	ld.ub	r8,r8[0x0]
8000bf12:	ef 58 ff fe 	st.h	r7[-2],r8
      }
      if( fat_check_eof_name( u16_character ) )
8000bf16:	ef 18 ff fe 	ld.uh	r8,r7[-2]
8000bf1a:	10 9c       	mov	r12,r8
8000bf1c:	f0 1f 00 28 	mcall	8000bfbc <fat_check_name+0xc8>
8000bf20:	18 98       	mov	r8,r12
8000bf22:	58 08       	cp.w	r8,0
8000bf24:	c0 90       	breq	8000bf36 <fat_check_name+0x42>
         u8_i = FS_SIZE_LFN_ENTRY;
      }
      u8_i--;
      sz_name += (Is_unicode? 2 : 1 );
   }
   if( 0x14 < u8_nb_entry )
8000bf26:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8000bf2a:	31 48       	mov	r8,20
8000bf2c:	f0 09 18 00 	cp.b	r9,r8
8000bf30:	e0 8b 00 3b 	brhi	8000bfa6 <fat_check_name+0xb2>
8000bf34:	c3 e8       	rjmp	8000bfb0 <fat_check_name+0xbc>
         u16_character = sz_name[0];
      }
      if( fat_check_eof_name( u16_character ) )
         break;

      for( u8_j = 0 ; u8_j < sizeof(fs_s_tab_incorrect_char) ; u8_j++ )
8000bf36:	30 08       	mov	r8,0
8000bf38:	ef 68 ff fd 	st.b	r7[-3],r8
8000bf3c:	c1 58       	rjmp	8000bf66 <fat_check_name+0x72>
      {
         if( u16_character == fs_s_tab_incorrect_char[u8_j] )
8000bf3e:	ef 38 ff fd 	ld.ub	r8,r7[-3]
8000bf42:	4a 09       	lddpc	r9,8000bfc0 <fat_check_name+0xcc>
8000bf44:	f2 08 07 08 	ld.ub	r8,r9[r8]
8000bf48:	ef 09 ff fe 	ld.sh	r9,r7[-2]
8000bf4c:	f0 09 19 00 	cp.h	r9,r8
8000bf50:	c0 61       	brne	8000bf5c <fat_check_name+0x68>
         {
            fs_g_status = FS_ERR_INCORRECT_NAME;
8000bf52:	49 d9       	lddpc	r9,8000bfc4 <fat_check_name+0xd0>
8000bf54:	31 c8       	mov	r8,28
8000bf56:	b2 88       	st.b	r9[0x0],r8
            return 0;      // incorrect character
8000bf58:	30 08       	mov	r8,0
8000bf5a:	c2 d8       	rjmp	8000bfb4 <fat_check_name+0xc0>
         u16_character = sz_name[0];
      }
      if( fat_check_eof_name( u16_character ) )
         break;

      for( u8_j = 0 ; u8_j < sizeof(fs_s_tab_incorrect_char) ; u8_j++ )
8000bf5c:	ef 38 ff fd 	ld.ub	r8,r7[-3]
8000bf60:	2f f8       	sub	r8,-1
8000bf62:	ef 68 ff fd 	st.b	r7[-3],r8
8000bf66:	ef 39 ff fd 	ld.ub	r9,r7[-3]
8000bf6a:	30 68       	mov	r8,6
8000bf6c:	f0 09 18 00 	cp.b	r9,r8
8000bf70:	fe 98 ff e7 	brls	8000bf3e <fat_check_name+0x4a>
         {
            fs_g_status = FS_ERR_INCORRECT_NAME;
            return 0;      // incorrect character
         }
      }
      if( 0 == u8_i )
8000bf74:	ef 39 ff fc 	ld.ub	r9,r7[-4]
8000bf78:	30 08       	mov	r8,0
8000bf7a:	f0 09 18 00 	cp.b	r9,r8
8000bf7e:	c0 91       	brne	8000bf90 <fat_check_name+0x9c>
      {
         u8_nb_entry++;
8000bf80:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000bf84:	2f f8       	sub	r8,-1
8000bf86:	ef 68 ff fb 	st.b	r7[-5],r8
         u8_i = FS_SIZE_LFN_ENTRY;
8000bf8a:	30 d8       	mov	r8,13
8000bf8c:	ef 68 ff fc 	st.b	r7[-4],r8
      }
      u8_i--;
8000bf90:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000bf94:	20 18       	sub	r8,1
8000bf96:	ef 68 ff fc 	st.b	r7[-4],r8
      sz_name += (Is_unicode? 2 : 1 );
8000bf9a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000bf9e:	2f f8       	sub	r8,-1
8000bfa0:	ef 48 ff f4 	st.w	r7[-12],r8
   }
8000bfa4:	cb 4b       	rjmp	8000bf0c <fat_check_name+0x18>
   if( 0x14 < u8_nb_entry )
   {
      fs_g_status = FS_ERR_NAME_TOO_LARGE;
8000bfa6:	48 89       	lddpc	r9,8000bfc4 <fat_check_name+0xd0>
8000bfa8:	32 b8       	mov	r8,43
8000bfaa:	b2 88       	st.b	r9[0x0],r8
      return 0;            // Name too large
8000bfac:	30 08       	mov	r8,0
8000bfae:	c0 38       	rjmp	8000bfb4 <fat_check_name+0xc0>
   }
   return u8_nb_entry;
8000bfb0:	ef 38 ff fb 	ld.ub	r8,r7[-5]
}
8000bfb4:	10 9c       	mov	r12,r8
8000bfb6:	2f dd       	sub	sp,-12
8000bfb8:	e3 cd 80 80 	ldm	sp++,r7,pc
8000bfbc:	80 00       	ld.sh	r0,r0[0x0]
8000bfbe:	aa 5c       	st.h	r5[0xa],r12
8000bfc0:	80 01       	ld.sh	r1,r0[0x0]
8000bfc2:	4e 28       	lddpc	r8,8000c148 <fat_alloc_entry_free+0xe4>
8000bfc4:	00 00       	add	r0,r0
8000bfc6:	0d d8       	ld.ub	r8,r6[0x5]

8000bfc8 <fat_translate_char_shortname>:
//!
//! @return    character translated <br>
//!            if no supported then 0
//!
uint8_t    fat_translate_char_shortname( uint8_t character )
{
8000bfc8:	eb cd 40 80 	pushm	r7,lr
8000bfcc:	1a 97       	mov	r7,sp
8000bfce:	20 2d       	sub	sp,8
8000bfd0:	18 98       	mov	r8,r12
8000bfd2:	ef 68 ff f8 	st.b	r7[-8],r8
   uint8_t u8_j;

   if( (character<=' ') || ('~'<character) )
8000bfd6:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000bfda:	32 08       	mov	r8,32
8000bfdc:	f0 09 18 00 	cp.b	r9,r8
8000bfe0:	e0 88 00 09 	brls	8000bff2 <fat_translate_char_shortname+0x2a>
8000bfe4:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000bfe8:	37 e8       	mov	r8,126
8000bfea:	f0 09 18 00 	cp.b	r9,r8
8000bfee:	e0 88 00 04 	brls	8000bff6 <fat_translate_char_shortname+0x2e>
      return 0;
8000bff2:	30 08       	mov	r8,0
8000bff4:	c3 28       	rjmp	8000c058 <fat_translate_char_shortname+0x90>
   if( ('a'<=character) && (character<='z') )
8000bff6:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000bffa:	36 08       	mov	r8,96
8000bffc:	f0 09 18 00 	cp.b	r9,r8
8000c000:	e0 88 00 0e 	brls	8000c01c <fat_translate_char_shortname+0x54>
8000c004:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000c008:	37 a8       	mov	r8,122
8000c00a:	f0 09 18 00 	cp.b	r9,r8
8000c00e:	e0 8b 00 07 	brhi	8000c01c <fat_translate_char_shortname+0x54>
   {
      return (character - ('a'-'A'));  // Change to upper case
8000c012:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000c016:	22 08       	sub	r8,32
8000c018:	5c 58       	castu.b	r8
8000c01a:	c1 f8       	rjmp	8000c058 <fat_translate_char_shortname+0x90>
   }
   for( u8_j = 0 ; u8_j < sizeof(fs_s_execption_char) ; u8_j++ )
8000c01c:	30 08       	mov	r8,0
8000c01e:	ef 68 ff ff 	st.b	r7[-1],r8
8000c022:	c1 28       	rjmp	8000c046 <fat_translate_char_shortname+0x7e>
   {
      if( character == fs_s_execption_char[u8_j] )
8000c024:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000c028:	48 e9       	lddpc	r9,8000c060 <fat_translate_char_shortname+0x98>
8000c02a:	f2 08 07 08 	ld.ub	r8,r9[r8]
8000c02e:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000c032:	f0 09 18 00 	cp.b	r9,r8
8000c036:	c0 31       	brne	8000c03c <fat_translate_char_shortname+0x74>
         return 0;
8000c038:	30 08       	mov	r8,0
8000c03a:	c0 f8       	rjmp	8000c058 <fat_translate_char_shortname+0x90>
      return 0;
   if( ('a'<=character) && (character<='z') )
   {
      return (character - ('a'-'A'));  // Change to upper case
   }
   for( u8_j = 0 ; u8_j < sizeof(fs_s_execption_char) ; u8_j++ )
8000c03c:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000c040:	2f f8       	sub	r8,-1
8000c042:	ef 68 ff ff 	st.b	r7[-1],r8
8000c046:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000c04a:	30 68       	mov	r8,6
8000c04c:	f0 09 18 00 	cp.b	r9,r8
8000c050:	fe 98 ff ea 	brls	8000c024 <fat_translate_char_shortname+0x5c>
   {
      if( character == fs_s_execption_char[u8_j] )
         return 0;
   }
   return character;
8000c054:	ef 38 ff f8 	ld.ub	r8,r7[-8]
}
8000c058:	10 9c       	mov	r12,r8
8000c05a:	2f ed       	sub	sp,-8
8000c05c:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c060:	80 01       	ld.sh	r1,r0[0x0]
8000c062:	4e 30       	lddpc	r0,8000c1ec <fat_garbage_collector_entry+0x38>

8000c064 <fat_alloc_entry_free>:
//! @verbatim
//! OUT: Initialize the system on the last alloced free entry
//! @endverbatim
//!
bool  fat_alloc_entry_free( uint8_t u8_nb_entry )
{
8000c064:	eb cd 40 80 	pushm	r7,lr
8000c068:	1a 97       	mov	r7,sp
8000c06a:	20 3d       	sub	sp,12
8000c06c:	18 98       	mov	r8,r12
8000c06e:	ef 68 ff f4 	st.b	r7[-12],r8
   PTR_CACHE ptr_entry;
   bool b_garbage_collector_used = false;
8000c072:	30 08       	mov	r8,0
8000c074:	ef 68 ff fe 	st.b	r7[-2],r8
   uint8_t u8_nb_entry_save;

   u8_nb_entry_save = u8_nb_entry;
8000c078:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000c07c:	ef 68 ff ff 	st.b	r7[-1],r8

   // Start at the beginning of dir
   fs_g_nav_fast.u16_entry_pos_sel_file=0;
8000c080:	4c 59       	lddpc	r9,8000c194 <fat_alloc_entry_free+0x130>
8000c082:	30 08       	mov	r8,0
8000c084:	b2 18       	st.h	r9[0x2],r8
8000c086:	c0 28       	rjmp	8000c08a <fat_alloc_entry_free+0x26>
         b_garbage_collector_used = true;
         fs_g_nav_fast.u16_entry_pos_sel_file=0;
         u8_nb_entry = u8_nb_entry_save;
         continue;
      }
   }  // end of while(1)
8000c088:	d7 03       	nop
   fs_g_nav_fast.u16_entry_pos_sel_file=0;
   // Loop in directory
   while( 1 )
   {
      // Fill internal cache with a sector from directory
      if( !fat_read_dir() )
8000c08a:	f0 1f 00 44 	mcall	8000c198 <fat_alloc_entry_free+0x134>
8000c08e:	18 98       	mov	r8,r12
8000c090:	ec 18 00 01 	eorl	r8,0x1
8000c094:	5c 58       	castu.b	r8
8000c096:	c3 90       	breq	8000c108 <fat_alloc_entry_free+0xa4>
      {
         if( FS_ERR_OUT_LIST != fs_g_status )
8000c098:	4c 18       	lddpc	r8,8000c19c <fat_alloc_entry_free+0x138>
8000c09a:	11 89       	ld.ub	r9,r8[0x0]
8000c09c:	31 a8       	mov	r8,26
8000c09e:	f0 09 18 00 	cp.b	r9,r8
8000c0a2:	c0 30       	breq	8000c0a8 <fat_alloc_entry_free+0x44>
            return false;
8000c0a4:	30 08       	mov	r8,0
8000c0a6:	c7 28       	rjmp	8000c18a <fat_alloc_entry_free+0x126>

         // The position is outside the cluster list
         // then alloc a new sector (= new cluster)
         // Remark: The fs_g_seg.u32_addr contains the last cluster value of a directory list to link with the new list
         fs_g_seg.u32_size_or_pos = 1;
8000c0a8:	4b e8       	lddpc	r8,8000c1a0 <fat_alloc_entry_free+0x13c>
8000c0aa:	30 19       	mov	r9,1
8000c0ac:	91 19       	st.w	r8[0x4],r9
         if( !fat_allocfreespace())
8000c0ae:	f0 1f 00 3e 	mcall	8000c1a4 <fat_alloc_entry_free+0x140>
8000c0b2:	18 98       	mov	r8,r12
8000c0b4:	ec 18 00 01 	eorl	r8,0x1
8000c0b8:	5c 58       	castu.b	r8
8000c0ba:	c1 d0       	breq	8000c0f4 <fat_alloc_entry_free+0x90>
         {
            // Garbage collector on entry file
            if( b_garbage_collector_used )
8000c0bc:	ef 39 ff fe 	ld.ub	r9,r7[-2]
8000c0c0:	30 08       	mov	r8,0
8000c0c2:	f0 09 18 00 	cp.b	r9,r8
8000c0c6:	c0 30       	breq	8000c0cc <fat_alloc_entry_free+0x68>
               return false;
8000c0c8:	30 08       	mov	r8,0
8000c0ca:	c6 08       	rjmp	8000c18a <fat_alloc_entry_free+0x126>
            if( !fat_garbage_collector_entry())
8000c0cc:	f0 1f 00 37 	mcall	8000c1a8 <fat_alloc_entry_free+0x144>
8000c0d0:	18 98       	mov	r8,r12
8000c0d2:	ec 18 00 01 	eorl	r8,0x1
8000c0d6:	5c 58       	castu.b	r8
8000c0d8:	c0 30       	breq	8000c0de <fat_alloc_entry_free+0x7a>
               return false;
8000c0da:	30 08       	mov	r8,0
8000c0dc:	c5 78       	rjmp	8000c18a <fat_alloc_entry_free+0x126>
            b_garbage_collector_used = true;
8000c0de:	30 18       	mov	r8,1
8000c0e0:	ef 68 ff fe 	st.b	r7[-2],r8
            fs_g_nav_fast.u16_entry_pos_sel_file=0;
8000c0e4:	4a c9       	lddpc	r9,8000c194 <fat_alloc_entry_free+0x130>
8000c0e6:	30 08       	mov	r8,0
8000c0e8:	b2 18       	st.h	r9[0x2],r8
            u8_nb_entry = u8_nb_entry_save;
8000c0ea:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000c0ee:	ef 68 ff f4 	st.b	r7[-12],r8
            continue;
8000c0f2:	c4 b8       	rjmp	8000c188 <fat_alloc_entry_free+0x124>
         }

         // Clean this new cluster
         // Remark: The fs_g_seg.u32_addr contains the new cluster value
         if( !fat_clear_cluster())
8000c0f4:	f0 1f 00 2e 	mcall	8000c1ac <fat_alloc_entry_free+0x148>
8000c0f8:	18 98       	mov	r8,r12
8000c0fa:	ec 18 00 01 	eorl	r8,0x1
8000c0fe:	5c 58       	castu.b	r8
8000c100:	c0 30       	breq	8000c106 <fat_alloc_entry_free+0xa2>
            return false;
8000c102:	30 08       	mov	r8,0
8000c104:	c4 38       	rjmp	8000c18a <fat_alloc_entry_free+0x126>

         continue;  // Rescan the directory list to find the new allocated sector
8000c106:	c4 18       	rjmp	8000c188 <fat_alloc_entry_free+0x124>
      }

      // Check entry
      ptr_entry = fat_get_ptr_entry();
8000c108:	f0 1f 00 2a 	mcall	8000c1b0 <fat_alloc_entry_free+0x14c>
8000c10c:	18 98       	mov	r8,r12
8000c10e:	ef 48 ff f8 	st.w	r7[-8],r8
      if ( FS_ENTRY_END == *ptr_entry )
8000c112:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000c116:	11 88       	ld.ub	r8,r8[0x0]
8000c118:	58 08       	cp.w	r8,0
8000c11a:	c0 e1       	brne	8000c136 <fat_alloc_entry_free+0xd2>
      {  // The entry is free
         u8_nb_entry--;
8000c11c:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000c120:	20 18       	sub	r8,1
8000c122:	ef 68 ff f4 	st.b	r7[-12],r8
         if( 0 == u8_nb_entry )
8000c126:	ef 39 ff f4 	ld.ub	r9,r7[-12]
8000c12a:	30 08       	mov	r8,0
8000c12c:	f0 09 18 00 	cp.b	r9,r8
8000c130:	c0 31       	brne	8000c136 <fat_alloc_entry_free+0xd2>
         {
            return true;  // All free entry is found
8000c132:	30 18       	mov	r8,1
8000c134:	c2 b8       	rjmp	8000c18a <fat_alloc_entry_free+0x126>
         }
      }

      // go to next entry
      fs_g_nav_fast.u16_entry_pos_sel_file++;
8000c136:	49 88       	lddpc	r8,8000c194 <fat_alloc_entry_free+0x130>
8000c138:	90 18       	ld.sh	r8,r8[0x2]
8000c13a:	2f f8       	sub	r8,-1
8000c13c:	5c 88       	casts.h	r8
8000c13e:	49 69       	lddpc	r9,8000c194 <fat_alloc_entry_free+0x130>
8000c140:	b2 18       	st.h	r9[0x2],r8
      if( 0 == fs_g_nav_fast.u16_entry_pos_sel_file )
8000c142:	49 58       	lddpc	r8,8000c194 <fat_alloc_entry_free+0x130>
8000c144:	90 18       	ld.sh	r8,r8[0x2]
8000c146:	58 08       	cp.w	r8,0
8000c148:	ca 01       	brne	8000c088 <fat_alloc_entry_free+0x24>
      {
         // Here, the directory have the maximum size
         // Garbage collector on entry file
         if( b_garbage_collector_used )
8000c14a:	ef 39 ff fe 	ld.ub	r9,r7[-2]
8000c14e:	30 08       	mov	r8,0
8000c150:	f0 09 18 00 	cp.b	r9,r8
8000c154:	c0 60       	breq	8000c160 <fat_alloc_entry_free+0xfc>
         {
            // Directory full (FAT Norm limit directory to 65535 entrys)
            fs_g_status = FS_ERR_NO_FREE_SPACE;
8000c156:	49 29       	lddpc	r9,8000c19c <fat_alloc_entry_free+0x138>
8000c158:	31 b8       	mov	r8,27
8000c15a:	b2 88       	st.b	r9[0x0],r8
            return false;
8000c15c:	30 08       	mov	r8,0
8000c15e:	c1 68       	rjmp	8000c18a <fat_alloc_entry_free+0x126>
         }
         if( !fat_garbage_collector_entry())
8000c160:	f0 1f 00 12 	mcall	8000c1a8 <fat_alloc_entry_free+0x144>
8000c164:	18 98       	mov	r8,r12
8000c166:	ec 18 00 01 	eorl	r8,0x1
8000c16a:	5c 58       	castu.b	r8
8000c16c:	c0 30       	breq	8000c172 <fat_alloc_entry_free+0x10e>
            return false;
8000c16e:	30 08       	mov	r8,0
8000c170:	c0 d8       	rjmp	8000c18a <fat_alloc_entry_free+0x126>
         b_garbage_collector_used = true;
8000c172:	30 18       	mov	r8,1
8000c174:	ef 68 ff fe 	st.b	r7[-2],r8
         fs_g_nav_fast.u16_entry_pos_sel_file=0;
8000c178:	48 79       	lddpc	r9,8000c194 <fat_alloc_entry_free+0x130>
8000c17a:	30 08       	mov	r8,0
8000c17c:	b2 18       	st.h	r9[0x2],r8
         u8_nb_entry = u8_nb_entry_save;
8000c17e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000c182:	ef 68 ff f4 	st.b	r7[-12],r8
         continue;
      }
   }  // end of while(1)
8000c186:	c8 2b       	rjmp	8000c08a <fat_alloc_entry_free+0x26>
8000c188:	c8 1b       	rjmp	8000c08a <fat_alloc_entry_free+0x26>
}
8000c18a:	10 9c       	mov	r12,r8
8000c18c:	2f dd       	sub	sp,-12
8000c18e:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c192:	00 00       	add	r0,r0
8000c194:	00 00       	add	r0,r0
8000c196:	0d d4       	ld.ub	r4,r6[0x5]
8000c198:	80 00       	ld.sh	r0,r0[0x0]
8000c19a:	a2 44       	st.h	r1[0x8],r4
8000c19c:	00 00       	add	r0,r0
8000c19e:	0d d8       	ld.ub	r8,r6[0x5]
8000c1a0:	00 00       	add	r0,r0
8000c1a2:	0e 30       	cp.w	r0,r7
8000c1a4:	80 00       	ld.sh	r0,r0[0x0]
8000c1a6:	c3 cc       	rcall	8000c21e <fat_garbage_collector_entry+0x6a>
8000c1a8:	80 00       	ld.sh	r0,r0[0x0]
8000c1aa:	c1 b4       	brge	8000c1e0 <fat_garbage_collector_entry+0x2c>
8000c1ac:	80 00       	ld.sh	r0,r0[0x0]
8000c1ae:	c6 74       	brge	8000c27c <fat_garbage_collector_entry+0xc8>
8000c1b0:	80 00       	ld.sh	r0,r0[0x0]
8000c1b2:	aa a0       	st.b	r5[0x2],r0

8000c1b4 <fat_garbage_collector_entry>:
//!
//! @return    false in case of error, see global value "fs_g_status" for more detail
//! @return    true otherwise
//!
bool fat_garbage_collector_entry( void )
{
8000c1b4:	eb cd 40 80 	pushm	r7,lr
8000c1b8:	1a 97       	mov	r7,sp
8000c1ba:	20 ad       	sub	sp,40
   _MEM_TYPE_SLOW_   uint8_t entry[ FS_SIZE_FILE_ENTRY ];
   PTR_CACHE ptr_entry;
   uint16_t u16_pos_old = 0;
8000c1bc:	30 08       	mov	r8,0
8000c1be:	ef 58 ff fc 	st.h	r7[-4],r8
   uint16_t u16_pos_new = 0;
8000c1c2:	30 08       	mov	r8,0
8000c1c4:	ef 58 ff fe 	st.h	r7[-2],r8

   // Loop in directory
   while( 1 )
   {
      // Go to old entry list
      fs_g_nav_fast.u16_entry_pos_sel_file=u16_pos_old;
8000c1c8:	4c 29       	lddpc	r9,8000c2d0 <fat_garbage_collector_entry+0x11c>
8000c1ca:	ef 08 ff fc 	ld.sh	r8,r7[-4]
8000c1ce:	b2 18       	st.h	r9[0x2],r8
      // Fill internal cache with a sector from directory
      if( !fat_read_dir() )
8000c1d0:	f0 1f 00 41 	mcall	8000c2d4 <fat_garbage_collector_entry+0x120>
8000c1d4:	18 98       	mov	r8,r12
8000c1d6:	ec 18 00 01 	eorl	r8,0x1
8000c1da:	5c 58       	castu.b	r8
8000c1dc:	c0 90       	breq	8000c1ee <fat_garbage_collector_entry+0x3a>
      {
         if( FS_ERR_OUT_LIST != fs_g_status )
8000c1de:	4b f8       	lddpc	r8,8000c2d8 <fat_garbage_collector_entry+0x124>
8000c1e0:	11 89       	ld.ub	r9,r8[0x0]
8000c1e2:	31 a8       	mov	r8,26
8000c1e4:	f0 09 18 00 	cp.b	r9,r8
8000c1e8:	c0 e0       	breq	8000c204 <fat_garbage_collector_entry+0x50>
            return false;
8000c1ea:	30 08       	mov	r8,0
8000c1ec:	c6 e8       	rjmp	8000c2c8 <fat_garbage_collector_entry+0x114>
         goto fat_garbage_collector_entry_endofdir;
      }

      // Check entry
      ptr_entry = fat_get_ptr_entry();
8000c1ee:	f0 1f 00 3c 	mcall	8000c2dc <fat_garbage_collector_entry+0x128>
8000c1f2:	18 98       	mov	r8,r12
8000c1f4:	ef 48 ff f8 	st.w	r7[-8],r8

      if ( FS_ENTRY_END == *ptr_entry )
8000c1f8:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000c1fc:	11 88       	ld.ub	r8,r8[0x0]
8000c1fe:	58 08       	cp.w	r8,0
8000c200:	c2 a1       	brne	8000c254 <fat_garbage_collector_entry+0xa0>
8000c202:	c0 28       	rjmp	8000c206 <fat_garbage_collector_entry+0x52>
      // Fill internal cache with a sector from directory
      if( !fat_read_dir() )
      {
         if( FS_ERR_OUT_LIST != fs_g_status )
            return false;
         goto fat_garbage_collector_entry_endofdir;
8000c204:	d7 03       	nop
      if ( FS_ENTRY_END == *ptr_entry )
      {
         // The entry is free, then it is the end of entry list
fat_garbage_collector_entry_endofdir:
         // Fill empty entry in old list
         fs_g_nav_fast.u16_entry_pos_sel_file=u16_pos_new;
8000c206:	4b 39       	lddpc	r9,8000c2d0 <fat_garbage_collector_entry+0x11c>
8000c208:	ef 08 ff fe 	ld.sh	r8,r7[-2]
8000c20c:	b2 18       	st.h	r9[0x2],r8
         while( fs_g_nav_fast.u16_entry_pos_sel_file != u16_pos_old )
8000c20e:	c1 a8       	rjmp	8000c242 <fat_garbage_collector_entry+0x8e>
         {
            // Fill internal cache with a sector from directory
            if( !fat_read_dir() )
8000c210:	f0 1f 00 31 	mcall	8000c2d4 <fat_garbage_collector_entry+0x120>
8000c214:	18 98       	mov	r8,r12
8000c216:	ec 18 00 01 	eorl	r8,0x1
8000c21a:	5c 58       	castu.b	r8
8000c21c:	c0 30       	breq	8000c222 <fat_garbage_collector_entry+0x6e>
               return false;
8000c21e:	30 08       	mov	r8,0
8000c220:	c5 48       	rjmp	8000c2c8 <fat_garbage_collector_entry+0x114>
            memset( fat_get_ptr_entry() , 0 , 32 );
8000c222:	f0 1f 00 2f 	mcall	8000c2dc <fat_garbage_collector_entry+0x128>
8000c226:	18 98       	mov	r8,r12
8000c228:	32 0a       	mov	r10,32
8000c22a:	30 0b       	mov	r11,0
8000c22c:	10 9c       	mov	r12,r8
8000c22e:	f0 1f 00 2d 	mcall	8000c2e0 <fat_garbage_collector_entry+0x12c>
            fat_cache_mark_sector_as_dirty();
8000c232:	f0 1f 00 2d 	mcall	8000c2e4 <fat_garbage_collector_entry+0x130>
            fs_g_nav_fast.u16_entry_pos_sel_file++;
8000c236:	4a 78       	lddpc	r8,8000c2d0 <fat_garbage_collector_entry+0x11c>
8000c238:	90 18       	ld.sh	r8,r8[0x2]
8000c23a:	2f f8       	sub	r8,-1
8000c23c:	5c 88       	casts.h	r8
8000c23e:	4a 59       	lddpc	r9,8000c2d0 <fat_garbage_collector_entry+0x11c>
8000c240:	b2 18       	st.h	r9[0x2],r8
      {
         // The entry is free, then it is the end of entry list
fat_garbage_collector_entry_endofdir:
         // Fill empty entry in old list
         fs_g_nav_fast.u16_entry_pos_sel_file=u16_pos_new;
         while( fs_g_nav_fast.u16_entry_pos_sel_file != u16_pos_old )
8000c242:	4a 48       	lddpc	r8,8000c2d0 <fat_garbage_collector_entry+0x11c>
8000c244:	90 18       	ld.sh	r8,r8[0x2]
8000c246:	ef 09 ff fc 	ld.sh	r9,r7[-4]
8000c24a:	f0 09 19 00 	cp.h	r9,r8
8000c24e:	ce 11       	brne	8000c210 <fat_garbage_collector_entry+0x5c>
               return false;
            memset( fat_get_ptr_entry() , 0 , 32 );
            fat_cache_mark_sector_as_dirty();
            fs_g_nav_fast.u16_entry_pos_sel_file++;
         }
         return true;  // End of garbage
8000c250:	30 18       	mov	r8,1
8000c252:	c3 b8       	rjmp	8000c2c8 <fat_garbage_collector_entry+0x114>
      }

      if ( FS_ENTRY_DEL != *ptr_entry )
8000c254:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000c258:	11 89       	ld.ub	r9,r8[0x0]
8000c25a:	3e 58       	mov	r8,-27
8000c25c:	f0 09 18 00 	cp.b	r9,r8
8000c260:	c2 e0       	breq	8000c2bc <fat_garbage_collector_entry+0x108>
      {
         // entry valid
         if( u16_pos_old != u16_pos_new )
8000c262:	ef 09 ff fc 	ld.sh	r9,r7[-4]
8000c266:	ef 08 ff fe 	ld.sh	r8,r7[-2]
8000c26a:	f0 09 19 00 	cp.h	r9,r8
8000c26e:	c2 20       	breq	8000c2b2 <fat_garbage_collector_entry+0xfe>
         {
            // A free space exist then move entry
            memcpy_ram2ram( entry, ptr_entry, FS_SIZE_FILE_ENTRY );
8000c270:	ee c8 00 28 	sub	r8,r7,40
8000c274:	32 0a       	mov	r10,32
8000c276:	ee fb ff f8 	ld.w	r11,r7[-8]
8000c27a:	10 9c       	mov	r12,r8
8000c27c:	f0 1f 00 1b 	mcall	8000c2e8 <fat_garbage_collector_entry+0x134>
            fs_g_nav_fast.u16_entry_pos_sel_file=u16_pos_new;
8000c280:	49 49       	lddpc	r9,8000c2d0 <fat_garbage_collector_entry+0x11c>
8000c282:	ef 08 ff fe 	ld.sh	r8,r7[-2]
8000c286:	b2 18       	st.h	r9[0x2],r8
            // Fill internal cache with a sector from directory
            if( !fat_read_dir() )
8000c288:	f0 1f 00 13 	mcall	8000c2d4 <fat_garbage_collector_entry+0x120>
8000c28c:	18 98       	mov	r8,r12
8000c28e:	ec 18 00 01 	eorl	r8,0x1
8000c292:	5c 58       	castu.b	r8
8000c294:	c0 30       	breq	8000c29a <fat_garbage_collector_entry+0xe6>
               return false;
8000c296:	30 08       	mov	r8,0
8000c298:	c1 88       	rjmp	8000c2c8 <fat_garbage_collector_entry+0x114>
            memcpy_ram2ram( fat_get_ptr_entry(), entry, FS_SIZE_FILE_ENTRY );
8000c29a:	f0 1f 00 11 	mcall	8000c2dc <fat_garbage_collector_entry+0x128>
8000c29e:	18 98       	mov	r8,r12
8000c2a0:	ee c9 00 28 	sub	r9,r7,40
8000c2a4:	32 0a       	mov	r10,32
8000c2a6:	12 9b       	mov	r11,r9
8000c2a8:	10 9c       	mov	r12,r8
8000c2aa:	f0 1f 00 10 	mcall	8000c2e8 <fat_garbage_collector_entry+0x134>
            fat_cache_mark_sector_as_dirty();
8000c2ae:	f0 1f 00 0e 	mcall	8000c2e4 <fat_garbage_collector_entry+0x130>
         }
         u16_pos_new++;
8000c2b2:	ef 08 ff fe 	ld.sh	r8,r7[-2]
8000c2b6:	2f f8       	sub	r8,-1
8000c2b8:	ef 58 ff fe 	st.h	r7[-2],r8
      }
      u16_pos_old++;
8000c2bc:	ef 08 ff fc 	ld.sh	r8,r7[-4]
8000c2c0:	2f f8       	sub	r8,-1
8000c2c2:	ef 58 ff fc 	st.h	r7[-4],r8
   }  // end of while(1)
8000c2c6:	c8 1b       	rjmp	8000c1c8 <fat_garbage_collector_entry+0x14>
}
8000c2c8:	10 9c       	mov	r12,r8
8000c2ca:	2f 6d       	sub	sp,-40
8000c2cc:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c2d0:	00 00       	add	r0,r0
8000c2d2:	0d d4       	ld.ub	r4,r6[0x5]
8000c2d4:	80 00       	ld.sh	r0,r0[0x0]
8000c2d6:	a2 44       	st.h	r1[0x8],r4
8000c2d8:	00 00       	add	r0,r0
8000c2da:	0d d8       	ld.ub	r8,r6[0x5]
8000c2dc:	80 00       	ld.sh	r0,r0[0x0]
8000c2de:	aa a0       	st.b	r5[0x2],r0
8000c2e0:	80 00       	ld.sh	r0,r0[0x0]
8000c2e2:	f5 82       	*unknown*
8000c2e4:	80 00       	ld.sh	r0,r0[0x0]
8000c2e6:	ab b8       	sbr	r8,0xb
8000c2e8:	80 00       	ld.sh	r0,r0[0x0]
8000c2ea:	f4 3a eb cd 	sub	r10,-660531

8000c2ec <fat_delete_file>:
//!
//! @return    false in case of error, see global value "fs_g_status" for more detail
//! @return    true otherwise
//!
bool  fat_delete_file( bool b_cluster_list )
{
8000c2ec:	eb cd 40 80 	pushm	r7,lr
8000c2f0:	1a 97       	mov	r7,sp
8000c2f2:	20 3d       	sub	sp,12
8000c2f4:	18 98       	mov	r8,r12
8000c2f6:	ef 68 ff f4 	st.b	r7[-12],r8
   PTR_CACHE ptr_entry;
   uint8_t u8_tmp;
   bool b_short_del = false;
8000c2fa:	30 08       	mov	r8,0
8000c2fc:	ef 68 ff ff 	st.b	r7[-1],r8

   // loop in directory
   while( 1 )
   {
      // Fill internal cache with a sector from directory
      if( !fat_read_dir() )
8000c300:	f0 1f 00 2d 	mcall	8000c3b4 <fat_delete_file+0xc8>
8000c304:	18 98       	mov	r8,r12
8000c306:	ec 18 00 01 	eorl	r8,0x1
8000c30a:	5c 58       	castu.b	r8
8000c30c:	c0 30       	breq	8000c312 <fat_delete_file+0x26>
         return false;
8000c30e:	30 08       	mov	r8,0
8000c310:	c4 d8       	rjmp	8000c3aa <fat_delete_file+0xbe>

      // Get pointer on the current entry
      ptr_entry = fat_get_ptr_entry();
8000c312:	f0 1f 00 2a 	mcall	8000c3b8 <fat_delete_file+0xcc>
8000c316:	18 98       	mov	r8,r12
8000c318:	ef 48 ff f8 	st.w	r7[-8],r8
      u8_tmp = ptr_entry[0];
8000c31c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000c320:	11 88       	ld.ub	r8,r8[0x0]
8000c322:	ef 68 ff fe 	st.b	r7[-2],r8

      if( (FS_ATTR_LFN_ENTRY != ptr_entry[11])
8000c326:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000c32a:	2f 58       	sub	r8,-11
8000c32c:	11 89       	ld.ub	r9,r8[0x0]
8000c32e:	30 f8       	mov	r8,15
8000c330:	f0 09 18 00 	cp.b	r9,r8
8000c334:	c0 70       	breq	8000c342 <fat_delete_file+0x56>
8000c336:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000c33a:	30 08       	mov	r8,0
8000c33c:	f0 09 18 00 	cp.b	r9,r8
8000c340:	c1 e1       	brne	8000c37c <fat_delete_file+0x90>
         // no long entry exist, then only a short entry to delete
         break;   // Go to delete cluster list
      }

      // Delete entry
      b_short_del = true;
8000c342:	30 18       	mov	r8,1
8000c344:	ef 68 ff ff 	st.b	r7[-1],r8
      ptr_entry[0] = FS_ENTRY_DEL;
8000c348:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000c34c:	3e 58       	mov	r8,-27
8000c34e:	b2 88       	st.b	r9[0x0],r8
      fat_cache_mark_sector_as_dirty();
8000c350:	f0 1f 00 1b 	mcall	8000c3bc <fat_delete_file+0xd0>

      if( (FS_ATTR_LFN_ENTRY == ptr_entry[11])
8000c354:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000c358:	2f 58       	sub	r8,-11
8000c35a:	11 89       	ld.ub	r9,r8[0x0]
8000c35c:	30 f8       	mov	r8,15
8000c35e:	f0 09 18 00 	cp.b	r9,r8
8000c362:	c0 61       	brne	8000c36e <fat_delete_file+0x82>
      &&  ( 0 != (FS_ENTRY_LFN_LAST & u8_tmp)) )
8000c364:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8000c368:	e2 18 00 40 	andl	r8,0x40,COH
      // Delete entry
      b_short_del = true;
      ptr_entry[0] = FS_ENTRY_DEL;
      fat_cache_mark_sector_as_dirty();

      if( (FS_ATTR_LFN_ENTRY == ptr_entry[11])
8000c36c:	c0 a1       	brne	8000c380 <fat_delete_file+0x94>
         // It is the last entry of long name
         break;   // Go to delete cluster list
      }

      // Go to previous entry
      fs_g_nav_fast.u16_entry_pos_sel_file--;
8000c36e:	49 58       	lddpc	r8,8000c3c0 <fat_delete_file+0xd4>
8000c370:	90 18       	ld.sh	r8,r8[0x2]
8000c372:	20 18       	sub	r8,1
8000c374:	5c 88       	casts.h	r8
8000c376:	49 39       	lddpc	r9,8000c3c0 <fat_delete_file+0xd4>
8000c378:	b2 18       	st.h	r9[0x2],r8
   }  // end of while(1)
8000c37a:	cc 3b       	rjmp	8000c300 <fat_delete_file+0x14>

      if( (FS_ATTR_LFN_ENTRY != ptr_entry[11])
      &&  (b_short_del) )
      {
         // no long entry exist, then only a short entry to delete
         break;   // Go to delete cluster list
8000c37c:	d7 03       	nop
8000c37e:	c0 28       	rjmp	8000c382 <fat_delete_file+0x96>

      if( (FS_ATTR_LFN_ENTRY == ptr_entry[11])
      &&  ( 0 != (FS_ENTRY_LFN_LAST & u8_tmp)) )
      {
         // It is the last entry of long name
         break;   // Go to delete cluster list
8000c380:	d7 03       	nop

      // Go to previous entry
      fs_g_nav_fast.u16_entry_pos_sel_file--;
   }  // end of while(1)

   if( b_cluster_list )
8000c382:	ef 39 ff f4 	ld.ub	r9,r7[-12]
8000c386:	30 08       	mov	r8,0
8000c388:	f0 09 18 00 	cp.b	r9,r8
8000c38c:	c0 e0       	breq	8000c3a8 <fat_delete_file+0xbc>
   {
      // Delete cluster list
      fs_g_nav_entry.u32_pos_in_file=0;      // Delete ALL list (start at begining)
8000c38e:	48 e8       	lddpc	r8,8000c3c4 <fat_delete_file+0xd8>
8000c390:	30 09       	mov	r9,0
8000c392:	91 39       	st.w	r8[0xc],r9
      if( !fat_read_file( FS_CLUST_ACT_CLR ))
8000c394:	30 3c       	mov	r12,3
8000c396:	f0 1f 00 0d 	mcall	8000c3c8 <fat_delete_file+0xdc>
8000c39a:	18 98       	mov	r8,r12
8000c39c:	ec 18 00 01 	eorl	r8,0x1
8000c3a0:	5c 58       	castu.b	r8
8000c3a2:	c0 30       	breq	8000c3a8 <fat_delete_file+0xbc>
         return false;
8000c3a4:	30 08       	mov	r8,0
8000c3a6:	c0 28       	rjmp	8000c3aa <fat_delete_file+0xbe>
   }

   return true;
8000c3a8:	30 18       	mov	r8,1
}
8000c3aa:	10 9c       	mov	r12,r8
8000c3ac:	2f dd       	sub	sp,-12
8000c3ae:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c3b2:	00 00       	add	r0,r0
8000c3b4:	80 00       	ld.sh	r0,r0[0x0]
8000c3b6:	a2 44       	st.h	r1[0x8],r4
8000c3b8:	80 00       	ld.sh	r0,r0[0x0]
8000c3ba:	aa a0       	st.b	r5[0x2],r0
8000c3bc:	80 00       	ld.sh	r0,r0[0x0]
8000c3be:	ab b8       	sbr	r8,0xb
8000c3c0:	00 00       	add	r0,r0
8000c3c2:	0d d4       	ld.ub	r4,r6[0x5]
8000c3c4:	00 00       	add	r0,r0
8000c3c6:	0b 48       	ld.w	r8,--r5
8000c3c8:	80 00       	ld.sh	r0,r0[0x0]
8000c3ca:	9f a0       	st.w	pc[0x28],r0

8000c3cc <fat_allocfreespace>:
//!   fs_g_seg.u32_addr          Return the first cluster value of the new cluster list
//!   fs_g_seg.u32_size_or_pos   The number of sector remaining (no allocated sectors, because disk fragmented or disk full)
//! @endverbatim
//!
bool  fat_allocfreespace( void )
{
8000c3cc:	eb cd 40 80 	pushm	r7,lr
8000c3d0:	1a 97       	mov	r7,sp
8000c3d2:	20 1d       	sub	sp,4
   // Flag to signal the first step which search the first free cluster of the new list
   bool first_cluster_free_is_found = false;
8000c3d4:	30 08       	mov	r8,0
8000c3d6:	ef 68 ff fe 	st.b	r7[-2],r8
   // If true then use a quick procedure but don't scan all FAT else use a slow procedure but scan all FAT
   bool b_quick_find = true;
8000c3da:	30 18       	mov	r8,1
8000c3dc:	ef 68 ff ff 	st.b	r7[-1],r8

   if( Is_fat32 )
8000c3e0:	4e f8       	lddpc	r8,8000c59c <fat_allocfreespace+0x1d0>
8000c3e2:	11 89       	ld.ub	r9,r8[0x0]
8000c3e4:	30 38       	mov	r8,3
8000c3e6:	f0 09 18 00 	cp.b	r9,r8
8000c3ea:	c0 b1       	brne	8000c400 <fat_allocfreespace+0x34>
   {
      // Clear info about free space
      if( !fat_write_fat32_FSInfo( 0xFFFFFFFF ))
8000c3ec:	3f fc       	mov	r12,-1
8000c3ee:	f0 1f 00 6d 	mcall	8000c5a0 <fat_allocfreespace+0x1d4>
8000c3f2:	18 98       	mov	r8,r12
8000c3f4:	ec 18 00 01 	eorl	r8,0x1
8000c3f8:	5c 58       	castu.b	r8
8000c3fa:	c0 30       	breq	8000c400 <fat_allocfreespace+0x34>
         return false;
8000c3fc:	30 08       	mov	r8,0
8000c3fe:	cc b8       	rjmp	8000c594 <fat_allocfreespace+0x1c8>
   }

   if( 0xFF == MSB0(fs_g_seg.u32_addr) )
8000c400:	4e 98       	lddpc	r8,8000c5a4 <fat_allocfreespace+0x1d8>
8000c402:	11 89       	ld.ub	r9,r8[0x0]
8000c404:	3f f8       	mov	r8,-1
8000c406:	f0 09 18 00 	cp.b	r9,r8
8000c40a:	c0 51       	brne	8000c414 <fat_allocfreespace+0x48>
   {
fat_allocfreespace_start:
      // New cluster list, then research at the beginning of FAT
      fs_g_cluster.u32_pos = 2;
8000c40c:	4e 78       	lddpc	r8,8000c5a8 <fat_allocfreespace+0x1dc>
8000c40e:	30 29       	mov	r9,2
8000c410:	91 09       	st.w	r8[0x0],r9
8000c412:	c0 78       	rjmp	8000c420 <fat_allocfreespace+0x54>
   }else{
      // Continue the cluster list then start after the end of the cluster list
      fs_g_cluster.u32_pos = fs_g_seg.u32_addr+1;
8000c414:	4e 48       	lddpc	r8,8000c5a4 <fat_allocfreespace+0x1d8>
8000c416:	70 08       	ld.w	r8,r8[0x0]
8000c418:	f0 c9 ff ff 	sub	r9,r8,-1
8000c41c:	4e 38       	lddpc	r8,8000c5a8 <fat_allocfreespace+0x1dc>
8000c41e:	91 09       	st.w	r8[0x0],r9
   }

   fat_clear_info_fat_mod();
8000c420:	f0 1f 00 63 	mcall	8000c5ac <fat_allocfreespace+0x1e0>

   // Read ALL FAT1
   for(
8000c424:	c9 78       	rjmp	8000c552 <fat_allocfreespace+0x186>
   ;     fs_g_cluster.u32_pos < fs_g_nav.u32_CountofCluster
   ;     fs_g_cluster.u32_pos++ )
   {
      // Get the value of the cluster
      if ( !fat_cluster_val( FS_CLUST_VAL_READ ) )
8000c426:	30 0c       	mov	r12,0
8000c428:	f0 1f 00 62 	mcall	8000c5b0 <fat_allocfreespace+0x1e4>
8000c42c:	18 98       	mov	r8,r12
8000c42e:	ec 18 00 01 	eorl	r8,0x1
8000c432:	5c 58       	castu.b	r8
8000c434:	c0 30       	breq	8000c43a <fat_allocfreespace+0x6e>
         return false;
8000c436:	30 08       	mov	r8,0
8000c438:	ca e8       	rjmp	8000c594 <fat_allocfreespace+0x1c8>

      if ( 0 == fs_g_cluster.u32_val )
8000c43a:	4d c8       	lddpc	r8,8000c5a8 <fat_allocfreespace+0x1dc>
8000c43c:	70 18       	ld.w	r8,r8[0x4]
8000c43e:	58 08       	cp.w	r8,0
8000c440:	c7 11       	brne	8000c522 <fat_allocfreespace+0x156>
      {
         // A free cluster is found
         fs_g_cluster.u32_val = fs_g_cluster.u32_pos;    // value of the cluster is the new free cluster
8000c442:	4d a8       	lddpc	r8,8000c5a8 <fat_allocfreespace+0x1dc>
8000c444:	70 09       	ld.w	r9,r8[0x0]
8000c446:	4d 98       	lddpc	r8,8000c5a8 <fat_allocfreespace+0x1dc>
8000c448:	91 19       	st.w	r8[0x4],r9
         if( true == first_cluster_free_is_found )
8000c44a:	ef 39 ff fe 	ld.ub	r9,r7[-2]
8000c44e:	30 08       	mov	r8,0
8000c450:	f0 09 18 00 	cp.b	r9,r8
8000c454:	c1 10       	breq	8000c476 <fat_allocfreespace+0xaa>
         {
            // Link the new cluster with previous cluster
            fs_g_cluster.u32_pos--;                      // select the previous cluster
8000c456:	4d 58       	lddpc	r8,8000c5a8 <fat_allocfreespace+0x1dc>
8000c458:	70 08       	ld.w	r8,r8[0x0]
8000c45a:	f0 c9 00 01 	sub	r9,r8,1
8000c45e:	4d 38       	lddpc	r8,8000c5a8 <fat_allocfreespace+0x1dc>
8000c460:	91 09       	st.w	r8[0x0],r9
            if ( !fat_cluster_val( FS_CLUST_VAL_WRITE ) )
8000c462:	30 1c       	mov	r12,1
8000c464:	f0 1f 00 53 	mcall	8000c5b0 <fat_allocfreespace+0x1e4>
8000c468:	18 98       	mov	r8,r12
8000c46a:	ec 18 00 01 	eorl	r8,0x1
8000c46e:	5c 58       	castu.b	r8
8000c470:	c3 20       	breq	8000c4d4 <fat_allocfreespace+0x108>
               return false;
8000c472:	30 08       	mov	r8,0
8000c474:	c9 08       	rjmp	8000c594 <fat_allocfreespace+0x1c8>
         }
         else
         {
            // It is the first cluster of the new list
            first_cluster_free_is_found = true;
8000c476:	30 18       	mov	r8,1
8000c478:	ef 68 ff fe 	st.b	r7[-2],r8

            if( 0xFF != MSB0(fs_g_seg.u32_addr) )
8000c47c:	4c a8       	lddpc	r8,8000c5a4 <fat_allocfreespace+0x1d8>
8000c47e:	11 89       	ld.ub	r9,r8[0x0]
8000c480:	3f f8       	mov	r8,-1
8000c482:	f0 09 18 00 	cp.b	r9,r8
8000c486:	c2 30       	breq	8000c4cc <fat_allocfreespace+0x100>
            {
               // Link this new cluster with the current cluster list
               // Select the last cluster of the current list
               if( 0 == fs_g_seg.u32_addr )
8000c488:	4c 78       	lddpc	r8,8000c5a4 <fat_allocfreespace+0x1d8>
8000c48a:	70 08       	ld.w	r8,r8[0x0]
8000c48c:	58 08       	cp.w	r8,0
8000c48e:	c1 11       	brne	8000c4b0 <fat_allocfreespace+0xe4>
               {  // The current cluster list is the cluster list of root directory
                  if( FS_TYPE_FAT_32 != fs_g_nav_fast.u8_type_fat )
8000c490:	4c 38       	lddpc	r8,8000c59c <fat_allocfreespace+0x1d0>
8000c492:	11 89       	ld.ub	r9,r8[0x0]
8000c494:	30 38       	mov	r8,3
8000c496:	f0 09 18 00 	cp.b	r9,r8
8000c49a:	c0 60       	breq	8000c4a6 <fat_allocfreespace+0xda>
                  {
                     // Impossible to increment ROOT DIR size of FAT12 or FAT16
                     fs_g_status = FS_ERR_NO_FREE_SPACE;
8000c49c:	4c 69       	lddpc	r9,8000c5b4 <fat_allocfreespace+0x1e8>
8000c49e:	31 b8       	mov	r8,27
8000c4a0:	b2 88       	st.b	r9[0x0],r8
                     return false;
8000c4a2:	30 08       	mov	r8,0
8000c4a4:	c7 88       	rjmp	8000c594 <fat_allocfreespace+0x1c8>
                  }
                  fs_g_cluster.u32_pos = fs_g_nav.rootdir.u32_cluster;
8000c4a6:	4c 58       	lddpc	r8,8000c5b8 <fat_allocfreespace+0x1ec>
8000c4a8:	70 69       	ld.w	r9,r8[0x18]
8000c4aa:	4c 08       	lddpc	r8,8000c5a8 <fat_allocfreespace+0x1dc>
8000c4ac:	91 09       	st.w	r8[0x0],r9
8000c4ae:	c0 58       	rjmp	8000c4b8 <fat_allocfreespace+0xec>
               }
               else
               {
                  fs_g_cluster.u32_pos = fs_g_seg.u32_addr;
8000c4b0:	4b d8       	lddpc	r8,8000c5a4 <fat_allocfreespace+0x1d8>
8000c4b2:	70 09       	ld.w	r9,r8[0x0]
8000c4b4:	4b d8       	lddpc	r8,8000c5a8 <fat_allocfreespace+0x1dc>
8000c4b6:	91 09       	st.w	r8[0x0],r9
               }
               if ( !fat_cluster_val( FS_CLUST_VAL_WRITE ) )
8000c4b8:	30 1c       	mov	r12,1
8000c4ba:	f0 1f 00 3e 	mcall	8000c5b0 <fat_allocfreespace+0x1e4>
8000c4be:	18 98       	mov	r8,r12
8000c4c0:	ec 18 00 01 	eorl	r8,0x1
8000c4c4:	5c 58       	castu.b	r8
8000c4c6:	c0 30       	breq	8000c4cc <fat_allocfreespace+0x100>
                  return false;
8000c4c8:	30 08       	mov	r8,0
8000c4ca:	c6 58       	rjmp	8000c594 <fat_allocfreespace+0x1c8>
            }  // else no writing the first cluster value in FAT because no current cluster list
            fs_g_seg.u32_addr = fs_g_cluster.u32_val;    // save the first cluster value
8000c4cc:	4b 78       	lddpc	r8,8000c5a8 <fat_allocfreespace+0x1dc>
8000c4ce:	70 19       	ld.w	r9,r8[0x4]
8000c4d0:	4b 58       	lddpc	r8,8000c5a4 <fat_allocfreespace+0x1d8>
8000c4d2:	91 09       	st.w	r8[0x0],r9
         }

         // At the new cluster position, set the flag end of list
         fs_g_cluster.u32_pos = fs_g_cluster.u32_val;    // Select the new cluster
8000c4d4:	4b 58       	lddpc	r8,8000c5a8 <fat_allocfreespace+0x1dc>
8000c4d6:	70 19       	ld.w	r9,r8[0x4]
8000c4d8:	4b 48       	lddpc	r8,8000c5a8 <fat_allocfreespace+0x1dc>
8000c4da:	91 09       	st.w	r8[0x0],r9
         fs_g_cluster.u32_val = FS_CLUST_VAL_EOL;        // Cluster value is the flag end of list
8000c4dc:	4b 38       	lddpc	r8,8000c5a8 <fat_allocfreespace+0x1dc>
8000c4de:	e0 69 ff ff 	mov	r9,65535
8000c4e2:	ea 19 0f ff 	orh	r9,0xfff
8000c4e6:	91 19       	st.w	r8[0x4],r9
         if ( !fat_cluster_val( FS_CLUST_VAL_WRITE ) )
8000c4e8:	30 1c       	mov	r12,1
8000c4ea:	f0 1f 00 32 	mcall	8000c5b0 <fat_allocfreespace+0x1e4>
8000c4ee:	18 98       	mov	r8,r12
8000c4f0:	ec 18 00 01 	eorl	r8,0x1
8000c4f4:	5c 58       	castu.b	r8
8000c4f6:	c0 30       	breq	8000c4fc <fat_allocfreespace+0x130>
            return false;
8000c4f8:	30 08       	mov	r8,0
8000c4fa:	c4 d8       	rjmp	8000c594 <fat_allocfreespace+0x1c8>

         // Compute the remaining sectors
         if ( fs_g_seg.u32_size_or_pos <= fs_g_nav.u8_BPB_SecPerClus )
8000c4fc:	4a a8       	lddpc	r8,8000c5a4 <fat_allocfreespace+0x1d8>
8000c4fe:	70 19       	ld.w	r9,r8[0x4]
8000c500:	4a e8       	lddpc	r8,8000c5b8 <fat_allocfreespace+0x1ec>
8000c502:	11 98       	ld.ub	r8,r8[0x1]
8000c504:	10 39       	cp.w	r9,r8
8000c506:	e0 8b 00 06 	brhi	8000c512 <fat_allocfreespace+0x146>
         {
            fs_g_seg.u32_size_or_pos = 0; // All space found
8000c50a:	4a 78       	lddpc	r8,8000c5a4 <fat_allocfreespace+0x1d8>
8000c50c:	30 09       	mov	r9,0
8000c50e:	91 19       	st.w	r8[0x4],r9
            break;                        // Stop loop
8000c510:	c2 a8       	rjmp	8000c564 <fat_allocfreespace+0x198>
         }
         fs_g_seg.u32_size_or_pos -= fs_g_nav.u8_BPB_SecPerClus;
8000c512:	4a 58       	lddpc	r8,8000c5a4 <fat_allocfreespace+0x1d8>
8000c514:	70 19       	ld.w	r9,r8[0x4]
8000c516:	4a 98       	lddpc	r8,8000c5b8 <fat_allocfreespace+0x1ec>
8000c518:	11 98       	ld.ub	r8,r8[0x1]
8000c51a:	10 19       	sub	r9,r8
8000c51c:	4a 28       	lddpc	r8,8000c5a4 <fat_allocfreespace+0x1d8>
8000c51e:	91 19       	st.w	r8[0x4],r9
8000c520:	c1 38       	rjmp	8000c546 <fat_allocfreespace+0x17a>
      }
      else
      {
         // The next cluster is not free
         if( true == first_cluster_free_is_found )
8000c522:	ef 39 ff fe 	ld.ub	r9,r7[-2]
8000c526:	30 08       	mov	r8,0
8000c528:	f0 09 18 00 	cp.b	r9,r8
8000c52c:	c1 b1       	brne	8000c562 <fat_allocfreespace+0x196>
         }
         else
         {
            // It is the first step to search the first free cluster
            // then ignore this cluster no free and continue search
            if( b_quick_find )
8000c52e:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000c532:	30 08       	mov	r8,0
8000c534:	f0 09 18 00 	cp.b	r9,r8
8000c538:	c0 70       	breq	8000c546 <fat_allocfreespace+0x17a>
            {
               fs_g_cluster.u32_pos += 500;
8000c53a:	49 c8       	lddpc	r8,8000c5a8 <fat_allocfreespace+0x1dc>
8000c53c:	70 08       	ld.w	r8,r8[0x0]
8000c53e:	f0 c9 fe 0c 	sub	r9,r8,-500
8000c542:	49 a8       	lddpc	r8,8000c5a8 <fat_allocfreespace+0x1dc>
8000c544:	91 09       	st.w	r8[0x0],r9
   fat_clear_info_fat_mod();

   // Read ALL FAT1
   for(
   ;     fs_g_cluster.u32_pos < fs_g_nav.u32_CountofCluster
   ;     fs_g_cluster.u32_pos++ )
8000c546:	49 98       	lddpc	r8,8000c5a8 <fat_allocfreespace+0x1dc>
8000c548:	70 08       	ld.w	r8,r8[0x0]
8000c54a:	f0 c9 ff ff 	sub	r9,r8,-1
8000c54e:	49 78       	lddpc	r8,8000c5a8 <fat_allocfreespace+0x1dc>
8000c550:	91 09       	st.w	r8[0x0],r9

   fat_clear_info_fat_mod();

   // Read ALL FAT1
   for(
   ;     fs_g_cluster.u32_pos < fs_g_nav.u32_CountofCluster
8000c552:	49 68       	lddpc	r8,8000c5a8 <fat_allocfreespace+0x1dc>
8000c554:	70 09       	ld.w	r9,r8[0x0]
8000c556:	49 98       	lddpc	r8,8000c5b8 <fat_allocfreespace+0x1ec>
8000c558:	70 38       	ld.w	r8,r8[0xc]
   }

   fat_clear_info_fat_mod();

   // Read ALL FAT1
   for(
8000c55a:	10 39       	cp.w	r9,r8
8000c55c:	fe 93 ff 65 	brlo	8000c426 <fat_allocfreespace+0x5a>
8000c560:	c0 28       	rjmp	8000c564 <fat_allocfreespace+0x198>
         // The next cluster is not free
         if( true == first_cluster_free_is_found )
         {
            // To have a segment memory continue, the cluster list must be continue
            // then stop allocation
            break;
8000c562:	d7 03       	nop
         }
      }
   }

   // End of alloc
   if( false == first_cluster_free_is_found )
8000c564:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8000c568:	ec 18 00 01 	eorl	r8,0x1
8000c56c:	5c 58       	castu.b	r8
8000c56e:	c1 00       	breq	8000c58e <fat_allocfreespace+0x1c2>
   {
      if( b_quick_find )
8000c570:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000c574:	30 08       	mov	r8,0
8000c576:	f0 09 18 00 	cp.b	r9,r8
8000c57a:	c0 50       	breq	8000c584 <fat_allocfreespace+0x1b8>
      {
         // Retry in normal mode to scan all FAT (= no quick mode)
         b_quick_find = false;
8000c57c:	30 08       	mov	r8,0
8000c57e:	ef 68 ff ff 	st.b	r7[-1],r8
         goto fat_allocfreespace_start;
8000c582:	c4 5b       	rjmp	8000c40c <fat_allocfreespace+0x40>
      }
      fs_g_status = FS_ERR_NO_FREE_SPACE; // NO FREE CLUSTER FIND
8000c584:	48 c9       	lddpc	r9,8000c5b4 <fat_allocfreespace+0x1e8>
8000c586:	31 b8       	mov	r8,27
8000c588:	b2 88       	st.b	r9[0x0],r8
      return false;
8000c58a:	30 08       	mov	r8,0
8000c58c:	c0 48       	rjmp	8000c594 <fat_allocfreespace+0x1c8>
   }

   return fat_update_fat2();
8000c58e:	f0 1f 00 0c 	mcall	8000c5bc <fat_allocfreespace+0x1f0>
8000c592:	18 98       	mov	r8,r12
}
8000c594:	10 9c       	mov	r12,r8
8000c596:	2f fd       	sub	sp,-4
8000c598:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c59c:	00 00       	add	r0,r0
8000c59e:	0d d4       	ld.ub	r4,r6[0x5]
8000c5a0:	80 00       	ld.sh	r0,r0[0x0]
8000c5a2:	b5 d8       	cbr	r8,0x15
8000c5a4:	00 00       	add	r0,r0
8000c5a6:	0e 30       	cp.w	r0,r7
8000c5a8:	00 00       	add	r0,r0
8000c5aa:	0e 28       	rsub	r8,r7
8000c5ac:	80 00       	ld.sh	r0,r0[0x0]
8000c5ae:	c5 c0       	breq	8000c666 <fat_update_fat2+0x86>
8000c5b0:	80 00       	ld.sh	r0,r0[0x0]
8000c5b2:	94 10       	ld.sh	r0,r10[0x2]
8000c5b4:	00 00       	add	r0,r0
8000c5b6:	0d d8       	ld.ub	r8,r6[0x5]
8000c5b8:	00 00       	add	r0,r0
8000c5ba:	0d 88       	ld.ub	r8,r6[0x0]
8000c5bc:	80 00       	ld.sh	r0,r0[0x0]
8000c5be:	c5 e0       	breq	8000c67a <fat_clear_cluster+0x6>

8000c5c0 <fat_clear_info_fat_mod>:

#if (FS_LEVEL_FEATURES > FSFEATURE_READ)
//! This function clears the cache information about FAT modifications
//!
void  fat_clear_info_fat_mod( void )
{
8000c5c0:	eb cd 40 80 	pushm	r7,lr
8000c5c4:	1a 97       	mov	r7,sp
   fs_g_u32_first_mod_fat = 0xFFFFFFFF;
8000c5c6:	48 58       	lddpc	r8,8000c5d8 <fat_clear_info_fat_mod+0x18>
8000c5c8:	3f f9       	mov	r9,-1
8000c5ca:	91 09       	st.w	r8[0x0],r9
   fs_g_u32_last_mod_fat = 0;
8000c5cc:	48 48       	lddpc	r8,8000c5dc <fat_clear_info_fat_mod+0x1c>
8000c5ce:	30 09       	mov	r9,0
8000c5d0:	91 09       	st.w	r8[0x0],r9
}
8000c5d2:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c5d6:	00 00       	add	r0,r0
8000c5d8:	00 00       	add	r0,r0
8000c5da:	0d bc       	ld.ub	r12,r6[0x3]
8000c5dc:	00 00       	add	r0,r0
8000c5de:	0b 84       	ld.ub	r4,r5[0x0]

8000c5e0 <fat_update_fat2>:
//!
//! @return    false in case of error, see global value "fs_g_status" for more detail
//! @return    true otherwise
//!
bool  fat_update_fat2( void )
{
8000c5e0:	eb cd 40 80 	pushm	r7,lr
8000c5e4:	1a 97       	mov	r7,sp
  while( fs_g_u32_first_mod_fat <= fs_g_u32_last_mod_fat )
8000c5e6:	c2 f8       	rjmp	8000c644 <fat_update_fat2+0x64>
  {
     // Compute the modification position of FAT 1
     fs_gu32_addrsector = fs_g_nav.u32_ptr_fat + fs_g_u32_first_mod_fat;
8000c5e8:	49 d8       	lddpc	r8,8000c65c <fat_update_fat2+0x7c>
8000c5ea:	70 49       	ld.w	r9,r8[0x10]
8000c5ec:	49 d8       	lddpc	r8,8000c660 <fat_update_fat2+0x80>
8000c5ee:	70 08       	ld.w	r8,r8[0x0]
8000c5f0:	10 09       	add	r9,r8
8000c5f2:	49 d8       	lddpc	r8,8000c664 <fat_update_fat2+0x84>
8000c5f4:	91 09       	st.w	r8[0x0],r9
     // Read FAT1
      if( !fat_cache_read_sector( true ))
8000c5f6:	30 1c       	mov	r12,1
8000c5f8:	f0 1f 00 1c 	mcall	8000c668 <fat_update_fat2+0x88>
8000c5fc:	18 98       	mov	r8,r12
8000c5fe:	ec 18 00 01 	eorl	r8,0x1
8000c602:	5c 58       	castu.b	r8
8000c604:	c0 30       	breq	8000c60a <fat_update_fat2+0x2a>
         return false;
8000c606:	30 08       	mov	r8,0
8000c608:	c2 68       	rjmp	8000c654 <fat_update_fat2+0x74>
     // Compute the modification position of FAT 2
     fs_gu32_addrsector = fs_g_nav.u32_ptr_fat + (fs_g_u32_first_mod_fat + fs_g_nav.u32_fat_size);
8000c60a:	49 58       	lddpc	r8,8000c65c <fat_update_fat2+0x7c>
8000c60c:	70 49       	ld.w	r9,r8[0x10]
8000c60e:	49 48       	lddpc	r8,8000c65c <fat_update_fat2+0x7c>
8000c610:	70 1a       	ld.w	r10,r8[0x4]
8000c612:	49 48       	lddpc	r8,8000c660 <fat_update_fat2+0x80>
8000c614:	70 08       	ld.w	r8,r8[0x0]
8000c616:	f4 08 00 08 	add	r8,r10,r8
8000c61a:	10 09       	add	r9,r8
8000c61c:	49 28       	lddpc	r8,8000c664 <fat_update_fat2+0x84>
8000c61e:	91 09       	st.w	r8[0x0],r9
     // Init the sector FAT2 with the previous sector of the FAT1
     if( !fat_cache_read_sector( false ))
8000c620:	30 0c       	mov	r12,0
8000c622:	f0 1f 00 12 	mcall	8000c668 <fat_update_fat2+0x88>
8000c626:	18 98       	mov	r8,r12
8000c628:	ec 18 00 01 	eorl	r8,0x1
8000c62c:	5c 58       	castu.b	r8
8000c62e:	c0 30       	breq	8000c634 <fat_update_fat2+0x54>
         return false;
8000c630:	30 08       	mov	r8,0
8000c632:	c1 18       	rjmp	8000c654 <fat_update_fat2+0x74>
     // Flag the sector FAT2 like modify
     fat_cache_mark_sector_as_dirty();
8000c634:	f0 1f 00 0e 	mcall	8000c66c <fat_update_fat2+0x8c>
     fs_g_u32_first_mod_fat++;
8000c638:	48 a8       	lddpc	r8,8000c660 <fat_update_fat2+0x80>
8000c63a:	70 08       	ld.w	r8,r8[0x0]
8000c63c:	f0 c9 ff ff 	sub	r9,r8,-1
8000c640:	48 88       	lddpc	r8,8000c660 <fat_update_fat2+0x80>
8000c642:	91 09       	st.w	r8[0x0],r9
//! @return    false in case of error, see global value "fs_g_status" for more detail
//! @return    true otherwise
//!
bool  fat_update_fat2( void )
{
  while( fs_g_u32_first_mod_fat <= fs_g_u32_last_mod_fat )
8000c644:	48 78       	lddpc	r8,8000c660 <fat_update_fat2+0x80>
8000c646:	70 09       	ld.w	r9,r8[0x0]
8000c648:	48 a8       	lddpc	r8,8000c670 <fat_update_fat2+0x90>
8000c64a:	70 08       	ld.w	r8,r8[0x0]
8000c64c:	10 39       	cp.w	r9,r8
8000c64e:	fe 98 ff cd 	brls	8000c5e8 <fat_update_fat2+0x8>
         return false;
     // Flag the sector FAT2 like modify
     fat_cache_mark_sector_as_dirty();
     fs_g_u32_first_mod_fat++;
  }
  return true;
8000c652:	30 18       	mov	r8,1
}
8000c654:	10 9c       	mov	r12,r8
8000c656:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c65a:	00 00       	add	r0,r0
8000c65c:	00 00       	add	r0,r0
8000c65e:	0d 88       	ld.ub	r8,r6[0x0]
8000c660:	00 00       	add	r0,r0
8000c662:	0d bc       	ld.ub	r12,r6[0x3]
8000c664:	00 00       	add	r0,r0
8000c666:	0b 44       	ld.w	r4,--r5
8000c668:	80 00       	ld.sh	r0,r0[0x0]
8000c66a:	aa c8       	st.b	r5[0x4],r8
8000c66c:	80 00       	ld.sh	r0,r0[0x0]
8000c66e:	ab b8       	sbr	r8,0xb
8000c670:	00 00       	add	r0,r0
8000c672:	0b 84       	ld.ub	r4,r5[0x0]

8000c674 <fat_clear_cluster>:
//! IN :
//!   fs_g_seg.u32_addr          Cluster value to clear
//! @endverbatim
//!
bool  fat_clear_cluster( void )
{
8000c674:	eb cd 40 80 	pushm	r7,lr
8000c678:	1a 97       	mov	r7,sp
8000c67a:	20 1d       	sub	sp,4
   uint8_t u8_loop;

   // Compute the cluster sector address
   fs_g_seg.u32_size_or_pos  = 0;   // Select the beginning of cluster
8000c67c:	4a 48       	lddpc	r8,8000c70c <fat_clear_cluster+0x98>
8000c67e:	30 09       	mov	r9,0
8000c680:	91 19       	st.w	r8[0x4],r9
   if( !fat_cluster_list( FS_CLUST_ACT_ONE, false ))
8000c682:	30 0b       	mov	r11,0
8000c684:	30 2c       	mov	r12,2
8000c686:	f0 1f 00 23 	mcall	8000c710 <fat_clear_cluster+0x9c>
8000c68a:	18 98       	mov	r8,r12
8000c68c:	ec 18 00 01 	eorl	r8,0x1
8000c690:	5c 58       	castu.b	r8
8000c692:	c0 30       	breq	8000c698 <fat_clear_cluster+0x24>
      return false;
8000c694:	30 08       	mov	r8,0
8000c696:	c3 68       	rjmp	8000c702 <fat_clear_cluster+0x8e>

   // Loop in the cluster (start at the end of cluster)
   fs_gu32_addrsector = fs_g_seg.u32_addr + (fs_g_nav.u8_BPB_SecPerClus -1);
8000c698:	49 d8       	lddpc	r8,8000c70c <fat_clear_cluster+0x98>
8000c69a:	70 09       	ld.w	r9,r8[0x0]
8000c69c:	49 e8       	lddpc	r8,8000c714 <fat_clear_cluster+0xa0>
8000c69e:	11 98       	ld.ub	r8,r8[0x1]
8000c6a0:	f2 08 00 08 	add	r8,r9,r8
8000c6a4:	f0 c9 00 01 	sub	r9,r8,1
8000c6a8:	49 c8       	lddpc	r8,8000c718 <fat_clear_cluster+0xa4>
8000c6aa:	91 09       	st.w	r8[0x0],r9
   for(  u8_loop = 0
   ;     fs_g_nav.u8_BPB_SecPerClus != u8_loop
8000c6ac:	30 08       	mov	r8,0
8000c6ae:	ef 68 ff ff 	st.b	r7[-1],r8
   if( !fat_cluster_list( FS_CLUST_ACT_ONE, false ))
      return false;

   // Loop in the cluster (start at the end of cluster)
   fs_gu32_addrsector = fs_g_seg.u32_addr + (fs_g_nav.u8_BPB_SecPerClus -1);
   for(  u8_loop = 0
8000c6b2:	c2 08       	rjmp	8000c6f2 <fat_clear_cluster+0x7e>
   ;     fs_g_nav.u8_BPB_SecPerClus != u8_loop
   ;     u8_loop++ )
   {
      // Update internal cache with cluster sector information but don't read data from memory
      if( !fat_cache_read_sector( false ))
8000c6b4:	30 0c       	mov	r12,0
8000c6b6:	f0 1f 00 1a 	mcall	8000c71c <fat_clear_cluster+0xa8>
8000c6ba:	18 98       	mov	r8,r12
8000c6bc:	ec 18 00 01 	eorl	r8,0x1
8000c6c0:	5c 58       	castu.b	r8
8000c6c2:	c0 30       	breq	8000c6c8 <fat_clear_cluster+0x54>
         return false;
8000c6c4:	30 08       	mov	r8,0
8000c6c6:	c1 e8       	rjmp	8000c702 <fat_clear_cluster+0x8e>

      if(0 == u8_loop)
8000c6c8:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000c6cc:	30 08       	mov	r8,0
8000c6ce:	f0 09 18 00 	cp.b	r9,r8
8000c6d2:	c0 31       	brne	8000c6d8 <fat_clear_cluster+0x64>
      {  // Clean internal cache (just for the sector)
         fat_cache_clear();
8000c6d4:	f0 1f 00 13 	mcall	8000c720 <fat_clear_cluster+0xac>
      }
      fat_cache_mark_sector_as_dirty();
8000c6d8:	f0 1f 00 13 	mcall	8000c724 <fat_clear_cluster+0xb0>
      fs_gu32_addrsector--;         // go to previous sector
8000c6dc:	48 f8       	lddpc	r8,8000c718 <fat_clear_cluster+0xa4>
8000c6de:	70 08       	ld.w	r8,r8[0x0]
8000c6e0:	f0 c9 00 01 	sub	r9,r8,1
8000c6e4:	48 d8       	lddpc	r8,8000c718 <fat_clear_cluster+0xa4>
8000c6e6:	91 09       	st.w	r8[0x0],r9

   // Loop in the cluster (start at the end of cluster)
   fs_gu32_addrsector = fs_g_seg.u32_addr + (fs_g_nav.u8_BPB_SecPerClus -1);
   for(  u8_loop = 0
   ;     fs_g_nav.u8_BPB_SecPerClus != u8_loop
   ;     u8_loop++ )
8000c6e8:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000c6ec:	2f f8       	sub	r8,-1
8000c6ee:	ef 68 ff ff 	st.b	r7[-1],r8
      return false;

   // Loop in the cluster (start at the end of cluster)
   fs_gu32_addrsector = fs_g_seg.u32_addr + (fs_g_nav.u8_BPB_SecPerClus -1);
   for(  u8_loop = 0
   ;     fs_g_nav.u8_BPB_SecPerClus != u8_loop
8000c6f2:	48 98       	lddpc	r8,8000c714 <fat_clear_cluster+0xa0>
8000c6f4:	11 98       	ld.ub	r8,r8[0x1]
   if( !fat_cluster_list( FS_CLUST_ACT_ONE, false ))
      return false;

   // Loop in the cluster (start at the end of cluster)
   fs_gu32_addrsector = fs_g_seg.u32_addr + (fs_g_nav.u8_BPB_SecPerClus -1);
   for(  u8_loop = 0
8000c6f6:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000c6fa:	f0 09 18 00 	cp.b	r9,r8
8000c6fe:	cd b1       	brne	8000c6b4 <fat_clear_cluster+0x40>
         fat_cache_clear();
      }
      fat_cache_mark_sector_as_dirty();
      fs_gu32_addrsector--;         // go to previous sector
   }
   return true;
8000c700:	30 18       	mov	r8,1
}
8000c702:	10 9c       	mov	r12,r8
8000c704:	2f fd       	sub	sp,-4
8000c706:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c70a:	00 00       	add	r0,r0
8000c70c:	00 00       	add	r0,r0
8000c70e:	0e 30       	cp.w	r0,r7
8000c710:	80 00       	ld.sh	r0,r0[0x0]
8000c712:	8f 60       	st.w	r7[0x18],r0
8000c714:	00 00       	add	r0,r0
8000c716:	0d 88       	ld.ub	r8,r6[0x0]
8000c718:	00 00       	add	r0,r0
8000c71a:	0b 44       	ld.w	r4,--r5
8000c71c:	80 00       	ld.sh	r0,r0[0x0]
8000c71e:	aa c8       	st.b	r5[0x4],r8
8000c720:	80 00       	ld.sh	r0,r0[0x0]
8000c722:	ab 98       	lsr	r8,0xb
8000c724:	80 00       	ld.sh	r0,r0[0x0]
8000c726:	ab b8       	sbr	r8,0xb

8000c728 <file_open>:
//!
//! @return    false in case of error, see global value "fs_g_status" for more detail
//! @return    true otherwise
//!
bool  file_open( uint8_t fopen_mode )
{
8000c728:	eb cd 40 80 	pushm	r7,lr
8000c72c:	1a 97       	mov	r7,sp
8000c72e:	20 1d       	sub	sp,4
8000c730:	18 98       	mov	r8,r12
8000c732:	ef 68 ff fc 	st.b	r7[-4],r8
   if( !fat_check_mount_select_noopen())
8000c736:	f0 1f 00 31 	mcall	8000c7f8 <file_open+0xd0>
8000c73a:	18 98       	mov	r8,r12
8000c73c:	ec 18 00 01 	eorl	r8,0x1
8000c740:	5c 58       	castu.b	r8
8000c742:	c0 30       	breq	8000c748 <file_open+0x20>
      return false;
8000c744:	30 08       	mov	r8,0
8000c746:	c5 58       	rjmp	8000c7f0 <file_open+0xc8>

   if( !fat_check_is_file())
8000c748:	f0 1f 00 2d 	mcall	8000c7fc <file_open+0xd4>
8000c74c:	18 98       	mov	r8,r12
8000c74e:	ec 18 00 01 	eorl	r8,0x1
8000c752:	5c 58       	castu.b	r8
8000c754:	c0 30       	breq	8000c75a <file_open+0x32>
      return false;
8000c756:	30 08       	mov	r8,0
8000c758:	c4 c8       	rjmp	8000c7f0 <file_open+0xc8>

   if(FOPEN_WRITE_ACCESS & fopen_mode)
8000c75a:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000c75e:	e2 18 00 02 	andl	r8,0x2,COH
8000c762:	c2 30       	breq	8000c7a8 <file_open+0x80>
   {
      if( !fat_check_nav_access_file( true ) )
8000c764:	30 1c       	mov	r12,1
8000c766:	f0 1f 00 27 	mcall	8000c800 <file_open+0xd8>
8000c76a:	18 98       	mov	r8,r12
8000c76c:	ec 18 00 01 	eorl	r8,0x1
8000c770:	5c 58       	castu.b	r8
8000c772:	c0 30       	breq	8000c778 <file_open+0x50>
         return false;
8000c774:	30 08       	mov	r8,0
8000c776:	c3 d8       	rjmp	8000c7f0 <file_open+0xc8>
#if (FSFEATURE_WRITE == (FS_LEVEL_FEATURES & FSFEATURE_WRITE))
      if (FS_ATTR_READ_ONLY & fs_g_nav_entry.u8_attr)
8000c778:	4a 38       	lddpc	r8,8000c804 <file_open+0xdc>
8000c77a:	11 a8       	ld.ub	r8,r8[0x2]
8000c77c:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000c780:	5c 58       	castu.b	r8
8000c782:	c0 60       	breq	8000c78e <file_open+0x66>
      {
         fs_g_status = FS_ERR_READ_ONLY;  // File is read only
8000c784:	4a 19       	lddpc	r9,8000c808 <file_open+0xe0>
8000c786:	31 58       	mov	r8,21
8000c788:	b2 88       	st.b	r9[0x0],r8
         return false;
8000c78a:	30 08       	mov	r8,0
8000c78c:	c3 28       	rjmp	8000c7f0 <file_open+0xc8>
      }
      if( mem_wr_protect( fs_g_nav.u8_lun  ))
8000c78e:	4a 08       	lddpc	r8,8000c80c <file_open+0xe4>
8000c790:	11 88       	ld.ub	r8,r8[0x0]
8000c792:	10 9c       	mov	r12,r8
8000c794:	f0 1f 00 1f 	mcall	8000c810 <file_open+0xe8>
8000c798:	18 98       	mov	r8,r12
8000c79a:	58 08       	cp.w	r8,0
8000c79c:	c1 00       	breq	8000c7bc <file_open+0x94>
      {
         fs_g_status = FS_LUN_WP;  // Disk read only
8000c79e:	49 b9       	lddpc	r9,8000c808 <file_open+0xe0>
8000c7a0:	31 48       	mov	r8,20
8000c7a2:	b2 88       	st.b	r9[0x0],r8
         return false;
8000c7a4:	30 08       	mov	r8,0
8000c7a6:	c2 58       	rjmp	8000c7f0 <file_open+0xc8>
      return false;
#endif  // FS_LEVEL_FEATURES
   }
   else
   {
      if( !fat_check_nav_access_file( false ) )
8000c7a8:	30 0c       	mov	r12,0
8000c7aa:	f0 1f 00 16 	mcall	8000c800 <file_open+0xd8>
8000c7ae:	18 98       	mov	r8,r12
8000c7b0:	ec 18 00 01 	eorl	r8,0x1
8000c7b4:	5c 58       	castu.b	r8
8000c7b6:	c0 30       	breq	8000c7bc <file_open+0x94>
         return false;
8000c7b8:	30 08       	mov	r8,0
8000c7ba:	c1 b8       	rjmp	8000c7f0 <file_open+0xc8>
   }

   if(FOPEN_CLEAR_SIZE & fopen_mode)
8000c7bc:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000c7c0:	e2 18 00 04 	andl	r8,0x4,COH
8000c7c4:	c0 40       	breq	8000c7cc <file_open+0xa4>
   {
      fs_g_nav_entry.u32_size    = 0;     // The size is null
8000c7c6:	49 08       	lddpc	r8,8000c804 <file_open+0xdc>
8000c7c8:	30 09       	mov	r9,0
8000c7ca:	91 29       	st.w	r8[0x8],r9
   }
   if(FOPEN_CLEAR_PTR & fopen_mode)
8000c7cc:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000c7d0:	e2 18 00 08 	andl	r8,0x8,COH
8000c7d4:	c0 50       	breq	8000c7de <file_open+0xb6>
   {
      fs_g_nav_entry.u32_pos_in_file = 0;
8000c7d6:	48 c8       	lddpc	r8,8000c804 <file_open+0xdc>
8000c7d8:	30 09       	mov	r9,0
8000c7da:	91 39       	st.w	r8[0xc],r9
8000c7dc:	c0 58       	rjmp	8000c7e6 <file_open+0xbe>
   }
   else
   {  // Go to at the end of file
      fs_g_nav_entry.u32_pos_in_file = fs_g_nav_entry.u32_size;
8000c7de:	48 a8       	lddpc	r8,8000c804 <file_open+0xdc>
8000c7e0:	70 29       	ld.w	r9,r8[0x8]
8000c7e2:	48 98       	lddpc	r8,8000c804 <file_open+0xdc>
8000c7e4:	91 39       	st.w	r8[0xc],r9
   }
   fs_g_nav_entry.u8_open_mode = fopen_mode;
8000c7e6:	48 89       	lddpc	r9,8000c804 <file_open+0xdc>
8000c7e8:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000c7ec:	b2 88       	st.b	r9[0x0],r8
   return true;
8000c7ee:	30 18       	mov	r8,1
}
8000c7f0:	10 9c       	mov	r12,r8
8000c7f2:	2f fd       	sub	sp,-4
8000c7f4:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c7f8:	80 00       	ld.sh	r0,r0[0x0]
8000c7fa:	8e 78       	ld.sh	r8,r7[0xe]
8000c7fc:	80 00       	ld.sh	r0,r0[0x0]
8000c7fe:	8f 2c       	st.w	r7[0x8],r12
8000c800:	80 00       	ld.sh	r0,r0[0x0]
8000c802:	ac 44       	st.h	r6[0x8],r4
8000c804:	00 00       	add	r0,r0
8000c806:	0b 48       	ld.w	r8,--r5
8000c808:	00 00       	add	r0,r0
8000c80a:	0d d8       	ld.ub	r8,r6[0x5]
8000c80c:	00 00       	add	r0,r0
8000c80e:	0d 88       	ld.ub	r8,r6[0x0]
8000c810:	80 00       	ld.sh	r0,r0[0x0]
8000c812:	ae dc       	st.b	r7[0x5],r12

8000c814 <file_putc>:
//!
//! @return    false in case of error, see global value "fs_g_status" for more detail
//! @return    true otherwise
//!
bool  file_putc( uint8_t u8_byte )
{
8000c814:	eb cd 40 80 	pushm	r7,lr
8000c818:	1a 97       	mov	r7,sp
8000c81a:	20 1d       	sub	sp,4
8000c81c:	18 98       	mov	r8,r12
8000c81e:	ef 68 ff fc 	st.b	r7[-4],r8
   if( !fat_check_mount_select_open())
8000c822:	f0 1f 00 20 	mcall	8000c8a0 <file_putc+0x8c>
8000c826:	18 98       	mov	r8,r12
8000c828:	ec 18 00 01 	eorl	r8,0x1
8000c82c:	5c 58       	castu.b	r8
8000c82e:	c0 30       	breq	8000c834 <file_putc+0x20>
      return false;
8000c830:	30 08       	mov	r8,0
8000c832:	c3 38       	rjmp	8000c898 <file_putc+0x84>

   if(!(FOPEN_WRITE_ACCESS & fs_g_nav_entry.u8_open_mode))
8000c834:	49 c8       	lddpc	r8,8000c8a4 <file_putc+0x90>
8000c836:	11 88       	ld.ub	r8,r8[0x0]
8000c838:	e2 18 00 02 	andl	r8,0x2,COH
8000c83c:	c0 61       	brne	8000c848 <file_putc+0x34>
   {
      fs_g_status = FS_ERR_READ_ONLY;
8000c83e:	49 b9       	lddpc	r9,8000c8a8 <file_putc+0x94>
8000c840:	31 58       	mov	r8,21
8000c842:	b2 88       	st.b	r9[0x0],r8
      return false;
8000c844:	30 08       	mov	r8,0
8000c846:	c2 98       	rjmp	8000c898 <file_putc+0x84>
   }

   if( !fat_write_file( FS_CLUST_ACT_ONE  , 1 ))
8000c848:	30 1b       	mov	r11,1
8000c84a:	30 2c       	mov	r12,2
8000c84c:	f0 1f 00 18 	mcall	8000c8ac <file_putc+0x98>
8000c850:	18 98       	mov	r8,r12
8000c852:	ec 18 00 01 	eorl	r8,0x1
8000c856:	5c 58       	castu.b	r8
8000c858:	c0 30       	breq	8000c85e <file_putc+0x4a>
      return false;
8000c85a:	30 08       	mov	r8,0
8000c85c:	c1 e8       	rjmp	8000c898 <file_putc+0x84>

   // Write the data in the internal cache
   fat_cache_mark_sector_as_dirty();
8000c85e:	f0 1f 00 15 	mcall	8000c8b0 <file_putc+0x9c>
   fs_g_sector[ fs_g_nav_entry.u32_pos_in_file & FS_512B_MASK ]    = u8_byte;
8000c862:	49 18       	lddpc	r8,8000c8a4 <file_putc+0x90>
8000c864:	70 38       	ld.w	r8,r8[0xc]
8000c866:	f3 d8 c0 09 	bfextu	r9,r8,0x0,0x9
8000c86a:	49 3a       	lddpc	r10,8000c8b4 <file_putc+0xa0>
8000c86c:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000c870:	f4 09 0b 08 	st.b	r10[r9],r8
   fs_g_nav_entry.u32_pos_in_file++;
8000c874:	48 c8       	lddpc	r8,8000c8a4 <file_putc+0x90>
8000c876:	70 38       	ld.w	r8,r8[0xc]
8000c878:	f0 c9 ff ff 	sub	r9,r8,-1
8000c87c:	48 a8       	lddpc	r8,8000c8a4 <file_putc+0x90>
8000c87e:	91 39       	st.w	r8[0xc],r9

   // Update the file size
   if( fs_g_nav_entry.u32_pos_in_file > fs_g_nav_entry.u32_size )
8000c880:	48 98       	lddpc	r8,8000c8a4 <file_putc+0x90>
8000c882:	70 39       	ld.w	r9,r8[0xc]
8000c884:	48 88       	lddpc	r8,8000c8a4 <file_putc+0x90>
8000c886:	70 28       	ld.w	r8,r8[0x8]
8000c888:	10 39       	cp.w	r9,r8
8000c88a:	e0 88 00 06 	brls	8000c896 <file_putc+0x82>
   {
      fs_g_nav_entry.u32_size = fs_g_nav_entry.u32_pos_in_file;
8000c88e:	48 68       	lddpc	r8,8000c8a4 <file_putc+0x90>
8000c890:	70 39       	ld.w	r9,r8[0xc]
8000c892:	48 58       	lddpc	r8,8000c8a4 <file_putc+0x90>
8000c894:	91 29       	st.w	r8[0x8],r9
   }
   return true;
8000c896:	30 18       	mov	r8,1
}
8000c898:	10 9c       	mov	r12,r8
8000c89a:	2f fd       	sub	sp,-4
8000c89c:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c8a0:	80 00       	ld.sh	r0,r0[0x0]
8000c8a2:	8e bc       	ld.uh	r12,r7[0x6]
8000c8a4:	00 00       	add	r0,r0
8000c8a6:	0b 48       	ld.w	r8,--r5
8000c8a8:	00 00       	add	r0,r0
8000c8aa:	0d d8       	ld.ub	r8,r6[0x5]
8000c8ac:	80 00       	ld.sh	r0,r0[0x0]
8000c8ae:	a0 c8       	st.b	r0[0x4],r8
8000c8b0:	80 00       	ld.sh	r0,r0[0x0]
8000c8b2:	ab b8       	sbr	r8,0xb
8000c8b4:	00 00       	add	r0,r0
8000c8b6:	0b 88       	ld.ub	r8,r5[0x0]

8000c8b8 <file_close>:


//! This function closes the file
//!
void  file_close( void )
{
8000c8b8:	eb cd 40 80 	pushm	r7,lr
8000c8bc:	1a 97       	mov	r7,sp
   // If a file is opened, then close this one
   if( fat_check_mount_select_open() )
8000c8be:	f0 1f 00 0f 	mcall	8000c8f8 <file_close+0x40>
8000c8c2:	18 98       	mov	r8,r12
8000c8c4:	58 08       	cp.w	r8,0
8000c8c6:	c1 60       	breq	8000c8f2 <file_close+0x3a>
   {

#if (FSFEATURE_WRITE == (FS_LEVEL_FEATURES & FSFEATURE_WRITE))
      if( FOPEN_WRITE_ACCESS & fs_g_nav_entry.u8_open_mode )
8000c8c8:	48 d8       	lddpc	r8,8000c8fc <file_close+0x44>
8000c8ca:	11 88       	ld.ub	r8,r8[0x0]
8000c8cc:	e2 18 00 02 	andl	r8,0x2,COH
8000c8d0:	c0 c0       	breq	8000c8e8 <file_close+0x30>
      {
         // Write file information
         if( !fat_read_dir() )
8000c8d2:	f0 1f 00 0c 	mcall	8000c900 <file_close+0x48>
8000c8d6:	18 98       	mov	r8,r12
8000c8d8:	ec 18 00 01 	eorl	r8,0x1
8000c8dc:	5c 58       	castu.b	r8
8000c8de:	c0 91       	brne	8000c8f0 <file_close+0x38>
            return;           // error
         fat_write_entry_file();
8000c8e0:	f0 1f 00 09 	mcall	8000c904 <file_close+0x4c>
         fat_cache_flush();   // In case of error during writing data, flush the data before exit function
8000c8e4:	f0 1f 00 09 	mcall	8000c908 <file_close+0x50>
      }
#endif  // FS_LEVEL_FEATURES
      Fat_file_close();
8000c8e8:	48 59       	lddpc	r9,8000c8fc <file_close+0x44>
8000c8ea:	30 08       	mov	r8,0
8000c8ec:	b2 88       	st.b	r9[0x0],r8
8000c8ee:	c0 28       	rjmp	8000c8f2 <file_close+0x3a>
#if (FSFEATURE_WRITE == (FS_LEVEL_FEATURES & FSFEATURE_WRITE))
      if( FOPEN_WRITE_ACCESS & fs_g_nav_entry.u8_open_mode )
      {
         // Write file information
         if( !fat_read_dir() )
            return;           // error
8000c8f0:	d7 03       	nop
         fat_cache_flush();   // In case of error during writing data, flush the data before exit function
      }
#endif  // FS_LEVEL_FEATURES
      Fat_file_close();
   }
}
8000c8f2:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c8f6:	00 00       	add	r0,r0
8000c8f8:	80 00       	ld.sh	r0,r0[0x0]
8000c8fa:	8e bc       	ld.uh	r12,r7[0x6]
8000c8fc:	00 00       	add	r0,r0
8000c8fe:	0b 48       	ld.w	r8,--r5
8000c900:	80 00       	ld.sh	r0,r0[0x0]
8000c902:	a2 44       	st.h	r1[0x8],r4
8000c904:	80 00       	ld.sh	r0,r0[0x0]
8000c906:	a5 10       	ld.d	r0,--r2
8000c908:	80 00       	ld.sh	r0,r0[0x0]
8000c90a:	ab d0       	cbr	r0,0xb

8000c90c <nav_reset>:
//! @verbatim
//! Call this at the program startup or before a new session (e.g. USB Device exit)
//! @endverbatim
//!
void  nav_reset( void )
{
8000c90c:	eb cd 40 80 	pushm	r7,lr
8000c910:	1a 97       	mov	r7,sp
8000c912:	20 1d       	sub	sp,4
#if ( (FS_ASCII   == true) && (FS_UNICODE == true))
   g_b_unicode = true;
#endif
   g_b_string_length = false;
8000c914:	49 99       	lddpc	r9,8000c978 <nav_reset+0x6c>
8000c916:	30 08       	mov	r8,0
8000c918:	b2 88       	st.b	r9[0x0],r8
   g_b_no_check_disk = false;
8000c91a:	49 99       	lddpc	r9,8000c97c <nav_reset+0x70>
8000c91c:	30 08       	mov	r8,0
8000c91e:	b2 88       	st.b	r9[0x0],r8

   fat_cache_reset();
8000c920:	f0 1f 00 18 	mcall	8000c980 <nav_reset+0x74>
   fat_cache_clusterlist_reset();
8000c924:	f0 1f 00 18 	mcall	8000c984 <nav_reset+0x78>

#if (FS_NB_NAVIGATOR > 1)
   {
   uint8_t i;
   // Reset variables of each navigators
   for( i=0 ; i!=FS_NB_NAVIGATOR ; i++ )
8000c928:	30 08       	mov	r8,0
8000c92a:	ef 68 ff ff 	st.b	r7[-1],r8
8000c92e:	c1 88       	rjmp	8000c95e <nav_reset+0x52>
   {
      nav_select(i);
8000c930:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000c934:	10 9c       	mov	r12,r8
8000c936:	f0 1f 00 15 	mcall	8000c988 <nav_reset+0x7c>
      fs_g_nav_fast.u8_type_fat = FS_TYPE_FAT_UNM; // By default the fat isn't mounted
8000c93a:	49 59       	lddpc	r9,8000c98c <nav_reset+0x80>
8000c93c:	30 08       	mov	r8,0
8000c93e:	b2 88       	st.b	r9[0x0],r8
      fs_g_nav.u8_lun = 0xFF;                      // By default don't select a drive
8000c940:	49 49       	lddpc	r9,8000c990 <nav_reset+0x84>
8000c942:	3f f8       	mov	r8,-1
8000c944:	b2 88       	st.b	r9[0x0],r8
#if (FS_MULTI_PARTITION  ==  true)
      fs_g_nav.u8_partition=0;                     // By default select the first partition
#endif
      Fat_file_close();                            // By default no file is opened
8000c946:	49 49       	lddpc	r9,8000c994 <nav_reset+0x88>
8000c948:	30 08       	mov	r8,0
8000c94a:	b2 88       	st.b	r9[0x0],r8
      fs_g_nav.b_mode_nav_single = false;          // By default display files and directories
8000c94c:	49 19       	lddpc	r9,8000c990 <nav_reset+0x84>
8000c94e:	30 08       	mov	r8,0
8000c950:	f3 68 00 2d 	st.b	r9[45],r8

#if (FS_NB_NAVIGATOR > 1)
   {
   uint8_t i;
   // Reset variables of each navigators
   for( i=0 ; i!=FS_NB_NAVIGATOR ; i++ )
8000c954:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000c958:	2f f8       	sub	r8,-1
8000c95a:	ef 68 ff ff 	st.b	r7[-1],r8
8000c95e:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000c962:	30 28       	mov	r8,2
8000c964:	f0 09 18 00 	cp.b	r9,r8
8000c968:	ce 41       	brne	8000c930 <nav_reset+0x24>
#endif
      Fat_file_close();                            // By default no file is opened
      fs_g_nav.b_mode_nav_single = false;          // By default display files and directories
   }
   // By default select the navigator 0
   fs_g_u8_nav_selected = 0;
8000c96a:	48 c9       	lddpc	r9,8000c998 <nav_reset+0x8c>
8000c96c:	30 08       	mov	r8,0
8000c96e:	b2 88       	st.b	r9[0x0],r8
#  if (FS_MULTI_PARTITION  ==  true)
   fs_g_nav.u8_partition=0;                        // By default select the first partition
#  endif
   Fat_file_close();                               // By default no file is opened
#endif // (FS_NB_NAVIGATOR > 1)
}
8000c970:	2f fd       	sub	sp,-4
8000c972:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c976:	00 00       	add	r0,r0
8000c978:	00 00       	add	r0,r0
8000c97a:	0d d9       	ld.ub	r9,r6[0x5]
8000c97c:	00 00       	add	r0,r0
8000c97e:	0b 5a       	ld.sh	r10,--r5
8000c980:	80 00       	ld.sh	r0,r0[0x0]
8000c982:	ab 74       	lsl	r4,0xb
8000c984:	80 00       	ld.sh	r0,r0[0x0]
8000c986:	99 f4       	st.w	r12[0x3c],r4
8000c988:	80 00       	ld.sh	r0,r0[0x0]
8000c98a:	c9 9c       	rcall	8000cabc <nav_partition_mount+0x40>
8000c98c:	00 00       	add	r0,r0
8000c98e:	0d d4       	ld.ub	r4,r6[0x5]
8000c990:	00 00       	add	r0,r0
8000c992:	0d 88       	ld.ub	r8,r6[0x0]
8000c994:	00 00       	add	r0,r0
8000c996:	0b 48       	ld.w	r8,--r5
8000c998:	00 00       	add	r0,r0
8000c99a:	0e 50       	eor	r0,r7

8000c99c <nav_select>:
//!
//! @return    false if ID navigator don't exist
//! @return    true otherwise
//!
bool  nav_select( uint8_t u8_idnav )
{
8000c99c:	eb cd 40 80 	pushm	r7,lr
8000c9a0:	1a 97       	mov	r7,sp
8000c9a2:	20 1d       	sub	sp,4
8000c9a4:	18 98       	mov	r8,r12
8000c9a6:	ef 68 ff fc 	st.b	r7[-4],r8
   if( FS_NB_NAVIGATOR <= u8_idnav )
8000c9aa:	ef 39 ff fc 	ld.ub	r9,r7[-4]
8000c9ae:	30 18       	mov	r8,1
8000c9b0:	f0 09 18 00 	cp.b	r9,r8
8000c9b4:	e0 88 00 07 	brls	8000c9c2 <nav_select+0x26>
   {
      fs_g_status = FS_ERR_BAD_NAV;             // The navigator doesn't exist
8000c9b8:	49 09       	lddpc	r9,8000c9f8 <nav_select+0x5c>
8000c9ba:	32 78       	mov	r8,39
8000c9bc:	b2 88       	st.b	r9[0x0],r8
      return false;
8000c9be:	30 08       	mov	r8,0
8000c9c0:	c1 78       	rjmp	8000c9ee <nav_select+0x52>
   }
#if (FS_NB_NAVIGATOR > 1)
   if( fs_g_u8_nav_selected != u8_idnav )
8000c9c2:	48 f8       	lddpc	r8,8000c9fc <nav_select+0x60>
8000c9c4:	11 88       	ld.ub	r8,r8[0x0]
8000c9c6:	ef 39 ff fc 	ld.ub	r9,r7[-4]
8000c9ca:	f0 09 18 00 	cp.b	r9,r8
8000c9ce:	c0 f0       	breq	8000c9ec <nav_select+0x50>
   {
      fat_invert_nav( fs_g_u8_nav_selected );   // Deselect previous navigator = Select default navigator
8000c9d0:	48 b8       	lddpc	r8,8000c9fc <nav_select+0x60>
8000c9d2:	11 88       	ld.ub	r8,r8[0x0]
8000c9d4:	10 9c       	mov	r12,r8
8000c9d6:	f0 1f 00 0b 	mcall	8000ca00 <nav_select+0x64>
      fat_invert_nav( u8_idnav );               // Select new navigator
8000c9da:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000c9de:	10 9c       	mov	r12,r8
8000c9e0:	f0 1f 00 08 	mcall	8000ca00 <nav_select+0x64>
      fs_g_u8_nav_selected = u8_idnav;
8000c9e4:	48 69       	lddpc	r9,8000c9fc <nav_select+0x60>
8000c9e6:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000c9ea:	b2 88       	st.b	r9[0x0],r8
   }
#endif
   return true;
8000c9ec:	30 18       	mov	r8,1
}
8000c9ee:	10 9c       	mov	r12,r8
8000c9f0:	2f fd       	sub	sp,-4
8000c9f2:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c9f6:	00 00       	add	r0,r0
8000c9f8:	00 00       	add	r0,r0
8000c9fa:	0d d8       	ld.ub	r8,r6[0x5]
8000c9fc:	00 00       	add	r0,r0
8000c9fe:	0e 50       	eor	r0,r7
8000ca00:	80 00       	ld.sh	r0,r0[0x0]
8000ca02:	ad 34       	mul	r4,r6

8000ca04 <nav_drive_set>:
//!
//! @return    false in case of error, see global value "fs_g_status" for more detail
//! @return    true otherwise
//!
bool  nav_drive_set( uint8_t u8_number )
{
8000ca04:	eb cd 40 80 	pushm	r7,lr
8000ca08:	1a 97       	mov	r7,sp
8000ca0a:	20 1d       	sub	sp,4
8000ca0c:	18 98       	mov	r8,r12
8000ca0e:	ef 68 ff fc 	st.b	r7[-4],r8
   if ( !fat_check_noopen() )
8000ca12:	f0 1f 00 16 	mcall	8000ca68 <nav_drive_set+0x64>
8000ca16:	18 98       	mov	r8,r12
8000ca18:	ec 18 00 01 	eorl	r8,0x1
8000ca1c:	5c 58       	castu.b	r8
8000ca1e:	c0 30       	breq	8000ca24 <nav_drive_set+0x20>
      return false;
8000ca20:	30 08       	mov	r8,0
8000ca22:	c1 f8       	rjmp	8000ca60 <nav_drive_set+0x5c>

   if (u8_number >= get_nb_lun() )
8000ca24:	f0 1f 00 12 	mcall	8000ca6c <nav_drive_set+0x68>
8000ca28:	18 98       	mov	r8,r12
8000ca2a:	ef 39 ff fc 	ld.ub	r9,r7[-4]
8000ca2e:	f0 09 18 00 	cp.b	r9,r8
8000ca32:	c0 63       	brcs	8000ca3e <nav_drive_set+0x3a>
   {
      fs_g_status = FS_ERR_END_OF_DRIVE;   // The drive number is bad
8000ca34:	48 f9       	lddpc	r9,8000ca70 <nav_drive_set+0x6c>
8000ca36:	30 68       	mov	r8,6
8000ca38:	b2 88       	st.b	r9[0x0],r8
      return false;
8000ca3a:	30 08       	mov	r8,0
8000ca3c:	c1 28       	rjmp	8000ca60 <nav_drive_set+0x5c>
   }

   if ( fs_g_nav.u8_lun == u8_number)
8000ca3e:	48 e8       	lddpc	r8,8000ca74 <nav_drive_set+0x70>
8000ca40:	11 88       	ld.ub	r8,r8[0x0]
8000ca42:	ef 39 ff fc 	ld.ub	r9,r7[-4]
8000ca46:	f0 09 18 00 	cp.b	r9,r8
8000ca4a:	c0 31       	brne	8000ca50 <nav_drive_set+0x4c>
      return true;   // It is the same drive number
8000ca4c:	30 18       	mov	r8,1
8000ca4e:	c0 98       	rjmp	8000ca60 <nav_drive_set+0x5c>

   // Go to the device
   fs_g_nav.u8_lun = u8_number;
8000ca50:	48 99       	lddpc	r9,8000ca74 <nav_drive_set+0x70>
8000ca52:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000ca56:	b2 88       	st.b	r9[0x0],r8
   fs_g_nav_fast.u8_type_fat = FS_TYPE_FAT_UNM;
8000ca58:	48 89       	lddpc	r9,8000ca78 <nav_drive_set+0x74>
8000ca5a:	30 08       	mov	r8,0
8000ca5c:	b2 88       	st.b	r9[0x0],r8
#if (FS_MULTI_PARTITION  ==  true)
   fs_g_nav.u8_partition=0;   // by default select the first partition
#endif
   return true;
8000ca5e:	30 18       	mov	r8,1
}
8000ca60:	10 9c       	mov	r12,r8
8000ca62:	2f fd       	sub	sp,-4
8000ca64:	e3 cd 80 80 	ldm	sp++,r7,pc
8000ca68:	80 00       	ld.sh	r0,r0[0x0]
8000ca6a:	8d a8       	st.w	r6[0x28],r8
8000ca6c:	80 00       	ld.sh	r0,r0[0x0]
8000ca6e:	ae 5c       	st.h	r7[0xa],r12
8000ca70:	00 00       	add	r0,r0
8000ca72:	0d d8       	ld.ub	r8,r6[0x5]
8000ca74:	00 00       	add	r0,r0
8000ca76:	0d 88       	ld.ub	r8,r6[0x0]
8000ca78:	00 00       	add	r0,r0
8000ca7a:	0d d4       	ld.ub	r4,r6[0x5]

8000ca7c <nav_partition_mount>:
//! then the mount routine selects the first partition supported by file system. <br>
//! After mount, the file list contains files and directories of ROOT directory
//! @endverbatim
//!
bool  nav_partition_mount( void )
{
8000ca7c:	eb cd 40 80 	pushm	r7,lr
8000ca80:	1a 97       	mov	r7,sp
   if ( !fat_check_noopen() )
8000ca82:	f0 1f 00 0e 	mcall	8000cab8 <nav_partition_mount+0x3c>
8000ca86:	18 98       	mov	r8,r12
8000ca88:	ec 18 00 01 	eorl	r8,0x1
8000ca8c:	5c 58       	castu.b	r8
8000ca8e:	c0 30       	breq	8000ca94 <nav_partition_mount+0x18>
      return false;
8000ca90:	30 08       	mov	r8,0
8000ca92:	c0 f8       	rjmp	8000cab0 <nav_partition_mount+0x34>

   if( FS_TYPE_FAT_UNM != fs_g_nav_fast.u8_type_fat)
8000ca94:	48 a8       	lddpc	r8,8000cabc <nav_partition_mount+0x40>
8000ca96:	11 88       	ld.ub	r8,r8[0x0]
8000ca98:	58 08       	cp.w	r8,0
8000ca9a:	c0 80       	breq	8000caaa <nav_partition_mount+0x2e>
   {
      // Already mounted
      // Go to root directory
      fs_g_nav.u32_cluster_sel_dir   = 0;
8000ca9c:	48 98       	lddpc	r8,8000cac0 <nav_partition_mount+0x44>
8000ca9e:	30 09       	mov	r9,0
8000caa0:	91 89       	st.w	r8[0x20],r9
      // No file is selected by default
      fat_clear_entry_info_and_ptr();
8000caa2:	f0 1f 00 09 	mcall	8000cac4 <nav_partition_mount+0x48>
      return true;
8000caa6:	30 18       	mov	r8,1
8000caa8:	c0 48       	rjmp	8000cab0 <nav_partition_mount+0x34>
   }

   return fat_mount();
8000caaa:	f0 1f 00 08 	mcall	8000cac8 <nav_partition_mount+0x4c>
8000caae:	18 98       	mov	r8,r12
}
8000cab0:	10 9c       	mov	r12,r8
8000cab2:	e3 cd 80 80 	ldm	sp++,r7,pc
8000cab6:	00 00       	add	r0,r0
8000cab8:	80 00       	ld.sh	r0,r0[0x0]
8000caba:	8d a8       	st.w	r6[0x28],r8
8000cabc:	00 00       	add	r0,r0
8000cabe:	0d d4       	ld.ub	r4,r6[0x5]
8000cac0:	00 00       	add	r0,r0
8000cac2:	0d 88       	ld.ub	r8,r6[0x0]
8000cac4:	80 00       	ld.sh	r0,r0[0x0]
8000cac6:	a4 c0       	st.b	r2[0x4],r0
8000cac8:	80 00       	ld.sh	r0,r0[0x0]
8000caca:	af fc       	*unknown*

8000cacc <nav_filelist_reset>:
//!
//! @return  false in case of error, see global value "fs_g_status" for more detail
//! @return  true otherwise
//!
bool  nav_filelist_reset( void )
{
8000cacc:	eb cd 40 80 	pushm	r7,lr
8000cad0:	1a 97       	mov	r7,sp
   if ( !fat_check_mount_noopen())
8000cad2:	f0 1f 00 08 	mcall	8000caf0 <nav_filelist_reset+0x24>
8000cad6:	18 98       	mov	r8,r12
8000cad8:	ec 18 00 01 	eorl	r8,0x1
8000cadc:	5c 58       	castu.b	r8
8000cade:	c0 30       	breq	8000cae4 <nav_filelist_reset+0x18>
      return false;
8000cae0:	30 08       	mov	r8,0
8000cae2:	c0 48       	rjmp	8000caea <nav_filelist_reset+0x1e>

   // No file selected and reset navigation
   fat_clear_entry_info_and_ptr();
8000cae4:	f0 1f 00 04 	mcall	8000caf4 <nav_filelist_reset+0x28>
   return true;
8000cae8:	30 18       	mov	r8,1
}
8000caea:	10 9c       	mov	r12,r8
8000caec:	e3 cd 80 80 	ldm	sp++,r7,pc
8000caf0:	80 00       	ld.sh	r0,r0[0x0]
8000caf2:	8e 4c       	ld.sh	r12,r7[0x8]
8000caf4:	80 00       	ld.sh	r0,r0[0x0]
8000caf6:	a4 c0       	st.b	r2[0x4],r0

8000caf8 <nav_filelist_set>:
//! @verbatim
//! Note: if no file is selected then nav_filelist_set( 0 , FS_NEXT ) goes to the first entry of the file list.
//! @endverbatim
//!
bool  nav_filelist_set( uint16_t u16_nb , bool b_direction )
{
8000caf8:	eb cd 40 80 	pushm	r7,lr
8000cafc:	1a 97       	mov	r7,sp
8000cafe:	20 4d       	sub	sp,16
8000cb00:	18 99       	mov	r9,r12
8000cb02:	16 98       	mov	r8,r11
8000cb04:	ef 59 ff f4 	st.h	r7[-12],r9
8000cb08:	ef 68 ff f0 	st.b	r7[-16],r8
   uint16_t   u16_ptr_save_entry;
   uint16_t   u16_save_pos_sel_file;
   bool  b_save_entry_type;
   bool  b_find_last_entry = false;
8000cb0c:	30 08       	mov	r8,0
8000cb0e:	ef 68 ff ff 	st.b	r7[-1],r8

   if ( !fat_check_mount_noopen())
8000cb12:	f0 1f 00 79 	mcall	8000ccf4 <nav_filelist_set+0x1fc>
8000cb16:	18 98       	mov	r8,r12
8000cb18:	ec 18 00 01 	eorl	r8,0x1
8000cb1c:	5c 58       	castu.b	r8
8000cb1e:	c0 30       	breq	8000cb24 <nav_filelist_set+0x2c>
      return false;
8000cb20:	30 08       	mov	r8,0
8000cb22:	ce 48       	rjmp	8000ccea <nav_filelist_set+0x1f2>

   // Save the current selection
   u16_ptr_save_entry      = fs_g_nav_fast.u16_entry_pos_sel_file;
8000cb24:	4f 58       	lddpc	r8,8000ccf8 <nav_filelist_set+0x200>
8000cb26:	90 18       	ld.sh	r8,r8[0x2]
8000cb28:	ef 58 ff fa 	st.h	r7[-6],r8
   u16_save_pos_sel_file   = fs_g_nav.u16_pos_sel_file;
8000cb2c:	4f 48       	lddpc	r8,8000ccfc <nav_filelist_set+0x204>
8000cb2e:	f1 08 00 24 	ld.sh	r8,r8[36]
8000cb32:	ef 58 ff fc 	st.h	r7[-4],r8
   b_save_entry_type       = fs_g_nav.b_mode_nav;
8000cb36:	4f 28       	lddpc	r8,8000ccfc <nav_filelist_set+0x204>
8000cb38:	f1 39 00 2c 	ld.ub	r9,r8[44]
8000cb3c:	30 08       	mov	r8,0
8000cb3e:	f0 09 18 00 	cp.b	r9,r8
8000cb42:	5f 18       	srne	r8
8000cb44:	ef 68 ff fe 	st.b	r7[-2],r8
8000cb48:	c0 28       	rjmp	8000cb4c <nav_filelist_set+0x54>
            // End of next dir action then starts the next file action at the beginning of directory
            fs_g_nav_fast.u16_entry_pos_sel_file = 0xFFFF;
            fs_g_nav.b_mode_nav = FS_FILE;
         }
      }
   }  // end of loop while(1)
8000cb4a:	d7 03       	nop
   b_save_entry_type       = fs_g_nav.b_mode_nav;

   // Loop in directory
   while( 1 )
   {
      if(( FS_FIND_NEXT == b_direction )
8000cb4c:	ef 39 ff f0 	ld.ub	r9,r7[-16]
8000cb50:	30 08       	mov	r8,0
8000cb52:	f0 09 18 00 	cp.b	r9,r8
8000cb56:	c0 71       	brne	8000cb64 <nav_filelist_set+0x6c>
8000cb58:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000cb5c:	30 08       	mov	r8,0
8000cb5e:	f0 09 18 00 	cp.b	r9,r8
8000cb62:	c1 20       	breq	8000cb86 <nav_filelist_set+0x8e>
      || ( b_find_last_entry ) )
      {
         if ( FS_END_FIND == fs_g_nav_fast.u16_entry_pos_sel_file )
8000cb64:	4e 58       	lddpc	r8,8000ccf8 <nav_filelist_set+0x200>
8000cb66:	90 19       	ld.sh	r9,r8[0x2]
8000cb68:	3f e8       	mov	r8,-2
8000cb6a:	f0 09 19 00 	cp.h	r9,r8
8000cb6e:	c0 51       	brne	8000cb78 <nav_filelist_set+0x80>
         {
            // Too many files in directory (case impossible)
            fs_g_status = FS_ERR_FS;
8000cb70:	4e 49       	lddpc	r9,8000cd00 <nav_filelist_set+0x208>
8000cb72:	30 88       	mov	r8,8
8000cb74:	b2 88       	st.b	r9[0x0],r8
            break;
8000cb76:	ca b8       	rjmp	8000cccc <nav_filelist_set+0x1d4>
         }
         fs_g_nav_fast.u16_entry_pos_sel_file++;      // Update entry position
8000cb78:	4e 08       	lddpc	r8,8000ccf8 <nav_filelist_set+0x200>
8000cb7a:	90 18       	ld.sh	r8,r8[0x2]
8000cb7c:	2f f8       	sub	r8,-1
8000cb7e:	5c 88       	casts.h	r8
8000cb80:	4d e9       	lddpc	r9,8000ccf8 <nav_filelist_set+0x200>
8000cb82:	b2 18       	st.h	r9[0x2],r8
   b_save_entry_type       = fs_g_nav.b_mode_nav;

   // Loop in directory
   while( 1 )
   {
      if(( FS_FIND_NEXT == b_direction )
8000cb84:	c2 78       	rjmp	8000cbd2 <nav_filelist_set+0xda>
         }
         fs_g_nav_fast.u16_entry_pos_sel_file++;      // Update entry position
      }
      else
      {
         if ( FS_NO_SEL == fs_g_nav_fast.u16_entry_pos_sel_file )
8000cb86:	4d d8       	lddpc	r8,8000ccf8 <nav_filelist_set+0x200>
8000cb88:	90 19       	ld.sh	r9,r8[0x2]
8000cb8a:	3f f8       	mov	r8,-1
8000cb8c:	f0 09 19 00 	cp.h	r9,r8
8000cb90:	c0 51       	brne	8000cb9a <nav_filelist_set+0xa2>
         {
            // No selected file then previous action impossible
            fs_g_status = FS_ERR_NO_FIND;
8000cb92:	4d c9       	lddpc	r9,8000cd00 <nav_filelist_set+0x208>
8000cb94:	30 98       	mov	r8,9
8000cb96:	b2 88       	st.b	r9[0x0],r8
            break;
8000cb98:	c9 a8       	rjmp	8000cccc <nav_filelist_set+0x1d4>
         }
         if ( 0 == fs_g_nav_fast.u16_entry_pos_sel_file )
8000cb9a:	4d 88       	lddpc	r8,8000ccf8 <nav_filelist_set+0x200>
8000cb9c:	90 18       	ld.sh	r8,r8[0x2]
8000cb9e:	58 08       	cp.w	r8,0
8000cba0:	c1 31       	brne	8000cbc6 <nav_filelist_set+0xce>
         {
            // beginning of directory
            if ( (FS_DIR == fs_g_nav.b_mode_nav ) || fs_g_nav.b_mode_nav_single )
8000cba2:	4d 78       	lddpc	r8,8000ccfc <nav_filelist_set+0x204>
8000cba4:	f1 38 00 2c 	ld.ub	r8,r8[44]
8000cba8:	58 08       	cp.w	r8,0
8000cbaa:	c0 60       	breq	8000cbb6 <nav_filelist_set+0xbe>
8000cbac:	4d 48       	lddpc	r8,8000ccfc <nav_filelist_set+0x204>
8000cbae:	f1 38 00 2d 	ld.ub	r8,r8[45]
8000cbb2:	58 08       	cp.w	r8,0
8000cbb4:	c0 50       	breq	8000cbbe <nav_filelist_set+0xc6>
            {
               // End of directory scan, then no previous action possible
               fs_g_status = FS_ERR_NO_FIND;
8000cbb6:	4d 39       	lddpc	r9,8000cd00 <nav_filelist_set+0x208>
8000cbb8:	30 98       	mov	r8,9
8000cbba:	b2 88       	st.b	r9[0x0],r8
               break;
8000cbbc:	c8 88       	rjmp	8000cccc <nav_filelist_set+0x1d4>
            }
            // End of file scan, then find last directory
            b_find_last_entry = true;
8000cbbe:	30 18       	mov	r8,1
8000cbc0:	ef 68 ff ff 	st.b	r7[-1],r8
8000cbc4:	c0 78       	rjmp	8000cbd2 <nav_filelist_set+0xda>
         }else{
            fs_g_nav_fast.u16_entry_pos_sel_file--;   // Update entry position
8000cbc6:	4c d8       	lddpc	r8,8000ccf8 <nav_filelist_set+0x200>
8000cbc8:	90 18       	ld.sh	r8,r8[0x2]
8000cbca:	20 18       	sub	r8,1
8000cbcc:	5c 88       	casts.h	r8
8000cbce:	4c b9       	lddpc	r9,8000ccf8 <nav_filelist_set+0x200>
8000cbd0:	b2 18       	st.h	r9[0x2],r8
         }
      }

      if( !fat_read_dir())
8000cbd2:	f0 1f 00 4d 	mcall	8000cd04 <nav_filelist_set+0x20c>
8000cbd6:	18 98       	mov	r8,r12
8000cbd8:	ec 18 00 01 	eorl	r8,0x1
8000cbdc:	5c 58       	castu.b	r8
8000cbde:	c0 80       	breq	8000cbee <nav_filelist_set+0xf6>
      {
         if( FS_ERR_OUT_LIST != fs_g_status )
8000cbe0:	4c 88       	lddpc	r8,8000cd00 <nav_filelist_set+0x208>
8000cbe2:	11 89       	ld.ub	r9,r8[0x0]
8000cbe4:	31 a8       	mov	r8,26
8000cbe6:	f0 09 18 00 	cp.b	r9,r8
8000cbea:	c3 d0       	breq	8000cc64 <nav_filelist_set+0x16c>
            break; // Error
8000cbec:	c7 08       	rjmp	8000cccc <nav_filelist_set+0x1d4>
      }else{
         if ( fat_entry_check( fs_g_nav.b_mode_nav ) )
8000cbee:	4c 48       	lddpc	r8,8000ccfc <nav_filelist_set+0x204>
8000cbf0:	f1 39 00 2c 	ld.ub	r9,r8[44]
8000cbf4:	30 08       	mov	r8,0
8000cbf6:	f0 09 18 00 	cp.b	r9,r8
8000cbfa:	5f 18       	srne	r8
8000cbfc:	10 9c       	mov	r12,r8
8000cbfe:	f0 1f 00 43 	mcall	8000cd08 <nav_filelist_set+0x210>
8000cc02:	18 98       	mov	r8,r12
8000cc04:	58 08       	cp.w	r8,0
8000cc06:	c2 f0       	breq	8000cc64 <nav_filelist_set+0x16c>
         {
           // HERE, the file entry match with the type searched

           if( b_find_last_entry )
8000cc08:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000cc0c:	30 08       	mov	r8,0
8000cc0e:	f0 09 18 00 	cp.b	r9,r8
8000cc12:	c0 20       	breq	8000cc16 <nav_filelist_set+0x11e>
             continue;  // The search of last directory is on going then continue the search
8000cc14:	c5 b8       	rjmp	8000ccca <nav_filelist_set+0x1d2>

           // Update position in directory
           if ( FS_FIND_NEXT == b_direction )
8000cc16:	ef 39 ff f0 	ld.ub	r9,r7[-16]
8000cc1a:	30 08       	mov	r8,0
8000cc1c:	f0 09 18 00 	cp.b	r9,r8
8000cc20:	c0 a0       	breq	8000cc34 <nav_filelist_set+0x13c>
              fs_g_nav.u16_pos_sel_file++;
8000cc22:	4b 78       	lddpc	r8,8000ccfc <nav_filelist_set+0x204>
8000cc24:	f1 08 00 24 	ld.sh	r8,r8[36]
8000cc28:	2f f8       	sub	r8,-1
8000cc2a:	5c 88       	casts.h	r8
8000cc2c:	4b 49       	lddpc	r9,8000ccfc <nav_filelist_set+0x204>
8000cc2e:	f3 58 00 24 	st.h	r9[36],r8
8000cc32:	c0 98       	rjmp	8000cc44 <nav_filelist_set+0x14c>
           else
              fs_g_nav.u16_pos_sel_file--;
8000cc34:	4b 28       	lddpc	r8,8000ccfc <nav_filelist_set+0x204>
8000cc36:	f1 08 00 24 	ld.sh	r8,r8[36]
8000cc3a:	20 18       	sub	r8,1
8000cc3c:	5c 88       	casts.h	r8
8000cc3e:	4b 09       	lddpc	r9,8000ccfc <nav_filelist_set+0x204>
8000cc40:	f3 58 00 24 	st.h	r9[36],r8

           if (0 == u16_nb)
8000cc44:	ef 09 ff f4 	ld.sh	r9,r7[-12]
8000cc48:	30 08       	mov	r8,0
8000cc4a:	f0 09 19 00 	cp.h	r9,r8
8000cc4e:	c0 51       	brne	8000cc58 <nav_filelist_set+0x160>
           {
              // It is the end of move then update file information
              fat_get_entry_info();
8000cc50:	f0 1f 00 2f 	mcall	8000cd0c <nav_filelist_set+0x214>
              return true;         // NB FILE FIND
8000cc54:	30 18       	mov	r8,1
8000cc56:	c4 a8       	rjmp	8000ccea <nav_filelist_set+0x1f2>
           }
           u16_nb--;
8000cc58:	ef 08 ff f4 	ld.sh	r8,r7[-12]
8000cc5c:	20 18       	sub	r8,1
8000cc5e:	ef 58 ff f4 	st.h	r7[-12],r8
           continue;
8000cc62:	c3 48       	rjmp	8000ccca <nav_filelist_set+0x1d2>
         }
      }

      // Here error, check type of error
      if(( FS_ERR_ENTRY_EMPTY == fs_g_status )
8000cc64:	4a 78       	lddpc	r8,8000cd00 <nav_filelist_set+0x208>
8000cc66:	11 89       	ld.ub	r9,r8[0x0]
8000cc68:	30 a8       	mov	r8,10
8000cc6a:	f0 09 18 00 	cp.b	r9,r8
8000cc6e:	c0 80       	breq	8000cc7e <nav_filelist_set+0x186>
      || ( FS_ERR_OUT_LIST    == fs_g_status ) )
8000cc70:	4a 48       	lddpc	r8,8000cd00 <nav_filelist_set+0x208>
8000cc72:	11 89       	ld.ub	r9,r8[0x0]
           continue;
         }
      }

      // Here error, check type of error
      if(( FS_ERR_ENTRY_EMPTY == fs_g_status )
8000cc74:	31 a8       	mov	r8,26
8000cc76:	f0 09 18 00 	cp.b	r9,r8
8000cc7a:	fe 91 ff 68 	brne	8000cb4a <nav_filelist_set+0x52>
      || ( FS_ERR_OUT_LIST    == fs_g_status ) )
      {
         // Here, end of the directory
         if( b_find_last_entry )
8000cc7e:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000cc82:	30 08       	mov	r8,0
8000cc84:	f0 09 18 00 	cp.b	r9,r8
8000cc88:	c0 90       	breq	8000cc9a <nav_filelist_set+0x1a2>
         {
            // Re enable the previous command at the end of directory to find the last directory entry
            b_find_last_entry = false;
8000cc8a:	30 08       	mov	r8,0
8000cc8c:	ef 68 ff ff 	st.b	r7[-1],r8
            fs_g_nav.b_mode_nav = FS_DIR;
8000cc90:	49 b9       	lddpc	r9,8000ccfc <nav_filelist_set+0x204>
8000cc92:	30 08       	mov	r8,0
8000cc94:	f3 68 00 2c 	st.b	r9[44],r8
            continue;
8000cc98:	c1 98       	rjmp	8000ccca <nav_filelist_set+0x1d2>
         }
         // Here, a next action is on going
         if ( (FS_FILE == fs_g_nav.b_mode_nav) || fs_g_nav.b_mode_nav_single )
8000cc9a:	49 98       	lddpc	r8,8000ccfc <nav_filelist_set+0x204>
8000cc9c:	f1 39 00 2c 	ld.ub	r9,r8[44]
8000cca0:	30 18       	mov	r8,1
8000cca2:	f0 09 18 00 	cp.b	r9,r8
8000cca6:	c0 60       	breq	8000ccb2 <nav_filelist_set+0x1ba>
8000cca8:	49 58       	lddpc	r8,8000ccfc <nav_filelist_set+0x204>
8000ccaa:	f1 38 00 2d 	ld.ub	r8,r8[45]
8000ccae:	58 08       	cp.w	r8,0
8000ccb0:	c0 50       	breq	8000ccba <nav_filelist_set+0x1c2>
         {
            // End of next file action then end of next action
            fs_g_status = FS_ERR_NO_FIND; // No file found
8000ccb2:	49 49       	lddpc	r9,8000cd00 <nav_filelist_set+0x208>
8000ccb4:	30 98       	mov	r8,9
8000ccb6:	b2 88       	st.b	r9[0x0],r8
            break;                        // end of search
8000ccb8:	c0 a8       	rjmp	8000cccc <nav_filelist_set+0x1d4>
         }else{
            // End of next dir action then starts the next file action at the beginning of directory
            fs_g_nav_fast.u16_entry_pos_sel_file = 0xFFFF;
8000ccba:	49 09       	lddpc	r9,8000ccf8 <nav_filelist_set+0x200>
8000ccbc:	3f f8       	mov	r8,-1
8000ccbe:	b2 18       	st.h	r9[0x2],r8
            fs_g_nav.b_mode_nav = FS_FILE;
8000ccc0:	48 f9       	lddpc	r9,8000ccfc <nav_filelist_set+0x204>
8000ccc2:	30 18       	mov	r8,1
8000ccc4:	f3 68 00 2c 	st.b	r9[44],r8
         }
      }
   }  // end of loop while(1)
8000ccc8:	c4 2b       	rjmp	8000cb4c <nav_filelist_set+0x54>
8000ccca:	c4 1b       	rjmp	8000cb4c <nav_filelist_set+0x54>

   fs_g_nav.b_mode_nav                    = b_save_entry_type;
8000cccc:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8000ccd0:	48 b9       	lddpc	r9,8000ccfc <nav_filelist_set+0x204>
8000ccd2:	f3 68 00 2c 	st.b	r9[44],r8
   fs_g_nav_fast.u16_entry_pos_sel_file   = u16_ptr_save_entry;
8000ccd6:	48 99       	lddpc	r9,8000ccf8 <nav_filelist_set+0x200>
8000ccd8:	ef 08 ff fa 	ld.sh	r8,r7[-6]
8000ccdc:	b2 18       	st.h	r9[0x2],r8
   fs_g_nav.u16_pos_sel_file              = u16_save_pos_sel_file;
8000ccde:	48 89       	lddpc	r9,8000ccfc <nav_filelist_set+0x204>
8000cce0:	ef 08 ff fc 	ld.sh	r8,r7[-4]
8000cce4:	f3 58 00 24 	st.h	r9[36],r8
   return false;
8000cce8:	30 08       	mov	r8,0
}
8000ccea:	10 9c       	mov	r12,r8
8000ccec:	2f cd       	sub	sp,-16
8000ccee:	e3 cd 80 80 	ldm	sp++,r7,pc
8000ccf2:	00 00       	add	r0,r0
8000ccf4:	80 00       	ld.sh	r0,r0[0x0]
8000ccf6:	8e 4c       	ld.sh	r12,r7[0x8]
8000ccf8:	00 00       	add	r0,r0
8000ccfa:	0d d4       	ld.ub	r4,r6[0x5]
8000ccfc:	00 00       	add	r0,r0
8000ccfe:	0d 88       	ld.ub	r8,r6[0x0]
8000cd00:	00 00       	add	r0,r0
8000cd02:	0d d8       	ld.ub	r8,r6[0x5]
8000cd04:	80 00       	ld.sh	r0,r0[0x0]
8000cd06:	a2 44       	st.h	r1[0x8],r4
8000cd08:	80 00       	ld.sh	r0,r0[0x0]
8000cd0a:	a2 f4       	st.b	r1[0x7],r4
8000cd0c:	80 00       	ld.sh	r0,r0[0x0]
8000cd0e:	a3 c0       	cbr	r0,0x2

8000cd10 <nav_filelist_findname>:
//! @verbatim
//! This function starts a search at the next position of the current in file list
//! @endverbatim
//!
bool  nav_filelist_findname( const FS_STRING sz_name , bool b_match_case )
{
8000cd10:	eb cd 40 80 	pushm	r7,lr
8000cd14:	1a 97       	mov	r7,sp
8000cd16:	20 2d       	sub	sp,8
8000cd18:	ef 4c ff fc 	st.w	r7[-4],r12
8000cd1c:	16 98       	mov	r8,r11
8000cd1e:	ef 68 ff f8 	st.b	r7[-8],r8
8000cd22:	c0 28       	rjmp	8000cd26 <nav_filelist_findname+0x16>
   {
      if ( !nav_filelist_set( 0, FS_FIND_NEXT ))
         return false;
      if ( nav_file_name( sz_name , 0 , FS_NAME_CHECK , b_match_case ))
         return true;
   }
8000cd24:	d7 03       	nop
//!
bool  nav_filelist_findname( const FS_STRING sz_name , bool b_match_case )
{
   while( 1 )
   {
      if ( !nav_filelist_set( 0, FS_FIND_NEXT ))
8000cd26:	30 1b       	mov	r11,1
8000cd28:	30 0c       	mov	r12,0
8000cd2a:	f0 1f 00 0e 	mcall	8000cd60 <nav_filelist_findname+0x50>
8000cd2e:	18 98       	mov	r8,r12
8000cd30:	ec 18 00 01 	eorl	r8,0x1
8000cd34:	5c 58       	castu.b	r8
8000cd36:	c0 30       	breq	8000cd3c <nav_filelist_findname+0x2c>
         return false;
8000cd38:	30 08       	mov	r8,0
8000cd3a:	c0 e8       	rjmp	8000cd56 <nav_filelist_findname+0x46>
      if ( nav_file_name( sz_name , 0 , FS_NAME_CHECK , b_match_case ))
8000cd3c:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000cd40:	10 99       	mov	r9,r8
8000cd42:	30 0a       	mov	r10,0
8000cd44:	30 0b       	mov	r11,0
8000cd46:	ee fc ff fc 	ld.w	r12,r7[-4]
8000cd4a:	f0 1f 00 07 	mcall	8000cd64 <nav_filelist_findname+0x54>
8000cd4e:	18 98       	mov	r8,r12
8000cd50:	58 08       	cp.w	r8,0
8000cd52:	ce 90       	breq	8000cd24 <nav_filelist_findname+0x14>
         return true;
8000cd54:	30 18       	mov	r8,1
   }
}
8000cd56:	10 9c       	mov	r12,r8
8000cd58:	2f ed       	sub	sp,-8
8000cd5a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000cd5e:	00 00       	add	r0,r0
8000cd60:	80 00       	ld.sh	r0,r0[0x0]
8000cd62:	ca f8       	rjmp	8000cec0 <nav_filelist_last+0x44>
8000cd64:	80 00       	ld.sh	r0,r0[0x0]
8000cd66:	d5 74       	*unknown*

8000cd68 <nav_filelist_nb>:
//!                     FS_FILE to compute the number of files <br>
//!
//! @return    number of files or directories in file list
//!
uint16_t   nav_filelist_nb( bool b_type )
{
8000cd68:	eb cd 40 80 	pushm	r7,lr
8000cd6c:	1a 97       	mov	r7,sp
8000cd6e:	20 3d       	sub	sp,12
8000cd70:	18 98       	mov	r8,r12
8000cd72:	ef 68 ff f4 	st.b	r7[-12],r8
   uint16_t   u16_save_position;
   uint16_t   u16_save_number_dir;
   uint16_t   u16_save_number_file;

   // Save current position
   u16_save_position = fs_g_nav.u16_pos_sel_file;
8000cd76:	4a 68       	lddpc	r8,8000ce0c <nav_filelist_nb+0xa4>
8000cd78:	f1 08 00 24 	ld.sh	r8,r8[36]
8000cd7c:	ef 58 ff fa 	st.h	r7[-6],r8
   // Reset position
   if ( !nav_filelist_reset())
8000cd80:	f0 1f 00 24 	mcall	8000ce10 <nav_filelist_nb+0xa8>
8000cd84:	18 98       	mov	r8,r12
8000cd86:	ec 18 00 01 	eorl	r8,0x1
8000cd8a:	5c 58       	castu.b	r8
8000cd8c:	c0 30       	breq	8000cd92 <nav_filelist_nb+0x2a>
      return 0;
8000cd8e:	30 08       	mov	r8,0
8000cd90:	c3 a8       	rjmp	8000ce04 <nav_filelist_nb+0x9c>
   // Scan all directory
   u16_save_number_dir  = 0;
8000cd92:	30 08       	mov	r8,0
8000cd94:	ef 58 ff fc 	st.h	r7[-4],r8
   u16_save_number_file = 0;
8000cd98:	30 08       	mov	r8,0
8000cd9a:	ef 58 ff fe 	st.h	r7[-2],r8
   while( nav_filelist_set( 0 , FS_FIND_NEXT ) )
8000cd9e:	c1 38       	rjmp	8000cdc4 <nav_filelist_nb+0x5c>
   {
      if( FS_FILE == fs_g_nav.b_mode_nav )
8000cda0:	49 b8       	lddpc	r8,8000ce0c <nav_filelist_nb+0xa4>
8000cda2:	f1 39 00 2c 	ld.ub	r9,r8[44]
8000cda6:	30 18       	mov	r8,1
8000cda8:	f0 09 18 00 	cp.b	r9,r8
8000cdac:	c0 71       	brne	8000cdba <nav_filelist_nb+0x52>
         u16_save_number_file++;    // It is a file
8000cdae:	ef 08 ff fe 	ld.sh	r8,r7[-2]
8000cdb2:	2f f8       	sub	r8,-1
8000cdb4:	ef 58 ff fe 	st.h	r7[-2],r8
8000cdb8:	c0 68       	rjmp	8000cdc4 <nav_filelist_nb+0x5c>
      else
         u16_save_number_dir++;     // It is a directory
8000cdba:	ef 08 ff fc 	ld.sh	r8,r7[-4]
8000cdbe:	2f f8       	sub	r8,-1
8000cdc0:	ef 58 ff fc 	st.h	r7[-4],r8
   if ( !nav_filelist_reset())
      return 0;
   // Scan all directory
   u16_save_number_dir  = 0;
   u16_save_number_file = 0;
   while( nav_filelist_set( 0 , FS_FIND_NEXT ) )
8000cdc4:	30 1b       	mov	r11,1
8000cdc6:	30 0c       	mov	r12,0
8000cdc8:	f0 1f 00 13 	mcall	8000ce14 <nav_filelist_nb+0xac>
8000cdcc:	18 98       	mov	r8,r12
8000cdce:	58 08       	cp.w	r8,0
8000cdd0:	ce 81       	brne	8000cda0 <nav_filelist_nb+0x38>
         u16_save_number_file++;    // It is a file
      else
         u16_save_number_dir++;     // It is a directory
   }
   // Restore previous position
   nav_filelist_reset();
8000cdd2:	f0 1f 00 10 	mcall	8000ce10 <nav_filelist_nb+0xa8>
   if ( u16_save_position != FS_NO_SEL )
8000cdd6:	ef 09 ff fa 	ld.sh	r9,r7[-6]
8000cdda:	3f f8       	mov	r8,-1
8000cddc:	f0 09 19 00 	cp.h	r9,r8
8000cde0:	c0 70       	breq	8000cdee <nav_filelist_nb+0x86>
   {
      nav_filelist_set( u16_save_position , FS_FIND_NEXT );
8000cde2:	ef 18 ff fa 	ld.uh	r8,r7[-6]
8000cde6:	30 1b       	mov	r11,1
8000cde8:	10 9c       	mov	r12,r8
8000cdea:	f0 1f 00 0b 	mcall	8000ce14 <nav_filelist_nb+0xac>
   }
   // Return the value asked
   if( FS_FILE == b_type )
8000cdee:	ef 39 ff f4 	ld.ub	r9,r7[-12]
8000cdf2:	30 08       	mov	r8,0
8000cdf4:	f0 09 18 00 	cp.b	r9,r8
8000cdf8:	c0 40       	breq	8000ce00 <nav_filelist_nb+0x98>
      return u16_save_number_file;
8000cdfa:	ef 08 ff fe 	ld.sh	r8,r7[-2]
8000cdfe:	c0 38       	rjmp	8000ce04 <nav_filelist_nb+0x9c>
   else
      return u16_save_number_dir;
8000ce00:	ef 08 ff fc 	ld.sh	r8,r7[-4]
}
8000ce04:	10 9c       	mov	r12,r8
8000ce06:	2f dd       	sub	sp,-12
8000ce08:	e3 cd 80 80 	ldm	sp++,r7,pc
8000ce0c:	00 00       	add	r0,r0
8000ce0e:	0d 88       	ld.ub	r8,r6[0x0]
8000ce10:	80 00       	ld.sh	r0,r0[0x0]
8000ce12:	ca cc       	rcall	8000cf6a <nav_gotoindex+0x1a>
8000ce14:	80 00       	ld.sh	r0,r0[0x0]
8000ce16:	ca f8       	rjmp	8000cf74 <nav_gotoindex+0x24>

8000ce18 <nav_filelist_first>:
//!
//! @return  false in case of error, see global value "fs_g_status" for more detail
//! @return  true otherwise
//!
bool  nav_filelist_first( bool b_type )
{
8000ce18:	eb cd 40 80 	pushm	r7,lr
8000ce1c:	1a 97       	mov	r7,sp
8000ce1e:	20 1d       	sub	sp,4
8000ce20:	18 98       	mov	r8,r12
8000ce22:	ef 68 ff fc 	st.b	r7[-4],r8
   // Reset position
   if ( !nav_filelist_reset())
8000ce26:	f0 1f 00 12 	mcall	8000ce6c <nav_filelist_first+0x54>
8000ce2a:	18 98       	mov	r8,r12
8000ce2c:	ec 18 00 01 	eorl	r8,0x1
8000ce30:	5c 58       	castu.b	r8
8000ce32:	c0 c0       	breq	8000ce4a <nav_filelist_first+0x32>
      return false;
8000ce34:	30 08       	mov	r8,0
8000ce36:	c1 68       	rjmp	8000ce62 <nav_filelist_first+0x4a>
   // Find the first file or directory
   while( nav_filelist_set( 0 , FS_FIND_NEXT ) )
   {
      if( b_type == fs_g_nav.b_mode_nav )
8000ce38:	ef 39 ff fc 	ld.ub	r9,r7[-4]
8000ce3c:	48 d8       	lddpc	r8,8000ce70 <nav_filelist_first+0x58>
8000ce3e:	f1 38 00 2c 	ld.ub	r8,r8[44]
8000ce42:	10 39       	cp.w	r9,r8
8000ce44:	c0 41       	brne	8000ce4c <nav_filelist_first+0x34>
         return true;   // First file or directory found
8000ce46:	30 18       	mov	r8,1
8000ce48:	c0 d8       	rjmp	8000ce62 <nav_filelist_first+0x4a>
{
   // Reset position
   if ( !nav_filelist_reset())
      return false;
   // Find the first file or directory
   while( nav_filelist_set( 0 , FS_FIND_NEXT ) )
8000ce4a:	d7 03       	nop
8000ce4c:	30 1b       	mov	r11,1
8000ce4e:	30 0c       	mov	r12,0
8000ce50:	f0 1f 00 09 	mcall	8000ce74 <nav_filelist_first+0x5c>
8000ce54:	18 98       	mov	r8,r12
8000ce56:	58 08       	cp.w	r8,0
8000ce58:	cf 01       	brne	8000ce38 <nav_filelist_first+0x20>
   {
      if( b_type == fs_g_nav.b_mode_nav )
         return true;   // First file or directory found
   }
   fs_g_status = FS_ERR_NO_FIND;
8000ce5a:	48 89       	lddpc	r9,8000ce78 <nav_filelist_first+0x60>
8000ce5c:	30 98       	mov	r8,9
8000ce5e:	b2 88       	st.b	r9[0x0],r8
   return false;
8000ce60:	30 08       	mov	r8,0
}
8000ce62:	10 9c       	mov	r12,r8
8000ce64:	2f fd       	sub	sp,-4
8000ce66:	e3 cd 80 80 	ldm	sp++,r7,pc
8000ce6a:	00 00       	add	r0,r0
8000ce6c:	80 00       	ld.sh	r0,r0[0x0]
8000ce6e:	ca cc       	rcall	8000cfc6 <nav_gotoindex+0x76>
8000ce70:	00 00       	add	r0,r0
8000ce72:	0d 88       	ld.ub	r8,r6[0x0]
8000ce74:	80 00       	ld.sh	r0,r0[0x0]
8000ce76:	ca f8       	rjmp	8000cfd4 <nav_gotoindex+0x84>
8000ce78:	00 00       	add	r0,r0
8000ce7a:	0d d8       	ld.ub	r8,r6[0x5]

8000ce7c <nav_filelist_last>:
//!
//! @return  false in case of error, see global value "fs_g_status" for more detail
//! @return  true otherwise
//!
bool  nav_filelist_last( bool b_type )
{
8000ce7c:	eb cd 40 80 	pushm	r7,lr
8000ce80:	1a 97       	mov	r7,sp
8000ce82:	20 2d       	sub	sp,8
8000ce84:	18 98       	mov	r8,r12
8000ce86:	ef 68 ff f8 	st.b	r7[-8],r8
   uint16_t u16_nb;

   // Get number of file or directory
   u16_nb = nav_filelist_nb( b_type  );
8000ce8a:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000ce8e:	10 9c       	mov	r12,r8
8000ce90:	f0 1f 00 1b 	mcall	8000cefc <nav_filelist_last+0x80>
8000ce94:	18 98       	mov	r8,r12
8000ce96:	5c 88       	casts.h	r8
8000ce98:	ef 58 ff fe 	st.h	r7[-2],r8
   if( 0 == u16_nb )
8000ce9c:	ef 09 ff fe 	ld.sh	r9,r7[-2]
8000cea0:	30 08       	mov	r8,0
8000cea2:	f0 09 19 00 	cp.h	r9,r8
8000cea6:	c0 61       	brne	8000ceb2 <nav_filelist_last+0x36>
   {
      fs_g_status = FS_ERR_NO_FIND;
8000cea8:	49 69       	lddpc	r9,8000cf00 <nav_filelist_last+0x84>
8000ceaa:	30 98       	mov	r8,9
8000ceac:	b2 88       	st.b	r9[0x0],r8
      return false;  // NO FILE FOUND
8000ceae:	30 08       	mov	r8,0
8000ceb0:	c2 18       	rjmp	8000cef2 <nav_filelist_last+0x76>
   }
   // Go to the first file or directory
   if ( !nav_filelist_first( b_type ))
8000ceb2:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000ceb6:	10 9c       	mov	r12,r8
8000ceb8:	f0 1f 00 13 	mcall	8000cf04 <nav_filelist_last+0x88>
8000cebc:	18 98       	mov	r8,r12
8000cebe:	ec 18 00 01 	eorl	r8,0x1
8000cec2:	5c 58       	castu.b	r8
8000cec4:	c0 30       	breq	8000ceca <nav_filelist_last+0x4e>
      return false;
8000cec6:	30 08       	mov	r8,0
8000cec8:	c1 58       	rjmp	8000cef2 <nav_filelist_last+0x76>
   // If there are more one file or directory, then go to at the last of list
   if( 1 == u16_nb )
8000ceca:	ef 09 ff fe 	ld.sh	r9,r7[-2]
8000cece:	30 18       	mov	r8,1
8000ced0:	f0 09 19 00 	cp.h	r9,r8
8000ced4:	c0 31       	brne	8000ceda <nav_filelist_last+0x5e>
      return true;
8000ced6:	30 18       	mov	r8,1
8000ced8:	c0 d8       	rjmp	8000cef2 <nav_filelist_last+0x76>
   u16_nb -= 2;
8000ceda:	ef 08 ff fe 	ld.sh	r8,r7[-2]
8000cede:	20 28       	sub	r8,2
8000cee0:	ef 58 ff fe 	st.h	r7[-2],r8
   return nav_filelist_set( u16_nb , FS_FIND_NEXT );
8000cee4:	ef 18 ff fe 	ld.uh	r8,r7[-2]
8000cee8:	30 1b       	mov	r11,1
8000ceea:	10 9c       	mov	r12,r8
8000ceec:	f0 1f 00 07 	mcall	8000cf08 <nav_filelist_last+0x8c>
8000cef0:	18 98       	mov	r8,r12
}
8000cef2:	10 9c       	mov	r12,r8
8000cef4:	2f ed       	sub	sp,-8
8000cef6:	e3 cd 80 80 	ldm	sp++,r7,pc
8000cefa:	00 00       	add	r0,r0
8000cefc:	80 00       	ld.sh	r0,r0[0x0]
8000cefe:	cd 68       	rjmp	8000d0aa <nav_dir_gotoparent+0x2e>
8000cf00:	00 00       	add	r0,r0
8000cf02:	0d d8       	ld.ub	r8,r6[0x5]
8000cf04:	80 00       	ld.sh	r0,r0[0x0]
8000cf06:	ce 18       	rjmp	8000d0c8 <nav_dir_gotoparent+0x4c>
8000cf08:	80 00       	ld.sh	r0,r0[0x0]
8000cf0a:	ca f8       	rjmp	8000d068 <nav_dir_cd+0x5c>

8000cf0c <nav_getindex>:
//! This routine is interesting to save a file position in small variable.
//! This pointer allow to reinit a navigator quickly with nav_gotoindex() routine.
//! @endverbatim
//!
Fs_index nav_getindex( void )
{
8000cf0c:	eb cd 40 80 	pushm	r7,lr
8000cf10:	1a 97       	mov	r7,sp
8000cf12:	20 3d       	sub	sp,12
8000cf14:	18 9a       	mov	r10,r12
   Fs_index index;

   // Fill index structure
   index.u8_lun                  = fs_g_nav.u8_lun;
8000cf16:	48 d8       	lddpc	r8,8000cf48 <nav_getindex+0x3c>
8000cf18:	11 88       	ld.ub	r8,r8[0x0]
8000cf1a:	ef 68 ff f4 	st.b	r7[-12],r8
#if (FS_MULTI_PARTITION  ==  true)
   index.u8_partition            = fs_g_nav.u8_partition;
#endif
   index.u32_cluster_sel_dir     = fs_g_nav.u32_cluster_sel_dir;
8000cf1e:	48 b8       	lddpc	r8,8000cf48 <nav_getindex+0x3c>
8000cf20:	70 88       	ld.w	r8,r8[0x20]
8000cf22:	ef 48 ff f8 	st.w	r7[-8],r8
   index.u16_entry_pos_sel_file  = fs_g_nav_fast.u16_entry_pos_sel_file;
8000cf26:	48 a8       	lddpc	r8,8000cf4c <nav_getindex+0x40>
8000cf28:	90 18       	ld.sh	r8,r8[0x2]
8000cf2a:	ef 58 ff fc 	st.h	r7[-4],r8
   return index;
8000cf2e:	14 9b       	mov	r11,r10
8000cf30:	ee cc 00 0c 	sub	r12,r7,12
8000cf34:	f8 e8 00 00 	ld.d	r8,r12[0]
8000cf38:	f6 e9 00 00 	st.d	r11[0],r8
8000cf3c:	78 28       	ld.w	r8,r12[0x8]
8000cf3e:	97 28       	st.w	r11[0x8],r8
}
8000cf40:	14 9c       	mov	r12,r10
8000cf42:	2f dd       	sub	sp,-12
8000cf44:	e3 cd 80 80 	ldm	sp++,r7,pc
8000cf48:	00 00       	add	r0,r0
8000cf4a:	0d 88       	ld.ub	r8,r6[0x0]
8000cf4c:	00 00       	add	r0,r0
8000cf4e:	0d d4       	ld.ub	r4,r6[0x5]

8000cf50 <nav_gotoindex>:
//! This routine allow to reinit a navigator quickly via a file index (disk, partition, dir, file/dir selected )
//! To get a file index, you shall used the routine nav_getindex().
//! @endverbatim
//!
bool  nav_gotoindex( const Fs_index _MEM_TYPE_SLOW_ *index )
{
8000cf50:	eb cd 40 80 	pushm	r7,lr
8000cf54:	1a 97       	mov	r7,sp
8000cf56:	20 1d       	sub	sp,4
8000cf58:	ef 4c ff fc 	st.w	r7[-4],r12
   // Select the drive and partition corresponding at file index
   if( !nav_drive_set( index->u8_lun ))
8000cf5c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000cf60:	11 88       	ld.ub	r8,r8[0x0]
8000cf62:	10 9c       	mov	r12,r8
8000cf64:	f0 1f 00 1e 	mcall	8000cfdc <nav_gotoindex+0x8c>
8000cf68:	18 98       	mov	r8,r12
8000cf6a:	ec 18 00 01 	eorl	r8,0x1
8000cf6e:	5c 58       	castu.b	r8
8000cf70:	c0 30       	breq	8000cf76 <nav_gotoindex+0x26>
      return false;
8000cf72:	30 08       	mov	r8,0
8000cf74:	c2 f8       	rjmp	8000cfd2 <nav_gotoindex+0x82>
#if (FS_MULTI_PARTITION  ==  true)
   if( !nav_partition_set(index->u8_partition))
      return false;
#endif
   if( !nav_partition_mount())
8000cf76:	f0 1f 00 1b 	mcall	8000cfe0 <nav_gotoindex+0x90>
8000cf7a:	18 98       	mov	r8,r12
8000cf7c:	ec 18 00 01 	eorl	r8,0x1
8000cf80:	5c 58       	castu.b	r8
8000cf82:	c0 30       	breq	8000cf88 <nav_gotoindex+0x38>
      return false;
8000cf84:	30 08       	mov	r8,0
8000cf86:	c2 68       	rjmp	8000cfd2 <nav_gotoindex+0x82>

   // Select the directory corresponding at file index
   fs_g_nav.u32_cluster_sel_dir   = index->u32_cluster_sel_dir;
8000cf88:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000cf8c:	70 19       	ld.w	r9,r8[0x4]
8000cf8e:	49 68       	lddpc	r8,8000cfe4 <nav_gotoindex+0x94>
8000cf90:	91 89       	st.w	r8[0x20],r9

   // Search the file position corresponding at file index
   if ( !nav_filelist_reset())
8000cf92:	f0 1f 00 16 	mcall	8000cfe8 <nav_gotoindex+0x98>
8000cf96:	18 98       	mov	r8,r12
8000cf98:	ec 18 00 01 	eorl	r8,0x1
8000cf9c:	5c 58       	castu.b	r8
8000cf9e:	c1 00       	breq	8000cfbe <nav_gotoindex+0x6e>
      return false;
8000cfa0:	30 08       	mov	r8,0
8000cfa2:	c1 88       	rjmp	8000cfd2 <nav_gotoindex+0x82>
   while( fs_g_nav_fast.u16_entry_pos_sel_file != index->u16_entry_pos_sel_file )
   {
      if( !nav_filelist_set( 0 , FS_FIND_NEXT ) )
8000cfa4:	30 1b       	mov	r11,1
8000cfa6:	30 0c       	mov	r12,0
8000cfa8:	f0 1f 00 11 	mcall	8000cfec <nav_gotoindex+0x9c>
8000cfac:	18 98       	mov	r8,r12
8000cfae:	ec 18 00 01 	eorl	r8,0x1
8000cfb2:	5c 58       	castu.b	r8
8000cfb4:	c0 60       	breq	8000cfc0 <nav_gotoindex+0x70>
      {
         nav_filelist_reset();
8000cfb6:	f0 1f 00 0d 	mcall	8000cfe8 <nav_gotoindex+0x98>
         return false;
8000cfba:	30 08       	mov	r8,0
8000cfbc:	c0 b8       	rjmp	8000cfd2 <nav_gotoindex+0x82>
   fs_g_nav.u32_cluster_sel_dir   = index->u32_cluster_sel_dir;

   // Search the file position corresponding at file index
   if ( !nav_filelist_reset())
      return false;
   while( fs_g_nav_fast.u16_entry_pos_sel_file != index->u16_entry_pos_sel_file )
8000cfbe:	d7 03       	nop
8000cfc0:	48 c8       	lddpc	r8,8000cff0 <nav_gotoindex+0xa0>
8000cfc2:	90 19       	ld.sh	r9,r8[0x2]
8000cfc4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000cfc8:	90 48       	ld.sh	r8,r8[0x8]
8000cfca:	f0 09 19 00 	cp.h	r9,r8
8000cfce:	ce b1       	brne	8000cfa4 <nav_gotoindex+0x54>
      {
         nav_filelist_reset();
         return false;
      }
   }
   return true;
8000cfd0:	30 18       	mov	r8,1
}
8000cfd2:	10 9c       	mov	r12,r8
8000cfd4:	2f fd       	sub	sp,-4
8000cfd6:	e3 cd 80 80 	ldm	sp++,r7,pc
8000cfda:	00 00       	add	r0,r0
8000cfdc:	80 00       	ld.sh	r0,r0[0x0]
8000cfde:	ca 04       	brge	8000cf1e <nav_getindex+0x12>
8000cfe0:	80 00       	ld.sh	r0,r0[0x0]
8000cfe2:	ca 7c       	rcall	8000d130 <nav_dir_gotoparent+0xb4>
8000cfe4:	00 00       	add	r0,r0
8000cfe6:	0d 88       	ld.ub	r8,r6[0x0]
8000cfe8:	80 00       	ld.sh	r0,r0[0x0]
8000cfea:	ca cc       	rcall	8000d142 <nav_dir_gotoparent+0xc6>
8000cfec:	80 00       	ld.sh	r0,r0[0x0]
8000cfee:	ca f8       	rjmp	8000d14c <nav_dir_gotoparent+0xd0>
8000cff0:	00 00       	add	r0,r0
8000cff2:	0d d4       	ld.ub	r4,r6[0x5]

8000cff4 <nav_dir_root>:
//!
//! @return  false in case of error, see global value "fs_g_status" for more detail
//! @return  true otherwise
//!
bool  nav_dir_root( void )
{
8000cff4:	eb cd 40 80 	pushm	r7,lr
8000cff8:	1a 97       	mov	r7,sp
   return nav_partition_mount();
8000cffa:	f0 1f 00 04 	mcall	8000d008 <nav_dir_root+0x14>
8000cffe:	18 98       	mov	r8,r12
}
8000d000:	10 9c       	mov	r12,r8
8000d002:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d006:	00 00       	add	r0,r0
8000d008:	80 00       	ld.sh	r0,r0[0x0]
8000d00a:	ca 7c       	rcall	8000d158 <nav_dir_make>

8000d00c <nav_dir_cd>:
//! After this routine the file list changes and contains the files and directories of the new directory.
//! By default no file is selected.
//! @endverbatim
//!
bool  nav_dir_cd( void )
{
8000d00c:	eb cd 40 80 	pushm	r7,lr
8000d010:	1a 97       	mov	r7,sp
   if ( !fat_check_mount_select_noopen())
8000d012:	f0 1f 00 15 	mcall	8000d064 <nav_dir_cd+0x58>
8000d016:	18 98       	mov	r8,r12
8000d018:	ec 18 00 01 	eorl	r8,0x1
8000d01c:	5c 58       	castu.b	r8
8000d01e:	c0 30       	breq	8000d024 <nav_dir_cd+0x18>
      return false;
8000d020:	30 08       	mov	r8,0
8000d022:	c1 d8       	rjmp	8000d05c <nav_dir_cd+0x50>

   // The current selection, is it a directory ?
   if ( !fat_entry_is_dir())
8000d024:	f0 1f 00 11 	mcall	8000d068 <nav_dir_cd+0x5c>
8000d028:	18 98       	mov	r8,r12
8000d02a:	ec 18 00 01 	eorl	r8,0x1
8000d02e:	5c 58       	castu.b	r8
8000d030:	c0 30       	breq	8000d036 <nav_dir_cd+0x2a>
      return false;
8000d032:	30 08       	mov	r8,0
8000d034:	c1 48       	rjmp	8000d05c <nav_dir_cd+0x50>

   // Select the current directory
   fs_g_nav.u16_entry_pos_sel_dir = fs_g_nav_fast.u16_entry_pos_sel_file;
8000d036:	48 e8       	lddpc	r8,8000d06c <nav_dir_cd+0x60>
8000d038:	90 18       	ld.sh	r8,r8[0x2]
8000d03a:	48 e9       	lddpc	r9,8000d070 <nav_dir_cd+0x64>
8000d03c:	f3 58 00 1c 	st.h	r9[28],r8
   fs_g_nav.u32_cluster_sel_dir = fs_g_nav_entry.u32_cluster;
8000d040:	48 d8       	lddpc	r8,8000d074 <nav_dir_cd+0x68>
8000d042:	70 19       	ld.w	r9,r8[0x4]
8000d044:	48 b8       	lddpc	r8,8000d070 <nav_dir_cd+0x64>
8000d046:	91 89       	st.w	r8[0x20],r9

   // Reset file list
   if( false == nav_filelist_reset())
8000d048:	f0 1f 00 0c 	mcall	8000d078 <nav_dir_cd+0x6c>
8000d04c:	18 98       	mov	r8,r12
8000d04e:	ec 18 00 01 	eorl	r8,0x1
8000d052:	5c 58       	castu.b	r8
8000d054:	c0 30       	breq	8000d05a <nav_dir_cd+0x4e>
      return false;
8000d056:	30 08       	mov	r8,0
8000d058:	c0 28       	rjmp	8000d05c <nav_dir_cd+0x50>
   return true;
8000d05a:	30 18       	mov	r8,1
}
8000d05c:	10 9c       	mov	r12,r8
8000d05e:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d062:	00 00       	add	r0,r0
8000d064:	80 00       	ld.sh	r0,r0[0x0]
8000d066:	8e 78       	ld.sh	r8,r7[0xe]
8000d068:	80 00       	ld.sh	r0,r0[0x0]
8000d06a:	a4 98       	st.b	r2[0x1],r8
8000d06c:	00 00       	add	r0,r0
8000d06e:	0d d4       	ld.ub	r4,r6[0x5]
8000d070:	00 00       	add	r0,r0
8000d072:	0d 88       	ld.ub	r8,r6[0x0]
8000d074:	00 00       	add	r0,r0
8000d076:	0b 48       	ld.w	r8,--r5
8000d078:	80 00       	ld.sh	r0,r0[0x0]
8000d07a:	ca cc       	rcall	8000d1d2 <nav_dir_make+0x7a>

8000d07c <nav_dir_gotoparent>:
//! After, the file list changes and contains the files and directories of the new directory.
//! By default, the file selected in file list is the previous (children) directory.
//! @endverbatim
//!
bool  nav_dir_gotoparent( void )
{
8000d07c:	eb cd 40 80 	pushm	r7,lr
8000d080:	1a 97       	mov	r7,sp
8000d082:	20 1d       	sub	sp,4
   uint32_t u32_cluster_old_dir;

   if (!fat_check_mount_noopen())
8000d084:	f0 1f 00 2c 	mcall	8000d134 <nav_dir_gotoparent+0xb8>
8000d088:	18 98       	mov	r8,r12
8000d08a:	ec 18 00 01 	eorl	r8,0x1
8000d08e:	5c 58       	castu.b	r8
8000d090:	c0 30       	breq	8000d096 <nav_dir_gotoparent+0x1a>
      return false;
8000d092:	30 08       	mov	r8,0
8000d094:	c4 b8       	rjmp	8000d12a <nav_dir_gotoparent+0xae>

   if (0 == fs_g_nav.u32_cluster_sel_dir)
8000d096:	4a 98       	lddpc	r8,8000d138 <nav_dir_gotoparent+0xbc>
8000d098:	70 88       	ld.w	r8,r8[0x20]
8000d09a:	58 08       	cp.w	r8,0
8000d09c:	c0 61       	brne	8000d0a8 <nav_dir_gotoparent+0x2c>
   {
      fs_g_status = FS_ERR_IS_ROOT;        // There aren't parent
8000d09e:	4a 89       	lddpc	r9,8000d13c <nav_dir_gotoparent+0xc0>
8000d0a0:	31 98       	mov	r8,25
8000d0a2:	b2 88       	st.b	r9[0x0],r8
      return false;
8000d0a4:	30 08       	mov	r8,0
8000d0a6:	c4 28       	rjmp	8000d12a <nav_dir_gotoparent+0xae>
   }

   // Select and read information about directory ".."
   fs_g_nav_fast.u16_entry_pos_sel_file = 1;
8000d0a8:	4a 69       	lddpc	r9,8000d140 <nav_dir_gotoparent+0xc4>
8000d0aa:	30 18       	mov	r8,1
8000d0ac:	b2 18       	st.h	r9[0x2],r8
   if ( !fat_read_dir())
8000d0ae:	f0 1f 00 26 	mcall	8000d144 <nav_dir_gotoparent+0xc8>
8000d0b2:	18 98       	mov	r8,r12
8000d0b4:	ec 18 00 01 	eorl	r8,0x1
8000d0b8:	5c 58       	castu.b	r8
8000d0ba:	c0 30       	breq	8000d0c0 <nav_dir_gotoparent+0x44>
      return false;
8000d0bc:	30 08       	mov	r8,0
8000d0be:	c3 68       	rjmp	8000d12a <nav_dir_gotoparent+0xae>
   fat_get_entry_info();
8000d0c0:	f0 1f 00 22 	mcall	8000d148 <nav_dir_gotoparent+0xcc>
   // Save the children directory cluster
   u32_cluster_old_dir = fs_g_nav.u32_cluster_sel_dir;
8000d0c4:	49 d8       	lddpc	r8,8000d138 <nav_dir_gotoparent+0xbc>
8000d0c6:	70 88       	ld.w	r8,r8[0x20]
8000d0c8:	ef 48 ff fc 	st.w	r7[-4],r8

   // Select the parent directory via information present in the current directory ".."
   fs_g_nav.u32_cluster_sel_dir = fs_g_nav_entry.u32_cluster;
8000d0cc:	4a 08       	lddpc	r8,8000d14c <nav_dir_gotoparent+0xd0>
8000d0ce:	70 19       	ld.w	r9,r8[0x4]
8000d0d0:	49 a8       	lddpc	r8,8000d138 <nav_dir_gotoparent+0xbc>
8000d0d2:	91 89       	st.w	r8[0x20],r9

   // Select the children directory in new directory (=parent directory)
   if( false == nav_filelist_reset())
8000d0d4:	f0 1f 00 1f 	mcall	8000d150 <nav_dir_gotoparent+0xd4>
8000d0d8:	18 98       	mov	r8,r12
8000d0da:	ec 18 00 01 	eorl	r8,0x1
8000d0de:	5c 58       	castu.b	r8
8000d0e0:	c0 30       	breq	8000d0e6 <nav_dir_gotoparent+0x6a>
      return false;
8000d0e2:	30 08       	mov	r8,0
8000d0e4:	c2 38       	rjmp	8000d12a <nav_dir_gotoparent+0xae>
   if( fs_g_nav.b_mode_nav_single && (FS_DIR != fs_g_nav.b_mode_nav) )
8000d0e6:	49 58       	lddpc	r8,8000d138 <nav_dir_gotoparent+0xbc>
8000d0e8:	f1 38 00 2d 	ld.ub	r8,r8[45]
8000d0ec:	58 08       	cp.w	r8,0
8000d0ee:	c1 00       	breq	8000d10e <nav_dir_gotoparent+0x92>
8000d0f0:	49 28       	lddpc	r8,8000d138 <nav_dir_gotoparent+0xbc>
8000d0f2:	f1 38 00 2c 	ld.ub	r8,r8[44]
8000d0f6:	58 08       	cp.w	r8,0
8000d0f8:	c0 d0       	breq	8000d112 <nav_dir_gotoparent+0x96>
      return true;
8000d0fa:	30 18       	mov	r8,1
8000d0fc:	c1 78       	rjmp	8000d12a <nav_dir_gotoparent+0xae>

   while( nav_filelist_set( 0 , FS_FIND_NEXT ) )
   {
      if (fs_g_nav_entry.u32_cluster == u32_cluster_old_dir)
8000d0fe:	49 48       	lddpc	r8,8000d14c <nav_dir_gotoparent+0xd0>
8000d100:	70 19       	ld.w	r9,r8[0x4]
8000d102:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000d106:	10 39       	cp.w	r9,r8
8000d108:	c0 61       	brne	8000d114 <nav_dir_gotoparent+0x98>
         return true;         // It is the children directory
8000d10a:	30 18       	mov	r8,1
8000d10c:	c0 f8       	rjmp	8000d12a <nav_dir_gotoparent+0xae>
   if( false == nav_filelist_reset())
      return false;
   if( fs_g_nav.b_mode_nav_single && (FS_DIR != fs_g_nav.b_mode_nav) )
      return true;

   while( nav_filelist_set( 0 , FS_FIND_NEXT ) )
8000d10e:	d7 03       	nop
8000d110:	c0 28       	rjmp	8000d114 <nav_dir_gotoparent+0x98>
8000d112:	d7 03       	nop
8000d114:	30 1b       	mov	r11,1
8000d116:	30 0c       	mov	r12,0
8000d118:	f0 1f 00 0f 	mcall	8000d154 <nav_dir_gotoparent+0xd8>
8000d11c:	18 98       	mov	r8,r12
8000d11e:	58 08       	cp.w	r8,0
8000d120:	ce f1       	brne	8000d0fe <nav_dir_gotoparent+0x82>
   {
      if (fs_g_nav_entry.u32_cluster == u32_cluster_old_dir)
         return true;         // It is the children directory
   }
   fs_g_status = FS_ERR_FS;
8000d122:	48 79       	lddpc	r9,8000d13c <nav_dir_gotoparent+0xc0>
8000d124:	30 88       	mov	r8,8
8000d126:	b2 88       	st.b	r9[0x0],r8
   return false;
8000d128:	30 08       	mov	r8,0
}
8000d12a:	10 9c       	mov	r12,r8
8000d12c:	2f fd       	sub	sp,-4
8000d12e:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d132:	00 00       	add	r0,r0
8000d134:	80 00       	ld.sh	r0,r0[0x0]
8000d136:	8e 4c       	ld.sh	r12,r7[0x8]
8000d138:	00 00       	add	r0,r0
8000d13a:	0d 88       	ld.ub	r8,r6[0x0]
8000d13c:	00 00       	add	r0,r0
8000d13e:	0d d8       	ld.ub	r8,r6[0x5]
8000d140:	00 00       	add	r0,r0
8000d142:	0d d4       	ld.ub	r4,r6[0x5]
8000d144:	80 00       	ld.sh	r0,r0[0x0]
8000d146:	a2 44       	st.h	r1[0x8],r4
8000d148:	80 00       	ld.sh	r0,r0[0x0]
8000d14a:	a3 c0       	cbr	r0,0x2
8000d14c:	00 00       	add	r0,r0
8000d14e:	0b 48       	ld.w	r8,--r5
8000d150:	80 00       	ld.sh	r0,r0[0x0]
8000d152:	ca cc       	rcall	8000d2aa <nav_setcwd+0x6a>
8000d154:	80 00       	ld.sh	r0,r0[0x0]
8000d156:	ca f8       	rjmp	8000d2b4 <nav_setcwd+0x74>

8000d158 <nav_dir_make>:
//!
//! @return    false in case of error, see global value "fs_g_status" for more detail
//! @return    true otherwise
//!
bool  nav_dir_make( const FS_STRING sz_name  )
{
8000d158:	eb cd 40 80 	pushm	r7,lr
8000d15c:	1a 97       	mov	r7,sp
8000d15e:	20 1d       	sub	sp,4
8000d160:	ef 4c ff fc 	st.w	r7[-4],r12
   if ( !fat_check_mount_noopen())
8000d164:	f0 1f 00 2c 	mcall	8000d214 <nav_dir_make+0xbc>
8000d168:	18 98       	mov	r8,r12
8000d16a:	ec 18 00 01 	eorl	r8,0x1
8000d16e:	5c 58       	castu.b	r8
8000d170:	c0 30       	breq	8000d176 <nav_dir_make+0x1e>
      return false;
8000d172:	30 08       	mov	r8,0
8000d174:	c4 b8       	rjmp	8000d20a <nav_dir_make+0xb2>

   // Create an entry file
   if ( !nav_file_create( sz_name ))
8000d176:	ee fc ff fc 	ld.w	r12,r7[-4]
8000d17a:	f0 1f 00 28 	mcall	8000d218 <nav_dir_make+0xc0>
8000d17e:	18 98       	mov	r8,r12
8000d180:	ec 18 00 01 	eorl	r8,0x1
8000d184:	5c 58       	castu.b	r8
8000d186:	c0 30       	breq	8000d18c <nav_dir_make+0x34>
      return false;
8000d188:	30 08       	mov	r8,0
8000d18a:	c4 08       	rjmp	8000d20a <nav_dir_make+0xb2>

   // Allocate one cluster for the new directory
   MSB0(fs_g_seg.u32_addr)=0xFF;    // It is a new cluster list
8000d18c:	4a 49       	lddpc	r9,8000d21c <nav_dir_make+0xc4>
8000d18e:	3f f8       	mov	r8,-1
8000d190:	b2 88       	st.b	r9[0x0],r8
   fs_g_seg.u32_size_or_pos = 1;    // Only one sector (= one cluster)
8000d192:	4a 38       	lddpc	r8,8000d21c <nav_dir_make+0xc4>
8000d194:	30 19       	mov	r9,1
8000d196:	91 19       	st.w	r8[0x4],r9
   if ( !fat_allocfreespace())
8000d198:	f0 1f 00 22 	mcall	8000d220 <nav_dir_make+0xc8>
8000d19c:	18 98       	mov	r8,r12
8000d19e:	ec 18 00 01 	eorl	r8,0x1
8000d1a2:	5c 58       	castu.b	r8
8000d1a4:	c0 80       	breq	8000d1b4 <nav_dir_make+0x5c>
   {
      fat_delete_file( false );
8000d1a6:	30 0c       	mov	r12,0
8000d1a8:	f0 1f 00 1f 	mcall	8000d224 <nav_dir_make+0xcc>
      fat_cache_flush();
8000d1ac:	f0 1f 00 1f 	mcall	8000d228 <nav_dir_make+0xd0>
      return false;
8000d1b0:	30 08       	mov	r8,0
8000d1b2:	c2 c8       	rjmp	8000d20a <nav_dir_make+0xb2>
   }

   // Save information about the new directory
   fs_g_nav_entry.u32_cluster = fs_g_seg.u32_addr; // First cluster of the directory returned by alloc_free_space
8000d1b4:	49 a8       	lddpc	r8,8000d21c <nav_dir_make+0xc4>
8000d1b6:	70 09       	ld.w	r9,r8[0x0]
8000d1b8:	49 d8       	lddpc	r8,8000d22c <nav_dir_make+0xd4>
8000d1ba:	91 19       	st.w	r8[0x4],r9
   fs_g_nav_entry.u32_size    = 0;                 // The directory size is null
8000d1bc:	49 c8       	lddpc	r8,8000d22c <nav_dir_make+0xd4>
8000d1be:	30 09       	mov	r9,0
8000d1c0:	91 29       	st.w	r8[0x8],r9
   fs_g_nav_entry.u8_attr     = FS_ATTR_DIRECTORY; // Directory Attribute
8000d1c2:	49 b9       	lddpc	r9,8000d22c <nav_dir_make+0xd4>
8000d1c4:	31 08       	mov	r8,16
8000d1c6:	b2 a8       	st.b	r9[0x2],r8

   // Initialize the values in the new directory
   if ( !fat_initialize_dir())
8000d1c8:	f0 1f 00 1a 	mcall	8000d230 <nav_dir_make+0xd8>
8000d1cc:	18 98       	mov	r8,r12
8000d1ce:	ec 18 00 01 	eorl	r8,0x1
8000d1d2:	5c 58       	castu.b	r8
8000d1d4:	c0 30       	breq	8000d1da <nav_dir_make+0x82>
      return false;
8000d1d6:	30 08       	mov	r8,0
8000d1d8:	c1 98       	rjmp	8000d20a <nav_dir_make+0xb2>

   // Write directory information in her entry file
   if ( !fat_read_dir())
8000d1da:	f0 1f 00 17 	mcall	8000d234 <nav_dir_make+0xdc>
8000d1de:	18 98       	mov	r8,r12
8000d1e0:	ec 18 00 01 	eorl	r8,0x1
8000d1e4:	5c 58       	castu.b	r8
8000d1e6:	c0 30       	breq	8000d1ec <nav_dir_make+0x94>
      return false;
8000d1e8:	30 08       	mov	r8,0
8000d1ea:	c1 08       	rjmp	8000d20a <nav_dir_make+0xb2>
   fat_write_entry_file();
8000d1ec:	f0 1f 00 13 	mcall	8000d238 <nav_dir_make+0xe0>
   if( !fat_cache_flush())
8000d1f0:	f0 1f 00 0e 	mcall	8000d228 <nav_dir_make+0xd0>
8000d1f4:	18 98       	mov	r8,r12
8000d1f6:	ec 18 00 01 	eorl	r8,0x1
8000d1fa:	5c 58       	castu.b	r8
8000d1fc:	c0 30       	breq	8000d202 <nav_dir_make+0xaa>
      return false;
8000d1fe:	30 08       	mov	r8,0
8000d200:	c0 58       	rjmp	8000d20a <nav_dir_make+0xb2>

   // Go to position of new directory (it is the last directory)
   return nav_filelist_last( FS_DIR );
8000d202:	30 0c       	mov	r12,0
8000d204:	f0 1f 00 0e 	mcall	8000d23c <nav_dir_make+0xe4>
8000d208:	18 98       	mov	r8,r12
}
8000d20a:	10 9c       	mov	r12,r8
8000d20c:	2f fd       	sub	sp,-4
8000d20e:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d212:	00 00       	add	r0,r0
8000d214:	80 00       	ld.sh	r0,r0[0x0]
8000d216:	8e 4c       	ld.sh	r12,r7[0x8]
8000d218:	80 00       	ld.sh	r0,r0[0x0]
8000d21a:	d6 f4       	*unknown*
8000d21c:	00 00       	add	r0,r0
8000d21e:	0e 30       	cp.w	r0,r7
8000d220:	80 00       	ld.sh	r0,r0[0x0]
8000d222:	c3 cc       	rcall	8000d29a <nav_setcwd+0x5a>
8000d224:	80 00       	ld.sh	r0,r0[0x0]
8000d226:	c2 ec       	rcall	8000d282 <nav_setcwd+0x42>
8000d228:	80 00       	ld.sh	r0,r0[0x0]
8000d22a:	ab d0       	cbr	r0,0xb
8000d22c:	00 00       	add	r0,r0
8000d22e:	0b 48       	ld.w	r8,--r5
8000d230:	80 00       	ld.sh	r0,r0[0x0]
8000d232:	b6 b4       	st.b	r11[0x3],r4
8000d234:	80 00       	ld.sh	r0,r0[0x0]
8000d236:	a2 44       	st.h	r1[0x8],r4
8000d238:	80 00       	ld.sh	r0,r0[0x0]
8000d23a:	a5 10       	ld.d	r0,--r2
8000d23c:	80 00       	ld.sh	r0,r0[0x0]
8000d23e:	ce 7c       	rcall	8000d40c <nav_setcwd+0x1cc>

8000d240 <nav_setcwd>:
//! With syntax "./dir_parent/directory_name"  the file list corresponding at "dir_parent" and "directory_name" is selected.
//! With syntax "./dir_parent/directory_name/" the file list corresponding at "directory_name" and no file is selected.
//! @endverbatim
//!
bool  nav_setcwd( FS_STRING sz_path , bool b_match_case , bool b_create )
{
8000d240:	eb cd 40 80 	pushm	r7,lr
8000d244:	1a 97       	mov	r7,sp
8000d246:	20 dd       	sub	sp,52
8000d248:	ef 4c ff e0 	st.w	r7[-32],r12
8000d24c:	16 99       	mov	r9,r11
8000d24e:	14 98       	mov	r8,r10
8000d250:	ef 69 ff dc 	st.b	r7[-36],r9
8000d254:	ef 68 ff d8 	st.b	r7[-40],r8
   _MEM_TYPE_SLOW_   Fs_index index;
#if (FSFEATURE_WRITE == (FS_LEVEL_FEATURES & FSFEATURE_WRITE)) ||              \
    (FSFEATURE_WRITE_COMPLET == (FS_LEVEL_FEATURES & FSFEATURE_WRITE_COMPLET))
   FS_STRING sz_save_path = 0;
8000d258:	30 08       	mov	r8,0
8000d25a:	ef 48 ff f0 	st.w	r7[-16],r8
#endif
   bool b_create_name = false;
8000d25e:	30 08       	mov	r8,0
8000d260:	ef 68 ff f7 	st.b	r7[-9],r8

   if ( !fat_check_noopen())
8000d264:	f0 1f 00 b6 	mcall	8000d53c <nav_setcwd+0x2fc>
8000d268:	18 98       	mov	r8,r12
8000d26a:	ec 18 00 01 	eorl	r8,0x1
8000d26e:	5c 58       	castu.b	r8
8000d270:	c0 30       	breq	8000d276 <nav_setcwd+0x36>
      return false;
8000d272:	30 08       	mov	r8,0
8000d274:	c5 f9       	rjmp	8000d532 <nav_setcwd+0x2f2>

   index = nav_getindex();             // Save current position
8000d276:	ee c8 00 34 	sub	r8,r7,52
8000d27a:	10 9c       	mov	r12,r8
8000d27c:	f0 1f 00 b1 	mcall	8000d540 <nav_setcwd+0x300>
8000d280:	ee ca 00 1c 	sub	r10,r7,28
8000d284:	ee cb 00 34 	sub	r11,r7,52
8000d288:	f6 e8 00 00 	ld.d	r8,r11[0]
8000d28c:	f4 e9 00 00 	st.d	r10[0],r8
8000d290:	76 28       	ld.w	r8,r11[0x8]
8000d292:	95 28       	st.w	r10[0x8],r8

   // Check syntax "\path..."
   if( (( Is_unicode) && (('\\'  == ((FS_STR_UNICODE)sz_path )[0]) || ('/'  == ((FS_STR_UNICODE)sz_path )[0])) )
   ||  ((!Is_unicode) && (('\\'  == sz_path [0]) || ('/'  == sz_path [0])) ) )
8000d294:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000d298:	11 89       	ld.ub	r9,r8[0x0]
      return false;

   index = nav_getindex();             // Save current position

   // Check syntax "\path..."
   if( (( Is_unicode) && (('\\'  == ((FS_STR_UNICODE)sz_path )[0]) || ('/'  == ((FS_STR_UNICODE)sz_path )[0])) )
8000d29a:	35 c8       	mov	r8,92
8000d29c:	f0 09 18 00 	cp.b	r9,r8
8000d2a0:	c0 80       	breq	8000d2b0 <nav_setcwd+0x70>
   ||  ((!Is_unicode) && (('\\'  == sz_path [0]) || ('/'  == sz_path [0])) ) )
8000d2a2:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000d2a6:	11 89       	ld.ub	r9,r8[0x0]
      return false;

   index = nav_getindex();             // Save current position

   // Check syntax "\path..."
   if( (( Is_unicode) && (('\\'  == ((FS_STR_UNICODE)sz_path )[0]) || ('/'  == ((FS_STR_UNICODE)sz_path )[0])) )
8000d2a8:	32 f8       	mov	r8,47
8000d2aa:	f0 09 18 00 	cp.b	r9,r8
8000d2ae:	c0 f1       	brne	8000d2cc <nav_setcwd+0x8c>
   ||  ((!Is_unicode) && (('\\'  == sz_path [0]) || ('/'  == sz_path [0])) ) )
   {
      // Go to the root of current drive
      if( !nav_dir_root())
8000d2b0:	f0 1f 00 a5 	mcall	8000d544 <nav_setcwd+0x304>
8000d2b4:	18 98       	mov	r8,r12
8000d2b6:	ec 18 00 01 	eorl	r8,0x1
8000d2ba:	5c 58       	castu.b	r8
8000d2bc:	e0 81 01 22 	brne	8000d500 <nav_setcwd+0x2c0>
         goto nav_setcwd_fail;
      sz_path  += (Is_unicode? 2 : 1 );
8000d2c0:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000d2c4:	2f f8       	sub	r8,-1
8000d2c6:	ef 48 ff e0 	st.w	r7[-32],r8
      return false;

   index = nav_getindex();             // Save current position

   // Check syntax "\path..."
   if( (( Is_unicode) && (('\\'  == ((FS_STR_UNICODE)sz_path )[0]) || ('/'  == ((FS_STR_UNICODE)sz_path )[0])) )
8000d2ca:	ca 68       	rjmp	8000d416 <nav_setcwd+0x1d6>
      sz_path  += (Is_unicode? 2 : 1 );
   }else

   // Check syntax "x:\path..."
   if( (( Is_unicode) && (( ':'  == ((FS_STR_UNICODE)sz_path )[1] ) && (('\\'  == ((FS_STR_UNICODE)sz_path )[2] ) || ('/'  == ((FS_STR_UNICODE)sz_path )[2]))) )
   ||  ((!Is_unicode) && (( ':'  == sz_path [1] ) && (('\\'  == sz_path [2] ) || ('/'  == sz_path [2]))) ) )
8000d2cc:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000d2d0:	2f f8       	sub	r8,-1
8000d2d2:	11 89       	ld.ub	r9,r8[0x0]
         goto nav_setcwd_fail;
      sz_path  += (Is_unicode? 2 : 1 );
   }else

   // Check syntax "x:\path..."
   if( (( Is_unicode) && (( ':'  == ((FS_STR_UNICODE)sz_path )[1] ) && (('\\'  == ((FS_STR_UNICODE)sz_path )[2] ) || ('/'  == ((FS_STR_UNICODE)sz_path )[2]))) )
8000d2d4:	33 a8       	mov	r8,58
8000d2d6:	f0 09 18 00 	cp.b	r9,r8
8000d2da:	c4 11       	brne	8000d35c <nav_setcwd+0x11c>
   ||  ((!Is_unicode) && (( ':'  == sz_path [1] ) && (('\\'  == sz_path [2] ) || ('/'  == sz_path [2]))) ) )
8000d2dc:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000d2e0:	2f e8       	sub	r8,-2
8000d2e2:	11 89       	ld.ub	r9,r8[0x0]
         goto nav_setcwd_fail;
      sz_path  += (Is_unicode? 2 : 1 );
   }else

   // Check syntax "x:\path..."
   if( (( Is_unicode) && (( ':'  == ((FS_STR_UNICODE)sz_path )[1] ) && (('\\'  == ((FS_STR_UNICODE)sz_path )[2] ) || ('/'  == ((FS_STR_UNICODE)sz_path )[2]))) )
8000d2e4:	35 c8       	mov	r8,92
8000d2e6:	f0 09 18 00 	cp.b	r9,r8
8000d2ea:	c0 90       	breq	8000d2fc <nav_setcwd+0xbc>
   ||  ((!Is_unicode) && (( ':'  == sz_path [1] ) && (('\\'  == sz_path [2] ) || ('/'  == sz_path [2]))) ) )
8000d2ec:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000d2f0:	2f e8       	sub	r8,-2
8000d2f2:	11 89       	ld.ub	r9,r8[0x0]
         goto nav_setcwd_fail;
      sz_path  += (Is_unicode? 2 : 1 );
   }else

   // Check syntax "x:\path..."
   if( (( Is_unicode) && (( ':'  == ((FS_STR_UNICODE)sz_path )[1] ) && (('\\'  == ((FS_STR_UNICODE)sz_path )[2] ) || ('/'  == ((FS_STR_UNICODE)sz_path )[2]))) )
8000d2f4:	32 f8       	mov	r8,47
8000d2f6:	f0 09 18 00 	cp.b	r9,r8
8000d2fa:	c3 11       	brne	8000d35c <nav_setcwd+0x11c>
      if( Is_unicode )
      {
         if( !nav_drive_set( toupper(((FS_STR_UNICODE)sz_path )[0])-'A' ) )
            goto nav_setcwd_fail;
      }else{
         if( !nav_drive_set( toupper(sz_path [0])-'A' ) )
8000d2fc:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000d300:	11 88       	ld.ub	r8,r8[0x0]
8000d302:	ef 48 ff fc 	st.w	r7[-4],r8
8000d306:	fe f8 02 42 	ld.w	r8,pc[578]
8000d30a:	70 09       	ld.w	r9,r8[0x0]
8000d30c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000d310:	f2 08 00 08 	add	r8,r9,r8
8000d314:	11 88       	ld.ub	r8,r8[0x0]
8000d316:	e2 18 00 02 	andl	r8,0x2,COH
8000d31a:	c0 50       	breq	8000d324 <nav_setcwd+0xe4>
8000d31c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000d320:	22 08       	sub	r8,32
8000d322:	c0 38       	rjmp	8000d328 <nav_setcwd+0xe8>
8000d324:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000d328:	5c 58       	castu.b	r8
8000d32a:	24 18       	sub	r8,65
8000d32c:	5c 58       	castu.b	r8
8000d32e:	10 9c       	mov	r12,r8
8000d330:	f0 1f 00 87 	mcall	8000d54c <nav_setcwd+0x30c>
8000d334:	18 98       	mov	r8,r12
8000d336:	ec 18 00 01 	eorl	r8,0x1
8000d33a:	5c 58       	castu.b	r8
8000d33c:	e0 81 00 e4 	brne	8000d504 <nav_setcwd+0x2c4>
            goto nav_setcwd_fail;
      }
      if( !nav_partition_mount())
8000d340:	f0 1f 00 84 	mcall	8000d550 <nav_setcwd+0x310>
8000d344:	18 98       	mov	r8,r12
8000d346:	ec 18 00 01 	eorl	r8,0x1
8000d34a:	5c 58       	castu.b	r8
8000d34c:	e0 81 00 de 	brne	8000d508 <nav_setcwd+0x2c8>
         goto nav_setcwd_fail;
      sz_path  += 3*(Is_unicode? 2 : 1 );
8000d350:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000d354:	2f d8       	sub	r8,-3
8000d356:	ef 48 ff e0 	st.w	r7[-32],r8
         goto nav_setcwd_fail;
      sz_path  += (Is_unicode? 2 : 1 );
   }else

   // Check syntax "x:\path..."
   if( (( Is_unicode) && (( ':'  == ((FS_STR_UNICODE)sz_path )[1] ) && (('\\'  == ((FS_STR_UNICODE)sz_path )[2] ) || ('/'  == ((FS_STR_UNICODE)sz_path )[2]))) )
8000d35a:	c5 e8       	rjmp	8000d416 <nav_setcwd+0x1d6>
      sz_path  += 3*(Is_unicode? 2 : 1 );
   }else

   // Check syntax ".\path..."
   if( (( Is_unicode) && (( '.'  == ((FS_STR_UNICODE)sz_path )[0] ) && (('\\'  == ((FS_STR_UNICODE)sz_path )[1] ) || ('/'  == ((FS_STR_UNICODE)sz_path )[1] ))) )
   ||  ((!Is_unicode) && (( '.'  == sz_path [0] ) && (('\\'  == sz_path [1] ) || ('/'  == sz_path [1] ))) ) )
8000d35c:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000d360:	11 89       	ld.ub	r9,r8[0x0]
         goto nav_setcwd_fail;
      sz_path  += 3*(Is_unicode? 2 : 1 );
   }else

   // Check syntax ".\path..."
   if( (( Is_unicode) && (( '.'  == ((FS_STR_UNICODE)sz_path )[0] ) && (('\\'  == ((FS_STR_UNICODE)sz_path )[1] ) || ('/'  == ((FS_STR_UNICODE)sz_path )[1] ))) )
8000d362:	32 e8       	mov	r8,46
8000d364:	f0 09 18 00 	cp.b	r9,r8
8000d368:	c2 f1       	brne	8000d3c6 <nav_setcwd+0x186>
   ||  ((!Is_unicode) && (( '.'  == sz_path [0] ) && (('\\'  == sz_path [1] ) || ('/'  == sz_path [1] ))) ) )
8000d36a:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000d36e:	2f f8       	sub	r8,-1
8000d370:	11 89       	ld.ub	r9,r8[0x0]
         goto nav_setcwd_fail;
      sz_path  += 3*(Is_unicode? 2 : 1 );
   }else

   // Check syntax ".\path..."
   if( (( Is_unicode) && (( '.'  == ((FS_STR_UNICODE)sz_path )[0] ) && (('\\'  == ((FS_STR_UNICODE)sz_path )[1] ) || ('/'  == ((FS_STR_UNICODE)sz_path )[1] ))) )
8000d372:	35 c8       	mov	r8,92
8000d374:	f0 09 18 00 	cp.b	r9,r8
8000d378:	c0 90       	breq	8000d38a <nav_setcwd+0x14a>
   ||  ((!Is_unicode) && (( '.'  == sz_path [0] ) && (('\\'  == sz_path [1] ) || ('/'  == sz_path [1] ))) ) )
8000d37a:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000d37e:	2f f8       	sub	r8,-1
8000d380:	11 89       	ld.ub	r9,r8[0x0]
         goto nav_setcwd_fail;
      sz_path  += 3*(Is_unicode? 2 : 1 );
   }else

   // Check syntax ".\path..."
   if( (( Is_unicode) && (( '.'  == ((FS_STR_UNICODE)sz_path )[0] ) && (('\\'  == ((FS_STR_UNICODE)sz_path )[1] ) || ('/'  == ((FS_STR_UNICODE)sz_path )[1] ))) )
8000d382:	32 f8       	mov	r8,47
8000d384:	f0 09 18 00 	cp.b	r9,r8
8000d388:	c2 11       	brne	8000d3ca <nav_setcwd+0x18a>
   ||  ((!Is_unicode) && (( '.'  == sz_path [0] ) && (('\\'  == sz_path [1] ) || ('/'  == sz_path [1] ))) ) )
   {
      // Search in current directory
      sz_path  += 2*(Is_unicode? 2 : 1 );
8000d38a:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000d38e:	2f e8       	sub	r8,-2
8000d390:	ef 48 ff e0 	st.w	r7[-32],r8
         goto nav_setcwd_fail;
      sz_path  += 3*(Is_unicode? 2 : 1 );
   }else

   // Check syntax ".\path..."
   if( (( Is_unicode) && (( '.'  == ((FS_STR_UNICODE)sz_path )[0] ) && (('\\'  == ((FS_STR_UNICODE)sz_path )[1] ) || ('/'  == ((FS_STR_UNICODE)sz_path )[1] ))) )
8000d394:	c4 18       	rjmp	8000d416 <nav_setcwd+0x1d6>
         while(( '.'  == sz_path [0] )
         &&    ( '.'  == sz_path [1] )
         &&    (('\\'  == sz_path [2]) || ('/'  == sz_path [2]) || (0  == sz_path [2])) )
         {
         // Go to parent directory
         if( !nav_dir_gotoparent() )
8000d396:	f0 1f 00 70 	mcall	8000d554 <nav_setcwd+0x314>
8000d39a:	18 98       	mov	r8,r12
8000d39c:	ec 18 00 01 	eorl	r8,0x1
8000d3a0:	5c 58       	castu.b	r8
8000d3a2:	e0 81 00 b5 	brne	8000d50c <nav_setcwd+0x2cc>
            goto nav_setcwd_fail;
            sz_path  += 2; // jump ".."
8000d3a6:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000d3aa:	2f e8       	sub	r8,-2
8000d3ac:	ef 48 ff e0 	st.w	r7[-32],r8
            if( 0 != sz_path [0])
8000d3b0:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000d3b4:	11 88       	ld.ub	r8,r8[0x0]
8000d3b6:	58 08       	cp.w	r8,0
8000d3b8:	c0 a0       	breq	8000d3cc <nav_setcwd+0x18c>
               sz_path  +=1; // jump "/"
8000d3ba:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000d3be:	2f f8       	sub	r8,-1
8000d3c0:	ef 48 ff e0 	st.w	r7[-32],r8
8000d3c4:	c0 48       	rjmp	8000d3cc <nav_setcwd+0x18c>
            sz_path  += (2*2); // jump ".."
            if( 0 != ((FS_STR_UNICODE)sz_path )[0])
               sz_path  += (2*1); // jump "/"
         }
      }else{
         while(( '.'  == sz_path [0] )
8000d3c6:	d7 03       	nop
8000d3c8:	c0 28       	rjmp	8000d3cc <nav_setcwd+0x18c>
8000d3ca:	d7 03       	nop
8000d3cc:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000d3d0:	11 89       	ld.ub	r9,r8[0x0]
8000d3d2:	32 e8       	mov	r8,46
8000d3d4:	f0 09 18 00 	cp.b	r9,r8
8000d3d8:	c1 f1       	brne	8000d416 <nav_setcwd+0x1d6>
         &&    ( '.'  == sz_path [1] )
8000d3da:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000d3de:	2f f8       	sub	r8,-1
8000d3e0:	11 89       	ld.ub	r9,r8[0x0]
            sz_path  += (2*2); // jump ".."
            if( 0 != ((FS_STR_UNICODE)sz_path )[0])
               sz_path  += (2*1); // jump "/"
         }
      }else{
         while(( '.'  == sz_path [0] )
8000d3e2:	32 e8       	mov	r8,46
8000d3e4:	f0 09 18 00 	cp.b	r9,r8
8000d3e8:	c1 71       	brne	8000d416 <nav_setcwd+0x1d6>
         &&    ( '.'  == sz_path [1] )
         &&    (('\\'  == sz_path [2]) || ('/'  == sz_path [2]) || (0  == sz_path [2])) )
8000d3ea:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000d3ee:	2f e8       	sub	r8,-2
8000d3f0:	11 89       	ld.ub	r9,r8[0x0]
            sz_path  += (2*2); // jump ".."
            if( 0 != ((FS_STR_UNICODE)sz_path )[0])
               sz_path  += (2*1); // jump "/"
         }
      }else{
         while(( '.'  == sz_path [0] )
8000d3f2:	35 c8       	mov	r8,92
8000d3f4:	f0 09 18 00 	cp.b	r9,r8
8000d3f8:	cc f0       	breq	8000d396 <nav_setcwd+0x156>
         &&    ( '.'  == sz_path [1] )
         &&    (('\\'  == sz_path [2]) || ('/'  == sz_path [2]) || (0  == sz_path [2])) )
8000d3fa:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000d3fe:	2f e8       	sub	r8,-2
8000d400:	11 89       	ld.ub	r9,r8[0x0]
            sz_path  += (2*2); // jump ".."
            if( 0 != ((FS_STR_UNICODE)sz_path )[0])
               sz_path  += (2*1); // jump "/"
         }
      }else{
         while(( '.'  == sz_path [0] )
8000d402:	32 f8       	mov	r8,47
8000d404:	f0 09 18 00 	cp.b	r9,r8
8000d408:	cc 70       	breq	8000d396 <nav_setcwd+0x156>
         &&    ( '.'  == sz_path [1] )
         &&    (('\\'  == sz_path [2]) || ('/'  == sz_path [2]) || (0  == sz_path [2])) )
8000d40a:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000d40e:	2f e8       	sub	r8,-2
8000d410:	11 88       	ld.ub	r8,r8[0x0]
            sz_path  += (2*2); // jump ".."
            if( 0 != ((FS_STR_UNICODE)sz_path )[0])
               sz_path  += (2*1); // jump "/"
         }
      }else{
         while(( '.'  == sz_path [0] )
8000d412:	58 08       	cp.w	r8,0
8000d414:	cc 10       	breq	8000d396 <nav_setcwd+0x156>
         }
      }
   }

   // Reset list to start the search at the beginning
   if( !nav_filelist_reset())
8000d416:	f0 1f 00 51 	mcall	8000d558 <nav_setcwd+0x318>
8000d41a:	18 98       	mov	r8,r12
8000d41c:	ec 18 00 01 	eorl	r8,0x1
8000d420:	5c 58       	castu.b	r8
8000d422:	c7 71       	brne	8000d510 <nav_setcwd+0x2d0>
      goto nav_setcwd_fail;

   while( 1 )
   {
      if( (( Is_unicode) && ( 0 == ((FS_STR_UNICODE)sz_path )[0] ) )
      ||  ((!Is_unicode) && ( 0 == sz_path [0] ) ) )
8000d424:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000d428:	11 88       	ld.ub	r8,r8[0x0]
   if( !nav_filelist_reset())
      goto nav_setcwd_fail;

   while( 1 )
   {
      if( (( Is_unicode) && ( 0 == ((FS_STR_UNICODE)sz_path )[0] ) )
8000d42a:	58 08       	cp.w	r8,0
8000d42c:	c0 31       	brne	8000d432 <nav_setcwd+0x1f2>
      ||  ((!Is_unicode) && ( 0 == sz_path [0] ) ) )
      {
         return true;   // path (without file) is found or create
8000d42e:	30 18       	mov	r8,1
8000d430:	c8 18       	rjmp	8000d532 <nav_setcwd+0x2f2>
      }
      if( !nav_filelist_findname( sz_path  , b_match_case  ))
8000d432:	ef 38 ff dc 	ld.ub	r8,r7[-36]
8000d436:	10 9b       	mov	r11,r8
8000d438:	ee fc ff e0 	ld.w	r12,r7[-32]
8000d43c:	f0 1f 00 48 	mcall	8000d55c <nav_setcwd+0x31c>
8000d440:	18 98       	mov	r8,r12
8000d442:	ec 18 00 01 	eorl	r8,0x1
8000d446:	5c 58       	castu.b	r8
8000d448:	c1 00       	breq	8000d468 <nav_setcwd+0x228>
      {
         // The file or directory is not found
         if( !b_create )
8000d44a:	ef 38 ff d8 	ld.ub	r8,r7[-40]
8000d44e:	ec 18 00 01 	eorl	r8,0x1
8000d452:	5c 58       	castu.b	r8
8000d454:	c6 01       	brne	8000d514 <nav_setcwd+0x2d4>
            goto nav_setcwd_fail;   // don't create the directory then exit
         // Set flag to create the directory
         b_create_name = true;
8000d456:	30 18       	mov	r8,1
8000d458:	ef 68 ff f7 	st.b	r7[-9],r8
#if (FSFEATURE_WRITE == (FS_LEVEL_FEATURES & FSFEATURE_WRITE)) ||              \
    (FSFEATURE_WRITE_COMPLET == (FS_LEVEL_FEATURES & FSFEATURE_WRITE_COMPLET))
         sz_save_path = sz_path;
8000d45c:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000d460:	ef 48 ff f0 	st.w	r7[-16],r8
8000d464:	c0 28       	rjmp	8000d468 <nav_setcwd+0x228>
            sz_path  += (Is_unicode? 2 : 1 );
            if( !nav_dir_cd())
               goto nav_setcwd_fail;
            break;
         }
      }
8000d466:	d7 03       	nop
#endif
      }

      while( 1 )
      {
         sz_path  += (Is_unicode? 2 : 1 );
8000d468:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000d46c:	2f f8       	sub	r8,-1
8000d46e:	ef 48 ff e0 	st.w	r7[-32],r8
         if( (( Is_unicode) && ( 0 == ((FS_STR_UNICODE)sz_path )[0] ) )
         ||  ((!Is_unicode) && ( 0 == sz_path [0] ) ) )
8000d472:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000d476:	11 88       	ld.ub	r8,r8[0x0]
      }

      while( 1 )
      {
         sz_path  += (Is_unicode? 2 : 1 );
         if( (( Is_unicode) && ( 0 == ((FS_STR_UNICODE)sz_path )[0] ) )
8000d478:	58 08       	cp.w	r8,0
8000d47a:	c1 11       	brne	8000d49c <nav_setcwd+0x25c>
         ||  ((!Is_unicode) && ( 0 == sz_path [0] ) ) )
         {
            // Is it the last name of path and it is a file
            if( b_create_name )
8000d47c:	ef 39 ff f7 	ld.ub	r9,r7[-9]
8000d480:	30 08       	mov	r8,0
8000d482:	f0 09 18 00 	cp.b	r9,r8
8000d486:	c0 a0       	breq	8000d49a <nav_setcwd+0x25a>
            {
#if (FSFEATURE_WRITE == (FS_LEVEL_FEATURES & FSFEATURE_WRITE))
               // The file must be created
               if( !nav_file_create( sz_save_path ) )
8000d488:	ee fc ff f0 	ld.w	r12,r7[-16]
8000d48c:	f0 1f 00 35 	mcall	8000d560 <nav_setcwd+0x320>
8000d490:	18 98       	mov	r8,r12
8000d492:	ec 18 00 01 	eorl	r8,0x1
8000d496:	5c 58       	castu.b	r8
8000d498:	c4 01       	brne	8000d518 <nav_setcwd+0x2d8>
                  goto nav_setcwd_fail;
#else
               goto nav_setcwd_fail;
#endif
            }
            break;   // The file include in path is found or created, then end of set_cwd
8000d49a:	c3 28       	rjmp	8000d4fe <nav_setcwd+0x2be>
         }

         if( (( Is_unicode) && (('\\' == ((FS_STR_UNICODE)sz_path )[0] ) || ('/' == ((FS_STR_UNICODE)sz_path )[0] )) )
         ||  ((!Is_unicode) && (('\\' == sz_path [0] ) || ('/' == sz_path [0] )) ) )
8000d49c:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000d4a0:	11 89       	ld.ub	r9,r8[0x0]
#endif
            }
            break;   // The file include in path is found or created, then end of set_cwd
         }

         if( (( Is_unicode) && (('\\' == ((FS_STR_UNICODE)sz_path )[0] ) || ('/' == ((FS_STR_UNICODE)sz_path )[0] )) )
8000d4a2:	35 c8       	mov	r8,92
8000d4a4:	f0 09 18 00 	cp.b	r9,r8
8000d4a8:	c0 80       	breq	8000d4b8 <nav_setcwd+0x278>
         ||  ((!Is_unicode) && (('\\' == sz_path [0] ) || ('/' == sz_path [0] )) ) )
8000d4aa:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000d4ae:	11 89       	ld.ub	r9,r8[0x0]
#endif
            }
            break;   // The file include in path is found or created, then end of set_cwd
         }

         if( (( Is_unicode) && (('\\' == ((FS_STR_UNICODE)sz_path )[0] ) || ('/' == ((FS_STR_UNICODE)sz_path )[0] )) )
8000d4b0:	32 f8       	mov	r8,47
8000d4b2:	f0 09 18 00 	cp.b	r9,r8
8000d4b6:	cd 81       	brne	8000d466 <nav_setcwd+0x226>
         ||  ((!Is_unicode) && (('\\' == sz_path [0] ) || ('/' == sz_path [0] )) ) )
         {
            // Is it a folder name
            if( b_create_name )
8000d4b8:	ef 39 ff f7 	ld.ub	r9,r7[-9]
8000d4bc:	30 08       	mov	r8,0
8000d4be:	f0 09 18 00 	cp.b	r9,r8
8000d4c2:	c0 a0       	breq	8000d4d6 <nav_setcwd+0x296>
            {
#if (FSFEATURE_WRITE_COMPLET == (FS_LEVEL_FEATURES & FSFEATURE_WRITE_COMPLET))
               // The folder doesn't exist and it must be created
               if( !nav_dir_make( sz_save_path ))
8000d4c4:	ee fc ff f0 	ld.w	r12,r7[-16]
8000d4c8:	f0 1f 00 27 	mcall	8000d564 <nav_setcwd+0x324>
8000d4cc:	18 98       	mov	r8,r12
8000d4ce:	ec 18 00 01 	eorl	r8,0x1
8000d4d2:	5c 58       	castu.b	r8
8000d4d4:	c2 41       	brne	8000d51c <nav_setcwd+0x2dc>
                  goto nav_setcwd_fail;
#else
               goto nav_setcwd_fail;
#endif
            }
            if( !fat_entry_is_dir() )
8000d4d6:	f0 1f 00 25 	mcall	8000d568 <nav_setcwd+0x328>
8000d4da:	18 98       	mov	r8,r12
8000d4dc:	ec 18 00 01 	eorl	r8,0x1
8000d4e0:	5c 58       	castu.b	r8
8000d4e2:	c1 f1       	brne	8000d520 <nav_setcwd+0x2e0>
               goto nav_setcwd_fail;
            // jump '\'
            sz_path  += (Is_unicode? 2 : 1 );
8000d4e4:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000d4e8:	2f f8       	sub	r8,-1
8000d4ea:	ef 48 ff e0 	st.w	r7[-32],r8
            if( !nav_dir_cd())
8000d4ee:	f0 1f 00 20 	mcall	8000d56c <nav_setcwd+0x32c>
8000d4f2:	18 98       	mov	r8,r12
8000d4f4:	ec 18 00 01 	eorl	r8,0x1
8000d4f8:	5c 58       	castu.b	r8
8000d4fa:	c1 51       	brne	8000d524 <nav_setcwd+0x2e4>
               goto nav_setcwd_fail;
            break;
8000d4fc:	d7 03       	nop
         }
      }

   }
8000d4fe:	c9 3b       	rjmp	8000d424 <nav_setcwd+0x1e4>
   if( (( Is_unicode) && (('\\'  == ((FS_STR_UNICODE)sz_path )[0]) || ('/'  == ((FS_STR_UNICODE)sz_path )[0])) )
   ||  ((!Is_unicode) && (('\\'  == sz_path [0]) || ('/'  == sz_path [0])) ) )
   {
      // Go to the root of current drive
      if( !nav_dir_root())
         goto nav_setcwd_fail;
8000d500:	d7 03       	nop
8000d502:	c1 28       	rjmp	8000d526 <nav_setcwd+0x2e6>
      {
         if( !nav_drive_set( toupper(((FS_STR_UNICODE)sz_path )[0])-'A' ) )
            goto nav_setcwd_fail;
      }else{
         if( !nav_drive_set( toupper(sz_path [0])-'A' ) )
            goto nav_setcwd_fail;
8000d504:	d7 03       	nop
8000d506:	c1 08       	rjmp	8000d526 <nav_setcwd+0x2e6>
      }
      if( !nav_partition_mount())
         goto nav_setcwd_fail;
8000d508:	d7 03       	nop
8000d50a:	c0 e8       	rjmp	8000d526 <nav_setcwd+0x2e6>
         &&    ( '.'  == sz_path [1] )
         &&    (('\\'  == sz_path [2]) || ('/'  == sz_path [2]) || (0  == sz_path [2])) )
         {
         // Go to parent directory
         if( !nav_dir_gotoparent() )
            goto nav_setcwd_fail;
8000d50c:	d7 03       	nop
8000d50e:	c0 c8       	rjmp	8000d526 <nav_setcwd+0x2e6>
      }
   }

   // Reset list to start the search at the beginning
   if( !nav_filelist_reset())
      goto nav_setcwd_fail;
8000d510:	d7 03       	nop
8000d512:	c0 a8       	rjmp	8000d526 <nav_setcwd+0x2e6>
      }
      if( !nav_filelist_findname( sz_path  , b_match_case  ))
      {
         // The file or directory is not found
         if( !b_create )
            goto nav_setcwd_fail;   // don't create the directory then exit
8000d514:	d7 03       	nop
8000d516:	c0 88       	rjmp	8000d526 <nav_setcwd+0x2e6>
            if( b_create_name )
            {
#if (FSFEATURE_WRITE == (FS_LEVEL_FEATURES & FSFEATURE_WRITE))
               // The file must be created
               if( !nav_file_create( sz_save_path ) )
                  goto nav_setcwd_fail;
8000d518:	d7 03       	nop
8000d51a:	c0 68       	rjmp	8000d526 <nav_setcwd+0x2e6>
            if( b_create_name )
            {
#if (FSFEATURE_WRITE_COMPLET == (FS_LEVEL_FEATURES & FSFEATURE_WRITE_COMPLET))
               // The folder doesn't exist and it must be created
               if( !nav_dir_make( sz_save_path ))
                  goto nav_setcwd_fail;
8000d51c:	d7 03       	nop
8000d51e:	c0 48       	rjmp	8000d526 <nav_setcwd+0x2e6>
#else
               goto nav_setcwd_fail;
#endif
            }
            if( !fat_entry_is_dir() )
               goto nav_setcwd_fail;
8000d520:	d7 03       	nop
8000d522:	c0 28       	rjmp	8000d526 <nav_setcwd+0x2e6>
            // jump '\'
            sz_path  += (Is_unicode? 2 : 1 );
            if( !nav_dir_cd())
               goto nav_setcwd_fail;
8000d524:	d7 03       	nop
      }

   }

nav_setcwd_fail:
   nav_gotoindex( &index );   // Restore the position
8000d526:	ee c8 00 1c 	sub	r8,r7,28
8000d52a:	10 9c       	mov	r12,r8
8000d52c:	f0 1f 00 11 	mcall	8000d570 <nav_setcwd+0x330>
   return false;
8000d530:	30 08       	mov	r8,0
}
8000d532:	10 9c       	mov	r12,r8
8000d534:	2f 3d       	sub	sp,-52
8000d536:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d53a:	00 00       	add	r0,r0
8000d53c:	80 00       	ld.sh	r0,r0[0x0]
8000d53e:	8d a8       	st.w	r6[0x28],r8
8000d540:	80 00       	ld.sh	r0,r0[0x0]
8000d542:	cf 0c       	rcall	8000d722 <nav_file_create+0x2e>
8000d544:	80 00       	ld.sh	r0,r0[0x0]
8000d546:	cf f4       	brge	8000d544 <nav_setcwd+0x304>
8000d548:	00 00       	add	r0,r0
8000d54a:	00 dc       	st.w	--r0,r12
8000d54c:	80 00       	ld.sh	r0,r0[0x0]
8000d54e:	ca 04       	brge	8000d48e <nav_setcwd+0x24e>
8000d550:	80 00       	ld.sh	r0,r0[0x0]
8000d552:	ca 7c       	rcall	8000d6a0 <nav_file_name+0x12c>
8000d554:	80 00       	ld.sh	r0,r0[0x0]
8000d556:	d0 7c       	*unknown*
8000d558:	80 00       	ld.sh	r0,r0[0x0]
8000d55a:	ca cc       	rcall	8000d6b2 <nav_file_name+0x13e>
8000d55c:	80 00       	ld.sh	r0,r0[0x0]
8000d55e:	cd 10       	breq	8000d500 <nav_setcwd+0x2c0>
8000d560:	80 00       	ld.sh	r0,r0[0x0]
8000d562:	d6 f4       	*unknown*
8000d564:	80 00       	ld.sh	r0,r0[0x0]
8000d566:	d1 58       	*unknown*
8000d568:	80 00       	ld.sh	r0,r0[0x0]
8000d56a:	a4 98       	st.b	r2[0x1],r8
8000d56c:	80 00       	ld.sh	r0,r0[0x0]
8000d56e:	d0 0c       	*unknown*
8000d570:	80 00       	ld.sh	r0,r0[0x0]
8000d572:	cf 50       	breq	8000d55c <nav_setcwd+0x31c>

8000d574 <nav_file_name>:
//!
//! @return  false in case of error, see global value "fs_g_status" for more detail
//! @return  true otherwise
//!
bool  nav_file_name( FS_STRING sz_name , uint8_t u8_size_max , bool b_mode , bool b_match_case  )
{
8000d574:	eb cd 40 80 	pushm	r7,lr
8000d578:	1a 97       	mov	r7,sp
8000d57a:	20 6d       	sub	sp,24
8000d57c:	ef 4c ff f4 	st.w	r7[-12],r12
8000d580:	12 98       	mov	r8,r9
8000d582:	16 99       	mov	r9,r11
8000d584:	ef 69 ff f0 	st.b	r7[-16],r9
8000d588:	14 99       	mov	r9,r10
8000d58a:	ef 69 ff ec 	st.b	r7[-20],r9
8000d58e:	ef 68 ff e8 	st.b	r7[-24],r8
   _MEM_TYPE_SLOW_   uint16_t u16_lgt;   // Only used if LENGTH string mode enabled
   uint16_t  u16_ptr_save_entry;
   bool  b_readshortname = false;
8000d592:	30 08       	mov	r8,0
8000d594:	ef 68 ff ff 	st.b	r7[-1],r8

   if ( !fat_check_mount_select())
8000d598:	f0 1f 00 50 	mcall	8000d6d8 <nav_file_name+0x164>
8000d59c:	18 98       	mov	r8,r12
8000d59e:	ec 18 00 01 	eorl	r8,0x1
8000d5a2:	5c 58       	castu.b	r8
8000d5a4:	c0 30       	breq	8000d5aa <nav_file_name+0x36>
      return false;
8000d5a6:	30 08       	mov	r8,0
8000d5a8:	c9 48       	rjmp	8000d6d0 <nav_file_name+0x15c>

   // Check if the string size is not 0
   if( (FS_NAME_GET == b_mode)
8000d5aa:	ef 39 ff ec 	ld.ub	r9,r7[-20]
8000d5ae:	30 08       	mov	r8,0
8000d5b0:	f0 09 18 00 	cp.b	r9,r8
8000d5b4:	c0 90       	breq	8000d5c6 <nav_file_name+0x52>
8000d5b6:	ef 39 ff f0 	ld.ub	r9,r7[-16]
8000d5ba:	30 08       	mov	r8,0
8000d5bc:	f0 09 18 00 	cp.b	r9,r8
8000d5c0:	c0 31       	brne	8000d5c6 <nav_file_name+0x52>
   &&  (0 == u8_size_max) )
   {
      return true;
8000d5c2:	30 18       	mov	r8,1
8000d5c4:	c8 68       	rjmp	8000d6d0 <nav_file_name+0x15c>
   }

   // Save the current entry position
   u16_ptr_save_entry = fs_g_nav_fast.u16_entry_pos_sel_file;
8000d5c6:	4c 68       	lddpc	r8,8000d6dc <nav_file_name+0x168>
8000d5c8:	90 18       	ld.sh	r8,r8[0x2]
8000d5ca:	ef 58 ff fc 	st.h	r7[-4],r8
   // if it is the beginning of the directory
   if ( 0 == fs_g_nav_fast.u16_entry_pos_sel_file )
8000d5ce:	4c 48       	lddpc	r8,8000d6dc <nav_file_name+0x168>
8000d5d0:	90 18       	ld.sh	r8,r8[0x2]
8000d5d2:	58 08       	cp.w	r8,0
8000d5d4:	c0 51       	brne	8000d5de <nav_file_name+0x6a>
   {
      b_readshortname = true;                   // It isn't possible to have a long name
8000d5d6:	30 18       	mov	r8,1
8000d5d8:	ef 68 ff ff 	st.b	r7[-1],r8
8000d5dc:	c0 78       	rjmp	8000d5ea <nav_file_name+0x76>
   }
   else
   {
      fs_g_nav_fast.u16_entry_pos_sel_file--;   // Initialize entry position to search the first long name entry
8000d5de:	4c 08       	lddpc	r8,8000d6dc <nav_file_name+0x168>
8000d5e0:	90 18       	ld.sh	r8,r8[0x2]
8000d5e2:	20 18       	sub	r8,1
8000d5e4:	5c 88       	casts.h	r8
8000d5e6:	4b e9       	lddpc	r9,8000d6dc <nav_file_name+0x168>
8000d5e8:	b2 18       	st.h	r9[0x2],r8
   }

   // Loop in directory entry
   u16_lgt = 0;
8000d5ea:	30 08       	mov	r8,0
8000d5ec:	ef 58 ff fa 	st.h	r7[-6],r8
   while( 1 )
   {
      if ( !fat_read_dir())
8000d5f0:	f0 1f 00 3c 	mcall	8000d6e0 <nav_file_name+0x16c>
8000d5f4:	18 98       	mov	r8,r12
8000d5f6:	ec 18 00 01 	eorl	r8,0x1
8000d5fa:	5c 58       	castu.b	r8
8000d5fc:	c6 61       	brne	8000d6c8 <nav_file_name+0x154>
         break; // error

      if ( b_readshortname )
8000d5fe:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000d602:	30 08       	mov	r8,0
8000d604:	f0 09 18 00 	cp.b	r9,r8
8000d608:	c0 d0       	breq	8000d622 <nav_file_name+0xae>
      {
         // No long name present then read short name
         return fat_entry_shortname( sz_name , u8_size_max , b_mode  );
8000d60a:	ef 39 ff ec 	ld.ub	r9,r7[-20]
8000d60e:	ef 38 ff f0 	ld.ub	r8,r7[-16]
8000d612:	12 9a       	mov	r10,r9
8000d614:	10 9b       	mov	r11,r8
8000d616:	ee fc ff f4 	ld.w	r12,r7[-12]
8000d61a:	f0 1f 00 33 	mcall	8000d6e4 <nav_file_name+0x170>
8000d61e:	18 98       	mov	r8,r12
8000d620:	c5 88       	rjmp	8000d6d0 <nav_file_name+0x15c>
      }

      // Check or read the part of long file name in this entry
      if ( fat_entry_longname( sz_name , u8_size_max , b_mode , b_match_case  ))
8000d622:	ef 39 ff e8 	ld.ub	r9,r7[-24]
8000d626:	ef 3a ff ec 	ld.ub	r10,r7[-20]
8000d62a:	ef 38 ff f0 	ld.ub	r8,r7[-16]
8000d62e:	10 9b       	mov	r11,r8
8000d630:	ee fc ff f4 	ld.w	r12,r7[-12]
8000d634:	f0 1f 00 2d 	mcall	8000d6e8 <nav_file_name+0x174>
8000d638:	18 98       	mov	r8,r12
8000d63a:	58 08       	cp.w	r8,0
8000d63c:	c1 60       	breq	8000d668 <nav_file_name+0xf4>
      {
         if( g_b_string_length )
8000d63e:	4a c8       	lddpc	r8,8000d6ec <nav_file_name+0x178>
8000d640:	11 88       	ld.ub	r8,r8[0x0]
8000d642:	58 08       	cp.w	r8,0
8000d644:	c0 c0       	breq	8000d65c <nav_file_name+0xe8>
         {
            ((FS_STR_UNICODE)sz_name )[0] += u16_lgt;
8000d646:	ee fa ff f4 	ld.w	r10,r7[-12]
8000d64a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000d64e:	90 08       	ld.sh	r8,r8[0x0]
8000d650:	ef 09 ff fa 	ld.sh	r9,r7[-6]
8000d654:	f2 08 00 08 	add	r8,r9,r8
8000d658:	5c 88       	casts.h	r8
8000d65a:	b4 08       	st.h	r10[0x0],r8
         }
         fs_g_nav_fast.u16_entry_pos_sel_file = u16_ptr_save_entry;
8000d65c:	4a 09       	lddpc	r9,8000d6dc <nav_file_name+0x168>
8000d65e:	ef 08 ff fc 	ld.sh	r8,r7[-4]
8000d662:	b2 18       	st.h	r9[0x2],r8
         return true;
8000d664:	30 18       	mov	r8,1
8000d666:	c3 58       	rjmp	8000d6d0 <nav_file_name+0x15c>
      }

      if ( FS_NO_LAST_LFN_ENTRY != fs_g_status )
8000d668:	4a 28       	lddpc	r8,8000d6f0 <nav_file_name+0x17c>
8000d66a:	11 89       	ld.ub	r9,r8[0x0]
8000d66c:	31 08       	mov	r8,16
8000d66e:	f0 09 18 00 	cp.b	r9,r8
8000d672:	c1 00       	breq	8000d692 <nav_file_name+0x11e>
      {
         // Go to the main entry file (=short name entry)
         fs_g_nav_fast.u16_entry_pos_sel_file = u16_ptr_save_entry;
8000d674:	49 a9       	lddpc	r9,8000d6dc <nav_file_name+0x168>
8000d676:	ef 08 ff fc 	ld.sh	r8,r7[-4]
8000d67a:	b2 18       	st.h	r9[0x2],r8

         if ( FS_ERR_ENTRY_BAD == fs_g_status )
8000d67c:	49 d8       	lddpc	r8,8000d6f0 <nav_file_name+0x17c>
8000d67e:	11 89       	ld.ub	r9,r8[0x0]
8000d680:	30 b8       	mov	r8,11
8000d682:	f0 09 18 00 	cp.b	r9,r8
8000d686:	c2 31       	brne	8000d6cc <nav_file_name+0x158>
         {
            // It isn't a long name entry then there aren't long file name
            b_readshortname = true;   // It is mandatory to use the short name
8000d688:	30 18       	mov	r8,1
8000d68a:	ef 68 ff ff 	st.b	r7[-1],r8
            continue;                 // restart the loop
8000d68e:	d7 03       	nop
         sz_name += FS_SIZE_LFN_ENTRY * (Is_unicode? 2 : 1 );
         u8_size_max -= FS_SIZE_LFN_ENTRY;
      }
      fs_g_nav_fast.u16_entry_pos_sel_file--;   // Go to the next part of long file name

   }  // end of loop while(1)
8000d690:	cb 0b       	rjmp	8000d5f0 <nav_file_name+0x7c>
            continue;                 // restart the loop
         }
         // here, it is a error system or the string don't match with the file name
         break;
      }
      if( g_b_string_length )
8000d692:	49 78       	lddpc	r8,8000d6ec <nav_file_name+0x178>
8000d694:	11 88       	ld.ub	r8,r8[0x0]
8000d696:	58 08       	cp.w	r8,0
8000d698:	c0 70       	breq	8000d6a6 <nav_file_name+0x132>
      {
         u16_lgt += FS_SIZE_LFN_ENTRY;
8000d69a:	ef 08 ff fa 	ld.sh	r8,r7[-6]
8000d69e:	2f 38       	sub	r8,-13
8000d6a0:	ef 58 ff fa 	st.h	r7[-6],r8
8000d6a4:	c0 b8       	rjmp	8000d6ba <nav_file_name+0x146>
      }
      else
      {
         // Increment the string to store the next part of file name
         sz_name += FS_SIZE_LFN_ENTRY * (Is_unicode? 2 : 1 );
8000d6a6:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000d6aa:	2f 38       	sub	r8,-13
8000d6ac:	ef 48 ff f4 	st.w	r7[-12],r8
         u8_size_max -= FS_SIZE_LFN_ENTRY;
8000d6b0:	ef 38 ff f0 	ld.ub	r8,r7[-16]
8000d6b4:	20 d8       	sub	r8,13
8000d6b6:	ef 68 ff f0 	st.b	r7[-16],r8
      }
      fs_g_nav_fast.u16_entry_pos_sel_file--;   // Go to the next part of long file name
8000d6ba:	48 98       	lddpc	r8,8000d6dc <nav_file_name+0x168>
8000d6bc:	90 18       	ld.sh	r8,r8[0x2]
8000d6be:	20 18       	sub	r8,1
8000d6c0:	5c 88       	casts.h	r8
8000d6c2:	48 79       	lddpc	r9,8000d6dc <nav_file_name+0x168>
8000d6c4:	b2 18       	st.h	r9[0x2],r8

   }  // end of loop while(1)
8000d6c6:	c9 5b       	rjmp	8000d5f0 <nav_file_name+0x7c>
   // Loop in directory entry
   u16_lgt = 0;
   while( 1 )
   {
      if ( !fat_read_dir())
         break; // error
8000d6c8:	d7 03       	nop
8000d6ca:	c0 28       	rjmp	8000d6ce <nav_file_name+0x15a>
            // It isn't a long name entry then there aren't long file name
            b_readshortname = true;   // It is mandatory to use the short name
            continue;                 // restart the loop
         }
         // here, it is a error system or the string don't match with the file name
         break;
8000d6cc:	d7 03       	nop
         u8_size_max -= FS_SIZE_LFN_ENTRY;
      }
      fs_g_nav_fast.u16_entry_pos_sel_file--;   // Go to the next part of long file name

   }  // end of loop while(1)
   return false;
8000d6ce:	30 08       	mov	r8,0
}
8000d6d0:	10 9c       	mov	r12,r8
8000d6d2:	2f ad       	sub	sp,-24
8000d6d4:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d6d8:	80 00       	ld.sh	r0,r0[0x0]
8000d6da:	8f 00       	st.w	r7[0x0],r0
8000d6dc:	00 00       	add	r0,r0
8000d6de:	0d d4       	ld.ub	r4,r6[0x5]
8000d6e0:	80 00       	ld.sh	r0,r0[0x0]
8000d6e2:	a2 44       	st.h	r1[0x8],r4
8000d6e4:	80 00       	ld.sh	r0,r0[0x0]
8000d6e6:	a5 ec       	*unknown*
8000d6e8:	80 00       	ld.sh	r0,r0[0x0]
8000d6ea:	a7 cc       	cbr	r12,0x6
8000d6ec:	00 00       	add	r0,r0
8000d6ee:	0d d9       	ld.ub	r9,r6[0x5]
8000d6f0:	00 00       	add	r0,r0
8000d6f2:	0d d8       	ld.ub	r8,r6[0x5]

8000d6f4 <nav_file_create>:
//! @verbatim
//! If you use this routine to create a file, then you must called file_open() to open this new file
//! @endverbatim
//!
bool  nav_file_create( const FS_STRING sz_name  )
{
8000d6f4:	eb cd 40 80 	pushm	r7,lr
8000d6f8:	1a 97       	mov	r7,sp
8000d6fa:	20 1d       	sub	sp,4
8000d6fc:	ef 4c ff fc 	st.w	r7[-4],r12
   // Check if the name already exists
   if (!nav_filelist_reset())
8000d700:	f0 1f 00 1f 	mcall	8000d77c <nav_file_create+0x88>
8000d704:	18 98       	mov	r8,r12
8000d706:	ec 18 00 01 	eorl	r8,0x1
8000d70a:	5c 58       	castu.b	r8
8000d70c:	c0 30       	breq	8000d712 <nav_file_create+0x1e>
      return false;
8000d70e:	30 08       	mov	r8,0
8000d710:	c3 18       	rjmp	8000d772 <nav_file_create+0x7e>
   if (nav_filelist_findname(sz_name , false))
8000d712:	30 0b       	mov	r11,0
8000d714:	ee fc ff fc 	ld.w	r12,r7[-4]
8000d718:	f0 1f 00 1a 	mcall	8000d780 <nav_file_create+0x8c>
8000d71c:	18 98       	mov	r8,r12
8000d71e:	58 08       	cp.w	r8,0
8000d720:	c0 60       	breq	8000d72c <nav_file_create+0x38>
   {
      fs_g_status = FS_ERR_FILE_EXIST;
8000d722:	49 99       	lddpc	r9,8000d784 <nav_file_create+0x90>
8000d724:	32 a8       	mov	r8,42
8000d726:	b2 88       	st.b	r9[0x0],r8
      return false;  // File exist -> it is not possible to create this name
8000d728:	30 08       	mov	r8,0
8000d72a:	c2 48       	rjmp	8000d772 <nav_file_create+0x7e>
   }
   // FYC: here, the selection is at the end of the list
   // Create name entries
   if ( !fat_create_entry_file_name( sz_name ))
8000d72c:	ee fc ff fc 	ld.w	r12,r7[-4]
8000d730:	f0 1f 00 16 	mcall	8000d788 <nav_file_create+0x94>
8000d734:	18 98       	mov	r8,r12
8000d736:	ec 18 00 01 	eorl	r8,0x1
8000d73a:	5c 58       	castu.b	r8
8000d73c:	c0 30       	breq	8000d742 <nav_file_create+0x4e>
      return false; // error
8000d73e:	30 08       	mov	r8,0
8000d740:	c1 98       	rjmp	8000d772 <nav_file_create+0x7e>
   // By default the information about the new file is NULL
   fs_g_nav_entry.u32_cluster = 0;     // No first cluster
8000d742:	49 38       	lddpc	r8,8000d78c <nav_file_create+0x98>
8000d744:	30 09       	mov	r9,0
8000d746:	91 19       	st.w	r8[0x4],r9
   fs_g_nav_entry.u32_size    = 0;     // The size is null
8000d748:	49 18       	lddpc	r8,8000d78c <nav_file_create+0x98>
8000d74a:	30 09       	mov	r9,0
8000d74c:	91 29       	st.w	r8[0x8],r9
   fs_g_nav_entry.u8_attr     = 0;     // Attribute is a file
8000d74e:	49 09       	lddpc	r9,8000d78c <nav_file_create+0x98>
8000d750:	30 08       	mov	r8,0
8000d752:	b2 a8       	st.b	r9[0x2],r8

   // It is the last FILE of the list
   fs_g_nav.u16_pos_sel_file++;
8000d754:	48 f8       	lddpc	r8,8000d790 <nav_file_create+0x9c>
8000d756:	f1 08 00 24 	ld.sh	r8,r8[36]
8000d75a:	2f f8       	sub	r8,-1
8000d75c:	5c 88       	casts.h	r8
8000d75e:	48 d9       	lddpc	r9,8000d790 <nav_file_create+0x9c>
8000d760:	f3 58 00 24 	st.h	r9[36],r8
   fs_g_nav.b_mode_nav = FS_FILE;
8000d764:	48 b9       	lddpc	r9,8000d790 <nav_file_create+0x9c>
8000d766:	30 18       	mov	r8,1
8000d768:	f3 68 00 2c 	st.b	r9[44],r8
   return fat_cache_flush();
8000d76c:	f0 1f 00 0a 	mcall	8000d794 <nav_file_create+0xa0>
8000d770:	18 98       	mov	r8,r12
}
8000d772:	10 9c       	mov	r12,r8
8000d774:	2f fd       	sub	sp,-4
8000d776:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d77a:	00 00       	add	r0,r0
8000d77c:	80 00       	ld.sh	r0,r0[0x0]
8000d77e:	ca cc       	rcall	8000d8d6 <LED_Off+0x66>
8000d780:	80 00       	ld.sh	r0,r0[0x0]
8000d782:	cd 10       	breq	8000d724 <nav_file_create+0x30>
8000d784:	00 00       	add	r0,r0
8000d786:	0d d8       	ld.ub	r8,r6[0x5]
8000d788:	80 00       	ld.sh	r0,r0[0x0]
8000d78a:	b7 e0       	*unknown*
8000d78c:	00 00       	add	r0,r0
8000d78e:	0b 48       	ld.w	r8,--r5
8000d790:	00 00       	add	r0,r0
8000d792:	0d 88       	ld.ub	r8,r6[0x0]
8000d794:	80 00       	ld.sh	r0,r0[0x0]
8000d796:	ab d0       	cbr	r0,0xb

8000d798 <board_init>:
#if defined (CONF_BOARD_AT45DBX)
#  define AT45DBX_MEM_CNT  1
#endif

void board_init(void)
{
8000d798:	eb cd 40 80 	pushm	r7,lr
8000d79c:	1a 97       	mov	r7,sp
	gpio_configure_pin(LED0_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
8000d79e:	30 3b       	mov	r11,3
8000d7a0:	33 bc       	mov	r12,59
8000d7a2:	f0 1f 00 2d 	mcall	8000d854 <board_init+0xbc>
	gpio_configure_pin(LED1_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
8000d7a6:	30 3b       	mov	r11,3
8000d7a8:	33 cc       	mov	r12,60
8000d7aa:	f0 1f 00 2b 	mcall	8000d854 <board_init+0xbc>
	gpio_configure_pin(LED2_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
8000d7ae:	30 3b       	mov	r11,3
8000d7b0:	33 dc       	mov	r12,61
8000d7b2:	f0 1f 00 29 	mcall	8000d854 <board_init+0xbc>
	gpio_configure_pin(LED3_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
8000d7b6:	30 3b       	mov	r11,3
8000d7b8:	33 ec       	mov	r12,62
8000d7ba:	f0 1f 00 27 	mcall	8000d854 <board_init+0xbc>
	gpio_configure_pin(LED4_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
8000d7be:	30 3b       	mov	r11,3
8000d7c0:	33 3c       	mov	r12,51
8000d7c2:	f0 1f 00 25 	mcall	8000d854 <board_init+0xbc>
	gpio_configure_pin(LED5_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
8000d7c6:	30 3b       	mov	r11,3
8000d7c8:	33 4c       	mov	r12,52
8000d7ca:	f0 1f 00 23 	mcall	8000d854 <board_init+0xbc>
	gpio_configure_pin(LED6_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
8000d7ce:	30 3b       	mov	r11,3
8000d7d0:	33 5c       	mov	r12,53
8000d7d2:	f0 1f 00 21 	mcall	8000d854 <board_init+0xbc>
	gpio_configure_pin(LED7_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
8000d7d6:	30 3b       	mov	r11,3
8000d7d8:	33 6c       	mov	r12,54
8000d7da:	f0 1f 00 1f 	mcall	8000d854 <board_init+0xbc>

	gpio_configure_pin(GPIO_PUSH_BUTTON_0,GPIO_DIR_INPUT);
8000d7de:	30 0b       	mov	r11,0
8000d7e0:	35 8c       	mov	r12,88
8000d7e2:	f0 1f 00 1d 	mcall	8000d854 <board_init+0xbc>
	gpio_configure_pin(GPIO_PUSH_BUTTON_1,GPIO_DIR_INPUT);
8000d7e6:	30 0b       	mov	r11,0
8000d7e8:	35 5c       	mov	r12,85
8000d7ea:	f0 1f 00 1b 	mcall	8000d854 <board_init+0xbc>
	gpio_configure_pin(GPIO_PUSH_BUTTON_2,GPIO_DIR_INPUT);
8000d7ee:	30 0b       	mov	r11,0
8000d7f0:	35 2c       	mov	r12,82
8000d7f2:	f0 1f 00 19 	mcall	8000d854 <board_init+0xbc>
	gpio_configure_pin(GPIO_JOYSTICK_PUSH,GPIO_DIR_INPUT);
8000d7f6:	30 0b       	mov	r11,0
8000d7f8:	31 4c       	mov	r12,20
8000d7fa:	f0 1f 00 17 	mcall	8000d854 <board_init+0xbc>
	gpio_configure_pin(GPIO_JOYSTICK_LEFT,GPIO_DIR_INPUT);
8000d7fe:	30 0b       	mov	r11,0
8000d800:	31 9c       	mov	r12,25
8000d802:	f0 1f 00 15 	mcall	8000d854 <board_init+0xbc>
	gpio_configure_pin(GPIO_JOYSTICK_UP,GPIO_DIR_INPUT);
8000d806:	30 0b       	mov	r11,0
8000d808:	31 ac       	mov	r12,26
8000d80a:	f0 1f 00 13 	mcall	8000d854 <board_init+0xbc>
	gpio_configure_pin(GPIO_JOYSTICK_DOWN,GPIO_DIR_INPUT);
8000d80e:	30 0b       	mov	r11,0
8000d810:	31 bc       	mov	r12,27
8000d812:	f0 1f 00 11 	mcall	8000d854 <board_init+0xbc>
		MREPEAT(AT45DBX_MEM_CNT, AT45DBX_ENABLE_NPCS_PIN, ~)
#  undef AT45DBX_ENABLE_NPCS_PIN
	};

	// Assign I/Os to SPI.
	gpio_enable_module(AT45DBX_SPI_GPIO_MAP,
8000d816:	30 4b       	mov	r11,4
8000d818:	49 0c       	lddpc	r12,8000d858 <board_init+0xc0>
8000d81a:	f0 1f 00 11 	mcall	8000d85c <board_init+0xc4>
		{SD_MMC_SPI_MOSI_PIN, SD_MMC_SPI_MOSI_FUNCTION},
		{SD_MMC_SPI_NPCS_PIN, SD_MMC_SPI_NPCS_FUNCTION},
	};

	// Assign I/Os to SPI.
	gpio_enable_module(SD_MMC_SPI_GPIO_MAP,
8000d81e:	30 4b       	mov	r11,4
8000d820:	49 0c       	lddpc	r12,8000d860 <board_init+0xc8>
8000d822:	f0 1f 00 0f 	mcall	8000d85c <board_init+0xc4>

	// Configure SD/MMC card detect and write protect pins
#  define SD_MMC_CONFIGURE_CD_WP_PIN(slot, unused) \
	gpio_configure_pin(SD_MMC_##slot##_CD_GPIO,GPIO_DIR_INPUT); \
	gpio_configure_pin(SD_MMC_##slot##_WP_GPIO,GPIO_DIR_INPUT);
	MREPEAT(SD_MMC_SPI_MEM_CNT, SD_MMC_CONFIGURE_CD_WP_PIN, ~)
8000d826:	30 0b       	mov	r11,0
8000d828:	30 2c       	mov	r12,2
8000d82a:	f0 1f 00 0b 	mcall	8000d854 <board_init+0xbc>
8000d82e:	30 0b       	mov	r11,0
8000d830:	30 7c       	mov	r12,7
8000d832:	f0 1f 00 09 	mcall	8000d854 <board_init+0xbc>
		{AVR32_TWI_SDA_0_0_PIN, AVR32_TWI_SDA_0_0_FUNCTION},
		{AVR32_TWI_SCL_0_0_PIN, AVR32_TWI_SCL_0_0_FUNCTION},
	};

	// TWI gpio pins configuration
	gpio_enable_module(TWI_GPIO_MAP,
8000d836:	30 2b       	mov	r11,2
8000d838:	48 bc       	lddpc	r12,8000d864 <board_init+0xcc>
8000d83a:	f0 1f 00 09 	mcall	8000d85c <board_init+0xc4>
	// USART GPIO pin configuration.
	static const gpio_map_t COMPORT_GPIO_MAP = {
		{USART_RXD_PIN, USART_RXD_FUNCTION },
		{USART_TXD_PIN, USART_TXD_FUNCTION },
	};
	gpio_enable_module(COMPORT_GPIO_MAP,
8000d83e:	30 2b       	mov	r11,2
8000d840:	48 ac       	lddpc	r12,8000d868 <board_init+0xd0>
8000d842:	f0 1f 00 07 	mcall	8000d85c <board_init+0xc4>
	// USART GPIO pin configuration.
	static const gpio_map_t COMPORT0_GPIO_MAP = {
		{USART0_RXD_PIN, USART0_RXD_FUNCTION },
		{USART0_TXD_PIN, USART0_TXD_FUNCTION },
	};
	gpio_enable_module(COMPORT0_GPIO_MAP,
8000d846:	30 2b       	mov	r11,2
8000d848:	48 9c       	lddpc	r12,8000d86c <board_init+0xd4>
8000d84a:	f0 1f 00 05 	mcall	8000d85c <board_init+0xc4>
			sizeof(COMPORT0_GPIO_MAP) / sizeof(COMPORT0_GPIO_MAP[0]));
#endif
}
8000d84e:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d852:	00 00       	add	r0,r0
8000d854:	80 00       	ld.sh	r0,r0[0x0]
8000d856:	db 5c       	*unknown*
8000d858:	80 01       	ld.sh	r1,r0[0x0]
8000d85a:	4e 38       	lddpc	r8,8000d9e4 <gpio_enable_module+0x8>
8000d85c:	80 00       	ld.sh	r0,r0[0x0]
8000d85e:	d9 dc       	*unknown*
8000d860:	80 01       	ld.sh	r1,r0[0x0]
8000d862:	4e 58       	lddpc	r8,8000d9f4 <gpio_enable_module+0x18>
8000d864:	80 01       	ld.sh	r1,r0[0x0]
8000d866:	4e 78       	lddpc	r8,8000da00 <gpio_enable_module+0x24>
8000d868:	80 01       	ld.sh	r1,r0[0x0]
8000d86a:	4e 88       	lddpc	r8,8000da08 <gpio_enable_module+0x2c>
8000d86c:	80 01       	ld.sh	r1,r0[0x0]
8000d86e:	4e 98       	lddpc	r8,8000da10 <gpio_enable_module+0x34>

8000d870 <LED_Off>:
  return Tst_bits(LED_State, leds);
}


void LED_Off(U32 leds)
{
8000d870:	eb cd 40 80 	pushm	r7,lr
8000d874:	1a 97       	mov	r7,sp
8000d876:	20 4d       	sub	sp,16
8000d878:	ef 4c ff f0 	st.w	r7[-16],r12
  // Use the LED descriptors to get the connections of a given LED to the MCU.
  tLED_DESCRIPTOR *led_descriptor = &LED_DESCRIPTOR[0] - 1;
8000d87c:	4a 98       	lddpc	r8,8000d920 <LED_Off+0xb0>
8000d87e:	21 08       	sub	r8,16
8000d880:	ef 48 ff f4 	st.w	r7[-12],r8
  volatile avr32_gpio_port_t *led_gpio_port;
  U8 led_shift;

  // Make sure only existing LEDs are specified.
  leds &= (1 << LED_COUNT) - 1;
8000d884:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000d888:	f1 d8 c0 08 	bfextu	r8,r8,0x0,0x8
8000d88c:	ef 48 ff f0 	st.w	r7[-16],r8

  // Update the saved state of all LEDs with the requested changes.
  Clr_bits(LED_State, leds);
8000d890:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000d894:	f0 09 11 ff 	rsub	r9,r8,-1
8000d898:	4a 38       	lddpc	r8,8000d924 <LED_Off+0xb4>
8000d89a:	70 08       	ld.w	r8,r8[0x0]
8000d89c:	10 69       	and	r9,r8
8000d89e:	4a 28       	lddpc	r8,8000d924 <LED_Off+0xb4>
8000d8a0:	91 09       	st.w	r8[0x0],r9

  // While there are specified LEDs left to manage...
  while (leds)
8000d8a2:	c3 78       	rjmp	8000d910 <LED_Off+0xa0>
  {
    // Select the next specified LED and turn it off.
    led_shift = 1 + ctz(leds);
8000d8a4:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000d8a8:	5c 98       	brev	r8
8000d8aa:	f0 08 12 00 	clz	r8,r8
8000d8ae:	5c 58       	castu.b	r8
8000d8b0:	2f f8       	sub	r8,-1
8000d8b2:	ef 68 ff ff 	st.b	r7[-1],r8
    led_descriptor += led_shift;
8000d8b6:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000d8ba:	a5 68       	lsl	r8,0x4
8000d8bc:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000d8c0:	f2 08 00 08 	add	r8,r9,r8
8000d8c4:	ef 48 ff f4 	st.w	r7[-12],r8
    led_gpio_port = &AVR32_GPIO.port[led_descriptor->GPIO.PORT];
8000d8c8:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000d8cc:	70 08       	ld.w	r8,r8[0x0]
8000d8ce:	a9 68       	lsl	r8,0x8
8000d8d0:	e0 28 f0 00 	sub	r8,61440
8000d8d4:	ef 48 ff f8 	st.w	r7[-8],r8
    led_gpio_port->ovrs  = led_descriptor->GPIO.PIN_MASK;
8000d8d8:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000d8dc:	70 19       	ld.w	r9,r8[0x4]
8000d8de:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000d8e2:	f1 49 00 54 	st.w	r8[84],r9
    led_gpio_port->oders = led_descriptor->GPIO.PIN_MASK;
8000d8e6:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000d8ea:	70 19       	ld.w	r9,r8[0x4]
8000d8ec:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000d8f0:	f1 49 00 44 	st.w	r8[68],r9
    led_gpio_port->gpers = led_descriptor->GPIO.PIN_MASK;
8000d8f4:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000d8f8:	70 19       	ld.w	r9,r8[0x4]
8000d8fa:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000d8fe:	91 19       	st.w	r8[0x4],r9
    leds >>= led_shift;
8000d900:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000d904:	ee f9 ff f0 	ld.w	r9,r7[-16]
8000d908:	f2 08 0a 48 	lsr	r8,r9,r8
8000d90c:	ef 48 ff f0 	st.w	r7[-16],r8

  // Update the saved state of all LEDs with the requested changes.
  Clr_bits(LED_State, leds);

  // While there are specified LEDs left to manage...
  while (leds)
8000d910:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000d914:	58 08       	cp.w	r8,0
8000d916:	cc 71       	brne	8000d8a4 <LED_Off+0x34>
    led_gpio_port->ovrs  = led_descriptor->GPIO.PIN_MASK;
    led_gpio_port->oders = led_descriptor->GPIO.PIN_MASK;
    led_gpio_port->gpers = led_descriptor->GPIO.PIN_MASK;
    leds >>= led_shift;
  }
}
8000d918:	2f cd       	sub	sp,-16
8000d91a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d91e:	00 00       	add	r0,r0
8000d920:	80 01       	ld.sh	r1,r0[0x0]
8000d922:	4e a8       	lddpc	r8,8000dac8 <gpio_enable_module_pin+0x7c>
8000d924:	00 00       	add	r0,r0
8000d926:	00 b4       	st.h	r0++,r4

8000d928 <LED_On>:


void LED_On(U32 leds)
{
8000d928:	eb cd 40 80 	pushm	r7,lr
8000d92c:	1a 97       	mov	r7,sp
8000d92e:	20 4d       	sub	sp,16
8000d930:	ef 4c ff f0 	st.w	r7[-16],r12
  // Use the LED descriptors to get the connections of a given LED to the MCU.
  tLED_DESCRIPTOR *led_descriptor = &LED_DESCRIPTOR[0] - 1;
8000d934:	4a 88       	lddpc	r8,8000d9d4 <LED_On+0xac>
8000d936:	21 08       	sub	r8,16
8000d938:	ef 48 ff f4 	st.w	r7[-12],r8
  volatile avr32_gpio_port_t *led_gpio_port;
  U8 led_shift;

  // Make sure only existing LEDs are specified.
  leds &= (1 << LED_COUNT) - 1;
8000d93c:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000d940:	f1 d8 c0 08 	bfextu	r8,r8,0x0,0x8
8000d944:	ef 48 ff f0 	st.w	r7[-16],r8

  // Update the saved state of all LEDs with the requested changes.
  Set_bits(LED_State, leds);
8000d948:	4a 48       	lddpc	r8,8000d9d8 <LED_On+0xb0>
8000d94a:	70 09       	ld.w	r9,r8[0x0]
8000d94c:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000d950:	10 49       	or	r9,r8
8000d952:	4a 28       	lddpc	r8,8000d9d8 <LED_On+0xb0>
8000d954:	91 09       	st.w	r8[0x0],r9

  // While there are specified LEDs left to manage...
  while (leds)
8000d956:	c3 78       	rjmp	8000d9c4 <LED_On+0x9c>
  {
    // Select the next specified LED and turn it on.
    led_shift = 1 + ctz(leds);
8000d958:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000d95c:	5c 98       	brev	r8
8000d95e:	f0 08 12 00 	clz	r8,r8
8000d962:	5c 58       	castu.b	r8
8000d964:	2f f8       	sub	r8,-1
8000d966:	ef 68 ff ff 	st.b	r7[-1],r8
    led_descriptor += led_shift;
8000d96a:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000d96e:	a5 68       	lsl	r8,0x4
8000d970:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000d974:	f2 08 00 08 	add	r8,r9,r8
8000d978:	ef 48 ff f4 	st.w	r7[-12],r8
    led_gpio_port = &AVR32_GPIO.port[led_descriptor->GPIO.PORT];
8000d97c:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000d980:	70 08       	ld.w	r8,r8[0x0]
8000d982:	a9 68       	lsl	r8,0x8
8000d984:	e0 28 f0 00 	sub	r8,61440
8000d988:	ef 48 ff f8 	st.w	r7[-8],r8
    led_gpio_port->ovrc  = led_descriptor->GPIO.PIN_MASK;
8000d98c:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000d990:	70 19       	ld.w	r9,r8[0x4]
8000d992:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000d996:	f1 49 00 58 	st.w	r8[88],r9
    led_gpio_port->oders = led_descriptor->GPIO.PIN_MASK;
8000d99a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000d99e:	70 19       	ld.w	r9,r8[0x4]
8000d9a0:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000d9a4:	f1 49 00 44 	st.w	r8[68],r9
    led_gpio_port->gpers = led_descriptor->GPIO.PIN_MASK;
8000d9a8:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000d9ac:	70 19       	ld.w	r9,r8[0x4]
8000d9ae:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000d9b2:	91 19       	st.w	r8[0x4],r9
    leds >>= led_shift;
8000d9b4:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000d9b8:	ee f9 ff f0 	ld.w	r9,r7[-16]
8000d9bc:	f2 08 0a 48 	lsr	r8,r9,r8
8000d9c0:	ef 48 ff f0 	st.w	r7[-16],r8

  // Update the saved state of all LEDs with the requested changes.
  Set_bits(LED_State, leds);

  // While there are specified LEDs left to manage...
  while (leds)
8000d9c4:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000d9c8:	58 08       	cp.w	r8,0
8000d9ca:	cc 71       	brne	8000d958 <LED_On+0x30>
    led_gpio_port->ovrc  = led_descriptor->GPIO.PIN_MASK;
    led_gpio_port->oders = led_descriptor->GPIO.PIN_MASK;
    led_gpio_port->gpers = led_descriptor->GPIO.PIN_MASK;
    leds >>= led_shift;
  }
}
8000d9cc:	2f cd       	sub	sp,-16
8000d9ce:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d9d2:	00 00       	add	r0,r0
8000d9d4:	80 01       	ld.sh	r1,r0[0x0]
8000d9d6:	4e a8       	lddpc	r8,8000db7c <gpio_configure_pin+0x20>
8000d9d8:	00 00       	add	r0,r0
8000d9da:	00 b4       	st.h	r0++,r4

8000d9dc <gpio_enable_module>:
 * \param size The number of pins in \a gpiomap.
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
8000d9dc:	eb cd 40 80 	pushm	r7,lr
8000d9e0:	1a 97       	mov	r7,sp
8000d9e2:	20 4d       	sub	sp,16
8000d9e4:	ef 4c ff f4 	st.w	r7[-12],r12
8000d9e8:	ef 4b ff f0 	st.w	r7[-16],r11
	uint32_t status = GPIO_SUCCESS;
8000d9ec:	30 08       	mov	r8,0
8000d9ee:	ef 48 ff f8 	st.w	r7[-8],r8
	uint32_t i;

	for (i = 0; i < size; i++) {
8000d9f2:	30 08       	mov	r8,0
8000d9f4:	ef 48 ff fc 	st.w	r7[-4],r8
8000d9f8:	c1 c8       	rjmp	8000da30 <gpio_enable_module+0x54>
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
8000d9fa:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000d9fe:	70 19       	ld.w	r9,r8[0x4]
8000da00:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000da04:	70 08       	ld.w	r8,r8[0x0]
8000da06:	12 9b       	mov	r11,r9
8000da08:	10 9c       	mov	r12,r8
8000da0a:	f0 1f 00 10 	mcall	8000da48 <gpio_enable_module+0x6c>
8000da0e:	18 98       	mov	r8,r12
8000da10:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000da14:	f3 e8 10 08 	or	r8,r9,r8
8000da18:	ef 48 ff f8 	st.w	r7[-8],r8
		gpiomap++;
8000da1c:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000da20:	2f 88       	sub	r8,-8
8000da22:	ef 48 ff f4 	st.w	r7[-12],r8
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
8000da26:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000da2a:	2f f8       	sub	r8,-1
8000da2c:	ef 48 ff fc 	st.w	r7[-4],r8
8000da30:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000da34:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000da38:	10 39       	cp.w	r9,r8
8000da3a:	ce 03       	brcs	8000d9fa <gpio_enable_module+0x1e>
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
		gpiomap++;
	}

	return status;
8000da3c:	ee f8 ff f8 	ld.w	r8,r7[-8]
}
8000da40:	10 9c       	mov	r12,r8
8000da42:	2f cd       	sub	sp,-16
8000da44:	e3 cd 80 80 	ldm	sp++,r7,pc
8000da48:	80 00       	ld.sh	r0,r0[0x0]
8000da4a:	da 4c       	*unknown*

8000da4c <gpio_enable_module_pin>:
 * \param function The pin function.
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module_pin(uint32_t pin, uint32_t function)
{
8000da4c:	eb cd 40 80 	pushm	r7,lr
8000da50:	1a 97       	mov	r7,sp
8000da52:	20 3d       	sub	sp,12
8000da54:	ef 4c ff f8 	st.w	r7[-8],r12
8000da58:	ef 4b ff f4 	st.w	r7[-12],r11
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
8000da5c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000da60:	a5 98       	lsr	r8,0x5
8000da62:	a9 68       	lsl	r8,0x8
8000da64:	e0 28 f0 00 	sub	r8,61440
8000da68:	ef 48 ff fc 	st.w	r7[-4],r8

	/* Enable the correct function. */
	switch (function) {
8000da6c:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000da70:	58 18       	cp.w	r8,1
8000da72:	c1 e0       	breq	8000daae <gpio_enable_module_pin+0x62>
8000da74:	c0 63       	brcs	8000da80 <gpio_enable_module_pin+0x34>
8000da76:	58 28       	cp.w	r8,2
8000da78:	c3 20       	breq	8000dadc <gpio_enable_module_pin+0x90>
8000da7a:	58 38       	cp.w	r8,3
8000da7c:	c4 70       	breq	8000db0a <gpio_enable_module_pin+0xbe>
8000da7e:	c5 d8       	rjmp	8000db38 <gpio_enable_module_pin+0xec>
	case 0: /* A function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
8000da80:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000da84:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000da88:	30 19       	mov	r9,1
8000da8a:	f2 08 09 48 	lsl	r8,r9,r8
8000da8e:	10 99       	mov	r9,r8
8000da90:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000da94:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
8000da96:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000da9a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000da9e:	30 19       	mov	r9,1
8000daa0:	f2 08 09 48 	lsl	r8,r9,r8
8000daa4:	10 99       	mov	r9,r8
8000daa6:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000daaa:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
		break;
8000daac:	c4 88       	rjmp	8000db3c <gpio_enable_module_pin+0xf0>

	case 1: /* B function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
8000daae:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000dab2:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000dab6:	30 19       	mov	r9,1
8000dab8:	f2 08 09 48 	lsl	r8,r9,r8
8000dabc:	10 99       	mov	r9,r8
8000dabe:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000dac2:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
8000dac4:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000dac8:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000dacc:	30 19       	mov	r9,1
8000dace:	f2 08 09 48 	lsl	r8,r9,r8
8000dad2:	10 99       	mov	r9,r8
8000dad4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000dad8:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
		break;
8000dada:	c3 18       	rjmp	8000db3c <gpio_enable_module_pin+0xf0>

	case 2: /* C function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
8000dadc:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000dae0:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000dae4:	30 19       	mov	r9,1
8000dae6:	f2 08 09 48 	lsl	r8,r9,r8
8000daea:	10 99       	mov	r9,r8
8000daec:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000daf0:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
8000daf2:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000daf6:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000dafa:	30 19       	mov	r9,1
8000dafc:	f2 08 09 48 	lsl	r8,r9,r8
8000db00:	10 99       	mov	r9,r8
8000db02:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000db06:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
		break;
8000db08:	c1 a8       	rjmp	8000db3c <gpio_enable_module_pin+0xf0>

	case 3: /* D function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
8000db0a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000db0e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000db12:	30 19       	mov	r9,1
8000db14:	f2 08 09 48 	lsl	r8,r9,r8
8000db18:	10 99       	mov	r9,r8
8000db1a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000db1e:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
8000db20:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000db24:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000db28:	30 19       	mov	r9,1
8000db2a:	f2 08 09 48 	lsl	r8,r9,r8
8000db2e:	10 99       	mov	r9,r8
8000db30:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000db34:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
		break;
8000db36:	c0 38       	rjmp	8000db3c <gpio_enable_module_pin+0xf0>
		gpio_port->pmr2s = 1 << (pin & 0x1F);
		break;
#endif

	default:
		return GPIO_INVALID_ARGUMENT;
8000db38:	30 18       	mov	r8,1
8000db3a:	c0 d8       	rjmp	8000db54 <gpio_enable_module_pin+0x108>
	}

	/* Disable GPIO control. */
	gpio_port->gperc = 1 << (pin & 0x1F);
8000db3c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000db40:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000db44:	30 19       	mov	r9,1
8000db46:	f2 08 09 48 	lsl	r8,r9,r8
8000db4a:	10 99       	mov	r9,r8
8000db4c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000db50:	91 29       	st.w	r8[0x8],r9

	return GPIO_SUCCESS;
8000db52:	30 08       	mov	r8,0
}
8000db54:	10 9c       	mov	r12,r8
8000db56:	2f dd       	sub	sp,-12
8000db58:	e3 cd 80 80 	ldm	sp++,r7,pc

8000db5c <gpio_configure_pin>:
 *
 * \param pin The pin number.
 * \param flags The configuration.
 */
void gpio_configure_pin(uint32_t pin, uint32_t flags)
{
8000db5c:	eb cd 40 80 	pushm	r7,lr
8000db60:	1a 97       	mov	r7,sp
8000db62:	20 3d       	sub	sp,12
8000db64:	ef 4c ff f8 	st.w	r7[-8],r12
8000db68:	ef 4b ff f4 	st.w	r7[-12],r11
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
8000db6c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000db70:	a5 98       	lsr	r8,0x5
8000db72:	a9 68       	lsl	r8,0x8
8000db74:	e0 28 f0 00 	sub	r8,61440
8000db78:	ef 48 ff fc 	st.w	r7[-4],r8
	} else {
		gpio_port->pderc = 1 << (pin & 0x1F);
	}

#endif
	if (flags & GPIO_PULL_UP) {
8000db7c:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000db80:	e2 18 00 04 	andl	r8,0x4,COH
8000db84:	c0 e0       	breq	8000dba0 <gpio_configure_pin+0x44>
		gpio_port->puers = 1 << (pin & 0x1F);
8000db86:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000db8a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000db8e:	30 19       	mov	r9,1
8000db90:	f2 08 09 48 	lsl	r8,r9,r8
8000db94:	10 99       	mov	r9,r8
8000db96:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000db9a:	f1 49 00 74 	st.w	r8[116],r9
8000db9e:	c0 d8       	rjmp	8000dbb8 <gpio_configure_pin+0x5c>
	} else {
		gpio_port->puerc = 1 << (pin & 0x1F);
8000dba0:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000dba4:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000dba8:	30 19       	mov	r9,1
8000dbaa:	f2 08 09 48 	lsl	r8,r9,r8
8000dbae:	10 99       	mov	r9,r8
8000dbb0:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000dbb4:	f1 49 00 78 	st.w	r8[120],r9
	}

#endif

	/* Select interrupt level for group */
	if (flags & GPIO_INTERRUPT) {
8000dbb8:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000dbbc:	e2 18 00 80 	andl	r8,0x80,COH
8000dbc0:	c5 a0       	breq	8000dc74 <gpio_configure_pin+0x118>
		if (flags & GPIO_BOTHEDGES) {
8000dbc2:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000dbc6:	e2 18 01 80 	andl	r8,0x180,COH
8000dbca:	c1 a0       	breq	8000dbfe <gpio_configure_pin+0xa2>
			gpio_port->imr0c = 1 << (pin & 0x1F);
8000dbcc:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000dbd0:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000dbd4:	30 19       	mov	r9,1
8000dbd6:	f2 08 09 48 	lsl	r8,r9,r8
8000dbda:	10 99       	mov	r9,r8
8000dbdc:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000dbe0:	f1 49 00 a8 	st.w	r8[168],r9
			gpio_port->imr1c = 1 << (pin & 0x1F);
8000dbe4:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000dbe8:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000dbec:	30 19       	mov	r9,1
8000dbee:	f2 08 09 48 	lsl	r8,r9,r8
8000dbf2:	10 99       	mov	r9,r8
8000dbf4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000dbf8:	f1 49 00 b8 	st.w	r8[184],r9
8000dbfc:	c3 c8       	rjmp	8000dc74 <gpio_configure_pin+0x118>
		} else if (flags & GPIO_RISING) {
8000dbfe:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000dc02:	e2 18 02 80 	andl	r8,0x280,COH
8000dc06:	c1 a0       	breq	8000dc3a <gpio_configure_pin+0xde>
			gpio_port->imr0s = 1 << (pin & 0x1F);
8000dc08:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000dc0c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000dc10:	30 19       	mov	r9,1
8000dc12:	f2 08 09 48 	lsl	r8,r9,r8
8000dc16:	10 99       	mov	r9,r8
8000dc18:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000dc1c:	f1 49 00 a4 	st.w	r8[164],r9
			gpio_port->imr1c = 1 << (pin & 0x1F);
8000dc20:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000dc24:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000dc28:	30 19       	mov	r9,1
8000dc2a:	f2 08 09 48 	lsl	r8,r9,r8
8000dc2e:	10 99       	mov	r9,r8
8000dc30:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000dc34:	f1 49 00 b8 	st.w	r8[184],r9
8000dc38:	c1 e8       	rjmp	8000dc74 <gpio_configure_pin+0x118>
		} else if (flags & GPIO_FALLING) {
8000dc3a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000dc3e:	e2 18 03 80 	andl	r8,0x380,COH
8000dc42:	c1 90       	breq	8000dc74 <gpio_configure_pin+0x118>
			gpio_port->imr0c = 1 << (pin & 0x1F);
8000dc44:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000dc48:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000dc4c:	30 19       	mov	r9,1
8000dc4e:	f2 08 09 48 	lsl	r8,r9,r8
8000dc52:	10 99       	mov	r9,r8
8000dc54:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000dc58:	f1 49 00 a8 	st.w	r8[168],r9
			gpio_port->imr1s = 1 << (pin & 0x1F);
8000dc5c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000dc60:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000dc64:	30 19       	mov	r9,1
8000dc66:	f2 08 09 48 	lsl	r8,r9,r8
8000dc6a:	10 99       	mov	r9,r8
8000dc6c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000dc70:	f1 49 00 b4 	st.w	r8[180],r9
		}
	}

	/* Select direction and initial pin state */
	if (flags & GPIO_DIR_OUTPUT) {
8000dc74:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000dc78:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000dc7c:	5c 58       	castu.b	r8
8000dc7e:	c2 c0       	breq	8000dcd6 <gpio_configure_pin+0x17a>
		if (flags & GPIO_INIT_HIGH) {
8000dc80:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000dc84:	e2 18 00 02 	andl	r8,0x2,COH
8000dc88:	c0 e0       	breq	8000dca4 <gpio_configure_pin+0x148>
			gpio_port->ovrs = 1 << (pin & 0x1F);
8000dc8a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000dc8e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000dc92:	30 19       	mov	r9,1
8000dc94:	f2 08 09 48 	lsl	r8,r9,r8
8000dc98:	10 99       	mov	r9,r8
8000dc9a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000dc9e:	f1 49 00 54 	st.w	r8[84],r9
8000dca2:	c0 d8       	rjmp	8000dcbc <gpio_configure_pin+0x160>
		} else {
			gpio_port->ovrc = 1 << (pin & 0x1F);
8000dca4:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000dca8:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000dcac:	30 19       	mov	r9,1
8000dcae:	f2 08 09 48 	lsl	r8,r9,r8
8000dcb2:	10 99       	mov	r9,r8
8000dcb4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000dcb8:	f1 49 00 58 	st.w	r8[88],r9
		}

		gpio_port->oders = 1 << (pin & 0x1F);
8000dcbc:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000dcc0:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000dcc4:	30 19       	mov	r9,1
8000dcc6:	f2 08 09 48 	lsl	r8,r9,r8
8000dcca:	10 99       	mov	r9,r8
8000dccc:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000dcd0:	f1 49 00 44 	st.w	r8[68],r9
8000dcd4:	c0 d8       	rjmp	8000dcee <gpio_configure_pin+0x192>
	} else {
		gpio_port->oderc = 1 << (pin & 0x1F);
8000dcd6:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000dcda:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000dcde:	30 19       	mov	r9,1
8000dce0:	f2 08 09 48 	lsl	r8,r9,r8
8000dce4:	10 99       	mov	r9,r8
8000dce6:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000dcea:	f1 49 00 48 	st.w	r8[72],r9
	}

	/* Enable GPIO */
	gpio_port->gpers = 1 << (pin & 0x1F);
8000dcee:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000dcf2:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000dcf6:	30 19       	mov	r9,1
8000dcf8:	f2 08 09 48 	lsl	r8,r9,r8
8000dcfc:	10 99       	mov	r9,r8
8000dcfe:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000dd02:	91 19       	st.w	r8[0x4],r9
}
8000dd04:	2f dd       	sub	sp,-12
8000dd06:	e3 cd 80 80 	ldm	sp++,r7,pc

8000dd0a <gpio_set_gpio_pin>:
/** \brief Drives a GPIO pin to 1.
 *
 * \param pin The pin number.
 */
void gpio_set_gpio_pin(uint32_t pin)
{
8000dd0a:	eb cd 40 80 	pushm	r7,lr
8000dd0e:	1a 97       	mov	r7,sp
8000dd10:	20 2d       	sub	sp,8
8000dd12:	ef 4c ff f8 	st.w	r7[-8],r12
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
8000dd16:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000dd1a:	a5 98       	lsr	r8,0x5
8000dd1c:	a9 68       	lsl	r8,0x8
8000dd1e:	e0 28 f0 00 	sub	r8,61440
8000dd22:	ef 48 ff fc 	st.w	r7[-4],r8
	
	/* Value to be driven on the I/O line: 1. */
	gpio_port->ovrs  = 1 << (pin & 0x1F);
8000dd26:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000dd2a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000dd2e:	30 19       	mov	r9,1
8000dd30:	f2 08 09 48 	lsl	r8,r9,r8
8000dd34:	10 99       	mov	r9,r8
8000dd36:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000dd3a:	f1 49 00 54 	st.w	r8[84],r9
	/* The GPIO output driver is enabled for that pin. */ 
	gpio_port->oders = 1 << (pin & 0x1F);
8000dd3e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000dd42:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000dd46:	30 19       	mov	r9,1
8000dd48:	f2 08 09 48 	lsl	r8,r9,r8
8000dd4c:	10 99       	mov	r9,r8
8000dd4e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000dd52:	f1 49 00 44 	st.w	r8[68],r9
	/* The GPIO module controls that pin. */
	gpio_port->gpers = 1 << (pin & 0x1F);
8000dd56:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000dd5a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000dd5e:	30 19       	mov	r9,1
8000dd60:	f2 08 09 48 	lsl	r8,r9,r8
8000dd64:	10 99       	mov	r9,r8
8000dd66:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000dd6a:	91 19       	st.w	r8[0x4],r9
}
8000dd6c:	2f ed       	sub	sp,-8
8000dd6e:	e3 cd 80 80 	ldm	sp++,r7,pc

8000dd72 <gpio_clr_gpio_pin>:
/** \brief Drives a GPIO pin to 0.
 *
 * \param pin The pin number.
 */
void gpio_clr_gpio_pin(uint32_t pin)
{
8000dd72:	eb cd 40 80 	pushm	r7,lr
8000dd76:	1a 97       	mov	r7,sp
8000dd78:	20 2d       	sub	sp,8
8000dd7a:	ef 4c ff f8 	st.w	r7[-8],r12
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
8000dd7e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000dd82:	a5 98       	lsr	r8,0x5
8000dd84:	a9 68       	lsl	r8,0x8
8000dd86:	e0 28 f0 00 	sub	r8,61440
8000dd8a:	ef 48 ff fc 	st.w	r7[-4],r8
	
	/* Value to be driven on the I/O line: 0. */
	gpio_port->ovrc  = 1 << (pin & 0x1F);
8000dd8e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000dd92:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000dd96:	30 19       	mov	r9,1
8000dd98:	f2 08 09 48 	lsl	r8,r9,r8
8000dd9c:	10 99       	mov	r9,r8
8000dd9e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000dda2:	f1 49 00 58 	st.w	r8[88],r9
	/* The GPIO output driver is enabled for that pin. */
	gpio_port->oders = 1 << (pin & 0x1F);
8000dda6:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000ddaa:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000ddae:	30 19       	mov	r9,1
8000ddb0:	f2 08 09 48 	lsl	r8,r9,r8
8000ddb4:	10 99       	mov	r9,r8
8000ddb6:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000ddba:	f1 49 00 44 	st.w	r8[68],r9
	/* The GPIO module controls that pin. */
	gpio_port->gpers = 1 << (pin & 0x1F);
8000ddbe:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000ddc2:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000ddc6:	30 19       	mov	r9,1
8000ddc8:	f2 08 09 48 	lsl	r8,r9,r8
8000ddcc:	10 99       	mov	r9,r8
8000ddce:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000ddd2:	91 19       	st.w	r8[0x4],r9
}
8000ddd4:	2f ed       	sub	sp,-8
8000ddd6:	e3 cd 80 80 	ldm	sp++,r7,pc

8000ddda <gpio_configure_edge_detector>:
 *             \ref GPIO_RISING_EDGE or \ref GPIO_FALLING_EDGE).
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
static uint32_t gpio_configure_edge_detector(uint32_t pin, uint32_t mode)
{
8000ddda:	eb cd 40 80 	pushm	r7,lr
8000ddde:	1a 97       	mov	r7,sp
8000dde0:	20 3d       	sub	sp,12
8000dde2:	ef 4c ff f8 	st.w	r7[-8],r12
8000dde6:	ef 4b ff f4 	st.w	r7[-12],r11
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
8000ddea:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000ddee:	a5 98       	lsr	r8,0x5
8000ddf0:	a9 68       	lsl	r8,0x8
8000ddf2:	e0 28 f0 00 	sub	r8,61440
8000ddf6:	ef 48 ff fc 	st.w	r7[-4],r8

	/* Configure the edge detector. */
	switch (mode) {
8000ddfa:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000ddfe:	58 18       	cp.w	r8,1
8000de00:	c1 e0       	breq	8000de3c <gpio_configure_edge_detector+0x62>
8000de02:	c0 43       	brcs	8000de0a <gpio_configure_edge_detector+0x30>
8000de04:	58 28       	cp.w	r8,2
8000de06:	c3 40       	breq	8000de6e <gpio_configure_edge_detector+0x94>
8000de08:	c4 c8       	rjmp	8000dea0 <gpio_configure_edge_detector+0xc6>
	case GPIO_PIN_CHANGE:
		gpio_port->imr0c = 1 << (pin & 0x1F);
8000de0a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000de0e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000de12:	30 19       	mov	r9,1
8000de14:	f2 08 09 48 	lsl	r8,r9,r8
8000de18:	10 99       	mov	r9,r8
8000de1a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000de1e:	f1 49 00 a8 	st.w	r8[168],r9
		gpio_port->imr1c = 1 << (pin & 0x1F);
8000de22:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000de26:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000de2a:	30 19       	mov	r9,1
8000de2c:	f2 08 09 48 	lsl	r8,r9,r8
8000de30:	10 99       	mov	r9,r8
8000de32:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000de36:	f1 49 00 b8 	st.w	r8[184],r9
		break;
8000de3a:	c3 58       	rjmp	8000dea4 <gpio_configure_edge_detector+0xca>

	case GPIO_RISING_EDGE:
		gpio_port->imr0s = 1 << (pin & 0x1F);
8000de3c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000de40:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000de44:	30 19       	mov	r9,1
8000de46:	f2 08 09 48 	lsl	r8,r9,r8
8000de4a:	10 99       	mov	r9,r8
8000de4c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000de50:	f1 49 00 a4 	st.w	r8[164],r9
		gpio_port->imr1c = 1 << (pin & 0x1F);
8000de54:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000de58:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000de5c:	30 19       	mov	r9,1
8000de5e:	f2 08 09 48 	lsl	r8,r9,r8
8000de62:	10 99       	mov	r9,r8
8000de64:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000de68:	f1 49 00 b8 	st.w	r8[184],r9
		break;
8000de6c:	c1 c8       	rjmp	8000dea4 <gpio_configure_edge_detector+0xca>

	case GPIO_FALLING_EDGE:
		gpio_port->imr0c = 1 << (pin & 0x1F);
8000de6e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000de72:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000de76:	30 19       	mov	r9,1
8000de78:	f2 08 09 48 	lsl	r8,r9,r8
8000de7c:	10 99       	mov	r9,r8
8000de7e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000de82:	f1 49 00 a8 	st.w	r8[168],r9
		gpio_port->imr1s = 1 << (pin & 0x1F);
8000de86:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000de8a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000de8e:	30 19       	mov	r9,1
8000de90:	f2 08 09 48 	lsl	r8,r9,r8
8000de94:	10 99       	mov	r9,r8
8000de96:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000de9a:	f1 49 00 b4 	st.w	r8[180],r9
		break;
8000de9e:	c0 38       	rjmp	8000dea4 <gpio_configure_edge_detector+0xca>

	default:
		return GPIO_INVALID_ARGUMENT;
8000dea0:	30 18       	mov	r8,1
8000dea2:	c0 28       	rjmp	8000dea6 <gpio_configure_edge_detector+0xcc>
	}

	return GPIO_SUCCESS;
8000dea4:	30 08       	mov	r8,0
}
8000dea6:	10 9c       	mov	r12,r8
8000dea8:	2f dd       	sub	sp,-12
8000deaa:	e3 cd 80 80 	ldm	sp++,r7,pc
8000deae:	d7 03       	nop

8000deb0 <gpio_enable_pin_interrupt>:
 *             \ref GPIO_FALLING_EDGE).
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_pin_interrupt(uint32_t pin, uint32_t mode)
{
8000deb0:	eb cd 40 80 	pushm	r7,lr
8000deb4:	1a 97       	mov	r7,sp
8000deb6:	20 3d       	sub	sp,12
8000deb8:	ef 4c ff f8 	st.w	r7[-8],r12
8000debc:	ef 4b ff f4 	st.w	r7[-12],r11
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
8000dec0:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000dec4:	a5 98       	lsr	r8,0x5
8000dec6:	a9 68       	lsl	r8,0x8
8000dec8:	e0 28 f0 00 	sub	r8,61440
8000decc:	ef 48 ff fc 	st.w	r7[-4],r8

	/* Enable the glitch filter. */
	gpio_port->gfers = 1 << (pin & 0x1F);
8000ded0:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000ded4:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000ded8:	30 19       	mov	r9,1
8000deda:	f2 08 09 48 	lsl	r8,r9,r8
8000dede:	10 99       	mov	r9,r8
8000dee0:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000dee4:	f1 49 00 c4 	st.w	r8[196],r9

	/* Configure the edge detector. */
	if (GPIO_INVALID_ARGUMENT == gpio_configure_edge_detector(pin, mode)) {
8000dee8:	ee fb ff f4 	ld.w	r11,r7[-12]
8000deec:	ee fc ff f8 	ld.w	r12,r7[-8]
8000def0:	f0 1f 00 0c 	mcall	8000df20 <gpio_enable_pin_interrupt+0x70>
8000def4:	18 98       	mov	r8,r12
8000def6:	58 18       	cp.w	r8,1
8000def8:	c0 31       	brne	8000defe <gpio_enable_pin_interrupt+0x4e>
		return(GPIO_INVALID_ARGUMENT);
8000defa:	30 18       	mov	r8,1
8000defc:	c0 e8       	rjmp	8000df18 <gpio_enable_pin_interrupt+0x68>
	}

	/* Enable interrupt. */
	gpio_port->iers = 1 << (pin & 0x1F);
8000defe:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000df02:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000df06:	30 19       	mov	r9,1
8000df08:	f2 08 09 48 	lsl	r8,r9,r8
8000df0c:	10 99       	mov	r9,r8
8000df0e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000df12:	f1 49 00 94 	st.w	r8[148],r9

	return GPIO_SUCCESS;
8000df16:	30 08       	mov	r8,0
}
8000df18:	10 9c       	mov	r12,r8
8000df1a:	2f dd       	sub	sp,-12
8000df1c:	e3 cd 80 80 	ldm	sp++,r7,pc
8000df20:	80 00       	ld.sh	r0,r0[0x0]
8000df22:	dd da       	popm	r0-r3,r8-r11,pc,r12=-1

8000df24 <gpio_get_pin_interrupt_flag>:
 * \param pin The pin number.
 *
 * \return The pin interrupt flag.
 */
bool gpio_get_pin_interrupt_flag(uint32_t pin)
{
8000df24:	eb cd 40 80 	pushm	r7,lr
8000df28:	1a 97       	mov	r7,sp
8000df2a:	20 2d       	sub	sp,8
8000df2c:	ef 4c ff f8 	st.w	r7[-8],r12
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
8000df30:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000df34:	a5 98       	lsr	r8,0x5
8000df36:	a9 68       	lsl	r8,0x8
8000df38:	e0 28 f0 00 	sub	r8,61440
8000df3c:	ef 48 ff fc 	st.w	r7[-4],r8
	
	return (gpio_port->ifr >> (pin & 0x1F)) & 1;
8000df40:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000df44:	f0 f9 00 d0 	ld.w	r9,r8[208]
8000df48:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000df4c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000df50:	f2 08 0a 48 	lsr	r8,r9,r8
8000df54:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000df58:	5c 58       	castu.b	r8
}
8000df5a:	10 9c       	mov	r12,r8
8000df5c:	2f ed       	sub	sp,-8
8000df5e:	e3 cd 80 80 	ldm	sp++,r7,pc

8000df62 <gpio_clear_pin_interrupt_flag>:
/** \brief Clears the interrupt flag of a pin.
 *
 * \param pin The pin number.
 */
void gpio_clear_pin_interrupt_flag(uint32_t pin)
{
8000df62:	eb cd 40 80 	pushm	r7,lr
8000df66:	1a 97       	mov	r7,sp
8000df68:	20 2d       	sub	sp,8
8000df6a:	ef 4c ff f8 	st.w	r7[-8],r12
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
8000df6e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000df72:	a5 98       	lsr	r8,0x5
8000df74:	a9 68       	lsl	r8,0x8
8000df76:	e0 28 f0 00 	sub	r8,61440
8000df7a:	ef 48 ff fc 	st.w	r7[-4],r8
	gpio_port->ifrc = 1 << (pin & 0x1F);

	/* Restore interrupt enable register. */
	gpio_port->ier = gpio_ier;
#else
	gpio_port->ifrc = 1 << (pin & 0x1F);
8000df7e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000df82:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000df86:	30 19       	mov	r9,1
8000df88:	f2 08 09 48 	lsl	r8,r9,r8
8000df8c:	10 99       	mov	r9,r8
8000df8e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000df92:	f1 49 00 d8 	st.w	r8[216],r9
#endif
}
8000df96:	2f ed       	sub	sp,-8
8000df98:	e3 cd 80 80 	ldm	sp++,r7,pc

8000df9c <_unhandled_interrupt>:
__attribute__((__interrupt__))
#elif (defined __ICCAVR32__)
__interrupt
#endif
static void _unhandled_interrupt(void)
{
8000df9c:	eb cd 40 80 	pushm	r7,lr
8000dfa0:	1a 97       	mov	r7,sp
	// Catch unregistered interrupts.
	while (true);
8000dfa2:	c0 08       	rjmp	8000dfa2 <_unhandled_interrupt+0x6>

8000dfa4 <_get_interrupt_handler>:
 *
 * \return Interrupt handler to execute.
 */
__int_handler _get_interrupt_handler(uint32_t int_level);
__int_handler _get_interrupt_handler(uint32_t int_level)
{
8000dfa4:	eb cd 40 80 	pushm	r7,lr
8000dfa8:	1a 97       	mov	r7,sp
8000dfaa:	20 3d       	sub	sp,12
8000dfac:	ef 4c ff f4 	st.w	r7[-12],r12
	/* ICR3 is mapped first, ICR0 last.
	Code in exception.S puts int_level in R12 which is used by the compiler
	to pass a single argument to a function. */
	uint32_t int_grp = AVR32_INTC.icr[AVR32_INTC_INT3 - int_level];
8000dfb0:	fe 78 08 00 	mov	r8,-63488
8000dfb4:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000dfb8:	f2 09 11 03 	rsub	r9,r9,3
8000dfbc:	28 09       	sub	r9,-128
8000dfbe:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8000dfc2:	ef 48 ff f8 	st.w	r7[-8],r8
	uint32_t int_req = AVR32_INTC.irr[int_grp];
8000dfc6:	fe 78 08 00 	mov	r8,-63488
8000dfca:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000dfce:	2c 09       	sub	r9,-64
8000dfd0:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8000dfd4:	ef 48 ff fc 	st.w	r7[-4],r8
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
8000dfd8:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000dfdc:	58 08       	cp.w	r8,0
8000dfde:	c1 30       	breq	8000e004 <_get_interrupt_handler+0x60>
		? _int_handler_table[int_grp]._int_line_handler_table[32
8000dfe0:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000dfe4:	48 b8       	lddpc	r8,8000e010 <_get_interrupt_handler+0x6c>
8000dfe6:	a1 79       	lsl	r9,0x1
8000dfe8:	2f f9       	sub	r9,-1
8000dfea:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
8000dfee:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000dff2:	f0 08 12 00 	clz	r8,r8
8000dff6:	f0 08 11 1f 	rsub	r8,r8,31
			- clz(int_req) - 1]
8000dffa:	a3 68       	lsl	r8,0x2
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
		? _int_handler_table[int_grp]._int_line_handler_table[32
8000dffc:	f2 08 00 08 	add	r8,r9,r8
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
8000e000:	70 08       	ld.w	r8,r8[0x0]
8000e002:	c0 28       	rjmp	8000e006 <_get_interrupt_handler+0x62>
8000e004:	30 08       	mov	r8,0
		? _int_handler_table[int_grp]._int_line_handler_table[32
			- clz(int_req) - 1]
		: NULL;
}
8000e006:	10 9c       	mov	r12,r8
8000e008:	2f dd       	sub	sp,-12
8000e00a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000e00e:	00 00       	add	r0,r0
8000e010:	80 01       	ld.sh	r1,r0[0x0]
8000e012:	4f 28       	lddpc	r8,8000e1d8 <udata_clear_loop_end+0xa>

8000e014 <INTC_init_evba>:
 * \internal
 * \brief Init EVBA address. This operation may or may not have been done by the
 * C startup process.
 */
static __inline__ void INTC_init_evba(void)
{
8000e014:	eb cd 40 80 	pushm	r7,lr
8000e018:	1a 97       	mov	r7,sp
  Set_system_register(AVR32_EVBA, (int32_t)&_evba );
8000e01a:	48 38       	lddpc	r8,8000e024 <INTC_init_evba+0x10>
8000e01c:	e3 b8 00 01 	mtsr	0x4,r8
}
8000e020:	e3 cd 80 80 	ldm	sp++,r7,pc
8000e024:	80 01       	ld.sh	r1,r0[0x0]
8000e026:	4c 00       	lddpc	r0,8000e124 <INTC_register_interrupt+0x64>

8000e028 <INTC_init_interrupts>:
/**
 * \brief Initializes the hardware interrupt controller driver.
 *
 */
void INTC_init_interrupts(void)
{
8000e028:	eb cd 40 80 	pushm	r7,lr
8000e02c:	1a 97       	mov	r7,sp
8000e02e:	20 2d       	sub	sp,8
	uint32_t int_grp, int_req;

	INTC_init_evba();
8000e030:	f0 1f 00 1f 	mcall	8000e0ac <INTC_init_interrupts+0x84>

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
8000e034:	30 08       	mov	r8,0
8000e036:	ef 48 ff f8 	st.w	r7[-8],r8
8000e03a:	c3 18       	rjmp	8000e09c <INTC_init_interrupts+0x74>
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
8000e03c:	30 08       	mov	r8,0
8000e03e:	ef 48 ff fc 	st.w	r7[-4],r8
8000e042:	c1 48       	rjmp	8000e06a <INTC_init_interrupts+0x42>
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
				._int_line_handler_table[int_req]
8000e044:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000e048:	49 a8       	lddpc	r8,8000e0b0 <INTC_init_interrupts+0x88>
8000e04a:	a1 79       	lsl	r9,0x1
8000e04c:	2f f9       	sub	r9,-1
8000e04e:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
8000e052:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000e056:	a3 68       	lsl	r8,0x2
8000e058:	f2 08 00 08 	add	r8,r9,r8
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
8000e05c:	49 69       	lddpc	r9,8000e0b4 <INTC_init_interrupts+0x8c>
8000e05e:	91 09       	st.w	r8[0x0],r9
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
8000e060:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000e064:	2f f8       	sub	r8,-1
8000e066:	ef 48 ff fc 	st.w	r7[-4],r8
	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
			int_req < _int_handler_table[int_grp].num_irqs;
8000e06a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000e06e:	49 18       	lddpc	r8,8000e0b0 <INTC_init_interrupts+0x88>
8000e070:	f0 09 03 39 	ld.w	r9,r8[r9<<0x3]

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
8000e074:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000e078:	10 39       	cp.w	r9,r8
8000e07a:	fe 9b ff e5 	brhi	8000e044 <INTC_init_interrupts+0x1c>

		/* Set the interrupt group priority register to its default
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
8000e07e:	fe 78 08 00 	mov	r8,-63488
8000e082:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000e086:	48 db       	lddpc	r11,8000e0b8 <INTC_init_interrupts+0x90>
8000e088:	48 da       	lddpc	r10,8000e0bc <INTC_init_interrupts+0x94>
8000e08a:	f6 0a 01 0a 	sub	r10,r11,r10
8000e08e:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	uint32_t int_grp, int_req;

	INTC_init_evba();

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
8000e092:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000e096:	2f f8       	sub	r8,-1
8000e098:	ef 48 ff f8 	st.w	r7[-8],r8
8000e09c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000e0a0:	59 38       	cp.w	r8,19
8000e0a2:	fe 98 ff cd 	brls	8000e03c <INTC_init_interrupts+0x14>
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
	}
}
8000e0a6:	2f ed       	sub	sp,-8
8000e0a8:	e3 cd 80 80 	ldm	sp++,r7,pc
8000e0ac:	80 00       	ld.sh	r0,r0[0x0]
8000e0ae:	e0 14 80 01 	andl	r4,0x8001
8000e0b2:	4f 28       	lddpc	r8,8000e278 <udata_clear_loop_end+0xaa>
8000e0b4:	80 00       	ld.sh	r0,r0[0x0]
8000e0b6:	df 9c       	*unknown*
8000e0b8:	80 01       	ld.sh	r1,r0[0x0]
8000e0ba:	4d 04       	lddpc	r4,8000e1f8 <udata_clear_loop_end+0x2a>
8000e0bc:	80 01       	ld.sh	r1,r0[0x0]
8000e0be:	4c 00       	lddpc	r0,8000e1bc <idata_load_loop_end+0x4>

8000e0c0 <INTC_register_interrupt>:
 *          be effective.
 *
 */
void INTC_register_interrupt(__int_handler handler, uint32_t irq,
	uint32_t int_level)
{
8000e0c0:	eb cd 40 80 	pushm	r7,lr
8000e0c4:	1a 97       	mov	r7,sp
8000e0c6:	20 4d       	sub	sp,16
8000e0c8:	ef 4c ff f8 	st.w	r7[-8],r12
8000e0cc:	ef 4b ff f4 	st.w	r7[-12],r11
8000e0d0:	ef 4a ff f0 	st.w	r7[-16],r10
	// Determine the group of the IRQ.
	uint32_t int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;
8000e0d4:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000e0d8:	a5 98       	lsr	r8,0x5
8000e0da:	ef 48 ff fc 	st.w	r7[-4],r8

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
		._int_line_handler_table[irq % AVR32_INTC_MAX_NUM_IRQS_PER_GRP]
8000e0de:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000e0e2:	4a 78       	lddpc	r8,8000e17c <INTC_register_interrupt+0xbc>
8000e0e4:	a1 79       	lsl	r9,0x1
8000e0e6:	2f f9       	sub	r9,-1
8000e0e8:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
8000e0ec:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000e0f0:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000e0f4:	a3 68       	lsl	r8,0x2
8000e0f6:	f2 08 00 08 	add	r8,r9,r8
	uint32_t int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
8000e0fa:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000e0fe:	91 09       	st.w	r8[0x0],r9
	/* Program the corresponding IPRX register to set the interrupt priority
	level and the interrupt vector offset that will be fetched by the core
	interrupt system.
	NOTE: The _intx functions are intermediate assembly functions between
	the core interrupt system and the user interrupt handler. */
	if (int_level == AVR32_INTC_INT0) {
8000e100:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000e104:	58 08       	cp.w	r8,0
8000e106:	c0 c1       	brne	8000e11e <INTC_register_interrupt+0x5e>
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
8000e108:	fe 78 08 00 	mov	r8,-63488
8000e10c:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000e110:	49 cb       	lddpc	r11,8000e180 <INTC_register_interrupt+0xc0>
8000e112:	49 da       	lddpc	r10,8000e184 <INTC_register_interrupt+0xc4>
8000e114:	f6 0a 01 0a 	sub	r10,r11,r10
8000e118:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
8000e11c:	c2 d8       	rjmp	8000e176 <INTC_register_interrupt+0xb6>
	} else if (int_level == AVR32_INTC_INT1) {
8000e11e:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000e122:	58 18       	cp.w	r8,1
8000e124:	c0 d1       	brne	8000e13e <INTC_register_interrupt+0x7e>
		AVR32_INTC.ipr[int_grp] = IPR_INT1;
8000e126:	fe 78 08 00 	mov	r8,-63488
8000e12a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000e12e:	49 7b       	lddpc	r11,8000e188 <INTC_register_interrupt+0xc8>
8000e130:	49 5a       	lddpc	r10,8000e184 <INTC_register_interrupt+0xc4>
8000e132:	f6 0a 01 0a 	sub	r10,r11,r10
8000e136:	bf aa       	sbr	r10,0x1e
8000e138:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
8000e13c:	c1 d8       	rjmp	8000e176 <INTC_register_interrupt+0xb6>
	} else if (int_level == AVR32_INTC_INT2) {
8000e13e:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000e142:	58 28       	cp.w	r8,2
8000e144:	c0 d1       	brne	8000e15e <INTC_register_interrupt+0x9e>
		AVR32_INTC.ipr[int_grp] = IPR_INT2;
8000e146:	fe 78 08 00 	mov	r8,-63488
8000e14a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000e14e:	49 0b       	lddpc	r11,8000e18c <INTC_register_interrupt+0xcc>
8000e150:	48 da       	lddpc	r10,8000e184 <INTC_register_interrupt+0xc4>
8000e152:	f6 0a 01 0a 	sub	r10,r11,r10
8000e156:	bf ba       	sbr	r10,0x1f
8000e158:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
8000e15c:	c0 d8       	rjmp	8000e176 <INTC_register_interrupt+0xb6>
	} else {
		AVR32_INTC.ipr[int_grp] = IPR_INT3;
8000e15e:	fe 78 08 00 	mov	r8,-63488
8000e162:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000e166:	48 bb       	lddpc	r11,8000e190 <INTC_register_interrupt+0xd0>
8000e168:	48 7a       	lddpc	r10,8000e184 <INTC_register_interrupt+0xc4>
8000e16a:	f6 0a 01 0a 	sub	r10,r11,r10
8000e16e:	ea 1a c0 00 	orh	r10,0xc000
8000e172:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	}
}
8000e176:	2f cd       	sub	sp,-16
8000e178:	e3 cd 80 80 	ldm	sp++,r7,pc
8000e17c:	80 01       	ld.sh	r1,r0[0x0]
8000e17e:	4f 28       	lddpc	r8,8000e344 <udata_clear_loop_end+0x176>
8000e180:	80 01       	ld.sh	r1,r0[0x0]
8000e182:	4d 04       	lddpc	r4,8000e2c0 <udata_clear_loop_end+0xf2>
8000e184:	80 01       	ld.sh	r1,r0[0x0]
8000e186:	4c 00       	lddpc	r0,8000e284 <udata_clear_loop_end+0xb6>
8000e188:	80 01       	ld.sh	r1,r0[0x0]
8000e18a:	4d 12       	lddpc	r2,8000e2cc <udata_clear_loop_end+0xfe>
8000e18c:	80 01       	ld.sh	r1,r0[0x0]
8000e18e:	4d 20       	lddpc	r0,8000e2d4 <udata_clear_loop_end+0x106>
8000e190:	80 01       	ld.sh	r1,r0[0x0]
8000e192:	4d 2e       	lddpc	lr,8000e2d8 <udata_clear_loop_end+0x10a>

8000e194 <_stext>:

  .global _stext
  .type _stext, @function
_stext:
  // Set initial stack pointer.
  lda.w   sp, _estack
8000e194:	e0 7d 00 00 	mov	sp,65536

  // Set up EVBA so interrupts can be enabled.
  lda.w   r0, _evba
  mtsr    AVR32_EVBA, r0
8000e198:	fe c0 95 98 	sub	r0,pc,-27240

  // Enable the exception processing.
  csrf    AVR32_SR_EM_OFFSET
8000e19c:	e3 b0 00 01 	mtsr	0x4,r0

  // Load initialized data having a global lifetime from the data LMA.
  lda.w   r0, _data
  lda.w   r1, _edata
8000e1a0:	d5 53       	csrf	0x15
  cp      r0, r1
8000e1a2:	30 80       	mov	r0,8
  brhs    idata_load_loop_end
8000e1a4:	e0 61 05 e8 	mov	r1,1512
  lda.w   r2, _data_lma
idata_load_loop:
  ld.d    r4, r2++
8000e1a8:	02 30       	cp.w	r0,r1
  st.d    r0++, r4
8000e1aa:	c0 72       	brcc	8000e1b8 <idata_load_loop_end>
  cp      r0, r1
8000e1ac:	fe c2 8b 14 	sub	r2,pc,-29932

8000e1b0 <idata_load_loop>:
  brlo    idata_load_loop
idata_load_loop_end:

  // Clear uninitialized data having a global lifetime in the blank static storage section.
  lda.w   r0, __bss_start
8000e1b0:	a5 05       	ld.d	r4,r2++
  lda.w   r1, _end
8000e1b2:	a1 24       	st.d	r0++,r4
  cp      r0, r1
8000e1b4:	02 30       	cp.w	r0,r1
  brhs    udata_clear_loop_end
8000e1b6:	cf d3       	brcs	8000e1b0 <idata_load_loop>

8000e1b8 <idata_load_loop_end>:
  mov     r2, 0
8000e1b8:	e0 60 05 e8 	mov	r0,1512
  mov     r3, 0
udata_clear_loop:
  st.d    r0++, r2
8000e1bc:	e0 61 0e 78 	mov	r1,3704
  cp      r0, r1
  brlo    udata_clear_loop
8000e1c0:	02 30       	cp.w	r0,r1
  // Safety: Set the default "return" @ to the exit routine address.
  lda.w   lr, exit
#endif

  // Start the show.
  lda.w   pc, main
8000e1c2:	c0 62       	brcc	8000e1ce <udata_clear_loop_end>
8000e1c4:	30 02       	mov	r2,0
8000e1c6:	30 03       	mov	r3,0

8000e1c8 <udata_clear_loop>:
8000e1c8:	a1 22       	st.d	r0++,r2
8000e1ca:	02 30       	cp.w	r0,r1
8000e1cc:	cf e3       	brcs	8000e1c8 <udata_clear_loop>

8000e1ce <udata_clear_loop_end>:
8000e1ce:	fe cf f5 da 	sub	pc,pc,-2598
8000e1d2:	d7 03       	nop
8000e1d4:	4d 65       	lddpc	r5,8000e32c <udata_clear_loop_end+0x15e>
8000e1d6:	61 73       	ld.w	r3,r0[0x5c]
8000e1d8:	75 72       	ld.w	r2,r10[0x5c]
8000e1da:	65 6d       	ld.w	sp,r2[0x58]
8000e1dc:	65 6e       	ld.w	lr,r2[0x58]
8000e1de:	74 5f       	ld.w	pc,r10[0x14]
8000e1e0:	25 6c       	sub	r12,86
8000e1e2:	75 2e       	ld.w	lr,r10[0x48]
8000e1e4:	74 78       	ld.w	r8,r10[0x1c]
8000e1e6:	74 00       	ld.w	r0,r10[0x0]
8000e1e8:	65 72       	ld.w	r2,r2[0x5c]
8000e1ea:	72 6f       	ld.w	pc,r9[0x18]
8000e1ec:	72 20       	ld.w	r0,r9[0x8]
8000e1ee:	73 65       	ld.w	r5,r9[0x58]
8000e1f0:	6c 65       	ld.w	r5,r6[0x18]
8000e1f2:	63 74       	ld.w	r4,r1[0x5c]
8000e1f4:	69 6e       	ld.w	lr,r4[0x58]
8000e1f6:	67 20       	ld.w	r0,r3[0x48]
8000e1f8:	73 64       	ld.w	r4,r9[0x58]
8000e1fa:	2f 6d       	sub	sp,-40
8000e1fc:	6d 63       	ld.w	r3,r6[0x58]
8000e1fe:	00 00       	add	r0,r0
8000e200:	25 6c       	sub	r12,86
8000e202:	75 03       	ld.w	r3,r10[0x40]
8000e204:	00 00       	add	r0,r0
8000e206:	00 00       	add	r0,r0
8000e208:	73 74       	ld.w	r4,r9[0x5c]
8000e20a:	61 72       	ld.w	r2,r0[0x5c]
8000e20c:	74 00       	ld.w	r0,r10[0x0]
8000e20e:	00 00       	add	r0,r0
8000e210:	0d 0a       	ld.w	r10,r6++
8000e212:	43 6f       	lddsp	pc,sp[0xd8]
8000e214:	6d 6d       	ld.w	sp,r6[0x58]
8000e216:	61 6e       	ld.w	lr,r0[0x58]
8000e218:	64 20       	ld.w	r0,r2[0x8]
8000e21a:	72 65       	ld.w	r5,r9[0x18]
8000e21c:	6a 65       	ld.w	r5,r5[0x18]
8000e21e:	63 74       	ld.w	r4,r1[0x5c]
8000e220:	65 64       	ld.w	r4,r2[0x58]
8000e222:	21 00       	sub	r0,16
8000e224:	41 20       	lddsp	r0,sp[0x48]
8000e226:	6d 65       	ld.w	r5,r6[0x58]
8000e228:	61 73       	ld.w	r3,r0[0x5c]
8000e22a:	75 72       	ld.w	r2,r10[0x5c]
8000e22c:	65 6d       	ld.w	sp,r2[0x58]
8000e22e:	65 6e       	ld.w	lr,r2[0x58]
8000e230:	74 20       	ld.w	r0,r10[0x8]
8000e232:	69 73       	ld.w	r3,r4[0x5c]
8000e234:	20 63       	sub	r3,6
8000e236:	75 72       	ld.w	r2,r10[0x5c]
8000e238:	72 65       	ld.w	r5,r9[0x18]
8000e23a:	6e 74       	ld.w	r4,r7[0x1c]
8000e23c:	6c 79       	ld.w	r9,r6[0x1c]
8000e23e:	20 72       	sub	r2,7
8000e240:	75 6e       	ld.w	lr,r10[0x58]
8000e242:	6e 69       	ld.w	r9,r7[0x18]
8000e244:	6e 67       	ld.w	r7,r7[0x18]
8000e246:	21 00       	sub	r0,16
8000e248:	55 73       	stdsp	sp[0x15c],r3
8000e24a:	65 20       	ld.w	r0,r2[0x48]
8000e24c:	27 73       	sub	r3,119
8000e24e:	74 6f       	ld.w	pc,r10[0x18]
8000e250:	70 27       	ld.w	r7,r8[0x8]
8000e252:	20 74       	sub	r4,7
8000e254:	6f 20       	ld.w	r0,r7[0x48]
8000e256:	74 65       	ld.w	r5,r10[0x18]
8000e258:	72 6d       	ld.w	sp,r9[0x18]
8000e25a:	69 6e       	ld.w	lr,r4[0x58]
8000e25c:	61 74       	ld.w	r4,r0[0x5c]
8000e25e:	65 20       	ld.w	r0,r2[0x48]
8000e260:	6d 65       	ld.w	r5,r6[0x58]
8000e262:	61 73       	ld.w	r3,r0[0x5c]
8000e264:	75 72       	ld.w	r2,r10[0x5c]
8000e266:	65 6d       	ld.w	sp,r2[0x58]
8000e268:	65 6e       	ld.w	lr,r2[0x58]
8000e26a:	74 3a       	ld.w	r10,r10[0xc]
8000e26c:	00 00       	add	r0,r0
8000e26e:	00 00       	add	r0,r0
8000e270:	0d 0a       	ld.w	r10,r6++
8000e272:	3e 3e       	mov	lr,-29
8000e274:	00 00       	add	r0,r0
8000e276:	00 00       	add	r0,r0
8000e278:	73 74       	ld.w	r4,r9[0x5c]
8000e27a:	6f 70       	ld.w	r0,r7[0x5c]
8000e27c:	00 00       	add	r0,r0
8000e27e:	00 00       	add	r0,r0
8000e280:	0d 0a       	ld.w	r10,r6++
8000e282:	43 6f       	lddsp	pc,sp[0xd8]
8000e284:	6d 6d       	ld.w	sp,r6[0x58]
8000e286:	61 6e       	ld.w	lr,r0[0x58]
8000e288:	64 20       	ld.w	r0,r2[0x8]
8000e28a:	69 6e       	ld.w	lr,r4[0x58]
8000e28c:	65 66       	ld.w	r6,r2[0x58]
8000e28e:	66 65       	ld.w	r5,r3[0x18]
8000e290:	63 74       	ld.w	r4,r1[0x5c]
8000e292:	69 76       	ld.w	r6,r4[0x5c]
8000e294:	65 21       	ld.w	r1,r2[0x48]
8000e296:	00 00       	add	r0,r0
8000e298:	53 74       	stdsp	sp[0xdc],r4
8000e29a:	61 72       	ld.w	r2,r0[0x5c]
8000e29c:	74 20       	ld.w	r0,r10[0x8]
8000e29e:	6e 65       	ld.w	r5,r7[0x18]
8000e2a0:	77 20       	ld.w	r0,r11[0x48]
8000e2a2:	6d 65       	ld.w	r5,r6[0x58]
8000e2a4:	61 73       	ld.w	r3,r0[0x5c]
8000e2a6:	75 72       	ld.w	r2,r10[0x5c]
8000e2a8:	65 6d       	ld.w	sp,r2[0x58]
8000e2aa:	65 6e       	ld.w	lr,r2[0x58]
8000e2ac:	74 20       	ld.w	r0,r10[0x8]
8000e2ae:	77 69       	ld.w	r9,r11[0x58]
8000e2b0:	74 68       	ld.w	r8,r10[0x18]
8000e2b2:	20 63       	sub	r3,6
8000e2b4:	6f 6d       	ld.w	sp,r7[0x58]
8000e2b6:	6d 61       	ld.w	r1,r6[0x58]
8000e2b8:	6e 64       	ld.w	r4,r7[0x18]
8000e2ba:	20 27       	sub	r7,2
8000e2bc:	73 74       	ld.w	r4,r9[0x5c]
8000e2be:	61 72       	ld.w	r2,r0[0x5c]
8000e2c0:	74 27       	ld.w	r7,r10[0x8]
8000e2c2:	3a 00       	mov	r0,-96
8000e2c4:	0d 0a       	ld.w	r10,r6++
8000e2c6:	49 6e       	lddpc	lr,8000e31c <udata_clear_loop_end+0x14e>
8000e2c8:	76 61       	ld.w	r1,r11[0x18]
8000e2ca:	6c 69       	ld.w	r9,r6[0x18]
8000e2cc:	64 20       	ld.w	r0,r2[0x8]
8000e2ce:	63 6f       	ld.w	pc,r1[0x58]
8000e2d0:	6d 6d       	ld.w	sp,r6[0x58]
8000e2d2:	61 6e       	ld.w	lr,r0[0x58]
8000e2d4:	64 2c       	ld.w	r12,r2[0x8]
8000e2d6:	20 74       	sub	r4,7
8000e2d8:	72 79       	ld.w	r9,r9[0x1c]
8000e2da:	20 61       	sub	r1,6
8000e2dc:	67 61       	ld.w	r1,r3[0x58]
8000e2de:	69 6e       	ld.w	lr,r4[0x58]
8000e2e0:	21 00       	sub	r0,16
8000e2e2:	00 00       	add	r0,r0
8000e2e4:	4f 70       	lddpc	r0,8000e4c0 <udata_clear_loop_end+0x2f2>
8000e2e6:	65 6e       	ld.w	lr,r2[0x58]
8000e2e8:	20 50       	sub	r0,5
8000e2ea:	43 20       	lddsp	r0,sp[0xc8]
8000e2ec:	74 65       	ld.w	r5,r10[0x18]
8000e2ee:	72 6d       	ld.w	sp,r9[0x18]
8000e2f0:	69 6e       	ld.w	lr,r4[0x58]
8000e2f2:	61 6c       	ld.w	r12,r0[0x58]
8000e2f4:	00 00       	add	r0,r0
8000e2f6:	00 00       	add	r0,r0
8000e2f8:	50 72       	stdsp	sp[0x1c],r2
8000e2fa:	65 73       	ld.w	r3,r2[0x5c]
8000e2fc:	73 20       	ld.w	r0,r9[0x48]
8000e2fe:	50 42       	stdsp	sp[0x10],r2
8000e300:	30 20       	mov	r0,2
8000e302:	74 6f       	ld.w	pc,r10[0x18]
8000e304:	20 73       	sub	r3,7
8000e306:	74 61       	ld.w	r1,r10[0x18]
8000e308:	72 74       	ld.w	r4,r9[0x1c]
8000e30a:	00 00       	add	r0,r0
8000e30c:	0c 2d       	rsub	sp,r6
8000e30e:	2d 2d       	sub	sp,-184
8000e310:	2d 2d       	sub	sp,-184
8000e312:	2d 2d       	sub	sp,-184
8000e314:	2d 2d       	sub	sp,-184
8000e316:	2d 2d       	sub	sp,-184
8000e318:	2d 2d       	sub	sp,-184
8000e31a:	2d 2d       	sub	sp,-184
8000e31c:	2d 2d       	sub	sp,-184
8000e31e:	2d 2d       	sub	sp,-184
8000e320:	2d 2d       	sub	sp,-184
8000e322:	2d 2d       	sub	sp,-184
8000e324:	2d 2d       	sub	sp,-184
8000e326:	2d 2d       	sub	sp,-184
8000e328:	2d 2d       	sub	sp,-184
8000e32a:	2d 2d       	sub	sp,-184
8000e32c:	2d 2d       	sub	sp,-184
8000e32e:	2d 2d       	sub	sp,-184
8000e330:	2d 2d       	sub	sp,-184
8000e332:	2d 2d       	sub	sp,-184
8000e334:	2d 2d       	sub	sp,-184
8000e336:	2d 2d       	sub	sp,-184
8000e338:	2d 2d       	sub	sp,-184
8000e33a:	2d 2d       	sub	sp,-184
8000e33c:	2d 2d       	sub	sp,-184
8000e33e:	2d 2d       	sub	sp,-184
8000e340:	2d 2d       	sub	sp,-184
8000e342:	2d 2d       	sub	sp,-184
8000e344:	2d 2d       	sub	sp,-184
8000e346:	2d 2d       	sub	sp,-184
8000e348:	2d 2d       	sub	sp,-184
8000e34a:	2d 2d       	sub	sp,-184
8000e34c:	2d 2d       	sub	sp,-184
8000e34e:	2d 2d       	sub	sp,-184
8000e350:	2d 2d       	sub	sp,-184
8000e352:	00 00       	add	r0,r0
8000e354:	0d 0a       	ld.w	r10,r6++
8000e356:	4c 61       	lddpc	r1,8000e46c <udata_clear_loop_end+0x29e>
8000e358:	62 20       	ld.w	r0,r1[0x8]
8000e35a:	34 20       	mov	r0,66
8000e35c:	2d 20       	sub	r0,-46
8000e35e:	45 72       	lddsp	r2,sp[0x15c]
8000e360:	6c 65       	ld.w	r5,r6[0x18]
8000e362:	6e 64       	ld.w	r4,r7[0x18]
8000e364:	20 52       	sub	r2,5
8000e366:	2e 20       	sub	r0,-30
8000e368:	4d 79       	lddpc	r9,8000e4c4 <udata_clear_loop_end+0x2f6>
8000e36a:	6b 6c       	ld.w	r12,r5[0x58]
8000e36c:	65 62       	ld.w	r2,r2[0x58]
8000e36e:	75 73       	ld.w	r3,r10[0x5c]
8000e370:	74 00       	ld.w	r0,r10[0x0]
8000e372:	00 00       	add	r0,r0
8000e374:	0d 0a       	ld.w	r10,r6++
8000e376:	2d 2d       	sub	sp,-184
8000e378:	2d 2d       	sub	sp,-184
8000e37a:	2d 2d       	sub	sp,-184
8000e37c:	2d 2d       	sub	sp,-184
8000e37e:	2d 2d       	sub	sp,-184
8000e380:	2d 2d       	sub	sp,-184
8000e382:	2d 2d       	sub	sp,-184
8000e384:	2d 2d       	sub	sp,-184
8000e386:	2d 2d       	sub	sp,-184
8000e388:	2d 2d       	sub	sp,-184
8000e38a:	2d 2d       	sub	sp,-184
8000e38c:	2d 2d       	sub	sp,-184
8000e38e:	2d 2d       	sub	sp,-184
8000e390:	2d 2d       	sub	sp,-184
8000e392:	2d 2d       	sub	sp,-184
8000e394:	2d 2d       	sub	sp,-184
8000e396:	2d 2d       	sub	sp,-184
8000e398:	2d 2d       	sub	sp,-184
8000e39a:	2d 2d       	sub	sp,-184
8000e39c:	2d 2d       	sub	sp,-184
8000e39e:	2d 2d       	sub	sp,-184
8000e3a0:	2d 2d       	sub	sp,-184
8000e3a2:	2d 2d       	sub	sp,-184
8000e3a4:	2d 2d       	sub	sp,-184
8000e3a6:	2d 2d       	sub	sp,-184
8000e3a8:	2d 2d       	sub	sp,-184
8000e3aa:	2d 2d       	sub	sp,-184
8000e3ac:	2d 2d       	sub	sp,-184
8000e3ae:	2d 2d       	sub	sp,-184
8000e3b0:	2d 2d       	sub	sp,-184
8000e3b2:	2d 2d       	sub	sp,-184
8000e3b4:	2d 2d       	sub	sp,-184
8000e3b6:	2d 2d       	sub	sp,-184
8000e3b8:	2d 2d       	sub	sp,-184
8000e3ba:	2d 00       	sub	r0,-48
8000e3bc:	0d 0a       	ld.w	r10,r6++
8000e3be:	43 6f       	lddsp	pc,sp[0xd8]
8000e3c0:	6d 6d       	ld.w	sp,r6[0x58]
8000e3c2:	61 6e       	ld.w	lr,r0[0x58]
8000e3c4:	64 20       	ld.w	r0,r2[0x8]
8000e3c6:	6c 69       	ld.w	r9,r6[0x18]
8000e3c8:	73 74       	ld.w	r4,r9[0x5c]
8000e3ca:	3a 00       	mov	r0,-96
8000e3cc:	73 74       	ld.w	r4,r9[0x5c]
8000e3ce:	61 72       	ld.w	r2,r0[0x5c]
8000e3d0:	74 20       	ld.w	r0,r10[0x8]
8000e3d2:	20 3d       	sub	sp,12
8000e3d4:	20 73       	sub	r3,7
8000e3d6:	74 61       	ld.w	r1,r10[0x18]
8000e3d8:	72 74       	ld.w	r4,r9[0x1c]
8000e3da:	20 6c       	sub	r12,6
8000e3dc:	6f 67       	ld.w	r7,r7[0x58]
8000e3de:	67 69       	ld.w	r9,r3[0x58]
8000e3e0:	6e 67       	ld.w	r7,r7[0x18]
8000e3e2:	20 50       	sub	r0,5
8000e3e4:	4f 54       	lddpc	r4,8000e5b8 <erm_tc_init+0x4c>
8000e3e6:	20 76       	sub	r6,7
8000e3e8:	61 6c       	ld.w	r12,r0[0x58]
8000e3ea:	75 65       	ld.w	r5,r10[0x58]
8000e3ec:	73 20       	ld.w	r0,r9[0x48]
8000e3ee:	74 6f       	ld.w	pc,r10[0x18]
8000e3f0:	20 73       	sub	r3,7
8000e3f2:	64 2f       	ld.w	pc,r2[0x8]
8000e3f4:	6d 6d       	ld.w	sp,r6[0x58]
8000e3f6:	63 00       	ld.w	r0,r1[0x40]
8000e3f8:	73 74       	ld.w	r4,r9[0x5c]
8000e3fa:	6f 70       	ld.w	r0,r7[0x5c]
8000e3fc:	20 20       	sub	r0,2
8000e3fe:	20 3d       	sub	sp,12
8000e400:	20 73       	sub	r3,7
8000e402:	74 6f       	ld.w	pc,r10[0x18]
8000e404:	70 20       	ld.w	r0,r8[0x8]
8000e406:	6c 6f       	ld.w	pc,r6[0x18]
8000e408:	67 67       	ld.w	r7,r3[0x58]
8000e40a:	69 6e       	ld.w	lr,r4[0x58]
8000e40c:	67 20       	ld.w	r0,r3[0x48]
8000e40e:	50 4f       	stdsp	sp[0x10],pc
8000e410:	54 20       	stdsp	sp[0x108],r0
8000e412:	76 61       	ld.w	r1,r11[0x18]
8000e414:	6c 75       	ld.w	r5,r6[0x1c]
8000e416:	65 73       	ld.w	r3,r2[0x5c]
8000e418:	20 74       	sub	r4,7
8000e41a:	6f 20       	ld.w	r0,r7[0x48]
8000e41c:	73 64       	ld.w	r4,r9[0x58]
8000e41e:	2f 6d       	sub	sp,-40
8000e420:	6d 63       	ld.w	r3,r6[0x58]
8000e422:	00 00       	add	r0,r0
8000e424:	0d 0a       	ld.w	r10,r6++
8000e426:	54 79       	stdsp	sp[0x11c],r9
8000e428:	70 65       	ld.w	r5,r8[0x18]
8000e42a:	20 63       	sub	r3,6
8000e42c:	6f 6d       	ld.w	sp,r7[0x58]
8000e42e:	6d 61       	ld.w	r1,r6[0x58]
8000e430:	6e 64       	ld.w	r4,r7[0x18]
8000e432:	20 66       	sub	r6,6
8000e434:	6f 6c       	ld.w	r12,r7[0x58]
8000e436:	6c 6f       	ld.w	pc,r6[0x18]
8000e438:	77 65       	ld.w	r5,r11[0x58]
8000e43a:	64 20       	ld.w	r0,r2[0x8]
8000e43c:	62 79       	ld.w	r9,r1[0x1c]
8000e43e:	20 65       	sub	r5,6
8000e440:	6e 74       	ld.w	r4,r7[0x1c]
8000e442:	65 72       	ld.w	r2,r2[0x5c]
8000e444:	3a 00       	mov	r0,-96
8000e446:	00 00       	add	r0,r0
8000e448:	3e 3e       	mov	lr,-29
8000e44a:	00 00       	add	r0,r0
8000e44c:	45 6e       	lddsp	lr,sp[0x158]
8000e44e:	74 65       	ld.w	r5,r10[0x18]
8000e450:	72 20       	ld.w	r0,r9[0x8]
8000e452:	63 6f       	ld.w	pc,r1[0x58]
8000e454:	6d 6d       	ld.w	sp,r6[0x58]
8000e456:	61 6e       	ld.w	lr,r0[0x58]
8000e458:	64 2e       	ld.w	lr,r2[0x8]
8000e45a:	2e 2e       	sub	lr,-30
8000e45c:	00 00       	add	r0,r0
8000e45e:	00 00       	add	r0,r0
8000e460:	0d 0a       	ld.w	r10,r6++
8000e462:	53 74       	stdsp	sp[0xdc],r4
8000e464:	61 72       	ld.w	r2,r0[0x5c]
8000e466:	74 20       	ld.w	r0,r10[0x8]
8000e468:	63 6f       	ld.w	pc,r1[0x58]
8000e46a:	6d 6d       	ld.w	sp,r6[0x58]
8000e46c:	61 6e       	ld.w	lr,r0[0x58]
8000e46e:	64 20       	ld.w	r0,r2[0x8]
8000e470:	72 65       	ld.w	r5,r9[0x18]
8000e472:	63 6f       	ld.w	pc,r1[0x58]
8000e474:	67 6e       	ld.w	lr,r3[0x58]
8000e476:	69 7a       	ld.w	r10,r4[0x5c]
8000e478:	65 64       	ld.w	r4,r2[0x58]
8000e47a:	21 00       	sub	r0,16
8000e47c:	46 69       	lddsp	r9,sp[0x198]
8000e47e:	6c 65       	ld.w	r5,r6[0x18]
8000e480:	3a 20       	mov	r0,-94
8000e482:	00 00       	add	r0,r0
8000e484:	4c 6f       	lddpc	pc,8000e59c <erm_tc_init+0x30>
8000e486:	67 67       	ld.w	r7,r3[0x58]
8000e488:	69 6e       	ld.w	lr,r4[0x58]
8000e48a:	67 20       	ld.w	r0,r3[0x48]
8000e48c:	50 4f       	stdsp	sp[0x10],pc
8000e48e:	54 20       	stdsp	sp[0x108],r0
8000e490:	76 61       	ld.w	r1,r11[0x18]
8000e492:	6c 75       	ld.w	r5,r6[0x1c]
8000e494:	65 73       	ld.w	r3,r2[0x5c]
8000e496:	20 74       	sub	r4,7
8000e498:	6f 20       	ld.w	r0,r7[0x48]
8000e49a:	53 44       	stdsp	sp[0xd0],r4
8000e49c:	2f 4d       	sub	sp,-48
8000e49e:	4d 43       	lddpc	r3,8000e5ec <erm_tc_init+0x80>
8000e4a0:	2e 2e       	sub	lr,-30
8000e4a2:	2e 00       	sub	r0,-32
8000e4a4:	4c 6f       	lddpc	pc,8000e5bc <erm_tc_init+0x50>
8000e4a6:	67 67       	ld.w	r7,r3[0x58]
8000e4a8:	69 6e       	ld.w	lr,r4[0x58]
8000e4aa:	67 20       	ld.w	r0,r3[0x48]
8000e4ac:	61 63       	ld.w	r3,r0[0x58]
8000e4ae:	74 69       	ld.w	r9,r10[0x18]
8000e4b0:	76 65       	ld.w	r5,r11[0x18]
8000e4b2:	2e 2e       	sub	lr,-30
8000e4b4:	2e 00       	sub	r0,-32
8000e4b6:	00 00       	add	r0,r0
8000e4b8:	0d 0a       	ld.w	r10,r6++
8000e4ba:	53 74       	stdsp	sp[0xdc],r4
8000e4bc:	6f 70       	ld.w	r0,r7[0x5c]
8000e4be:	20 63       	sub	r3,6
8000e4c0:	6f 6d       	ld.w	sp,r7[0x58]
8000e4c2:	6d 61       	ld.w	r1,r6[0x58]
8000e4c4:	6e 64       	ld.w	r4,r7[0x18]
8000e4c6:	20 72       	sub	r2,7
8000e4c8:	65 63       	ld.w	r3,r2[0x58]
8000e4ca:	6f 67       	ld.w	r7,r7[0x58]
8000e4cc:	6e 69       	ld.w	r9,r7[0x18]
8000e4ce:	7a 65       	ld.w	r5,sp[0x18]
8000e4d0:	64 21       	ld.w	r1,r2[0x8]
8000e4d2:	00 00       	add	r0,r0
8000e4d4:	4c 6f       	lddpc	pc,8000e5ec <erm_tc_init+0x80>
8000e4d6:	67 67       	ld.w	r7,r3[0x58]
8000e4d8:	69 6e       	ld.w	lr,r4[0x58]
8000e4da:	67 20       	ld.w	r0,r3[0x48]
8000e4dc:	68 61       	ld.w	r1,r4[0x18]
8000e4de:	73 20       	ld.w	r0,r9[0x48]
8000e4e0:	73 74       	ld.w	r4,r9[0x5c]
8000e4e2:	6f 70       	ld.w	r0,r7[0x5c]
8000e4e4:	70 65       	ld.w	r5,r8[0x18]
8000e4e6:	64 21       	ld.w	r1,r2[0x8]
8000e4e8:	00 00       	add	r0,r0
8000e4ea:	00 00       	add	r0,r0
8000e4ec:	4c 6f       	lddpc	pc,8000e604 <erm_tc_init+0x98>
8000e4ee:	67 67       	ld.w	r7,r3[0x58]
8000e4f0:	69 6e       	ld.w	lr,r4[0x58]
8000e4f2:	67 20       	ld.w	r0,r3[0x48]
8000e4f4:	73 74       	ld.w	r4,r9[0x5c]
8000e4f6:	6f 70       	ld.w	r0,r7[0x5c]
8000e4f8:	70 65       	ld.w	r5,r8[0x18]
8000e4fa:	64 21       	ld.w	r1,r2[0x8]
8000e4fc:	00 00       	add	r0,r0
	...

8000e500 <osc_get_rate>:
		return false;
	}
}

static inline uint32_t osc_get_rate(uint8_t id)
{
8000e500:	eb cd 40 80 	pushm	r7,lr
8000e504:	1a 97       	mov	r7,sp
8000e506:	20 1d       	sub	sp,4
8000e508:	18 98       	mov	r8,r12
8000e50a:	ef 68 ff fc 	st.b	r7[-4],r8
	switch (id) {
8000e50e:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000e512:	58 08       	cp.w	r8,0
8000e514:	c0 40       	breq	8000e51c <osc_get_rate+0x1c>
8000e516:	58 28       	cp.w	r8,2
8000e518:	c0 70       	breq	8000e526 <osc_get_rate+0x26>
8000e51a:	c0 98       	rjmp	8000e52c <osc_get_rate+0x2c>
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		return BOARD_OSC0_HZ;
8000e51c:	e0 68 1b 00 	mov	r8,6912
8000e520:	ea 18 00 b7 	orh	r8,0xb7
8000e524:	c0 58       	rjmp	8000e52e <osc_get_rate+0x2e>
		return BOARD_OSC1_HZ;
#endif

#ifdef BOARD_OSC32_HZ
	case OSC_ID_OSC32:
		return BOARD_OSC32_HZ;
8000e526:	e0 68 80 00 	mov	r8,32768
8000e52a:	c0 28       	rjmp	8000e52e <osc_get_rate+0x2e>
#endif
	default:
		/* unhandled_case(id); */
		return 0;
8000e52c:	30 08       	mov	r8,0
	}
}
8000e52e:	10 9c       	mov	r12,r8
8000e530:	2f fd       	sub	sp,-4
8000e532:	e3 cd 80 80 	ldm	sp++,r7,pc
8000e536:	d7 03       	nop

8000e538 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern bool sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
8000e538:	eb cd 40 80 	pushm	r7,lr
8000e53c:	1a 97       	mov	r7,sp
		return BOARD_OSC0_HZ;
#endif

#ifdef CONFIG_PLL0_SOURCE
	case SYSCLK_SRC_PLL0:
		return pll_get_default_rate(0);
8000e53e:	30 0c       	mov	r12,0
8000e540:	f0 1f 00 04 	mcall	8000e550 <sysclk_get_main_hz+0x18>
8000e544:	18 98       	mov	r8,r12
8000e546:	a3 78       	lsl	r8,0x3
8000e548:	a1 98       	lsr	r8,0x1

	default:
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
8000e54a:	10 9c       	mov	r12,r8
8000e54c:	e3 cd 80 80 	ldm	sp++,r7,pc
8000e550:	80 00       	ld.sh	r0,r0[0x0]
8000e552:	e5 00 eb cd 	ld.sh	r0,r2[-5171]

8000e554 <sysclk_get_pba_hz>:
 * \brief Return the current rate in Hz of the Peripheral Bus A clock
 *
 * \return Frequency of the Peripheral Bus A clock, in Hz.
 */
static inline uint32_t sysclk_get_pba_hz(void)
{
8000e554:	eb cd 40 80 	pushm	r7,lr
8000e558:	1a 97       	mov	r7,sp
	return sysclk_get_main_hz() >> CONFIG_SYSCLK_PBA_DIV;
8000e55a:	f0 1f 00 04 	mcall	8000e568 <sysclk_get_pba_hz+0x14>
8000e55e:	18 98       	mov	r8,r12
8000e560:	a3 88       	lsr	r8,0x2
}
8000e562:	10 9c       	mov	r12,r8
8000e564:	e3 cd 80 80 	ldm	sp++,r7,pc
8000e568:	80 00       	ld.sh	r0,r0[0x0]
8000e56a:	e5 38 eb cd 	ld.ub	r8,r2[-5171]

8000e56c <erm_tc_init>:
#define ERM_TC_CHANNEL_ID			0
#define ERM_TC_CHANNEL_PIN			AVR32_TC_A0_0_0_PIN
#define ERM_TC_CHANNEL_FUNCTION		AVR32_TC_A0_0_0_FUNCTION

static void erm_tc_init(volatile avr32_tc_t *tc, uint32_t tick_ms, uint32_t pba_clk)
{
8000e56c:	eb cd 40 c0 	pushm	r6-r7,lr
8000e570:	1a 97       	mov	r7,sp
8000e572:	20 7d       	sub	sp,28
8000e574:	ef 4c ff ec 	st.w	r7[-20],r12
8000e578:	ef 4b ff e8 	st.w	r7[-24],r11
8000e57c:	ef 4a ff e4 	st.w	r7[-28],r10
		.cpcstop  = false,								// Counter clock stopped with RC compare.

		.burst    = false,								// Burst signal selection.
		.clki     = false,								// Clock inversion.
		.tcclks   = TC_CLOCK_SOURCE_TC4					// Internal source clock 3, connected to fPBA / 32.
	};
8000e580:	30 08       	mov	r8,0
8000e582:	30 09       	mov	r9,0
8000e584:	ee e9 ff f0 	st.d	r7[-16],r8
8000e588:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000e58c:	30 29       	mov	r9,2
8000e58e:	f1 d9 d1 a2 	bfins	r8,r9,0xd,0x2
8000e592:	ef 48 ff f4 	st.w	r7[-12],r8
8000e596:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000e59a:	30 39       	mov	r9,3
8000e59c:	f1 d9 d0 03 	bfins	r8,r9,0x0,0x3
8000e5a0:	ef 48 ff f4 	st.w	r7[-12],r8
		.lovrs = 0,
		.covfs = 0
	};
	
	// Initialize the timer/counter.
	tc_init_waveform(tc, &waveform_opt);
8000e5a4:	ee c8 00 10 	sub	r8,r7,16
8000e5a8:	10 9b       	mov	r11,r8
8000e5aa:	ee fc ff ec 	ld.w	r12,r7[-20]
8000e5ae:	f0 1f 00 19 	mcall	8000e610 <erm_tc_init+0xa4>
	
	// Internal clock source 4 is active, hence tc_clk = pba_clk / 32
	// Determine value of RC based on desired tick_time_ms
	temp = ( ((float) pba_clk) * ((float) tick_ms) ) / 32000.0;
8000e5b2:	ee fc ff e4 	ld.w	r12,r7[-28]
8000e5b6:	f0 1f 00 18 	mcall	8000e614 <erm_tc_init+0xa8>
8000e5ba:	18 96       	mov	r6,r12
8000e5bc:	ee fc ff e8 	ld.w	r12,r7[-24]
8000e5c0:	f0 1f 00 15 	mcall	8000e614 <erm_tc_init+0xa8>
8000e5c4:	18 98       	mov	r8,r12
8000e5c6:	10 9b       	mov	r11,r8
8000e5c8:	0c 9c       	mov	r12,r6
8000e5ca:	f0 1f 00 14 	mcall	8000e618 <erm_tc_init+0xac>
8000e5ce:	18 98       	mov	r8,r12
8000e5d0:	fc 1b 46 fa 	movh	r11,0x46fa
8000e5d4:	10 9c       	mov	r12,r8
8000e5d6:	f0 1f 00 12 	mcall	8000e61c <erm_tc_init+0xb0>
8000e5da:	18 98       	mov	r8,r12
8000e5dc:	ef 48 ff f8 	st.w	r7[-8],r8
	RC = (uint16_t) temp;
8000e5e0:	ee fc ff f8 	ld.w	r12,r7[-8]
8000e5e4:	f0 1f 00 0f 	mcall	8000e620 <erm_tc_init+0xb4>
8000e5e8:	18 98       	mov	r8,r12
8000e5ea:	ef 58 ff fe 	st.h	r7[-2],r8
	
	// Set RC value
	tc_write_rc(tc, ERM_TC_CHANNEL_ID, RC);
8000e5ee:	ef 18 ff fe 	ld.uh	r8,r7[-2]
8000e5f2:	10 9a       	mov	r10,r8
8000e5f4:	30 0b       	mov	r11,0
8000e5f6:	ee fc ff ec 	ld.w	r12,r7[-20]
8000e5fa:	f0 1f 00 0b 	mcall	8000e624 <erm_tc_init+0xb8>
	
	// Configure the timer interrupt
	tc_configure_interrupts(tc, ERM_TC_CHANNEL_ID, &tc_interrupt);
8000e5fe:	48 ba       	lddpc	r10,8000e628 <erm_tc_init+0xbc>
8000e600:	30 0b       	mov	r11,0
8000e602:	ee fc ff ec 	ld.w	r12,r7[-20]
8000e606:	f0 1f 00 0a 	mcall	8000e62c <erm_tc_init+0xc0>
	
}
8000e60a:	2f 9d       	sub	sp,-28
8000e60c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000e610:	80 00       	ld.sh	r0,r0[0x0]
8000e612:	7a 18       	ld.w	r8,sp[0x4]
8000e614:	80 00       	ld.sh	r0,r0[0x0]
8000e616:	f1 26 80 00 	ld.sb	r6,r8[-32768]
8000e61a:	f0 44 80 00 	cp.w	r4,-1015808
8000e61e:	ee e4 80 00 	ld.d	r4,r7[-32768]
8000e622:	f1 96       	*unknown*
8000e624:	80 00       	ld.sh	r0,r0[0x0]
8000e626:	7b e0       	ld.w	r0,sp[0x78]
8000e628:	80 01       	ld.sh	r1,r0[0x0]
8000e62a:	50 08       	stdsp	sp[0x0],r8
8000e62c:	80 00       	ld.sh	r0,r0[0x0]
8000e62e:	78 30       	ld.w	r0,r12[0xc]

8000e630 <erm_tc_start>:

static void erm_tc_start(volatile avr32_tc_t *tc)
{
8000e630:	eb cd 40 80 	pushm	r7,lr
8000e634:	1a 97       	mov	r7,sp
8000e636:	20 1d       	sub	sp,4
8000e638:	ef 4c ff fc 	st.w	r7[-4],r12
	// Start the timer/counter.
	tc_start(tc, ERM_TC_CHANNEL_ID);
8000e63c:	30 0b       	mov	r11,0
8000e63e:	ee fc ff fc 	ld.w	r12,r7[-4]
8000e642:	f0 1f 00 03 	mcall	8000e64c <erm_tc_start+0x1c>
}
8000e646:	2f fd       	sub	sp,-4
8000e648:	e3 cd 80 80 	ldm	sp++,r7,pc
8000e64c:	80 00       	ld.sh	r0,r0[0x0]
8000e64e:	7b 6c       	ld.w	r12,sp[0x58]

8000e650 <erm_cdc_print>:

#ifndef ERM_CDC_H_
#define ERM_CDC_H_

static void erm_cdc_print(char *input_string)
{
8000e650:	eb cd 40 80 	pushm	r7,lr
8000e654:	1a 97       	mov	r7,sp
8000e656:	20 1d       	sub	sp,4
8000e658:	ef 4c ff fc 	st.w	r7[-4],r12
	while (*input_string)
8000e65c:	c0 c8       	rjmp	8000e674 <erm_cdc_print+0x24>
	{
		udi_cdc_putc(*input_string);
8000e65e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000e662:	11 88       	ld.ub	r8,r8[0x0]
8000e664:	10 9c       	mov	r12,r8
8000e666:	f0 1f 00 08 	mcall	8000e684 <erm_cdc_print+0x34>
		*input_string++;
8000e66a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000e66e:	2f f8       	sub	r8,-1
8000e670:	ef 48 ff fc 	st.w	r7[-4],r8
#ifndef ERM_CDC_H_
#define ERM_CDC_H_

static void erm_cdc_print(char *input_string)
{
	while (*input_string)
8000e674:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000e678:	11 88       	ld.ub	r8,r8[0x0]
8000e67a:	58 08       	cp.w	r8,0
8000e67c:	cf 11       	brne	8000e65e <erm_cdc_print+0xe>
	{
		udi_cdc_putc(*input_string);
		*input_string++;
	}
}
8000e67e:	2f fd       	sub	sp,-4
8000e680:	e3 cd 80 80 	ldm	sp++,r7,pc
8000e684:	80 00       	ld.sh	r0,r0[0x0]
8000e686:	69 a4       	ld.w	r4,r4[0x68]

8000e688 <erm_cdc_println>:


static void erm_cdc_println(char *input_string)
{
8000e688:	eb cd 40 80 	pushm	r7,lr
8000e68c:	1a 97       	mov	r7,sp
8000e68e:	20 1d       	sub	sp,4
8000e690:	ef 4c ff fc 	st.w	r7[-4],r12
	while (*input_string)
8000e694:	c0 c8       	rjmp	8000e6ac <erm_cdc_println+0x24>
	{
		udi_cdc_putc(*input_string);
8000e696:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000e69a:	11 88       	ld.ub	r8,r8[0x0]
8000e69c:	10 9c       	mov	r12,r8
8000e69e:	f0 1f 00 0b 	mcall	8000e6c8 <erm_cdc_println+0x40>
		*input_string++;
8000e6a2:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000e6a6:	2f f8       	sub	r8,-1
8000e6a8:	ef 48 ff fc 	st.w	r7[-4],r8
}


static void erm_cdc_println(char *input_string)
{
	while (*input_string)
8000e6ac:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000e6b0:	11 88       	ld.ub	r8,r8[0x0]
8000e6b2:	58 08       	cp.w	r8,0
8000e6b4:	cf 11       	brne	8000e696 <erm_cdc_println+0xe>
	{
		udi_cdc_putc(*input_string);
		*input_string++;
	}
	udi_cdc_putc('\r');
8000e6b6:	30 dc       	mov	r12,13
8000e6b8:	f0 1f 00 04 	mcall	8000e6c8 <erm_cdc_println+0x40>
	udi_cdc_putc('\n');
8000e6bc:	30 ac       	mov	r12,10
8000e6be:	f0 1f 00 03 	mcall	8000e6c8 <erm_cdc_println+0x40>
}
8000e6c2:	2f fd       	sub	sp,-4
8000e6c4:	e3 cd 80 80 	ldm	sp++,r7,pc
8000e6c8:	80 00       	ld.sh	r0,r0[0x0]
8000e6ca:	69 a4       	ld.w	r4,r4[0x68]

8000e6cc <erm_fat_mount_sdmmc>:
// Global variables
uint32_t	erm_current_file_counter = 1;


static void erm_fat_mount_sdmmc(void)
{
8000e6cc:	eb cd 40 80 	pushm	r7,lr
8000e6d0:	1a 97       	mov	r7,sp
	// Select and mount the FAT partition on the SD/MMC
	nav_reset();
8000e6d2:	f0 1f 00 05 	mcall	8000e6e4 <erm_fat_mount_sdmmc+0x18>
	nav_drive_set(0);
8000e6d6:	30 0c       	mov	r12,0
8000e6d8:	f0 1f 00 04 	mcall	8000e6e8 <erm_fat_mount_sdmmc+0x1c>
	nav_partition_mount();
8000e6dc:	f0 1f 00 04 	mcall	8000e6ec <erm_fat_mount_sdmmc+0x20>
}
8000e6e0:	e3 cd 80 80 	ldm	sp++,r7,pc
8000e6e4:	80 00       	ld.sh	r0,r0[0x0]
8000e6e6:	c9 0c       	rcall	8000e806 <erm_fat_file_append+0x9e>
8000e6e8:	80 00       	ld.sh	r0,r0[0x0]
8000e6ea:	ca 04       	brge	8000e62a <erm_tc_init+0xbe>
8000e6ec:	80 00       	ld.sh	r0,r0[0x0]
8000e6ee:	ca 7c       	rcall	8000e83c <erm_sd_mmc_init>

8000e6f0 <erm_fat_create_file>:


static void erm_fat_create_file(char* file)
{	
8000e6f0:	eb cd 40 80 	pushm	r7,lr
8000e6f4:	1a 97       	mov	r7,sp
8000e6f6:	20 1d       	sub	sp,4
8000e6f8:	ef 4c ff fc 	st.w	r7[-4],r12
	
	sprintf(file, "Measurement_%lu.txt", erm_current_file_counter);
8000e6fc:	49 58       	lddpc	r8,8000e750 <erm_fat_create_file+0x60>
8000e6fe:	70 08       	ld.w	r8,r8[0x0]
8000e700:	1a d8       	st.w	--sp,r8
8000e702:	49 5b       	lddpc	r11,8000e754 <erm_fat_create_file+0x64>
8000e704:	ee fc ff fc 	ld.w	r12,r7[-4]
8000e708:	f0 1f 00 14 	mcall	8000e758 <erm_fat_create_file+0x68>
8000e70c:	2f fd       	sub	sp,-4
	
	nav_filelist_reset();
8000e70e:	f0 1f 00 14 	mcall	8000e75c <erm_fat_create_file+0x6c>
	
	while (nav_filelist_findname(file, false))
8000e712:	c1 08       	rjmp	8000e732 <erm_fat_create_file+0x42>
	{
		erm_current_file_counter++;
8000e714:	48 f8       	lddpc	r8,8000e750 <erm_fat_create_file+0x60>
8000e716:	70 08       	ld.w	r8,r8[0x0]
8000e718:	f0 c9 ff ff 	sub	r9,r8,-1
8000e71c:	48 d8       	lddpc	r8,8000e750 <erm_fat_create_file+0x60>
8000e71e:	91 09       	st.w	r8[0x0],r9
		sprintf(file, "Measurement_%lu.txt", erm_current_file_counter);
8000e720:	48 c8       	lddpc	r8,8000e750 <erm_fat_create_file+0x60>
8000e722:	70 08       	ld.w	r8,r8[0x0]
8000e724:	1a d8       	st.w	--sp,r8
8000e726:	48 cb       	lddpc	r11,8000e754 <erm_fat_create_file+0x64>
8000e728:	ee fc ff fc 	ld.w	r12,r7[-4]
8000e72c:	f0 1f 00 0b 	mcall	8000e758 <erm_fat_create_file+0x68>
8000e730:	2f fd       	sub	sp,-4
	
	sprintf(file, "Measurement_%lu.txt", erm_current_file_counter);
	
	nav_filelist_reset();
	
	while (nav_filelist_findname(file, false))
8000e732:	30 0b       	mov	r11,0
8000e734:	ee fc ff fc 	ld.w	r12,r7[-4]
8000e738:	f0 1f 00 0a 	mcall	8000e760 <erm_fat_create_file+0x70>
8000e73c:	18 98       	mov	r8,r12
8000e73e:	58 08       	cp.w	r8,0
8000e740:	ce a1       	brne	8000e714 <erm_fat_create_file+0x24>
		erm_current_file_counter++;
		sprintf(file, "Measurement_%lu.txt", erm_current_file_counter);
	}
	
	// Create the file
	nav_file_create((FS_STRING) file);
8000e742:	ee fc ff fc 	ld.w	r12,r7[-4]
8000e746:	f0 1f 00 08 	mcall	8000e764 <erm_fat_create_file+0x74>
	
}
8000e74a:	2f fd       	sub	sp,-4
8000e74c:	e3 cd 80 80 	ldm	sp++,r7,pc
8000e750:	00 00       	add	r0,r0
8000e752:	00 b8       	st.h	r0++,r8
8000e754:	80 00       	ld.sh	r0,r0[0x0]
8000e756:	e1 d4 80 00 	ldswp.w	r4,r0[0]
8000e75a:	f5 90       	*unknown*
8000e75c:	80 00       	ld.sh	r0,r0[0x0]
8000e75e:	ca cc       	rcall	8000e8b6 <adc_pot_init+0xe>
8000e760:	80 00       	ld.sh	r0,r0[0x0]
8000e762:	cd 10       	breq	8000e704 <erm_fat_create_file+0x14>
8000e764:	80 00       	ld.sh	r0,r0[0x0]
8000e766:	d6 f4       	*unknown*

8000e768 <erm_fat_file_append>:

static void erm_fat_file_append(char* file, uint32_t input)
{
8000e768:	eb cd 40 80 	pushm	r7,lr
8000e76c:	1a 97       	mov	r7,sp
8000e76e:	20 5d       	sub	sp,20
8000e770:	ef 4c ff f0 	st.w	r7[-16],r12
8000e774:	ef 4b ff ec 	st.w	r7[-20],r11
	uint8_t	i;
	char	temp_string[8];
	
	// Set navigator to desired file
	if (!nav_setcwd((FS_STRING) file, true, true))
8000e778:	30 1a       	mov	r10,1
8000e77a:	30 1b       	mov	r11,1
8000e77c:	ee fc ff f0 	ld.w	r12,r7[-16]
8000e780:	f0 1f 00 20 	mcall	8000e800 <erm_fat_file_append+0x98>
8000e784:	18 98       	mov	r8,r12
8000e786:	ec 18 00 01 	eorl	r8,0x1
8000e78a:	5c 58       	castu.b	r8
8000e78c:	c0 50       	breq	8000e796 <erm_fat_file_append+0x2e>
	{
		erm_cdc_println("error selecting sd/mmc");
8000e78e:	49 ec       	lddpc	r12,8000e804 <erm_fat_file_append+0x9c>
8000e790:	f0 1f 00 1e 	mcall	8000e808 <erm_fat_file_append+0xa0>
8000e794:	c3 28       	rjmp	8000e7f8 <erm_fat_file_append+0x90>
	}
	else
	{
		// Open file
		file_open(FOPEN_MODE_APPEND);
8000e796:	30 2c       	mov	r12,2
8000e798:	f0 1f 00 1d 	mcall	8000e80c <erm_fat_file_append+0xa4>
		// Convert pot_value to a string
		sprintf(temp_string, "%lu\x03", input);
8000e79c:	ee c8 00 0c 	sub	r8,r7,12
8000e7a0:	ee f9 ff ec 	ld.w	r9,r7[-20]
8000e7a4:	1a d9       	st.w	--sp,r9
8000e7a6:	49 bb       	lddpc	r11,8000e810 <erm_fat_file_append+0xa8>
8000e7a8:	10 9c       	mov	r12,r8
8000e7aa:	f0 1f 00 1b 	mcall	8000e814 <erm_fat_file_append+0xac>
8000e7ae:	2f fd       	sub	sp,-4
		// Write value to file
		i = 0;
8000e7b0:	30 08       	mov	r8,0
8000e7b2:	ef 68 ff ff 	st.b	r7[-1],r8
		while ((int) temp_string[i] != 0x03)
8000e7b6:	c0 f8       	rjmp	8000e7d4 <erm_fat_file_append+0x6c>
		{
			file_putc((int) temp_string[i]);
8000e7b8:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000e7bc:	ee 08 00 08 	add	r8,r7,r8
8000e7c0:	f1 38 ff f4 	ld.ub	r8,r8[-12]
8000e7c4:	10 9c       	mov	r12,r8
8000e7c6:	f0 1f 00 15 	mcall	8000e818 <erm_fat_file_append+0xb0>
			i++;
8000e7ca:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000e7ce:	2f f8       	sub	r8,-1
8000e7d0:	ef 68 ff ff 	st.b	r7[-1],r8
		file_open(FOPEN_MODE_APPEND);
		// Convert pot_value to a string
		sprintf(temp_string, "%lu\x03", input);
		// Write value to file
		i = 0;
		while ((int) temp_string[i] != 0x03)
8000e7d4:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000e7d8:	ee 08 00 08 	add	r8,r7,r8
8000e7dc:	f1 39 ff f4 	ld.ub	r9,r8[-12]
8000e7e0:	30 38       	mov	r8,3
8000e7e2:	f0 09 18 00 	cp.b	r9,r8
8000e7e6:	ce 91       	brne	8000e7b8 <erm_fat_file_append+0x50>
		{
			file_putc((int) temp_string[i]);
			i++;
		}
		// Add CR and LF
		file_putc('\r');
8000e7e8:	30 dc       	mov	r12,13
8000e7ea:	f0 1f 00 0c 	mcall	8000e818 <erm_fat_file_append+0xb0>
		file_putc('\n');
8000e7ee:	30 ac       	mov	r12,10
8000e7f0:	f0 1f 00 0a 	mcall	8000e818 <erm_fat_file_append+0xb0>
		// Close file
		file_close();
8000e7f4:	f0 1f 00 0a 	mcall	8000e81c <erm_fat_file_append+0xb4>
	}
}
8000e7f8:	2f bd       	sub	sp,-20
8000e7fa:	e3 cd 80 80 	ldm	sp++,r7,pc
8000e7fe:	00 00       	add	r0,r0
8000e800:	80 00       	ld.sh	r0,r0[0x0]
8000e802:	d2 40       	acall	0x24
8000e804:	80 00       	ld.sh	r0,r0[0x0]
8000e806:	e1 e8 80 00 	sthh.w	r0[r0],r0:b,r8:b
8000e80a:	e6 88 80 00 	brls	800de80a <_data_lma+0xc9172>
8000e80e:	c7 28       	rjmp	8000e8f2 <adc_pot_init+0x4a>
8000e810:	80 00       	ld.sh	r0,r0[0x0]
8000e812:	e2 00       	*unknown*
8000e814:	80 00       	ld.sh	r0,r0[0x0]
8000e816:	f5 90       	*unknown*
8000e818:	80 00       	ld.sh	r0,r0[0x0]
8000e81a:	c8 14       	brge	8000e71c <erm_fat_create_file+0x2c>
8000e81c:	80 00       	ld.sh	r0,r0[0x0]
8000e81e:	c8 b8       	rjmp	8000e934 <lcd_spi_init+0x1c>

8000e820 <erm_sd_mmc_pin_init>:
	.modfdis      = 1
};


static void erm_sd_mmc_pin_init(void)
{
8000e820:	eb cd 40 80 	pushm	r7,lr
8000e824:	1a 97       	mov	r7,sp
		{SD_MMC_SPI_NPCS_PIN, SD_MMC_SPI_NPCS_FUNCTION}   // Chip Select NPCS.
	};


	// Assign I/Os to SPI.
	gpio_enable_module(SD_MMC_SPI_GPIO_MAP,
8000e826:	30 4b       	mov	r11,4
8000e828:	48 3c       	lddpc	r12,8000e834 <erm_sd_mmc_pin_init+0x14>
8000e82a:	f0 1f 00 04 	mcall	8000e838 <erm_sd_mmc_pin_init+0x18>
	sizeof(SD_MMC_SPI_GPIO_MAP) / sizeof(SD_MMC_SPI_GPIO_MAP[0]));
}
8000e82e:	e3 cd 80 80 	ldm	sp++,r7,pc
8000e832:	00 00       	add	r0,r0
8000e834:	80 01       	ld.sh	r1,r0[0x0]
8000e836:	4f e8       	lddpc	r8,8000ea2c <push_button_handler+0xc>
8000e838:	80 00       	ld.sh	r0,r0[0x0]
8000e83a:	d9 dc       	*unknown*

8000e83c <erm_sd_mmc_init>:

static void erm_sd_mmc_init(uint32_t pba_clk)
{
8000e83c:	eb cd 40 80 	pushm	r7,lr
8000e840:	1a 97       	mov	r7,sp
8000e842:	20 1d       	sub	sp,4
8000e844:	ef 4c ff fc 	st.w	r7[-4],r12
	// Initialize as master.
	spi_initMaster(SD_MMC_SPI, &erm_sd_mmc_spiOptions);
8000e848:	49 3b       	lddpc	r11,8000e894 <erm_sd_mmc_init+0x58>
8000e84a:	fe 7c 28 00 	mov	r12,-55296
8000e84e:	f0 1f 00 13 	mcall	8000e898 <erm_sd_mmc_init+0x5c>

	// Set SPI selection mode: variable_ps, pcs_decode, delay.
	spi_selectionMode(SD_MMC_SPI, 0, 0, 0);
8000e852:	30 09       	mov	r9,0
8000e854:	30 0a       	mov	r10,0
8000e856:	30 0b       	mov	r11,0
8000e858:	fe 7c 28 00 	mov	r12,-55296
8000e85c:	f0 1f 00 10 	mcall	8000e89c <erm_sd_mmc_init+0x60>

	// Enable SPI module.
	spi_enable(SD_MMC_SPI);
8000e860:	fe 7c 28 00 	mov	r12,-55296
8000e864:	f0 1f 00 0f 	mcall	8000e8a0 <erm_sd_mmc_init+0x64>

	// Initialize SD/MMC driver with SPI clock (PBA).
	sd_mmc_spi_init(erm_sd_mmc_spiOptions, pba_clk);
8000e868:	48 b8       	lddpc	r8,8000e894 <erm_sd_mmc_init+0x58>
8000e86a:	20 4d       	sub	sp,16
8000e86c:	1a 99       	mov	r9,sp
8000e86e:	12 9a       	mov	r10,r9
8000e870:	10 9b       	mov	r11,r8
8000e872:	f6 e8 00 00 	ld.d	r8,r11[0]
8000e876:	f4 e9 00 00 	st.d	r10[0],r8
8000e87a:	f6 e8 00 08 	ld.d	r8,r11[8]
8000e87e:	f4 e9 00 08 	st.d	r10[8],r8
8000e882:	ee fc ff fc 	ld.w	r12,r7[-4]
8000e886:	f0 1f 00 08 	mcall	8000e8a4 <erm_sd_mmc_init+0x68>
8000e88a:	2f cd       	sub	sp,-16
}
8000e88c:	2f fd       	sub	sp,-4
8000e88e:	e3 cd 80 80 	ldm	sp++,r7,pc
8000e892:	00 00       	add	r0,r0
8000e894:	00 00       	add	r0,r0
8000e896:	00 bc       	st.h	r0++,r12
8000e898:	80 00       	ld.sh	r0,r0[0x0]
8000e89a:	84 98       	ld.uh	r8,r2[0x2]
8000e89c:	80 00       	ld.sh	r0,r0[0x0]
8000e89e:	85 2c       	st.w	r2[0x8],r12
8000e8a0:	80 00       	ld.sh	r0,r0[0x0]
8000e8a2:	88 48       	ld.sh	r8,r4[0x8]
8000e8a4:	80 00       	ld.sh	r0,r0[0x0]
8000e8a6:	32 5c       	mov	r12,37

8000e8a8 <adc_pot_init>:

#ifndef ADC_POT_H_
#define ADC_POT_H_

static void adc_pot_init(void)
{
8000e8a8:	eb cd 40 80 	pushm	r7,lr
8000e8ac:	1a 97       	mov	r7,sp
8000e8ae:	20 2d       	sub	sp,8
	// Define Potentiometer GIPO options
	const gpio_map_t ADC_GPIO_MAP ={
		{ADC_POTENTIOMETER_PIN, ADC_POTENTIOMETER_FUNCTION}
	};
8000e8b0:	31 68       	mov	r8,22
8000e8b2:	ef 48 ff f8 	st.w	r7[-8],r8
8000e8b6:	30 08       	mov	r8,0
8000e8b8:	ef 48 ff fc 	st.w	r7[-4],r8
	
	// Assign I/O
	gpio_enable_module(ADC_GPIO_MAP, 
8000e8bc:	ee c8 00 08 	sub	r8,r7,8
8000e8c0:	30 1b       	mov	r11,1
8000e8c2:	10 9c       	mov	r12,r8
8000e8c4:	f0 1f 00 0b 	mcall	8000e8f0 <adc_pot_init+0x48>
	
	// Configure the ADC peripheral module.
	// Lower the ADC clock to match the ADC characteristics (because we
	// configured the CPU clock to 12MHz, and the ADC clock characteristics are
	// usually lower; cf. the ADC Characteristic section in the datasheet).
	AVR32_ADC.mr |= 0x1 << AVR32_ADC_MR_PRESCAL_OFFSET;
8000e8c8:	fe 78 3c 00 	mov	r8,-50176
8000e8cc:	fe 79 3c 00 	mov	r9,-50176
8000e8d0:	72 19       	ld.w	r9,r9[0x4]
8000e8d2:	a9 a9       	sbr	r9,0x8
8000e8d4:	91 19       	st.w	r8[0x4],r9
	adc_configure(&AVR32_ADC);
8000e8d6:	fe 7c 3c 00 	mov	r12,-50176
8000e8da:	f0 1f 00 07 	mcall	8000e8f4 <adc_pot_init+0x4c>
	
	// Enable ADC
	adc_enable(&AVR32_ADC, ADC_POTENTIOMETER_CHANNEL);
8000e8de:	30 1b       	mov	r11,1
8000e8e0:	fe 7c 3c 00 	mov	r12,-50176
8000e8e4:	f0 1f 00 05 	mcall	8000e8f8 <adc_pot_init+0x50>
}
8000e8e8:	2f ed       	sub	sp,-8
8000e8ea:	e3 cd 80 80 	ldm	sp++,r7,pc
8000e8ee:	00 00       	add	r0,r0
8000e8f0:	80 00       	ld.sh	r0,r0[0x0]
8000e8f2:	d9 dc       	*unknown*
8000e8f4:	80 00       	ld.sh	r0,r0[0x0]
8000e8f6:	8b 20       	st.w	r5[0x8],r0
8000e8f8:	80 00       	ld.sh	r0,r0[0x0]
8000e8fa:	8b 70       	st.w	r5[0x1c],r0

8000e8fc <lcd_spi_pin_init>:
	.spi_mode     = SPI_MODE_0,			// Select SPI mode
	.modfdis      = 1					// Disable mode fault detection
};

void lcd_spi_pin_init(void)
{
8000e8fc:	eb cd 40 80 	pushm	r7,lr
8000e900:	1a 97       	mov	r7,sp
		{DIP204_SPI_MOSI_PIN, DIP204_SPI_MOSI_FUNCTION},  // MOSI.
		{DIP204_SPI_NPCS_PIN, DIP204_SPI_NPCS_FUNCTION}   // Chip Select NPCS.
	};
	
	// Assign I/Os to SPI
	gpio_enable_module(DIP204_SPI_GPIO_MAP,
8000e902:	30 4b       	mov	r11,4
8000e904:	48 3c       	lddpc	r12,8000e910 <lcd_spi_pin_init+0x14>
8000e906:	f0 1f 00 04 	mcall	8000e914 <lcd_spi_pin_init+0x18>
	sizeof(DIP204_SPI_GPIO_MAP) / sizeof(DIP204_SPI_GPIO_MAP[0]));
}
8000e90a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000e90e:	00 00       	add	r0,r0
8000e910:	80 01       	ld.sh	r1,r0[0x0]
8000e912:	4f c8       	lddpc	r8,8000eb00 <decode_command+0x9c>
8000e914:	80 00       	ld.sh	r0,r0[0x0]
8000e916:	d9 dc       	*unknown*

8000e918 <lcd_spi_init>:

void lcd_spi_init(uint32_t pba_freq)
{
8000e918:	eb cd 40 80 	pushm	r7,lr
8000e91c:	1a 97       	mov	r7,sp
8000e91e:	20 1d       	sub	sp,4
8000e920:	ef 4c ff fc 	st.w	r7[-4],r12
	spi_initMaster(DIP204_SPI, &erm_lcd_spiOptions);				// Initialize the AVR32 as SPI MASTER
8000e924:	49 0b       	lddpc	r11,8000e964 <lcd_spi_init+0x4c>
8000e926:	fe 7c 28 00 	mov	r12,-55296
8000e92a:	f0 1f 00 10 	mcall	8000e968 <lcd_spi_init+0x50>
	spi_selectionMode(DIP204_SPI, 0, 0, 0);							// Set selection mode: variable_ps, pcs_decode, delay
8000e92e:	30 09       	mov	r9,0
8000e930:	30 0a       	mov	r10,0
8000e932:	30 0b       	mov	r11,0
8000e934:	fe 7c 28 00 	mov	r12,-55296
8000e938:	f0 1f 00 0d 	mcall	8000e96c <lcd_spi_init+0x54>
	spi_enable(DIP204_SPI);											// Enable SPI
8000e93c:	fe 7c 28 00 	mov	r12,-55296
8000e940:	f0 1f 00 0c 	mcall	8000e970 <lcd_spi_init+0x58>
	spi_setupChipReg(DIP204_SPI, &erm_lcd_spiOptions, pba_freq);	// Configure registers on MASTER
8000e944:	ee fa ff fc 	ld.w	r10,r7[-4]
8000e948:	48 7b       	lddpc	r11,8000e964 <lcd_spi_init+0x4c>
8000e94a:	fe 7c 28 00 	mov	r12,-55296
8000e94e:	f0 1f 00 0a 	mcall	8000e974 <lcd_spi_init+0x5c>
	dip204_init(backlight_IO, true);								// Initialize LCD
8000e952:	30 1b       	mov	r11,1
8000e954:	30 0c       	mov	r12,0
8000e956:	f0 1f 00 09 	mcall	8000e978 <lcd_spi_init+0x60>
	dip204_hide_cursor();											// Hide cursor
8000e95a:	f0 1f 00 09 	mcall	8000e97c <lcd_spi_init+0x64>
}
8000e95e:	2f fd       	sub	sp,-4
8000e960:	e3 cd 80 80 	ldm	sp++,r7,pc
8000e964:	00 00       	add	r0,r0
8000e966:	00 cc       	st.b	r0++,r12
8000e968:	80 00       	ld.sh	r0,r0[0x0]
8000e96a:	84 98       	ld.uh	r8,r2[0x2]
8000e96c:	80 00       	ld.sh	r0,r0[0x0]
8000e96e:	85 2c       	st.w	r2[0x8],r12
8000e970:	80 00       	ld.sh	r0,r0[0x0]
8000e972:	88 48       	ld.sh	r8,r4[0x8]
8000e974:	80 00       	ld.sh	r0,r0[0x0]
8000e976:	86 c4       	ld.uh	r4,r3[0x8]
8000e978:	80 00       	ld.sh	r0,r0[0x0]
8000e97a:	20 7c       	sub	r12,7
8000e97c:	80 00       	ld.sh	r0,r0[0x0]
8000e97e:	2b 58       	sub	r8,-75

8000e980 <push_button_0_interrupt_init>:

#ifndef INTERRUPTS_INIT_H_
#define INTERRUPTS_INIT_H_

static void push_button_0_interrupt_init(__int_handler handler, uint32_t priority)
{
8000e980:	eb cd 40 80 	pushm	r7,lr
8000e984:	1a 97       	mov	r7,sp
8000e986:	20 2d       	sub	sp,8
8000e988:	ef 4c ff fc 	st.w	r7[-4],r12
8000e98c:	ef 4b ff f8 	st.w	r7[-8],r11
	// Define handler and configure interrupt with correct priority
	INTC_register_interrupt(handler,
8000e990:	ee fa ff f8 	ld.w	r10,r7[-8]
8000e994:	34 bb       	mov	r11,75
8000e996:	ee fc ff fc 	ld.w	r12,r7[-4]
8000e99a:	f0 1f 00 05 	mcall	8000e9ac <push_button_0_interrupt_init+0x2c>
							AVR32_GPIO_IRQ_0 + (GPIO_PUSH_BUTTON_0/8),
							priority);
	
	// Enable falling edge interrupt on Push Button 1
	gpio_enable_pin_interrupt(GPIO_PUSH_BUTTON_0, GPIO_FALLING_EDGE);
8000e99e:	30 2b       	mov	r11,2
8000e9a0:	35 8c       	mov	r12,88
8000e9a2:	f0 1f 00 04 	mcall	8000e9b0 <push_button_0_interrupt_init+0x30>
}
8000e9a6:	2f ed       	sub	sp,-8
8000e9a8:	e3 cd 80 80 	ldm	sp++,r7,pc
8000e9ac:	80 00       	ld.sh	r0,r0[0x0]
8000e9ae:	e0 c0 80 00 	sub	r0,r0,-32768
8000e9b2:	de b0       	acall	0xeb

8000e9b4 <erm_tc_interrupt_init>:
	gpio_enable_pin_interrupt(GPIO_PUSH_BUTTON_1, GPIO_FALLING_EDGE);
}


static void erm_tc_interrupt_init(__int_handler handler, uint32_t priority)
{
8000e9b4:	eb cd 40 80 	pushm	r7,lr
8000e9b8:	1a 97       	mov	r7,sp
8000e9ba:	20 2d       	sub	sp,8
8000e9bc:	ef 4c ff fc 	st.w	r7[-4],r12
8000e9c0:	ef 4b ff f8 	st.w	r7[-8],r11
	// Define handler and configure interrupt with correct priority
	INTC_register_interrupt(handler, AVR32_TC_IRQ0, priority);
8000e9c4:	ee fa ff f8 	ld.w	r10,r7[-8]
8000e9c8:	e0 6b 01 c0 	mov	r11,448
8000e9cc:	ee fc ff fc 	ld.w	r12,r7[-4]
8000e9d0:	f0 1f 00 03 	mcall	8000e9dc <erm_tc_interrupt_init+0x28>
}
8000e9d4:	2f ed       	sub	sp,-8
8000e9d6:	e3 cd 80 80 	ldm	sp++,r7,pc
8000e9da:	00 00       	add	r0,r0
8000e9dc:	80 00       	ld.sh	r0,r0[0x0]
8000e9de:	e0 c0 eb cd 	sub	r0,r0,-5171

8000e9e0 <erm_tc_handler>:
__attribute__((__interrupt__))
#elif __ICCAVR32__
__interrupt
#endif
static void erm_tc_handler(void)
{
8000e9e0:	eb cd 40 80 	pushm	r7,lr
8000e9e4:	1a 97       	mov	r7,sp
	if (mounted && (command == START_COMMAND))
8000e9e6:	48 b8       	lddpc	r8,8000ea10 <erm_tc_handler+0x30>
8000e9e8:	11 88       	ld.ub	r8,r8[0x0]
8000e9ea:	58 08       	cp.w	r8,0
8000e9ec:	c0 a0       	breq	8000ea00 <erm_tc_handler+0x20>
8000e9ee:	48 a8       	lddpc	r8,8000ea14 <erm_tc_handler+0x34>
8000e9f0:	11 89       	ld.ub	r9,r8[0x0]
8000e9f2:	30 18       	mov	r8,1
8000e9f4:	f0 09 18 00 	cp.b	r9,r8
8000e9f8:	c0 41       	brne	8000ea00 <erm_tc_handler+0x20>
	{
		// Set loop_identifier
		loop_identifier = INT_TC;
8000e9fa:	48 89       	lddpc	r9,8000ea18 <erm_tc_handler+0x38>
8000e9fc:	30 28       	mov	r8,2
8000e9fe:	b2 88       	st.b	r9[0x0],r8
	}
	
	// Clear TC interrupt flag
	tc_read_sr((&AVR32_TC), 0);
8000ea00:	30 0b       	mov	r11,0
8000ea02:	fe 7c 38 00 	mov	r12,-51200
8000ea06:	f0 1f 00 06 	mcall	8000ea1c <erm_tc_handler+0x3c>
}
8000ea0a:	e3 cd 40 80 	ldm	sp++,r7,lr
8000ea0e:	d6 03       	rete
8000ea10:	00 00       	add	r0,r0
8000ea12:	08 b9       	st.h	r4++,r9
8000ea14:	00 00       	add	r0,r0
8000ea16:	08 bc       	st.h	r4++,r12
8000ea18:	00 00       	add	r0,r0
8000ea1a:	08 b8       	st.h	r4++,r8
8000ea1c:	80 00       	ld.sh	r0,r0[0x0]
8000ea1e:	7b a6       	ld.w	r6,sp[0x68]

8000ea20 <push_button_handler>:
__attribute__((__interrupt__))
#elif __ICCAVR32__
__interrupt
#endif
static void push_button_handler(void)
{
8000ea20:	eb cd 40 80 	pushm	r7,lr
8000ea24:	1a 97       	mov	r7,sp
	if (gpio_get_pin_interrupt_flag(GPIO_PUSH_BUTTON_0))
8000ea26:	35 8c       	mov	r12,88
8000ea28:	f0 1f 00 0b 	mcall	8000ea54 <push_button_handler+0x34>
8000ea2c:	18 98       	mov	r8,r12
8000ea2e:	58 08       	cp.w	r8,0
8000ea30:	c0 e0       	breq	8000ea4c <push_button_handler+0x2c>
	{
		if (!commence_program)
8000ea32:	48 a8       	lddpc	r8,8000ea58 <push_button_handler+0x38>
8000ea34:	11 88       	ld.ub	r8,r8[0x0]
8000ea36:	58 08       	cp.w	r8,0
8000ea38:	c0 71       	brne	8000ea46 <push_button_handler+0x26>
		{
			// Set commence_program identifier
			commence_program = true;
8000ea3a:	48 89       	lddpc	r9,8000ea58 <push_button_handler+0x38>
8000ea3c:	30 18       	mov	r8,1
8000ea3e:	b2 88       	st.b	r9[0x0],r8
			
			// Set loop_identifier
			loop_identifier = UPDATE_INITIAL;
8000ea40:	48 79       	lddpc	r9,8000ea5c <push_button_handler+0x3c>
8000ea42:	30 58       	mov	r8,5
8000ea44:	b2 88       	st.b	r9[0x0],r8
		}
		
		// Clear interrupt flag to allow new interrupts
		gpio_clear_pin_interrupt_flag(GPIO_PUSH_BUTTON_0);
8000ea46:	35 8c       	mov	r12,88
8000ea48:	f0 1f 00 06 	mcall	8000ea60 <push_button_handler+0x40>
	}
}
8000ea4c:	e3 cd 40 80 	ldm	sp++,r7,lr
8000ea50:	d6 03       	rete
8000ea52:	00 00       	add	r0,r0
8000ea54:	80 00       	ld.sh	r0,r0[0x0]
8000ea56:	df 24       	*unknown*
8000ea58:	00 00       	add	r0,r0
8000ea5a:	08 bb       	st.h	r4++,r11
8000ea5c:	00 00       	add	r0,r0
8000ea5e:	08 b8       	st.h	r4++,r8
8000ea60:	80 00       	ld.sh	r0,r0[0x0]
8000ea62:	df 62       	popm	r4-r9,r11-r12,lr-pc

8000ea64 <decode_command>:



static void decode_command(void)
{
8000ea64:	eb cd 40 80 	pushm	r7,lr
8000ea68:	1a 97       	mov	r7,sp
	// If received command was 'start'
	if (!strcmp(command_string, "start"))
8000ea6a:	4a 4b       	lddpc	r11,8000eaf8 <decode_command+0x94>
8000ea6c:	4a 4c       	lddpc	r12,8000eafc <decode_command+0x98>
8000ea6e:	f0 1f 00 25 	mcall	8000eb00 <decode_command+0x9c>
8000ea72:	18 98       	mov	r8,r12
8000ea74:	58 08       	cp.w	r8,0
8000ea76:	c1 91       	brne	8000eaa8 <decode_command+0x44>
	{
		if (running)
8000ea78:	4a 38       	lddpc	r8,8000eb04 <decode_command+0xa0>
8000ea7a:	11 88       	ld.ub	r8,r8[0x0]
8000ea7c:	58 08       	cp.w	r8,0
8000ea7e:	c0 e0       	breq	8000ea9a <decode_command+0x36>
		{
			erm_cdc_println("\r\nCommand rejected!");
8000ea80:	4a 2c       	lddpc	r12,8000eb08 <decode_command+0xa4>
8000ea82:	f0 1f 00 23 	mcall	8000eb0c <decode_command+0xa8>
			erm_cdc_println("A measurement is currently running!");
8000ea86:	4a 3c       	lddpc	r12,8000eb10 <decode_command+0xac>
8000ea88:	f0 1f 00 21 	mcall	8000eb0c <decode_command+0xa8>
			erm_cdc_println("Use 'stop' to terminate measurement:");
8000ea8c:	4a 2c       	lddpc	r12,8000eb14 <decode_command+0xb0>
8000ea8e:	f0 1f 00 20 	mcall	8000eb0c <decode_command+0xa8>
			erm_cdc_print("\r\n>>");
8000ea92:	4a 2c       	lddpc	r12,8000eb18 <decode_command+0xb4>
8000ea94:	f0 1f 00 22 	mcall	8000eb1c <decode_command+0xb8>
8000ea98:	c2 d8       	rjmp	8000eaf2 <decode_command+0x8e>
		}
		else
		{
			command = START_COMMAND;
8000ea9a:	4a 29       	lddpc	r9,8000eb20 <decode_command+0xbc>
8000ea9c:	30 18       	mov	r8,1
8000ea9e:	b2 88       	st.b	r9[0x0],r8
			loop_identifier = UPDATE_START;
8000eaa0:	4a 19       	lddpc	r9,8000eb24 <decode_command+0xc0>
8000eaa2:	30 68       	mov	r8,6
8000eaa4:	b2 88       	st.b	r9[0x0],r8
8000eaa6:	c2 68       	rjmp	8000eaf2 <decode_command+0x8e>
		}
		
	}
	
	// If received command was 'stop'
	else if (!strcmp(command_string, "stop"))
8000eaa8:	4a 0b       	lddpc	r11,8000eb28 <decode_command+0xc4>
8000eaaa:	49 5c       	lddpc	r12,8000eafc <decode_command+0x98>
8000eaac:	f0 1f 00 15 	mcall	8000eb00 <decode_command+0x9c>
8000eab0:	18 98       	mov	r8,r12
8000eab2:	58 08       	cp.w	r8,0
8000eab4:	c1 61       	brne	8000eae0 <decode_command+0x7c>
	{
		if (!running)
8000eab6:	49 48       	lddpc	r8,8000eb04 <decode_command+0xa0>
8000eab8:	11 88       	ld.ub	r8,r8[0x0]
8000eaba:	58 08       	cp.w	r8,0
8000eabc:	c0 b1       	brne	8000ead2 <decode_command+0x6e>
		{
			erm_cdc_println("\r\nCommand ineffective!");
8000eabe:	49 cc       	lddpc	r12,8000eb2c <decode_command+0xc8>
8000eac0:	f0 1f 00 13 	mcall	8000eb0c <decode_command+0xa8>
			erm_cdc_println("Start new measurement with command 'start':");
8000eac4:	49 bc       	lddpc	r12,8000eb30 <decode_command+0xcc>
8000eac6:	f0 1f 00 12 	mcall	8000eb0c <decode_command+0xa8>
			erm_cdc_print("\r\n>>");
8000eaca:	49 4c       	lddpc	r12,8000eb18 <decode_command+0xb4>
8000eacc:	f0 1f 00 14 	mcall	8000eb1c <decode_command+0xb8>
8000ead0:	c1 18       	rjmp	8000eaf2 <decode_command+0x8e>
		}
		else
		{
			command = STOP_COMMAND;
8000ead2:	49 49       	lddpc	r9,8000eb20 <decode_command+0xbc>
8000ead4:	30 28       	mov	r8,2
8000ead6:	b2 88       	st.b	r9[0x0],r8
			loop_identifier = UPDATE_STOP;
8000ead8:	49 39       	lddpc	r9,8000eb24 <decode_command+0xc0>
8000eada:	30 78       	mov	r8,7
8000eadc:	b2 88       	st.b	r9[0x0],r8
8000eade:	c0 a8       	rjmp	8000eaf2 <decode_command+0x8e>
	}
	
	// Otherwise
	else
	{
		command	= NO_COMMAND;
8000eae0:	49 09       	lddpc	r9,8000eb20 <decode_command+0xbc>
8000eae2:	30 08       	mov	r8,0
8000eae4:	b2 88       	st.b	r9[0x0],r8
		erm_cdc_println("\r\nInvalid command, try again!");
8000eae6:	49 4c       	lddpc	r12,8000eb34 <decode_command+0xd0>
8000eae8:	f0 1f 00 09 	mcall	8000eb0c <decode_command+0xa8>
		erm_cdc_print("\r\n>>");
8000eaec:	48 bc       	lddpc	r12,8000eb18 <decode_command+0xb4>
8000eaee:	f0 1f 00 0c 	mcall	8000eb1c <decode_command+0xb8>
	}
}
8000eaf2:	e3 cd 80 80 	ldm	sp++,r7,pc
8000eaf6:	00 00       	add	r0,r0
8000eaf8:	80 00       	ld.sh	r0,r0[0x0]
8000eafa:	e2 08 00 00 	add	r0,r1,r8
8000eafe:	0e 54       	eor	r4,r7
8000eb00:	80 00       	ld.sh	r0,r0[0x0]
8000eb02:	f5 c8       	*unknown*
8000eb04:	00 00       	add	r0,r0
8000eb06:	08 ba       	st.h	r4++,r10
8000eb08:	80 00       	ld.sh	r0,r0[0x0]
8000eb0a:	e2 10 80 00 	andl	r0,0x8000,COH
8000eb0e:	e6 88 80 00 	brls	800deb0e <_data_lma+0xc9476>
8000eb12:	e2 24 80 00 	sub	r4,163840
8000eb16:	e2 48 80 00 	cp.w	r8,163840
8000eb1a:	e2 70 80 00 	mov	r0,229376
8000eb1e:	e6 50 00 00 	cp.w	r0,458752
8000eb22:	08 bc       	st.h	r4++,r12
8000eb24:	00 00       	add	r0,r0
8000eb26:	08 b8       	st.h	r4++,r8
8000eb28:	80 00       	ld.sh	r0,r0[0x0]
8000eb2a:	e2 78 80 00 	mov	r8,229376
8000eb2e:	e2 80 80 00 	breq	8005eb2e <_data_lma+0x49496>
8000eb32:	e2 98 80 00 	brls	8007eb32 <_data_lma+0x6949a>
8000eb36:	e2 c4 eb cd 	sub	r4,r1,-5171

8000eb38 <build_cmd>:



static void build_cmd(void)
{
8000eb38:	eb cd 40 80 	pushm	r7,lr
8000eb3c:	1a 97       	mov	r7,sp
8000eb3e:	20 1d       	sub	sp,4
	char rx_character;
	
	if (udi_cdc_is_rx_ready())
8000eb40:	f0 1f 00 27 	mcall	8000ebdc <build_cmd+0xa4>
8000eb44:	18 98       	mov	r8,r12
8000eb46:	58 08       	cp.w	r8,0
8000eb48:	c4 70       	breq	8000ebd6 <build_cmd+0x9e>
	{
		udi_cdc_read_buf(&rx_character, 1);
8000eb4a:	ee c8 00 01 	sub	r8,r7,1
8000eb4e:	30 1b       	mov	r11,1
8000eb50:	10 9c       	mov	r12,r8
8000eb52:	f0 1f 00 24 	mcall	8000ebe0 <build_cmd+0xa8>
		
		switch (rx_character)
8000eb56:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000eb5a:	58 88       	cp.w	r8,8
8000eb5c:	c1 80       	breq	8000eb8c <build_cmd+0x54>
8000eb5e:	58 d8       	cp.w	r8,13
8000eb60:	c2 61       	brne	8000ebac <build_cmd+0x74>
		{
			case '\r':
			// Echo back to CDC
			udi_cdc_putc(rx_character);
8000eb62:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000eb66:	10 9c       	mov	r12,r8
8000eb68:	f0 1f 00 1f 	mcall	8000ebe4 <build_cmd+0xac>
			udi_cdc_putc('\n');
8000eb6c:	30 ac       	mov	r12,10
8000eb6e:	f0 1f 00 1e 	mcall	8000ebe4 <build_cmd+0xac>
			// Add NULL to command string
			command_string[command_string_counter] = '\0';
8000eb72:	49 e8       	lddpc	r8,8000ebe8 <build_cmd+0xb0>
8000eb74:	11 88       	ld.ub	r8,r8[0x0]
8000eb76:	10 99       	mov	r9,r8
8000eb78:	49 da       	lddpc	r10,8000ebec <build_cmd+0xb4>
8000eb7a:	30 08       	mov	r8,0
8000eb7c:	f4 09 0b 08 	st.b	r10[r9],r8
			// Decode command
			decode_command();
8000eb80:	f0 1f 00 1c 	mcall	8000ebf0 <build_cmd+0xb8>
			// Reset command string counter
			command_string_counter = 0;
8000eb84:	49 99       	lddpc	r9,8000ebe8 <build_cmd+0xb0>
8000eb86:	30 08       	mov	r8,0
8000eb88:	b2 88       	st.b	r9[0x0],r8
			break;
8000eb8a:	c2 68       	rjmp	8000ebd6 <build_cmd+0x9e>
			
			case '\b':
			if (command_string_counter > 0)
8000eb8c:	49 78       	lddpc	r8,8000ebe8 <build_cmd+0xb0>
8000eb8e:	11 88       	ld.ub	r8,r8[0x0]
8000eb90:	58 08       	cp.w	r8,0
8000eb92:	c2 10       	breq	8000ebd4 <build_cmd+0x9c>
			{
				// Echo back to CDC
				udi_cdc_putc(rx_character);
8000eb94:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000eb98:	10 9c       	mov	r12,r8
8000eb9a:	f0 1f 00 13 	mcall	8000ebe4 <build_cmd+0xac>
				// Decrease command string counter
				command_string_counter--;
8000eb9e:	49 38       	lddpc	r8,8000ebe8 <build_cmd+0xb0>
8000eba0:	11 88       	ld.ub	r8,r8[0x0]
8000eba2:	20 18       	sub	r8,1
8000eba4:	5c 58       	castu.b	r8
8000eba6:	49 19       	lddpc	r9,8000ebe8 <build_cmd+0xb0>
8000eba8:	b2 88       	st.b	r9[0x0],r8
			}
			break;
8000ebaa:	c1 68       	rjmp	8000ebd6 <build_cmd+0x9e>
			
			default:
			// Echo back to CDC
			udi_cdc_putc(rx_character);
8000ebac:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000ebb0:	10 9c       	mov	r12,r8
8000ebb2:	f0 1f 00 0d 	mcall	8000ebe4 <build_cmd+0xac>
			// Append to command string
			command_string[command_string_counter] = rx_character;
8000ebb6:	48 d8       	lddpc	r8,8000ebe8 <build_cmd+0xb0>
8000ebb8:	11 88       	ld.ub	r8,r8[0x0]
8000ebba:	10 99       	mov	r9,r8
8000ebbc:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000ebc0:	48 ba       	lddpc	r10,8000ebec <build_cmd+0xb4>
8000ebc2:	f4 09 0b 08 	st.b	r10[r9],r8
			command_string_counter++;
8000ebc6:	48 98       	lddpc	r8,8000ebe8 <build_cmd+0xb0>
8000ebc8:	11 88       	ld.ub	r8,r8[0x0]
8000ebca:	2f f8       	sub	r8,-1
8000ebcc:	5c 58       	castu.b	r8
8000ebce:	48 79       	lddpc	r9,8000ebe8 <build_cmd+0xb0>
8000ebd0:	b2 88       	st.b	r9[0x0],r8
8000ebd2:	c0 28       	rjmp	8000ebd6 <build_cmd+0x9e>
				// Echo back to CDC
				udi_cdc_putc(rx_character);
				// Decrease command string counter
				command_string_counter--;
			}
			break;
8000ebd4:	d7 03       	nop
			command_string[command_string_counter] = rx_character;
			command_string_counter++;
			break;
		}
	}
}
8000ebd6:	2f fd       	sub	sp,-4
8000ebd8:	e3 cd 80 80 	ldm	sp++,r7,pc
8000ebdc:	80 00       	ld.sh	r0,r0[0x0]
8000ebde:	65 b8       	ld.w	r8,r2[0x6c]
8000ebe0:	80 00       	ld.sh	r0,r0[0x0]
8000ebe2:	67 60       	ld.w	r0,r3[0x58]
8000ebe4:	80 00       	ld.sh	r0,r0[0x0]
8000ebe6:	69 a4       	ld.w	r4,r4[0x68]
8000ebe8:	00 00       	add	r0,r0
8000ebea:	08 bd       	st.h	r4++,sp
8000ebec:	00 00       	add	r0,r0
8000ebee:	0e 54       	eor	r4,r7
8000ebf0:	80 00       	ld.sh	r0,r0[0x0]
8000ebf2:	ea 64 eb cd 	mov	r4,715725

8000ebf4 <main>:



int main (void)
{
8000ebf4:	eb cd 40 80 	pushm	r7,lr
8000ebf8:	1a 97       	mov	r7,sp
8000ebfa:	20 9d       	sub	sp,36
	// Declare variables
	uint32_t	pot_value;
	char		current_file[32];
	
	// Initialize CPU clock to 48 MHz and PBA clock to 12 MHz (conf_clock.h)
	sysclk_init();
8000ebfc:	f0 1f 00 88 	mcall	8000ee1c <main+0x228>
	
	// Initialize the EVK1100 and its pin config
	board_init();
8000ec00:	f0 1f 00 88 	mcall	8000ee20 <main+0x22c>
	
	// Initialize the LCD display
	lcd_spi_pin_init();
8000ec04:	f0 1f 00 88 	mcall	8000ee24 <main+0x230>
	lcd_spi_init(PBA_HZ);
8000ec08:	f0 1f 00 88 	mcall	8000ee28 <main+0x234>
8000ec0c:	18 98       	mov	r8,r12
8000ec0e:	10 9c       	mov	r12,r8
8000ec10:	f0 1f 00 87 	mcall	8000ee2c <main+0x238>
	
	// Write start string to the LCD display
	dip204_set_cursor_position(2,2);
8000ec14:	30 2b       	mov	r11,2
8000ec16:	30 2c       	mov	r12,2
8000ec18:	f0 1f 00 86 	mcall	8000ee30 <main+0x23c>
	dip204_write_string("Open PC terminal");
8000ec1c:	fe fc 02 18 	ld.w	r12,pc[536]
8000ec20:	f0 1f 00 86 	mcall	8000ee38 <main+0x244>
	dip204_set_cursor_position(2,3);
8000ec24:	30 3b       	mov	r11,3
8000ec26:	30 2c       	mov	r12,2
8000ec28:	f0 1f 00 82 	mcall	8000ee30 <main+0x23c>
	dip204_write_string("Press PB0 to start");
8000ec2c:	fe fc 02 10 	ld.w	r12,pc[528]
8000ec30:	f0 1f 00 82 	mcall	8000ee38 <main+0x244>
	
	// Configure IRQs (needed for the USB CDC)
	irq_initialize_vectors();
8000ec34:	f0 1f 00 83 	mcall	8000ee40 <main+0x24c>
	cpu_irq_enable();
8000ec38:	d5 03       	csrf	0x10
	
	// Disable all interrupts
	Disable_global_interrupt();
8000ec3a:	d3 03       	ssrf	0x10
	
	// Initialize interrupt module
	INTC_init_interrupts();
8000ec3c:	f0 1f 00 81 	mcall	8000ee40 <main+0x24c>
	// Interrupt priority for this program should be:
	// INT3 (highest):	TC event (ADC measurement)
	// INT0 (lowest):	Push button event
	
	// Initialize TC interrupt with INT3 priority
	erm_tc_interrupt_init(&erm_tc_handler, AVR32_INTC_INT3);
8000ec40:	30 3b       	mov	r11,3
8000ec42:	fe fc 02 02 	ld.w	r12,pc[514]
8000ec46:	f0 1f 00 81 	mcall	8000ee48 <main+0x254>
	
	// Initialize Push Button 0 (PB0) interrupt with INT0 priority
	push_button_0_interrupt_init(&push_button_handler, AVR32_INTC_INT0);
8000ec4a:	30 0b       	mov	r11,0
8000ec4c:	fe fc 02 00 	ld.w	r12,pc[512]
8000ec50:	f0 1f 00 80 	mcall	8000ee50 <main+0x25c>
	
	// Enable global interrupts
	Enable_global_interrupt();
8000ec54:	d5 03       	csrf	0x10
	
	// Initialize the SD/MMC
	erm_sd_mmc_pin_init();
8000ec56:	f0 1f 00 80 	mcall	8000ee54 <main+0x260>
	erm_sd_mmc_init(PBA_HZ);
8000ec5a:	f0 1f 00 74 	mcall	8000ee28 <main+0x234>
8000ec5e:	18 98       	mov	r8,r12
8000ec60:	10 9c       	mov	r12,r8
8000ec62:	f0 1f 00 7e 	mcall	8000ee58 <main+0x264>
	
	// Initialize and enable ADC for the Potentiometer
	adc_pot_init();
8000ec66:	f0 1f 00 7e 	mcall	8000ee5c <main+0x268>
	
	// Initialize the TC with interrupts every SAMPLING_TIME
	erm_tc_init((&AVR32_TC), SAMPLING_TIME, PBA_HZ);
8000ec6a:	f0 1f 00 70 	mcall	8000ee28 <main+0x234>
8000ec6e:	18 98       	mov	r8,r12
8000ec70:	10 9a       	mov	r10,r8
8000ec72:	31 4b       	mov	r11,20
8000ec74:	fe 7c 38 00 	mov	r12,-51200
8000ec78:	f0 1f 00 7a 	mcall	8000ee60 <main+0x26c>
	
	// Start USB CDC
	udc_start();
8000ec7c:	f0 1f 00 7a 	mcall	8000ee64 <main+0x270>
	
	// Start ADC
	adc_start(&AVR32_ADC);
8000ec80:	fe 7c 3c 00 	mov	r12,-50176
8000ec84:	f0 1f 00 79 	mcall	8000ee68 <main+0x274>
8000ec88:	c0 28       	rjmp	8000ec8c <main+0x98>
			// Build commands from characters received from CDC
			build_cmd();
		}
		
		// Otherwise do nothing
	}
8000ec8a:	d7 03       	nop
	
	
	// Main while loop
	while (1)
	{
		if (commence_program)
8000ec8c:	4f 88       	lddpc	r8,8000ee6c <main+0x278>
8000ec8e:	11 88       	ld.ub	r8,r8[0x0]
8000ec90:	58 08       	cp.w	r8,0
8000ec92:	cf c0       	breq	8000ec8a <main+0x96>
		{
			// Main switch case structure
			switch (loop_identifier)
8000ec94:	4f 78       	lddpc	r8,8000ee70 <main+0x27c>
8000ec96:	11 88       	ld.ub	r8,r8[0x0]
8000ec98:	58 58       	cp.w	r8,5
8000ec9a:	c2 30       	breq	8000ece0 <main+0xec>
8000ec9c:	e0 89 00 05 	brgt	8000eca6 <main+0xb2>
8000eca0:	58 28       	cp.w	r8,2
8000eca2:	c0 80       	breq	8000ecb2 <main+0xbe>
8000eca4:	cb 88       	rjmp	8000ee14 <main+0x220>
8000eca6:	58 68       	cp.w	r8,6
8000eca8:	c5 30       	breq	8000ed4e <main+0x15a>
8000ecaa:	58 78       	cp.w	r8,7
8000ecac:	e0 80 00 86 	breq	8000edb8 <main+0x1c4>
8000ecb0:	cb 28       	rjmp	8000ee14 <main+0x220>
			{
				// -------------------------------------------------------------------
				case INT_TC:
				// Read Potentiometer value
				pot_value = adc_get_value(&AVR32_ADC, ADC_POTENTIOMETER_CHANNEL);
8000ecb2:	30 1b       	mov	r11,1
8000ecb4:	fe 7c 3c 00 	mov	r12,-50176
8000ecb8:	f0 1f 00 6f 	mcall	8000ee74 <main+0x280>
8000ecbc:	18 98       	mov	r8,r12
8000ecbe:	ef 48 ff fc 	st.w	r7[-4],r8
				// Save value to file
				erm_fat_file_append(current_file, pot_value);
8000ecc2:	ee c8 00 24 	sub	r8,r7,36
8000ecc6:	ee fb ff fc 	ld.w	r11,r7[-4]
8000ecca:	10 9c       	mov	r12,r8
8000eccc:	f0 1f 00 6b 	mcall	8000ee78 <main+0x284>
				// Restart ADC
				adc_start(&AVR32_ADC);
8000ecd0:	fe 7c 3c 00 	mov	r12,-50176
8000ecd4:	f0 1f 00 65 	mcall	8000ee68 <main+0x274>
				// Reset loop_identifier
				loop_identifier = IDLE;
8000ecd8:	4e 69       	lddpc	r9,8000ee70 <main+0x27c>
8000ecda:	30 08       	mov	r8,0
8000ecdc:	b2 88       	st.b	r9[0x0],r8
				break;
8000ecde:	c9 b8       	rjmp	8000ee14 <main+0x220>
				// -------------------------------------------------------------------
				
				// -------------------------------------------------------------------
				case UPDATE_INITIAL:
				// Select and mount the FAT partition on the SD/MMC
				erm_fat_mount_sdmmc();
8000ece0:	f0 1f 00 67 	mcall	8000ee7c <main+0x288>
				// Start TC
				erm_tc_start(&AVR32_TC);
8000ece4:	fe 7c 38 00 	mov	r12,-51200
8000ece8:	f0 1f 00 66 	mcall	8000ee80 <main+0x28c>
				// Write initial string to CDC
				erm_cdc_println("\x0C---------------------------------------------------------------------");
8000ecec:	4e 6c       	lddpc	r12,8000ee84 <main+0x290>
8000ecee:	f0 1f 00 67 	mcall	8000ee88 <main+0x294>
				erm_cdc_println("\r\nLab 4 - Erlend R. Myklebust");
8000ecf2:	4e 7c       	lddpc	r12,8000ee8c <main+0x298>
8000ecf4:	f0 1f 00 65 	mcall	8000ee88 <main+0x294>
				erm_cdc_println("\r\n---------------------------------------------------------------------");
8000ecf8:	4e 6c       	lddpc	r12,8000ee90 <main+0x29c>
8000ecfa:	f0 1f 00 64 	mcall	8000ee88 <main+0x294>
				erm_cdc_println("\r\nCommand list:");
8000ecfe:	4e 6c       	lddpc	r12,8000ee94 <main+0x2a0>
8000ed00:	f0 1f 00 62 	mcall	8000ee88 <main+0x294>
				erm_cdc_println("start  = start logging POT values to sd/mmc");
8000ed04:	4e 5c       	lddpc	r12,8000ee98 <main+0x2a4>
8000ed06:	f0 1f 00 61 	mcall	8000ee88 <main+0x294>
				erm_cdc_println("stop   = stop logging POT values to sd/mmc");
8000ed0a:	4e 5c       	lddpc	r12,8000ee9c <main+0x2a8>
8000ed0c:	f0 1f 00 5f 	mcall	8000ee88 <main+0x294>
				erm_cdc_println("\r\nType command followed by enter:");
8000ed10:	4e 4c       	lddpc	r12,8000eea0 <main+0x2ac>
8000ed12:	f0 1f 00 5e 	mcall	8000ee88 <main+0x294>
				erm_cdc_print(">>");
8000ed16:	4e 4c       	lddpc	r12,8000eea4 <main+0x2b0>
8000ed18:	f0 1f 00 64 	mcall	8000eea8 <main+0x2b4>
				// Re-initialize LCD SPI
				lcd_spi_init(PBA_HZ);
8000ed1c:	f0 1f 00 43 	mcall	8000ee28 <main+0x234>
8000ed20:	18 98       	mov	r8,r12
8000ed22:	10 9c       	mov	r12,r8
8000ed24:	f0 1f 00 42 	mcall	8000ee2c <main+0x238>
				// Update LCD display
				dip204_clear_display();
8000ed28:	f0 1f 00 61 	mcall	8000eeac <main+0x2b8>
				dip204_set_cursor_position(2,2);
8000ed2c:	30 2b       	mov	r11,2
8000ed2e:	30 2c       	mov	r12,2
8000ed30:	f0 1f 00 40 	mcall	8000ee30 <main+0x23c>
				dip204_write_string("Enter command...");
8000ed34:	4d fc       	lddpc	r12,8000eeb0 <main+0x2bc>
8000ed36:	f0 1f 00 41 	mcall	8000ee38 <main+0x244>
				// Re-initialize SD/MMC SPI
				erm_sd_mmc_init(PBA_HZ);
8000ed3a:	f0 1f 00 3c 	mcall	8000ee28 <main+0x234>
8000ed3e:	18 98       	mov	r8,r12
8000ed40:	10 9c       	mov	r12,r8
8000ed42:	f0 1f 00 46 	mcall	8000ee58 <main+0x264>
				// Reset loop_identifier
				loop_identifier = IDLE;
8000ed46:	4c b9       	lddpc	r9,8000ee70 <main+0x27c>
8000ed48:	30 08       	mov	r8,0
8000ed4a:	b2 88       	st.b	r9[0x0],r8
				break;
8000ed4c:	c6 48       	rjmp	8000ee14 <main+0x220>
				// -------------------------------------------------------------------
				
				// -------------------------------------------------------------------
				case UPDATE_START:
				// Create the measurement file
				erm_fat_create_file(current_file);
8000ed4e:	ee c8 00 24 	sub	r8,r7,36
8000ed52:	10 9c       	mov	r12,r8
8000ed54:	f0 1f 00 58 	mcall	8000eeb4 <main+0x2c0>
				// Set mounted and running variable
				mounted = true;
8000ed58:	4d 89       	lddpc	r9,8000eeb8 <main+0x2c4>
8000ed5a:	30 18       	mov	r8,1
8000ed5c:	b2 88       	st.b	r9[0x0],r8
				running = true;
8000ed5e:	4d 89       	lddpc	r9,8000eebc <main+0x2c8>
8000ed60:	30 18       	mov	r8,1
8000ed62:	b2 88       	st.b	r9[0x0],r8
				// Write start string to CDC
				erm_cdc_println("\r\nStart command recognized!");
8000ed64:	4d 7c       	lddpc	r12,8000eec0 <main+0x2cc>
8000ed66:	f0 1f 00 49 	mcall	8000ee88 <main+0x294>
				erm_cdc_print("File: ");
8000ed6a:	4d 7c       	lddpc	r12,8000eec4 <main+0x2d0>
8000ed6c:	f0 1f 00 4f 	mcall	8000eea8 <main+0x2b4>
				erm_cdc_println(current_file);
8000ed70:	ee c8 00 24 	sub	r8,r7,36
8000ed74:	10 9c       	mov	r12,r8
8000ed76:	f0 1f 00 45 	mcall	8000ee88 <main+0x294>
				erm_cdc_println("Logging POT values to SD/MMC...");
8000ed7a:	4d 4c       	lddpc	r12,8000eec8 <main+0x2d4>
8000ed7c:	f0 1f 00 43 	mcall	8000ee88 <main+0x294>
				erm_cdc_print("\r\n>>");
8000ed80:	4d 3c       	lddpc	r12,8000eecc <main+0x2d8>
8000ed82:	f0 1f 00 4a 	mcall	8000eea8 <main+0x2b4>
				// Re-initialize LCD SPI
				lcd_spi_init(PBA_HZ);
8000ed86:	f0 1f 00 29 	mcall	8000ee28 <main+0x234>
8000ed8a:	18 98       	mov	r8,r12
8000ed8c:	10 9c       	mov	r12,r8
8000ed8e:	f0 1f 00 28 	mcall	8000ee2c <main+0x238>
				dip204_clear_display();
8000ed92:	f0 1f 00 47 	mcall	8000eeac <main+0x2b8>
				dip204_set_cursor_position(2,2);
8000ed96:	30 2b       	mov	r11,2
8000ed98:	30 2c       	mov	r12,2
8000ed9a:	f0 1f 00 26 	mcall	8000ee30 <main+0x23c>
				dip204_write_string("Logging active...");
8000ed9e:	4c dc       	lddpc	r12,8000eed0 <main+0x2dc>
8000eda0:	f0 1f 00 26 	mcall	8000ee38 <main+0x244>
				// Re-initialize SD/MMC SPI
				erm_sd_mmc_init(PBA_HZ);
8000eda4:	f0 1f 00 21 	mcall	8000ee28 <main+0x234>
8000eda8:	18 98       	mov	r8,r12
8000edaa:	10 9c       	mov	r12,r8
8000edac:	f0 1f 00 2b 	mcall	8000ee58 <main+0x264>
				// Reset loop_identifier
				loop_identifier = IDLE;
8000edb0:	4b 09       	lddpc	r9,8000ee70 <main+0x27c>
8000edb2:	30 08       	mov	r8,0
8000edb4:	b2 88       	st.b	r9[0x0],r8
				break;
8000edb6:	c2 f8       	rjmp	8000ee14 <main+0x220>
				// -------------------------------------------------------------------
				
				// -------------------------------------------------------------------
				case UPDATE_STOP:
				// Reset mounted and running variable
				mounted = false;
8000edb8:	4c 09       	lddpc	r9,8000eeb8 <main+0x2c4>
8000edba:	30 08       	mov	r8,0
8000edbc:	b2 88       	st.b	r9[0x0],r8
				running = false;
8000edbe:	4c 09       	lddpc	r9,8000eebc <main+0x2c8>
8000edc0:	30 08       	mov	r8,0
8000edc2:	b2 88       	st.b	r9[0x0],r8
				// Write stop string to CDC
				erm_cdc_println("\r\nStop command recognized!");
8000edc4:	4c 4c       	lddpc	r12,8000eed4 <main+0x2e0>
8000edc6:	f0 1f 00 31 	mcall	8000ee88 <main+0x294>
				erm_cdc_println("Logging has stopped!");
8000edca:	4c 4c       	lddpc	r12,8000eed8 <main+0x2e4>
8000edcc:	f0 1f 00 2f 	mcall	8000ee88 <main+0x294>
				erm_cdc_print("\r\n>>");
8000edd0:	4b fc       	lddpc	r12,8000eecc <main+0x2d8>
8000edd2:	f0 1f 00 36 	mcall	8000eea8 <main+0x2b4>
				// Re-initialize LCD SPI
				lcd_spi_init(PBA_HZ);
8000edd6:	f0 1f 00 15 	mcall	8000ee28 <main+0x234>
8000edda:	18 98       	mov	r8,r12
8000eddc:	10 9c       	mov	r12,r8
8000edde:	f0 1f 00 14 	mcall	8000ee2c <main+0x238>
				dip204_clear_display();
8000ede2:	f0 1f 00 33 	mcall	8000eeac <main+0x2b8>
				dip204_set_cursor_position(2,2);
8000ede6:	30 2b       	mov	r11,2
8000ede8:	30 2c       	mov	r12,2
8000edea:	f0 1f 00 12 	mcall	8000ee30 <main+0x23c>
				dip204_write_string("Logging stopped!");
8000edee:	4b cc       	lddpc	r12,8000eedc <main+0x2e8>
8000edf0:	f0 1f 00 12 	mcall	8000ee38 <main+0x244>
				dip204_set_cursor_position(2,3);
8000edf4:	30 3b       	mov	r11,3
8000edf6:	30 2c       	mov	r12,2
8000edf8:	f0 1f 00 0e 	mcall	8000ee30 <main+0x23c>
				dip204_write_string("Enter command...");
8000edfc:	4a dc       	lddpc	r12,8000eeb0 <main+0x2bc>
8000edfe:	f0 1f 00 0f 	mcall	8000ee38 <main+0x244>
				// Re-initialize SD/MMC SPI				
				erm_sd_mmc_init(PBA_HZ);
8000ee02:	f0 1f 00 0a 	mcall	8000ee28 <main+0x234>
8000ee06:	18 98       	mov	r8,r12
8000ee08:	10 9c       	mov	r12,r8
8000ee0a:	f0 1f 00 14 	mcall	8000ee58 <main+0x264>
				// Reset loop_identifier
				loop_identifier = IDLE;
8000ee0e:	49 99       	lddpc	r9,8000ee70 <main+0x27c>
8000ee10:	30 08       	mov	r8,0
8000ee12:	b2 88       	st.b	r9[0x0],r8
				break;
				// -------------------------------------------------------------------
			}
			
			// Build commands from characters received from CDC
			build_cmd();
8000ee14:	f0 1f 00 33 	mcall	8000eee0 <main+0x2ec>
		}
		
		// Otherwise do nothing
	}
8000ee18:	c3 ab       	rjmp	8000ec8c <main+0x98>
8000ee1a:	00 00       	add	r0,r0
8000ee1c:	80 00       	ld.sh	r0,r0[0x0]
8000ee1e:	84 08       	ld.sh	r8,r2[0x0]
8000ee20:	80 00       	ld.sh	r0,r0[0x0]
8000ee22:	d7 98       	*unknown*
8000ee24:	80 00       	ld.sh	r0,r0[0x0]
8000ee26:	e8 fc 80 00 	ld.w	r12,r4[-32768]
8000ee2a:	e5 54 80 00 	st.h	r2[-32768],r4
8000ee2e:	e9 18 80 00 	ld.uh	r8,r4[-32768]
8000ee32:	2b 8c       	sub	r12,-72
8000ee34:	80 00       	ld.sh	r0,r0[0x0]
8000ee36:	e2 e4 80 00 	ld.d	r4,r1[-32768]
8000ee3a:	2d 90       	sub	r0,-39
8000ee3c:	80 00       	ld.sh	r0,r0[0x0]
8000ee3e:	e2 f8 80 00 	ld.w	r8,r1[-32768]
8000ee42:	e0 28 80 00 	sub	r8,32768
8000ee46:	e9 e0 80 00 	sthh.w	r0[r0],r4:b,r0:b
8000ee4a:	e9 b4       	*unknown*
8000ee4c:	80 00       	ld.sh	r0,r0[0x0]
8000ee4e:	ea 20 80 00 	sub	r0,688128
8000ee52:	e9 80       	*unknown*
8000ee54:	80 00       	ld.sh	r0,r0[0x0]
8000ee56:	e8 20 80 00 	sub	r0,557056
8000ee5a:	e8 3c 80 00 	sub	r12,622592
8000ee5e:	e8 a8       	*unknown*
8000ee60:	80 00       	ld.sh	r0,r0[0x0]
8000ee62:	e5 6c 80 00 	st.b	r2[-32768],r12
8000ee66:	6c c0       	ld.w	r0,r6[0x30]
8000ee68:	80 00       	ld.sh	r0,r0[0x0]
8000ee6a:	8b 56       	st.w	r5[0x14],r6
8000ee6c:	00 00       	add	r0,r0
8000ee6e:	08 bb       	st.h	r4++,r11
8000ee70:	00 00       	add	r0,r0
8000ee72:	08 b8       	st.h	r4++,r8
8000ee74:	80 00       	ld.sh	r0,r0[0x0]
8000ee76:	8b cc       	st.w	r5[0x30],r12
8000ee78:	80 00       	ld.sh	r0,r0[0x0]
8000ee7a:	e7 68 80 00 	st.b	r3[-32768],r8
8000ee7e:	e6 cc 80 00 	sub	r12,r3,-32768
8000ee82:	e6 30 80 00 	sub	r0,491520
8000ee86:	e3 0c 80 00 	ld.sh	r12,r1[-32768]
8000ee8a:	e6 88 80 00 	brls	800dee8a <_data_lma+0xc97f2>
8000ee8e:	e3 54 80 00 	st.h	r1[-32768],r4
8000ee92:	e3 74 80 00 	stcond	r1[-32768],r4
8000ee96:	e3 bc       	*unknown*
8000ee98:	80 00       	ld.sh	r0,r0[0x0]
8000ee9a:	e3 cc 80 00 	ldm	r12++,pc
8000ee9e:	e3 f8 80 00 	ld.wls	r8,r1[0x0]
8000eea2:	e4 24 80 00 	sub	r4,294912
8000eea6:	e4 48 80 00 	cp.w	r8,294912
8000eeaa:	e6 50 80 00 	cp.w	r0,491520
8000eeae:	2c 14       	sub	r4,-63
8000eeb0:	80 00       	ld.sh	r0,r0[0x0]
8000eeb2:	e4 4c 80 00 	cp.w	r12,294912
8000eeb6:	e6 f0 00 00 	ld.w	r0,r3[0]
8000eeba:	08 b9       	st.h	r4++,r9
8000eebc:	00 00       	add	r0,r0
8000eebe:	08 ba       	st.h	r4++,r10
8000eec0:	80 00       	ld.sh	r0,r0[0x0]
8000eec2:	e4 60 80 00 	mov	r0,294912
8000eec6:	e4 7c 80 00 	mov	r12,360448
8000eeca:	e4 84 80 00 	brge	8009eeca <_data_lma+0x89832>
8000eece:	e2 70 80 00 	mov	r0,229376
8000eed2:	e4 a4       	*unknown*
8000eed4:	80 00       	ld.sh	r0,r0[0x0]
8000eed6:	e4 b8       	*unknown*
8000eed8:	80 00       	ld.sh	r0,r0[0x0]
8000eeda:	e4 d4 80 00 	satsub.w	r4,r2,-32768
8000eede:	e4 ec 80 00 	ld.d	r12,r2[-32768]
8000eee2:	eb 38 f7 ec 	ld.ub	r8,r5[-2068]

8000eee4 <__avr32_f32_div>:
8000eee4:	f7 ec 20 08 	eor	r8,r11,r12
8000eee8:	a1 7c       	lsl	r12,0x1
8000eeea:	a1 7b       	lsl	r11,0x1
8000eeec:	c7 a0       	breq	8000efe0 <__divsf_return_op1+0x16>
8000eeee:	18 7c       	tst	r12,r12
8000eef0:	f9 b9 00 00 	moveq	r9,0
8000eef4:	c0 90       	breq	8000ef06 <__avr32_f32_div+0x22>
8000eef6:	f8 09 16 18 	lsr	r9,r12,0x18
8000eefa:	c7 e0       	breq	8000eff6 <__divsf_return_op1+0x2c>
8000eefc:	e0 49 00 ff 	cp.w	r9,255
8000ef00:	c6 82       	brcc	8000efd0 <__divsf_return_op1+0x6>
8000ef02:	a7 7c       	lsl	r12,0x7
8000ef04:	bf bc       	sbr	r12,0x1f
8000ef06:	f6 0a 16 18 	lsr	r10,r11,0x18
8000ef0a:	c7 e0       	breq	8000f006 <__divsf_return_op1+0x3c>
8000ef0c:	e0 4a 00 ff 	cp.w	r10,255
8000ef10:	c6 62       	brcc	8000efdc <__divsf_return_op1+0x12>
8000ef12:	a7 7b       	lsl	r11,0x7
8000ef14:	bf bb       	sbr	r11,0x1f
8000ef16:	58 09       	cp.w	r9,0
8000ef18:	f5 bc 00 00 	subfeq	r12,0
8000ef1c:	5e 0d       	reteq	0
8000ef1e:	1a d5       	st.w	--sp,r5
8000ef20:	bb 27       	st.d	--sp,r6
8000ef22:	14 19       	sub	r9,r10
8000ef24:	28 19       	sub	r9,-127
8000ef26:	fc 1a 80 00 	movh	r10,0x8000
8000ef2a:	a3 8c       	lsr	r12,0x2
8000ef2c:	f6 05 16 02 	lsr	r5,r11,0x2
8000ef30:	f4 0b 16 01 	lsr	r11,r10,0x1
8000ef34:	ed d5 c3 62 	bfextu	r6,r5,0x1b,0x2
8000ef38:	5c d6       	com	r6
8000ef3a:	f7 d6 d3 82 	bfins	r11,r6,0x1c,0x2
8000ef3e:	f6 05 06 46 	mulu.d	r6,r11,r5
8000ef42:	f4 07 01 27 	sub	r7,r10,r7<<0x2
8000ef46:	f6 07 06 46 	mulu.d	r6,r11,r7
8000ef4a:	ee 0b 15 02 	lsl	r11,r7,0x2
8000ef4e:	f6 05 06 46 	mulu.d	r6,r11,r5
8000ef52:	f4 07 01 27 	sub	r7,r10,r7<<0x2
8000ef56:	f6 07 06 46 	mulu.d	r6,r11,r7
8000ef5a:	ee 0b 15 02 	lsl	r11,r7,0x2
8000ef5e:	f6 05 06 46 	mulu.d	r6,r11,r5
8000ef62:	f4 07 01 27 	sub	r7,r10,r7<<0x2
8000ef66:	f6 07 06 46 	mulu.d	r6,r11,r7
8000ef6a:	ee 0b 15 02 	lsl	r11,r7,0x2
8000ef6e:	f6 05 06 46 	mulu.d	r6,r11,r5
8000ef72:	f4 07 01 27 	sub	r7,r10,r7<<0x2
8000ef76:	f6 07 06 46 	mulu.d	r6,r11,r7
8000ef7a:	ee 0b 15 02 	lsl	r11,r7,0x2
8000ef7e:	f6 0c 06 46 	mulu.d	r6,r11,r12
8000ef82:	a5 8c       	lsr	r12,0x4
8000ef84:	ed b7 00 1c 	bld	r7,0x1c
8000ef88:	c0 40       	breq	8000ef90 <__avr32_f32_div+0xac>
8000ef8a:	a1 77       	lsl	r7,0x1
8000ef8c:	20 19       	sub	r9,1
8000ef8e:	a1 7c       	lsl	r12,0x1
8000ef90:	58 09       	cp.w	r9,0
8000ef92:	e0 8a 00 42 	brle	8000f016 <__avr32_f32_div_res_subnormal>
8000ef96:	e0 17 ff e0 	andl	r7,0xffe0
8000ef9a:	e8 17 00 10 	orl	r7,0x10
8000ef9e:	ea 07 06 4a 	mulu.d	r10,r5,r7
8000efa2:	eb d7 c0 a1 	bfextu	r5,r7,0x5,0x1
8000efa6:	58 0a       	cp.w	r10,0

8000efa8 <__avr32_f32_div_round_subnormal>:
8000efa8:	f8 0b 13 00 	cpc	r11,r12
8000efac:	5f 3b       	srlo	r11
8000efae:	ea 0b 17 00 	moveq	r11,r5
8000efb2:	ee 0c 16 05 	lsr	r12,r7,0x5
8000efb6:	f9 d9 d2 e8 	bfins	r12,r9,0x17,0x8
8000efba:	bb 07       	ld.d	r6,sp++
8000efbc:	1b 05       	ld.w	r5,sp++
8000efbe:	ed b8 00 1f 	bld	r8,0x1f
8000efc2:	ef bc 00 1f 	bst	r12,0x1f
8000efc6:	16 0c       	add	r12,r11
8000efc8:	5e fc       	retal	r12

8000efca <__divsf_return_op1>:
8000efca:	a1 78       	lsl	r8,0x1
8000efcc:	5d 0c       	ror	r12
8000efce:	5e fc       	retal	r12
8000efd0:	5e 1e       	retne	-1
8000efd2:	fc 19 ff 00 	movh	r9,0xff00
8000efd6:	12 3b       	cp.w	r11,r9
8000efd8:	cf 93       	brcs	8000efca <__divsf_return_op1>
8000efda:	5e fe       	retal	-1
8000efdc:	5e 0d       	reteq	0
8000efde:	5e fe       	retal	-1
8000efe0:	18 7c       	tst	r12,r12
8000efe2:	5e 0e       	reteq	-1
8000efe4:	f8 09 16 18 	lsr	r9,r12,0x18
8000efe8:	c0 70       	breq	8000eff6 <__divsf_return_op1+0x2c>
8000efea:	e0 49 00 ff 	cp.w	r9,255
8000efee:	cf 12       	brcc	8000efd0 <__divsf_return_op1+0x6>
8000eff0:	fc 1c ff 00 	movh	r12,0xff00
8000eff4:	ce bb       	rjmp	8000efca <__divsf_return_op1>
8000eff6:	a7 7c       	lsl	r12,0x7
8000eff8:	f8 09 12 00 	clz	r9,r12
8000effc:	f8 09 09 4c 	lsl	r12,r12,r9
8000f000:	f2 09 11 01 	rsub	r9,r9,1
8000f004:	c8 1b       	rjmp	8000ef06 <__avr32_f32_div+0x22>
8000f006:	a7 7b       	lsl	r11,0x7
8000f008:	f6 0a 12 00 	clz	r10,r11
8000f00c:	f6 0a 09 4b 	lsl	r11,r11,r10
8000f010:	f4 0a 11 01 	rsub	r10,r10,1
8000f014:	c8 5b       	rjmp	8000ef1e <__avr32_f32_div+0x3a>

8000f016 <__avr32_f32_div_res_subnormal>:
8000f016:	5c 39       	neg	r9
8000f018:	2f f9       	sub	r9,-1
8000f01a:	f1 b9 04 a0 	satu	r9,0x5
8000f01e:	f2 0a 11 20 	rsub	r10,r9,32
8000f022:	ee 09 0a 47 	lsr	r7,r7,r9
8000f026:	f8 0a 09 46 	lsl	r6,r12,r10
8000f02a:	f8 09 0a 4c 	lsr	r12,r12,r9
8000f02e:	e0 17 ff e0 	andl	r7,0xffe0
8000f032:	e8 17 00 10 	orl	r7,0x10
8000f036:	ea 07 06 4a 	mulu.d	r10,r5,r7
8000f03a:	30 09       	mov	r9,0
8000f03c:	eb d7 c0 a1 	bfextu	r5,r7,0x5,0x1
8000f040:	0c 3a       	cp.w	r10,r6
8000f042:	cb 3b       	rjmp	8000efa8 <__avr32_f32_div_round_subnormal>

8000f044 <__avr32_f32_mul>:
8000f044:	18 98       	mov	r8,r12
8000f046:	16 5c       	eor	r12,r11
8000f048:	e6 1c 80 00 	andh	r12,0x8000,COH
8000f04c:	bf d8       	cbr	r8,0x1f
8000f04e:	c6 60       	breq	8000f11a <__avr32_f32_mul_op1_zero>
8000f050:	bf db       	cbr	r11,0x1f
8000f052:	f0 0b 0c 4a 	max	r10,r8,r11
8000f056:	f0 0b 0d 49 	min	r9,r8,r11
8000f05a:	f4 08 15 08 	lsl	r8,r10,0x8
8000f05e:	bf b8       	sbr	r8,0x1f
8000f060:	b7 9a       	lsr	r10,0x17
8000f062:	e0 4a 00 ff 	cp.w	r10,255
8000f066:	c3 d0       	breq	8000f0e0 <__avr32_f32_mul_op1_nan_or_inf>
8000f068:	f2 0b 15 08 	lsl	r11,r9,0x8
8000f06c:	bf bb       	sbr	r11,0x1f
8000f06e:	b7 99       	lsr	r9,0x17
8000f070:	c2 40       	breq	8000f0b8 <__avr32_f32_mul_op2_subnormal>
8000f072:	14 09       	add	r9,r10
8000f074:	f0 0b 06 4a 	mulu.d	r10,r8,r11
8000f078:	f6 08 15 01 	lsl	r8,r11,0x1
8000f07c:	f0 0b 17 20 	movhs	r11,r8
8000f080:	f7 b9 02 01 	subhs	r9,1
8000f084:	a9 8a       	lsr	r10,0x8
8000f086:	f5 db d3 08 	bfins	r10,r11,0x18,0x8
8000f08a:	27 e9       	sub	r9,126
8000f08c:	e0 8a 00 39 	brle	8000f0fe <__avr32_f32_mul_res_subnormal>
8000f090:	e0 49 00 ff 	cp.w	r9,255
8000f094:	c0 f4       	brge	8000f0b2 <__avr32_f32_mul_round+0x14>
8000f096:	f9 eb 12 8c 	or	r12,r12,r11>>0x8
8000f09a:	f9 d9 d2 e8 	bfins	r12,r9,0x17,0x8

8000f09e <__avr32_f32_mul_round>:
8000f09e:	fc 18 80 00 	movh	r8,0x8000
8000f0a2:	ed bc 00 00 	bld	r12,0x0
8000f0a6:	f7 b8 01 ff 	subne	r8,-1
8000f0aa:	10 3a       	cp.w	r10,r8
8000f0ac:	f7 bc 02 ff 	subhs	r12,-1
8000f0b0:	5e fc       	retal	r12
8000f0b2:	ea 1c 7f 80 	orh	r12,0x7f80
8000f0b6:	5e fc       	retal	r12

8000f0b8 <__avr32_f32_mul_op2_subnormal>:
8000f0b8:	bf db       	cbr	r11,0x1f
8000f0ba:	f6 09 12 00 	clz	r9,r11
8000f0be:	5e 3d       	retlo	0
8000f0c0:	20 89       	sub	r9,8
8000f0c2:	f6 09 09 4b 	lsl	r11,r11,r9
8000f0c6:	f2 09 11 01 	rsub	r9,r9,1
8000f0ca:	14 7a       	tst	r10,r10
8000f0cc:	cd 31       	brne	8000f072 <__avr32_f32_mul+0x2e>
8000f0ce:	bf d8       	cbr	r8,0x1f
8000f0d0:	f6 0a 12 00 	clz	r10,r11
8000f0d4:	5e 3d       	retlo	0
8000f0d6:	f0 0a 09 48 	lsl	r8,r8,r10
8000f0da:	f4 0a 11 01 	rsub	r10,r10,1
8000f0de:	cc ab       	rjmp	8000f072 <__avr32_f32_mul+0x2e>

8000f0e0 <__avr32_f32_mul_op1_nan_or_inf>:
8000f0e0:	f0 0b 15 01 	lsl	r11,r8,0x1
8000f0e4:	5e 1e       	retne	-1
8000f0e6:	12 79       	tst	r9,r9
8000f0e8:	5e 0e       	reteq	-1
8000f0ea:	f9 da d2 e8 	bfins	r12,r10,0x17,0x8
8000f0ee:	f2 0b 16 17 	lsr	r11,r9,0x17
8000f0f2:	e0 4b 00 ff 	cp.w	r11,255
8000f0f6:	5e 1c       	retne	r12
8000f0f8:	a9 79       	lsl	r9,0x9
8000f0fa:	5e 0c       	reteq	r12
8000f0fc:	5e fe       	retal	-1

8000f0fe <__avr32_f32_mul_res_subnormal>:
8000f0fe:	f2 09 11 09 	rsub	r9,r9,9
8000f102:	f2 08 11 20 	rsub	r8,r9,32
8000f106:	5e 3d       	retlo	0
8000f108:	f6 09 0a 49 	lsr	r9,r11,r9
8000f10c:	12 4c       	or	r12,r9
8000f10e:	f6 08 09 4b 	lsl	r11,r11,r8
8000f112:	e4 1a 00 ff 	andh	r10,0xff
8000f116:	16 4a       	or	r10,r11
8000f118:	cc 3b       	rjmp	8000f09e <__avr32_f32_mul_round>

8000f11a <__avr32_f32_mul_op1_zero>:
8000f11a:	f5 db c2 e8 	bfextu	r10,r11,0x17,0x8
8000f11e:	e0 4a 00 ff 	cp.w	r10,255
8000f122:	5e 1c       	retne	r12
8000f124:	5e 0e       	reteq	-1

8000f126 <__avr32_u32_to_f32>:
8000f126:	58 0c       	cp.w	r12,0
8000f128:	5e 0c       	reteq	r12
8000f12a:	e0 6a 00 9e 	mov	r10,158
8000f12e:	f8 09 12 00 	clz	r9,r12
8000f132:	12 1a       	sub	r10,r9
8000f134:	f8 09 09 4c 	lsl	r12,r12,r9
8000f138:	58 0a       	cp.w	r10,0
8000f13a:	e0 8a 00 14 	brle	8000f162 <__avr32_u32_to_f32_subnormal>
8000f13e:	37 f9       	mov	r9,127
8000f140:	ed bc 00 08 	bld	r12,0x8
8000f144:	f7 b9 00 ff 	subeq	r9,-1
8000f148:	12 0c       	add	r12,r9
8000f14a:	f7 ba 03 fe 	sublo	r10,-2
8000f14e:	ed bc 00 1f 	bld	r12,0x1f
8000f152:	f7 ba 01 01 	subne	r10,1
8000f156:	f8 0c 16 07 	lsr	r12,r12,0x7
8000f15a:	f9 da d3 08 	bfins	r12,r10,0x18,0x8
8000f15e:	a1 9c       	lsr	r12,0x1
8000f160:	5e fc       	retal	r12

8000f162 <__avr32_u32_to_f32_subnormal>:
8000f162:	30 08       	mov	r8,0
8000f164:	f4 0a 11 01 	rsub	r10,r10,1
8000f168:	59 9a       	cp.w	r10,25
8000f16a:	f9 bc 02 00 	movhs	r12,0
8000f16e:	c1 32       	brcc	8000f194 <__avr32_u32_to_f32_subnormal+0x32>
8000f170:	f4 09 11 20 	rsub	r9,r10,32
8000f174:	f8 09 09 49 	lsl	r9,r12,r9
8000f178:	5f 19       	srne	r9
8000f17a:	f8 0a 0a 4c 	lsr	r12,r12,r10
8000f17e:	12 4c       	or	r12,r9
8000f180:	37 f9       	mov	r9,127
8000f182:	ed bc 00 08 	bld	r12,0x8
8000f186:	f7 b9 00 ff 	subeq	r9,-1
8000f18a:	12 0c       	add	r12,r9
8000f18c:	f8 0c 16 07 	lsr	r12,r12,0x7
8000f190:	a1 78       	lsl	r8,0x1
8000f192:	5d 0c       	ror	r12
8000f194:	5e fc       	retal	r12

8000f196 <__avr32_f32_to_u32>:
8000f196:	58 0c       	cp.w	r12,0
8000f198:	5e 6d       	retmi	0
8000f19a:	f7 dc c2 e8 	bfextu	r11,r12,0x17,0x8
8000f19e:	27 fb       	sub	r11,127
8000f1a0:	5e 3d       	retlo	0
8000f1a2:	f6 0b 11 1f 	rsub	r11,r11,31
8000f1a6:	a9 6c       	lsl	r12,0x8
8000f1a8:	bf bc       	sbr	r12,0x1f
8000f1aa:	f8 0b 0a 4c 	lsr	r12,r12,r11
8000f1ae:	5e fc       	retal	r12

8000f1b0 <__avr32_udiv64>:
8000f1b0:	d4 31       	pushm	r0-r7,lr
8000f1b2:	1a 97       	mov	r7,sp
8000f1b4:	20 3d       	sub	sp,12
8000f1b6:	10 9c       	mov	r12,r8
8000f1b8:	12 9e       	mov	lr,r9
8000f1ba:	14 93       	mov	r3,r10
8000f1bc:	58 09       	cp.w	r9,0
8000f1be:	e0 81 00 bd 	brne	8000f338 <__avr32_udiv64+0x188>
8000f1c2:	16 38       	cp.w	r8,r11
8000f1c4:	e0 88 00 40 	brls	8000f244 <__avr32_udiv64+0x94>
8000f1c8:	f0 08 12 00 	clz	r8,r8
8000f1cc:	c0 d0       	breq	8000f1e6 <__avr32_udiv64+0x36>
8000f1ce:	f6 08 09 4b 	lsl	r11,r11,r8
8000f1d2:	f0 09 11 20 	rsub	r9,r8,32
8000f1d6:	f8 08 09 4c 	lsl	r12,r12,r8
8000f1da:	f4 09 0a 49 	lsr	r9,r10,r9
8000f1de:	f4 08 09 43 	lsl	r3,r10,r8
8000f1e2:	f3 eb 10 0b 	or	r11,r9,r11
8000f1e6:	f8 0e 16 10 	lsr	lr,r12,0x10
8000f1ea:	f5 dc c0 10 	bfextu	r10,r12,0x0,0x10
8000f1ee:	f6 0e 0d 00 	divu	r0,r11,lr
8000f1f2:	e6 0b 16 10 	lsr	r11,r3,0x10
8000f1f6:	00 99       	mov	r9,r0
8000f1f8:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
8000f1fc:	e0 0a 02 48 	mul	r8,r0,r10
8000f200:	10 3b       	cp.w	r11,r8
8000f202:	c0 a2       	brcc	8000f216 <__avr32_udiv64+0x66>
8000f204:	20 19       	sub	r9,1
8000f206:	18 0b       	add	r11,r12
8000f208:	18 3b       	cp.w	r11,r12
8000f20a:	c0 63       	brcs	8000f216 <__avr32_udiv64+0x66>
8000f20c:	10 3b       	cp.w	r11,r8
8000f20e:	f7 b9 03 01 	sublo	r9,1
8000f212:	f7 dc e3 0b 	addcs	r11,r11,r12
8000f216:	f6 08 01 01 	sub	r1,r11,r8
8000f21a:	e7 d3 c0 10 	bfextu	r3,r3,0x0,0x10
8000f21e:	e2 0e 0d 00 	divu	r0,r1,lr
8000f222:	e7 e1 11 03 	or	r3,r3,r1<<0x10
8000f226:	00 98       	mov	r8,r0
8000f228:	e0 0a 02 4a 	mul	r10,r0,r10
8000f22c:	14 33       	cp.w	r3,r10
8000f22e:	c0 82       	brcc	8000f23e <__avr32_udiv64+0x8e>
8000f230:	20 18       	sub	r8,1
8000f232:	18 03       	add	r3,r12
8000f234:	18 33       	cp.w	r3,r12
8000f236:	c0 43       	brcs	8000f23e <__avr32_udiv64+0x8e>
8000f238:	14 33       	cp.w	r3,r10
8000f23a:	f7 b8 03 01 	sublo	r8,1
8000f23e:	f1 e9 11 08 	or	r8,r8,r9<<0x10
8000f242:	cd f8       	rjmp	8000f400 <__avr32_udiv64+0x250>
8000f244:	58 08       	cp.w	r8,0
8000f246:	c0 51       	brne	8000f250 <__avr32_udiv64+0xa0>
8000f248:	30 19       	mov	r9,1
8000f24a:	f2 08 0d 08 	divu	r8,r9,r8
8000f24e:	10 9c       	mov	r12,r8
8000f250:	f8 06 12 00 	clz	r6,r12
8000f254:	c0 41       	brne	8000f25c <__avr32_udiv64+0xac>
8000f256:	18 1b       	sub	r11,r12
8000f258:	30 19       	mov	r9,1
8000f25a:	c4 08       	rjmp	8000f2da <__avr32_udiv64+0x12a>
8000f25c:	ec 01 11 20 	rsub	r1,r6,32
8000f260:	f4 01 0a 49 	lsr	r9,r10,r1
8000f264:	f8 06 09 4c 	lsl	r12,r12,r6
8000f268:	f6 06 09 48 	lsl	r8,r11,r6
8000f26c:	f6 01 0a 41 	lsr	r1,r11,r1
8000f270:	f3 e8 10 08 	or	r8,r9,r8
8000f274:	f8 03 16 10 	lsr	r3,r12,0x10
8000f278:	eb dc c0 10 	bfextu	r5,r12,0x0,0x10
8000f27c:	e2 03 0d 00 	divu	r0,r1,r3
8000f280:	f0 0b 16 10 	lsr	r11,r8,0x10
8000f284:	00 9e       	mov	lr,r0
8000f286:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
8000f28a:	e0 05 02 49 	mul	r9,r0,r5
8000f28e:	12 3b       	cp.w	r11,r9
8000f290:	c0 a2       	brcc	8000f2a4 <__avr32_udiv64+0xf4>
8000f292:	20 1e       	sub	lr,1
8000f294:	18 0b       	add	r11,r12
8000f296:	18 3b       	cp.w	r11,r12
8000f298:	c0 63       	brcs	8000f2a4 <__avr32_udiv64+0xf4>
8000f29a:	12 3b       	cp.w	r11,r9
8000f29c:	f7 be 03 01 	sublo	lr,1
8000f2a0:	f7 dc e3 0b 	addcs	r11,r11,r12
8000f2a4:	12 1b       	sub	r11,r9
8000f2a6:	f1 d8 c0 10 	bfextu	r8,r8,0x0,0x10
8000f2aa:	f6 03 0d 02 	divu	r2,r11,r3
8000f2ae:	f1 e3 11 08 	or	r8,r8,r3<<0x10
8000f2b2:	04 99       	mov	r9,r2
8000f2b4:	e4 05 02 4b 	mul	r11,r2,r5
8000f2b8:	16 38       	cp.w	r8,r11
8000f2ba:	c0 a2       	brcc	8000f2ce <__avr32_udiv64+0x11e>
8000f2bc:	20 19       	sub	r9,1
8000f2be:	18 08       	add	r8,r12
8000f2c0:	18 38       	cp.w	r8,r12
8000f2c2:	c0 63       	brcs	8000f2ce <__avr32_udiv64+0x11e>
8000f2c4:	16 38       	cp.w	r8,r11
8000f2c6:	f7 b9 03 01 	sublo	r9,1
8000f2ca:	f1 dc e3 08 	addcs	r8,r8,r12
8000f2ce:	f4 06 09 43 	lsl	r3,r10,r6
8000f2d2:	f0 0b 01 0b 	sub	r11,r8,r11
8000f2d6:	f3 ee 11 09 	or	r9,r9,lr<<0x10
8000f2da:	f8 06 16 10 	lsr	r6,r12,0x10
8000f2de:	fd dc c0 10 	bfextu	lr,r12,0x0,0x10
8000f2e2:	f6 06 0d 00 	divu	r0,r11,r6
8000f2e6:	e6 0b 16 10 	lsr	r11,r3,0x10
8000f2ea:	00 9a       	mov	r10,r0
8000f2ec:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
8000f2f0:	e0 0e 02 48 	mul	r8,r0,lr
8000f2f4:	10 3b       	cp.w	r11,r8
8000f2f6:	c0 a2       	brcc	8000f30a <__avr32_udiv64+0x15a>
8000f2f8:	20 1a       	sub	r10,1
8000f2fa:	18 0b       	add	r11,r12
8000f2fc:	18 3b       	cp.w	r11,r12
8000f2fe:	c0 63       	brcs	8000f30a <__avr32_udiv64+0x15a>
8000f300:	10 3b       	cp.w	r11,r8
8000f302:	f7 ba 03 01 	sublo	r10,1
8000f306:	f7 dc e3 0b 	addcs	r11,r11,r12
8000f30a:	f6 08 01 01 	sub	r1,r11,r8
8000f30e:	e7 d3 c0 10 	bfextu	r3,r3,0x0,0x10
8000f312:	e2 06 0d 00 	divu	r0,r1,r6
8000f316:	e7 e1 11 03 	or	r3,r3,r1<<0x10
8000f31a:	00 98       	mov	r8,r0
8000f31c:	e0 0e 02 4b 	mul	r11,r0,lr
8000f320:	16 33       	cp.w	r3,r11
8000f322:	c0 82       	brcc	8000f332 <__avr32_udiv64+0x182>
8000f324:	20 18       	sub	r8,1
8000f326:	18 03       	add	r3,r12
8000f328:	18 33       	cp.w	r3,r12
8000f32a:	c0 43       	brcs	8000f332 <__avr32_udiv64+0x182>
8000f32c:	16 33       	cp.w	r3,r11
8000f32e:	f7 b8 03 01 	sublo	r8,1
8000f332:	f1 ea 11 08 	or	r8,r8,r10<<0x10
8000f336:	c6 98       	rjmp	8000f408 <__avr32_udiv64+0x258>
8000f338:	16 39       	cp.w	r9,r11
8000f33a:	e0 8b 00 65 	brhi	8000f404 <__avr32_udiv64+0x254>
8000f33e:	f2 09 12 00 	clz	r9,r9
8000f342:	c0 b1       	brne	8000f358 <__avr32_udiv64+0x1a8>
8000f344:	10 3a       	cp.w	r10,r8
8000f346:	5f 2a       	srhs	r10
8000f348:	1c 3b       	cp.w	r11,lr
8000f34a:	5f b8       	srhi	r8
8000f34c:	10 4a       	or	r10,r8
8000f34e:	f2 0a 18 00 	cp.b	r10,r9
8000f352:	c5 90       	breq	8000f404 <__avr32_udiv64+0x254>
8000f354:	30 18       	mov	r8,1
8000f356:	c5 98       	rjmp	8000f408 <__avr32_udiv64+0x258>
8000f358:	f0 09 09 46 	lsl	r6,r8,r9
8000f35c:	f2 03 11 20 	rsub	r3,r9,32
8000f360:	fc 09 09 4e 	lsl	lr,lr,r9
8000f364:	f0 03 0a 48 	lsr	r8,r8,r3
8000f368:	f6 09 09 4c 	lsl	r12,r11,r9
8000f36c:	f4 03 0a 42 	lsr	r2,r10,r3
8000f370:	ef 46 ff f4 	st.w	r7[-12],r6
8000f374:	f6 03 0a 43 	lsr	r3,r11,r3
8000f378:	18 42       	or	r2,r12
8000f37a:	f1 ee 10 0c 	or	r12,r8,lr
8000f37e:	f8 01 16 10 	lsr	r1,r12,0x10
8000f382:	ed dc c0 10 	bfextu	r6,r12,0x0,0x10
8000f386:	e6 01 0d 04 	divu	r4,r3,r1
8000f38a:	e4 03 16 10 	lsr	r3,r2,0x10
8000f38e:	08 9e       	mov	lr,r4
8000f390:	e7 e5 11 03 	or	r3,r3,r5<<0x10
8000f394:	e8 06 02 48 	mul	r8,r4,r6
8000f398:	10 33       	cp.w	r3,r8
8000f39a:	c0 a2       	brcc	8000f3ae <__avr32_udiv64+0x1fe>
8000f39c:	20 1e       	sub	lr,1
8000f39e:	18 03       	add	r3,r12
8000f3a0:	18 33       	cp.w	r3,r12
8000f3a2:	c0 63       	brcs	8000f3ae <__avr32_udiv64+0x1fe>
8000f3a4:	10 33       	cp.w	r3,r8
8000f3a6:	f7 be 03 01 	sublo	lr,1
8000f3aa:	e7 dc e3 03 	addcs	r3,r3,r12
8000f3ae:	10 13       	sub	r3,r8
8000f3b0:	f7 d2 c0 10 	bfextu	r11,r2,0x0,0x10
8000f3b4:	e6 01 0d 00 	divu	r0,r3,r1
8000f3b8:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
8000f3bc:	00 98       	mov	r8,r0
8000f3be:	e0 06 02 46 	mul	r6,r0,r6
8000f3c2:	0c 3b       	cp.w	r11,r6
8000f3c4:	c0 a2       	brcc	8000f3d8 <__avr32_udiv64+0x228>
8000f3c6:	20 18       	sub	r8,1
8000f3c8:	18 0b       	add	r11,r12
8000f3ca:	18 3b       	cp.w	r11,r12
8000f3cc:	c0 63       	brcs	8000f3d8 <__avr32_udiv64+0x228>
8000f3ce:	0c 3b       	cp.w	r11,r6
8000f3d0:	f7 dc e3 0b 	addcs	r11,r11,r12
8000f3d4:	f7 b8 03 01 	sublo	r8,1
8000f3d8:	f1 ee 11 08 	or	r8,r8,lr<<0x10
8000f3dc:	ee f4 ff f4 	ld.w	r4,r7[-12]
8000f3e0:	0c 1b       	sub	r11,r6
8000f3e2:	f0 04 06 42 	mulu.d	r2,r8,r4
8000f3e6:	06 95       	mov	r5,r3
8000f3e8:	16 35       	cp.w	r5,r11
8000f3ea:	e0 8b 00 0a 	brhi	8000f3fe <__avr32_udiv64+0x24e>
8000f3ee:	5f 0b       	sreq	r11
8000f3f0:	f4 09 09 49 	lsl	r9,r10,r9
8000f3f4:	12 32       	cp.w	r2,r9
8000f3f6:	5f b9       	srhi	r9
8000f3f8:	f7 e9 00 09 	and	r9,r11,r9
8000f3fc:	c0 60       	breq	8000f408 <__avr32_udiv64+0x258>
8000f3fe:	20 18       	sub	r8,1
8000f400:	30 09       	mov	r9,0
8000f402:	c0 38       	rjmp	8000f408 <__avr32_udiv64+0x258>
8000f404:	30 09       	mov	r9,0
8000f406:	12 98       	mov	r8,r9
8000f408:	10 9a       	mov	r10,r8
8000f40a:	12 93       	mov	r3,r9
8000f40c:	10 92       	mov	r2,r8
8000f40e:	12 9b       	mov	r11,r9
8000f410:	2f dd       	sub	sp,-12
8000f412:	d8 32       	popm	r0-r7,pc

8000f414 <memcmp>:
8000f414:	d4 01       	pushm	lr
8000f416:	30 08       	mov	r8,0
8000f418:	c0 d8       	rjmp	8000f432 <memcmp+0x1e>
8000f41a:	f8 08 07 0e 	ld.ub	lr,r12[r8]
8000f41e:	f6 08 07 09 	ld.ub	r9,r11[r8]
8000f422:	20 1a       	sub	r10,1
8000f424:	2f f8       	sub	r8,-1
8000f426:	f2 0e 18 00 	cp.b	lr,r9
8000f42a:	c0 40       	breq	8000f432 <memcmp+0x1e>
8000f42c:	fc 09 01 0c 	sub	r12,lr,r9
8000f430:	d8 02       	popm	pc
8000f432:	58 0a       	cp.w	r10,0
8000f434:	cf 31       	brne	8000f41a <memcmp+0x6>
8000f436:	14 9c       	mov	r12,r10
8000f438:	d8 02       	popm	pc

8000f43a <memcpy>:
8000f43a:	58 8a       	cp.w	r10,8
8000f43c:	c2 f5       	brlt	8000f49a <memcpy+0x60>
8000f43e:	f9 eb 10 09 	or	r9,r12,r11
8000f442:	e2 19 00 03 	andl	r9,0x3,COH
8000f446:	e0 81 00 97 	brne	8000f574 <memcpy+0x13a>
8000f44a:	e0 4a 00 20 	cp.w	r10,32
8000f44e:	c3 b4       	brge	8000f4c4 <memcpy+0x8a>
8000f450:	f4 08 14 02 	asr	r8,r10,0x2
8000f454:	f0 09 11 08 	rsub	r9,r8,8
8000f458:	fe 09 00 2f 	add	pc,pc,r9<<0x2
8000f45c:	76 69       	ld.w	r9,r11[0x18]
8000f45e:	99 69       	st.w	r12[0x18],r9
8000f460:	76 59       	ld.w	r9,r11[0x14]
8000f462:	99 59       	st.w	r12[0x14],r9
8000f464:	76 49       	ld.w	r9,r11[0x10]
8000f466:	99 49       	st.w	r12[0x10],r9
8000f468:	76 39       	ld.w	r9,r11[0xc]
8000f46a:	99 39       	st.w	r12[0xc],r9
8000f46c:	76 29       	ld.w	r9,r11[0x8]
8000f46e:	99 29       	st.w	r12[0x8],r9
8000f470:	76 19       	ld.w	r9,r11[0x4]
8000f472:	99 19       	st.w	r12[0x4],r9
8000f474:	76 09       	ld.w	r9,r11[0x0]
8000f476:	99 09       	st.w	r12[0x0],r9
8000f478:	f6 08 00 2b 	add	r11,r11,r8<<0x2
8000f47c:	f8 08 00 28 	add	r8,r12,r8<<0x2
8000f480:	e0 1a 00 03 	andl	r10,0x3
8000f484:	f4 0a 11 04 	rsub	r10,r10,4
8000f488:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
8000f48c:	17 a9       	ld.ub	r9,r11[0x2]
8000f48e:	b0 a9       	st.b	r8[0x2],r9
8000f490:	17 99       	ld.ub	r9,r11[0x1]
8000f492:	b0 99       	st.b	r8[0x1],r9
8000f494:	17 89       	ld.ub	r9,r11[0x0]
8000f496:	b0 89       	st.b	r8[0x0],r9
8000f498:	5e fc       	retal	r12
8000f49a:	f4 0a 11 09 	rsub	r10,r10,9
8000f49e:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
8000f4a2:	17 f9       	ld.ub	r9,r11[0x7]
8000f4a4:	b8 f9       	st.b	r12[0x7],r9
8000f4a6:	17 e9       	ld.ub	r9,r11[0x6]
8000f4a8:	b8 e9       	st.b	r12[0x6],r9
8000f4aa:	17 d9       	ld.ub	r9,r11[0x5]
8000f4ac:	b8 d9       	st.b	r12[0x5],r9
8000f4ae:	17 c9       	ld.ub	r9,r11[0x4]
8000f4b0:	b8 c9       	st.b	r12[0x4],r9
8000f4b2:	17 b9       	ld.ub	r9,r11[0x3]
8000f4b4:	b8 b9       	st.b	r12[0x3],r9
8000f4b6:	17 a9       	ld.ub	r9,r11[0x2]
8000f4b8:	b8 a9       	st.b	r12[0x2],r9
8000f4ba:	17 99       	ld.ub	r9,r11[0x1]
8000f4bc:	b8 99       	st.b	r12[0x1],r9
8000f4be:	17 89       	ld.ub	r9,r11[0x0]
8000f4c0:	b8 89       	st.b	r12[0x0],r9
8000f4c2:	5e fc       	retal	r12
8000f4c4:	eb cd 40 c0 	pushm	r6-r7,lr
8000f4c8:	18 99       	mov	r9,r12
8000f4ca:	22 0a       	sub	r10,32
8000f4cc:	b7 07       	ld.d	r6,r11++
8000f4ce:	b3 26       	st.d	r9++,r6
8000f4d0:	b7 07       	ld.d	r6,r11++
8000f4d2:	b3 26       	st.d	r9++,r6
8000f4d4:	b7 07       	ld.d	r6,r11++
8000f4d6:	b3 26       	st.d	r9++,r6
8000f4d8:	b7 07       	ld.d	r6,r11++
8000f4da:	b3 26       	st.d	r9++,r6
8000f4dc:	22 0a       	sub	r10,32
8000f4de:	cf 74       	brge	8000f4cc <memcpy+0x92>
8000f4e0:	2f 0a       	sub	r10,-16
8000f4e2:	c0 65       	brlt	8000f4ee <memcpy+0xb4>
8000f4e4:	b7 07       	ld.d	r6,r11++
8000f4e6:	b3 26       	st.d	r9++,r6
8000f4e8:	b7 07       	ld.d	r6,r11++
8000f4ea:	b3 26       	st.d	r9++,r6
8000f4ec:	21 0a       	sub	r10,16
8000f4ee:	5c 3a       	neg	r10
8000f4f0:	fe 0a 00 3f 	add	pc,pc,r10<<0x3
8000f4f4:	d7 03       	nop
8000f4f6:	d7 03       	nop
8000f4f8:	f7 36 00 0e 	ld.ub	r6,r11[14]
8000f4fc:	f3 66 00 0e 	st.b	r9[14],r6
8000f500:	f7 36 00 0d 	ld.ub	r6,r11[13]
8000f504:	f3 66 00 0d 	st.b	r9[13],r6
8000f508:	f7 36 00 0c 	ld.ub	r6,r11[12]
8000f50c:	f3 66 00 0c 	st.b	r9[12],r6
8000f510:	f7 36 00 0b 	ld.ub	r6,r11[11]
8000f514:	f3 66 00 0b 	st.b	r9[11],r6
8000f518:	f7 36 00 0a 	ld.ub	r6,r11[10]
8000f51c:	f3 66 00 0a 	st.b	r9[10],r6
8000f520:	f7 36 00 09 	ld.ub	r6,r11[9]
8000f524:	f3 66 00 09 	st.b	r9[9],r6
8000f528:	f7 36 00 08 	ld.ub	r6,r11[8]
8000f52c:	f3 66 00 08 	st.b	r9[8],r6
8000f530:	f7 36 00 07 	ld.ub	r6,r11[7]
8000f534:	f3 66 00 07 	st.b	r9[7],r6
8000f538:	f7 36 00 06 	ld.ub	r6,r11[6]
8000f53c:	f3 66 00 06 	st.b	r9[6],r6
8000f540:	f7 36 00 05 	ld.ub	r6,r11[5]
8000f544:	f3 66 00 05 	st.b	r9[5],r6
8000f548:	f7 36 00 04 	ld.ub	r6,r11[4]
8000f54c:	f3 66 00 04 	st.b	r9[4],r6
8000f550:	f7 36 00 03 	ld.ub	r6,r11[3]
8000f554:	f3 66 00 03 	st.b	r9[3],r6
8000f558:	f7 36 00 02 	ld.ub	r6,r11[2]
8000f55c:	f3 66 00 02 	st.b	r9[2],r6
8000f560:	f7 36 00 01 	ld.ub	r6,r11[1]
8000f564:	f3 66 00 01 	st.b	r9[1],r6
8000f568:	f7 36 00 00 	ld.ub	r6,r11[0]
8000f56c:	f3 66 00 00 	st.b	r9[0],r6
8000f570:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000f574:	20 1a       	sub	r10,1
8000f576:	f6 0a 07 09 	ld.ub	r9,r11[r10]
8000f57a:	f8 0a 0b 09 	st.b	r12[r10],r9
8000f57e:	cf b1       	brne	8000f574 <memcpy+0x13a>
8000f580:	5e fc       	retal	r12

8000f582 <memset>:
8000f582:	18 98       	mov	r8,r12
8000f584:	c0 38       	rjmp	8000f58a <memset+0x8>
8000f586:	10 cb       	st.b	r8++,r11
8000f588:	20 1a       	sub	r10,1
8000f58a:	58 0a       	cp.w	r10,0
8000f58c:	cf d1       	brne	8000f586 <memset+0x4>
8000f58e:	5e fc       	retal	r12

8000f590 <sprintf>:
8000f590:	d4 01       	pushm	lr
8000f592:	21 7d       	sub	sp,92
8000f594:	e0 68 ff ff 	mov	r8,65535
8000f598:	ea 18 7f ff 	orh	r8,0x7fff
8000f59c:	50 58       	stdsp	sp[0x14],r8
8000f59e:	50 28       	stdsp	sp[0x8],r8
8000f5a0:	e0 68 02 08 	mov	r8,520
8000f5a4:	ba 68       	st.h	sp[0xc],r8
8000f5a6:	3f f8       	mov	r8,-1
8000f5a8:	ba 78       	st.h	sp[0xe],r8
8000f5aa:	e0 68 01 d0 	mov	r8,464
8000f5ae:	50 4c       	stdsp	sp[0x10],r12
8000f5b0:	16 9a       	mov	r10,r11
8000f5b2:	50 0c       	stdsp	sp[0x0],r12
8000f5b4:	fa c9 ff a0 	sub	r9,sp,-96
8000f5b8:	70 0c       	ld.w	r12,r8[0x0]
8000f5ba:	1a 9b       	mov	r11,sp
8000f5bc:	cf 0d       	rcall	8000f99c <_vfprintf_r>
8000f5be:	30 09       	mov	r9,0
8000f5c0:	40 08       	lddsp	r8,sp[0x0]
8000f5c2:	b0 89       	st.b	r8[0x0],r9
8000f5c4:	2e 9d       	sub	sp,-92
8000f5c6:	d8 02       	popm	pc

8000f5c8 <strcmp>:
8000f5c8:	f9 eb 10 0a 	or	r10,r12,r11
8000f5cc:	e2 1a 00 03 	andl	r10,0x3,COH
8000f5d0:	c3 41       	brne	8000f638 <strcmp+0x70>
8000f5d2:	78 0a       	ld.w	r10,r12[0x0]
8000f5d4:	76 09       	ld.w	r9,r11[0x0]
8000f5d6:	5c ea       	tnbz	r10
8000f5d8:	c1 70       	breq	8000f606 <strcmp+0x3e>
8000f5da:	12 3a       	cp.w	r10,r9
8000f5dc:	c1 51       	brne	8000f606 <strcmp+0x3e>
8000f5de:	78 1a       	ld.w	r10,r12[0x4]
8000f5e0:	76 19       	ld.w	r9,r11[0x4]
8000f5e2:	5c ea       	tnbz	r10
8000f5e4:	c1 10       	breq	8000f606 <strcmp+0x3e>
8000f5e6:	12 3a       	cp.w	r10,r9
8000f5e8:	c0 f1       	brne	8000f606 <strcmp+0x3e>
8000f5ea:	78 2a       	ld.w	r10,r12[0x8]
8000f5ec:	76 29       	ld.w	r9,r11[0x8]
8000f5ee:	5c ea       	tnbz	r10
8000f5f0:	c0 b0       	breq	8000f606 <strcmp+0x3e>
8000f5f2:	12 3a       	cp.w	r10,r9
8000f5f4:	c0 91       	brne	8000f606 <strcmp+0x3e>
8000f5f6:	78 3a       	ld.w	r10,r12[0xc]
8000f5f8:	76 39       	ld.w	r9,r11[0xc]
8000f5fa:	5c ea       	tnbz	r10
8000f5fc:	c0 50       	breq	8000f606 <strcmp+0x3e>
8000f5fe:	2f 0c       	sub	r12,-16
8000f600:	2f 0b       	sub	r11,-16
8000f602:	12 3a       	cp.w	r10,r9
8000f604:	ce 70       	breq	8000f5d2 <strcmp+0xa>
8000f606:	f9 da c3 08 	bfextu	r12,r10,0x18,0x8
8000f60a:	f7 d9 c3 08 	bfextu	r11,r9,0x18,0x8
8000f60e:	5e 0c       	reteq	r12
8000f610:	16 1c       	sub	r12,r11
8000f612:	5e 1c       	retne	r12
8000f614:	f9 da c2 08 	bfextu	r12,r10,0x10,0x8
8000f618:	f7 d9 c2 08 	bfextu	r11,r9,0x10,0x8
8000f61c:	5e 0c       	reteq	r12
8000f61e:	16 1c       	sub	r12,r11
8000f620:	5e 1c       	retne	r12
8000f622:	f9 da c1 08 	bfextu	r12,r10,0x8,0x8
8000f626:	f7 d9 c1 08 	bfextu	r11,r9,0x8,0x8
8000f62a:	5e 0c       	reteq	r12
8000f62c:	16 1c       	sub	r12,r11
8000f62e:	5e 1c       	retne	r12
8000f630:	5c 5a       	castu.b	r10
8000f632:	5c 59       	castu.b	r9
8000f634:	12 1a       	sub	r10,r9
8000f636:	5e fa       	retal	r10
8000f638:	17 8a       	ld.ub	r10,r11[0x0]
8000f63a:	19 89       	ld.ub	r9,r12[0x0]
8000f63c:	58 0a       	cp.w	r10,0
8000f63e:	5e 09       	reteq	r9
8000f640:	14 19       	sub	r9,r10
8000f642:	5e 19       	retne	r9
8000f644:	17 9a       	ld.ub	r10,r11[0x1]
8000f646:	19 99       	ld.ub	r9,r12[0x1]
8000f648:	58 0a       	cp.w	r10,0
8000f64a:	5e 09       	reteq	r9
8000f64c:	14 19       	sub	r9,r10
8000f64e:	5e 19       	retne	r9
8000f650:	17 aa       	ld.ub	r10,r11[0x2]
8000f652:	19 a9       	ld.ub	r9,r12[0x2]
8000f654:	58 0a       	cp.w	r10,0
8000f656:	5e 09       	reteq	r9
8000f658:	14 19       	sub	r9,r10
8000f65a:	5e 19       	retne	r9
8000f65c:	17 ba       	ld.ub	r10,r11[0x3]
8000f65e:	19 b9       	ld.ub	r9,r12[0x3]
8000f660:	58 0a       	cp.w	r10,0
8000f662:	5e 09       	reteq	r9
8000f664:	14 19       	sub	r9,r10
8000f666:	5e 19       	retne	r9
8000f668:	2f cb       	sub	r11,-4
8000f66a:	2f cc       	sub	r12,-4
8000f66c:	ce 6b       	rjmp	8000f638 <strcmp+0x70>
8000f66e:	d7 03       	nop

8000f670 <get_arg>:
8000f670:	d4 31       	pushm	r0-r7,lr
8000f672:	20 8d       	sub	sp,32
8000f674:	fa c4 ff bc 	sub	r4,sp,-68
8000f678:	50 4b       	stdsp	sp[0x10],r11
8000f67a:	68 2e       	ld.w	lr,r4[0x8]
8000f67c:	50 58       	stdsp	sp[0x14],r8
8000f67e:	12 96       	mov	r6,r9
8000f680:	7c 0b       	ld.w	r11,lr[0x0]
8000f682:	70 05       	ld.w	r5,r8[0x0]
8000f684:	50 6e       	stdsp	sp[0x18],lr
8000f686:	58 0b       	cp.w	r11,0
8000f688:	f4 0b 17 00 	moveq	r11,r10
8000f68c:	68 03       	ld.w	r3,r4[0x0]
8000f68e:	68 11       	ld.w	r1,r4[0x4]
8000f690:	40 49       	lddsp	r9,sp[0x10]
8000f692:	30 08       	mov	r8,0
8000f694:	c2 69       	rjmp	8000f8e0 <get_arg+0x270>
8000f696:	2f fb       	sub	r11,-1
8000f698:	32 5c       	mov	r12,37
8000f69a:	17 8a       	ld.ub	r10,r11[0x0]
8000f69c:	f8 0a 18 00 	cp.b	r10,r12
8000f6a0:	5f 1e       	srne	lr
8000f6a2:	f0 0a 18 00 	cp.b	r10,r8
8000f6a6:	5f 1c       	srne	r12
8000f6a8:	fd ec 00 0c 	and	r12,lr,r12
8000f6ac:	f0 0c 18 00 	cp.b	r12,r8
8000f6b0:	cf 31       	brne	8000f696 <get_arg+0x26>
8000f6b2:	58 0a       	cp.w	r10,0
8000f6b4:	e0 80 01 23 	breq	8000f8fa <get_arg+0x28a>
8000f6b8:	30 0c       	mov	r12,0
8000f6ba:	3f fa       	mov	r10,-1
8000f6bc:	18 90       	mov	r0,r12
8000f6be:	50 3a       	stdsp	sp[0xc],r10
8000f6c0:	18 94       	mov	r4,r12
8000f6c2:	18 92       	mov	r2,r12
8000f6c4:	f8 0c 00 3c 	add	r12,r12,r12<<0x3
8000f6c8:	16 97       	mov	r7,r11
8000f6ca:	50 7c       	stdsp	sp[0x1c],r12
8000f6cc:	fe cc a2 e8 	sub	r12,pc,-23832
8000f6d0:	0f 3a       	ld.ub	r10,r7++
8000f6d2:	f8 0a 07 0e 	ld.ub	lr,r12[r10]
8000f6d6:	40 7c       	lddsp	r12,sp[0x1c]
8000f6d8:	1c 0c       	add	r12,lr
8000f6da:	fe ce a3 be 	sub	lr,pc,-23618
8000f6de:	fc 0c 07 0e 	ld.ub	lr,lr[r12]
8000f6e2:	20 1e       	sub	lr,1
8000f6e4:	50 0e       	stdsp	sp[0x0],lr
8000f6e6:	fe ce a4 36 	sub	lr,pc,-23498
8000f6ea:	fc 0c 07 0c 	ld.ub	r12,lr[r12]
8000f6ee:	50 7c       	stdsp	sp[0x1c],r12
8000f6f0:	40 0c       	lddsp	r12,sp[0x0]
8000f6f2:	58 7c       	cp.w	r12,7
8000f6f4:	e0 8b 00 ef 	brhi	8000f8d2 <get_arg+0x262>
8000f6f8:	fe ce a5 e8 	sub	lr,pc,-23064
8000f6fc:	fc 0c 03 2f 	ld.w	pc,lr[r12<<0x2]
8000f700:	36 8b       	mov	r11,104
8000f702:	f6 0a 18 00 	cp.b	r10,r11
8000f706:	e0 80 00 e6 	breq	8000f8d2 <get_arg+0x262>
8000f70a:	37 1b       	mov	r11,113
8000f70c:	f6 0a 18 00 	cp.b	r10,r11
8000f710:	c0 70       	breq	8000f71e <get_arg+0xae>
8000f712:	34 cb       	mov	r11,76
8000f714:	f6 0a 18 00 	cp.b	r10,r11
8000f718:	c0 51       	brne	8000f722 <get_arg+0xb2>
8000f71a:	a3 b4       	sbr	r4,0x3
8000f71c:	cd b8       	rjmp	8000f8d2 <get_arg+0x262>
8000f71e:	a5 b4       	sbr	r4,0x5
8000f720:	cd 98       	rjmp	8000f8d2 <get_arg+0x262>
8000f722:	08 9a       	mov	r10,r4
8000f724:	0e 9b       	mov	r11,r7
8000f726:	a5 aa       	sbr	r10,0x4
8000f728:	17 3c       	ld.ub	r12,r11++
8000f72a:	a5 b4       	sbr	r4,0x5
8000f72c:	36 ce       	mov	lr,108
8000f72e:	fc 0c 18 00 	cp.b	r12,lr
8000f732:	e0 80 00 d1 	breq	8000f8d4 <get_arg+0x264>
8000f736:	14 94       	mov	r4,r10
8000f738:	cc d8       	rjmp	8000f8d2 <get_arg+0x262>
8000f73a:	eb d5 c0 05 	bfextu	r5,r5,0x0,0x5
8000f73e:	36 7c       	mov	r12,103
8000f740:	f8 0a 18 00 	cp.b	r10,r12
8000f744:	e0 8b 00 27 	brhi	8000f792 <get_arg+0x122>
8000f748:	36 5b       	mov	r11,101
8000f74a:	f6 0a 18 00 	cp.b	r10,r11
8000f74e:	c4 82       	brcc	8000f7de <get_arg+0x16e>
8000f750:	34 fb       	mov	r11,79
8000f752:	f6 0a 18 00 	cp.b	r10,r11
8000f756:	c4 80       	breq	8000f7e6 <get_arg+0x176>
8000f758:	e0 8b 00 0c 	brhi	8000f770 <get_arg+0x100>
8000f75c:	34 5b       	mov	r11,69
8000f75e:	f6 0a 18 00 	cp.b	r10,r11
8000f762:	c3 e0       	breq	8000f7de <get_arg+0x16e>
8000f764:	34 7b       	mov	r11,71
8000f766:	f6 0a 18 00 	cp.b	r10,r11
8000f76a:	c3 a0       	breq	8000f7de <get_arg+0x16e>
8000f76c:	34 4b       	mov	r11,68
8000f76e:	c0 88       	rjmp	8000f77e <get_arg+0x10e>
8000f770:	35 8b       	mov	r11,88
8000f772:	f6 0a 18 00 	cp.b	r10,r11
8000f776:	c2 c0       	breq	8000f7ce <get_arg+0x15e>
8000f778:	e0 8b 00 07 	brhi	8000f786 <get_arg+0x116>
8000f77c:	35 5b       	mov	r11,85
8000f77e:	f6 0a 18 00 	cp.b	r10,r11
8000f782:	c3 51       	brne	8000f7ec <get_arg+0x17c>
8000f784:	c3 18       	rjmp	8000f7e6 <get_arg+0x176>
8000f786:	36 3b       	mov	r11,99
8000f788:	f6 0a 18 00 	cp.b	r10,r11
8000f78c:	c2 f0       	breq	8000f7ea <get_arg+0x17a>
8000f78e:	36 4b       	mov	r11,100
8000f790:	c0 e8       	rjmp	8000f7ac <get_arg+0x13c>
8000f792:	37 0b       	mov	r11,112
8000f794:	f6 0a 18 00 	cp.b	r10,r11
8000f798:	c2 50       	breq	8000f7e2 <get_arg+0x172>
8000f79a:	e0 8b 00 0d 	brhi	8000f7b4 <get_arg+0x144>
8000f79e:	36 eb       	mov	r11,110
8000f7a0:	f6 0a 18 00 	cp.b	r10,r11
8000f7a4:	c1 f0       	breq	8000f7e2 <get_arg+0x172>
8000f7a6:	e0 8b 00 14 	brhi	8000f7ce <get_arg+0x15e>
8000f7aa:	36 9b       	mov	r11,105
8000f7ac:	f6 0a 18 00 	cp.b	r10,r11
8000f7b0:	c1 e1       	brne	8000f7ec <get_arg+0x17c>
8000f7b2:	c0 e8       	rjmp	8000f7ce <get_arg+0x15e>
8000f7b4:	37 5b       	mov	r11,117
8000f7b6:	f6 0a 18 00 	cp.b	r10,r11
8000f7ba:	c0 a0       	breq	8000f7ce <get_arg+0x15e>
8000f7bc:	37 8b       	mov	r11,120
8000f7be:	f6 0a 18 00 	cp.b	r10,r11
8000f7c2:	c0 60       	breq	8000f7ce <get_arg+0x15e>
8000f7c4:	37 3b       	mov	r11,115
8000f7c6:	f6 0a 18 00 	cp.b	r10,r11
8000f7ca:	c1 11       	brne	8000f7ec <get_arg+0x17c>
8000f7cc:	c0 b8       	rjmp	8000f7e2 <get_arg+0x172>
8000f7ce:	ed b4 00 04 	bld	r4,0x4
8000f7d2:	c0 a0       	breq	8000f7e6 <get_arg+0x176>
8000f7d4:	ed b4 00 05 	bld	r4,0x5
8000f7d8:	c0 91       	brne	8000f7ea <get_arg+0x17a>
8000f7da:	30 20       	mov	r0,2
8000f7dc:	c0 88       	rjmp	8000f7ec <get_arg+0x17c>
8000f7de:	30 40       	mov	r0,4
8000f7e0:	c0 68       	rjmp	8000f7ec <get_arg+0x17c>
8000f7e2:	30 30       	mov	r0,3
8000f7e4:	c0 48       	rjmp	8000f7ec <get_arg+0x17c>
8000f7e6:	30 10       	mov	r0,1
8000f7e8:	c0 28       	rjmp	8000f7ec <get_arg+0x17c>
8000f7ea:	30 00       	mov	r0,0
8000f7ec:	40 3b       	lddsp	r11,sp[0xc]
8000f7ee:	5b fb       	cp.w	r11,-1
8000f7f0:	c0 40       	breq	8000f7f8 <get_arg+0x188>
8000f7f2:	e2 0b 09 20 	st.w	r1[r11<<0x2],r0
8000f7f6:	c6 e8       	rjmp	8000f8d2 <get_arg+0x262>
8000f7f8:	58 60       	cp.w	r0,6
8000f7fa:	e0 8b 00 6c 	brhi	8000f8d2 <get_arg+0x262>
8000f7fe:	6c 0a       	ld.w	r10,r6[0x0]
8000f800:	ea cc ff ff 	sub	r12,r5,-1
8000f804:	fe ce a6 d4 	sub	lr,pc,-22828
8000f808:	fc 00 03 2f 	ld.w	pc,lr[r0<<0x2]
8000f80c:	f4 cb ff f8 	sub	r11,r10,-8
8000f810:	8d 0b       	st.w	r6[0x0],r11
8000f812:	f4 ea 00 00 	ld.d	r10,r10[0]
8000f816:	e6 05 08 3a 	st.d	r3[r5<<0x3],r10
8000f81a:	c0 f8       	rjmp	8000f838 <get_arg+0x1c8>
8000f81c:	f4 cb ff fc 	sub	r11,r10,-4
8000f820:	8d 0b       	st.w	r6[0x0],r11
8000f822:	74 0a       	ld.w	r10,r10[0x0]
8000f824:	e6 05 09 3a 	st.w	r3[r5<<0x3],r10
8000f828:	c0 88       	rjmp	8000f838 <get_arg+0x1c8>
8000f82a:	f4 cb ff f8 	sub	r11,r10,-8
8000f82e:	8d 0b       	st.w	r6[0x0],r11
8000f830:	f4 ea 00 00 	ld.d	r10,r10[0]
8000f834:	e6 05 08 3a 	st.d	r3[r5<<0x3],r10
8000f838:	0e 9b       	mov	r11,r7
8000f83a:	18 95       	mov	r5,r12
8000f83c:	c4 c8       	rjmp	8000f8d4 <get_arg+0x264>
8000f83e:	62 0a       	ld.w	r10,r1[0x0]
8000f840:	5b fa       	cp.w	r10,-1
8000f842:	c0 a1       	brne	8000f856 <get_arg+0x1e6>
8000f844:	50 19       	stdsp	sp[0x4],r9
8000f846:	50 28       	stdsp	sp[0x8],r8
8000f848:	e0 6a 00 80 	mov	r10,128
8000f84c:	30 0b       	mov	r11,0
8000f84e:	02 9c       	mov	r12,r1
8000f850:	c9 9e       	rcall	8000f582 <memset>
8000f852:	40 28       	lddsp	r8,sp[0x8]
8000f854:	40 19       	lddsp	r9,sp[0x4]
8000f856:	e4 cc 00 01 	sub	r12,r2,1
8000f85a:	0e 9b       	mov	r11,r7
8000f85c:	50 3c       	stdsp	sp[0xc],r12
8000f85e:	f2 0c 0c 49 	max	r9,r9,r12
8000f862:	c3 98       	rjmp	8000f8d4 <get_arg+0x264>
8000f864:	62 0a       	ld.w	r10,r1[0x0]
8000f866:	5b fa       	cp.w	r10,-1
8000f868:	c0 a1       	brne	8000f87c <get_arg+0x20c>
8000f86a:	50 19       	stdsp	sp[0x4],r9
8000f86c:	50 28       	stdsp	sp[0x8],r8
8000f86e:	e0 6a 00 80 	mov	r10,128
8000f872:	30 0b       	mov	r11,0
8000f874:	02 9c       	mov	r12,r1
8000f876:	c8 6e       	rcall	8000f582 <memset>
8000f878:	40 28       	lddsp	r8,sp[0x8]
8000f87a:	40 19       	lddsp	r9,sp[0x4]
8000f87c:	20 12       	sub	r2,1
8000f87e:	30 0a       	mov	r10,0
8000f880:	0e 9b       	mov	r11,r7
8000f882:	e2 02 09 2a 	st.w	r1[r2<<0x2],r10
8000f886:	f2 02 0c 49 	max	r9,r9,r2
8000f88a:	c2 58       	rjmp	8000f8d4 <get_arg+0x264>
8000f88c:	16 97       	mov	r7,r11
8000f88e:	6c 0a       	ld.w	r10,r6[0x0]
8000f890:	f4 cb ff fc 	sub	r11,r10,-4
8000f894:	8d 0b       	st.w	r6[0x0],r11
8000f896:	74 0a       	ld.w	r10,r10[0x0]
8000f898:	0e 9b       	mov	r11,r7
8000f89a:	e6 05 09 3a 	st.w	r3[r5<<0x3],r10
8000f89e:	2f f5       	sub	r5,-1
8000f8a0:	c1 a8       	rjmp	8000f8d4 <get_arg+0x264>
8000f8a2:	f4 c2 00 30 	sub	r2,r10,48
8000f8a6:	c0 68       	rjmp	8000f8b2 <get_arg+0x242>
8000f8a8:	e4 02 00 22 	add	r2,r2,r2<<0x2
8000f8ac:	2f f7       	sub	r7,-1
8000f8ae:	f4 02 00 12 	add	r2,r10,r2<<0x1
8000f8b2:	0f 8a       	ld.ub	r10,r7[0x0]
8000f8b4:	58 0a       	cp.w	r10,0
8000f8b6:	c0 e0       	breq	8000f8d2 <get_arg+0x262>
8000f8b8:	23 0a       	sub	r10,48
8000f8ba:	58 9a       	cp.w	r10,9
8000f8bc:	fe 98 ff f6 	brls	8000f8a8 <get_arg+0x238>
8000f8c0:	c0 98       	rjmp	8000f8d2 <get_arg+0x262>
8000f8c2:	2f f7       	sub	r7,-1
8000f8c4:	0f 8a       	ld.ub	r10,r7[0x0]
8000f8c6:	58 0a       	cp.w	r10,0
8000f8c8:	c0 50       	breq	8000f8d2 <get_arg+0x262>
8000f8ca:	23 0a       	sub	r10,48
8000f8cc:	58 9a       	cp.w	r10,9
8000f8ce:	fe 98 ff fa 	brls	8000f8c2 <get_arg+0x252>
8000f8d2:	0e 9b       	mov	r11,r7
8000f8d4:	40 7c       	lddsp	r12,sp[0x1c]
8000f8d6:	30 ba       	mov	r10,11
8000f8d8:	f4 0c 18 00 	cp.b	r12,r10
8000f8dc:	fe 91 fe f4 	brne	8000f6c4 <get_arg+0x54>
8000f8e0:	40 42       	lddsp	r2,sp[0x10]
8000f8e2:	17 8c       	ld.ub	r12,r11[0x0]
8000f8e4:	0a 32       	cp.w	r2,r5
8000f8e6:	5f 4a       	srge	r10
8000f8e8:	f0 0c 18 00 	cp.b	r12,r8
8000f8ec:	5f 1c       	srne	r12
8000f8ee:	f9 ea 00 0a 	and	r10,r12,r10
8000f8f2:	f0 0a 18 00 	cp.b	r10,r8
8000f8f6:	fe 91 fe d1 	brne	8000f698 <get_arg+0x28>
8000f8fa:	30 08       	mov	r8,0
8000f8fc:	40 4e       	lddsp	lr,sp[0x10]
8000f8fe:	17 8a       	ld.ub	r10,r11[0x0]
8000f900:	e2 05 00 21 	add	r1,r1,r5<<0x2
8000f904:	f0 0a 18 00 	cp.b	r10,r8
8000f908:	fc 09 17 10 	movne	r9,lr
8000f90c:	e6 05 00 38 	add	r8,r3,r5<<0x3
8000f910:	06 9e       	mov	lr,r3
8000f912:	c2 a8       	rjmp	8000f966 <get_arg+0x2f6>
8000f914:	62 0a       	ld.w	r10,r1[0x0]
8000f916:	58 3a       	cp.w	r10,3
8000f918:	c1 e0       	breq	8000f954 <get_arg+0x2e4>
8000f91a:	e0 89 00 07 	brgt	8000f928 <get_arg+0x2b8>
8000f91e:	58 1a       	cp.w	r10,1
8000f920:	c1 a0       	breq	8000f954 <get_arg+0x2e4>
8000f922:	58 2a       	cp.w	r10,2
8000f924:	c1 81       	brne	8000f954 <get_arg+0x2e4>
8000f926:	c0 58       	rjmp	8000f930 <get_arg+0x2c0>
8000f928:	58 5a       	cp.w	r10,5
8000f92a:	c0 c0       	breq	8000f942 <get_arg+0x2d2>
8000f92c:	c0 b5       	brlt	8000f942 <get_arg+0x2d2>
8000f92e:	c1 38       	rjmp	8000f954 <get_arg+0x2e4>
8000f930:	6c 0a       	ld.w	r10,r6[0x0]
8000f932:	f4 cc ff f8 	sub	r12,r10,-8
8000f936:	8d 0c       	st.w	r6[0x0],r12
8000f938:	f4 e2 00 00 	ld.d	r2,r10[0]
8000f93c:	f0 e3 00 00 	st.d	r8[0],r2
8000f940:	c1 08       	rjmp	8000f960 <get_arg+0x2f0>
8000f942:	6c 0a       	ld.w	r10,r6[0x0]
8000f944:	f4 cc ff f8 	sub	r12,r10,-8
8000f948:	8d 0c       	st.w	r6[0x0],r12
8000f94a:	f4 e2 00 00 	ld.d	r2,r10[0]
8000f94e:	f0 e3 00 00 	st.d	r8[0],r2
8000f952:	c0 78       	rjmp	8000f960 <get_arg+0x2f0>
8000f954:	6c 0a       	ld.w	r10,r6[0x0]
8000f956:	f4 cc ff fc 	sub	r12,r10,-4
8000f95a:	8d 0c       	st.w	r6[0x0],r12
8000f95c:	74 0a       	ld.w	r10,r10[0x0]
8000f95e:	91 0a       	st.w	r8[0x0],r10
8000f960:	2f f5       	sub	r5,-1
8000f962:	2f 88       	sub	r8,-8
8000f964:	2f c1       	sub	r1,-4
8000f966:	12 35       	cp.w	r5,r9
8000f968:	fe 9a ff d6 	brle	8000f914 <get_arg+0x2a4>
8000f96c:	1c 93       	mov	r3,lr
8000f96e:	40 52       	lddsp	r2,sp[0x14]
8000f970:	40 6e       	lddsp	lr,sp[0x18]
8000f972:	85 05       	st.w	r2[0x0],r5
8000f974:	9d 0b       	st.w	lr[0x0],r11
8000f976:	40 4b       	lddsp	r11,sp[0x10]
8000f978:	e6 0b 00 3c 	add	r12,r3,r11<<0x3
8000f97c:	2f 8d       	sub	sp,-32
8000f97e:	d8 32       	popm	r0-r7,pc

8000f980 <__sprint_r>:
8000f980:	d4 21       	pushm	r4-r7,lr
8000f982:	14 97       	mov	r7,r10
8000f984:	74 28       	ld.w	r8,r10[0x8]
8000f986:	58 08       	cp.w	r8,0
8000f988:	c0 41       	brne	8000f990 <__sprint_r+0x10>
8000f98a:	95 18       	st.w	r10[0x4],r8
8000f98c:	10 9c       	mov	r12,r8
8000f98e:	d8 22       	popm	r4-r7,pc
8000f990:	e0 a0 18 b4 	rcall	80012af8 <__sfvwrite_r>
8000f994:	30 08       	mov	r8,0
8000f996:	8f 18       	st.w	r7[0x4],r8
8000f998:	8f 28       	st.w	r7[0x8],r8
8000f99a:	d8 22       	popm	r4-r7,pc

8000f99c <_vfprintf_r>:
8000f99c:	d4 31       	pushm	r0-r7,lr
8000f99e:	fa cd 06 bc 	sub	sp,sp,1724
8000f9a2:	51 09       	stdsp	sp[0x40],r9
8000f9a4:	16 91       	mov	r1,r11
8000f9a6:	14 97       	mov	r7,r10
8000f9a8:	18 95       	mov	r5,r12
8000f9aa:	e0 a0 1a 1d 	rcall	80012de4 <_localeconv_r>
8000f9ae:	78 0c       	ld.w	r12,r12[0x0]
8000f9b0:	50 cc       	stdsp	sp[0x30],r12
8000f9b2:	58 05       	cp.w	r5,0
8000f9b4:	c0 70       	breq	8000f9c2 <_vfprintf_r+0x26>
8000f9b6:	6a 68       	ld.w	r8,r5[0x18]
8000f9b8:	58 08       	cp.w	r8,0
8000f9ba:	c0 41       	brne	8000f9c2 <_vfprintf_r+0x26>
8000f9bc:	0a 9c       	mov	r12,r5
8000f9be:	e0 a0 17 3d 	rcall	80012838 <__sinit>
8000f9c2:	fe c8 a4 ce 	sub	r8,pc,-23346
8000f9c6:	10 31       	cp.w	r1,r8
8000f9c8:	c0 31       	brne	8000f9ce <_vfprintf_r+0x32>
8000f9ca:	6a 01       	ld.w	r1,r5[0x0]
8000f9cc:	c0 c8       	rjmp	8000f9e4 <_vfprintf_r+0x48>
8000f9ce:	fe c8 a4 ba 	sub	r8,pc,-23366
8000f9d2:	10 31       	cp.w	r1,r8
8000f9d4:	c0 31       	brne	8000f9da <_vfprintf_r+0x3e>
8000f9d6:	6a 11       	ld.w	r1,r5[0x4]
8000f9d8:	c0 68       	rjmp	8000f9e4 <_vfprintf_r+0x48>
8000f9da:	fe c8 a4 a6 	sub	r8,pc,-23386
8000f9de:	10 31       	cp.w	r1,r8
8000f9e0:	eb f1 00 02 	ld.weq	r1,r5[0x8]
8000f9e4:	82 68       	ld.sh	r8,r1[0xc]
8000f9e6:	ed b8 00 03 	bld	r8,0x3
8000f9ea:	c0 41       	brne	8000f9f2 <_vfprintf_r+0x56>
8000f9ec:	62 48       	ld.w	r8,r1[0x10]
8000f9ee:	58 08       	cp.w	r8,0
8000f9f0:	c0 71       	brne	8000f9fe <_vfprintf_r+0x62>
8000f9f2:	02 9b       	mov	r11,r1
8000f9f4:	0a 9c       	mov	r12,r5
8000f9f6:	e0 a0 0f 5d 	rcall	800118b0 <__swsetup_r>
8000f9fa:	e0 81 0f 54 	brne	800118a2 <_vfprintf_r+0x1f06>
8000f9fe:	82 68       	ld.sh	r8,r1[0xc]
8000fa00:	10 99       	mov	r9,r8
8000fa02:	e2 19 00 1a 	andl	r9,0x1a,COH
8000fa06:	58 a9       	cp.w	r9,10
8000fa08:	c3 c1       	brne	8000fa80 <_vfprintf_r+0xe4>
8000fa0a:	82 79       	ld.sh	r9,r1[0xe]
8000fa0c:	30 0a       	mov	r10,0
8000fa0e:	f4 09 19 00 	cp.h	r9,r10
8000fa12:	c3 75       	brlt	8000fa80 <_vfprintf_r+0xe4>
8000fa14:	a1 d8       	cbr	r8,0x1
8000fa16:	fb 58 05 d0 	st.h	sp[1488],r8
8000fa1a:	62 88       	ld.w	r8,r1[0x20]
8000fa1c:	fb 48 05 e4 	st.w	sp[1508],r8
8000fa20:	62 a8       	ld.w	r8,r1[0x28]
8000fa22:	fb 48 05 ec 	st.w	sp[1516],r8
8000fa26:	fa c8 ff bc 	sub	r8,sp,-68
8000fa2a:	fb 48 05 d4 	st.w	sp[1492],r8
8000fa2e:	fb 48 05 c4 	st.w	sp[1476],r8
8000fa32:	e0 68 04 00 	mov	r8,1024
8000fa36:	fb 48 05 d8 	st.w	sp[1496],r8
8000fa3a:	fb 48 05 cc 	st.w	sp[1484],r8
8000fa3e:	30 08       	mov	r8,0
8000fa40:	fb 59 05 d2 	st.h	sp[1490],r9
8000fa44:	0e 9a       	mov	r10,r7
8000fa46:	41 09       	lddsp	r9,sp[0x40]
8000fa48:	fa c7 fa 3c 	sub	r7,sp,-1476
8000fa4c:	fb 48 05 dc 	st.w	sp[1500],r8
8000fa50:	0a 9c       	mov	r12,r5
8000fa52:	0e 9b       	mov	r11,r7
8000fa54:	ca 4f       	rcall	8000f99c <_vfprintf_r>
8000fa56:	50 bc       	stdsp	sp[0x2c],r12
8000fa58:	c0 95       	brlt	8000fa6a <_vfprintf_r+0xce>
8000fa5a:	0e 9b       	mov	r11,r7
8000fa5c:	0a 9c       	mov	r12,r5
8000fa5e:	e0 a0 16 15 	rcall	80012688 <_fflush_r>
8000fa62:	40 be       	lddsp	lr,sp[0x2c]
8000fa64:	f9 be 01 ff 	movne	lr,-1
8000fa68:	50 be       	stdsp	sp[0x2c],lr
8000fa6a:	fb 08 05 d0 	ld.sh	r8,sp[1488]
8000fa6e:	ed b8 00 06 	bld	r8,0x6
8000fa72:	e0 81 0f 1a 	brne	800118a6 <_vfprintf_r+0x1f0a>
8000fa76:	82 68       	ld.sh	r8,r1[0xc]
8000fa78:	a7 a8       	sbr	r8,0x6
8000fa7a:	a2 68       	st.h	r1[0xc],r8
8000fa7c:	e0 8f 0f 15 	bral	800118a6 <_vfprintf_r+0x1f0a>
8000fa80:	30 08       	mov	r8,0
8000fa82:	fb 48 06 b4 	st.w	sp[1716],r8
8000fa86:	fb 48 06 90 	st.w	sp[1680],r8
8000fa8a:	fb 48 06 8c 	st.w	sp[1676],r8
8000fa8e:	fb 48 06 b0 	st.w	sp[1712],r8
8000fa92:	30 08       	mov	r8,0
8000fa94:	30 09       	mov	r9,0
8000fa96:	50 a7       	stdsp	sp[0x28],r7
8000fa98:	50 78       	stdsp	sp[0x1c],r8
8000fa9a:	fa c3 f9 e0 	sub	r3,sp,-1568
8000fa9e:	3f f8       	mov	r8,-1
8000faa0:	50 59       	stdsp	sp[0x14],r9
8000faa2:	fb 43 06 88 	st.w	sp[1672],r3
8000faa6:	fb 48 05 44 	st.w	sp[1348],r8
8000faaa:	12 9c       	mov	r12,r9
8000faac:	50 69       	stdsp	sp[0x18],r9
8000faae:	50 d9       	stdsp	sp[0x34],r9
8000fab0:	50 e9       	stdsp	sp[0x38],r9
8000fab2:	50 b9       	stdsp	sp[0x2c],r9
8000fab4:	12 97       	mov	r7,r9
8000fab6:	0a 94       	mov	r4,r5
8000fab8:	40 a2       	lddsp	r2,sp[0x28]
8000faba:	32 5a       	mov	r10,37
8000fabc:	30 08       	mov	r8,0
8000fabe:	c0 28       	rjmp	8000fac2 <_vfprintf_r+0x126>
8000fac0:	2f f2       	sub	r2,-1
8000fac2:	05 89       	ld.ub	r9,r2[0x0]
8000fac4:	f0 09 18 00 	cp.b	r9,r8
8000fac8:	5f 1b       	srne	r11
8000faca:	f4 09 18 00 	cp.b	r9,r10
8000face:	5f 19       	srne	r9
8000fad0:	f3 eb 00 0b 	and	r11,r9,r11
8000fad4:	f0 0b 18 00 	cp.b	r11,r8
8000fad8:	cf 41       	brne	8000fac0 <_vfprintf_r+0x124>
8000fada:	40 ab       	lddsp	r11,sp[0x28]
8000fadc:	e4 0b 01 06 	sub	r6,r2,r11
8000fae0:	c1 e0       	breq	8000fb1c <_vfprintf_r+0x180>
8000fae2:	fa f8 06 90 	ld.w	r8,sp[1680]
8000fae6:	0c 08       	add	r8,r6
8000fae8:	87 0b       	st.w	r3[0x0],r11
8000faea:	fb 48 06 90 	st.w	sp[1680],r8
8000faee:	87 16       	st.w	r3[0x4],r6
8000faf0:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000faf4:	2f f8       	sub	r8,-1
8000faf6:	fb 48 06 8c 	st.w	sp[1676],r8
8000fafa:	58 78       	cp.w	r8,7
8000fafc:	e0 89 00 04 	brgt	8000fb04 <_vfprintf_r+0x168>
8000fb00:	2f 83       	sub	r3,-8
8000fb02:	c0 a8       	rjmp	8000fb16 <_vfprintf_r+0x17a>
8000fb04:	fa ca f9 78 	sub	r10,sp,-1672
8000fb08:	02 9b       	mov	r11,r1
8000fb0a:	08 9c       	mov	r12,r4
8000fb0c:	c3 af       	rcall	8000f980 <__sprint_r>
8000fb0e:	e0 81 0e c6 	brne	8001189a <_vfprintf_r+0x1efe>
8000fb12:	fa c3 f9 e0 	sub	r3,sp,-1568
8000fb16:	40 ba       	lddsp	r10,sp[0x2c]
8000fb18:	0c 0a       	add	r10,r6
8000fb1a:	50 ba       	stdsp	sp[0x2c],r10
8000fb1c:	05 89       	ld.ub	r9,r2[0x0]
8000fb1e:	30 08       	mov	r8,0
8000fb20:	f0 09 18 00 	cp.b	r9,r8
8000fb24:	e0 80 0e aa 	breq	80011878 <_vfprintf_r+0x1edc>
8000fb28:	30 09       	mov	r9,0
8000fb2a:	fb 68 06 bb 	st.b	sp[1723],r8
8000fb2e:	0e 96       	mov	r6,r7
8000fb30:	e4 c8 ff ff 	sub	r8,r2,-1
8000fb34:	3f fe       	mov	lr,-1
8000fb36:	50 93       	stdsp	sp[0x24],r3
8000fb38:	50 41       	stdsp	sp[0x10],r1
8000fb3a:	0e 93       	mov	r3,r7
8000fb3c:	04 91       	mov	r1,r2
8000fb3e:	50 89       	stdsp	sp[0x20],r9
8000fb40:	50 a8       	stdsp	sp[0x28],r8
8000fb42:	50 2e       	stdsp	sp[0x8],lr
8000fb44:	50 39       	stdsp	sp[0xc],r9
8000fb46:	12 95       	mov	r5,r9
8000fb48:	12 90       	mov	r0,r9
8000fb4a:	10 97       	mov	r7,r8
8000fb4c:	08 92       	mov	r2,r4
8000fb4e:	c0 78       	rjmp	8000fb5c <_vfprintf_r+0x1c0>
8000fb50:	3f fc       	mov	r12,-1
8000fb52:	08 97       	mov	r7,r4
8000fb54:	50 2c       	stdsp	sp[0x8],r12
8000fb56:	c0 38       	rjmp	8000fb5c <_vfprintf_r+0x1c0>
8000fb58:	30 0b       	mov	r11,0
8000fb5a:	50 3b       	stdsp	sp[0xc],r11
8000fb5c:	0f 38       	ld.ub	r8,r7++
8000fb5e:	c0 28       	rjmp	8000fb62 <_vfprintf_r+0x1c6>
8000fb60:	12 90       	mov	r0,r9
8000fb62:	f0 c9 00 20 	sub	r9,r8,32
8000fb66:	e0 49 00 58 	cp.w	r9,88
8000fb6a:	e0 8b 0a 30 	brhi	80010fca <_vfprintf_r+0x162e>
8000fb6e:	fe ca aa 22 	sub	r10,pc,-21982
8000fb72:	f4 09 03 2f 	ld.w	pc,r10[r9<<0x2]
8000fb76:	50 a7       	stdsp	sp[0x28],r7
8000fb78:	50 80       	stdsp	sp[0x20],r0
8000fb7a:	0c 97       	mov	r7,r6
8000fb7c:	04 94       	mov	r4,r2
8000fb7e:	06 96       	mov	r6,r3
8000fb80:	02 92       	mov	r2,r1
8000fb82:	fe c9 a7 fa 	sub	r9,pc,-22534
8000fb86:	40 93       	lddsp	r3,sp[0x24]
8000fb88:	10 90       	mov	r0,r8
8000fb8a:	40 41       	lddsp	r1,sp[0x10]
8000fb8c:	50 d9       	stdsp	sp[0x34],r9
8000fb8e:	e0 8f 08 8e 	bral	80010caa <_vfprintf_r+0x130e>
8000fb92:	30 08       	mov	r8,0
8000fb94:	fb 39 06 bb 	ld.ub	r9,sp[1723]
8000fb98:	f0 09 18 00 	cp.b	r9,r8
8000fb9c:	ce 01       	brne	8000fb5c <_vfprintf_r+0x1c0>
8000fb9e:	32 08       	mov	r8,32
8000fba0:	c6 e8       	rjmp	8000fc7c <_vfprintf_r+0x2e0>
8000fba2:	a1 a5       	sbr	r5,0x0
8000fba4:	cd cb       	rjmp	8000fb5c <_vfprintf_r+0x1c0>
8000fba6:	0f 89       	ld.ub	r9,r7[0x0]
8000fba8:	f2 c8 00 30 	sub	r8,r9,48
8000fbac:	58 98       	cp.w	r8,9
8000fbae:	e0 8b 00 1d 	brhi	8000fbe8 <_vfprintf_r+0x24c>
8000fbb2:	ee c8 ff ff 	sub	r8,r7,-1
8000fbb6:	30 0b       	mov	r11,0
8000fbb8:	23 09       	sub	r9,48
8000fbba:	f6 0b 00 2b 	add	r11,r11,r11<<0x2
8000fbbe:	f2 0b 00 1b 	add	r11,r9,r11<<0x1
8000fbc2:	11 39       	ld.ub	r9,r8++
8000fbc4:	f2 ca 00 30 	sub	r10,r9,48
8000fbc8:	58 9a       	cp.w	r10,9
8000fbca:	fe 98 ff f7 	brls	8000fbb8 <_vfprintf_r+0x21c>
8000fbce:	e0 49 00 24 	cp.w	r9,36
8000fbd2:	cc 31       	brne	8000fb58 <_vfprintf_r+0x1bc>
8000fbd4:	e0 4b 00 20 	cp.w	r11,32
8000fbd8:	e0 89 0e 60 	brgt	80011898 <_vfprintf_r+0x1efc>
8000fbdc:	20 1b       	sub	r11,1
8000fbde:	fa f9 06 b4 	ld.w	r9,sp[1716]
8000fbe2:	12 3b       	cp.w	r11,r9
8000fbe4:	c0 95       	brlt	8000fbf6 <_vfprintf_r+0x25a>
8000fbe6:	c1 08       	rjmp	8000fc06 <_vfprintf_r+0x26a>
8000fbe8:	fa f9 06 b4 	ld.w	r9,sp[1716]
8000fbec:	ec ca ff ff 	sub	r10,r6,-1
8000fbf0:	12 36       	cp.w	r6,r9
8000fbf2:	c1 f5       	brlt	8000fc30 <_vfprintf_r+0x294>
8000fbf4:	c2 68       	rjmp	8000fc40 <_vfprintf_r+0x2a4>
8000fbf6:	fa ce f9 44 	sub	lr,sp,-1724
8000fbfa:	10 97       	mov	r7,r8
8000fbfc:	fc 0b 00 3b 	add	r11,lr,r11<<0x3
8000fc00:	f6 f0 fd 88 	ld.w	r0,r11[-632]
8000fc04:	c3 58       	rjmp	8000fc6e <_vfprintf_r+0x2d2>
8000fc06:	10 97       	mov	r7,r8
8000fc08:	fa c8 f9 50 	sub	r8,sp,-1712
8000fc0c:	1a d8       	st.w	--sp,r8
8000fc0e:	fa c8 fa b8 	sub	r8,sp,-1352
8000fc12:	1a d8       	st.w	--sp,r8
8000fc14:	fa c8 fb b4 	sub	r8,sp,-1100
8000fc18:	02 9a       	mov	r10,r1
8000fc1a:	1a d8       	st.w	--sp,r8
8000fc1c:	04 9c       	mov	r12,r2
8000fc1e:	fa c8 f9 40 	sub	r8,sp,-1728
8000fc22:	fa c9 ff b4 	sub	r9,sp,-76
8000fc26:	fe b0 fd 25 	rcall	8000f670 <get_arg>
8000fc2a:	2f dd       	sub	sp,-12
8000fc2c:	78 00       	ld.w	r0,r12[0x0]
8000fc2e:	c2 08       	rjmp	8000fc6e <_vfprintf_r+0x2d2>
8000fc30:	fa cc f9 44 	sub	r12,sp,-1724
8000fc34:	14 96       	mov	r6,r10
8000fc36:	f8 03 00 38 	add	r8,r12,r3<<0x3
8000fc3a:	f0 f0 fd 88 	ld.w	r0,r8[-632]
8000fc3e:	c1 88       	rjmp	8000fc6e <_vfprintf_r+0x2d2>
8000fc40:	41 08       	lddsp	r8,sp[0x40]
8000fc42:	59 f9       	cp.w	r9,31
8000fc44:	e0 89 00 11 	brgt	8000fc66 <_vfprintf_r+0x2ca>
8000fc48:	f0 cb ff fc 	sub	r11,r8,-4
8000fc4c:	51 0b       	stdsp	sp[0x40],r11
8000fc4e:	70 00       	ld.w	r0,r8[0x0]
8000fc50:	fa cb f9 44 	sub	r11,sp,-1724
8000fc54:	f6 09 00 38 	add	r8,r11,r9<<0x3
8000fc58:	f1 40 fd 88 	st.w	r8[-632],r0
8000fc5c:	2f f9       	sub	r9,-1
8000fc5e:	14 96       	mov	r6,r10
8000fc60:	fb 49 06 b4 	st.w	sp[1716],r9
8000fc64:	c0 58       	rjmp	8000fc6e <_vfprintf_r+0x2d2>
8000fc66:	70 00       	ld.w	r0,r8[0x0]
8000fc68:	14 96       	mov	r6,r10
8000fc6a:	2f c8       	sub	r8,-4
8000fc6c:	51 08       	stdsp	sp[0x40],r8
8000fc6e:	58 00       	cp.w	r0,0
8000fc70:	fe 94 ff 76 	brge	8000fb5c <_vfprintf_r+0x1c0>
8000fc74:	5c 30       	neg	r0
8000fc76:	a3 a5       	sbr	r5,0x2
8000fc78:	c7 2b       	rjmp	8000fb5c <_vfprintf_r+0x1c0>
8000fc7a:	32 b8       	mov	r8,43
8000fc7c:	fb 68 06 bb 	st.b	sp[1723],r8
8000fc80:	c6 eb       	rjmp	8000fb5c <_vfprintf_r+0x1c0>
8000fc82:	0f 38       	ld.ub	r8,r7++
8000fc84:	e0 48 00 2a 	cp.w	r8,42
8000fc88:	c0 30       	breq	8000fc8e <_vfprintf_r+0x2f2>
8000fc8a:	30 09       	mov	r9,0
8000fc8c:	c7 98       	rjmp	8000fd7e <_vfprintf_r+0x3e2>
8000fc8e:	0f 88       	ld.ub	r8,r7[0x0]
8000fc90:	f0 c9 00 30 	sub	r9,r8,48
8000fc94:	58 99       	cp.w	r9,9
8000fc96:	e0 8b 00 1f 	brhi	8000fcd4 <_vfprintf_r+0x338>
8000fc9a:	ee c4 ff ff 	sub	r4,r7,-1
8000fc9e:	30 0b       	mov	r11,0
8000fca0:	23 08       	sub	r8,48
8000fca2:	f6 0b 00 2b 	add	r11,r11,r11<<0x2
8000fca6:	f0 0b 00 1b 	add	r11,r8,r11<<0x1
8000fcaa:	09 38       	ld.ub	r8,r4++
8000fcac:	f0 c9 00 30 	sub	r9,r8,48
8000fcb0:	58 99       	cp.w	r9,9
8000fcb2:	fe 98 ff f7 	brls	8000fca0 <_vfprintf_r+0x304>
8000fcb6:	e0 48 00 24 	cp.w	r8,36
8000fcba:	fe 91 ff 4f 	brne	8000fb58 <_vfprintf_r+0x1bc>
8000fcbe:	e0 4b 00 20 	cp.w	r11,32
8000fcc2:	e0 89 0d eb 	brgt	80011898 <_vfprintf_r+0x1efc>
8000fcc6:	20 1b       	sub	r11,1
8000fcc8:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000fccc:	10 3b       	cp.w	r11,r8
8000fcce:	c0 a5       	brlt	8000fce2 <_vfprintf_r+0x346>
8000fcd0:	c1 18       	rjmp	8000fcf2 <_vfprintf_r+0x356>
8000fcd2:	d7 03       	nop
8000fcd4:	fa fa 06 b4 	ld.w	r10,sp[1716]
8000fcd8:	ec c9 ff ff 	sub	r9,r6,-1
8000fcdc:	14 36       	cp.w	r6,r10
8000fcde:	c1 f5       	brlt	8000fd1c <_vfprintf_r+0x380>
8000fce0:	c2 88       	rjmp	8000fd30 <_vfprintf_r+0x394>
8000fce2:	fa ca f9 44 	sub	r10,sp,-1724
8000fce6:	f4 0b 00 3b 	add	r11,r10,r11<<0x3
8000fcea:	f6 fb fd 88 	ld.w	r11,r11[-632]
8000fcee:	50 2b       	stdsp	sp[0x8],r11
8000fcf0:	c3 c8       	rjmp	8000fd68 <_vfprintf_r+0x3cc>
8000fcf2:	fa c8 f9 50 	sub	r8,sp,-1712
8000fcf6:	1a d8       	st.w	--sp,r8
8000fcf8:	fa c8 fa b8 	sub	r8,sp,-1352
8000fcfc:	1a d8       	st.w	--sp,r8
8000fcfe:	fa c8 fb b4 	sub	r8,sp,-1100
8000fd02:	02 9a       	mov	r10,r1
8000fd04:	1a d8       	st.w	--sp,r8
8000fd06:	04 9c       	mov	r12,r2
8000fd08:	fa c8 f9 40 	sub	r8,sp,-1728
8000fd0c:	fa c9 ff b4 	sub	r9,sp,-76
8000fd10:	fe b0 fc b0 	rcall	8000f670 <get_arg>
8000fd14:	2f dd       	sub	sp,-12
8000fd16:	78 0c       	ld.w	r12,r12[0x0]
8000fd18:	50 2c       	stdsp	sp[0x8],r12
8000fd1a:	c2 78       	rjmp	8000fd68 <_vfprintf_r+0x3cc>
8000fd1c:	12 96       	mov	r6,r9
8000fd1e:	0e 94       	mov	r4,r7
8000fd20:	fa c9 f9 44 	sub	r9,sp,-1724
8000fd24:	f2 03 00 38 	add	r8,r9,r3<<0x3
8000fd28:	f0 f8 fd 88 	ld.w	r8,r8[-632]
8000fd2c:	50 28       	stdsp	sp[0x8],r8
8000fd2e:	c1 d8       	rjmp	8000fd68 <_vfprintf_r+0x3cc>
8000fd30:	41 08       	lddsp	r8,sp[0x40]
8000fd32:	59 fa       	cp.w	r10,31
8000fd34:	e0 89 00 14 	brgt	8000fd5c <_vfprintf_r+0x3c0>
8000fd38:	f0 cb ff fc 	sub	r11,r8,-4
8000fd3c:	70 08       	ld.w	r8,r8[0x0]
8000fd3e:	51 0b       	stdsp	sp[0x40],r11
8000fd40:	50 28       	stdsp	sp[0x8],r8
8000fd42:	fa c6 f9 44 	sub	r6,sp,-1724
8000fd46:	40 2e       	lddsp	lr,sp[0x8]
8000fd48:	ec 0a 00 38 	add	r8,r6,r10<<0x3
8000fd4c:	f1 4e fd 88 	st.w	r8[-632],lr
8000fd50:	2f fa       	sub	r10,-1
8000fd52:	0e 94       	mov	r4,r7
8000fd54:	fb 4a 06 b4 	st.w	sp[1716],r10
8000fd58:	12 96       	mov	r6,r9
8000fd5a:	c0 78       	rjmp	8000fd68 <_vfprintf_r+0x3cc>
8000fd5c:	70 0c       	ld.w	r12,r8[0x0]
8000fd5e:	0e 94       	mov	r4,r7
8000fd60:	2f c8       	sub	r8,-4
8000fd62:	50 2c       	stdsp	sp[0x8],r12
8000fd64:	12 96       	mov	r6,r9
8000fd66:	51 08       	stdsp	sp[0x40],r8
8000fd68:	40 2b       	lddsp	r11,sp[0x8]
8000fd6a:	58 0b       	cp.w	r11,0
8000fd6c:	fe 95 fe f2 	brlt	8000fb50 <_vfprintf_r+0x1b4>
8000fd70:	08 97       	mov	r7,r4
8000fd72:	cf 5a       	rjmp	8000fb5c <_vfprintf_r+0x1c0>
8000fd74:	f2 09 00 29 	add	r9,r9,r9<<0x2
8000fd78:	0f 38       	ld.ub	r8,r7++
8000fd7a:	f4 09 00 19 	add	r9,r10,r9<<0x1
8000fd7e:	f0 ca 00 30 	sub	r10,r8,48
8000fd82:	58 9a       	cp.w	r10,9
8000fd84:	fe 98 ff f8 	brls	8000fd74 <_vfprintf_r+0x3d8>
8000fd88:	3f fa       	mov	r10,-1
8000fd8a:	f2 0a 0c 49 	max	r9,r9,r10
8000fd8e:	50 29       	stdsp	sp[0x8],r9
8000fd90:	ce 9a       	rjmp	8000fb62 <_vfprintf_r+0x1c6>
8000fd92:	a7 b5       	sbr	r5,0x7
8000fd94:	ce 4a       	rjmp	8000fb5c <_vfprintf_r+0x1c0>
8000fd96:	30 09       	mov	r9,0
8000fd98:	23 08       	sub	r8,48
8000fd9a:	f2 09 00 29 	add	r9,r9,r9<<0x2
8000fd9e:	f0 09 00 19 	add	r9,r8,r9<<0x1
8000fda2:	0f 38       	ld.ub	r8,r7++
8000fda4:	f0 ca 00 30 	sub	r10,r8,48
8000fda8:	58 9a       	cp.w	r10,9
8000fdaa:	fe 98 ff f7 	brls	8000fd98 <_vfprintf_r+0x3fc>
8000fdae:	e0 48 00 24 	cp.w	r8,36
8000fdb2:	fe 91 fe d7 	brne	8000fb60 <_vfprintf_r+0x1c4>
8000fdb6:	e0 49 00 20 	cp.w	r9,32
8000fdba:	e0 89 0d 6f 	brgt	80011898 <_vfprintf_r+0x1efc>
8000fdbe:	f2 c3 00 01 	sub	r3,r9,1
8000fdc2:	30 19       	mov	r9,1
8000fdc4:	50 39       	stdsp	sp[0xc],r9
8000fdc6:	cc ba       	rjmp	8000fb5c <_vfprintf_r+0x1c0>
8000fdc8:	a3 b5       	sbr	r5,0x3
8000fdca:	cc 9a       	rjmp	8000fb5c <_vfprintf_r+0x1c0>
8000fdcc:	a7 a5       	sbr	r5,0x6
8000fdce:	cc 7a       	rjmp	8000fb5c <_vfprintf_r+0x1c0>
8000fdd0:	0a 98       	mov	r8,r5
8000fdd2:	a5 b5       	sbr	r5,0x5
8000fdd4:	a5 a8       	sbr	r8,0x4
8000fdd6:	0f 89       	ld.ub	r9,r7[0x0]
8000fdd8:	36 ce       	mov	lr,108
8000fdda:	fc 09 18 00 	cp.b	r9,lr
8000fdde:	f7 b7 00 ff 	subeq	r7,-1
8000fde2:	f0 05 17 10 	movne	r5,r8
8000fde6:	cb ba       	rjmp	8000fb5c <_vfprintf_r+0x1c0>
8000fde8:	a5 b5       	sbr	r5,0x5
8000fdea:	cb 9a       	rjmp	8000fb5c <_vfprintf_r+0x1c0>
8000fdec:	50 a7       	stdsp	sp[0x28],r7
8000fdee:	50 80       	stdsp	sp[0x20],r0
8000fdf0:	0c 97       	mov	r7,r6
8000fdf2:	10 90       	mov	r0,r8
8000fdf4:	06 96       	mov	r6,r3
8000fdf6:	04 94       	mov	r4,r2
8000fdf8:	40 93       	lddsp	r3,sp[0x24]
8000fdfa:	02 92       	mov	r2,r1
8000fdfc:	0e 99       	mov	r9,r7
8000fdfe:	40 41       	lddsp	r1,sp[0x10]
8000fe00:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000fe04:	40 3c       	lddsp	r12,sp[0xc]
8000fe06:	58 0c       	cp.w	r12,0
8000fe08:	c1 d0       	breq	8000fe42 <_vfprintf_r+0x4a6>
8000fe0a:	10 36       	cp.w	r6,r8
8000fe0c:	c0 64       	brge	8000fe18 <_vfprintf_r+0x47c>
8000fe0e:	fa cb f9 44 	sub	r11,sp,-1724
8000fe12:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000fe16:	c1 d8       	rjmp	8000fe50 <_vfprintf_r+0x4b4>
8000fe18:	fa c8 f9 50 	sub	r8,sp,-1712
8000fe1c:	1a d8       	st.w	--sp,r8
8000fe1e:	fa c8 fa b8 	sub	r8,sp,-1352
8000fe22:	1a d8       	st.w	--sp,r8
8000fe24:	fa c8 fb b4 	sub	r8,sp,-1100
8000fe28:	1a d8       	st.w	--sp,r8
8000fe2a:	fa c8 f9 40 	sub	r8,sp,-1728
8000fe2e:	fa c9 ff b4 	sub	r9,sp,-76
8000fe32:	04 9a       	mov	r10,r2
8000fe34:	0c 9b       	mov	r11,r6
8000fe36:	08 9c       	mov	r12,r4
8000fe38:	fe b0 fc 1c 	rcall	8000f670 <get_arg>
8000fe3c:	2f dd       	sub	sp,-12
8000fe3e:	19 b8       	ld.ub	r8,r12[0x3]
8000fe40:	c2 28       	rjmp	8000fe84 <_vfprintf_r+0x4e8>
8000fe42:	2f f7       	sub	r7,-1
8000fe44:	10 39       	cp.w	r9,r8
8000fe46:	c0 84       	brge	8000fe56 <_vfprintf_r+0x4ba>
8000fe48:	fa ca f9 44 	sub	r10,sp,-1724
8000fe4c:	f4 06 00 36 	add	r6,r10,r6<<0x3
8000fe50:	ed 38 fd 8b 	ld.ub	r8,r6[-629]
8000fe54:	c1 88       	rjmp	8000fe84 <_vfprintf_r+0x4e8>
8000fe56:	41 09       	lddsp	r9,sp[0x40]
8000fe58:	59 f8       	cp.w	r8,31
8000fe5a:	e0 89 00 12 	brgt	8000fe7e <_vfprintf_r+0x4e2>
8000fe5e:	f2 ca ff fc 	sub	r10,r9,-4
8000fe62:	51 0a       	stdsp	sp[0x40],r10
8000fe64:	72 09       	ld.w	r9,r9[0x0]
8000fe66:	fa c6 f9 44 	sub	r6,sp,-1724
8000fe6a:	ec 08 00 3a 	add	r10,r6,r8<<0x3
8000fe6e:	2f f8       	sub	r8,-1
8000fe70:	f5 49 fd 88 	st.w	r10[-632],r9
8000fe74:	fb 48 06 b4 	st.w	sp[1716],r8
8000fe78:	f1 d9 c0 08 	bfextu	r8,r9,0x0,0x8
8000fe7c:	c0 48       	rjmp	8000fe84 <_vfprintf_r+0x4e8>
8000fe7e:	13 b8       	ld.ub	r8,r9[0x3]
8000fe80:	2f c9       	sub	r9,-4
8000fe82:	51 09       	stdsp	sp[0x40],r9
8000fe84:	fb 68 06 60 	st.b	sp[1632],r8
8000fe88:	30 0e       	mov	lr,0
8000fe8a:	30 08       	mov	r8,0
8000fe8c:	30 12       	mov	r2,1
8000fe8e:	fb 68 06 bb 	st.b	sp[1723],r8
8000fe92:	50 2e       	stdsp	sp[0x8],lr
8000fe94:	e0 8f 08 ad 	bral	80010fee <_vfprintf_r+0x1652>
8000fe98:	50 a7       	stdsp	sp[0x28],r7
8000fe9a:	50 80       	stdsp	sp[0x20],r0
8000fe9c:	0c 97       	mov	r7,r6
8000fe9e:	04 94       	mov	r4,r2
8000fea0:	06 96       	mov	r6,r3
8000fea2:	02 92       	mov	r2,r1
8000fea4:	40 93       	lddsp	r3,sp[0x24]
8000fea6:	10 90       	mov	r0,r8
8000fea8:	40 41       	lddsp	r1,sp[0x10]
8000feaa:	a5 a5       	sbr	r5,0x4
8000feac:	c0 a8       	rjmp	8000fec0 <_vfprintf_r+0x524>
8000feae:	50 a7       	stdsp	sp[0x28],r7
8000feb0:	50 80       	stdsp	sp[0x20],r0
8000feb2:	0c 97       	mov	r7,r6
8000feb4:	04 94       	mov	r4,r2
8000feb6:	06 96       	mov	r6,r3
8000feb8:	02 92       	mov	r2,r1
8000feba:	40 93       	lddsp	r3,sp[0x24]
8000febc:	10 90       	mov	r0,r8
8000febe:	40 41       	lddsp	r1,sp[0x10]
8000fec0:	ed b5 00 05 	bld	r5,0x5
8000fec4:	c5 11       	brne	8000ff66 <_vfprintf_r+0x5ca>
8000fec6:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000feca:	40 3c       	lddsp	r12,sp[0xc]
8000fecc:	58 0c       	cp.w	r12,0
8000fece:	c1 e0       	breq	8000ff0a <_vfprintf_r+0x56e>
8000fed0:	10 36       	cp.w	r6,r8
8000fed2:	c0 64       	brge	8000fede <_vfprintf_r+0x542>
8000fed4:	fa cb f9 44 	sub	r11,sp,-1724
8000fed8:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000fedc:	c2 08       	rjmp	8000ff1c <_vfprintf_r+0x580>
8000fede:	fa c8 f9 50 	sub	r8,sp,-1712
8000fee2:	1a d8       	st.w	--sp,r8
8000fee4:	fa c8 fa b8 	sub	r8,sp,-1352
8000fee8:	0c 9b       	mov	r11,r6
8000feea:	1a d8       	st.w	--sp,r8
8000feec:	fa c8 fb b4 	sub	r8,sp,-1100
8000fef0:	1a d8       	st.w	--sp,r8
8000fef2:	fa c9 ff b4 	sub	r9,sp,-76
8000fef6:	fa c8 f9 40 	sub	r8,sp,-1728
8000fefa:	04 9a       	mov	r10,r2
8000fefc:	08 9c       	mov	r12,r4
8000fefe:	fe b0 fb b9 	rcall	8000f670 <get_arg>
8000ff02:	2f dd       	sub	sp,-12
8000ff04:	78 1b       	ld.w	r11,r12[0x4]
8000ff06:	78 09       	ld.w	r9,r12[0x0]
8000ff08:	c2 b8       	rjmp	8000ff5e <_vfprintf_r+0x5c2>
8000ff0a:	ee ca ff ff 	sub	r10,r7,-1
8000ff0e:	10 37       	cp.w	r7,r8
8000ff10:	c0 b4       	brge	8000ff26 <_vfprintf_r+0x58a>
8000ff12:	fa c9 f9 44 	sub	r9,sp,-1724
8000ff16:	14 97       	mov	r7,r10
8000ff18:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000ff1c:	ec fb fd 8c 	ld.w	r11,r6[-628]
8000ff20:	ec f9 fd 88 	ld.w	r9,r6[-632]
8000ff24:	c1 d8       	rjmp	8000ff5e <_vfprintf_r+0x5c2>
8000ff26:	41 09       	lddsp	r9,sp[0x40]
8000ff28:	59 f8       	cp.w	r8,31
8000ff2a:	e0 89 00 14 	brgt	8000ff52 <_vfprintf_r+0x5b6>
8000ff2e:	f2 cb ff f8 	sub	r11,r9,-8
8000ff32:	51 0b       	stdsp	sp[0x40],r11
8000ff34:	fa c6 f9 44 	sub	r6,sp,-1724
8000ff38:	72 1b       	ld.w	r11,r9[0x4]
8000ff3a:	ec 08 00 3c 	add	r12,r6,r8<<0x3
8000ff3e:	72 09       	ld.w	r9,r9[0x0]
8000ff40:	f9 4b fd 8c 	st.w	r12[-628],r11
8000ff44:	f9 49 fd 88 	st.w	r12[-632],r9
8000ff48:	2f f8       	sub	r8,-1
8000ff4a:	14 97       	mov	r7,r10
8000ff4c:	fb 48 06 b4 	st.w	sp[1716],r8
8000ff50:	c0 78       	rjmp	8000ff5e <_vfprintf_r+0x5c2>
8000ff52:	f2 c8 ff f8 	sub	r8,r9,-8
8000ff56:	72 1b       	ld.w	r11,r9[0x4]
8000ff58:	14 97       	mov	r7,r10
8000ff5a:	51 08       	stdsp	sp[0x40],r8
8000ff5c:	72 09       	ld.w	r9,r9[0x0]
8000ff5e:	16 98       	mov	r8,r11
8000ff60:	fa e9 00 00 	st.d	sp[0],r8
8000ff64:	ca e8       	rjmp	800100c0 <_vfprintf_r+0x724>
8000ff66:	ed b5 00 04 	bld	r5,0x4
8000ff6a:	c1 71       	brne	8000ff98 <_vfprintf_r+0x5fc>
8000ff6c:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000ff70:	40 3e       	lddsp	lr,sp[0xc]
8000ff72:	58 0e       	cp.w	lr,0
8000ff74:	c0 80       	breq	8000ff84 <_vfprintf_r+0x5e8>
8000ff76:	10 36       	cp.w	r6,r8
8000ff78:	c6 94       	brge	8001004a <_vfprintf_r+0x6ae>
8000ff7a:	fa cc f9 44 	sub	r12,sp,-1724
8000ff7e:	f8 06 00 36 	add	r6,r12,r6<<0x3
8000ff82:	c8 28       	rjmp	80010086 <_vfprintf_r+0x6ea>
8000ff84:	ee ca ff ff 	sub	r10,r7,-1
8000ff88:	10 37       	cp.w	r7,r8
8000ff8a:	e0 84 00 81 	brge	8001008c <_vfprintf_r+0x6f0>
8000ff8e:	fa cb f9 44 	sub	r11,sp,-1724
8000ff92:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000ff96:	c7 78       	rjmp	80010084 <_vfprintf_r+0x6e8>
8000ff98:	ed b5 00 06 	bld	r5,0x6
8000ff9c:	c4 b1       	brne	80010032 <_vfprintf_r+0x696>
8000ff9e:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000ffa2:	40 3c       	lddsp	r12,sp[0xc]
8000ffa4:	58 0c       	cp.w	r12,0
8000ffa6:	c1 d0       	breq	8000ffe0 <_vfprintf_r+0x644>
8000ffa8:	10 36       	cp.w	r6,r8
8000ffaa:	c0 64       	brge	8000ffb6 <_vfprintf_r+0x61a>
8000ffac:	fa cb f9 44 	sub	r11,sp,-1724
8000ffb0:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000ffb4:	c1 f8       	rjmp	8000fff2 <_vfprintf_r+0x656>
8000ffb6:	fa c8 f9 50 	sub	r8,sp,-1712
8000ffba:	1a d8       	st.w	--sp,r8
8000ffbc:	fa c8 fa b8 	sub	r8,sp,-1352
8000ffc0:	1a d8       	st.w	--sp,r8
8000ffc2:	fa c8 fb b4 	sub	r8,sp,-1100
8000ffc6:	1a d8       	st.w	--sp,r8
8000ffc8:	fa c8 f9 40 	sub	r8,sp,-1728
8000ffcc:	fa c9 ff b4 	sub	r9,sp,-76
8000ffd0:	04 9a       	mov	r10,r2
8000ffd2:	0c 9b       	mov	r11,r6
8000ffd4:	08 9c       	mov	r12,r4
8000ffd6:	fe b0 fb 4d 	rcall	8000f670 <get_arg>
8000ffda:	2f dd       	sub	sp,-12
8000ffdc:	98 18       	ld.sh	r8,r12[0x2]
8000ffde:	c2 68       	rjmp	8001002a <_vfprintf_r+0x68e>
8000ffe0:	ee ca ff ff 	sub	r10,r7,-1
8000ffe4:	10 37       	cp.w	r7,r8
8000ffe6:	c0 94       	brge	8000fff8 <_vfprintf_r+0x65c>
8000ffe8:	fa c9 f9 44 	sub	r9,sp,-1724
8000ffec:	14 97       	mov	r7,r10
8000ffee:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000fff2:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
8000fff6:	c1 a8       	rjmp	8001002a <_vfprintf_r+0x68e>
8000fff8:	41 09       	lddsp	r9,sp[0x40]
8000fffa:	59 f8       	cp.w	r8,31
8000fffc:	e0 89 00 13 	brgt	80010022 <_vfprintf_r+0x686>
80010000:	f2 cb ff fc 	sub	r11,r9,-4
80010004:	51 0b       	stdsp	sp[0x40],r11
80010006:	72 09       	ld.w	r9,r9[0x0]
80010008:	fa c6 f9 44 	sub	r6,sp,-1724
8001000c:	ec 08 00 3b 	add	r11,r6,r8<<0x3
80010010:	2f f8       	sub	r8,-1
80010012:	f7 49 fd 88 	st.w	r11[-632],r9
80010016:	fb 48 06 b4 	st.w	sp[1716],r8
8001001a:	14 97       	mov	r7,r10
8001001c:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
80010020:	c0 58       	rjmp	8001002a <_vfprintf_r+0x68e>
80010022:	92 18       	ld.sh	r8,r9[0x2]
80010024:	14 97       	mov	r7,r10
80010026:	2f c9       	sub	r9,-4
80010028:	51 09       	stdsp	sp[0x40],r9
8001002a:	50 18       	stdsp	sp[0x4],r8
8001002c:	bf 58       	asr	r8,0x1f
8001002e:	50 08       	stdsp	sp[0x0],r8
80010030:	c4 88       	rjmp	800100c0 <_vfprintf_r+0x724>
80010032:	fa f8 06 b4 	ld.w	r8,sp[1716]
80010036:	40 3c       	lddsp	r12,sp[0xc]
80010038:	58 0c       	cp.w	r12,0
8001003a:	c1 d0       	breq	80010074 <_vfprintf_r+0x6d8>
8001003c:	10 36       	cp.w	r6,r8
8001003e:	c0 64       	brge	8001004a <_vfprintf_r+0x6ae>
80010040:	fa cb f9 44 	sub	r11,sp,-1724
80010044:	f6 06 00 36 	add	r6,r11,r6<<0x3
80010048:	c1 f8       	rjmp	80010086 <_vfprintf_r+0x6ea>
8001004a:	fa c8 f9 50 	sub	r8,sp,-1712
8001004e:	1a d8       	st.w	--sp,r8
80010050:	fa c8 fa b8 	sub	r8,sp,-1352
80010054:	0c 9b       	mov	r11,r6
80010056:	1a d8       	st.w	--sp,r8
80010058:	fa c8 fb b4 	sub	r8,sp,-1100
8001005c:	04 9a       	mov	r10,r2
8001005e:	1a d8       	st.w	--sp,r8
80010060:	08 9c       	mov	r12,r4
80010062:	fa c8 f9 40 	sub	r8,sp,-1728
80010066:	fa c9 ff b4 	sub	r9,sp,-76
8001006a:	fe b0 fb 03 	rcall	8000f670 <get_arg>
8001006e:	2f dd       	sub	sp,-12
80010070:	78 0b       	ld.w	r11,r12[0x0]
80010072:	c2 48       	rjmp	800100ba <_vfprintf_r+0x71e>
80010074:	ee ca ff ff 	sub	r10,r7,-1
80010078:	10 37       	cp.w	r7,r8
8001007a:	c0 94       	brge	8001008c <_vfprintf_r+0x6f0>
8001007c:	fa c9 f9 44 	sub	r9,sp,-1724
80010080:	f2 06 00 36 	add	r6,r9,r6<<0x3
80010084:	14 97       	mov	r7,r10
80010086:	ec fb fd 88 	ld.w	r11,r6[-632]
8001008a:	c1 88       	rjmp	800100ba <_vfprintf_r+0x71e>
8001008c:	41 09       	lddsp	r9,sp[0x40]
8001008e:	59 f8       	cp.w	r8,31
80010090:	e0 89 00 11 	brgt	800100b2 <_vfprintf_r+0x716>
80010094:	f2 cb ff fc 	sub	r11,r9,-4
80010098:	51 0b       	stdsp	sp[0x40],r11
8001009a:	fa c6 f9 44 	sub	r6,sp,-1724
8001009e:	72 0b       	ld.w	r11,r9[0x0]
800100a0:	ec 08 00 39 	add	r9,r6,r8<<0x3
800100a4:	f3 4b fd 88 	st.w	r9[-632],r11
800100a8:	2f f8       	sub	r8,-1
800100aa:	14 97       	mov	r7,r10
800100ac:	fb 48 06 b4 	st.w	sp[1716],r8
800100b0:	c0 58       	rjmp	800100ba <_vfprintf_r+0x71e>
800100b2:	72 0b       	ld.w	r11,r9[0x0]
800100b4:	14 97       	mov	r7,r10
800100b6:	2f c9       	sub	r9,-4
800100b8:	51 09       	stdsp	sp[0x40],r9
800100ba:	50 1b       	stdsp	sp[0x4],r11
800100bc:	bf 5b       	asr	r11,0x1f
800100be:	50 0b       	stdsp	sp[0x0],r11
800100c0:	fa ea 00 00 	ld.d	r10,sp[0]
800100c4:	58 0a       	cp.w	r10,0
800100c6:	5c 2b       	cpc	r11
800100c8:	c0 e4       	brge	800100e4 <_vfprintf_r+0x748>
800100ca:	30 08       	mov	r8,0
800100cc:	fa ea 00 00 	ld.d	r10,sp[0]
800100d0:	30 09       	mov	r9,0
800100d2:	f0 0a 01 0a 	sub	r10,r8,r10
800100d6:	f2 0b 01 4b 	sbc	r11,r9,r11
800100da:	32 d8       	mov	r8,45
800100dc:	fa eb 00 00 	st.d	sp[0],r10
800100e0:	fb 68 06 bb 	st.b	sp[1723],r8
800100e4:	30 18       	mov	r8,1
800100e6:	e0 8f 06 fa 	bral	80010eda <_vfprintf_r+0x153e>
800100ea:	50 a7       	stdsp	sp[0x28],r7
800100ec:	50 80       	stdsp	sp[0x20],r0
800100ee:	0c 97       	mov	r7,r6
800100f0:	04 94       	mov	r4,r2
800100f2:	06 96       	mov	r6,r3
800100f4:	02 92       	mov	r2,r1
800100f6:	40 93       	lddsp	r3,sp[0x24]
800100f8:	10 90       	mov	r0,r8
800100fa:	40 41       	lddsp	r1,sp[0x10]
800100fc:	0e 99       	mov	r9,r7
800100fe:	ed b5 00 03 	bld	r5,0x3
80010102:	c4 11       	brne	80010184 <_vfprintf_r+0x7e8>
80010104:	fa f8 06 b4 	ld.w	r8,sp[1716]
80010108:	40 3a       	lddsp	r10,sp[0xc]
8001010a:	58 0a       	cp.w	r10,0
8001010c:	c1 90       	breq	8001013e <_vfprintf_r+0x7a2>
8001010e:	10 36       	cp.w	r6,r8
80010110:	c6 45       	brlt	800101d8 <_vfprintf_r+0x83c>
80010112:	fa c8 f9 50 	sub	r8,sp,-1712
80010116:	1a d8       	st.w	--sp,r8
80010118:	fa c8 fa b8 	sub	r8,sp,-1352
8001011c:	1a d8       	st.w	--sp,r8
8001011e:	fa c8 fb b4 	sub	r8,sp,-1100
80010122:	0c 9b       	mov	r11,r6
80010124:	1a d8       	st.w	--sp,r8
80010126:	04 9a       	mov	r10,r2
80010128:	fa c8 f9 40 	sub	r8,sp,-1728
8001012c:	fa c9 ff b4 	sub	r9,sp,-76
80010130:	08 9c       	mov	r12,r4
80010132:	fe b0 fa 9f 	rcall	8000f670 <get_arg>
80010136:	2f dd       	sub	sp,-12
80010138:	78 16       	ld.w	r6,r12[0x4]
8001013a:	50 76       	stdsp	sp[0x1c],r6
8001013c:	c4 88       	rjmp	800101cc <_vfprintf_r+0x830>
8001013e:	2f f7       	sub	r7,-1
80010140:	10 39       	cp.w	r9,r8
80010142:	c0 c4       	brge	8001015a <_vfprintf_r+0x7be>
80010144:	fa ce f9 44 	sub	lr,sp,-1724
80010148:	fc 06 00 36 	add	r6,lr,r6<<0x3
8001014c:	ec fc fd 8c 	ld.w	r12,r6[-628]
80010150:	50 7c       	stdsp	sp[0x1c],r12
80010152:	ec f6 fd 88 	ld.w	r6,r6[-632]
80010156:	50 56       	stdsp	sp[0x14],r6
80010158:	c6 68       	rjmp	80010224 <_vfprintf_r+0x888>
8001015a:	41 09       	lddsp	r9,sp[0x40]
8001015c:	59 f8       	cp.w	r8,31
8001015e:	e0 89 00 10 	brgt	8001017e <_vfprintf_r+0x7e2>
80010162:	f2 ca ff f8 	sub	r10,r9,-8
80010166:	72 1b       	ld.w	r11,r9[0x4]
80010168:	51 0a       	stdsp	sp[0x40],r10
8001016a:	72 09       	ld.w	r9,r9[0x0]
8001016c:	fa ca f9 44 	sub	r10,sp,-1724
80010170:	50 7b       	stdsp	sp[0x1c],r11
80010172:	50 59       	stdsp	sp[0x14],r9
80010174:	f4 08 00 39 	add	r9,r10,r8<<0x3
80010178:	40 5b       	lddsp	r11,sp[0x14]
8001017a:	40 7a       	lddsp	r10,sp[0x1c]
8001017c:	c4 78       	rjmp	8001020a <_vfprintf_r+0x86e>
8001017e:	72 18       	ld.w	r8,r9[0x4]
80010180:	50 78       	stdsp	sp[0x1c],r8
80010182:	c4 c8       	rjmp	8001021a <_vfprintf_r+0x87e>
80010184:	fa f8 06 b4 	ld.w	r8,sp[1716]
80010188:	40 3e       	lddsp	lr,sp[0xc]
8001018a:	58 0e       	cp.w	lr,0
8001018c:	c2 30       	breq	800101d2 <_vfprintf_r+0x836>
8001018e:	10 36       	cp.w	r6,r8
80010190:	c0 94       	brge	800101a2 <_vfprintf_r+0x806>
80010192:	fa cc f9 44 	sub	r12,sp,-1724
80010196:	f8 06 00 36 	add	r6,r12,r6<<0x3
8001019a:	ec fb fd 8c 	ld.w	r11,r6[-628]
8001019e:	50 7b       	stdsp	sp[0x1c],r11
800101a0:	cd 9b       	rjmp	80010152 <_vfprintf_r+0x7b6>
800101a2:	fa c8 f9 50 	sub	r8,sp,-1712
800101a6:	1a d8       	st.w	--sp,r8
800101a8:	fa c8 fa b8 	sub	r8,sp,-1352
800101ac:	04 9a       	mov	r10,r2
800101ae:	1a d8       	st.w	--sp,r8
800101b0:	fa c8 fb b4 	sub	r8,sp,-1100
800101b4:	0c 9b       	mov	r11,r6
800101b6:	1a d8       	st.w	--sp,r8
800101b8:	08 9c       	mov	r12,r4
800101ba:	fa c8 f9 40 	sub	r8,sp,-1728
800101be:	fa c9 ff b4 	sub	r9,sp,-76
800101c2:	fe b0 fa 57 	rcall	8000f670 <get_arg>
800101c6:	2f dd       	sub	sp,-12
800101c8:	78 1a       	ld.w	r10,r12[0x4]
800101ca:	50 7a       	stdsp	sp[0x1c],r10
800101cc:	78 0c       	ld.w	r12,r12[0x0]
800101ce:	50 5c       	stdsp	sp[0x14],r12
800101d0:	c2 a8       	rjmp	80010224 <_vfprintf_r+0x888>
800101d2:	2f f7       	sub	r7,-1
800101d4:	10 39       	cp.w	r9,r8
800101d6:	c0 94       	brge	800101e8 <_vfprintf_r+0x84c>
800101d8:	fa c9 f9 44 	sub	r9,sp,-1724
800101dc:	f2 06 00 36 	add	r6,r9,r6<<0x3
800101e0:	ec f8 fd 8c 	ld.w	r8,r6[-628]
800101e4:	50 78       	stdsp	sp[0x1c],r8
800101e6:	cb 6b       	rjmp	80010152 <_vfprintf_r+0x7b6>
800101e8:	41 09       	lddsp	r9,sp[0x40]
800101ea:	59 f8       	cp.w	r8,31
800101ec:	e0 89 00 15 	brgt	80010216 <_vfprintf_r+0x87a>
800101f0:	f2 ca ff f8 	sub	r10,r9,-8
800101f4:	72 16       	ld.w	r6,r9[0x4]
800101f6:	72 09       	ld.w	r9,r9[0x0]
800101f8:	51 0a       	stdsp	sp[0x40],r10
800101fa:	50 59       	stdsp	sp[0x14],r9
800101fc:	fa ce f9 44 	sub	lr,sp,-1724
80010200:	50 76       	stdsp	sp[0x1c],r6
80010202:	fc 08 00 39 	add	r9,lr,r8<<0x3
80010206:	40 5b       	lddsp	r11,sp[0x14]
80010208:	0c 9a       	mov	r10,r6
8001020a:	f2 eb fd 88 	st.d	r9[-632],r10
8001020e:	2f f8       	sub	r8,-1
80010210:	fb 48 06 b4 	st.w	sp[1716],r8
80010214:	c0 88       	rjmp	80010224 <_vfprintf_r+0x888>
80010216:	72 1c       	ld.w	r12,r9[0x4]
80010218:	50 7c       	stdsp	sp[0x1c],r12
8001021a:	f2 c8 ff f8 	sub	r8,r9,-8
8001021e:	51 08       	stdsp	sp[0x40],r8
80010220:	72 09       	ld.w	r9,r9[0x0]
80010222:	50 59       	stdsp	sp[0x14],r9
80010224:	40 5b       	lddsp	r11,sp[0x14]
80010226:	40 7a       	lddsp	r10,sp[0x1c]
80010228:	e0 a0 1c d6 	rcall	80013bd4 <__isinfd>
8001022c:	18 96       	mov	r6,r12
8001022e:	c1 70       	breq	8001025c <_vfprintf_r+0x8c0>
80010230:	30 08       	mov	r8,0
80010232:	30 09       	mov	r9,0
80010234:	40 5b       	lddsp	r11,sp[0x14]
80010236:	40 7a       	lddsp	r10,sp[0x1c]
80010238:	e0 a0 21 c4 	rcall	800145c0 <__avr32_f64_cmp_lt>
8001023c:	c0 40       	breq	80010244 <_vfprintf_r+0x8a8>
8001023e:	32 d8       	mov	r8,45
80010240:	fb 68 06 bb 	st.b	sp[1723],r8
80010244:	fe c8 ae a8 	sub	r8,pc,-20824
80010248:	fe c6 ae a8 	sub	r6,pc,-20824
8001024c:	a7 d5       	cbr	r5,0x7
8001024e:	e0 40 00 47 	cp.w	r0,71
80010252:	f0 06 17 a0 	movle	r6,r8
80010256:	30 32       	mov	r2,3
80010258:	e0 8f 06 ce 	bral	80010ff4 <_vfprintf_r+0x1658>
8001025c:	40 5b       	lddsp	r11,sp[0x14]
8001025e:	40 7a       	lddsp	r10,sp[0x1c]
80010260:	e0 a0 1c cf 	rcall	80013bfe <__isnand>
80010264:	c0 e0       	breq	80010280 <_vfprintf_r+0x8e4>
80010266:	50 26       	stdsp	sp[0x8],r6
80010268:	fe c8 ae c4 	sub	r8,pc,-20796
8001026c:	fe c6 ae c4 	sub	r6,pc,-20796
80010270:	a7 d5       	cbr	r5,0x7
80010272:	e0 40 00 47 	cp.w	r0,71
80010276:	f0 06 17 a0 	movle	r6,r8
8001027a:	30 32       	mov	r2,3
8001027c:	e0 8f 06 c2 	bral	80011000 <_vfprintf_r+0x1664>
80010280:	40 2a       	lddsp	r10,sp[0x8]
80010282:	5b fa       	cp.w	r10,-1
80010284:	c0 41       	brne	8001028c <_vfprintf_r+0x8f0>
80010286:	30 69       	mov	r9,6
80010288:	50 29       	stdsp	sp[0x8],r9
8001028a:	c1 18       	rjmp	800102ac <_vfprintf_r+0x910>
8001028c:	e0 40 00 47 	cp.w	r0,71
80010290:	5f 09       	sreq	r9
80010292:	e0 40 00 67 	cp.w	r0,103
80010296:	5f 08       	sreq	r8
80010298:	f3 e8 10 08 	or	r8,r9,r8
8001029c:	f8 08 18 00 	cp.b	r8,r12
800102a0:	c0 60       	breq	800102ac <_vfprintf_r+0x910>
800102a2:	40 28       	lddsp	r8,sp[0x8]
800102a4:	58 08       	cp.w	r8,0
800102a6:	f9 b8 00 01 	moveq	r8,1
800102aa:	50 28       	stdsp	sp[0x8],r8
800102ac:	40 78       	lddsp	r8,sp[0x1c]
800102ae:	40 59       	lddsp	r9,sp[0x14]
800102b0:	fa e9 06 94 	st.d	sp[1684],r8
800102b4:	a9 a5       	sbr	r5,0x8
800102b6:	fa f8 06 94 	ld.w	r8,sp[1684]
800102ba:	58 08       	cp.w	r8,0
800102bc:	c0 65       	brlt	800102c8 <_vfprintf_r+0x92c>
800102be:	40 5e       	lddsp	lr,sp[0x14]
800102c0:	30 0c       	mov	r12,0
800102c2:	50 6e       	stdsp	sp[0x18],lr
800102c4:	50 9c       	stdsp	sp[0x24],r12
800102c6:	c0 78       	rjmp	800102d4 <_vfprintf_r+0x938>
800102c8:	40 5b       	lddsp	r11,sp[0x14]
800102ca:	32 da       	mov	r10,45
800102cc:	ee 1b 80 00 	eorh	r11,0x8000
800102d0:	50 9a       	stdsp	sp[0x24],r10
800102d2:	50 6b       	stdsp	sp[0x18],r11
800102d4:	e0 40 00 46 	cp.w	r0,70
800102d8:	5f 09       	sreq	r9
800102da:	e0 40 00 66 	cp.w	r0,102
800102de:	5f 08       	sreq	r8
800102e0:	f3 e8 10 08 	or	r8,r9,r8
800102e4:	50 48       	stdsp	sp[0x10],r8
800102e6:	c0 40       	breq	800102ee <_vfprintf_r+0x952>
800102e8:	40 22       	lddsp	r2,sp[0x8]
800102ea:	30 39       	mov	r9,3
800102ec:	c1 08       	rjmp	8001030c <_vfprintf_r+0x970>
800102ee:	e0 40 00 45 	cp.w	r0,69
800102f2:	5f 09       	sreq	r9
800102f4:	e0 40 00 65 	cp.w	r0,101
800102f8:	5f 08       	sreq	r8
800102fa:	40 22       	lddsp	r2,sp[0x8]
800102fc:	10 49       	or	r9,r8
800102fe:	2f f2       	sub	r2,-1
80010300:	40 46       	lddsp	r6,sp[0x10]
80010302:	ec 09 18 00 	cp.b	r9,r6
80010306:	fb f2 00 02 	ld.weq	r2,sp[0x8]
8001030a:	30 29       	mov	r9,2
8001030c:	fa c8 f9 5c 	sub	r8,sp,-1700
80010310:	1a d8       	st.w	--sp,r8
80010312:	fa c8 f9 54 	sub	r8,sp,-1708
80010316:	1a d8       	st.w	--sp,r8
80010318:	fa c8 f9 4c 	sub	r8,sp,-1716
8001031c:	08 9c       	mov	r12,r4
8001031e:	1a d8       	st.w	--sp,r8
80010320:	04 98       	mov	r8,r2
80010322:	40 9b       	lddsp	r11,sp[0x24]
80010324:	40 aa       	lddsp	r10,sp[0x28]
80010326:	e0 a0 0b c3 	rcall	80011aac <_dtoa_r>
8001032a:	e0 40 00 47 	cp.w	r0,71
8001032e:	5f 19       	srne	r9
80010330:	e0 40 00 67 	cp.w	r0,103
80010334:	5f 18       	srne	r8
80010336:	18 96       	mov	r6,r12
80010338:	2f dd       	sub	sp,-12
8001033a:	f3 e8 00 08 	and	r8,r9,r8
8001033e:	c0 41       	brne	80010346 <_vfprintf_r+0x9aa>
80010340:	ed b5 00 00 	bld	r5,0x0
80010344:	c3 01       	brne	800103a4 <_vfprintf_r+0xa08>
80010346:	ec 02 00 0e 	add	lr,r6,r2
8001034a:	50 3e       	stdsp	sp[0xc],lr
8001034c:	40 4c       	lddsp	r12,sp[0x10]
8001034e:	58 0c       	cp.w	r12,0
80010350:	c1 50       	breq	8001037a <_vfprintf_r+0x9de>
80010352:	0d 89       	ld.ub	r9,r6[0x0]
80010354:	33 08       	mov	r8,48
80010356:	f0 09 18 00 	cp.b	r9,r8
8001035a:	c0 b1       	brne	80010370 <_vfprintf_r+0x9d4>
8001035c:	30 08       	mov	r8,0
8001035e:	30 09       	mov	r9,0
80010360:	40 6b       	lddsp	r11,sp[0x18]
80010362:	40 7a       	lddsp	r10,sp[0x1c]
80010364:	e0 a0 20 e7 	rcall	80014532 <__avr32_f64_cmp_eq>
80010368:	fb b2 00 01 	rsubeq	r2,1
8001036c:	fb f2 0b ab 	st.weq	sp[0x6ac],r2
80010370:	40 3b       	lddsp	r11,sp[0xc]
80010372:	fa f8 06 ac 	ld.w	r8,sp[1708]
80010376:	10 0b       	add	r11,r8
80010378:	50 3b       	stdsp	sp[0xc],r11
8001037a:	40 6b       	lddsp	r11,sp[0x18]
8001037c:	30 08       	mov	r8,0
8001037e:	30 09       	mov	r9,0
80010380:	40 7a       	lddsp	r10,sp[0x1c]
80010382:	e0 a0 20 d8 	rcall	80014532 <__avr32_f64_cmp_eq>
80010386:	c0 90       	breq	80010398 <_vfprintf_r+0x9fc>
80010388:	40 3a       	lddsp	r10,sp[0xc]
8001038a:	fb 4a 06 a4 	st.w	sp[1700],r10
8001038e:	c0 58       	rjmp	80010398 <_vfprintf_r+0x9fc>
80010390:	10 c9       	st.b	r8++,r9
80010392:	fb 48 06 a4 	st.w	sp[1700],r8
80010396:	c0 28       	rjmp	8001039a <_vfprintf_r+0x9fe>
80010398:	33 09       	mov	r9,48
8001039a:	fa f8 06 a4 	ld.w	r8,sp[1700]
8001039e:	40 3e       	lddsp	lr,sp[0xc]
800103a0:	1c 38       	cp.w	r8,lr
800103a2:	cf 73       	brcs	80010390 <_vfprintf_r+0x9f4>
800103a4:	e0 40 00 47 	cp.w	r0,71
800103a8:	5f 09       	sreq	r9
800103aa:	e0 40 00 67 	cp.w	r0,103
800103ae:	5f 08       	sreq	r8
800103b0:	f3 e8 10 08 	or	r8,r9,r8
800103b4:	fa f9 06 a4 	ld.w	r9,sp[1700]
800103b8:	0c 19       	sub	r9,r6
800103ba:	50 69       	stdsp	sp[0x18],r9
800103bc:	58 08       	cp.w	r8,0
800103be:	c0 b0       	breq	800103d4 <_vfprintf_r+0xa38>
800103c0:	fa f8 06 ac 	ld.w	r8,sp[1708]
800103c4:	5b d8       	cp.w	r8,-3
800103c6:	c0 55       	brlt	800103d0 <_vfprintf_r+0xa34>
800103c8:	40 2c       	lddsp	r12,sp[0x8]
800103ca:	18 38       	cp.w	r8,r12
800103cc:	e0 8a 00 6a 	brle	800104a0 <_vfprintf_r+0xb04>
800103d0:	20 20       	sub	r0,2
800103d2:	c0 58       	rjmp	800103dc <_vfprintf_r+0xa40>
800103d4:	e0 40 00 65 	cp.w	r0,101
800103d8:	e0 89 00 46 	brgt	80010464 <_vfprintf_r+0xac8>
800103dc:	fa fb 06 ac 	ld.w	r11,sp[1708]
800103e0:	fb 60 06 9c 	st.b	sp[1692],r0
800103e4:	20 1b       	sub	r11,1
800103e6:	fb 4b 06 ac 	st.w	sp[1708],r11
800103ea:	c0 47       	brpl	800103f2 <_vfprintf_r+0xa56>
800103ec:	5c 3b       	neg	r11
800103ee:	32 d8       	mov	r8,45
800103f0:	c0 28       	rjmp	800103f4 <_vfprintf_r+0xa58>
800103f2:	32 b8       	mov	r8,43
800103f4:	fb 68 06 9d 	st.b	sp[1693],r8
800103f8:	58 9b       	cp.w	r11,9
800103fa:	e0 8a 00 1d 	brle	80010434 <_vfprintf_r+0xa98>
800103fe:	fa c9 fa 35 	sub	r9,sp,-1483
80010402:	30 aa       	mov	r10,10
80010404:	12 98       	mov	r8,r9
80010406:	0e 9c       	mov	r12,r7
80010408:	0c 92       	mov	r2,r6
8001040a:	f6 0a 0c 06 	divs	r6,r11,r10
8001040e:	0e 9b       	mov	r11,r7
80010410:	2d 0b       	sub	r11,-48
80010412:	10 fb       	st.b	--r8,r11
80010414:	0c 9b       	mov	r11,r6
80010416:	58 96       	cp.w	r6,9
80010418:	fe 99 ff f9 	brgt	8001040a <_vfprintf_r+0xa6e>
8001041c:	2d 0b       	sub	r11,-48
8001041e:	18 97       	mov	r7,r12
80010420:	04 96       	mov	r6,r2
80010422:	10 fb       	st.b	--r8,r11
80010424:	fa ca f9 62 	sub	r10,sp,-1694
80010428:	c0 38       	rjmp	8001042e <_vfprintf_r+0xa92>
8001042a:	11 3b       	ld.ub	r11,r8++
8001042c:	14 cb       	st.b	r10++,r11
8001042e:	12 38       	cp.w	r8,r9
80010430:	cf d3       	brcs	8001042a <_vfprintf_r+0xa8e>
80010432:	c0 98       	rjmp	80010444 <_vfprintf_r+0xaa8>
80010434:	2d 0b       	sub	r11,-48
80010436:	33 08       	mov	r8,48
80010438:	fb 6b 06 9f 	st.b	sp[1695],r11
8001043c:	fb 68 06 9e 	st.b	sp[1694],r8
80010440:	fa ca f9 60 	sub	r10,sp,-1696
80010444:	fa c8 f9 64 	sub	r8,sp,-1692
80010448:	f4 08 01 08 	sub	r8,r10,r8
8001044c:	50 e8       	stdsp	sp[0x38],r8
8001044e:	10 92       	mov	r2,r8
80010450:	40 6b       	lddsp	r11,sp[0x18]
80010452:	16 02       	add	r2,r11
80010454:	58 1b       	cp.w	r11,1
80010456:	e0 89 00 05 	brgt	80010460 <_vfprintf_r+0xac4>
8001045a:	ed b5 00 00 	bld	r5,0x0
8001045e:	c3 51       	brne	800104c8 <_vfprintf_r+0xb2c>
80010460:	2f f2       	sub	r2,-1
80010462:	c3 38       	rjmp	800104c8 <_vfprintf_r+0xb2c>
80010464:	e0 40 00 66 	cp.w	r0,102
80010468:	c1 c1       	brne	800104a0 <_vfprintf_r+0xb04>
8001046a:	fa f2 06 ac 	ld.w	r2,sp[1708]
8001046e:	58 02       	cp.w	r2,0
80010470:	e0 8a 00 0c 	brle	80010488 <_vfprintf_r+0xaec>
80010474:	40 2a       	lddsp	r10,sp[0x8]
80010476:	58 0a       	cp.w	r10,0
80010478:	c0 41       	brne	80010480 <_vfprintf_r+0xae4>
8001047a:	ed b5 00 00 	bld	r5,0x0
8001047e:	c2 51       	brne	800104c8 <_vfprintf_r+0xb2c>
80010480:	2f f2       	sub	r2,-1
80010482:	40 29       	lddsp	r9,sp[0x8]
80010484:	12 02       	add	r2,r9
80010486:	c0 b8       	rjmp	8001049c <_vfprintf_r+0xb00>
80010488:	40 28       	lddsp	r8,sp[0x8]
8001048a:	58 08       	cp.w	r8,0
8001048c:	c0 61       	brne	80010498 <_vfprintf_r+0xafc>
8001048e:	ed b5 00 00 	bld	r5,0x0
80010492:	c0 30       	breq	80010498 <_vfprintf_r+0xafc>
80010494:	30 12       	mov	r2,1
80010496:	c1 98       	rjmp	800104c8 <_vfprintf_r+0xb2c>
80010498:	40 22       	lddsp	r2,sp[0x8]
8001049a:	2f e2       	sub	r2,-2
8001049c:	36 60       	mov	r0,102
8001049e:	c1 58       	rjmp	800104c8 <_vfprintf_r+0xb2c>
800104a0:	fa f2 06 ac 	ld.w	r2,sp[1708]
800104a4:	40 6e       	lddsp	lr,sp[0x18]
800104a6:	1c 32       	cp.w	r2,lr
800104a8:	c0 65       	brlt	800104b4 <_vfprintf_r+0xb18>
800104aa:	ed b5 00 00 	bld	r5,0x0
800104ae:	f7 b2 00 ff 	subeq	r2,-1
800104b2:	c0 a8       	rjmp	800104c6 <_vfprintf_r+0xb2a>
800104b4:	e4 08 11 02 	rsub	r8,r2,2
800104b8:	40 6c       	lddsp	r12,sp[0x18]
800104ba:	58 02       	cp.w	r2,0
800104bc:	f0 02 17 a0 	movle	r2,r8
800104c0:	f9 b2 09 01 	movgt	r2,1
800104c4:	18 02       	add	r2,r12
800104c6:	36 70       	mov	r0,103
800104c8:	40 9b       	lddsp	r11,sp[0x24]
800104ca:	58 0b       	cp.w	r11,0
800104cc:	e0 80 05 94 	breq	80010ff4 <_vfprintf_r+0x1658>
800104d0:	32 d8       	mov	r8,45
800104d2:	fb 68 06 bb 	st.b	sp[1723],r8
800104d6:	e0 8f 05 93 	bral	80010ffc <_vfprintf_r+0x1660>
800104da:	50 a7       	stdsp	sp[0x28],r7
800104dc:	04 94       	mov	r4,r2
800104de:	0c 97       	mov	r7,r6
800104e0:	02 92       	mov	r2,r1
800104e2:	06 96       	mov	r6,r3
800104e4:	40 41       	lddsp	r1,sp[0x10]
800104e6:	40 93       	lddsp	r3,sp[0x24]
800104e8:	0e 99       	mov	r9,r7
800104ea:	ed b5 00 05 	bld	r5,0x5
800104ee:	c4 81       	brne	8001057e <_vfprintf_r+0xbe2>
800104f0:	fa f8 06 b4 	ld.w	r8,sp[1716]
800104f4:	40 3e       	lddsp	lr,sp[0xc]
800104f6:	58 0e       	cp.w	lr,0
800104f8:	c1 d0       	breq	80010532 <_vfprintf_r+0xb96>
800104fa:	10 36       	cp.w	r6,r8
800104fc:	c0 64       	brge	80010508 <_vfprintf_r+0xb6c>
800104fe:	fa cc f9 44 	sub	r12,sp,-1724
80010502:	f8 06 00 36 	add	r6,r12,r6<<0x3
80010506:	c1 d8       	rjmp	80010540 <_vfprintf_r+0xba4>
80010508:	fa c8 f9 50 	sub	r8,sp,-1712
8001050c:	1a d8       	st.w	--sp,r8
8001050e:	fa c8 fa b8 	sub	r8,sp,-1352
80010512:	04 9a       	mov	r10,r2
80010514:	1a d8       	st.w	--sp,r8
80010516:	fa c8 fb b4 	sub	r8,sp,-1100
8001051a:	0c 9b       	mov	r11,r6
8001051c:	1a d8       	st.w	--sp,r8
8001051e:	08 9c       	mov	r12,r4
80010520:	fa c8 f9 40 	sub	r8,sp,-1728
80010524:	fa c9 ff b4 	sub	r9,sp,-76
80010528:	fe b0 f8 a4 	rcall	8000f670 <get_arg>
8001052c:	2f dd       	sub	sp,-12
8001052e:	78 0a       	ld.w	r10,r12[0x0]
80010530:	c2 08       	rjmp	80010570 <_vfprintf_r+0xbd4>
80010532:	2f f7       	sub	r7,-1
80010534:	10 39       	cp.w	r9,r8
80010536:	c0 84       	brge	80010546 <_vfprintf_r+0xbaa>
80010538:	fa cb f9 44 	sub	r11,sp,-1724
8001053c:	f6 06 00 36 	add	r6,r11,r6<<0x3
80010540:	ec fa fd 88 	ld.w	r10,r6[-632]
80010544:	c1 68       	rjmp	80010570 <_vfprintf_r+0xbd4>
80010546:	41 09       	lddsp	r9,sp[0x40]
80010548:	59 f8       	cp.w	r8,31
8001054a:	e0 89 00 10 	brgt	8001056a <_vfprintf_r+0xbce>
8001054e:	f2 ca ff fc 	sub	r10,r9,-4
80010552:	51 0a       	stdsp	sp[0x40],r10
80010554:	fa c6 f9 44 	sub	r6,sp,-1724
80010558:	72 0a       	ld.w	r10,r9[0x0]
8001055a:	ec 08 00 39 	add	r9,r6,r8<<0x3
8001055e:	f3 4a fd 88 	st.w	r9[-632],r10
80010562:	2f f8       	sub	r8,-1
80010564:	fb 48 06 b4 	st.w	sp[1716],r8
80010568:	c0 48       	rjmp	80010570 <_vfprintf_r+0xbd4>
8001056a:	72 0a       	ld.w	r10,r9[0x0]
8001056c:	2f c9       	sub	r9,-4
8001056e:	51 09       	stdsp	sp[0x40],r9
80010570:	40 be       	lddsp	lr,sp[0x2c]
80010572:	1c 98       	mov	r8,lr
80010574:	95 1e       	st.w	r10[0x4],lr
80010576:	bf 58       	asr	r8,0x1f
80010578:	95 08       	st.w	r10[0x0],r8
8001057a:	fe 9f fa 9f 	bral	8000fab8 <_vfprintf_r+0x11c>
8001057e:	ed b5 00 04 	bld	r5,0x4
80010582:	c4 80       	breq	80010612 <_vfprintf_r+0xc76>
80010584:	e2 15 00 40 	andl	r5,0x40,COH
80010588:	c4 50       	breq	80010612 <_vfprintf_r+0xc76>
8001058a:	fa f8 06 b4 	ld.w	r8,sp[1716]
8001058e:	40 3c       	lddsp	r12,sp[0xc]
80010590:	58 0c       	cp.w	r12,0
80010592:	c1 d0       	breq	800105cc <_vfprintf_r+0xc30>
80010594:	10 36       	cp.w	r6,r8
80010596:	c0 64       	brge	800105a2 <_vfprintf_r+0xc06>
80010598:	fa cb f9 44 	sub	r11,sp,-1724
8001059c:	f6 06 00 36 	add	r6,r11,r6<<0x3
800105a0:	c1 d8       	rjmp	800105da <_vfprintf_r+0xc3e>
800105a2:	fa c8 f9 50 	sub	r8,sp,-1712
800105a6:	1a d8       	st.w	--sp,r8
800105a8:	fa c8 fa b8 	sub	r8,sp,-1352
800105ac:	04 9a       	mov	r10,r2
800105ae:	1a d8       	st.w	--sp,r8
800105b0:	fa c8 fb b4 	sub	r8,sp,-1100
800105b4:	0c 9b       	mov	r11,r6
800105b6:	1a d8       	st.w	--sp,r8
800105b8:	08 9c       	mov	r12,r4
800105ba:	fa c8 f9 40 	sub	r8,sp,-1728
800105be:	fa c9 ff b4 	sub	r9,sp,-76
800105c2:	fe b0 f8 57 	rcall	8000f670 <get_arg>
800105c6:	2f dd       	sub	sp,-12
800105c8:	78 0a       	ld.w	r10,r12[0x0]
800105ca:	c2 08       	rjmp	8001060a <_vfprintf_r+0xc6e>
800105cc:	2f f7       	sub	r7,-1
800105ce:	10 39       	cp.w	r9,r8
800105d0:	c0 84       	brge	800105e0 <_vfprintf_r+0xc44>
800105d2:	fa ca f9 44 	sub	r10,sp,-1724
800105d6:	f4 06 00 36 	add	r6,r10,r6<<0x3
800105da:	ec fa fd 88 	ld.w	r10,r6[-632]
800105de:	c1 68       	rjmp	8001060a <_vfprintf_r+0xc6e>
800105e0:	41 09       	lddsp	r9,sp[0x40]
800105e2:	59 f8       	cp.w	r8,31
800105e4:	e0 89 00 10 	brgt	80010604 <_vfprintf_r+0xc68>
800105e8:	f2 ca ff fc 	sub	r10,r9,-4
800105ec:	51 0a       	stdsp	sp[0x40],r10
800105ee:	fa c6 f9 44 	sub	r6,sp,-1724
800105f2:	72 0a       	ld.w	r10,r9[0x0]
800105f4:	ec 08 00 39 	add	r9,r6,r8<<0x3
800105f8:	f3 4a fd 88 	st.w	r9[-632],r10
800105fc:	2f f8       	sub	r8,-1
800105fe:	fb 48 06 b4 	st.w	sp[1716],r8
80010602:	c0 48       	rjmp	8001060a <_vfprintf_r+0xc6e>
80010604:	72 0a       	ld.w	r10,r9[0x0]
80010606:	2f c9       	sub	r9,-4
80010608:	51 09       	stdsp	sp[0x40],r9
8001060a:	40 be       	lddsp	lr,sp[0x2c]
8001060c:	b4 0e       	st.h	r10[0x0],lr
8001060e:	fe 9f fa 55 	bral	8000fab8 <_vfprintf_r+0x11c>
80010612:	fa f8 06 b4 	ld.w	r8,sp[1716]
80010616:	40 3c       	lddsp	r12,sp[0xc]
80010618:	58 0c       	cp.w	r12,0
8001061a:	c1 d0       	breq	80010654 <_vfprintf_r+0xcb8>
8001061c:	10 36       	cp.w	r6,r8
8001061e:	c0 64       	brge	8001062a <_vfprintf_r+0xc8e>
80010620:	fa cb f9 44 	sub	r11,sp,-1724
80010624:	f6 06 00 36 	add	r6,r11,r6<<0x3
80010628:	c1 d8       	rjmp	80010662 <_vfprintf_r+0xcc6>
8001062a:	fa c8 f9 50 	sub	r8,sp,-1712
8001062e:	1a d8       	st.w	--sp,r8
80010630:	fa c8 fa b8 	sub	r8,sp,-1352
80010634:	04 9a       	mov	r10,r2
80010636:	1a d8       	st.w	--sp,r8
80010638:	fa c8 fb b4 	sub	r8,sp,-1100
8001063c:	0c 9b       	mov	r11,r6
8001063e:	1a d8       	st.w	--sp,r8
80010640:	08 9c       	mov	r12,r4
80010642:	fa c8 f9 40 	sub	r8,sp,-1728
80010646:	fa c9 ff b4 	sub	r9,sp,-76
8001064a:	fe b0 f8 13 	rcall	8000f670 <get_arg>
8001064e:	2f dd       	sub	sp,-12
80010650:	78 0a       	ld.w	r10,r12[0x0]
80010652:	c2 08       	rjmp	80010692 <_vfprintf_r+0xcf6>
80010654:	2f f7       	sub	r7,-1
80010656:	10 39       	cp.w	r9,r8
80010658:	c0 84       	brge	80010668 <_vfprintf_r+0xccc>
8001065a:	fa ca f9 44 	sub	r10,sp,-1724
8001065e:	f4 06 00 36 	add	r6,r10,r6<<0x3
80010662:	ec fa fd 88 	ld.w	r10,r6[-632]
80010666:	c1 68       	rjmp	80010692 <_vfprintf_r+0xcf6>
80010668:	41 09       	lddsp	r9,sp[0x40]
8001066a:	59 f8       	cp.w	r8,31
8001066c:	e0 89 00 10 	brgt	8001068c <_vfprintf_r+0xcf0>
80010670:	f2 ca ff fc 	sub	r10,r9,-4
80010674:	51 0a       	stdsp	sp[0x40],r10
80010676:	fa c6 f9 44 	sub	r6,sp,-1724
8001067a:	72 0a       	ld.w	r10,r9[0x0]
8001067c:	ec 08 00 39 	add	r9,r6,r8<<0x3
80010680:	f3 4a fd 88 	st.w	r9[-632],r10
80010684:	2f f8       	sub	r8,-1
80010686:	fb 48 06 b4 	st.w	sp[1716],r8
8001068a:	c0 48       	rjmp	80010692 <_vfprintf_r+0xcf6>
8001068c:	72 0a       	ld.w	r10,r9[0x0]
8001068e:	2f c9       	sub	r9,-4
80010690:	51 09       	stdsp	sp[0x40],r9
80010692:	40 be       	lddsp	lr,sp[0x2c]
80010694:	95 0e       	st.w	r10[0x0],lr
80010696:	fe 9f fa 11 	bral	8000fab8 <_vfprintf_r+0x11c>
8001069a:	50 a7       	stdsp	sp[0x28],r7
8001069c:	50 80       	stdsp	sp[0x20],r0
8001069e:	0c 97       	mov	r7,r6
800106a0:	04 94       	mov	r4,r2
800106a2:	06 96       	mov	r6,r3
800106a4:	02 92       	mov	r2,r1
800106a6:	40 93       	lddsp	r3,sp[0x24]
800106a8:	10 90       	mov	r0,r8
800106aa:	40 41       	lddsp	r1,sp[0x10]
800106ac:	a5 a5       	sbr	r5,0x4
800106ae:	c0 a8       	rjmp	800106c2 <_vfprintf_r+0xd26>
800106b0:	50 a7       	stdsp	sp[0x28],r7
800106b2:	50 80       	stdsp	sp[0x20],r0
800106b4:	0c 97       	mov	r7,r6
800106b6:	04 94       	mov	r4,r2
800106b8:	06 96       	mov	r6,r3
800106ba:	02 92       	mov	r2,r1
800106bc:	40 93       	lddsp	r3,sp[0x24]
800106be:	10 90       	mov	r0,r8
800106c0:	40 41       	lddsp	r1,sp[0x10]
800106c2:	ed b5 00 05 	bld	r5,0x5
800106c6:	c5 d1       	brne	80010780 <_vfprintf_r+0xde4>
800106c8:	fa f8 06 b4 	ld.w	r8,sp[1716]
800106cc:	40 3c       	lddsp	r12,sp[0xc]
800106ce:	58 0c       	cp.w	r12,0
800106d0:	c2 60       	breq	8001071c <_vfprintf_r+0xd80>
800106d2:	10 36       	cp.w	r6,r8
800106d4:	c0 a4       	brge	800106e8 <_vfprintf_r+0xd4c>
800106d6:	fa cb f9 44 	sub	r11,sp,-1724
800106da:	f6 06 00 36 	add	r6,r11,r6<<0x3
800106de:	ec e8 fd 88 	ld.d	r8,r6[-632]
800106e2:	fa e9 00 00 	st.d	sp[0],r8
800106e6:	c1 88       	rjmp	80010716 <_vfprintf_r+0xd7a>
800106e8:	fa c8 f9 50 	sub	r8,sp,-1712
800106ec:	1a d8       	st.w	--sp,r8
800106ee:	fa c8 fa b8 	sub	r8,sp,-1352
800106f2:	04 9a       	mov	r10,r2
800106f4:	1a d8       	st.w	--sp,r8
800106f6:	0c 9b       	mov	r11,r6
800106f8:	fa c8 fb b4 	sub	r8,sp,-1100
800106fc:	08 9c       	mov	r12,r4
800106fe:	1a d8       	st.w	--sp,r8
80010700:	fa c8 f9 40 	sub	r8,sp,-1728
80010704:	fa c9 ff b4 	sub	r9,sp,-76
80010708:	fe b0 f7 b4 	rcall	8000f670 <get_arg>
8001070c:	2f dd       	sub	sp,-12
8001070e:	f8 ea 00 00 	ld.d	r10,r12[0]
80010712:	fa eb 00 00 	st.d	sp[0],r10
80010716:	30 08       	mov	r8,0
80010718:	e0 8f 03 de 	bral	80010ed4 <_vfprintf_r+0x1538>
8001071c:	ee ca ff ff 	sub	r10,r7,-1
80010720:	10 37       	cp.w	r7,r8
80010722:	c0 b4       	brge	80010738 <_vfprintf_r+0xd9c>
80010724:	fa c9 f9 44 	sub	r9,sp,-1724
80010728:	14 97       	mov	r7,r10
8001072a:	f2 06 00 36 	add	r6,r9,r6<<0x3
8001072e:	ec ea fd 88 	ld.d	r10,r6[-632]
80010732:	fa eb 00 00 	st.d	sp[0],r10
80010736:	c1 88       	rjmp	80010766 <_vfprintf_r+0xdca>
80010738:	41 09       	lddsp	r9,sp[0x40]
8001073a:	59 f8       	cp.w	r8,31
8001073c:	e0 89 00 18 	brgt	8001076c <_vfprintf_r+0xdd0>
80010740:	f2 e6 00 00 	ld.d	r6,r9[0]
80010744:	f2 cb ff f8 	sub	r11,r9,-8
80010748:	fa e7 00 00 	st.d	sp[0],r6
8001074c:	51 0b       	stdsp	sp[0x40],r11
8001074e:	fa c6 f9 44 	sub	r6,sp,-1724
80010752:	ec 08 00 39 	add	r9,r6,r8<<0x3
80010756:	fa e6 00 00 	ld.d	r6,sp[0]
8001075a:	f2 e7 fd 88 	st.d	r9[-632],r6
8001075e:	2f f8       	sub	r8,-1
80010760:	14 97       	mov	r7,r10
80010762:	fb 48 06 b4 	st.w	sp[1716],r8
80010766:	40 38       	lddsp	r8,sp[0xc]
80010768:	e0 8f 03 b6 	bral	80010ed4 <_vfprintf_r+0x1538>
8001076c:	f2 e6 00 00 	ld.d	r6,r9[0]
80010770:	40 38       	lddsp	r8,sp[0xc]
80010772:	fa e7 00 00 	st.d	sp[0],r6
80010776:	2f 89       	sub	r9,-8
80010778:	14 97       	mov	r7,r10
8001077a:	51 09       	stdsp	sp[0x40],r9
8001077c:	e0 8f 03 ac 	bral	80010ed4 <_vfprintf_r+0x1538>
80010780:	ed b5 00 04 	bld	r5,0x4
80010784:	c1 61       	brne	800107b0 <_vfprintf_r+0xe14>
80010786:	fa f8 06 b4 	ld.w	r8,sp[1716]
8001078a:	40 3e       	lddsp	lr,sp[0xc]
8001078c:	58 0e       	cp.w	lr,0
8001078e:	c0 80       	breq	8001079e <_vfprintf_r+0xe02>
80010790:	10 36       	cp.w	r6,r8
80010792:	c6 74       	brge	80010860 <_vfprintf_r+0xec4>
80010794:	fa cc f9 44 	sub	r12,sp,-1724
80010798:	f8 06 00 36 	add	r6,r12,r6<<0x3
8001079c:	c8 08       	rjmp	8001089c <_vfprintf_r+0xf00>
8001079e:	ee ca ff ff 	sub	r10,r7,-1
800107a2:	10 37       	cp.w	r7,r8
800107a4:	c7 f4       	brge	800108a2 <_vfprintf_r+0xf06>
800107a6:	fa cb f9 44 	sub	r11,sp,-1724
800107aa:	f6 06 00 36 	add	r6,r11,r6<<0x3
800107ae:	c7 68       	rjmp	8001089a <_vfprintf_r+0xefe>
800107b0:	ed b5 00 06 	bld	r5,0x6
800107b4:	c4 a1       	brne	80010848 <_vfprintf_r+0xeac>
800107b6:	fa f8 06 b4 	ld.w	r8,sp[1716]
800107ba:	40 3c       	lddsp	r12,sp[0xc]
800107bc:	58 0c       	cp.w	r12,0
800107be:	c1 d0       	breq	800107f8 <_vfprintf_r+0xe5c>
800107c0:	10 36       	cp.w	r6,r8
800107c2:	c0 64       	brge	800107ce <_vfprintf_r+0xe32>
800107c4:	fa cb f9 44 	sub	r11,sp,-1724
800107c8:	f6 06 00 36 	add	r6,r11,r6<<0x3
800107cc:	c1 f8       	rjmp	8001080a <_vfprintf_r+0xe6e>
800107ce:	fa c8 f9 50 	sub	r8,sp,-1712
800107d2:	1a d8       	st.w	--sp,r8
800107d4:	fa c8 fa b8 	sub	r8,sp,-1352
800107d8:	1a d8       	st.w	--sp,r8
800107da:	fa c8 fb b4 	sub	r8,sp,-1100
800107de:	1a d8       	st.w	--sp,r8
800107e0:	fa c8 f9 40 	sub	r8,sp,-1728
800107e4:	fa c9 ff b4 	sub	r9,sp,-76
800107e8:	04 9a       	mov	r10,r2
800107ea:	0c 9b       	mov	r11,r6
800107ec:	08 9c       	mov	r12,r4
800107ee:	fe b0 f7 41 	rcall	8000f670 <get_arg>
800107f2:	2f dd       	sub	sp,-12
800107f4:	98 18       	ld.sh	r8,r12[0x2]
800107f6:	c2 68       	rjmp	80010842 <_vfprintf_r+0xea6>
800107f8:	ee ca ff ff 	sub	r10,r7,-1
800107fc:	10 37       	cp.w	r7,r8
800107fe:	c0 94       	brge	80010810 <_vfprintf_r+0xe74>
80010800:	fa c9 f9 44 	sub	r9,sp,-1724
80010804:	14 97       	mov	r7,r10
80010806:	f2 06 00 36 	add	r6,r9,r6<<0x3
8001080a:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
8001080e:	c1 a8       	rjmp	80010842 <_vfprintf_r+0xea6>
80010810:	41 09       	lddsp	r9,sp[0x40]
80010812:	59 f8       	cp.w	r8,31
80010814:	e0 89 00 13 	brgt	8001083a <_vfprintf_r+0xe9e>
80010818:	f2 cb ff fc 	sub	r11,r9,-4
8001081c:	51 0b       	stdsp	sp[0x40],r11
8001081e:	72 09       	ld.w	r9,r9[0x0]
80010820:	fa c6 f9 44 	sub	r6,sp,-1724
80010824:	ec 08 00 3b 	add	r11,r6,r8<<0x3
80010828:	2f f8       	sub	r8,-1
8001082a:	f7 49 fd 88 	st.w	r11[-632],r9
8001082e:	fb 48 06 b4 	st.w	sp[1716],r8
80010832:	14 97       	mov	r7,r10
80010834:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
80010838:	c0 58       	rjmp	80010842 <_vfprintf_r+0xea6>
8001083a:	92 18       	ld.sh	r8,r9[0x2]
8001083c:	14 97       	mov	r7,r10
8001083e:	2f c9       	sub	r9,-4
80010840:	51 09       	stdsp	sp[0x40],r9
80010842:	5c 78       	castu.h	r8
80010844:	50 18       	stdsp	sp[0x4],r8
80010846:	c4 68       	rjmp	800108d2 <_vfprintf_r+0xf36>
80010848:	fa f8 06 b4 	ld.w	r8,sp[1716]
8001084c:	40 3c       	lddsp	r12,sp[0xc]
8001084e:	58 0c       	cp.w	r12,0
80010850:	c1 d0       	breq	8001088a <_vfprintf_r+0xeee>
80010852:	10 36       	cp.w	r6,r8
80010854:	c0 64       	brge	80010860 <_vfprintf_r+0xec4>
80010856:	fa cb f9 44 	sub	r11,sp,-1724
8001085a:	f6 06 00 36 	add	r6,r11,r6<<0x3
8001085e:	c1 f8       	rjmp	8001089c <_vfprintf_r+0xf00>
80010860:	fa c8 f9 50 	sub	r8,sp,-1712
80010864:	1a d8       	st.w	--sp,r8
80010866:	fa c8 fa b8 	sub	r8,sp,-1352
8001086a:	0c 9b       	mov	r11,r6
8001086c:	1a d8       	st.w	--sp,r8
8001086e:	fa c8 fb b4 	sub	r8,sp,-1100
80010872:	04 9a       	mov	r10,r2
80010874:	1a d8       	st.w	--sp,r8
80010876:	08 9c       	mov	r12,r4
80010878:	fa c8 f9 40 	sub	r8,sp,-1728
8001087c:	fa c9 ff b4 	sub	r9,sp,-76
80010880:	fe b0 f6 f8 	rcall	8000f670 <get_arg>
80010884:	2f dd       	sub	sp,-12
80010886:	78 0b       	ld.w	r11,r12[0x0]
80010888:	c2 48       	rjmp	800108d0 <_vfprintf_r+0xf34>
8001088a:	ee ca ff ff 	sub	r10,r7,-1
8001088e:	10 37       	cp.w	r7,r8
80010890:	c0 94       	brge	800108a2 <_vfprintf_r+0xf06>
80010892:	fa c9 f9 44 	sub	r9,sp,-1724
80010896:	f2 06 00 36 	add	r6,r9,r6<<0x3
8001089a:	14 97       	mov	r7,r10
8001089c:	ec fb fd 88 	ld.w	r11,r6[-632]
800108a0:	c1 88       	rjmp	800108d0 <_vfprintf_r+0xf34>
800108a2:	41 09       	lddsp	r9,sp[0x40]
800108a4:	59 f8       	cp.w	r8,31
800108a6:	e0 89 00 11 	brgt	800108c8 <_vfprintf_r+0xf2c>
800108aa:	f2 cb ff fc 	sub	r11,r9,-4
800108ae:	51 0b       	stdsp	sp[0x40],r11
800108b0:	fa c6 f9 44 	sub	r6,sp,-1724
800108b4:	72 0b       	ld.w	r11,r9[0x0]
800108b6:	ec 08 00 39 	add	r9,r6,r8<<0x3
800108ba:	f3 4b fd 88 	st.w	r9[-632],r11
800108be:	2f f8       	sub	r8,-1
800108c0:	14 97       	mov	r7,r10
800108c2:	fb 48 06 b4 	st.w	sp[1716],r8
800108c6:	c0 58       	rjmp	800108d0 <_vfprintf_r+0xf34>
800108c8:	72 0b       	ld.w	r11,r9[0x0]
800108ca:	14 97       	mov	r7,r10
800108cc:	2f c9       	sub	r9,-4
800108ce:	51 09       	stdsp	sp[0x40],r9
800108d0:	50 1b       	stdsp	sp[0x4],r11
800108d2:	30 0e       	mov	lr,0
800108d4:	50 0e       	stdsp	sp[0x0],lr
800108d6:	1c 98       	mov	r8,lr
800108d8:	e0 8f 02 fe 	bral	80010ed4 <_vfprintf_r+0x1538>
800108dc:	50 a7       	stdsp	sp[0x28],r7
800108de:	50 80       	stdsp	sp[0x20],r0
800108e0:	0c 97       	mov	r7,r6
800108e2:	04 94       	mov	r4,r2
800108e4:	06 96       	mov	r6,r3
800108e6:	02 92       	mov	r2,r1
800108e8:	40 93       	lddsp	r3,sp[0x24]
800108ea:	40 41       	lddsp	r1,sp[0x10]
800108ec:	0e 99       	mov	r9,r7
800108ee:	fa f8 06 b4 	ld.w	r8,sp[1716]
800108f2:	40 3c       	lddsp	r12,sp[0xc]
800108f4:	58 0c       	cp.w	r12,0
800108f6:	c1 d0       	breq	80010930 <_vfprintf_r+0xf94>
800108f8:	10 36       	cp.w	r6,r8
800108fa:	c0 64       	brge	80010906 <_vfprintf_r+0xf6a>
800108fc:	fa cb f9 44 	sub	r11,sp,-1724
80010900:	f6 06 00 36 	add	r6,r11,r6<<0x3
80010904:	c1 d8       	rjmp	8001093e <_vfprintf_r+0xfa2>
80010906:	fa c8 f9 50 	sub	r8,sp,-1712
8001090a:	1a d8       	st.w	--sp,r8
8001090c:	fa c8 fa b8 	sub	r8,sp,-1352
80010910:	1a d8       	st.w	--sp,r8
80010912:	fa c8 fb b4 	sub	r8,sp,-1100
80010916:	1a d8       	st.w	--sp,r8
80010918:	fa c9 ff b4 	sub	r9,sp,-76
8001091c:	fa c8 f9 40 	sub	r8,sp,-1728
80010920:	04 9a       	mov	r10,r2
80010922:	0c 9b       	mov	r11,r6
80010924:	08 9c       	mov	r12,r4
80010926:	fe b0 f6 a5 	rcall	8000f670 <get_arg>
8001092a:	2f dd       	sub	sp,-12
8001092c:	78 09       	ld.w	r9,r12[0x0]
8001092e:	c2 18       	rjmp	80010970 <_vfprintf_r+0xfd4>
80010930:	2f f7       	sub	r7,-1
80010932:	10 39       	cp.w	r9,r8
80010934:	c0 84       	brge	80010944 <_vfprintf_r+0xfa8>
80010936:	fa ca f9 44 	sub	r10,sp,-1724
8001093a:	f4 06 00 36 	add	r6,r10,r6<<0x3
8001093e:	ec f9 fd 88 	ld.w	r9,r6[-632]
80010942:	c1 78       	rjmp	80010970 <_vfprintf_r+0xfd4>
80010944:	41 09       	lddsp	r9,sp[0x40]
80010946:	59 f8       	cp.w	r8,31
80010948:	e0 89 00 10 	brgt	80010968 <_vfprintf_r+0xfcc>
8001094c:	f2 ca ff fc 	sub	r10,r9,-4
80010950:	51 0a       	stdsp	sp[0x40],r10
80010952:	fa c6 f9 44 	sub	r6,sp,-1724
80010956:	72 09       	ld.w	r9,r9[0x0]
80010958:	ec 08 00 3a 	add	r10,r6,r8<<0x3
8001095c:	f5 49 fd 88 	st.w	r10[-632],r9
80010960:	2f f8       	sub	r8,-1
80010962:	fb 48 06 b4 	st.w	sp[1716],r8
80010966:	c0 58       	rjmp	80010970 <_vfprintf_r+0xfd4>
80010968:	f2 c8 ff fc 	sub	r8,r9,-4
8001096c:	51 08       	stdsp	sp[0x40],r8
8001096e:	72 09       	ld.w	r9,r9[0x0]
80010970:	33 08       	mov	r8,48
80010972:	fb 68 06 b8 	st.b	sp[1720],r8
80010976:	37 88       	mov	r8,120
80010978:	30 0e       	mov	lr,0
8001097a:	fb 68 06 b9 	st.b	sp[1721],r8
8001097e:	fe cc b5 d2 	sub	r12,pc,-18990
80010982:	50 19       	stdsp	sp[0x4],r9
80010984:	a1 b5       	sbr	r5,0x1
80010986:	50 0e       	stdsp	sp[0x0],lr
80010988:	50 dc       	stdsp	sp[0x34],r12
8001098a:	30 28       	mov	r8,2
8001098c:	37 80       	mov	r0,120
8001098e:	e0 8f 02 a3 	bral	80010ed4 <_vfprintf_r+0x1538>
80010992:	50 a7       	stdsp	sp[0x28],r7
80010994:	50 80       	stdsp	sp[0x20],r0
80010996:	10 90       	mov	r0,r8
80010998:	30 08       	mov	r8,0
8001099a:	fb 68 06 bb 	st.b	sp[1723],r8
8001099e:	0c 97       	mov	r7,r6
800109a0:	04 94       	mov	r4,r2
800109a2:	06 96       	mov	r6,r3
800109a4:	02 92       	mov	r2,r1
800109a6:	40 93       	lddsp	r3,sp[0x24]
800109a8:	40 41       	lddsp	r1,sp[0x10]
800109aa:	0e 99       	mov	r9,r7
800109ac:	fa f8 06 b4 	ld.w	r8,sp[1716]
800109b0:	40 3b       	lddsp	r11,sp[0xc]
800109b2:	58 0b       	cp.w	r11,0
800109b4:	c1 d0       	breq	800109ee <_vfprintf_r+0x1052>
800109b6:	10 36       	cp.w	r6,r8
800109b8:	c0 64       	brge	800109c4 <_vfprintf_r+0x1028>
800109ba:	fa ca f9 44 	sub	r10,sp,-1724
800109be:	f4 06 00 36 	add	r6,r10,r6<<0x3
800109c2:	c1 d8       	rjmp	800109fc <_vfprintf_r+0x1060>
800109c4:	fa c8 f9 50 	sub	r8,sp,-1712
800109c8:	1a d8       	st.w	--sp,r8
800109ca:	fa c8 fa b8 	sub	r8,sp,-1352
800109ce:	1a d8       	st.w	--sp,r8
800109d0:	fa c8 fb b4 	sub	r8,sp,-1100
800109d4:	0c 9b       	mov	r11,r6
800109d6:	1a d8       	st.w	--sp,r8
800109d8:	04 9a       	mov	r10,r2
800109da:	fa c8 f9 40 	sub	r8,sp,-1728
800109de:	fa c9 ff b4 	sub	r9,sp,-76
800109e2:	08 9c       	mov	r12,r4
800109e4:	fe b0 f6 46 	rcall	8000f670 <get_arg>
800109e8:	2f dd       	sub	sp,-12
800109ea:	78 06       	ld.w	r6,r12[0x0]
800109ec:	c2 08       	rjmp	80010a2c <_vfprintf_r+0x1090>
800109ee:	2f f7       	sub	r7,-1
800109f0:	10 39       	cp.w	r9,r8
800109f2:	c0 84       	brge	80010a02 <_vfprintf_r+0x1066>
800109f4:	fa c9 f9 44 	sub	r9,sp,-1724
800109f8:	f2 06 00 36 	add	r6,r9,r6<<0x3
800109fc:	ec f6 fd 88 	ld.w	r6,r6[-632]
80010a00:	c1 68       	rjmp	80010a2c <_vfprintf_r+0x1090>
80010a02:	41 09       	lddsp	r9,sp[0x40]
80010a04:	59 f8       	cp.w	r8,31
80010a06:	e0 89 00 10 	brgt	80010a26 <_vfprintf_r+0x108a>
80010a0a:	f2 ca ff fc 	sub	r10,r9,-4
80010a0e:	51 0a       	stdsp	sp[0x40],r10
80010a10:	72 06       	ld.w	r6,r9[0x0]
80010a12:	fa ce f9 44 	sub	lr,sp,-1724
80010a16:	fc 08 00 39 	add	r9,lr,r8<<0x3
80010a1a:	f3 46 fd 88 	st.w	r9[-632],r6
80010a1e:	2f f8       	sub	r8,-1
80010a20:	fb 48 06 b4 	st.w	sp[1716],r8
80010a24:	c0 48       	rjmp	80010a2c <_vfprintf_r+0x1090>
80010a26:	72 06       	ld.w	r6,r9[0x0]
80010a28:	2f c9       	sub	r9,-4
80010a2a:	51 09       	stdsp	sp[0x40],r9
80010a2c:	40 2c       	lddsp	r12,sp[0x8]
80010a2e:	58 0c       	cp.w	r12,0
80010a30:	c1 05       	brlt	80010a50 <_vfprintf_r+0x10b4>
80010a32:	18 9a       	mov	r10,r12
80010a34:	30 0b       	mov	r11,0
80010a36:	0c 9c       	mov	r12,r6
80010a38:	e0 a0 14 58 	rcall	800132e8 <memchr>
80010a3c:	e0 80 02 df 	breq	80010ffa <_vfprintf_r+0x165e>
80010a40:	f8 06 01 02 	sub	r2,r12,r6
80010a44:	40 2b       	lddsp	r11,sp[0x8]
80010a46:	16 32       	cp.w	r2,r11
80010a48:	e0 89 02 d9 	brgt	80010ffa <_vfprintf_r+0x165e>
80010a4c:	e0 8f 02 d4 	bral	80010ff4 <_vfprintf_r+0x1658>
80010a50:	30 0a       	mov	r10,0
80010a52:	0c 9c       	mov	r12,r6
80010a54:	50 2a       	stdsp	sp[0x8],r10
80010a56:	e0 a0 19 2b 	rcall	80013cac <strlen>
80010a5a:	18 92       	mov	r2,r12
80010a5c:	e0 8f 02 d2 	bral	80011000 <_vfprintf_r+0x1664>
80010a60:	50 a7       	stdsp	sp[0x28],r7
80010a62:	50 80       	stdsp	sp[0x20],r0
80010a64:	0c 97       	mov	r7,r6
80010a66:	04 94       	mov	r4,r2
80010a68:	06 96       	mov	r6,r3
80010a6a:	02 92       	mov	r2,r1
80010a6c:	40 93       	lddsp	r3,sp[0x24]
80010a6e:	10 90       	mov	r0,r8
80010a70:	40 41       	lddsp	r1,sp[0x10]
80010a72:	a5 a5       	sbr	r5,0x4
80010a74:	c0 a8       	rjmp	80010a88 <_vfprintf_r+0x10ec>
80010a76:	50 a7       	stdsp	sp[0x28],r7
80010a78:	50 80       	stdsp	sp[0x20],r0
80010a7a:	0c 97       	mov	r7,r6
80010a7c:	04 94       	mov	r4,r2
80010a7e:	06 96       	mov	r6,r3
80010a80:	02 92       	mov	r2,r1
80010a82:	40 93       	lddsp	r3,sp[0x24]
80010a84:	10 90       	mov	r0,r8
80010a86:	40 41       	lddsp	r1,sp[0x10]
80010a88:	ed b5 00 05 	bld	r5,0x5
80010a8c:	c5 61       	brne	80010b38 <_vfprintf_r+0x119c>
80010a8e:	fa f8 06 b4 	ld.w	r8,sp[1716]
80010a92:	40 39       	lddsp	r9,sp[0xc]
80010a94:	58 09       	cp.w	r9,0
80010a96:	c2 10       	breq	80010ad8 <_vfprintf_r+0x113c>
80010a98:	10 36       	cp.w	r6,r8
80010a9a:	c0 74       	brge	80010aa8 <_vfprintf_r+0x110c>
80010a9c:	fa c8 f9 44 	sub	r8,sp,-1724
80010aa0:	f0 06 00 36 	add	r6,r8,r6<<0x3
80010aa4:	c2 38       	rjmp	80010aea <_vfprintf_r+0x114e>
80010aa6:	d7 03       	nop
80010aa8:	fa c8 f9 50 	sub	r8,sp,-1712
80010aac:	1a d8       	st.w	--sp,r8
80010aae:	fa c8 fa b8 	sub	r8,sp,-1352
80010ab2:	1a d8       	st.w	--sp,r8
80010ab4:	fa c8 fb b4 	sub	r8,sp,-1100
80010ab8:	1a d8       	st.w	--sp,r8
80010aba:	fa c8 f9 40 	sub	r8,sp,-1728
80010abe:	fa c9 ff b4 	sub	r9,sp,-76
80010ac2:	04 9a       	mov	r10,r2
80010ac4:	0c 9b       	mov	r11,r6
80010ac6:	08 9c       	mov	r12,r4
80010ac8:	fe b0 f5 d4 	rcall	8000f670 <get_arg>
80010acc:	2f dd       	sub	sp,-12
80010ace:	f8 e8 00 00 	ld.d	r8,r12[0]
80010ad2:	fa e9 00 00 	st.d	sp[0],r8
80010ad6:	c2 e8       	rjmp	80010b32 <_vfprintf_r+0x1196>
80010ad8:	ee ca ff ff 	sub	r10,r7,-1
80010adc:	10 37       	cp.w	r7,r8
80010ade:	c0 b4       	brge	80010af4 <_vfprintf_r+0x1158>
80010ae0:	fa c8 f9 44 	sub	r8,sp,-1724
80010ae4:	14 97       	mov	r7,r10
80010ae6:	f0 06 00 36 	add	r6,r8,r6<<0x3
80010aea:	ec ea fd 88 	ld.d	r10,r6[-632]
80010aee:	fa eb 00 00 	st.d	sp[0],r10
80010af2:	c2 08       	rjmp	80010b32 <_vfprintf_r+0x1196>
80010af4:	41 09       	lddsp	r9,sp[0x40]
80010af6:	59 f8       	cp.w	r8,31
80010af8:	e0 89 00 16 	brgt	80010b24 <_vfprintf_r+0x1188>
80010afc:	f2 e6 00 00 	ld.d	r6,r9[0]
80010b00:	f2 cb ff f8 	sub	r11,r9,-8
80010b04:	fa e7 00 00 	st.d	sp[0],r6
80010b08:	51 0b       	stdsp	sp[0x40],r11
80010b0a:	fa c6 f9 44 	sub	r6,sp,-1724
80010b0e:	ec 08 00 39 	add	r9,r6,r8<<0x3
80010b12:	fa e6 00 00 	ld.d	r6,sp[0]
80010b16:	f2 e7 fd 88 	st.d	r9[-632],r6
80010b1a:	2f f8       	sub	r8,-1
80010b1c:	14 97       	mov	r7,r10
80010b1e:	fb 48 06 b4 	st.w	sp[1716],r8
80010b22:	c0 88       	rjmp	80010b32 <_vfprintf_r+0x1196>
80010b24:	f2 e6 00 00 	ld.d	r6,r9[0]
80010b28:	2f 89       	sub	r9,-8
80010b2a:	fa e7 00 00 	st.d	sp[0],r6
80010b2e:	51 09       	stdsp	sp[0x40],r9
80010b30:	14 97       	mov	r7,r10
80010b32:	30 18       	mov	r8,1
80010b34:	e0 8f 01 d0 	bral	80010ed4 <_vfprintf_r+0x1538>
80010b38:	ed b5 00 04 	bld	r5,0x4
80010b3c:	c1 61       	brne	80010b68 <_vfprintf_r+0x11cc>
80010b3e:	fa f8 06 b4 	ld.w	r8,sp[1716]
80010b42:	40 3e       	lddsp	lr,sp[0xc]
80010b44:	58 0e       	cp.w	lr,0
80010b46:	c0 80       	breq	80010b56 <_vfprintf_r+0x11ba>
80010b48:	10 36       	cp.w	r6,r8
80010b4a:	c6 74       	brge	80010c18 <_vfprintf_r+0x127c>
80010b4c:	fa cc f9 44 	sub	r12,sp,-1724
80010b50:	f8 06 00 36 	add	r6,r12,r6<<0x3
80010b54:	c8 08       	rjmp	80010c54 <_vfprintf_r+0x12b8>
80010b56:	ee ca ff ff 	sub	r10,r7,-1
80010b5a:	10 37       	cp.w	r7,r8
80010b5c:	c7 f4       	brge	80010c5a <_vfprintf_r+0x12be>
80010b5e:	fa cb f9 44 	sub	r11,sp,-1724
80010b62:	f6 06 00 36 	add	r6,r11,r6<<0x3
80010b66:	c7 68       	rjmp	80010c52 <_vfprintf_r+0x12b6>
80010b68:	ed b5 00 06 	bld	r5,0x6
80010b6c:	c4 a1       	brne	80010c00 <_vfprintf_r+0x1264>
80010b6e:	fa f8 06 b4 	ld.w	r8,sp[1716]
80010b72:	40 3c       	lddsp	r12,sp[0xc]
80010b74:	58 0c       	cp.w	r12,0
80010b76:	c1 d0       	breq	80010bb0 <_vfprintf_r+0x1214>
80010b78:	10 36       	cp.w	r6,r8
80010b7a:	c0 64       	brge	80010b86 <_vfprintf_r+0x11ea>
80010b7c:	fa cb f9 44 	sub	r11,sp,-1724
80010b80:	f6 06 00 36 	add	r6,r11,r6<<0x3
80010b84:	c1 f8       	rjmp	80010bc2 <_vfprintf_r+0x1226>
80010b86:	fa c8 f9 50 	sub	r8,sp,-1712
80010b8a:	1a d8       	st.w	--sp,r8
80010b8c:	fa c8 fa b8 	sub	r8,sp,-1352
80010b90:	1a d8       	st.w	--sp,r8
80010b92:	fa c8 fb b4 	sub	r8,sp,-1100
80010b96:	1a d8       	st.w	--sp,r8
80010b98:	fa c8 f9 40 	sub	r8,sp,-1728
80010b9c:	fa c9 ff b4 	sub	r9,sp,-76
80010ba0:	04 9a       	mov	r10,r2
80010ba2:	0c 9b       	mov	r11,r6
80010ba4:	08 9c       	mov	r12,r4
80010ba6:	fe b0 f5 65 	rcall	8000f670 <get_arg>
80010baa:	2f dd       	sub	sp,-12
80010bac:	98 18       	ld.sh	r8,r12[0x2]
80010bae:	c2 68       	rjmp	80010bfa <_vfprintf_r+0x125e>
80010bb0:	ee ca ff ff 	sub	r10,r7,-1
80010bb4:	10 37       	cp.w	r7,r8
80010bb6:	c0 94       	brge	80010bc8 <_vfprintf_r+0x122c>
80010bb8:	fa c9 f9 44 	sub	r9,sp,-1724
80010bbc:	14 97       	mov	r7,r10
80010bbe:	f2 06 00 36 	add	r6,r9,r6<<0x3
80010bc2:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
80010bc6:	c1 a8       	rjmp	80010bfa <_vfprintf_r+0x125e>
80010bc8:	41 09       	lddsp	r9,sp[0x40]
80010bca:	59 f8       	cp.w	r8,31
80010bcc:	e0 89 00 13 	brgt	80010bf2 <_vfprintf_r+0x1256>
80010bd0:	f2 cb ff fc 	sub	r11,r9,-4
80010bd4:	51 0b       	stdsp	sp[0x40],r11
80010bd6:	72 09       	ld.w	r9,r9[0x0]
80010bd8:	fa c6 f9 44 	sub	r6,sp,-1724
80010bdc:	ec 08 00 3b 	add	r11,r6,r8<<0x3
80010be0:	2f f8       	sub	r8,-1
80010be2:	f7 49 fd 88 	st.w	r11[-632],r9
80010be6:	fb 48 06 b4 	st.w	sp[1716],r8
80010bea:	14 97       	mov	r7,r10
80010bec:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
80010bf0:	c0 58       	rjmp	80010bfa <_vfprintf_r+0x125e>
80010bf2:	92 18       	ld.sh	r8,r9[0x2]
80010bf4:	14 97       	mov	r7,r10
80010bf6:	2f c9       	sub	r9,-4
80010bf8:	51 09       	stdsp	sp[0x40],r9
80010bfa:	5c 78       	castu.h	r8
80010bfc:	50 18       	stdsp	sp[0x4],r8
80010bfe:	c4 68       	rjmp	80010c8a <_vfprintf_r+0x12ee>
80010c00:	fa f8 06 b4 	ld.w	r8,sp[1716]
80010c04:	40 3c       	lddsp	r12,sp[0xc]
80010c06:	58 0c       	cp.w	r12,0
80010c08:	c1 d0       	breq	80010c42 <_vfprintf_r+0x12a6>
80010c0a:	10 36       	cp.w	r6,r8
80010c0c:	c0 64       	brge	80010c18 <_vfprintf_r+0x127c>
80010c0e:	fa cb f9 44 	sub	r11,sp,-1724
80010c12:	f6 06 00 36 	add	r6,r11,r6<<0x3
80010c16:	c1 f8       	rjmp	80010c54 <_vfprintf_r+0x12b8>
80010c18:	fa c8 f9 50 	sub	r8,sp,-1712
80010c1c:	1a d8       	st.w	--sp,r8
80010c1e:	fa c8 fa b8 	sub	r8,sp,-1352
80010c22:	0c 9b       	mov	r11,r6
80010c24:	1a d8       	st.w	--sp,r8
80010c26:	fa c8 fb b4 	sub	r8,sp,-1100
80010c2a:	04 9a       	mov	r10,r2
80010c2c:	1a d8       	st.w	--sp,r8
80010c2e:	08 9c       	mov	r12,r4
80010c30:	fa c8 f9 40 	sub	r8,sp,-1728
80010c34:	fa c9 ff b4 	sub	r9,sp,-76
80010c38:	fe b0 f5 1c 	rcall	8000f670 <get_arg>
80010c3c:	2f dd       	sub	sp,-12
80010c3e:	78 0b       	ld.w	r11,r12[0x0]
80010c40:	c2 48       	rjmp	80010c88 <_vfprintf_r+0x12ec>
80010c42:	ee ca ff ff 	sub	r10,r7,-1
80010c46:	10 37       	cp.w	r7,r8
80010c48:	c0 94       	brge	80010c5a <_vfprintf_r+0x12be>
80010c4a:	fa c9 f9 44 	sub	r9,sp,-1724
80010c4e:	f2 06 00 36 	add	r6,r9,r6<<0x3
80010c52:	14 97       	mov	r7,r10
80010c54:	ec fb fd 88 	ld.w	r11,r6[-632]
80010c58:	c1 88       	rjmp	80010c88 <_vfprintf_r+0x12ec>
80010c5a:	41 09       	lddsp	r9,sp[0x40]
80010c5c:	59 f8       	cp.w	r8,31
80010c5e:	e0 89 00 11 	brgt	80010c80 <_vfprintf_r+0x12e4>
80010c62:	f2 cb ff fc 	sub	r11,r9,-4
80010c66:	51 0b       	stdsp	sp[0x40],r11
80010c68:	fa c6 f9 44 	sub	r6,sp,-1724
80010c6c:	72 0b       	ld.w	r11,r9[0x0]
80010c6e:	ec 08 00 39 	add	r9,r6,r8<<0x3
80010c72:	f3 4b fd 88 	st.w	r9[-632],r11
80010c76:	2f f8       	sub	r8,-1
80010c78:	14 97       	mov	r7,r10
80010c7a:	fb 48 06 b4 	st.w	sp[1716],r8
80010c7e:	c0 58       	rjmp	80010c88 <_vfprintf_r+0x12ec>
80010c80:	72 0b       	ld.w	r11,r9[0x0]
80010c82:	14 97       	mov	r7,r10
80010c84:	2f c9       	sub	r9,-4
80010c86:	51 09       	stdsp	sp[0x40],r9
80010c88:	50 1b       	stdsp	sp[0x4],r11
80010c8a:	30 0e       	mov	lr,0
80010c8c:	30 18       	mov	r8,1
80010c8e:	50 0e       	stdsp	sp[0x0],lr
80010c90:	c2 29       	rjmp	80010ed4 <_vfprintf_r+0x1538>
80010c92:	50 a7       	stdsp	sp[0x28],r7
80010c94:	50 80       	stdsp	sp[0x20],r0
80010c96:	0c 97       	mov	r7,r6
80010c98:	04 94       	mov	r4,r2
80010c9a:	06 96       	mov	r6,r3
80010c9c:	02 92       	mov	r2,r1
80010c9e:	fe cc b8 f2 	sub	r12,pc,-18190
80010ca2:	40 93       	lddsp	r3,sp[0x24]
80010ca4:	10 90       	mov	r0,r8
80010ca6:	40 41       	lddsp	r1,sp[0x10]
80010ca8:	50 dc       	stdsp	sp[0x34],r12
80010caa:	ed b5 00 05 	bld	r5,0x5
80010cae:	c5 51       	brne	80010d58 <_vfprintf_r+0x13bc>
80010cb0:	fa f8 06 b4 	ld.w	r8,sp[1716]
80010cb4:	40 3b       	lddsp	r11,sp[0xc]
80010cb6:	58 0b       	cp.w	r11,0
80010cb8:	c2 20       	breq	80010cfc <_vfprintf_r+0x1360>
80010cba:	10 36       	cp.w	r6,r8
80010cbc:	c0 a4       	brge	80010cd0 <_vfprintf_r+0x1334>
80010cbe:	fa ca f9 44 	sub	r10,sp,-1724
80010cc2:	f4 06 00 36 	add	r6,r10,r6<<0x3
80010cc6:	ec e8 fd 88 	ld.d	r8,r6[-632]
80010cca:	fa e9 00 00 	st.d	sp[0],r8
80010cce:	cf 28       	rjmp	80010eb2 <_vfprintf_r+0x1516>
80010cd0:	fa c8 f9 50 	sub	r8,sp,-1712
80010cd4:	1a d8       	st.w	--sp,r8
80010cd6:	fa c8 fa b8 	sub	r8,sp,-1352
80010cda:	04 9a       	mov	r10,r2
80010cdc:	1a d8       	st.w	--sp,r8
80010cde:	0c 9b       	mov	r11,r6
80010ce0:	fa c8 fb b4 	sub	r8,sp,-1100
80010ce4:	08 9c       	mov	r12,r4
80010ce6:	1a d8       	st.w	--sp,r8
80010ce8:	fa c8 f9 40 	sub	r8,sp,-1728
80010cec:	fa c9 ff b4 	sub	r9,sp,-76
80010cf0:	fe b0 f4 c0 	rcall	8000f670 <get_arg>
80010cf4:	2f dd       	sub	sp,-12
80010cf6:	f8 ea 00 00 	ld.d	r10,r12[0]
80010cfa:	c0 c8       	rjmp	80010d12 <_vfprintf_r+0x1376>
80010cfc:	ee ca ff ff 	sub	r10,r7,-1
80010d00:	10 37       	cp.w	r7,r8
80010d02:	c0 b4       	brge	80010d18 <_vfprintf_r+0x137c>
80010d04:	fa c9 f9 44 	sub	r9,sp,-1724
80010d08:	14 97       	mov	r7,r10
80010d0a:	f2 06 00 36 	add	r6,r9,r6<<0x3
80010d0e:	ec ea fd 88 	ld.d	r10,r6[-632]
80010d12:	fa eb 00 00 	st.d	sp[0],r10
80010d16:	cc e8       	rjmp	80010eb2 <_vfprintf_r+0x1516>
80010d18:	41 09       	lddsp	r9,sp[0x40]
80010d1a:	59 f8       	cp.w	r8,31
80010d1c:	e0 89 00 16 	brgt	80010d48 <_vfprintf_r+0x13ac>
80010d20:	f2 e6 00 00 	ld.d	r6,r9[0]
80010d24:	f2 cb ff f8 	sub	r11,r9,-8
80010d28:	fa e7 00 00 	st.d	sp[0],r6
80010d2c:	51 0b       	stdsp	sp[0x40],r11
80010d2e:	fa c6 f9 44 	sub	r6,sp,-1724
80010d32:	ec 08 00 39 	add	r9,r6,r8<<0x3
80010d36:	fa e6 00 00 	ld.d	r6,sp[0]
80010d3a:	f2 e7 fd 88 	st.d	r9[-632],r6
80010d3e:	2f f8       	sub	r8,-1
80010d40:	14 97       	mov	r7,r10
80010d42:	fb 48 06 b4 	st.w	sp[1716],r8
80010d46:	cb 68       	rjmp	80010eb2 <_vfprintf_r+0x1516>
80010d48:	f2 e6 00 00 	ld.d	r6,r9[0]
80010d4c:	2f 89       	sub	r9,-8
80010d4e:	fa e7 00 00 	st.d	sp[0],r6
80010d52:	51 09       	stdsp	sp[0x40],r9
80010d54:	14 97       	mov	r7,r10
80010d56:	ca e8       	rjmp	80010eb2 <_vfprintf_r+0x1516>
80010d58:	ed b5 00 04 	bld	r5,0x4
80010d5c:	c1 71       	brne	80010d8a <_vfprintf_r+0x13ee>
80010d5e:	fa f8 06 b4 	ld.w	r8,sp[1716]
80010d62:	40 3e       	lddsp	lr,sp[0xc]
80010d64:	58 0e       	cp.w	lr,0
80010d66:	c0 80       	breq	80010d76 <_vfprintf_r+0x13da>
80010d68:	10 36       	cp.w	r6,r8
80010d6a:	c6 94       	brge	80010e3c <_vfprintf_r+0x14a0>
80010d6c:	fa cc f9 44 	sub	r12,sp,-1724
80010d70:	f8 06 00 36 	add	r6,r12,r6<<0x3
80010d74:	c8 28       	rjmp	80010e78 <_vfprintf_r+0x14dc>
80010d76:	ee ca ff ff 	sub	r10,r7,-1
80010d7a:	10 37       	cp.w	r7,r8
80010d7c:	e0 84 00 81 	brge	80010e7e <_vfprintf_r+0x14e2>
80010d80:	fa cb f9 44 	sub	r11,sp,-1724
80010d84:	f6 06 00 36 	add	r6,r11,r6<<0x3
80010d88:	c7 78       	rjmp	80010e76 <_vfprintf_r+0x14da>
80010d8a:	ed b5 00 06 	bld	r5,0x6
80010d8e:	c4 b1       	brne	80010e24 <_vfprintf_r+0x1488>
80010d90:	fa f8 06 b4 	ld.w	r8,sp[1716]
80010d94:	40 3c       	lddsp	r12,sp[0xc]
80010d96:	58 0c       	cp.w	r12,0
80010d98:	c1 d0       	breq	80010dd2 <_vfprintf_r+0x1436>
80010d9a:	10 36       	cp.w	r6,r8
80010d9c:	c0 64       	brge	80010da8 <_vfprintf_r+0x140c>
80010d9e:	fa cb f9 44 	sub	r11,sp,-1724
80010da2:	f6 06 00 36 	add	r6,r11,r6<<0x3
80010da6:	c1 f8       	rjmp	80010de4 <_vfprintf_r+0x1448>
80010da8:	fa c8 f9 50 	sub	r8,sp,-1712
80010dac:	1a d8       	st.w	--sp,r8
80010dae:	fa c8 fa b8 	sub	r8,sp,-1352
80010db2:	1a d8       	st.w	--sp,r8
80010db4:	fa c8 fb b4 	sub	r8,sp,-1100
80010db8:	1a d8       	st.w	--sp,r8
80010dba:	fa c8 f9 40 	sub	r8,sp,-1728
80010dbe:	fa c9 ff b4 	sub	r9,sp,-76
80010dc2:	04 9a       	mov	r10,r2
80010dc4:	0c 9b       	mov	r11,r6
80010dc6:	08 9c       	mov	r12,r4
80010dc8:	fe b0 f4 54 	rcall	8000f670 <get_arg>
80010dcc:	2f dd       	sub	sp,-12
80010dce:	98 18       	ld.sh	r8,r12[0x2]
80010dd0:	c2 78       	rjmp	80010e1e <_vfprintf_r+0x1482>
80010dd2:	ee ca ff ff 	sub	r10,r7,-1
80010dd6:	10 37       	cp.w	r7,r8
80010dd8:	c0 a4       	brge	80010dec <_vfprintf_r+0x1450>
80010dda:	fa c9 f9 44 	sub	r9,sp,-1724
80010dde:	14 97       	mov	r7,r10
80010de0:	f2 06 00 36 	add	r6,r9,r6<<0x3
80010de4:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
80010de8:	c1 b8       	rjmp	80010e1e <_vfprintf_r+0x1482>
80010dea:	d7 03       	nop
80010dec:	41 09       	lddsp	r9,sp[0x40]
80010dee:	59 f8       	cp.w	r8,31
80010df0:	e0 89 00 13 	brgt	80010e16 <_vfprintf_r+0x147a>
80010df4:	f2 cb ff fc 	sub	r11,r9,-4
80010df8:	51 0b       	stdsp	sp[0x40],r11
80010dfa:	72 09       	ld.w	r9,r9[0x0]
80010dfc:	fa c6 f9 44 	sub	r6,sp,-1724
80010e00:	ec 08 00 3b 	add	r11,r6,r8<<0x3
80010e04:	2f f8       	sub	r8,-1
80010e06:	f7 49 fd 88 	st.w	r11[-632],r9
80010e0a:	fb 48 06 b4 	st.w	sp[1716],r8
80010e0e:	14 97       	mov	r7,r10
80010e10:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
80010e14:	c0 58       	rjmp	80010e1e <_vfprintf_r+0x1482>
80010e16:	92 18       	ld.sh	r8,r9[0x2]
80010e18:	14 97       	mov	r7,r10
80010e1a:	2f c9       	sub	r9,-4
80010e1c:	51 09       	stdsp	sp[0x40],r9
80010e1e:	5c 78       	castu.h	r8
80010e20:	50 18       	stdsp	sp[0x4],r8
80010e22:	c4 68       	rjmp	80010eae <_vfprintf_r+0x1512>
80010e24:	fa f8 06 b4 	ld.w	r8,sp[1716]
80010e28:	40 3c       	lddsp	r12,sp[0xc]
80010e2a:	58 0c       	cp.w	r12,0
80010e2c:	c1 d0       	breq	80010e66 <_vfprintf_r+0x14ca>
80010e2e:	10 36       	cp.w	r6,r8
80010e30:	c0 64       	brge	80010e3c <_vfprintf_r+0x14a0>
80010e32:	fa cb f9 44 	sub	r11,sp,-1724
80010e36:	f6 06 00 36 	add	r6,r11,r6<<0x3
80010e3a:	c1 f8       	rjmp	80010e78 <_vfprintf_r+0x14dc>
80010e3c:	fa c8 f9 50 	sub	r8,sp,-1712
80010e40:	1a d8       	st.w	--sp,r8
80010e42:	fa c8 fa b8 	sub	r8,sp,-1352
80010e46:	0c 9b       	mov	r11,r6
80010e48:	1a d8       	st.w	--sp,r8
80010e4a:	fa c8 fb b4 	sub	r8,sp,-1100
80010e4e:	04 9a       	mov	r10,r2
80010e50:	1a d8       	st.w	--sp,r8
80010e52:	08 9c       	mov	r12,r4
80010e54:	fa c8 f9 40 	sub	r8,sp,-1728
80010e58:	fa c9 ff b4 	sub	r9,sp,-76
80010e5c:	fe b0 f4 0a 	rcall	8000f670 <get_arg>
80010e60:	2f dd       	sub	sp,-12
80010e62:	78 0b       	ld.w	r11,r12[0x0]
80010e64:	c2 48       	rjmp	80010eac <_vfprintf_r+0x1510>
80010e66:	ee ca ff ff 	sub	r10,r7,-1
80010e6a:	10 37       	cp.w	r7,r8
80010e6c:	c0 94       	brge	80010e7e <_vfprintf_r+0x14e2>
80010e6e:	fa c9 f9 44 	sub	r9,sp,-1724
80010e72:	f2 06 00 36 	add	r6,r9,r6<<0x3
80010e76:	14 97       	mov	r7,r10
80010e78:	ec fb fd 88 	ld.w	r11,r6[-632]
80010e7c:	c1 88       	rjmp	80010eac <_vfprintf_r+0x1510>
80010e7e:	41 09       	lddsp	r9,sp[0x40]
80010e80:	59 f8       	cp.w	r8,31
80010e82:	e0 89 00 11 	brgt	80010ea4 <_vfprintf_r+0x1508>
80010e86:	f2 cb ff fc 	sub	r11,r9,-4
80010e8a:	51 0b       	stdsp	sp[0x40],r11
80010e8c:	fa c6 f9 44 	sub	r6,sp,-1724
80010e90:	72 0b       	ld.w	r11,r9[0x0]
80010e92:	ec 08 00 39 	add	r9,r6,r8<<0x3
80010e96:	f3 4b fd 88 	st.w	r9[-632],r11
80010e9a:	2f f8       	sub	r8,-1
80010e9c:	14 97       	mov	r7,r10
80010e9e:	fb 48 06 b4 	st.w	sp[1716],r8
80010ea2:	c0 58       	rjmp	80010eac <_vfprintf_r+0x1510>
80010ea4:	72 0b       	ld.w	r11,r9[0x0]
80010ea6:	14 97       	mov	r7,r10
80010ea8:	2f c9       	sub	r9,-4
80010eaa:	51 09       	stdsp	sp[0x40],r9
80010eac:	50 1b       	stdsp	sp[0x4],r11
80010eae:	30 0e       	mov	lr,0
80010eb0:	50 0e       	stdsp	sp[0x0],lr
80010eb2:	40 08       	lddsp	r8,sp[0x0]
80010eb4:	40 1c       	lddsp	r12,sp[0x4]
80010eb6:	18 48       	or	r8,r12
80010eb8:	5f 19       	srne	r9
80010eba:	0a 98       	mov	r8,r5
80010ebc:	eb e9 00 09 	and	r9,r5,r9
80010ec0:	a1 b8       	sbr	r8,0x1
80010ec2:	58 09       	cp.w	r9,0
80010ec4:	c0 70       	breq	80010ed2 <_vfprintf_r+0x1536>
80010ec6:	10 95       	mov	r5,r8
80010ec8:	fb 60 06 b9 	st.b	sp[1721],r0
80010ecc:	33 08       	mov	r8,48
80010ece:	fb 68 06 b8 	st.b	sp[1720],r8
80010ed2:	30 28       	mov	r8,2
80010ed4:	30 09       	mov	r9,0
80010ed6:	fb 69 06 bb 	st.b	sp[1723],r9
80010eda:	0a 99       	mov	r9,r5
80010edc:	a7 d9       	cbr	r9,0x7
80010ede:	40 2b       	lddsp	r11,sp[0x8]
80010ee0:	40 16       	lddsp	r6,sp[0x4]
80010ee2:	58 0b       	cp.w	r11,0
80010ee4:	5f 1a       	srne	r10
80010ee6:	f2 05 17 40 	movge	r5,r9
80010eea:	fa c2 f9 78 	sub	r2,sp,-1672
80010eee:	40 09       	lddsp	r9,sp[0x0]
80010ef0:	0c 49       	or	r9,r6
80010ef2:	5f 19       	srne	r9
80010ef4:	f5 e9 10 09 	or	r9,r10,r9
80010ef8:	c5 c0       	breq	80010fb0 <_vfprintf_r+0x1614>
80010efa:	30 19       	mov	r9,1
80010efc:	f2 08 18 00 	cp.b	r8,r9
80010f00:	c0 60       	breq	80010f0c <_vfprintf_r+0x1570>
80010f02:	30 29       	mov	r9,2
80010f04:	f2 08 18 00 	cp.b	r8,r9
80010f08:	c0 41       	brne	80010f10 <_vfprintf_r+0x1574>
80010f0a:	c3 c8       	rjmp	80010f82 <_vfprintf_r+0x15e6>
80010f0c:	04 96       	mov	r6,r2
80010f0e:	c3 08       	rjmp	80010f6e <_vfprintf_r+0x15d2>
80010f10:	04 96       	mov	r6,r2
80010f12:	fa e8 00 00 	ld.d	r8,sp[0]
80010f16:	f5 d8 c0 03 	bfextu	r10,r8,0x0,0x3
80010f1a:	2d 0a       	sub	r10,-48
80010f1c:	0c fa       	st.b	--r6,r10
80010f1e:	f0 0b 16 03 	lsr	r11,r8,0x3
80010f22:	f2 0c 16 03 	lsr	r12,r9,0x3
80010f26:	f7 e9 11 db 	or	r11,r11,r9<<0x1d
80010f2a:	18 99       	mov	r9,r12
80010f2c:	16 98       	mov	r8,r11
80010f2e:	58 08       	cp.w	r8,0
80010f30:	5c 29       	cpc	r9
80010f32:	cf 21       	brne	80010f16 <_vfprintf_r+0x157a>
80010f34:	fa e9 00 00 	st.d	sp[0],r8
80010f38:	ed b5 00 00 	bld	r5,0x0
80010f3c:	c4 51       	brne	80010fc6 <_vfprintf_r+0x162a>
80010f3e:	33 09       	mov	r9,48
80010f40:	f2 0a 18 00 	cp.b	r10,r9
80010f44:	c4 10       	breq	80010fc6 <_vfprintf_r+0x162a>
80010f46:	0c f9       	st.b	--r6,r9
80010f48:	c3 f8       	rjmp	80010fc6 <_vfprintf_r+0x162a>
80010f4a:	fa ea 00 00 	ld.d	r10,sp[0]
80010f4e:	30 a8       	mov	r8,10
80010f50:	30 09       	mov	r9,0
80010f52:	e0 a0 1c f7 	rcall	80014940 <__avr32_umod64>
80010f56:	30 a8       	mov	r8,10
80010f58:	2d 0a       	sub	r10,-48
80010f5a:	30 09       	mov	r9,0
80010f5c:	ac 8a       	st.b	r6[0x0],r10
80010f5e:	fa ea 00 00 	ld.d	r10,sp[0]
80010f62:	fe b0 f1 27 	rcall	8000f1b0 <__avr32_udiv64>
80010f66:	16 99       	mov	r9,r11
80010f68:	14 98       	mov	r8,r10
80010f6a:	fa e9 00 00 	st.d	sp[0],r8
80010f6e:	20 16       	sub	r6,1
80010f70:	fa ea 00 00 	ld.d	r10,sp[0]
80010f74:	58 9a       	cp.w	r10,9
80010f76:	5c 2b       	cpc	r11
80010f78:	fe 9b ff e9 	brhi	80010f4a <_vfprintf_r+0x15ae>
80010f7c:	1b f8       	ld.ub	r8,sp[0x7]
80010f7e:	2d 08       	sub	r8,-48
80010f80:	c2 08       	rjmp	80010fc0 <_vfprintf_r+0x1624>
80010f82:	04 96       	mov	r6,r2
80010f84:	fa e8 00 00 	ld.d	r8,sp[0]
80010f88:	f5 d8 c0 04 	bfextu	r10,r8,0x0,0x4
80010f8c:	40 de       	lddsp	lr,sp[0x34]
80010f8e:	fc 0a 07 0a 	ld.ub	r10,lr[r10]
80010f92:	0c fa       	st.b	--r6,r10
80010f94:	f2 0b 16 04 	lsr	r11,r9,0x4
80010f98:	f0 0a 16 04 	lsr	r10,r8,0x4
80010f9c:	f5 e9 11 ca 	or	r10,r10,r9<<0x1c
80010fa0:	16 99       	mov	r9,r11
80010fa2:	14 98       	mov	r8,r10
80010fa4:	58 08       	cp.w	r8,0
80010fa6:	5c 29       	cpc	r9
80010fa8:	cf 01       	brne	80010f88 <_vfprintf_r+0x15ec>
80010faa:	fa e9 00 00 	st.d	sp[0],r8
80010fae:	c0 c8       	rjmp	80010fc6 <_vfprintf_r+0x162a>
80010fb0:	58 08       	cp.w	r8,0
80010fb2:	c0 91       	brne	80010fc4 <_vfprintf_r+0x1628>
80010fb4:	ed b5 00 00 	bld	r5,0x0
80010fb8:	c0 61       	brne	80010fc4 <_vfprintf_r+0x1628>
80010fba:	fa c6 f9 79 	sub	r6,sp,-1671
80010fbe:	33 08       	mov	r8,48
80010fc0:	ac 88       	st.b	r6[0x0],r8
80010fc2:	c0 28       	rjmp	80010fc6 <_vfprintf_r+0x162a>
80010fc4:	04 96       	mov	r6,r2
80010fc6:	0c 12       	sub	r2,r6
80010fc8:	c1 c8       	rjmp	80011000 <_vfprintf_r+0x1664>
80010fca:	50 a7       	stdsp	sp[0x28],r7
80010fcc:	50 80       	stdsp	sp[0x20],r0
80010fce:	40 93       	lddsp	r3,sp[0x24]
80010fd0:	0c 97       	mov	r7,r6
80010fd2:	10 90       	mov	r0,r8
80010fd4:	04 94       	mov	r4,r2
80010fd6:	40 41       	lddsp	r1,sp[0x10]
80010fd8:	58 08       	cp.w	r8,0
80010fda:	e0 80 04 4f 	breq	80011878 <_vfprintf_r+0x1edc>
80010fde:	fb 68 06 60 	st.b	sp[1632],r8
80010fe2:	30 0c       	mov	r12,0
80010fe4:	30 08       	mov	r8,0
80010fe6:	30 12       	mov	r2,1
80010fe8:	fb 68 06 bb 	st.b	sp[1723],r8
80010fec:	50 2c       	stdsp	sp[0x8],r12
80010fee:	fa c6 f9 a0 	sub	r6,sp,-1632
80010ff2:	c0 78       	rjmp	80011000 <_vfprintf_r+0x1664>
80010ff4:	30 0b       	mov	r11,0
80010ff6:	50 2b       	stdsp	sp[0x8],r11
80010ff8:	c0 48       	rjmp	80011000 <_vfprintf_r+0x1664>
80010ffa:	40 22       	lddsp	r2,sp[0x8]
80010ffc:	30 0a       	mov	r10,0
80010ffe:	50 2a       	stdsp	sp[0x8],r10
80011000:	40 29       	lddsp	r9,sp[0x8]
80011002:	e4 09 0c 49 	max	r9,r2,r9
80011006:	fb 38 06 bb 	ld.ub	r8,sp[1723]
8001100a:	50 39       	stdsp	sp[0xc],r9
8001100c:	0a 9e       	mov	lr,r5
8001100e:	30 09       	mov	r9,0
80011010:	e2 1e 00 02 	andl	lr,0x2,COH
80011014:	f2 08 18 00 	cp.b	r8,r9
80011018:	fb f8 10 03 	ld.wne	r8,sp[0xc]
8001101c:	f7 b8 01 ff 	subne	r8,-1
80011020:	fb f8 1a 03 	st.wne	sp[0xc],r8
80011024:	0a 9b       	mov	r11,r5
80011026:	58 0e       	cp.w	lr,0
80011028:	fb fc 10 03 	ld.wne	r12,sp[0xc]
8001102c:	f7 bc 01 fe 	subne	r12,-2
80011030:	fb fc 1a 03 	st.wne	sp[0xc],r12
80011034:	e2 1b 00 84 	andl	r11,0x84,COH
80011038:	50 fe       	stdsp	sp[0x3c],lr
8001103a:	50 9b       	stdsp	sp[0x24],r11
8001103c:	c4 71       	brne	800110ca <_vfprintf_r+0x172e>
8001103e:	40 8a       	lddsp	r10,sp[0x20]
80011040:	40 39       	lddsp	r9,sp[0xc]
80011042:	12 1a       	sub	r10,r9
80011044:	50 4a       	stdsp	sp[0x10],r10
80011046:	58 0a       	cp.w	r10,0
80011048:	e0 89 00 20 	brgt	80011088 <_vfprintf_r+0x16ec>
8001104c:	c3 f8       	rjmp	800110ca <_vfprintf_r+0x172e>
8001104e:	2f 09       	sub	r9,-16
80011050:	2f f8       	sub	r8,-1
80011052:	fe ce bc 8e 	sub	lr,pc,-17266
80011056:	31 0c       	mov	r12,16
80011058:	fb 49 06 90 	st.w	sp[1680],r9
8001105c:	87 0e       	st.w	r3[0x0],lr
8001105e:	87 1c       	st.w	r3[0x4],r12
80011060:	fb 48 06 8c 	st.w	sp[1676],r8
80011064:	58 78       	cp.w	r8,7
80011066:	e0 89 00 04 	brgt	8001106e <_vfprintf_r+0x16d2>
8001106a:	2f 83       	sub	r3,-8
8001106c:	c0 b8       	rjmp	80011082 <_vfprintf_r+0x16e6>
8001106e:	fa ca f9 78 	sub	r10,sp,-1672
80011072:	02 9b       	mov	r11,r1
80011074:	08 9c       	mov	r12,r4
80011076:	fe b0 f4 85 	rcall	8000f980 <__sprint_r>
8001107a:	e0 81 04 10 	brne	8001189a <_vfprintf_r+0x1efe>
8001107e:	fa c3 f9 e0 	sub	r3,sp,-1568
80011082:	40 4b       	lddsp	r11,sp[0x10]
80011084:	21 0b       	sub	r11,16
80011086:	50 4b       	stdsp	sp[0x10],r11
80011088:	fa f9 06 90 	ld.w	r9,sp[1680]
8001108c:	fa f8 06 8c 	ld.w	r8,sp[1676]
80011090:	fe ca bc cc 	sub	r10,pc,-17204
80011094:	40 4e       	lddsp	lr,sp[0x10]
80011096:	59 0e       	cp.w	lr,16
80011098:	fe 99 ff db 	brgt	8001104e <_vfprintf_r+0x16b2>
8001109c:	1c 09       	add	r9,lr
8001109e:	2f f8       	sub	r8,-1
800110a0:	87 0a       	st.w	r3[0x0],r10
800110a2:	fb 49 06 90 	st.w	sp[1680],r9
800110a6:	87 1e       	st.w	r3[0x4],lr
800110a8:	fb 48 06 8c 	st.w	sp[1676],r8
800110ac:	58 78       	cp.w	r8,7
800110ae:	e0 89 00 04 	brgt	800110b6 <_vfprintf_r+0x171a>
800110b2:	2f 83       	sub	r3,-8
800110b4:	c0 b8       	rjmp	800110ca <_vfprintf_r+0x172e>
800110b6:	fa ca f9 78 	sub	r10,sp,-1672
800110ba:	02 9b       	mov	r11,r1
800110bc:	08 9c       	mov	r12,r4
800110be:	fe b0 f4 61 	rcall	8000f980 <__sprint_r>
800110c2:	e0 81 03 ec 	brne	8001189a <_vfprintf_r+0x1efe>
800110c6:	fa c3 f9 e0 	sub	r3,sp,-1568
800110ca:	30 09       	mov	r9,0
800110cc:	fb 38 06 bb 	ld.ub	r8,sp[1723]
800110d0:	f2 08 18 00 	cp.b	r8,r9
800110d4:	c1 f0       	breq	80011112 <_vfprintf_r+0x1776>
800110d6:	fa f8 06 90 	ld.w	r8,sp[1680]
800110da:	fa c9 f9 45 	sub	r9,sp,-1723
800110de:	2f f8       	sub	r8,-1
800110e0:	87 09       	st.w	r3[0x0],r9
800110e2:	fb 48 06 90 	st.w	sp[1680],r8
800110e6:	30 19       	mov	r9,1
800110e8:	fa f8 06 8c 	ld.w	r8,sp[1676]
800110ec:	87 19       	st.w	r3[0x4],r9
800110ee:	2f f8       	sub	r8,-1
800110f0:	fb 48 06 8c 	st.w	sp[1676],r8
800110f4:	58 78       	cp.w	r8,7
800110f6:	e0 89 00 04 	brgt	800110fe <_vfprintf_r+0x1762>
800110fa:	2f 83       	sub	r3,-8
800110fc:	c0 b8       	rjmp	80011112 <_vfprintf_r+0x1776>
800110fe:	fa ca f9 78 	sub	r10,sp,-1672
80011102:	02 9b       	mov	r11,r1
80011104:	08 9c       	mov	r12,r4
80011106:	fe b0 f4 3d 	rcall	8000f980 <__sprint_r>
8001110a:	e0 81 03 c8 	brne	8001189a <_vfprintf_r+0x1efe>
8001110e:	fa c3 f9 e0 	sub	r3,sp,-1568
80011112:	40 fc       	lddsp	r12,sp[0x3c]
80011114:	58 0c       	cp.w	r12,0
80011116:	c1 f0       	breq	80011154 <_vfprintf_r+0x17b8>
80011118:	fa f8 06 90 	ld.w	r8,sp[1680]
8001111c:	fa c9 f9 48 	sub	r9,sp,-1720
80011120:	2f e8       	sub	r8,-2
80011122:	87 09       	st.w	r3[0x0],r9
80011124:	fb 48 06 90 	st.w	sp[1680],r8
80011128:	30 29       	mov	r9,2
8001112a:	fa f8 06 8c 	ld.w	r8,sp[1676]
8001112e:	87 19       	st.w	r3[0x4],r9
80011130:	2f f8       	sub	r8,-1
80011132:	fb 48 06 8c 	st.w	sp[1676],r8
80011136:	58 78       	cp.w	r8,7
80011138:	e0 89 00 04 	brgt	80011140 <_vfprintf_r+0x17a4>
8001113c:	2f 83       	sub	r3,-8
8001113e:	c0 b8       	rjmp	80011154 <_vfprintf_r+0x17b8>
80011140:	fa ca f9 78 	sub	r10,sp,-1672
80011144:	02 9b       	mov	r11,r1
80011146:	08 9c       	mov	r12,r4
80011148:	fe b0 f4 1c 	rcall	8000f980 <__sprint_r>
8001114c:	e0 81 03 a7 	brne	8001189a <_vfprintf_r+0x1efe>
80011150:	fa c3 f9 e0 	sub	r3,sp,-1568
80011154:	40 9b       	lddsp	r11,sp[0x24]
80011156:	e0 4b 00 80 	cp.w	r11,128
8001115a:	c4 71       	brne	800111e8 <_vfprintf_r+0x184c>
8001115c:	40 8a       	lddsp	r10,sp[0x20]
8001115e:	40 39       	lddsp	r9,sp[0xc]
80011160:	12 1a       	sub	r10,r9
80011162:	50 4a       	stdsp	sp[0x10],r10
80011164:	58 0a       	cp.w	r10,0
80011166:	e0 89 00 20 	brgt	800111a6 <_vfprintf_r+0x180a>
8001116a:	c3 f8       	rjmp	800111e8 <_vfprintf_r+0x184c>
8001116c:	2f 09       	sub	r9,-16
8001116e:	2f f8       	sub	r8,-1
80011170:	fe ce bd 9c 	sub	lr,pc,-16996
80011174:	31 0c       	mov	r12,16
80011176:	fb 49 06 90 	st.w	sp[1680],r9
8001117a:	87 0e       	st.w	r3[0x0],lr
8001117c:	87 1c       	st.w	r3[0x4],r12
8001117e:	fb 48 06 8c 	st.w	sp[1676],r8
80011182:	58 78       	cp.w	r8,7
80011184:	e0 89 00 04 	brgt	8001118c <_vfprintf_r+0x17f0>
80011188:	2f 83       	sub	r3,-8
8001118a:	c0 b8       	rjmp	800111a0 <_vfprintf_r+0x1804>
8001118c:	fa ca f9 78 	sub	r10,sp,-1672
80011190:	02 9b       	mov	r11,r1
80011192:	08 9c       	mov	r12,r4
80011194:	fe b0 f3 f6 	rcall	8000f980 <__sprint_r>
80011198:	e0 81 03 81 	brne	8001189a <_vfprintf_r+0x1efe>
8001119c:	fa c3 f9 e0 	sub	r3,sp,-1568
800111a0:	40 4b       	lddsp	r11,sp[0x10]
800111a2:	21 0b       	sub	r11,16
800111a4:	50 4b       	stdsp	sp[0x10],r11
800111a6:	fa f9 06 90 	ld.w	r9,sp[1680]
800111aa:	fa f8 06 8c 	ld.w	r8,sp[1676]
800111ae:	fe ca bd da 	sub	r10,pc,-16934
800111b2:	40 4e       	lddsp	lr,sp[0x10]
800111b4:	59 0e       	cp.w	lr,16
800111b6:	fe 99 ff db 	brgt	8001116c <_vfprintf_r+0x17d0>
800111ba:	1c 09       	add	r9,lr
800111bc:	2f f8       	sub	r8,-1
800111be:	87 0a       	st.w	r3[0x0],r10
800111c0:	fb 49 06 90 	st.w	sp[1680],r9
800111c4:	87 1e       	st.w	r3[0x4],lr
800111c6:	fb 48 06 8c 	st.w	sp[1676],r8
800111ca:	58 78       	cp.w	r8,7
800111cc:	e0 89 00 04 	brgt	800111d4 <_vfprintf_r+0x1838>
800111d0:	2f 83       	sub	r3,-8
800111d2:	c0 b8       	rjmp	800111e8 <_vfprintf_r+0x184c>
800111d4:	fa ca f9 78 	sub	r10,sp,-1672
800111d8:	02 9b       	mov	r11,r1
800111da:	08 9c       	mov	r12,r4
800111dc:	fe b0 f3 d2 	rcall	8000f980 <__sprint_r>
800111e0:	e0 81 03 5d 	brne	8001189a <_vfprintf_r+0x1efe>
800111e4:	fa c3 f9 e0 	sub	r3,sp,-1568
800111e8:	40 2c       	lddsp	r12,sp[0x8]
800111ea:	04 1c       	sub	r12,r2
800111ec:	50 2c       	stdsp	sp[0x8],r12
800111ee:	58 0c       	cp.w	r12,0
800111f0:	e0 89 00 20 	brgt	80011230 <_vfprintf_r+0x1894>
800111f4:	c3 f8       	rjmp	80011272 <_vfprintf_r+0x18d6>
800111f6:	2f 09       	sub	r9,-16
800111f8:	2f f8       	sub	r8,-1
800111fa:	fe cb be 26 	sub	r11,pc,-16858
800111fe:	31 0a       	mov	r10,16
80011200:	fb 49 06 90 	st.w	sp[1680],r9
80011204:	87 0b       	st.w	r3[0x0],r11
80011206:	87 1a       	st.w	r3[0x4],r10
80011208:	fb 48 06 8c 	st.w	sp[1676],r8
8001120c:	58 78       	cp.w	r8,7
8001120e:	e0 89 00 04 	brgt	80011216 <_vfprintf_r+0x187a>
80011212:	2f 83       	sub	r3,-8
80011214:	c0 b8       	rjmp	8001122a <_vfprintf_r+0x188e>
80011216:	fa ca f9 78 	sub	r10,sp,-1672
8001121a:	02 9b       	mov	r11,r1
8001121c:	08 9c       	mov	r12,r4
8001121e:	fe b0 f3 b1 	rcall	8000f980 <__sprint_r>
80011222:	e0 81 03 3c 	brne	8001189a <_vfprintf_r+0x1efe>
80011226:	fa c3 f9 e0 	sub	r3,sp,-1568
8001122a:	40 29       	lddsp	r9,sp[0x8]
8001122c:	21 09       	sub	r9,16
8001122e:	50 29       	stdsp	sp[0x8],r9
80011230:	fa f9 06 90 	ld.w	r9,sp[1680]
80011234:	fa f8 06 8c 	ld.w	r8,sp[1676]
80011238:	fe ca be 64 	sub	r10,pc,-16796
8001123c:	40 2e       	lddsp	lr,sp[0x8]
8001123e:	59 0e       	cp.w	lr,16
80011240:	fe 99 ff db 	brgt	800111f6 <_vfprintf_r+0x185a>
80011244:	1c 09       	add	r9,lr
80011246:	2f f8       	sub	r8,-1
80011248:	87 0a       	st.w	r3[0x0],r10
8001124a:	fb 49 06 90 	st.w	sp[1680],r9
8001124e:	87 1e       	st.w	r3[0x4],lr
80011250:	fb 48 06 8c 	st.w	sp[1676],r8
80011254:	58 78       	cp.w	r8,7
80011256:	e0 89 00 04 	brgt	8001125e <_vfprintf_r+0x18c2>
8001125a:	2f 83       	sub	r3,-8
8001125c:	c0 b8       	rjmp	80011272 <_vfprintf_r+0x18d6>
8001125e:	fa ca f9 78 	sub	r10,sp,-1672
80011262:	02 9b       	mov	r11,r1
80011264:	08 9c       	mov	r12,r4
80011266:	fe b0 f3 8d 	rcall	8000f980 <__sprint_r>
8001126a:	e0 81 03 18 	brne	8001189a <_vfprintf_r+0x1efe>
8001126e:	fa c3 f9 e0 	sub	r3,sp,-1568
80011272:	ed b5 00 08 	bld	r5,0x8
80011276:	c0 b0       	breq	8001128c <_vfprintf_r+0x18f0>
80011278:	fa f8 06 90 	ld.w	r8,sp[1680]
8001127c:	87 12       	st.w	r3[0x4],r2
8001127e:	87 06       	st.w	r3[0x0],r6
80011280:	f0 02 00 02 	add	r2,r8,r2
80011284:	fb 42 06 90 	st.w	sp[1680],r2
80011288:	e0 8f 01 d4 	bral	80011630 <_vfprintf_r+0x1c94>
8001128c:	e0 40 00 65 	cp.w	r0,101
80011290:	e0 8a 01 d6 	brle	8001163c <_vfprintf_r+0x1ca0>
80011294:	30 08       	mov	r8,0
80011296:	30 09       	mov	r9,0
80011298:	40 5b       	lddsp	r11,sp[0x14]
8001129a:	40 7a       	lddsp	r10,sp[0x1c]
8001129c:	e0 a0 19 4b 	rcall	80014532 <__avr32_f64_cmp_eq>
800112a0:	c7 90       	breq	80011392 <_vfprintf_r+0x19f6>
800112a2:	fa f8 06 90 	ld.w	r8,sp[1680]
800112a6:	fe c9 be e6 	sub	r9,pc,-16666
800112aa:	2f f8       	sub	r8,-1
800112ac:	87 09       	st.w	r3[0x0],r9
800112ae:	fb 48 06 90 	st.w	sp[1680],r8
800112b2:	30 19       	mov	r9,1
800112b4:	fa f8 06 8c 	ld.w	r8,sp[1676]
800112b8:	87 19       	st.w	r3[0x4],r9
800112ba:	2f f8       	sub	r8,-1
800112bc:	fb 48 06 8c 	st.w	sp[1676],r8
800112c0:	58 78       	cp.w	r8,7
800112c2:	e0 89 00 05 	brgt	800112cc <_vfprintf_r+0x1930>
800112c6:	2f 83       	sub	r3,-8
800112c8:	c0 c8       	rjmp	800112e0 <_vfprintf_r+0x1944>
800112ca:	d7 03       	nop
800112cc:	fa ca f9 78 	sub	r10,sp,-1672
800112d0:	02 9b       	mov	r11,r1
800112d2:	08 9c       	mov	r12,r4
800112d4:	fe b0 f3 56 	rcall	8000f980 <__sprint_r>
800112d8:	e0 81 02 e1 	brne	8001189a <_vfprintf_r+0x1efe>
800112dc:	fa c3 f9 e0 	sub	r3,sp,-1568
800112e0:	fa f8 06 ac 	ld.w	r8,sp[1708]
800112e4:	40 6c       	lddsp	r12,sp[0x18]
800112e6:	18 38       	cp.w	r8,r12
800112e8:	c0 55       	brlt	800112f2 <_vfprintf_r+0x1956>
800112ea:	ed b5 00 00 	bld	r5,0x0
800112ee:	e0 81 02 6b 	brne	800117c4 <_vfprintf_r+0x1e28>
800112f2:	fa f8 06 90 	ld.w	r8,sp[1680]
800112f6:	2f f8       	sub	r8,-1
800112f8:	40 cb       	lddsp	r11,sp[0x30]
800112fa:	fb 48 06 90 	st.w	sp[1680],r8
800112fe:	30 19       	mov	r9,1
80011300:	fa f8 06 8c 	ld.w	r8,sp[1676]
80011304:	87 0b       	st.w	r3[0x0],r11
80011306:	2f f8       	sub	r8,-1
80011308:	87 19       	st.w	r3[0x4],r9
8001130a:	fb 48 06 8c 	st.w	sp[1676],r8
8001130e:	58 78       	cp.w	r8,7
80011310:	e0 89 00 04 	brgt	80011318 <_vfprintf_r+0x197c>
80011314:	2f 83       	sub	r3,-8
80011316:	c0 b8       	rjmp	8001132c <_vfprintf_r+0x1990>
80011318:	fa ca f9 78 	sub	r10,sp,-1672
8001131c:	02 9b       	mov	r11,r1
8001131e:	08 9c       	mov	r12,r4
80011320:	fe b0 f3 30 	rcall	8000f980 <__sprint_r>
80011324:	e0 81 02 bb 	brne	8001189a <_vfprintf_r+0x1efe>
80011328:	fa c3 f9 e0 	sub	r3,sp,-1568
8001132c:	40 66       	lddsp	r6,sp[0x18]
8001132e:	20 16       	sub	r6,1
80011330:	58 06       	cp.w	r6,0
80011332:	e0 89 00 1d 	brgt	8001136c <_vfprintf_r+0x19d0>
80011336:	e0 8f 02 47 	bral	800117c4 <_vfprintf_r+0x1e28>
8001133a:	2f 09       	sub	r9,-16
8001133c:	2f f8       	sub	r8,-1
8001133e:	fb 49 06 90 	st.w	sp[1680],r9
80011342:	87 02       	st.w	r3[0x0],r2
80011344:	87 10       	st.w	r3[0x4],r0
80011346:	fb 48 06 8c 	st.w	sp[1676],r8
8001134a:	58 78       	cp.w	r8,7
8001134c:	e0 89 00 04 	brgt	80011354 <_vfprintf_r+0x19b8>
80011350:	2f 83       	sub	r3,-8
80011352:	c0 b8       	rjmp	80011368 <_vfprintf_r+0x19cc>
80011354:	fa ca f9 78 	sub	r10,sp,-1672
80011358:	02 9b       	mov	r11,r1
8001135a:	08 9c       	mov	r12,r4
8001135c:	fe b0 f3 12 	rcall	8000f980 <__sprint_r>
80011360:	e0 81 02 9d 	brne	8001189a <_vfprintf_r+0x1efe>
80011364:	fa c3 f9 e0 	sub	r3,sp,-1568
80011368:	21 06       	sub	r6,16
8001136a:	c0 48       	rjmp	80011372 <_vfprintf_r+0x19d6>
8001136c:	fe c2 bf 98 	sub	r2,pc,-16488
80011370:	31 00       	mov	r0,16
80011372:	fa f9 06 90 	ld.w	r9,sp[1680]
80011376:	fa f8 06 8c 	ld.w	r8,sp[1676]
8001137a:	fe ca bf a6 	sub	r10,pc,-16474
8001137e:	59 06       	cp.w	r6,16
80011380:	fe 99 ff dd 	brgt	8001133a <_vfprintf_r+0x199e>
80011384:	0c 09       	add	r9,r6
80011386:	87 0a       	st.w	r3[0x0],r10
80011388:	fb 49 06 90 	st.w	sp[1680],r9
8001138c:	2f f8       	sub	r8,-1
8001138e:	87 16       	st.w	r3[0x4],r6
80011390:	c5 39       	rjmp	80011636 <_vfprintf_r+0x1c9a>
80011392:	fa fa 06 ac 	ld.w	r10,sp[1708]
80011396:	58 0a       	cp.w	r10,0
80011398:	e0 89 00 92 	brgt	800114bc <_vfprintf_r+0x1b20>
8001139c:	fa f8 06 90 	ld.w	r8,sp[1680]
800113a0:	fe c9 bf e0 	sub	r9,pc,-16416
800113a4:	2f f8       	sub	r8,-1
800113a6:	87 09       	st.w	r3[0x0],r9
800113a8:	fb 48 06 90 	st.w	sp[1680],r8
800113ac:	30 19       	mov	r9,1
800113ae:	fa f8 06 8c 	ld.w	r8,sp[1676]
800113b2:	87 19       	st.w	r3[0x4],r9
800113b4:	2f f8       	sub	r8,-1
800113b6:	fb 48 06 8c 	st.w	sp[1676],r8
800113ba:	58 78       	cp.w	r8,7
800113bc:	e0 89 00 04 	brgt	800113c4 <_vfprintf_r+0x1a28>
800113c0:	2f 83       	sub	r3,-8
800113c2:	c0 b8       	rjmp	800113d8 <_vfprintf_r+0x1a3c>
800113c4:	fa ca f9 78 	sub	r10,sp,-1672
800113c8:	02 9b       	mov	r11,r1
800113ca:	08 9c       	mov	r12,r4
800113cc:	fe b0 f2 da 	rcall	8000f980 <__sprint_r>
800113d0:	e0 81 02 65 	brne	8001189a <_vfprintf_r+0x1efe>
800113d4:	fa c3 f9 e0 	sub	r3,sp,-1568
800113d8:	fa f8 06 ac 	ld.w	r8,sp[1708]
800113dc:	58 08       	cp.w	r8,0
800113de:	c0 81       	brne	800113ee <_vfprintf_r+0x1a52>
800113e0:	40 6a       	lddsp	r10,sp[0x18]
800113e2:	58 0a       	cp.w	r10,0
800113e4:	c0 51       	brne	800113ee <_vfprintf_r+0x1a52>
800113e6:	ed b5 00 00 	bld	r5,0x0
800113ea:	e0 81 01 ed 	brne	800117c4 <_vfprintf_r+0x1e28>
800113ee:	40 c9       	lddsp	r9,sp[0x30]
800113f0:	fa f8 06 90 	ld.w	r8,sp[1680]
800113f4:	2f f8       	sub	r8,-1
800113f6:	87 09       	st.w	r3[0x0],r9
800113f8:	fb 48 06 90 	st.w	sp[1680],r8
800113fc:	30 19       	mov	r9,1
800113fe:	fa f8 06 8c 	ld.w	r8,sp[1676]
80011402:	87 19       	st.w	r3[0x4],r9
80011404:	2f f8       	sub	r8,-1
80011406:	fb 48 06 8c 	st.w	sp[1676],r8
8001140a:	58 78       	cp.w	r8,7
8001140c:	e0 89 00 04 	brgt	80011414 <_vfprintf_r+0x1a78>
80011410:	2f 83       	sub	r3,-8
80011412:	c0 b8       	rjmp	80011428 <_vfprintf_r+0x1a8c>
80011414:	fa ca f9 78 	sub	r10,sp,-1672
80011418:	02 9b       	mov	r11,r1
8001141a:	08 9c       	mov	r12,r4
8001141c:	fe b0 f2 b2 	rcall	8000f980 <__sprint_r>
80011420:	e0 81 02 3d 	brne	8001189a <_vfprintf_r+0x1efe>
80011424:	fa c3 f9 e0 	sub	r3,sp,-1568
80011428:	fa f2 06 ac 	ld.w	r2,sp[1708]
8001142c:	5c 32       	neg	r2
8001142e:	58 02       	cp.w	r2,0
80011430:	e0 89 00 1d 	brgt	8001146a <_vfprintf_r+0x1ace>
80011434:	c3 d8       	rjmp	800114ae <_vfprintf_r+0x1b12>
80011436:	2f 09       	sub	r9,-16
80011438:	2f f8       	sub	r8,-1
8001143a:	31 0e       	mov	lr,16
8001143c:	fb 49 06 90 	st.w	sp[1680],r9
80011440:	87 00       	st.w	r3[0x0],r0
80011442:	87 1e       	st.w	r3[0x4],lr
80011444:	fb 48 06 8c 	st.w	sp[1676],r8
80011448:	58 78       	cp.w	r8,7
8001144a:	e0 89 00 04 	brgt	80011452 <_vfprintf_r+0x1ab6>
8001144e:	2f 83       	sub	r3,-8
80011450:	c0 b8       	rjmp	80011466 <_vfprintf_r+0x1aca>
80011452:	fa ca f9 78 	sub	r10,sp,-1672
80011456:	02 9b       	mov	r11,r1
80011458:	08 9c       	mov	r12,r4
8001145a:	fe b0 f2 93 	rcall	8000f980 <__sprint_r>
8001145e:	e0 81 02 1e 	brne	8001189a <_vfprintf_r+0x1efe>
80011462:	fa c3 f9 e0 	sub	r3,sp,-1568
80011466:	21 02       	sub	r2,16
80011468:	c0 38       	rjmp	8001146e <_vfprintf_r+0x1ad2>
8001146a:	fe c0 c0 96 	sub	r0,pc,-16234
8001146e:	fa f9 06 90 	ld.w	r9,sp[1680]
80011472:	fa f8 06 8c 	ld.w	r8,sp[1676]
80011476:	fe ca c0 a2 	sub	r10,pc,-16222
8001147a:	59 02       	cp.w	r2,16
8001147c:	fe 99 ff dd 	brgt	80011436 <_vfprintf_r+0x1a9a>
80011480:	04 09       	add	r9,r2
80011482:	2f f8       	sub	r8,-1
80011484:	87 0a       	st.w	r3[0x0],r10
80011486:	fb 49 06 90 	st.w	sp[1680],r9
8001148a:	87 12       	st.w	r3[0x4],r2
8001148c:	fb 48 06 8c 	st.w	sp[1676],r8
80011490:	58 78       	cp.w	r8,7
80011492:	e0 89 00 04 	brgt	8001149a <_vfprintf_r+0x1afe>
80011496:	2f 83       	sub	r3,-8
80011498:	c0 b8       	rjmp	800114ae <_vfprintf_r+0x1b12>
8001149a:	fa ca f9 78 	sub	r10,sp,-1672
8001149e:	02 9b       	mov	r11,r1
800114a0:	08 9c       	mov	r12,r4
800114a2:	fe b0 f2 6f 	rcall	8000f980 <__sprint_r>
800114a6:	e0 81 01 fa 	brne	8001189a <_vfprintf_r+0x1efe>
800114aa:	fa c3 f9 e0 	sub	r3,sp,-1568
800114ae:	40 6c       	lddsp	r12,sp[0x18]
800114b0:	fa f8 06 90 	ld.w	r8,sp[1680]
800114b4:	87 06       	st.w	r3[0x0],r6
800114b6:	87 1c       	st.w	r3[0x4],r12
800114b8:	18 08       	add	r8,r12
800114ba:	cb 98       	rjmp	8001162c <_vfprintf_r+0x1c90>
800114bc:	fa f9 06 90 	ld.w	r9,sp[1680]
800114c0:	fa f8 06 8c 	ld.w	r8,sp[1676]
800114c4:	40 6b       	lddsp	r11,sp[0x18]
800114c6:	16 3a       	cp.w	r10,r11
800114c8:	c6 f5       	brlt	800115a6 <_vfprintf_r+0x1c0a>
800114ca:	16 09       	add	r9,r11
800114cc:	2f f8       	sub	r8,-1
800114ce:	87 06       	st.w	r3[0x0],r6
800114d0:	fb 49 06 90 	st.w	sp[1680],r9
800114d4:	87 1b       	st.w	r3[0x4],r11
800114d6:	fb 48 06 8c 	st.w	sp[1676],r8
800114da:	58 78       	cp.w	r8,7
800114dc:	e0 89 00 04 	brgt	800114e4 <_vfprintf_r+0x1b48>
800114e0:	2f 83       	sub	r3,-8
800114e2:	c0 b8       	rjmp	800114f8 <_vfprintf_r+0x1b5c>
800114e4:	fa ca f9 78 	sub	r10,sp,-1672
800114e8:	02 9b       	mov	r11,r1
800114ea:	08 9c       	mov	r12,r4
800114ec:	fe b0 f2 4a 	rcall	8000f980 <__sprint_r>
800114f0:	e0 81 01 d5 	brne	8001189a <_vfprintf_r+0x1efe>
800114f4:	fa c3 f9 e0 	sub	r3,sp,-1568
800114f8:	fa f6 06 ac 	ld.w	r6,sp[1708]
800114fc:	40 6a       	lddsp	r10,sp[0x18]
800114fe:	14 16       	sub	r6,r10
80011500:	58 06       	cp.w	r6,0
80011502:	e0 89 00 1c 	brgt	8001153a <_vfprintf_r+0x1b9e>
80011506:	c3 d8       	rjmp	80011580 <_vfprintf_r+0x1be4>
80011508:	2f 09       	sub	r9,-16
8001150a:	2f f8       	sub	r8,-1
8001150c:	fb 49 06 90 	st.w	sp[1680],r9
80011510:	87 02       	st.w	r3[0x0],r2
80011512:	87 10       	st.w	r3[0x4],r0
80011514:	fb 48 06 8c 	st.w	sp[1676],r8
80011518:	58 78       	cp.w	r8,7
8001151a:	e0 89 00 04 	brgt	80011522 <_vfprintf_r+0x1b86>
8001151e:	2f 83       	sub	r3,-8
80011520:	c0 b8       	rjmp	80011536 <_vfprintf_r+0x1b9a>
80011522:	fa ca f9 78 	sub	r10,sp,-1672
80011526:	02 9b       	mov	r11,r1
80011528:	08 9c       	mov	r12,r4
8001152a:	fe b0 f2 2b 	rcall	8000f980 <__sprint_r>
8001152e:	e0 81 01 b6 	brne	8001189a <_vfprintf_r+0x1efe>
80011532:	fa c3 f9 e0 	sub	r3,sp,-1568
80011536:	21 06       	sub	r6,16
80011538:	c0 48       	rjmp	80011540 <_vfprintf_r+0x1ba4>
8001153a:	fe c2 c1 66 	sub	r2,pc,-16026
8001153e:	31 00       	mov	r0,16
80011540:	fa f9 06 90 	ld.w	r9,sp[1680]
80011544:	fa f8 06 8c 	ld.w	r8,sp[1676]
80011548:	fe ca c1 74 	sub	r10,pc,-16012
8001154c:	59 06       	cp.w	r6,16
8001154e:	fe 99 ff dd 	brgt	80011508 <_vfprintf_r+0x1b6c>
80011552:	0c 09       	add	r9,r6
80011554:	2f f8       	sub	r8,-1
80011556:	87 0a       	st.w	r3[0x0],r10
80011558:	fb 49 06 90 	st.w	sp[1680],r9
8001155c:	87 16       	st.w	r3[0x4],r6
8001155e:	fb 48 06 8c 	st.w	sp[1676],r8
80011562:	58 78       	cp.w	r8,7
80011564:	e0 89 00 04 	brgt	8001156c <_vfprintf_r+0x1bd0>
80011568:	2f 83       	sub	r3,-8
8001156a:	c0 b8       	rjmp	80011580 <_vfprintf_r+0x1be4>
8001156c:	fa ca f9 78 	sub	r10,sp,-1672
80011570:	02 9b       	mov	r11,r1
80011572:	08 9c       	mov	r12,r4
80011574:	fe b0 f2 06 	rcall	8000f980 <__sprint_r>
80011578:	e0 81 01 91 	brne	8001189a <_vfprintf_r+0x1efe>
8001157c:	fa c3 f9 e0 	sub	r3,sp,-1568
80011580:	ed b5 00 00 	bld	r5,0x0
80011584:	e0 81 01 20 	brne	800117c4 <_vfprintf_r+0x1e28>
80011588:	40 c9       	lddsp	r9,sp[0x30]
8001158a:	fa f8 06 90 	ld.w	r8,sp[1680]
8001158e:	2f f8       	sub	r8,-1
80011590:	87 09       	st.w	r3[0x0],r9
80011592:	fb 48 06 90 	st.w	sp[1680],r8
80011596:	30 19       	mov	r9,1
80011598:	fa f8 06 8c 	ld.w	r8,sp[1676]
8001159c:	87 19       	st.w	r3[0x4],r9
8001159e:	2f f8       	sub	r8,-1
800115a0:	fb 48 06 8c 	st.w	sp[1676],r8
800115a4:	c0 29       	rjmp	800117a8 <_vfprintf_r+0x1e0c>
800115a6:	14 09       	add	r9,r10
800115a8:	2f f8       	sub	r8,-1
800115aa:	fb 49 06 90 	st.w	sp[1680],r9
800115ae:	87 06       	st.w	r3[0x0],r6
800115b0:	87 1a       	st.w	r3[0x4],r10
800115b2:	fb 48 06 8c 	st.w	sp[1676],r8
800115b6:	58 78       	cp.w	r8,7
800115b8:	e0 89 00 04 	brgt	800115c0 <_vfprintf_r+0x1c24>
800115bc:	2f 83       	sub	r3,-8
800115be:	c0 b8       	rjmp	800115d4 <_vfprintf_r+0x1c38>
800115c0:	fa ca f9 78 	sub	r10,sp,-1672
800115c4:	02 9b       	mov	r11,r1
800115c6:	08 9c       	mov	r12,r4
800115c8:	fe b0 f1 dc 	rcall	8000f980 <__sprint_r>
800115cc:	e0 81 01 67 	brne	8001189a <_vfprintf_r+0x1efe>
800115d0:	fa c3 f9 e0 	sub	r3,sp,-1568
800115d4:	40 c8       	lddsp	r8,sp[0x30]
800115d6:	87 08       	st.w	r3[0x0],r8
800115d8:	fa f8 06 90 	ld.w	r8,sp[1680]
800115dc:	2f f8       	sub	r8,-1
800115de:	30 19       	mov	r9,1
800115e0:	fb 48 06 90 	st.w	sp[1680],r8
800115e4:	87 19       	st.w	r3[0x4],r9
800115e6:	fa f8 06 8c 	ld.w	r8,sp[1676]
800115ea:	2f f8       	sub	r8,-1
800115ec:	fb 48 06 8c 	st.w	sp[1676],r8
800115f0:	fa f2 06 ac 	ld.w	r2,sp[1708]
800115f4:	58 78       	cp.w	r8,7
800115f6:	e0 89 00 04 	brgt	800115fe <_vfprintf_r+0x1c62>
800115fa:	2f 83       	sub	r3,-8
800115fc:	c0 b8       	rjmp	80011612 <_vfprintf_r+0x1c76>
800115fe:	fa ca f9 78 	sub	r10,sp,-1672
80011602:	02 9b       	mov	r11,r1
80011604:	08 9c       	mov	r12,r4
80011606:	fe b0 f1 bd 	rcall	8000f980 <__sprint_r>
8001160a:	e0 81 01 48 	brne	8001189a <_vfprintf_r+0x1efe>
8001160e:	fa c3 f9 e0 	sub	r3,sp,-1568
80011612:	04 06       	add	r6,r2
80011614:	fa f8 06 ac 	ld.w	r8,sp[1708]
80011618:	87 06       	st.w	r3[0x0],r6
8001161a:	fa f9 06 90 	ld.w	r9,sp[1680]
8001161e:	40 66       	lddsp	r6,sp[0x18]
80011620:	40 6e       	lddsp	lr,sp[0x18]
80011622:	10 16       	sub	r6,r8
80011624:	f2 08 01 08 	sub	r8,r9,r8
80011628:	87 16       	st.w	r3[0x4],r6
8001162a:	1c 08       	add	r8,lr
8001162c:	fb 48 06 90 	st.w	sp[1680],r8
80011630:	fa f8 06 8c 	ld.w	r8,sp[1676]
80011634:	2f f8       	sub	r8,-1
80011636:	fb 48 06 8c 	st.w	sp[1676],r8
8001163a:	cb 78       	rjmp	800117a8 <_vfprintf_r+0x1e0c>
8001163c:	40 6c       	lddsp	r12,sp[0x18]
8001163e:	58 1c       	cp.w	r12,1
80011640:	e0 89 00 06 	brgt	8001164c <_vfprintf_r+0x1cb0>
80011644:	ed b5 00 00 	bld	r5,0x0
80011648:	e0 81 00 85 	brne	80011752 <_vfprintf_r+0x1db6>
8001164c:	fa f8 06 90 	ld.w	r8,sp[1680]
80011650:	2f f8       	sub	r8,-1
80011652:	30 19       	mov	r9,1
80011654:	fb 48 06 90 	st.w	sp[1680],r8
80011658:	87 06       	st.w	r3[0x0],r6
8001165a:	fa f8 06 8c 	ld.w	r8,sp[1676]
8001165e:	87 19       	st.w	r3[0x4],r9
80011660:	2f f8       	sub	r8,-1
80011662:	fb 48 06 8c 	st.w	sp[1676],r8
80011666:	58 78       	cp.w	r8,7
80011668:	e0 89 00 04 	brgt	80011670 <_vfprintf_r+0x1cd4>
8001166c:	2f 83       	sub	r3,-8
8001166e:	c0 b8       	rjmp	80011684 <_vfprintf_r+0x1ce8>
80011670:	fa ca f9 78 	sub	r10,sp,-1672
80011674:	02 9b       	mov	r11,r1
80011676:	08 9c       	mov	r12,r4
80011678:	fe b0 f1 84 	rcall	8000f980 <__sprint_r>
8001167c:	e0 81 01 0f 	brne	8001189a <_vfprintf_r+0x1efe>
80011680:	fa c3 f9 e0 	sub	r3,sp,-1568
80011684:	fa f8 06 90 	ld.w	r8,sp[1680]
80011688:	2f f8       	sub	r8,-1
8001168a:	40 cb       	lddsp	r11,sp[0x30]
8001168c:	fb 48 06 90 	st.w	sp[1680],r8
80011690:	30 19       	mov	r9,1
80011692:	fa f8 06 8c 	ld.w	r8,sp[1676]
80011696:	87 0b       	st.w	r3[0x0],r11
80011698:	2f f8       	sub	r8,-1
8001169a:	87 19       	st.w	r3[0x4],r9
8001169c:	fb 48 06 8c 	st.w	sp[1676],r8
800116a0:	58 78       	cp.w	r8,7
800116a2:	e0 89 00 05 	brgt	800116ac <_vfprintf_r+0x1d10>
800116a6:	2f 83       	sub	r3,-8
800116a8:	c0 c8       	rjmp	800116c0 <_vfprintf_r+0x1d24>
800116aa:	d7 03       	nop
800116ac:	fa ca f9 78 	sub	r10,sp,-1672
800116b0:	02 9b       	mov	r11,r1
800116b2:	08 9c       	mov	r12,r4
800116b4:	fe b0 f1 66 	rcall	8000f980 <__sprint_r>
800116b8:	e0 81 00 f1 	brne	8001189a <_vfprintf_r+0x1efe>
800116bc:	fa c3 f9 e0 	sub	r3,sp,-1568
800116c0:	30 08       	mov	r8,0
800116c2:	30 09       	mov	r9,0
800116c4:	40 5b       	lddsp	r11,sp[0x14]
800116c6:	40 7a       	lddsp	r10,sp[0x1c]
800116c8:	e0 a0 17 35 	rcall	80014532 <__avr32_f64_cmp_eq>
800116cc:	40 68       	lddsp	r8,sp[0x18]
800116ce:	20 18       	sub	r8,1
800116d0:	58 0c       	cp.w	r12,0
800116d2:	c0 d1       	brne	800116ec <_vfprintf_r+0x1d50>
800116d4:	2f f6       	sub	r6,-1
800116d6:	87 18       	st.w	r3[0x4],r8
800116d8:	87 06       	st.w	r3[0x0],r6
800116da:	fa f6 06 90 	ld.w	r6,sp[1680]
800116de:	10 06       	add	r6,r8
800116e0:	fa f8 06 8c 	ld.w	r8,sp[1676]
800116e4:	fb 46 06 90 	st.w	sp[1680],r6
800116e8:	2f f8       	sub	r8,-1
800116ea:	c3 18       	rjmp	8001174c <_vfprintf_r+0x1db0>
800116ec:	10 96       	mov	r6,r8
800116ee:	58 08       	cp.w	r8,0
800116f0:	e0 89 00 1c 	brgt	80011728 <_vfprintf_r+0x1d8c>
800116f4:	c4 b8       	rjmp	8001178a <_vfprintf_r+0x1dee>
800116f6:	2f 09       	sub	r9,-16
800116f8:	2f f8       	sub	r8,-1
800116fa:	fb 49 06 90 	st.w	sp[1680],r9
800116fe:	87 02       	st.w	r3[0x0],r2
80011700:	87 10       	st.w	r3[0x4],r0
80011702:	fb 48 06 8c 	st.w	sp[1676],r8
80011706:	58 78       	cp.w	r8,7
80011708:	e0 89 00 04 	brgt	80011710 <_vfprintf_r+0x1d74>
8001170c:	2f 83       	sub	r3,-8
8001170e:	c0 b8       	rjmp	80011724 <_vfprintf_r+0x1d88>
80011710:	fa ca f9 78 	sub	r10,sp,-1672
80011714:	02 9b       	mov	r11,r1
80011716:	08 9c       	mov	r12,r4
80011718:	fe b0 f1 34 	rcall	8000f980 <__sprint_r>
8001171c:	e0 81 00 bf 	brne	8001189a <_vfprintf_r+0x1efe>
80011720:	fa c3 f9 e0 	sub	r3,sp,-1568
80011724:	21 06       	sub	r6,16
80011726:	c0 48       	rjmp	8001172e <_vfprintf_r+0x1d92>
80011728:	fe c2 c3 54 	sub	r2,pc,-15532
8001172c:	31 00       	mov	r0,16
8001172e:	fa f9 06 90 	ld.w	r9,sp[1680]
80011732:	fa f8 06 8c 	ld.w	r8,sp[1676]
80011736:	fe ca c3 62 	sub	r10,pc,-15518
8001173a:	59 06       	cp.w	r6,16
8001173c:	fe 99 ff dd 	brgt	800116f6 <_vfprintf_r+0x1d5a>
80011740:	0c 09       	add	r9,r6
80011742:	87 0a       	st.w	r3[0x0],r10
80011744:	fb 49 06 90 	st.w	sp[1680],r9
80011748:	2f f8       	sub	r8,-1
8001174a:	87 16       	st.w	r3[0x4],r6
8001174c:	fb 48 06 8c 	st.w	sp[1676],r8
80011750:	c0 e8       	rjmp	8001176c <_vfprintf_r+0x1dd0>
80011752:	fa f8 06 90 	ld.w	r8,sp[1680]
80011756:	2f f8       	sub	r8,-1
80011758:	30 19       	mov	r9,1
8001175a:	fb 48 06 90 	st.w	sp[1680],r8
8001175e:	87 06       	st.w	r3[0x0],r6
80011760:	fa f8 06 8c 	ld.w	r8,sp[1676]
80011764:	87 19       	st.w	r3[0x4],r9
80011766:	2f f8       	sub	r8,-1
80011768:	fb 48 06 8c 	st.w	sp[1676],r8
8001176c:	58 78       	cp.w	r8,7
8001176e:	e0 89 00 04 	brgt	80011776 <_vfprintf_r+0x1dda>
80011772:	2f 83       	sub	r3,-8
80011774:	c0 b8       	rjmp	8001178a <_vfprintf_r+0x1dee>
80011776:	fa ca f9 78 	sub	r10,sp,-1672
8001177a:	02 9b       	mov	r11,r1
8001177c:	08 9c       	mov	r12,r4
8001177e:	fe b0 f1 01 	rcall	8000f980 <__sprint_r>
80011782:	e0 81 00 8c 	brne	8001189a <_vfprintf_r+0x1efe>
80011786:	fa c3 f9 e0 	sub	r3,sp,-1568
8001178a:	40 ea       	lddsp	r10,sp[0x38]
8001178c:	fa f8 06 90 	ld.w	r8,sp[1680]
80011790:	14 08       	add	r8,r10
80011792:	fa c9 f9 64 	sub	r9,sp,-1692
80011796:	fb 48 06 90 	st.w	sp[1680],r8
8001179a:	87 1a       	st.w	r3[0x4],r10
8001179c:	fa f8 06 8c 	ld.w	r8,sp[1676]
800117a0:	87 09       	st.w	r3[0x0],r9
800117a2:	2f f8       	sub	r8,-1
800117a4:	fb 48 06 8c 	st.w	sp[1676],r8
800117a8:	58 78       	cp.w	r8,7
800117aa:	e0 89 00 04 	brgt	800117b2 <_vfprintf_r+0x1e16>
800117ae:	2f 83       	sub	r3,-8
800117b0:	c0 a8       	rjmp	800117c4 <_vfprintf_r+0x1e28>
800117b2:	fa ca f9 78 	sub	r10,sp,-1672
800117b6:	02 9b       	mov	r11,r1
800117b8:	08 9c       	mov	r12,r4
800117ba:	fe b0 f0 e3 	rcall	8000f980 <__sprint_r>
800117be:	c6 e1       	brne	8001189a <_vfprintf_r+0x1efe>
800117c0:	fa c3 f9 e0 	sub	r3,sp,-1568
800117c4:	e2 15 00 04 	andl	r5,0x4,COH
800117c8:	c3 f0       	breq	80011846 <_vfprintf_r+0x1eaa>
800117ca:	40 86       	lddsp	r6,sp[0x20]
800117cc:	40 39       	lddsp	r9,sp[0xc]
800117ce:	12 16       	sub	r6,r9
800117d0:	58 06       	cp.w	r6,0
800117d2:	e0 89 00 1a 	brgt	80011806 <_vfprintf_r+0x1e6a>
800117d6:	c3 88       	rjmp	80011846 <_vfprintf_r+0x1eaa>
800117d8:	2f 09       	sub	r9,-16
800117da:	2f f8       	sub	r8,-1
800117dc:	fb 49 06 90 	st.w	sp[1680],r9
800117e0:	87 05       	st.w	r3[0x0],r5
800117e2:	87 12       	st.w	r3[0x4],r2
800117e4:	fb 48 06 8c 	st.w	sp[1676],r8
800117e8:	58 78       	cp.w	r8,7
800117ea:	e0 89 00 04 	brgt	800117f2 <_vfprintf_r+0x1e56>
800117ee:	2f 83       	sub	r3,-8
800117f0:	c0 98       	rjmp	80011802 <_vfprintf_r+0x1e66>
800117f2:	00 9a       	mov	r10,r0
800117f4:	02 9b       	mov	r11,r1
800117f6:	08 9c       	mov	r12,r4
800117f8:	fe b0 f0 c4 	rcall	8000f980 <__sprint_r>
800117fc:	c4 f1       	brne	8001189a <_vfprintf_r+0x1efe>
800117fe:	fa c3 f9 e0 	sub	r3,sp,-1568
80011802:	21 06       	sub	r6,16
80011804:	c0 68       	rjmp	80011810 <_vfprintf_r+0x1e74>
80011806:	fe c5 c4 42 	sub	r5,pc,-15294
8001180a:	31 02       	mov	r2,16
8001180c:	fa c0 f9 78 	sub	r0,sp,-1672
80011810:	fa f9 06 90 	ld.w	r9,sp[1680]
80011814:	fa f8 06 8c 	ld.w	r8,sp[1676]
80011818:	fe ca c4 54 	sub	r10,pc,-15276
8001181c:	59 06       	cp.w	r6,16
8001181e:	fe 99 ff dd 	brgt	800117d8 <_vfprintf_r+0x1e3c>
80011822:	0c 09       	add	r9,r6
80011824:	2f f8       	sub	r8,-1
80011826:	87 0a       	st.w	r3[0x0],r10
80011828:	87 16       	st.w	r3[0x4],r6
8001182a:	fb 49 06 90 	st.w	sp[1680],r9
8001182e:	fb 48 06 8c 	st.w	sp[1676],r8
80011832:	58 78       	cp.w	r8,7
80011834:	e0 8a 00 09 	brle	80011846 <_vfprintf_r+0x1eaa>
80011838:	fa ca f9 78 	sub	r10,sp,-1672
8001183c:	02 9b       	mov	r11,r1
8001183e:	08 9c       	mov	r12,r4
80011840:	fe b0 f0 a0 	rcall	8000f980 <__sprint_r>
80011844:	c2 b1       	brne	8001189a <_vfprintf_r+0x1efe>
80011846:	40 bc       	lddsp	r12,sp[0x2c]
80011848:	40 36       	lddsp	r6,sp[0xc]
8001184a:	40 8e       	lddsp	lr,sp[0x20]
8001184c:	ec 0e 0c 48 	max	r8,r6,lr
80011850:	10 0c       	add	r12,r8
80011852:	50 bc       	stdsp	sp[0x2c],r12
80011854:	fa f8 06 90 	ld.w	r8,sp[1680]
80011858:	58 08       	cp.w	r8,0
8001185a:	c0 80       	breq	8001186a <_vfprintf_r+0x1ece>
8001185c:	fa ca f9 78 	sub	r10,sp,-1672
80011860:	02 9b       	mov	r11,r1
80011862:	08 9c       	mov	r12,r4
80011864:	fe b0 f0 8e 	rcall	8000f980 <__sprint_r>
80011868:	c1 91       	brne	8001189a <_vfprintf_r+0x1efe>
8001186a:	30 0b       	mov	r11,0
8001186c:	fa c3 f9 e0 	sub	r3,sp,-1568
80011870:	fb 4b 06 8c 	st.w	sp[1676],r11
80011874:	fe 9f f1 22 	bral	8000fab8 <_vfprintf_r+0x11c>
80011878:	08 95       	mov	r5,r4
8001187a:	fa f8 06 90 	ld.w	r8,sp[1680]
8001187e:	58 08       	cp.w	r8,0
80011880:	c0 80       	breq	80011890 <_vfprintf_r+0x1ef4>
80011882:	08 9c       	mov	r12,r4
80011884:	fa ca f9 78 	sub	r10,sp,-1672
80011888:	02 9b       	mov	r11,r1
8001188a:	fe b0 f0 7b 	rcall	8000f980 <__sprint_r>
8001188e:	c0 61       	brne	8001189a <_vfprintf_r+0x1efe>
80011890:	30 08       	mov	r8,0
80011892:	fb 48 06 8c 	st.w	sp[1676],r8
80011896:	c0 28       	rjmp	8001189a <_vfprintf_r+0x1efe>
80011898:	40 41       	lddsp	r1,sp[0x10]
8001189a:	82 68       	ld.sh	r8,r1[0xc]
8001189c:	ed b8 00 06 	bld	r8,0x6
800118a0:	c0 31       	brne	800118a6 <_vfprintf_r+0x1f0a>
800118a2:	3f fa       	mov	r10,-1
800118a4:	50 ba       	stdsp	sp[0x2c],r10
800118a6:	40 bc       	lddsp	r12,sp[0x2c]
800118a8:	fe 3d f9 44 	sub	sp,-1724
800118ac:	d8 32       	popm	r0-r7,pc
800118ae:	d7 03       	nop

800118b0 <__swsetup_r>:
800118b0:	d4 21       	pushm	r4-r7,lr
800118b2:	e0 68 01 d0 	mov	r8,464
800118b6:	18 96       	mov	r6,r12
800118b8:	16 97       	mov	r7,r11
800118ba:	70 0c       	ld.w	r12,r8[0x0]
800118bc:	58 0c       	cp.w	r12,0
800118be:	c0 60       	breq	800118ca <__swsetup_r+0x1a>
800118c0:	78 68       	ld.w	r8,r12[0x18]
800118c2:	58 08       	cp.w	r8,0
800118c4:	c0 31       	brne	800118ca <__swsetup_r+0x1a>
800118c6:	e0 a0 07 b9 	rcall	80012838 <__sinit>
800118ca:	fe c8 c3 d6 	sub	r8,pc,-15402
800118ce:	10 37       	cp.w	r7,r8
800118d0:	c0 61       	brne	800118dc <__swsetup_r+0x2c>
800118d2:	e0 68 01 d0 	mov	r8,464
800118d6:	70 08       	ld.w	r8,r8[0x0]
800118d8:	70 07       	ld.w	r7,r8[0x0]
800118da:	c1 28       	rjmp	800118fe <__swsetup_r+0x4e>
800118dc:	fe c8 c3 c8 	sub	r8,pc,-15416
800118e0:	10 37       	cp.w	r7,r8
800118e2:	c0 61       	brne	800118ee <__swsetup_r+0x3e>
800118e4:	e0 68 01 d0 	mov	r8,464
800118e8:	70 08       	ld.w	r8,r8[0x0]
800118ea:	70 17       	ld.w	r7,r8[0x4]
800118ec:	c0 98       	rjmp	800118fe <__swsetup_r+0x4e>
800118ee:	fe c8 c3 ba 	sub	r8,pc,-15430
800118f2:	10 37       	cp.w	r7,r8
800118f4:	c0 51       	brne	800118fe <__swsetup_r+0x4e>
800118f6:	e0 68 01 d0 	mov	r8,464
800118fa:	70 08       	ld.w	r8,r8[0x0]
800118fc:	70 27       	ld.w	r7,r8[0x8]
800118fe:	8e 68       	ld.sh	r8,r7[0xc]
80011900:	ed b8 00 03 	bld	r8,0x3
80011904:	c1 e0       	breq	80011940 <__swsetup_r+0x90>
80011906:	ed b8 00 04 	bld	r8,0x4
8001190a:	c3 e1       	brne	80011986 <__swsetup_r+0xd6>
8001190c:	ed b8 00 02 	bld	r8,0x2
80011910:	c1 51       	brne	8001193a <__swsetup_r+0x8a>
80011912:	6e db       	ld.w	r11,r7[0x34]
80011914:	58 0b       	cp.w	r11,0
80011916:	c0 a0       	breq	8001192a <__swsetup_r+0x7a>
80011918:	ee c8 ff bc 	sub	r8,r7,-68
8001191c:	10 3b       	cp.w	r11,r8
8001191e:	c0 40       	breq	80011926 <__swsetup_r+0x76>
80011920:	0c 9c       	mov	r12,r6
80011922:	e0 a0 08 25 	rcall	8001296c <_free_r>
80011926:	30 08       	mov	r8,0
80011928:	8f d8       	st.w	r7[0x34],r8
8001192a:	8e 68       	ld.sh	r8,r7[0xc]
8001192c:	e0 18 ff db 	andl	r8,0xffdb
80011930:	ae 68       	st.h	r7[0xc],r8
80011932:	30 08       	mov	r8,0
80011934:	8f 18       	st.w	r7[0x4],r8
80011936:	6e 48       	ld.w	r8,r7[0x10]
80011938:	8f 08       	st.w	r7[0x0],r8
8001193a:	8e 68       	ld.sh	r8,r7[0xc]
8001193c:	a3 b8       	sbr	r8,0x3
8001193e:	ae 68       	st.h	r7[0xc],r8
80011940:	6e 48       	ld.w	r8,r7[0x10]
80011942:	58 08       	cp.w	r8,0
80011944:	c0 b1       	brne	8001195a <__swsetup_r+0xaa>
80011946:	8e 68       	ld.sh	r8,r7[0xc]
80011948:	e2 18 02 80 	andl	r8,0x280,COH
8001194c:	e0 48 02 00 	cp.w	r8,512
80011950:	c0 50       	breq	8001195a <__swsetup_r+0xaa>
80011952:	0c 9c       	mov	r12,r6
80011954:	0e 9b       	mov	r11,r7
80011956:	e0 a0 0a 4b 	rcall	80012dec <__smakebuf_r>
8001195a:	8e 69       	ld.sh	r9,r7[0xc]
8001195c:	f1 d9 c0 01 	bfextu	r8,r9,0x0,0x1
80011960:	c0 70       	breq	8001196e <__swsetup_r+0xbe>
80011962:	30 08       	mov	r8,0
80011964:	8f 28       	st.w	r7[0x8],r8
80011966:	6e 58       	ld.w	r8,r7[0x14]
80011968:	5c 38       	neg	r8
8001196a:	8f 68       	st.w	r7[0x18],r8
8001196c:	c0 68       	rjmp	80011978 <__swsetup_r+0xc8>
8001196e:	ed b9 00 01 	bld	r9,0x1
80011972:	ef f8 10 05 	ld.wne	r8,r7[0x14]
80011976:	8f 28       	st.w	r7[0x8],r8
80011978:	6e 48       	ld.w	r8,r7[0x10]
8001197a:	58 08       	cp.w	r8,0
8001197c:	c0 61       	brne	80011988 <__swsetup_r+0xd8>
8001197e:	8e 68       	ld.sh	r8,r7[0xc]
80011980:	ed b8 00 07 	bld	r8,0x7
80011984:	c0 21       	brne	80011988 <__swsetup_r+0xd8>
80011986:	dc 2a       	popm	r4-r7,pc,r12=-1
80011988:	d8 2a       	popm	r4-r7,pc,r12=0
8001198a:	d7 03       	nop

8001198c <quorem>:
8001198c:	d4 31       	pushm	r0-r7,lr
8001198e:	20 2d       	sub	sp,8
80011990:	18 97       	mov	r7,r12
80011992:	78 48       	ld.w	r8,r12[0x10]
80011994:	76 46       	ld.w	r6,r11[0x10]
80011996:	0c 38       	cp.w	r8,r6
80011998:	c0 34       	brge	8001199e <quorem+0x12>
8001199a:	30 0c       	mov	r12,0
8001199c:	c8 58       	rjmp	80011aa6 <quorem+0x11a>
8001199e:	ec c2 ff fc 	sub	r2,r6,-4
800119a2:	f6 c3 ff ec 	sub	r3,r11,-20
800119a6:	f6 02 03 29 	ld.w	r9,r11[r2<<0x2]
800119aa:	f8 02 03 2c 	ld.w	r12,r12[r2<<0x2]
800119ae:	2f f9       	sub	r9,-1
800119b0:	20 16       	sub	r6,1
800119b2:	f8 09 0d 08 	divu	r8,r12,r9
800119b6:	f6 02 00 22 	add	r2,r11,r2<<0x2
800119ba:	ee c4 ff ec 	sub	r4,r7,-20
800119be:	10 95       	mov	r5,r8
800119c0:	58 08       	cp.w	r8,0
800119c2:	c4 10       	breq	80011a44 <quorem+0xb8>
800119c4:	30 09       	mov	r9,0
800119c6:	06 9a       	mov	r10,r3
800119c8:	08 98       	mov	r8,r4
800119ca:	12 91       	mov	r1,r9
800119cc:	50 0b       	stdsp	sp[0x0],r11
800119ce:	70 0e       	ld.w	lr,r8[0x0]
800119d0:	b1 8e       	lsr	lr,0x10
800119d2:	50 1e       	stdsp	sp[0x4],lr
800119d4:	15 0e       	ld.w	lr,r10++
800119d6:	fc 00 16 10 	lsr	r0,lr,0x10
800119da:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
800119de:	ea 0e 03 41 	mac	r1,r5,lr
800119e2:	fd d1 c0 10 	bfextu	lr,r1,0x0,0x10
800119e6:	b1 81       	lsr	r1,0x10
800119e8:	40 1b       	lddsp	r11,sp[0x4]
800119ea:	ea 00 02 40 	mul	r0,r5,r0
800119ee:	e2 00 00 00 	add	r0,r1,r0
800119f2:	e3 d0 c0 10 	bfextu	r1,r0,0x0,0x10
800119f6:	02 1b       	sub	r11,r1
800119f8:	50 1b       	stdsp	sp[0x4],r11
800119fa:	70 0b       	ld.w	r11,r8[0x0]
800119fc:	e3 db c0 10 	bfextu	r1,r11,0x0,0x10
80011a00:	02 09       	add	r9,r1
80011a02:	f2 0e 01 0e 	sub	lr,r9,lr
80011a06:	b0 1e       	st.h	r8[0x2],lr
80011a08:	fc 09 14 10 	asr	r9,lr,0x10
80011a0c:	40 1e       	lddsp	lr,sp[0x4]
80011a0e:	fc 09 00 09 	add	r9,lr,r9
80011a12:	b0 09       	st.h	r8[0x0],r9
80011a14:	e0 01 16 10 	lsr	r1,r0,0x10
80011a18:	2f c8       	sub	r8,-4
80011a1a:	b1 49       	asr	r9,0x10
80011a1c:	04 3a       	cp.w	r10,r2
80011a1e:	fe 98 ff d8 	brls	800119ce <quorem+0x42>
80011a22:	40 0b       	lddsp	r11,sp[0x0]
80011a24:	58 0c       	cp.w	r12,0
80011a26:	c0 f1       	brne	80011a44 <quorem+0xb8>
80011a28:	ec c8 ff fb 	sub	r8,r6,-5
80011a2c:	ee 08 00 28 	add	r8,r7,r8<<0x2
80011a30:	c0 28       	rjmp	80011a34 <quorem+0xa8>
80011a32:	20 16       	sub	r6,1
80011a34:	20 48       	sub	r8,4
80011a36:	08 38       	cp.w	r8,r4
80011a38:	e0 88 00 05 	brls	80011a42 <quorem+0xb6>
80011a3c:	70 09       	ld.w	r9,r8[0x0]
80011a3e:	58 09       	cp.w	r9,0
80011a40:	cf 90       	breq	80011a32 <quorem+0xa6>
80011a42:	8f 46       	st.w	r7[0x10],r6
80011a44:	0e 9c       	mov	r12,r7
80011a46:	e0 a0 0c f4 	rcall	8001342e <__mcmp>
80011a4a:	c2 d5       	brlt	80011aa4 <quorem+0x118>
80011a4c:	2f f5       	sub	r5,-1
80011a4e:	08 98       	mov	r8,r4
80011a50:	30 09       	mov	r9,0
80011a52:	07 0b       	ld.w	r11,r3++
80011a54:	f6 0a 16 10 	lsr	r10,r11,0x10
80011a58:	70 0c       	ld.w	r12,r8[0x0]
80011a5a:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
80011a5e:	f8 0e 16 10 	lsr	lr,r12,0x10
80011a62:	14 1e       	sub	lr,r10
80011a64:	f5 dc c0 10 	bfextu	r10,r12,0x0,0x10
80011a68:	16 1a       	sub	r10,r11
80011a6a:	12 0a       	add	r10,r9
80011a6c:	b0 1a       	st.h	r8[0x2],r10
80011a6e:	b1 4a       	asr	r10,0x10
80011a70:	fc 0a 00 09 	add	r9,lr,r10
80011a74:	b0 09       	st.h	r8[0x0],r9
80011a76:	2f c8       	sub	r8,-4
80011a78:	b1 49       	asr	r9,0x10
80011a7a:	04 33       	cp.w	r3,r2
80011a7c:	fe 98 ff eb 	brls	80011a52 <quorem+0xc6>
80011a80:	ec c8 ff fb 	sub	r8,r6,-5
80011a84:	ee 08 03 29 	ld.w	r9,r7[r8<<0x2]
80011a88:	58 09       	cp.w	r9,0
80011a8a:	c0 d1       	brne	80011aa4 <quorem+0x118>
80011a8c:	ee 08 00 28 	add	r8,r7,r8<<0x2
80011a90:	c0 28       	rjmp	80011a94 <quorem+0x108>
80011a92:	20 16       	sub	r6,1
80011a94:	20 48       	sub	r8,4
80011a96:	08 38       	cp.w	r8,r4
80011a98:	e0 88 00 05 	brls	80011aa2 <quorem+0x116>
80011a9c:	70 09       	ld.w	r9,r8[0x0]
80011a9e:	58 09       	cp.w	r9,0
80011aa0:	cf 90       	breq	80011a92 <quorem+0x106>
80011aa2:	8f 46       	st.w	r7[0x10],r6
80011aa4:	0a 9c       	mov	r12,r5
80011aa6:	2f ed       	sub	sp,-8
80011aa8:	d8 32       	popm	r0-r7,pc
80011aaa:	d7 03       	nop

80011aac <_dtoa_r>:
80011aac:	d4 31       	pushm	r0-r7,lr
80011aae:	21 ad       	sub	sp,104
80011ab0:	fa c4 ff 74 	sub	r4,sp,-140
80011ab4:	18 97       	mov	r7,r12
80011ab6:	16 95       	mov	r5,r11
80011ab8:	68 2c       	ld.w	r12,r4[0x8]
80011aba:	50 c9       	stdsp	sp[0x30],r9
80011abc:	68 16       	ld.w	r6,r4[0x4]
80011abe:	68 09       	ld.w	r9,r4[0x0]
80011ac0:	50 e8       	stdsp	sp[0x38],r8
80011ac2:	14 94       	mov	r4,r10
80011ac4:	51 2c       	stdsp	sp[0x48],r12
80011ac6:	fa e5 00 08 	st.d	sp[8],r4
80011aca:	51 59       	stdsp	sp[0x54],r9
80011acc:	6e 95       	ld.w	r5,r7[0x24]
80011ace:	58 05       	cp.w	r5,0
80011ad0:	c0 91       	brne	80011ae2 <_dtoa_r+0x36>
80011ad2:	31 0c       	mov	r12,16
80011ad4:	e0 a0 09 ea 	rcall	80012ea8 <malloc>
80011ad8:	99 35       	st.w	r12[0xc],r5
80011ada:	8f 9c       	st.w	r7[0x24],r12
80011adc:	99 15       	st.w	r12[0x4],r5
80011ade:	99 25       	st.w	r12[0x8],r5
80011ae0:	99 05       	st.w	r12[0x0],r5
80011ae2:	6e 99       	ld.w	r9,r7[0x24]
80011ae4:	72 08       	ld.w	r8,r9[0x0]
80011ae6:	58 08       	cp.w	r8,0
80011ae8:	c0 f0       	breq	80011b06 <_dtoa_r+0x5a>
80011aea:	72 1a       	ld.w	r10,r9[0x4]
80011aec:	91 1a       	st.w	r8[0x4],r10
80011aee:	30 1a       	mov	r10,1
80011af0:	72 19       	ld.w	r9,r9[0x4]
80011af2:	f4 09 09 49 	lsl	r9,r10,r9
80011af6:	10 9b       	mov	r11,r8
80011af8:	91 29       	st.w	r8[0x8],r9
80011afa:	0e 9c       	mov	r12,r7
80011afc:	e0 a0 0c b2 	rcall	80013460 <_Bfree>
80011b00:	6e 98       	ld.w	r8,r7[0x24]
80011b02:	30 09       	mov	r9,0
80011b04:	91 09       	st.w	r8[0x0],r9
80011b06:	40 28       	lddsp	r8,sp[0x8]
80011b08:	10 94       	mov	r4,r8
80011b0a:	58 08       	cp.w	r8,0
80011b0c:	c0 64       	brge	80011b18 <_dtoa_r+0x6c>
80011b0e:	f1 d8 c0 1f 	bfextu	r8,r8,0x0,0x1f
80011b12:	50 28       	stdsp	sp[0x8],r8
80011b14:	30 18       	mov	r8,1
80011b16:	c0 28       	rjmp	80011b1a <_dtoa_r+0x6e>
80011b18:	30 08       	mov	r8,0
80011b1a:	8d 08       	st.w	r6[0x0],r8
80011b1c:	fc 1c 7f f0 	movh	r12,0x7ff0
80011b20:	40 26       	lddsp	r6,sp[0x8]
80011b22:	0c 98       	mov	r8,r6
80011b24:	e6 18 7f f0 	andh	r8,0x7ff0,COH
80011b28:	18 38       	cp.w	r8,r12
80011b2a:	c2 01       	brne	80011b6a <_dtoa_r+0xbe>
80011b2c:	e0 68 27 0f 	mov	r8,9999
80011b30:	41 5b       	lddsp	r11,sp[0x54]
80011b32:	97 08       	st.w	r11[0x0],r8
80011b34:	40 3a       	lddsp	r10,sp[0xc]
80011b36:	58 0a       	cp.w	r10,0
80011b38:	c0 71       	brne	80011b46 <_dtoa_r+0x9a>
80011b3a:	ed d6 c0 14 	bfextu	r6,r6,0x0,0x14
80011b3e:	c0 41       	brne	80011b46 <_dtoa_r+0x9a>
80011b40:	fe cc c6 5c 	sub	r12,pc,-14756
80011b44:	c0 38       	rjmp	80011b4a <_dtoa_r+0x9e>
80011b46:	fe cc c6 56 	sub	r12,pc,-14762
80011b4a:	41 29       	lddsp	r9,sp[0x48]
80011b4c:	58 09       	cp.w	r9,0
80011b4e:	e0 80 05 9a 	breq	80012682 <_dtoa_r+0xbd6>
80011b52:	f8 c8 ff fd 	sub	r8,r12,-3
80011b56:	f8 c9 ff f8 	sub	r9,r12,-8
80011b5a:	11 8b       	ld.ub	r11,r8[0x0]
80011b5c:	30 0a       	mov	r10,0
80011b5e:	41 25       	lddsp	r5,sp[0x48]
80011b60:	f4 0b 18 00 	cp.b	r11,r10
80011b64:	f2 08 17 10 	movne	r8,r9
80011b68:	c1 68       	rjmp	80011b94 <_dtoa_r+0xe8>
80011b6a:	fa ea 00 08 	ld.d	r10,sp[8]
80011b6e:	30 08       	mov	r8,0
80011b70:	fa eb 00 3c 	st.d	sp[60],r10
80011b74:	30 09       	mov	r9,0
80011b76:	e0 a0 14 de 	rcall	80014532 <__avr32_f64_cmp_eq>
80011b7a:	c1 00       	breq	80011b9a <_dtoa_r+0xee>
80011b7c:	30 18       	mov	r8,1
80011b7e:	41 5a       	lddsp	r10,sp[0x54]
80011b80:	95 08       	st.w	r10[0x0],r8
80011b82:	fe cc c7 c2 	sub	r12,pc,-14398
80011b86:	41 29       	lddsp	r9,sp[0x48]
80011b88:	f8 08 00 08 	add	r8,r12,r8
80011b8c:	58 09       	cp.w	r9,0
80011b8e:	e0 80 05 7a 	breq	80012682 <_dtoa_r+0xbd6>
80011b92:	12 95       	mov	r5,r9
80011b94:	8b 08       	st.w	r5[0x0],r8
80011b96:	e0 8f 05 76 	bral	80012682 <_dtoa_r+0xbd6>
80011b9a:	fa c8 ff 9c 	sub	r8,sp,-100
80011b9e:	fa c9 ff a0 	sub	r9,sp,-96
80011ba2:	fa ea 00 3c 	ld.d	r10,sp[60]
80011ba6:	0e 9c       	mov	r12,r7
80011ba8:	eb d6 c2 8b 	bfextu	r5,r6,0x14,0xb
80011bac:	e0 a0 0c ac 	rcall	80013504 <__d2b>
80011bb0:	18 93       	mov	r3,r12
80011bb2:	58 05       	cp.w	r5,0
80011bb4:	c0 d0       	breq	80011bce <_dtoa_r+0x122>
80011bb6:	fa ea 00 3c 	ld.d	r10,sp[60]
80011bba:	30 04       	mov	r4,0
80011bbc:	f1 db c0 14 	bfextu	r8,r11,0x0,0x14
80011bc0:	ea c5 03 ff 	sub	r5,r5,1023
80011bc4:	10 9b       	mov	r11,r8
80011bc6:	51 74       	stdsp	sp[0x5c],r4
80011bc8:	ea 1b 3f f0 	orh	r11,0x3ff0
80011bcc:	c2 58       	rjmp	80011c16 <_dtoa_r+0x16a>
80011bce:	41 88       	lddsp	r8,sp[0x60]
80011bd0:	41 9c       	lddsp	r12,sp[0x64]
80011bd2:	10 0c       	add	r12,r8
80011bd4:	f8 c5 fb ce 	sub	r5,r12,-1074
80011bd8:	e0 45 00 20 	cp.w	r5,32
80011bdc:	e0 8a 00 0e 	brle	80011bf8 <_dtoa_r+0x14c>
80011be0:	f8 cc fb ee 	sub	r12,r12,-1042
80011be4:	40 3b       	lddsp	r11,sp[0xc]
80011be6:	ea 08 11 40 	rsub	r8,r5,64
80011bea:	f6 0c 0a 4c 	lsr	r12,r11,r12
80011bee:	ec 08 09 46 	lsl	r6,r6,r8
80011bf2:	0c 4c       	or	r12,r6
80011bf4:	c0 78       	rjmp	80011c02 <_dtoa_r+0x156>
80011bf6:	d7 03       	nop
80011bf8:	ea 0c 11 20 	rsub	r12,r5,32
80011bfc:	40 3a       	lddsp	r10,sp[0xc]
80011bfe:	f4 0c 09 4c 	lsl	r12,r10,r12
80011c02:	e0 a0 14 24 	rcall	8001444a <__avr32_u32_to_f64>
80011c06:	fc 18 fe 10 	movh	r8,0xfe10
80011c0a:	30 19       	mov	r9,1
80011c0c:	ea c5 04 33 	sub	r5,r5,1075
80011c10:	f0 0b 00 0b 	add	r11,r8,r11
80011c14:	51 79       	stdsp	sp[0x5c],r9
80011c16:	30 08       	mov	r8,0
80011c18:	fc 19 3f f8 	movh	r9,0x3ff8
80011c1c:	e0 a0 12 ac 	rcall	80014174 <__avr32_f64_sub>
80011c20:	e0 68 43 61 	mov	r8,17249
80011c24:	ea 18 63 6f 	orh	r8,0x636f
80011c28:	e0 69 87 a7 	mov	r9,34727
80011c2c:	ea 19 3f d2 	orh	r9,0x3fd2
80011c30:	e0 a0 11 b6 	rcall	80013f9c <__avr32_f64_mul>
80011c34:	e0 68 c8 b3 	mov	r8,51379
80011c38:	ea 18 8b 60 	orh	r8,0x8b60
80011c3c:	e0 69 8a 28 	mov	r9,35368
80011c40:	ea 19 3f c6 	orh	r9,0x3fc6
80011c44:	e0 a0 13 66 	rcall	80014310 <__avr32_f64_add>
80011c48:	0a 9c       	mov	r12,r5
80011c4a:	14 90       	mov	r0,r10
80011c4c:	16 91       	mov	r1,r11
80011c4e:	e0 a0 14 02 	rcall	80014452 <__avr32_s32_to_f64>
80011c52:	e0 68 79 fb 	mov	r8,31227
80011c56:	ea 18 50 9f 	orh	r8,0x509f
80011c5a:	e0 69 44 13 	mov	r9,17427
80011c5e:	ea 19 3f d3 	orh	r9,0x3fd3
80011c62:	e0 a0 11 9d 	rcall	80013f9c <__avr32_f64_mul>
80011c66:	14 98       	mov	r8,r10
80011c68:	16 99       	mov	r9,r11
80011c6a:	00 9a       	mov	r10,r0
80011c6c:	02 9b       	mov	r11,r1
80011c6e:	e0 a0 13 51 	rcall	80014310 <__avr32_f64_add>
80011c72:	14 90       	mov	r0,r10
80011c74:	16 91       	mov	r1,r11
80011c76:	e0 a0 13 d7 	rcall	80014424 <__avr32_f64_to_s32>
80011c7a:	30 08       	mov	r8,0
80011c7c:	18 96       	mov	r6,r12
80011c7e:	30 09       	mov	r9,0
80011c80:	00 9a       	mov	r10,r0
80011c82:	02 9b       	mov	r11,r1
80011c84:	e0 a0 14 9e 	rcall	800145c0 <__avr32_f64_cmp_lt>
80011c88:	c0 c0       	breq	80011ca0 <_dtoa_r+0x1f4>
80011c8a:	0c 9c       	mov	r12,r6
80011c8c:	e0 a0 13 e3 	rcall	80014452 <__avr32_s32_to_f64>
80011c90:	14 98       	mov	r8,r10
80011c92:	16 99       	mov	r9,r11
80011c94:	00 9a       	mov	r10,r0
80011c96:	02 9b       	mov	r11,r1
80011c98:	e0 a0 14 4d 	rcall	80014532 <__avr32_f64_cmp_eq>
80011c9c:	f7 b6 00 01 	subeq	r6,1
80011ca0:	59 66       	cp.w	r6,22
80011ca2:	e0 88 00 05 	brls	80011cac <_dtoa_r+0x200>
80011ca6:	30 18       	mov	r8,1
80011ca8:	51 48       	stdsp	sp[0x50],r8
80011caa:	c1 38       	rjmp	80011cd0 <_dtoa_r+0x224>
80011cac:	fe c8 c7 04 	sub	r8,pc,-14588
80011cb0:	fa ea 00 3c 	ld.d	r10,sp[60]
80011cb4:	f0 06 02 38 	ld.d	r8,r8[r6<<0x3]
80011cb8:	e0 a0 14 84 	rcall	800145c0 <__avr32_f64_cmp_lt>
80011cbc:	f9 b4 00 00 	moveq	r4,0
80011cc0:	fb f4 0a 14 	st.weq	sp[0x50],r4
80011cc4:	f7 b6 01 01 	subne	r6,1
80011cc8:	f9 bc 01 00 	movne	r12,0
80011ccc:	fb fc 1a 14 	st.wne	sp[0x50],r12
80011cd0:	41 90       	lddsp	r0,sp[0x64]
80011cd2:	20 10       	sub	r0,1
80011cd4:	0a 10       	sub	r0,r5
80011cd6:	c0 46       	brmi	80011cde <_dtoa_r+0x232>
80011cd8:	50 40       	stdsp	sp[0x10],r0
80011cda:	30 00       	mov	r0,0
80011cdc:	c0 48       	rjmp	80011ce4 <_dtoa_r+0x238>
80011cde:	30 0b       	mov	r11,0
80011ce0:	5c 30       	neg	r0
80011ce2:	50 4b       	stdsp	sp[0x10],r11
80011ce4:	ec 02 11 00 	rsub	r2,r6,0
80011ce8:	58 06       	cp.w	r6,0
80011cea:	fb fa 40 04 	ld.wge	r10,sp[0x10]
80011cee:	f5 d6 e4 0a 	addge	r10,r10,r6
80011cf2:	fb fa 4a 04 	st.wge	sp[0x10],r10
80011cf6:	fb f6 4a 11 	st.wge	sp[0x44],r6
80011cfa:	f9 b2 04 00 	movge	r2,0
80011cfe:	e1 d6 e5 10 	sublt	r0,r0,r6
80011d02:	f9 b9 05 00 	movlt	r9,0
80011d06:	fb f9 5a 11 	st.wlt	sp[0x44],r9
80011d0a:	40 c8       	lddsp	r8,sp[0x30]
80011d0c:	58 98       	cp.w	r8,9
80011d0e:	e0 8b 00 20 	brhi	80011d4e <_dtoa_r+0x2a2>
80011d12:	58 58       	cp.w	r8,5
80011d14:	f9 b4 0a 01 	movle	r4,1
80011d18:	fb f5 90 0c 	ld.wgt	r5,sp[0x30]
80011d1c:	f7 b5 09 04 	subgt	r5,4
80011d20:	fb f5 9a 0c 	st.wgt	sp[0x30],r5
80011d24:	f9 b4 09 00 	movgt	r4,0
80011d28:	40 cc       	lddsp	r12,sp[0x30]
80011d2a:	58 3c       	cp.w	r12,3
80011d2c:	c2 d0       	breq	80011d86 <_dtoa_r+0x2da>
80011d2e:	e0 89 00 05 	brgt	80011d38 <_dtoa_r+0x28c>
80011d32:	58 2c       	cp.w	r12,2
80011d34:	c1 01       	brne	80011d54 <_dtoa_r+0x2a8>
80011d36:	c1 88       	rjmp	80011d66 <_dtoa_r+0x2ba>
80011d38:	40 cb       	lddsp	r11,sp[0x30]
80011d3a:	58 4b       	cp.w	r11,4
80011d3c:	c0 60       	breq	80011d48 <_dtoa_r+0x29c>
80011d3e:	58 5b       	cp.w	r11,5
80011d40:	c0 a1       	brne	80011d54 <_dtoa_r+0x2a8>
80011d42:	30 1a       	mov	r10,1
80011d44:	50 da       	stdsp	sp[0x34],r10
80011d46:	c2 28       	rjmp	80011d8a <_dtoa_r+0x2de>
80011d48:	30 19       	mov	r9,1
80011d4a:	50 d9       	stdsp	sp[0x34],r9
80011d4c:	c0 f8       	rjmp	80011d6a <_dtoa_r+0x2be>
80011d4e:	30 08       	mov	r8,0
80011d50:	30 14       	mov	r4,1
80011d52:	50 c8       	stdsp	sp[0x30],r8
80011d54:	3f f5       	mov	r5,-1
80011d56:	30 1c       	mov	r12,1
80011d58:	30 0b       	mov	r11,0
80011d5a:	50 95       	stdsp	sp[0x24],r5
80011d5c:	50 dc       	stdsp	sp[0x34],r12
80011d5e:	0a 91       	mov	r1,r5
80011d60:	31 28       	mov	r8,18
80011d62:	50 eb       	stdsp	sp[0x38],r11
80011d64:	c2 08       	rjmp	80011da4 <_dtoa_r+0x2f8>
80011d66:	30 0a       	mov	r10,0
80011d68:	50 da       	stdsp	sp[0x34],r10
80011d6a:	40 e9       	lddsp	r9,sp[0x38]
80011d6c:	58 09       	cp.w	r9,0
80011d6e:	e0 89 00 07 	brgt	80011d7c <_dtoa_r+0x2d0>
80011d72:	30 18       	mov	r8,1
80011d74:	50 98       	stdsp	sp[0x24],r8
80011d76:	10 91       	mov	r1,r8
80011d78:	50 e8       	stdsp	sp[0x38],r8
80011d7a:	c1 58       	rjmp	80011da4 <_dtoa_r+0x2f8>
80011d7c:	40 e5       	lddsp	r5,sp[0x38]
80011d7e:	50 95       	stdsp	sp[0x24],r5
80011d80:	0a 91       	mov	r1,r5
80011d82:	0a 98       	mov	r8,r5
80011d84:	c1 08       	rjmp	80011da4 <_dtoa_r+0x2f8>
80011d86:	30 0c       	mov	r12,0
80011d88:	50 dc       	stdsp	sp[0x34],r12
80011d8a:	40 eb       	lddsp	r11,sp[0x38]
80011d8c:	ec 0b 00 0b 	add	r11,r6,r11
80011d90:	50 9b       	stdsp	sp[0x24],r11
80011d92:	16 98       	mov	r8,r11
80011d94:	2f f8       	sub	r8,-1
80011d96:	58 08       	cp.w	r8,0
80011d98:	e0 89 00 05 	brgt	80011da2 <_dtoa_r+0x2f6>
80011d9c:	10 91       	mov	r1,r8
80011d9e:	30 18       	mov	r8,1
80011da0:	c0 28       	rjmp	80011da4 <_dtoa_r+0x2f8>
80011da2:	10 91       	mov	r1,r8
80011da4:	30 09       	mov	r9,0
80011da6:	6e 9a       	ld.w	r10,r7[0x24]
80011da8:	95 19       	st.w	r10[0x4],r9
80011daa:	30 49       	mov	r9,4
80011dac:	c0 68       	rjmp	80011db8 <_dtoa_r+0x30c>
80011dae:	d7 03       	nop
80011db0:	6a 1a       	ld.w	r10,r5[0x4]
80011db2:	a1 79       	lsl	r9,0x1
80011db4:	2f fa       	sub	r10,-1
80011db6:	8b 1a       	st.w	r5[0x4],r10
80011db8:	6e 95       	ld.w	r5,r7[0x24]
80011dba:	f2 ca ff ec 	sub	r10,r9,-20
80011dbe:	10 3a       	cp.w	r10,r8
80011dc0:	fe 98 ff f8 	brls	80011db0 <_dtoa_r+0x304>
80011dc4:	6a 1b       	ld.w	r11,r5[0x4]
80011dc6:	0e 9c       	mov	r12,r7
80011dc8:	e0 a0 0b 66 	rcall	80013494 <_Balloc>
80011dcc:	58 e1       	cp.w	r1,14
80011dce:	5f 88       	srls	r8
80011dd0:	8b 0c       	st.w	r5[0x0],r12
80011dd2:	f1 e4 00 04 	and	r4,r8,r4
80011dd6:	6e 98       	ld.w	r8,r7[0x24]
80011dd8:	70 08       	ld.w	r8,r8[0x0]
80011dda:	50 88       	stdsp	sp[0x20],r8
80011ddc:	e0 80 01 82 	breq	800120e0 <_dtoa_r+0x634>
80011de0:	58 06       	cp.w	r6,0
80011de2:	e0 8a 00 43 	brle	80011e68 <_dtoa_r+0x3bc>
80011de6:	f3 d6 c0 04 	bfextu	r9,r6,0x0,0x4
80011dea:	fe c8 c8 42 	sub	r8,pc,-14270
80011dee:	f0 09 02 34 	ld.d	r4,r8[r9<<0x3]
80011df2:	fa e5 00 18 	st.d	sp[24],r4
80011df6:	ec 04 14 04 	asr	r4,r6,0x4
80011dfa:	ed b4 00 04 	bld	r4,0x4
80011dfe:	c0 30       	breq	80011e04 <_dtoa_r+0x358>
80011e00:	30 25       	mov	r5,2
80011e02:	c1 08       	rjmp	80011e22 <_dtoa_r+0x376>
80011e04:	fe c8 c7 94 	sub	r8,pc,-14444
80011e08:	f0 e8 00 20 	ld.d	r8,r8[32]
80011e0c:	fa ea 00 3c 	ld.d	r10,sp[60]
80011e10:	e9 d4 c0 04 	bfextu	r4,r4,0x0,0x4
80011e14:	e0 a0 14 0a 	rcall	80014628 <__avr32_f64_div>
80011e18:	30 35       	mov	r5,3
80011e1a:	14 98       	mov	r8,r10
80011e1c:	16 99       	mov	r9,r11
80011e1e:	fa e9 00 08 	st.d	sp[8],r8
80011e22:	fe cc c7 b2 	sub	r12,pc,-14414
80011e26:	50 a3       	stdsp	sp[0x28],r3
80011e28:	0c 93       	mov	r3,r6
80011e2a:	18 96       	mov	r6,r12
80011e2c:	c0 f8       	rjmp	80011e4a <_dtoa_r+0x39e>
80011e2e:	fa ea 00 18 	ld.d	r10,sp[24]
80011e32:	ed b4 00 00 	bld	r4,0x0
80011e36:	c0 81       	brne	80011e46 <_dtoa_r+0x39a>
80011e38:	ec e8 00 00 	ld.d	r8,r6[0]
80011e3c:	2f f5       	sub	r5,-1
80011e3e:	e0 a0 10 af 	rcall	80013f9c <__avr32_f64_mul>
80011e42:	fa eb 00 18 	st.d	sp[24],r10
80011e46:	a1 54       	asr	r4,0x1
80011e48:	2f 86       	sub	r6,-8
80011e4a:	58 04       	cp.w	r4,0
80011e4c:	cf 11       	brne	80011e2e <_dtoa_r+0x382>
80011e4e:	fa e8 00 18 	ld.d	r8,sp[24]
80011e52:	fa ea 00 08 	ld.d	r10,sp[8]
80011e56:	06 96       	mov	r6,r3
80011e58:	e0 a0 13 e8 	rcall	80014628 <__avr32_f64_div>
80011e5c:	40 a3       	lddsp	r3,sp[0x28]
80011e5e:	14 98       	mov	r8,r10
80011e60:	16 99       	mov	r9,r11
80011e62:	fa e9 00 08 	st.d	sp[8],r8
80011e66:	c2 f8       	rjmp	80011ec4 <_dtoa_r+0x418>
80011e68:	ec 08 11 00 	rsub	r8,r6,0
80011e6c:	c0 31       	brne	80011e72 <_dtoa_r+0x3c6>
80011e6e:	30 25       	mov	r5,2
80011e70:	c2 a8       	rjmp	80011ec4 <_dtoa_r+0x418>
80011e72:	fe cc c8 02 	sub	r12,pc,-14334
80011e76:	f0 04 14 04 	asr	r4,r8,0x4
80011e7a:	50 1c       	stdsp	sp[0x4],r12
80011e7c:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80011e80:	fe c9 c8 d8 	sub	r9,pc,-14120
80011e84:	fa ea 00 3c 	ld.d	r10,sp[60]
80011e88:	f2 08 02 38 	ld.d	r8,r9[r8<<0x3]
80011e8c:	e0 a0 10 88 	rcall	80013f9c <__avr32_f64_mul>
80011e90:	40 1c       	lddsp	r12,sp[0x4]
80011e92:	50 63       	stdsp	sp[0x18],r3
80011e94:	30 25       	mov	r5,2
80011e96:	0c 93       	mov	r3,r6
80011e98:	fa eb 00 08 	st.d	sp[8],r10
80011e9c:	18 96       	mov	r6,r12
80011e9e:	c0 f8       	rjmp	80011ebc <_dtoa_r+0x410>
80011ea0:	fa ea 00 08 	ld.d	r10,sp[8]
80011ea4:	ed b4 00 00 	bld	r4,0x0
80011ea8:	c0 81       	brne	80011eb8 <_dtoa_r+0x40c>
80011eaa:	ec e8 00 00 	ld.d	r8,r6[0]
80011eae:	2f f5       	sub	r5,-1
80011eb0:	e0 a0 10 76 	rcall	80013f9c <__avr32_f64_mul>
80011eb4:	fa eb 00 08 	st.d	sp[8],r10
80011eb8:	a1 54       	asr	r4,0x1
80011eba:	2f 86       	sub	r6,-8
80011ebc:	58 04       	cp.w	r4,0
80011ebe:	cf 11       	brne	80011ea0 <_dtoa_r+0x3f4>
80011ec0:	06 96       	mov	r6,r3
80011ec2:	40 63       	lddsp	r3,sp[0x18]
80011ec4:	41 4a       	lddsp	r10,sp[0x50]
80011ec6:	58 0a       	cp.w	r10,0
80011ec8:	c2 a0       	breq	80011f1c <_dtoa_r+0x470>
80011eca:	fa e8 00 08 	ld.d	r8,sp[8]
80011ece:	58 01       	cp.w	r1,0
80011ed0:	5f 94       	srgt	r4
80011ed2:	fa e9 00 18 	st.d	sp[24],r8
80011ed6:	30 08       	mov	r8,0
80011ed8:	fc 19 3f f0 	movh	r9,0x3ff0
80011edc:	fa ea 00 18 	ld.d	r10,sp[24]
80011ee0:	e0 a0 13 70 	rcall	800145c0 <__avr32_f64_cmp_lt>
80011ee4:	f9 bc 00 00 	moveq	r12,0
80011ee8:	f9 bc 01 01 	movne	r12,1
80011eec:	e9 ec 00 0c 	and	r12,r4,r12
80011ef0:	c1 60       	breq	80011f1c <_dtoa_r+0x470>
80011ef2:	40 98       	lddsp	r8,sp[0x24]
80011ef4:	58 08       	cp.w	r8,0
80011ef6:	e0 8a 00 f1 	brle	800120d8 <_dtoa_r+0x62c>
80011efa:	30 08       	mov	r8,0
80011efc:	fc 19 40 24 	movh	r9,0x4024
80011f00:	ec c4 00 01 	sub	r4,r6,1
80011f04:	fa ea 00 18 	ld.d	r10,sp[24]
80011f08:	2f f5       	sub	r5,-1
80011f0a:	50 64       	stdsp	sp[0x18],r4
80011f0c:	e0 a0 10 48 	rcall	80013f9c <__avr32_f64_mul>
80011f10:	40 94       	lddsp	r4,sp[0x24]
80011f12:	14 98       	mov	r8,r10
80011f14:	16 99       	mov	r9,r11
80011f16:	fa e9 00 08 	st.d	sp[8],r8
80011f1a:	c0 38       	rjmp	80011f20 <_dtoa_r+0x474>
80011f1c:	50 66       	stdsp	sp[0x18],r6
80011f1e:	02 94       	mov	r4,r1
80011f20:	0a 9c       	mov	r12,r5
80011f22:	e0 a0 12 98 	rcall	80014452 <__avr32_s32_to_f64>
80011f26:	fa e8 00 08 	ld.d	r8,sp[8]
80011f2a:	e0 a0 10 39 	rcall	80013f9c <__avr32_f64_mul>
80011f2e:	30 08       	mov	r8,0
80011f30:	fc 19 40 1c 	movh	r9,0x401c
80011f34:	e0 a0 11 ee 	rcall	80014310 <__avr32_f64_add>
80011f38:	14 98       	mov	r8,r10
80011f3a:	16 99       	mov	r9,r11
80011f3c:	fa e9 00 28 	st.d	sp[40],r8
80011f40:	fc 18 fc c0 	movh	r8,0xfcc0
80011f44:	40 a5       	lddsp	r5,sp[0x28]
80011f46:	10 05       	add	r5,r8
80011f48:	50 a5       	stdsp	sp[0x28],r5
80011f4a:	58 04       	cp.w	r4,0
80011f4c:	c2 11       	brne	80011f8e <_dtoa_r+0x4e2>
80011f4e:	fa ea 00 08 	ld.d	r10,sp[8]
80011f52:	30 08       	mov	r8,0
80011f54:	fc 19 40 14 	movh	r9,0x4014
80011f58:	e0 a0 11 0e 	rcall	80014174 <__avr32_f64_sub>
80011f5c:	40 bc       	lddsp	r12,sp[0x2c]
80011f5e:	fa eb 00 08 	st.d	sp[8],r10
80011f62:	14 98       	mov	r8,r10
80011f64:	16 99       	mov	r9,r11
80011f66:	18 9a       	mov	r10,r12
80011f68:	0a 9b       	mov	r11,r5
80011f6a:	e0 a0 13 2b 	rcall	800145c0 <__avr32_f64_cmp_lt>
80011f6e:	e0 81 02 54 	brne	80012416 <_dtoa_r+0x96a>
80011f72:	0a 98       	mov	r8,r5
80011f74:	40 b9       	lddsp	r9,sp[0x2c]
80011f76:	ee 18 80 00 	eorh	r8,0x8000
80011f7a:	fa ea 00 08 	ld.d	r10,sp[8]
80011f7e:	10 95       	mov	r5,r8
80011f80:	12 98       	mov	r8,r9
80011f82:	0a 99       	mov	r9,r5
80011f84:	e0 a0 13 1e 	rcall	800145c0 <__avr32_f64_cmp_lt>
80011f88:	e0 81 02 3e 	brne	80012404 <_dtoa_r+0x958>
80011f8c:	ca 68       	rjmp	800120d8 <_dtoa_r+0x62c>
80011f8e:	fe c9 c9 e6 	sub	r9,pc,-13850
80011f92:	e8 c8 00 01 	sub	r8,r4,1
80011f96:	40 d5       	lddsp	r5,sp[0x34]
80011f98:	58 05       	cp.w	r5,0
80011f9a:	c4 f0       	breq	80012038 <_dtoa_r+0x58c>
80011f9c:	30 0c       	mov	r12,0
80011f9e:	f2 08 02 38 	ld.d	r8,r9[r8<<0x3]
80011fa2:	51 3c       	stdsp	sp[0x4c],r12
80011fa4:	30 0a       	mov	r10,0
80011fa6:	fc 1b 3f e0 	movh	r11,0x3fe0
80011faa:	e0 a0 13 3f 	rcall	80014628 <__avr32_f64_div>
80011fae:	fa e8 00 28 	ld.d	r8,sp[40]
80011fb2:	40 85       	lddsp	r5,sp[0x20]
80011fb4:	e0 a0 10 e0 	rcall	80014174 <__avr32_f64_sub>
80011fb8:	fa eb 00 28 	st.d	sp[40],r10
80011fbc:	fa ea 00 08 	ld.d	r10,sp[8]
80011fc0:	e0 a0 12 32 	rcall	80014424 <__avr32_f64_to_s32>
80011fc4:	51 6c       	stdsp	sp[0x58],r12
80011fc6:	e0 a0 12 46 	rcall	80014452 <__avr32_s32_to_f64>
80011fca:	14 98       	mov	r8,r10
80011fcc:	16 99       	mov	r9,r11
80011fce:	fa ea 00 08 	ld.d	r10,sp[8]
80011fd2:	e0 a0 10 d1 	rcall	80014174 <__avr32_f64_sub>
80011fd6:	fa eb 00 08 	st.d	sp[8],r10
80011fda:	41 68       	lddsp	r8,sp[0x58]
80011fdc:	2d 08       	sub	r8,-48
80011fde:	0a c8       	st.b	r5++,r8
80011fe0:	41 39       	lddsp	r9,sp[0x4c]
80011fe2:	2f f9       	sub	r9,-1
80011fe4:	51 39       	stdsp	sp[0x4c],r9
80011fe6:	fa e8 00 28 	ld.d	r8,sp[40]
80011fea:	e0 a0 12 eb 	rcall	800145c0 <__avr32_f64_cmp_lt>
80011fee:	e0 81 03 39 	brne	80012660 <_dtoa_r+0xbb4>
80011ff2:	fa e8 00 08 	ld.d	r8,sp[8]
80011ff6:	30 0a       	mov	r10,0
80011ff8:	fc 1b 3f f0 	movh	r11,0x3ff0
80011ffc:	e0 a0 10 bc 	rcall	80014174 <__avr32_f64_sub>
80012000:	fa e8 00 28 	ld.d	r8,sp[40]
80012004:	e0 a0 12 de 	rcall	800145c0 <__avr32_f64_cmp_lt>
80012008:	fa ea 00 28 	ld.d	r10,sp[40]
8001200c:	30 08       	mov	r8,0
8001200e:	fc 19 40 24 	movh	r9,0x4024
80012012:	e0 81 00 da 	brne	800121c6 <_dtoa_r+0x71a>
80012016:	41 3c       	lddsp	r12,sp[0x4c]
80012018:	08 3c       	cp.w	r12,r4
8001201a:	c5 f4       	brge	800120d8 <_dtoa_r+0x62c>
8001201c:	e0 a0 0f c0 	rcall	80013f9c <__avr32_f64_mul>
80012020:	30 08       	mov	r8,0
80012022:	fa eb 00 28 	st.d	sp[40],r10
80012026:	fc 19 40 24 	movh	r9,0x4024
8001202a:	fa ea 00 08 	ld.d	r10,sp[8]
8001202e:	e0 a0 0f b7 	rcall	80013f9c <__avr32_f64_mul>
80012032:	fa eb 00 08 	st.d	sp[8],r10
80012036:	cc 3b       	rjmp	80011fbc <_dtoa_r+0x510>
80012038:	40 85       	lddsp	r5,sp[0x20]
8001203a:	08 05       	add	r5,r4
8001203c:	f2 08 02 3a 	ld.d	r10,r9[r8<<0x3]
80012040:	51 35       	stdsp	sp[0x4c],r5
80012042:	fa e8 00 28 	ld.d	r8,sp[40]
80012046:	40 85       	lddsp	r5,sp[0x20]
80012048:	e0 a0 0f aa 	rcall	80013f9c <__avr32_f64_mul>
8001204c:	fa eb 00 28 	st.d	sp[40],r10
80012050:	fa ea 00 08 	ld.d	r10,sp[8]
80012054:	e0 a0 11 e8 	rcall	80014424 <__avr32_f64_to_s32>
80012058:	51 6c       	stdsp	sp[0x58],r12
8001205a:	e0 a0 11 fc 	rcall	80014452 <__avr32_s32_to_f64>
8001205e:	14 98       	mov	r8,r10
80012060:	16 99       	mov	r9,r11
80012062:	fa ea 00 08 	ld.d	r10,sp[8]
80012066:	e0 a0 10 87 	rcall	80014174 <__avr32_f64_sub>
8001206a:	fa eb 00 08 	st.d	sp[8],r10
8001206e:	41 68       	lddsp	r8,sp[0x58]
80012070:	2d 08       	sub	r8,-48
80012072:	0a c8       	st.b	r5++,r8
80012074:	41 3c       	lddsp	r12,sp[0x4c]
80012076:	18 35       	cp.w	r5,r12
80012078:	c2 81       	brne	800120c8 <_dtoa_r+0x61c>
8001207a:	30 08       	mov	r8,0
8001207c:	fc 19 3f e0 	movh	r9,0x3fe0
80012080:	fa ea 00 28 	ld.d	r10,sp[40]
80012084:	e0 a0 11 46 	rcall	80014310 <__avr32_f64_add>
80012088:	40 85       	lddsp	r5,sp[0x20]
8001208a:	fa e8 00 08 	ld.d	r8,sp[8]
8001208e:	08 05       	add	r5,r4
80012090:	e0 a0 12 98 	rcall	800145c0 <__avr32_f64_cmp_lt>
80012094:	e0 81 00 99 	brne	800121c6 <_dtoa_r+0x71a>
80012098:	fa e8 00 28 	ld.d	r8,sp[40]
8001209c:	30 0a       	mov	r10,0
8001209e:	fc 1b 3f e0 	movh	r11,0x3fe0
800120a2:	e0 a0 10 69 	rcall	80014174 <__avr32_f64_sub>
800120a6:	14 98       	mov	r8,r10
800120a8:	16 99       	mov	r9,r11
800120aa:	fa ea 00 08 	ld.d	r10,sp[8]
800120ae:	e0 a0 12 89 	rcall	800145c0 <__avr32_f64_cmp_lt>
800120b2:	c1 30       	breq	800120d8 <_dtoa_r+0x62c>
800120b4:	33 09       	mov	r9,48
800120b6:	0a 98       	mov	r8,r5
800120b8:	11 7a       	ld.ub	r10,--r8
800120ba:	f2 0a 18 00 	cp.b	r10,r9
800120be:	e0 81 02 d1 	brne	80012660 <_dtoa_r+0xbb4>
800120c2:	10 95       	mov	r5,r8
800120c4:	cf 9b       	rjmp	800120b6 <_dtoa_r+0x60a>
800120c6:	d7 03       	nop
800120c8:	30 08       	mov	r8,0
800120ca:	fc 19 40 24 	movh	r9,0x4024
800120ce:	e0 a0 0f 67 	rcall	80013f9c <__avr32_f64_mul>
800120d2:	fa eb 00 08 	st.d	sp[8],r10
800120d6:	cb db       	rjmp	80012050 <_dtoa_r+0x5a4>
800120d8:	fa ea 00 3c 	ld.d	r10,sp[60]
800120dc:	fa eb 00 08 	st.d	sp[8],r10
800120e0:	58 e6       	cp.w	r6,14
800120e2:	5f ab       	srle	r11
800120e4:	41 8a       	lddsp	r10,sp[0x60]
800120e6:	30 08       	mov	r8,0
800120e8:	f4 09 11 ff 	rsub	r9,r10,-1
800120ec:	f7 e9 03 f9 	and	r9,r11,r9>>0x1f
800120f0:	f0 09 18 00 	cp.b	r9,r8
800120f4:	e0 80 00 82 	breq	800121f8 <_dtoa_r+0x74c>
800120f8:	40 ea       	lddsp	r10,sp[0x38]
800120fa:	58 01       	cp.w	r1,0
800120fc:	5f a9       	srle	r9
800120fe:	f3 ea 03 f9 	and	r9,r9,r10>>0x1f
80012102:	fe ca cb 5a 	sub	r10,pc,-13478
80012106:	f4 06 02 34 	ld.d	r4,r10[r6<<0x3]
8001210a:	fa e5 00 10 	st.d	sp[16],r4
8001210e:	f0 09 18 00 	cp.b	r9,r8
80012112:	c1 40       	breq	8001213a <_dtoa_r+0x68e>
80012114:	58 01       	cp.w	r1,0
80012116:	e0 81 01 77 	brne	80012404 <_dtoa_r+0x958>
8001211a:	30 08       	mov	r8,0
8001211c:	fc 19 40 14 	movh	r9,0x4014
80012120:	08 9a       	mov	r10,r4
80012122:	0a 9b       	mov	r11,r5
80012124:	e0 a0 0f 3c 	rcall	80013f9c <__avr32_f64_mul>
80012128:	fa e8 00 08 	ld.d	r8,sp[8]
8001212c:	e0 a0 12 16 	rcall	80014558 <__avr32_f64_cmp_ge>
80012130:	e0 81 01 6a 	brne	80012404 <_dtoa_r+0x958>
80012134:	02 92       	mov	r2,r1
80012136:	e0 8f 01 72 	bral	8001241a <_dtoa_r+0x96e>
8001213a:	40 85       	lddsp	r5,sp[0x20]
8001213c:	30 14       	mov	r4,1
8001213e:	fa e8 00 10 	ld.d	r8,sp[16]
80012142:	fa ea 00 08 	ld.d	r10,sp[8]
80012146:	e0 a0 12 71 	rcall	80014628 <__avr32_f64_div>
8001214a:	e0 a0 11 6d 	rcall	80014424 <__avr32_f64_to_s32>
8001214e:	18 92       	mov	r2,r12
80012150:	e0 a0 11 81 	rcall	80014452 <__avr32_s32_to_f64>
80012154:	fa e8 00 10 	ld.d	r8,sp[16]
80012158:	e0 a0 0f 22 	rcall	80013f9c <__avr32_f64_mul>
8001215c:	14 98       	mov	r8,r10
8001215e:	16 99       	mov	r9,r11
80012160:	fa ea 00 08 	ld.d	r10,sp[8]
80012164:	e0 a0 10 08 	rcall	80014174 <__avr32_f64_sub>
80012168:	fa eb 00 08 	st.d	sp[8],r10
8001216c:	e4 c8 ff d0 	sub	r8,r2,-48
80012170:	0a c8       	st.b	r5++,r8
80012172:	fc 19 40 24 	movh	r9,0x4024
80012176:	30 08       	mov	r8,0
80012178:	02 34       	cp.w	r4,r1
8001217a:	c3 31       	brne	800121e0 <_dtoa_r+0x734>
8001217c:	fa e8 00 08 	ld.d	r8,sp[8]
80012180:	e0 a0 10 c8 	rcall	80014310 <__avr32_f64_add>
80012184:	16 91       	mov	r1,r11
80012186:	14 90       	mov	r0,r10
80012188:	14 98       	mov	r8,r10
8001218a:	02 99       	mov	r9,r1
8001218c:	fa ea 00 10 	ld.d	r10,sp[16]
80012190:	e0 a0 12 18 	rcall	800145c0 <__avr32_f64_cmp_lt>
80012194:	c1 a1       	brne	800121c8 <_dtoa_r+0x71c>
80012196:	fa e8 00 10 	ld.d	r8,sp[16]
8001219a:	00 9a       	mov	r10,r0
8001219c:	02 9b       	mov	r11,r1
8001219e:	e0 a0 11 ca 	rcall	80014532 <__avr32_f64_cmp_eq>
800121a2:	e0 80 02 5e 	breq	8001265e <_dtoa_r+0xbb2>
800121a6:	e5 d2 c0 01 	bfextu	r2,r2,0x0,0x1
800121aa:	c0 f1       	brne	800121c8 <_dtoa_r+0x71c>
800121ac:	e0 8f 02 59 	bral	8001265e <_dtoa_r+0xbb2>
800121b0:	40 8a       	lddsp	r10,sp[0x20]
800121b2:	14 38       	cp.w	r8,r10
800121b4:	c0 30       	breq	800121ba <_dtoa_r+0x70e>
800121b6:	10 95       	mov	r5,r8
800121b8:	c0 98       	rjmp	800121ca <_dtoa_r+0x71e>
800121ba:	33 08       	mov	r8,48
800121bc:	40 89       	lddsp	r9,sp[0x20]
800121be:	2f f6       	sub	r6,-1
800121c0:	b2 88       	st.b	r9[0x0],r8
800121c2:	40 88       	lddsp	r8,sp[0x20]
800121c4:	c0 88       	rjmp	800121d4 <_dtoa_r+0x728>
800121c6:	40 66       	lddsp	r6,sp[0x18]
800121c8:	33 99       	mov	r9,57
800121ca:	0a 98       	mov	r8,r5
800121cc:	11 7a       	ld.ub	r10,--r8
800121ce:	f2 0a 18 00 	cp.b	r10,r9
800121d2:	ce f0       	breq	800121b0 <_dtoa_r+0x704>
800121d4:	50 66       	stdsp	sp[0x18],r6
800121d6:	11 89       	ld.ub	r9,r8[0x0]
800121d8:	2f f9       	sub	r9,-1
800121da:	b0 89       	st.b	r8[0x0],r9
800121dc:	e0 8f 02 42 	bral	80012660 <_dtoa_r+0xbb4>
800121e0:	e0 a0 0e de 	rcall	80013f9c <__avr32_f64_mul>
800121e4:	2f f4       	sub	r4,-1
800121e6:	fa eb 00 08 	st.d	sp[8],r10
800121ea:	30 08       	mov	r8,0
800121ec:	30 09       	mov	r9,0
800121ee:	e0 a0 11 a2 	rcall	80014532 <__avr32_f64_cmp_eq>
800121f2:	ca 60       	breq	8001213e <_dtoa_r+0x692>
800121f4:	e0 8f 02 35 	bral	8001265e <_dtoa_r+0xbb2>
800121f8:	40 d8       	lddsp	r8,sp[0x34]
800121fa:	58 08       	cp.w	r8,0
800121fc:	c0 51       	brne	80012206 <_dtoa_r+0x75a>
800121fe:	04 98       	mov	r8,r2
80012200:	00 95       	mov	r5,r0
80012202:	40 d4       	lddsp	r4,sp[0x34]
80012204:	c3 78       	rjmp	80012272 <_dtoa_r+0x7c6>
80012206:	40 c5       	lddsp	r5,sp[0x30]
80012208:	58 15       	cp.w	r5,1
8001220a:	e0 89 00 0f 	brgt	80012228 <_dtoa_r+0x77c>
8001220e:	41 74       	lddsp	r4,sp[0x5c]
80012210:	58 04       	cp.w	r4,0
80012212:	c0 40       	breq	8001221a <_dtoa_r+0x76e>
80012214:	f4 c9 fb cd 	sub	r9,r10,-1075
80012218:	c0 48       	rjmp	80012220 <_dtoa_r+0x774>
8001221a:	41 99       	lddsp	r9,sp[0x64]
8001221c:	f2 09 11 36 	rsub	r9,r9,54
80012220:	04 98       	mov	r8,r2
80012222:	00 95       	mov	r5,r0
80012224:	c1 c8       	rjmp	8001225c <_dtoa_r+0x7b0>
80012226:	d7 03       	nop
80012228:	e2 c8 00 01 	sub	r8,r1,1
8001222c:	58 01       	cp.w	r1,0
8001222e:	e0 05 17 40 	movge	r5,r0
80012232:	e2 09 17 40 	movge	r9,r1
80012236:	e1 d1 e5 15 	sublt	r5,r0,r1
8001223a:	f9 b9 05 00 	movlt	r9,0
8001223e:	10 32       	cp.w	r2,r8
80012240:	e5 d8 e4 18 	subge	r8,r2,r8
80012244:	f1 d2 e5 18 	sublt	r8,r8,r2
80012248:	e5 d8 e5 02 	addlt	r2,r2,r8
8001224c:	fb fc 50 11 	ld.wlt	r12,sp[0x44]
80012250:	f9 d8 e5 0c 	addlt	r12,r12,r8
80012254:	fb fc 5a 11 	st.wlt	sp[0x44],r12
80012258:	f9 b8 05 00 	movlt	r8,0
8001225c:	40 4b       	lddsp	r11,sp[0x10]
8001225e:	12 0b       	add	r11,r9
80012260:	50 08       	stdsp	sp[0x0],r8
80012262:	50 4b       	stdsp	sp[0x10],r11
80012264:	12 00       	add	r0,r9
80012266:	30 1b       	mov	r11,1
80012268:	0e 9c       	mov	r12,r7
8001226a:	e0 a0 0a c9 	rcall	800137fc <__i2b>
8001226e:	40 08       	lddsp	r8,sp[0x0]
80012270:	18 94       	mov	r4,r12
80012272:	40 4a       	lddsp	r10,sp[0x10]
80012274:	58 05       	cp.w	r5,0
80012276:	5f 99       	srgt	r9
80012278:	58 0a       	cp.w	r10,0
8001227a:	5f 9a       	srgt	r10
8001227c:	f5 e9 00 09 	and	r9,r10,r9
80012280:	c0 80       	breq	80012290 <_dtoa_r+0x7e4>
80012282:	40 4c       	lddsp	r12,sp[0x10]
80012284:	f8 05 0d 49 	min	r9,r12,r5
80012288:	12 1c       	sub	r12,r9
8001228a:	12 10       	sub	r0,r9
8001228c:	50 4c       	stdsp	sp[0x10],r12
8001228e:	12 15       	sub	r5,r9
80012290:	58 02       	cp.w	r2,0
80012292:	e0 8a 00 27 	brle	800122e0 <_dtoa_r+0x834>
80012296:	40 db       	lddsp	r11,sp[0x34]
80012298:	58 0b       	cp.w	r11,0
8001229a:	c1 d0       	breq	800122d4 <_dtoa_r+0x828>
8001229c:	58 08       	cp.w	r8,0
8001229e:	e0 8a 00 17 	brle	800122cc <_dtoa_r+0x820>
800122a2:	10 9a       	mov	r10,r8
800122a4:	50 08       	stdsp	sp[0x0],r8
800122a6:	08 9b       	mov	r11,r4
800122a8:	0e 9c       	mov	r12,r7
800122aa:	e0 a0 0a ef 	rcall	80013888 <__pow5mult>
800122ae:	06 9a       	mov	r10,r3
800122b0:	18 9b       	mov	r11,r12
800122b2:	18 94       	mov	r4,r12
800122b4:	0e 9c       	mov	r12,r7
800122b6:	e0 a0 0a 23 	rcall	800136fc <__multiply>
800122ba:	18 99       	mov	r9,r12
800122bc:	06 9b       	mov	r11,r3
800122be:	50 19       	stdsp	sp[0x4],r9
800122c0:	0e 9c       	mov	r12,r7
800122c2:	e0 a0 08 cf 	rcall	80013460 <_Bfree>
800122c6:	40 19       	lddsp	r9,sp[0x4]
800122c8:	40 08       	lddsp	r8,sp[0x0]
800122ca:	12 93       	mov	r3,r9
800122cc:	e4 08 01 0a 	sub	r10,r2,r8
800122d0:	c0 80       	breq	800122e0 <_dtoa_r+0x834>
800122d2:	c0 28       	rjmp	800122d6 <_dtoa_r+0x82a>
800122d4:	04 9a       	mov	r10,r2
800122d6:	06 9b       	mov	r11,r3
800122d8:	0e 9c       	mov	r12,r7
800122da:	e0 a0 0a d7 	rcall	80013888 <__pow5mult>
800122de:	18 93       	mov	r3,r12
800122e0:	30 1b       	mov	r11,1
800122e2:	0e 9c       	mov	r12,r7
800122e4:	e0 a0 0a 8c 	rcall	800137fc <__i2b>
800122e8:	41 1a       	lddsp	r10,sp[0x44]
800122ea:	18 92       	mov	r2,r12
800122ec:	58 0a       	cp.w	r10,0
800122ee:	e0 8a 00 07 	brle	800122fc <_dtoa_r+0x850>
800122f2:	18 9b       	mov	r11,r12
800122f4:	0e 9c       	mov	r12,r7
800122f6:	e0 a0 0a c9 	rcall	80013888 <__pow5mult>
800122fa:	18 92       	mov	r2,r12
800122fc:	40 c9       	lddsp	r9,sp[0x30]
800122fe:	58 19       	cp.w	r9,1
80012300:	e0 89 00 14 	brgt	80012328 <_dtoa_r+0x87c>
80012304:	40 38       	lddsp	r8,sp[0xc]
80012306:	58 08       	cp.w	r8,0
80012308:	c1 01       	brne	80012328 <_dtoa_r+0x87c>
8001230a:	40 29       	lddsp	r9,sp[0x8]
8001230c:	f1 d9 c0 14 	bfextu	r8,r9,0x0,0x14
80012310:	c0 c1       	brne	80012328 <_dtoa_r+0x87c>
80012312:	12 98       	mov	r8,r9
80012314:	e6 18 7f f0 	andh	r8,0x7ff0,COH
80012318:	c0 80       	breq	80012328 <_dtoa_r+0x87c>
8001231a:	40 4c       	lddsp	r12,sp[0x10]
8001231c:	30 1b       	mov	r11,1
8001231e:	2f fc       	sub	r12,-1
80012320:	2f f0       	sub	r0,-1
80012322:	50 4c       	stdsp	sp[0x10],r12
80012324:	50 6b       	stdsp	sp[0x18],r11
80012326:	c0 38       	rjmp	8001232c <_dtoa_r+0x880>
80012328:	30 0a       	mov	r10,0
8001232a:	50 6a       	stdsp	sp[0x18],r10
8001232c:	41 19       	lddsp	r9,sp[0x44]
8001232e:	58 09       	cp.w	r9,0
80012330:	c0 31       	brne	80012336 <_dtoa_r+0x88a>
80012332:	30 1c       	mov	r12,1
80012334:	c0 98       	rjmp	80012346 <_dtoa_r+0x89a>
80012336:	64 48       	ld.w	r8,r2[0x10]
80012338:	2f c8       	sub	r8,-4
8001233a:	e4 08 03 2c 	ld.w	r12,r2[r8<<0x2]
8001233e:	e0 a0 08 01 	rcall	80013340 <__hi0bits>
80012342:	f8 0c 11 20 	rsub	r12,r12,32
80012346:	40 4b       	lddsp	r11,sp[0x10]
80012348:	f8 0b 00 08 	add	r8,r12,r11
8001234c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80012350:	c0 c0       	breq	80012368 <_dtoa_r+0x8bc>
80012352:	f0 08 11 20 	rsub	r8,r8,32
80012356:	58 48       	cp.w	r8,4
80012358:	e0 8a 00 06 	brle	80012364 <_dtoa_r+0x8b8>
8001235c:	20 48       	sub	r8,4
8001235e:	10 0b       	add	r11,r8
80012360:	50 4b       	stdsp	sp[0x10],r11
80012362:	c0 78       	rjmp	80012370 <_dtoa_r+0x8c4>
80012364:	58 48       	cp.w	r8,4
80012366:	c0 70       	breq	80012374 <_dtoa_r+0x8c8>
80012368:	40 4a       	lddsp	r10,sp[0x10]
8001236a:	2e 48       	sub	r8,-28
8001236c:	10 0a       	add	r10,r8
8001236e:	50 4a       	stdsp	sp[0x10],r10
80012370:	10 00       	add	r0,r8
80012372:	10 05       	add	r5,r8
80012374:	58 00       	cp.w	r0,0
80012376:	e0 8a 00 08 	brle	80012386 <_dtoa_r+0x8da>
8001237a:	06 9b       	mov	r11,r3
8001237c:	00 9a       	mov	r10,r0
8001237e:	0e 9c       	mov	r12,r7
80012380:	e0 a0 09 7a 	rcall	80013674 <__lshift>
80012384:	18 93       	mov	r3,r12
80012386:	40 49       	lddsp	r9,sp[0x10]
80012388:	58 09       	cp.w	r9,0
8001238a:	e0 8a 00 08 	brle	8001239a <_dtoa_r+0x8ee>
8001238e:	04 9b       	mov	r11,r2
80012390:	12 9a       	mov	r10,r9
80012392:	0e 9c       	mov	r12,r7
80012394:	e0 a0 09 70 	rcall	80013674 <__lshift>
80012398:	18 92       	mov	r2,r12
8001239a:	41 48       	lddsp	r8,sp[0x50]
8001239c:	58 08       	cp.w	r8,0
8001239e:	c1 b0       	breq	800123d4 <_dtoa_r+0x928>
800123a0:	04 9b       	mov	r11,r2
800123a2:	06 9c       	mov	r12,r3
800123a4:	e0 a0 08 45 	rcall	8001342e <__mcmp>
800123a8:	c1 64       	brge	800123d4 <_dtoa_r+0x928>
800123aa:	06 9b       	mov	r11,r3
800123ac:	30 09       	mov	r9,0
800123ae:	30 aa       	mov	r10,10
800123b0:	0e 9c       	mov	r12,r7
800123b2:	e0 a0 0a 2d 	rcall	8001380c <__multadd>
800123b6:	20 16       	sub	r6,1
800123b8:	18 93       	mov	r3,r12
800123ba:	40 dc       	lddsp	r12,sp[0x34]
800123bc:	58 0c       	cp.w	r12,0
800123be:	c0 31       	brne	800123c4 <_dtoa_r+0x918>
800123c0:	40 91       	lddsp	r1,sp[0x24]
800123c2:	c0 98       	rjmp	800123d4 <_dtoa_r+0x928>
800123c4:	08 9b       	mov	r11,r4
800123c6:	40 91       	lddsp	r1,sp[0x24]
800123c8:	30 09       	mov	r9,0
800123ca:	30 aa       	mov	r10,10
800123cc:	0e 9c       	mov	r12,r7
800123ce:	e0 a0 0a 1f 	rcall	8001380c <__multadd>
800123d2:	18 94       	mov	r4,r12
800123d4:	58 01       	cp.w	r1,0
800123d6:	5f a9       	srle	r9
800123d8:	40 cb       	lddsp	r11,sp[0x30]
800123da:	58 2b       	cp.w	r11,2
800123dc:	5f 98       	srgt	r8
800123de:	f3 e8 00 08 	and	r8,r9,r8
800123e2:	c2 50       	breq	8001242c <_dtoa_r+0x980>
800123e4:	58 01       	cp.w	r1,0
800123e6:	c1 11       	brne	80012408 <_dtoa_r+0x95c>
800123e8:	04 9b       	mov	r11,r2
800123ea:	02 99       	mov	r9,r1
800123ec:	30 5a       	mov	r10,5
800123ee:	0e 9c       	mov	r12,r7
800123f0:	e0 a0 0a 0e 	rcall	8001380c <__multadd>
800123f4:	18 92       	mov	r2,r12
800123f6:	18 9b       	mov	r11,r12
800123f8:	06 9c       	mov	r12,r3
800123fa:	e0 a0 08 1a 	rcall	8001342e <__mcmp>
800123fe:	e0 89 00 0f 	brgt	8001241c <_dtoa_r+0x970>
80012402:	c0 38       	rjmp	80012408 <_dtoa_r+0x95c>
80012404:	30 02       	mov	r2,0
80012406:	04 94       	mov	r4,r2
80012408:	40 ea       	lddsp	r10,sp[0x38]
8001240a:	30 09       	mov	r9,0
8001240c:	5c da       	com	r10
8001240e:	40 85       	lddsp	r5,sp[0x20]
80012410:	50 6a       	stdsp	sp[0x18],r10
80012412:	50 49       	stdsp	sp[0x10],r9
80012414:	c0 f9       	rjmp	80012632 <_dtoa_r+0xb86>
80012416:	08 92       	mov	r2,r4
80012418:	40 66       	lddsp	r6,sp[0x18]
8001241a:	04 94       	mov	r4,r2
8001241c:	2f f6       	sub	r6,-1
8001241e:	50 66       	stdsp	sp[0x18],r6
80012420:	33 18       	mov	r8,49
80012422:	40 85       	lddsp	r5,sp[0x20]
80012424:	0a c8       	st.b	r5++,r8
80012426:	30 08       	mov	r8,0
80012428:	50 48       	stdsp	sp[0x10],r8
8001242a:	c0 49       	rjmp	80012632 <_dtoa_r+0xb86>
8001242c:	40 dc       	lddsp	r12,sp[0x34]
8001242e:	58 0c       	cp.w	r12,0
80012430:	e0 80 00 b5 	breq	8001259a <_dtoa_r+0xaee>
80012434:	58 05       	cp.w	r5,0
80012436:	e0 8a 00 08 	brle	80012446 <_dtoa_r+0x99a>
8001243a:	08 9b       	mov	r11,r4
8001243c:	0a 9a       	mov	r10,r5
8001243e:	0e 9c       	mov	r12,r7
80012440:	e0 a0 09 1a 	rcall	80013674 <__lshift>
80012444:	18 94       	mov	r4,r12
80012446:	40 6b       	lddsp	r11,sp[0x18]
80012448:	58 0b       	cp.w	r11,0
8001244a:	c0 31       	brne	80012450 <_dtoa_r+0x9a4>
8001244c:	08 9c       	mov	r12,r4
8001244e:	c1 38       	rjmp	80012474 <_dtoa_r+0x9c8>
80012450:	68 1b       	ld.w	r11,r4[0x4]
80012452:	0e 9c       	mov	r12,r7
80012454:	e0 a0 08 20 	rcall	80013494 <_Balloc>
80012458:	68 4a       	ld.w	r10,r4[0x10]
8001245a:	18 95       	mov	r5,r12
8001245c:	e8 cb ff f4 	sub	r11,r4,-12
80012460:	2f ea       	sub	r10,-2
80012462:	2f 4c       	sub	r12,-12
80012464:	a3 6a       	lsl	r10,0x2
80012466:	fe b0 e7 ea 	rcall	8000f43a <memcpy>
8001246a:	0a 9b       	mov	r11,r5
8001246c:	30 1a       	mov	r10,1
8001246e:	0e 9c       	mov	r12,r7
80012470:	e0 a0 09 02 	rcall	80013674 <__lshift>
80012474:	50 44       	stdsp	sp[0x10],r4
80012476:	40 3a       	lddsp	r10,sp[0xc]
80012478:	30 19       	mov	r9,1
8001247a:	f5 da c0 01 	bfextu	r10,r10,0x0,0x1
8001247e:	18 94       	mov	r4,r12
80012480:	50 da       	stdsp	sp[0x34],r10
80012482:	40 85       	lddsp	r5,sp[0x20]
80012484:	50 99       	stdsp	sp[0x24],r9
80012486:	50 26       	stdsp	sp[0x8],r6
80012488:	50 e1       	stdsp	sp[0x38],r1
8001248a:	04 9b       	mov	r11,r2
8001248c:	06 9c       	mov	r12,r3
8001248e:	fe b0 fa 7f 	rcall	8001198c <quorem>
80012492:	40 4b       	lddsp	r11,sp[0x10]
80012494:	f8 c0 ff d0 	sub	r0,r12,-48
80012498:	06 9c       	mov	r12,r3
8001249a:	e0 a0 07 ca 	rcall	8001342e <__mcmp>
8001249e:	08 9a       	mov	r10,r4
800124a0:	50 6c       	stdsp	sp[0x18],r12
800124a2:	04 9b       	mov	r11,r2
800124a4:	0e 9c       	mov	r12,r7
800124a6:	e0 a0 08 7f 	rcall	800135a4 <__mdiff>
800124aa:	18 91       	mov	r1,r12
800124ac:	78 38       	ld.w	r8,r12[0xc]
800124ae:	58 08       	cp.w	r8,0
800124b0:	c0 30       	breq	800124b6 <_dtoa_r+0xa0a>
800124b2:	30 16       	mov	r6,1
800124b4:	c0 68       	rjmp	800124c0 <_dtoa_r+0xa14>
800124b6:	18 9b       	mov	r11,r12
800124b8:	06 9c       	mov	r12,r3
800124ba:	e0 a0 07 ba 	rcall	8001342e <__mcmp>
800124be:	18 96       	mov	r6,r12
800124c0:	0e 9c       	mov	r12,r7
800124c2:	02 9b       	mov	r11,r1
800124c4:	e0 a0 07 ce 	rcall	80013460 <_Bfree>
800124c8:	40 cc       	lddsp	r12,sp[0x30]
800124ca:	ed ec 10 08 	or	r8,r6,r12
800124ce:	c0 d1       	brne	800124e8 <_dtoa_r+0xa3c>
800124d0:	40 db       	lddsp	r11,sp[0x34]
800124d2:	58 0b       	cp.w	r11,0
800124d4:	c0 a1       	brne	800124e8 <_dtoa_r+0xa3c>
800124d6:	40 26       	lddsp	r6,sp[0x8]
800124d8:	e0 40 00 39 	cp.w	r0,57
800124dc:	c3 00       	breq	8001253c <_dtoa_r+0xa90>
800124de:	40 6a       	lddsp	r10,sp[0x18]
800124e0:	58 0a       	cp.w	r10,0
800124e2:	e0 89 00 24 	brgt	8001252a <_dtoa_r+0xa7e>
800124e6:	c2 f8       	rjmp	80012544 <_dtoa_r+0xa98>
800124e8:	40 69       	lddsp	r9,sp[0x18]
800124ea:	58 09       	cp.w	r9,0
800124ec:	c0 85       	brlt	800124fc <_dtoa_r+0xa50>
800124ee:	12 98       	mov	r8,r9
800124f0:	40 cc       	lddsp	r12,sp[0x30]
800124f2:	18 48       	or	r8,r12
800124f4:	c1 d1       	brne	8001252e <_dtoa_r+0xa82>
800124f6:	40 db       	lddsp	r11,sp[0x34]
800124f8:	58 0b       	cp.w	r11,0
800124fa:	c1 a1       	brne	8001252e <_dtoa_r+0xa82>
800124fc:	0c 99       	mov	r9,r6
800124fe:	40 26       	lddsp	r6,sp[0x8]
80012500:	58 09       	cp.w	r9,0
80012502:	e0 8a 00 21 	brle	80012544 <_dtoa_r+0xa98>
80012506:	06 9b       	mov	r11,r3
80012508:	30 1a       	mov	r10,1
8001250a:	0e 9c       	mov	r12,r7
8001250c:	e0 a0 08 b4 	rcall	80013674 <__lshift>
80012510:	04 9b       	mov	r11,r2
80012512:	18 93       	mov	r3,r12
80012514:	e0 a0 07 8d 	rcall	8001342e <__mcmp>
80012518:	e0 89 00 06 	brgt	80012524 <_dtoa_r+0xa78>
8001251c:	c1 41       	brne	80012544 <_dtoa_r+0xa98>
8001251e:	ed b0 00 00 	bld	r0,0x0
80012522:	c1 11       	brne	80012544 <_dtoa_r+0xa98>
80012524:	e0 40 00 39 	cp.w	r0,57
80012528:	c0 a0       	breq	8001253c <_dtoa_r+0xa90>
8001252a:	2f f0       	sub	r0,-1
8001252c:	c0 c8       	rjmp	80012544 <_dtoa_r+0xa98>
8001252e:	58 06       	cp.w	r6,0
80012530:	e0 8a 00 0c 	brle	80012548 <_dtoa_r+0xa9c>
80012534:	40 26       	lddsp	r6,sp[0x8]
80012536:	e0 40 00 39 	cp.w	r0,57
8001253a:	c0 41       	brne	80012542 <_dtoa_r+0xa96>
8001253c:	33 98       	mov	r8,57
8001253e:	0a c8       	st.b	r5++,r8
80012540:	c6 78       	rjmp	8001260e <_dtoa_r+0xb62>
80012542:	2f f0       	sub	r0,-1
80012544:	0a c0       	st.b	r5++,r0
80012546:	c7 58       	rjmp	80012630 <_dtoa_r+0xb84>
80012548:	0a c0       	st.b	r5++,r0
8001254a:	40 9a       	lddsp	r10,sp[0x24]
8001254c:	40 e9       	lddsp	r9,sp[0x38]
8001254e:	12 3a       	cp.w	r10,r9
80012550:	c4 30       	breq	800125d6 <_dtoa_r+0xb2a>
80012552:	06 9b       	mov	r11,r3
80012554:	30 09       	mov	r9,0
80012556:	30 aa       	mov	r10,10
80012558:	0e 9c       	mov	r12,r7
8001255a:	e0 a0 09 59 	rcall	8001380c <__multadd>
8001255e:	40 48       	lddsp	r8,sp[0x10]
80012560:	18 93       	mov	r3,r12
80012562:	08 38       	cp.w	r8,r4
80012564:	c0 91       	brne	80012576 <_dtoa_r+0xaca>
80012566:	10 9b       	mov	r11,r8
80012568:	30 09       	mov	r9,0
8001256a:	30 aa       	mov	r10,10
8001256c:	0e 9c       	mov	r12,r7
8001256e:	e0 a0 09 4f 	rcall	8001380c <__multadd>
80012572:	50 4c       	stdsp	sp[0x10],r12
80012574:	c0 e8       	rjmp	80012590 <_dtoa_r+0xae4>
80012576:	40 4b       	lddsp	r11,sp[0x10]
80012578:	30 09       	mov	r9,0
8001257a:	30 aa       	mov	r10,10
8001257c:	0e 9c       	mov	r12,r7
8001257e:	e0 a0 09 47 	rcall	8001380c <__multadd>
80012582:	08 9b       	mov	r11,r4
80012584:	50 4c       	stdsp	sp[0x10],r12
80012586:	30 09       	mov	r9,0
80012588:	30 aa       	mov	r10,10
8001258a:	0e 9c       	mov	r12,r7
8001258c:	e0 a0 09 40 	rcall	8001380c <__multadd>
80012590:	18 94       	mov	r4,r12
80012592:	40 9c       	lddsp	r12,sp[0x24]
80012594:	2f fc       	sub	r12,-1
80012596:	50 9c       	stdsp	sp[0x24],r12
80012598:	c7 9b       	rjmp	8001248a <_dtoa_r+0x9de>
8001259a:	30 18       	mov	r8,1
8001259c:	06 90       	mov	r0,r3
8001259e:	40 85       	lddsp	r5,sp[0x20]
800125a0:	08 93       	mov	r3,r4
800125a2:	0c 94       	mov	r4,r6
800125a4:	10 96       	mov	r6,r8
800125a6:	04 9b       	mov	r11,r2
800125a8:	00 9c       	mov	r12,r0
800125aa:	fe b0 f9 f1 	rcall	8001198c <quorem>
800125ae:	2d 0c       	sub	r12,-48
800125b0:	0a cc       	st.b	r5++,r12
800125b2:	02 36       	cp.w	r6,r1
800125b4:	c0 a4       	brge	800125c8 <_dtoa_r+0xb1c>
800125b6:	00 9b       	mov	r11,r0
800125b8:	30 09       	mov	r9,0
800125ba:	30 aa       	mov	r10,10
800125bc:	0e 9c       	mov	r12,r7
800125be:	2f f6       	sub	r6,-1
800125c0:	e0 a0 09 26 	rcall	8001380c <__multadd>
800125c4:	18 90       	mov	r0,r12
800125c6:	cf 0b       	rjmp	800125a6 <_dtoa_r+0xafa>
800125c8:	08 96       	mov	r6,r4
800125ca:	30 0b       	mov	r11,0
800125cc:	06 94       	mov	r4,r3
800125ce:	50 4b       	stdsp	sp[0x10],r11
800125d0:	00 93       	mov	r3,r0
800125d2:	18 90       	mov	r0,r12
800125d4:	c0 28       	rjmp	800125d8 <_dtoa_r+0xb2c>
800125d6:	40 26       	lddsp	r6,sp[0x8]
800125d8:	06 9b       	mov	r11,r3
800125da:	30 1a       	mov	r10,1
800125dc:	0e 9c       	mov	r12,r7
800125de:	e0 a0 08 4b 	rcall	80013674 <__lshift>
800125e2:	04 9b       	mov	r11,r2
800125e4:	18 93       	mov	r3,r12
800125e6:	e0 a0 07 24 	rcall	8001342e <__mcmp>
800125ea:	e0 89 00 12 	brgt	8001260e <_dtoa_r+0xb62>
800125ee:	c1 b1       	brne	80012624 <_dtoa_r+0xb78>
800125f0:	e1 d0 c0 01 	bfextu	r0,r0,0x0,0x1
800125f4:	c0 d1       	brne	8001260e <_dtoa_r+0xb62>
800125f6:	c1 78       	rjmp	80012624 <_dtoa_r+0xb78>
800125f8:	40 89       	lddsp	r9,sp[0x20]
800125fa:	12 38       	cp.w	r8,r9
800125fc:	c0 30       	breq	80012602 <_dtoa_r+0xb56>
800125fe:	10 95       	mov	r5,r8
80012600:	c0 88       	rjmp	80012610 <_dtoa_r+0xb64>
80012602:	2f f6       	sub	r6,-1
80012604:	50 66       	stdsp	sp[0x18],r6
80012606:	33 18       	mov	r8,49
80012608:	40 8c       	lddsp	r12,sp[0x20]
8001260a:	b8 88       	st.b	r12[0x0],r8
8001260c:	c1 38       	rjmp	80012632 <_dtoa_r+0xb86>
8001260e:	33 9a       	mov	r10,57
80012610:	0a 98       	mov	r8,r5
80012612:	11 79       	ld.ub	r9,--r8
80012614:	f4 09 18 00 	cp.b	r9,r10
80012618:	cf 00       	breq	800125f8 <_dtoa_r+0xb4c>
8001261a:	2f f9       	sub	r9,-1
8001261c:	b0 89       	st.b	r8[0x0],r9
8001261e:	c0 98       	rjmp	80012630 <_dtoa_r+0xb84>
80012620:	10 95       	mov	r5,r8
80012622:	c0 28       	rjmp	80012626 <_dtoa_r+0xb7a>
80012624:	33 09       	mov	r9,48
80012626:	0a 98       	mov	r8,r5
80012628:	11 7a       	ld.ub	r10,--r8
8001262a:	f2 0a 18 00 	cp.b	r10,r9
8001262e:	cf 90       	breq	80012620 <_dtoa_r+0xb74>
80012630:	50 66       	stdsp	sp[0x18],r6
80012632:	04 9b       	mov	r11,r2
80012634:	0e 9c       	mov	r12,r7
80012636:	e0 a0 07 15 	rcall	80013460 <_Bfree>
8001263a:	58 04       	cp.w	r4,0
8001263c:	c1 20       	breq	80012660 <_dtoa_r+0xbb4>
8001263e:	40 4b       	lddsp	r11,sp[0x10]
80012640:	08 3b       	cp.w	r11,r4
80012642:	5f 19       	srne	r9
80012644:	58 0b       	cp.w	r11,0
80012646:	5f 18       	srne	r8
80012648:	f3 e8 00 08 	and	r8,r9,r8
8001264c:	c0 40       	breq	80012654 <_dtoa_r+0xba8>
8001264e:	0e 9c       	mov	r12,r7
80012650:	e0 a0 07 08 	rcall	80013460 <_Bfree>
80012654:	08 9b       	mov	r11,r4
80012656:	0e 9c       	mov	r12,r7
80012658:	e0 a0 07 04 	rcall	80013460 <_Bfree>
8001265c:	c0 28       	rjmp	80012660 <_dtoa_r+0xbb4>
8001265e:	50 66       	stdsp	sp[0x18],r6
80012660:	0e 9c       	mov	r12,r7
80012662:	06 9b       	mov	r11,r3
80012664:	e0 a0 06 fe 	rcall	80013460 <_Bfree>
80012668:	30 08       	mov	r8,0
8001266a:	aa 88       	st.b	r5[0x0],r8
8001266c:	40 68       	lddsp	r8,sp[0x18]
8001266e:	41 5a       	lddsp	r10,sp[0x54]
80012670:	2f f8       	sub	r8,-1
80012672:	41 29       	lddsp	r9,sp[0x48]
80012674:	95 08       	st.w	r10[0x0],r8
80012676:	40 8c       	lddsp	r12,sp[0x20]
80012678:	58 09       	cp.w	r9,0
8001267a:	fb f8 10 12 	ld.wne	r8,sp[0x48]
8001267e:	f1 f5 1a 00 	st.wne	r8[0x0],r5
80012682:	2e 6d       	sub	sp,-104
80012684:	d8 32       	popm	r0-r7,pc
80012686:	d7 03       	nop

80012688 <_fflush_r>:
80012688:	d4 21       	pushm	r4-r7,lr
8001268a:	16 97       	mov	r7,r11
8001268c:	18 96       	mov	r6,r12
8001268e:	76 48       	ld.w	r8,r11[0x10]
80012690:	58 08       	cp.w	r8,0
80012692:	c7 f0       	breq	80012790 <_fflush_r+0x108>
80012694:	58 0c       	cp.w	r12,0
80012696:	c0 50       	breq	800126a0 <_fflush_r+0x18>
80012698:	78 68       	ld.w	r8,r12[0x18]
8001269a:	58 08       	cp.w	r8,0
8001269c:	c0 21       	brne	800126a0 <_fflush_r+0x18>
8001269e:	cc dc       	rcall	80012838 <__sinit>
800126a0:	fe c8 d1 ac 	sub	r8,pc,-11860
800126a4:	10 37       	cp.w	r7,r8
800126a6:	c0 31       	brne	800126ac <_fflush_r+0x24>
800126a8:	6c 07       	ld.w	r7,r6[0x0]
800126aa:	c0 c8       	rjmp	800126c2 <_fflush_r+0x3a>
800126ac:	fe c8 d1 98 	sub	r8,pc,-11880
800126b0:	10 37       	cp.w	r7,r8
800126b2:	c0 31       	brne	800126b8 <_fflush_r+0x30>
800126b4:	6c 17       	ld.w	r7,r6[0x4]
800126b6:	c0 68       	rjmp	800126c2 <_fflush_r+0x3a>
800126b8:	fe c8 d1 84 	sub	r8,pc,-11900
800126bc:	10 37       	cp.w	r7,r8
800126be:	ed f7 00 02 	ld.weq	r7,r6[0x8]
800126c2:	8e 6a       	ld.sh	r10,r7[0xc]
800126c4:	14 98       	mov	r8,r10
800126c6:	ed ba 00 03 	bld	r10,0x3
800126ca:	c4 20       	breq	8001274e <_fflush_r+0xc6>
800126cc:	ab ba       	sbr	r10,0xb
800126ce:	ae 6a       	st.h	r7[0xc],r10
800126d0:	6e 18       	ld.w	r8,r7[0x4]
800126d2:	58 08       	cp.w	r8,0
800126d4:	e0 89 00 06 	brgt	800126e0 <_fflush_r+0x58>
800126d8:	6f 08       	ld.w	r8,r7[0x40]
800126da:	58 08       	cp.w	r8,0
800126dc:	e0 8a 00 5a 	brle	80012790 <_fflush_r+0x108>
800126e0:	6e b8       	ld.w	r8,r7[0x2c]
800126e2:	58 08       	cp.w	r8,0
800126e4:	c5 60       	breq	80012790 <_fflush_r+0x108>
800126e6:	e2 1a 10 00 	andl	r10,0x1000,COH
800126ea:	c0 30       	breq	800126f0 <_fflush_r+0x68>
800126ec:	6f 55       	ld.w	r5,r7[0x54]
800126ee:	c0 f8       	rjmp	8001270c <_fflush_r+0x84>
800126f0:	30 19       	mov	r9,1
800126f2:	6e 8b       	ld.w	r11,r7[0x20]
800126f4:	0c 9c       	mov	r12,r6
800126f6:	5d 18       	icall	r8
800126f8:	18 95       	mov	r5,r12
800126fa:	5b fc       	cp.w	r12,-1
800126fc:	c0 81       	brne	8001270c <_fflush_r+0x84>
800126fe:	6c 38       	ld.w	r8,r6[0xc]
80012700:	59 d8       	cp.w	r8,29
80012702:	c4 70       	breq	80012790 <_fflush_r+0x108>
80012704:	8e 68       	ld.sh	r8,r7[0xc]
80012706:	a7 a8       	sbr	r8,0x6
80012708:	ae 68       	st.h	r7[0xc],r8
8001270a:	d8 22       	popm	r4-r7,pc
8001270c:	8e 68       	ld.sh	r8,r7[0xc]
8001270e:	ed b8 00 02 	bld	r8,0x2
80012712:	c0 91       	brne	80012724 <_fflush_r+0x9c>
80012714:	6e 18       	ld.w	r8,r7[0x4]
80012716:	10 15       	sub	r5,r8
80012718:	6e d8       	ld.w	r8,r7[0x34]
8001271a:	58 08       	cp.w	r8,0
8001271c:	ef f8 10 10 	ld.wne	r8,r7[0x40]
80012720:	eb d8 e1 15 	subne	r5,r5,r8
80012724:	6e b8       	ld.w	r8,r7[0x2c]
80012726:	0c 9c       	mov	r12,r6
80012728:	30 09       	mov	r9,0
8001272a:	0a 9a       	mov	r10,r5
8001272c:	6e 8b       	ld.w	r11,r7[0x20]
8001272e:	5d 18       	icall	r8
80012730:	8e 68       	ld.sh	r8,r7[0xc]
80012732:	0a 3c       	cp.w	r12,r5
80012734:	c2 61       	brne	80012780 <_fflush_r+0xf8>
80012736:	ab d8       	cbr	r8,0xb
80012738:	30 0c       	mov	r12,0
8001273a:	6e 49       	ld.w	r9,r7[0x10]
8001273c:	ae 68       	st.h	r7[0xc],r8
8001273e:	8f 1c       	st.w	r7[0x4],r12
80012740:	8f 09       	st.w	r7[0x0],r9
80012742:	ed b8 00 0c 	bld	r8,0xc
80012746:	c2 51       	brne	80012790 <_fflush_r+0x108>
80012748:	ef 45 00 54 	st.w	r7[84],r5
8001274c:	d8 22       	popm	r4-r7,pc
8001274e:	6e 45       	ld.w	r5,r7[0x10]
80012750:	58 05       	cp.w	r5,0
80012752:	c1 f0       	breq	80012790 <_fflush_r+0x108>
80012754:	6e 04       	ld.w	r4,r7[0x0]
80012756:	f5 da c0 02 	bfextu	r10,r10,0x0,0x2
8001275a:	8f 05       	st.w	r7[0x0],r5
8001275c:	f9 b8 01 00 	movne	r8,0
80012760:	ef f8 00 05 	ld.weq	r8,r7[0x14]
80012764:	0a 14       	sub	r4,r5
80012766:	8f 28       	st.w	r7[0x8],r8
80012768:	c1 18       	rjmp	8001278a <_fflush_r+0x102>
8001276a:	08 99       	mov	r9,r4
8001276c:	0a 9a       	mov	r10,r5
8001276e:	6e a8       	ld.w	r8,r7[0x28]
80012770:	6e 8b       	ld.w	r11,r7[0x20]
80012772:	0c 9c       	mov	r12,r6
80012774:	5d 18       	icall	r8
80012776:	18 14       	sub	r4,r12
80012778:	58 0c       	cp.w	r12,0
8001277a:	e0 89 00 07 	brgt	80012788 <_fflush_r+0x100>
8001277e:	8e 68       	ld.sh	r8,r7[0xc]
80012780:	a7 a8       	sbr	r8,0x6
80012782:	3f fc       	mov	r12,-1
80012784:	ae 68       	st.h	r7[0xc],r8
80012786:	d8 22       	popm	r4-r7,pc
80012788:	18 05       	add	r5,r12
8001278a:	58 04       	cp.w	r4,0
8001278c:	fe 99 ff ef 	brgt	8001276a <_fflush_r+0xe2>
80012790:	d8 2a       	popm	r4-r7,pc,r12=0
80012792:	d7 03       	nop

80012794 <__sfp_lock_acquire>:
80012794:	5e fc       	retal	r12

80012796 <__sfp_lock_release>:
80012796:	5e fc       	retal	r12

80012798 <_cleanup_r>:
80012798:	d4 01       	pushm	lr
8001279a:	fe cb e8 7a 	sub	r11,pc,-6022
8001279e:	e0 a0 02 fd 	rcall	80012d98 <_fwalk>
800127a2:	d8 02       	popm	pc

800127a4 <__sfmoreglue>:
800127a4:	d4 21       	pushm	r4-r7,lr
800127a6:	16 95       	mov	r5,r11
800127a8:	f6 06 10 5c 	mul	r6,r11,92
800127ac:	ec cb ff f4 	sub	r11,r6,-12
800127b0:	e0 a0 03 84 	rcall	80012eb8 <_malloc_r>
800127b4:	18 97       	mov	r7,r12
800127b6:	c0 90       	breq	800127c8 <__sfmoreglue+0x24>
800127b8:	99 15       	st.w	r12[0x4],r5
800127ba:	30 0b       	mov	r11,0
800127bc:	2f 4c       	sub	r12,-12
800127be:	0c 9a       	mov	r10,r6
800127c0:	8f 2c       	st.w	r7[0x8],r12
800127c2:	8f 0b       	st.w	r7[0x0],r11
800127c4:	fe b0 e6 df 	rcall	8000f582 <memset>
800127c8:	0e 9c       	mov	r12,r7
800127ca:	d8 22       	popm	r4-r7,pc

800127cc <__sfp>:
800127cc:	d4 21       	pushm	r4-r7,lr
800127ce:	fe c8 d2 76 	sub	r8,pc,-11658
800127d2:	18 96       	mov	r6,r12
800127d4:	70 07       	ld.w	r7,r8[0x0]
800127d6:	6e 68       	ld.w	r8,r7[0x18]
800127d8:	58 08       	cp.w	r8,0
800127da:	c0 31       	brne	800127e0 <__sfp+0x14>
800127dc:	0e 9c       	mov	r12,r7
800127de:	c2 dc       	rcall	80012838 <__sinit>
800127e0:	ee c7 ff 28 	sub	r7,r7,-216
800127e4:	30 05       	mov	r5,0
800127e6:	6e 2c       	ld.w	r12,r7[0x8]
800127e8:	6e 18       	ld.w	r8,r7[0x4]
800127ea:	c0 68       	rjmp	800127f6 <__sfp+0x2a>
800127ec:	98 69       	ld.sh	r9,r12[0xc]
800127ee:	ea 09 19 00 	cp.h	r9,r5
800127f2:	c1 10       	breq	80012814 <__sfp+0x48>
800127f4:	2a 4c       	sub	r12,-92
800127f6:	20 18       	sub	r8,1
800127f8:	cf a7       	brpl	800127ec <__sfp+0x20>
800127fa:	6e 08       	ld.w	r8,r7[0x0]
800127fc:	58 08       	cp.w	r8,0
800127fe:	c0 61       	brne	8001280a <__sfp+0x3e>
80012800:	30 4b       	mov	r11,4
80012802:	0c 9c       	mov	r12,r6
80012804:	cd 0f       	rcall	800127a4 <__sfmoreglue>
80012806:	8f 0c       	st.w	r7[0x0],r12
80012808:	c0 30       	breq	8001280e <__sfp+0x42>
8001280a:	6e 07       	ld.w	r7,r7[0x0]
8001280c:	ce db       	rjmp	800127e6 <__sfp+0x1a>
8001280e:	30 c8       	mov	r8,12
80012810:	8d 38       	st.w	r6[0xc],r8
80012812:	d8 22       	popm	r4-r7,pc
80012814:	30 08       	mov	r8,0
80012816:	f9 48 00 4c 	st.w	r12[76],r8
8001281a:	99 08       	st.w	r12[0x0],r8
8001281c:	99 28       	st.w	r12[0x8],r8
8001281e:	99 18       	st.w	r12[0x4],r8
80012820:	99 48       	st.w	r12[0x10],r8
80012822:	99 58       	st.w	r12[0x14],r8
80012824:	99 68       	st.w	r12[0x18],r8
80012826:	99 d8       	st.w	r12[0x34],r8
80012828:	99 e8       	st.w	r12[0x38],r8
8001282a:	f9 48 00 48 	st.w	r12[72],r8
8001282e:	3f f8       	mov	r8,-1
80012830:	b8 78       	st.h	r12[0xe],r8
80012832:	30 18       	mov	r8,1
80012834:	b8 68       	st.h	r12[0xc],r8
80012836:	d8 22       	popm	r4-r7,pc

80012838 <__sinit>:
80012838:	d4 21       	pushm	r4-r7,lr
8001283a:	18 96       	mov	r6,r12
8001283c:	78 67       	ld.w	r7,r12[0x18]
8001283e:	58 07       	cp.w	r7,0
80012840:	c4 91       	brne	800128d2 <__sinit+0x9a>
80012842:	fe c8 00 aa 	sub	r8,pc,170
80012846:	30 15       	mov	r5,1
80012848:	99 a8       	st.w	r12[0x28],r8
8001284a:	f9 47 00 d8 	st.w	r12[216],r7
8001284e:	f9 47 00 dc 	st.w	r12[220],r7
80012852:	f9 47 00 e0 	st.w	r12[224],r7
80012856:	99 65       	st.w	r12[0x18],r5
80012858:	cb af       	rcall	800127cc <__sfp>
8001285a:	8d 0c       	st.w	r6[0x0],r12
8001285c:	0c 9c       	mov	r12,r6
8001285e:	cb 7f       	rcall	800127cc <__sfp>
80012860:	8d 1c       	st.w	r6[0x4],r12
80012862:	0c 9c       	mov	r12,r6
80012864:	cb 4f       	rcall	800127cc <__sfp>
80012866:	6c 09       	ld.w	r9,r6[0x0]
80012868:	30 48       	mov	r8,4
8001286a:	93 07       	st.w	r9[0x0],r7
8001286c:	b2 68       	st.h	r9[0xc],r8
8001286e:	93 17       	st.w	r9[0x4],r7
80012870:	93 27       	st.w	r9[0x8],r7
80012872:	6c 18       	ld.w	r8,r6[0x4]
80012874:	b2 77       	st.h	r9[0xe],r7
80012876:	93 47       	st.w	r9[0x10],r7
80012878:	93 57       	st.w	r9[0x14],r7
8001287a:	93 67       	st.w	r9[0x18],r7
8001287c:	93 89       	st.w	r9[0x20],r9
8001287e:	91 07       	st.w	r8[0x0],r7
80012880:	91 17       	st.w	r8[0x4],r7
80012882:	91 27       	st.w	r8[0x8],r7
80012884:	fe ce eb f4 	sub	lr,pc,-5132
80012888:	fe cb ec 24 	sub	r11,pc,-5084
8001288c:	93 9e       	st.w	r9[0x24],lr
8001288e:	93 ab       	st.w	r9[0x28],r11
80012890:	fe ca ec 4c 	sub	r10,pc,-5044
80012894:	fe c4 ec 58 	sub	r4,pc,-5032
80012898:	93 ba       	st.w	r9[0x2c],r10
8001289a:	93 c4       	st.w	r9[0x30],r4
8001289c:	30 99       	mov	r9,9
8001289e:	b0 69       	st.h	r8[0xc],r9
800128a0:	b0 75       	st.h	r8[0xe],r5
800128a2:	91 c4       	st.w	r8[0x30],r4
800128a4:	91 47       	st.w	r8[0x10],r7
800128a6:	91 57       	st.w	r8[0x14],r7
800128a8:	91 67       	st.w	r8[0x18],r7
800128aa:	91 88       	st.w	r8[0x20],r8
800128ac:	91 9e       	st.w	r8[0x24],lr
800128ae:	91 ab       	st.w	r8[0x28],r11
800128b0:	91 ba       	st.w	r8[0x2c],r10
800128b2:	8d 2c       	st.w	r6[0x8],r12
800128b4:	31 28       	mov	r8,18
800128b6:	99 07       	st.w	r12[0x0],r7
800128b8:	b8 68       	st.h	r12[0xc],r8
800128ba:	99 17       	st.w	r12[0x4],r7
800128bc:	99 27       	st.w	r12[0x8],r7
800128be:	30 28       	mov	r8,2
800128c0:	b8 78       	st.h	r12[0xe],r8
800128c2:	99 c4       	st.w	r12[0x30],r4
800128c4:	99 67       	st.w	r12[0x18],r7
800128c6:	99 9e       	st.w	r12[0x24],lr
800128c8:	99 ab       	st.w	r12[0x28],r11
800128ca:	99 ba       	st.w	r12[0x2c],r10
800128cc:	99 47       	st.w	r12[0x10],r7
800128ce:	99 57       	st.w	r12[0x14],r7
800128d0:	99 8c       	st.w	r12[0x20],r12
800128d2:	d8 22       	popm	r4-r7,pc

800128d4 <_malloc_trim_r>:
800128d4:	d4 21       	pushm	r4-r7,lr
800128d6:	16 95       	mov	r5,r11
800128d8:	18 97       	mov	r7,r12
800128da:	e0 a0 05 31 	rcall	8001333c <__malloc_lock>
800128de:	e0 64 01 d4 	mov	r4,468
800128e2:	68 28       	ld.w	r8,r4[0x8]
800128e4:	70 16       	ld.w	r6,r8[0x4]
800128e6:	e0 16 ff fc 	andl	r6,0xfffc
800128ea:	ec c8 ff 91 	sub	r8,r6,-111
800128ee:	f0 05 01 05 	sub	r5,r8,r5
800128f2:	e0 15 ff 80 	andl	r5,0xff80
800128f6:	ea c5 00 80 	sub	r5,r5,128
800128fa:	e0 45 00 7f 	cp.w	r5,127
800128fe:	e0 8a 00 25 	brle	80012948 <_malloc_trim_r+0x74>
80012902:	30 0b       	mov	r11,0
80012904:	0e 9c       	mov	r12,r7
80012906:	e0 a0 09 8b 	rcall	80013c1c <_sbrk_r>
8001290a:	68 28       	ld.w	r8,r4[0x8]
8001290c:	0c 08       	add	r8,r6
8001290e:	10 3c       	cp.w	r12,r8
80012910:	c1 c1       	brne	80012948 <_malloc_trim_r+0x74>
80012912:	ea 0b 11 00 	rsub	r11,r5,0
80012916:	0e 9c       	mov	r12,r7
80012918:	e0 a0 09 82 	rcall	80013c1c <_sbrk_r>
8001291c:	5b fc       	cp.w	r12,-1
8001291e:	c1 91       	brne	80012950 <_malloc_trim_r+0x7c>
80012920:	30 0b       	mov	r11,0
80012922:	0e 9c       	mov	r12,r7
80012924:	e0 a0 09 7c 	rcall	80013c1c <_sbrk_r>
80012928:	68 28       	ld.w	r8,r4[0x8]
8001292a:	f8 08 01 09 	sub	r9,r12,r8
8001292e:	58 f9       	cp.w	r9,15
80012930:	e0 8a 00 0c 	brle	80012948 <_malloc_trim_r+0x74>
80012934:	a1 a9       	sbr	r9,0x0
80012936:	91 19       	st.w	r8[0x4],r9
80012938:	e0 68 05 e0 	mov	r8,1504
8001293c:	70 09       	ld.w	r9,r8[0x0]
8001293e:	e0 68 08 cc 	mov	r8,2252
80012942:	f8 09 01 09 	sub	r9,r12,r9
80012946:	91 09       	st.w	r8[0x0],r9
80012948:	0e 9c       	mov	r12,r7
8001294a:	e0 a0 04 fa 	rcall	8001333e <__malloc_unlock>
8001294e:	d8 2a       	popm	r4-r7,pc,r12=0
80012950:	68 28       	ld.w	r8,r4[0x8]
80012952:	0a 16       	sub	r6,r5
80012954:	a1 a6       	sbr	r6,0x0
80012956:	91 16       	st.w	r8[0x4],r6
80012958:	e0 68 08 cc 	mov	r8,2252
8001295c:	70 09       	ld.w	r9,r8[0x0]
8001295e:	0a 19       	sub	r9,r5
80012960:	0e 9c       	mov	r12,r7
80012962:	91 09       	st.w	r8[0x0],r9
80012964:	e0 a0 04 ed 	rcall	8001333e <__malloc_unlock>
80012968:	da 2a       	popm	r4-r7,pc,r12=1
8001296a:	d7 03       	nop

8001296c <_free_r>:
8001296c:	d4 21       	pushm	r4-r7,lr
8001296e:	16 96       	mov	r6,r11
80012970:	18 97       	mov	r7,r12
80012972:	58 0b       	cp.w	r11,0
80012974:	e0 80 00 c0 	breq	80012af4 <_free_r+0x188>
80012978:	e0 a0 04 e2 	rcall	8001333c <__malloc_lock>
8001297c:	20 86       	sub	r6,8
8001297e:	e0 6a 01 d4 	mov	r10,468
80012982:	6c 18       	ld.w	r8,r6[0x4]
80012984:	74 2e       	ld.w	lr,r10[0x8]
80012986:	f9 d8 c0 01 	bfextu	r12,r8,0x0,0x1
8001298a:	a1 c8       	cbr	r8,0x0
8001298c:	ec 08 00 09 	add	r9,r6,r8
80012990:	72 1b       	ld.w	r11,r9[0x4]
80012992:	e0 1b ff fc 	andl	r11,0xfffc
80012996:	1c 39       	cp.w	r9,lr
80012998:	c1 e1       	brne	800129d4 <_free_r+0x68>
8001299a:	f6 08 00 08 	add	r8,r11,r8
8001299e:	58 0c       	cp.w	r12,0
800129a0:	c0 81       	brne	800129b0 <_free_r+0x44>
800129a2:	6c 09       	ld.w	r9,r6[0x0]
800129a4:	12 16       	sub	r6,r9
800129a6:	12 08       	add	r8,r9
800129a8:	6c 3b       	ld.w	r11,r6[0xc]
800129aa:	6c 29       	ld.w	r9,r6[0x8]
800129ac:	97 29       	st.w	r11[0x8],r9
800129ae:	93 3b       	st.w	r9[0xc],r11
800129b0:	10 99       	mov	r9,r8
800129b2:	95 26       	st.w	r10[0x8],r6
800129b4:	a1 a9       	sbr	r9,0x0
800129b6:	8d 19       	st.w	r6[0x4],r9
800129b8:	e0 69 05 dc 	mov	r9,1500
800129bc:	72 09       	ld.w	r9,r9[0x0]
800129be:	12 38       	cp.w	r8,r9
800129c0:	c0 63       	brcs	800129cc <_free_r+0x60>
800129c2:	e0 68 08 c8 	mov	r8,2248
800129c6:	0e 9c       	mov	r12,r7
800129c8:	70 0b       	ld.w	r11,r8[0x0]
800129ca:	c8 5f       	rcall	800128d4 <_malloc_trim_r>
800129cc:	0e 9c       	mov	r12,r7
800129ce:	e0 a0 04 b8 	rcall	8001333e <__malloc_unlock>
800129d2:	d8 22       	popm	r4-r7,pc
800129d4:	93 1b       	st.w	r9[0x4],r11
800129d6:	58 0c       	cp.w	r12,0
800129d8:	c0 30       	breq	800129de <_free_r+0x72>
800129da:	30 0c       	mov	r12,0
800129dc:	c1 08       	rjmp	800129fc <_free_r+0x90>
800129de:	6c 0e       	ld.w	lr,r6[0x0]
800129e0:	f4 c5 ff f8 	sub	r5,r10,-8
800129e4:	1c 16       	sub	r6,lr
800129e6:	1c 08       	add	r8,lr
800129e8:	6c 2e       	ld.w	lr,r6[0x8]
800129ea:	0a 3e       	cp.w	lr,r5
800129ec:	f9 bc 00 01 	moveq	r12,1
800129f0:	ed f5 10 03 	ld.wne	r5,r6[0xc]
800129f4:	eb fe 1a 02 	st.wne	r5[0x8],lr
800129f8:	fd f5 1a 03 	st.wne	lr[0xc],r5
800129fc:	f2 0b 00 0e 	add	lr,r9,r11
80012a00:	7c 1e       	ld.w	lr,lr[0x4]
80012a02:	ed be 00 00 	bld	lr,0x0
80012a06:	c1 40       	breq	80012a2e <_free_r+0xc2>
80012a08:	16 08       	add	r8,r11
80012a0a:	58 0c       	cp.w	r12,0
80012a0c:	c0 d1       	brne	80012a26 <_free_r+0xba>
80012a0e:	e0 6e 01 d4 	mov	lr,468
80012a12:	72 2b       	ld.w	r11,r9[0x8]
80012a14:	2f 8e       	sub	lr,-8
80012a16:	1c 3b       	cp.w	r11,lr
80012a18:	c0 71       	brne	80012a26 <_free_r+0xba>
80012a1a:	97 36       	st.w	r11[0xc],r6
80012a1c:	97 26       	st.w	r11[0x8],r6
80012a1e:	8d 2b       	st.w	r6[0x8],r11
80012a20:	8d 3b       	st.w	r6[0xc],r11
80012a22:	30 1c       	mov	r12,1
80012a24:	c0 58       	rjmp	80012a2e <_free_r+0xc2>
80012a26:	72 2b       	ld.w	r11,r9[0x8]
80012a28:	72 39       	ld.w	r9,r9[0xc]
80012a2a:	93 2b       	st.w	r9[0x8],r11
80012a2c:	97 39       	st.w	r11[0xc],r9
80012a2e:	10 99       	mov	r9,r8
80012a30:	ec 08 09 08 	st.w	r6[r8],r8
80012a34:	a1 a9       	sbr	r9,0x0
80012a36:	8d 19       	st.w	r6[0x4],r9
80012a38:	58 0c       	cp.w	r12,0
80012a3a:	c5 a1       	brne	80012aee <_free_r+0x182>
80012a3c:	e0 48 01 ff 	cp.w	r8,511
80012a40:	e0 8b 00 13 	brhi	80012a66 <_free_r+0xfa>
80012a44:	a3 98       	lsr	r8,0x3
80012a46:	f4 08 00 39 	add	r9,r10,r8<<0x3
80012a4a:	72 2b       	ld.w	r11,r9[0x8]
80012a4c:	8d 39       	st.w	r6[0xc],r9
80012a4e:	8d 2b       	st.w	r6[0x8],r11
80012a50:	97 36       	st.w	r11[0xc],r6
80012a52:	93 26       	st.w	r9[0x8],r6
80012a54:	a3 48       	asr	r8,0x2
80012a56:	74 19       	ld.w	r9,r10[0x4]
80012a58:	30 1b       	mov	r11,1
80012a5a:	f6 08 09 48 	lsl	r8,r11,r8
80012a5e:	f3 e8 10 08 	or	r8,r9,r8
80012a62:	95 18       	st.w	r10[0x4],r8
80012a64:	c4 58       	rjmp	80012aee <_free_r+0x182>
80012a66:	f0 0b 16 09 	lsr	r11,r8,0x9
80012a6a:	58 4b       	cp.w	r11,4
80012a6c:	e0 8b 00 06 	brhi	80012a78 <_free_r+0x10c>
80012a70:	f0 0b 16 06 	lsr	r11,r8,0x6
80012a74:	2c 8b       	sub	r11,-56
80012a76:	c2 08       	rjmp	80012ab6 <_free_r+0x14a>
80012a78:	59 4b       	cp.w	r11,20
80012a7a:	e0 8b 00 04 	brhi	80012a82 <_free_r+0x116>
80012a7e:	2a 5b       	sub	r11,-91
80012a80:	c1 b8       	rjmp	80012ab6 <_free_r+0x14a>
80012a82:	e0 4b 00 54 	cp.w	r11,84
80012a86:	e0 8b 00 06 	brhi	80012a92 <_free_r+0x126>
80012a8a:	f0 0b 16 0c 	lsr	r11,r8,0xc
80012a8e:	29 2b       	sub	r11,-110
80012a90:	c1 38       	rjmp	80012ab6 <_free_r+0x14a>
80012a92:	e0 4b 01 54 	cp.w	r11,340
80012a96:	e0 8b 00 06 	brhi	80012aa2 <_free_r+0x136>
80012a9a:	f0 0b 16 0f 	lsr	r11,r8,0xf
80012a9e:	28 9b       	sub	r11,-119
80012aa0:	c0 b8       	rjmp	80012ab6 <_free_r+0x14a>
80012aa2:	e0 4b 05 54 	cp.w	r11,1364
80012aa6:	e0 88 00 05 	brls	80012ab0 <_free_r+0x144>
80012aaa:	37 eb       	mov	r11,126
80012aac:	c0 58       	rjmp	80012ab6 <_free_r+0x14a>
80012aae:	d7 03       	nop
80012ab0:	f0 0b 16 12 	lsr	r11,r8,0x12
80012ab4:	28 4b       	sub	r11,-124
80012ab6:	f4 0b 00 3c 	add	r12,r10,r11<<0x3
80012aba:	78 29       	ld.w	r9,r12[0x8]
80012abc:	18 39       	cp.w	r9,r12
80012abe:	c0 e1       	brne	80012ada <_free_r+0x16e>
80012ac0:	74 18       	ld.w	r8,r10[0x4]
80012ac2:	a3 4b       	asr	r11,0x2
80012ac4:	30 1c       	mov	r12,1
80012ac6:	f8 0b 09 4b 	lsl	r11,r12,r11
80012aca:	f1 eb 10 0b 	or	r11,r8,r11
80012ace:	12 98       	mov	r8,r9
80012ad0:	95 1b       	st.w	r10[0x4],r11
80012ad2:	c0 a8       	rjmp	80012ae6 <_free_r+0x17a>
80012ad4:	72 29       	ld.w	r9,r9[0x8]
80012ad6:	18 39       	cp.w	r9,r12
80012ad8:	c0 60       	breq	80012ae4 <_free_r+0x178>
80012ada:	72 1a       	ld.w	r10,r9[0x4]
80012adc:	e0 1a ff fc 	andl	r10,0xfffc
80012ae0:	14 38       	cp.w	r8,r10
80012ae2:	cf 93       	brcs	80012ad4 <_free_r+0x168>
80012ae4:	72 38       	ld.w	r8,r9[0xc]
80012ae6:	8d 38       	st.w	r6[0xc],r8
80012ae8:	8d 29       	st.w	r6[0x8],r9
80012aea:	93 36       	st.w	r9[0xc],r6
80012aec:	91 26       	st.w	r8[0x8],r6
80012aee:	0e 9c       	mov	r12,r7
80012af0:	e0 a0 04 27 	rcall	8001333e <__malloc_unlock>
80012af4:	d8 22       	popm	r4-r7,pc
80012af6:	d7 03       	nop

80012af8 <__sfvwrite_r>:
80012af8:	d4 31       	pushm	r0-r7,lr
80012afa:	20 3d       	sub	sp,12
80012afc:	14 94       	mov	r4,r10
80012afe:	18 95       	mov	r5,r12
80012b00:	16 97       	mov	r7,r11
80012b02:	74 28       	ld.w	r8,r10[0x8]
80012b04:	58 08       	cp.w	r8,0
80012b06:	e0 80 01 45 	breq	80012d90 <__sfvwrite_r+0x298>
80012b0a:	96 68       	ld.sh	r8,r11[0xc]
80012b0c:	ed b8 00 03 	bld	r8,0x3
80012b10:	c0 41       	brne	80012b18 <__sfvwrite_r+0x20>
80012b12:	76 48       	ld.w	r8,r11[0x10]
80012b14:	58 08       	cp.w	r8,0
80012b16:	c0 c1       	brne	80012b2e <__sfvwrite_r+0x36>
80012b18:	0e 9b       	mov	r11,r7
80012b1a:	0a 9c       	mov	r12,r5
80012b1c:	fe b0 f6 ca 	rcall	800118b0 <__swsetup_r>
80012b20:	c0 70       	breq	80012b2e <__sfvwrite_r+0x36>
80012b22:	8e 68       	ld.sh	r8,r7[0xc]
80012b24:	a7 a8       	sbr	r8,0x6
80012b26:	ae 68       	st.h	r7[0xc],r8
80012b28:	30 98       	mov	r8,9
80012b2a:	8b 38       	st.w	r5[0xc],r8
80012b2c:	c3 09       	rjmp	80012d8c <__sfvwrite_r+0x294>
80012b2e:	8e 63       	ld.sh	r3,r7[0xc]
80012b30:	68 00       	ld.w	r0,r4[0x0]
80012b32:	06 96       	mov	r6,r3
80012b34:	e2 16 00 02 	andl	r6,0x2,COH
80012b38:	c2 10       	breq	80012b7a <__sfvwrite_r+0x82>
80012b3a:	30 03       	mov	r3,0
80012b3c:	e0 62 04 00 	mov	r2,1024
80012b40:	06 96       	mov	r6,r3
80012b42:	c0 48       	rjmp	80012b4a <__sfvwrite_r+0x52>
80012b44:	60 03       	ld.w	r3,r0[0x0]
80012b46:	60 16       	ld.w	r6,r0[0x4]
80012b48:	2f 80       	sub	r0,-8
80012b4a:	58 06       	cp.w	r6,0
80012b4c:	cf c0       	breq	80012b44 <__sfvwrite_r+0x4c>
80012b4e:	e0 46 04 00 	cp.w	r6,1024
80012b52:	ec 09 17 80 	movls	r9,r6
80012b56:	e4 09 17 b0 	movhi	r9,r2
80012b5a:	06 9a       	mov	r10,r3
80012b5c:	6e a8       	ld.w	r8,r7[0x28]
80012b5e:	6e 8b       	ld.w	r11,r7[0x20]
80012b60:	0a 9c       	mov	r12,r5
80012b62:	5d 18       	icall	r8
80012b64:	18 16       	sub	r6,r12
80012b66:	58 0c       	cp.w	r12,0
80012b68:	e0 8a 01 0f 	brle	80012d86 <__sfvwrite_r+0x28e>
80012b6c:	68 28       	ld.w	r8,r4[0x8]
80012b6e:	18 18       	sub	r8,r12
80012b70:	89 28       	st.w	r4[0x8],r8
80012b72:	e0 80 01 0f 	breq	80012d90 <__sfvwrite_r+0x298>
80012b76:	18 03       	add	r3,r12
80012b78:	ce 9b       	rjmp	80012b4a <__sfvwrite_r+0x52>
80012b7a:	e7 d3 c0 01 	bfextu	r3,r3,0x0,0x1
80012b7e:	c0 70       	breq	80012b8c <__sfvwrite_r+0x94>
80012b80:	50 06       	stdsp	sp[0x0],r6
80012b82:	0c 93       	mov	r3,r6
80012b84:	0c 91       	mov	r1,r6
80012b86:	50 15       	stdsp	sp[0x4],r5
80012b88:	08 92       	mov	r2,r4
80012b8a:	c9 e8       	rjmp	80012cc6 <__sfvwrite_r+0x1ce>
80012b8c:	06 96       	mov	r6,r3
80012b8e:	08 91       	mov	r1,r4
80012b90:	c0 48       	rjmp	80012b98 <__sfvwrite_r+0xa0>
80012b92:	60 03       	ld.w	r3,r0[0x0]
80012b94:	60 16       	ld.w	r6,r0[0x4]
80012b96:	2f 80       	sub	r0,-8
80012b98:	58 06       	cp.w	r6,0
80012b9a:	cf c0       	breq	80012b92 <__sfvwrite_r+0x9a>
80012b9c:	8e 68       	ld.sh	r8,r7[0xc]
80012b9e:	6e 24       	ld.w	r4,r7[0x8]
80012ba0:	10 99       	mov	r9,r8
80012ba2:	e2 19 02 00 	andl	r9,0x200,COH
80012ba6:	c5 50       	breq	80012c50 <__sfvwrite_r+0x158>
80012ba8:	08 36       	cp.w	r6,r4
80012baa:	c4 33       	brcs	80012c30 <__sfvwrite_r+0x138>
80012bac:	10 99       	mov	r9,r8
80012bae:	e2 19 04 80 	andl	r9,0x480,COH
80012bb2:	c3 f0       	breq	80012c30 <__sfvwrite_r+0x138>
80012bb4:	6e 4b       	ld.w	r11,r7[0x10]
80012bb6:	6e 09       	ld.w	r9,r7[0x0]
80012bb8:	16 19       	sub	r9,r11
80012bba:	50 09       	stdsp	sp[0x0],r9
80012bbc:	6e 59       	ld.w	r9,r7[0x14]
80012bbe:	10 9c       	mov	r12,r8
80012bc0:	f2 09 00 1a 	add	r10,r9,r9<<0x1
80012bc4:	30 28       	mov	r8,2
80012bc6:	f4 08 0c 08 	divs	r8,r10,r8
80012bca:	fa e9 00 04 	st.d	sp[4],r8
80012bce:	10 94       	mov	r4,r8
80012bd0:	40 09       	lddsp	r9,sp[0x0]
80012bd2:	e2 1c 04 00 	andl	r12,0x400,COH
80012bd6:	2f f9       	sub	r9,-1
80012bd8:	0c 09       	add	r9,r6
80012bda:	12 38       	cp.w	r8,r9
80012bdc:	f2 04 17 30 	movlo	r4,r9
80012be0:	58 0c       	cp.w	r12,0
80012be2:	c1 00       	breq	80012c02 <__sfvwrite_r+0x10a>
80012be4:	08 9b       	mov	r11,r4
80012be6:	0a 9c       	mov	r12,r5
80012be8:	c6 8d       	rcall	80012eb8 <_malloc_r>
80012bea:	18 92       	mov	r2,r12
80012bec:	c1 40       	breq	80012c14 <__sfvwrite_r+0x11c>
80012bee:	40 0a       	lddsp	r10,sp[0x0]
80012bf0:	6e 4b       	ld.w	r11,r7[0x10]
80012bf2:	fe b0 e4 24 	rcall	8000f43a <memcpy>
80012bf6:	8e 68       	ld.sh	r8,r7[0xc]
80012bf8:	e0 18 fb 7f 	andl	r8,0xfb7f
80012bfc:	a7 b8       	sbr	r8,0x7
80012bfe:	ae 68       	st.h	r7[0xc],r8
80012c00:	c0 d8       	rjmp	80012c1a <__sfvwrite_r+0x122>
80012c02:	08 9a       	mov	r10,r4
80012c04:	0a 9c       	mov	r12,r5
80012c06:	e0 a0 06 87 	rcall	80013914 <_realloc_r>
80012c0a:	18 92       	mov	r2,r12
80012c0c:	c0 71       	brne	80012c1a <__sfvwrite_r+0x122>
80012c0e:	6e 4b       	ld.w	r11,r7[0x10]
80012c10:	0a 9c       	mov	r12,r5
80012c12:	ca de       	rcall	8001296c <_free_r>
80012c14:	30 c8       	mov	r8,12
80012c16:	8b 38       	st.w	r5[0xc],r8
80012c18:	cb 78       	rjmp	80012d86 <__sfvwrite_r+0x28e>
80012c1a:	40 0a       	lddsp	r10,sp[0x0]
80012c1c:	40 09       	lddsp	r9,sp[0x0]
80012c1e:	e8 0a 01 0a 	sub	r10,r4,r10
80012c22:	e4 09 00 08 	add	r8,r2,r9
80012c26:	8f 54       	st.w	r7[0x14],r4
80012c28:	8f 2a       	st.w	r7[0x8],r10
80012c2a:	8f 08       	st.w	r7[0x0],r8
80012c2c:	8f 42       	st.w	r7[0x10],r2
80012c2e:	0c 94       	mov	r4,r6
80012c30:	08 36       	cp.w	r6,r4
80012c32:	ec 04 17 30 	movlo	r4,r6
80012c36:	06 9b       	mov	r11,r3
80012c38:	08 9a       	mov	r10,r4
80012c3a:	6e 0c       	ld.w	r12,r7[0x0]
80012c3c:	e0 a0 03 61 	rcall	800132fe <memmove>
80012c40:	6e 08       	ld.w	r8,r7[0x0]
80012c42:	08 08       	add	r8,r4
80012c44:	8f 08       	st.w	r7[0x0],r8
80012c46:	6e 28       	ld.w	r8,r7[0x8]
80012c48:	08 18       	sub	r8,r4
80012c4a:	0c 94       	mov	r4,r6
80012c4c:	8f 28       	st.w	r7[0x8],r8
80012c4e:	c3 08       	rjmp	80012cae <__sfvwrite_r+0x1b6>
80012c50:	08 36       	cp.w	r6,r4
80012c52:	5f ba       	srhi	r10
80012c54:	6e 0c       	ld.w	r12,r7[0x0]
80012c56:	6e 48       	ld.w	r8,r7[0x10]
80012c58:	10 3c       	cp.w	r12,r8
80012c5a:	5f b8       	srhi	r8
80012c5c:	f5 e8 00 08 	and	r8,r10,r8
80012c60:	f2 08 18 00 	cp.b	r8,r9
80012c64:	c0 e0       	breq	80012c80 <__sfvwrite_r+0x188>
80012c66:	06 9b       	mov	r11,r3
80012c68:	08 9a       	mov	r10,r4
80012c6a:	e0 a0 03 4a 	rcall	800132fe <memmove>
80012c6e:	6e 08       	ld.w	r8,r7[0x0]
80012c70:	08 08       	add	r8,r4
80012c72:	0e 9b       	mov	r11,r7
80012c74:	8f 08       	st.w	r7[0x0],r8
80012c76:	0a 9c       	mov	r12,r5
80012c78:	fe b0 fd 08 	rcall	80012688 <_fflush_r>
80012c7c:	c1 90       	breq	80012cae <__sfvwrite_r+0x1b6>
80012c7e:	c8 48       	rjmp	80012d86 <__sfvwrite_r+0x28e>
80012c80:	6e 59       	ld.w	r9,r7[0x14]
80012c82:	12 36       	cp.w	r6,r9
80012c84:	c0 a3       	brcs	80012c98 <__sfvwrite_r+0x1a0>
80012c86:	6e a8       	ld.w	r8,r7[0x28]
80012c88:	06 9a       	mov	r10,r3
80012c8a:	6e 8b       	ld.w	r11,r7[0x20]
80012c8c:	0a 9c       	mov	r12,r5
80012c8e:	5d 18       	icall	r8
80012c90:	18 94       	mov	r4,r12
80012c92:	e0 89 00 0e 	brgt	80012cae <__sfvwrite_r+0x1b6>
80012c96:	c7 88       	rjmp	80012d86 <__sfvwrite_r+0x28e>
80012c98:	0c 9a       	mov	r10,r6
80012c9a:	06 9b       	mov	r11,r3
80012c9c:	e0 a0 03 31 	rcall	800132fe <memmove>
80012ca0:	6e 08       	ld.w	r8,r7[0x0]
80012ca2:	0c 08       	add	r8,r6
80012ca4:	0c 94       	mov	r4,r6
80012ca6:	8f 08       	st.w	r7[0x0],r8
80012ca8:	6e 28       	ld.w	r8,r7[0x8]
80012caa:	0c 18       	sub	r8,r6
80012cac:	8f 28       	st.w	r7[0x8],r8
80012cae:	62 28       	ld.w	r8,r1[0x8]
80012cb0:	08 18       	sub	r8,r4
80012cb2:	83 28       	st.w	r1[0x8],r8
80012cb4:	c6 e0       	breq	80012d90 <__sfvwrite_r+0x298>
80012cb6:	08 16       	sub	r6,r4
80012cb8:	08 03       	add	r3,r4
80012cba:	c6 fb       	rjmp	80012b98 <__sfvwrite_r+0xa0>
80012cbc:	60 03       	ld.w	r3,r0[0x0]
80012cbe:	60 11       	ld.w	r1,r0[0x4]
80012cc0:	30 08       	mov	r8,0
80012cc2:	2f 80       	sub	r0,-8
80012cc4:	50 08       	stdsp	sp[0x0],r8
80012cc6:	58 01       	cp.w	r1,0
80012cc8:	cf a0       	breq	80012cbc <__sfvwrite_r+0x1c4>
80012cca:	40 0a       	lddsp	r10,sp[0x0]
80012ccc:	58 0a       	cp.w	r10,0
80012cce:	c1 51       	brne	80012cf8 <__sfvwrite_r+0x200>
80012cd0:	e2 c6 ff ff 	sub	r6,r1,-1
80012cd4:	02 9a       	mov	r10,r1
80012cd6:	30 ab       	mov	r11,10
80012cd8:	06 9c       	mov	r12,r3
80012cda:	e0 a0 03 07 	rcall	800132e8 <memchr>
80012cde:	f8 c8 ff ff 	sub	r8,r12,-1
80012ce2:	58 0c       	cp.w	r12,0
80012ce4:	f1 d3 e1 16 	subne	r6,r8,r3
80012ce8:	f9 b9 01 01 	movne	r9,1
80012cec:	fb f9 1a 00 	st.wne	sp[0x0],r9
80012cf0:	f9 b8 00 01 	moveq	r8,1
80012cf4:	fb f8 0a 00 	st.weq	sp[0x0],r8
80012cf8:	02 36       	cp.w	r6,r1
80012cfa:	ec 04 17 80 	movls	r4,r6
80012cfe:	e2 04 17 b0 	movhi	r4,r1
80012d02:	6e 59       	ld.w	r9,r7[0x14]
80012d04:	6e 25       	ld.w	r5,r7[0x8]
80012d06:	f2 05 00 05 	add	r5,r9,r5
80012d0a:	0a 34       	cp.w	r4,r5
80012d0c:	5f 9a       	srgt	r10
80012d0e:	6e 0c       	ld.w	r12,r7[0x0]
80012d10:	6e 48       	ld.w	r8,r7[0x10]
80012d12:	10 3c       	cp.w	r12,r8
80012d14:	5f b8       	srhi	r8
80012d16:	f5 e8 00 08 	and	r8,r10,r8
80012d1a:	30 0a       	mov	r10,0
80012d1c:	f4 08 18 00 	cp.b	r8,r10
80012d20:	c0 e0       	breq	80012d3c <__sfvwrite_r+0x244>
80012d22:	06 9b       	mov	r11,r3
80012d24:	0a 9a       	mov	r10,r5
80012d26:	e0 a0 02 ec 	rcall	800132fe <memmove>
80012d2a:	6e 08       	ld.w	r8,r7[0x0]
80012d2c:	0a 08       	add	r8,r5
80012d2e:	0e 9b       	mov	r11,r7
80012d30:	8f 08       	st.w	r7[0x0],r8
80012d32:	40 1c       	lddsp	r12,sp[0x4]
80012d34:	fe b0 fc aa 	rcall	80012688 <_fflush_r>
80012d38:	c1 80       	breq	80012d68 <__sfvwrite_r+0x270>
80012d3a:	c2 68       	rjmp	80012d86 <__sfvwrite_r+0x28e>
80012d3c:	12 34       	cp.w	r4,r9
80012d3e:	c0 a5       	brlt	80012d52 <__sfvwrite_r+0x25a>
80012d40:	6e a8       	ld.w	r8,r7[0x28]
80012d42:	06 9a       	mov	r10,r3
80012d44:	6e 8b       	ld.w	r11,r7[0x20]
80012d46:	40 1c       	lddsp	r12,sp[0x4]
80012d48:	5d 18       	icall	r8
80012d4a:	18 95       	mov	r5,r12
80012d4c:	e0 89 00 0e 	brgt	80012d68 <__sfvwrite_r+0x270>
80012d50:	c1 b8       	rjmp	80012d86 <__sfvwrite_r+0x28e>
80012d52:	08 9a       	mov	r10,r4
80012d54:	06 9b       	mov	r11,r3
80012d56:	e0 a0 02 d4 	rcall	800132fe <memmove>
80012d5a:	6e 08       	ld.w	r8,r7[0x0]
80012d5c:	08 08       	add	r8,r4
80012d5e:	08 95       	mov	r5,r4
80012d60:	8f 08       	st.w	r7[0x0],r8
80012d62:	6e 28       	ld.w	r8,r7[0x8]
80012d64:	08 18       	sub	r8,r4
80012d66:	8f 28       	st.w	r7[0x8],r8
80012d68:	0a 16       	sub	r6,r5
80012d6a:	c0 71       	brne	80012d78 <__sfvwrite_r+0x280>
80012d6c:	0e 9b       	mov	r11,r7
80012d6e:	40 1c       	lddsp	r12,sp[0x4]
80012d70:	fe b0 fc 8c 	rcall	80012688 <_fflush_r>
80012d74:	c0 91       	brne	80012d86 <__sfvwrite_r+0x28e>
80012d76:	50 06       	stdsp	sp[0x0],r6
80012d78:	64 28       	ld.w	r8,r2[0x8]
80012d7a:	0a 18       	sub	r8,r5
80012d7c:	85 28       	st.w	r2[0x8],r8
80012d7e:	c0 90       	breq	80012d90 <__sfvwrite_r+0x298>
80012d80:	0a 11       	sub	r1,r5
80012d82:	0a 03       	add	r3,r5
80012d84:	ca 1b       	rjmp	80012cc6 <__sfvwrite_r+0x1ce>
80012d86:	8e 68       	ld.sh	r8,r7[0xc]
80012d88:	a7 a8       	sbr	r8,0x6
80012d8a:	ae 68       	st.h	r7[0xc],r8
80012d8c:	3f fc       	mov	r12,-1
80012d8e:	c0 28       	rjmp	80012d92 <__sfvwrite_r+0x29a>
80012d90:	30 0c       	mov	r12,0
80012d92:	2f dd       	sub	sp,-12
80012d94:	d8 32       	popm	r0-r7,pc
80012d96:	d7 03       	nop

80012d98 <_fwalk>:
80012d98:	d4 31       	pushm	r0-r7,lr
80012d9a:	30 05       	mov	r5,0
80012d9c:	16 91       	mov	r1,r11
80012d9e:	f8 c7 ff 28 	sub	r7,r12,-216
80012da2:	0a 92       	mov	r2,r5
80012da4:	fe b0 fc f8 	rcall	80012794 <__sfp_lock_acquire>
80012da8:	3f f3       	mov	r3,-1
80012daa:	c1 68       	rjmp	80012dd6 <_fwalk+0x3e>
80012dac:	6e 26       	ld.w	r6,r7[0x8]
80012dae:	6e 14       	ld.w	r4,r7[0x4]
80012db0:	2f 46       	sub	r6,-12
80012db2:	c0 c8       	rjmp	80012dca <_fwalk+0x32>
80012db4:	8c 08       	ld.sh	r8,r6[0x0]
80012db6:	e4 08 19 00 	cp.h	r8,r2
80012dba:	c0 70       	breq	80012dc8 <_fwalk+0x30>
80012dbc:	8c 18       	ld.sh	r8,r6[0x2]
80012dbe:	e6 08 19 00 	cp.h	r8,r3
80012dc2:	c0 30       	breq	80012dc8 <_fwalk+0x30>
80012dc4:	5d 11       	icall	r1
80012dc6:	18 45       	or	r5,r12
80012dc8:	2a 46       	sub	r6,-92
80012dca:	20 14       	sub	r4,1
80012dcc:	ec cc 00 0c 	sub	r12,r6,12
80012dd0:	58 04       	cp.w	r4,0
80012dd2:	cf 14       	brge	80012db4 <_fwalk+0x1c>
80012dd4:	6e 07       	ld.w	r7,r7[0x0]
80012dd6:	58 07       	cp.w	r7,0
80012dd8:	ce a1       	brne	80012dac <_fwalk+0x14>
80012dda:	fe b0 fc de 	rcall	80012796 <__sfp_lock_release>
80012dde:	0a 9c       	mov	r12,r5
80012de0:	d8 32       	popm	r0-r7,pc
80012de2:	d7 03       	nop

80012de4 <_localeconv_r>:
80012de4:	fe cc d8 88 	sub	r12,pc,-10104
80012de8:	5e fc       	retal	r12
80012dea:	d7 03       	nop

80012dec <__smakebuf_r>:
80012dec:	d4 21       	pushm	r4-r7,lr
80012dee:	20 fd       	sub	sp,60
80012df0:	96 68       	ld.sh	r8,r11[0xc]
80012df2:	16 97       	mov	r7,r11
80012df4:	18 96       	mov	r6,r12
80012df6:	e2 18 00 02 	andl	r8,0x2,COH
80012dfa:	c3 c1       	brne	80012e72 <__smakebuf_r+0x86>
80012dfc:	96 7b       	ld.sh	r11,r11[0xe]
80012dfe:	f0 0b 19 00 	cp.h	r11,r8
80012e02:	c0 55       	brlt	80012e0c <__smakebuf_r+0x20>
80012e04:	1a 9a       	mov	r10,sp
80012e06:	e0 a0 08 95 	rcall	80013f30 <_fstat_r>
80012e0a:	c0 f4       	brge	80012e28 <__smakebuf_r+0x3c>
80012e0c:	8e 65       	ld.sh	r5,r7[0xc]
80012e0e:	0a 98       	mov	r8,r5
80012e10:	ab b8       	sbr	r8,0xb
80012e12:	e2 15 00 80 	andl	r5,0x80,COH
80012e16:	ae 68       	st.h	r7[0xc],r8
80012e18:	30 04       	mov	r4,0
80012e1a:	e0 68 04 00 	mov	r8,1024
80012e1e:	f9 b5 01 40 	movne	r5,64
80012e22:	f0 05 17 00 	moveq	r5,r8
80012e26:	c1 c8       	rjmp	80012e5e <__smakebuf_r+0x72>
80012e28:	40 18       	lddsp	r8,sp[0x4]
80012e2a:	e2 18 f0 00 	andl	r8,0xf000,COH
80012e2e:	e0 48 20 00 	cp.w	r8,8192
80012e32:	5f 04       	sreq	r4
80012e34:	e0 48 80 00 	cp.w	r8,32768
80012e38:	c0 e1       	brne	80012e54 <__smakebuf_r+0x68>
80012e3a:	6e b9       	ld.w	r9,r7[0x2c]
80012e3c:	fe c8 f1 f8 	sub	r8,pc,-3592
80012e40:	10 39       	cp.w	r9,r8
80012e42:	c0 91       	brne	80012e54 <__smakebuf_r+0x68>
80012e44:	8e 68       	ld.sh	r8,r7[0xc]
80012e46:	e0 65 04 00 	mov	r5,1024
80012e4a:	ab a8       	sbr	r8,0xa
80012e4c:	ef 45 00 50 	st.w	r7[80],r5
80012e50:	ae 68       	st.h	r7[0xc],r8
80012e52:	c0 68       	rjmp	80012e5e <__smakebuf_r+0x72>
80012e54:	8e 68       	ld.sh	r8,r7[0xc]
80012e56:	e0 65 04 00 	mov	r5,1024
80012e5a:	ab b8       	sbr	r8,0xb
80012e5c:	ae 68       	st.h	r7[0xc],r8
80012e5e:	0a 9b       	mov	r11,r5
80012e60:	0c 9c       	mov	r12,r6
80012e62:	c2 bc       	rcall	80012eb8 <_malloc_r>
80012e64:	8e 68       	ld.sh	r8,r7[0xc]
80012e66:	c0 d1       	brne	80012e80 <__smakebuf_r+0x94>
80012e68:	ed b8 00 09 	bld	r8,0x9
80012e6c:	c1 b0       	breq	80012ea2 <__smakebuf_r+0xb6>
80012e6e:	a1 b8       	sbr	r8,0x1
80012e70:	ae 68       	st.h	r7[0xc],r8
80012e72:	ee c8 ff b9 	sub	r8,r7,-71
80012e76:	8f 48       	st.w	r7[0x10],r8
80012e78:	8f 08       	st.w	r7[0x0],r8
80012e7a:	30 18       	mov	r8,1
80012e7c:	8f 58       	st.w	r7[0x14],r8
80012e7e:	c1 28       	rjmp	80012ea2 <__smakebuf_r+0xb6>
80012e80:	a7 b8       	sbr	r8,0x7
80012e82:	8f 4c       	st.w	r7[0x10],r12
80012e84:	ae 68       	st.h	r7[0xc],r8
80012e86:	8f 55       	st.w	r7[0x14],r5
80012e88:	fe c8 06 f0 	sub	r8,pc,1776
80012e8c:	8f 0c       	st.w	r7[0x0],r12
80012e8e:	8d a8       	st.w	r6[0x28],r8
80012e90:	58 04       	cp.w	r4,0
80012e92:	c0 80       	breq	80012ea2 <__smakebuf_r+0xb6>
80012e94:	8e 7c       	ld.sh	r12,r7[0xe]
80012e96:	e0 a0 07 3f 	rcall	80013d14 <isatty>
80012e9a:	c0 40       	breq	80012ea2 <__smakebuf_r+0xb6>
80012e9c:	8e 68       	ld.sh	r8,r7[0xc]
80012e9e:	a1 a8       	sbr	r8,0x0
80012ea0:	ae 68       	st.h	r7[0xc],r8
80012ea2:	2f 1d       	sub	sp,-60
80012ea4:	d8 22       	popm	r4-r7,pc
80012ea6:	d7 03       	nop

80012ea8 <malloc>:
80012ea8:	d4 01       	pushm	lr
80012eaa:	e0 68 01 d0 	mov	r8,464
80012eae:	18 9b       	mov	r11,r12
80012eb0:	70 0c       	ld.w	r12,r8[0x0]
80012eb2:	c0 3c       	rcall	80012eb8 <_malloc_r>
80012eb4:	d8 02       	popm	pc
80012eb6:	d7 03       	nop

80012eb8 <_malloc_r>:
80012eb8:	d4 31       	pushm	r0-r7,lr
80012eba:	f6 c8 ff f5 	sub	r8,r11,-11
80012ebe:	18 95       	mov	r5,r12
80012ec0:	10 97       	mov	r7,r8
80012ec2:	e0 17 ff f8 	andl	r7,0xfff8
80012ec6:	59 68       	cp.w	r8,22
80012ec8:	f9 b7 08 10 	movls	r7,16
80012ecc:	16 37       	cp.w	r7,r11
80012ece:	5f 38       	srlo	r8
80012ed0:	f1 e7 13 f8 	or	r8,r8,r7>>0x1f
80012ed4:	c0 50       	breq	80012ede <_malloc_r+0x26>
80012ed6:	30 c8       	mov	r8,12
80012ed8:	99 38       	st.w	r12[0xc],r8
80012eda:	e0 8f 01 f7 	bral	800132c8 <_malloc_r+0x410>
80012ede:	e0 a0 02 2f 	rcall	8001333c <__malloc_lock>
80012ee2:	e0 47 01 f7 	cp.w	r7,503
80012ee6:	e0 8b 00 1d 	brhi	80012f20 <_malloc_r+0x68>
80012eea:	ee 03 16 03 	lsr	r3,r7,0x3
80012eee:	e0 68 01 d4 	mov	r8,468
80012ef2:	f0 03 00 38 	add	r8,r8,r3<<0x3
80012ef6:	70 36       	ld.w	r6,r8[0xc]
80012ef8:	10 36       	cp.w	r6,r8
80012efa:	c0 61       	brne	80012f06 <_malloc_r+0x4e>
80012efc:	ec c8 ff f8 	sub	r8,r6,-8
80012f00:	70 36       	ld.w	r6,r8[0xc]
80012f02:	10 36       	cp.w	r6,r8
80012f04:	c0 c0       	breq	80012f1c <_malloc_r+0x64>
80012f06:	6c 18       	ld.w	r8,r6[0x4]
80012f08:	e0 18 ff fc 	andl	r8,0xfffc
80012f0c:	6c 3a       	ld.w	r10,r6[0xc]
80012f0e:	ec 08 00 09 	add	r9,r6,r8
80012f12:	0a 9c       	mov	r12,r5
80012f14:	6c 28       	ld.w	r8,r6[0x8]
80012f16:	95 28       	st.w	r10[0x8],r8
80012f18:	91 3a       	st.w	r8[0xc],r10
80012f1a:	c4 78       	rjmp	80012fa8 <_malloc_r+0xf0>
80012f1c:	2f e3       	sub	r3,-2
80012f1e:	c4 d8       	rjmp	80012fb8 <_malloc_r+0x100>
80012f20:	ee 03 16 09 	lsr	r3,r7,0x9
80012f24:	c0 41       	brne	80012f2c <_malloc_r+0x74>
80012f26:	ee 03 16 03 	lsr	r3,r7,0x3
80012f2a:	c2 68       	rjmp	80012f76 <_malloc_r+0xbe>
80012f2c:	58 43       	cp.w	r3,4
80012f2e:	e0 8b 00 06 	brhi	80012f3a <_malloc_r+0x82>
80012f32:	ee 03 16 06 	lsr	r3,r7,0x6
80012f36:	2c 83       	sub	r3,-56
80012f38:	c1 f8       	rjmp	80012f76 <_malloc_r+0xbe>
80012f3a:	59 43       	cp.w	r3,20
80012f3c:	e0 8b 00 04 	brhi	80012f44 <_malloc_r+0x8c>
80012f40:	2a 53       	sub	r3,-91
80012f42:	c1 a8       	rjmp	80012f76 <_malloc_r+0xbe>
80012f44:	e0 43 00 54 	cp.w	r3,84
80012f48:	e0 8b 00 06 	brhi	80012f54 <_malloc_r+0x9c>
80012f4c:	ee 03 16 0c 	lsr	r3,r7,0xc
80012f50:	29 23       	sub	r3,-110
80012f52:	c1 28       	rjmp	80012f76 <_malloc_r+0xbe>
80012f54:	e0 43 01 54 	cp.w	r3,340
80012f58:	e0 8b 00 06 	brhi	80012f64 <_malloc_r+0xac>
80012f5c:	ee 03 16 0f 	lsr	r3,r7,0xf
80012f60:	28 93       	sub	r3,-119
80012f62:	c0 a8       	rjmp	80012f76 <_malloc_r+0xbe>
80012f64:	e0 43 05 54 	cp.w	r3,1364
80012f68:	e0 88 00 04 	brls	80012f70 <_malloc_r+0xb8>
80012f6c:	37 e3       	mov	r3,126
80012f6e:	c0 48       	rjmp	80012f76 <_malloc_r+0xbe>
80012f70:	ee 03 16 12 	lsr	r3,r7,0x12
80012f74:	28 43       	sub	r3,-124
80012f76:	e0 6a 01 d4 	mov	r10,468
80012f7a:	f4 03 00 3a 	add	r10,r10,r3<<0x3
80012f7e:	74 36       	ld.w	r6,r10[0xc]
80012f80:	c1 98       	rjmp	80012fb2 <_malloc_r+0xfa>
80012f82:	6c 19       	ld.w	r9,r6[0x4]
80012f84:	e0 19 ff fc 	andl	r9,0xfffc
80012f88:	f2 07 01 0b 	sub	r11,r9,r7
80012f8c:	58 fb       	cp.w	r11,15
80012f8e:	e0 8a 00 04 	brle	80012f96 <_malloc_r+0xde>
80012f92:	20 13       	sub	r3,1
80012f94:	c1 18       	rjmp	80012fb6 <_malloc_r+0xfe>
80012f96:	6c 38       	ld.w	r8,r6[0xc]
80012f98:	58 0b       	cp.w	r11,0
80012f9a:	c0 b5       	brlt	80012fb0 <_malloc_r+0xf8>
80012f9c:	6c 2a       	ld.w	r10,r6[0x8]
80012f9e:	ec 09 00 09 	add	r9,r6,r9
80012fa2:	0a 9c       	mov	r12,r5
80012fa4:	91 2a       	st.w	r8[0x8],r10
80012fa6:	95 38       	st.w	r10[0xc],r8
80012fa8:	72 18       	ld.w	r8,r9[0x4]
80012faa:	a1 a8       	sbr	r8,0x0
80012fac:	93 18       	st.w	r9[0x4],r8
80012fae:	cb c8       	rjmp	80013126 <_malloc_r+0x26e>
80012fb0:	10 96       	mov	r6,r8
80012fb2:	14 36       	cp.w	r6,r10
80012fb4:	ce 71       	brne	80012f82 <_malloc_r+0xca>
80012fb6:	2f f3       	sub	r3,-1
80012fb8:	e0 6a 01 d4 	mov	r10,468
80012fbc:	f4 cc ff f8 	sub	r12,r10,-8
80012fc0:	78 26       	ld.w	r6,r12[0x8]
80012fc2:	18 36       	cp.w	r6,r12
80012fc4:	c6 c0       	breq	8001309c <_malloc_r+0x1e4>
80012fc6:	6c 19       	ld.w	r9,r6[0x4]
80012fc8:	e0 19 ff fc 	andl	r9,0xfffc
80012fcc:	f2 07 01 08 	sub	r8,r9,r7
80012fd0:	58 f8       	cp.w	r8,15
80012fd2:	e0 89 00 8f 	brgt	800130f0 <_malloc_r+0x238>
80012fd6:	99 3c       	st.w	r12[0xc],r12
80012fd8:	99 2c       	st.w	r12[0x8],r12
80012fda:	58 08       	cp.w	r8,0
80012fdc:	c0 55       	brlt	80012fe6 <_malloc_r+0x12e>
80012fde:	ec 09 00 09 	add	r9,r6,r9
80012fe2:	0a 9c       	mov	r12,r5
80012fe4:	ce 2b       	rjmp	80012fa8 <_malloc_r+0xf0>
80012fe6:	e0 49 01 ff 	cp.w	r9,511
80012fea:	e0 8b 00 13 	brhi	80013010 <_malloc_r+0x158>
80012fee:	a3 99       	lsr	r9,0x3
80012ff0:	f4 09 00 38 	add	r8,r10,r9<<0x3
80012ff4:	70 2b       	ld.w	r11,r8[0x8]
80012ff6:	8d 38       	st.w	r6[0xc],r8
80012ff8:	8d 2b       	st.w	r6[0x8],r11
80012ffa:	97 36       	st.w	r11[0xc],r6
80012ffc:	91 26       	st.w	r8[0x8],r6
80012ffe:	a3 49       	asr	r9,0x2
80013000:	74 18       	ld.w	r8,r10[0x4]
80013002:	30 1b       	mov	r11,1
80013004:	f6 09 09 49 	lsl	r9,r11,r9
80013008:	f1 e9 10 09 	or	r9,r8,r9
8001300c:	95 19       	st.w	r10[0x4],r9
8001300e:	c4 78       	rjmp	8001309c <_malloc_r+0x1e4>
80013010:	f2 0a 16 09 	lsr	r10,r9,0x9
80013014:	58 4a       	cp.w	r10,4
80013016:	e0 8b 00 07 	brhi	80013024 <_malloc_r+0x16c>
8001301a:	f2 0a 16 06 	lsr	r10,r9,0x6
8001301e:	2c 8a       	sub	r10,-56
80013020:	c2 08       	rjmp	80013060 <_malloc_r+0x1a8>
80013022:	d7 03       	nop
80013024:	59 4a       	cp.w	r10,20
80013026:	e0 8b 00 04 	brhi	8001302e <_malloc_r+0x176>
8001302a:	2a 5a       	sub	r10,-91
8001302c:	c1 a8       	rjmp	80013060 <_malloc_r+0x1a8>
8001302e:	e0 4a 00 54 	cp.w	r10,84
80013032:	e0 8b 00 06 	brhi	8001303e <_malloc_r+0x186>
80013036:	f2 0a 16 0c 	lsr	r10,r9,0xc
8001303a:	29 2a       	sub	r10,-110
8001303c:	c1 28       	rjmp	80013060 <_malloc_r+0x1a8>
8001303e:	e0 4a 01 54 	cp.w	r10,340
80013042:	e0 8b 00 06 	brhi	8001304e <_malloc_r+0x196>
80013046:	f2 0a 16 0f 	lsr	r10,r9,0xf
8001304a:	28 9a       	sub	r10,-119
8001304c:	c0 a8       	rjmp	80013060 <_malloc_r+0x1a8>
8001304e:	e0 4a 05 54 	cp.w	r10,1364
80013052:	e0 88 00 04 	brls	8001305a <_malloc_r+0x1a2>
80013056:	37 ea       	mov	r10,126
80013058:	c0 48       	rjmp	80013060 <_malloc_r+0x1a8>
8001305a:	f2 0a 16 12 	lsr	r10,r9,0x12
8001305e:	28 4a       	sub	r10,-124
80013060:	e0 6b 01 d4 	mov	r11,468
80013064:	f6 0a 00 34 	add	r4,r11,r10<<0x3
80013068:	68 28       	ld.w	r8,r4[0x8]
8001306a:	08 38       	cp.w	r8,r4
8001306c:	c0 e1       	brne	80013088 <_malloc_r+0x1d0>
8001306e:	76 19       	ld.w	r9,r11[0x4]
80013070:	a3 4a       	asr	r10,0x2
80013072:	30 1e       	mov	lr,1
80013074:	fc 0a 09 4a 	lsl	r10,lr,r10
80013078:	f3 ea 10 0a 	or	r10,r9,r10
8001307c:	10 99       	mov	r9,r8
8001307e:	97 1a       	st.w	r11[0x4],r10
80013080:	c0 a8       	rjmp	80013094 <_malloc_r+0x1dc>
80013082:	70 28       	ld.w	r8,r8[0x8]
80013084:	08 38       	cp.w	r8,r4
80013086:	c0 60       	breq	80013092 <_malloc_r+0x1da>
80013088:	70 1a       	ld.w	r10,r8[0x4]
8001308a:	e0 1a ff fc 	andl	r10,0xfffc
8001308e:	14 39       	cp.w	r9,r10
80013090:	cf 93       	brcs	80013082 <_malloc_r+0x1ca>
80013092:	70 39       	ld.w	r9,r8[0xc]
80013094:	8d 39       	st.w	r6[0xc],r9
80013096:	8d 28       	st.w	r6[0x8],r8
80013098:	91 36       	st.w	r8[0xc],r6
8001309a:	93 26       	st.w	r9[0x8],r6
8001309c:	e6 08 14 02 	asr	r8,r3,0x2
800130a0:	30 1b       	mov	r11,1
800130a2:	e0 64 01 d4 	mov	r4,468
800130a6:	f6 08 09 4b 	lsl	r11,r11,r8
800130aa:	68 18       	ld.w	r8,r4[0x4]
800130ac:	10 3b       	cp.w	r11,r8
800130ae:	e0 8b 00 69 	brhi	80013180 <_malloc_r+0x2c8>
800130b2:	f7 e8 00 09 	and	r9,r11,r8
800130b6:	c0 b1       	brne	800130cc <_malloc_r+0x214>
800130b8:	e0 13 ff fc 	andl	r3,0xfffc
800130bc:	a1 7b       	lsl	r11,0x1
800130be:	2f c3       	sub	r3,-4
800130c0:	c0 38       	rjmp	800130c6 <_malloc_r+0x20e>
800130c2:	2f c3       	sub	r3,-4
800130c4:	a1 7b       	lsl	r11,0x1
800130c6:	f7 e8 00 09 	and	r9,r11,r8
800130ca:	cf c0       	breq	800130c2 <_malloc_r+0x20a>
800130cc:	e8 03 00 3e 	add	lr,r4,r3<<0x3
800130d0:	06 92       	mov	r2,r3
800130d2:	1c 91       	mov	r1,lr
800130d4:	62 36       	ld.w	r6,r1[0xc]
800130d6:	c2 d8       	rjmp	80013130 <_malloc_r+0x278>
800130d8:	6c 1a       	ld.w	r10,r6[0x4]
800130da:	e0 1a ff fc 	andl	r10,0xfffc
800130de:	f4 07 01 08 	sub	r8,r10,r7
800130e2:	58 f8       	cp.w	r8,15
800130e4:	e0 8a 00 15 	brle	8001310e <_malloc_r+0x256>
800130e8:	6c 3a       	ld.w	r10,r6[0xc]
800130ea:	6c 29       	ld.w	r9,r6[0x8]
800130ec:	95 29       	st.w	r10[0x8],r9
800130ee:	93 3a       	st.w	r9[0xc],r10
800130f0:	0e 99       	mov	r9,r7
800130f2:	ec 07 00 07 	add	r7,r6,r7
800130f6:	a1 a9       	sbr	r9,0x0
800130f8:	99 37       	st.w	r12[0xc],r7
800130fa:	99 27       	st.w	r12[0x8],r7
800130fc:	8d 19       	st.w	r6[0x4],r9
800130fe:	ee 08 09 08 	st.w	r7[r8],r8
80013102:	8f 2c       	st.w	r7[0x8],r12
80013104:	8f 3c       	st.w	r7[0xc],r12
80013106:	a1 a8       	sbr	r8,0x0
80013108:	0a 9c       	mov	r12,r5
8001310a:	8f 18       	st.w	r7[0x4],r8
8001310c:	c0 d8       	rjmp	80013126 <_malloc_r+0x26e>
8001310e:	6c 39       	ld.w	r9,r6[0xc]
80013110:	58 08       	cp.w	r8,0
80013112:	c0 e5       	brlt	8001312e <_malloc_r+0x276>
80013114:	ec 0a 00 0a 	add	r10,r6,r10
80013118:	74 18       	ld.w	r8,r10[0x4]
8001311a:	a1 a8       	sbr	r8,0x0
8001311c:	0a 9c       	mov	r12,r5
8001311e:	95 18       	st.w	r10[0x4],r8
80013120:	6c 28       	ld.w	r8,r6[0x8]
80013122:	93 28       	st.w	r9[0x8],r8
80013124:	91 39       	st.w	r8[0xc],r9
80013126:	c0 cd       	rcall	8001333e <__malloc_unlock>
80013128:	ec cc ff f8 	sub	r12,r6,-8
8001312c:	d8 32       	popm	r0-r7,pc
8001312e:	12 96       	mov	r6,r9
80013130:	02 36       	cp.w	r6,r1
80013132:	cd 31       	brne	800130d8 <_malloc_r+0x220>
80013134:	2f f2       	sub	r2,-1
80013136:	f1 d2 c0 02 	bfextu	r8,r2,0x0,0x2
8001313a:	c0 30       	breq	80013140 <_malloc_r+0x288>
8001313c:	2f 81       	sub	r1,-8
8001313e:	cc bb       	rjmp	800130d4 <_malloc_r+0x21c>
80013140:	1c 98       	mov	r8,lr
80013142:	f3 d3 c0 02 	bfextu	r9,r3,0x0,0x2
80013146:	c0 81       	brne	80013156 <_malloc_r+0x29e>
80013148:	68 19       	ld.w	r9,r4[0x4]
8001314a:	f6 08 11 ff 	rsub	r8,r11,-1
8001314e:	f3 e8 00 08 	and	r8,r9,r8
80013152:	89 18       	st.w	r4[0x4],r8
80013154:	c0 78       	rjmp	80013162 <_malloc_r+0x2aa>
80013156:	f0 c9 00 08 	sub	r9,r8,8
8001315a:	20 13       	sub	r3,1
8001315c:	70 08       	ld.w	r8,r8[0x0]
8001315e:	12 38       	cp.w	r8,r9
80013160:	cf 10       	breq	80013142 <_malloc_r+0x28a>
80013162:	a1 7b       	lsl	r11,0x1
80013164:	68 18       	ld.w	r8,r4[0x4]
80013166:	10 3b       	cp.w	r11,r8
80013168:	e0 8b 00 0c 	brhi	80013180 <_malloc_r+0x2c8>
8001316c:	58 0b       	cp.w	r11,0
8001316e:	c0 90       	breq	80013180 <_malloc_r+0x2c8>
80013170:	04 93       	mov	r3,r2
80013172:	c0 38       	rjmp	80013178 <_malloc_r+0x2c0>
80013174:	2f c3       	sub	r3,-4
80013176:	a1 7b       	lsl	r11,0x1
80013178:	f7 e8 00 09 	and	r9,r11,r8
8001317c:	ca 81       	brne	800130cc <_malloc_r+0x214>
8001317e:	cf bb       	rjmp	80013174 <_malloc_r+0x2bc>
80013180:	68 23       	ld.w	r3,r4[0x8]
80013182:	66 12       	ld.w	r2,r3[0x4]
80013184:	e0 12 ff fc 	andl	r2,0xfffc
80013188:	0e 32       	cp.w	r2,r7
8001318a:	5f 39       	srlo	r9
8001318c:	e4 07 01 08 	sub	r8,r2,r7
80013190:	58 f8       	cp.w	r8,15
80013192:	5f aa       	srle	r10
80013194:	f5 e9 10 09 	or	r9,r10,r9
80013198:	e0 80 00 9a 	breq	800132cc <_malloc_r+0x414>
8001319c:	e0 68 08 c8 	mov	r8,2248
800131a0:	70 01       	ld.w	r1,r8[0x0]
800131a2:	e0 68 05 e0 	mov	r8,1504
800131a6:	2f 01       	sub	r1,-16
800131a8:	70 08       	ld.w	r8,r8[0x0]
800131aa:	0e 01       	add	r1,r7
800131ac:	5b f8       	cp.w	r8,-1
800131ae:	c0 40       	breq	800131b6 <_malloc_r+0x2fe>
800131b0:	28 11       	sub	r1,-127
800131b2:	e0 11 ff 80 	andl	r1,0xff80
800131b6:	02 9b       	mov	r11,r1
800131b8:	0a 9c       	mov	r12,r5
800131ba:	e0 a0 05 31 	rcall	80013c1c <_sbrk_r>
800131be:	18 96       	mov	r6,r12
800131c0:	5b fc       	cp.w	r12,-1
800131c2:	c7 50       	breq	800132ac <_malloc_r+0x3f4>
800131c4:	e6 02 00 08 	add	r8,r3,r2
800131c8:	10 3c       	cp.w	r12,r8
800131ca:	c0 32       	brcc	800131d0 <_malloc_r+0x318>
800131cc:	08 33       	cp.w	r3,r4
800131ce:	c6 f1       	brne	800132ac <_malloc_r+0x3f4>
800131d0:	e0 6a 08 cc 	mov	r10,2252
800131d4:	74 09       	ld.w	r9,r10[0x0]
800131d6:	e2 09 00 09 	add	r9,r1,r9
800131da:	95 09       	st.w	r10[0x0],r9
800131dc:	10 36       	cp.w	r6,r8
800131de:	c0 a1       	brne	800131f2 <_malloc_r+0x33a>
800131e0:	f5 d6 c0 07 	bfextu	r10,r6,0x0,0x7
800131e4:	c0 71       	brne	800131f2 <_malloc_r+0x33a>
800131e6:	e2 02 00 02 	add	r2,r1,r2
800131ea:	68 28       	ld.w	r8,r4[0x8]
800131ec:	a1 a2       	sbr	r2,0x0
800131ee:	91 12       	st.w	r8[0x4],r2
800131f0:	c4 f8       	rjmp	8001328e <_malloc_r+0x3d6>
800131f2:	e0 6a 05 e0 	mov	r10,1504
800131f6:	74 0b       	ld.w	r11,r10[0x0]
800131f8:	5b fb       	cp.w	r11,-1
800131fa:	c0 31       	brne	80013200 <_malloc_r+0x348>
800131fc:	95 06       	st.w	r10[0x0],r6
800131fe:	c0 78       	rjmp	8001320c <_malloc_r+0x354>
80013200:	ec 09 00 09 	add	r9,r6,r9
80013204:	e0 6a 08 cc 	mov	r10,2252
80013208:	10 19       	sub	r9,r8
8001320a:	95 09       	st.w	r10[0x0],r9
8001320c:	f1 d6 c0 03 	bfextu	r8,r6,0x0,0x3
80013210:	f0 09 11 08 	rsub	r9,r8,8
80013214:	58 08       	cp.w	r8,0
80013216:	f2 08 17 10 	movne	r8,r9
8001321a:	ed d8 e1 06 	addne	r6,r6,r8
8001321e:	28 08       	sub	r8,-128
80013220:	ec 01 00 01 	add	r1,r6,r1
80013224:	0a 9c       	mov	r12,r5
80013226:	e3 d1 c0 07 	bfextu	r1,r1,0x0,0x7
8001322a:	f0 01 01 01 	sub	r1,r8,r1
8001322e:	02 9b       	mov	r11,r1
80013230:	e0 a0 04 f6 	rcall	80013c1c <_sbrk_r>
80013234:	e0 68 08 cc 	mov	r8,2252
80013238:	5b fc       	cp.w	r12,-1
8001323a:	ec 0c 17 00 	moveq	r12,r6
8001323e:	f9 b1 00 00 	moveq	r1,0
80013242:	70 09       	ld.w	r9,r8[0x0]
80013244:	0c 1c       	sub	r12,r6
80013246:	89 26       	st.w	r4[0x8],r6
80013248:	02 0c       	add	r12,r1
8001324a:	12 01       	add	r1,r9
8001324c:	a1 ac       	sbr	r12,0x0
8001324e:	91 01       	st.w	r8[0x0],r1
80013250:	8d 1c       	st.w	r6[0x4],r12
80013252:	08 33       	cp.w	r3,r4
80013254:	c1 d0       	breq	8001328e <_malloc_r+0x3d6>
80013256:	58 f2       	cp.w	r2,15
80013258:	e0 8b 00 05 	brhi	80013262 <_malloc_r+0x3aa>
8001325c:	30 18       	mov	r8,1
8001325e:	8d 18       	st.w	r6[0x4],r8
80013260:	c2 68       	rjmp	800132ac <_malloc_r+0x3f4>
80013262:	30 59       	mov	r9,5
80013264:	20 c2       	sub	r2,12
80013266:	e0 12 ff f8 	andl	r2,0xfff8
8001326a:	e6 02 00 08 	add	r8,r3,r2
8001326e:	91 29       	st.w	r8[0x8],r9
80013270:	91 19       	st.w	r8[0x4],r9
80013272:	66 18       	ld.w	r8,r3[0x4]
80013274:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80013278:	e5 e8 10 08 	or	r8,r2,r8
8001327c:	87 18       	st.w	r3[0x4],r8
8001327e:	58 f2       	cp.w	r2,15
80013280:	e0 88 00 07 	brls	8001328e <_malloc_r+0x3d6>
80013284:	e6 cb ff f8 	sub	r11,r3,-8
80013288:	0a 9c       	mov	r12,r5
8001328a:	fe b0 fb 71 	rcall	8001296c <_free_r>
8001328e:	e0 69 08 c4 	mov	r9,2244
80013292:	72 0a       	ld.w	r10,r9[0x0]
80013294:	e0 68 08 cc 	mov	r8,2252
80013298:	70 08       	ld.w	r8,r8[0x0]
8001329a:	14 38       	cp.w	r8,r10
8001329c:	f3 f8 ba 00 	st.whi	r9[0x0],r8
800132a0:	e0 69 08 c0 	mov	r9,2240
800132a4:	72 0a       	ld.w	r10,r9[0x0]
800132a6:	14 38       	cp.w	r8,r10
800132a8:	f3 f8 ba 00 	st.whi	r9[0x0],r8
800132ac:	68 28       	ld.w	r8,r4[0x8]
800132ae:	70 18       	ld.w	r8,r8[0x4]
800132b0:	e0 18 ff fc 	andl	r8,0xfffc
800132b4:	0e 38       	cp.w	r8,r7
800132b6:	5f 39       	srlo	r9
800132b8:	0e 18       	sub	r8,r7
800132ba:	58 f8       	cp.w	r8,15
800132bc:	5f aa       	srle	r10
800132be:	f5 e9 10 09 	or	r9,r10,r9
800132c2:	c0 50       	breq	800132cc <_malloc_r+0x414>
800132c4:	0a 9c       	mov	r12,r5
800132c6:	c3 cc       	rcall	8001333e <__malloc_unlock>
800132c8:	d8 3a       	popm	r0-r7,pc,r12=0
800132ca:	d7 03       	nop
800132cc:	68 26       	ld.w	r6,r4[0x8]
800132ce:	a1 a8       	sbr	r8,0x0
800132d0:	0e 99       	mov	r9,r7
800132d2:	a1 a9       	sbr	r9,0x0
800132d4:	8d 19       	st.w	r6[0x4],r9
800132d6:	ec 07 00 07 	add	r7,r6,r7
800132da:	0a 9c       	mov	r12,r5
800132dc:	89 27       	st.w	r4[0x8],r7
800132de:	8f 18       	st.w	r7[0x4],r8
800132e0:	c2 fc       	rcall	8001333e <__malloc_unlock>
800132e2:	ec cc ff f8 	sub	r12,r6,-8
800132e6:	d8 32       	popm	r0-r7,pc

800132e8 <memchr>:
800132e8:	f7 db c0 08 	bfextu	r11,r11,0x0,0x8
800132ec:	c0 68       	rjmp	800132f8 <memchr+0x10>
800132ee:	20 1a       	sub	r10,1
800132f0:	19 88       	ld.ub	r8,r12[0x0]
800132f2:	16 38       	cp.w	r8,r11
800132f4:	5e 0c       	reteq	r12
800132f6:	2f fc       	sub	r12,-1
800132f8:	58 0a       	cp.w	r10,0
800132fa:	cf a1       	brne	800132ee <memchr+0x6>
800132fc:	5e fa       	retal	r10

800132fe <memmove>:
800132fe:	d4 01       	pushm	lr
80013300:	18 3b       	cp.w	r11,r12
80013302:	c1 92       	brcc	80013334 <memmove+0x36>
80013304:	f6 0a 00 09 	add	r9,r11,r10
80013308:	12 3c       	cp.w	r12,r9
8001330a:	c1 52       	brcc	80013334 <memmove+0x36>
8001330c:	f8 0a 00 0b 	add	r11,r12,r10
80013310:	30 08       	mov	r8,0
80013312:	c0 68       	rjmp	8001331e <memmove+0x20>
80013314:	f2 08 07 0e 	ld.ub	lr,r9[r8]
80013318:	20 1a       	sub	r10,1
8001331a:	f6 08 0b 0e 	st.b	r11[r8],lr
8001331e:	20 18       	sub	r8,1
80013320:	58 0a       	cp.w	r10,0
80013322:	cf 91       	brne	80013314 <memmove+0x16>
80013324:	d8 02       	popm	pc
80013326:	f6 08 07 09 	ld.ub	r9,r11[r8]
8001332a:	20 1a       	sub	r10,1
8001332c:	f8 08 0b 09 	st.b	r12[r8],r9
80013330:	2f f8       	sub	r8,-1
80013332:	c0 28       	rjmp	80013336 <memmove+0x38>
80013334:	30 08       	mov	r8,0
80013336:	58 0a       	cp.w	r10,0
80013338:	cf 71       	brne	80013326 <memmove+0x28>
8001333a:	d8 02       	popm	pc

8001333c <__malloc_lock>:
8001333c:	5e fc       	retal	r12

8001333e <__malloc_unlock>:
8001333e:	5e fc       	retal	r12

80013340 <__hi0bits>:
80013340:	18 98       	mov	r8,r12
80013342:	e0 1c 00 00 	andl	r12,0x0
80013346:	f0 09 15 10 	lsl	r9,r8,0x10
8001334a:	58 0c       	cp.w	r12,0
8001334c:	f2 08 17 00 	moveq	r8,r9
80013350:	f9 bc 00 10 	moveq	r12,16
80013354:	f9 bc 01 00 	movne	r12,0
80013358:	10 9a       	mov	r10,r8
8001335a:	f0 09 15 08 	lsl	r9,r8,0x8
8001335e:	e6 1a ff 00 	andh	r10,0xff00,COH
80013362:	f7 bc 00 f8 	subeq	r12,-8
80013366:	f2 08 17 00 	moveq	r8,r9
8001336a:	10 9a       	mov	r10,r8
8001336c:	f0 09 15 04 	lsl	r9,r8,0x4
80013370:	e6 1a f0 00 	andh	r10,0xf000,COH
80013374:	f7 bc 00 fc 	subeq	r12,-4
80013378:	f2 08 17 00 	moveq	r8,r9
8001337c:	10 9a       	mov	r10,r8
8001337e:	f0 09 15 02 	lsl	r9,r8,0x2
80013382:	e6 1a c0 00 	andh	r10,0xc000,COH
80013386:	f7 bc 00 fe 	subeq	r12,-2
8001338a:	f2 08 17 00 	moveq	r8,r9
8001338e:	58 08       	cp.w	r8,0
80013390:	5e 5c       	retlt	r12
80013392:	ed b8 00 1e 	bld	r8,0x1e
80013396:	f9 bc 01 20 	movne	r12,32
8001339a:	f7 bc 00 ff 	subeq	r12,-1
8001339e:	5e fc       	retal	r12

800133a0 <__lo0bits>:
800133a0:	18 99       	mov	r9,r12
800133a2:	78 08       	ld.w	r8,r12[0x0]
800133a4:	f9 d8 c0 03 	bfextu	r12,r8,0x0,0x3
800133a8:	c1 50       	breq	800133d2 <__lo0bits+0x32>
800133aa:	ed b8 00 00 	bld	r8,0x0
800133ae:	c0 21       	brne	800133b2 <__lo0bits+0x12>
800133b0:	5e fd       	retal	0
800133b2:	10 9b       	mov	r11,r8
800133b4:	f0 0a 16 01 	lsr	r10,r8,0x1
800133b8:	e2 1b 00 02 	andl	r11,0x2,COH
800133bc:	a3 88       	lsr	r8,0x2
800133be:	58 0b       	cp.w	r11,0
800133c0:	f3 fa 1a 00 	st.wne	r9[0x0],r10
800133c4:	f9 bc 01 01 	movne	r12,1
800133c8:	f3 f8 0a 00 	st.weq	r9[0x0],r8
800133cc:	f9 bc 00 02 	moveq	r12,2
800133d0:	5e fc       	retal	r12
800133d2:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
800133d6:	f0 0b 16 10 	lsr	r11,r8,0x10
800133da:	58 0a       	cp.w	r10,0
800133dc:	f6 08 17 00 	moveq	r8,r11
800133e0:	f9 bc 00 10 	moveq	r12,16
800133e4:	f7 d8 c0 08 	bfextu	r11,r8,0x0,0x8
800133e8:	f0 0a 16 08 	lsr	r10,r8,0x8
800133ec:	58 0b       	cp.w	r11,0
800133ee:	f7 bc 00 f8 	subeq	r12,-8
800133f2:	f4 08 17 00 	moveq	r8,r10
800133f6:	f7 d8 c0 04 	bfextu	r11,r8,0x0,0x4
800133fa:	f0 0a 16 04 	lsr	r10,r8,0x4
800133fe:	58 0b       	cp.w	r11,0
80013400:	f7 bc 00 fc 	subeq	r12,-4
80013404:	f4 08 17 00 	moveq	r8,r10
80013408:	f7 d8 c0 02 	bfextu	r11,r8,0x0,0x2
8001340c:	f0 0a 16 02 	lsr	r10,r8,0x2
80013410:	58 0b       	cp.w	r11,0
80013412:	f7 bc 00 fe 	subeq	r12,-2
80013416:	f4 08 17 00 	moveq	r8,r10
8001341a:	ed b8 00 00 	bld	r8,0x0
8001341e:	c0 60       	breq	8001342a <__lo0bits+0x8a>
80013420:	a1 98       	lsr	r8,0x1
80013422:	c0 31       	brne	80013428 <__lo0bits+0x88>
80013424:	32 0c       	mov	r12,32
80013426:	5e fc       	retal	r12
80013428:	2f fc       	sub	r12,-1
8001342a:	93 08       	st.w	r9[0x0],r8
8001342c:	5e fc       	retal	r12

8001342e <__mcmp>:
8001342e:	d4 01       	pushm	lr
80013430:	18 98       	mov	r8,r12
80013432:	76 49       	ld.w	r9,r11[0x10]
80013434:	78 4c       	ld.w	r12,r12[0x10]
80013436:	12 1c       	sub	r12,r9
80013438:	c1 31       	brne	8001345e <__mcmp+0x30>
8001343a:	2f b9       	sub	r9,-5
8001343c:	a3 69       	lsl	r9,0x2
8001343e:	12 0b       	add	r11,r9
80013440:	f0 09 00 09 	add	r9,r8,r9
80013444:	2e c8       	sub	r8,-20
80013446:	13 4e       	ld.w	lr,--r9
80013448:	17 4a       	ld.w	r10,--r11
8001344a:	14 3e       	cp.w	lr,r10
8001344c:	c0 60       	breq	80013458 <__mcmp+0x2a>
8001344e:	f9 bc 03 ff 	movlo	r12,-1
80013452:	f9 bc 02 01 	movhs	r12,1
80013456:	d8 02       	popm	pc
80013458:	10 39       	cp.w	r9,r8
8001345a:	fe 9b ff f6 	brhi	80013446 <__mcmp+0x18>
8001345e:	d8 02       	popm	pc

80013460 <_Bfree>:
80013460:	d4 21       	pushm	r4-r7,lr
80013462:	18 97       	mov	r7,r12
80013464:	16 95       	mov	r5,r11
80013466:	78 96       	ld.w	r6,r12[0x24]
80013468:	58 06       	cp.w	r6,0
8001346a:	c0 91       	brne	8001347c <_Bfree+0x1c>
8001346c:	31 0c       	mov	r12,16
8001346e:	fe b0 fd 1d 	rcall	80012ea8 <malloc>
80013472:	99 36       	st.w	r12[0xc],r6
80013474:	8f 9c       	st.w	r7[0x24],r12
80013476:	99 16       	st.w	r12[0x4],r6
80013478:	99 26       	st.w	r12[0x8],r6
8001347a:	99 06       	st.w	r12[0x0],r6
8001347c:	58 05       	cp.w	r5,0
8001347e:	c0 90       	breq	80013490 <_Bfree+0x30>
80013480:	6a 19       	ld.w	r9,r5[0x4]
80013482:	6e 98       	ld.w	r8,r7[0x24]
80013484:	70 38       	ld.w	r8,r8[0xc]
80013486:	f0 09 03 2a 	ld.w	r10,r8[r9<<0x2]
8001348a:	8b 0a       	st.w	r5[0x0],r10
8001348c:	f0 09 09 25 	st.w	r8[r9<<0x2],r5
80013490:	d8 22       	popm	r4-r7,pc
80013492:	d7 03       	nop

80013494 <_Balloc>:
80013494:	d4 21       	pushm	r4-r7,lr
80013496:	18 97       	mov	r7,r12
80013498:	16 96       	mov	r6,r11
8001349a:	78 95       	ld.w	r5,r12[0x24]
8001349c:	58 05       	cp.w	r5,0
8001349e:	c0 91       	brne	800134b0 <_Balloc+0x1c>
800134a0:	31 0c       	mov	r12,16
800134a2:	fe b0 fd 03 	rcall	80012ea8 <malloc>
800134a6:	99 35       	st.w	r12[0xc],r5
800134a8:	8f 9c       	st.w	r7[0x24],r12
800134aa:	99 15       	st.w	r12[0x4],r5
800134ac:	99 25       	st.w	r12[0x8],r5
800134ae:	99 05       	st.w	r12[0x0],r5
800134b0:	6e 95       	ld.w	r5,r7[0x24]
800134b2:	6a 38       	ld.w	r8,r5[0xc]
800134b4:	58 08       	cp.w	r8,0
800134b6:	c0 b1       	brne	800134cc <_Balloc+0x38>
800134b8:	31 0a       	mov	r10,16
800134ba:	30 4b       	mov	r11,4
800134bc:	0e 9c       	mov	r12,r7
800134be:	e0 a0 04 93 	rcall	80013de4 <_calloc_r>
800134c2:	8b 3c       	st.w	r5[0xc],r12
800134c4:	6e 98       	ld.w	r8,r7[0x24]
800134c6:	70 3c       	ld.w	r12,r8[0xc]
800134c8:	58 0c       	cp.w	r12,0
800134ca:	c1 b0       	breq	80013500 <_Balloc+0x6c>
800134cc:	6e 98       	ld.w	r8,r7[0x24]
800134ce:	70 38       	ld.w	r8,r8[0xc]
800134d0:	f0 06 00 28 	add	r8,r8,r6<<0x2
800134d4:	70 0c       	ld.w	r12,r8[0x0]
800134d6:	58 0c       	cp.w	r12,0
800134d8:	c0 40       	breq	800134e0 <_Balloc+0x4c>
800134da:	78 09       	ld.w	r9,r12[0x0]
800134dc:	91 09       	st.w	r8[0x0],r9
800134de:	c0 e8       	rjmp	800134fa <_Balloc+0x66>
800134e0:	0e 9c       	mov	r12,r7
800134e2:	30 17       	mov	r7,1
800134e4:	0e 9b       	mov	r11,r7
800134e6:	ee 06 09 47 	lsl	r7,r7,r6
800134ea:	ee ca ff fb 	sub	r10,r7,-5
800134ee:	a3 6a       	lsl	r10,0x2
800134f0:	e0 a0 04 7a 	rcall	80013de4 <_calloc_r>
800134f4:	c0 60       	breq	80013500 <_Balloc+0x6c>
800134f6:	99 16       	st.w	r12[0x4],r6
800134f8:	99 27       	st.w	r12[0x8],r7
800134fa:	30 08       	mov	r8,0
800134fc:	99 38       	st.w	r12[0xc],r8
800134fe:	99 48       	st.w	r12[0x10],r8
80013500:	d8 22       	popm	r4-r7,pc
80013502:	d7 03       	nop

80013504 <__d2b>:
80013504:	d4 31       	pushm	r0-r7,lr
80013506:	20 2d       	sub	sp,8
80013508:	16 93       	mov	r3,r11
8001350a:	12 96       	mov	r6,r9
8001350c:	10 95       	mov	r5,r8
8001350e:	14 92       	mov	r2,r10
80013510:	30 1b       	mov	r11,1
80013512:	cc 1f       	rcall	80013494 <_Balloc>
80013514:	f3 d3 c0 14 	bfextu	r9,r3,0x0,0x14
80013518:	50 09       	stdsp	sp[0x0],r9
8001351a:	f1 d3 c0 1f 	bfextu	r8,r3,0x0,0x1f
8001351e:	b5 a9       	sbr	r9,0x14
80013520:	f0 01 16 14 	lsr	r1,r8,0x14
80013524:	fb f9 1a 00 	st.wne	sp[0x0],r9
80013528:	18 94       	mov	r4,r12
8001352a:	58 02       	cp.w	r2,0
8001352c:	c1 d0       	breq	80013566 <__d2b+0x62>
8001352e:	fa cc ff f8 	sub	r12,sp,-8
80013532:	18 d2       	st.w	--r12,r2
80013534:	c3 6f       	rcall	800133a0 <__lo0bits>
80013536:	40 18       	lddsp	r8,sp[0x4]
80013538:	c0 d0       	breq	80013552 <__d2b+0x4e>
8001353a:	40 09       	lddsp	r9,sp[0x0]
8001353c:	f8 0a 11 20 	rsub	r10,r12,32
80013540:	f2 0a 09 4a 	lsl	r10,r9,r10
80013544:	f5 e8 10 08 	or	r8,r10,r8
80013548:	89 58       	st.w	r4[0x14],r8
8001354a:	f2 0c 0a 49 	lsr	r9,r9,r12
8001354e:	50 09       	stdsp	sp[0x0],r9
80013550:	c0 28       	rjmp	80013554 <__d2b+0x50>
80013552:	89 58       	st.w	r4[0x14],r8
80013554:	40 08       	lddsp	r8,sp[0x0]
80013556:	58 08       	cp.w	r8,0
80013558:	f9 b3 01 02 	movne	r3,2
8001355c:	f9 b3 00 01 	moveq	r3,1
80013560:	89 68       	st.w	r4[0x18],r8
80013562:	89 43       	st.w	r4[0x10],r3
80013564:	c0 88       	rjmp	80013574 <__d2b+0x70>
80013566:	1a 9c       	mov	r12,sp
80013568:	c1 cf       	rcall	800133a0 <__lo0bits>
8001356a:	30 13       	mov	r3,1
8001356c:	40 08       	lddsp	r8,sp[0x0]
8001356e:	2e 0c       	sub	r12,-32
80013570:	89 43       	st.w	r4[0x10],r3
80013572:	89 58       	st.w	r4[0x14],r8
80013574:	58 01       	cp.w	r1,0
80013576:	c0 90       	breq	80013588 <__d2b+0x84>
80013578:	e2 c1 04 33 	sub	r1,r1,1075
8001357c:	18 01       	add	r1,r12
8001357e:	8d 01       	st.w	r6[0x0],r1
80013580:	f8 0c 11 35 	rsub	r12,r12,53
80013584:	8b 0c       	st.w	r5[0x0],r12
80013586:	c0 c8       	rjmp	8001359e <__d2b+0x9a>
80013588:	e6 c8 ff fc 	sub	r8,r3,-4
8001358c:	f8 cc 04 32 	sub	r12,r12,1074
80013590:	a5 73       	lsl	r3,0x5
80013592:	8d 0c       	st.w	r6[0x0],r12
80013594:	e8 08 03 2c 	ld.w	r12,r4[r8<<0x2]
80013598:	cd 4e       	rcall	80013340 <__hi0bits>
8001359a:	18 13       	sub	r3,r12
8001359c:	8b 03       	st.w	r5[0x0],r3
8001359e:	08 9c       	mov	r12,r4
800135a0:	2f ed       	sub	sp,-8
800135a2:	d8 32       	popm	r0-r7,pc

800135a4 <__mdiff>:
800135a4:	d4 31       	pushm	r0-r7,lr
800135a6:	74 48       	ld.w	r8,r10[0x10]
800135a8:	76 45       	ld.w	r5,r11[0x10]
800135aa:	16 97       	mov	r7,r11
800135ac:	14 96       	mov	r6,r10
800135ae:	10 15       	sub	r5,r8
800135b0:	c1 31       	brne	800135d6 <__mdiff+0x32>
800135b2:	2f b8       	sub	r8,-5
800135b4:	ee ce ff ec 	sub	lr,r7,-20
800135b8:	a3 68       	lsl	r8,0x2
800135ba:	f4 08 00 0b 	add	r11,r10,r8
800135be:	ee 08 00 08 	add	r8,r7,r8
800135c2:	11 4a       	ld.w	r10,--r8
800135c4:	17 49       	ld.w	r9,--r11
800135c6:	12 3a       	cp.w	r10,r9
800135c8:	c0 30       	breq	800135ce <__mdiff+0x2a>
800135ca:	c0 e2       	brcc	800135e6 <__mdiff+0x42>
800135cc:	c0 78       	rjmp	800135da <__mdiff+0x36>
800135ce:	1c 38       	cp.w	r8,lr
800135d0:	fe 9b ff f9 	brhi	800135c2 <__mdiff+0x1e>
800135d4:	c4 98       	rjmp	80013666 <__mdiff+0xc2>
800135d6:	58 05       	cp.w	r5,0
800135d8:	c0 64       	brge	800135e4 <__mdiff+0x40>
800135da:	0e 98       	mov	r8,r7
800135dc:	30 15       	mov	r5,1
800135de:	0c 97       	mov	r7,r6
800135e0:	10 96       	mov	r6,r8
800135e2:	c0 28       	rjmp	800135e6 <__mdiff+0x42>
800135e4:	30 05       	mov	r5,0
800135e6:	6e 1b       	ld.w	r11,r7[0x4]
800135e8:	c5 6f       	rcall	80013494 <_Balloc>
800135ea:	6e 49       	ld.w	r9,r7[0x10]
800135ec:	6c 44       	ld.w	r4,r6[0x10]
800135ee:	99 35       	st.w	r12[0xc],r5
800135f0:	2f b4       	sub	r4,-5
800135f2:	f2 c5 ff fb 	sub	r5,r9,-5
800135f6:	ec 04 00 24 	add	r4,r6,r4<<0x2
800135fa:	ee 05 00 25 	add	r5,r7,r5<<0x2
800135fe:	2e c6       	sub	r6,-20
80013600:	2e c7       	sub	r7,-20
80013602:	f8 c8 ff ec 	sub	r8,r12,-20
80013606:	30 0a       	mov	r10,0
80013608:	0f 0e       	ld.w	lr,r7++
8001360a:	0d 0b       	ld.w	r11,r6++
8001360c:	fc 02 16 10 	lsr	r2,lr,0x10
80013610:	f6 03 16 10 	lsr	r3,r11,0x10
80013614:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
80013618:	e4 03 01 03 	sub	r3,r2,r3
8001361c:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
80013620:	fc 0b 01 0b 	sub	r11,lr,r11
80013624:	f6 0a 00 0a 	add	r10,r11,r10
80013628:	b0 1a       	st.h	r8[0x2],r10
8001362a:	b1 4a       	asr	r10,0x10
8001362c:	e6 0a 00 0a 	add	r10,r3,r10
80013630:	b0 0a       	st.h	r8[0x0],r10
80013632:	2f c8       	sub	r8,-4
80013634:	b1 4a       	asr	r10,0x10
80013636:	08 36       	cp.w	r6,r4
80013638:	ce 83       	brcs	80013608 <__mdiff+0x64>
8001363a:	c0 d8       	rjmp	80013654 <__mdiff+0xb0>
8001363c:	0f 0b       	ld.w	r11,r7++
8001363e:	f6 0e 16 10 	lsr	lr,r11,0x10
80013642:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
80013646:	16 0a       	add	r10,r11
80013648:	b0 1a       	st.h	r8[0x2],r10
8001364a:	b1 4a       	asr	r10,0x10
8001364c:	1c 0a       	add	r10,lr
8001364e:	b0 0a       	st.h	r8[0x0],r10
80013650:	2f c8       	sub	r8,-4
80013652:	b1 4a       	asr	r10,0x10
80013654:	0a 37       	cp.w	r7,r5
80013656:	cf 33       	brcs	8001363c <__mdiff+0x98>
80013658:	c0 28       	rjmp	8001365c <__mdiff+0xb8>
8001365a:	20 19       	sub	r9,1
8001365c:	11 4a       	ld.w	r10,--r8
8001365e:	58 0a       	cp.w	r10,0
80013660:	cf d0       	breq	8001365a <__mdiff+0xb6>
80013662:	99 49       	st.w	r12[0x10],r9
80013664:	d8 32       	popm	r0-r7,pc
80013666:	30 0b       	mov	r11,0
80013668:	c1 6f       	rcall	80013494 <_Balloc>
8001366a:	30 18       	mov	r8,1
8001366c:	99 48       	st.w	r12[0x10],r8
8001366e:	30 08       	mov	r8,0
80013670:	99 58       	st.w	r12[0x14],r8
80013672:	d8 32       	popm	r0-r7,pc

80013674 <__lshift>:
80013674:	d4 31       	pushm	r0-r7,lr
80013676:	16 97       	mov	r7,r11
80013678:	76 46       	ld.w	r6,r11[0x10]
8001367a:	f4 02 14 05 	asr	r2,r10,0x5
8001367e:	2f f6       	sub	r6,-1
80013680:	14 93       	mov	r3,r10
80013682:	18 94       	mov	r4,r12
80013684:	04 06       	add	r6,r2
80013686:	76 1b       	ld.w	r11,r11[0x4]
80013688:	6e 28       	ld.w	r8,r7[0x8]
8001368a:	c0 38       	rjmp	80013690 <__lshift+0x1c>
8001368c:	2f fb       	sub	r11,-1
8001368e:	a1 78       	lsl	r8,0x1
80013690:	10 36       	cp.w	r6,r8
80013692:	fe 99 ff fd 	brgt	8001368c <__lshift+0x18>
80013696:	08 9c       	mov	r12,r4
80013698:	cf ee       	rcall	80013494 <_Balloc>
8001369a:	30 09       	mov	r9,0
8001369c:	18 95       	mov	r5,r12
8001369e:	f8 c8 ff ec 	sub	r8,r12,-20
800136a2:	12 9a       	mov	r10,r9
800136a4:	c0 38       	rjmp	800136aa <__lshift+0x36>
800136a6:	10 aa       	st.w	r8++,r10
800136a8:	2f f9       	sub	r9,-1
800136aa:	04 39       	cp.w	r9,r2
800136ac:	cf d5       	brlt	800136a6 <__lshift+0x32>
800136ae:	6e 4b       	ld.w	r11,r7[0x10]
800136b0:	e7 d3 c0 05 	bfextu	r3,r3,0x0,0x5
800136b4:	2f bb       	sub	r11,-5
800136b6:	ee c9 ff ec 	sub	r9,r7,-20
800136ba:	ee 0b 00 2b 	add	r11,r7,r11<<0x2
800136be:	58 03       	cp.w	r3,0
800136c0:	c1 30       	breq	800136e6 <__lshift+0x72>
800136c2:	e6 0c 11 20 	rsub	r12,r3,32
800136c6:	30 0a       	mov	r10,0
800136c8:	72 02       	ld.w	r2,r9[0x0]
800136ca:	e4 03 09 42 	lsl	r2,r2,r3
800136ce:	04 4a       	or	r10,r2
800136d0:	10 aa       	st.w	r8++,r10
800136d2:	13 0a       	ld.w	r10,r9++
800136d4:	f4 0c 0a 4a 	lsr	r10,r10,r12
800136d8:	16 39       	cp.w	r9,r11
800136da:	cf 73       	brcs	800136c8 <__lshift+0x54>
800136dc:	91 0a       	st.w	r8[0x0],r10
800136de:	58 0a       	cp.w	r10,0
800136e0:	c0 70       	breq	800136ee <__lshift+0x7a>
800136e2:	2f f6       	sub	r6,-1
800136e4:	c0 58       	rjmp	800136ee <__lshift+0x7a>
800136e6:	13 0a       	ld.w	r10,r9++
800136e8:	10 aa       	st.w	r8++,r10
800136ea:	16 39       	cp.w	r9,r11
800136ec:	cf d3       	brcs	800136e6 <__lshift+0x72>
800136ee:	08 9c       	mov	r12,r4
800136f0:	20 16       	sub	r6,1
800136f2:	0e 9b       	mov	r11,r7
800136f4:	8b 46       	st.w	r5[0x10],r6
800136f6:	cb 5e       	rcall	80013460 <_Bfree>
800136f8:	0a 9c       	mov	r12,r5
800136fa:	d8 32       	popm	r0-r7,pc

800136fc <__multiply>:
800136fc:	d4 31       	pushm	r0-r7,lr
800136fe:	20 2d       	sub	sp,8
80013700:	76 49       	ld.w	r9,r11[0x10]
80013702:	74 48       	ld.w	r8,r10[0x10]
80013704:	16 96       	mov	r6,r11
80013706:	14 95       	mov	r5,r10
80013708:	10 39       	cp.w	r9,r8
8001370a:	ec 08 17 50 	movlt	r8,r6
8001370e:	ea 06 17 50 	movlt	r6,r5
80013712:	f0 05 17 50 	movlt	r5,r8
80013716:	6c 28       	ld.w	r8,r6[0x8]
80013718:	76 43       	ld.w	r3,r11[0x10]
8001371a:	74 42       	ld.w	r2,r10[0x10]
8001371c:	76 1b       	ld.w	r11,r11[0x4]
8001371e:	e4 03 00 07 	add	r7,r2,r3
80013722:	10 37       	cp.w	r7,r8
80013724:	f7 bb 09 ff 	subgt	r11,-1
80013728:	cb 6e       	rcall	80013494 <_Balloc>
8001372a:	ee c4 ff fb 	sub	r4,r7,-5
8001372e:	f8 c9 ff ec 	sub	r9,r12,-20
80013732:	f8 04 00 24 	add	r4,r12,r4<<0x2
80013736:	30 0a       	mov	r10,0
80013738:	12 98       	mov	r8,r9
8001373a:	c0 28       	rjmp	8001373e <__multiply+0x42>
8001373c:	10 aa       	st.w	r8++,r10
8001373e:	08 38       	cp.w	r8,r4
80013740:	cf e3       	brcs	8001373c <__multiply+0x40>
80013742:	2f b3       	sub	r3,-5
80013744:	2f b2       	sub	r2,-5
80013746:	ec 03 00 23 	add	r3,r6,r3<<0x2
8001374a:	ea 02 00 22 	add	r2,r5,r2<<0x2
8001374e:	ec cb ff ec 	sub	r11,r6,-20
80013752:	50 12       	stdsp	sp[0x4],r2
80013754:	ea ca ff ec 	sub	r10,r5,-20
80013758:	c4 48       	rjmp	800137e0 <__multiply+0xe4>
8001375a:	94 95       	ld.uh	r5,r10[0x2]
8001375c:	58 05       	cp.w	r5,0
8001375e:	c2 00       	breq	8001379e <__multiply+0xa2>
80013760:	12 98       	mov	r8,r9
80013762:	16 96       	mov	r6,r11
80013764:	30 0e       	mov	lr,0
80013766:	50 09       	stdsp	sp[0x0],r9
80013768:	0d 02       	ld.w	r2,r6++
8001376a:	e4 00 16 10 	lsr	r0,r2,0x10
8001376e:	70 01       	ld.w	r1,r8[0x0]
80013770:	70 09       	ld.w	r9,r8[0x0]
80013772:	b1 81       	lsr	r1,0x10
80013774:	e5 d2 c0 10 	bfextu	r2,r2,0x0,0x10
80013778:	e0 05 03 41 	mac	r1,r0,r5
8001377c:	ab 32       	mul	r2,r5
8001377e:	e1 d9 c0 10 	bfextu	r0,r9,0x0,0x10
80013782:	00 02       	add	r2,r0
80013784:	e4 0e 00 0e 	add	lr,r2,lr
80013788:	b0 1e       	st.h	r8[0x2],lr
8001378a:	b1 8e       	lsr	lr,0x10
8001378c:	1c 01       	add	r1,lr
8001378e:	b0 01       	st.h	r8[0x0],r1
80013790:	e2 0e 16 10 	lsr	lr,r1,0x10
80013794:	2f c8       	sub	r8,-4
80013796:	06 36       	cp.w	r6,r3
80013798:	ce 83       	brcs	80013768 <__multiply+0x6c>
8001379a:	40 09       	lddsp	r9,sp[0x0]
8001379c:	91 0e       	st.w	r8[0x0],lr
8001379e:	94 86       	ld.uh	r6,r10[0x0]
800137a0:	58 06       	cp.w	r6,0
800137a2:	c1 d0       	breq	800137dc <__multiply+0xe0>
800137a4:	72 02       	ld.w	r2,r9[0x0]
800137a6:	12 98       	mov	r8,r9
800137a8:	16 9e       	mov	lr,r11
800137aa:	30 05       	mov	r5,0
800137ac:	b0 12       	st.h	r8[0x2],r2
800137ae:	1d 01       	ld.w	r1,lr++
800137b0:	90 82       	ld.uh	r2,r8[0x0]
800137b2:	e1 d1 c0 10 	bfextu	r0,r1,0x0,0x10
800137b6:	ad 30       	mul	r0,r6
800137b8:	e0 02 00 02 	add	r2,r0,r2
800137bc:	e4 05 00 05 	add	r5,r2,r5
800137c0:	b0 05       	st.h	r8[0x0],r5
800137c2:	b1 85       	lsr	r5,0x10
800137c4:	b1 81       	lsr	r1,0x10
800137c6:	2f c8       	sub	r8,-4
800137c8:	ad 31       	mul	r1,r6
800137ca:	90 92       	ld.uh	r2,r8[0x2]
800137cc:	e2 02 00 02 	add	r2,r1,r2
800137d0:	0a 02       	add	r2,r5
800137d2:	e4 05 16 10 	lsr	r5,r2,0x10
800137d6:	06 3e       	cp.w	lr,r3
800137d8:	ce a3       	brcs	800137ac <__multiply+0xb0>
800137da:	91 02       	st.w	r8[0x0],r2
800137dc:	2f ca       	sub	r10,-4
800137de:	2f c9       	sub	r9,-4
800137e0:	40 18       	lddsp	r8,sp[0x4]
800137e2:	10 3a       	cp.w	r10,r8
800137e4:	cb b3       	brcs	8001375a <__multiply+0x5e>
800137e6:	c0 28       	rjmp	800137ea <__multiply+0xee>
800137e8:	20 17       	sub	r7,1
800137ea:	58 07       	cp.w	r7,0
800137ec:	e0 8a 00 05 	brle	800137f6 <__multiply+0xfa>
800137f0:	09 48       	ld.w	r8,--r4
800137f2:	58 08       	cp.w	r8,0
800137f4:	cf a0       	breq	800137e8 <__multiply+0xec>
800137f6:	99 47       	st.w	r12[0x10],r7
800137f8:	2f ed       	sub	sp,-8
800137fa:	d8 32       	popm	r0-r7,pc

800137fc <__i2b>:
800137fc:	d4 21       	pushm	r4-r7,lr
800137fe:	16 97       	mov	r7,r11
80013800:	30 1b       	mov	r11,1
80013802:	c4 9e       	rcall	80013494 <_Balloc>
80013804:	30 19       	mov	r9,1
80013806:	99 57       	st.w	r12[0x14],r7
80013808:	99 49       	st.w	r12[0x10],r9
8001380a:	d8 22       	popm	r4-r7,pc

8001380c <__multadd>:
8001380c:	d4 31       	pushm	r0-r7,lr
8001380e:	30 08       	mov	r8,0
80013810:	12 95       	mov	r5,r9
80013812:	16 97       	mov	r7,r11
80013814:	18 96       	mov	r6,r12
80013816:	76 44       	ld.w	r4,r11[0x10]
80013818:	f6 c9 ff ec 	sub	r9,r11,-20
8001381c:	72 0b       	ld.w	r11,r9[0x0]
8001381e:	f6 0c 16 10 	lsr	r12,r11,0x10
80013822:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
80013826:	f4 0c 02 4c 	mul	r12,r10,r12
8001382a:	f4 0b 03 45 	mac	r5,r10,r11
8001382e:	f7 d5 c0 10 	bfextu	r11,r5,0x0,0x10
80013832:	b1 85       	lsr	r5,0x10
80013834:	18 05       	add	r5,r12
80013836:	ea 0c 15 10 	lsl	r12,r5,0x10
8001383a:	f8 0b 00 0b 	add	r11,r12,r11
8001383e:	12 ab       	st.w	r9++,r11
80013840:	2f f8       	sub	r8,-1
80013842:	b1 85       	lsr	r5,0x10
80013844:	08 38       	cp.w	r8,r4
80013846:	ce b5       	brlt	8001381c <__multadd+0x10>
80013848:	58 05       	cp.w	r5,0
8001384a:	c1 c0       	breq	80013882 <__multadd+0x76>
8001384c:	6e 28       	ld.w	r8,r7[0x8]
8001384e:	10 34       	cp.w	r4,r8
80013850:	c1 35       	brlt	80013876 <__multadd+0x6a>
80013852:	6e 1b       	ld.w	r11,r7[0x4]
80013854:	0c 9c       	mov	r12,r6
80013856:	2f fb       	sub	r11,-1
80013858:	c1 ee       	rcall	80013494 <_Balloc>
8001385a:	6e 4a       	ld.w	r10,r7[0x10]
8001385c:	ee cb ff f4 	sub	r11,r7,-12
80013860:	18 93       	mov	r3,r12
80013862:	2f ea       	sub	r10,-2
80013864:	2f 4c       	sub	r12,-12
80013866:	a3 6a       	lsl	r10,0x2
80013868:	fe b0 dd e9 	rcall	8000f43a <memcpy>
8001386c:	0e 9b       	mov	r11,r7
8001386e:	0c 9c       	mov	r12,r6
80013870:	fe b0 fd f8 	rcall	80013460 <_Bfree>
80013874:	06 97       	mov	r7,r3
80013876:	e8 c8 ff ff 	sub	r8,r4,-1
8001387a:	2f b4       	sub	r4,-5
8001387c:	8f 48       	st.w	r7[0x10],r8
8001387e:	ee 04 09 25 	st.w	r7[r4<<0x2],r5
80013882:	0e 9c       	mov	r12,r7
80013884:	d8 32       	popm	r0-r7,pc
80013886:	d7 03       	nop

80013888 <__pow5mult>:
80013888:	d4 31       	pushm	r0-r7,lr
8001388a:	14 96       	mov	r6,r10
8001388c:	18 97       	mov	r7,r12
8001388e:	16 94       	mov	r4,r11
80013890:	f1 da c0 02 	bfextu	r8,r10,0x0,0x2
80013894:	c0 90       	breq	800138a6 <__pow5mult+0x1e>
80013896:	20 18       	sub	r8,1
80013898:	fe c9 e2 fc 	sub	r9,pc,-7428
8001389c:	f2 08 03 2a 	ld.w	r10,r9[r8<<0x2]
800138a0:	30 09       	mov	r9,0
800138a2:	cb 5f       	rcall	8001380c <__multadd>
800138a4:	18 94       	mov	r4,r12
800138a6:	a3 46       	asr	r6,0x2
800138a8:	c3 40       	breq	80013910 <__pow5mult+0x88>
800138aa:	6e 95       	ld.w	r5,r7[0x24]
800138ac:	58 05       	cp.w	r5,0
800138ae:	c0 91       	brne	800138c0 <__pow5mult+0x38>
800138b0:	31 0c       	mov	r12,16
800138b2:	fe b0 fa fb 	rcall	80012ea8 <malloc>
800138b6:	99 35       	st.w	r12[0xc],r5
800138b8:	8f 9c       	st.w	r7[0x24],r12
800138ba:	99 15       	st.w	r12[0x4],r5
800138bc:	99 25       	st.w	r12[0x8],r5
800138be:	99 05       	st.w	r12[0x0],r5
800138c0:	6e 93       	ld.w	r3,r7[0x24]
800138c2:	66 25       	ld.w	r5,r3[0x8]
800138c4:	58 05       	cp.w	r5,0
800138c6:	c0 c1       	brne	800138de <__pow5mult+0x56>
800138c8:	e0 6b 02 71 	mov	r11,625
800138cc:	0e 9c       	mov	r12,r7
800138ce:	c9 7f       	rcall	800137fc <__i2b>
800138d0:	87 2c       	st.w	r3[0x8],r12
800138d2:	30 08       	mov	r8,0
800138d4:	18 95       	mov	r5,r12
800138d6:	99 08       	st.w	r12[0x0],r8
800138d8:	c0 38       	rjmp	800138de <__pow5mult+0x56>
800138da:	06 9c       	mov	r12,r3
800138dc:	18 95       	mov	r5,r12
800138de:	ed b6 00 00 	bld	r6,0x0
800138e2:	c0 b1       	brne	800138f8 <__pow5mult+0x70>
800138e4:	08 9b       	mov	r11,r4
800138e6:	0a 9a       	mov	r10,r5
800138e8:	0e 9c       	mov	r12,r7
800138ea:	c0 9f       	rcall	800136fc <__multiply>
800138ec:	08 9b       	mov	r11,r4
800138ee:	18 93       	mov	r3,r12
800138f0:	0e 9c       	mov	r12,r7
800138f2:	06 94       	mov	r4,r3
800138f4:	fe b0 fd b6 	rcall	80013460 <_Bfree>
800138f8:	a1 56       	asr	r6,0x1
800138fa:	c0 b0       	breq	80013910 <__pow5mult+0x88>
800138fc:	6a 03       	ld.w	r3,r5[0x0]
800138fe:	58 03       	cp.w	r3,0
80013900:	ce d1       	brne	800138da <__pow5mult+0x52>
80013902:	0a 9a       	mov	r10,r5
80013904:	0a 9b       	mov	r11,r5
80013906:	0e 9c       	mov	r12,r7
80013908:	cf ae       	rcall	800136fc <__multiply>
8001390a:	8b 0c       	st.w	r5[0x0],r12
8001390c:	99 03       	st.w	r12[0x0],r3
8001390e:	ce 7b       	rjmp	800138dc <__pow5mult+0x54>
80013910:	08 9c       	mov	r12,r4
80013912:	d8 32       	popm	r0-r7,pc

80013914 <_realloc_r>:
80013914:	d4 31       	pushm	r0-r7,lr
80013916:	20 1d       	sub	sp,4
80013918:	16 94       	mov	r4,r11
8001391a:	18 92       	mov	r2,r12
8001391c:	14 9b       	mov	r11,r10
8001391e:	58 04       	cp.w	r4,0
80013920:	c0 51       	brne	8001392a <_realloc_r+0x16>
80013922:	fe b0 fa cb 	rcall	80012eb8 <_malloc_r>
80013926:	18 95       	mov	r5,r12
80013928:	c5 39       	rjmp	80013bce <_realloc_r+0x2ba>
8001392a:	50 0a       	stdsp	sp[0x0],r10
8001392c:	fe b0 fd 08 	rcall	8001333c <__malloc_lock>
80013930:	40 0b       	lddsp	r11,sp[0x0]
80013932:	f6 c8 ff f5 	sub	r8,r11,-11
80013936:	e8 c1 00 08 	sub	r1,r4,8
8001393a:	10 96       	mov	r6,r8
8001393c:	62 1c       	ld.w	r12,r1[0x4]
8001393e:	e0 16 ff f8 	andl	r6,0xfff8
80013942:	59 68       	cp.w	r8,22
80013944:	f9 b6 08 10 	movls	r6,16
80013948:	16 36       	cp.w	r6,r11
8001394a:	5f 38       	srlo	r8
8001394c:	f1 e6 13 f8 	or	r8,r8,r6>>0x1f
80013950:	c0 50       	breq	8001395a <_realloc_r+0x46>
80013952:	30 c8       	mov	r8,12
80013954:	30 05       	mov	r5,0
80013956:	85 38       	st.w	r2[0xc],r8
80013958:	c3 b9       	rjmp	80013bce <_realloc_r+0x2ba>
8001395a:	18 90       	mov	r0,r12
8001395c:	e0 10 ff fc 	andl	r0,0xfffc
80013960:	0c 30       	cp.w	r0,r6
80013962:	e0 84 01 0b 	brge	80013b78 <_realloc_r+0x264>
80013966:	e0 68 01 d4 	mov	r8,468
8001396a:	e2 00 00 09 	add	r9,r1,r0
8001396e:	70 25       	ld.w	r5,r8[0x8]
80013970:	0a 39       	cp.w	r9,r5
80013972:	c0 90       	breq	80013984 <_realloc_r+0x70>
80013974:	72 1a       	ld.w	r10,r9[0x4]
80013976:	a1 ca       	cbr	r10,0x0
80013978:	f2 0a 00 0a 	add	r10,r9,r10
8001397c:	74 1a       	ld.w	r10,r10[0x4]
8001397e:	ed ba 00 00 	bld	r10,0x0
80013982:	c2 20       	breq	800139c6 <_realloc_r+0xb2>
80013984:	72 1a       	ld.w	r10,r9[0x4]
80013986:	e0 1a ff fc 	andl	r10,0xfffc
8001398a:	f4 00 00 03 	add	r3,r10,r0
8001398e:	0a 39       	cp.w	r9,r5
80013990:	c1 31       	brne	800139b6 <_realloc_r+0xa2>
80013992:	ec c7 ff f0 	sub	r7,r6,-16
80013996:	0e 33       	cp.w	r3,r7
80013998:	c1 95       	brlt	800139ca <_realloc_r+0xb6>
8001399a:	e2 06 00 09 	add	r9,r1,r6
8001399e:	0c 13       	sub	r3,r6
800139a0:	a1 a3       	sbr	r3,0x0
800139a2:	93 13       	st.w	r9[0x4],r3
800139a4:	91 29       	st.w	r8[0x8],r9
800139a6:	04 9c       	mov	r12,r2
800139a8:	62 18       	ld.w	r8,r1[0x4]
800139aa:	08 95       	mov	r5,r4
800139ac:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800139b0:	10 46       	or	r6,r8
800139b2:	83 16       	st.w	r1[0x4],r6
800139b4:	c0 b9       	rjmp	80013bca <_realloc_r+0x2b6>
800139b6:	0c 33       	cp.w	r3,r6
800139b8:	c0 95       	brlt	800139ca <_realloc_r+0xb6>
800139ba:	72 28       	ld.w	r8,r9[0x8]
800139bc:	02 97       	mov	r7,r1
800139be:	72 39       	ld.w	r9,r9[0xc]
800139c0:	93 28       	st.w	r9[0x8],r8
800139c2:	91 39       	st.w	r8[0xc],r9
800139c4:	cd c8       	rjmp	80013b7c <_realloc_r+0x268>
800139c6:	30 0a       	mov	r10,0
800139c8:	14 99       	mov	r9,r10
800139ca:	ed bc 00 00 	bld	r12,0x0
800139ce:	e0 80 00 95 	breq	80013af8 <_realloc_r+0x1e4>
800139d2:	62 07       	ld.w	r7,r1[0x0]
800139d4:	e2 07 01 07 	sub	r7,r1,r7
800139d8:	6e 1c       	ld.w	r12,r7[0x4]
800139da:	e0 1c ff fc 	andl	r12,0xfffc
800139de:	58 09       	cp.w	r9,0
800139e0:	c5 60       	breq	80013a8c <_realloc_r+0x178>
800139e2:	f8 00 00 03 	add	r3,r12,r0
800139e6:	0a 39       	cp.w	r9,r5
800139e8:	c4 81       	brne	80013a78 <_realloc_r+0x164>
800139ea:	14 03       	add	r3,r10
800139ec:	ec c9 ff f0 	sub	r9,r6,-16
800139f0:	12 33       	cp.w	r3,r9
800139f2:	c4 d5       	brlt	80013a8c <_realloc_r+0x178>
800139f4:	6e 3a       	ld.w	r10,r7[0xc]
800139f6:	6e 29       	ld.w	r9,r7[0x8]
800139f8:	95 29       	st.w	r10[0x8],r9
800139fa:	93 3a       	st.w	r9[0xc],r10
800139fc:	ee c5 ff f8 	sub	r5,r7,-8
80013a00:	e0 ca 00 04 	sub	r10,r0,4
80013a04:	e0 4a 00 24 	cp.w	r10,36
80013a08:	e0 8b 00 25 	brhi	80013a52 <_realloc_r+0x13e>
80013a0c:	0a 99       	mov	r9,r5
80013a0e:	59 3a       	cp.w	r10,19
80013a10:	e0 88 00 1a 	brls	80013a44 <_realloc_r+0x130>
80013a14:	09 09       	ld.w	r9,r4++
80013a16:	8b 09       	st.w	r5[0x0],r9
80013a18:	09 09       	ld.w	r9,r4++
80013a1a:	8f 39       	st.w	r7[0xc],r9
80013a1c:	ee c9 ff f0 	sub	r9,r7,-16
80013a20:	59 ba       	cp.w	r10,27
80013a22:	e0 88 00 11 	brls	80013a44 <_realloc_r+0x130>
80013a26:	09 0b       	ld.w	r11,r4++
80013a28:	93 0b       	st.w	r9[0x0],r11
80013a2a:	09 09       	ld.w	r9,r4++
80013a2c:	8f 59       	st.w	r7[0x14],r9
80013a2e:	ee c9 ff e8 	sub	r9,r7,-24
80013a32:	e0 4a 00 24 	cp.w	r10,36
80013a36:	c0 71       	brne	80013a44 <_realloc_r+0x130>
80013a38:	09 0a       	ld.w	r10,r4++
80013a3a:	93 0a       	st.w	r9[0x0],r10
80013a3c:	ee c9 ff e0 	sub	r9,r7,-32
80013a40:	09 0a       	ld.w	r10,r4++
80013a42:	8f 7a       	st.w	r7[0x1c],r10
80013a44:	09 0a       	ld.w	r10,r4++
80013a46:	12 aa       	st.w	r9++,r10
80013a48:	68 0a       	ld.w	r10,r4[0x0]
80013a4a:	93 0a       	st.w	r9[0x0],r10
80013a4c:	68 1a       	ld.w	r10,r4[0x4]
80013a4e:	93 1a       	st.w	r9[0x4],r10
80013a50:	c0 78       	rjmp	80013a5e <_realloc_r+0x14a>
80013a52:	50 08       	stdsp	sp[0x0],r8
80013a54:	08 9b       	mov	r11,r4
80013a56:	0a 9c       	mov	r12,r5
80013a58:	fe b0 fc 53 	rcall	800132fe <memmove>
80013a5c:	40 08       	lddsp	r8,sp[0x0]
80013a5e:	ee 06 00 09 	add	r9,r7,r6
80013a62:	0c 13       	sub	r3,r6
80013a64:	a1 a3       	sbr	r3,0x0
80013a66:	93 13       	st.w	r9[0x4],r3
80013a68:	91 29       	st.w	r8[0x8],r9
80013a6a:	04 9c       	mov	r12,r2
80013a6c:	6e 18       	ld.w	r8,r7[0x4]
80013a6e:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80013a72:	10 46       	or	r6,r8
80013a74:	8f 16       	st.w	r7[0x4],r6
80013a76:	ca a8       	rjmp	80013bca <_realloc_r+0x2b6>
80013a78:	14 03       	add	r3,r10
80013a7a:	0c 33       	cp.w	r3,r6
80013a7c:	c0 85       	brlt	80013a8c <_realloc_r+0x178>
80013a7e:	72 28       	ld.w	r8,r9[0x8]
80013a80:	72 39       	ld.w	r9,r9[0xc]
80013a82:	93 28       	st.w	r9[0x8],r8
80013a84:	91 39       	st.w	r8[0xc],r9
80013a86:	6e 28       	ld.w	r8,r7[0x8]
80013a88:	6e 39       	ld.w	r9,r7[0xc]
80013a8a:	c0 78       	rjmp	80013a98 <_realloc_r+0x184>
80013a8c:	f8 00 00 03 	add	r3,r12,r0
80013a90:	0c 33       	cp.w	r3,r6
80013a92:	c3 35       	brlt	80013af8 <_realloc_r+0x1e4>
80013a94:	6e 39       	ld.w	r9,r7[0xc]
80013a96:	6e 28       	ld.w	r8,r7[0x8]
80013a98:	93 28       	st.w	r9[0x8],r8
80013a9a:	91 39       	st.w	r8[0xc],r9
80013a9c:	e0 ca 00 04 	sub	r10,r0,4
80013aa0:	ee cc ff f8 	sub	r12,r7,-8
80013aa4:	e0 4a 00 24 	cp.w	r10,36
80013aa8:	e0 8b 00 24 	brhi	80013af0 <_realloc_r+0x1dc>
80013aac:	59 3a       	cp.w	r10,19
80013aae:	e0 88 00 1a 	brls	80013ae2 <_realloc_r+0x1ce>
80013ab2:	09 08       	ld.w	r8,r4++
80013ab4:	99 08       	st.w	r12[0x0],r8
80013ab6:	09 08       	ld.w	r8,r4++
80013ab8:	8f 38       	st.w	r7[0xc],r8
80013aba:	ee cc ff f0 	sub	r12,r7,-16
80013abe:	59 ba       	cp.w	r10,27
80013ac0:	e0 88 00 11 	brls	80013ae2 <_realloc_r+0x1ce>
80013ac4:	09 08       	ld.w	r8,r4++
80013ac6:	99 08       	st.w	r12[0x0],r8
80013ac8:	09 08       	ld.w	r8,r4++
80013aca:	8f 58       	st.w	r7[0x14],r8
80013acc:	ee cc ff e8 	sub	r12,r7,-24
80013ad0:	e0 4a 00 24 	cp.w	r10,36
80013ad4:	c0 71       	brne	80013ae2 <_realloc_r+0x1ce>
80013ad6:	09 08       	ld.w	r8,r4++
80013ad8:	99 08       	st.w	r12[0x0],r8
80013ada:	ee cc ff e0 	sub	r12,r7,-32
80013ade:	09 08       	ld.w	r8,r4++
80013ae0:	8f 78       	st.w	r7[0x1c],r8
80013ae2:	09 08       	ld.w	r8,r4++
80013ae4:	18 a8       	st.w	r12++,r8
80013ae6:	68 08       	ld.w	r8,r4[0x0]
80013ae8:	99 08       	st.w	r12[0x0],r8
80013aea:	68 18       	ld.w	r8,r4[0x4]
80013aec:	99 18       	st.w	r12[0x4],r8
80013aee:	c4 78       	rjmp	80013b7c <_realloc_r+0x268>
80013af0:	08 9b       	mov	r11,r4
80013af2:	fe b0 fc 06 	rcall	800132fe <memmove>
80013af6:	c4 38       	rjmp	80013b7c <_realloc_r+0x268>
80013af8:	04 9c       	mov	r12,r2
80013afa:	fe b0 f9 df 	rcall	80012eb8 <_malloc_r>
80013afe:	18 95       	mov	r5,r12
80013b00:	c3 a0       	breq	80013b74 <_realloc_r+0x260>
80013b02:	62 18       	ld.w	r8,r1[0x4]
80013b04:	f8 c9 00 08 	sub	r9,r12,8
80013b08:	a1 c8       	cbr	r8,0x0
80013b0a:	e2 08 00 08 	add	r8,r1,r8
80013b0e:	10 39       	cp.w	r9,r8
80013b10:	c0 71       	brne	80013b1e <_realloc_r+0x20a>
80013b12:	72 13       	ld.w	r3,r9[0x4]
80013b14:	02 97       	mov	r7,r1
80013b16:	e0 13 ff fc 	andl	r3,0xfffc
80013b1a:	00 03       	add	r3,r0
80013b1c:	c3 08       	rjmp	80013b7c <_realloc_r+0x268>
80013b1e:	e0 ca 00 04 	sub	r10,r0,4
80013b22:	e0 4a 00 24 	cp.w	r10,36
80013b26:	e0 8b 00 20 	brhi	80013b66 <_realloc_r+0x252>
80013b2a:	08 99       	mov	r9,r4
80013b2c:	18 98       	mov	r8,r12
80013b2e:	59 3a       	cp.w	r10,19
80013b30:	e0 88 00 14 	brls	80013b58 <_realloc_r+0x244>
80013b34:	13 0b       	ld.w	r11,r9++
80013b36:	10 ab       	st.w	r8++,r11
80013b38:	13 0b       	ld.w	r11,r9++
80013b3a:	10 ab       	st.w	r8++,r11
80013b3c:	59 ba       	cp.w	r10,27
80013b3e:	e0 88 00 0d 	brls	80013b58 <_realloc_r+0x244>
80013b42:	13 0b       	ld.w	r11,r9++
80013b44:	10 ab       	st.w	r8++,r11
80013b46:	13 0b       	ld.w	r11,r9++
80013b48:	10 ab       	st.w	r8++,r11
80013b4a:	e0 4a 00 24 	cp.w	r10,36
80013b4e:	c0 51       	brne	80013b58 <_realloc_r+0x244>
80013b50:	13 0a       	ld.w	r10,r9++
80013b52:	10 aa       	st.w	r8++,r10
80013b54:	13 0a       	ld.w	r10,r9++
80013b56:	10 aa       	st.w	r8++,r10
80013b58:	13 0a       	ld.w	r10,r9++
80013b5a:	10 aa       	st.w	r8++,r10
80013b5c:	72 0a       	ld.w	r10,r9[0x0]
80013b5e:	91 0a       	st.w	r8[0x0],r10
80013b60:	72 19       	ld.w	r9,r9[0x4]
80013b62:	91 19       	st.w	r8[0x4],r9
80013b64:	c0 48       	rjmp	80013b6c <_realloc_r+0x258>
80013b66:	08 9b       	mov	r11,r4
80013b68:	fe b0 fb cb 	rcall	800132fe <memmove>
80013b6c:	08 9b       	mov	r11,r4
80013b6e:	04 9c       	mov	r12,r2
80013b70:	fe b0 f6 fe 	rcall	8001296c <_free_r>
80013b74:	04 9c       	mov	r12,r2
80013b76:	c2 a8       	rjmp	80013bca <_realloc_r+0x2b6>
80013b78:	00 93       	mov	r3,r0
80013b7a:	02 97       	mov	r7,r1
80013b7c:	e6 06 01 09 	sub	r9,r3,r6
80013b80:	6e 18       	ld.w	r8,r7[0x4]
80013b82:	58 f9       	cp.w	r9,15
80013b84:	e0 88 00 16 	brls	80013bb0 <_realloc_r+0x29c>
80013b88:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80013b8c:	ed e8 10 08 	or	r8,r6,r8
80013b90:	8f 18       	st.w	r7[0x4],r8
80013b92:	12 98       	mov	r8,r9
80013b94:	a1 a8       	sbr	r8,0x0
80013b96:	ee 06 00 0b 	add	r11,r7,r6
80013b9a:	f6 09 00 09 	add	r9,r11,r9
80013b9e:	97 18       	st.w	r11[0x4],r8
80013ba0:	72 18       	ld.w	r8,r9[0x4]
80013ba2:	a1 a8       	sbr	r8,0x0
80013ba4:	2f 8b       	sub	r11,-8
80013ba6:	93 18       	st.w	r9[0x4],r8
80013ba8:	04 9c       	mov	r12,r2
80013baa:	fe b0 f6 e1 	rcall	8001296c <_free_r>
80013bae:	c0 b8       	rjmp	80013bc4 <_realloc_r+0x2b0>
80013bb0:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80013bb4:	e7 e8 10 08 	or	r8,r3,r8
80013bb8:	8f 18       	st.w	r7[0x4],r8
80013bba:	ee 03 00 03 	add	r3,r7,r3
80013bbe:	66 18       	ld.w	r8,r3[0x4]
80013bc0:	a1 a8       	sbr	r8,0x0
80013bc2:	87 18       	st.w	r3[0x4],r8
80013bc4:	04 9c       	mov	r12,r2
80013bc6:	ee c5 ff f8 	sub	r5,r7,-8
80013bca:	fe b0 fb ba 	rcall	8001333e <__malloc_unlock>
80013bce:	0a 9c       	mov	r12,r5
80013bd0:	2f fd       	sub	sp,-4
80013bd2:	d8 32       	popm	r0-r7,pc

80013bd4 <__isinfd>:
80013bd4:	14 98       	mov	r8,r10
80013bd6:	fc 19 7f f0 	movh	r9,0x7ff0
80013bda:	f5 db c0 1f 	bfextu	r10,r11,0x0,0x1f
80013bde:	f0 0b 11 00 	rsub	r11,r8,0
80013be2:	f7 e8 10 08 	or	r8,r11,r8
80013be6:	f5 e8 13 f8 	or	r8,r10,r8>>0x1f
80013bea:	f2 08 01 08 	sub	r8,r9,r8
80013bee:	f0 0c 11 00 	rsub	r12,r8,0
80013bf2:	f9 e8 10 08 	or	r8,r12,r8
80013bf6:	f0 0c 14 1f 	asr	r12,r8,0x1f
80013bfa:	2f fc       	sub	r12,-1
80013bfc:	5e fc       	retal	r12

80013bfe <__isnand>:
80013bfe:	14 98       	mov	r8,r10
80013c00:	f5 db c0 1f 	bfextu	r10,r11,0x0,0x1f
80013c04:	f0 0c 11 00 	rsub	r12,r8,0
80013c08:	10 4c       	or	r12,r8
80013c0a:	fc 18 7f f0 	movh	r8,0x7ff0
80013c0e:	f5 ec 13 fc 	or	r12,r10,r12>>0x1f
80013c12:	f0 0c 01 0c 	sub	r12,r8,r12
80013c16:	bf 9c       	lsr	r12,0x1f
80013c18:	5e fc       	retal	r12
80013c1a:	d7 03       	nop

80013c1c <_sbrk_r>:
80013c1c:	d4 21       	pushm	r4-r7,lr
80013c1e:	30 08       	mov	r8,0
80013c20:	18 97       	mov	r7,r12
80013c22:	e0 66 0e 74 	mov	r6,3700
80013c26:	16 9c       	mov	r12,r11
80013c28:	8d 08       	st.w	r6[0x0],r8
80013c2a:	ca fc       	rcall	80013d88 <_sbrk>
80013c2c:	5b fc       	cp.w	r12,-1
80013c2e:	c0 51       	brne	80013c38 <_sbrk_r+0x1c>
80013c30:	6c 08       	ld.w	r8,r6[0x0]
80013c32:	58 08       	cp.w	r8,0
80013c34:	ef f8 1a 03 	st.wne	r7[0xc],r8
80013c38:	d8 22       	popm	r4-r7,pc
80013c3a:	d7 03       	nop

80013c3c <__sclose>:
80013c3c:	d4 01       	pushm	lr
80013c3e:	96 7b       	ld.sh	r11,r11[0xe]
80013c40:	cf ec       	rcall	80013e3c <_close_r>
80013c42:	d8 02       	popm	pc

80013c44 <__sseek>:
80013c44:	d4 21       	pushm	r4-r7,lr
80013c46:	16 97       	mov	r7,r11
80013c48:	96 7b       	ld.sh	r11,r11[0xe]
80013c4a:	c8 5d       	rcall	80013f54 <_lseek_r>
80013c4c:	8e 68       	ld.sh	r8,r7[0xc]
80013c4e:	10 99       	mov	r9,r8
80013c50:	ad c8       	cbr	r8,0xc
80013c52:	ad a9       	sbr	r9,0xc
80013c54:	5b fc       	cp.w	r12,-1
80013c56:	ef f8 0c 06 	st.heq	r7[0xc],r8
80013c5a:	ef f9 1c 06 	st.hne	r7[0xc],r9
80013c5e:	ef fc 1a 15 	st.wne	r7[0x54],r12
80013c62:	d8 22       	popm	r4-r7,pc

80013c64 <__swrite>:
80013c64:	d4 21       	pushm	r4-r7,lr
80013c66:	96 68       	ld.sh	r8,r11[0xc]
80013c68:	16 97       	mov	r7,r11
80013c6a:	14 95       	mov	r5,r10
80013c6c:	12 94       	mov	r4,r9
80013c6e:	e2 18 01 00 	andl	r8,0x100,COH
80013c72:	18 96       	mov	r6,r12
80013c74:	c0 50       	breq	80013c7e <__swrite+0x1a>
80013c76:	30 29       	mov	r9,2
80013c78:	30 0a       	mov	r10,0
80013c7a:	96 7b       	ld.sh	r11,r11[0xe]
80013c7c:	c6 cd       	rcall	80013f54 <_lseek_r>
80013c7e:	8e 68       	ld.sh	r8,r7[0xc]
80013c80:	ad c8       	cbr	r8,0xc
80013c82:	08 99       	mov	r9,r4
80013c84:	0a 9a       	mov	r10,r5
80013c86:	8e 7b       	ld.sh	r11,r7[0xe]
80013c88:	0c 9c       	mov	r12,r6
80013c8a:	ae 68       	st.h	r7[0xc],r8
80013c8c:	c9 ac       	rcall	80013dc0 <_write_r>
80013c8e:	d8 22       	popm	r4-r7,pc

80013c90 <__sread>:
80013c90:	d4 21       	pushm	r4-r7,lr
80013c92:	16 97       	mov	r7,r11
80013c94:	96 7b       	ld.sh	r11,r11[0xe]
80013c96:	c7 1d       	rcall	80013f78 <_read_r>
80013c98:	c0 65       	brlt	80013ca4 <__sread+0x14>
80013c9a:	6f 58       	ld.w	r8,r7[0x54]
80013c9c:	18 08       	add	r8,r12
80013c9e:	ef 48 00 54 	st.w	r7[84],r8
80013ca2:	d8 22       	popm	r4-r7,pc
80013ca4:	8e 68       	ld.sh	r8,r7[0xc]
80013ca6:	ad c8       	cbr	r8,0xc
80013ca8:	ae 68       	st.h	r7[0xc],r8
80013caa:	d8 22       	popm	r4-r7,pc

80013cac <strlen>:
80013cac:	30 09       	mov	r9,0
80013cae:	18 98       	mov	r8,r12
80013cb0:	c0 28       	rjmp	80013cb4 <strlen+0x8>
80013cb2:	2f f8       	sub	r8,-1
80013cb4:	11 8a       	ld.ub	r10,r8[0x0]
80013cb6:	f2 0a 18 00 	cp.b	r10,r9
80013cba:	cf c1       	brne	80013cb2 <strlen+0x6>
80013cbc:	f0 0c 01 0c 	sub	r12,r8,r12
80013cc0:	5e fc       	retal	r12
80013cc2:	d7 03       	nop

80013cc4 <_close>:
80013cc4:	30 28       	mov	r8,2
80013cc6:	d6 73       	breakpoint
80013cc8:	3f fc       	mov	r12,-1
80013cca:	35 8b       	mov	r11,88
80013ccc:	58 0c       	cp.w	r12,0
80013cce:	5e 4c       	retge	r12
80013cd0:	e0 6a 0e 74 	mov	r10,3700
80013cd4:	95 0b       	st.w	r10[0x0],r11
80013cd6:	5e fc       	retal	r12

80013cd8 <_lseek>:
80013cd8:	30 58       	mov	r8,5
80013cda:	d6 73       	breakpoint
80013cdc:	3f fc       	mov	r12,-1
80013cde:	35 8b       	mov	r11,88
80013ce0:	58 0c       	cp.w	r12,0
80013ce2:	5e 4c       	retge	r12
80013ce4:	e0 6a 0e 74 	mov	r10,3700
80013ce8:	95 0b       	st.w	r10[0x0],r11
80013cea:	5e fc       	retal	r12

80013cec <_read>:
80013cec:	30 38       	mov	r8,3
80013cee:	d6 73       	breakpoint
80013cf0:	3f fc       	mov	r12,-1
80013cf2:	35 8b       	mov	r11,88
80013cf4:	58 0c       	cp.w	r12,0
80013cf6:	5e 4c       	retge	r12
80013cf8:	e0 6a 0e 74 	mov	r10,3700
80013cfc:	95 0b       	st.w	r10[0x0],r11
80013cfe:	5e fc       	retal	r12

80013d00 <_write>:
80013d00:	30 48       	mov	r8,4
80013d02:	d6 73       	breakpoint
80013d04:	3f fc       	mov	r12,-1
80013d06:	35 8b       	mov	r11,88
80013d08:	58 0c       	cp.w	r12,0
80013d0a:	5e 4c       	retge	r12
80013d0c:	e0 6a 0e 74 	mov	r10,3700
80013d10:	95 0b       	st.w	r10[0x0],r11
80013d12:	5e fc       	retal	r12

80013d14 <isatty>:
80013d14:	30 b8       	mov	r8,11
80013d16:	d6 73       	breakpoint
80013d18:	3f fc       	mov	r12,-1
80013d1a:	35 8b       	mov	r11,88
80013d1c:	58 0c       	cp.w	r12,0
80013d1e:	5e 4c       	retge	r12
80013d20:	e0 6a 0e 74 	mov	r10,3700
80013d24:	95 0b       	st.w	r10[0x0],r11
80013d26:	5e fc       	retal	r12

80013d28 <_fstat_host>:
80013d28:	30 98       	mov	r8,9
80013d2a:	d6 73       	breakpoint
80013d2c:	3f fc       	mov	r12,-1
80013d2e:	35 8b       	mov	r11,88
80013d30:	58 0c       	cp.w	r12,0
80013d32:	5e 4c       	retge	r12
80013d34:	e0 6a 0e 74 	mov	r10,3700
80013d38:	95 0b       	st.w	r10[0x0],r11
80013d3a:	5e fc       	retal	r12

80013d3c <_fstat>:
80013d3c:	d4 21       	pushm	r4-r7,lr
80013d3e:	21 0d       	sub	sp,64
80013d40:	16 97       	mov	r7,r11
80013d42:	1a 9b       	mov	r11,sp
80013d44:	cf 2f       	rcall	80013d28 <_fstat_host>
80013d46:	c0 34       	brge	80013d4c <_fstat+0x10>
80013d48:	3f fc       	mov	r12,-1
80013d4a:	c1 c8       	rjmp	80013d82 <_fstat+0x46>
80013d4c:	40 08       	lddsp	r8,sp[0x0]
80013d4e:	ae 08       	st.h	r7[0x0],r8
80013d50:	40 18       	lddsp	r8,sp[0x4]
80013d52:	ae 18       	st.h	r7[0x2],r8
80013d54:	40 28       	lddsp	r8,sp[0x8]
80013d56:	8f 18       	st.w	r7[0x4],r8
80013d58:	40 38       	lddsp	r8,sp[0xc]
80013d5a:	ae 48       	st.h	r7[0x8],r8
80013d5c:	40 48       	lddsp	r8,sp[0x10]
80013d5e:	ae 58       	st.h	r7[0xa],r8
80013d60:	40 58       	lddsp	r8,sp[0x14]
80013d62:	ae 68       	st.h	r7[0xc],r8
80013d64:	40 68       	lddsp	r8,sp[0x18]
80013d66:	ae 78       	st.h	r7[0xe],r8
80013d68:	40 88       	lddsp	r8,sp[0x20]
80013d6a:	8f 48       	st.w	r7[0x10],r8
80013d6c:	40 a8       	lddsp	r8,sp[0x28]
80013d6e:	8f b8       	st.w	r7[0x2c],r8
80013d70:	40 c8       	lddsp	r8,sp[0x30]
80013d72:	8f c8       	st.w	r7[0x30],r8
80013d74:	40 d8       	lddsp	r8,sp[0x34]
80013d76:	8f 58       	st.w	r7[0x14],r8
80013d78:	40 e8       	lddsp	r8,sp[0x38]
80013d7a:	30 0c       	mov	r12,0
80013d7c:	8f 78       	st.w	r7[0x1c],r8
80013d7e:	40 f8       	lddsp	r8,sp[0x3c]
80013d80:	8f 98       	st.w	r7[0x24],r8
80013d82:	2f 0d       	sub	sp,-64
80013d84:	d8 22       	popm	r4-r7,pc
80013d86:	d7 03       	nop

80013d88 <_sbrk>:
80013d88:	d4 01       	pushm	lr
80013d8a:	e0 68 08 f4 	mov	r8,2292
80013d8e:	70 09       	ld.w	r9,r8[0x0]
80013d90:	58 09       	cp.w	r9,0
80013d92:	c0 41       	brne	80013d9a <_sbrk+0x12>
80013d94:	e0 69 0e 78 	mov	r9,3704
80013d98:	91 09       	st.w	r8[0x0],r9
80013d9a:	e0 69 08 f4 	mov	r9,2292
80013d9e:	e0 6a f0 00 	mov	r10,61440
80013da2:	72 08       	ld.w	r8,r9[0x0]
80013da4:	f0 0c 00 0c 	add	r12,r8,r12
80013da8:	14 3c       	cp.w	r12,r10
80013daa:	e0 8b 00 04 	brhi	80013db2 <_sbrk+0x2a>
80013dae:	93 0c       	st.w	r9[0x0],r12
80013db0:	c0 58       	rjmp	80013dba <_sbrk+0x32>
80013db2:	c5 5c       	rcall	80013e5c <__errno>
80013db4:	30 c8       	mov	r8,12
80013db6:	99 08       	st.w	r12[0x0],r8
80013db8:	3f f8       	mov	r8,-1
80013dba:	10 9c       	mov	r12,r8
80013dbc:	d8 02       	popm	pc
80013dbe:	d7 03       	nop

80013dc0 <_write_r>:
80013dc0:	d4 21       	pushm	r4-r7,lr
80013dc2:	16 98       	mov	r8,r11
80013dc4:	18 97       	mov	r7,r12
80013dc6:	10 9c       	mov	r12,r8
80013dc8:	30 08       	mov	r8,0
80013dca:	14 9b       	mov	r11,r10
80013dcc:	e0 66 0e 74 	mov	r6,3700
80013dd0:	12 9a       	mov	r10,r9
80013dd2:	8d 08       	st.w	r6[0x0],r8
80013dd4:	c9 6f       	rcall	80013d00 <_write>
80013dd6:	5b fc       	cp.w	r12,-1
80013dd8:	c0 51       	brne	80013de2 <_write_r+0x22>
80013dda:	6c 08       	ld.w	r8,r6[0x0]
80013ddc:	58 08       	cp.w	r8,0
80013dde:	ef f8 1a 03 	st.wne	r7[0xc],r8
80013de2:	d8 22       	popm	r4-r7,pc

80013de4 <_calloc_r>:
80013de4:	d4 21       	pushm	r4-r7,lr
80013de6:	f4 0b 02 4b 	mul	r11,r10,r11
80013dea:	fe b0 f8 67 	rcall	80012eb8 <_malloc_r>
80013dee:	18 97       	mov	r7,r12
80013df0:	c2 30       	breq	80013e36 <_calloc_r+0x52>
80013df2:	f8 fa ff fc 	ld.w	r10,r12[-4]
80013df6:	e0 1a ff fc 	andl	r10,0xfffc
80013dfa:	20 4a       	sub	r10,4
80013dfc:	e0 4a 00 24 	cp.w	r10,36
80013e00:	e0 8b 00 18 	brhi	80013e30 <_calloc_r+0x4c>
80013e04:	18 98       	mov	r8,r12
80013e06:	59 3a       	cp.w	r10,19
80013e08:	e0 88 00 0f 	brls	80013e26 <_calloc_r+0x42>
80013e0c:	30 09       	mov	r9,0
80013e0e:	10 a9       	st.w	r8++,r9
80013e10:	10 a9       	st.w	r8++,r9
80013e12:	59 ba       	cp.w	r10,27
80013e14:	e0 88 00 09 	brls	80013e26 <_calloc_r+0x42>
80013e18:	10 a9       	st.w	r8++,r9
80013e1a:	10 a9       	st.w	r8++,r9
80013e1c:	e0 4a 00 24 	cp.w	r10,36
80013e20:	c0 31       	brne	80013e26 <_calloc_r+0x42>
80013e22:	10 a9       	st.w	r8++,r9
80013e24:	10 a9       	st.w	r8++,r9
80013e26:	30 09       	mov	r9,0
80013e28:	10 a9       	st.w	r8++,r9
80013e2a:	91 19       	st.w	r8[0x4],r9
80013e2c:	91 09       	st.w	r8[0x0],r9
80013e2e:	c0 48       	rjmp	80013e36 <_calloc_r+0x52>
80013e30:	30 0b       	mov	r11,0
80013e32:	fe b0 db a8 	rcall	8000f582 <memset>
80013e36:	0e 9c       	mov	r12,r7
80013e38:	d8 22       	popm	r4-r7,pc
80013e3a:	d7 03       	nop

80013e3c <_close_r>:
80013e3c:	d4 21       	pushm	r4-r7,lr
80013e3e:	30 08       	mov	r8,0
80013e40:	18 97       	mov	r7,r12
80013e42:	e0 66 0e 74 	mov	r6,3700
80013e46:	16 9c       	mov	r12,r11
80013e48:	8d 08       	st.w	r6[0x0],r8
80013e4a:	c3 df       	rcall	80013cc4 <_close>
80013e4c:	5b fc       	cp.w	r12,-1
80013e4e:	c0 51       	brne	80013e58 <_close_r+0x1c>
80013e50:	6c 08       	ld.w	r8,r6[0x0]
80013e52:	58 08       	cp.w	r8,0
80013e54:	ef f8 1a 03 	st.wne	r7[0xc],r8
80013e58:	d8 22       	popm	r4-r7,pc
80013e5a:	d7 03       	nop

80013e5c <__errno>:
80013e5c:	e0 68 01 d0 	mov	r8,464
80013e60:	70 0c       	ld.w	r12,r8[0x0]
80013e62:	2f 4c       	sub	r12,-12
80013e64:	5e fc       	retal	r12
80013e66:	d7 03       	nop

80013e68 <_fclose_r>:
80013e68:	d4 21       	pushm	r4-r7,lr
80013e6a:	18 96       	mov	r6,r12
80013e6c:	16 97       	mov	r7,r11
80013e6e:	58 0b       	cp.w	r11,0
80013e70:	c0 31       	brne	80013e76 <_fclose_r+0xe>
80013e72:	16 95       	mov	r5,r11
80013e74:	c5 38       	rjmp	80013f1a <_fclose_r+0xb2>
80013e76:	fe b0 f4 8f 	rcall	80012794 <__sfp_lock_acquire>
80013e7a:	58 06       	cp.w	r6,0
80013e7c:	c0 70       	breq	80013e8a <_fclose_r+0x22>
80013e7e:	6c 68       	ld.w	r8,r6[0x18]
80013e80:	58 08       	cp.w	r8,0
80013e82:	c0 41       	brne	80013e8a <_fclose_r+0x22>
80013e84:	0c 9c       	mov	r12,r6
80013e86:	fe b0 f4 d9 	rcall	80012838 <__sinit>
80013e8a:	fe c8 e9 96 	sub	r8,pc,-5738
80013e8e:	10 37       	cp.w	r7,r8
80013e90:	c0 31       	brne	80013e96 <_fclose_r+0x2e>
80013e92:	6c 07       	ld.w	r7,r6[0x0]
80013e94:	c0 c8       	rjmp	80013eac <_fclose_r+0x44>
80013e96:	fe c8 e9 82 	sub	r8,pc,-5758
80013e9a:	10 37       	cp.w	r7,r8
80013e9c:	c0 31       	brne	80013ea2 <_fclose_r+0x3a>
80013e9e:	6c 17       	ld.w	r7,r6[0x4]
80013ea0:	c0 68       	rjmp	80013eac <_fclose_r+0x44>
80013ea2:	fe c8 e9 6e 	sub	r8,pc,-5778
80013ea6:	10 37       	cp.w	r7,r8
80013ea8:	ed f7 00 02 	ld.weq	r7,r6[0x8]
80013eac:	8e 69       	ld.sh	r9,r7[0xc]
80013eae:	30 08       	mov	r8,0
80013eb0:	f0 09 19 00 	cp.h	r9,r8
80013eb4:	c0 51       	brne	80013ebe <_fclose_r+0x56>
80013eb6:	fe b0 f4 70 	rcall	80012796 <__sfp_lock_release>
80013eba:	30 05       	mov	r5,0
80013ebc:	c2 f8       	rjmp	80013f1a <_fclose_r+0xb2>
80013ebe:	0e 9b       	mov	r11,r7
80013ec0:	0c 9c       	mov	r12,r6
80013ec2:	fe b0 f3 e3 	rcall	80012688 <_fflush_r>
80013ec6:	6e c8       	ld.w	r8,r7[0x30]
80013ec8:	18 95       	mov	r5,r12
80013eca:	58 08       	cp.w	r8,0
80013ecc:	c0 60       	breq	80013ed8 <_fclose_r+0x70>
80013ece:	6e 8b       	ld.w	r11,r7[0x20]
80013ed0:	0c 9c       	mov	r12,r6
80013ed2:	5d 18       	icall	r8
80013ed4:	f9 b5 05 ff 	movlt	r5,-1
80013ed8:	8e 68       	ld.sh	r8,r7[0xc]
80013eda:	ed b8 00 07 	bld	r8,0x7
80013ede:	c0 51       	brne	80013ee8 <_fclose_r+0x80>
80013ee0:	6e 4b       	ld.w	r11,r7[0x10]
80013ee2:	0c 9c       	mov	r12,r6
80013ee4:	fe b0 f5 44 	rcall	8001296c <_free_r>
80013ee8:	6e db       	ld.w	r11,r7[0x34]
80013eea:	58 0b       	cp.w	r11,0
80013eec:	c0 a0       	breq	80013f00 <_fclose_r+0x98>
80013eee:	ee c8 ff bc 	sub	r8,r7,-68
80013ef2:	10 3b       	cp.w	r11,r8
80013ef4:	c0 40       	breq	80013efc <_fclose_r+0x94>
80013ef6:	0c 9c       	mov	r12,r6
80013ef8:	fe b0 f5 3a 	rcall	8001296c <_free_r>
80013efc:	30 08       	mov	r8,0
80013efe:	8f d8       	st.w	r7[0x34],r8
80013f00:	6f 2b       	ld.w	r11,r7[0x48]
80013f02:	58 0b       	cp.w	r11,0
80013f04:	c0 70       	breq	80013f12 <_fclose_r+0xaa>
80013f06:	0c 9c       	mov	r12,r6
80013f08:	fe b0 f5 32 	rcall	8001296c <_free_r>
80013f0c:	30 08       	mov	r8,0
80013f0e:	ef 48 00 48 	st.w	r7[72],r8
80013f12:	30 08       	mov	r8,0
80013f14:	ae 68       	st.h	r7[0xc],r8
80013f16:	fe b0 f4 40 	rcall	80012796 <__sfp_lock_release>
80013f1a:	0a 9c       	mov	r12,r5
80013f1c:	d8 22       	popm	r4-r7,pc
80013f1e:	d7 03       	nop

80013f20 <fclose>:
80013f20:	d4 01       	pushm	lr
80013f22:	e0 68 01 d0 	mov	r8,464
80013f26:	18 9b       	mov	r11,r12
80013f28:	70 0c       	ld.w	r12,r8[0x0]
80013f2a:	c9 ff       	rcall	80013e68 <_fclose_r>
80013f2c:	d8 02       	popm	pc
80013f2e:	d7 03       	nop

80013f30 <_fstat_r>:
80013f30:	d4 21       	pushm	r4-r7,lr
80013f32:	16 98       	mov	r8,r11
80013f34:	18 97       	mov	r7,r12
80013f36:	10 9c       	mov	r12,r8
80013f38:	30 08       	mov	r8,0
80013f3a:	e0 66 0e 74 	mov	r6,3700
80013f3e:	14 9b       	mov	r11,r10
80013f40:	8d 08       	st.w	r6[0x0],r8
80013f42:	cf de       	rcall	80013d3c <_fstat>
80013f44:	5b fc       	cp.w	r12,-1
80013f46:	c0 51       	brne	80013f50 <_fstat_r+0x20>
80013f48:	6c 08       	ld.w	r8,r6[0x0]
80013f4a:	58 08       	cp.w	r8,0
80013f4c:	ef f8 1a 03 	st.wne	r7[0xc],r8
80013f50:	d8 22       	popm	r4-r7,pc
80013f52:	d7 03       	nop

80013f54 <_lseek_r>:
80013f54:	d4 21       	pushm	r4-r7,lr
80013f56:	16 98       	mov	r8,r11
80013f58:	18 97       	mov	r7,r12
80013f5a:	10 9c       	mov	r12,r8
80013f5c:	30 08       	mov	r8,0
80013f5e:	14 9b       	mov	r11,r10
80013f60:	e0 66 0e 74 	mov	r6,3700
80013f64:	12 9a       	mov	r10,r9
80013f66:	8d 08       	st.w	r6[0x0],r8
80013f68:	cb 8e       	rcall	80013cd8 <_lseek>
80013f6a:	5b fc       	cp.w	r12,-1
80013f6c:	c0 51       	brne	80013f76 <_lseek_r+0x22>
80013f6e:	6c 08       	ld.w	r8,r6[0x0]
80013f70:	58 08       	cp.w	r8,0
80013f72:	ef f8 1a 03 	st.wne	r7[0xc],r8
80013f76:	d8 22       	popm	r4-r7,pc

80013f78 <_read_r>:
80013f78:	d4 21       	pushm	r4-r7,lr
80013f7a:	16 98       	mov	r8,r11
80013f7c:	18 97       	mov	r7,r12
80013f7e:	10 9c       	mov	r12,r8
80013f80:	30 08       	mov	r8,0
80013f82:	14 9b       	mov	r11,r10
80013f84:	e0 66 0e 74 	mov	r6,3700
80013f88:	12 9a       	mov	r10,r9
80013f8a:	8d 08       	st.w	r6[0x0],r8
80013f8c:	cb 0e       	rcall	80013cec <_read>
80013f8e:	5b fc       	cp.w	r12,-1
80013f90:	c0 51       	brne	80013f9a <_read_r+0x22>
80013f92:	6c 08       	ld.w	r8,r6[0x0]
80013f94:	58 08       	cp.w	r8,0
80013f96:	ef f8 1a 03 	st.wne	r7[0xc],r8
80013f9a:	d8 22       	popm	r4-r7,pc

80013f9c <__avr32_f64_mul>:
80013f9c:	f5 eb 10 1c 	or	r12,r10,r11<<0x1
80013fa0:	e0 80 00 dc 	breq	80014158 <__avr32_f64_mul_op1_zero>
80013fa4:	d4 21       	pushm	r4-r7,lr
80013fa6:	f7 e9 20 0e 	eor	lr,r11,r9
80013faa:	ef db c2 8b 	bfextu	r7,r11,0x14,0xb
80013fae:	30 15       	mov	r5,1
80013fb0:	c4 30       	breq	80014036 <__avr32_f64_mul_op1_subnormal>
80013fb2:	ab 6b       	lsl	r11,0xa
80013fb4:	f7 ea 13 6b 	or	r11,r11,r10>>0x16
80013fb8:	ab 6a       	lsl	r10,0xa
80013fba:	f7 d5 d3 c2 	bfins	r11,r5,0x1e,0x2
80013fbe:	ed d9 c2 8b 	bfextu	r6,r9,0x14,0xb
80013fc2:	c5 c0       	breq	8001407a <__avr32_f64_mul_op2_subnormal>
80013fc4:	a1 78       	lsl	r8,0x1
80013fc6:	5c f9       	rol	r9
80013fc8:	f3 d5 d2 ab 	bfins	r9,r5,0x15,0xb
80013fcc:	e0 47 07 ff 	cp.w	r7,2047
80013fd0:	c7 70       	breq	800140be <__avr32_f64_mul_op_nan_or_inf>
80013fd2:	e0 46 07 ff 	cp.w	r6,2047
80013fd6:	c7 40       	breq	800140be <__avr32_f64_mul_op_nan_or_inf>
80013fd8:	ee 06 00 0c 	add	r12,r7,r6
80013fdc:	e0 2c 03 fe 	sub	r12,1022
80013fe0:	f6 08 06 44 	mulu.d	r4,r11,r8
80013fe4:	f4 09 07 44 	macu.d	r4,r10,r9
80013fe8:	f4 08 06 46 	mulu.d	r6,r10,r8
80013fec:	f6 09 06 4a 	mulu.d	r10,r11,r9
80013ff0:	08 07       	add	r7,r4
80013ff2:	f4 05 00 4a 	adc	r10,r10,r5
80013ff6:	5c 0b       	acr	r11
80013ff8:	ed bb 00 14 	bld	r11,0x14
80013ffc:	c0 50       	breq	80014006 <__avr32_f64_mul+0x6a>
80013ffe:	a1 77       	lsl	r7,0x1
80014000:	5c fa       	rol	r10
80014002:	5c fb       	rol	r11
80014004:	20 1c       	sub	r12,1
80014006:	58 0c       	cp.w	r12,0
80014008:	e0 8a 00 6f 	brle	800140e6 <__avr32_f64_mul_res_subnormal>
8001400c:	e0 4c 07 ff 	cp.w	r12,2047
80014010:	e0 84 00 9c 	brge	80014148 <__avr32_f64_mul_res_inf>
80014014:	f7 dc d2 8b 	bfins	r11,r12,0x14,0xb
80014018:	ed ea 11 f6 	or	r6,r6,r10<<0x1f
8001401c:	ef e6 12 17 	or	r7,r7,r6>>0x1
80014020:	ee 17 80 00 	eorh	r7,0x8000
80014024:	f1 b7 04 20 	satu	r7,0x1
80014028:	0e 0a       	add	r10,r7
8001402a:	5c 0b       	acr	r11
8001402c:	ed be 00 1f 	bld	lr,0x1f
80014030:	ef bb 00 1f 	bst	r11,0x1f
80014034:	d8 22       	popm	r4-r7,pc

80014036 <__avr32_f64_mul_op1_subnormal>:
80014036:	e4 1b 00 0f 	andh	r11,0xf
8001403a:	f4 0c 12 00 	clz	r12,r10
8001403e:	f6 06 12 00 	clz	r6,r11
80014042:	f7 bc 03 e1 	sublo	r12,-31
80014046:	f8 06 17 30 	movlo	r6,r12
8001404a:	f7 b6 02 01 	subhs	r6,1
8001404e:	e0 46 00 20 	cp.w	r6,32
80014052:	c0 d4       	brge	8001406c <__avr32_f64_mul_op1_subnormal+0x36>
80014054:	ec 0c 11 20 	rsub	r12,r6,32
80014058:	f6 06 09 4b 	lsl	r11,r11,r6
8001405c:	f4 0c 0a 4c 	lsr	r12,r10,r12
80014060:	18 4b       	or	r11,r12
80014062:	f4 06 09 4a 	lsl	r10,r10,r6
80014066:	20 b6       	sub	r6,11
80014068:	0c 17       	sub	r7,r6
8001406a:	ca ab       	rjmp	80013fbe <__avr32_f64_mul+0x22>
8001406c:	f4 06 09 4b 	lsl	r11,r10,r6
80014070:	c6 40       	breq	80014138 <__avr32_f64_mul_res_zero>
80014072:	30 0a       	mov	r10,0
80014074:	20 b6       	sub	r6,11
80014076:	0c 17       	sub	r7,r6
80014078:	ca 3b       	rjmp	80013fbe <__avr32_f64_mul+0x22>

8001407a <__avr32_f64_mul_op2_subnormal>:
8001407a:	e4 19 00 0f 	andh	r9,0xf
8001407e:	f0 0c 12 00 	clz	r12,r8
80014082:	f2 05 12 00 	clz	r5,r9
80014086:	f7 bc 03 ea 	sublo	r12,-22
8001408a:	f8 05 17 30 	movlo	r5,r12
8001408e:	f7 b5 02 0a 	subhs	r5,10
80014092:	e0 45 00 20 	cp.w	r5,32
80014096:	c0 d4       	brge	800140b0 <__avr32_f64_mul_op2_subnormal+0x36>
80014098:	ea 0c 11 20 	rsub	r12,r5,32
8001409c:	f2 05 09 49 	lsl	r9,r9,r5
800140a0:	f0 0c 0a 4c 	lsr	r12,r8,r12
800140a4:	18 49       	or	r9,r12
800140a6:	f0 05 09 48 	lsl	r8,r8,r5
800140aa:	20 25       	sub	r5,2
800140ac:	0a 16       	sub	r6,r5
800140ae:	c8 fb       	rjmp	80013fcc <__avr32_f64_mul+0x30>
800140b0:	f0 05 09 49 	lsl	r9,r8,r5
800140b4:	c4 20       	breq	80014138 <__avr32_f64_mul_res_zero>
800140b6:	30 08       	mov	r8,0
800140b8:	20 25       	sub	r5,2
800140ba:	0a 16       	sub	r6,r5
800140bc:	c8 8b       	rjmp	80013fcc <__avr32_f64_mul+0x30>

800140be <__avr32_f64_mul_op_nan_or_inf>:
800140be:	e4 19 00 0f 	andh	r9,0xf
800140c2:	e4 1b 00 0f 	andh	r11,0xf
800140c6:	14 4b       	or	r11,r10
800140c8:	10 49       	or	r9,r8
800140ca:	e0 47 07 ff 	cp.w	r7,2047
800140ce:	c0 91       	brne	800140e0 <__avr32_f64_mul_op1_not_naninf>
800140d0:	58 0b       	cp.w	r11,0
800140d2:	c3 81       	brne	80014142 <__avr32_f64_mul_res_nan>
800140d4:	e0 46 07 ff 	cp.w	r6,2047
800140d8:	c3 81       	brne	80014148 <__avr32_f64_mul_res_inf>
800140da:	58 09       	cp.w	r9,0
800140dc:	c3 60       	breq	80014148 <__avr32_f64_mul_res_inf>
800140de:	c3 28       	rjmp	80014142 <__avr32_f64_mul_res_nan>

800140e0 <__avr32_f64_mul_op1_not_naninf>:
800140e0:	58 09       	cp.w	r9,0
800140e2:	c3 30       	breq	80014148 <__avr32_f64_mul_res_inf>
800140e4:	c2 f8       	rjmp	80014142 <__avr32_f64_mul_res_nan>

800140e6 <__avr32_f64_mul_res_subnormal>:
800140e6:	5c 3c       	neg	r12
800140e8:	2f fc       	sub	r12,-1
800140ea:	f1 bc 04 c0 	satu	r12,0x6
800140ee:	e0 4c 00 20 	cp.w	r12,32
800140f2:	c1 14       	brge	80014114 <__avr32_f64_mul_res_subnormal+0x2e>
800140f4:	f8 08 11 20 	rsub	r8,r12,32
800140f8:	0e 46       	or	r6,r7
800140fa:	ee 0c 0a 47 	lsr	r7,r7,r12
800140fe:	f4 08 09 49 	lsl	r9,r10,r8
80014102:	12 47       	or	r7,r9
80014104:	f4 0c 0a 4a 	lsr	r10,r10,r12
80014108:	f6 08 09 49 	lsl	r9,r11,r8
8001410c:	12 4a       	or	r10,r9
8001410e:	f6 0c 0a 4b 	lsr	r11,r11,r12
80014112:	c8 3b       	rjmp	80014018 <__avr32_f64_mul+0x7c>
80014114:	f8 08 11 20 	rsub	r8,r12,32
80014118:	f9 b9 00 00 	moveq	r9,0
8001411c:	c0 30       	breq	80014122 <__avr32_f64_mul_res_subnormal+0x3c>
8001411e:	f6 08 09 49 	lsl	r9,r11,r8
80014122:	0e 46       	or	r6,r7
80014124:	ed ea 10 16 	or	r6,r6,r10<<0x1
80014128:	f4 0c 0a 4a 	lsr	r10,r10,r12
8001412c:	f3 ea 10 07 	or	r7,r9,r10
80014130:	f6 0c 0a 4a 	lsr	r10,r11,r12
80014134:	30 0b       	mov	r11,0
80014136:	c7 1b       	rjmp	80014018 <__avr32_f64_mul+0x7c>

80014138 <__avr32_f64_mul_res_zero>:
80014138:	1c 9b       	mov	r11,lr
8001413a:	e6 1b 80 00 	andh	r11,0x8000,COH
8001413e:	30 0a       	mov	r10,0
80014140:	d8 22       	popm	r4-r7,pc

80014142 <__avr32_f64_mul_res_nan>:
80014142:	3f fb       	mov	r11,-1
80014144:	3f fa       	mov	r10,-1
80014146:	d8 22       	popm	r4-r7,pc

80014148 <__avr32_f64_mul_res_inf>:
80014148:	f0 6b 00 00 	mov	r11,-1048576
8001414c:	ed be 00 1f 	bld	lr,0x1f
80014150:	ef bb 00 1f 	bst	r11,0x1f
80014154:	30 0a       	mov	r10,0
80014156:	d8 22       	popm	r4-r7,pc

80014158 <__avr32_f64_mul_op1_zero>:
80014158:	f7 e9 20 0b 	eor	r11,r11,r9
8001415c:	e6 1b 80 00 	andh	r11,0x8000,COH
80014160:	f9 d9 c2 8b 	bfextu	r12,r9,0x14,0xb
80014164:	e0 4c 07 ff 	cp.w	r12,2047
80014168:	5e 1c       	retne	r12
8001416a:	3f fa       	mov	r10,-1
8001416c:	3f fb       	mov	r11,-1
8001416e:	5e fc       	retal	r12

80014170 <__avr32_f64_sub_from_add>:
80014170:	ee 19 80 00 	eorh	r9,0x8000

80014174 <__avr32_f64_sub>:
80014174:	f7 e9 20 0c 	eor	r12,r11,r9
80014178:	e0 86 00 ca 	brmi	8001430c <__avr32_f64_add_from_sub>
8001417c:	eb cd 40 e0 	pushm	r5-r7,lr
80014180:	16 9c       	mov	r12,r11
80014182:	e6 1c 80 00 	andh	r12,0x8000,COH
80014186:	bf db       	cbr	r11,0x1f
80014188:	bf d9       	cbr	r9,0x1f
8001418a:	10 3a       	cp.w	r10,r8
8001418c:	f2 0b 13 00 	cpc	r11,r9
80014190:	c0 92       	brcc	800141a2 <__avr32_f64_sub+0x2e>
80014192:	16 97       	mov	r7,r11
80014194:	12 9b       	mov	r11,r9
80014196:	0e 99       	mov	r9,r7
80014198:	14 97       	mov	r7,r10
8001419a:	10 9a       	mov	r10,r8
8001419c:	0e 98       	mov	r8,r7
8001419e:	ee 1c 80 00 	eorh	r12,0x8000
800141a2:	f6 07 16 14 	lsr	r7,r11,0x14
800141a6:	ab 7b       	lsl	r11,0xb
800141a8:	f7 ea 13 5b 	or	r11,r11,r10>>0x15
800141ac:	ab 7a       	lsl	r10,0xb
800141ae:	bf bb       	sbr	r11,0x1f
800141b0:	f2 06 16 14 	lsr	r6,r9,0x14
800141b4:	c4 40       	breq	8001423c <__avr32_f64_sub_opL_subnormal>
800141b6:	ab 79       	lsl	r9,0xb
800141b8:	f3 e8 13 59 	or	r9,r9,r8>>0x15
800141bc:	ab 78       	lsl	r8,0xb
800141be:	bf b9       	sbr	r9,0x1f

800141c0 <__avr32_f64_sub_opL_subnormal_done>:
800141c0:	e0 47 07 ff 	cp.w	r7,2047
800141c4:	c4 f0       	breq	80014262 <__avr32_f64_sub_opH_nan_or_inf>
800141c6:	0e 26       	rsub	r6,r7
800141c8:	c1 20       	breq	800141ec <__avr32_f64_sub_shift_done>
800141ca:	ec 05 11 20 	rsub	r5,r6,32
800141ce:	e0 46 00 20 	cp.w	r6,32
800141d2:	c7 c2       	brcc	800142ca <__avr32_f64_sub_longshift>
800141d4:	f0 05 09 4e 	lsl	lr,r8,r5
800141d8:	f2 05 09 45 	lsl	r5,r9,r5
800141dc:	f0 06 0a 48 	lsr	r8,r8,r6
800141e0:	f2 06 0a 49 	lsr	r9,r9,r6
800141e4:	0a 48       	or	r8,r5
800141e6:	58 0e       	cp.w	lr,0
800141e8:	5f 1e       	srne	lr
800141ea:	1c 48       	or	r8,lr

800141ec <__avr32_f64_sub_shift_done>:
800141ec:	10 1a       	sub	r10,r8
800141ee:	f6 09 01 4b 	sbc	r11,r11,r9
800141f2:	f6 06 12 00 	clz	r6,r11
800141f6:	c0 e0       	breq	80014212 <__avr32_f64_sub_longnormalize_done>
800141f8:	c7 83       	brcs	800142e8 <__avr32_f64_sub_longnormalize>
800141fa:	ec 0e 11 20 	rsub	lr,r6,32
800141fe:	f6 06 09 4b 	lsl	r11,r11,r6
80014202:	f4 0e 0a 4e 	lsr	lr,r10,lr
80014206:	1c 4b       	or	r11,lr
80014208:	f4 06 09 4a 	lsl	r10,r10,r6
8001420c:	0c 17       	sub	r7,r6
8001420e:	e0 8a 00 39 	brle	80014280 <__avr32_f64_sub_subnormal_result>

80014212 <__avr32_f64_sub_longnormalize_done>:
80014212:	f4 09 15 15 	lsl	r9,r10,0x15
80014216:	ab 9a       	lsr	r10,0xb
80014218:	f5 eb 11 5a 	or	r10,r10,r11<<0x15
8001421c:	ab 9b       	lsr	r11,0xb
8001421e:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
80014222:	18 4b       	or	r11,r12

80014224 <__avr32_f64_sub_round>:
80014224:	fc 17 80 00 	movh	r7,0x8000
80014228:	ed ba 00 00 	bld	r10,0x0
8001422c:	f7 b7 01 ff 	subne	r7,-1
80014230:	0e 39       	cp.w	r9,r7
80014232:	5f 29       	srhs	r9
80014234:	12 0a       	add	r10,r9
80014236:	5c 0b       	acr	r11
80014238:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8001423c <__avr32_f64_sub_opL_subnormal>:
8001423c:	ab 79       	lsl	r9,0xb
8001423e:	f3 e8 13 59 	or	r9,r9,r8>>0x15
80014242:	ab 78       	lsl	r8,0xb
80014244:	f3 e8 10 0e 	or	lr,r9,r8
80014248:	f9 b6 01 01 	movne	r6,1
8001424c:	ee 0e 11 00 	rsub	lr,r7,0
80014250:	f9 b7 00 01 	moveq	r7,1
80014254:	ef bb 00 1f 	bst	r11,0x1f
80014258:	f7 ea 10 0e 	or	lr,r11,r10
8001425c:	f9 b7 00 00 	moveq	r7,0
80014260:	cb 0b       	rjmp	800141c0 <__avr32_f64_sub_opL_subnormal_done>

80014262 <__avr32_f64_sub_opH_nan_or_inf>:
80014262:	bf db       	cbr	r11,0x1f
80014264:	f7 ea 10 0e 	or	lr,r11,r10
80014268:	c0 81       	brne	80014278 <__avr32_f64_sub_return_nan>
8001426a:	e0 46 07 ff 	cp.w	r6,2047
8001426e:	c0 50       	breq	80014278 <__avr32_f64_sub_return_nan>
80014270:	f9 e7 11 4b 	or	r11,r12,r7<<0x14
80014274:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80014278 <__avr32_f64_sub_return_nan>:
80014278:	3f fa       	mov	r10,-1
8001427a:	3f fb       	mov	r11,-1
8001427c:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80014280 <__avr32_f64_sub_subnormal_result>:
80014280:	5c 37       	neg	r7
80014282:	2f f7       	sub	r7,-1
80014284:	f1 b7 04 c0 	satu	r7,0x6
80014288:	e0 47 00 20 	cp.w	r7,32
8001428c:	c1 14       	brge	800142ae <__avr32_f64_sub_subnormal_result+0x2e>
8001428e:	ee 08 11 20 	rsub	r8,r7,32
80014292:	f4 08 09 49 	lsl	r9,r10,r8
80014296:	5f 16       	srne	r6
80014298:	f4 07 0a 4a 	lsr	r10,r10,r7
8001429c:	0c 4a       	or	r10,r6
8001429e:	f6 08 09 49 	lsl	r9,r11,r8
800142a2:	f5 e9 10 0a 	or	r10,r10,r9
800142a6:	f4 07 0a 4b 	lsr	r11,r10,r7
800142aa:	30 07       	mov	r7,0
800142ac:	cb 3b       	rjmp	80014212 <__avr32_f64_sub_longnormalize_done>
800142ae:	ee 08 11 40 	rsub	r8,r7,64
800142b2:	f6 08 09 49 	lsl	r9,r11,r8
800142b6:	14 49       	or	r9,r10
800142b8:	5f 16       	srne	r6
800142ba:	f6 07 0a 4a 	lsr	r10,r11,r7
800142be:	0c 4a       	or	r10,r6
800142c0:	30 0b       	mov	r11,0
800142c2:	30 07       	mov	r7,0
800142c4:	ca 7b       	rjmp	80014212 <__avr32_f64_sub_longnormalize_done>
800142c6:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

800142ca <__avr32_f64_sub_longshift>:
800142ca:	f1 b6 04 c0 	satu	r6,0x6
800142ce:	f0 0e 17 00 	moveq	lr,r8
800142d2:	c0 40       	breq	800142da <__avr32_f64_sub_longshift+0x10>
800142d4:	f2 05 09 4e 	lsl	lr,r9,r5
800142d8:	10 4e       	or	lr,r8
800142da:	f2 06 0a 48 	lsr	r8,r9,r6
800142de:	30 09       	mov	r9,0
800142e0:	58 0e       	cp.w	lr,0
800142e2:	5f 1e       	srne	lr
800142e4:	1c 48       	or	r8,lr
800142e6:	c8 3b       	rjmp	800141ec <__avr32_f64_sub_shift_done>

800142e8 <__avr32_f64_sub_longnormalize>:
800142e8:	f4 06 12 00 	clz	r6,r10
800142ec:	f9 b7 03 00 	movlo	r7,0
800142f0:	f9 b6 03 00 	movlo	r6,0
800142f4:	f9 bc 03 00 	movlo	r12,0
800142f8:	f7 b6 02 e0 	subhs	r6,-32
800142fc:	f4 06 09 4b 	lsl	r11,r10,r6
80014300:	30 0a       	mov	r10,0
80014302:	0c 17       	sub	r7,r6
80014304:	fe 9a ff be 	brle	80014280 <__avr32_f64_sub_subnormal_result>
80014308:	c8 5b       	rjmp	80014212 <__avr32_f64_sub_longnormalize_done>
8001430a:	d7 03       	nop

8001430c <__avr32_f64_add_from_sub>:
8001430c:	ee 19 80 00 	eorh	r9,0x8000

80014310 <__avr32_f64_add>:
80014310:	f7 e9 20 0c 	eor	r12,r11,r9
80014314:	fe 96 ff 2e 	brmi	80014170 <__avr32_f64_sub_from_add>
80014318:	eb cd 40 e0 	pushm	r5-r7,lr
8001431c:	16 9c       	mov	r12,r11
8001431e:	e6 1c 80 00 	andh	r12,0x8000,COH
80014322:	bf db       	cbr	r11,0x1f
80014324:	bf d9       	cbr	r9,0x1f
80014326:	12 3b       	cp.w	r11,r9
80014328:	c0 72       	brcc	80014336 <__avr32_f64_add+0x26>
8001432a:	16 97       	mov	r7,r11
8001432c:	12 9b       	mov	r11,r9
8001432e:	0e 99       	mov	r9,r7
80014330:	14 97       	mov	r7,r10
80014332:	10 9a       	mov	r10,r8
80014334:	0e 98       	mov	r8,r7
80014336:	30 0e       	mov	lr,0
80014338:	ef db c2 8b 	bfextu	r7,r11,0x14,0xb
8001433c:	f7 db c0 14 	bfextu	r11,r11,0x0,0x14
80014340:	b5 ab       	sbr	r11,0x14
80014342:	ed d9 c2 8b 	bfextu	r6,r9,0x14,0xb
80014346:	c6 20       	breq	8001440a <__avr32_f64_add_op2_subnormal>
80014348:	f3 d9 c0 14 	bfextu	r9,r9,0x0,0x14
8001434c:	b5 a9       	sbr	r9,0x14
8001434e:	e0 47 07 ff 	cp.w	r7,2047
80014352:	c2 80       	breq	800143a2 <__avr32_f64_add_opH_nan_or_inf>
80014354:	0e 26       	rsub	r6,r7
80014356:	c1 20       	breq	8001437a <__avr32_f64_add_shift_done>
80014358:	e0 46 00 36 	cp.w	r6,54
8001435c:	c1 52       	brcc	80014386 <__avr32_f64_add_res_of_done>
8001435e:	ec 05 11 20 	rsub	r5,r6,32
80014362:	e0 46 00 20 	cp.w	r6,32
80014366:	c3 52       	brcc	800143d0 <__avr32_f64_add_longshift>
80014368:	f0 05 09 4e 	lsl	lr,r8,r5
8001436c:	f2 05 09 45 	lsl	r5,r9,r5
80014370:	f0 06 0a 48 	lsr	r8,r8,r6
80014374:	f2 06 0a 49 	lsr	r9,r9,r6
80014378:	0a 48       	or	r8,r5

8001437a <__avr32_f64_add_shift_done>:
8001437a:	10 0a       	add	r10,r8
8001437c:	f6 09 00 4b 	adc	r11,r11,r9
80014380:	ed bb 00 15 	bld	r11,0x15
80014384:	c3 40       	breq	800143ec <__avr32_f64_add_res_of>

80014386 <__avr32_f64_add_res_of_done>:
80014386:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
8001438a:	18 4b       	or	r11,r12

8001438c <__avr32_f64_add_round>:
8001438c:	f9 da c0 01 	bfextu	r12,r10,0x0,0x1
80014390:	18 4e       	or	lr,r12
80014392:	ee 1e 80 00 	eorh	lr,0x8000
80014396:	f1 be 04 20 	satu	lr,0x1
8001439a:	1c 0a       	add	r10,lr
8001439c:	5c 0b       	acr	r11
8001439e:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

800143a2 <__avr32_f64_add_opH_nan_or_inf>:
800143a2:	b5 cb       	cbr	r11,0x14
800143a4:	f7 ea 10 0e 	or	lr,r11,r10
800143a8:	c1 01       	brne	800143c8 <__avr32_f64_add_return_nan>
800143aa:	e0 46 07 ff 	cp.w	r6,2047
800143ae:	c0 30       	breq	800143b4 <__avr32_f64_add_opL_nan_or_inf>
800143b0:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

800143b4 <__avr32_f64_add_opL_nan_or_inf>:
800143b4:	b5 c9       	cbr	r9,0x14
800143b6:	f3 e8 10 0e 	or	lr,r9,r8
800143ba:	c0 71       	brne	800143c8 <__avr32_f64_add_return_nan>
800143bc:	30 0a       	mov	r10,0
800143be:	fc 1b 7f f0 	movh	r11,0x7ff0
800143c2:	18 4b       	or	r11,r12
800143c4:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

800143c8 <__avr32_f64_add_return_nan>:
800143c8:	3f fa       	mov	r10,-1
800143ca:	3f fb       	mov	r11,-1
800143cc:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

800143d0 <__avr32_f64_add_longshift>:
800143d0:	f1 b6 04 c0 	satu	r6,0x6
800143d4:	f0 0e 17 00 	moveq	lr,r8
800143d8:	c0 60       	breq	800143e4 <__avr32_f64_add_longshift+0x14>
800143da:	f2 05 09 4e 	lsl	lr,r9,r5
800143de:	58 08       	cp.w	r8,0
800143e0:	5f 18       	srne	r8
800143e2:	10 4e       	or	lr,r8
800143e4:	f2 06 0a 48 	lsr	r8,r9,r6
800143e8:	30 09       	mov	r9,0
800143ea:	cc 8b       	rjmp	8001437a <__avr32_f64_add_shift_done>

800143ec <__avr32_f64_add_res_of>:
800143ec:	fd ee 10 1e 	or	lr,lr,lr<<0x1
800143f0:	a1 9b       	lsr	r11,0x1
800143f2:	5d 0a       	ror	r10
800143f4:	5d 0e       	ror	lr
800143f6:	2f f7       	sub	r7,-1
800143f8:	e0 47 07 ff 	cp.w	r7,2047
800143fc:	f9 ba 00 00 	moveq	r10,0
80014400:	f9 bb 00 00 	moveq	r11,0
80014404:	f9 be 00 00 	moveq	lr,0
80014408:	cb fb       	rjmp	80014386 <__avr32_f64_add_res_of_done>

8001440a <__avr32_f64_add_op2_subnormal>:
8001440a:	30 16       	mov	r6,1
8001440c:	58 07       	cp.w	r7,0
8001440e:	ca 01       	brne	8001434e <__avr32_f64_add+0x3e>
80014410:	b5 cb       	cbr	r11,0x14
80014412:	10 0a       	add	r10,r8
80014414:	f6 09 00 4b 	adc	r11,r11,r9
80014418:	18 4b       	or	r11,r12
8001441a:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8001441e:	d7 03       	nop

80014420 <__avr32_f64_to_u32>:
80014420:	58 0b       	cp.w	r11,0
80014422:	5e 6d       	retmi	0

80014424 <__avr32_f64_to_s32>:
80014424:	f6 0c 15 01 	lsl	r12,r11,0x1
80014428:	b5 9c       	lsr	r12,0x15
8001442a:	e0 2c 03 ff 	sub	r12,1023
8001442e:	5e 3d       	retlo	0
80014430:	f8 0c 11 1f 	rsub	r12,r12,31
80014434:	16 99       	mov	r9,r11
80014436:	ab 7b       	lsl	r11,0xb
80014438:	bf bb       	sbr	r11,0x1f
8001443a:	f7 ea 13 5b 	or	r11,r11,r10>>0x15
8001443e:	f6 0c 0a 4b 	lsr	r11,r11,r12
80014442:	a1 79       	lsl	r9,0x1
80014444:	5e 2b       	reths	r11
80014446:	5c 3b       	neg	r11
80014448:	5e fb       	retal	r11

8001444a <__avr32_u32_to_f64>:
8001444a:	f8 cb 00 00 	sub	r11,r12,0
8001444e:	30 0c       	mov	r12,0
80014450:	c0 38       	rjmp	80014456 <__avr32_s32_to_f64+0x4>

80014452 <__avr32_s32_to_f64>:
80014452:	18 9b       	mov	r11,r12
80014454:	5c 4b       	abs	r11
80014456:	30 0a       	mov	r10,0
80014458:	5e 0b       	reteq	r11
8001445a:	d4 01       	pushm	lr
8001445c:	e0 69 04 1e 	mov	r9,1054
80014460:	f6 08 12 00 	clz	r8,r11
80014464:	c1 70       	breq	80014492 <__avr32_s32_to_f64+0x40>
80014466:	c0 c3       	brcs	8001447e <__avr32_s32_to_f64+0x2c>
80014468:	f0 0e 11 20 	rsub	lr,r8,32
8001446c:	f6 08 09 4b 	lsl	r11,r11,r8
80014470:	f4 0e 0a 4e 	lsr	lr,r10,lr
80014474:	1c 4b       	or	r11,lr
80014476:	f4 08 09 4a 	lsl	r10,r10,r8
8001447a:	10 19       	sub	r9,r8
8001447c:	c0 b8       	rjmp	80014492 <__avr32_s32_to_f64+0x40>
8001447e:	f4 08 12 00 	clz	r8,r10
80014482:	f9 b8 03 00 	movlo	r8,0
80014486:	f7 b8 02 e0 	subhs	r8,-32
8001448a:	f4 08 09 4b 	lsl	r11,r10,r8
8001448e:	30 0a       	mov	r10,0
80014490:	10 19       	sub	r9,r8
80014492:	58 09       	cp.w	r9,0
80014494:	e0 89 00 30 	brgt	800144f4 <__avr32_s32_to_f64+0xa2>
80014498:	5c 39       	neg	r9
8001449a:	2f f9       	sub	r9,-1
8001449c:	e0 49 00 36 	cp.w	r9,54
800144a0:	c0 43       	brcs	800144a8 <__avr32_s32_to_f64+0x56>
800144a2:	30 0b       	mov	r11,0
800144a4:	30 0a       	mov	r10,0
800144a6:	c2 68       	rjmp	800144f2 <__avr32_s32_to_f64+0xa0>
800144a8:	2f 69       	sub	r9,-10
800144aa:	f2 08 11 20 	rsub	r8,r9,32
800144ae:	e0 49 00 20 	cp.w	r9,32
800144b2:	c0 b2       	brcc	800144c8 <__avr32_s32_to_f64+0x76>
800144b4:	f4 08 09 4e 	lsl	lr,r10,r8
800144b8:	f6 08 09 48 	lsl	r8,r11,r8
800144bc:	f4 09 0a 4a 	lsr	r10,r10,r9
800144c0:	f6 09 0a 4b 	lsr	r11,r11,r9
800144c4:	10 4b       	or	r11,r8
800144c6:	c0 88       	rjmp	800144d6 <__avr32_s32_to_f64+0x84>
800144c8:	f6 08 09 4e 	lsl	lr,r11,r8
800144cc:	14 4e       	or	lr,r10
800144ce:	16 9a       	mov	r10,r11
800144d0:	30 0b       	mov	r11,0
800144d2:	f4 09 0a 4a 	lsr	r10,r10,r9
800144d6:	ed ba 00 00 	bld	r10,0x0
800144da:	c0 92       	brcc	800144ec <__avr32_s32_to_f64+0x9a>
800144dc:	1c 7e       	tst	lr,lr
800144de:	c0 41       	brne	800144e6 <__avr32_s32_to_f64+0x94>
800144e0:	ed ba 00 01 	bld	r10,0x1
800144e4:	c0 42       	brcc	800144ec <__avr32_s32_to_f64+0x9a>
800144e6:	2f fa       	sub	r10,-1
800144e8:	f7 bb 02 ff 	subhs	r11,-1
800144ec:	5c fc       	rol	r12
800144ee:	5d 0b       	ror	r11
800144f0:	5d 0a       	ror	r10
800144f2:	d8 02       	popm	pc
800144f4:	e0 68 03 ff 	mov	r8,1023
800144f8:	ed ba 00 0b 	bld	r10,0xb
800144fc:	f7 b8 00 ff 	subeq	r8,-1
80014500:	10 0a       	add	r10,r8
80014502:	5c 0b       	acr	r11
80014504:	f7 b9 03 fe 	sublo	r9,-2
80014508:	e0 49 07 ff 	cp.w	r9,2047
8001450c:	c0 55       	brlt	80014516 <__avr32_s32_to_f64+0xc4>
8001450e:	30 0a       	mov	r10,0
80014510:	fc 1b ff e0 	movh	r11,0xffe0
80014514:	c0 c8       	rjmp	8001452c <__floatsidf_return_op1>
80014516:	ed bb 00 1f 	bld	r11,0x1f
8001451a:	f7 b9 01 01 	subne	r9,1
8001451e:	ab 9a       	lsr	r10,0xb
80014520:	f5 eb 11 5a 	or	r10,r10,r11<<0x15
80014524:	a1 7b       	lsl	r11,0x1
80014526:	ab 9b       	lsr	r11,0xb
80014528:	f7 e9 11 5b 	or	r11,r11,r9<<0x15

8001452c <__floatsidf_return_op1>:
8001452c:	a1 7c       	lsl	r12,0x1
8001452e:	5d 0b       	ror	r11
80014530:	d8 02       	popm	pc

80014532 <__avr32_f64_cmp_eq>:
80014532:	10 3a       	cp.w	r10,r8
80014534:	f2 0b 13 00 	cpc	r11,r9
80014538:	c0 80       	breq	80014548 <__avr32_f64_cmp_eq+0x16>
8001453a:	a1 7b       	lsl	r11,0x1
8001453c:	a1 79       	lsl	r9,0x1
8001453e:	14 4b       	or	r11,r10
80014540:	12 4b       	or	r11,r9
80014542:	10 4b       	or	r11,r8
80014544:	5e 0f       	reteq	1
80014546:	5e fd       	retal	0
80014548:	a1 7b       	lsl	r11,0x1
8001454a:	fc 1c ff e0 	movh	r12,0xffe0
8001454e:	58 0a       	cp.w	r10,0
80014550:	f8 0b 13 00 	cpc	r11,r12
80014554:	5e 8f       	retls	1
80014556:	5e fd       	retal	0

80014558 <__avr32_f64_cmp_ge>:
80014558:	1a de       	st.w	--sp,lr
8001455a:	1a d7       	st.w	--sp,r7
8001455c:	a1 7b       	lsl	r11,0x1
8001455e:	5f 3c       	srlo	r12
80014560:	a1 79       	lsl	r9,0x1
80014562:	5f 37       	srlo	r7
80014564:	5c fc       	rol	r12
80014566:	fc 1e ff e0 	movh	lr,0xffe0
8001456a:	58 0a       	cp.w	r10,0
8001456c:	fc 0b 13 00 	cpc	r11,lr
80014570:	e0 8b 00 1d 	brhi	800145aa <__avr32_f64_cmp_ge+0x52>
80014574:	58 08       	cp.w	r8,0
80014576:	fc 09 13 00 	cpc	r9,lr
8001457a:	e0 8b 00 18 	brhi	800145aa <__avr32_f64_cmp_ge+0x52>
8001457e:	58 0b       	cp.w	r11,0
80014580:	f5 ba 00 00 	subfeq	r10,0
80014584:	c1 50       	breq	800145ae <__avr32_f64_cmp_ge+0x56>
80014586:	1b 07       	ld.w	r7,sp++
80014588:	1b 0e       	ld.w	lr,sp++
8001458a:	58 3c       	cp.w	r12,3
8001458c:	c0 a0       	breq	800145a0 <__avr32_f64_cmp_ge+0x48>
8001458e:	58 1c       	cp.w	r12,1
80014590:	c0 33       	brcs	80014596 <__avr32_f64_cmp_ge+0x3e>
80014592:	5e 0f       	reteq	1
80014594:	5e 1d       	retne	0
80014596:	10 3a       	cp.w	r10,r8
80014598:	f2 0b 13 00 	cpc	r11,r9
8001459c:	5e 2f       	reths	1
8001459e:	5e 3d       	retlo	0
800145a0:	14 38       	cp.w	r8,r10
800145a2:	f6 09 13 00 	cpc	r9,r11
800145a6:	5e 2f       	reths	1
800145a8:	5e 3d       	retlo	0
800145aa:	1b 07       	ld.w	r7,sp++
800145ac:	d8 0a       	popm	pc,r12=0
800145ae:	58 17       	cp.w	r7,1
800145b0:	5f 0c       	sreq	r12
800145b2:	58 09       	cp.w	r9,0
800145b4:	f5 b8 00 00 	subfeq	r8,0
800145b8:	1b 07       	ld.w	r7,sp++
800145ba:	1b 0e       	ld.w	lr,sp++
800145bc:	5e 0f       	reteq	1
800145be:	5e fc       	retal	r12

800145c0 <__avr32_f64_cmp_lt>:
800145c0:	1a de       	st.w	--sp,lr
800145c2:	1a d7       	st.w	--sp,r7
800145c4:	a1 7b       	lsl	r11,0x1
800145c6:	5f 3c       	srlo	r12
800145c8:	a1 79       	lsl	r9,0x1
800145ca:	5f 37       	srlo	r7
800145cc:	5c fc       	rol	r12
800145ce:	fc 1e ff e0 	movh	lr,0xffe0
800145d2:	58 0a       	cp.w	r10,0
800145d4:	fc 0b 13 00 	cpc	r11,lr
800145d8:	e0 8b 00 1d 	brhi	80014612 <__avr32_f64_cmp_lt+0x52>
800145dc:	58 08       	cp.w	r8,0
800145de:	fc 09 13 00 	cpc	r9,lr
800145e2:	e0 8b 00 18 	brhi	80014612 <__avr32_f64_cmp_lt+0x52>
800145e6:	58 0b       	cp.w	r11,0
800145e8:	f5 ba 00 00 	subfeq	r10,0
800145ec:	c1 50       	breq	80014616 <__avr32_f64_cmp_lt+0x56>
800145ee:	1b 07       	ld.w	r7,sp++
800145f0:	1b 0e       	ld.w	lr,sp++
800145f2:	58 3c       	cp.w	r12,3
800145f4:	c0 a0       	breq	80014608 <__avr32_f64_cmp_lt+0x48>
800145f6:	58 1c       	cp.w	r12,1
800145f8:	c0 33       	brcs	800145fe <__avr32_f64_cmp_lt+0x3e>
800145fa:	5e 0d       	reteq	0
800145fc:	5e 1f       	retne	1
800145fe:	10 3a       	cp.w	r10,r8
80014600:	f2 0b 13 00 	cpc	r11,r9
80014604:	5e 2d       	reths	0
80014606:	5e 3f       	retlo	1
80014608:	14 38       	cp.w	r8,r10
8001460a:	f6 09 13 00 	cpc	r9,r11
8001460e:	5e 2d       	reths	0
80014610:	5e 3f       	retlo	1
80014612:	1b 07       	ld.w	r7,sp++
80014614:	d8 0a       	popm	pc,r12=0
80014616:	58 17       	cp.w	r7,1
80014618:	5f 1c       	srne	r12
8001461a:	58 09       	cp.w	r9,0
8001461c:	f5 b8 00 00 	subfeq	r8,0
80014620:	1b 07       	ld.w	r7,sp++
80014622:	1b 0e       	ld.w	lr,sp++
80014624:	5e 0d       	reteq	0
80014626:	5e fc       	retal	r12

80014628 <__avr32_f64_div>:
80014628:	eb cd 40 ff 	pushm	r0-r7,lr
8001462c:	f7 e9 20 0e 	eor	lr,r11,r9
80014630:	f6 07 16 14 	lsr	r7,r11,0x14
80014634:	a9 7b       	lsl	r11,0x9
80014636:	f7 ea 13 7b 	or	r11,r11,r10>>0x17
8001463a:	a9 7a       	lsl	r10,0x9
8001463c:	bd bb       	sbr	r11,0x1d
8001463e:	e4 1b 3f ff 	andh	r11,0x3fff
80014642:	ab d7       	cbr	r7,0xb
80014644:	e0 80 00 cc 	breq	800147dc <__avr32_f64_div_round_subnormal+0x54>
80014648:	e0 47 07 ff 	cp.w	r7,2047
8001464c:	e0 84 00 b5 	brge	800147b6 <__avr32_f64_div_round_subnormal+0x2e>
80014650:	f2 06 16 14 	lsr	r6,r9,0x14
80014654:	a9 79       	lsl	r9,0x9
80014656:	f3 e8 13 79 	or	r9,r9,r8>>0x17
8001465a:	a9 78       	lsl	r8,0x9
8001465c:	bd b9       	sbr	r9,0x1d
8001465e:	e4 19 3f ff 	andh	r9,0x3fff
80014662:	ab d6       	cbr	r6,0xb
80014664:	e0 80 00 e2 	breq	80014828 <__avr32_f64_div_round_subnormal+0xa0>
80014668:	e0 46 07 ff 	cp.w	r6,2047
8001466c:	e0 84 00 b2 	brge	800147d0 <__avr32_f64_div_round_subnormal+0x48>
80014670:	0c 17       	sub	r7,r6
80014672:	fe 37 fc 01 	sub	r7,-1023
80014676:	fc 1c 80 00 	movh	r12,0x8000
8001467a:	f8 03 16 01 	lsr	r3,r12,0x1
8001467e:	e9 d9 c3 62 	bfextu	r4,r9,0x1b,0x2
80014682:	5c d4       	com	r4
80014684:	e7 d4 d3 82 	bfins	r3,r4,0x1c,0x2
80014688:	e6 09 06 44 	mulu.d	r4,r3,r9
8001468c:	f8 05 01 25 	sub	r5,r12,r5<<0x2
80014690:	e6 05 06 44 	mulu.d	r4,r3,r5
80014694:	ea 03 15 02 	lsl	r3,r5,0x2
80014698:	e6 09 06 44 	mulu.d	r4,r3,r9
8001469c:	f8 05 01 25 	sub	r5,r12,r5<<0x2
800146a0:	e6 05 06 44 	mulu.d	r4,r3,r5
800146a4:	ea 03 15 02 	lsl	r3,r5,0x2
800146a8:	e6 09 06 44 	mulu.d	r4,r3,r9
800146ac:	f8 05 01 25 	sub	r5,r12,r5<<0x2
800146b0:	e6 05 06 44 	mulu.d	r4,r3,r5
800146b4:	ea 03 15 02 	lsl	r3,r5,0x2
800146b8:	e6 08 06 40 	mulu.d	r0,r3,r8
800146bc:	e4 09 07 40 	macu.d	r0,r2,r9
800146c0:	e6 09 06 44 	mulu.d	r4,r3,r9
800146c4:	02 04       	add	r4,r1
800146c6:	5c 05       	acr	r5
800146c8:	a3 65       	lsl	r5,0x2
800146ca:	eb e4 13 e5 	or	r5,r5,r4>>0x1e
800146ce:	a3 64       	lsl	r4,0x2
800146d0:	5c 34       	neg	r4
800146d2:	f8 05 01 45 	sbc	r5,r12,r5
800146d6:	e6 04 06 40 	mulu.d	r0,r3,r4
800146da:	e4 05 07 40 	macu.d	r0,r2,r5
800146de:	e6 05 06 44 	mulu.d	r4,r3,r5
800146e2:	02 04       	add	r4,r1
800146e4:	5c 05       	acr	r5
800146e6:	ea 03 15 02 	lsl	r3,r5,0x2
800146ea:	e7 e4 13 e3 	or	r3,r3,r4>>0x1e
800146ee:	e8 02 15 02 	lsl	r2,r4,0x2
800146f2:	e6 08 06 40 	mulu.d	r0,r3,r8
800146f6:	e4 09 07 40 	macu.d	r0,r2,r9
800146fa:	e6 09 06 44 	mulu.d	r4,r3,r9
800146fe:	02 04       	add	r4,r1
80014700:	5c 05       	acr	r5
80014702:	a3 65       	lsl	r5,0x2
80014704:	eb e4 13 e5 	or	r5,r5,r4>>0x1e
80014708:	a3 64       	lsl	r4,0x2
8001470a:	5c 34       	neg	r4
8001470c:	f8 05 01 45 	sbc	r5,r12,r5
80014710:	e6 04 06 40 	mulu.d	r0,r3,r4
80014714:	e4 05 07 40 	macu.d	r0,r2,r5
80014718:	e6 05 06 44 	mulu.d	r4,r3,r5
8001471c:	02 04       	add	r4,r1
8001471e:	5c 05       	acr	r5
80014720:	ea 03 15 02 	lsl	r3,r5,0x2
80014724:	e7 e4 13 e3 	or	r3,r3,r4>>0x1e
80014728:	e8 02 15 02 	lsl	r2,r4,0x2
8001472c:	e6 0a 06 40 	mulu.d	r0,r3,r10
80014730:	e4 0b 07 40 	macu.d	r0,r2,r11
80014734:	e6 0b 06 42 	mulu.d	r2,r3,r11
80014738:	02 02       	add	r2,r1
8001473a:	5c 03       	acr	r3
8001473c:	ed b3 00 1c 	bld	r3,0x1c
80014740:	c0 90       	breq	80014752 <__avr32_f64_div+0x12a>
80014742:	a1 72       	lsl	r2,0x1
80014744:	5c f3       	rol	r3
80014746:	20 17       	sub	r7,1
80014748:	a3 9a       	lsr	r10,0x3
8001474a:	f5 eb 11 da 	or	r10,r10,r11<<0x1d
8001474e:	a3 9b       	lsr	r11,0x3
80014750:	c0 58       	rjmp	8001475a <__avr32_f64_div+0x132>
80014752:	a5 8a       	lsr	r10,0x4
80014754:	f5 eb 11 ca 	or	r10,r10,r11<<0x1c
80014758:	a5 8b       	lsr	r11,0x4
8001475a:	58 07       	cp.w	r7,0
8001475c:	e0 8a 00 8b 	brle	80014872 <__avr32_f64_div_res_subnormal>
80014760:	e0 12 ff 00 	andl	r2,0xff00
80014764:	e8 12 00 80 	orl	r2,0x80
80014768:	e6 08 06 40 	mulu.d	r0,r3,r8
8001476c:	e4 09 07 40 	macu.d	r0,r2,r9
80014770:	e4 08 06 44 	mulu.d	r4,r2,r8
80014774:	e6 09 06 48 	mulu.d	r8,r3,r9
80014778:	00 05       	add	r5,r0
8001477a:	f0 01 00 48 	adc	r8,r8,r1
8001477e:	5c 09       	acr	r9
80014780:	f9 d2 c1 01 	bfextu	r12,r2,0x8,0x1
80014784:	58 04       	cp.w	r4,0
80014786:	5c 25       	cpc	r5

80014788 <__avr32_f64_div_round_subnormal>:
80014788:	f4 08 13 00 	cpc	r8,r10
8001478c:	f6 09 13 00 	cpc	r9,r11
80014790:	5f 36       	srlo	r6
80014792:	f8 06 17 00 	moveq	r6,r12
80014796:	e4 0a 16 08 	lsr	r10,r2,0x8
8001479a:	f5 e3 11 8a 	or	r10,r10,r3<<0x18
8001479e:	e6 0b 16 08 	lsr	r11,r3,0x8
800147a2:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
800147a6:	ed be 00 1f 	bld	lr,0x1f
800147aa:	ef bb 00 1f 	bst	r11,0x1f
800147ae:	0c 0a       	add	r10,r6
800147b0:	5c 0b       	acr	r11
800147b2:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
800147b6:	e4 1b 00 0f 	andh	r11,0xf
800147ba:	14 4b       	or	r11,r10
800147bc:	e0 81 00 a7 	brne	8001490a <__avr32_f64_div_res_subnormal+0x98>
800147c0:	f2 06 16 14 	lsr	r6,r9,0x14
800147c4:	ab d6       	cbr	r6,0xb
800147c6:	e0 46 07 ff 	cp.w	r6,2047
800147ca:	e0 81 00 a4 	brne	80014912 <__avr32_f64_div_res_subnormal+0xa0>
800147ce:	c9 e8       	rjmp	8001490a <__avr32_f64_div_res_subnormal+0x98>
800147d0:	e4 19 00 0f 	andh	r9,0xf
800147d4:	10 49       	or	r9,r8
800147d6:	e0 81 00 9a 	brne	8001490a <__avr32_f64_div_res_subnormal+0x98>
800147da:	c9 28       	rjmp	800148fe <__avr32_f64_div_res_subnormal+0x8c>
800147dc:	a3 7b       	lsl	r11,0x3
800147de:	f7 ea 13 db 	or	r11,r11,r10>>0x1d
800147e2:	a3 7a       	lsl	r10,0x3
800147e4:	f5 eb 10 04 	or	r4,r10,r11
800147e8:	e0 80 00 a0 	breq	80014928 <__avr32_f64_div_op1_zero>
800147ec:	f6 04 12 00 	clz	r4,r11
800147f0:	c1 70       	breq	8001481e <__avr32_f64_div_round_subnormal+0x96>
800147f2:	c0 c3       	brcs	8001480a <__avr32_f64_div_round_subnormal+0x82>
800147f4:	e8 05 11 20 	rsub	r5,r4,32
800147f8:	f6 04 09 4b 	lsl	r11,r11,r4
800147fc:	f4 05 0a 45 	lsr	r5,r10,r5
80014800:	0a 4b       	or	r11,r5
80014802:	f4 04 09 4a 	lsl	r10,r10,r4
80014806:	08 17       	sub	r7,r4
80014808:	c0 b8       	rjmp	8001481e <__avr32_f64_div_round_subnormal+0x96>
8001480a:	f4 04 12 00 	clz	r4,r10
8001480e:	f9 b4 03 00 	movlo	r4,0
80014812:	f7 b4 02 e0 	subhs	r4,-32
80014816:	f4 04 09 4b 	lsl	r11,r10,r4
8001481a:	30 0a       	mov	r10,0
8001481c:	08 17       	sub	r7,r4
8001481e:	a3 8a       	lsr	r10,0x2
80014820:	f5 eb 11 ea 	or	r10,r10,r11<<0x1e
80014824:	a3 8b       	lsr	r11,0x2
80014826:	c1 1b       	rjmp	80014648 <__avr32_f64_div+0x20>
80014828:	a3 79       	lsl	r9,0x3
8001482a:	f3 e8 13 d9 	or	r9,r9,r8>>0x1d
8001482e:	a3 78       	lsl	r8,0x3
80014830:	f3 e8 10 04 	or	r4,r9,r8
80014834:	c6 f0       	breq	80014912 <__avr32_f64_div_res_subnormal+0xa0>
80014836:	f2 04 12 00 	clz	r4,r9
8001483a:	c1 70       	breq	80014868 <__avr32_f64_div_round_subnormal+0xe0>
8001483c:	c0 c3       	brcs	80014854 <__avr32_f64_div_round_subnormal+0xcc>
8001483e:	e8 05 11 20 	rsub	r5,r4,32
80014842:	f2 04 09 49 	lsl	r9,r9,r4
80014846:	f0 05 0a 45 	lsr	r5,r8,r5
8001484a:	0a 49       	or	r9,r5
8001484c:	f0 04 09 48 	lsl	r8,r8,r4
80014850:	08 16       	sub	r6,r4
80014852:	c0 b8       	rjmp	80014868 <__avr32_f64_div_round_subnormal+0xe0>
80014854:	f0 04 12 00 	clz	r4,r8
80014858:	f9 b4 03 00 	movlo	r4,0
8001485c:	f7 b4 02 e0 	subhs	r4,-32
80014860:	f0 04 09 49 	lsl	r9,r8,r4
80014864:	30 08       	mov	r8,0
80014866:	08 16       	sub	r6,r4
80014868:	a3 88       	lsr	r8,0x2
8001486a:	f1 e9 11 e8 	or	r8,r8,r9<<0x1e
8001486e:	a3 89       	lsr	r9,0x2
80014870:	cf ca       	rjmp	80014668 <__avr32_f64_div+0x40>

80014872 <__avr32_f64_div_res_subnormal>:
80014872:	5c 37       	neg	r7
80014874:	2f f7       	sub	r7,-1
80014876:	f1 b7 04 c0 	satu	r7,0x6
8001487a:	e0 47 00 20 	cp.w	r7,32
8001487e:	c1 54       	brge	800148a8 <__avr32_f64_div_res_subnormal+0x36>
80014880:	ee 06 11 20 	rsub	r6,r7,32
80014884:	e4 07 0a 42 	lsr	r2,r2,r7
80014888:	e6 06 09 4c 	lsl	r12,r3,r6
8001488c:	18 42       	or	r2,r12
8001488e:	e6 07 0a 43 	lsr	r3,r3,r7
80014892:	f4 06 09 41 	lsl	r1,r10,r6
80014896:	f4 07 0a 4a 	lsr	r10,r10,r7
8001489a:	f6 06 09 4c 	lsl	r12,r11,r6
8001489e:	18 4a       	or	r10,r12
800148a0:	f6 07 0a 4b 	lsr	r11,r11,r7
800148a4:	30 00       	mov	r0,0
800148a6:	c1 58       	rjmp	800148d0 <__avr32_f64_div_res_subnormal+0x5e>
800148a8:	ee 06 11 20 	rsub	r6,r7,32
800148ac:	f9 b0 00 00 	moveq	r0,0
800148b0:	f9 bc 00 00 	moveq	r12,0
800148b4:	c0 50       	breq	800148be <__avr32_f64_div_res_subnormal+0x4c>
800148b6:	f4 06 09 40 	lsl	r0,r10,r6
800148ba:	f6 06 09 4c 	lsl	r12,r11,r6
800148be:	e6 07 0a 42 	lsr	r2,r3,r7
800148c2:	30 03       	mov	r3,0
800148c4:	f4 07 0a 41 	lsr	r1,r10,r7
800148c8:	18 41       	or	r1,r12
800148ca:	f6 07 0a 4a 	lsr	r10,r11,r7
800148ce:	30 0b       	mov	r11,0
800148d0:	e0 12 ff 00 	andl	r2,0xff00
800148d4:	e8 12 00 80 	orl	r2,0x80
800148d8:	e6 08 06 46 	mulu.d	r6,r3,r8
800148dc:	e4 09 07 46 	macu.d	r6,r2,r9
800148e0:	e4 08 06 44 	mulu.d	r4,r2,r8
800148e4:	e6 09 06 48 	mulu.d	r8,r3,r9
800148e8:	0c 05       	add	r5,r6
800148ea:	f0 07 00 48 	adc	r8,r8,r7
800148ee:	5c 09       	acr	r9
800148f0:	30 07       	mov	r7,0
800148f2:	f9 d2 c1 01 	bfextu	r12,r2,0x8,0x1
800148f6:	00 34       	cp.w	r4,r0
800148f8:	e2 05 13 00 	cpc	r5,r1
800148fc:	c4 6b       	rjmp	80014788 <__avr32_f64_div_round_subnormal>
800148fe:	1c 9b       	mov	r11,lr
80014900:	e6 1b 80 00 	andh	r11,0x8000,COH
80014904:	30 0a       	mov	r10,0
80014906:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
8001490a:	3f fb       	mov	r11,-1
8001490c:	30 0a       	mov	r10,0
8001490e:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
80014912:	f5 eb 10 04 	or	r4,r10,r11
80014916:	c0 90       	breq	80014928 <__avr32_f64_div_op1_zero>
80014918:	1c 9b       	mov	r11,lr
8001491a:	e6 1b 80 00 	andh	r11,0x8000,COH
8001491e:	ea 1b 7f f0 	orh	r11,0x7ff0
80014922:	30 0a       	mov	r10,0
80014924:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc

80014928 <__avr32_f64_div_op1_zero>:
80014928:	f1 e9 10 15 	or	r5,r8,r9<<0x1
8001492c:	ce f0       	breq	8001490a <__avr32_f64_div_res_subnormal+0x98>
8001492e:	e9 d9 c2 8b 	bfextu	r4,r9,0x14,0xb
80014932:	e0 44 07 ff 	cp.w	r4,2047
80014936:	ce 41       	brne	800148fe <__avr32_f64_div_res_subnormal+0x8c>
80014938:	f1 e9 10 c5 	or	r5,r8,r9<<0xc
8001493c:	ce 10       	breq	800148fe <__avr32_f64_div_res_subnormal+0x8c>
8001493e:	ce 6b       	rjmp	8001490a <__avr32_f64_div_res_subnormal+0x98>

80014940 <__avr32_umod64>:
80014940:	d4 31       	pushm	r0-r7,lr
80014942:	1a 97       	mov	r7,sp
80014944:	20 3d       	sub	sp,12
80014946:	10 9c       	mov	r12,r8
80014948:	12 95       	mov	r5,r9
8001494a:	14 9e       	mov	lr,r10
8001494c:	16 91       	mov	r1,r11
8001494e:	16 96       	mov	r6,r11
80014950:	58 09       	cp.w	r9,0
80014952:	e0 81 00 81 	brne	80014a54 <__avr32_umod64+0x114>
80014956:	16 38       	cp.w	r8,r11
80014958:	e0 88 00 12 	brls	8001497c <__avr32_umod64+0x3c>
8001495c:	f0 08 12 00 	clz	r8,r8
80014960:	c4 e0       	breq	800149fc <__avr32_umod64+0xbc>
80014962:	f6 08 09 46 	lsl	r6,r11,r8
80014966:	f8 08 09 4c 	lsl	r12,r12,r8
8001496a:	f0 0b 11 20 	rsub	r11,r8,32
8001496e:	f4 08 09 4e 	lsl	lr,r10,r8
80014972:	f4 0b 0a 4b 	lsr	r11,r10,r11
80014976:	f7 e6 10 06 	or	r6,r11,r6
8001497a:	c4 18       	rjmp	800149fc <__avr32_umod64+0xbc>
8001497c:	58 08       	cp.w	r8,0
8001497e:	c0 51       	brne	80014988 <__avr32_umod64+0x48>
80014980:	30 19       	mov	r9,1
80014982:	f2 08 0d 08 	divu	r8,r9,r8
80014986:	10 9c       	mov	r12,r8
80014988:	f8 08 12 00 	clz	r8,r12
8001498c:	c0 31       	brne	80014992 <__avr32_umod64+0x52>
8001498e:	18 16       	sub	r6,r12
80014990:	c3 68       	rjmp	800149fc <__avr32_umod64+0xbc>
80014992:	f0 03 11 20 	rsub	r3,r8,32
80014996:	f4 03 0a 4b 	lsr	r11,r10,r3
8001499a:	f8 08 09 4c 	lsl	r12,r12,r8
8001499e:	ec 08 09 49 	lsl	r9,r6,r8
800149a2:	ec 03 0a 43 	lsr	r3,r6,r3
800149a6:	f7 e9 10 09 	or	r9,r11,r9
800149aa:	f8 05 16 10 	lsr	r5,r12,0x10
800149ae:	ed dc c0 10 	bfextu	r6,r12,0x0,0x10
800149b2:	e6 05 0d 02 	divu	r2,r3,r5
800149b6:	f2 0e 16 10 	lsr	lr,r9,0x10
800149ba:	ec 02 02 4b 	mul	r11,r6,r2
800149be:	fd e3 11 0e 	or	lr,lr,r3<<0x10
800149c2:	16 3e       	cp.w	lr,r11
800149c4:	c0 72       	brcc	800149d2 <__avr32_umod64+0x92>
800149c6:	18 0e       	add	lr,r12
800149c8:	18 3e       	cp.w	lr,r12
800149ca:	c0 43       	brcs	800149d2 <__avr32_umod64+0x92>
800149cc:	16 3e       	cp.w	lr,r11
800149ce:	fd dc e3 0e 	addcs	lr,lr,r12
800149d2:	fc 0b 01 03 	sub	r3,lr,r11
800149d6:	f3 d9 c0 10 	bfextu	r9,r9,0x0,0x10
800149da:	e6 05 0d 02 	divu	r2,r3,r5
800149de:	f3 e3 11 09 	or	r9,r9,r3<<0x10
800149e2:	a5 36       	mul	r6,r2
800149e4:	0c 39       	cp.w	r9,r6
800149e6:	c0 72       	brcc	800149f4 <__avr32_umod64+0xb4>
800149e8:	18 09       	add	r9,r12
800149ea:	18 39       	cp.w	r9,r12
800149ec:	c0 43       	brcs	800149f4 <__avr32_umod64+0xb4>
800149ee:	0c 39       	cp.w	r9,r6
800149f0:	f3 dc e3 09 	addcs	r9,r9,r12
800149f4:	f2 06 01 06 	sub	r6,r9,r6
800149f8:	f4 08 09 4e 	lsl	lr,r10,r8
800149fc:	f8 0a 16 10 	lsr	r10,r12,0x10
80014a00:	eb dc c0 10 	bfextu	r5,r12,0x0,0x10
80014a04:	ec 0a 0d 02 	divu	r2,r6,r10
80014a08:	fc 09 16 10 	lsr	r9,lr,0x10
80014a0c:	ea 02 02 4b 	mul	r11,r5,r2
80014a10:	f3 e3 11 09 	or	r9,r9,r3<<0x10
80014a14:	16 39       	cp.w	r9,r11
80014a16:	c0 72       	brcc	80014a24 <__avr32_umod64+0xe4>
80014a18:	18 09       	add	r9,r12
80014a1a:	18 39       	cp.w	r9,r12
80014a1c:	c0 43       	brcs	80014a24 <__avr32_umod64+0xe4>
80014a1e:	16 39       	cp.w	r9,r11
80014a20:	f3 dc e3 09 	addcs	r9,r9,r12
80014a24:	f2 0b 01 0b 	sub	r11,r9,r11
80014a28:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
80014a2c:	f6 0a 0d 0a 	divu	r10,r11,r10
80014a30:	fd eb 11 0e 	or	lr,lr,r11<<0x10
80014a34:	ea 0a 02 4a 	mul	r10,r5,r10
80014a38:	14 3e       	cp.w	lr,r10
80014a3a:	c0 72       	brcc	80014a48 <__avr32_umod64+0x108>
80014a3c:	18 0e       	add	lr,r12
80014a3e:	18 3e       	cp.w	lr,r12
80014a40:	c0 43       	brcs	80014a48 <__avr32_umod64+0x108>
80014a42:	14 3e       	cp.w	lr,r10
80014a44:	fd dc e3 0e 	addcs	lr,lr,r12
80014a48:	fc 0a 01 0a 	sub	r10,lr,r10
80014a4c:	30 0b       	mov	r11,0
80014a4e:	f4 08 0a 4a 	lsr	r10,r10,r8
80014a52:	c7 b8       	rjmp	80014b48 <__avr32_umod64+0x208>
80014a54:	16 39       	cp.w	r9,r11
80014a56:	e0 8b 00 79 	brhi	80014b48 <__avr32_umod64+0x208>
80014a5a:	f2 09 12 00 	clz	r9,r9
80014a5e:	c1 21       	brne	80014a82 <__avr32_umod64+0x142>
80014a60:	10 3a       	cp.w	r10,r8
80014a62:	5f 2b       	srhs	r11
80014a64:	0a 31       	cp.w	r1,r5
80014a66:	5f ba       	srhi	r10
80014a68:	f7 ea 10 0a 	or	r10,r11,r10
80014a6c:	f2 0a 18 00 	cp.b	r10,r9
80014a70:	c0 60       	breq	80014a7c <__avr32_umod64+0x13c>
80014a72:	fc 08 01 0c 	sub	r12,lr,r8
80014a76:	e2 05 01 46 	sbc	r6,r1,r5
80014a7a:	18 9e       	mov	lr,r12
80014a7c:	0c 9b       	mov	r11,r6
80014a7e:	1c 9a       	mov	r10,lr
80014a80:	c6 48       	rjmp	80014b48 <__avr32_umod64+0x208>
80014a82:	ea 09 09 4c 	lsl	r12,r5,r9
80014a86:	f2 06 11 20 	rsub	r6,r9,32
80014a8a:	f6 09 09 4b 	lsl	r11,r11,r9
80014a8e:	f0 09 09 42 	lsl	r2,r8,r9
80014a92:	ef 46 ff f4 	st.w	r7[-12],r6
80014a96:	f0 06 0a 48 	lsr	r8,r8,r6
80014a9a:	18 48       	or	r8,r12
80014a9c:	e2 06 0a 4c 	lsr	r12,r1,r6
80014aa0:	f4 09 09 43 	lsl	r3,r10,r9
80014aa4:	fd d8 c0 10 	bfextu	lr,r8,0x0,0x10
80014aa8:	f4 06 0a 4a 	lsr	r10,r10,r6
80014aac:	16 4a       	or	r10,r11
80014aae:	f0 0b 16 10 	lsr	r11,r8,0x10
80014ab2:	f8 0b 0d 04 	divu	r4,r12,r11
80014ab6:	f4 0c 16 10 	lsr	r12,r10,0x10
80014aba:	08 91       	mov	r1,r4
80014abc:	f9 e5 11 0c 	or	r12,r12,r5<<0x10
80014ac0:	e8 0e 02 46 	mul	r6,r4,lr
80014ac4:	0c 3c       	cp.w	r12,r6
80014ac6:	c0 a2       	brcc	80014ada <__avr32_umod64+0x19a>
80014ac8:	20 11       	sub	r1,1
80014aca:	10 0c       	add	r12,r8
80014acc:	10 3c       	cp.w	r12,r8
80014ace:	c0 63       	brcs	80014ada <__avr32_umod64+0x19a>
80014ad0:	0c 3c       	cp.w	r12,r6
80014ad2:	f7 b1 03 01 	sublo	r1,1
80014ad6:	f9 d8 e3 0c 	addcs	r12,r12,r8
80014ada:	0c 1c       	sub	r12,r6
80014adc:	f5 da c0 10 	bfextu	r10,r10,0x0,0x10
80014ae0:	f8 0b 0d 04 	divu	r4,r12,r11
80014ae4:	f5 e5 11 0b 	or	r11,r10,r5<<0x10
80014ae8:	08 96       	mov	r6,r4
80014aea:	e8 0e 02 4e 	mul	lr,r4,lr
80014aee:	1c 3b       	cp.w	r11,lr
80014af0:	c0 a2       	brcc	80014b04 <__avr32_umod64+0x1c4>
80014af2:	20 16       	sub	r6,1
80014af4:	10 0b       	add	r11,r8
80014af6:	10 3b       	cp.w	r11,r8
80014af8:	c0 63       	brcs	80014b04 <__avr32_umod64+0x1c4>
80014afa:	1c 3b       	cp.w	r11,lr
80014afc:	f7 b6 03 01 	sublo	r6,1
80014b00:	f7 d8 e3 0b 	addcs	r11,r11,r8
80014b04:	ed e1 11 01 	or	r1,r6,r1<<0x10
80014b08:	1c 1b       	sub	r11,lr
80014b0a:	e2 02 06 40 	mulu.d	r0,r1,r2
80014b0e:	00 9e       	mov	lr,r0
80014b10:	02 9c       	mov	r12,r1
80014b12:	16 3c       	cp.w	r12,r11
80014b14:	e0 8b 00 08 	brhi	80014b24 <__avr32_umod64+0x1e4>
80014b18:	5f 06       	sreq	r6
80014b1a:	06 30       	cp.w	r0,r3
80014b1c:	5f ba       	srhi	r10
80014b1e:	ed ea 00 0a 	and	r10,r6,r10
80014b22:	c0 60       	breq	80014b2e <__avr32_umod64+0x1ee>
80014b24:	fc 02 01 04 	sub	r4,lr,r2
80014b28:	f8 08 01 4c 	sbc	r12,r12,r8
80014b2c:	08 9e       	mov	lr,r4
80014b2e:	e6 0e 01 0a 	sub	r10,r3,lr
80014b32:	f6 0c 01 4c 	sbc	r12,r11,r12
80014b36:	ee f1 ff f4 	ld.w	r1,r7[-12]
80014b3a:	f8 09 0a 4b 	lsr	r11,r12,r9
80014b3e:	f4 09 0a 4a 	lsr	r10,r10,r9
80014b42:	f8 01 09 4c 	lsl	r12,r12,r1
80014b46:	18 4a       	or	r10,r12
80014b48:	2f dd       	sub	sp,-12
80014b4a:	d8 32       	popm	r0-r7,pc

Disassembly of section .exception:

80014c00 <_evba>:
_evba:

	.org  0x000
	// Unrecoverable Exception.
_handle_Unrecoverable_Exception:
	rjmp $
80014c00:	c0 08       	rjmp	80014c00 <_evba>
	...

80014c04 <_handle_TLB_Multiple_Hit>:

	.org  0x004
	// TLB Multiple Hit.
_handle_TLB_Multiple_Hit:
	rjmp $
80014c04:	c0 08       	rjmp	80014c04 <_handle_TLB_Multiple_Hit>
	...

80014c08 <_handle_Bus_Error_Data_Fetch>:

	.org  0x008
	// Bus Error Data Fetch.
_handle_Bus_Error_Data_Fetch:
	rjmp $
80014c08:	c0 08       	rjmp	80014c08 <_handle_Bus_Error_Data_Fetch>
	...

80014c0c <_handle_Bus_Error_Instruction_Fetch>:

	.org  0x00C
	// Bus Error Instruction Fetch.
_handle_Bus_Error_Instruction_Fetch:
	rjmp $
80014c0c:	c0 08       	rjmp	80014c0c <_handle_Bus_Error_Instruction_Fetch>
	...

80014c10 <_handle_NMI>:

	.org  0x010
	// NMI.
_handle_NMI:
	rjmp $
80014c10:	c0 08       	rjmp	80014c10 <_handle_NMI>
	...

80014c14 <_handle_Instruction_Address>:

	.org  0x014
	// Instruction Address.
_handle_Instruction_Address:
	rjmp $
80014c14:	c0 08       	rjmp	80014c14 <_handle_Instruction_Address>
	...

80014c18 <_handle_ITLB_Protection>:

	.org  0x018
	// ITLB Protection.
_handle_ITLB_Protection:
	rjmp $
80014c18:	c0 08       	rjmp	80014c18 <_handle_ITLB_Protection>
	...

80014c1c <_handle_Breakpoint>:

	.org  0x01C
	// Breakpoint.
_handle_Breakpoint:
	rjmp $
80014c1c:	c0 08       	rjmp	80014c1c <_handle_Breakpoint>
	...

80014c20 <_handle_Illegal_Opcode>:

	.org  0x020
	// Illegal Opcode.
_handle_Illegal_Opcode:
	rjmp $
80014c20:	c0 08       	rjmp	80014c20 <_handle_Illegal_Opcode>
	...

80014c24 <_handle_Unimplemented_Instruction>:

	.org  0x024
	// Unimplemented Instruction.
_handle_Unimplemented_Instruction:
	rjmp $
80014c24:	c0 08       	rjmp	80014c24 <_handle_Unimplemented_Instruction>
	...

80014c28 <_handle_Privilege_Violation>:

	.org  0x028
	// Privilege Violation.
_handle_Privilege_Violation:
	rjmp $
80014c28:	c0 08       	rjmp	80014c28 <_handle_Privilege_Violation>
	...

80014c2c <_handle_Floating_Point>:

	.org  0x02C
	// Floating-Point: UNUSED IN AVR32UC and AVR32AP.
_handle_Floating_Point:
	rjmp $
80014c2c:	c0 08       	rjmp	80014c2c <_handle_Floating_Point>
	...

80014c30 <_handle_Coprocessor_Absent>:

	.org  0x030
	// Coprocessor Absent: UNUSED IN AVR32UC.
_handle_Coprocessor_Absent:
	rjmp $
80014c30:	c0 08       	rjmp	80014c30 <_handle_Coprocessor_Absent>
	...

80014c34 <_handle_Data_Address_Read>:

	.org  0x034
	// Data Address (Read).
_handle_Data_Address_Read:
	rjmp $
80014c34:	c0 08       	rjmp	80014c34 <_handle_Data_Address_Read>
	...

80014c38 <_handle_Data_Address_Write>:

	.org  0x038
	// Data Address (Write).
_handle_Data_Address_Write:
	rjmp $
80014c38:	c0 08       	rjmp	80014c38 <_handle_Data_Address_Write>
	...

80014c3c <_handle_DTLB_Protection_Read>:

	.org  0x03C
	// DTLB Protection (Read).
_handle_DTLB_Protection_Read:
	rjmp $
80014c3c:	c0 08       	rjmp	80014c3c <_handle_DTLB_Protection_Read>
	...

80014c40 <_handle_DTLB_Protection_Write>:

	.org  0x040
	// DTLB Protection (Write).
_handle_DTLB_Protection_Write:
	rjmp $
80014c40:	c0 08       	rjmp	80014c40 <_handle_DTLB_Protection_Write>
	...

80014c44 <_handle_DTLB_Modified>:

	.org  0x044
	// DTLB Modified: UNUSED IN AVR32UC.
_handle_DTLB_Modified:
	rjmp $
80014c44:	c0 08       	rjmp	80014c44 <_handle_DTLB_Modified>
	...

80014c50 <_handle_ITLB_Miss>:

	.org  0x050
	// ITLB Miss.
_handle_ITLB_Miss:
	rjmp $
80014c50:	c0 08       	rjmp	80014c50 <_handle_ITLB_Miss>
	...

80014c60 <_handle_DTLB_Miss_Read>:

	.org  0x060
	// DTLB Miss (Read).
_handle_DTLB_Miss_Read:
	rjmp $
80014c60:	c0 08       	rjmp	80014c60 <_handle_DTLB_Miss_Read>
	...

80014c70 <_handle_DTLB_Miss_Write>:

	.org  0x070
	// DTLB Miss (Write).
_handle_DTLB_Miss_Write:
	rjmp $
80014c70:	c0 08       	rjmp	80014c70 <_handle_DTLB_Miss_Write>
	...

80014d00 <_handle_Supervisor_Call>:

	.org  0x100
	// Supervisor Call.
_handle_Supervisor_Call:
	rjmp $
80014d00:	c0 08       	rjmp	80014d00 <_handle_Supervisor_Call>
80014d02:	d7 03       	nop

80014d04 <_int0>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80014d04:	30 0c       	mov	r12,0
80014d06:	fe b0 c9 4f 	rcall	8000dfa4 <_get_interrupt_handler>
80014d0a:	58 0c       	cp.w	r12,0
80014d0c:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
80014d10:	d6 03       	rete

80014d12 <_int1>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80014d12:	30 1c       	mov	r12,1
80014d14:	fe b0 c9 48 	rcall	8000dfa4 <_get_interrupt_handler>
80014d18:	58 0c       	cp.w	r12,0
80014d1a:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
80014d1e:	d6 03       	rete

80014d20 <_int2>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80014d20:	30 2c       	mov	r12,2
80014d22:	fe b0 c9 41 	rcall	8000dfa4 <_get_interrupt_handler>
80014d26:	58 0c       	cp.w	r12,0
80014d28:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
80014d2c:	d6 03       	rete

80014d2e <_int3>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80014d2e:	30 3c       	mov	r12,3
80014d30:	fe b0 c9 3a 	rcall	8000dfa4 <_get_interrupt_handler>
80014d34:	58 0c       	cp.w	r12,0
80014d36:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
80014d3a:	d6 03       	rete
80014d3c:	d7 03       	nop
80014d3e:	d7 03       	nop
80014d40:	d7 03       	nop
80014d42:	d7 03       	nop
80014d44:	d7 03       	nop
80014d46:	d7 03       	nop
80014d48:	d7 03       	nop
80014d4a:	d7 03       	nop
80014d4c:	d7 03       	nop
80014d4e:	d7 03       	nop
80014d50:	d7 03       	nop
80014d52:	d7 03       	nop
80014d54:	d7 03       	nop
80014d56:	d7 03       	nop
80014d58:	d7 03       	nop
80014d5a:	d7 03       	nop
80014d5c:	d7 03       	nop
80014d5e:	d7 03       	nop
80014d60:	d7 03       	nop
80014d62:	d7 03       	nop
80014d64:	d7 03       	nop
80014d66:	d7 03       	nop
80014d68:	d7 03       	nop
80014d6a:	d7 03       	nop
80014d6c:	d7 03       	nop
80014d6e:	d7 03       	nop
80014d70:	d7 03       	nop
80014d72:	d7 03       	nop
80014d74:	d7 03       	nop
80014d76:	d7 03       	nop
80014d78:	d7 03       	nop
80014d7a:	d7 03       	nop
80014d7c:	d7 03       	nop
80014d7e:	d7 03       	nop
80014d80:	d7 03       	nop
80014d82:	d7 03       	nop
80014d84:	d7 03       	nop
80014d86:	d7 03       	nop
80014d88:	d7 03       	nop
80014d8a:	d7 03       	nop
80014d8c:	d7 03       	nop
80014d8e:	d7 03       	nop
80014d90:	d7 03       	nop
80014d92:	d7 03       	nop
80014d94:	d7 03       	nop
80014d96:	d7 03       	nop
80014d98:	d7 03       	nop
80014d9a:	d7 03       	nop
80014d9c:	d7 03       	nop
80014d9e:	d7 03       	nop
80014da0:	d7 03       	nop
80014da2:	d7 03       	nop
80014da4:	d7 03       	nop
80014da6:	d7 03       	nop
80014da8:	d7 03       	nop
80014daa:	d7 03       	nop
80014dac:	d7 03       	nop
80014dae:	d7 03       	nop
80014db0:	d7 03       	nop
80014db2:	d7 03       	nop
80014db4:	d7 03       	nop
80014db6:	d7 03       	nop
80014db8:	d7 03       	nop
80014dba:	d7 03       	nop
80014dbc:	d7 03       	nop
80014dbe:	d7 03       	nop
80014dc0:	d7 03       	nop
80014dc2:	d7 03       	nop
80014dc4:	d7 03       	nop
80014dc6:	d7 03       	nop
80014dc8:	d7 03       	nop
80014dca:	d7 03       	nop
80014dcc:	d7 03       	nop
80014dce:	d7 03       	nop
80014dd0:	d7 03       	nop
80014dd2:	d7 03       	nop
80014dd4:	d7 03       	nop
80014dd6:	d7 03       	nop
80014dd8:	d7 03       	nop
80014dda:	d7 03       	nop
80014ddc:	d7 03       	nop
80014dde:	d7 03       	nop
80014de0:	d7 03       	nop
80014de2:	d7 03       	nop
80014de4:	d7 03       	nop
80014de6:	d7 03       	nop
80014de8:	d7 03       	nop
80014dea:	d7 03       	nop
80014dec:	d7 03       	nop
80014dee:	d7 03       	nop
80014df0:	d7 03       	nop
80014df2:	d7 03       	nop
80014df4:	d7 03       	nop
80014df6:	d7 03       	nop
80014df8:	d7 03       	nop
80014dfa:	d7 03       	nop
80014dfc:	d7 03       	nop
80014dfe:	d7 03       	nop
