
Lab_4_Task.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00002010  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80002010  80002010  00002410  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00012918  80002010  80002010  00002410  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .exception    00000200  80014a00  80014a00  00014e00  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       00000898  80014c00  80014c00  00015000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .dalign       00000004  00000004  00000004  00000000  2**0
                  ALLOC
  6 .data         000005dc  00000008  80015498  00015c08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .balign       00000004  000005e4  80015a74  000161e4  2**0
                  ALLOC
  8 .bss          00000890  000005e8  000005e8  00000000  2**2
                  ALLOC
  9 .heap         0000e188  00000e78  00000e78  00000000  2**0
                  ALLOC
 10 .comment      00000030  00000000  00000000  000161e4  2**0
                  CONTENTS, READONLY
 11 .debug_aranges 00001af8  00000000  00000000  00016218  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubnames 00003ad5  00000000  00000000  00017d10  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_info   00036611  00000000  00000000  0001b7e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 000068dc  00000000  00000000  00051df6  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   000184ac  00000000  00000000  000586d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00004fe0  00000000  00000000  00070b80  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    0000b678  00000000  00000000  00075b60  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_loc    0000daa4  00000000  00000000  000811d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_macinfo 0167321a  00000000  00000000  0008ec7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .stack        00001000  0000f000  0000f000  00000000  2**0
                  ALLOC
 21 .debug_ranges 00001b40  00000000  00000000  01701e98  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_start>:

  .global _start
  .type _start, @function
_start:
  // Jump to the C runtime startup routine.
  lda.w   pc, _stext
80000000:	48 1f       	lddpc	pc,80000004 <_start+0x4>
80000002:	d7 03       	nop
80000004:	80 00       	ld.sh	r0,r0[0x0]
80000006:	e1 90       	*unknown*

80000008 <_trampoline>:

  .global _trampoline
  .type _trampoline, @function
_trampoline:
  // Jump to program start.
  rjmp    program_start
80000008:	e0 8f 10 00 	bral	80002008 <program_start>
	...

80002008 <program_start>:

  .org  PROGRAM_START_OFFSET
program_start:
  // Jump to the C runtime startup routine.
  lda.w   pc, _stext
80002008:	fe ff 00 04 	ld.w	pc,pc[4]
8000200c:	80 00       	ld.sh	r0,r0[0x0]
8000200e:	e1 90       	*unknown*

Disassembly of section .text:

80002010 <osc_get_rate>:
		return false;
	}
}

static inline uint32_t osc_get_rate(uint8_t id)
{
80002010:	eb cd 40 80 	pushm	r7,lr
80002014:	1a 97       	mov	r7,sp
80002016:	20 1d       	sub	sp,4
80002018:	18 98       	mov	r8,r12
8000201a:	ef 68 ff fc 	st.b	r7[-4],r8
	switch (id) {
8000201e:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80002022:	58 08       	cp.w	r8,0
80002024:	c0 40       	breq	8000202c <osc_get_rate+0x1c>
80002026:	58 28       	cp.w	r8,2
80002028:	c0 70       	breq	80002036 <osc_get_rate+0x26>
8000202a:	c0 98       	rjmp	8000203c <osc_get_rate+0x2c>
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		return BOARD_OSC0_HZ;
8000202c:	e0 68 1b 00 	mov	r8,6912
80002030:	ea 18 00 b7 	orh	r8,0xb7
80002034:	c0 58       	rjmp	8000203e <osc_get_rate+0x2e>
		return BOARD_OSC1_HZ;
#endif

#ifdef BOARD_OSC32_HZ
	case OSC_ID_OSC32:
		return BOARD_OSC32_HZ;
80002036:	e0 68 80 00 	mov	r8,32768
8000203a:	c0 28       	rjmp	8000203e <osc_get_rate+0x2e>
#endif
	default:
		/* unhandled_case(id); */
		return 0;
8000203c:	30 08       	mov	r8,0
	}
}
8000203e:	10 9c       	mov	r12,r8
80002040:	2f fd       	sub	sp,-4
80002042:	e3 cd 80 80 	ldm	sp++,r7,pc
80002046:	d7 03       	nop

80002048 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern bool sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
80002048:	eb cd 40 80 	pushm	r7,lr
8000204c:	1a 97       	mov	r7,sp
		return BOARD_OSC0_HZ;
#endif

#ifdef CONFIG_PLL0_SOURCE
	case SYSCLK_SRC_PLL0:
		return pll_get_default_rate(0);
8000204e:	30 0c       	mov	r12,0
80002050:	f0 1f 00 04 	mcall	80002060 <sysclk_get_main_hz+0x18>
80002054:	18 98       	mov	r8,r12
80002056:	a3 78       	lsl	r8,0x3
80002058:	a1 98       	lsr	r8,0x1

	default:
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
8000205a:	10 9c       	mov	r12,r8
8000205c:	e3 cd 80 80 	ldm	sp++,r7,pc
80002060:	80 00       	ld.sh	r0,r0[0x0]
80002062:	20 10       	sub	r0,1

80002064 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
80002064:	eb cd 40 80 	pushm	r7,lr
80002068:	1a 97       	mov	r7,sp
	return sysclk_get_main_hz() >> CONFIG_SYSCLK_CPU_DIV;
8000206a:	f0 1f 00 04 	mcall	80002078 <sysclk_get_cpu_hz+0x14>
8000206e:	18 98       	mov	r8,r12
}
80002070:	10 9c       	mov	r12,r8
80002072:	e3 cd 80 80 	ldm	sp++,r7,pc
80002076:	00 00       	add	r0,r0
80002078:	80 00       	ld.sh	r0,r0[0x0]
8000207a:	20 48       	sub	r8,4

8000207c <dip204_init>:


/****************************** global functions *****************************/

void dip204_init(backlight_options option, bool backlight_on)
{
8000207c:	eb cd 40 8f 	pushm	r0-r3,r7,lr
80002080:	1a 97       	mov	r7,sp
80002082:	fa cd 01 ac 	sub	sp,sp,428
80002086:	ef 4c fe b8 	st.w	r7[-328],r12
8000208a:	16 98       	mov	r8,r11
8000208c:	ef 68 fe b4 	st.b	r7[-332],r8
  pwm_opt_t pwm_opt;  // pwm option config

  if (option == backlight_PWM)
80002090:	ee f8 fe b8 	ld.w	r8,r7[-328]
80002094:	58 18       	cp.w	r8,1
80002096:	c6 41       	brne	8000215e <dip204_init+0xe2>
  {
    channel_id = DIP204_PWM_CHANNEL;
80002098:	fe f9 0a 84 	ld.w	r9,pc[2692]
8000209c:	30 68       	mov	r8,6
8000209e:	93 08       	st.w	r9[0x0],r8
    gpio_enable_module_pin(DIP204_PWM_PIN, DIP204_PWM_FUNCTION);
800020a0:	30 2b       	mov	r11,2
800020a2:	33 2c       	mov	r12,50
800020a4:	f0 1f 02 9f 	mcall	80002b20 <dip204_init+0xaa4>

    // PWM controller configuration
    pwm_opt.diva=0;
800020a8:	30 08       	mov	r8,0
800020aa:	ef 48 ff 14 	st.w	r7[-236],r8
    pwm_opt.divb=0;
800020ae:	30 08       	mov	r8,0
800020b0:	ef 48 ff 10 	st.w	r7[-240],r8
    pwm_opt.prea=0;
800020b4:	30 08       	mov	r8,0
800020b6:	ef 48 ff 1c 	st.w	r7[-228],r8
    pwm_opt.preb=0;
800020ba:	30 08       	mov	r8,0
800020bc:	ef 48 ff 18 	st.w	r7[-232],r8

    pwm_init(&pwm_opt);
800020c0:	ee c8 00 f0 	sub	r8,r7,240
800020c4:	10 9c       	mov	r12,r8
800020c6:	f0 1f 02 98 	mcall	80002b24 <dip204_init+0xaa8>
    pwm_duty = (backlight_on) ? DIP204_PERIOD_MAX - 1 : 1;
800020ca:	ef 39 fe b4 	ld.ub	r9,r7[-332]
800020ce:	30 08       	mov	r8,0
800020d0:	f0 09 18 00 	cp.b	r9,r8
800020d4:	c0 30       	breq	800020da <dip204_init+0x5e>
800020d6:	33 18       	mov	r8,49
800020d8:	c0 28       	rjmp	800020dc <dip204_init+0x60>
800020da:	30 18       	mov	r8,1
800020dc:	fe f9 0a 4c 	ld.w	r9,pc[2636]
800020e0:	b2 08       	st.h	r9[0x0],r8
    pwm_channel.CMR.calg = PWM_MODE_LEFT_ALIGNED;   // channel mode
800020e2:	fe fa 0a 4a 	ld.w	r10,pc[2634]
800020e6:	74 08       	ld.w	r8,r10[0x0]
800020e8:	30 09       	mov	r9,0
800020ea:	f1 d9 d1 01 	bfins	r8,r9,0x8,0x1
800020ee:	95 08       	st.w	r10[0x0],r8
    pwm_channel.CMR.cpol = PWM_POLARITY_LOW;   // channel polarity
800020f0:	fe fa 0a 3c 	ld.w	r10,pc[2620]
800020f4:	74 08       	ld.w	r8,r10[0x0]
800020f6:	30 09       	mov	r9,0
800020f8:	f1 d9 d1 21 	bfins	r8,r9,0x9,0x1
800020fc:	95 08       	st.w	r10[0x0],r8
    pwm_channel.CMR.cpd = PWM_UPDATE_PERIOD;   // not used the first time
800020fe:	fe fa 0a 2e 	ld.w	r10,pc[2606]
80002102:	74 08       	ld.w	r8,r10[0x0]
80002104:	30 19       	mov	r9,1
80002106:	f1 d9 d1 41 	bfins	r8,r9,0xa,0x1
8000210a:	95 08       	st.w	r10[0x0],r8
    pwm_channel.CMR.cpre = AVR32_PWM_CPRE_MCK_DIV_256;   // channel prescaler
8000210c:	fe fa 0a 20 	ld.w	r10,pc[2592]
80002110:	74 08       	ld.w	r8,r10[0x0]
80002112:	30 89       	mov	r9,8
80002114:	f1 d9 d0 04 	bfins	r8,r9,0x0,0x4
80002118:	95 08       	st.w	r10[0x0],r8
    pwm_channel.cdty = pwm_duty;  // channel duty cycle, should be < CPRD
8000211a:	fe f8 0a 0e 	ld.w	r8,pc[2574]
8000211e:	90 08       	ld.sh	r8,r8[0x0]
80002120:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
80002124:	fe f8 0a 08 	ld.w	r8,pc[2568]
80002128:	91 19       	st.w	r8[0x4],r9
    pwm_channel.cprd = DIP204_PERIOD_MAX;  // channel period
8000212a:	fe f9 0a 02 	ld.w	r9,pc[2562]
8000212e:	33 28       	mov	r8,50
80002130:	93 28       	st.w	r9[0x8],r8
    pwm_channel.cupd = 0;  // channel update is not used here.
80002132:	fe f9 09 fa 	ld.w	r9,pc[2554]
80002136:	30 08       	mov	r8,0
80002138:	93 48       	st.w	r9[0x10],r8

    pwm_channel_init(channel_id, &pwm_channel);
8000213a:	fe f8 09 e2 	ld.w	r8,pc[2530]
8000213e:	70 08       	ld.w	r8,r8[0x0]
80002140:	fe fb 09 ec 	ld.w	r11,pc[2540]
80002144:	10 9c       	mov	r12,r8
80002146:	f0 1f 02 7b 	mcall	80002b30 <dip204_init+0xab4>
    // start PWM
    pwm_start_channels(1 << channel_id);
8000214a:	fe f8 09 d2 	ld.w	r8,pc[2514]
8000214e:	70 09       	ld.w	r9,r8[0x0]
80002150:	30 18       	mov	r8,1
80002152:	f0 09 09 48 	lsl	r8,r8,r9
80002156:	10 9c       	mov	r12,r8
80002158:	f0 1f 02 77 	mcall	80002b34 <dip204_init+0xab8>
8000215c:	c0 e8       	rjmp	80002178 <dip204_init+0xfc>
  }
  else
  {
    if (backlight_on)
8000215e:	ef 39 fe b4 	ld.ub	r9,r7[-332]
80002162:	30 08       	mov	r8,0
80002164:	f0 09 18 00 	cp.b	r9,r8
80002168:	c0 50       	breq	80002172 <dip204_init+0xf6>
    {
      gpio_clr_gpio_pin(DIP204_BACKLIGHT_PIN);
8000216a:	33 2c       	mov	r12,50
8000216c:	f0 1f 02 73 	mcall	80002b38 <dip204_init+0xabc>
80002170:	c0 48       	rjmp	80002178 <dip204_init+0xfc>
    }
    else
    {
      gpio_set_gpio_pin(DIP204_BACKLIGHT_PIN);
80002172:	33 2c       	mov	r12,50
80002174:	f0 1f 02 72 	mcall	80002b3c <dip204_init+0xac0>
    }
  }
  // delay for power on
  delay_ms(20);
80002178:	f0 1f 02 72 	mcall	80002b40 <dip204_init+0xac4>
8000217c:	18 99       	mov	r9,r12
8000217e:	31 48       	mov	r8,20
80002180:	ef 48 ff 24 	st.w	r7[-220],r8
80002184:	ef 49 ff 20 	st.w	r7[-224],r9
80002188:	ee f8 ff 24 	ld.w	r8,r7[-220]
8000218c:	ef 48 ff 2c 	st.w	r7[-212],r8
80002190:	ee f8 ff 20 	ld.w	r8,r7[-224]
80002194:	ef 48 ff 28 	st.w	r7[-216],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
80002198:	ee f0 ff 2c 	ld.w	r0,r7[-212]
8000219c:	30 01       	mov	r1,0
8000219e:	ee f2 ff 28 	ld.w	r2,r7[-216]
800021a2:	30 03       	mov	r3,0
800021a4:	e2 02 02 49 	mul	r9,r1,r2
800021a8:	e6 00 02 48 	mul	r8,r3,r0
800021ac:	10 09       	add	r9,r8
800021ae:	e0 02 06 4a 	mulu.d	r10,r0,r2
800021b2:	16 09       	add	r9,r11
800021b4:	12 9b       	mov	r11,r9
800021b6:	e0 68 03 e7 	mov	r8,999
800021ba:	30 09       	mov	r9,0
800021bc:	10 0a       	add	r10,r8
800021be:	f6 09 00 4b 	adc	r11,r11,r9
800021c2:	e0 68 03 e8 	mov	r8,1000
800021c6:	30 09       	mov	r9,0
800021c8:	f0 1f 02 5f 	mcall	80002b44 <dip204_init+0xac8>
800021cc:	14 98       	mov	r8,r10
800021ce:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
800021d0:	ef 48 ff 34 	st.w	r7[-204],r8
800021d4:	ee c8 01 44 	sub	r8,r7,324
800021d8:	ef 48 ff 30 	st.w	r7[-208],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800021dc:	e1 b8 00 42 	mfsr	r8,0x108
800021e0:	10 99       	mov	r9,r8
800021e2:	ee f8 ff 30 	ld.w	r8,r7[-208]
800021e6:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800021e8:	ee f8 ff 30 	ld.w	r8,r7[-208]
800021ec:	70 09       	ld.w	r9,r8[0x0]
800021ee:	ee f8 ff 34 	ld.w	r8,r7[-204]
800021f2:	10 09       	add	r9,r8
800021f4:	ee f8 ff 30 	ld.w	r8,r7[-208]
800021f8:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
800021fa:	ee f9 ff 30 	ld.w	r9,r7[-208]
800021fe:	30 08       	mov	r8,0
80002200:	f3 68 00 08 	st.b	r9[8],r8
80002204:	ee c8 01 44 	sub	r8,r7,324
80002208:	ef 48 ff 38 	st.w	r7[-200],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000220c:	e1 b8 00 42 	mfsr	r8,0x108
80002210:	ef 48 ff 3c 	st.w	r7[-196],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80002214:	ee f8 ff 38 	ld.w	r8,r7[-200]
80002218:	f1 39 00 08 	ld.ub	r9,r8[8]
8000221c:	30 28       	mov	r8,2
8000221e:	f0 09 18 00 	cp.b	r9,r8
80002222:	c0 31       	brne	80002228 <dip204_init+0x1ac>
    return false;
80002224:	30 08       	mov	r8,0
80002226:	c4 38       	rjmp	800022ac <dip204_init+0x230>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80002228:	ee f8 ff 38 	ld.w	r8,r7[-200]
8000222c:	f1 39 00 08 	ld.ub	r9,r8[8]
80002230:	30 18       	mov	r8,1
80002232:	f0 09 18 00 	cp.b	r9,r8
80002236:	c0 31       	brne	8000223c <dip204_init+0x1c0>
    return true;
80002238:	30 18       	mov	r8,1
8000223a:	c3 98       	rjmp	800022ac <dip204_init+0x230>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000223c:	ee f8 ff 38 	ld.w	r8,r7[-200]
80002240:	70 09       	ld.w	r9,r8[0x0]
80002242:	ee f8 ff 38 	ld.w	r8,r7[-200]
80002246:	70 18       	ld.w	r8,r8[0x4]
80002248:	10 39       	cp.w	r9,r8
8000224a:	e0 88 00 1a 	brls	8000227e <dip204_init+0x202>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000224e:	ee f8 ff 38 	ld.w	r8,r7[-200]
80002252:	70 09       	ld.w	r9,r8[0x0]
80002254:	ee f8 ff 3c 	ld.w	r8,r7[-196]
80002258:	12 38       	cp.w	r8,r9
8000225a:	c1 02       	brcc	8000227a <dip204_init+0x1fe>
8000225c:	ee f8 ff 38 	ld.w	r8,r7[-200]
80002260:	70 19       	ld.w	r9,r8[0x4]
80002262:	ee f8 ff 3c 	ld.w	r8,r7[-196]
80002266:	12 38       	cp.w	r8,r9
80002268:	e0 88 00 09 	brls	8000227a <dip204_init+0x1fe>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
8000226c:	ee f9 ff 38 	ld.w	r9,r7[-200]
80002270:	30 18       	mov	r8,1
80002272:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80002276:	30 18       	mov	r8,1
80002278:	c1 a8       	rjmp	800022ac <dip204_init+0x230>
    }
    return false;
8000227a:	30 08       	mov	r8,0
8000227c:	c1 88       	rjmp	800022ac <dip204_init+0x230>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000227e:	ee f8 ff 38 	ld.w	r8,r7[-200]
80002282:	70 09       	ld.w	r9,r8[0x0]
80002284:	ee f8 ff 3c 	ld.w	r8,r7[-196]
80002288:	12 38       	cp.w	r8,r9
8000228a:	c0 93       	brcs	8000229c <dip204_init+0x220>
8000228c:	ee f8 ff 38 	ld.w	r8,r7[-200]
80002290:	70 19       	ld.w	r9,r8[0x4]
80002292:	ee f8 ff 3c 	ld.w	r8,r7[-196]
80002296:	12 38       	cp.w	r8,r9
80002298:	e0 88 00 09 	brls	800022aa <dip204_init+0x22e>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
8000229c:	ee f9 ff 38 	ld.w	r9,r7[-200]
800022a0:	30 18       	mov	r8,1
800022a2:	f3 68 00 08 	st.b	r9[8],r8
      return true;
800022a6:	30 18       	mov	r8,1
800022a8:	c0 28       	rjmp	800022ac <dip204_init+0x230>
    }
    return false;
800022aa:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
800022ac:	58 08       	cp.w	r8,0
800022ae:	ca b0       	breq	80002204 <dip204_init+0x188>
  // select the LCD chip
  dip204_select();
800022b0:	f0 1f 02 26 	mcall	80002b48 <dip204_init+0xacc>
  // Send Command Start Byte
  dip204_write_byte(DIP204_WRITE_COMMAND);
800022b4:	e0 6c 00 f8 	mov	r12,248
800022b8:	f0 1f 02 25 	mcall	80002b4c <dip204_init+0xad0>
  // Send "extended Function Set" Command  (RE=1)
  dip204_write_byte(0x34);
800022bc:	33 4c       	mov	r12,52
800022be:	f0 1f 02 24 	mcall	80002b4c <dip204_init+0xad0>
  // Wait for command execution
  delay_ms(1);
800022c2:	f0 1f 02 20 	mcall	80002b40 <dip204_init+0xac4>
800022c6:	18 99       	mov	r9,r12
800022c8:	30 18       	mov	r8,1
800022ca:	ef 48 ff 44 	st.w	r7[-188],r8
800022ce:	ef 49 ff 40 	st.w	r7[-192],r9
800022d2:	ee f8 ff 44 	ld.w	r8,r7[-188]
800022d6:	ef 48 ff 4c 	st.w	r7[-180],r8
800022da:	ee f8 ff 40 	ld.w	r8,r7[-192]
800022de:	ef 48 ff 48 	st.w	r7[-184],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
800022e2:	ee fc ff 4c 	ld.w	r12,r7[-180]
800022e6:	ef 4c fe 60 	st.w	r7[-416],r12
800022ea:	30 0b       	mov	r11,0
800022ec:	ef 4b fe 5c 	st.w	r7[-420],r11
800022f0:	ee fa ff 48 	ld.w	r10,r7[-184]
800022f4:	ef 4a fe 58 	st.w	r7[-424],r10
800022f8:	30 09       	mov	r9,0
800022fa:	ef 49 fe 54 	st.w	r7[-428],r9
800022fe:	ee f9 fe 5c 	ld.w	r9,r7[-420]
80002302:	ee f8 fe 58 	ld.w	r8,r7[-424]
80002306:	b1 39       	mul	r9,r8
80002308:	ee f8 fe 54 	ld.w	r8,r7[-428]
8000230c:	ee fc fe 60 	ld.w	r12,r7[-416]
80002310:	b9 38       	mul	r8,r12
80002312:	10 09       	add	r9,r8
80002314:	ee f8 fe 60 	ld.w	r8,r7[-416]
80002318:	ee fc fe 58 	ld.w	r12,r7[-424]
8000231c:	f0 0c 06 4a 	mulu.d	r10,r8,r12
80002320:	16 09       	add	r9,r11
80002322:	12 9b       	mov	r11,r9
80002324:	e0 68 03 e7 	mov	r8,999
80002328:	30 09       	mov	r9,0
8000232a:	10 0a       	add	r10,r8
8000232c:	f6 09 00 4b 	adc	r11,r11,r9
80002330:	e0 68 03 e8 	mov	r8,1000
80002334:	30 09       	mov	r9,0
80002336:	f0 1f 02 04 	mcall	80002b44 <dip204_init+0xac8>
8000233a:	14 98       	mov	r8,r10
8000233c:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
8000233e:	ef 48 ff 54 	st.w	r7[-172],r8
80002342:	ee c8 01 38 	sub	r8,r7,312
80002346:	ef 48 ff 50 	st.w	r7[-176],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000234a:	e1 b8 00 42 	mfsr	r8,0x108
8000234e:	10 99       	mov	r9,r8
80002350:	ee f8 ff 50 	ld.w	r8,r7[-176]
80002354:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002356:	ee f8 ff 50 	ld.w	r8,r7[-176]
8000235a:	70 09       	ld.w	r9,r8[0x0]
8000235c:	ee f8 ff 54 	ld.w	r8,r7[-172]
80002360:	10 09       	add	r9,r8
80002362:	ee f8 ff 50 	ld.w	r8,r7[-176]
80002366:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80002368:	ee f9 ff 50 	ld.w	r9,r7[-176]
8000236c:	30 08       	mov	r8,0
8000236e:	f3 68 00 08 	st.b	r9[8],r8
80002372:	ee c8 01 38 	sub	r8,r7,312
80002376:	ef 48 ff 58 	st.w	r7[-168],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000237a:	e1 b8 00 42 	mfsr	r8,0x108
8000237e:	ef 48 ff 5c 	st.w	r7[-164],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80002382:	ee f8 ff 58 	ld.w	r8,r7[-168]
80002386:	f1 39 00 08 	ld.ub	r9,r8[8]
8000238a:	30 28       	mov	r8,2
8000238c:	f0 09 18 00 	cp.b	r9,r8
80002390:	c0 31       	brne	80002396 <dip204_init+0x31a>
    return false;
80002392:	30 08       	mov	r8,0
80002394:	c4 38       	rjmp	8000241a <dip204_init+0x39e>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80002396:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000239a:	f1 39 00 08 	ld.ub	r9,r8[8]
8000239e:	30 18       	mov	r8,1
800023a0:	f0 09 18 00 	cp.b	r9,r8
800023a4:	c0 31       	brne	800023aa <dip204_init+0x32e>
    return true;
800023a6:	30 18       	mov	r8,1
800023a8:	c3 98       	rjmp	8000241a <dip204_init+0x39e>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800023aa:	ee f8 ff 58 	ld.w	r8,r7[-168]
800023ae:	70 09       	ld.w	r9,r8[0x0]
800023b0:	ee f8 ff 58 	ld.w	r8,r7[-168]
800023b4:	70 18       	ld.w	r8,r8[0x4]
800023b6:	10 39       	cp.w	r9,r8
800023b8:	e0 88 00 1a 	brls	800023ec <dip204_init+0x370>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800023bc:	ee f8 ff 58 	ld.w	r8,r7[-168]
800023c0:	70 09       	ld.w	r9,r8[0x0]
800023c2:	ee f8 ff 5c 	ld.w	r8,r7[-164]
800023c6:	12 38       	cp.w	r8,r9
800023c8:	c1 02       	brcc	800023e8 <dip204_init+0x36c>
800023ca:	ee f8 ff 58 	ld.w	r8,r7[-168]
800023ce:	70 19       	ld.w	r9,r8[0x4]
800023d0:	ee f8 ff 5c 	ld.w	r8,r7[-164]
800023d4:	12 38       	cp.w	r8,r9
800023d6:	e0 88 00 09 	brls	800023e8 <dip204_init+0x36c>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
800023da:	ee f9 ff 58 	ld.w	r9,r7[-168]
800023de:	30 18       	mov	r8,1
800023e0:	f3 68 00 08 	st.b	r9[8],r8
      return true;
800023e4:	30 18       	mov	r8,1
800023e6:	c1 a8       	rjmp	8000241a <dip204_init+0x39e>
    }
    return false;
800023e8:	30 08       	mov	r8,0
800023ea:	c1 88       	rjmp	8000241a <dip204_init+0x39e>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800023ec:	ee f8 ff 58 	ld.w	r8,r7[-168]
800023f0:	70 09       	ld.w	r9,r8[0x0]
800023f2:	ee f8 ff 5c 	ld.w	r8,r7[-164]
800023f6:	12 38       	cp.w	r8,r9
800023f8:	c0 93       	brcs	8000240a <dip204_init+0x38e>
800023fa:	ee f8 ff 58 	ld.w	r8,r7[-168]
800023fe:	70 19       	ld.w	r9,r8[0x4]
80002400:	ee f8 ff 5c 	ld.w	r8,r7[-164]
80002404:	12 38       	cp.w	r8,r9
80002406:	e0 88 00 09 	brls	80002418 <dip204_init+0x39c>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
8000240a:	ee f9 ff 58 	ld.w	r9,r7[-168]
8000240e:	30 18       	mov	r8,1
80002410:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80002414:	30 18       	mov	r8,1
80002416:	c0 28       	rjmp	8000241a <dip204_init+0x39e>
    }
    return false;
80002418:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
8000241a:	58 08       	cp.w	r8,0
8000241c:	ca b0       	breq	80002372 <dip204_init+0x2f6>
  // Send "Enter 4-Line Mode" Command
  dip204_write_byte(0x09);
8000241e:	30 9c       	mov	r12,9
80002420:	f0 1f 01 cb 	mcall	80002b4c <dip204_init+0xad0>
  // Wait for command execution
  delay_ms(1);
80002424:	f0 1f 01 c7 	mcall	80002b40 <dip204_init+0xac4>
80002428:	18 99       	mov	r9,r12
8000242a:	30 18       	mov	r8,1
8000242c:	ef 48 ff 64 	st.w	r7[-156],r8
80002430:	ef 49 ff 60 	st.w	r7[-160],r9
80002434:	ee f8 ff 64 	ld.w	r8,r7[-156]
80002438:	ef 48 ff 6c 	st.w	r7[-148],r8
8000243c:	ee f8 ff 60 	ld.w	r8,r7[-160]
80002440:	ef 48 ff 68 	st.w	r7[-152],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
80002444:	ee fb ff 6c 	ld.w	r11,r7[-148]
80002448:	ef 4b fe 70 	st.w	r7[-400],r11
8000244c:	30 0a       	mov	r10,0
8000244e:	ef 4a fe 6c 	st.w	r7[-404],r10
80002452:	ee f9 ff 68 	ld.w	r9,r7[-152]
80002456:	ef 49 fe 68 	st.w	r7[-408],r9
8000245a:	30 08       	mov	r8,0
8000245c:	ef 48 fe 64 	st.w	r7[-412],r8
80002460:	ee f9 fe 6c 	ld.w	r9,r7[-404]
80002464:	ee fc fe 68 	ld.w	r12,r7[-408]
80002468:	b9 39       	mul	r9,r12
8000246a:	ee f8 fe 64 	ld.w	r8,r7[-412]
8000246e:	ee fb fe 70 	ld.w	r11,r7[-400]
80002472:	b7 38       	mul	r8,r11
80002474:	10 09       	add	r9,r8
80002476:	ee f8 fe 70 	ld.w	r8,r7[-400]
8000247a:	ee fc fe 68 	ld.w	r12,r7[-408]
8000247e:	f0 0c 06 4a 	mulu.d	r10,r8,r12
80002482:	16 09       	add	r9,r11
80002484:	12 9b       	mov	r11,r9
80002486:	e0 68 03 e7 	mov	r8,999
8000248a:	30 09       	mov	r9,0
8000248c:	10 0a       	add	r10,r8
8000248e:	f6 09 00 4b 	adc	r11,r11,r9
80002492:	e0 68 03 e8 	mov	r8,1000
80002496:	30 09       	mov	r9,0
80002498:	f0 1f 01 ab 	mcall	80002b44 <dip204_init+0xac8>
8000249c:	14 98       	mov	r8,r10
8000249e:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
800024a0:	ef 48 ff 74 	st.w	r7[-140],r8
800024a4:	ee c8 01 2c 	sub	r8,r7,300
800024a8:	ef 48 ff 70 	st.w	r7[-144],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800024ac:	e1 b8 00 42 	mfsr	r8,0x108
800024b0:	10 99       	mov	r9,r8
800024b2:	ee f8 ff 70 	ld.w	r8,r7[-144]
800024b6:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800024b8:	ee f8 ff 70 	ld.w	r8,r7[-144]
800024bc:	70 09       	ld.w	r9,r8[0x0]
800024be:	ee f8 ff 74 	ld.w	r8,r7[-140]
800024c2:	10 09       	add	r9,r8
800024c4:	ee f8 ff 70 	ld.w	r8,r7[-144]
800024c8:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
800024ca:	ee f9 ff 70 	ld.w	r9,r7[-144]
800024ce:	30 08       	mov	r8,0
800024d0:	f3 68 00 08 	st.b	r9[8],r8
800024d4:	ee c8 01 2c 	sub	r8,r7,300
800024d8:	ef 48 ff 78 	st.w	r7[-136],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800024dc:	e1 b8 00 42 	mfsr	r8,0x108
800024e0:	ef 48 ff 7c 	st.w	r7[-132],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
800024e4:	ee f8 ff 78 	ld.w	r8,r7[-136]
800024e8:	f1 39 00 08 	ld.ub	r9,r8[8]
800024ec:	30 28       	mov	r8,2
800024ee:	f0 09 18 00 	cp.b	r9,r8
800024f2:	c0 31       	brne	800024f8 <dip204_init+0x47c>
    return false;
800024f4:	30 08       	mov	r8,0
800024f6:	c4 38       	rjmp	8000257c <dip204_init+0x500>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
800024f8:	ee f8 ff 78 	ld.w	r8,r7[-136]
800024fc:	f1 39 00 08 	ld.ub	r9,r8[8]
80002500:	30 18       	mov	r8,1
80002502:	f0 09 18 00 	cp.b	r9,r8
80002506:	c0 31       	brne	8000250c <dip204_init+0x490>
    return true;
80002508:	30 18       	mov	r8,1
8000250a:	c3 98       	rjmp	8000257c <dip204_init+0x500>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000250c:	ee f8 ff 78 	ld.w	r8,r7[-136]
80002510:	70 09       	ld.w	r9,r8[0x0]
80002512:	ee f8 ff 78 	ld.w	r8,r7[-136]
80002516:	70 18       	ld.w	r8,r8[0x4]
80002518:	10 39       	cp.w	r9,r8
8000251a:	e0 88 00 1a 	brls	8000254e <dip204_init+0x4d2>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000251e:	ee f8 ff 78 	ld.w	r8,r7[-136]
80002522:	70 09       	ld.w	r9,r8[0x0]
80002524:	ee f8 ff 7c 	ld.w	r8,r7[-132]
80002528:	12 38       	cp.w	r8,r9
8000252a:	c1 02       	brcc	8000254a <dip204_init+0x4ce>
8000252c:	ee f8 ff 78 	ld.w	r8,r7[-136]
80002530:	70 19       	ld.w	r9,r8[0x4]
80002532:	ee f8 ff 7c 	ld.w	r8,r7[-132]
80002536:	12 38       	cp.w	r8,r9
80002538:	e0 88 00 09 	brls	8000254a <dip204_init+0x4ce>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
8000253c:	ee f9 ff 78 	ld.w	r9,r7[-136]
80002540:	30 18       	mov	r8,1
80002542:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80002546:	30 18       	mov	r8,1
80002548:	c1 a8       	rjmp	8000257c <dip204_init+0x500>
    }
    return false;
8000254a:	30 08       	mov	r8,0
8000254c:	c1 88       	rjmp	8000257c <dip204_init+0x500>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000254e:	ee f8 ff 78 	ld.w	r8,r7[-136]
80002552:	70 09       	ld.w	r9,r8[0x0]
80002554:	ee f8 ff 7c 	ld.w	r8,r7[-132]
80002558:	12 38       	cp.w	r8,r9
8000255a:	c0 93       	brcs	8000256c <dip204_init+0x4f0>
8000255c:	ee f8 ff 78 	ld.w	r8,r7[-136]
80002560:	70 19       	ld.w	r9,r8[0x4]
80002562:	ee f8 ff 7c 	ld.w	r8,r7[-132]
80002566:	12 38       	cp.w	r8,r9
80002568:	e0 88 00 09 	brls	8000257a <dip204_init+0x4fe>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
8000256c:	ee f9 ff 78 	ld.w	r9,r7[-136]
80002570:	30 18       	mov	r8,1
80002572:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80002576:	30 18       	mov	r8,1
80002578:	c0 28       	rjmp	8000257c <dip204_init+0x500>
    }
    return false;
8000257a:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
8000257c:	58 08       	cp.w	r8,0
8000257e:	ca b0       	breq	800024d4 <dip204_init+0x458>
  // Send "Function Set" Command (RE=0)
  dip204_write_byte(0x30);
80002580:	33 0c       	mov	r12,48
80002582:	f0 1f 01 73 	mcall	80002b4c <dip204_init+0xad0>
  // Wait for command execution
  delay_ms(1);
80002586:	f0 1f 01 6f 	mcall	80002b40 <dip204_init+0xac4>
8000258a:	18 99       	mov	r9,r12
8000258c:	30 18       	mov	r8,1
8000258e:	ef 48 ff 84 	st.w	r7[-124],r8
80002592:	ef 49 ff 80 	st.w	r7[-128],r9
80002596:	ee f8 ff 84 	ld.w	r8,r7[-124]
8000259a:	ef 48 ff 8c 	st.w	r7[-116],r8
8000259e:	ee f8 ff 80 	ld.w	r8,r7[-128]
800025a2:	ef 48 ff 88 	st.w	r7[-120],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
800025a6:	ee fb ff 8c 	ld.w	r11,r7[-116]
800025aa:	ef 4b fe 80 	st.w	r7[-384],r11
800025ae:	30 0a       	mov	r10,0
800025b0:	ef 4a fe 7c 	st.w	r7[-388],r10
800025b4:	ee f9 ff 88 	ld.w	r9,r7[-120]
800025b8:	ef 49 fe 78 	st.w	r7[-392],r9
800025bc:	30 08       	mov	r8,0
800025be:	ef 48 fe 74 	st.w	r7[-396],r8
800025c2:	ee f9 fe 7c 	ld.w	r9,r7[-388]
800025c6:	ee fc fe 78 	ld.w	r12,r7[-392]
800025ca:	b9 39       	mul	r9,r12
800025cc:	ee f8 fe 74 	ld.w	r8,r7[-396]
800025d0:	ee fb fe 80 	ld.w	r11,r7[-384]
800025d4:	b7 38       	mul	r8,r11
800025d6:	10 09       	add	r9,r8
800025d8:	ee f8 fe 80 	ld.w	r8,r7[-384]
800025dc:	ee fc fe 78 	ld.w	r12,r7[-392]
800025e0:	f0 0c 06 4a 	mulu.d	r10,r8,r12
800025e4:	16 09       	add	r9,r11
800025e6:	12 9b       	mov	r11,r9
800025e8:	e0 68 03 e7 	mov	r8,999
800025ec:	30 09       	mov	r9,0
800025ee:	10 0a       	add	r10,r8
800025f0:	f6 09 00 4b 	adc	r11,r11,r9
800025f4:	e0 68 03 e8 	mov	r8,1000
800025f8:	30 09       	mov	r9,0
800025fa:	f0 1f 01 53 	mcall	80002b44 <dip204_init+0xac8>
800025fe:	14 98       	mov	r8,r10
80002600:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
80002602:	ef 48 ff 94 	st.w	r7[-108],r8
80002606:	ee c8 01 20 	sub	r8,r7,288
8000260a:	ef 48 ff 90 	st.w	r7[-112],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000260e:	e1 b8 00 42 	mfsr	r8,0x108
80002612:	10 99       	mov	r9,r8
80002614:	ee f8 ff 90 	ld.w	r8,r7[-112]
80002618:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000261a:	ee f8 ff 90 	ld.w	r8,r7[-112]
8000261e:	70 09       	ld.w	r9,r8[0x0]
80002620:	ee f8 ff 94 	ld.w	r8,r7[-108]
80002624:	10 09       	add	r9,r8
80002626:	ee f8 ff 90 	ld.w	r8,r7[-112]
8000262a:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
8000262c:	ee f9 ff 90 	ld.w	r9,r7[-112]
80002630:	30 08       	mov	r8,0
80002632:	f3 68 00 08 	st.b	r9[8],r8
80002636:	ee c8 01 20 	sub	r8,r7,288
8000263a:	ef 48 ff 98 	st.w	r7[-104],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000263e:	e1 b8 00 42 	mfsr	r8,0x108
80002642:	ef 48 ff 9c 	st.w	r7[-100],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80002646:	ee f8 ff 98 	ld.w	r8,r7[-104]
8000264a:	f1 39 00 08 	ld.ub	r9,r8[8]
8000264e:	30 28       	mov	r8,2
80002650:	f0 09 18 00 	cp.b	r9,r8
80002654:	c0 31       	brne	8000265a <dip204_init+0x5de>
    return false;
80002656:	30 08       	mov	r8,0
80002658:	c4 38       	rjmp	800026de <dip204_init+0x662>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
8000265a:	ee f8 ff 98 	ld.w	r8,r7[-104]
8000265e:	f1 39 00 08 	ld.ub	r9,r8[8]
80002662:	30 18       	mov	r8,1
80002664:	f0 09 18 00 	cp.b	r9,r8
80002668:	c0 31       	brne	8000266e <dip204_init+0x5f2>
    return true;
8000266a:	30 18       	mov	r8,1
8000266c:	c3 98       	rjmp	800026de <dip204_init+0x662>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000266e:	ee f8 ff 98 	ld.w	r8,r7[-104]
80002672:	70 09       	ld.w	r9,r8[0x0]
80002674:	ee f8 ff 98 	ld.w	r8,r7[-104]
80002678:	70 18       	ld.w	r8,r8[0x4]
8000267a:	10 39       	cp.w	r9,r8
8000267c:	e0 88 00 1a 	brls	800026b0 <dip204_init+0x634>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002680:	ee f8 ff 98 	ld.w	r8,r7[-104]
80002684:	70 08       	ld.w	r8,r8[0x0]
80002686:	ee f9 ff 9c 	ld.w	r9,r7[-100]
8000268a:	10 39       	cp.w	r9,r8
8000268c:	c1 02       	brcc	800026ac <dip204_init+0x630>
8000268e:	ee f8 ff 98 	ld.w	r8,r7[-104]
80002692:	70 18       	ld.w	r8,r8[0x4]
80002694:	ee f9 ff 9c 	ld.w	r9,r7[-100]
80002698:	10 39       	cp.w	r9,r8
8000269a:	e0 88 00 09 	brls	800026ac <dip204_init+0x630>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
8000269e:	ee f9 ff 98 	ld.w	r9,r7[-104]
800026a2:	30 18       	mov	r8,1
800026a4:	f3 68 00 08 	st.b	r9[8],r8
      return true;
800026a8:	30 18       	mov	r8,1
800026aa:	c1 a8       	rjmp	800026de <dip204_init+0x662>
    }
    return false;
800026ac:	30 08       	mov	r8,0
800026ae:	c1 88       	rjmp	800026de <dip204_init+0x662>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800026b0:	ee f8 ff 98 	ld.w	r8,r7[-104]
800026b4:	70 08       	ld.w	r8,r8[0x0]
800026b6:	ee f9 ff 9c 	ld.w	r9,r7[-100]
800026ba:	10 39       	cp.w	r9,r8
800026bc:	c0 93       	brcs	800026ce <dip204_init+0x652>
800026be:	ee f8 ff 98 	ld.w	r8,r7[-104]
800026c2:	70 18       	ld.w	r8,r8[0x4]
800026c4:	ee f9 ff 9c 	ld.w	r9,r7[-100]
800026c8:	10 39       	cp.w	r9,r8
800026ca:	e0 88 00 09 	brls	800026dc <dip204_init+0x660>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
800026ce:	ee f9 ff 98 	ld.w	r9,r7[-104]
800026d2:	30 18       	mov	r8,1
800026d4:	f3 68 00 08 	st.b	r9[8],r8
      return true;
800026d8:	30 18       	mov	r8,1
800026da:	c0 28       	rjmp	800026de <dip204_init+0x662>
    }
    return false;
800026dc:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
800026de:	58 08       	cp.w	r8,0
800026e0:	ca b0       	breq	80002636 <dip204_init+0x5ba>
  // Send "Display On Command: Display On, Cursor On, Blink On"
  dip204_write_byte(0x0F);
800026e2:	30 fc       	mov	r12,15
800026e4:	f0 1f 01 1a 	mcall	80002b4c <dip204_init+0xad0>
  // Wait for command execution
  delay_ms(1);
800026e8:	f0 1f 01 16 	mcall	80002b40 <dip204_init+0xac4>
800026ec:	18 98       	mov	r8,r12
800026ee:	30 19       	mov	r9,1
800026f0:	ef 49 ff a4 	st.w	r7[-92],r9
800026f4:	ef 48 ff a0 	st.w	r7[-96],r8
800026f8:	ee f8 ff a4 	ld.w	r8,r7[-92]
800026fc:	ef 48 ff ac 	st.w	r7[-84],r8
80002700:	ee f8 ff a0 	ld.w	r8,r7[-96]
80002704:	ef 48 ff a8 	st.w	r7[-88],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
80002708:	ee fb ff ac 	ld.w	r11,r7[-84]
8000270c:	ef 4b fe 90 	st.w	r7[-368],r11
80002710:	30 0a       	mov	r10,0
80002712:	ef 4a fe 8c 	st.w	r7[-372],r10
80002716:	ee f9 ff a8 	ld.w	r9,r7[-88]
8000271a:	ef 49 fe 88 	st.w	r7[-376],r9
8000271e:	30 08       	mov	r8,0
80002720:	ef 48 fe 84 	st.w	r7[-380],r8
80002724:	ee fa fe 8c 	ld.w	r10,r7[-372]
80002728:	ee fc fe 88 	ld.w	r12,r7[-376]
8000272c:	b9 3a       	mul	r10,r12
8000272e:	ee f8 fe 84 	ld.w	r8,r7[-380]
80002732:	ee fb fe 90 	ld.w	r11,r7[-368]
80002736:	b7 38       	mul	r8,r11
80002738:	10 0a       	add	r10,r8
8000273a:	ee fc fe 90 	ld.w	r12,r7[-368]
8000273e:	ee fb fe 88 	ld.w	r11,r7[-376]
80002742:	f8 0b 06 48 	mulu.d	r8,r12,r11
80002746:	12 0a       	add	r10,r9
80002748:	14 99       	mov	r9,r10
8000274a:	e0 6a 03 e7 	mov	r10,999
8000274e:	30 0b       	mov	r11,0
80002750:	f0 0a 00 0a 	add	r10,r8,r10
80002754:	f2 0b 00 4b 	adc	r11,r9,r11
80002758:	e0 68 03 e8 	mov	r8,1000
8000275c:	30 09       	mov	r9,0
8000275e:	f0 1f 00 fa 	mcall	80002b44 <dip204_init+0xac8>
80002762:	14 98       	mov	r8,r10
80002764:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
80002766:	ef 48 ff b4 	st.w	r7[-76],r8
8000276a:	ee c8 01 14 	sub	r8,r7,276
8000276e:	ef 48 ff b0 	st.w	r7[-80],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002772:	e1 b8 00 42 	mfsr	r8,0x108
80002776:	10 99       	mov	r9,r8
80002778:	ee f8 ff b0 	ld.w	r8,r7[-80]
8000277c:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000277e:	ee f8 ff b0 	ld.w	r8,r7[-80]
80002782:	70 09       	ld.w	r9,r8[0x0]
80002784:	ee f8 ff b4 	ld.w	r8,r7[-76]
80002788:	10 09       	add	r9,r8
8000278a:	ee f8 ff b0 	ld.w	r8,r7[-80]
8000278e:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80002790:	ee f9 ff b0 	ld.w	r9,r7[-80]
80002794:	30 08       	mov	r8,0
80002796:	f3 68 00 08 	st.b	r9[8],r8
8000279a:	ee c8 01 14 	sub	r8,r7,276
8000279e:	ef 48 ff b8 	st.w	r7[-72],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800027a2:	e1 b8 00 42 	mfsr	r8,0x108
800027a6:	ef 48 ff bc 	st.w	r7[-68],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
800027aa:	ee f8 ff b8 	ld.w	r8,r7[-72]
800027ae:	f1 39 00 08 	ld.ub	r9,r8[8]
800027b2:	30 28       	mov	r8,2
800027b4:	f0 09 18 00 	cp.b	r9,r8
800027b8:	c0 31       	brne	800027be <dip204_init+0x742>
    return false;
800027ba:	30 08       	mov	r8,0
800027bc:	c4 38       	rjmp	80002842 <dip204_init+0x7c6>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
800027be:	ee f8 ff b8 	ld.w	r8,r7[-72]
800027c2:	f1 39 00 08 	ld.ub	r9,r8[8]
800027c6:	30 18       	mov	r8,1
800027c8:	f0 09 18 00 	cp.b	r9,r8
800027cc:	c0 31       	brne	800027d2 <dip204_init+0x756>
    return true;
800027ce:	30 18       	mov	r8,1
800027d0:	c3 98       	rjmp	80002842 <dip204_init+0x7c6>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800027d2:	ee f8 ff b8 	ld.w	r8,r7[-72]
800027d6:	70 09       	ld.w	r9,r8[0x0]
800027d8:	ee f8 ff b8 	ld.w	r8,r7[-72]
800027dc:	70 18       	ld.w	r8,r8[0x4]
800027de:	10 39       	cp.w	r9,r8
800027e0:	e0 88 00 1a 	brls	80002814 <dip204_init+0x798>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800027e4:	ee f8 ff b8 	ld.w	r8,r7[-72]
800027e8:	70 08       	ld.w	r8,r8[0x0]
800027ea:	ee f9 ff bc 	ld.w	r9,r7[-68]
800027ee:	10 39       	cp.w	r9,r8
800027f0:	c1 02       	brcc	80002810 <dip204_init+0x794>
800027f2:	ee f8 ff b8 	ld.w	r8,r7[-72]
800027f6:	70 18       	ld.w	r8,r8[0x4]
800027f8:	ee f9 ff bc 	ld.w	r9,r7[-68]
800027fc:	10 39       	cp.w	r9,r8
800027fe:	e0 88 00 09 	brls	80002810 <dip204_init+0x794>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80002802:	ee f9 ff b8 	ld.w	r9,r7[-72]
80002806:	30 18       	mov	r8,1
80002808:	f3 68 00 08 	st.b	r9[8],r8
      return true;
8000280c:	30 18       	mov	r8,1
8000280e:	c1 a8       	rjmp	80002842 <dip204_init+0x7c6>
    }
    return false;
80002810:	30 08       	mov	r8,0
80002812:	c1 88       	rjmp	80002842 <dip204_init+0x7c6>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002814:	ee f8 ff b8 	ld.w	r8,r7[-72]
80002818:	70 08       	ld.w	r8,r8[0x0]
8000281a:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000281e:	10 39       	cp.w	r9,r8
80002820:	c0 93       	brcs	80002832 <dip204_init+0x7b6>
80002822:	ee f8 ff b8 	ld.w	r8,r7[-72]
80002826:	70 18       	ld.w	r8,r8[0x4]
80002828:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000282c:	10 39       	cp.w	r9,r8
8000282e:	e0 88 00 09 	brls	80002840 <dip204_init+0x7c4>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80002832:	ee f9 ff b8 	ld.w	r9,r7[-72]
80002836:	30 18       	mov	r8,1
80002838:	f3 68 00 08 	st.b	r9[8],r8
      return true;
8000283c:	30 18       	mov	r8,1
8000283e:	c0 28       	rjmp	80002842 <dip204_init+0x7c6>
    }
    return false;
80002840:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
80002842:	58 08       	cp.w	r8,0
80002844:	ca b0       	breq	8000279a <dip204_init+0x71e>
  // Send "Display Clear" Command
  dip204_write_byte(0x01);
80002846:	30 1c       	mov	r12,1
80002848:	f0 1f 00 c1 	mcall	80002b4c <dip204_init+0xad0>
  // Wait for command execution
  delay_ms(5);
8000284c:	f0 1f 00 bd 	mcall	80002b40 <dip204_init+0xac4>
80002850:	18 98       	mov	r8,r12
80002852:	30 59       	mov	r9,5
80002854:	ef 49 ff c4 	st.w	r7[-60],r9
80002858:	ef 48 ff c0 	st.w	r7[-64],r8
8000285c:	ee f8 ff c4 	ld.w	r8,r7[-60]
80002860:	ef 48 ff cc 	st.w	r7[-52],r8
80002864:	ee f8 ff c0 	ld.w	r8,r7[-64]
80002868:	ef 48 ff c8 	st.w	r7[-56],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
8000286c:	ee fa ff cc 	ld.w	r10,r7[-52]
80002870:	ef 4a fe a0 	st.w	r7[-352],r10
80002874:	30 09       	mov	r9,0
80002876:	ef 49 fe 9c 	st.w	r7[-356],r9
8000287a:	ee f8 ff c8 	ld.w	r8,r7[-56]
8000287e:	ef 48 fe 98 	st.w	r7[-360],r8
80002882:	30 0c       	mov	r12,0
80002884:	ef 4c fe 94 	st.w	r7[-364],r12
80002888:	ee fa fe 9c 	ld.w	r10,r7[-356]
8000288c:	ee fb fe 98 	ld.w	r11,r7[-360]
80002890:	b7 3a       	mul	r10,r11
80002892:	ee f8 fe 94 	ld.w	r8,r7[-364]
80002896:	ee f9 fe a0 	ld.w	r9,r7[-352]
8000289a:	b3 38       	mul	r8,r9
8000289c:	10 0a       	add	r10,r8
8000289e:	ee fc fe a0 	ld.w	r12,r7[-352]
800028a2:	ee fb fe 98 	ld.w	r11,r7[-360]
800028a6:	f8 0b 06 48 	mulu.d	r8,r12,r11
800028aa:	12 0a       	add	r10,r9
800028ac:	14 99       	mov	r9,r10
800028ae:	e0 6a 03 e7 	mov	r10,999
800028b2:	30 0b       	mov	r11,0
800028b4:	f0 0a 00 0a 	add	r10,r8,r10
800028b8:	f2 0b 00 4b 	adc	r11,r9,r11
800028bc:	e0 68 03 e8 	mov	r8,1000
800028c0:	30 09       	mov	r9,0
800028c2:	f0 1f 00 a1 	mcall	80002b44 <dip204_init+0xac8>
800028c6:	14 98       	mov	r8,r10
800028c8:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
800028ca:	ef 48 ff d4 	st.w	r7[-44],r8
800028ce:	ee c8 01 08 	sub	r8,r7,264
800028d2:	ef 48 ff d0 	st.w	r7[-48],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800028d6:	e1 b8 00 42 	mfsr	r8,0x108
800028da:	10 99       	mov	r9,r8
800028dc:	ee f8 ff d0 	ld.w	r8,r7[-48]
800028e0:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800028e2:	ee f8 ff d0 	ld.w	r8,r7[-48]
800028e6:	70 09       	ld.w	r9,r8[0x0]
800028e8:	ee f8 ff d4 	ld.w	r8,r7[-44]
800028ec:	10 09       	add	r9,r8
800028ee:	ee f8 ff d0 	ld.w	r8,r7[-48]
800028f2:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
800028f4:	ee f9 ff d0 	ld.w	r9,r7[-48]
800028f8:	30 08       	mov	r8,0
800028fa:	f3 68 00 08 	st.b	r9[8],r8
800028fe:	ee c8 01 08 	sub	r8,r7,264
80002902:	ef 48 ff d8 	st.w	r7[-40],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002906:	e1 b8 00 42 	mfsr	r8,0x108
8000290a:	ef 48 ff dc 	st.w	r7[-36],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
8000290e:	ee f8 ff d8 	ld.w	r8,r7[-40]
80002912:	f1 39 00 08 	ld.ub	r9,r8[8]
80002916:	30 28       	mov	r8,2
80002918:	f0 09 18 00 	cp.b	r9,r8
8000291c:	c0 31       	brne	80002922 <dip204_init+0x8a6>
    return false;
8000291e:	30 08       	mov	r8,0
80002920:	c4 38       	rjmp	800029a6 <dip204_init+0x92a>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80002922:	ee f8 ff d8 	ld.w	r8,r7[-40]
80002926:	f1 39 00 08 	ld.ub	r9,r8[8]
8000292a:	30 18       	mov	r8,1
8000292c:	f0 09 18 00 	cp.b	r9,r8
80002930:	c0 31       	brne	80002936 <dip204_init+0x8ba>
    return true;
80002932:	30 18       	mov	r8,1
80002934:	c3 98       	rjmp	800029a6 <dip204_init+0x92a>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002936:	ee f8 ff d8 	ld.w	r8,r7[-40]
8000293a:	70 09       	ld.w	r9,r8[0x0]
8000293c:	ee f8 ff d8 	ld.w	r8,r7[-40]
80002940:	70 18       	ld.w	r8,r8[0x4]
80002942:	10 39       	cp.w	r9,r8
80002944:	e0 88 00 1a 	brls	80002978 <dip204_init+0x8fc>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002948:	ee f8 ff d8 	ld.w	r8,r7[-40]
8000294c:	70 08       	ld.w	r8,r8[0x0]
8000294e:	ee f9 ff dc 	ld.w	r9,r7[-36]
80002952:	10 39       	cp.w	r9,r8
80002954:	c1 02       	brcc	80002974 <dip204_init+0x8f8>
80002956:	ee f8 ff d8 	ld.w	r8,r7[-40]
8000295a:	70 18       	ld.w	r8,r8[0x4]
8000295c:	ee f9 ff dc 	ld.w	r9,r7[-36]
80002960:	10 39       	cp.w	r9,r8
80002962:	e0 88 00 09 	brls	80002974 <dip204_init+0x8f8>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80002966:	ee f9 ff d8 	ld.w	r9,r7[-40]
8000296a:	30 18       	mov	r8,1
8000296c:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80002970:	30 18       	mov	r8,1
80002972:	c1 a8       	rjmp	800029a6 <dip204_init+0x92a>
    }
    return false;
80002974:	30 08       	mov	r8,0
80002976:	c1 88       	rjmp	800029a6 <dip204_init+0x92a>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002978:	ee f8 ff d8 	ld.w	r8,r7[-40]
8000297c:	70 08       	ld.w	r8,r8[0x0]
8000297e:	ee f9 ff dc 	ld.w	r9,r7[-36]
80002982:	10 39       	cp.w	r9,r8
80002984:	c0 93       	brcs	80002996 <dip204_init+0x91a>
80002986:	ee f8 ff d8 	ld.w	r8,r7[-40]
8000298a:	70 18       	ld.w	r8,r8[0x4]
8000298c:	ee f9 ff dc 	ld.w	r9,r7[-36]
80002990:	10 39       	cp.w	r9,r8
80002992:	e0 88 00 09 	brls	800029a4 <dip204_init+0x928>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80002996:	ee f9 ff d8 	ld.w	r9,r7[-40]
8000299a:	30 18       	mov	r8,1
8000299c:	f3 68 00 08 	st.b	r9[8],r8
      return true;
800029a0:	30 18       	mov	r8,1
800029a2:	c0 28       	rjmp	800029a6 <dip204_init+0x92a>
    }
    return false;
800029a4:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
800029a6:	58 08       	cp.w	r8,0
800029a8:	ca b0       	breq	800028fe <dip204_init+0x882>
  // Send "Entry Mode Set Command: Increment Mode, Entire Shift off"
  dip204_write_byte(0x06);
800029aa:	30 6c       	mov	r12,6
800029ac:	f0 1f 00 68 	mcall	80002b4c <dip204_init+0xad0>
  // Wait for command execution
  delay_ms(1);
800029b0:	f0 1f 00 64 	mcall	80002b40 <dip204_init+0xac4>
800029b4:	18 98       	mov	r8,r12
800029b6:	30 19       	mov	r9,1
800029b8:	ef 49 ff e4 	st.w	r7[-28],r9
800029bc:	ef 48 ff e0 	st.w	r7[-32],r8
800029c0:	ee f8 ff e4 	ld.w	r8,r7[-28]
800029c4:	ef 48 ff ec 	st.w	r7[-20],r8
800029c8:	ee f8 ff e0 	ld.w	r8,r7[-32]
800029cc:	ef 48 ff e8 	st.w	r7[-24],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
800029d0:	ee fa ff ec 	ld.w	r10,r7[-20]
800029d4:	ef 4a fe b0 	st.w	r7[-336],r10
800029d8:	30 09       	mov	r9,0
800029da:	ef 49 fe ac 	st.w	r7[-340],r9
800029de:	ee f8 ff e8 	ld.w	r8,r7[-24]
800029e2:	ef 48 fe a8 	st.w	r7[-344],r8
800029e6:	30 0c       	mov	r12,0
800029e8:	ef 4c fe a4 	st.w	r7[-348],r12
800029ec:	ee fa fe ac 	ld.w	r10,r7[-340]
800029f0:	ee fb fe a8 	ld.w	r11,r7[-344]
800029f4:	b7 3a       	mul	r10,r11
800029f6:	ee f8 fe a4 	ld.w	r8,r7[-348]
800029fa:	ee f9 fe b0 	ld.w	r9,r7[-336]
800029fe:	b3 38       	mul	r8,r9
80002a00:	10 0a       	add	r10,r8
80002a02:	ee fc fe b0 	ld.w	r12,r7[-336]
80002a06:	ee fb fe a8 	ld.w	r11,r7[-344]
80002a0a:	f8 0b 06 48 	mulu.d	r8,r12,r11
80002a0e:	12 0a       	add	r10,r9
80002a10:	14 99       	mov	r9,r10
80002a12:	e0 6a 03 e7 	mov	r10,999
80002a16:	30 0b       	mov	r11,0
80002a18:	f0 0a 00 0a 	add	r10,r8,r10
80002a1c:	f2 0b 00 4b 	adc	r11,r9,r11
80002a20:	e0 68 03 e8 	mov	r8,1000
80002a24:	30 09       	mov	r9,0
80002a26:	f0 1f 00 48 	mcall	80002b44 <dip204_init+0xac8>
80002a2a:	14 98       	mov	r8,r10
80002a2c:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
80002a2e:	ef 48 ff f4 	st.w	r7[-12],r8
80002a32:	ee c8 00 fc 	sub	r8,r7,252
80002a36:	ef 48 ff f0 	st.w	r7[-16],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002a3a:	e1 b8 00 42 	mfsr	r8,0x108
80002a3e:	10 99       	mov	r9,r8
80002a40:	ee f8 ff f0 	ld.w	r8,r7[-16]
80002a44:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002a46:	ee f8 ff f0 	ld.w	r8,r7[-16]
80002a4a:	70 09       	ld.w	r9,r8[0x0]
80002a4c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002a50:	10 09       	add	r9,r8
80002a52:	ee f8 ff f0 	ld.w	r8,r7[-16]
80002a56:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80002a58:	ee f9 ff f0 	ld.w	r9,r7[-16]
80002a5c:	30 08       	mov	r8,0
80002a5e:	f3 68 00 08 	st.b	r9[8],r8
80002a62:	ee c8 00 fc 	sub	r8,r7,252
80002a66:	ef 48 ff f8 	st.w	r7[-8],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002a6a:	e1 b8 00 42 	mfsr	r8,0x108
80002a6e:	ef 48 ff fc 	st.w	r7[-4],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80002a72:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002a76:	f1 39 00 08 	ld.ub	r9,r8[8]
80002a7a:	30 28       	mov	r8,2
80002a7c:	f0 09 18 00 	cp.b	r9,r8
80002a80:	c0 31       	brne	80002a86 <dip204_init+0xa0a>
    return false;
80002a82:	30 08       	mov	r8,0
80002a84:	c4 38       	rjmp	80002b0a <dip204_init+0xa8e>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80002a86:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002a8a:	f1 39 00 08 	ld.ub	r9,r8[8]
80002a8e:	30 18       	mov	r8,1
80002a90:	f0 09 18 00 	cp.b	r9,r8
80002a94:	c0 31       	brne	80002a9a <dip204_init+0xa1e>
    return true;
80002a96:	30 18       	mov	r8,1
80002a98:	c3 98       	rjmp	80002b0a <dip204_init+0xa8e>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002a9a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002a9e:	70 09       	ld.w	r9,r8[0x0]
80002aa0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002aa4:	70 18       	ld.w	r8,r8[0x4]
80002aa6:	10 39       	cp.w	r9,r8
80002aa8:	e0 88 00 1a 	brls	80002adc <dip204_init+0xa60>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002aac:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002ab0:	70 08       	ld.w	r8,r8[0x0]
80002ab2:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002ab6:	10 39       	cp.w	r9,r8
80002ab8:	c1 02       	brcc	80002ad8 <dip204_init+0xa5c>
80002aba:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002abe:	70 18       	ld.w	r8,r8[0x4]
80002ac0:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002ac4:	10 39       	cp.w	r9,r8
80002ac6:	e0 88 00 09 	brls	80002ad8 <dip204_init+0xa5c>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80002aca:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002ace:	30 18       	mov	r8,1
80002ad0:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80002ad4:	30 18       	mov	r8,1
80002ad6:	c1 a8       	rjmp	80002b0a <dip204_init+0xa8e>
    }
    return false;
80002ad8:	30 08       	mov	r8,0
80002ada:	c1 88       	rjmp	80002b0a <dip204_init+0xa8e>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002adc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002ae0:	70 08       	ld.w	r8,r8[0x0]
80002ae2:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002ae6:	10 39       	cp.w	r9,r8
80002ae8:	c0 93       	brcs	80002afa <dip204_init+0xa7e>
80002aea:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002aee:	70 18       	ld.w	r8,r8[0x4]
80002af0:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002af4:	10 39       	cp.w	r9,r8
80002af6:	e0 88 00 09 	brls	80002b08 <dip204_init+0xa8c>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80002afa:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002afe:	30 18       	mov	r8,1
80002b00:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80002b04:	30 18       	mov	r8,1
80002b06:	c0 28       	rjmp	80002b0a <dip204_init+0xa8e>
    }
    return false;
80002b08:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
80002b0a:	58 08       	cp.w	r8,0
80002b0c:	ca b0       	breq	80002a62 <dip204_init+0x9e6>
  dip204_wait_busy();
80002b0e:	f0 1f 00 11 	mcall	80002b50 <dip204_init+0xad4>
  // unselect chip
  dip204_unselect();
80002b12:	f0 1f 00 11 	mcall	80002b54 <dip204_init+0xad8>
}
80002b16:	29 5d       	sub	sp,-428
80002b18:	e3 cd 80 8f 	ldm	sp++,r0-r3,r7,pc
80002b1c:	00 00       	add	r0,r0
80002b1e:	00 08       	add	r8,r0
80002b20:	80 00       	ld.sh	r0,r0[0x0]
80002b22:	da 48       	*unknown*
80002b24:	80 00       	ld.sh	r0,r0[0x0]
80002b26:	40 04       	lddsp	r4,sp[0x0]
80002b28:	00 00       	add	r0,r0
80002b2a:	05 e8       	ld.ub	r8,r2[0x6]
80002b2c:	00 00       	add	r0,r0
80002b2e:	05 ec       	ld.ub	r12,r2[0x6]
80002b30:	80 00       	ld.sh	r0,r0[0x0]
80002b32:	40 98       	lddsp	r8,sp[0x24]
80002b34:	80 00       	ld.sh	r0,r0[0x0]
80002b36:	41 20       	lddsp	r0,sp[0x48]
80002b38:	80 00       	ld.sh	r0,r0[0x0]
80002b3a:	dd 6e       	*unknown*
80002b3c:	80 00       	ld.sh	r0,r0[0x0]
80002b3e:	dd 06       	*unknown*
80002b40:	80 00       	ld.sh	r0,r0[0x0]
80002b42:	20 64       	sub	r4,6
80002b44:	80 00       	ld.sh	r0,r0[0x0]
80002b46:	ef 8c       	*unknown*
80002b48:	80 00       	ld.sh	r0,r0[0x0]
80002b4a:	2e 00       	sub	r0,-32
80002b4c:	80 00       	ld.sh	r0,r0[0x0]
80002b4e:	2e 30       	sub	r0,-29
80002b50:	80 00       	ld.sh	r0,r0[0x0]
80002b52:	2f 14       	sub	r4,-15
80002b54:	80 00       	ld.sh	r0,r0[0x0]
80002b56:	2e 18       	sub	r8,-31

80002b58 <dip204_hide_cursor>:
  dip204_unselect();
}


void dip204_hide_cursor(void)
{
80002b58:	eb cd 40 80 	pushm	r7,lr
80002b5c:	1a 97       	mov	r7,sp
  /* select the LCD chip */
  dip204_select();
80002b5e:	f0 1f 00 08 	mcall	80002b7c <dip204_hide_cursor+0x24>
  /* Send Command Start Byte */
  dip204_write_byte(DIP204_WRITE_COMMAND);
80002b62:	e0 6c 00 f8 	mov	r12,248
80002b66:	f0 1f 00 07 	mcall	80002b80 <dip204_hide_cursor+0x28>
  /* Send "Display On Command: Display On, Cursor On, Blink On" */
  dip204_write_byte(0x0C);
80002b6a:	30 cc       	mov	r12,12
80002b6c:	f0 1f 00 05 	mcall	80002b80 <dip204_hide_cursor+0x28>
  dip204_wait_busy();
80002b70:	f0 1f 00 05 	mcall	80002b84 <dip204_hide_cursor+0x2c>
  /* unselect chip */
  dip204_unselect();
80002b74:	f0 1f 00 05 	mcall	80002b88 <dip204_hide_cursor+0x30>
}
80002b78:	e3 cd 80 80 	ldm	sp++,r7,pc
80002b7c:	80 00       	ld.sh	r0,r0[0x0]
80002b7e:	2e 00       	sub	r0,-32
80002b80:	80 00       	ld.sh	r0,r0[0x0]
80002b82:	2e 30       	sub	r0,-29
80002b84:	80 00       	ld.sh	r0,r0[0x0]
80002b86:	2f 14       	sub	r4,-15
80002b88:	80 00       	ld.sh	r0,r0[0x0]
80002b8a:	2e 18       	sub	r8,-31

80002b8c <dip204_set_cursor_position>:
  dip204_set_cursor_position(column, line);
}


void dip204_set_cursor_position(unsigned char column, unsigned char line)
{
80002b8c:	eb cd 40 80 	pushm	r7,lr
80002b90:	1a 97       	mov	r7,sp
80002b92:	20 3d       	sub	sp,12
80002b94:	18 99       	mov	r9,r12
80002b96:	16 98       	mov	r8,r11
80002b98:	ef 69 ff f8 	st.b	r7[-8],r9
80002b9c:	ef 68 ff f4 	st.b	r7[-12],r8
  unsigned char address = 0;
80002ba0:	30 08       	mov	r8,0
80002ba2:	ef 68 ff ff 	st.b	r7[-1],r8

  dip204_select();
80002ba6:	f0 1f 00 18 	mcall	80002c04 <dip204_set_cursor_position+0x78>
  if ((column <= 20) && (line <= 4))
80002baa:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80002bae:	31 48       	mov	r8,20
80002bb0:	f0 09 18 00 	cp.b	r9,r8
80002bb4:	e0 8b 00 17 	brhi	80002be2 <dip204_set_cursor_position+0x56>
80002bb8:	ef 39 ff f4 	ld.ub	r9,r7[-12]
80002bbc:	30 48       	mov	r8,4
80002bbe:	f0 09 18 00 	cp.b	r9,r8
80002bc2:	e0 8b 00 10 	brhi	80002be2 <dip204_set_cursor_position+0x56>
  {
    /* Calculate DDRAM address from line and row values */
    address = ( (line-1) * 32 ) + ( column-1 ) + 128;
80002bc6:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80002bca:	20 18       	sub	r8,1
80002bcc:	5c 58       	castu.b	r8
80002bce:	a5 78       	lsl	r8,0x5
80002bd0:	5c 58       	castu.b	r8
80002bd2:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80002bd6:	f2 08 00 08 	add	r8,r9,r8
80002bda:	5c 58       	castu.b	r8
80002bdc:	28 18       	sub	r8,-127
80002bde:	ef 68 ff ff 	st.b	r7[-1],r8
  }
  /* Send Command Start Byte */
  dip204_write_byte(DIP204_WRITE_COMMAND);
80002be2:	e0 6c 00 f8 	mov	r12,248
80002be6:	f0 1f 00 09 	mcall	80002c08 <dip204_set_cursor_position+0x7c>
  /* Send Address lower Nibble */
  dip204_write_byte(address);
80002bea:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80002bee:	10 9c       	mov	r12,r8
80002bf0:	f0 1f 00 06 	mcall	80002c08 <dip204_set_cursor_position+0x7c>
  dip204_wait_busy();
80002bf4:	f0 1f 00 06 	mcall	80002c0c <dip204_set_cursor_position+0x80>
  dip204_unselect();
80002bf8:	f0 1f 00 06 	mcall	80002c10 <dip204_set_cursor_position+0x84>
}
80002bfc:	2f dd       	sub	sp,-12
80002bfe:	e3 cd 80 80 	ldm	sp++,r7,pc
80002c02:	00 00       	add	r0,r0
80002c04:	80 00       	ld.sh	r0,r0[0x0]
80002c06:	2e 00       	sub	r0,-32
80002c08:	80 00       	ld.sh	r0,r0[0x0]
80002c0a:	2e 30       	sub	r0,-29
80002c0c:	80 00       	ld.sh	r0,r0[0x0]
80002c0e:	2f 14       	sub	r4,-15
80002c10:	80 00       	ld.sh	r0,r0[0x0]
80002c12:	2e 18       	sub	r8,-31

80002c14 <dip204_clear_display>:


void dip204_clear_display(void)
{
80002c14:	eb cd 40 8f 	pushm	r0-r3,r7,lr
80002c18:	1a 97       	mov	r7,sp
80002c1a:	20 bd       	sub	sp,44
  dip204_select();
80002c1c:	f0 1f 00 57 	mcall	80002d78 <dip204_clear_display+0x164>
  /* Send Command Start Byte */
  dip204_write_byte(DIP204_WRITE_COMMAND);
80002c20:	e0 6c 00 f8 	mov	r12,248
80002c24:	f0 1f 00 56 	mcall	80002d7c <dip204_clear_display+0x168>
  /* Send Display Clear Command */
  dip204_write_byte(0x01);
80002c28:	30 1c       	mov	r12,1
80002c2a:	f0 1f 00 55 	mcall	80002d7c <dip204_clear_display+0x168>
  /* Wait for command execution */
  delay_ms(4);
80002c2e:	f0 1f 00 55 	mcall	80002d80 <dip204_clear_display+0x16c>
80002c32:	18 98       	mov	r8,r12
80002c34:	30 49       	mov	r9,4
80002c36:	ef 49 ff e4 	st.w	r7[-28],r9
80002c3a:	ef 48 ff e0 	st.w	r7[-32],r8
80002c3e:	ee f8 ff e4 	ld.w	r8,r7[-28]
80002c42:	ef 48 ff ec 	st.w	r7[-20],r8
80002c46:	ee f8 ff e0 	ld.w	r8,r7[-32]
80002c4a:	ef 48 ff e8 	st.w	r7[-24],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
80002c4e:	ee f0 ff ec 	ld.w	r0,r7[-20]
80002c52:	30 01       	mov	r1,0
80002c54:	ee f2 ff e8 	ld.w	r2,r7[-24]
80002c58:	30 03       	mov	r3,0
80002c5a:	e2 02 02 4a 	mul	r10,r1,r2
80002c5e:	e6 00 02 48 	mul	r8,r3,r0
80002c62:	10 0a       	add	r10,r8
80002c64:	e0 02 06 48 	mulu.d	r8,r0,r2
80002c68:	12 0a       	add	r10,r9
80002c6a:	14 99       	mov	r9,r10
80002c6c:	e0 6a 03 e7 	mov	r10,999
80002c70:	30 0b       	mov	r11,0
80002c72:	f0 0a 00 0a 	add	r10,r8,r10
80002c76:	f2 0b 00 4b 	adc	r11,r9,r11
80002c7a:	e0 68 03 e8 	mov	r8,1000
80002c7e:	30 09       	mov	r9,0
80002c80:	f0 1f 00 41 	mcall	80002d84 <dip204_clear_display+0x170>
80002c84:	14 98       	mov	r8,r10
80002c86:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
80002c88:	ef 48 ff f4 	st.w	r7[-12],r8
80002c8c:	ee c8 00 2c 	sub	r8,r7,44
80002c90:	ef 48 ff f0 	st.w	r7[-16],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002c94:	e1 b8 00 42 	mfsr	r8,0x108
80002c98:	10 99       	mov	r9,r8
80002c9a:	ee f8 ff f0 	ld.w	r8,r7[-16]
80002c9e:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002ca0:	ee f8 ff f0 	ld.w	r8,r7[-16]
80002ca4:	70 09       	ld.w	r9,r8[0x0]
80002ca6:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002caa:	10 09       	add	r9,r8
80002cac:	ee f8 ff f0 	ld.w	r8,r7[-16]
80002cb0:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80002cb2:	ee f9 ff f0 	ld.w	r9,r7[-16]
80002cb6:	30 08       	mov	r8,0
80002cb8:	f3 68 00 08 	st.b	r9[8],r8
80002cbc:	ee c8 00 2c 	sub	r8,r7,44
80002cc0:	ef 48 ff f8 	st.w	r7[-8],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002cc4:	e1 b8 00 42 	mfsr	r8,0x108
80002cc8:	ef 48 ff fc 	st.w	r7[-4],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80002ccc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002cd0:	f1 39 00 08 	ld.ub	r9,r8[8]
80002cd4:	30 28       	mov	r8,2
80002cd6:	f0 09 18 00 	cp.b	r9,r8
80002cda:	c0 31       	brne	80002ce0 <dip204_clear_display+0xcc>
    return false;
80002cdc:	30 08       	mov	r8,0
80002cde:	c4 38       	rjmp	80002d64 <dip204_clear_display+0x150>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80002ce0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002ce4:	f1 39 00 08 	ld.ub	r9,r8[8]
80002ce8:	30 18       	mov	r8,1
80002cea:	f0 09 18 00 	cp.b	r9,r8
80002cee:	c0 31       	brne	80002cf4 <dip204_clear_display+0xe0>
    return true;
80002cf0:	30 18       	mov	r8,1
80002cf2:	c3 98       	rjmp	80002d64 <dip204_clear_display+0x150>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002cf4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002cf8:	70 09       	ld.w	r9,r8[0x0]
80002cfa:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002cfe:	70 18       	ld.w	r8,r8[0x4]
80002d00:	10 39       	cp.w	r9,r8
80002d02:	e0 88 00 1a 	brls	80002d36 <dip204_clear_display+0x122>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002d06:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002d0a:	70 08       	ld.w	r8,r8[0x0]
80002d0c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002d10:	10 39       	cp.w	r9,r8
80002d12:	c1 02       	brcc	80002d32 <dip204_clear_display+0x11e>
80002d14:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002d18:	70 18       	ld.w	r8,r8[0x4]
80002d1a:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002d1e:	10 39       	cp.w	r9,r8
80002d20:	e0 88 00 09 	brls	80002d32 <dip204_clear_display+0x11e>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80002d24:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002d28:	30 18       	mov	r8,1
80002d2a:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80002d2e:	30 18       	mov	r8,1
80002d30:	c1 a8       	rjmp	80002d64 <dip204_clear_display+0x150>
    }
    return false;
80002d32:	30 08       	mov	r8,0
80002d34:	c1 88       	rjmp	80002d64 <dip204_clear_display+0x150>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002d36:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002d3a:	70 08       	ld.w	r8,r8[0x0]
80002d3c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002d40:	10 39       	cp.w	r9,r8
80002d42:	c0 93       	brcs	80002d54 <dip204_clear_display+0x140>
80002d44:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002d48:	70 18       	ld.w	r8,r8[0x4]
80002d4a:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002d4e:	10 39       	cp.w	r9,r8
80002d50:	e0 88 00 09 	brls	80002d62 <dip204_clear_display+0x14e>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80002d54:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002d58:	30 18       	mov	r8,1
80002d5a:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80002d5e:	30 18       	mov	r8,1
80002d60:	c0 28       	rjmp	80002d64 <dip204_clear_display+0x150>
    }
    return false;
80002d62:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
80002d64:	58 08       	cp.w	r8,0
80002d66:	ca b0       	breq	80002cbc <dip204_clear_display+0xa8>
  dip204_wait_busy();
80002d68:	f0 1f 00 08 	mcall	80002d88 <dip204_clear_display+0x174>
  dip204_unselect();
80002d6c:	f0 1f 00 08 	mcall	80002d8c <dip204_clear_display+0x178>
}
80002d70:	2f 5d       	sub	sp,-44
80002d72:	e3 cd 80 8f 	ldm	sp++,r0-r3,r7,pc
80002d76:	00 00       	add	r0,r0
80002d78:	80 00       	ld.sh	r0,r0[0x0]
80002d7a:	2e 00       	sub	r0,-32
80002d7c:	80 00       	ld.sh	r0,r0[0x0]
80002d7e:	2e 30       	sub	r0,-29
80002d80:	80 00       	ld.sh	r0,r0[0x0]
80002d82:	20 64       	sub	r4,6
80002d84:	80 00       	ld.sh	r0,r0[0x0]
80002d86:	ef 8c       	*unknown*
80002d88:	80 00       	ld.sh	r0,r0[0x0]
80002d8a:	2f 14       	sub	r4,-15
80002d8c:	80 00       	ld.sh	r0,r0[0x0]
80002d8e:	2e 18       	sub	r8,-31

80002d90 <dip204_write_string>:


void dip204_write_string(const char *string)
{
80002d90:	eb cd 40 80 	pushm	r7,lr
80002d94:	1a 97       	mov	r7,sp
80002d96:	20 2d       	sub	sp,8
80002d98:	ef 4c ff f8 	st.w	r7[-8],r12
  unsigned char i=0;
80002d9c:	30 08       	mov	r8,0
80002d9e:	ef 68 ff ff 	st.b	r7[-1],r8

  dip204_select();
80002da2:	f0 1f 00 14 	mcall	80002df0 <dip204_write_string+0x60>
  /* for all chars in string */
  while(string[i]!=0)
80002da6:	c1 68       	rjmp	80002dd2 <dip204_write_string+0x42>
  {
    /* Send Write Data Start Byte */
    dip204_write_byte(DIP204_WRITE_DATA);
80002da8:	e0 6c 00 fa 	mov	r12,250
80002dac:	f0 1f 00 12 	mcall	80002df4 <dip204_write_string+0x64>
    /* Send byte */
    dip204_write_byte(string[i]);
80002db0:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80002db4:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002db8:	f2 08 00 08 	add	r8,r9,r8
80002dbc:	11 88       	ld.ub	r8,r8[0x0]
80002dbe:	10 9c       	mov	r12,r8
80002dc0:	f0 1f 00 0d 	mcall	80002df4 <dip204_write_string+0x64>
    /* go to next char */
    i++;
80002dc4:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80002dc8:	2f f8       	sub	r8,-1
80002dca:	ef 68 ff ff 	st.b	r7[-1],r8
    dip204_wait_busy();
80002dce:	f0 1f 00 0b 	mcall	80002df8 <dip204_write_string+0x68>
{
  unsigned char i=0;

  dip204_select();
  /* for all chars in string */
  while(string[i]!=0)
80002dd2:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80002dd6:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002dda:	f2 08 00 08 	add	r8,r9,r8
80002dde:	11 88       	ld.ub	r8,r8[0x0]
80002de0:	58 08       	cp.w	r8,0
80002de2:	ce 31       	brne	80002da8 <dip204_write_string+0x18>
    dip204_write_byte(string[i]);
    /* go to next char */
    i++;
    dip204_wait_busy();
  }
  dip204_unselect();
80002de4:	f0 1f 00 06 	mcall	80002dfc <dip204_write_string+0x6c>
}
80002de8:	2f ed       	sub	sp,-8
80002dea:	e3 cd 80 80 	ldm	sp++,r7,pc
80002dee:	00 00       	add	r0,r0
80002df0:	80 00       	ld.sh	r0,r0[0x0]
80002df2:	2e 00       	sub	r0,-32
80002df4:	80 00       	ld.sh	r0,r0[0x0]
80002df6:	2e 30       	sub	r0,-29
80002df8:	80 00       	ld.sh	r0,r0[0x0]
80002dfa:	2f 14       	sub	r4,-15
80002dfc:	80 00       	ld.sh	r0,r0[0x0]
80002dfe:	2e 18       	sub	r8,-31

80002e00 <dip204_select>:

/*! \brief function to select the LCD
 *
 */
static void dip204_select(void)
{
80002e00:	eb cd 40 80 	pushm	r7,lr
80002e04:	1a 97       	mov	r7,sp
  spi_selectChip(DIP204_SPI, DIP204_SPI_NPCS);
80002e06:	30 2b       	mov	r11,2
80002e08:	fe 7c 28 00 	mov	r12,-55296
80002e0c:	f0 1f 00 02 	mcall	80002e14 <dip204_select+0x14>
}
80002e10:	e3 cd 80 80 	ldm	sp++,r7,pc
80002e14:	80 00       	ld.sh	r0,r0[0x0]
80002e16:	86 b8       	ld.uh	r8,r3[0x6]

80002e18 <dip204_unselect>:

/*! \brief function to unselect the LCD
 *
 */
static void dip204_unselect(void)
{
80002e18:	eb cd 40 80 	pushm	r7,lr
80002e1c:	1a 97       	mov	r7,sp
#ifdef _ASSERT_ENABLE_
  spi_status =
#endif
  spi_unselectChip(DIP204_SPI, DIP204_SPI_NPCS);
80002e1e:	30 2b       	mov	r11,2
80002e20:	fe 7c 28 00 	mov	r12,-55296
80002e24:	f0 1f 00 02 	mcall	80002e2c <dip204_unselect+0x14>
  Assert( SPI_OK==spi_status );
}
80002e28:	e3 cd 80 80 	ldm	sp++,r7,pc
80002e2c:	80 00       	ld.sh	r0,r0[0x0]
80002e2e:	87 50       	st.w	r3[0x14],r0

80002e30 <dip204_write_byte>:
 *
 *  \param  byte  Input. byte to write to the LCD (D7 .. D0)
 *
 */
static void dip204_write_byte(unsigned char byte)
{
80002e30:	eb cd 40 80 	pushm	r7,lr
80002e34:	1a 97       	mov	r7,sp
80002e36:	20 3d       	sub	sp,12
80002e38:	18 98       	mov	r8,r12
80002e3a:	ef 68 ff f4 	st.b	r7[-12],r8
  unsigned char reverse;

  switch (byte)
80002e3e:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80002e42:	f0 c8 00 f8 	sub	r8,r8,248
80002e46:	58 68       	cp.w	r8,6
80002e48:	e0 8b 00 10 	brhi	80002e68 <dip204_write_byte+0x38>
80002e4c:	30 19       	mov	r9,1
80002e4e:	f2 08 09 48 	lsl	r8,r9,r8
80002e52:	e2 18 00 55 	andl	r8,0x55,COH
80002e56:	c0 90       	breq	80002e68 <dip204_write_byte+0x38>
    {
      /* send D7 to D0 */
#ifdef _ASSERT_ENABLE_
      spi_status =
#endif
      spi_write(DIP204_SPI, byte);
80002e58:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80002e5c:	10 9b       	mov	r11,r8
80002e5e:	fe 7c 28 00 	mov	r12,-55296
80002e62:	f0 1f 00 15 	mcall	80002eb4 <dip204_write_byte+0x84>
      Assert( SPI_OK==spi_status );
      break;
80002e66:	c2 48       	rjmp	80002eae <dip204_write_byte+0x7e>
    }
    /* LSB first for all other data */
    default:
    {
      /* reverse byte */
      reverse = bit_reverse8(byte);
80002e68:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80002e6c:	ef 48 ff fc 	st.w	r7[-4],r8
80002e70:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002e74:	5c 98       	brev	r8
80002e76:	ef 48 ff fc 	st.w	r7[-4],r8
80002e7a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002e7e:	b9 88       	lsr	r8,0x18
80002e80:	ef 68 ff fb 	st.b	r7[-5],r8
      /* send D0 to D3 */
#ifdef _ASSERT_ENABLE_
      spi_status =
#endif
      spi_write(DIP204_SPI, (reverse & 0xF0));
80002e84:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80002e88:	e2 18 00 f0 	andl	r8,0xf0,COH
80002e8c:	10 9b       	mov	r11,r8
80002e8e:	fe 7c 28 00 	mov	r12,-55296
80002e92:	f0 1f 00 09 	mcall	80002eb4 <dip204_write_byte+0x84>
      Assert( SPI_OK==spi_status );
      /* send D4 to D7 */
#ifdef _ASSERT_ENABLE_
      spi_status =
#endif
      spi_write(DIP204_SPI, ((reverse << 4) & 0xF0));
80002e96:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80002e9a:	a5 68       	lsl	r8,0x4
80002e9c:	5c 88       	casts.h	r8
80002e9e:	5c 78       	castu.h	r8
80002ea0:	f1 d8 c0 08 	bfextu	r8,r8,0x0,0x8
80002ea4:	10 9b       	mov	r11,r8
80002ea6:	fe 7c 28 00 	mov	r12,-55296
80002eaa:	f0 1f 00 03 	mcall	80002eb4 <dip204_write_byte+0x84>
      Assert( SPI_OK==spi_status );
      break;
    }
  }
}
80002eae:	2f dd       	sub	sp,-12
80002eb0:	e3 cd 80 80 	ldm	sp++,r7,pc
80002eb4:	80 00       	ld.sh	r0,r0[0x0]
80002eb6:	89 5a       	st.w	r4[0x14],r10

80002eb8 <dip204_read_byte>:
 *
 *  \param  byte  Input. byte read from the LCD (D7 .. D0)
 *
 */
static void dip204_read_byte(unsigned char *byte)
{
80002eb8:	eb cd 40 80 	pushm	r7,lr
80002ebc:	1a 97       	mov	r7,sp
80002ebe:	20 3d       	sub	sp,12
80002ec0:	ef 4c ff f4 	st.w	r7[-12],r12
  unsigned short reverse = 0x00;
80002ec4:	30 08       	mov	r8,0
80002ec6:	ef 58 ff fa 	st.h	r7[-6],r8

  /* dummy write */
#ifdef _ASSERT_ENABLE_
  spi_status =
#endif
  spi_write(DIP204_SPI, 0x00);
80002eca:	30 0b       	mov	r11,0
80002ecc:	fe 7c 28 00 	mov	r12,-55296
80002ed0:	f0 1f 00 0f 	mcall	80002f0c <dip204_read_byte+0x54>
  Assert( SPI_OK==spi_status );
  /* read RSR register */
#ifdef _ASSERT_ENABLE_
  spi_status =
#endif
  spi_read(DIP204_SPI, &reverse);
80002ed4:	ee c8 00 06 	sub	r8,r7,6
80002ed8:	10 9b       	mov	r11,r8
80002eda:	fe 7c 28 00 	mov	r12,-55296
80002ede:	f0 1f 00 0d 	mcall	80002f10 <dip204_read_byte+0x58>
  Assert( SPI_OK==spi_status );
  /* Revert received byte (issued LSB first by the LCD) */
  *byte = bit_reverse8(reverse);
80002ee2:	ef 08 ff fa 	ld.sh	r8,r7[-6]
80002ee6:	5c 58       	castu.b	r8
80002ee8:	ef 48 ff fc 	st.w	r7[-4],r8
80002eec:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002ef0:	5c 98       	brev	r8
80002ef2:	ef 48 ff fc 	st.w	r7[-4],r8
80002ef6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002efa:	b9 88       	lsr	r8,0x18
80002efc:	5c 58       	castu.b	r8
80002efe:	ee f9 ff f4 	ld.w	r9,r7[-12]
80002f02:	b2 88       	st.b	r9[0x0],r8
}
80002f04:	2f dd       	sub	sp,-12
80002f06:	e3 cd 80 80 	ldm	sp++,r7,pc
80002f0a:	00 00       	add	r0,r0
80002f0c:	80 00       	ld.sh	r0,r0[0x0]
80002f0e:	89 5a       	st.w	r4[0x14],r10
80002f10:	80 00       	ld.sh	r0,r0[0x0]
80002f12:	89 b2       	st.w	r4[0x2c],r2

80002f14 <dip204_wait_busy>:

/*! \brief function to wait for LCD becomes not busy
 *
 */
static void dip204_wait_busy(void)
{
80002f14:	eb cd 40 80 	pushm	r7,lr
80002f18:	1a 97       	mov	r7,sp
80002f1a:	20 1d       	sub	sp,4
  unsigned char status = 0x00;
80002f1c:	30 08       	mov	r8,0
80002f1e:	ef 68 ff ff 	st.b	r7[-1],r8

  /* send read command to LCD */
  dip204_write_byte(DIP204_READ_COMMAND);
80002f22:	e0 6c 00 fc 	mov	r12,252
80002f26:	f0 1f 00 09 	mcall	80002f48 <dip204_wait_busy+0x34>
  /* read next byte */
  do {
  dip204_read_byte(&status);
80002f2a:	ee c8 00 01 	sub	r8,r7,1
80002f2e:	10 9c       	mov	r12,r8
80002f30:	f0 1f 00 07 	mcall	80002f4c <dip204_wait_busy+0x38>
  /* keep D7 to know status */
  }while (status & 0x80);
80002f34:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80002f38:	10 99       	mov	r9,r8
80002f3a:	30 08       	mov	r8,0
80002f3c:	f0 09 18 00 	cp.b	r9,r8
80002f40:	cf 55       	brlt	80002f2a <dip204_wait_busy+0x16>
}
80002f42:	2f fd       	sub	sp,-4
80002f44:	e3 cd 80 80 	ldm	sp++,r7,pc
80002f48:	80 00       	ld.sh	r0,r0[0x0]
80002f4a:	2e 30       	sub	r0,-29
80002f4c:	80 00       	ld.sh	r0,r0[0x0]
80002f4e:	2e b8       	sub	r8,-21

80002f50 <sd_mmc_spi_internal_init>:
//!
//!
//! @return bit
//!   The memory is ready     -> true (always)
bool sd_mmc_spi_internal_init(void)
{
80002f50:	eb cd 40 80 	pushm	r7,lr
80002f54:	1a 97       	mov	r7,sp
80002f56:	20 3d       	sub	sp,12
  uint16_t retry;
  int i;
  int if_cond;

  // Start at low frequency
  sd_mmc_opt.baudrate = 400000;
80002f58:	fe f8 02 c8 	ld.w	r8,pc[712]
80002f5c:	e6 69 1a 80 	mov	r9,400000
80002f60:	91 19       	st.w	r8[0x4],r9
  spi_setupChipReg(SD_MMC_SPI, &sd_mmc_opt, sd_mmc_pba_hz);
80002f62:	fe f8 02 c2 	ld.w	r8,pc[706]
80002f66:	70 08       	ld.w	r8,r8[0x0]
80002f68:	10 9a       	mov	r10,r8
80002f6a:	fe fb 02 b6 	ld.w	r11,pc[694]
80002f6e:	fe 7c 28 00 	mov	r12,-55296
80002f72:	f0 1f 00 ae 	mcall	80003228 <sd_mmc_spi_internal_init+0x2d8>

  /* card needs 74 cycles minimum to start up */
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
80002f76:	30 1b       	mov	r11,1
80002f78:	fe 7c 28 00 	mov	r12,-55296
80002f7c:	f0 1f 00 ac 	mcall	8000322c <sd_mmc_spi_internal_init+0x2dc>
  for(i = 0; i < 10; ++i) {
80002f80:	30 08       	mov	r8,0
80002f82:	ef 48 ff f8 	st.w	r7[-8],r8
80002f86:	c0 c8       	rjmp	80002f9e <sd_mmc_spi_internal_init+0x4e>
    spi_write(SD_MMC_SPI,0xFF);
80002f88:	e0 6b 00 ff 	mov	r11,255
80002f8c:	fe 7c 28 00 	mov	r12,-55296
80002f90:	f0 1f 00 a8 	mcall	80003230 <sd_mmc_spi_internal_init+0x2e0>
  sd_mmc_opt.baudrate = 400000;
  spi_setupChipReg(SD_MMC_SPI, &sd_mmc_opt, sd_mmc_pba_hz);

  /* card needs 74 cycles minimum to start up */
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
  for(i = 0; i < 10; ++i) {
80002f94:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002f98:	2f f8       	sub	r8,-1
80002f9a:	ef 48 ff f8 	st.w	r7[-8],r8
80002f9e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002fa2:	58 98       	cp.w	r8,9
80002fa4:	fe 9a ff f2 	brle	80002f88 <sd_mmc_spi_internal_init+0x38>
    spi_write(SD_MMC_SPI,0xFF);
  }
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80002fa8:	30 1b       	mov	r11,1
80002faa:	fe 7c 28 00 	mov	r12,-55296
80002fae:	f0 1f 00 a2 	mcall	80003234 <sd_mmc_spi_internal_init+0x2e4>

  // RESET THE MEMORY CARD
  sd_mmc_spi_init_done = false;
80002fb2:	fe f9 02 86 	ld.w	r9,pc[646]
80002fb6:	30 08       	mov	r8,0
80002fb8:	b2 88       	st.b	r9[0x0],r8
  card_type = MMC_CARD;
80002fba:	fe f9 02 82 	ld.w	r9,pc[642]
80002fbe:	30 08       	mov	r8,0
80002fc0:	b2 88       	st.b	r9[0x0],r8
  retry = 0;
80002fc2:	30 08       	mov	r8,0
80002fc4:	ef 58 ff f6 	st.h	r7[-10],r8
  do
  {
    // reset card and go to SPI mode
    r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0);
80002fc8:	30 0b       	mov	r11,0
80002fca:	30 0c       	mov	r12,0
80002fcc:	f0 1f 00 9d 	mcall	80003240 <sd_mmc_spi_internal_init+0x2f0>
80002fd0:	18 98       	mov	r8,r12
80002fd2:	fe f9 02 72 	ld.w	r9,pc[626]
80002fd6:	b2 88       	st.b	r9[0x0],r8
    spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80002fd8:	e0 6b 00 ff 	mov	r11,255
80002fdc:	fe 7c 28 00 	mov	r12,-55296
80002fe0:	f0 1f 00 94 	mcall	80003230 <sd_mmc_spi_internal_init+0x2e0>
    // do retry counter
    retry++;
80002fe4:	ef 08 ff f6 	ld.sh	r8,r7[-10]
80002fe8:	2f f8       	sub	r8,-1
80002fea:	ef 58 ff f6 	st.h	r7[-10],r8
    if(retry > 100)
80002fee:	ef 09 ff f6 	ld.sh	r9,r7[-10]
80002ff2:	36 48       	mov	r8,100
80002ff4:	f0 09 19 00 	cp.h	r9,r8
80002ff8:	e0 88 00 04 	brls	80003000 <sd_mmc_spi_internal_init+0xb0>
      return false;
80002ffc:	30 08       	mov	r8,0
80002ffe:	c0 d9       	rjmp	80003218 <sd_mmc_spi_internal_init+0x2c8>
  }
  while(r1 != 0x01);   // check memory enters idle_state
80003000:	fe f8 02 44 	ld.w	r8,pc[580]
80003004:	11 89       	ld.ub	r9,r8[0x0]
80003006:	30 18       	mov	r8,1
80003008:	f0 09 18 00 	cp.b	r9,r8
8000300c:	cd e1       	brne	80002fc8 <sd_mmc_spi_internal_init+0x78>

  if_cond = sd_mmc_spi_get_if();
8000300e:	f0 1f 00 8f 	mcall	80003248 <sd_mmc_spi_internal_init+0x2f8>
80003012:	18 98       	mov	r8,r12
80003014:	ef 48 ff fc 	st.w	r7[-4],r8
  if(if_cond == -1) {
80003018:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000301c:	5b f8       	cp.w	r8,-1
8000301e:	c0 31       	brne	80003024 <sd_mmc_spi_internal_init+0xd4>
      return false; // card is bad
80003020:	30 08       	mov	r8,0
80003022:	cf b8       	rjmp	80003218 <sd_mmc_spi_internal_init+0x2c8>
  } else if (if_cond == 1) {
80003024:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003028:	58 18       	cp.w	r8,1
8000302a:	c0 61       	brne	80003036 <sd_mmc_spi_internal_init+0xe6>
      card_type = SD_CARD_2;
8000302c:	fe f9 02 10 	ld.w	r9,pc[528]
80003030:	30 28       	mov	r8,2
80003032:	b2 88       	st.b	r9[0x0],r8
80003034:	c4 c8       	rjmp	800030cc <sd_mmc_spi_internal_init+0x17c>
  } else {
    // IDENTIFICATION OF THE CARD TYPE (SD or MMC)
    // Both cards will accept CMD55 command but only the SD card will respond to ACMD41
    r1 = sd_mmc_spi_send_command(SD_APP_CMD55,0);
80003036:	30 0b       	mov	r11,0
80003038:	33 7c       	mov	r12,55
8000303a:	f0 1f 00 82 	mcall	80003240 <sd_mmc_spi_internal_init+0x2f0>
8000303e:	18 98       	mov	r8,r12
80003040:	fe f9 02 04 	ld.w	r9,pc[516]
80003044:	b2 88       	st.b	r9[0x0],r8
    spi_write(SD_MMC_SPI,0xFF);  // write dummy byte
80003046:	e0 6b 00 ff 	mov	r11,255
8000304a:	fe 7c 28 00 	mov	r12,-55296
8000304e:	f0 1f 00 79 	mcall	80003230 <sd_mmc_spi_internal_init+0x2e0>

    r1 = sd_mmc_spi_send_command(SD_SEND_OP_COND_ACMD, 0);
80003052:	30 0b       	mov	r11,0
80003054:	32 9c       	mov	r12,41
80003056:	f0 1f 00 7b 	mcall	80003240 <sd_mmc_spi_internal_init+0x2f0>
8000305a:	18 98       	mov	r8,r12
8000305c:	4f a9       	lddpc	r9,80003244 <sd_mmc_spi_internal_init+0x2f4>
8000305e:	b2 88       	st.b	r9[0x0],r8
    spi_write(SD_MMC_SPI,0xFF);  // write dummy byte
80003060:	e0 6b 00 ff 	mov	r11,255
80003064:	fe 7c 28 00 	mov	r12,-55296
80003068:	f0 1f 00 72 	mcall	80003230 <sd_mmc_spi_internal_init+0x2e0>

    if ((r1&0xFE) == 0) {   // ignore "in_idle_state" flag bit
8000306c:	4f 68       	lddpc	r8,80003244 <sd_mmc_spi_internal_init+0x2f4>
8000306e:	11 88       	ld.ub	r8,r8[0x0]
80003070:	e2 18 00 fe 	andl	r8,0xfe,COH
80003074:	c0 51       	brne	8000307e <sd_mmc_spi_internal_init+0x12e>
      card_type = SD_CARD;    // card has accepted the command, this is a SD card
80003076:	4f 29       	lddpc	r9,8000323c <sd_mmc_spi_internal_init+0x2ec>
80003078:	30 18       	mov	r8,1
8000307a:	b2 88       	st.b	r9[0x0],r8
8000307c:	c2 88       	rjmp	800030cc <sd_mmc_spi_internal_init+0x17c>
    } else {
      card_type = MMC_CARD;   // card has not responded, this is a MMC card
8000307e:	4f 09       	lddpc	r9,8000323c <sd_mmc_spi_internal_init+0x2ec>
80003080:	30 08       	mov	r8,0
80003082:	b2 88       	st.b	r9[0x0],r8
      // reset card again
      retry = 0;
80003084:	30 08       	mov	r8,0
80003086:	ef 58 ff f6 	st.h	r7[-10],r8
      do {
        // reset card again
        r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0);
8000308a:	30 0b       	mov	r11,0
8000308c:	30 0c       	mov	r12,0
8000308e:	f0 1f 00 6d 	mcall	80003240 <sd_mmc_spi_internal_init+0x2f0>
80003092:	18 98       	mov	r8,r12
80003094:	4e c9       	lddpc	r9,80003244 <sd_mmc_spi_internal_init+0x2f4>
80003096:	b2 88       	st.b	r9[0x0],r8
        spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80003098:	e0 6b 00 ff 	mov	r11,255
8000309c:	fe 7c 28 00 	mov	r12,-55296
800030a0:	f0 1f 00 64 	mcall	80003230 <sd_mmc_spi_internal_init+0x2e0>
        // do retry counter
        retry++;
800030a4:	ef 08 ff f6 	ld.sh	r8,r7[-10]
800030a8:	2f f8       	sub	r8,-1
800030aa:	ef 58 ff f6 	st.h	r7[-10],r8
        if(retry > 100)
800030ae:	ef 09 ff f6 	ld.sh	r9,r7[-10]
800030b2:	36 48       	mov	r8,100
800030b4:	f0 09 19 00 	cp.h	r9,r8
800030b8:	e0 88 00 04 	brls	800030c0 <sd_mmc_spi_internal_init+0x170>
          return false;
800030bc:	30 08       	mov	r8,0
800030be:	ca d8       	rjmp	80003218 <sd_mmc_spi_internal_init+0x2c8>
      }
      while(r1 != 0x01);   // check memory enters idle_state
800030c0:	4e 18       	lddpc	r8,80003244 <sd_mmc_spi_internal_init+0x2f4>
800030c2:	11 89       	ld.ub	r9,r8[0x0]
800030c4:	30 18       	mov	r8,1
800030c6:	f0 09 18 00 	cp.b	r9,r8
800030ca:	ce 01       	brne	8000308a <sd_mmc_spi_internal_init+0x13a>
    }
  }

  // CONTINUE INTERNAL INITIALIZATION OF THE CARD
  // Continue sending CMD1 while memory card is in idle state
  retry = 0;
800030cc:	30 08       	mov	r8,0
800030ce:	ef 58 ff f6 	st.h	r7[-10],r8
  do {
    switch(card_type) {
800030d2:	4d b8       	lddpc	r8,8000323c <sd_mmc_spi_internal_init+0x2ec>
800030d4:	11 88       	ld.ub	r8,r8[0x0]
800030d6:	58 18       	cp.w	r8,1
800030d8:	c1 30       	breq	800030fe <sd_mmc_spi_internal_init+0x1ae>
800030da:	58 28       	cp.w	r8,2
800030dc:	c2 30       	breq	80003122 <sd_mmc_spi_internal_init+0x1d2>
800030de:	58 08       	cp.w	r8,0
800030e0:	c3 31       	brne	80003146 <sd_mmc_spi_internal_init+0x1f6>
    case MMC_CARD:
      r1 = sd_mmc_spi_send_command(MMC_SEND_OP_COND, 0);
800030e2:	30 0b       	mov	r11,0
800030e4:	30 1c       	mov	r12,1
800030e6:	f0 1f 00 57 	mcall	80003240 <sd_mmc_spi_internal_init+0x2f0>
800030ea:	18 98       	mov	r8,r12
800030ec:	4d 69       	lddpc	r9,80003244 <sd_mmc_spi_internal_init+0x2f4>
800030ee:	b2 88       	st.b	r9[0x0],r8
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
800030f0:	e0 6b 00 ff 	mov	r11,255
800030f4:	fe 7c 28 00 	mov	r12,-55296
800030f8:	f0 1f 00 4e 	mcall	80003230 <sd_mmc_spi_internal_init+0x2e0>
      break;
800030fc:	c2 58       	rjmp	80003146 <sd_mmc_spi_internal_init+0x1f6>
    case SD_CARD:
      sd_mmc_spi_send_command(SD_APP_CMD55,0);
800030fe:	30 0b       	mov	r11,0
80003100:	33 7c       	mov	r12,55
80003102:	f0 1f 00 50 	mcall	80003240 <sd_mmc_spi_internal_init+0x2f0>
      r1 = sd_mmc_spi_send_command(SD_SEND_OP_COND_ACMD, 0);
80003106:	30 0b       	mov	r11,0
80003108:	32 9c       	mov	r12,41
8000310a:	f0 1f 00 4e 	mcall	80003240 <sd_mmc_spi_internal_init+0x2f0>
8000310e:	18 98       	mov	r8,r12
80003110:	4c d9       	lddpc	r9,80003244 <sd_mmc_spi_internal_init+0x2f4>
80003112:	b2 88       	st.b	r9[0x0],r8
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80003114:	e0 6b 00 ff 	mov	r11,255
80003118:	fe 7c 28 00 	mov	r12,-55296
8000311c:	f0 1f 00 45 	mcall	80003230 <sd_mmc_spi_internal_init+0x2e0>
      break;
80003120:	c1 38       	rjmp	80003146 <sd_mmc_spi_internal_init+0x1f6>
    case SD_CARD_2:
      // set high capacity bit mask
      sd_mmc_spi_send_command(SD_APP_CMD55,0);
80003122:	30 0b       	mov	r11,0
80003124:	33 7c       	mov	r12,55
80003126:	f0 1f 00 47 	mcall	80003240 <sd_mmc_spi_internal_init+0x2f0>
      r1 = sd_mmc_spi_send_command(SD_SEND_OP_COND_ACMD, 0x40000000);
8000312a:	fc 1b 40 00 	movh	r11,0x4000
8000312e:	32 9c       	mov	r12,41
80003130:	f0 1f 00 44 	mcall	80003240 <sd_mmc_spi_internal_init+0x2f0>
80003134:	18 98       	mov	r8,r12
80003136:	4c 49       	lddpc	r9,80003244 <sd_mmc_spi_internal_init+0x2f4>
80003138:	b2 88       	st.b	r9[0x0],r8
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
8000313a:	e0 6b 00 ff 	mov	r11,255
8000313e:	fe 7c 28 00 	mov	r12,-55296
80003142:	f0 1f 00 3c 	mcall	80003230 <sd_mmc_spi_internal_init+0x2e0>
      break;
    }
     // do retry counter
     retry++;
80003146:	ef 08 ff f6 	ld.sh	r8,r7[-10]
8000314a:	2f f8       	sub	r8,-1
8000314c:	ef 58 ff f6 	st.h	r7[-10],r8
     if(retry == 50000)    // measured approx. 500 on several cards
80003150:	ef 09 ff f6 	ld.sh	r9,r7[-10]
80003154:	fe 78 c3 50 	mov	r8,-15536
80003158:	f0 09 19 00 	cp.h	r9,r8
8000315c:	c0 31       	brne	80003162 <sd_mmc_spi_internal_init+0x212>
        return false;
8000315e:	30 08       	mov	r8,0
80003160:	c5 c8       	rjmp	80003218 <sd_mmc_spi_internal_init+0x2c8>
  } while (r1);
80003162:	4b 98       	lddpc	r8,80003244 <sd_mmc_spi_internal_init+0x2f4>
80003164:	11 88       	ld.ub	r8,r8[0x0]
80003166:	58 08       	cp.w	r8,0
80003168:	cb 51       	brne	800030d2 <sd_mmc_spi_internal_init+0x182>

  // CHECK FOR SDHC
  if(card_type == SD_CARD_2) {
8000316a:	4b 58       	lddpc	r8,8000323c <sd_mmc_spi_internal_init+0x2ec>
8000316c:	11 89       	ld.ub	r9,r8[0x0]
8000316e:	30 28       	mov	r8,2
80003170:	f0 09 18 00 	cp.b	r9,r8
80003174:	c1 31       	brne	8000319a <sd_mmc_spi_internal_init+0x24a>
    if_cond = sd_mmc_spi_check_hc();
80003176:	f0 1f 00 36 	mcall	8000324c <sd_mmc_spi_internal_init+0x2fc>
8000317a:	18 98       	mov	r8,r12
8000317c:	ef 48 ff fc 	st.w	r7[-4],r8
    if (if_cond == -1) {
80003180:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003184:	5b f8       	cp.w	r8,-1
80003186:	c0 31       	brne	8000318c <sd_mmc_spi_internal_init+0x23c>
      return false;
80003188:	30 08       	mov	r8,0
8000318a:	c4 78       	rjmp	80003218 <sd_mmc_spi_internal_init+0x2c8>
    } else if (if_cond == 1){
8000318c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003190:	58 18       	cp.w	r8,1
80003192:	c0 41       	brne	8000319a <sd_mmc_spi_internal_init+0x24a>
          card_type = SD_CARD_2_SDHC;
80003194:	4a a9       	lddpc	r9,8000323c <sd_mmc_spi_internal_init+0x2ec>
80003196:	30 38       	mov	r8,3
80003198:	b2 88       	st.b	r9[0x0],r8
      }
  }

  // DISABLE CRC TO SIMPLIFY AND SPEED UP COMMUNICATIONS
  r1 = sd_mmc_spi_send_command(MMC_CRC_ON_OFF, 0);  // disable CRC (should be already initialized on SPI init)
8000319a:	30 0b       	mov	r11,0
8000319c:	33 bc       	mov	r12,59
8000319e:	f0 1f 00 29 	mcall	80003240 <sd_mmc_spi_internal_init+0x2f0>
800031a2:	18 98       	mov	r8,r12
800031a4:	4a 89       	lddpc	r9,80003244 <sd_mmc_spi_internal_init+0x2f4>
800031a6:	b2 88       	st.b	r9[0x0],r8
  spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
800031a8:	e0 6b 00 ff 	mov	r11,255
800031ac:	fe 7c 28 00 	mov	r12,-55296
800031b0:	f0 1f 00 20 	mcall	80003230 <sd_mmc_spi_internal_init+0x2e0>

  // SET BLOCK LENGTH TO 512 BYTES
  r1 = sd_mmc_spi_send_command(MMC_SET_BLOCKLEN, 512);
800031b4:	e0 6b 02 00 	mov	r11,512
800031b8:	31 0c       	mov	r12,16
800031ba:	f0 1f 00 22 	mcall	80003240 <sd_mmc_spi_internal_init+0x2f0>
800031be:	18 98       	mov	r8,r12
800031c0:	4a 19       	lddpc	r9,80003244 <sd_mmc_spi_internal_init+0x2f4>
800031c2:	b2 88       	st.b	r9[0x0],r8
  spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
800031c4:	e0 6b 00 ff 	mov	r11,255
800031c8:	fe 7c 28 00 	mov	r12,-55296
800031cc:	f0 1f 00 19 	mcall	80003230 <sd_mmc_spi_internal_init+0x2e0>
  if (r1 != 0x00)
800031d0:	49 d8       	lddpc	r8,80003244 <sd_mmc_spi_internal_init+0x2f4>
800031d2:	11 88       	ld.ub	r8,r8[0x0]
800031d4:	58 08       	cp.w	r8,0
800031d6:	c0 30       	breq	800031dc <sd_mmc_spi_internal_init+0x28c>
    return false;    // card unsupported if block length of 512b is not accepted
800031d8:	30 08       	mov	r8,0
800031da:	c1 f8       	rjmp	80003218 <sd_mmc_spi_internal_init+0x2c8>

  // GET CARD SPECIFIC DATA
  if (false ==  sd_mmc_spi_get_csd(csd))
800031dc:	49 dc       	lddpc	r12,80003250 <sd_mmc_spi_internal_init+0x300>
800031de:	f0 1f 00 1e 	mcall	80003254 <sd_mmc_spi_internal_init+0x304>
800031e2:	18 98       	mov	r8,r12
800031e4:	ec 18 00 01 	eorl	r8,0x1
800031e8:	5c 58       	castu.b	r8
800031ea:	c0 30       	breq	800031f0 <sd_mmc_spi_internal_init+0x2a0>
    return false;
800031ec:	30 08       	mov	r8,0
800031ee:	c1 58       	rjmp	80003218 <sd_mmc_spi_internal_init+0x2c8>

  // GET CARD CAPACITY and NUMBER OF SECTORS
  sd_mmc_spi_get_capacity();
800031f0:	f0 1f 00 1a 	mcall	80003258 <sd_mmc_spi_internal_init+0x308>
#if (defined SD_MMC_READ_CID) && (SD_MMC_READ_CID == true)
  if (false ==  sd_mmc_spi_get_cid(cid))
    return false;
#endif

  sd_mmc_spi_init_done = true;
800031f4:	49 19       	lddpc	r9,80003238 <sd_mmc_spi_internal_init+0x2e8>
800031f6:	30 18       	mov	r8,1
800031f8:	b2 88       	st.b	r9[0x0],r8

  // Set SPI Speed to MAX
  sd_mmc_opt.baudrate = SD_MMC_SPI_MASTER_SPEED;
800031fa:	48 a8       	lddpc	r8,80003220 <sd_mmc_spi_internal_init+0x2d0>
800031fc:	e0 69 1b 00 	mov	r9,6912
80003200:	ea 19 00 b7 	orh	r9,0xb7
80003204:	91 19       	st.w	r8[0x4],r9
  spi_setupChipReg(SD_MMC_SPI, &sd_mmc_opt, sd_mmc_pba_hz);
80003206:	48 88       	lddpc	r8,80003224 <sd_mmc_spi_internal_init+0x2d4>
80003208:	70 08       	ld.w	r8,r8[0x0]
8000320a:	10 9a       	mov	r10,r8
8000320c:	48 5b       	lddpc	r11,80003220 <sd_mmc_spi_internal_init+0x2d0>
8000320e:	fe 7c 28 00 	mov	r12,-55296
80003212:	f0 1f 00 06 	mcall	80003228 <sd_mmc_spi_internal_init+0x2d8>
  return true;
80003216:	30 18       	mov	r8,1
}
80003218:	10 9c       	mov	r12,r8
8000321a:	2f dd       	sub	sp,-12
8000321c:	e3 cd 80 80 	ldm	sp++,r7,pc
80003220:	00 00       	add	r0,r0
80003222:	06 10       	sub	r0,r3
80003224:	00 00       	add	r0,r0
80003226:	06 20       	rsub	r0,r3
80003228:	80 00       	ld.sh	r0,r0[0x0]
8000322a:	87 bc       	st.w	r3[0x2c],r12
8000322c:	80 00       	ld.sh	r0,r0[0x0]
8000322e:	86 b8       	ld.uh	r8,r3[0x6]
80003230:	80 00       	ld.sh	r0,r0[0x0]
80003232:	89 5a       	st.w	r4[0x14],r10
80003234:	80 00       	ld.sh	r0,r0[0x0]
80003236:	87 50       	st.w	r3[0x14],r0
80003238:	00 00       	add	r0,r0
8000323a:	06 24       	rsub	r4,r3
8000323c:	00 00       	add	r0,r0
8000323e:	0b 0a       	ld.w	r10,r5++
80003240:	80 00       	ld.sh	r0,r0[0x0]
80003242:	32 9c       	mov	r12,41
80003244:	00 00       	add	r0,r0
80003246:	0b 1c       	ld.sh	r12,r5++
80003248:	80 00       	ld.sh	r0,r0[0x0]
8000324a:	34 50       	mov	r0,69
8000324c:	80 00       	ld.sh	r0,r0[0x0]
8000324e:	35 30       	mov	r0,83
80003250:	00 00       	add	r0,r0
80003252:	0b 0c       	ld.w	r12,r5++
80003254:	80 00       	ld.sh	r0,r0[0x0]
80003256:	35 ec       	mov	r12,94
80003258:	80 00       	ld.sh	r0,r0[0x0]
8000325a:	37 30       	mov	r0,115

8000325c <sd_mmc_spi_init>:
//!
//!
//! @return bit
//!   The memory is ready     -> true (always)
bool sd_mmc_spi_init(spi_options_t spiOptions, unsigned int pba_hz)
{
8000325c:	eb cd 40 80 	pushm	r7,lr
80003260:	1a 97       	mov	r7,sp
80003262:	20 1d       	sub	sp,4
80003264:	ee c8 ff f8 	sub	r8,r7,-8
80003268:	ef 4c ff fc 	st.w	r7[-4],r12
  // Keep SPI options internally
  sd_mmc_pba_hz = pba_hz;
8000326c:	48 89       	lddpc	r9,8000328c <sd_mmc_spi_init+0x30>
8000326e:	ee fa ff fc 	ld.w	r10,r7[-4]
80003272:	93 0a       	st.w	r9[0x0],r10
  memcpy( &sd_mmc_opt, &spiOptions, sizeof(spi_options_t) );
80003274:	31 0a       	mov	r10,16
80003276:	10 9b       	mov	r11,r8
80003278:	48 6c       	lddpc	r12,80003290 <sd_mmc_spi_init+0x34>
8000327a:	f0 1f 00 07 	mcall	80003294 <sd_mmc_spi_init+0x38>

  // Initialize the SD/MMC controller.
  return sd_mmc_spi_internal_init();
8000327e:	f0 1f 00 07 	mcall	80003298 <sd_mmc_spi_init+0x3c>
80003282:	18 98       	mov	r8,r12
}
80003284:	10 9c       	mov	r12,r8
80003286:	2f fd       	sub	sp,-4
80003288:	e3 cd 80 80 	ldm	sp++,r7,pc
8000328c:	00 00       	add	r0,r0
8000328e:	06 20       	rsub	r0,r3
80003290:	00 00       	add	r0,r0
80003292:	06 10       	sub	r0,r3
80003294:	80 00       	ld.sh	r0,r0[0x0]
80003296:	f2 16 80 00 	pref	r6[-32768]
8000329a:	2f 50       	sub	r0,-11

8000329c <sd_mmc_spi_send_command>:
//! @param  arg       argument of the command
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
8000329c:	eb cd 40 80 	pushm	r7,lr
800032a0:	1a 97       	mov	r7,sp
800032a2:	20 2d       	sub	sp,8
800032a4:	18 98       	mov	r8,r12
800032a6:	ef 4b ff f8 	st.w	r7[-8],r11
800032aa:	ef 68 ff fc 	st.b	r7[-4],r8
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
800032ae:	30 1b       	mov	r11,1
800032b0:	fe 7c 28 00 	mov	r12,-55296
800032b4:	f0 1f 00 0c 	mcall	800032e4 <sd_mmc_spi_send_command+0x48>
  r1 = sd_mmc_spi_command(command, arg);
800032b8:	ef 38 ff fc 	ld.ub	r8,r7[-4]
800032bc:	ee fb ff f8 	ld.w	r11,r7[-8]
800032c0:	10 9c       	mov	r12,r8
800032c2:	f0 1f 00 0a 	mcall	800032e8 <sd_mmc_spi_send_command+0x4c>
800032c6:	18 98       	mov	r8,r12
800032c8:	48 99       	lddpc	r9,800032ec <sd_mmc_spi_send_command+0x50>
800032ca:	b2 88       	st.b	r9[0x0],r8
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800032cc:	30 1b       	mov	r11,1
800032ce:	fe 7c 28 00 	mov	r12,-55296
800032d2:	f0 1f 00 08 	mcall	800032f0 <sd_mmc_spi_send_command+0x54>
  return r1;
800032d6:	48 68       	lddpc	r8,800032ec <sd_mmc_spi_send_command+0x50>
800032d8:	11 88       	ld.ub	r8,r8[0x0]
}
800032da:	10 9c       	mov	r12,r8
800032dc:	2f ed       	sub	sp,-8
800032de:	e3 cd 80 80 	ldm	sp++,r7,pc
800032e2:	00 00       	add	r0,r0
800032e4:	80 00       	ld.sh	r0,r0[0x0]
800032e6:	86 b8       	ld.uh	r8,r3[0x6]
800032e8:	80 00       	ld.sh	r0,r0[0x0]
800032ea:	32 f4       	mov	r4,47
800032ec:	00 00       	add	r0,r0
800032ee:	0b 1c       	ld.sh	r12,r5++
800032f0:	80 00       	ld.sh	r0,r0[0x0]
800032f2:	87 50       	st.w	r3[0x14],r0

800032f4 <sd_mmc_spi_command>:
//! @param  arg       argument of the command
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF time out error)
uint8_t sd_mmc_spi_command(uint8_t command, uint32_t arg)
{
800032f4:	eb cd 40 80 	pushm	r7,lr
800032f8:	1a 97       	mov	r7,sp
800032fa:	20 3d       	sub	sp,12
800032fc:	18 98       	mov	r8,r12
800032fe:	ef 4b ff f4 	st.w	r7[-12],r11
80003302:	ef 68 ff f8 	st.b	r7[-8],r8
  uint8_t retry;

  spi_write(SD_MMC_SPI, 0xFF);            // write dummy byte
80003306:	e0 6b 00 ff 	mov	r11,255
8000330a:	fe 7c 28 00 	mov	r12,-55296
8000330e:	f0 1f 00 3b 	mcall	800033f8 <sd_mmc_spi_command+0x104>
  spi_write(SD_MMC_SPI, command | 0x40);  // send command
80003312:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80003316:	a7 a8       	sbr	r8,0x6
80003318:	5c 58       	castu.b	r8
8000331a:	10 9b       	mov	r11,r8
8000331c:	fe 7c 28 00 	mov	r12,-55296
80003320:	f0 1f 00 36 	mcall	800033f8 <sd_mmc_spi_command+0x104>
  spi_write(SD_MMC_SPI, arg>>24);         // send parameter
80003324:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003328:	b9 88       	lsr	r8,0x18
8000332a:	5c 88       	casts.h	r8
8000332c:	5c 78       	castu.h	r8
8000332e:	10 9b       	mov	r11,r8
80003330:	fe 7c 28 00 	mov	r12,-55296
80003334:	f0 1f 00 31 	mcall	800033f8 <sd_mmc_spi_command+0x104>
  spi_write(SD_MMC_SPI, arg>>16);
80003338:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000333c:	b1 88       	lsr	r8,0x10
8000333e:	5c 88       	casts.h	r8
80003340:	5c 78       	castu.h	r8
80003342:	10 9b       	mov	r11,r8
80003344:	fe 7c 28 00 	mov	r12,-55296
80003348:	f0 1f 00 2c 	mcall	800033f8 <sd_mmc_spi_command+0x104>
  spi_write(SD_MMC_SPI, arg>>8 );
8000334c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003350:	a9 88       	lsr	r8,0x8
80003352:	5c 88       	casts.h	r8
80003354:	5c 78       	castu.h	r8
80003356:	10 9b       	mov	r11,r8
80003358:	fe 7c 28 00 	mov	r12,-55296
8000335c:	f0 1f 00 27 	mcall	800033f8 <sd_mmc_spi_command+0x104>
  spi_write(SD_MMC_SPI, arg    );
80003360:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003364:	5c 88       	casts.h	r8
80003366:	5c 78       	castu.h	r8
80003368:	10 9b       	mov	r11,r8
8000336a:	fe 7c 28 00 	mov	r12,-55296
8000336e:	f0 1f 00 23 	mcall	800033f8 <sd_mmc_spi_command+0x104>
  switch(command)
80003372:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80003376:	58 08       	cp.w	r8,0
80003378:	c0 40       	breq	80003380 <sd_mmc_spi_command+0x8c>
8000337a:	58 88       	cp.w	r8,8
8000337c:	c0 90       	breq	8000338e <sd_mmc_spi_command+0x9a>
8000337e:	c0 f8       	rjmp	8000339c <sd_mmc_spi_command+0xa8>
  {
      case MMC_GO_IDLE_STATE:
         spi_write(SD_MMC_SPI, 0x95);
80003380:	e0 6b 00 95 	mov	r11,149
80003384:	fe 7c 28 00 	mov	r12,-55296
80003388:	f0 1f 00 1c 	mcall	800033f8 <sd_mmc_spi_command+0x104>
         break;
8000338c:	c0 e8       	rjmp	800033a8 <sd_mmc_spi_command+0xb4>
      case MMC_SEND_IF_COND:
         spi_write(SD_MMC_SPI, 0x87);
8000338e:	e0 6b 00 87 	mov	r11,135
80003392:	fe 7c 28 00 	mov	r12,-55296
80003396:	f0 1f 00 19 	mcall	800033f8 <sd_mmc_spi_command+0x104>
         break;
8000339a:	c0 78       	rjmp	800033a8 <sd_mmc_spi_command+0xb4>
      default:
         spi_write(SD_MMC_SPI, 0xff);
8000339c:	e0 6b 00 ff 	mov	r11,255
800033a0:	fe 7c 28 00 	mov	r12,-55296
800033a4:	f0 1f 00 15 	mcall	800033f8 <sd_mmc_spi_command+0x104>
  }

  // end command
  // wait for response
  // if more than 8 retries, card has timed-out and return the received 0xFF
  retry = 0;
800033a8:	30 08       	mov	r8,0
800033aa:	ef 68 ff ff 	st.b	r7[-1],r8
  r1    = 0xFF;
800033ae:	49 49       	lddpc	r9,800033fc <sd_mmc_spi_command+0x108>
800033b0:	3f f8       	mov	r8,-1
800033b2:	b2 88       	st.b	r9[0x0],r8
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) == 0xFF)
800033b4:	c0 d8       	rjmp	800033ce <sd_mmc_spi_command+0xda>
  {
    retry++;
800033b6:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800033ba:	2f f8       	sub	r8,-1
800033bc:	ef 68 ff ff 	st.b	r7[-1],r8
    if(retry > 10) break;
800033c0:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800033c4:	30 a8       	mov	r8,10
800033c6:	f0 09 18 00 	cp.b	r9,r8
800033ca:	e0 8b 00 10 	brhi	800033ea <sd_mmc_spi_command+0xf6>
  // end command
  // wait for response
  // if more than 8 retries, card has timed-out and return the received 0xFF
  retry = 0;
  r1    = 0xFF;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) == 0xFF)
800033ce:	e0 6c 00 ff 	mov	r12,255
800033d2:	f0 1f 00 0c 	mcall	80003400 <sd_mmc_spi_command+0x10c>
800033d6:	18 98       	mov	r8,r12
800033d8:	48 99       	lddpc	r9,800033fc <sd_mmc_spi_command+0x108>
800033da:	b2 88       	st.b	r9[0x0],r8
800033dc:	48 88       	lddpc	r8,800033fc <sd_mmc_spi_command+0x108>
800033de:	11 89       	ld.ub	r9,r8[0x0]
800033e0:	3f f8       	mov	r8,-1
800033e2:	f0 09 18 00 	cp.b	r9,r8
800033e6:	ce 80       	breq	800033b6 <sd_mmc_spi_command+0xc2>
800033e8:	c0 28       	rjmp	800033ec <sd_mmc_spi_command+0xf8>
  {
    retry++;
    if(retry > 10) break;
800033ea:	d7 03       	nop
  }
  return r1;
800033ec:	48 48       	lddpc	r8,800033fc <sd_mmc_spi_command+0x108>
800033ee:	11 88       	ld.ub	r8,r8[0x0]
}
800033f0:	10 9c       	mov	r12,r8
800033f2:	2f dd       	sub	sp,-12
800033f4:	e3 cd 80 80 	ldm	sp++,r7,pc
800033f8:	80 00       	ld.sh	r0,r0[0x0]
800033fa:	89 5a       	st.w	r4[0x14],r10
800033fc:	00 00       	add	r0,r0
800033fe:	0b 1c       	ld.sh	r12,r5++
80003400:	80 00       	ld.sh	r0,r0[0x0]
80003402:	34 04       	mov	r4,64

80003404 <sd_mmc_spi_send_and_read>:
//! @param  data_to_send   byte to send over SPI
//!
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
80003404:	eb cd 40 80 	pushm	r7,lr
80003408:	1a 97       	mov	r7,sp
8000340a:	20 2d       	sub	sp,8
8000340c:	18 98       	mov	r8,r12
8000340e:	ef 68 ff f8 	st.b	r7[-8],r8
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
80003412:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80003416:	10 9b       	mov	r11,r8
80003418:	fe 7c 28 00 	mov	r12,-55296
8000341c:	f0 1f 00 0b 	mcall	80003448 <sd_mmc_spi_send_and_read+0x44>
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
80003420:	ee c8 00 02 	sub	r8,r7,2
80003424:	10 9b       	mov	r11,r8
80003426:	fe 7c 28 00 	mov	r12,-55296
8000342a:	f0 1f 00 09 	mcall	8000344c <sd_mmc_spi_send_and_read+0x48>
8000342e:	18 98       	mov	r8,r12
80003430:	58 18       	cp.w	r8,1
80003432:	c0 41       	brne	8000343a <sd_mmc_spi_send_and_read+0x36>
     return 0xFF;
80003434:	e0 68 00 ff 	mov	r8,255
80003438:	c0 48       	rjmp	80003440 <sd_mmc_spi_send_and_read+0x3c>
   return data_read;
8000343a:	ef 08 ff fe 	ld.sh	r8,r7[-2]
8000343e:	5c 58       	castu.b	r8
}
80003440:	10 9c       	mov	r12,r8
80003442:	2f ed       	sub	sp,-8
80003444:	e3 cd 80 80 	ldm	sp++,r7,pc
80003448:	80 00       	ld.sh	r0,r0[0x0]
8000344a:	89 5a       	st.w	r4[0x14],r10
8000344c:	80 00       	ld.sh	r0,r0[0x0]
8000344e:	89 b2       	st.w	r4[0x2c],r2

80003450 <sd_mmc_spi_get_if>:
//!                true
//!                SD_MMC


int sd_mmc_spi_get_if(void)
{
80003450:	eb cd 40 80 	pushm	r7,lr
80003454:	1a 97       	mov	r7,sp
  // wait for MMC not busy
  if (false == sd_mmc_spi_wait_not_busy())
80003456:	f0 1f 00 31 	mcall	80003518 <sd_mmc_spi_get_if+0xc8>
8000345a:	18 98       	mov	r8,r12
8000345c:	ec 18 00 01 	eorl	r8,0x1
80003460:	5c 58       	castu.b	r8
80003462:	c0 30       	breq	80003468 <sd_mmc_spi_get_if+0x18>
    return SD_FAILURE;
80003464:	3f f8       	mov	r8,-1
80003466:	c5 58       	rjmp	80003510 <sd_mmc_spi_get_if+0xc0>

  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
80003468:	30 1b       	mov	r11,1
8000346a:	fe 7c 28 00 	mov	r12,-55296
8000346e:	f0 1f 00 2c 	mcall	8000351c <sd_mmc_spi_get_if+0xcc>
  r1 = sd_mmc_spi_command(MMC_SEND_IF_COND, 0x000001AA);
80003472:	e0 6b 01 aa 	mov	r11,426
80003476:	30 8c       	mov	r12,8
80003478:	f0 1f 00 2a 	mcall	80003520 <sd_mmc_spi_get_if+0xd0>
8000347c:	18 98       	mov	r8,r12
8000347e:	4a a9       	lddpc	r9,80003524 <sd_mmc_spi_get_if+0xd4>
80003480:	b2 88       	st.b	r9[0x0],r8
  // check for valid response
  if((r1 & MMC_R1_ILLEGAL_COM) != 0) {
80003482:	4a 98       	lddpc	r8,80003524 <sd_mmc_spi_get_if+0xd4>
80003484:	11 88       	ld.ub	r8,r8[0x0]
80003486:	e2 18 00 04 	andl	r8,0x4,COH
8000348a:	c0 80       	breq	8000349a <sd_mmc_spi_get_if+0x4a>
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
8000348c:	30 1b       	mov	r11,1
8000348e:	fe 7c 28 00 	mov	r12,-55296
80003492:	f0 1f 00 26 	mcall	80003528 <sd_mmc_spi_get_if+0xd8>
    return SD_MMC;
80003496:	30 08       	mov	r8,0
80003498:	c3 c8       	rjmp	80003510 <sd_mmc_spi_get_if+0xc0>
  }
  r1 = sd_mmc_spi_send_and_read(0xFF);
8000349a:	e0 6c 00 ff 	mov	r12,255
8000349e:	f0 1f 00 24 	mcall	8000352c <sd_mmc_spi_get_if+0xdc>
800034a2:	18 98       	mov	r8,r12
800034a4:	4a 09       	lddpc	r9,80003524 <sd_mmc_spi_get_if+0xd4>
800034a6:	b2 88       	st.b	r9[0x0],r8
  r1 = sd_mmc_spi_send_and_read(0xFF);
800034a8:	e0 6c 00 ff 	mov	r12,255
800034ac:	f0 1f 00 20 	mcall	8000352c <sd_mmc_spi_get_if+0xdc>
800034b0:	18 98       	mov	r8,r12
800034b2:	49 d9       	lddpc	r9,80003524 <sd_mmc_spi_get_if+0xd4>
800034b4:	b2 88       	st.b	r9[0x0],r8
  r1 = sd_mmc_spi_send_and_read(0xFF);
800034b6:	e0 6c 00 ff 	mov	r12,255
800034ba:	f0 1f 00 1d 	mcall	8000352c <sd_mmc_spi_get_if+0xdc>
800034be:	18 98       	mov	r8,r12
800034c0:	49 99       	lddpc	r9,80003524 <sd_mmc_spi_get_if+0xd4>
800034c2:	b2 88       	st.b	r9[0x0],r8
  if((r1 & 0x01) == 0) {
800034c4:	49 88       	lddpc	r8,80003524 <sd_mmc_spi_get_if+0xd4>
800034c6:	11 88       	ld.ub	r8,r8[0x0]
800034c8:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800034cc:	c0 81       	brne	800034dc <sd_mmc_spi_get_if+0x8c>
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800034ce:	30 1b       	mov	r11,1
800034d0:	fe 7c 28 00 	mov	r12,-55296
800034d4:	f0 1f 00 15 	mcall	80003528 <sd_mmc_spi_get_if+0xd8>
    return SD_FAILURE;
800034d8:	3f f8       	mov	r8,-1
800034da:	c1 b8       	rjmp	80003510 <sd_mmc_spi_get_if+0xc0>
  }
  r1 = sd_mmc_spi_send_and_read(0xFF);
800034dc:	e0 6c 00 ff 	mov	r12,255
800034e0:	f0 1f 00 13 	mcall	8000352c <sd_mmc_spi_get_if+0xdc>
800034e4:	18 98       	mov	r8,r12
800034e6:	49 09       	lddpc	r9,80003524 <sd_mmc_spi_get_if+0xd4>
800034e8:	b2 88       	st.b	r9[0x0],r8
  if(r1 != 0xaa) {
800034ea:	48 f8       	lddpc	r8,80003524 <sd_mmc_spi_get_if+0xd4>
800034ec:	11 89       	ld.ub	r9,r8[0x0]
800034ee:	3a a8       	mov	r8,-86
800034f0:	f0 09 18 00 	cp.b	r9,r8
800034f4:	c0 80       	breq	80003504 <sd_mmc_spi_get_if+0xb4>
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800034f6:	30 1b       	mov	r11,1
800034f8:	fe 7c 28 00 	mov	r12,-55296
800034fc:	f0 1f 00 0b 	mcall	80003528 <sd_mmc_spi_get_if+0xd8>
    return SD_FAILURE; /* wrong test pattern */
80003500:	3f f8       	mov	r8,-1
80003502:	c0 78       	rjmp	80003510 <sd_mmc_spi_get_if+0xc0>
  }
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80003504:	30 1b       	mov	r11,1
80003506:	fe 7c 28 00 	mov	r12,-55296
8000350a:	f0 1f 00 08 	mcall	80003528 <sd_mmc_spi_get_if+0xd8>
  return true;
8000350e:	30 18       	mov	r8,1
}
80003510:	10 9c       	mov	r12,r8
80003512:	e3 cd 80 80 	ldm	sp++,r7,pc
80003516:	00 00       	add	r0,r0
80003518:	80 00       	ld.sh	r0,r0[0x0]
8000351a:	39 20       	mov	r0,-110
8000351c:	80 00       	ld.sh	r0,r0[0x0]
8000351e:	86 b8       	ld.uh	r8,r3[0x6]
80003520:	80 00       	ld.sh	r0,r0[0x0]
80003522:	32 f4       	mov	r4,47
80003524:	00 00       	add	r0,r0
80003526:	0b 1c       	ld.sh	r12,r5++
80003528:	80 00       	ld.sh	r0,r0[0x0]
8000352a:	87 50       	st.w	r3[0x14],r0
8000352c:	80 00       	ld.sh	r0,r0[0x0]
8000352e:	34 04       	mov	r4,64

80003530 <sd_mmc_spi_check_hc>:
//!           SD_CARD      Detected card is SD
//!           ERROR


int sd_mmc_spi_check_hc(void)
{
80003530:	eb cd 40 80 	pushm	r7,lr
80003534:	1a 97       	mov	r7,sp
80003536:	20 1d       	sub	sp,4
  unsigned char hc_bit;
  // wait for MMC not busy
  if (false == sd_mmc_spi_wait_not_busy())
80003538:	f0 1f 00 27 	mcall	800035d4 <sd_mmc_spi_check_hc+0xa4>
8000353c:	18 98       	mov	r8,r12
8000353e:	ec 18 00 01 	eorl	r8,0x1
80003542:	5c 58       	castu.b	r8
80003544:	c0 30       	breq	8000354a <sd_mmc_spi_check_hc+0x1a>
    return SD_FAILURE;
80003546:	3f f8       	mov	r8,-1
80003548:	c4 18       	rjmp	800035ca <sd_mmc_spi_check_hc+0x9a>

  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
8000354a:	30 1b       	mov	r11,1
8000354c:	fe 7c 28 00 	mov	r12,-55296
80003550:	f0 1f 00 22 	mcall	800035d8 <sd_mmc_spi_check_hc+0xa8>
  r1 = sd_mmc_spi_command(SD_READ_OCR, 0);
80003554:	30 0b       	mov	r11,0
80003556:	33 ac       	mov	r12,58
80003558:	f0 1f 00 21 	mcall	800035dc <sd_mmc_spi_check_hc+0xac>
8000355c:	18 98       	mov	r8,r12
8000355e:	4a 19       	lddpc	r9,800035e0 <sd_mmc_spi_check_hc+0xb0>
80003560:	b2 88       	st.b	r9[0x0],r8
  // check for valid response
  if(r1 != 0) {
80003562:	4a 08       	lddpc	r8,800035e0 <sd_mmc_spi_check_hc+0xb0>
80003564:	11 88       	ld.ub	r8,r8[0x0]
80003566:	58 08       	cp.w	r8,0
80003568:	c0 80       	breq	80003578 <sd_mmc_spi_check_hc+0x48>
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
8000356a:	30 1b       	mov	r11,1
8000356c:	fe 7c 28 00 	mov	r12,-55296
80003570:	f0 1f 00 1d 	mcall	800035e4 <sd_mmc_spi_check_hc+0xb4>
    return SD_FAILURE;
80003574:	3f f8       	mov	r8,-1
80003576:	c2 a8       	rjmp	800035ca <sd_mmc_spi_check_hc+0x9a>
  }
  hc_bit = sd_mmc_spi_send_and_read(0xFF);
80003578:	e0 6c 00 ff 	mov	r12,255
8000357c:	f0 1f 00 1b 	mcall	800035e8 <sd_mmc_spi_check_hc+0xb8>
80003580:	18 98       	mov	r8,r12
80003582:	ef 68 ff ff 	st.b	r7[-1],r8
  r1 = sd_mmc_spi_send_and_read(0xFF);
80003586:	e0 6c 00 ff 	mov	r12,255
8000358a:	f0 1f 00 18 	mcall	800035e8 <sd_mmc_spi_check_hc+0xb8>
8000358e:	18 98       	mov	r8,r12
80003590:	49 49       	lddpc	r9,800035e0 <sd_mmc_spi_check_hc+0xb0>
80003592:	b2 88       	st.b	r9[0x0],r8
  r1 = sd_mmc_spi_send_and_read(0xFF);
80003594:	e0 6c 00 ff 	mov	r12,255
80003598:	f0 1f 00 14 	mcall	800035e8 <sd_mmc_spi_check_hc+0xb8>
8000359c:	18 98       	mov	r8,r12
8000359e:	49 19       	lddpc	r9,800035e0 <sd_mmc_spi_check_hc+0xb0>
800035a0:	b2 88       	st.b	r9[0x0],r8
  r1 = sd_mmc_spi_send_and_read(0xFF);
800035a2:	e0 6c 00 ff 	mov	r12,255
800035a6:	f0 1f 00 11 	mcall	800035e8 <sd_mmc_spi_check_hc+0xb8>
800035aa:	18 98       	mov	r8,r12
800035ac:	48 d9       	lddpc	r9,800035e0 <sd_mmc_spi_check_hc+0xb0>
800035ae:	b2 88       	st.b	r9[0x0],r8
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800035b0:	30 1b       	mov	r11,1
800035b2:	fe 7c 28 00 	mov	r12,-55296
800035b6:	f0 1f 00 0c 	mcall	800035e4 <sd_mmc_spi_check_hc+0xb4>
  if(hc_bit & 0x40) {
800035ba:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800035be:	e2 18 00 40 	andl	r8,0x40,COH
800035c2:	c0 30       	breq	800035c8 <sd_mmc_spi_check_hc+0x98>
      return SDHC_CARD;
800035c4:	30 18       	mov	r8,1
800035c6:	c0 28       	rjmp	800035ca <sd_mmc_spi_check_hc+0x9a>
  }
  return 0;
800035c8:	30 08       	mov	r8,0
}
800035ca:	10 9c       	mov	r12,r8
800035cc:	2f fd       	sub	sp,-4
800035ce:	e3 cd 80 80 	ldm	sp++,r7,pc
800035d2:	00 00       	add	r0,r0
800035d4:	80 00       	ld.sh	r0,r0[0x0]
800035d6:	39 20       	mov	r0,-110
800035d8:	80 00       	ld.sh	r0,r0[0x0]
800035da:	86 b8       	ld.uh	r8,r3[0x6]
800035dc:	80 00       	ld.sh	r0,r0[0x0]
800035de:	32 f4       	mov	r4,47
800035e0:	00 00       	add	r0,r0
800035e2:	0b 1c       	ld.sh	r12,r5++
800035e4:	80 00       	ld.sh	r0,r0[0x0]
800035e6:	87 50       	st.w	r3[0x14],r0
800035e8:	80 00       	ld.sh	r0,r0[0x0]
800035ea:	34 04       	mov	r4,64

800035ec <sd_mmc_spi_get_csd>:
//! @param  buffer to fill
//!
//! @return bit
//!         true / false
bool sd_mmc_spi_get_csd(uint8_t *buffer)
{
800035ec:	eb cd 40 80 	pushm	r7,lr
800035f0:	1a 97       	mov	r7,sp
800035f2:	20 2d       	sub	sp,8
800035f4:	ef 4c ff f8 	st.w	r7[-8],r12
uint8_t retry;
unsigned short data_read;
  // wait for MMC not busy
  if (false == sd_mmc_spi_wait_not_busy())
800035f8:	f0 1f 00 45 	mcall	8000370c <sd_mmc_spi_get_csd+0x120>
800035fc:	18 98       	mov	r8,r12
800035fe:	ec 18 00 01 	eorl	r8,0x1
80003602:	5c 58       	castu.b	r8
80003604:	c0 30       	breq	8000360a <sd_mmc_spi_get_csd+0x1e>
    return false;
80003606:	30 08       	mov	r8,0
80003608:	c7 d8       	rjmp	80003702 <sd_mmc_spi_get_csd+0x116>

  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
8000360a:	30 1b       	mov	r11,1
8000360c:	fe 7c 28 00 	mov	r12,-55296
80003610:	f0 1f 00 40 	mcall	80003710 <sd_mmc_spi_get_csd+0x124>
  // issue command
  r1 = sd_mmc_spi_command(MMC_SEND_CSD, 0);
80003614:	30 0b       	mov	r11,0
80003616:	30 9c       	mov	r12,9
80003618:	f0 1f 00 3f 	mcall	80003714 <sd_mmc_spi_get_csd+0x128>
8000361c:	18 98       	mov	r8,r12
8000361e:	4b f9       	lddpc	r9,80003718 <sd_mmc_spi_get_csd+0x12c>
80003620:	b2 88       	st.b	r9[0x0],r8
  // check for valid response
  if(r1 != 0x00)
80003622:	4b e8       	lddpc	r8,80003718 <sd_mmc_spi_get_csd+0x12c>
80003624:	11 88       	ld.ub	r8,r8[0x0]
80003626:	58 08       	cp.w	r8,0
80003628:	c0 b0       	breq	8000363e <sd_mmc_spi_get_csd+0x52>
  {
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
8000362a:	30 1b       	mov	r11,1
8000362c:	fe 7c 28 00 	mov	r12,-55296
80003630:	f0 1f 00 3b 	mcall	8000371c <sd_mmc_spi_get_csd+0x130>
    sd_mmc_spi_init_done = false;
80003634:	4b b9       	lddpc	r9,80003720 <sd_mmc_spi_get_csd+0x134>
80003636:	30 08       	mov	r8,0
80003638:	b2 88       	st.b	r9[0x0],r8
    return false;
8000363a:	30 08       	mov	r8,0
8000363c:	c6 38       	rjmp	80003702 <sd_mmc_spi_get_csd+0x116>
  }
  // wait for block start
  retry = 0;
8000363e:	30 08       	mov	r8,0
80003640:	ef 68 ff ff 	st.b	r7[-1],r8
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != MMC_STARTBLOCK_READ)
80003644:	c1 48       	rjmp	8000366c <sd_mmc_spi_get_csd+0x80>
  {
    if (retry > 8)
80003646:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000364a:	30 88       	mov	r8,8
8000364c:	f0 09 18 00 	cp.b	r9,r8
80003650:	e0 88 00 09 	brls	80003662 <sd_mmc_spi_get_csd+0x76>
    {
      spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80003654:	30 1b       	mov	r11,1
80003656:	fe 7c 28 00 	mov	r12,-55296
8000365a:	f0 1f 00 31 	mcall	8000371c <sd_mmc_spi_get_csd+0x130>
      return false;
8000365e:	30 08       	mov	r8,0
80003660:	c5 18       	rjmp	80003702 <sd_mmc_spi_get_csd+0x116>
    }
    retry++;
80003662:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80003666:	2f f8       	sub	r8,-1
80003668:	ef 68 ff ff 	st.b	r7[-1],r8
    sd_mmc_spi_init_done = false;
    return false;
  }
  // wait for block start
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != MMC_STARTBLOCK_READ)
8000366c:	e0 6c 00 ff 	mov	r12,255
80003670:	f0 1f 00 2d 	mcall	80003724 <sd_mmc_spi_get_csd+0x138>
80003674:	18 98       	mov	r8,r12
80003676:	4a 99       	lddpc	r9,80003718 <sd_mmc_spi_get_csd+0x12c>
80003678:	b2 88       	st.b	r9[0x0],r8
8000367a:	4a 88       	lddpc	r8,80003718 <sd_mmc_spi_get_csd+0x12c>
8000367c:	11 89       	ld.ub	r9,r8[0x0]
8000367e:	3f e8       	mov	r8,-2
80003680:	f0 09 18 00 	cp.b	r9,r8
80003684:	ce 11       	brne	80003646 <sd_mmc_spi_get_csd+0x5a>
      return false;
    }
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
80003686:	30 08       	mov	r8,0
80003688:	ef 68 ff ff 	st.b	r7[-1],r8
8000368c:	c1 c8       	rjmp	800036c4 <sd_mmc_spi_get_csd+0xd8>
  {
   spi_write(SD_MMC_SPI,0xFF);
8000368e:	e0 6b 00 ff 	mov	r11,255
80003692:	fe 7c 28 00 	mov	r12,-55296
80003696:	f0 1f 00 25 	mcall	80003728 <sd_mmc_spi_get_csd+0x13c>
   spi_read(SD_MMC_SPI,&data_read);
8000369a:	ee c8 00 04 	sub	r8,r7,4
8000369e:	10 9b       	mov	r11,r8
800036a0:	fe 7c 28 00 	mov	r12,-55296
800036a4:	f0 1f 00 22 	mcall	8000372c <sd_mmc_spi_get_csd+0x140>
    buffer[retry] = data_read;
800036a8:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800036ac:	ee f9 ff f8 	ld.w	r9,r7[-8]
800036b0:	10 09       	add	r9,r8
800036b2:	ef 08 ff fc 	ld.sh	r8,r7[-4]
800036b6:	5c 58       	castu.b	r8
800036b8:	b2 88       	st.b	r9[0x0],r8
      return false;
    }
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
800036ba:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800036be:	2f f8       	sub	r8,-1
800036c0:	ef 68 ff ff 	st.b	r7[-1],r8
800036c4:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800036c8:	30 f8       	mov	r8,15
800036ca:	f0 09 18 00 	cp.b	r9,r8
800036ce:	fe 98 ff e0 	brls	8000368e <sd_mmc_spi_get_csd+0xa2>
  {
   spi_write(SD_MMC_SPI,0xFF);
   spi_read(SD_MMC_SPI,&data_read);
    buffer[retry] = data_read;
  }
   spi_write(SD_MMC_SPI,0xFF);   // load CRC (not used)
800036d2:	e0 6b 00 ff 	mov	r11,255
800036d6:	fe 7c 28 00 	mov	r12,-55296
800036da:	f0 1f 00 14 	mcall	80003728 <sd_mmc_spi_get_csd+0x13c>
   spi_write(SD_MMC_SPI,0xFF);
800036de:	e0 6b 00 ff 	mov	r11,255
800036e2:	fe 7c 28 00 	mov	r12,-55296
800036e6:	f0 1f 00 11 	mcall	80003728 <sd_mmc_spi_get_csd+0x13c>
   spi_write(SD_MMC_SPI,0xFF);   // give clock again to end transaction
800036ea:	e0 6b 00 ff 	mov	r11,255
800036ee:	fe 7c 28 00 	mov	r12,-55296
800036f2:	f0 1f 00 0e 	mcall	80003728 <sd_mmc_spi_get_csd+0x13c>
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800036f6:	30 1b       	mov	r11,1
800036f8:	fe 7c 28 00 	mov	r12,-55296
800036fc:	f0 1f 00 08 	mcall	8000371c <sd_mmc_spi_get_csd+0x130>
  return true;
80003700:	30 18       	mov	r8,1
}
80003702:	10 9c       	mov	r12,r8
80003704:	2f ed       	sub	sp,-8
80003706:	e3 cd 80 80 	ldm	sp++,r7,pc
8000370a:	00 00       	add	r0,r0
8000370c:	80 00       	ld.sh	r0,r0[0x0]
8000370e:	39 20       	mov	r0,-110
80003710:	80 00       	ld.sh	r0,r0[0x0]
80003712:	86 b8       	ld.uh	r8,r3[0x6]
80003714:	80 00       	ld.sh	r0,r0[0x0]
80003716:	32 f4       	mov	r4,47
80003718:	00 00       	add	r0,r0
8000371a:	0b 1c       	ld.sh	r12,r5++
8000371c:	80 00       	ld.sh	r0,r0[0x0]
8000371e:	87 50       	st.w	r3[0x14],r0
80003720:	00 00       	add	r0,r0
80003722:	06 24       	rsub	r4,r3
80003724:	80 00       	ld.sh	r0,r0[0x0]
80003726:	34 04       	mov	r4,64
80003728:	80 00       	ld.sh	r0,r0[0x0]
8000372a:	89 5a       	st.w	r4[0x14],r10
8000372c:	80 00       	ld.sh	r0,r0[0x0]
8000372e:	89 b2       	st.w	r4[0x2c],r2

80003730 <sd_mmc_spi_get_capacity>:
//!         [39]    == data[11] && 0x80
//!
//! @return bit
//!         true
void sd_mmc_spi_get_capacity(void)
{
80003730:	eb cd 40 8f 	pushm	r0-r3,r7,lr
80003734:	1a 97       	mov	r7,sp
80003736:	20 2d       	sub	sp,8
  uint8_t  read_bl_len;
  uint8_t  erase_grp_size;
  uint8_t  erase_grp_mult;

  // extract variables from CSD array
  read_bl_len = csd[5] & 0x0F;
80003738:	4f 4c       	lddpc	r12,80003908 <sd_mmc_spi_get_capacity+0x1d8>
8000373a:	19 dc       	ld.ub	r12,r12[0x5]
8000373c:	f9 dc c0 04 	bfextu	r12,r12,0x0,0x4
80003740:	ef 6c ff fd 	st.b	r7[-3],r12
  if (card_type == SD_CARD_2_SDHC) {
80003744:	4f 2c       	lddpc	r12,8000390c <sd_mmc_spi_get_capacity+0x1dc>
80003746:	19 8e       	ld.ub	lr,r12[0x0]
80003748:	30 3c       	mov	r12,3
8000374a:	f8 0e 18 00 	cp.b	lr,r12
8000374e:	c4 71       	brne	800037dc <sd_mmc_spi_get_capacity+0xac>
    c_size = ((csd[7] & 0x3F) << 16) | (csd[8] << 8) | csd[9];
80003750:	4e ec       	lddpc	r12,80003908 <sd_mmc_spi_get_capacity+0x1d8>
80003752:	19 fc       	ld.ub	r12,r12[0x7]
80003754:	f9 dc c0 06 	bfextu	r12,r12,0x0,0x6
80003758:	f8 0e 15 10 	lsl	lr,r12,0x10
8000375c:	4e bc       	lddpc	r12,80003908 <sd_mmc_spi_get_capacity+0x1d8>
8000375e:	f9 3c 00 08 	ld.ub	r12,r12[8]
80003762:	a9 6c       	lsl	r12,0x8
80003764:	18 4e       	or	lr,r12
80003766:	4e 9c       	lddpc	r12,80003908 <sd_mmc_spi_get_capacity+0x1d8>
80003768:	f9 3c 00 09 	ld.ub	r12,r12[9]
8000376c:	fd ec 10 0c 	or	r12,lr,r12
80003770:	ef 4c ff f8 	st.w	r7[-8],r12
    ++c_size;
80003774:	ee fc ff f8 	ld.w	r12,r7[-8]
80003778:	2f fc       	sub	r12,-1
8000377a:	ef 4c ff f8 	st.w	r7[-8],r12
    capacity = (uint64_t)c_size << 19;
8000377e:	ee f2 ff f8 	ld.w	r2,r7[-8]
80003782:	30 03       	mov	r3,0
80003784:	e4 0c 16 0d 	lsr	r12,r2,0xd
80003788:	e6 0b 15 13 	lsl	r11,r3,0x13
8000378c:	f9 eb 10 0b 	or	r11,r12,r11
80003790:	e4 0a 15 13 	lsl	r10,r2,0x13
80003794:	4d fc       	lddpc	r12,80003910 <sd_mmc_spi_get_capacity+0x1e0>
80003796:	f8 eb 00 00 	st.d	r12[0],r10
    capacity_mult = (c_size >> 13) & 0x01FF;
8000379a:	ee fa ff f8 	ld.w	r10,r7[-8]
8000379e:	ad 9a       	lsr	r10,0xd
800037a0:	5c 8a       	casts.h	r10
800037a2:	5c 8a       	casts.h	r10
800037a4:	f5 da c0 09 	bfextu	r10,r10,0x0,0x9
800037a8:	4d bb       	lddpc	r11,80003914 <sd_mmc_spi_get_capacity+0x1e4>
800037aa:	b6 0a       	st.h	r11[0x0],r10
    sd_mmc_spi_last_block_address = (capacity >> 9) + (capacity_mult << 23) - 1;
800037ac:	4d 9a       	lddpc	r10,80003910 <sd_mmc_spi_get_capacity+0x1e0>
800037ae:	f4 ea 00 00 	ld.d	r10,r10[0]
800037b2:	f6 0c 15 17 	lsl	r12,r11,0x17
800037b6:	f4 08 16 09 	lsr	r8,r10,0x9
800037ba:	f9 e8 10 08 	or	r8,r12,r8
800037be:	f6 09 16 09 	lsr	r9,r11,0x9
800037c2:	10 99       	mov	r9,r8
800037c4:	4d 48       	lddpc	r8,80003914 <sd_mmc_spi_get_capacity+0x1e4>
800037c6:	90 08       	ld.sh	r8,r8[0x0]
800037c8:	5c 88       	casts.h	r8
800037ca:	5c 78       	castu.h	r8
800037cc:	b7 78       	lsl	r8,0x17
800037ce:	f2 08 00 08 	add	r8,r9,r8
800037d2:	f0 c9 00 01 	sub	r9,r8,1
800037d6:	4d 18       	lddpc	r8,80003918 <sd_mmc_spi_get_capacity+0x1e8>
800037d8:	91 09       	st.w	r8[0x0],r9
800037da:	c5 28       	rjmp	8000387e <sd_mmc_spi_get_capacity+0x14e>
  } else {
    c_size      = ((csd[6] & 0x03) << 10) + (csd[7] << 2) + ((csd[8] & 0xC0) >> 6);
800037dc:	4c b8       	lddpc	r8,80003908 <sd_mmc_spi_get_capacity+0x1d8>
800037de:	11 e8       	ld.ub	r8,r8[0x6]
800037e0:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
800037e4:	f0 09 15 0a 	lsl	r9,r8,0xa
800037e8:	4c 88       	lddpc	r8,80003908 <sd_mmc_spi_get_capacity+0x1d8>
800037ea:	11 f8       	ld.ub	r8,r8[0x7]
800037ec:	a3 68       	lsl	r8,0x2
800037ee:	10 09       	add	r9,r8
800037f0:	4c 68       	lddpc	r8,80003908 <sd_mmc_spi_get_capacity+0x1d8>
800037f2:	f1 38 00 08 	ld.ub	r8,r8[8]
800037f6:	a7 88       	lsr	r8,0x6
800037f8:	5c 58       	castu.b	r8
800037fa:	f2 08 00 08 	add	r8,r9,r8
800037fe:	ef 48 ff f8 	st.w	r7[-8],r8
    c_size_mult = ((csd[9] & 0x03) << 1) + ((csd[10] & 0x80) >> 7);
80003802:	4c 28       	lddpc	r8,80003908 <sd_mmc_spi_get_capacity+0x1d8>
80003804:	f1 38 00 09 	ld.ub	r8,r8[9]
80003808:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
8000380c:	a1 78       	lsl	r8,0x1
8000380e:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80003812:	4b e8       	lddpc	r8,80003908 <sd_mmc_spi_get_capacity+0x1d8>
80003814:	f1 38 00 0a 	ld.ub	r8,r8[10]
80003818:	a7 98       	lsr	r8,0x7
8000381a:	5c 58       	castu.b	r8
8000381c:	f2 08 00 08 	add	r8,r9,r8
80003820:	ef 68 ff fc 	st.b	r7[-4],r8
    sd_mmc_spi_last_block_address = ((uint32_t)(c_size + 1) * (uint32_t)((1 << (c_size_mult + 2)))) - 1;
80003824:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003828:	f0 c9 ff ff 	sub	r9,r8,-1
8000382c:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80003830:	2f e8       	sub	r8,-2
80003832:	f2 08 09 48 	lsl	r8,r9,r8
80003836:	f0 c9 00 01 	sub	r9,r8,1
8000383a:	4b 88       	lddpc	r8,80003918 <sd_mmc_spi_get_capacity+0x1e8>
8000383c:	91 09       	st.w	r8[0x0],r9
    capacity = (1 << read_bl_len) * (sd_mmc_spi_last_block_address + 1);
8000383e:	4b 78       	lddpc	r8,80003918 <sd_mmc_spi_get_capacity+0x1e8>
80003840:	70 08       	ld.w	r8,r8[0x0]
80003842:	f0 c9 ff ff 	sub	r9,r8,-1
80003846:	ef 38 ff fd 	ld.ub	r8,r7[-3]
8000384a:	f2 08 09 48 	lsl	r8,r9,r8
8000384e:	10 90       	mov	r0,r8
80003850:	30 01       	mov	r1,0
80003852:	4b 08       	lddpc	r8,80003910 <sd_mmc_spi_get_capacity+0x1e0>
80003854:	f0 e1 00 00 	st.d	r8[0],r0
    capacity_mult = 0;
80003858:	4a f9       	lddpc	r9,80003914 <sd_mmc_spi_get_capacity+0x1e4>
8000385a:	30 08       	mov	r8,0
8000385c:	b2 08       	st.h	r9[0x0],r8
    if (read_bl_len > 9) {  // 9 means 2^9 = 512b
8000385e:	ef 39 ff fd 	ld.ub	r9,r7[-3]
80003862:	30 98       	mov	r8,9
80003864:	f0 09 18 00 	cp.b	r9,r8
80003868:	e0 88 00 0b 	brls	8000387e <sd_mmc_spi_get_capacity+0x14e>
      sd_mmc_spi_last_block_address <<= (read_bl_len - 9);
8000386c:	4a b8       	lddpc	r8,80003918 <sd_mmc_spi_get_capacity+0x1e8>
8000386e:	70 09       	ld.w	r9,r8[0x0]
80003870:	ef 38 ff fd 	ld.ub	r8,r7[-3]
80003874:	20 98       	sub	r8,9
80003876:	f2 08 09 49 	lsl	r9,r9,r8
8000387a:	4a 88       	lddpc	r8,80003918 <sd_mmc_spi_get_capacity+0x1e8>
8000387c:	91 09       	st.w	r8[0x0],r9
    }
  }
  if (card_type == MMC_CARD)
8000387e:	4a 48       	lddpc	r8,8000390c <sd_mmc_spi_get_capacity+0x1dc>
80003880:	11 88       	ld.ub	r8,r8[0x0]
80003882:	58 08       	cp.w	r8,0
80003884:	c1 c1       	brne	800038bc <sd_mmc_spi_get_capacity+0x18c>
  {
    erase_grp_size = ((csd[10] & 0x7C) >> 2);
80003886:	4a 18       	lddpc	r8,80003908 <sd_mmc_spi_get_capacity+0x1d8>
80003888:	f1 38 00 0a 	ld.ub	r8,r8[10]
8000388c:	e2 18 00 7c 	andl	r8,0x7c,COH
80003890:	a3 48       	asr	r8,0x2
80003892:	ef 68 ff fe 	st.b	r7[-2],r8
    erase_grp_mult = ((csd[10] & 0x03) << 3) | ((csd[11] & 0xE0) >> 5);
80003896:	49 d8       	lddpc	r8,80003908 <sd_mmc_spi_get_capacity+0x1d8>
80003898:	f1 38 00 0a 	ld.ub	r8,r8[10]
8000389c:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
800038a0:	a3 78       	lsl	r8,0x3
800038a2:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800038a6:	49 98       	lddpc	r8,80003908 <sd_mmc_spi_get_capacity+0x1d8>
800038a8:	f1 38 00 0b 	ld.ub	r8,r8[11]
800038ac:	a5 98       	lsr	r8,0x5
800038ae:	5c 58       	castu.b	r8
800038b0:	f3 e8 10 08 	or	r8,r9,r8
800038b4:	5c 58       	castu.b	r8
800038b6:	ef 68 ff ff 	st.b	r7[-1],r8
800038ba:	c1 58       	rjmp	800038e4 <sd_mmc_spi_get_capacity+0x1b4>
  }
  else
  {
    erase_grp_size = ((csd[10] & 0x3F) << 1) + ((csd[11] & 0x80) >> 7);
800038bc:	49 38       	lddpc	r8,80003908 <sd_mmc_spi_get_capacity+0x1d8>
800038be:	f1 38 00 0a 	ld.ub	r8,r8[10]
800038c2:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6
800038c6:	a1 78       	lsl	r8,0x1
800038c8:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800038cc:	48 f8       	lddpc	r8,80003908 <sd_mmc_spi_get_capacity+0x1d8>
800038ce:	f1 38 00 0b 	ld.ub	r8,r8[11]
800038d2:	a7 98       	lsr	r8,0x7
800038d4:	5c 58       	castu.b	r8
800038d6:	f2 08 00 08 	add	r8,r9,r8
800038da:	ef 68 ff fe 	st.b	r7[-2],r8
    erase_grp_mult = 0;
800038de:	30 08       	mov	r8,0
800038e0:	ef 68 ff ff 	st.b	r7[-1],r8
  }
  erase_group_size = (erase_grp_size + 1) * (erase_grp_mult + 1);
800038e4:	ef 38 ff fe 	ld.ub	r8,r7[-2]
800038e8:	2f f8       	sub	r8,-1
800038ea:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
800038ee:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800038f2:	2f f8       	sub	r8,-1
800038f4:	5c 88       	casts.h	r8
800038f6:	f2 08 02 48 	mul	r8,r9,r8
800038fa:	5c 88       	casts.h	r8
800038fc:	48 89       	lddpc	r9,8000391c <sd_mmc_spi_get_capacity+0x1ec>
800038fe:	b2 08       	st.h	r9[0x0],r8
}
80003900:	2f ed       	sub	sp,-8
80003902:	e3 cd 80 8f 	ldm	sp++,r0-r3,r7,pc
80003906:	00 00       	add	r0,r0
80003908:	00 00       	add	r0,r0
8000390a:	0b 0c       	ld.w	r12,r5++
8000390c:	00 00       	add	r0,r0
8000390e:	0b 0a       	ld.w	r10,r5++
80003910:	00 00       	add	r0,r0
80003912:	0a f8       	st.b	--r5,r8
80003914:	00 00       	add	r0,r0
80003916:	0b 00       	ld.w	r0,r5++
80003918:	00 00       	add	r0,r0
8000391a:	0b 04       	ld.w	r4,r5++
8000391c:	00 00       	add	r0,r0
8000391e:	0b 02       	ld.w	r2,r5++

80003920 <sd_mmc_spi_wait_not_busy>:
//! @brief This function waits until the SD/MMC is not busy.
//!
//! @return bit
//!          true when card is not busy
bool sd_mmc_spi_wait_not_busy(void)
{
80003920:	eb cd 40 80 	pushm	r7,lr
80003924:	1a 97       	mov	r7,sp
80003926:	20 1d       	sub	sp,4
  uint32_t retry;

  // Select the SD_MMC memory gl_ptr_mem points to
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
80003928:	30 1b       	mov	r11,1
8000392a:	fe 7c 28 00 	mov	r12,-55296
8000392e:	f0 1f 00 18 	mcall	8000398c <sd_mmc_spi_wait_not_busy+0x6c>
  retry = 0;
80003932:	30 08       	mov	r8,0
80003934:	ef 48 ff fc 	st.w	r7[-4],r8
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != 0xFF)
80003938:	c1 28       	rjmp	8000395c <sd_mmc_spi_wait_not_busy+0x3c>
  {
    retry++;
8000393a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000393e:	2f f8       	sub	r8,-1
80003940:	ef 48 ff fc 	st.w	r7[-4],r8
    if (retry == 200000)
80003944:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003948:	e2 58 0d 40 	cp.w	r8,200000
8000394c:	c0 81       	brne	8000395c <sd_mmc_spi_wait_not_busy+0x3c>
    {
      spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
8000394e:	30 1b       	mov	r11,1
80003950:	fe 7c 28 00 	mov	r12,-55296
80003954:	f0 1f 00 0f 	mcall	80003990 <sd_mmc_spi_wait_not_busy+0x70>
      return false;
80003958:	30 08       	mov	r8,0
8000395a:	c1 48       	rjmp	80003982 <sd_mmc_spi_wait_not_busy+0x62>
  uint32_t retry;

  // Select the SD_MMC memory gl_ptr_mem points to
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != 0xFF)
8000395c:	e0 6c 00 ff 	mov	r12,255
80003960:	f0 1f 00 0d 	mcall	80003994 <sd_mmc_spi_wait_not_busy+0x74>
80003964:	18 98       	mov	r8,r12
80003966:	48 d9       	lddpc	r9,80003998 <sd_mmc_spi_wait_not_busy+0x78>
80003968:	b2 88       	st.b	r9[0x0],r8
8000396a:	48 c8       	lddpc	r8,80003998 <sd_mmc_spi_wait_not_busy+0x78>
8000396c:	11 89       	ld.ub	r9,r8[0x0]
8000396e:	3f f8       	mov	r8,-1
80003970:	f0 09 18 00 	cp.b	r9,r8
80003974:	ce 31       	brne	8000393a <sd_mmc_spi_wait_not_busy+0x1a>
    {
      spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
      return false;
    }
  }
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
80003976:	30 1b       	mov	r11,1
80003978:	fe 7c 28 00 	mov	r12,-55296
8000397c:	f0 1f 00 05 	mcall	80003990 <sd_mmc_spi_wait_not_busy+0x70>
  return true;
80003980:	30 18       	mov	r8,1
}
80003982:	10 9c       	mov	r12,r8
80003984:	2f fd       	sub	sp,-4
80003986:	e3 cd 80 80 	ldm	sp++,r7,pc
8000398a:	00 00       	add	r0,r0
8000398c:	80 00       	ld.sh	r0,r0[0x0]
8000398e:	86 b8       	ld.uh	r8,r3[0x6]
80003990:	80 00       	ld.sh	r0,r0[0x0]
80003992:	87 50       	st.w	r3[0x14],r0
80003994:	80 00       	ld.sh	r0,r0[0x0]
80003996:	34 04       	mov	r4,64
80003998:	00 00       	add	r0,r0
8000399a:	0b 1c       	ld.sh	r12,r5++

8000399c <sd_mmc_spi_check_presence>:
//!
//! @return bit
//!   The memory is present (true)
//!   The memory does not respond (disconnected) (false)
bool sd_mmc_spi_check_presence(void)
{
8000399c:	eb cd 40 80 	pushm	r7,lr
800039a0:	1a 97       	mov	r7,sp
800039a2:	20 1d       	sub	sp,4
  uint16_t retry;

  retry = 0;
800039a4:	30 08       	mov	r8,0
800039a6:	ef 58 ff fe 	st.h	r7[-2],r8
  if (sd_mmc_spi_init_done == false)
800039aa:	4a 08       	lddpc	r8,80003a28 <sd_mmc_spi_check_presence+0x8c>
800039ac:	11 88       	ld.ub	r8,r8[0x0]
800039ae:	ec 18 00 01 	eorl	r8,0x1
800039b2:	5c 58       	castu.b	r8
800039b4:	c2 50       	breq	800039fe <sd_mmc_spi_check_presence+0x62>
  {
    // If memory is not initialized, try to initialize it (CMD0)
    // If no valid response, there is no card
    while ((r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0)) != 0x01)
800039b6:	c1 58       	rjmp	800039e0 <sd_mmc_spi_check_presence+0x44>
    {
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
800039b8:	e0 6b 00 ff 	mov	r11,255
800039bc:	fe 7c 28 00 	mov	r12,-55296
800039c0:	f0 1f 00 1b 	mcall	80003a2c <sd_mmc_spi_check_presence+0x90>
      retry++;
800039c4:	ef 08 ff fe 	ld.sh	r8,r7[-2]
800039c8:	2f f8       	sub	r8,-1
800039ca:	ef 58 ff fe 	st.h	r7[-2],r8
      if (retry > 10)
800039ce:	ef 09 ff fe 	ld.sh	r9,r7[-2]
800039d2:	30 a8       	mov	r8,10
800039d4:	f0 09 19 00 	cp.h	r9,r8
800039d8:	e0 88 00 04 	brls	800039e0 <sd_mmc_spi_check_presence+0x44>
        return false;
800039dc:	30 08       	mov	r8,0
800039de:	c2 18       	rjmp	80003a20 <sd_mmc_spi_check_presence+0x84>
  retry = 0;
  if (sd_mmc_spi_init_done == false)
  {
    // If memory is not initialized, try to initialize it (CMD0)
    // If no valid response, there is no card
    while ((r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0)) != 0x01)
800039e0:	30 0b       	mov	r11,0
800039e2:	30 0c       	mov	r12,0
800039e4:	f0 1f 00 13 	mcall	80003a30 <sd_mmc_spi_check_presence+0x94>
800039e8:	18 98       	mov	r8,r12
800039ea:	49 39       	lddpc	r9,80003a34 <sd_mmc_spi_check_presence+0x98>
800039ec:	b2 88       	st.b	r9[0x0],r8
800039ee:	49 28       	lddpc	r8,80003a34 <sd_mmc_spi_check_presence+0x98>
800039f0:	11 89       	ld.ub	r9,r8[0x0]
800039f2:	30 18       	mov	r8,1
800039f4:	f0 09 18 00 	cp.b	r9,r8
800039f8:	ce 01       	brne	800039b8 <sd_mmc_spi_check_presence+0x1c>
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
      retry++;
      if (retry > 10)
        return false;
    }
    return true;
800039fa:	30 18       	mov	r8,1
800039fc:	c1 28       	rjmp	80003a20 <sd_mmc_spi_check_presence+0x84>
  }
  else
  {
    // If memory already initialized, send a CRC command (CMD59) (supported only if card is initialized)
    if ((r1 = sd_mmc_spi_send_command(MMC_CRC_ON_OFF, 0)) == 0x00)
800039fe:	30 0b       	mov	r11,0
80003a00:	33 bc       	mov	r12,59
80003a02:	f0 1f 00 0c 	mcall	80003a30 <sd_mmc_spi_check_presence+0x94>
80003a06:	18 98       	mov	r8,r12
80003a08:	48 b9       	lddpc	r9,80003a34 <sd_mmc_spi_check_presence+0x98>
80003a0a:	b2 88       	st.b	r9[0x0],r8
80003a0c:	48 a8       	lddpc	r8,80003a34 <sd_mmc_spi_check_presence+0x98>
80003a0e:	11 88       	ld.ub	r8,r8[0x0]
80003a10:	58 08       	cp.w	r8,0
80003a12:	c0 31       	brne	80003a18 <sd_mmc_spi_check_presence+0x7c>
      return true;
80003a14:	30 18       	mov	r8,1
80003a16:	c0 58       	rjmp	80003a20 <sd_mmc_spi_check_presence+0x84>
    sd_mmc_spi_init_done = false;
80003a18:	48 49       	lddpc	r9,80003a28 <sd_mmc_spi_check_presence+0x8c>
80003a1a:	30 08       	mov	r8,0
80003a1c:	b2 88       	st.b	r9[0x0],r8
    return false;
80003a1e:	30 08       	mov	r8,0
  }
}
80003a20:	10 9c       	mov	r12,r8
80003a22:	2f fd       	sub	sp,-4
80003a24:	e3 cd 80 80 	ldm	sp++,r7,pc
80003a28:	00 00       	add	r0,r0
80003a2a:	06 24       	rsub	r4,r3
80003a2c:	80 00       	ld.sh	r0,r0[0x0]
80003a2e:	89 5a       	st.w	r4[0x14],r10
80003a30:	80 00       	ld.sh	r0,r0[0x0]
80003a32:	32 9c       	mov	r12,41
80003a34:	00 00       	add	r0,r0
80003a36:	0b 1c       	ld.sh	r12,r5++

80003a38 <sd_mmc_spi_mem_check>:
//!
//! @return bit
//!   The memory is ready     -> true
//!   The memory check failed -> false
bool sd_mmc_spi_mem_check(void)
{
80003a38:	eb cd 40 80 	pushm	r7,lr
80003a3c:	1a 97       	mov	r7,sp
  if (sd_mmc_spi_check_presence())
80003a3e:	f0 1f 00 0b 	mcall	80003a68 <sd_mmc_spi_mem_check+0x30>
80003a42:	18 98       	mov	r8,r12
80003a44:	58 08       	cp.w	r8,0
80003a46:	c0 d0       	breq	80003a60 <sd_mmc_spi_mem_check+0x28>
  {
    if (sd_mmc_spi_init_done == false)
80003a48:	48 98       	lddpc	r8,80003a6c <sd_mmc_spi_mem_check+0x34>
80003a4a:	11 88       	ld.ub	r8,r8[0x0]
80003a4c:	ec 18 00 01 	eorl	r8,0x1
80003a50:	5c 58       	castu.b	r8
80003a52:	c0 50       	breq	80003a5c <sd_mmc_spi_mem_check+0x24>
    {
      return sd_mmc_spi_internal_init();
80003a54:	f0 1f 00 07 	mcall	80003a70 <sd_mmc_spi_mem_check+0x38>
80003a58:	18 98       	mov	r8,r12
80003a5a:	c0 48       	rjmp	80003a62 <sd_mmc_spi_mem_check+0x2a>
    }
    else
      return true;
80003a5c:	30 18       	mov	r8,1
80003a5e:	c0 28       	rjmp	80003a62 <sd_mmc_spi_mem_check+0x2a>
  }
  return false;
80003a60:	30 08       	mov	r8,0
}
80003a62:	10 9c       	mov	r12,r8
80003a64:	e3 cd 80 80 	ldm	sp++,r7,pc
80003a68:	80 00       	ld.sh	r0,r0[0x0]
80003a6a:	39 9c       	mov	r12,-103
80003a6c:	00 00       	add	r0,r0
80003a6e:	06 24       	rsub	r4,r3
80003a70:	80 00       	ld.sh	r0,r0[0x0]
80003a72:	2f 50       	sub	r0,-11

80003a74 <sd_mmc_spi_read_open>:
//! @param  pos   Sector address
//!
//! @return bit
//!   The open succeeded      -> true
bool sd_mmc_spi_read_open (uint32_t pos)
{
80003a74:	eb cd 40 80 	pushm	r7,lr
80003a78:	1a 97       	mov	r7,sp
80003a7a:	20 1d       	sub	sp,4
80003a7c:	ef 4c ff fc 	st.w	r7[-4],r12
  // Set the global memory ptr at a Byte address.
  gl_ptr_mem = pos << 9;        // gl_ptr_mem = pos * 512
80003a80:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003a84:	f0 09 15 09 	lsl	r9,r8,0x9
80003a88:	48 58       	lddpc	r8,80003a9c <sd_mmc_spi_read_open+0x28>
80003a8a:	91 09       	st.w	r8[0x0],r9

  // wait for MMC not busy
  return sd_mmc_spi_wait_not_busy();
80003a8c:	f0 1f 00 05 	mcall	80003aa0 <sd_mmc_spi_read_open+0x2c>
80003a90:	18 98       	mov	r8,r12
}
80003a92:	10 9c       	mov	r12,r8
80003a94:	2f fd       	sub	sp,-4
80003a96:	e3 cd 80 80 	ldm	sp++,r7,pc
80003a9a:	00 00       	add	r0,r0
80003a9c:	00 00       	add	r0,r0
80003a9e:	06 0c       	add	r12,r3
80003aa0:	80 00       	ld.sh	r0,r0[0x0]
80003aa2:	39 20       	mov	r0,-110

80003aa4 <sd_mmc_spi_read_close>:

//!
//! @brief This function unselects the current SD_MMC memory.
//!
bool sd_mmc_spi_read_close (void)
{
80003aa4:	eb cd 40 80 	pushm	r7,lr
80003aa8:	1a 97       	mov	r7,sp
  if (false == sd_mmc_spi_wait_not_busy())
80003aaa:	f0 1f 00 07 	mcall	80003ac4 <sd_mmc_spi_read_close+0x20>
80003aae:	18 98       	mov	r8,r12
80003ab0:	ec 18 00 01 	eorl	r8,0x1
80003ab4:	5c 58       	castu.b	r8
80003ab6:	c0 30       	breq	80003abc <sd_mmc_spi_read_close+0x18>
    return false;
80003ab8:	30 08       	mov	r8,0
80003aba:	c0 28       	rjmp	80003abe <sd_mmc_spi_read_close+0x1a>
  return true;
80003abc:	30 18       	mov	r8,1
}
80003abe:	10 9c       	mov	r12,r8
80003ac0:	e3 cd 80 80 	ldm	sp++,r7,pc
80003ac4:	80 00       	ld.sh	r0,r0[0x0]
80003ac6:	39 20       	mov	r0,-110

80003ac8 <sd_mmc_spi_write_open>:
//! @param  pos   Sector address
//!
//! @return bit
//!   The open succeeded      -> true
bool sd_mmc_spi_write_open (uint32_t pos)
{
80003ac8:	eb cd 40 80 	pushm	r7,lr
80003acc:	1a 97       	mov	r7,sp
80003ace:	20 1d       	sub	sp,4
80003ad0:	ef 4c ff fc 	st.w	r7[-4],r12
  // Set the global memory ptr at a Byte address.
  gl_ptr_mem = pos << 9; // gl_ptr_mem = pos * 512
80003ad4:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003ad8:	f0 09 15 09 	lsl	r9,r8,0x9
80003adc:	48 58       	lddpc	r8,80003af0 <sd_mmc_spi_write_open+0x28>
80003ade:	91 09       	st.w	r8[0x0],r9

  // wait for MMC not busy
  return sd_mmc_spi_wait_not_busy();
80003ae0:	f0 1f 00 05 	mcall	80003af4 <sd_mmc_spi_write_open+0x2c>
80003ae4:	18 98       	mov	r8,r12
}
80003ae6:	10 9c       	mov	r12,r8
80003ae8:	2f fd       	sub	sp,-4
80003aea:	e3 cd 80 80 	ldm	sp++,r7,pc
80003aee:	00 00       	add	r0,r0
80003af0:	00 00       	add	r0,r0
80003af2:	06 0c       	add	r12,r3
80003af4:	80 00       	ld.sh	r0,r0[0x0]
80003af6:	39 20       	mov	r0,-110

80003af8 <sd_mmc_spi_write_close>:
//!
//! @brief This function fills the end of the logical sector (512B) and launch
//! page programming.
//!
void sd_mmc_spi_write_close (void)
{
80003af8:	eb cd 40 80 	pushm	r7,lr
80003afc:	1a 97       	mov	r7,sp

}
80003afe:	e3 cd 80 80 	ldm	sp++,r7,pc
80003b02:	d7 03       	nop

80003b04 <sd_mmc_spi_read_sector_to_ram>:
//! @return bit
//!   The read succeeded   -> true
//!   The read failed (bad address, etc.)  -> false
//!/
bool sd_mmc_spi_read_sector_to_ram(void *ram)
{
80003b04:	eb cd 40 80 	pushm	r7,lr
80003b08:	1a 97       	mov	r7,sp
80003b0a:	20 4d       	sub	sp,16
80003b0c:	ef 4c ff f0 	st.w	r7[-16],r12
  uint8_t *_ram = ram;
80003b10:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003b14:	ef 48 ff f8 	st.w	r7[-8],r8
  uint16_t  i;
  uint16_t  read_time_out;
  unsigned short data_read;
  // wait for MMC not busy
  if (false == sd_mmc_spi_wait_not_busy())
80003b18:	f0 1f 00 5e 	mcall	80003c90 <sd_mmc_spi_read_sector_to_ram+0x18c>
80003b1c:	18 98       	mov	r8,r12
80003b1e:	ec 18 00 01 	eorl	r8,0x1
80003b22:	5c 58       	castu.b	r8
80003b24:	c0 30       	breq	80003b2a <sd_mmc_spi_read_sector_to_ram+0x26>
    return false;
80003b26:	30 08       	mov	r8,0
80003b28:	ca f8       	rjmp	80003c86 <sd_mmc_spi_read_sector_to_ram+0x182>

  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
80003b2a:	30 1b       	mov	r11,1
80003b2c:	fe 7c 28 00 	mov	r12,-55296
80003b30:	f0 1f 00 59 	mcall	80003c94 <sd_mmc_spi_read_sector_to_ram+0x190>

  // issue command
  if(card_type == SD_CARD_2_SDHC) {
80003b34:	4d 98       	lddpc	r8,80003c98 <sd_mmc_spi_read_sector_to_ram+0x194>
80003b36:	11 89       	ld.ub	r9,r8[0x0]
80003b38:	30 38       	mov	r8,3
80003b3a:	f0 09 18 00 	cp.b	r9,r8
80003b3e:	c0 c1       	brne	80003b56 <sd_mmc_spi_read_sector_to_ram+0x52>
    r1 = sd_mmc_spi_command(MMC_READ_SINGLE_BLOCK, gl_ptr_mem>>9);
80003b40:	4d 78       	lddpc	r8,80003c9c <sd_mmc_spi_read_sector_to_ram+0x198>
80003b42:	70 08       	ld.w	r8,r8[0x0]
80003b44:	a9 98       	lsr	r8,0x9
80003b46:	10 9b       	mov	r11,r8
80003b48:	31 1c       	mov	r12,17
80003b4a:	f0 1f 00 56 	mcall	80003ca0 <sd_mmc_spi_read_sector_to_ram+0x19c>
80003b4e:	18 98       	mov	r8,r12
80003b50:	4d 59       	lddpc	r9,80003ca4 <sd_mmc_spi_read_sector_to_ram+0x1a0>
80003b52:	b2 88       	st.b	r9[0x0],r8
80003b54:	c0 a8       	rjmp	80003b68 <sd_mmc_spi_read_sector_to_ram+0x64>
  } else {
    r1 = sd_mmc_spi_command(MMC_READ_SINGLE_BLOCK, gl_ptr_mem);
80003b56:	4d 28       	lddpc	r8,80003c9c <sd_mmc_spi_read_sector_to_ram+0x198>
80003b58:	70 08       	ld.w	r8,r8[0x0]
80003b5a:	10 9b       	mov	r11,r8
80003b5c:	31 1c       	mov	r12,17
80003b5e:	f0 1f 00 51 	mcall	80003ca0 <sd_mmc_spi_read_sector_to_ram+0x19c>
80003b62:	18 98       	mov	r8,r12
80003b64:	4d 09       	lddpc	r9,80003ca4 <sd_mmc_spi_read_sector_to_ram+0x1a0>
80003b66:	b2 88       	st.b	r9[0x0],r8
  }

  // check for valid response
  if (r1 != 0x00)
80003b68:	4c f8       	lddpc	r8,80003ca4 <sd_mmc_spi_read_sector_to_ram+0x1a0>
80003b6a:	11 88       	ld.ub	r8,r8[0x0]
80003b6c:	58 08       	cp.w	r8,0
80003b6e:	c0 80       	breq	80003b7e <sd_mmc_spi_read_sector_to_ram+0x7a>
  {
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80003b70:	30 1b       	mov	r11,1
80003b72:	fe 7c 28 00 	mov	r12,-55296
80003b76:	f0 1f 00 4d 	mcall	80003ca8 <sd_mmc_spi_read_sector_to_ram+0x1a4>
    return false;
80003b7a:	30 08       	mov	r8,0
80003b7c:	c8 58       	rjmp	80003c86 <sd_mmc_spi_read_sector_to_ram+0x182>
  }

  // wait for token (may be a datablock start token OR a data error token !)
  read_time_out = 30000;
80003b7e:	e0 68 75 30 	mov	r8,30000
80003b82:	ef 58 ff fe 	st.h	r7[-2],r8
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) == 0xFF)
80003b86:	c1 38       	rjmp	80003bac <sd_mmc_spi_read_sector_to_ram+0xa8>
  {
     read_time_out--;
80003b88:	ef 08 ff fe 	ld.sh	r8,r7[-2]
80003b8c:	20 18       	sub	r8,1
80003b8e:	ef 58 ff fe 	st.h	r7[-2],r8
     if (read_time_out == 0)   // TIME-OUT
80003b92:	ef 09 ff fe 	ld.sh	r9,r7[-2]
80003b96:	30 08       	mov	r8,0
80003b98:	f0 09 19 00 	cp.h	r9,r8
80003b9c:	c0 81       	brne	80003bac <sd_mmc_spi_read_sector_to_ram+0xa8>
     {
       spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS); // unselect SD_MMC_SPI
80003b9e:	30 1b       	mov	r11,1
80003ba0:	fe 7c 28 00 	mov	r12,-55296
80003ba4:	f0 1f 00 41 	mcall	80003ca8 <sd_mmc_spi_read_sector_to_ram+0x1a4>
       return false;
80003ba8:	30 08       	mov	r8,0
80003baa:	c6 e8       	rjmp	80003c86 <sd_mmc_spi_read_sector_to_ram+0x182>
    return false;
  }

  // wait for token (may be a datablock start token OR a data error token !)
  read_time_out = 30000;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) == 0xFF)
80003bac:	e0 6c 00 ff 	mov	r12,255
80003bb0:	f0 1f 00 3f 	mcall	80003cac <sd_mmc_spi_read_sector_to_ram+0x1a8>
80003bb4:	18 98       	mov	r8,r12
80003bb6:	4b c9       	lddpc	r9,80003ca4 <sd_mmc_spi_read_sector_to_ram+0x1a0>
80003bb8:	b2 88       	st.b	r9[0x0],r8
80003bba:	4b b8       	lddpc	r8,80003ca4 <sd_mmc_spi_read_sector_to_ram+0x1a0>
80003bbc:	11 89       	ld.ub	r9,r8[0x0]
80003bbe:	3f f8       	mov	r8,-1
80003bc0:	f0 09 18 00 	cp.b	r9,r8
80003bc4:	ce 20       	breq	80003b88 <sd_mmc_spi_read_sector_to_ram+0x84>
       return false;
     }
  }

  // check token
  if (r1 != MMC_STARTBLOCK_READ)
80003bc6:	4b 88       	lddpc	r8,80003ca4 <sd_mmc_spi_read_sector_to_ram+0x1a0>
80003bc8:	11 89       	ld.ub	r9,r8[0x0]
80003bca:	3f e8       	mov	r8,-2
80003bcc:	f0 09 18 00 	cp.b	r9,r8
80003bd0:	c0 e0       	breq	80003bec <sd_mmc_spi_read_sector_to_ram+0xe8>
  {
    spi_write(SD_MMC_SPI,0xFF);
80003bd2:	e0 6b 00 ff 	mov	r11,255
80003bd6:	fe 7c 28 00 	mov	r12,-55296
80003bda:	f0 1f 00 36 	mcall	80003cb0 <sd_mmc_spi_read_sector_to_ram+0x1ac>
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80003bde:	30 1b       	mov	r11,1
80003be0:	fe 7c 28 00 	mov	r12,-55296
80003be4:	f0 1f 00 31 	mcall	80003ca8 <sd_mmc_spi_read_sector_to_ram+0x1a4>
    return false;
80003be8:	30 08       	mov	r8,0
80003bea:	c4 e8       	rjmp	80003c86 <sd_mmc_spi_read_sector_to_ram+0x182>
  }

  // store datablock
  for(i=0;i<MMC_SECTOR_SIZE;i++)
80003bec:	30 08       	mov	r8,0
80003bee:	ef 58 ff fc 	st.h	r7[-4],r8
80003bf2:	c1 e8       	rjmp	80003c2e <sd_mmc_spi_read_sector_to_ram+0x12a>
  {
    spi_write(SD_MMC_SPI,0xFF);
80003bf4:	e0 6b 00 ff 	mov	r11,255
80003bf8:	fe 7c 28 00 	mov	r12,-55296
80003bfc:	f0 1f 00 2d 	mcall	80003cb0 <sd_mmc_spi_read_sector_to_ram+0x1ac>
    spi_read(SD_MMC_SPI,&data_read);
80003c00:	ee c8 00 0a 	sub	r8,r7,10
80003c04:	10 9b       	mov	r11,r8
80003c06:	fe 7c 28 00 	mov	r12,-55296
80003c0a:	f0 1f 00 2b 	mcall	80003cb4 <sd_mmc_spi_read_sector_to_ram+0x1b0>
    *_ram++=data_read;
80003c0e:	ef 08 ff f6 	ld.sh	r8,r7[-10]
80003c12:	5c 58       	castu.b	r8
80003c14:	ee f9 ff f8 	ld.w	r9,r7[-8]
80003c18:	b2 88       	st.b	r9[0x0],r8
80003c1a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003c1e:	2f f8       	sub	r8,-1
80003c20:	ef 48 ff f8 	st.w	r7[-8],r8
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
    return false;
  }

  // store datablock
  for(i=0;i<MMC_SECTOR_SIZE;i++)
80003c24:	ef 08 ff fc 	ld.sh	r8,r7[-4]
80003c28:	2f f8       	sub	r8,-1
80003c2a:	ef 58 ff fc 	st.h	r7[-4],r8
80003c2e:	ef 09 ff fc 	ld.sh	r9,r7[-4]
80003c32:	e0 68 01 ff 	mov	r8,511
80003c36:	f0 09 19 00 	cp.h	r9,r8
80003c3a:	fe 98 ff dd 	brls	80003bf4 <sd_mmc_spi_read_sector_to_ram+0xf0>
  {
    spi_write(SD_MMC_SPI,0xFF);
    spi_read(SD_MMC_SPI,&data_read);
    *_ram++=data_read;
  }
  gl_ptr_mem += 512;     // Update the memory pointer.
80003c3e:	49 88       	lddpc	r8,80003c9c <sd_mmc_spi_read_sector_to_ram+0x198>
80003c40:	70 08       	ld.w	r8,r8[0x0]
80003c42:	f0 c9 fe 00 	sub	r9,r8,-512
80003c46:	49 68       	lddpc	r8,80003c9c <sd_mmc_spi_read_sector_to_ram+0x198>
80003c48:	91 09       	st.w	r8[0x0],r9

  // load 16-bit CRC (ignored)
  spi_write(SD_MMC_SPI,0xFF);
80003c4a:	e0 6b 00 ff 	mov	r11,255
80003c4e:	fe 7c 28 00 	mov	r12,-55296
80003c52:	f0 1f 00 18 	mcall	80003cb0 <sd_mmc_spi_read_sector_to_ram+0x1ac>
  spi_write(SD_MMC_SPI,0xFF);
80003c56:	e0 6b 00 ff 	mov	r11,255
80003c5a:	fe 7c 28 00 	mov	r12,-55296
80003c5e:	f0 1f 00 15 	mcall	80003cb0 <sd_mmc_spi_read_sector_to_ram+0x1ac>

  // continue delivering some clock cycles
  spi_write(SD_MMC_SPI,0xFF);
80003c62:	e0 6b 00 ff 	mov	r11,255
80003c66:	fe 7c 28 00 	mov	r12,-55296
80003c6a:	f0 1f 00 12 	mcall	80003cb0 <sd_mmc_spi_read_sector_to_ram+0x1ac>
  spi_write(SD_MMC_SPI,0xFF);
80003c6e:	e0 6b 00 ff 	mov	r11,255
80003c72:	fe 7c 28 00 	mov	r12,-55296
80003c76:	f0 1f 00 0f 	mcall	80003cb0 <sd_mmc_spi_read_sector_to_ram+0x1ac>

  // release chip select
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80003c7a:	30 1b       	mov	r11,1
80003c7c:	fe 7c 28 00 	mov	r12,-55296
80003c80:	f0 1f 00 0a 	mcall	80003ca8 <sd_mmc_spi_read_sector_to_ram+0x1a4>

  return true;   // Read done.
80003c84:	30 18       	mov	r8,1
}
80003c86:	10 9c       	mov	r12,r8
80003c88:	2f cd       	sub	sp,-16
80003c8a:	e3 cd 80 80 	ldm	sp++,r7,pc
80003c8e:	00 00       	add	r0,r0
80003c90:	80 00       	ld.sh	r0,r0[0x0]
80003c92:	39 20       	mov	r0,-110
80003c94:	80 00       	ld.sh	r0,r0[0x0]
80003c96:	86 b8       	ld.uh	r8,r3[0x6]
80003c98:	00 00       	add	r0,r0
80003c9a:	0b 0a       	ld.w	r10,r5++
80003c9c:	00 00       	add	r0,r0
80003c9e:	06 0c       	add	r12,r3
80003ca0:	80 00       	ld.sh	r0,r0[0x0]
80003ca2:	32 f4       	mov	r4,47
80003ca4:	00 00       	add	r0,r0
80003ca6:	0b 1c       	ld.sh	r12,r5++
80003ca8:	80 00       	ld.sh	r0,r0[0x0]
80003caa:	87 50       	st.w	r3[0x14],r0
80003cac:	80 00       	ld.sh	r0,r0[0x0]
80003cae:	34 04       	mov	r4,64
80003cb0:	80 00       	ld.sh	r0,r0[0x0]
80003cb2:	89 5a       	st.w	r4[0x14],r10
80003cb4:	80 00       	ld.sh	r0,r0[0x0]
80003cb6:	89 b2       	st.w	r4[0x2c],r2

80003cb8 <sd_mmc_spi_write_sector_from_ram>:
//! @return bit
//!   The write succeeded   -> true
//!   The write failed      -> false
//!
bool sd_mmc_spi_write_sector_from_ram(const void *ram)
{
80003cb8:	eb cd 40 80 	pushm	r7,lr
80003cbc:	1a 97       	mov	r7,sp
80003cbe:	20 3d       	sub	sp,12
80003cc0:	ef 4c ff f4 	st.w	r7[-12],r12
  const uint8_t *_ram = ram;
80003cc4:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003cc8:	ef 48 ff f8 	st.w	r7[-8],r8
  uint16_t i;

  // wait for MMC not busy
  if (false == sd_mmc_spi_wait_not_busy())
80003ccc:	f0 1f 00 5f 	mcall	80003e48 <sd_mmc_spi_write_sector_from_ram+0x190>
80003cd0:	18 98       	mov	r8,r12
80003cd2:	ec 18 00 01 	eorl	r8,0x1
80003cd6:	5c 58       	castu.b	r8
80003cd8:	c0 30       	breq	80003cde <sd_mmc_spi_write_sector_from_ram+0x26>
    return false;
80003cda:	30 08       	mov	r8,0
80003cdc:	cb 18       	rjmp	80003e3e <sd_mmc_spi_write_sector_from_ram+0x186>

  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
80003cde:	30 1b       	mov	r11,1
80003ce0:	fe 7c 28 00 	mov	r12,-55296
80003ce4:	f0 1f 00 5a 	mcall	80003e4c <sd_mmc_spi_write_sector_from_ram+0x194>

  // issue command
  if(card_type == SD_CARD_2_SDHC) {
80003ce8:	4d a8       	lddpc	r8,80003e50 <sd_mmc_spi_write_sector_from_ram+0x198>
80003cea:	11 89       	ld.ub	r9,r8[0x0]
80003cec:	30 38       	mov	r8,3
80003cee:	f0 09 18 00 	cp.b	r9,r8
80003cf2:	c0 c1       	brne	80003d0a <sd_mmc_spi_write_sector_from_ram+0x52>
    r1 = sd_mmc_spi_command(MMC_WRITE_BLOCK, gl_ptr_mem>>9);
80003cf4:	4d 88       	lddpc	r8,80003e54 <sd_mmc_spi_write_sector_from_ram+0x19c>
80003cf6:	70 08       	ld.w	r8,r8[0x0]
80003cf8:	a9 98       	lsr	r8,0x9
80003cfa:	10 9b       	mov	r11,r8
80003cfc:	31 8c       	mov	r12,24
80003cfe:	f0 1f 00 57 	mcall	80003e58 <sd_mmc_spi_write_sector_from_ram+0x1a0>
80003d02:	18 98       	mov	r8,r12
80003d04:	4d 69       	lddpc	r9,80003e5c <sd_mmc_spi_write_sector_from_ram+0x1a4>
80003d06:	b2 88       	st.b	r9[0x0],r8
80003d08:	c0 a8       	rjmp	80003d1c <sd_mmc_spi_write_sector_from_ram+0x64>
  } else {
    r1 = sd_mmc_spi_command(MMC_WRITE_BLOCK, gl_ptr_mem);
80003d0a:	4d 38       	lddpc	r8,80003e54 <sd_mmc_spi_write_sector_from_ram+0x19c>
80003d0c:	70 08       	ld.w	r8,r8[0x0]
80003d0e:	10 9b       	mov	r11,r8
80003d10:	31 8c       	mov	r12,24
80003d12:	f0 1f 00 52 	mcall	80003e58 <sd_mmc_spi_write_sector_from_ram+0x1a0>
80003d16:	18 98       	mov	r8,r12
80003d18:	4d 19       	lddpc	r9,80003e5c <sd_mmc_spi_write_sector_from_ram+0x1a4>
80003d1a:	b2 88       	st.b	r9[0x0],r8
  }

  // check for valid response
  if(r1 != 0x00)
80003d1c:	4d 08       	lddpc	r8,80003e5c <sd_mmc_spi_write_sector_from_ram+0x1a4>
80003d1e:	11 88       	ld.ub	r8,r8[0x0]
80003d20:	58 08       	cp.w	r8,0
80003d22:	c0 80       	breq	80003d32 <sd_mmc_spi_write_sector_from_ram+0x7a>
  {
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
80003d24:	30 1b       	mov	r11,1
80003d26:	fe 7c 28 00 	mov	r12,-55296
80003d2a:	f0 1f 00 4e 	mcall	80003e60 <sd_mmc_spi_write_sector_from_ram+0x1a8>
    return false;
80003d2e:	30 08       	mov	r8,0
80003d30:	c8 78       	rjmp	80003e3e <sd_mmc_spi_write_sector_from_ram+0x186>
  }
  // send dummy
  spi_write(SD_MMC_SPI,0xFF);   // give clock again to end transaction
80003d32:	e0 6b 00 ff 	mov	r11,255
80003d36:	fe 7c 28 00 	mov	r12,-55296
80003d3a:	f0 1f 00 4b 	mcall	80003e64 <sd_mmc_spi_write_sector_from_ram+0x1ac>

  // send data start token
  spi_write(SD_MMC_SPI,MMC_STARTBLOCK_WRITE);
80003d3e:	e0 6b 00 fe 	mov	r11,254
80003d42:	fe 7c 28 00 	mov	r12,-55296
80003d46:	f0 1f 00 48 	mcall	80003e64 <sd_mmc_spi_write_sector_from_ram+0x1ac>
  // write data
  for(i=0;i<MMC_SECTOR_SIZE;i++)
80003d4a:	30 08       	mov	r8,0
80003d4c:	ef 58 ff fe 	st.h	r7[-2],r8
80003d50:	c1 38       	rjmp	80003d76 <sd_mmc_spi_write_sector_from_ram+0xbe>
  {
    spi_write(SD_MMC_SPI,*_ram++);
80003d52:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003d56:	11 88       	ld.ub	r8,r8[0x0]
80003d58:	ee f9 ff f8 	ld.w	r9,r7[-8]
80003d5c:	2f f9       	sub	r9,-1
80003d5e:	ef 49 ff f8 	st.w	r7[-8],r9
80003d62:	10 9b       	mov	r11,r8
80003d64:	fe 7c 28 00 	mov	r12,-55296
80003d68:	f0 1f 00 3f 	mcall	80003e64 <sd_mmc_spi_write_sector_from_ram+0x1ac>
  spi_write(SD_MMC_SPI,0xFF);   // give clock again to end transaction

  // send data start token
  spi_write(SD_MMC_SPI,MMC_STARTBLOCK_WRITE);
  // write data
  for(i=0;i<MMC_SECTOR_SIZE;i++)
80003d6c:	ef 08 ff fe 	ld.sh	r8,r7[-2]
80003d70:	2f f8       	sub	r8,-1
80003d72:	ef 58 ff fe 	st.h	r7[-2],r8
80003d76:	ef 09 ff fe 	ld.sh	r9,r7[-2]
80003d7a:	e0 68 01 ff 	mov	r8,511
80003d7e:	f0 09 19 00 	cp.h	r9,r8
80003d82:	fe 98 ff e8 	brls	80003d52 <sd_mmc_spi_write_sector_from_ram+0x9a>
  {
    spi_write(SD_MMC_SPI,*_ram++);
  }

  spi_write(SD_MMC_SPI,0xFF);    // send CRC (field required but value ignored)
80003d86:	e0 6b 00 ff 	mov	r11,255
80003d8a:	fe 7c 28 00 	mov	r12,-55296
80003d8e:	f0 1f 00 36 	mcall	80003e64 <sd_mmc_spi_write_sector_from_ram+0x1ac>
  spi_write(SD_MMC_SPI,0xFF);
80003d92:	e0 6b 00 ff 	mov	r11,255
80003d96:	fe 7c 28 00 	mov	r12,-55296
80003d9a:	f0 1f 00 33 	mcall	80003e64 <sd_mmc_spi_write_sector_from_ram+0x1ac>

  // read data response token
  r1 = sd_mmc_spi_send_and_read(0xFF);
80003d9e:	e0 6c 00 ff 	mov	r12,255
80003da2:	f0 1f 00 32 	mcall	80003e68 <sd_mmc_spi_write_sector_from_ram+0x1b0>
80003da6:	18 98       	mov	r8,r12
80003da8:	4a d9       	lddpc	r9,80003e5c <sd_mmc_spi_write_sector_from_ram+0x1a4>
80003daa:	b2 88       	st.b	r9[0x0],r8
  if( (r1&MMC_DR_MASK) != MMC_DR_ACCEPT)
80003dac:	4a c8       	lddpc	r8,80003e5c <sd_mmc_spi_write_sector_from_ram+0x1a4>
80003dae:	11 88       	ld.ub	r8,r8[0x0]
80003db0:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80003db4:	58 58       	cp.w	r8,5
80003db6:	c1 40       	breq	80003dde <sd_mmc_spi_write_sector_from_ram+0x126>
  {
    spi_write(SD_MMC_SPI,0xFF);    // send dummy bytes
80003db8:	e0 6b 00 ff 	mov	r11,255
80003dbc:	fe 7c 28 00 	mov	r12,-55296
80003dc0:	f0 1f 00 29 	mcall	80003e64 <sd_mmc_spi_write_sector_from_ram+0x1ac>
    spi_write(SD_MMC_SPI,0xFF);
80003dc4:	e0 6b 00 ff 	mov	r11,255
80003dc8:	fe 7c 28 00 	mov	r12,-55296
80003dcc:	f0 1f 00 26 	mcall	80003e64 <sd_mmc_spi_write_sector_from_ram+0x1ac>
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
80003dd0:	30 1b       	mov	r11,1
80003dd2:	fe 7c 28 00 	mov	r12,-55296
80003dd6:	f0 1f 00 23 	mcall	80003e60 <sd_mmc_spi_write_sector_from_ram+0x1a8>
    return false;         // return ERROR byte
80003dda:	30 08       	mov	r8,0
80003ddc:	c3 18       	rjmp	80003e3e <sd_mmc_spi_write_sector_from_ram+0x186>
  }

  spi_write(SD_MMC_SPI,0xFF);    // send dummy bytes
80003dde:	e0 6b 00 ff 	mov	r11,255
80003de2:	fe 7c 28 00 	mov	r12,-55296
80003de6:	f0 1f 00 20 	mcall	80003e64 <sd_mmc_spi_write_sector_from_ram+0x1ac>
  spi_write(SD_MMC_SPI,0xFF);
80003dea:	e0 6b 00 ff 	mov	r11,255
80003dee:	fe 7c 28 00 	mov	r12,-55296
80003df2:	f0 1f 00 1d 	mcall	80003e64 <sd_mmc_spi_write_sector_from_ram+0x1ac>

  // release chip select
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80003df6:	30 1b       	mov	r11,1
80003df8:	fe 7c 28 00 	mov	r12,-55296
80003dfc:	f0 1f 00 19 	mcall	80003e60 <sd_mmc_spi_write_sector_from_ram+0x1a8>
  gl_ptr_mem += 512;        // Update the memory pointer.
80003e00:	49 58       	lddpc	r8,80003e54 <sd_mmc_spi_write_sector_from_ram+0x19c>
80003e02:	70 08       	ld.w	r8,r8[0x0]
80003e04:	f0 c9 fe 00 	sub	r9,r8,-512
80003e08:	49 38       	lddpc	r8,80003e54 <sd_mmc_spi_write_sector_from_ram+0x19c>
80003e0a:	91 09       	st.w	r8[0x0],r9

  // wait card not busy after last programming operation
  i=0;
80003e0c:	30 08       	mov	r8,0
80003e0e:	ef 58 ff fe 	st.h	r7[-2],r8
  while (false == sd_mmc_spi_wait_not_busy())
80003e12:	c0 e8       	rjmp	80003e2e <sd_mmc_spi_write_sector_from_ram+0x176>
  {
    i++;
80003e14:	ef 08 ff fe 	ld.sh	r8,r7[-2]
80003e18:	2f f8       	sub	r8,-1
80003e1a:	ef 58 ff fe 	st.h	r7[-2],r8
    if (i == 10)
80003e1e:	ef 09 ff fe 	ld.sh	r9,r7[-2]
80003e22:	30 a8       	mov	r8,10
80003e24:	f0 09 19 00 	cp.h	r9,r8
80003e28:	c0 31       	brne	80003e2e <sd_mmc_spi_write_sector_from_ram+0x176>
      return false;
80003e2a:	30 08       	mov	r8,0
80003e2c:	c0 98       	rjmp	80003e3e <sd_mmc_spi_write_sector_from_ram+0x186>
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
  gl_ptr_mem += 512;        // Update the memory pointer.

  // wait card not busy after last programming operation
  i=0;
  while (false == sd_mmc_spi_wait_not_busy())
80003e2e:	f0 1f 00 07 	mcall	80003e48 <sd_mmc_spi_write_sector_from_ram+0x190>
80003e32:	18 98       	mov	r8,r12
80003e34:	ec 18 00 01 	eorl	r8,0x1
80003e38:	5c 58       	castu.b	r8
80003e3a:	ce d1       	brne	80003e14 <sd_mmc_spi_write_sector_from_ram+0x15c>
    i++;
    if (i == 10)
      return false;
  }

  return true;                  // Write done
80003e3c:	30 18       	mov	r8,1
}
80003e3e:	10 9c       	mov	r12,r8
80003e40:	2f dd       	sub	sp,-12
80003e42:	e3 cd 80 80 	ldm	sp++,r7,pc
80003e46:	00 00       	add	r0,r0
80003e48:	80 00       	ld.sh	r0,r0[0x0]
80003e4a:	39 20       	mov	r0,-110
80003e4c:	80 00       	ld.sh	r0,r0[0x0]
80003e4e:	86 b8       	ld.uh	r8,r3[0x6]
80003e50:	00 00       	add	r0,r0
80003e52:	0b 0a       	ld.w	r10,r5++
80003e54:	00 00       	add	r0,r0
80003e56:	06 0c       	add	r12,r3
80003e58:	80 00       	ld.sh	r0,r0[0x0]
80003e5a:	32 f4       	mov	r4,47
80003e5c:	00 00       	add	r0,r0
80003e5e:	0b 1c       	ld.sh	r12,r5++
80003e60:	80 00       	ld.sh	r0,r0[0x0]
80003e62:	87 50       	st.w	r3[0x14],r0
80003e64:	80 00       	ld.sh	r0,r0[0x0]
80003e66:	89 5a       	st.w	r4[0x14],r10
80003e68:	80 00       	ld.sh	r0,r0[0x0]
80003e6a:	34 04       	mov	r4,64

80003e6c <adc_configure>:
 * If not called, ADC channels will have side effects
 *
 * \param *adc Base address of the ADC
 */
void adc_configure(volatile avr32_adc_t *adc)
{
80003e6c:	eb cd 40 80 	pushm	r7,lr
80003e70:	1a 97       	mov	r7,sp
80003e72:	20 1d       	sub	sp,4
80003e74:	ef 4c ff fc 	st.w	r7[-4],r12
	adc->mr |= 1 << AVR32_ADC_LOWRES_OFFSET;
#endif

	/* Set Sample/Hold time to max so that the ADC capacitor should be
	 * loaded entirely */
	adc->mr |= 0xF << AVR32_ADC_SHTIM_OFFSET;
80003e78:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003e7c:	70 18       	ld.w	r8,r8[0x4]
80003e7e:	10 99       	mov	r9,r8
80003e80:	ea 19 0f 00 	orh	r9,0xf00
80003e84:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003e88:	91 19       	st.w	r8[0x4],r9

	/* Set Startup to max so that the ADC capacitor should be loaded
	 * entirely */
	adc->mr |= 0x1F << AVR32_ADC_STARTUP_OFFSET;
80003e8a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003e8e:	70 18       	ld.w	r8,r8[0x4]
80003e90:	10 99       	mov	r9,r8
80003e92:	ea 19 00 1f 	orh	r9,0x1f
80003e96:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003e9a:	91 19       	st.w	r8[0x4],r9
}
80003e9c:	2f fd       	sub	sp,-4
80003e9e:	e3 cd 80 80 	ldm	sp++,r7,pc

80003ea2 <adc_start>:

/** \brief Start analog to digital conversion
 * \param *adc Base address of the ADC
 */
void adc_start(volatile avr32_adc_t *adc)
{
80003ea2:	eb cd 40 80 	pushm	r7,lr
80003ea6:	1a 97       	mov	r7,sp
80003ea8:	20 1d       	sub	sp,4
80003eaa:	ef 4c ff fc 	st.w	r7[-4],r12
	Assert( adc != NULL );

	/* start conversion */
	adc->cr = AVR32_ADC_START_MASK;
80003eae:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003eb2:	30 29       	mov	r9,2
80003eb4:	91 09       	st.w	r8[0x0],r9
}
80003eb6:	2f fd       	sub	sp,-4
80003eb8:	e3 cd 80 80 	ldm	sp++,r7,pc

80003ebc <adc_enable>:
 *
 * \param *adc Base address of the ADC
 * \param  channel   channel to enable (0 to 7)
 */
void adc_enable(volatile avr32_adc_t *adc, uint16_t channel)
{
80003ebc:	eb cd 40 80 	pushm	r7,lr
80003ec0:	1a 97       	mov	r7,sp
80003ec2:	20 2d       	sub	sp,8
80003ec4:	ef 4c ff fc 	st.w	r7[-4],r12
80003ec8:	16 98       	mov	r8,r11
80003eca:	ef 58 ff f8 	st.h	r7[-8],r8
	Assert( adc != NULL );
	Assert( channel <= AVR32_ADC_CHANNELS_MSB ); /* check if channel exist
	                                              **/

	/* enable channel */
	adc->cher = (1 << channel);
80003ece:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80003ed2:	30 19       	mov	r9,1
80003ed4:	f2 08 09 48 	lsl	r8,r9,r8
80003ed8:	10 99       	mov	r9,r8
80003eda:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003ede:	91 49       	st.w	r8[0x10],r9
}
80003ee0:	2f ed       	sub	sp,-8
80003ee2:	e3 cd 80 80 	ldm	sp++,r7,pc

80003ee6 <adc_check_eoc>:
 * \param  channel   channel to check (0 to 7)
 * \return bool      true if conversion not running
 *                   false if conversion running
 */
bool adc_check_eoc(volatile avr32_adc_t *adc, uint16_t channel)
{
80003ee6:	eb cd 40 80 	pushm	r7,lr
80003eea:	1a 97       	mov	r7,sp
80003eec:	20 2d       	sub	sp,8
80003eee:	ef 4c ff fc 	st.w	r7[-4],r12
80003ef2:	16 98       	mov	r8,r11
80003ef4:	ef 58 ff f8 	st.h	r7[-8],r8
	Assert( adc != NULL );
	Assert( channel <= AVR32_ADC_CHANNELS_MSB ); /* check if channel exist
	                                              **/

	/* get SR register : EOC bit for channel */
	return ((adc->sr & (1 << channel)) ? true : false);
80003ef8:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003efc:	70 79       	ld.w	r9,r8[0x1c]
80003efe:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80003f02:	30 1a       	mov	r10,1
80003f04:	f4 08 09 48 	lsl	r8,r10,r8
80003f08:	f3 e8 00 08 	and	r8,r9,r8
80003f0c:	5f 18       	srne	r8
80003f0e:	5c 58       	castu.b	r8
}
80003f10:	10 9c       	mov	r12,r8
80003f12:	2f ed       	sub	sp,-8
80003f14:	e3 cd 80 80 	ldm	sp++,r7,pc

80003f18 <adc_get_value>:
 * \param *adc Base address of the ADC
 * \param  channel   channel to handle (0 to 7)
 * \return The value acquired (unsigned long)
 */
uint32_t adc_get_value(volatile avr32_adc_t *adc, uint16_t channel)
{
80003f18:	eb cd 40 80 	pushm	r7,lr
80003f1c:	1a 97       	mov	r7,sp
80003f1e:	20 2d       	sub	sp,8
80003f20:	ef 4c ff fc 	st.w	r7[-4],r12
80003f24:	16 98       	mov	r8,r11
80003f26:	ef 58 ff f8 	st.h	r7[-8],r8
	Assert( adc != NULL );
	Assert( channel <= AVR32_ADC_CHANNELS_MSB );

	/* wait for end of conversion */
	while (adc_check_eoc(adc, channel) != true) {
80003f2a:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80003f2e:	10 9b       	mov	r11,r8
80003f30:	ee fc ff fc 	ld.w	r12,r7[-4]
80003f34:	f0 1f 00 0b 	mcall	80003f60 <adc_get_value+0x48>
80003f38:	18 98       	mov	r8,r12
80003f3a:	ec 18 00 01 	eorl	r8,0x1
80003f3e:	5c 58       	castu.b	r8
80003f40:	cf 51       	brne	80003f2a <adc_get_value+0x12>
	}

	return *((uint32_t *)((&(adc->cdr0)) + channel));
80003f42:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003f46:	f0 c9 ff d0 	sub	r9,r8,-48
80003f4a:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80003f4e:	a3 68       	lsl	r8,0x2
80003f50:	f2 08 00 08 	add	r8,r9,r8
80003f54:	70 08       	ld.w	r8,r8[0x0]
}
80003f56:	10 9c       	mov	r12,r8
80003f58:	2f ed       	sub	sp,-8
80003f5a:	e3 cd 80 80 	ldm	sp++,r7,pc
80003f5e:	00 00       	add	r0,r0
80003f60:	80 00       	ld.sh	r0,r0[0x0]
80003f62:	3e e6       	mov	r6,-18

80003f64 <flashc_set_wait_state>:
	return (AVR32_FLASHC.fcr & AVR32_FLASHC_FCR_FWS_MASK) >> AVR32_FLASHC_FCR_FWS_OFFSET;
}


void flashc_set_wait_state(unsigned int wait_state)
{
80003f64:	eb cd 40 80 	pushm	r7,lr
80003f68:	1a 97       	mov	r7,sp
80003f6a:	20 2d       	sub	sp,8
80003f6c:	ef 4c ff f8 	st.w	r7[-8],r12
	u_avr32_flashc_fcr_t u_avr32_flashc_fcr = {AVR32_FLASHC.fcr};
80003f70:	fe 68 14 00 	mov	r8,-125952
80003f74:	70 08       	ld.w	r8,r8[0x0]
80003f76:	30 09       	mov	r9,0
80003f78:	ef 49 ff fc 	st.w	r7[-4],r9
80003f7c:	ef 48 ff fc 	st.w	r7[-4],r8
	u_avr32_flashc_fcr.FCR.fws = wait_state;
80003f80:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003f84:	5c 58       	castu.b	r8
80003f86:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80003f8a:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80003f8e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003f92:	f1 d9 d0 c1 	bfins	r8,r9,0x6,0x1
80003f96:	ef 48 ff fc 	st.w	r7[-4],r8
	AVR32_FLASHC.fcr = u_avr32_flashc_fcr.fcr;
80003f9a:	fe 68 14 00 	mov	r8,-125952
80003f9e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80003fa2:	91 09       	st.w	r8[0x0],r9
}
80003fa4:	2f ed       	sub	sp,-8
80003fa6:	e3 cd 80 80 	ldm	sp++,r7,pc
80003faa:	d7 03       	nop

80003fac <flashc_set_bus_freq>:


void flashc_set_bus_freq(unsigned int cpu_f_hz)
{
80003fac:	eb cd 40 80 	pushm	r7,lr
80003fb0:	1a 97       	mov	r7,sp
80003fb2:	20 1d       	sub	sp,4
80003fb4:	ef 4c ff fc 	st.w	r7[-4],r12
	if (cpu_f_hz >= AVR32_FLASHC_FWS_0_MAX_FREQ) {
80003fb8:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003fbc:	e0 69 8a 3f 	mov	r9,35391
80003fc0:	ea 19 01 f7 	orh	r9,0x1f7
80003fc4:	12 38       	cp.w	r8,r9
80003fc6:	e0 88 00 06 	brls	80003fd2 <flashc_set_bus_freq+0x26>
		// Set 1 WS.
		flashc_set_wait_state(1);
80003fca:	30 1c       	mov	r12,1
80003fcc:	f0 1f 00 05 	mcall	80003fe0 <flashc_set_bus_freq+0x34>
80003fd0:	c0 48       	rjmp	80003fd8 <flashc_set_bus_freq+0x2c>
	} else {
		// Set 0 WS.
		flashc_set_wait_state(0);
80003fd2:	30 0c       	mov	r12,0
80003fd4:	f0 1f 00 03 	mcall	80003fe0 <flashc_set_bus_freq+0x34>
	}
}
80003fd8:	2f fd       	sub	sp,-4
80003fda:	e3 cd 80 80 	ldm	sp++,r7,pc
80003fde:	00 00       	add	r0,r0
80003fe0:	80 00       	ld.sh	r0,r0[0x0]
80003fe2:	3f 64       	mov	r4,-10

80003fe4 <cpu_irq_is_enabled_flags>:

	return flags;
}

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
80003fe4:	eb cd 40 80 	pushm	r7,lr
80003fe8:	1a 97       	mov	r7,sp
80003fea:	20 1d       	sub	sp,4
80003fec:	ef 4c ff fc 	st.w	r7[-4],r12
	return !(flags & AVR32_SR_GM_MASK);
80003ff0:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003ff4:	e6 18 00 01 	andh	r8,0x1,COH
80003ff8:	5f 08       	sreq	r8
80003ffa:	5c 58       	castu.b	r8
}
80003ffc:	10 9c       	mov	r12,r8
80003ffe:	2f fd       	sub	sp,-4
80004000:	e3 cd 80 80 	ldm	sp++,r7,pc

80004004 <pwm_init>:
#include "compiler.h"
#include "pwm.h"


int pwm_init(const pwm_opt_t *opt)
{
80004004:	eb cd 40 80 	pushm	r7,lr
80004008:	1a 97       	mov	r7,sp
8000400a:	20 3d       	sub	sp,12
8000400c:	ef 4c ff f4 	st.w	r7[-12],r12
  volatile avr32_pwm_t *pwm = &AVR32_PWM;
80004010:	fe 78 30 00 	mov	r8,-53248
80004014:	ef 48 ff f8 	st.w	r7[-8],r8
  bool global_interrupt_enabled = Is_global_interrupt_enabled();
80004018:	e1 b8 00 00 	mfsr	r8,0x0
8000401c:	10 9c       	mov	r12,r8
8000401e:	f0 1f 00 1e 	mcall	80004094 <pwm_init+0x90>
80004022:	18 98       	mov	r8,r12
80004024:	ef 68 ff ff 	st.b	r7[-1],r8

  if (opt == 0 ) // Null pointer.
80004028:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000402c:	58 08       	cp.w	r8,0
8000402e:	c0 31       	brne	80004034 <pwm_init+0x30>
    return PWM_INVALID_INPUT;
80004030:	30 18       	mov	r8,1
80004032:	c2 c8       	rjmp	8000408a <pwm_init+0x86>

  // Disable interrupt.
  if (global_interrupt_enabled) Disable_global_interrupt();
80004034:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80004038:	30 08       	mov	r8,0
8000403a:	f0 09 18 00 	cp.b	r9,r8
8000403e:	c0 20       	breq	80004042 <pwm_init+0x3e>
80004040:	d3 03       	ssrf	0x10
  pwm->idr = ((1 << (AVR32_PWM_LINES_MSB + 1)) - 1) << AVR32_PWM_IDR_CHID0_OFFSET;
80004042:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004046:	37 f9       	mov	r9,127
80004048:	91 59       	st.w	r8[0x14],r9
  pwm->isr;
8000404a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000404e:	70 78       	ld.w	r8,r8[0x1c]
  if (global_interrupt_enabled) Enable_global_interrupt();
80004050:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80004054:	30 08       	mov	r8,0
80004056:	f0 09 18 00 	cp.b	r9,r8
8000405a:	c0 20       	breq	8000405e <pwm_init+0x5a>
8000405c:	d5 03       	csrf	0x10

  // Set PWM mode register.
  pwm->mr =
    ((opt->diva)<<AVR32_PWM_DIVA_OFFSET) |
8000405e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004062:	70 19       	ld.w	r9,r8[0x4]
    ((opt->divb)<<AVR32_PWM_DIVB_OFFSET) |
80004064:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004068:	70 08       	ld.w	r8,r8[0x0]
8000406a:	b1 68       	lsl	r8,0x10
8000406c:	10 49       	or	r9,r8
    ((opt->prea)<<AVR32_PWM_PREA_OFFSET) |
8000406e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004072:	70 38       	ld.w	r8,r8[0xc]
80004074:	a9 68       	lsl	r8,0x8
80004076:	10 49       	or	r9,r8
    ((opt->preb)<<AVR32_PWM_PREB_OFFSET)
80004078:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000407c:	70 28       	ld.w	r8,r8[0x8]
8000407e:	b9 68       	lsl	r8,0x18
  pwm->isr;
  if (global_interrupt_enabled) Enable_global_interrupt();

  // Set PWM mode register.
  pwm->mr =
    ((opt->diva)<<AVR32_PWM_DIVA_OFFSET) |
80004080:	10 49       	or	r9,r8
  pwm->idr = ((1 << (AVR32_PWM_LINES_MSB + 1)) - 1) << AVR32_PWM_IDR_CHID0_OFFSET;
  pwm->isr;
  if (global_interrupt_enabled) Enable_global_interrupt();

  // Set PWM mode register.
  pwm->mr =
80004082:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004086:	91 09       	st.w	r8[0x0],r9
    ((opt->divb)<<AVR32_PWM_DIVB_OFFSET) |
    ((opt->prea)<<AVR32_PWM_PREA_OFFSET) |
    ((opt->preb)<<AVR32_PWM_PREB_OFFSET)
    ;

  return PWM_SUCCESS;
80004088:	30 08       	mov	r8,0
}
8000408a:	10 9c       	mov	r12,r8
8000408c:	2f dd       	sub	sp,-12
8000408e:	e3 cd 80 80 	ldm	sp++,r7,pc
80004092:	00 00       	add	r0,r0
80004094:	80 00       	ld.sh	r0,r0[0x0]
80004096:	3f e4       	mov	r4,-2

80004098 <pwm_channel_init>:


int pwm_channel_init( unsigned int channel_id, const avr32_pwm_channel_t *pwm_channel)
{
80004098:	eb cd 40 80 	pushm	r7,lr
8000409c:	1a 97       	mov	r7,sp
8000409e:	20 3d       	sub	sp,12
800040a0:	ef 4c ff f8 	st.w	r7[-8],r12
800040a4:	ef 4b ff f4 	st.w	r7[-12],r11
  volatile avr32_pwm_t *pwm = &AVR32_PWM;
800040a8:	fe 78 30 00 	mov	r8,-53248
800040ac:	ef 48 ff fc 	st.w	r7[-4],r8

  if (pwm_channel == 0) // Null pointer.
800040b0:	ee f8 ff f4 	ld.w	r8,r7[-12]
800040b4:	58 08       	cp.w	r8,0
800040b6:	c0 31       	brne	800040bc <pwm_channel_init+0x24>
    return PWM_INVALID_ARGUMENT;
800040b8:	30 18       	mov	r8,1
800040ba:	c2 f8       	rjmp	80004118 <pwm_channel_init+0x80>
  if (channel_id > AVR32_PWM_LINES_MSB) // Control input values.
800040bc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800040c0:	58 68       	cp.w	r8,6
800040c2:	e0 88 00 04 	brls	800040ca <pwm_channel_init+0x32>
    return PWM_INVALID_INPUT;
800040c6:	30 18       	mov	r8,1
800040c8:	c2 88       	rjmp	80004118 <pwm_channel_init+0x80>

  pwm->channel[channel_id].cmr= pwm_channel->cmr;   // Channel mode.
800040ca:	ee f8 ff f8 	ld.w	r8,r7[-8]
800040ce:	ee f9 ff f4 	ld.w	r9,r7[-12]
800040d2:	72 09       	ld.w	r9,r9[0x0]
800040d4:	ee fa ff fc 	ld.w	r10,r7[-4]
800040d8:	2f 08       	sub	r8,-16
800040da:	a5 78       	lsl	r8,0x5
800040dc:	f4 08 00 08 	add	r8,r10,r8
800040e0:	91 09       	st.w	r8[0x0],r9
  pwm->channel[channel_id].cdty= pwm_channel->cdty; // Duty cycle, should be < CPRD.
800040e2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800040e6:	ee f9 ff f4 	ld.w	r9,r7[-12]
800040ea:	72 19       	ld.w	r9,r9[0x4]
800040ec:	ee fa ff fc 	ld.w	r10,r7[-4]
800040f0:	a5 78       	lsl	r8,0x5
800040f2:	f4 08 00 08 	add	r8,r10,r8
800040f6:	f0 c8 fd fc 	sub	r8,r8,-516
800040fa:	91 09       	st.w	r8[0x0],r9
  pwm->channel[channel_id].cprd= pwm_channel->cprd; // Channel period.
800040fc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004100:	ee f9 ff f4 	ld.w	r9,r7[-12]
80004104:	72 29       	ld.w	r9,r9[0x8]
80004106:	ee fa ff fc 	ld.w	r10,r7[-4]
8000410a:	a5 78       	lsl	r8,0x5
8000410c:	f4 08 00 08 	add	r8,r10,r8
80004110:	f0 c8 fd f8 	sub	r8,r8,-520
80004114:	91 09       	st.w	r8[0x0],r9

  return PWM_SUCCESS;
80004116:	30 08       	mov	r8,0
}
80004118:	10 9c       	mov	r12,r8
8000411a:	2f dd       	sub	sp,-12
8000411c:	e3 cd 80 80 	ldm	sp++,r7,pc

80004120 <pwm_start_channels>:


int pwm_start_channels(unsigned long channels_bitmask)
{
80004120:	eb cd 40 80 	pushm	r7,lr
80004124:	1a 97       	mov	r7,sp
80004126:	20 1d       	sub	sp,4
80004128:	ef 4c ff fc 	st.w	r7[-4],r12
  if (channels_bitmask & ~((1 << (AVR32_PWM_LINES_MSB + 1)) - 1))
8000412c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004130:	e0 18 ff 80 	andl	r8,0xff80
80004134:	c0 30       	breq	8000413a <pwm_start_channels+0x1a>
    return PWM_INVALID_INPUT;
80004136:	30 18       	mov	r8,1
80004138:	c0 78       	rjmp	80004146 <pwm_start_channels+0x26>

  AVR32_PWM.ena = channels_bitmask; // Enable channels.
8000413a:	fe 78 30 00 	mov	r8,-53248
8000413e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80004142:	91 19       	st.w	r8[0x4],r9

  return PWM_SUCCESS;
80004144:	30 08       	mov	r8,0
}
80004146:	10 9c       	mov	r12,r8
80004148:	2f fd       	sub	sp,-4
8000414a:	e3 cd 80 80 	ldm	sp++,r7,pc

8000414e <cpu_irq_is_enabled_flags>:

	return flags;
}

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
8000414e:	eb cd 40 80 	pushm	r7,lr
80004152:	1a 97       	mov	r7,sp
80004154:	20 1d       	sub	sp,4
80004156:	ef 4c ff fc 	st.w	r7[-4],r12
	return !(flags & AVR32_SR_GM_MASK);
8000415a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000415e:	e6 18 00 01 	andh	r8,0x1,COH
80004162:	5f 08       	sreq	r8
80004164:	5c 58       	castu.b	r8
}
80004166:	10 9c       	mov	r12,r8
80004168:	2f fd       	sub	sp,-4
8000416a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000416e:	d7 03       	nop

80004170 <tc_configure_interrupts>:
  return tc->channel[channel].imr;
}


int tc_configure_interrupts(volatile avr32_tc_t *tc, unsigned int channel, const tc_interrupt_t *bitfield)
{
80004170:	eb cd 40 80 	pushm	r7,lr
80004174:	1a 97       	mov	r7,sp
80004176:	20 4d       	sub	sp,16
80004178:	ef 4c ff f8 	st.w	r7[-8],r12
8000417c:	ef 4b ff f4 	st.w	r7[-12],r11
80004180:	ef 4a ff f0 	st.w	r7[-16],r10
  bool global_interrupt_enabled = Is_global_interrupt_enabled();
80004184:	e1 b8 00 00 	mfsr	r8,0x0
80004188:	10 9c       	mov	r12,r8
8000418a:	f0 1f 00 73 	mcall	80004354 <tc_configure_interrupts+0x1e4>
8000418e:	18 98       	mov	r8,r12
80004190:	ef 68 ff ff 	st.b	r7[-1],r8

  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
80004194:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004198:	58 28       	cp.w	r8,2
8000419a:	e0 88 00 04 	brls	800041a2 <tc_configure_interrupts+0x32>
    return TC_INVALID_ARGUMENT;
8000419e:	3f f8       	mov	r8,-1
800041a0:	cd 68       	rjmp	8000434c <tc_configure_interrupts+0x1dc>

  // Enable the appropriate interrupts.
  tc->channel[channel].ier = bitfield->etrgs << AVR32_TC_ETRGS_OFFSET |
800041a2:	ee fb ff f4 	ld.w	r11,r7[-12]
800041a6:	ee f8 ff f0 	ld.w	r8,r7[-16]
800041aa:	70 08       	ld.w	r8,r8[0x0]
800041ac:	f1 d8 c0 e1 	bfextu	r8,r8,0x7,0x1
800041b0:	5c 58       	castu.b	r8
800041b2:	f0 09 15 07 	lsl	r9,r8,0x7
                             bitfield->ldrbs << AVR32_TC_LDRBS_OFFSET |
800041b6:	ee f8 ff f0 	ld.w	r8,r7[-16]
800041ba:	70 08       	ld.w	r8,r8[0x0]
800041bc:	f1 d8 c0 c1 	bfextu	r8,r8,0x6,0x1
800041c0:	5c 58       	castu.b	r8
800041c2:	a7 68       	lsl	r8,0x6
800041c4:	10 49       	or	r9,r8
                             bitfield->ldras << AVR32_TC_LDRAS_OFFSET |
800041c6:	ee f8 ff f0 	ld.w	r8,r7[-16]
800041ca:	70 08       	ld.w	r8,r8[0x0]
800041cc:	f1 d8 c0 a1 	bfextu	r8,r8,0x5,0x1
800041d0:	5c 58       	castu.b	r8
800041d2:	a5 78       	lsl	r8,0x5
800041d4:	10 49       	or	r9,r8
                             bitfield->cpcs << AVR32_TC_CPCS_OFFSET |
800041d6:	ee f8 ff f0 	ld.w	r8,r7[-16]
800041da:	70 08       	ld.w	r8,r8[0x0]
800041dc:	f1 d8 c0 81 	bfextu	r8,r8,0x4,0x1
800041e0:	5c 58       	castu.b	r8
800041e2:	a5 68       	lsl	r8,0x4
800041e4:	10 49       	or	r9,r8
                             bitfield->cpbs << AVR32_TC_CPBS_OFFSET |
800041e6:	ee f8 ff f0 	ld.w	r8,r7[-16]
800041ea:	70 08       	ld.w	r8,r8[0x0]
800041ec:	f1 d8 c0 61 	bfextu	r8,r8,0x3,0x1
800041f0:	5c 58       	castu.b	r8
800041f2:	a3 78       	lsl	r8,0x3
800041f4:	10 49       	or	r9,r8
                             bitfield->cpas << AVR32_TC_CPAS_OFFSET |
800041f6:	ee f8 ff f0 	ld.w	r8,r7[-16]
800041fa:	70 08       	ld.w	r8,r8[0x0]
800041fc:	f1 d8 c0 41 	bfextu	r8,r8,0x2,0x1
80004200:	5c 58       	castu.b	r8
80004202:	a3 68       	lsl	r8,0x2
80004204:	10 49       	or	r9,r8
                             bitfield->lovrs << AVR32_TC_LOVRS_OFFSET |
80004206:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000420a:	70 08       	ld.w	r8,r8[0x0]
8000420c:	f1 d8 c0 21 	bfextu	r8,r8,0x1,0x1
80004210:	5c 58       	castu.b	r8
80004212:	a1 78       	lsl	r8,0x1
80004214:	10 49       	or	r9,r8
                             bitfield->covfs << AVR32_TC_COVFS_OFFSET;
80004216:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000421a:	70 08       	ld.w	r8,r8[0x0]
8000421c:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80004220:	5c 58       	castu.b	r8
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
    return TC_INVALID_ARGUMENT;

  // Enable the appropriate interrupts.
  tc->channel[channel].ier = bitfield->etrgs << AVR32_TC_ETRGS_OFFSET |
80004222:	f3 e8 10 08 	or	r8,r9,r8
80004226:	10 99       	mov	r9,r8
80004228:	ee fa ff f8 	ld.w	r10,r7[-8]
8000422c:	f6 08 15 06 	lsl	r8,r11,0x6
80004230:	f4 08 00 08 	add	r8,r10,r8
80004234:	2d c8       	sub	r8,-36
80004236:	91 09       	st.w	r8[0x0],r9
                             bitfield->cpas << AVR32_TC_CPAS_OFFSET |
                             bitfield->lovrs << AVR32_TC_LOVRS_OFFSET |
                             bitfield->covfs << AVR32_TC_COVFS_OFFSET;

  // Disable the appropriate interrupts.
  if (global_interrupt_enabled) Disable_global_interrupt();
80004238:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000423c:	30 08       	mov	r8,0
8000423e:	f0 09 18 00 	cp.b	r9,r8
80004242:	c0 20       	breq	80004246 <tc_configure_interrupts+0xd6>
80004244:	d3 03       	ssrf	0x10
  tc->channel[channel].idr = (~bitfield->etrgs & 1) << AVR32_TC_ETRGS_OFFSET |
80004246:	ee fb ff f4 	ld.w	r11,r7[-12]
8000424a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000424e:	70 08       	ld.w	r8,r8[0x0]
80004250:	f1 d8 c0 e1 	bfextu	r8,r8,0x7,0x1
80004254:	5c 58       	castu.b	r8
80004256:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000425a:	c0 41       	brne	80004262 <tc_configure_interrupts+0xf2>
8000425c:	e0 69 00 80 	mov	r9,128
80004260:	c0 28       	rjmp	80004264 <tc_configure_interrupts+0xf4>
80004262:	30 09       	mov	r9,0
                             (~bitfield->ldrbs & 1) << AVR32_TC_LDRBS_OFFSET |
80004264:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004268:	70 08       	ld.w	r8,r8[0x0]
8000426a:	f1 d8 c0 c1 	bfextu	r8,r8,0x6,0x1
8000426e:	5c 58       	castu.b	r8
80004270:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80004274:	c0 31       	brne	8000427a <tc_configure_interrupts+0x10a>
80004276:	34 08       	mov	r8,64
80004278:	c0 28       	rjmp	8000427c <tc_configure_interrupts+0x10c>
8000427a:	30 08       	mov	r8,0
8000427c:	10 49       	or	r9,r8
                             (~bitfield->ldras & 1) << AVR32_TC_LDRAS_OFFSET |
8000427e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004282:	70 08       	ld.w	r8,r8[0x0]
80004284:	f1 d8 c0 a1 	bfextu	r8,r8,0x5,0x1
80004288:	5c 58       	castu.b	r8
8000428a:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000428e:	c0 31       	brne	80004294 <tc_configure_interrupts+0x124>
80004290:	32 08       	mov	r8,32
80004292:	c0 28       	rjmp	80004296 <tc_configure_interrupts+0x126>
80004294:	30 08       	mov	r8,0
80004296:	10 49       	or	r9,r8
                             (~bitfield->cpcs & 1) << AVR32_TC_CPCS_OFFSET |
80004298:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000429c:	70 08       	ld.w	r8,r8[0x0]
8000429e:	f1 d8 c0 81 	bfextu	r8,r8,0x4,0x1
800042a2:	5c 58       	castu.b	r8
800042a4:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800042a8:	c0 31       	brne	800042ae <tc_configure_interrupts+0x13e>
800042aa:	31 08       	mov	r8,16
800042ac:	c0 28       	rjmp	800042b0 <tc_configure_interrupts+0x140>
800042ae:	30 08       	mov	r8,0
800042b0:	10 49       	or	r9,r8
                             (~bitfield->cpbs & 1) << AVR32_TC_CPBS_OFFSET |
800042b2:	ee f8 ff f0 	ld.w	r8,r7[-16]
800042b6:	70 08       	ld.w	r8,r8[0x0]
800042b8:	f1 d8 c0 61 	bfextu	r8,r8,0x3,0x1
800042bc:	5c 58       	castu.b	r8
800042be:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800042c2:	c0 31       	brne	800042c8 <tc_configure_interrupts+0x158>
800042c4:	30 88       	mov	r8,8
800042c6:	c0 28       	rjmp	800042ca <tc_configure_interrupts+0x15a>
800042c8:	30 08       	mov	r8,0
800042ca:	10 49       	or	r9,r8
                             (~bitfield->cpas & 1) << AVR32_TC_CPAS_OFFSET |
800042cc:	ee f8 ff f0 	ld.w	r8,r7[-16]
800042d0:	70 08       	ld.w	r8,r8[0x0]
800042d2:	f1 d8 c0 41 	bfextu	r8,r8,0x2,0x1
800042d6:	5c 58       	castu.b	r8
800042d8:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800042dc:	c0 31       	brne	800042e2 <tc_configure_interrupts+0x172>
800042de:	30 48       	mov	r8,4
800042e0:	c0 28       	rjmp	800042e4 <tc_configure_interrupts+0x174>
800042e2:	30 08       	mov	r8,0
800042e4:	10 49       	or	r9,r8
                             (~bitfield->lovrs & 1) << AVR32_TC_LOVRS_OFFSET |
800042e6:	ee f8 ff f0 	ld.w	r8,r7[-16]
800042ea:	70 08       	ld.w	r8,r8[0x0]
800042ec:	f1 d8 c0 21 	bfextu	r8,r8,0x1,0x1
800042f0:	5c 58       	castu.b	r8
800042f2:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800042f6:	c0 31       	brne	800042fc <tc_configure_interrupts+0x18c>
800042f8:	30 28       	mov	r8,2
800042fa:	c0 28       	rjmp	800042fe <tc_configure_interrupts+0x18e>
800042fc:	30 08       	mov	r8,0
800042fe:	10 49       	or	r9,r8
                             (~bitfield->covfs & 1) << AVR32_TC_COVFS_OFFSET;
80004300:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004304:	70 08       	ld.w	r8,r8[0x0]
80004306:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000430a:	5c 58       	castu.b	r8
8000430c:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80004310:	5f 08       	sreq	r8
                             bitfield->lovrs << AVR32_TC_LOVRS_OFFSET |
                             bitfield->covfs << AVR32_TC_COVFS_OFFSET;

  // Disable the appropriate interrupts.
  if (global_interrupt_enabled) Disable_global_interrupt();
  tc->channel[channel].idr = (~bitfield->etrgs & 1) << AVR32_TC_ETRGS_OFFSET |
80004312:	f3 e8 10 08 	or	r8,r9,r8
80004316:	10 99       	mov	r9,r8
80004318:	ee fa ff f8 	ld.w	r10,r7[-8]
8000431c:	f6 08 15 06 	lsl	r8,r11,0x6
80004320:	f4 08 00 08 	add	r8,r10,r8
80004324:	2d 88       	sub	r8,-40
80004326:	91 09       	st.w	r8[0x0],r9
                             (~bitfield->cpcs & 1) << AVR32_TC_CPCS_OFFSET |
                             (~bitfield->cpbs & 1) << AVR32_TC_CPBS_OFFSET |
                             (~bitfield->cpas & 1) << AVR32_TC_CPAS_OFFSET |
                             (~bitfield->lovrs & 1) << AVR32_TC_LOVRS_OFFSET |
                             (~bitfield->covfs & 1) << AVR32_TC_COVFS_OFFSET;
  tc->channel[channel].sr;
80004328:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000432c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80004330:	a1 78       	lsl	r8,0x1
80004332:	2f f8       	sub	r8,-1
80004334:	a5 78       	lsl	r8,0x5
80004336:	f2 08 00 08 	add	r8,r9,r8
8000433a:	70 08       	ld.w	r8,r8[0x0]
  if (global_interrupt_enabled) Enable_global_interrupt();
8000433c:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80004340:	30 08       	mov	r8,0
80004342:	f0 09 18 00 	cp.b	r9,r8
80004346:	c0 20       	breq	8000434a <tc_configure_interrupts+0x1da>
80004348:	d5 03       	csrf	0x10

  return 0;
8000434a:	30 08       	mov	r8,0
}
8000434c:	10 9c       	mov	r12,r8
8000434e:	2f cd       	sub	sp,-16
80004350:	e3 cd 80 80 	ldm	sp++,r7,pc
80004354:	80 00       	ld.sh	r0,r0[0x0]
80004356:	41 4e       	lddsp	lr,sp[0x50]

80004358 <tc_init_waveform>:
  return 0;
}


int tc_init_waveform(volatile avr32_tc_t *tc, const tc_waveform_opt_t *opt)
{
80004358:	eb cd 40 80 	pushm	r7,lr
8000435c:	1a 97       	mov	r7,sp
8000435e:	20 2d       	sub	sp,8
80004360:	ef 4c ff fc 	st.w	r7[-4],r12
80004364:	ef 4b ff f8 	st.w	r7[-8],r11
  // Check for valid input.
  if (opt->channel >= TC_NUMBER_OF_CHANNELS)
80004368:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000436c:	70 08       	ld.w	r8,r8[0x0]
8000436e:	58 28       	cp.w	r8,2
80004370:	e0 88 00 04 	brls	80004378 <tc_init_waveform+0x20>
    return TC_INVALID_ARGUMENT;
80004374:	3f f8       	mov	r8,-1
80004376:	c9 78       	rjmp	800044a4 <tc_init_waveform+0x14c>

  // GENERATE SIGNALS: Waveform operating mode.
  tc->channel[opt->channel].cmr = opt->bswtrg << AVR32_TC_BSWTRG_OFFSET |
80004378:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000437c:	70 09       	ld.w	r9,r8[0x0]
8000437e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004382:	70 18       	ld.w	r8,r8[0x4]
80004384:	f1 d8 c3 c2 	bfextu	r8,r8,0x1e,0x2
80004388:	5c 58       	castu.b	r8
8000438a:	f0 0a 15 1e 	lsl	r10,r8,0x1e
                                  opt->beevt << AVR32_TC_BEEVT_OFFSET |
8000438e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004392:	70 18       	ld.w	r8,r8[0x4]
80004394:	f1 d8 c3 82 	bfextu	r8,r8,0x1c,0x2
80004398:	5c 58       	castu.b	r8
8000439a:	bd 68       	lsl	r8,0x1c
8000439c:	10 4a       	or	r10,r8
                                  opt->bcpc << AVR32_TC_BCPC_OFFSET |
8000439e:	ee f8 ff f8 	ld.w	r8,r7[-8]
800043a2:	70 18       	ld.w	r8,r8[0x4]
800043a4:	f1 d8 c3 42 	bfextu	r8,r8,0x1a,0x2
800043a8:	5c 58       	castu.b	r8
800043aa:	bb 68       	lsl	r8,0x1a
800043ac:	10 4a       	or	r10,r8
                                  opt->bcpb << AVR32_TC_BCPB_OFFSET |
800043ae:	ee f8 ff f8 	ld.w	r8,r7[-8]
800043b2:	70 18       	ld.w	r8,r8[0x4]
800043b4:	f1 d8 c3 02 	bfextu	r8,r8,0x18,0x2
800043b8:	5c 58       	castu.b	r8
800043ba:	b9 68       	lsl	r8,0x18
800043bc:	10 4a       	or	r10,r8
                                  opt->aswtrg << AVR32_TC_ASWTRG_OFFSET |
800043be:	ee f8 ff f8 	ld.w	r8,r7[-8]
800043c2:	70 18       	ld.w	r8,r8[0x4]
800043c4:	f1 d8 c2 c2 	bfextu	r8,r8,0x16,0x2
800043c8:	5c 58       	castu.b	r8
800043ca:	b7 68       	lsl	r8,0x16
800043cc:	10 4a       	or	r10,r8
                                  opt->aeevt << AVR32_TC_AEEVT_OFFSET |
800043ce:	ee f8 ff f8 	ld.w	r8,r7[-8]
800043d2:	70 18       	ld.w	r8,r8[0x4]
800043d4:	f1 d8 c2 82 	bfextu	r8,r8,0x14,0x2
800043d8:	5c 58       	castu.b	r8
800043da:	b5 68       	lsl	r8,0x14
800043dc:	10 4a       	or	r10,r8
                                  opt->acpc << AVR32_TC_ACPC_OFFSET |
800043de:	ee f8 ff f8 	ld.w	r8,r7[-8]
800043e2:	70 18       	ld.w	r8,r8[0x4]
800043e4:	f1 d8 c2 42 	bfextu	r8,r8,0x12,0x2
800043e8:	5c 58       	castu.b	r8
800043ea:	b3 68       	lsl	r8,0x12
800043ec:	10 4a       	or	r10,r8
                                  opt->acpa << AVR32_TC_ACPA_OFFSET |
800043ee:	ee f8 ff f8 	ld.w	r8,r7[-8]
800043f2:	70 18       	ld.w	r8,r8[0x4]
800043f4:	f1 d8 c2 02 	bfextu	r8,r8,0x10,0x2
800043f8:	5c 58       	castu.b	r8
800043fa:	b1 68       	lsl	r8,0x10
800043fc:	f5 e8 10 08 	or	r8,r10,r8
                                  1 << AVR32_TC_WAVE_OFFSET |
80004400:	10 9a       	mov	r10,r8
80004402:	af ba       	sbr	r10,0xf
                                  opt->wavsel << AVR32_TC_WAVSEL_OFFSET |
80004404:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004408:	70 18       	ld.w	r8,r8[0x4]
8000440a:	f1 d8 c1 a2 	bfextu	r8,r8,0xd,0x2
8000440e:	5c 58       	castu.b	r8
80004410:	ad 78       	lsl	r8,0xd
80004412:	10 4a       	or	r10,r8
                                  opt->enetrg << AVR32_TC_ENETRG_OFFSET |
80004414:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004418:	70 18       	ld.w	r8,r8[0x4]
8000441a:	f1 d8 c1 81 	bfextu	r8,r8,0xc,0x1
8000441e:	5c 58       	castu.b	r8
80004420:	ad 68       	lsl	r8,0xc
80004422:	10 4a       	or	r10,r8
                                  opt->eevt << AVR32_TC_EEVT_OFFSET |
80004424:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004428:	70 18       	ld.w	r8,r8[0x4]
8000442a:	f1 d8 c1 42 	bfextu	r8,r8,0xa,0x2
8000442e:	5c 58       	castu.b	r8
80004430:	ab 68       	lsl	r8,0xa
80004432:	10 4a       	or	r10,r8
                                  opt->eevtedg << AVR32_TC_EEVTEDG_OFFSET |
80004434:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004438:	70 18       	ld.w	r8,r8[0x4]
8000443a:	f1 d8 c1 02 	bfextu	r8,r8,0x8,0x2
8000443e:	5c 58       	castu.b	r8
80004440:	a9 68       	lsl	r8,0x8
80004442:	10 4a       	or	r10,r8
                                  opt->cpcdis << AVR32_TC_CPCDIS_OFFSET |
80004444:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004448:	70 18       	ld.w	r8,r8[0x4]
8000444a:	f1 d8 c0 e1 	bfextu	r8,r8,0x7,0x1
8000444e:	5c 58       	castu.b	r8
80004450:	a7 78       	lsl	r8,0x7
80004452:	10 4a       	or	r10,r8
                                  opt->cpcstop << AVR32_TC_CPCSTOP_OFFSET |
80004454:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004458:	70 18       	ld.w	r8,r8[0x4]
8000445a:	f1 d8 c0 c1 	bfextu	r8,r8,0x6,0x1
8000445e:	5c 58       	castu.b	r8
80004460:	a7 68       	lsl	r8,0x6
80004462:	10 4a       	or	r10,r8
                                  opt->burst << AVR32_TC_BURST_OFFSET |
80004464:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004468:	70 18       	ld.w	r8,r8[0x4]
8000446a:	f1 d8 c0 82 	bfextu	r8,r8,0x4,0x2
8000446e:	5c 58       	castu.b	r8
80004470:	a5 68       	lsl	r8,0x4
80004472:	10 4a       	or	r10,r8
                                  opt->clki << AVR32_TC_CLKI_OFFSET |
80004474:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004478:	70 18       	ld.w	r8,r8[0x4]
8000447a:	f1 d8 c0 61 	bfextu	r8,r8,0x3,0x1
8000447e:	5c 58       	castu.b	r8
80004480:	a3 78       	lsl	r8,0x3
80004482:	10 4a       	or	r10,r8
                                  opt->tcclks << AVR32_TC_TCCLKS_OFFSET;
80004484:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004488:	70 18       	ld.w	r8,r8[0x4]
8000448a:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
8000448e:	5c 58       	castu.b	r8
  // Check for valid input.
  if (opt->channel >= TC_NUMBER_OF_CHANNELS)
    return TC_INVALID_ARGUMENT;

  // GENERATE SIGNALS: Waveform operating mode.
  tc->channel[opt->channel].cmr = opt->bswtrg << AVR32_TC_BSWTRG_OFFSET |
80004490:	f5 e8 10 08 	or	r8,r10,r8
80004494:	10 9a       	mov	r10,r8
80004496:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000449a:	a5 69       	lsl	r9,0x4
8000449c:	2f f9       	sub	r9,-1
8000449e:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
                                  opt->cpcstop << AVR32_TC_CPCSTOP_OFFSET |
                                  opt->burst << AVR32_TC_BURST_OFFSET |
                                  opt->clki << AVR32_TC_CLKI_OFFSET |
                                  opt->tcclks << AVR32_TC_TCCLKS_OFFSET;

  return 0;
800044a2:	30 08       	mov	r8,0
}
800044a4:	10 9c       	mov	r12,r8
800044a6:	2f ed       	sub	sp,-8
800044a8:	e3 cd 80 80 	ldm	sp++,r7,pc

800044ac <tc_start>:


int tc_start(volatile avr32_tc_t *tc, unsigned int channel)
{
800044ac:	eb cd 40 80 	pushm	r7,lr
800044b0:	1a 97       	mov	r7,sp
800044b2:	20 2d       	sub	sp,8
800044b4:	ef 4c ff fc 	st.w	r7[-4],r12
800044b8:	ef 4b ff f8 	st.w	r7[-8],r11
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
800044bc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800044c0:	58 28       	cp.w	r8,2
800044c2:	e0 88 00 04 	brls	800044ca <tc_start+0x1e>
    return TC_INVALID_ARGUMENT;
800044c6:	3f f8       	mov	r8,-1
800044c8:	c0 b8       	rjmp	800044de <tc_start+0x32>

  // Enable, reset and start the selected timer/counter channel.
  tc->channel[channel].ccr = AVR32_TC_SWTRG_MASK | AVR32_TC_CLKEN_MASK;
800044ca:	ee f8 ff f8 	ld.w	r8,r7[-8]
800044ce:	ee f9 ff fc 	ld.w	r9,r7[-4]
800044d2:	a7 68       	lsl	r8,0x6
800044d4:	f2 08 00 08 	add	r8,r9,r8
800044d8:	30 59       	mov	r9,5
800044da:	91 09       	st.w	r8[0x0],r9

  return 0;
800044dc:	30 08       	mov	r8,0
}
800044de:	10 9c       	mov	r12,r8
800044e0:	2f ed       	sub	sp,-8
800044e2:	e3 cd 80 80 	ldm	sp++,r7,pc

800044e6 <tc_read_sr>:
  tc->bcr = AVR32_TC_BCR_SYNC_MASK;
}


int tc_read_sr(volatile avr32_tc_t *tc, unsigned int channel)
{
800044e6:	eb cd 40 80 	pushm	r7,lr
800044ea:	1a 97       	mov	r7,sp
800044ec:	20 2d       	sub	sp,8
800044ee:	ef 4c ff fc 	st.w	r7[-4],r12
800044f2:	ef 4b ff f8 	st.w	r7[-8],r11
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
800044f6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800044fa:	58 28       	cp.w	r8,2
800044fc:	e0 88 00 04 	brls	80004504 <tc_read_sr+0x1e>
    return TC_INVALID_ARGUMENT;
80004500:	3f f8       	mov	r8,-1
80004502:	c0 b8       	rjmp	80004518 <tc_read_sr+0x32>

  return tc->channel[channel].sr;
80004504:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004508:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000450c:	a1 78       	lsl	r8,0x1
8000450e:	2f f8       	sub	r8,-1
80004510:	a5 78       	lsl	r8,0x5
80004512:	f2 08 00 08 	add	r8,r9,r8
80004516:	70 08       	ld.w	r8,r8[0x0]
}
80004518:	10 9c       	mov	r12,r8
8000451a:	2f ed       	sub	sp,-8
8000451c:	e3 cd 80 80 	ldm	sp++,r7,pc

80004520 <tc_write_rc>:
  return value;
}


int tc_write_rc(volatile avr32_tc_t *tc, unsigned int channel, unsigned short value)
{
80004520:	eb cd 40 80 	pushm	r7,lr
80004524:	1a 97       	mov	r7,sp
80004526:	20 3d       	sub	sp,12
80004528:	ef 4c ff fc 	st.w	r7[-4],r12
8000452c:	ef 4b ff f8 	st.w	r7[-8],r11
80004530:	14 98       	mov	r8,r10
80004532:	ef 58 ff f4 	st.h	r7[-12],r8
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
80004536:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000453a:	58 28       	cp.w	r8,2
8000453c:	e0 88 00 04 	brls	80004544 <tc_write_rc+0x24>
    return TC_INVALID_ARGUMENT;
80004540:	3f f8       	mov	r8,-1
80004542:	c2 78       	rjmp	80004590 <tc_write_rc+0x70>

  // This function is only available in WAVEFORM mode.
  if (Tst_bits(tc->channel[channel].cmr, AVR32_TC_WAVE_MASK))
80004544:	ee f9 ff f8 	ld.w	r9,r7[-8]
80004548:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000454c:	a5 69       	lsl	r9,0x4
8000454e:	2f f9       	sub	r9,-1
80004550:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80004554:	e2 18 80 00 	andl	r8,0x8000,COH
80004558:	c1 a0       	breq	8000458c <tc_write_rc+0x6c>
    Wr_bitfield(tc->channel[channel].rc, AVR32_TC_RC_MASK, value);
8000455a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000455e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80004562:	ee fa ff fc 	ld.w	r10,r7[-4]
80004566:	a7 69       	lsl	r9,0x6
80004568:	f4 09 00 09 	add	r9,r10,r9
8000456c:	2e 49       	sub	r9,-28
8000456e:	72 09       	ld.w	r9,r9[0x0]
80004570:	12 9a       	mov	r10,r9
80004572:	e0 1a 00 00 	andl	r10,0x0
80004576:	ef 19 ff f4 	ld.uh	r9,r7[-12]
8000457a:	f5 e9 10 09 	or	r9,r10,r9
8000457e:	ee fa ff fc 	ld.w	r10,r7[-4]
80004582:	a7 68       	lsl	r8,0x6
80004584:	f4 08 00 08 	add	r8,r10,r8
80004588:	2e 48       	sub	r8,-28
8000458a:	91 09       	st.w	r8[0x0],r9

  return value;
8000458c:	ef 18 ff f4 	ld.uh	r8,r7[-12]
}
80004590:	10 9c       	mov	r12,r8
80004592:	2f dd       	sub	sp,-12
80004594:	e3 cd 80 80 	ldm	sp++,r7,pc

80004598 <cpu_irq_save>:
#endif

typedef uint32_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
80004598:	eb cd 40 80 	pushm	r7,lr
8000459c:	1a 97       	mov	r7,sp
8000459e:	20 1d       	sub	sp,4
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800045a0:	e1 b8 00 00 	mfsr	r8,0x0
800045a4:	ef 48 ff fc 	st.w	r7[-4],r8
	cpu_irq_disable();
800045a8:	d3 03       	ssrf	0x10

	return flags;
800045aa:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
800045ae:	10 9c       	mov	r12,r8
800045b0:	2f fd       	sub	sp,-4
800045b2:	e3 cd 80 80 	ldm	sp++,r7,pc

800045b6 <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
800045b6:	eb cd 40 80 	pushm	r7,lr
800045ba:	1a 97       	mov	r7,sp
800045bc:	20 1d       	sub	sp,4
800045be:	ef 4c ff fc 	st.w	r7[-4],r12
	return !(flags & AVR32_SR_GM_MASK);
800045c2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800045c6:	e6 18 00 01 	andh	r8,0x1,COH
800045ca:	5f 08       	sreq	r8
800045cc:	5c 58       	castu.b	r8
}
800045ce:	10 9c       	mov	r12,r8
800045d0:	2f fd       	sub	sp,-4
800045d2:	e3 cd 80 80 	ldm	sp++,r7,pc
800045d6:	d7 03       	nop

800045d8 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
800045d8:	eb cd 40 80 	pushm	r7,lr
800045dc:	1a 97       	mov	r7,sp
800045de:	20 1d       	sub	sp,4
800045e0:	ef 4c ff fc 	st.w	r7[-4],r12
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
800045e4:	ee fc ff fc 	ld.w	r12,r7[-4]
800045e8:	f0 1f 00 05 	mcall	800045fc <cpu_irq_restore+0x24>
800045ec:	18 98       	mov	r8,r12
800045ee:	58 08       	cp.w	r8,0
800045f0:	c0 20       	breq	800045f4 <cpu_irq_restore+0x1c>
      cpu_irq_enable();
800045f2:	d5 03       	csrf	0x10
   }

	barrier();
}
800045f4:	2f fd       	sub	sp,-4
800045f6:	e3 cd 80 80 	ldm	sp++,r7,pc
800045fa:	00 00       	add	r0,r0
800045fc:	80 00       	ld.sh	r0,r0[0x0]
800045fe:	45 b6       	lddsp	r6,sp[0x16c]

80004600 <sleepmgr_lock_mode>:
 * not put the device to sleep in the deeper sleep modes.
 *
 * \param mode Sleep mode to lock.
 */
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
80004600:	eb cd 40 80 	pushm	r7,lr
80004604:	1a 97       	mov	r7,sp
80004606:	20 2d       	sub	sp,8
80004608:	ef 4c ff f8 	st.w	r7[-8],r12
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
8000460c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004610:	48 f9       	lddpc	r9,8000464c <sleepmgr_lock_mode+0x4c>
80004612:	f2 08 07 09 	ld.ub	r9,r9[r8]
80004616:	3f f8       	mov	r8,-1
80004618:	f0 09 18 00 	cp.b	r9,r8
8000461c:	c0 21       	brne	80004620 <sleepmgr_lock_mode+0x20>
		while (true) {
			// Warning: maximum value of sleepmgr_locks buffer is no more than 255.
			// Check APP or change the data type to uint16_t.
		}
8000461e:	c0 08       	rjmp	8000461e <sleepmgr_lock_mode+0x1e>
	}

	// Enter a critical section
	flags = cpu_irq_save();
80004620:	f0 1f 00 0c 	mcall	80004650 <sleepmgr_lock_mode+0x50>
80004624:	18 98       	mov	r8,r12
80004626:	ef 48 ff fc 	st.w	r7[-4],r8

	++sleepmgr_locks[mode];
8000462a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000462e:	48 89       	lddpc	r9,8000464c <sleepmgr_lock_mode+0x4c>
80004630:	f2 08 07 09 	ld.ub	r9,r9[r8]
80004634:	2f f9       	sub	r9,-1
80004636:	5c 59       	castu.b	r9
80004638:	48 5a       	lddpc	r10,8000464c <sleepmgr_lock_mode+0x4c>
8000463a:	f4 08 0b 09 	st.b	r10[r8],r9

	// Leave the critical section
	cpu_irq_restore(flags);
8000463e:	ee fc ff fc 	ld.w	r12,r7[-4]
80004642:	f0 1f 00 05 	mcall	80004654 <sleepmgr_lock_mode+0x54>
#else
	UNUSED(mode);
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
80004646:	2f ed       	sub	sp,-8
80004648:	e3 cd 80 80 	ldm	sp++,r7,pc
8000464c:	00 00       	add	r0,r0
8000464e:	0b 38       	ld.ub	r8,r5++
80004650:	80 00       	ld.sh	r0,r0[0x0]
80004652:	45 98       	lddsp	r8,sp[0x164]
80004654:	80 00       	ld.sh	r0,r0[0x0]
80004656:	45 d8       	lddsp	r8,sp[0x174]

80004658 <sleepmgr_unlock_mode>:
 * manager can put the device to sleep in the deeper sleep modes.
 *
 * \param mode Sleep mode to unlock.
 */
static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
{
80004658:	eb cd 40 80 	pushm	r7,lr
8000465c:	1a 97       	mov	r7,sp
8000465e:	20 2d       	sub	sp,8
80004660:	ef 4c ff f8 	st.w	r7[-8],r12
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] == 0) {
80004664:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004668:	48 e9       	lddpc	r9,800046a0 <sleepmgr_unlock_mode+0x48>
8000466a:	f2 08 07 08 	ld.ub	r8,r9[r8]
8000466e:	58 08       	cp.w	r8,0
80004670:	c0 21       	brne	80004674 <sleepmgr_unlock_mode+0x1c>
		while (true) {
			// Warning: minimum value of sleepmgr_locks buffer is no less than 0.
			// Check APP.
		}
80004672:	c0 08       	rjmp	80004672 <sleepmgr_unlock_mode+0x1a>
	}

	// Enter a critical section
	flags = cpu_irq_save();
80004674:	f0 1f 00 0c 	mcall	800046a4 <sleepmgr_unlock_mode+0x4c>
80004678:	18 98       	mov	r8,r12
8000467a:	ef 48 ff fc 	st.w	r7[-4],r8

	--sleepmgr_locks[mode];
8000467e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004682:	48 89       	lddpc	r9,800046a0 <sleepmgr_unlock_mode+0x48>
80004684:	f2 08 07 09 	ld.ub	r9,r9[r8]
80004688:	20 19       	sub	r9,1
8000468a:	5c 59       	castu.b	r9
8000468c:	48 5a       	lddpc	r10,800046a0 <sleepmgr_unlock_mode+0x48>
8000468e:	f4 08 0b 09 	st.b	r10[r8],r9

	// Leave the critical section
	cpu_irq_restore(flags);
80004692:	ee fc ff fc 	ld.w	r12,r7[-4]
80004696:	f0 1f 00 05 	mcall	800046a8 <sleepmgr_unlock_mode+0x50>
#else
	UNUSED(mode);
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
8000469a:	2f ed       	sub	sp,-8
8000469c:	e3 cd 80 80 	ldm	sp++,r7,pc
800046a0:	00 00       	add	r0,r0
800046a2:	0b 38       	ld.ub	r8,r5++
800046a4:	80 00       	ld.sh	r0,r0[0x0]
800046a6:	45 98       	lddsp	r8,sp[0x164]
800046a8:	80 00       	ld.sh	r0,r0[0x0]
800046aa:	45 d8       	lddsp	r8,sp[0x174]

800046ac <udd_sleep_mode>:
/*! \brief Authorize or not the CPU powerdown mode
 *
 * \param b_enable   true to authorize powerdown mode
 */
static void udd_sleep_mode(bool b_idle)
{
800046ac:	eb cd 40 80 	pushm	r7,lr
800046b0:	1a 97       	mov	r7,sp
800046b2:	20 1d       	sub	sp,4
800046b4:	18 98       	mov	r8,r12
800046b6:	ef 68 ff fc 	st.b	r7[-4],r8
	if (!b_idle && udd_b_idle) {
800046ba:	ef 38 ff fc 	ld.ub	r8,r7[-4]
800046be:	ec 18 00 01 	eorl	r8,0x1
800046c2:	5c 58       	castu.b	r8
800046c4:	c0 80       	breq	800046d4 <udd_sleep_mode+0x28>
800046c6:	48 f8       	lddpc	r8,80004700 <udd_sleep_mode+0x54>
800046c8:	11 88       	ld.ub	r8,r8[0x0]
800046ca:	58 08       	cp.w	r8,0
800046cc:	c0 40       	breq	800046d4 <udd_sleep_mode+0x28>
		sleepmgr_unlock_mode(USBB_SLEEP_MODE_USB_IDLE);
800046ce:	30 1c       	mov	r12,1
800046d0:	f0 1f 00 0d 	mcall	80004704 <udd_sleep_mode+0x58>
	}
	if (b_idle && !udd_b_idle) {
800046d4:	ef 39 ff fc 	ld.ub	r9,r7[-4]
800046d8:	30 08       	mov	r8,0
800046da:	f0 09 18 00 	cp.b	r9,r8
800046de:	c0 a0       	breq	800046f2 <udd_sleep_mode+0x46>
800046e0:	48 88       	lddpc	r8,80004700 <udd_sleep_mode+0x54>
800046e2:	11 88       	ld.ub	r8,r8[0x0]
800046e4:	ec 18 00 01 	eorl	r8,0x1
800046e8:	5c 58       	castu.b	r8
800046ea:	c0 40       	breq	800046f2 <udd_sleep_mode+0x46>
		sleepmgr_lock_mode(USBB_SLEEP_MODE_USB_IDLE);
800046ec:	30 1c       	mov	r12,1
800046ee:	f0 1f 00 07 	mcall	80004708 <udd_sleep_mode+0x5c>
	}
	udd_b_idle = b_idle;
800046f2:	48 49       	lddpc	r9,80004700 <udd_sleep_mode+0x54>
800046f4:	ef 38 ff fc 	ld.ub	r8,r7[-4]
800046f8:	b2 88       	st.b	r9[0x0],r8
}
800046fa:	2f fd       	sub	sp,-4
800046fc:	e3 cd 80 80 	ldm	sp++,r7,pc
80004700:	00 00       	add	r0,r0
80004702:	06 25       	rsub	r5,r3
80004704:	80 00       	ld.sh	r0,r0[0x0]
80004706:	46 58       	lddsp	r8,sp[0x194]
80004708:	80 00       	ld.sh	r0,r0[0x0]
8000470a:	46 00       	lddsp	r0,sp[0x180]

8000470c <udd_interrupt>:
ISR_FREERTOS(udd_interrupt, AVR32_USBB_IRQ_GROUP, UDD_USB_INT_LEVEL)
#  else
ISR(udd_interrupt, AVR32_USBB_IRQ_GROUP, UDD_USB_INT_LEVEL)
#  endif
#endif
{
8000470c:	eb cd 40 80 	pushm	r7,lr
80004710:	1a 97       	mov	r7,sp
	if (Is_udd_sof()) {
80004712:	fe 68 00 04 	mov	r8,-131068
80004716:	70 08       	ld.w	r8,r8[0x0]
80004718:	e2 18 00 04 	andl	r8,0x4,COH
8000471c:	c1 00       	breq	8000473c <udd_interrupt+0x30>
		udd_ack_sof();
8000471e:	fe 68 00 08 	mov	r8,-131064
80004722:	30 49       	mov	r9,4
80004724:	91 09       	st.w	r8[0x0],r9
		if (Is_udd_full_speed_mode()) {
80004726:	fe 68 08 04 	mov	r8,-129020
8000472a:	70 08       	ld.w	r8,r8[0x0]
8000472c:	e2 18 30 00 	andl	r8,0x3000,COH
80004730:	ad 88       	lsr	r8,0xc
80004732:	e0 81 00 a2 	brne	80004876 <udd_interrupt+0x16a>
			udc_sof_notify();
80004736:	f0 1f 00 57 	mcall	80004890 <udd_interrupt+0x184>
		}
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
#endif
		goto udd_interrupt_end;
8000473a:	ca 38       	rjmp	80004880 <udd_interrupt+0x174>
	}
	if (Is_udd_msof()) {
8000473c:	fe 68 00 04 	mov	r8,-131068
80004740:	70 08       	ld.w	r8,r8[0x0]
80004742:	e2 18 00 02 	andl	r8,0x2,COH
80004746:	c0 80       	breq	80004756 <udd_interrupt+0x4a>
		udd_ack_msof();
80004748:	fe 68 00 08 	mov	r8,-131064
8000474c:	30 29       	mov	r9,2
8000474e:	91 09       	st.w	r8[0x0],r9
		udc_sof_notify();
80004750:	f0 1f 00 50 	mcall	80004890 <udd_interrupt+0x184>
		goto udd_interrupt_end;
80004754:	c9 68       	rjmp	80004880 <udd_interrupt+0x174>
	}

	if (udd_ctrl_interrupt())
80004756:	f0 1f 00 50 	mcall	80004894 <udd_interrupt+0x188>
8000475a:	18 98       	mov	r8,r12
8000475c:	58 08       	cp.w	r8,0
8000475e:	e0 81 00 8e 	brne	8000487a <udd_interrupt+0x16e>
		goto udd_interrupt_end; // Interrupt acked by control endpoint managed

#if (0 != USB_DEVICE_MAX_EP)
	if (udd_ep_interrupt())
80004762:	f0 1f 00 4e 	mcall	80004898 <udd_interrupt+0x18c>
80004766:	18 98       	mov	r8,r12
80004768:	58 08       	cp.w	r8,0
8000476a:	e0 81 00 8a 	brne	8000487e <udd_interrupt+0x172>
		goto udd_interrupt_end; // Interrupt acked by bulk/interrupt/isochronous endpoint managed
#endif

	// USB bus reset detection
	if (Is_udd_reset()) {
8000476e:	fe 68 00 04 	mov	r8,-131068
80004772:	70 08       	ld.w	r8,r8[0x0]
80004774:	e2 18 00 08 	andl	r8,0x8,COH
80004778:	c0 e0       	breq	80004794 <udd_interrupt+0x88>
		udd_ack_reset();
8000477a:	fe 68 00 08 	mov	r8,-131064
8000477e:	30 89       	mov	r9,8
80004780:	91 09       	st.w	r8[0x0],r9
		// Abort all jobs on-going
#if (USB_DEVICE_MAX_EP != 0)
		udd_ep_job_table_kill();
80004782:	f0 1f 00 47 	mcall	8000489c <udd_interrupt+0x190>
#endif
		// Reset USB Device Stack Core
		udc_reset();
80004786:	f0 1f 00 47 	mcall	800048a0 <udd_interrupt+0x194>
		// Reset endpoint control
		udd_reset_ep_ctrl();
8000478a:	f0 1f 00 47 	mcall	800048a4 <udd_interrupt+0x198>
		// Reset endpoint control management
		udd_ctrl_init();
8000478e:	f0 1f 00 47 	mcall	800048a8 <udd_interrupt+0x19c>
		goto udd_interrupt_end;
80004792:	c7 78       	rjmp	80004880 <udd_interrupt+0x174>
	}

	if (Is_udd_suspend_interrupt_enabled() && Is_udd_suspend()) {
80004794:	fe 68 00 10 	mov	r8,-131056
80004798:	70 08       	ld.w	r8,r8[0x0]
8000479a:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000479e:	5c 58       	castu.b	r8
800047a0:	c2 20       	breq	800047e4 <udd_interrupt+0xd8>
800047a2:	fe 68 00 04 	mov	r8,-131068
800047a6:	70 08       	ld.w	r8,r8[0x0]
800047a8:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800047ac:	5c 58       	castu.b	r8
800047ae:	c1 b0       	breq	800047e4 <udd_interrupt+0xd8>
		otg_unfreeze_clock();
800047b0:	fe 68 08 00 	mov	r8,-129024
800047b4:	fe 69 08 00 	mov	r9,-129024
800047b8:	72 09       	ld.w	r9,r9[0x0]
800047ba:	af c9       	cbr	r9,0xe
800047bc:	91 09       	st.w	r8[0x0],r9
		// The suspend interrupt is automatic acked when a wakeup occur
		udd_disable_suspend_interrupt();
800047be:	fe 68 00 14 	mov	r8,-131052
800047c2:	30 19       	mov	r9,1
800047c4:	91 09       	st.w	r8[0x0],r9
		udd_enable_wake_up_interrupt();
800047c6:	fe 68 00 18 	mov	r8,-131048
800047ca:	31 09       	mov	r9,16
800047cc:	91 09       	st.w	r8[0x0],r9
		otg_freeze_clock(); // Mandatory to exit of sleep mode after a wakeup event
800047ce:	fe 68 08 00 	mov	r8,-129024
800047d2:	fe 69 08 00 	mov	r9,-129024
800047d6:	72 09       	ld.w	r9,r9[0x0]
800047d8:	af a9       	sbr	r9,0xe
800047da:	91 09       	st.w	r8[0x0],r9
		udd_sleep_mode(false); // Enter in SUSPEND mode
800047dc:	30 0c       	mov	r12,0
800047de:	f0 1f 00 34 	mcall	800048ac <udd_interrupt+0x1a0>
#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
#endif
		goto udd_interrupt_end;
800047e2:	c4 f8       	rjmp	80004880 <udd_interrupt+0x174>
	}

	if (Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) {
800047e4:	fe 68 00 10 	mov	r8,-131056
800047e8:	70 08       	ld.w	r8,r8[0x0]
800047ea:	e2 18 00 10 	andl	r8,0x10,COH
800047ee:	c2 00       	breq	8000482e <udd_interrupt+0x122>
800047f0:	fe 68 00 04 	mov	r8,-131068
800047f4:	70 08       	ld.w	r8,r8[0x0]
800047f6:	e2 18 00 10 	andl	r8,0x10,COH
800047fa:	c1 a0       	breq	8000482e <udd_interrupt+0x122>
		// Ack wakeup interrupt and enable suspend interrupt
		otg_unfreeze_clock();
800047fc:	fe 68 08 00 	mov	r8,-129024
80004800:	fe 69 08 00 	mov	r9,-129024
80004804:	72 09       	ld.w	r9,r9[0x0]
80004806:	af c9       	cbr	r9,0xe
80004808:	91 09       	st.w	r8[0x0],r9

		// Check USB clock ready after suspend and eventually sleep USB clock
		while( !Is_otg_clock_usable() );
8000480a:	fe 68 08 04 	mov	r8,-129020
8000480e:	70 08       	ld.w	r8,r8[0x0]
80004810:	e2 18 40 00 	andl	r8,0x4000,COH
80004814:	cf b0       	breq	8000480a <udd_interrupt+0xfe>

		// The wakeup interrupt is automatic acked when a suspend occur
		udd_disable_wake_up_interrupt();
80004816:	fe 68 00 14 	mov	r8,-131052
8000481a:	31 09       	mov	r9,16
8000481c:	91 09       	st.w	r8[0x0],r9
		udd_enable_suspend_interrupt();
8000481e:	fe 68 00 18 	mov	r8,-131048
80004822:	30 19       	mov	r9,1
80004824:	91 09       	st.w	r8[0x0],r9
		udd_sleep_mode(true); // Enter in IDLE mode
80004826:	30 1c       	mov	r12,1
80004828:	f0 1f 00 21 	mcall	800048ac <udd_interrupt+0x1a0>
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
#endif
		goto udd_interrupt_end;
8000482c:	c2 a8       	rjmp	80004880 <udd_interrupt+0x174>
	}

	if (Is_otg_vbus_transition()) {
8000482e:	fe 68 08 04 	mov	r8,-129020
80004832:	70 08       	ld.w	r8,r8[0x0]
80004834:	e2 18 00 02 	andl	r8,0x2,COH
80004838:	c2 40       	breq	80004880 <udd_interrupt+0x174>
		// Ack Vbus transition and send status to high level
		otg_unfreeze_clock();
8000483a:	fe 68 08 00 	mov	r8,-129024
8000483e:	fe 69 08 00 	mov	r9,-129024
80004842:	72 09       	ld.w	r9,r9[0x0]
80004844:	af c9       	cbr	r9,0xe
80004846:	91 09       	st.w	r8[0x0],r9
		otg_ack_vbus_transition();
80004848:	fe 68 08 08 	mov	r8,-129016
8000484c:	30 29       	mov	r9,2
8000484e:	91 09       	st.w	r8[0x0],r9
		otg_freeze_clock();
80004850:	fe 68 08 00 	mov	r8,-129024
80004854:	fe 69 08 00 	mov	r9,-129024
80004858:	72 09       	ld.w	r9,r9[0x0]
8000485a:	af a9       	sbr	r9,0xe
8000485c:	91 09       	st.w	r8[0x0],r9
#ifndef USB_DEVICE_ATTACH_AUTO_DISABLE
		if (Is_otg_vbus_high()) {
8000485e:	fe 68 08 04 	mov	r8,-129020
80004862:	70 08       	ld.w	r8,r8[0x0]
80004864:	e2 18 08 00 	andl	r8,0x800,COH
80004868:	c0 40       	breq	80004870 <udd_interrupt+0x164>
			udd_attach();
8000486a:	f0 1f 00 12 	mcall	800048b0 <udd_interrupt+0x1a4>
8000486e:	c0 98       	rjmp	80004880 <udd_interrupt+0x174>
		} else {
			udd_detach();
80004870:	f0 1f 00 11 	mcall	800048b4 <udd_interrupt+0x1a8>
80004874:	c0 68       	rjmp	80004880 <udd_interrupt+0x174>
			udc_sof_notify();
		}
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
#endif
		goto udd_interrupt_end;
80004876:	d7 03       	nop
80004878:	c0 48       	rjmp	80004880 <udd_interrupt+0x174>
		udc_sof_notify();
		goto udd_interrupt_end;
	}

	if (udd_ctrl_interrupt())
		goto udd_interrupt_end; // Interrupt acked by control endpoint managed
8000487a:	d7 03       	nop
8000487c:	c0 28       	rjmp	80004880 <udd_interrupt+0x174>

#if (0 != USB_DEVICE_MAX_EP)
	if (udd_ep_interrupt())
		goto udd_interrupt_end; // Interrupt acked by bulk/interrupt/isochronous endpoint managed
8000487e:	d7 03       	nop
		UDC_VBUS_EVENT(Is_otg_vbus_high());
#endif
		goto udd_interrupt_end;
	}
udd_interrupt_end:
	otg_data_memory_barrier();
80004880:	fe 68 00 00 	mov	r8,-131072
80004884:	f0 f8 08 18 	ld.w	r8,r8[2072]
	// consider that exiting from the USB interrupt will require a context switch.
	return pdTRUE;
#else
	return;
#endif
}
80004888:	e3 cd 40 80 	ldm	sp++,r7,lr
8000488c:	d6 03       	rete
8000488e:	00 00       	add	r0,r0
80004890:	80 00       	ld.sh	r0,r0[0x0]
80004892:	73 e4       	ld.w	r4,r9[0x78]
80004894:	80 00       	ld.sh	r0,r0[0x0]
80004896:	5b 4c       	cp.w	r12,-12
80004898:	80 00       	ld.sh	r0,r0[0x0]
8000489a:	5f fc       	sral	r12
8000489c:	80 00       	ld.sh	r0,r0[0x0]
8000489e:	5c 80       	casts.h	r0
800048a0:	80 00       	ld.sh	r0,r0[0x0]
800048a2:	73 80       	ld.w	r0,r9[0x60]
800048a4:	80 00       	ld.sh	r0,r0[0x0]
800048a6:	53 cc       	stdsp	sp[0xf0],r12
800048a8:	80 00       	ld.sh	r0,r0[0x0]
800048aa:	54 b0       	stdsp	sp[0x12c],r0
800048ac:	80 00       	ld.sh	r0,r0[0x0]
800048ae:	46 ac       	lddsp	r12,sp[0x1a8]
800048b0:	80 00       	ld.sh	r0,r0[0x0]
800048b2:	49 d8       	lddpc	r8,80004924 <udd_enable+0x6c>
800048b4:	80 00       	ld.sh	r0,r0[0x0]
800048b6:	4a 88       	lddpc	r8,80004954 <udd_enable+0x9c>

800048b8 <udd_enable>:
	return true;
}


void udd_enable(void)
{
800048b8:	eb cd 40 80 	pushm	r7,lr
800048bc:	1a 97       	mov	r7,sp
800048be:	20 2d       	sub	sp,8
	irqflags_t flags;

	flags = cpu_irq_save();
800048c0:	f0 1f 00 3e 	mcall	800049b8 <udd_enable+0x100>
800048c4:	18 98       	mov	r8,r12
800048c6:	ef 48 ff f8 	st.w	r7[-8],r8
		cpu_irq_restore(flags);
		return;
	}
#else
	//* SINGLE DEVICE MODE INITIALIZATION
	sysclk_enable_usb();
800048ca:	f0 1f 00 3d 	mcall	800049bc <udd_enable+0x104>

	// Here, only the device mode is possible, then link USBB interrupt to UDD interrupt
	irq_register_handler(
800048ce:	30 0a       	mov	r10,0
800048d0:	e0 6b 02 20 	mov	r11,544
800048d4:	4b bc       	lddpc	r12,800049c0 <udd_enable+0x108>
800048d6:	f0 1f 00 3c 	mcall	800049c4 <udd_enable+0x10c>
800048da:	30 18       	mov	r8,1
800048dc:	ef 48 ff fc 	st.w	r7[-4],r8
 *  AVR32_PM_AWEN_xxxxWEN_MASK in the part-specific header file under
 *  "toolchain folder"/avr32/inc(lude)/avr32/)
 */
__always_inline static void pm_asyn_wake_up_enable(unsigned long awen_mask)
{
  AVR32_PM.awen |= awen_mask;
800048e0:	fe 78 0c 00 	mov	r8,-62464
800048e4:	fe 79 0c 00 	mov	r9,-62464
800048e8:	f2 fa 01 44 	ld.w	r10,r9[324]
800048ec:	ee f9 ff fc 	ld.w	r9,r7[-4]
800048f0:	f5 e9 10 09 	or	r9,r10,r9
800048f4:	f1 49 01 44 	st.w	r8[324],r9
		cpu_irq_restore(flags);
		return; // Device is not the current mode
	}
# else
	// ID pin not used then force device mode
	otg_disable_id_pin();
800048f8:	fe 68 08 00 	mov	r8,-129024
800048fc:	fe 69 08 00 	mov	r9,-129024
80004900:	72 09       	ld.w	r9,r9[0x0]
80004902:	b9 c9       	cbr	r9,0x18
80004904:	91 09       	st.w	r8[0x0],r9
	otg_force_device_mode();
80004906:	fe 68 08 00 	mov	r8,-129024
8000490a:	fe 69 08 00 	mov	r9,-129024
8000490e:	72 09       	ld.w	r9,r9[0x0]
80004910:	b9 b9       	sbr	r9,0x19
80004912:	91 09       	st.w	r8[0x0],r9
# endif

	// Enable USB hardware
	otg_enable_pad();
80004914:	fe 68 08 00 	mov	r8,-129024
80004918:	fe 69 08 00 	mov	r9,-129024
8000491c:	72 09       	ld.w	r9,r9[0x0]
8000491e:	ad a9       	sbr	r9,0xc
80004920:	91 09       	st.w	r8[0x0],r9
	otg_enable();
80004922:	fe 68 08 00 	mov	r8,-129024
80004926:	fe 69 08 00 	mov	r9,-129024
8000492a:	72 09       	ld.w	r9,r9[0x0]
8000492c:	af b9       	sbr	r9,0xf
8000492e:	91 09       	st.w	r8[0x0],r9
	otg_unfreeze_clock();
80004930:	fe 68 08 00 	mov	r8,-129024
80004934:	fe 69 08 00 	mov	r9,-129024
80004938:	72 09       	ld.w	r9,r9[0x0]
8000493a:	af c9       	cbr	r9,0xe
8000493c:	91 09       	st.w	r8[0x0],r9
	(void)Is_otg_clock_frozen();
8000493e:	fe 68 08 00 	mov	r8,-129024
80004942:	70 08       	ld.w	r8,r8[0x0]

	// Reset internal variables
#if (0!=USB_DEVICE_MAX_EP)
	udd_ep_job_table_reset();
80004944:	f0 1f 00 21 	mcall	800049c8 <udd_enable+0x110>

	// Set the USB speed requested by configuration file
#ifdef USB_DEVICE_LOW_SPEED
	udd_low_speed_enable();
#else
	udd_low_speed_disable();
80004948:	fe 68 00 00 	mov	r8,-131072
8000494c:	fe 69 00 00 	mov	r9,-131072
80004950:	72 09       	ld.w	r9,r9[0x0]
80004952:	ad c9       	cbr	r9,0xc
80004954:	91 09       	st.w	r8[0x0],r9
#  ifdef USB_DEVICE_HS_SUPPORT
	udd_high_speed_enable();
#  else
	udd_high_speed_disable();
80004956:	fe 68 00 00 	mov	r8,-131072
8000495a:	fe 69 00 00 	mov	r9,-131072
8000495e:	72 09       	ld.w	r9,r9[0x0]
80004960:	e8 19 0c 00 	orl	r9,0xc00
80004964:	91 09       	st.w	r8[0x0],r9
#  endif
#endif
	otg_ack_vbus_transition();
80004966:	fe 68 08 08 	mov	r8,-129016
8000496a:	30 29       	mov	r9,2
8000496c:	91 09       	st.w	r8[0x0],r9
	// Force Vbus interrupt in case of Vbus always with a high level
	// This is possible with a short timing between a Host mode stop/start.
	if (Is_otg_vbus_high()) {
8000496e:	fe 68 08 04 	mov	r8,-129020
80004972:	70 08       	ld.w	r8,r8[0x0]
80004974:	e2 18 08 00 	andl	r8,0x800,COH
80004978:	c0 50       	breq	80004982 <udd_enable+0xca>
		otg_raise_vbus_transition();
8000497a:	fe 68 08 0c 	mov	r8,-129012
8000497e:	30 29       	mov	r9,2
80004980:	91 09       	st.w	r8[0x0],r9
	}
	otg_enable_vbus_interrupt();
80004982:	fe 68 08 00 	mov	r8,-129024
80004986:	fe 69 08 00 	mov	r9,-129024
8000498a:	72 09       	ld.w	r9,r9[0x0]
8000498c:	a1 b9       	sbr	r9,0x1
8000498e:	91 09       	st.w	r8[0x0],r9
	otg_freeze_clock();
80004990:	fe 68 08 00 	mov	r8,-129024
80004994:	fe 69 08 00 	mov	r9,-129024
80004998:	72 09       	ld.w	r9,r9[0x0]
8000499a:	af a9       	sbr	r9,0xe
8000499c:	91 09       	st.w	r8[0x0],r9

#ifndef UDD_NO_SLEEP_MGR
	// Initialize the sleep mode authorized for the USB suspend mode
	udd_b_idle = false;
8000499e:	48 c9       	lddpc	r9,800049cc <udd_enable+0x114>
800049a0:	30 08       	mov	r8,0
800049a2:	b2 88       	st.b	r9[0x0],r8
	sleepmgr_lock_mode(USBB_SLEEP_MODE_USB_SUSPEND);
800049a4:	30 3c       	mov	r12,3
800049a6:	f0 1f 00 0b 	mcall	800049d0 <udd_enable+0x118>
#endif

	cpu_irq_restore(flags);
800049aa:	ee fc ff f8 	ld.w	r12,r7[-8]
800049ae:	f0 1f 00 0a 	mcall	800049d4 <udd_enable+0x11c>
}
800049b2:	2f ed       	sub	sp,-8
800049b4:	e3 cd 80 80 	ldm	sp++,r7,pc
800049b8:	80 00       	ld.sh	r0,r0[0x0]
800049ba:	45 98       	lddsp	r8,sp[0x164]
800049bc:	80 00       	ld.sh	r0,r0[0x0]
800049be:	84 d4       	ld.uh	r4,r2[0xa]
800049c0:	80 00       	ld.sh	r0,r0[0x0]
800049c2:	47 0c       	lddsp	r12,sp[0x1c0]
800049c4:	80 00       	ld.sh	r0,r0[0x0]
800049c6:	e0 bc       	*unknown*
800049c8:	80 00       	ld.sh	r0,r0[0x0]
800049ca:	5c 14       	scr	r4
800049cc:	00 00       	add	r0,r0
800049ce:	06 25       	rsub	r5,r3
800049d0:	80 00       	ld.sh	r0,r0[0x0]
800049d2:	46 00       	lddsp	r0,sp[0x180]
800049d4:	80 00       	ld.sh	r0,r0[0x0]
800049d6:	45 d8       	lddsp	r8,sp[0x174]

800049d8 <udd_attach>:
	cpu_irq_restore(flags);
}


void udd_attach(void)
{
800049d8:	eb cd 40 80 	pushm	r7,lr
800049dc:	1a 97       	mov	r7,sp
800049de:	20 1d       	sub	sp,4
	irqflags_t flags;
	flags = cpu_irq_save();
800049e0:	f0 1f 00 27 	mcall	80004a7c <udd_attach+0xa4>
800049e4:	18 98       	mov	r8,r12
800049e6:	ef 48 ff fc 	st.w	r7[-4],r8

	// At startup the USB bus state is unknown,
	// therefore the state is considered IDLE to not miss any USB event
	udd_sleep_mode(true);
800049ea:	30 1c       	mov	r12,1
800049ec:	f0 1f 00 25 	mcall	80004a80 <udd_attach+0xa8>
	otg_unfreeze_clock();
800049f0:	fe 68 08 00 	mov	r8,-129024
800049f4:	fe 69 08 00 	mov	r9,-129024
800049f8:	72 09       	ld.w	r9,r9[0x0]
800049fa:	af c9       	cbr	r9,0xe
800049fc:	91 09       	st.w	r8[0x0],r9
	while( !Is_otg_clock_usable() );
800049fe:	fe 68 08 04 	mov	r8,-129020
80004a02:	70 08       	ld.w	r8,r8[0x0]
80004a04:	e2 18 40 00 	andl	r8,0x4000,COH
80004a08:	cf b0       	breq	800049fe <udd_attach+0x26>

	// Authorize attach if Vbus is present
	udd_attach_device();
80004a0a:	fe 68 00 00 	mov	r8,-131072
80004a0e:	fe 69 00 00 	mov	r9,-131072
80004a12:	72 09       	ld.w	r9,r9[0x0]
80004a14:	a9 c9       	cbr	r9,0x8
80004a16:	91 09       	st.w	r8[0x0],r9

	// Enable USB line events
	udd_enable_reset_interrupt();
80004a18:	fe 68 00 18 	mov	r8,-131048
80004a1c:	30 89       	mov	r9,8
80004a1e:	91 09       	st.w	r8[0x0],r9
	udd_enable_suspend_interrupt();
80004a20:	fe 68 00 18 	mov	r8,-131048
80004a24:	30 19       	mov	r9,1
80004a26:	91 09       	st.w	r8[0x0],r9
	udd_enable_wake_up_interrupt();
80004a28:	fe 68 00 18 	mov	r8,-131048
80004a2c:	31 09       	mov	r9,16
80004a2e:	91 09       	st.w	r8[0x0],r9
	udd_enable_sof_interrupt();
80004a30:	fe 68 00 18 	mov	r8,-131048
80004a34:	30 49       	mov	r9,4
80004a36:	91 09       	st.w	r8[0x0],r9
#ifdef USB_DEVICE_HS_SUPPORT
	udd_enable_msof_interrupt();
#endif
	// Reset following interrupts flag
	udd_ack_reset();
80004a38:	fe 68 00 08 	mov	r8,-131064
80004a3c:	30 89       	mov	r9,8
80004a3e:	91 09       	st.w	r8[0x0],r9
	udd_ack_sof();
80004a40:	fe 68 00 08 	mov	r8,-131064
80004a44:	30 49       	mov	r9,4
80004a46:	91 09       	st.w	r8[0x0],r9
	udd_ack_msof();
80004a48:	fe 68 00 08 	mov	r8,-131064
80004a4c:	30 29       	mov	r9,2
80004a4e:	91 09       	st.w	r8[0x0],r9
#if UC3A3
	// With UTMI, the first suspend is detected but must be cleared to reoccur interrupt
	udd_ack_suspend();
#else
	// The first suspend interrupt is not detected else raise it
	udd_raise_suspend();
80004a50:	fe 68 00 0c 	mov	r8,-131060
80004a54:	30 19       	mov	r9,1
80004a56:	91 09       	st.w	r8[0x0],r9
#endif
	udd_ack_wake_up();
80004a58:	fe 68 00 08 	mov	r8,-131064
80004a5c:	31 09       	mov	r9,16
80004a5e:	91 09       	st.w	r8[0x0],r9
	otg_freeze_clock();
80004a60:	fe 68 08 00 	mov	r8,-129024
80004a64:	fe 69 08 00 	mov	r9,-129024
80004a68:	72 09       	ld.w	r9,r9[0x0]
80004a6a:	af a9       	sbr	r9,0xe
80004a6c:	91 09       	st.w	r8[0x0],r9
	cpu_irq_restore(flags);
80004a6e:	ee fc ff fc 	ld.w	r12,r7[-4]
80004a72:	f0 1f 00 05 	mcall	80004a84 <udd_attach+0xac>
}
80004a76:	2f fd       	sub	sp,-4
80004a78:	e3 cd 80 80 	ldm	sp++,r7,pc
80004a7c:	80 00       	ld.sh	r0,r0[0x0]
80004a7e:	45 98       	lddsp	r8,sp[0x164]
80004a80:	80 00       	ld.sh	r0,r0[0x0]
80004a82:	46 ac       	lddsp	r12,sp[0x1a8]
80004a84:	80 00       	ld.sh	r0,r0[0x0]
80004a86:	45 d8       	lddsp	r8,sp[0x174]

80004a88 <udd_detach>:


void udd_detach(void)
{
80004a88:	eb cd 40 80 	pushm	r7,lr
80004a8c:	1a 97       	mov	r7,sp
	otg_unfreeze_clock();
80004a8e:	fe 68 08 00 	mov	r8,-129024
80004a92:	fe 69 08 00 	mov	r9,-129024
80004a96:	72 09       	ld.w	r9,r9[0x0]
80004a98:	af c9       	cbr	r9,0xe
80004a9a:	91 09       	st.w	r8[0x0],r9

	// Detach device from the bus
	udd_detach_device();
80004a9c:	fe 68 00 00 	mov	r8,-131072
80004aa0:	fe 69 00 00 	mov	r9,-131072
80004aa4:	72 09       	ld.w	r9,r9[0x0]
80004aa6:	a9 a9       	sbr	r9,0x8
80004aa8:	91 09       	st.w	r8[0x0],r9
	otg_freeze_clock();
80004aaa:	fe 68 08 00 	mov	r8,-129024
80004aae:	fe 69 08 00 	mov	r9,-129024
80004ab2:	72 09       	ld.w	r9,r9[0x0]
80004ab4:	af a9       	sbr	r9,0xe
80004ab6:	91 09       	st.w	r8[0x0],r9
	udd_sleep_mode(false);
80004ab8:	30 0c       	mov	r12,0
80004aba:	f0 1f 00 03 	mcall	80004ac4 <udd_detach+0x3c>
}
80004abe:	e3 cd 80 80 	ldm	sp++,r7,pc
80004ac2:	00 00       	add	r0,r0
80004ac4:	80 00       	ld.sh	r0,r0[0x0]
80004ac6:	46 ac       	lddsp	r12,sp[0x1a8]

80004ac8 <udd_is_high_speed>:


bool udd_is_high_speed(void)
{
80004ac8:	eb cd 40 80 	pushm	r7,lr
80004acc:	1a 97       	mov	r7,sp
#ifdef USB_DEVICE_HS_SUPPORT
	return !Is_udd_full_speed_mode();
#else
	return false;
80004ace:	30 08       	mov	r8,0
#endif
}
80004ad0:	10 9c       	mov	r12,r8
80004ad2:	e3 cd 80 80 	ldm	sp++,r7,pc

80004ad6 <udd_set_address>:


void udd_set_address(uint8_t address)
{
80004ad6:	eb cd 40 80 	pushm	r7,lr
80004ada:	1a 97       	mov	r7,sp
80004adc:	20 1d       	sub	sp,4
80004ade:	18 98       	mov	r8,r12
80004ae0:	ef 68 ff fc 	st.b	r7[-4],r8
	udd_disable_address();
80004ae4:	fe 68 00 00 	mov	r8,-131072
80004ae8:	fe 69 00 00 	mov	r9,-131072
80004aec:	72 09       	ld.w	r9,r9[0x0]
80004aee:	a7 d9       	cbr	r9,0x7
80004af0:	91 09       	st.w	r8[0x0],r9
	udd_configure_address(address);
80004af2:	fe 68 00 00 	mov	r8,-131072
80004af6:	fe 69 00 00 	mov	r9,-131072
80004afa:	72 09       	ld.w	r9,r9[0x0]
80004afc:	12 9a       	mov	r10,r9
80004afe:	e0 1a ff 80 	andl	r10,0xff80
80004b02:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80004b06:	f3 d9 c0 07 	bfextu	r9,r9,0x0,0x7
80004b0a:	f5 e9 10 09 	or	r9,r10,r9
80004b0e:	91 09       	st.w	r8[0x0],r9
	udd_enable_address();
80004b10:	fe 68 00 00 	mov	r8,-131072
80004b14:	fe 69 00 00 	mov	r9,-131072
80004b18:	72 09       	ld.w	r9,r9[0x0]
80004b1a:	a7 b9       	sbr	r9,0x7
80004b1c:	91 09       	st.w	r8[0x0],r9
}
80004b1e:	2f fd       	sub	sp,-4
80004b20:	e3 cd 80 80 	ldm	sp++,r7,pc

80004b24 <udd_getaddress>:


uint8_t udd_getaddress(void)
{
80004b24:	eb cd 40 80 	pushm	r7,lr
80004b28:	1a 97       	mov	r7,sp
	return udd_get_configured_address();
80004b2a:	fe 68 00 00 	mov	r8,-131072
80004b2e:	70 08       	ld.w	r8,r8[0x0]
80004b30:	5c 58       	castu.b	r8
80004b32:	f1 d8 c0 07 	bfextu	r8,r8,0x0,0x7
}
80004b36:	10 9c       	mov	r12,r8
80004b38:	e3 cd 80 80 	ldm	sp++,r7,pc

80004b3c <udd_get_frame_number>:


uint16_t udd_get_frame_number(void)
{
80004b3c:	eb cd 40 80 	pushm	r7,lr
80004b40:	1a 97       	mov	r7,sp
	return udd_frame_number();
80004b42:	fe 68 00 20 	mov	r8,-131040
80004b46:	70 08       	ld.w	r8,r8[0x0]
80004b48:	e2 18 3f f8 	andl	r8,0x3ff8,COH
80004b4c:	a3 98       	lsr	r8,0x3
80004b4e:	5c 88       	casts.h	r8
}
80004b50:	10 9c       	mov	r12,r8
80004b52:	e3 cd 80 80 	ldm	sp++,r7,pc

80004b56 <udd_get_micro_frame_number>:

uint16_t udd_get_micro_frame_number(void)
{
80004b56:	eb cd 40 80 	pushm	r7,lr
80004b5a:	1a 97       	mov	r7,sp
	return udd_micro_frame_number();
80004b5c:	fe 68 00 00 	mov	r8,-131072
80004b60:	70 88       	ld.w	r8,r8[0x20]
80004b62:	5c 88       	casts.h	r8
80004b64:	5c 88       	casts.h	r8
80004b66:	f1 d8 c0 0e 	bfextu	r8,r8,0x0,0xe
}
80004b6a:	10 9c       	mov	r12,r8
80004b6c:	e3 cd 80 80 	ldm	sp++,r7,pc

80004b70 <udd_set_setup_payload>:
	}
}


void udd_set_setup_payload( uint8_t *payload, uint16_t payload_size )
{
80004b70:	eb cd 40 80 	pushm	r7,lr
80004b74:	1a 97       	mov	r7,sp
80004b76:	20 2d       	sub	sp,8
80004b78:	ef 4c ff fc 	st.w	r7[-4],r12
80004b7c:	16 98       	mov	r8,r11
80004b7e:	ef 58 ff f8 	st.h	r7[-8],r8
	udd_g_ctrlreq.payload = payload;
80004b82:	48 68       	lddpc	r8,80004b98 <udd_set_setup_payload+0x28>
80004b84:	ee f9 ff fc 	ld.w	r9,r7[-4]
80004b88:	91 29       	st.w	r8[0x8],r9
	udd_g_ctrlreq.payload_size = payload_size;
80004b8a:	48 49       	lddpc	r9,80004b98 <udd_set_setup_payload+0x28>
80004b8c:	ef 08 ff f8 	ld.sh	r8,r7[-8]
80004b90:	b2 68       	st.h	r9[0xc],r8
}
80004b92:	2f ed       	sub	sp,-8
80004b94:	e3 cd 80 80 	ldm	sp++,r7,pc
80004b98:	00 00       	add	r0,r0
80004b9a:	0b 20       	ld.uh	r0,r5++

80004b9c <udd_ep_alloc>:


#if (0!=USB_DEVICE_MAX_EP)
bool udd_ep_alloc(udd_ep_id_t ep, uint8_t bmAttributes,
		uint16_t MaxEndpointSize)
{
80004b9c:	eb cd 40 80 	pushm	r7,lr
80004ba0:	1a 97       	mov	r7,sp
80004ba2:	20 dd       	sub	sp,52
80004ba4:	16 99       	mov	r9,r11
80004ba6:	14 98       	mov	r8,r10
80004ba8:	18 9a       	mov	r10,r12
80004baa:	ef 6a ff d4 	st.b	r7[-44],r10
80004bae:	ef 69 ff d0 	st.b	r7[-48],r9
80004bb2:	ef 58 ff cc 	st.h	r7[-52],r8
	bool b_dir_in;
	uint16_t ep_allocated;
	uint8_t bank, i;

	b_dir_in = ep & USB_EP_DIR_IN;
80004bb6:	ef 38 ff d4 	ld.ub	r8,r7[-44]
80004bba:	a7 98       	lsr	r8,0x7
80004bbc:	ef 68 ff db 	st.b	r7[-37],r8
	ep = ep & USB_EP_ADDR_MASK;
80004bc0:	ef 38 ff d4 	ld.ub	r8,r7[-44]
80004bc4:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80004bc8:	ef 68 ff d4 	st.b	r7[-44],r8

	if (ep > USB_DEVICE_MAX_EP) {
80004bcc:	ef 39 ff d4 	ld.ub	r9,r7[-44]
80004bd0:	30 38       	mov	r8,3
80004bd2:	f0 09 18 00 	cp.b	r9,r8
80004bd6:	e0 88 00 04 	brls	80004bde <udd_ep_alloc+0x42>
		return false;
80004bda:	30 08       	mov	r8,0
80004bdc:	c7 f9       	rjmp	80004eda <udd_ep_alloc+0x33e>
	}
	if (Is_udd_endpoint_enabled(ep)) {
80004bde:	fe 68 00 00 	mov	r8,-131072
80004be2:	70 79       	ld.w	r9,r8[0x1c]
80004be4:	ef 38 ff d4 	ld.ub	r8,r7[-44]
80004be8:	30 1a       	mov	r10,1
80004bea:	f4 08 09 48 	lsl	r8,r10,r8
80004bee:	f3 e8 00 08 	and	r8,r9,r8
80004bf2:	c0 30       	breq	80004bf8 <udd_ep_alloc+0x5c>
		return false;
80004bf4:	30 08       	mov	r8,0
80004bf6:	c7 29       	rjmp	80004eda <udd_ep_alloc+0x33e>
	}

	// Bank choice
	switch(bmAttributes&USB_EP_TYPE_MASK) {
80004bf8:	ef 38 ff d0 	ld.ub	r8,r7[-48]
80004bfc:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
80004c00:	58 28       	cp.w	r8,2
80004c02:	c0 d0       	breq	80004c1c <udd_ep_alloc+0x80>
80004c04:	58 38       	cp.w	r8,3
80004c06:	c0 70       	breq	80004c14 <udd_ep_alloc+0x78>
80004c08:	58 18       	cp.w	r8,1
80004c0a:	c0 d1       	brne	80004c24 <udd_ep_alloc+0x88>
	case USB_EP_TYPE_ISOCHRONOUS:
		bank = UDD_ISOCHRONOUS_NB_BANK(ep);
80004c0c:	30 28       	mov	r8,2
80004c0e:	ef 68 ff de 	st.b	r7[-34],r8
		break;
80004c12:	c0 b8       	rjmp	80004c28 <udd_ep_alloc+0x8c>
	case USB_EP_TYPE_INTERRUPT:
		bank = UDD_INTERRUPT_NB_BANK(ep);
80004c14:	30 18       	mov	r8,1
80004c16:	ef 68 ff de 	st.b	r7[-34],r8
		break;
80004c1a:	c0 78       	rjmp	80004c28 <udd_ep_alloc+0x8c>
	case USB_EP_TYPE_BULK:
		bank = UDD_BULK_NB_BANK(ep);
80004c1c:	30 28       	mov	r8,2
80004c1e:	ef 68 ff de 	st.b	r7[-34],r8
		break;
80004c22:	c0 38       	rjmp	80004c28 <udd_ep_alloc+0x8c>
	default:
		Assert(false);
		return false;
80004c24:	30 08       	mov	r8,0
80004c26:	c5 a9       	rjmp	80004eda <udd_ep_alloc+0x33e>
	}
	switch(bank) {
80004c28:	ef 38 ff de 	ld.ub	r8,r7[-34]
80004c2c:	58 28       	cp.w	r8,2
80004c2e:	c0 90       	breq	80004c40 <udd_ep_alloc+0xa4>
80004c30:	58 38       	cp.w	r8,3
80004c32:	c0 b0       	breq	80004c48 <udd_ep_alloc+0xac>
80004c34:	58 18       	cp.w	r8,1
80004c36:	c0 d1       	brne	80004c50 <udd_ep_alloc+0xb4>
	case 1:
		bank = AVR32_USBB_UECFG0_EPBK_SINGLE;
80004c38:	30 08       	mov	r8,0
80004c3a:	ef 68 ff de 	st.b	r7[-34],r8
		break;
80004c3e:	c0 b8       	rjmp	80004c54 <udd_ep_alloc+0xb8>
	case 2:
		bank = AVR32_USBB_UECFG0_EPBK_DOUBLE;
80004c40:	30 18       	mov	r8,1
80004c42:	ef 68 ff de 	st.b	r7[-34],r8
		break;
80004c46:	c0 78       	rjmp	80004c54 <udd_ep_alloc+0xb8>
	case 3:
		bank = AVR32_USBB_UECFG0_EPBK_TRIPLE;
80004c48:	30 28       	mov	r8,2
80004c4a:	ef 68 ff de 	st.b	r7[-34],r8
		break;
80004c4e:	c0 38       	rjmp	80004c54 <udd_ep_alloc+0xb8>
	default:
		Assert(false);
		return false;
80004c50:	30 08       	mov	r8,0
80004c52:	c4 49       	rjmp	80004eda <udd_ep_alloc+0x33e>
	Assert(MaxEndpointSize < 1024);
	Assert((MaxEndpointSize == 1023) || !(MaxEndpointSize & (MaxEndpointSize - 1)));
	Assert(MaxEndpointSize >= 8);

	// Set configuration of new endpoint
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
80004c54:	ef 38 ff d4 	ld.ub	r8,r7[-44]
80004c58:	a3 68       	lsl	r8,0x2
80004c5a:	e0 38 ff 00 	sub	r8,130816
80004c5e:	ef 39 ff d4 	ld.ub	r9,r7[-44]
80004c62:	a3 69       	lsl	r9,0x2
80004c64:	e0 39 ff 00 	sub	r9,130816
80004c68:	72 09       	ld.w	r9,r9[0x0]
80004c6a:	12 9a       	mov	r10,r9
80004c6c:	e0 1a e6 83 	andl	r10,0xe683
80004c70:	ef 39 ff d0 	ld.ub	r9,r7[-48]
80004c74:	ab 79       	lsl	r9,0xb
80004c76:	12 9b       	mov	r11,r9
80004c78:	e2 1b 18 00 	andl	r11,0x1800,COH
80004c7c:	ef 39 ff db 	ld.ub	r9,r7[-37]
80004c80:	a9 69       	lsl	r9,0x8
80004c82:	e2 19 01 00 	andl	r9,0x100,COH
80004c86:	12 4b       	or	r11,r9
80004c88:	ef 19 ff cc 	ld.uh	r9,r7[-52]
80004c8c:	ef 49 ff f0 	st.w	r7[-16],r9
80004c90:	30 89       	mov	r9,8
80004c92:	ef 49 ff f4 	st.w	r7[-12],r9
80004c96:	ee f9 ff f0 	ld.w	r9,r7[-16]
80004c9a:	ee fc ff f4 	ld.w	r12,r7[-12]
80004c9e:	f2 0c 0c 49 	max	r9,r9,r12
80004ca2:	ef 49 ff ec 	st.w	r7[-20],r9
80004ca6:	ee f9 ff ec 	ld.w	r9,r7[-20]
80004caa:	ef 49 ff e4 	st.w	r7[-28],r9
80004cae:	e0 69 04 00 	mov	r9,1024
80004cb2:	ef 49 ff e8 	st.w	r7[-24],r9
80004cb6:	ee f9 ff e4 	ld.w	r9,r7[-28]
80004cba:	ee fc ff e8 	ld.w	r12,r7[-24]
80004cbe:	f2 0c 0d 49 	min	r9,r9,r12
80004cc2:	ef 49 ff e0 	st.w	r7[-32],r9
80004cc6:	ee f9 ff e0 	ld.w	r9,r7[-32]
80004cca:	a1 79       	lsl	r9,0x1
80004ccc:	20 19       	sub	r9,1
80004cce:	f2 09 12 00 	clz	r9,r9
80004cd2:	f2 09 11 1c 	rsub	r9,r9,28
80004cd6:	a5 69       	lsl	r9,0x4
80004cd8:	12 4b       	or	r11,r9
80004cda:	ef 39 ff de 	ld.ub	r9,r7[-34]
80004cde:	a3 69       	lsl	r9,0x2
80004ce0:	e2 19 00 0c 	andl	r9,0xc,COH
80004ce4:	f7 e9 10 09 	or	r9,r11,r9
80004ce8:	e2 19 19 7c 	andl	r9,0x197c,COH
80004cec:	f5 e9 10 09 	or	r9,r10,r9
80004cf0:	91 09       	st.w	r8[0x0],r9
			MaxEndpointSize, bank);
	ep_allocated = 1 << ep;
80004cf2:	ef 38 ff d4 	ld.ub	r8,r7[-44]
80004cf6:	30 19       	mov	r9,1
80004cf8:	f2 08 09 48 	lsl	r8,r9,r8
80004cfc:	ef 58 ff dc 	st.h	r7[-36],r8

	// Unalloc endpoints superior
	for (i = USB_DEVICE_MAX_EP; i > ep; i--) {
80004d00:	30 38       	mov	r8,3
80004d02:	ef 68 ff df 	st.b	r7[-33],r8
80004d06:	c3 a8       	rjmp	80004d7a <udd_ep_alloc+0x1de>
		if (Is_udd_endpoint_enabled(i)) {
80004d08:	fe 68 00 00 	mov	r8,-131072
80004d0c:	70 79       	ld.w	r9,r8[0x1c]
80004d0e:	ef 38 ff df 	ld.ub	r8,r7[-33]
80004d12:	30 1a       	mov	r10,1
80004d14:	f4 08 09 48 	lsl	r8,r10,r8
80004d18:	f3 e8 00 08 	and	r8,r9,r8
80004d1c:	c2 a0       	breq	80004d70 <udd_ep_alloc+0x1d4>
			ep_allocated |= 1 << i;
80004d1e:	ef 38 ff df 	ld.ub	r8,r7[-33]
80004d22:	30 19       	mov	r9,1
80004d24:	f2 08 09 48 	lsl	r8,r9,r8
80004d28:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
80004d2c:	ef 08 ff dc 	ld.sh	r8,r7[-36]
80004d30:	f3 e8 10 08 	or	r8,r9,r8
80004d34:	5c 88       	casts.h	r8
80004d36:	ef 58 ff dc 	st.h	r7[-36],r8
			udd_disable_endpoint(i);
80004d3a:	fe 68 00 00 	mov	r8,-131072
80004d3e:	fe 69 00 00 	mov	r9,-131072
80004d42:	72 7a       	ld.w	r10,r9[0x1c]
80004d44:	ef 39 ff df 	ld.ub	r9,r7[-33]
80004d48:	30 1b       	mov	r11,1
80004d4a:	f6 09 09 49 	lsl	r9,r11,r9
80004d4e:	5c d9       	com	r9
80004d50:	f5 e9 00 09 	and	r9,r10,r9
80004d54:	91 79       	st.w	r8[0x1c],r9
			udd_unallocate_memory(i);
80004d56:	ef 38 ff df 	ld.ub	r8,r7[-33]
80004d5a:	a3 68       	lsl	r8,0x2
80004d5c:	e0 38 ff 00 	sub	r8,130816
80004d60:	ef 39 ff df 	ld.ub	r9,r7[-33]
80004d64:	a3 69       	lsl	r9,0x2
80004d66:	e0 39 ff 00 	sub	r9,130816
80004d6a:	72 09       	ld.w	r9,r9[0x0]
80004d6c:	a1 d9       	cbr	r9,0x1
80004d6e:	91 09       	st.w	r8[0x0],r9
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
			MaxEndpointSize, bank);
	ep_allocated = 1 << ep;

	// Unalloc endpoints superior
	for (i = USB_DEVICE_MAX_EP; i > ep; i--) {
80004d70:	ef 38 ff df 	ld.ub	r8,r7[-33]
80004d74:	20 18       	sub	r8,1
80004d76:	ef 68 ff df 	st.b	r7[-33],r8
80004d7a:	ef 39 ff df 	ld.ub	r9,r7[-33]
80004d7e:	ef 38 ff d4 	ld.ub	r8,r7[-44]
80004d82:	f0 09 18 00 	cp.b	r9,r8
80004d86:	fe 9b ff c1 	brhi	80004d08 <udd_ep_alloc+0x16c>
			udd_unallocate_memory(i);
		}
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
80004d8a:	ef 38 ff d4 	ld.ub	r8,r7[-44]
80004d8e:	ef 68 ff df 	st.b	r7[-33],r8
80004d92:	c9 c8       	rjmp	80004eca <udd_ep_alloc+0x32e>
		if (ep_allocated & (1 << i)) {
80004d94:	ef 19 ff dc 	ld.uh	r9,r7[-36]
80004d98:	ef 38 ff df 	ld.ub	r8,r7[-33]
80004d9c:	f2 08 08 48 	asr	r8,r9,r8
80004da0:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80004da4:	5c 58       	castu.b	r8
80004da6:	e0 80 00 8d 	breq	80004ec0 <udd_ep_alloc+0x324>
			udd_ep_job_t *ptr_job = &udd_ep_job[i - 1];
80004daa:	ef 38 ff df 	ld.ub	r8,r7[-33]
80004dae:	f0 c9 00 01 	sub	r9,r8,1
80004db2:	12 98       	mov	r8,r9
80004db4:	a3 68       	lsl	r8,0x2
80004db6:	12 08       	add	r8,r9
80004db8:	a3 68       	lsl	r8,0x2
80004dba:	10 99       	mov	r9,r8
80004dbc:	4c a8       	lddpc	r8,80004ee4 <udd_ep_alloc+0x348>
80004dbe:	f2 08 00 08 	add	r8,r9,r8
80004dc2:	ef 48 ff f8 	st.w	r7[-8],r8
			bool b_restart = ptr_job->busy;
80004dc6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004dca:	70 08       	ld.w	r8,r8[0x0]
80004dcc:	e6 18 80 00 	andh	r8,0x8000,COH
80004dd0:	5f 18       	srne	r8
80004dd2:	ef 68 ff ff 	st.b	r7[-1],r8
			ptr_job->busy = false;
80004dd6:	ee f9 ff f8 	ld.w	r9,r7[-8]
80004dda:	72 08       	ld.w	r8,r9[0x0]
80004ddc:	30 0a       	mov	r10,0
80004dde:	f1 da d3 e1 	bfins	r8,r10,0x1f,0x1
80004de2:	93 08       	st.w	r9[0x0],r8

			udd_allocate_memory(i);
80004de4:	ef 38 ff df 	ld.ub	r8,r7[-33]
80004de8:	a3 68       	lsl	r8,0x2
80004dea:	e0 38 ff 00 	sub	r8,130816
80004dee:	ef 39 ff df 	ld.ub	r9,r7[-33]
80004df2:	a3 69       	lsl	r9,0x2
80004df4:	e0 39 ff 00 	sub	r9,130816
80004df8:	72 09       	ld.w	r9,r9[0x0]
80004dfa:	a1 b9       	sbr	r9,0x1
80004dfc:	91 09       	st.w	r8[0x0],r9
			udd_enable_endpoint(i);
80004dfe:	fe 68 00 00 	mov	r8,-131072
80004e02:	fe 69 00 00 	mov	r9,-131072
80004e06:	72 7a       	ld.w	r10,r9[0x1c]
80004e08:	ef 39 ff df 	ld.ub	r9,r7[-33]
80004e0c:	30 1b       	mov	r11,1
80004e0e:	f6 09 09 49 	lsl	r9,r11,r9
80004e12:	f5 e9 10 09 	or	r9,r10,r9
80004e16:	91 79       	st.w	r8[0x1c],r9
			if (!Is_udd_endpoint_configured(i)) {
80004e18:	ef 38 ff df 	ld.ub	r8,r7[-33]
80004e1c:	a3 68       	lsl	r8,0x2
80004e1e:	e0 38 fe d0 	sub	r8,130768
80004e22:	70 08       	ld.w	r8,r8[0x0]
80004e24:	e6 18 00 04 	andh	r8,0x4,COH
80004e28:	c2 61       	brne	80004e74 <udd_ep_alloc+0x2d8>
				if (NULL == ptr_job->call_trans) {
80004e2a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004e2e:	70 48       	ld.w	r8,r8[0x10]
80004e30:	58 08       	cp.w	r8,0
80004e32:	c0 31       	brne	80004e38 <udd_ep_alloc+0x29c>
					return false;
80004e34:	30 08       	mov	r8,0
80004e36:	c5 28       	rjmp	80004eda <udd_ep_alloc+0x33e>
				}
				if (Is_udd_endpoint_in(i)) {
80004e38:	ef 38 ff df 	ld.ub	r8,r7[-33]
80004e3c:	a3 68       	lsl	r8,0x2
80004e3e:	e0 38 ff 00 	sub	r8,130816
80004e42:	70 08       	ld.w	r8,r8[0x0]
80004e44:	e2 18 01 00 	andl	r8,0x100,COH
80004e48:	c0 90       	breq	80004e5a <udd_ep_alloc+0x2be>
					i |= USB_EP_DIR_IN;
80004e4a:	ef 38 ff df 	ld.ub	r8,r7[-33]
80004e4e:	ea 18 ff ff 	orh	r8,0xffff
80004e52:	e8 18 ff 80 	orl	r8,0xff80
80004e56:	ef 68 ff df 	st.b	r7[-33],r8
				}				
				ptr_job->call_trans(UDD_EP_TRANSFER_ABORT,
80004e5a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004e5e:	70 48       	ld.w	r8,r8[0x10]
80004e60:	ef 3a ff df 	ld.ub	r10,r7[-33]
80004e64:	ee f9 ff f8 	ld.w	r9,r7[-8]
80004e68:	72 29       	ld.w	r9,r9[0x8]
80004e6a:	12 9b       	mov	r11,r9
80004e6c:	30 1c       	mov	r12,1
80004e6e:	5d 18       	icall	r8
						ptr_job->buf_size, i);
				return false;
80004e70:	30 08       	mov	r8,0
80004e72:	c3 48       	rjmp	80004eda <udd_ep_alloc+0x33e>
			}
			udd_enable_endpoint_bank_autoswitch(i);
80004e74:	ef 38 ff df 	ld.ub	r8,r7[-33]
80004e78:	a3 68       	lsl	r8,0x2
80004e7a:	e0 38 ff 00 	sub	r8,130816
80004e7e:	ef 39 ff df 	ld.ub	r9,r7[-33]
80004e82:	a3 69       	lsl	r9,0x2
80004e84:	e0 39 ff 00 	sub	r9,130816
80004e88:	72 09       	ld.w	r9,r9[0x0]
80004e8a:	a9 b9       	sbr	r9,0x9
80004e8c:	91 09       	st.w	r8[0x0],r9
			if (b_restart) {
80004e8e:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80004e92:	30 08       	mov	r8,0
80004e94:	f0 09 18 00 	cp.b	r9,r8
80004e98:	c1 40       	breq	80004ec0 <udd_ep_alloc+0x324>
				// Re-run the job
				udd_ep_run(i, ptr_job->b_shortpacket,
80004e9a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004e9e:	70 48       	ld.w	r8,r8[0x10]
80004ea0:	ee f9 ff f8 	ld.w	r9,r7[-8]
80004ea4:	72 29       	ld.w	r9,r9[0x8]
80004ea6:	ee fa ff f8 	ld.w	r10,r7[-8]
80004eaa:	74 1a       	ld.w	r10,r10[0x4]
80004eac:	ee fb ff f8 	ld.w	r11,r7[-8]
80004eb0:	76 0b       	ld.w	r11,r11[0x0]
80004eb2:	e6 1b 40 00 	andh	r11,0x4000,COH
80004eb6:	5f 1b       	srne	r11
80004eb8:	ef 3c ff df 	ld.ub	r12,r7[-33]
80004ebc:	f0 1f 00 0b 	mcall	80004ee8 <udd_ep_alloc+0x34c>
			udd_unallocate_memory(i);
		}
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
80004ec0:	ef 38 ff df 	ld.ub	r8,r7[-33]
80004ec4:	2f f8       	sub	r8,-1
80004ec6:	ef 68 ff df 	st.b	r7[-33],r8
80004eca:	ef 39 ff df 	ld.ub	r9,r7[-33]
80004ece:	30 38       	mov	r8,3
80004ed0:	f0 09 18 00 	cp.b	r9,r8
80004ed4:	fe 98 ff 60 	brls	80004d94 <udd_ep_alloc+0x1f8>
						ptr_job->buf_size,
						ptr_job->call_trans);
			}
		}
	}
	return true;
80004ed8:	30 18       	mov	r8,1
}
80004eda:	10 9c       	mov	r12,r8
80004edc:	2f 3d       	sub	sp,-52
80004ede:	e3 cd 80 80 	ldm	sp++,r7,pc
80004ee2:	00 00       	add	r0,r0
80004ee4:	00 00       	add	r0,r0
80004ee6:	06 30       	cp.w	r0,r3
80004ee8:	80 00       	ld.sh	r0,r0[0x0]
80004eea:	52 0c       	stdsp	sp[0x80],r12

80004eec <udd_ep_free>:


void udd_ep_free(udd_ep_id_t ep)
{
80004eec:	eb cd 40 80 	pushm	r7,lr
80004ef0:	1a 97       	mov	r7,sp
80004ef2:	20 2d       	sub	sp,8
80004ef4:	18 98       	mov	r8,r12
80004ef6:	ef 68 ff f8 	st.b	r7[-8],r8
	uint8_t index = ep & USB_EP_ADDR_MASK;
80004efa:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80004efe:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80004f02:	ef 68 ff ff 	st.b	r7[-1],r8

	if (USB_DEVICE_MAX_EP < index) {
80004f06:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80004f0a:	30 38       	mov	r8,3
80004f0c:	f0 09 18 00 	cp.b	r9,r8
80004f10:	e0 8b 00 33 	brhi	80004f76 <udd_ep_free+0x8a>
		return;
	}
	udd_disable_endpoint(index);
80004f14:	fe 68 00 00 	mov	r8,-131072
80004f18:	fe 69 00 00 	mov	r9,-131072
80004f1c:	72 7a       	ld.w	r10,r9[0x1c]
80004f1e:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80004f22:	30 1b       	mov	r11,1
80004f24:	f6 09 09 49 	lsl	r9,r11,r9
80004f28:	5c d9       	com	r9
80004f2a:	f5 e9 00 09 	and	r9,r10,r9
80004f2e:	91 79       	st.w	r8[0x1c],r9
	udd_unallocate_memory(index);
80004f30:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80004f34:	a3 68       	lsl	r8,0x2
80004f36:	e0 38 ff 00 	sub	r8,130816
80004f3a:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80004f3e:	a3 69       	lsl	r9,0x2
80004f40:	e0 39 ff 00 	sub	r9,130816
80004f44:	72 09       	ld.w	r9,r9[0x0]
80004f46:	a1 d9       	cbr	r9,0x1
80004f48:	91 09       	st.w	r8[0x0],r9
	udd_ep_abort_job(ep);
80004f4a:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80004f4e:	10 9c       	mov	r12,r8
80004f50:	f0 1f 00 0c 	mcall	80004f80 <udd_ep_free+0x94>
	udd_ep_job[index - 1].stall_requested = false;
80004f54:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80004f58:	f0 c9 00 01 	sub	r9,r8,1
80004f5c:	48 aa       	lddpc	r10,80004f84 <udd_ep_free+0x98>
80004f5e:	12 98       	mov	r8,r9
80004f60:	a3 68       	lsl	r8,0x2
80004f62:	12 08       	add	r8,r9
80004f64:	a3 68       	lsl	r8,0x2
80004f66:	f4 08 00 09 	add	r9,r10,r8
80004f6a:	72 08       	ld.w	r8,r9[0x0]
80004f6c:	30 0a       	mov	r10,0
80004f6e:	f1 da d3 a1 	bfins	r8,r10,0x1d,0x1
80004f72:	93 08       	st.w	r9[0x0],r8
80004f74:	c0 28       	rjmp	80004f78 <udd_ep_free+0x8c>
void udd_ep_free(udd_ep_id_t ep)
{
	uint8_t index = ep & USB_EP_ADDR_MASK;

	if (USB_DEVICE_MAX_EP < index) {
		return;
80004f76:	d7 03       	nop
	}
	udd_disable_endpoint(index);
	udd_unallocate_memory(index);
	udd_ep_abort_job(ep);
	udd_ep_job[index - 1].stall_requested = false;
}
80004f78:	2f ed       	sub	sp,-8
80004f7a:	e3 cd 80 80 	ldm	sp++,r7,pc
80004f7e:	00 00       	add	r0,r0
80004f80:	80 00       	ld.sh	r0,r0[0x0]
80004f82:	5c dc       	com	r12
80004f84:	00 00       	add	r0,r0
80004f86:	06 30       	cp.w	r0,r3

80004f88 <udd_ep_is_halted>:


bool udd_ep_is_halted(udd_ep_id_t ep)
{
80004f88:	eb cd 40 80 	pushm	r7,lr
80004f8c:	1a 97       	mov	r7,sp
80004f8e:	20 1d       	sub	sp,4
80004f90:	18 98       	mov	r8,r12
80004f92:	ef 68 ff fc 	st.b	r7[-4],r8
	return Is_udd_endpoint_stall_requested(ep & USB_EP_ADDR_MASK);
80004f96:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80004f9a:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80004f9e:	a3 68       	lsl	r8,0x2
80004fa0:	e0 38 fe 40 	sub	r8,130624
80004fa4:	70 08       	ld.w	r8,r8[0x0]
80004fa6:	e6 18 00 08 	andh	r8,0x8,COH
80004faa:	5f 18       	srne	r8
80004fac:	5c 58       	castu.b	r8
}
80004fae:	10 9c       	mov	r12,r8
80004fb0:	2f fd       	sub	sp,-4
80004fb2:	e3 cd 80 80 	ldm	sp++,r7,pc
80004fb6:	d7 03       	nop

80004fb8 <udd_ep_set_halt>:


bool udd_ep_set_halt(udd_ep_id_t ep)
{
80004fb8:	eb cd 40 80 	pushm	r7,lr
80004fbc:	1a 97       	mov	r7,sp
80004fbe:	20 3d       	sub	sp,12
80004fc0:	18 98       	mov	r8,r12
80004fc2:	ef 68 ff f4 	st.b	r7[-12],r8
	udd_ep_job_t *ptr_job;
	uint8_t index = ep & USB_EP_ADDR_MASK;
80004fc6:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80004fca:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80004fce:	ef 68 ff ff 	st.b	r7[-1],r8

	if (USB_DEVICE_MAX_EP < index) {
80004fd2:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80004fd6:	30 38       	mov	r8,3
80004fd8:	f0 09 18 00 	cp.b	r9,r8
80004fdc:	e0 88 00 04 	brls	80004fe4 <udd_ep_set_halt+0x2c>
		return false;
80004fe0:	30 08       	mov	r8,0
80004fe2:	c6 f8       	rjmp	800050c0 <udd_ep_set_halt+0x108>
	}

	ptr_job = &udd_ep_job[index - 1];
80004fe4:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80004fe8:	f0 c9 00 01 	sub	r9,r8,1
80004fec:	12 98       	mov	r8,r9
80004fee:	a3 68       	lsl	r8,0x2
80004ff0:	12 08       	add	r8,r9
80004ff2:	a3 68       	lsl	r8,0x2
80004ff4:	10 99       	mov	r9,r8
80004ff6:	4b 58       	lddpc	r8,800050c8 <udd_ep_set_halt+0x110>
80004ff8:	f2 08 00 08 	add	r8,r9,r8
80004ffc:	ef 48 ff f8 	st.w	r7[-8],r8

	if (Is_udd_endpoint_stall_requested(index) // Endpoint stalled
80005000:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80005004:	a3 68       	lsl	r8,0x2
80005006:	e0 38 fe 40 	sub	r8,130624
8000500a:	70 08       	ld.w	r8,r8[0x0]
8000500c:	e6 18 00 08 	andh	r8,0x8,COH
80005010:	c0 71       	brne	8000501e <udd_ep_set_halt+0x66>
			|| ptr_job->stall_requested) { // Endpoint stall is requested
80005012:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005016:	70 08       	ld.w	r8,r8[0x0]
80005018:	e6 18 20 00 	andh	r8,0x2000,COH
		return false;
	}

	ptr_job = &udd_ep_job[index - 1];

	if (Is_udd_endpoint_stall_requested(index) // Endpoint stalled
8000501c:	c0 30       	breq	80005022 <udd_ep_set_halt+0x6a>
			|| ptr_job->stall_requested) { // Endpoint stall is requested
		return true; // Already STALL
8000501e:	30 18       	mov	r8,1
80005020:	c5 08       	rjmp	800050c0 <udd_ep_set_halt+0x108>
	}

	if (ptr_job->busy == true) {
80005022:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005026:	70 08       	ld.w	r8,r8[0x0]
80005028:	e6 18 80 00 	andh	r8,0x8000,COH
8000502c:	c0 30       	breq	80005032 <udd_ep_set_halt+0x7a>
		return false; // Job on going, stall impossible
8000502e:	30 08       	mov	r8,0
80005030:	c4 88       	rjmp	800050c0 <udd_ep_set_halt+0x108>
	}

	if ((ep & USB_EP_DIR_IN) && (0 != udd_nb_busy_bank(index))) {
80005032:	ef 39 ff f4 	ld.ub	r9,r7[-12]
80005036:	30 08       	mov	r8,0
80005038:	f0 09 18 00 	cp.b	r9,r8
8000503c:	c2 54       	brge	80005086 <udd_ep_set_halt+0xce>
8000503e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80005042:	a3 68       	lsl	r8,0x2
80005044:	e0 38 fe d0 	sub	r8,130768
80005048:	70 08       	ld.w	r8,r8[0x0]
8000504a:	e2 18 30 00 	andl	r8,0x3000,COH
8000504e:	ad 88       	lsr	r8,0xc
80005050:	c1 b0       	breq	80005086 <udd_ep_set_halt+0xce>
			// Delay the stall after the end of IN transfer on USB line
			ptr_job->stall_requested = true;
80005052:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005056:	72 08       	ld.w	r8,r9[0x0]
80005058:	30 1a       	mov	r10,1
8000505a:	f1 da d3 a1 	bfins	r8,r10,0x1d,0x1
8000505e:	93 08       	st.w	r9[0x0],r8
			udd_enable_bank_interrupt(index);
80005060:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80005064:	a3 68       	lsl	r8,0x2
80005066:	e0 38 fe 10 	sub	r8,130576
8000506a:	e0 69 10 00 	mov	r9,4096
8000506e:	91 09       	st.w	r8[0x0],r9
			udd_enable_endpoint_interrupt(index);
80005070:	fe 68 00 00 	mov	r8,-131072
80005074:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80005078:	e0 6a 10 00 	mov	r10,4096
8000507c:	f4 09 09 49 	lsl	r9,r10,r9
80005080:	91 69       	st.w	r8[0x18],r9
			return true;
80005082:	30 18       	mov	r8,1
80005084:	c1 e8       	rjmp	800050c0 <udd_ep_set_halt+0x108>
	}
	
	// Stall endpoint immediately
	udd_disable_endpoint_bank_autoswitch(index);
80005086:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000508a:	a3 68       	lsl	r8,0x2
8000508c:	e0 38 ff 00 	sub	r8,130816
80005090:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80005094:	a3 69       	lsl	r9,0x2
80005096:	e0 39 ff 00 	sub	r9,130816
8000509a:	72 09       	ld.w	r9,r9[0x0]
8000509c:	a9 d9       	cbr	r9,0x9
8000509e:	91 09       	st.w	r8[0x0],r9
	udd_ack_stall(index);
800050a0:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800050a4:	a3 68       	lsl	r8,0x2
800050a6:	e0 38 fe a0 	sub	r8,130720
800050aa:	34 09       	mov	r9,64
800050ac:	91 09       	st.w	r8[0x0],r9
	udd_enable_stall_handshake(index);
800050ae:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800050b2:	a3 68       	lsl	r8,0x2
800050b4:	e0 38 fe 10 	sub	r8,130576
800050b8:	e8 69 00 00 	mov	r9,524288
800050bc:	91 09       	st.w	r8[0x0],r9
	return true;
800050be:	30 18       	mov	r8,1
}
800050c0:	10 9c       	mov	r12,r8
800050c2:	2f dd       	sub	sp,-12
800050c4:	e3 cd 80 80 	ldm	sp++,r7,pc
800050c8:	00 00       	add	r0,r0
800050ca:	06 30       	cp.w	r0,r3

800050cc <udd_ep_clear_halt>:


bool udd_ep_clear_halt(udd_ep_id_t ep)
{
800050cc:	eb cd 40 80 	pushm	r7,lr
800050d0:	1a 97       	mov	r7,sp
800050d2:	20 3d       	sub	sp,12
800050d4:	18 98       	mov	r8,r12
800050d6:	ef 68 ff f4 	st.b	r7[-12],r8
	bool b_stall_cleared = false;
800050da:	30 08       	mov	r8,0
800050dc:	ef 68 ff fb 	st.b	r7[-5],r8
	udd_ep_job_t *ptr_job;

	ep &= USB_EP_ADDR_MASK;
800050e0:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800050e4:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
800050e8:	ef 68 ff f4 	st.b	r7[-12],r8
	if (USB_DEVICE_MAX_EP < ep)
800050ec:	ef 39 ff f4 	ld.ub	r9,r7[-12]
800050f0:	30 38       	mov	r8,3
800050f2:	f0 09 18 00 	cp.b	r9,r8
800050f6:	e0 88 00 04 	brls	800050fe <udd_ep_clear_halt+0x32>
		return false;
800050fa:	30 08       	mov	r8,0
800050fc:	c8 18       	rjmp	800051fe <udd_ep_clear_halt+0x132>
	ptr_job = &udd_ep_job[ep - 1];
800050fe:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80005102:	f0 c9 00 01 	sub	r9,r8,1
80005106:	12 98       	mov	r8,r9
80005108:	a3 68       	lsl	r8,0x2
8000510a:	12 08       	add	r8,r9
8000510c:	a3 68       	lsl	r8,0x2
8000510e:	10 99       	mov	r9,r8
80005110:	4b e8       	lddpc	r8,80005208 <udd_ep_clear_halt+0x13c>
80005112:	f2 08 00 08 	add	r8,r9,r8
80005116:	ef 48 ff fc 	st.w	r7[-4],r8

	if (ptr_job->stall_requested) {
8000511a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000511e:	70 08       	ld.w	r8,r8[0x0]
80005120:	e6 18 20 00 	andh	r8,0x2000,COH
80005124:	c1 c0       	breq	8000515c <udd_ep_clear_halt+0x90>
		// Endpoint stall has been requested but not done
		// Remove stall request
		ptr_job->stall_requested = false;
80005126:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000512a:	72 08       	ld.w	r8,r9[0x0]
8000512c:	30 0a       	mov	r10,0
8000512e:	f1 da d3 a1 	bfins	r8,r10,0x1d,0x1
80005132:	93 08       	st.w	r9[0x0],r8
		udd_disable_bank_interrupt(ep);
80005134:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80005138:	a3 68       	lsl	r8,0x2
8000513a:	e0 38 fd e0 	sub	r8,130528
8000513e:	e0 69 10 00 	mov	r9,4096
80005142:	91 09       	st.w	r8[0x0],r9
		udd_disable_endpoint_interrupt(ep);
80005144:	fe 68 00 00 	mov	r8,-131072
80005148:	ef 39 ff f4 	ld.ub	r9,r7[-12]
8000514c:	e0 6a 10 00 	mov	r10,4096
80005150:	f4 09 09 49 	lsl	r9,r10,r9
80005154:	91 59       	st.w	r8[0x14],r9
		b_stall_cleared = true;
80005156:	30 18       	mov	r8,1
80005158:	ef 68 ff fb 	st.b	r7[-5],r8
	}
	if (Is_udd_endpoint_stall_requested(ep)) { 
8000515c:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80005160:	a3 68       	lsl	r8,0x2
80005162:	e0 38 fe 40 	sub	r8,130624
80005166:	70 08       	ld.w	r8,r8[0x0]
80005168:	e6 18 00 08 	andh	r8,0x8,COH
8000516c:	c3 10       	breq	800051ce <udd_ep_clear_halt+0x102>
		if (Is_udd_stall(ep)) {
8000516e:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80005172:	a3 68       	lsl	r8,0x2
80005174:	e0 38 fe d0 	sub	r8,130768
80005178:	70 08       	ld.w	r8,r8[0x0]
8000517a:	e2 18 00 40 	andl	r8,0x40,COH
8000517e:	c1 00       	breq	8000519e <udd_ep_clear_halt+0xd2>
			udd_ack_stall(ep);
80005180:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80005184:	a3 68       	lsl	r8,0x2
80005186:	e0 38 fe a0 	sub	r8,130720
8000518a:	34 09       	mov	r9,64
8000518c:	91 09       	st.w	r8[0x0],r9
			// A packet has been stalled
			// then reset datatoggle
			udd_reset_data_toggle(ep);
8000518e:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80005192:	a3 68       	lsl	r8,0x2
80005194:	e0 38 fe 10 	sub	r8,130576
80005198:	e4 69 00 00 	mov	r9,262144
8000519c:	91 09       	st.w	r8[0x0],r9
		}
		// Disable stall
		udd_disable_stall_handshake(ep);
8000519e:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800051a2:	a3 68       	lsl	r8,0x2
800051a4:	e0 38 fd e0 	sub	r8,130528
800051a8:	e8 69 00 00 	mov	r9,524288
800051ac:	91 09       	st.w	r8[0x0],r9
		udd_enable_endpoint_bank_autoswitch(ep);
800051ae:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800051b2:	a3 68       	lsl	r8,0x2
800051b4:	e0 38 ff 00 	sub	r8,130816
800051b8:	ef 39 ff f4 	ld.ub	r9,r7[-12]
800051bc:	a3 69       	lsl	r9,0x2
800051be:	e0 39 ff 00 	sub	r9,130816
800051c2:	72 09       	ld.w	r9,r9[0x0]
800051c4:	a9 b9       	sbr	r9,0x9
800051c6:	91 09       	st.w	r8[0x0],r9
		b_stall_cleared = true;
800051c8:	30 18       	mov	r8,1
800051ca:	ef 68 ff fb 	st.b	r7[-5],r8
	}
	if (b_stall_cleared) {
800051ce:	ef 39 ff fb 	ld.ub	r9,r7[-5]
800051d2:	30 08       	mov	r8,0
800051d4:	f0 09 18 00 	cp.b	r9,r8
800051d8:	c1 20       	breq	800051fc <udd_ep_clear_halt+0x130>
		// If a job is register on clear halt action
		// then execute callback
		if (ptr_job->busy == true) {
800051da:	ee f8 ff fc 	ld.w	r8,r7[-4]
800051de:	70 08       	ld.w	r8,r8[0x0]
800051e0:	e6 18 80 00 	andh	r8,0x8000,COH
800051e4:	c0 c0       	breq	800051fc <udd_ep_clear_halt+0x130>
			ptr_job->busy = false;
800051e6:	ee f9 ff fc 	ld.w	r9,r7[-4]
800051ea:	72 08       	ld.w	r8,r9[0x0]
800051ec:	30 0a       	mov	r10,0
800051ee:	f1 da d3 e1 	bfins	r8,r10,0x1f,0x1
800051f2:	93 08       	st.w	r9[0x0],r8
			ptr_job->call_nohalt();
800051f4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800051f8:	70 48       	ld.w	r8,r8[0x10]
800051fa:	5d 18       	icall	r8
		}
	}
	return true;
800051fc:	30 18       	mov	r8,1
}
800051fe:	10 9c       	mov	r12,r8
80005200:	2f dd       	sub	sp,-12
80005202:	e3 cd 80 80 	ldm	sp++,r7,pc
80005206:	00 00       	add	r0,r0
80005208:	00 00       	add	r0,r0
8000520a:	06 30       	cp.w	r0,r3

8000520c <udd_ep_run>:


bool udd_ep_run(udd_ep_id_t ep, bool b_shortpacket,
		uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
8000520c:	eb cd 40 80 	pushm	r7,lr
80005210:	1a 97       	mov	r7,sp
80005212:	20 7d       	sub	sp,28
80005214:	ef 4a ff ec 	st.w	r7[-20],r10
80005218:	ef 49 ff e8 	st.w	r7[-24],r9
8000521c:	ef 48 ff e4 	st.w	r7[-28],r8
80005220:	18 98       	mov	r8,r12
80005222:	ef 68 ff f4 	st.b	r7[-12],r8
80005226:	16 98       	mov	r8,r11
80005228:	ef 68 ff f0 	st.b	r7[-16],r8
	udd_ep_job_t *ptr_job;
	irqflags_t flags;

	ep &= USB_EP_ADDR_MASK;
8000522c:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80005230:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80005234:	ef 68 ff f4 	st.b	r7[-12],r8
	if (USB_DEVICE_MAX_EP < ep) {
80005238:	ef 39 ff f4 	ld.ub	r9,r7[-12]
8000523c:	30 38       	mov	r8,3
8000523e:	f0 09 18 00 	cp.b	r9,r8
80005242:	e0 88 00 04 	brls	8000524a <udd_ep_run+0x3e>
		return false;
80005246:	30 08       	mov	r8,0
80005248:	c6 88       	rjmp	80005318 <udd_ep_run+0x10c>
	}

	// Get job about endpoint
	ptr_job = &udd_ep_job[ep - 1];
8000524a:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000524e:	f0 c9 00 01 	sub	r9,r8,1
80005252:	12 98       	mov	r8,r9
80005254:	a3 68       	lsl	r8,0x2
80005256:	12 08       	add	r8,r9
80005258:	a3 68       	lsl	r8,0x2
8000525a:	10 99       	mov	r9,r8
8000525c:	4b 18       	lddpc	r8,80005320 <udd_ep_run+0x114>
8000525e:	f2 08 00 08 	add	r8,r9,r8
80005262:	ef 48 ff f8 	st.w	r7[-8],r8

	if ((!Is_udd_endpoint_enabled(ep))
80005266:	fe 68 00 00 	mov	r8,-131072
8000526a:	70 79       	ld.w	r9,r8[0x1c]
8000526c:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80005270:	30 1a       	mov	r10,1
80005272:	f4 08 09 48 	lsl	r8,r10,r8
80005276:	f3 e8 00 08 	and	r8,r9,r8
8000527a:	c1 00       	breq	8000529a <udd_ep_run+0x8e>
			|| Is_udd_endpoint_stall_requested(ep)
8000527c:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80005280:	a3 68       	lsl	r8,0x2
80005282:	e0 38 fe 40 	sub	r8,130624
80005286:	70 08       	ld.w	r8,r8[0x0]
80005288:	e6 18 00 08 	andh	r8,0x8,COH
	}

	// Get job about endpoint
	ptr_job = &udd_ep_job[ep - 1];

	if ((!Is_udd_endpoint_enabled(ep))
8000528c:	c0 71       	brne	8000529a <udd_ep_run+0x8e>
			|| Is_udd_endpoint_stall_requested(ep)
			|| ptr_job->stall_requested) {
8000528e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005292:	70 08       	ld.w	r8,r8[0x0]
80005294:	e6 18 20 00 	andh	r8,0x2000,COH
	}

	// Get job about endpoint
	ptr_job = &udd_ep_job[ep - 1];

	if ((!Is_udd_endpoint_enabled(ep))
80005298:	c0 30       	breq	8000529e <udd_ep_run+0x92>
			|| Is_udd_endpoint_stall_requested(ep)
			|| ptr_job->stall_requested) {
		return false; // Endpoint is halted
8000529a:	30 08       	mov	r8,0
8000529c:	c3 e8       	rjmp	80005318 <udd_ep_run+0x10c>
	}

	flags = cpu_irq_save();
8000529e:	f0 1f 00 22 	mcall	80005324 <udd_ep_run+0x118>
800052a2:	18 98       	mov	r8,r12
800052a4:	ef 48 ff fc 	st.w	r7[-4],r8
	if (ptr_job->busy == true) {
800052a8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800052ac:	70 08       	ld.w	r8,r8[0x0]
800052ae:	e6 18 80 00 	andh	r8,0x8000,COH
800052b2:	c0 70       	breq	800052c0 <udd_ep_run+0xb4>
		cpu_irq_restore(flags);
800052b4:	ee fc ff fc 	ld.w	r12,r7[-4]
800052b8:	f0 1f 00 1c 	mcall	80005328 <udd_ep_run+0x11c>
		return false; // Job already on going
800052bc:	30 08       	mov	r8,0
800052be:	c2 d8       	rjmp	80005318 <udd_ep_run+0x10c>
	}
	ptr_job->busy = true;
800052c0:	ee f9 ff f8 	ld.w	r9,r7[-8]
800052c4:	72 08       	ld.w	r8,r9[0x0]
800052c6:	30 1a       	mov	r10,1
800052c8:	f1 da d3 e1 	bfins	r8,r10,0x1f,0x1
800052cc:	93 08       	st.w	r9[0x0],r8
	cpu_irq_restore(flags);
800052ce:	ee fc ff fc 	ld.w	r12,r7[-4]
800052d2:	f0 1f 00 16 	mcall	80005328 <udd_ep_run+0x11c>

	// No job running. Let's setup a new one.
	//
	ptr_job->buf = buf;
800052d6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800052da:	ee f9 ff ec 	ld.w	r9,r7[-20]
800052de:	91 19       	st.w	r8[0x4],r9
	ptr_job->buf_size = buf_size;
800052e0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800052e4:	ee f9 ff e8 	ld.w	r9,r7[-24]
800052e8:	91 29       	st.w	r8[0x8],r9
	ptr_job->nb_trans = 0;
800052ea:	ee f8 ff f8 	ld.w	r8,r7[-8]
800052ee:	30 09       	mov	r9,0
800052f0:	91 39       	st.w	r8[0xc],r9
	ptr_job->call_trans = callback;
800052f2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800052f6:	ee f9 ff e4 	ld.w	r9,r7[-28]
800052fa:	91 49       	st.w	r8[0x10],r9
	ptr_job->b_shortpacket = b_shortpacket;
800052fc:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005300:	72 08       	ld.w	r8,r9[0x0]
80005302:	ef 3a ff f0 	ld.ub	r10,r7[-16]
80005306:	f1 da d3 c1 	bfins	r8,r10,0x1e,0x1
8000530a:	93 08       	st.w	r9[0x0],r8


	// Request first transfer
	udd_ep_trans_done(ep);
8000530c:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80005310:	10 9c       	mov	r12,r8
80005312:	f0 1f 00 07 	mcall	8000532c <udd_ep_run+0x120>
	return true;
80005316:	30 18       	mov	r8,1
}
80005318:	10 9c       	mov	r12,r8
8000531a:	2f 9d       	sub	sp,-28
8000531c:	e3 cd 80 80 	ldm	sp++,r7,pc
80005320:	00 00       	add	r0,r0
80005322:	06 30       	cp.w	r0,r3
80005324:	80 00       	ld.sh	r0,r0[0x0]
80005326:	45 98       	lddsp	r8,sp[0x164]
80005328:	80 00       	ld.sh	r0,r0[0x0]
8000532a:	45 d8       	lddsp	r8,sp[0x174]
8000532c:	80 00       	ld.sh	r0,r0[0x0]
8000532e:	5d ac       	*unknown*

80005330 <udd_ep_abort>:


void udd_ep_abort(udd_ep_id_t ep)
{
80005330:	eb cd 40 80 	pushm	r7,lr
80005334:	1a 97       	mov	r7,sp
80005336:	20 2d       	sub	sp,8
80005338:	18 98       	mov	r8,r12
8000533a:	ef 68 ff f8 	st.b	r7[-8],r8
	uint8_t index = ep & USB_EP_ADDR_MASK;
8000533e:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80005342:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80005346:	ef 68 ff ff 	st.b	r7[-1],r8

	// Stop DMA transfer
	udd_disable_endpoint_dma_interrupt(index);
8000534a:	fe 68 00 00 	mov	r8,-131072
8000534e:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80005352:	20 19       	sub	r9,1
80005354:	fc 1a 02 00 	movh	r10,0x200
80005358:	f4 09 09 49 	lsl	r9,r10,r9
8000535c:	91 59       	st.w	r8[0x14],r9
	udd_endpoint_dma_set_control(index, 0);
8000535e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80005362:	a5 68       	lsl	r8,0x4
80005364:	e0 38 fd 00 	sub	r8,130304
80005368:	30 09       	mov	r9,0
8000536a:	91 29       	st.w	r8[0x8],r9
	// Kill banks
	udd_disable_endpoint_interrupt(index);
8000536c:	fe 68 00 00 	mov	r8,-131072
80005370:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80005374:	e0 6a 10 00 	mov	r10,4096
80005378:	f4 09 09 49 	lsl	r9,r10,r9
8000537c:	91 59       	st.w	r8[0x14],r9
	while (udd_nb_busy_bank(index)) {
8000537e:	c1 28       	rjmp	800053a2 <udd_ep_abort+0x72>
		udd_kill_last_in_bank(index);
80005380:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80005384:	a3 68       	lsl	r8,0x2
80005386:	e0 38 fe 10 	sub	r8,130576
8000538a:	e0 69 20 00 	mov	r9,8192
8000538e:	91 09       	st.w	r8[0x0],r9
		while(Is_udd_killing_last_in_bank(index));
80005390:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80005394:	a3 68       	lsl	r8,0x2
80005396:	e0 38 fe 40 	sub	r8,130624
8000539a:	70 08       	ld.w	r8,r8[0x0]
8000539c:	e2 18 20 00 	andl	r8,0x2000,COH
800053a0:	cf 81       	brne	80005390 <udd_ep_abort+0x60>
	// Stop DMA transfer
	udd_disable_endpoint_dma_interrupt(index);
	udd_endpoint_dma_set_control(index, 0);
	// Kill banks
	udd_disable_endpoint_interrupt(index);
	while (udd_nb_busy_bank(index)) {
800053a2:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800053a6:	a3 68       	lsl	r8,0x2
800053a8:	e0 38 fe d0 	sub	r8,130768
800053ac:	70 08       	ld.w	r8,r8[0x0]
800053ae:	e2 18 30 00 	andl	r8,0x3000,COH
800053b2:	ad 88       	lsr	r8,0xc
800053b4:	ce 61       	brne	80005380 <udd_ep_abort+0x50>
		udd_kill_last_in_bank(index);
		while(Is_udd_killing_last_in_bank(index));
	}
	udd_ep_abort_job(ep);
800053b6:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800053ba:	10 9c       	mov	r12,r8
800053bc:	f0 1f 00 03 	mcall	800053c8 <udd_ep_abort+0x98>
}
800053c0:	2f ed       	sub	sp,-8
800053c2:	e3 cd 80 80 	ldm	sp++,r7,pc
800053c6:	00 00       	add	r0,r0
800053c8:	80 00       	ld.sh	r0,r0[0x0]
800053ca:	5c dc       	com	r12

800053cc <udd_reset_ep_ctrl>:

//--------------------------------------------------------
//--- INTERNAL ROUTINES TO MANAGED THE CONTROL ENDPOINT

static void udd_reset_ep_ctrl(void)
{
800053cc:	eb cd 40 80 	pushm	r7,lr
800053d0:	1a 97       	mov	r7,sp
800053d2:	20 7d       	sub	sp,28
	irqflags_t flags;

	// Reset USB address to 0
	udd_configure_address(0);
800053d4:	fe 68 00 00 	mov	r8,-131072
800053d8:	fe 69 00 00 	mov	r9,-131072
800053dc:	72 09       	ld.w	r9,r9[0x0]
800053de:	e0 19 ff 80 	andl	r9,0xff80
800053e2:	91 09       	st.w	r8[0x0],r9
	udd_enable_address();
800053e4:	fe 68 00 00 	mov	r8,-131072
800053e8:	fe 69 00 00 	mov	r9,-131072
800053ec:	72 09       	ld.w	r9,r9[0x0]
800053ee:	a7 b9       	sbr	r9,0x7
800053f0:	91 09       	st.w	r8[0x0],r9

	// Alloc and configure control endpoint
	udd_configure_endpoint(0,
800053f2:	fe 68 01 00 	mov	r8,-130816
800053f6:	fe 69 01 00 	mov	r9,-130816
800053fa:	72 09       	ld.w	r9,r9[0x0]
800053fc:	12 9a       	mov	r10,r9
800053fe:	e0 1a e6 83 	andl	r10,0xe683
80005402:	34 09       	mov	r9,64
80005404:	ef 49 ff f8 	st.w	r7[-8],r9
80005408:	30 89       	mov	r9,8
8000540a:	ef 49 ff fc 	st.w	r7[-4],r9
8000540e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005412:	ee fb ff fc 	ld.w	r11,r7[-4]
80005416:	f2 0b 0c 49 	max	r9,r9,r11
8000541a:	ef 49 ff f4 	st.w	r7[-12],r9
8000541e:	ee f9 ff f4 	ld.w	r9,r7[-12]
80005422:	ef 49 ff ec 	st.w	r7[-20],r9
80005426:	e0 69 04 00 	mov	r9,1024
8000542a:	ef 49 ff f0 	st.w	r7[-16],r9
8000542e:	ee f9 ff ec 	ld.w	r9,r7[-20]
80005432:	ee fb ff f0 	ld.w	r11,r7[-16]
80005436:	f2 0b 0d 49 	min	r9,r9,r11
8000543a:	ef 49 ff e8 	st.w	r7[-24],r9
8000543e:	ee f9 ff e8 	ld.w	r9,r7[-24]
80005442:	a1 79       	lsl	r9,0x1
80005444:	20 19       	sub	r9,1
80005446:	f2 09 12 00 	clz	r9,r9
8000544a:	f2 09 11 1c 	rsub	r9,r9,28
8000544e:	a5 69       	lsl	r9,0x4
80005450:	e2 19 19 7c 	andl	r9,0x197c,COH
80005454:	f5 e9 10 09 	or	r9,r10,r9
80005458:	91 09       	st.w	r8[0x0],r9
			USB_EP_TYPE_CONTROL,
			0,
			USB_DEVICE_EP_CTRL_SIZE, AVR32_USBB_UECFG0_EPBK_SINGLE);

	udd_allocate_memory(0);
8000545a:	fe 68 01 00 	mov	r8,-130816
8000545e:	fe 69 01 00 	mov	r9,-130816
80005462:	72 09       	ld.w	r9,r9[0x0]
80005464:	a1 b9       	sbr	r9,0x1
80005466:	91 09       	st.w	r8[0x0],r9
	udd_enable_endpoint(0);
80005468:	fe 68 00 00 	mov	r8,-131072
8000546c:	fe 69 00 00 	mov	r9,-131072
80005470:	72 79       	ld.w	r9,r9[0x1c]
80005472:	a1 a9       	sbr	r9,0x0
80005474:	91 79       	st.w	r8[0x1c],r9
	flags = cpu_irq_save();
80005476:	f0 1f 00 0d 	mcall	800054a8 <udd_reset_ep_ctrl+0xdc>
8000547a:	18 98       	mov	r8,r12
8000547c:	ef 48 ff e4 	st.w	r7[-28],r8
	udd_enable_setup_received_interrupt(0);
80005480:	fe 68 01 f0 	mov	r8,-130576
80005484:	30 49       	mov	r9,4
80005486:	91 09       	st.w	r8[0x0],r9
	udd_enable_out_received_interrupt(0);
80005488:	fe 68 01 f0 	mov	r8,-130576
8000548c:	30 29       	mov	r9,2
8000548e:	91 09       	st.w	r8[0x0],r9
	udd_enable_endpoint_interrupt(0);
80005490:	fe 68 00 00 	mov	r8,-131072
80005494:	e0 69 10 00 	mov	r9,4096
80005498:	91 69       	st.w	r8[0x18],r9
	cpu_irq_restore(flags);
8000549a:	ee fc ff e4 	ld.w	r12,r7[-28]
8000549e:	f0 1f 00 04 	mcall	800054ac <udd_reset_ep_ctrl+0xe0>
}
800054a2:	2f 9d       	sub	sp,-28
800054a4:	e3 cd 80 80 	ldm	sp++,r7,pc
800054a8:	80 00       	ld.sh	r0,r0[0x0]
800054aa:	45 98       	lddsp	r8,sp[0x164]
800054ac:	80 00       	ld.sh	r0,r0[0x0]
800054ae:	45 d8       	lddsp	r8,sp[0x174]

800054b0 <udd_ctrl_init>:

static void udd_ctrl_init(void)
{
800054b0:	eb cd 40 80 	pushm	r7,lr
800054b4:	1a 97       	mov	r7,sp
800054b6:	20 1d       	sub	sp,4
	irqflags_t flags;
	flags = cpu_irq_save();
800054b8:	f0 1f 00 10 	mcall	800054f8 <udd_ctrl_init+0x48>
800054bc:	18 98       	mov	r8,r12
800054be:	ef 48 ff fc 	st.w	r7[-4],r8
	// In case of abort of IN Data Phase:
	// No need to abort IN transfer (rise TXINI),
	// because it is automatically done by hardware when a Setup packet is received.
	// But the interrupt must be disabled to don't generate interrupt TXINI
	// after SETUP reception.
	udd_disable_in_send_interrupt(0);
800054c2:	fe 68 02 20 	mov	r8,-130528
800054c6:	30 19       	mov	r9,1
800054c8:	91 09       	st.w	r8[0x0],r9
	cpu_irq_restore(flags);
800054ca:	ee fc ff fc 	ld.w	r12,r7[-4]
800054ce:	f0 1f 00 0c 	mcall	800054fc <udd_ctrl_init+0x4c>

	// In case of OUT ZLP event is no processed before Setup event occurs
	udd_ack_out_received(0);
800054d2:	fe 68 01 60 	mov	r8,-130720
800054d6:	30 29       	mov	r9,2
800054d8:	91 09       	st.w	r8[0x0],r9

	udd_g_ctrlreq.callback = NULL;
800054da:	48 a8       	lddpc	r8,80005500 <udd_ctrl_init+0x50>
800054dc:	30 09       	mov	r9,0
800054de:	91 49       	st.w	r8[0x10],r9
	udd_g_ctrlreq.over_under_run = NULL;
800054e0:	48 88       	lddpc	r8,80005500 <udd_ctrl_init+0x50>
800054e2:	30 09       	mov	r9,0
800054e4:	91 59       	st.w	r8[0x14],r9
	udd_g_ctrlreq.payload_size = 0;
800054e6:	48 79       	lddpc	r9,80005500 <udd_ctrl_init+0x50>
800054e8:	30 08       	mov	r8,0
800054ea:	b2 68       	st.h	r9[0xc],r8
	udd_ep_control_state = UDD_EPCTRL_SETUP;
800054ec:	48 68       	lddpc	r8,80005504 <udd_ctrl_init+0x54>
800054ee:	30 09       	mov	r9,0
800054f0:	91 09       	st.w	r8[0x0],r9
}
800054f2:	2f fd       	sub	sp,-4
800054f4:	e3 cd 80 80 	ldm	sp++,r7,pc
800054f8:	80 00       	ld.sh	r0,r0[0x0]
800054fa:	45 98       	lddsp	r8,sp[0x164]
800054fc:	80 00       	ld.sh	r0,r0[0x0]
800054fe:	45 d8       	lddsp	r8,sp[0x174]
80005500:	00 00       	add	r0,r0
80005502:	0b 20       	ld.uh	r0,r5++
80005504:	00 00       	add	r0,r0
80005506:	06 28       	rsub	r8,r3

80005508 <udd_ctrl_setup_received>:


static void udd_ctrl_setup_received(void)
{
80005508:	eb cd 40 80 	pushm	r7,lr
8000550c:	1a 97       	mov	r7,sp
8000550e:	20 3d       	sub	sp,12
	irqflags_t flags;
	uint8_t i;

	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
80005510:	4c b8       	lddpc	r8,8000563c <udd_ctrl_setup_received+0x134>
80005512:	70 08       	ld.w	r8,r8[0x0]
80005514:	58 08       	cp.w	r8,0
80005516:	c0 50       	breq	80005520 <udd_ctrl_setup_received+0x18>
		// May be a hidden DATA or ZLP phase
		// or protocol abort
		udd_ctrl_endofrequest();
80005518:	f0 1f 00 4a 	mcall	80005640 <udd_ctrl_setup_received+0x138>

		// Reinitializes control endpoint management
		udd_ctrl_init();
8000551c:	f0 1f 00 4a 	mcall	80005644 <udd_ctrl_setup_received+0x13c>
	}
	// Fill setup request structure
	if (8 != udd_byte_count(0)) {
80005520:	fe 68 01 30 	mov	r8,-130768
80005524:	70 08       	ld.w	r8,r8[0x0]
80005526:	e6 18 7f f0 	andh	r8,0x7ff0,COH
8000552a:	b5 88       	lsr	r8,0x14
8000552c:	58 88       	cp.w	r8,8
8000552e:	c0 80       	breq	8000553e <udd_ctrl_setup_received+0x36>
		udd_ctrl_stall_data();
80005530:	f0 1f 00 46 	mcall	80005648 <udd_ctrl_setup_received+0x140>
		udd_ack_setup_received(0);
80005534:	fe 68 01 60 	mov	r8,-130720
80005538:	30 49       	mov	r9,4
8000553a:	91 09       	st.w	r8[0x0],r9
		return; // Error data number doesn't correspond to SETUP packet
8000553c:	c7 d8       	rjmp	80005636 <udd_ctrl_setup_received+0x12e>
	}
	uint8_t *ptr = (uint8_t *) & udd_get_endpoint_fifo_access(0,8);
8000553e:	fc 18 e0 00 	movh	r8,0xe000
80005542:	ef 48 ff fc 	st.w	r7[-4],r8
	for (i = 0; i < 8; i++) {
80005546:	30 08       	mov	r8,0
80005548:	ef 68 ff fb 	st.b	r7[-5],r8
8000554c:	c1 38       	rjmp	80005572 <udd_ctrl_setup_received+0x6a>
		((uint8_t*) &udd_g_ctrlreq.req)[i] = *ptr++;
8000554e:	ef 39 ff fb 	ld.ub	r9,r7[-5]
80005552:	4b f8       	lddpc	r8,8000564c <udd_ctrl_setup_received+0x144>
80005554:	10 09       	add	r9,r8
80005556:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000555a:	11 88       	ld.ub	r8,r8[0x0]
8000555c:	b2 88       	st.b	r9[0x0],r8
8000555e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005562:	2f f8       	sub	r8,-1
80005564:	ef 48 ff fc 	st.w	r7[-4],r8
		udd_ctrl_stall_data();
		udd_ack_setup_received(0);
		return; // Error data number doesn't correspond to SETUP packet
	}
	uint8_t *ptr = (uint8_t *) & udd_get_endpoint_fifo_access(0,8);
	for (i = 0; i < 8; i++) {
80005568:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000556c:	2f f8       	sub	r8,-1
8000556e:	ef 68 ff fb 	st.b	r7[-5],r8
80005572:	ef 39 ff fb 	ld.ub	r9,r7[-5]
80005576:	30 78       	mov	r8,7
80005578:	f0 09 18 00 	cp.b	r9,r8
8000557c:	fe 98 ff e9 	brls	8000554e <udd_ctrl_setup_received+0x46>
		((uint8_t*) &udd_g_ctrlreq.req)[i] = *ptr++;
	}
	// Manage LSB/MSB to fit with CPU usage
	udd_g_ctrlreq.req.wValue = le16_to_cpu(udd_g_ctrlreq.req.wValue);
80005580:	4b 38       	lddpc	r8,8000564c <udd_ctrl_setup_received+0x144>
80005582:	90 18       	ld.sh	r8,r8[0x2]
80005584:	5c 88       	casts.h	r8
80005586:	5c c8       	swap.bh	r8
80005588:	5c 88       	casts.h	r8
8000558a:	4b 19       	lddpc	r9,8000564c <udd_ctrl_setup_received+0x144>
8000558c:	b2 18       	st.h	r9[0x2],r8
	udd_g_ctrlreq.req.wIndex = le16_to_cpu(udd_g_ctrlreq.req.wIndex);
8000558e:	4b 08       	lddpc	r8,8000564c <udd_ctrl_setup_received+0x144>
80005590:	90 28       	ld.sh	r8,r8[0x4]
80005592:	5c 88       	casts.h	r8
80005594:	5c c8       	swap.bh	r8
80005596:	5c 88       	casts.h	r8
80005598:	4a d9       	lddpc	r9,8000564c <udd_ctrl_setup_received+0x144>
8000559a:	b2 28       	st.h	r9[0x4],r8
	udd_g_ctrlreq.req.wLength = le16_to_cpu(udd_g_ctrlreq.req.wLength);
8000559c:	4a c8       	lddpc	r8,8000564c <udd_ctrl_setup_received+0x144>
8000559e:	90 38       	ld.sh	r8,r8[0x6]
800055a0:	5c 88       	casts.h	r8
800055a2:	5c c8       	swap.bh	r8
800055a4:	5c 88       	casts.h	r8
800055a6:	4a a9       	lddpc	r9,8000564c <udd_ctrl_setup_received+0x144>
800055a8:	b2 38       	st.h	r9[0x6],r8

	// Decode setup request
	if (udc_process_setup() == false) {
800055aa:	f0 1f 00 2a 	mcall	80005650 <udd_ctrl_setup_received+0x148>
800055ae:	18 98       	mov	r8,r12
800055b0:	ec 18 00 01 	eorl	r8,0x1
800055b4:	5c 58       	castu.b	r8
800055b6:	c0 80       	breq	800055c6 <udd_ctrl_setup_received+0xbe>
		// Setup request unknown then stall it
		udd_ctrl_stall_data();
800055b8:	f0 1f 00 24 	mcall	80005648 <udd_ctrl_setup_received+0x140>
		udd_ack_setup_received(0);
800055bc:	fe 68 01 60 	mov	r8,-130720
800055c0:	30 49       	mov	r9,4
800055c2:	91 09       	st.w	r8[0x0],r9
		return;
800055c4:	c3 98       	rjmp	80005636 <udd_ctrl_setup_received+0x12e>
	}
	udd_ack_setup_received(0);
800055c6:	fe 68 01 60 	mov	r8,-130720
800055ca:	30 49       	mov	r9,4
800055cc:	91 09       	st.w	r8[0x0],r9

	if (Udd_setup_is_in()) {
800055ce:	4a 08       	lddpc	r8,8000564c <udd_ctrl_setup_received+0x144>
800055d0:	11 88       	ld.ub	r8,r8[0x0]
800055d2:	10 99       	mov	r9,r8
800055d4:	30 08       	mov	r8,0
800055d6:	f0 09 18 00 	cp.b	r9,r8
800055da:	c0 d4       	brge	800055f4 <udd_ctrl_setup_received+0xec>
		// IN data phase requested
		udd_ctrl_prev_payload_nb_trans = 0;
800055dc:	49 e9       	lddpc	r9,80005654 <udd_ctrl_setup_received+0x14c>
800055de:	30 08       	mov	r8,0
800055e0:	b2 08       	st.h	r9[0x0],r8
		udd_ctrl_payload_nb_trans = 0;
800055e2:	49 e9       	lddpc	r9,80005658 <udd_ctrl_setup_received+0x150>
800055e4:	30 08       	mov	r8,0
800055e6:	b2 08       	st.h	r9[0x0],r8
		udd_ep_control_state = UDD_EPCTRL_DATA_IN;
800055e8:	49 58       	lddpc	r8,8000563c <udd_ctrl_setup_received+0x134>
800055ea:	30 29       	mov	r9,2
800055ec:	91 09       	st.w	r8[0x0],r9
		udd_ctrl_in_sent(); // Send first data transfer
800055ee:	f0 1f 00 1c 	mcall	8000565c <udd_ctrl_setup_received+0x154>
800055f2:	c2 28       	rjmp	80005636 <udd_ctrl_setup_received+0x12e>
	} else {
		if (0 == udd_g_ctrlreq.req.wLength) {
800055f4:	49 68       	lddpc	r8,8000564c <udd_ctrl_setup_received+0x144>
800055f6:	90 38       	ld.sh	r8,r8[0x6]
800055f8:	58 08       	cp.w	r8,0
800055fa:	c0 41       	brne	80005602 <udd_ctrl_setup_received+0xfa>
			// No data phase requested
			// Send IN ZLP to ACK setup request
			udd_ctrl_send_zlp_in();
800055fc:	f0 1f 00 19 	mcall	80005660 <udd_ctrl_setup_received+0x158>
			return;
80005600:	c1 b8       	rjmp	80005636 <udd_ctrl_setup_received+0x12e>
		}
		// OUT data phase requested
		udd_ctrl_prev_payload_nb_trans = 0;
80005602:	49 59       	lddpc	r9,80005654 <udd_ctrl_setup_received+0x14c>
80005604:	30 08       	mov	r8,0
80005606:	b2 08       	st.h	r9[0x0],r8
		udd_ctrl_payload_nb_trans = 0;
80005608:	49 49       	lddpc	r9,80005658 <udd_ctrl_setup_received+0x150>
8000560a:	30 08       	mov	r8,0
8000560c:	b2 08       	st.h	r9[0x0],r8
		udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
8000560e:	48 c8       	lddpc	r8,8000563c <udd_ctrl_setup_received+0x134>
80005610:	30 19       	mov	r9,1
80005612:	91 09       	st.w	r8[0x0],r9
		// To detect a protocol error, enable nak interrupt on data IN phase
		udd_ack_nak_in(0);
80005614:	fe 68 01 60 	mov	r8,-130720
80005618:	31 09       	mov	r9,16
8000561a:	91 09       	st.w	r8[0x0],r9
		flags = cpu_irq_save();
8000561c:	f0 1f 00 12 	mcall	80005664 <udd_ctrl_setup_received+0x15c>
80005620:	18 98       	mov	r8,r12
80005622:	ef 48 ff f4 	st.w	r7[-12],r8
		udd_enable_nak_in_interrupt(0);
80005626:	fe 68 01 f0 	mov	r8,-130576
8000562a:	31 09       	mov	r9,16
8000562c:	91 09       	st.w	r8[0x0],r9
		cpu_irq_restore(flags);
8000562e:	ee fc ff f4 	ld.w	r12,r7[-12]
80005632:	f0 1f 00 0e 	mcall	80005668 <udd_ctrl_setup_received+0x160>
	}
}
80005636:	2f dd       	sub	sp,-12
80005638:	e3 cd 80 80 	ldm	sp++,r7,pc
8000563c:	00 00       	add	r0,r0
8000563e:	06 28       	rsub	r8,r3
80005640:	80 00       	ld.sh	r0,r0[0x0]
80005642:	5b 30       	cp.w	r0,-13
80005644:	80 00       	ld.sh	r0,r0[0x0]
80005646:	54 b0       	stdsp	sp[0x12c],r0
80005648:	80 00       	ld.sh	r0,r0[0x0]
8000564a:	5a 78       	cp.w	r8,-25
8000564c:	00 00       	add	r0,r0
8000564e:	0b 20       	ld.uh	r0,r5++
80005650:	80 00       	ld.sh	r0,r0[0x0]
80005652:	7c b8       	ld.w	r8,lr[0x2c]
80005654:	00 00       	add	r0,r0
80005656:	06 2c       	rsub	r12,r3
80005658:	00 00       	add	r0,r0
8000565a:	06 2e       	rsub	lr,r3
8000565c:	80 00       	ld.sh	r0,r0[0x0]
8000565e:	56 6c       	stdsp	sp[0x198],r12
80005660:	80 00       	ld.sh	r0,r0[0x0]
80005662:	5a 98       	cp.w	r8,-23
80005664:	80 00       	ld.sh	r0,r0[0x0]
80005666:	45 98       	lddsp	r8,sp[0x164]
80005668:	80 00       	ld.sh	r0,r0[0x0]
8000566a:	45 d8       	lddsp	r8,sp[0x174]

8000566c <udd_ctrl_in_sent>:


static void udd_ctrl_in_sent(void)
{
8000566c:	eb cd 40 80 	pushm	r7,lr
80005670:	1a 97       	mov	r7,sp
80005672:	20 4d       	sub	sp,16
	uint16_t nb_remain;
	uint8_t i;
	uint8_t *ptr_dest, *ptr_src;
	irqflags_t flags;

	flags = cpu_irq_save();
80005674:	f0 1f 00 5c 	mcall	800057e4 <udd_ctrl_in_sent+0x178>
80005678:	18 98       	mov	r8,r12
8000567a:	ef 48 ff fc 	st.w	r7[-4],r8
	udd_disable_in_send_interrupt(0);
8000567e:	fe 68 02 20 	mov	r8,-130528
80005682:	30 19       	mov	r9,1
80005684:	91 09       	st.w	r8[0x0],r9
	cpu_irq_restore(flags);
80005686:	ee fc ff fc 	ld.w	r12,r7[-4]
8000568a:	f0 1f 00 58 	mcall	800057e8 <udd_ctrl_in_sent+0x17c>

	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
8000568e:	4d 88       	lddpc	r8,800057ec <udd_ctrl_in_sent+0x180>
80005690:	70 08       	ld.w	r8,r8[0x0]
80005692:	58 38       	cp.w	r8,3
80005694:	c0 61       	brne	800056a0 <udd_ctrl_in_sent+0x34>
		// ZLP on IN is sent, then valid end of setup request
		udd_ctrl_endofrequest();
80005696:	f0 1f 00 57 	mcall	800057f0 <udd_ctrl_in_sent+0x184>
		// Reinitializes control endpoint management
		udd_ctrl_init();
8000569a:	f0 1f 00 57 	mcall	800057f4 <udd_ctrl_in_sent+0x188>
		return;
8000569e:	c9 f8       	rjmp	800057dc <udd_ctrl_in_sent+0x170>
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_IN);

	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
800056a0:	4d 68       	lddpc	r8,800057f8 <udd_ctrl_in_sent+0x18c>
800056a2:	90 69       	ld.sh	r9,r8[0xc]
800056a4:	4d 68       	lddpc	r8,800057fc <udd_ctrl_in_sent+0x190>
800056a6:	90 08       	ld.sh	r8,r8[0x0]
800056a8:	10 19       	sub	r9,r8
800056aa:	ef 59 ff f0 	st.h	r7[-16],r9
	if (0 == nb_remain) {
800056ae:	ef 09 ff f0 	ld.sh	r9,r7[-16]
800056b2:	30 08       	mov	r8,0
800056b4:	f0 09 19 00 	cp.h	r9,r8
800056b8:	c2 b1       	brne	8000570e <udd_ctrl_in_sent+0xa2>
		// All content of current buffer payload are sent
		// Update number of total data sending by previous payload buffer
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
800056ba:	4d 28       	lddpc	r8,80005800 <udd_ctrl_in_sent+0x194>
800056bc:	90 09       	ld.sh	r9,r8[0x0]
800056be:	4d 08       	lddpc	r8,800057fc <udd_ctrl_in_sent+0x190>
800056c0:	90 08       	ld.sh	r8,r8[0x0]
800056c2:	f2 08 00 08 	add	r8,r9,r8
800056c6:	5c 88       	casts.h	r8
800056c8:	4c e9       	lddpc	r9,80005800 <udd_ctrl_in_sent+0x194>
800056ca:	b2 08       	st.h	r9[0x0],r8
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_nb_trans)
800056cc:	4c b8       	lddpc	r8,800057f8 <udd_ctrl_in_sent+0x18c>
800056ce:	90 39       	ld.sh	r9,r8[0x6]
800056d0:	4c c8       	lddpc	r8,80005800 <udd_ctrl_in_sent+0x194>
800056d2:	90 08       	ld.sh	r8,r8[0x0]
800056d4:	f0 09 19 00 	cp.h	r9,r8
800056d8:	c0 50       	breq	800056e2 <udd_ctrl_in_sent+0x76>
800056da:	4c b8       	lddpc	r8,80005804 <udd_ctrl_in_sent+0x198>
800056dc:	11 88       	ld.ub	r8,r8[0x0]
800056de:	58 08       	cp.w	r8,0
800056e0:	c0 40       	breq	800056e8 <udd_ctrl_in_sent+0x7c>
					|| b_shortpacket) {
			// All data requested are transfered or a short packet has been sent
			// then it is the end of data phase.
			// Generate an OUT ZLP for handshake phase.
			udd_ctrl_send_zlp_out();
800056e2:	f0 1f 00 4a 	mcall	80005808 <udd_ctrl_in_sent+0x19c>
			return;
800056e6:	c7 b8       	rjmp	800057dc <udd_ctrl_in_sent+0x170>
		}
		// Need of new buffer because the data phase is not complete
		if ((!udd_g_ctrlreq.over_under_run)
800056e8:	4c 48       	lddpc	r8,800057f8 <udd_ctrl_in_sent+0x18c>
800056ea:	70 58       	ld.w	r8,r8[0x14]
800056ec:	58 08       	cp.w	r8,0
800056ee:	c1 00       	breq	8000570e <udd_ctrl_in_sent+0xa2>
800056f0:	4c 28       	lddpc	r8,800057f8 <udd_ctrl_in_sent+0x18c>
800056f2:	70 58       	ld.w	r8,r8[0x14]
800056f4:	5d 18       	icall	r8
800056f6:	18 98       	mov	r8,r12
800056f8:	ec 18 00 01 	eorl	r8,0x1
800056fc:	5c 58       	castu.b	r8
800056fe:	c0 81       	brne	8000570e <udd_ctrl_in_sent+0xa2>
				|| (!udd_g_ctrlreq.over_under_run())) {
			// Underrun then send zlp on IN
			// Here nb_remain=0 and allows to send a IN ZLP
		} else {
			// A new payload buffer is given
			udd_ctrl_payload_nb_trans = 0;
80005700:	4b f9       	lddpc	r9,800057fc <udd_ctrl_in_sent+0x190>
80005702:	30 08       	mov	r8,0
80005704:	b2 08       	st.h	r9[0x0],r8
			nb_remain = udd_g_ctrlreq.payload_size;
80005706:	4b d8       	lddpc	r8,800057f8 <udd_ctrl_in_sent+0x18c>
80005708:	90 68       	ld.sh	r8,r8[0xc]
8000570a:	ef 58 ff f0 	st.h	r7[-16],r8
		}
	}
	// Continue transfer and send next data
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
8000570e:	ef 09 ff f0 	ld.sh	r9,r7[-16]
80005712:	33 f8       	mov	r8,63
80005714:	f0 09 19 00 	cp.h	r9,r8
80005718:	e0 88 00 09 	brls	8000572a <udd_ctrl_in_sent+0xbe>
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
8000571c:	34 08       	mov	r8,64
8000571e:	ef 58 ff f0 	st.h	r7[-16],r8
		b_shortpacket = false;
80005722:	4b 99       	lddpc	r9,80005804 <udd_ctrl_in_sent+0x198>
80005724:	30 08       	mov	r8,0
80005726:	b2 88       	st.b	r9[0x0],r8
80005728:	c0 48       	rjmp	80005730 <udd_ctrl_in_sent+0xc4>
	} else {
		b_shortpacket = true;
8000572a:	4b 79       	lddpc	r9,80005804 <udd_ctrl_in_sent+0x198>
8000572c:	30 18       	mov	r8,1
8000572e:	b2 88       	st.b	r9[0x0],r8
	}
	// Fill buffer of endpoint control
	ptr_dest = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
80005730:	fc 18 e0 00 	movh	r8,0xe000
80005734:	ef 48 ff f4 	st.w	r7[-12],r8
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
80005738:	4b 08       	lddpc	r8,800057f8 <udd_ctrl_in_sent+0x18c>
8000573a:	70 29       	ld.w	r9,r8[0x8]
8000573c:	4b 08       	lddpc	r8,800057fc <udd_ctrl_in_sent+0x190>
8000573e:	90 08       	ld.sh	r8,r8[0x0]
80005740:	5c 78       	castu.h	r8
80005742:	f2 08 00 08 	add	r8,r9,r8
80005746:	ef 48 ff f8 	st.w	r7[-8],r8
	// The IN data don't must be written in endpoint 0 DPRAM during
	// a next setup reception in same endpoint 0 DPRAM.
	// Thereby, an OUT ZLP reception must check before IN data write
	// and if no OUT ZLP is received the data must be written quickly (800us)
	// before an eventually ZLP OUT and SETUP reception
	flags = cpu_irq_save();
8000574a:	f0 1f 00 27 	mcall	800057e4 <udd_ctrl_in_sent+0x178>
8000574e:	18 98       	mov	r8,r12
80005750:	ef 48 ff fc 	st.w	r7[-4],r8
	if (Is_udd_out_received(0)) {
80005754:	fe 68 01 30 	mov	r8,-130768
80005758:	70 08       	ld.w	r8,r8[0x0]
8000575a:	e2 18 00 02 	andl	r8,0x2,COH
8000575e:	c0 90       	breq	80005770 <udd_ctrl_in_sent+0x104>
		// IN DATA phase aborted by OUT ZLP
		cpu_irq_restore(flags);
80005760:	ee fc ff fc 	ld.w	r12,r7[-4]
80005764:	f0 1f 00 21 	mcall	800057e8 <udd_ctrl_in_sent+0x17c>
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
80005768:	4a 18       	lddpc	r8,800057ec <udd_ctrl_in_sent+0x180>
8000576a:	30 49       	mov	r9,4
8000576c:	91 09       	st.w	r8[0x0],r9
		return; // Exit of IN DATA phase
8000576e:	c3 78       	rjmp	800057dc <udd_ctrl_in_sent+0x170>
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
80005770:	30 08       	mov	r8,0
80005772:	ef 68 ff f3 	st.b	r7[-13],r8
80005776:	c1 68       	rjmp	800057a2 <udd_ctrl_in_sent+0x136>
		*ptr_dest++ = *ptr_src++;
80005778:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000577c:	11 88       	ld.ub	r8,r8[0x0]
8000577e:	ee f9 ff f4 	ld.w	r9,r7[-12]
80005782:	b2 88       	st.b	r9[0x0],r8
80005784:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005788:	2f f8       	sub	r8,-1
8000578a:	ef 48 ff f4 	st.w	r7[-12],r8
8000578e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005792:	2f f8       	sub	r8,-1
80005794:	ef 48 ff f8 	st.w	r7[-8],r8
		cpu_irq_restore(flags);
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
		return; // Exit of IN DATA phase
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
80005798:	ef 38 ff f3 	ld.ub	r8,r7[-13]
8000579c:	2f f8       	sub	r8,-1
8000579e:	ef 68 ff f3 	st.b	r7[-13],r8
800057a2:	ef 38 ff f3 	ld.ub	r8,r7[-13]
800057a6:	ef 09 ff f0 	ld.sh	r9,r7[-16]
800057aa:	f0 09 19 00 	cp.h	r9,r8
800057ae:	fe 9b ff e5 	brhi	80005778 <udd_ctrl_in_sent+0x10c>
		*ptr_dest++ = *ptr_src++;
	}
	udd_ctrl_payload_nb_trans += nb_remain;
800057b2:	49 38       	lddpc	r8,800057fc <udd_ctrl_in_sent+0x190>
800057b4:	90 08       	ld.sh	r8,r8[0x0]
800057b6:	ef 09 ff f0 	ld.sh	r9,r7[-16]
800057ba:	f2 08 00 08 	add	r8,r9,r8
800057be:	5c 88       	casts.h	r8
800057c0:	48 f9       	lddpc	r9,800057fc <udd_ctrl_in_sent+0x190>
800057c2:	b2 08       	st.h	r9[0x0],r8

	// Validate and send the data available in the control endpoint buffer
	udd_ack_in_send(0);
800057c4:	fe 68 01 60 	mov	r8,-130720
800057c8:	30 19       	mov	r9,1
800057ca:	91 09       	st.w	r8[0x0],r9
	udd_enable_in_send_interrupt(0);
800057cc:	fe 68 01 f0 	mov	r8,-130576
800057d0:	30 19       	mov	r9,1
800057d2:	91 09       	st.w	r8[0x0],r9
	// In case of abort of DATA IN phase, no need to enable nak OUT interrupt
	// because OUT endpoint is already free and ZLP OUT accepted.
	cpu_irq_restore(flags);
800057d4:	ee fc ff fc 	ld.w	r12,r7[-4]
800057d8:	f0 1f 00 04 	mcall	800057e8 <udd_ctrl_in_sent+0x17c>
}
800057dc:	2f cd       	sub	sp,-16
800057de:	e3 cd 80 80 	ldm	sp++,r7,pc
800057e2:	00 00       	add	r0,r0
800057e4:	80 00       	ld.sh	r0,r0[0x0]
800057e6:	45 98       	lddsp	r8,sp[0x164]
800057e8:	80 00       	ld.sh	r0,r0[0x0]
800057ea:	45 d8       	lddsp	r8,sp[0x174]
800057ec:	00 00       	add	r0,r0
800057ee:	06 28       	rsub	r8,r3
800057f0:	80 00       	ld.sh	r0,r0[0x0]
800057f2:	5b 30       	cp.w	r0,-13
800057f4:	80 00       	ld.sh	r0,r0[0x0]
800057f6:	54 b0       	stdsp	sp[0x12c],r0
800057f8:	00 00       	add	r0,r0
800057fa:	0b 20       	ld.uh	r0,r5++
800057fc:	00 00       	add	r0,r0
800057fe:	06 2e       	rsub	lr,r3
80005800:	00 00       	add	r0,r0
80005802:	06 2c       	rsub	r12,r3
80005804:	00 00       	add	r0,r0
80005806:	06 6c       	and	r12,r3
80005808:	80 00       	ld.sh	r0,r0[0x0]
8000580a:	5a ec       	cp.w	r12,-18

8000580c <udd_ctrl_out_received>:


static void udd_ctrl_out_received(void)
{
8000580c:	eb cd 40 80 	pushm	r7,lr
80005810:	1a 97       	mov	r7,sp
80005812:	20 4d       	sub	sp,16
	irqflags_t flags;
	uint8_t i;
	uint16_t nb_data;

	if (UDD_EPCTRL_DATA_OUT != udd_ep_control_state) {
80005814:	4f 18       	lddpc	r8,800059d8 <udd_ctrl_out_received+0x1cc>
80005816:	70 08       	ld.w	r8,r8[0x0]
80005818:	58 18       	cp.w	r8,1
8000581a:	c1 10       	breq	8000583c <udd_ctrl_out_received+0x30>
		if ((UDD_EPCTRL_DATA_IN == udd_ep_control_state)
8000581c:	4e f8       	lddpc	r8,800059d8 <udd_ctrl_out_received+0x1cc>
8000581e:	70 08       	ld.w	r8,r8[0x0]
80005820:	58 28       	cp.w	r8,2
80005822:	c0 50       	breq	8000582c <udd_ctrl_out_received+0x20>
				|| (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP ==
80005824:	4e d8       	lddpc	r8,800059d8 <udd_ctrl_out_received+0x1cc>
80005826:	70 08       	ld.w	r8,r8[0x0]
	irqflags_t flags;
	uint8_t i;
	uint16_t nb_data;

	if (UDD_EPCTRL_DATA_OUT != udd_ep_control_state) {
		if ((UDD_EPCTRL_DATA_IN == udd_ep_control_state)
80005828:	58 48       	cp.w	r8,4
8000582a:	c0 41       	brne	80005832 <udd_ctrl_out_received+0x26>
						udd_ep_control_state)) {
			// End of SETUP request:
			// - Data IN Phase aborted,
			// - or last Data IN Phase hidden by ZLP OUT sending quickly,
			// - or ZLP OUT received normally.
			udd_ctrl_endofrequest();
8000582c:	f0 1f 00 6c 	mcall	800059dc <udd_ctrl_out_received+0x1d0>
	irqflags_t flags;
	uint8_t i;
	uint16_t nb_data;

	if (UDD_EPCTRL_DATA_OUT != udd_ep_control_state) {
		if ((UDD_EPCTRL_DATA_IN == udd_ep_control_state)
80005830:	c0 38       	rjmp	80005836 <udd_ctrl_out_received+0x2a>
			// - or last Data IN Phase hidden by ZLP OUT sending quickly,
			// - or ZLP OUT received normally.
			udd_ctrl_endofrequest();
		} else {
			// Protocol error during SETUP request
			udd_ctrl_stall_data();
80005832:	f0 1f 00 6c 	mcall	800059e0 <udd_ctrl_out_received+0x1d4>
		}
		// Reinitializes control endpoint management
		udd_ctrl_init();
80005836:	f0 1f 00 6c 	mcall	800059e4 <udd_ctrl_out_received+0x1d8>
		return;
8000583a:	cc b8       	rjmp	800059d0 <udd_ctrl_out_received+0x1c4>
	}
	// Read data received during OUT phase
	nb_data = udd_byte_count(0);
8000583c:	fe 68 01 30 	mov	r8,-130768
80005840:	70 08       	ld.w	r8,r8[0x0]
80005842:	e6 18 7f f0 	andh	r8,0x7ff0,COH
80005846:	b5 88       	lsr	r8,0x14
80005848:	ef 58 ff f6 	st.h	r7[-10],r8
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
8000584c:	4e 78       	lddpc	r8,800059e8 <udd_ctrl_out_received+0x1dc>
8000584e:	90 68       	ld.sh	r8,r8[0xc]
80005850:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
80005854:	4e 68       	lddpc	r8,800059ec <udd_ctrl_out_received+0x1e0>
80005856:	90 08       	ld.sh	r8,r8[0x0]
80005858:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
8000585c:	ef 18 ff f6 	ld.uh	r8,r7[-10]
80005860:	f4 08 00 08 	add	r8,r10,r8
80005864:	10 39       	cp.w	r9,r8
80005866:	c0 84       	brge	80005876 <udd_ctrl_out_received+0x6a>
		// Payload buffer too small
		nb_data = udd_g_ctrlreq.payload_size -
80005868:	4e 08       	lddpc	r8,800059e8 <udd_ctrl_out_received+0x1dc>
8000586a:	90 69       	ld.sh	r9,r8[0xc]
8000586c:	4e 08       	lddpc	r8,800059ec <udd_ctrl_out_received+0x1e0>
8000586e:	90 08       	ld.sh	r8,r8[0x0]
80005870:	10 19       	sub	r9,r8
80005872:	ef 59 ff f6 	st.h	r7[-10],r9
				udd_ctrl_payload_nb_trans;
	}
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
80005876:	fc 18 e0 00 	movh	r8,0xe000
8000587a:	ef 48 ff f8 	st.w	r7[-8],r8
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
8000587e:	4d b8       	lddpc	r8,800059e8 <udd_ctrl_out_received+0x1dc>
80005880:	70 29       	ld.w	r9,r8[0x8]
80005882:	4d b8       	lddpc	r8,800059ec <udd_ctrl_out_received+0x1e0>
80005884:	90 08       	ld.sh	r8,r8[0x0]
80005886:	5c 78       	castu.h	r8
80005888:	f2 08 00 08 	add	r8,r9,r8
8000588c:	ef 48 ff fc 	st.w	r7[-4],r8
	for (i = 0; i < nb_data; i++) {
80005890:	30 08       	mov	r8,0
80005892:	ef 68 ff f5 	st.b	r7[-11],r8
80005896:	c1 68       	rjmp	800058c2 <udd_ctrl_out_received+0xb6>
		*ptr_dest++ = *ptr_src++;
80005898:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000589c:	11 88       	ld.ub	r8,r8[0x0]
8000589e:	ee f9 ff fc 	ld.w	r9,r7[-4]
800058a2:	b2 88       	st.b	r9[0x0],r8
800058a4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800058a8:	2f f8       	sub	r8,-1
800058aa:	ef 48 ff fc 	st.w	r7[-4],r8
800058ae:	ee f8 ff f8 	ld.w	r8,r7[-8]
800058b2:	2f f8       	sub	r8,-1
800058b4:	ef 48 ff f8 	st.w	r7[-8],r8
		nb_data = udd_g_ctrlreq.payload_size -
				udd_ctrl_payload_nb_trans;
	}
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
	for (i = 0; i < nb_data; i++) {
800058b8:	ef 38 ff f5 	ld.ub	r8,r7[-11]
800058bc:	2f f8       	sub	r8,-1
800058be:	ef 68 ff f5 	st.b	r7[-11],r8
800058c2:	ef 38 ff f5 	ld.ub	r8,r7[-11]
800058c6:	ef 09 ff f6 	ld.sh	r9,r7[-10]
800058ca:	f0 09 19 00 	cp.h	r9,r8
800058ce:	fe 9b ff e5 	brhi	80005898 <udd_ctrl_out_received+0x8c>
		*ptr_dest++ = *ptr_src++;
	}
	udd_ctrl_payload_nb_trans += nb_data;
800058d2:	4c 78       	lddpc	r8,800059ec <udd_ctrl_out_received+0x1e0>
800058d4:	90 08       	ld.sh	r8,r8[0x0]
800058d6:	ef 09 ff f6 	ld.sh	r9,r7[-10]
800058da:	f2 08 00 08 	add	r8,r9,r8
800058de:	5c 88       	casts.h	r8
800058e0:	4c 39       	lddpc	r9,800059ec <udd_ctrl_out_received+0x1e0>
800058e2:	b2 08       	st.h	r9[0x0],r8

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
800058e4:	ef 09 ff f6 	ld.sh	r9,r7[-10]
800058e8:	34 08       	mov	r8,64
800058ea:	f0 09 19 00 	cp.h	r9,r8
800058ee:	c1 11       	brne	80005910 <udd_ctrl_out_received+0x104>
			|| (udd_g_ctrlreq.req.wLength <=
800058f0:	4b e8       	lddpc	r8,800059e8 <udd_ctrl_out_received+0x1dc>
800058f2:	90 38       	ld.sh	r8,r8[0x6]
800058f4:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
					(udd_ctrl_prev_payload_nb_trans +
800058f8:	4b e8       	lddpc	r8,800059f0 <udd_ctrl_out_received+0x1e4>
800058fa:	90 08       	ld.sh	r8,r8[0x0]
800058fc:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
80005900:	4b b8       	lddpc	r8,800059ec <udd_ctrl_out_received+0x1e0>
80005902:	90 08       	ld.sh	r8,r8[0x0]
80005904:	5c 78       	castu.h	r8
80005906:	f4 08 00 08 	add	r8,r10,r8
	for (i = 0; i < nb_data; i++) {
		*ptr_dest++ = *ptr_src++;
	}
	udd_ctrl_payload_nb_trans += nb_data;

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
8000590a:	10 39       	cp.w	r9,r8
8000590c:	e0 89 00 20 	brgt	8000594c <udd_ctrl_out_received+0x140>
							udd_ctrl_payload_nb_trans)))
	{
		// End of reception because it is a short packet
		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
80005910:	4b 78       	lddpc	r8,800059ec <udd_ctrl_out_received+0x1e0>
80005912:	90 08       	ld.sh	r8,r8[0x0]
80005914:	4b 59       	lddpc	r9,800059e8 <udd_ctrl_out_received+0x1dc>
80005916:	b2 68       	st.h	r9[0xc],r8
		if (NULL != udd_g_ctrlreq.over_under_run) {
80005918:	4b 48       	lddpc	r8,800059e8 <udd_ctrl_out_received+0x1dc>
8000591a:	70 58       	ld.w	r8,r8[0x14]
8000591c:	58 08       	cp.w	r8,0
8000591e:	c1 00       	breq	8000593e <udd_ctrl_out_received+0x132>
			if (!udd_g_ctrlreq.over_under_run()) {
80005920:	4b 28       	lddpc	r8,800059e8 <udd_ctrl_out_received+0x1dc>
80005922:	70 58       	ld.w	r8,r8[0x14]
80005924:	5d 18       	icall	r8
80005926:	18 98       	mov	r8,r12
80005928:	ec 18 00 01 	eorl	r8,0x1
8000592c:	5c 58       	castu.b	r8
8000592e:	c0 80       	breq	8000593e <udd_ctrl_out_received+0x132>
				// Stall ZLP
				udd_ctrl_stall_data();
80005930:	f0 1f 00 2c 	mcall	800059e0 <udd_ctrl_out_received+0x1d4>
				// Ack reception of OUT to replace NAK by a STALL
				udd_ack_out_received(0);
80005934:	fe 68 01 60 	mov	r8,-130720
80005938:	30 29       	mov	r9,2
8000593a:	91 09       	st.w	r8[0x0],r9
				return;
8000593c:	c4 a8       	rjmp	800059d0 <udd_ctrl_out_received+0x1c4>
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ack_out_received(0);
8000593e:	fe 68 01 60 	mov	r8,-130720
80005942:	30 29       	mov	r9,2
80005944:	91 09       	st.w	r8[0x0],r9
		udd_ctrl_send_zlp_in();
80005946:	f0 1f 00 2c 	mcall	800059f4 <udd_ctrl_out_received+0x1e8>
		return;
8000594a:	c4 38       	rjmp	800059d0 <udd_ctrl_out_received+0x1c4>
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
8000594c:	4a 78       	lddpc	r8,800059e8 <udd_ctrl_out_received+0x1dc>
8000594e:	90 69       	ld.sh	r9,r8[0xc]
80005950:	4a 78       	lddpc	r8,800059ec <udd_ctrl_out_received+0x1e0>
80005952:	90 08       	ld.sh	r8,r8[0x0]
80005954:	f0 09 19 00 	cp.h	r9,r8
80005958:	c2 71       	brne	800059a6 <udd_ctrl_out_received+0x19a>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
8000595a:	4a 48       	lddpc	r8,800059e8 <udd_ctrl_out_received+0x1dc>
8000595c:	70 58       	ld.w	r8,r8[0x14]
8000595e:	58 08       	cp.w	r8,0
80005960:	c0 81       	brne	80005970 <udd_ctrl_out_received+0x164>
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
80005962:	f0 1f 00 20 	mcall	800059e0 <udd_ctrl_out_received+0x1d4>
			// Ack reception of OUT to replace NAK by a STALL
			udd_ack_out_received(0);
80005966:	fe 68 01 60 	mov	r8,-130720
8000596a:	30 29       	mov	r9,2
8000596c:	91 09       	st.w	r8[0x0],r9
			return;
8000596e:	c3 18       	rjmp	800059d0 <udd_ctrl_out_received+0x1c4>
		}
		if (!udd_g_ctrlreq.over_under_run()) {
80005970:	49 e8       	lddpc	r8,800059e8 <udd_ctrl_out_received+0x1dc>
80005972:	70 58       	ld.w	r8,r8[0x14]
80005974:	5d 18       	icall	r8
80005976:	18 98       	mov	r8,r12
80005978:	ec 18 00 01 	eorl	r8,0x1
8000597c:	5c 58       	castu.b	r8
8000597e:	c0 80       	breq	8000598e <udd_ctrl_out_received+0x182>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
80005980:	f0 1f 00 18 	mcall	800059e0 <udd_ctrl_out_received+0x1d4>
			// Ack reception of OUT to replace NAK by a STALL
			udd_ack_out_received(0);
80005984:	fe 68 01 60 	mov	r8,-130720
80005988:	30 29       	mov	r9,2
8000598a:	91 09       	st.w	r8[0x0],r9
			return;
8000598c:	c2 28       	rjmp	800059d0 <udd_ctrl_out_received+0x1c4>
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
8000598e:	49 98       	lddpc	r8,800059f0 <udd_ctrl_out_received+0x1e4>
80005990:	90 09       	ld.sh	r9,r8[0x0]
80005992:	49 78       	lddpc	r8,800059ec <udd_ctrl_out_received+0x1e0>
80005994:	90 08       	ld.sh	r8,r8[0x0]
80005996:	f2 08 00 08 	add	r8,r9,r8
8000599a:	5c 88       	casts.h	r8
8000599c:	49 59       	lddpc	r9,800059f0 <udd_ctrl_out_received+0x1e4>
8000599e:	b2 08       	st.h	r9[0x0],r8
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
800059a0:	49 39       	lddpc	r9,800059ec <udd_ctrl_out_received+0x1e0>
800059a2:	30 08       	mov	r8,0
800059a4:	b2 08       	st.h	r9[0x0],r8
	}
	// Free buffer of control endpoint to authorize next reception
	udd_ack_out_received(0);
800059a6:	fe 68 01 60 	mov	r8,-130720
800059aa:	30 29       	mov	r9,2
800059ac:	91 09       	st.w	r8[0x0],r9
	// To detect a protocol error, enable nak interrupt on data IN phase
	udd_ack_nak_in(0);
800059ae:	fe 68 01 60 	mov	r8,-130720
800059b2:	31 09       	mov	r9,16
800059b4:	91 09       	st.w	r8[0x0],r9
	flags = cpu_irq_save();
800059b6:	f0 1f 00 11 	mcall	800059f8 <udd_ctrl_out_received+0x1ec>
800059ba:	18 98       	mov	r8,r12
800059bc:	ef 48 ff f0 	st.w	r7[-16],r8
	udd_enable_nak_in_interrupt(0);
800059c0:	fe 68 01 f0 	mov	r8,-130576
800059c4:	31 09       	mov	r9,16
800059c6:	91 09       	st.w	r8[0x0],r9
	cpu_irq_restore(flags);
800059c8:	ee fc ff f0 	ld.w	r12,r7[-16]
800059cc:	f0 1f 00 0c 	mcall	800059fc <udd_ctrl_out_received+0x1f0>
}
800059d0:	2f cd       	sub	sp,-16
800059d2:	e3 cd 80 80 	ldm	sp++,r7,pc
800059d6:	00 00       	add	r0,r0
800059d8:	00 00       	add	r0,r0
800059da:	06 28       	rsub	r8,r3
800059dc:	80 00       	ld.sh	r0,r0[0x0]
800059de:	5b 30       	cp.w	r0,-13
800059e0:	80 00       	ld.sh	r0,r0[0x0]
800059e2:	5a 78       	cp.w	r8,-25
800059e4:	80 00       	ld.sh	r0,r0[0x0]
800059e6:	54 b0       	stdsp	sp[0x12c],r0
800059e8:	00 00       	add	r0,r0
800059ea:	0b 20       	ld.uh	r0,r5++
800059ec:	00 00       	add	r0,r0
800059ee:	06 2e       	rsub	lr,r3
800059f0:	00 00       	add	r0,r0
800059f2:	06 2c       	rsub	r12,r3
800059f4:	80 00       	ld.sh	r0,r0[0x0]
800059f6:	5a 98       	cp.w	r8,-23
800059f8:	80 00       	ld.sh	r0,r0[0x0]
800059fa:	45 98       	lddsp	r8,sp[0x164]
800059fc:	80 00       	ld.sh	r0,r0[0x0]
800059fe:	45 d8       	lddsp	r8,sp[0x174]

80005a00 <udd_ctrl_underflow>:


static void udd_ctrl_underflow(void)
{
80005a00:	eb cd 40 80 	pushm	r7,lr
80005a04:	1a 97       	mov	r7,sp
	if (Is_udd_out_received(0))
80005a06:	fe 68 01 30 	mov	r8,-130768
80005a0a:	70 08       	ld.w	r8,r8[0x0]
80005a0c:	e2 18 00 02 	andl	r8,0x2,COH
80005a10:	c1 21       	brne	80005a34 <udd_ctrl_underflow+0x34>
		return; // underflow ignored if OUT data is received

	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
80005a12:	48 b8       	lddpc	r8,80005a3c <udd_ctrl_underflow+0x3c>
80005a14:	70 08       	ld.w	r8,r8[0x0]
80005a16:	58 18       	cp.w	r8,1
80005a18:	c0 41       	brne	80005a20 <udd_ctrl_underflow+0x20>
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
80005a1a:	f0 1f 00 0a 	mcall	80005a40 <udd_ctrl_underflow+0x40>
80005a1e:	c0 c8       	rjmp	80005a36 <udd_ctrl_underflow+0x36>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
80005a20:	48 78       	lddpc	r8,80005a3c <udd_ctrl_underflow+0x3c>
80005a22:	70 08       	ld.w	r8,r8[0x0]
80005a24:	58 48       	cp.w	r8,4
80005a26:	c0 81       	brne	80005a36 <udd_ctrl_underflow+0x36>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data
		udd_enable_stall_handshake(0);
80005a28:	fe 68 01 f0 	mov	r8,-130576
80005a2c:	e8 69 00 00 	mov	r9,524288
80005a30:	91 09       	st.w	r8[0x0],r9
80005a32:	c0 28       	rjmp	80005a36 <udd_ctrl_underflow+0x36>


static void udd_ctrl_underflow(void)
{
	if (Is_udd_out_received(0))
		return; // underflow ignored if OUT data is received
80005a34:	d7 03       	nop
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data
		udd_enable_stall_handshake(0);
	}
}
80005a36:	e3 cd 80 80 	ldm	sp++,r7,pc
80005a3a:	00 00       	add	r0,r0
80005a3c:	00 00       	add	r0,r0
80005a3e:	06 28       	rsub	r8,r3
80005a40:	80 00       	ld.sh	r0,r0[0x0]
80005a42:	5a 98       	cp.w	r8,-23

80005a44 <udd_ctrl_overflow>:


static void udd_ctrl_overflow(void)
{
80005a44:	eb cd 40 80 	pushm	r7,lr
80005a48:	1a 97       	mov	r7,sp
	if (Is_udd_in_send(0))
80005a4a:	fe 68 01 30 	mov	r8,-130768
80005a4e:	70 08       	ld.w	r8,r8[0x0]
80005a50:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80005a54:	5c 58       	castu.b	r8
80005a56:	c0 b1       	brne	80005a6c <udd_ctrl_overflow+0x28>
		return; // overflow ignored if IN data is received

	// The case of UDD_EPCTRL_DATA_IN is not managed
	// because the OUT endpoint is already free and OUT ZLP accepted

	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
80005a58:	48 78       	lddpc	r8,80005a74 <udd_ctrl_overflow+0x30>
80005a5a:	70 08       	ld.w	r8,r8[0x0]
80005a5c:	58 38       	cp.w	r8,3
80005a5e:	c0 81       	brne	80005a6e <udd_ctrl_overflow+0x2a>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data
		udd_enable_stall_handshake(0);
80005a60:	fe 68 01 f0 	mov	r8,-130576
80005a64:	e8 69 00 00 	mov	r9,524288
80005a68:	91 09       	st.w	r8[0x0],r9
80005a6a:	c0 28       	rjmp	80005a6e <udd_ctrl_overflow+0x2a>


static void udd_ctrl_overflow(void)
{
	if (Is_udd_in_send(0))
		return; // overflow ignored if IN data is received
80005a6c:	d7 03       	nop
	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data
		udd_enable_stall_handshake(0);
	}
}
80005a6e:	e3 cd 80 80 	ldm	sp++,r7,pc
80005a72:	00 00       	add	r0,r0
80005a74:	00 00       	add	r0,r0
80005a76:	06 28       	rsub	r8,r3

80005a78 <udd_ctrl_stall_data>:


static void udd_ctrl_stall_data(void)
{
80005a78:	eb cd 40 80 	pushm	r7,lr
80005a7c:	1a 97       	mov	r7,sp
	// Stall all packets on IN & OUT control endpoint
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
80005a7e:	48 68       	lddpc	r8,80005a94 <udd_ctrl_stall_data+0x1c>
80005a80:	30 59       	mov	r9,5
80005a82:	91 09       	st.w	r8[0x0],r9
	udd_enable_stall_handshake(0);
80005a84:	fe 68 01 f0 	mov	r8,-130576
80005a88:	e8 69 00 00 	mov	r9,524288
80005a8c:	91 09       	st.w	r8[0x0],r9
}
80005a8e:	e3 cd 80 80 	ldm	sp++,r7,pc
80005a92:	00 00       	add	r0,r0
80005a94:	00 00       	add	r0,r0
80005a96:	06 28       	rsub	r8,r3

80005a98 <udd_ctrl_send_zlp_in>:


static void udd_ctrl_send_zlp_in(void)
{
80005a98:	eb cd 40 80 	pushm	r7,lr
80005a9c:	1a 97       	mov	r7,sp
80005a9e:	20 1d       	sub	sp,4
	irqflags_t flags;

	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
80005aa0:	49 08       	lddpc	r8,80005ae0 <udd_ctrl_send_zlp_in+0x48>
80005aa2:	30 39       	mov	r9,3
80005aa4:	91 09       	st.w	r8[0x0],r9

	// Validate and send empty IN packet on control endpoint
	flags = cpu_irq_save();
80005aa6:	f0 1f 00 10 	mcall	80005ae4 <udd_ctrl_send_zlp_in+0x4c>
80005aaa:	18 98       	mov	r8,r12
80005aac:	ef 48 ff fc 	st.w	r7[-4],r8
	// Send ZLP on IN endpoint
	udd_ack_in_send(0);
80005ab0:	fe 68 01 60 	mov	r8,-130720
80005ab4:	30 19       	mov	r9,1
80005ab6:	91 09       	st.w	r8[0x0],r9
	udd_enable_in_send_interrupt(0);
80005ab8:	fe 68 01 f0 	mov	r8,-130576
80005abc:	30 19       	mov	r9,1
80005abe:	91 09       	st.w	r8[0x0],r9
	// To detect a protocol error, enable nak interrupt on data OUT phase
	udd_ack_nak_out(0);
80005ac0:	fe 68 01 60 	mov	r8,-130720
80005ac4:	30 89       	mov	r9,8
80005ac6:	91 09       	st.w	r8[0x0],r9
	udd_enable_nak_out_interrupt(0);
80005ac8:	fe 68 01 f0 	mov	r8,-130576
80005acc:	30 89       	mov	r9,8
80005ace:	91 09       	st.w	r8[0x0],r9
	cpu_irq_restore(flags);
80005ad0:	ee fc ff fc 	ld.w	r12,r7[-4]
80005ad4:	f0 1f 00 05 	mcall	80005ae8 <udd_ctrl_send_zlp_in+0x50>
}
80005ad8:	2f fd       	sub	sp,-4
80005ada:	e3 cd 80 80 	ldm	sp++,r7,pc
80005ade:	00 00       	add	r0,r0
80005ae0:	00 00       	add	r0,r0
80005ae2:	06 28       	rsub	r8,r3
80005ae4:	80 00       	ld.sh	r0,r0[0x0]
80005ae6:	45 98       	lddsp	r8,sp[0x164]
80005ae8:	80 00       	ld.sh	r0,r0[0x0]
80005aea:	45 d8       	lddsp	r8,sp[0x174]

80005aec <udd_ctrl_send_zlp_out>:


static void udd_ctrl_send_zlp_out(void)
{
80005aec:	eb cd 40 80 	pushm	r7,lr
80005af0:	1a 97       	mov	r7,sp
80005af2:	20 1d       	sub	sp,4
	irqflags_t flags;

	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
80005af4:	48 c8       	lddpc	r8,80005b24 <udd_ctrl_send_zlp_out+0x38>
80005af6:	30 49       	mov	r9,4
80005af8:	91 09       	st.w	r8[0x0],r9
	// No action is necessary to accept OUT ZLP
	// because the buffer of control endpoint is already free

	// To detect a protocol error, enable nak interrupt on data IN phase
	flags = cpu_irq_save();
80005afa:	f0 1f 00 0c 	mcall	80005b28 <udd_ctrl_send_zlp_out+0x3c>
80005afe:	18 98       	mov	r8,r12
80005b00:	ef 48 ff fc 	st.w	r7[-4],r8
	udd_ack_nak_in(0);
80005b04:	fe 68 01 60 	mov	r8,-130720
80005b08:	31 09       	mov	r9,16
80005b0a:	91 09       	st.w	r8[0x0],r9
	udd_enable_nak_in_interrupt(0);
80005b0c:	fe 68 01 f0 	mov	r8,-130576
80005b10:	31 09       	mov	r9,16
80005b12:	91 09       	st.w	r8[0x0],r9
	cpu_irq_restore(flags);
80005b14:	ee fc ff fc 	ld.w	r12,r7[-4]
80005b18:	f0 1f 00 05 	mcall	80005b2c <udd_ctrl_send_zlp_out+0x40>
}
80005b1c:	2f fd       	sub	sp,-4
80005b1e:	e3 cd 80 80 	ldm	sp++,r7,pc
80005b22:	00 00       	add	r0,r0
80005b24:	00 00       	add	r0,r0
80005b26:	06 28       	rsub	r8,r3
80005b28:	80 00       	ld.sh	r0,r0[0x0]
80005b2a:	45 98       	lddsp	r8,sp[0x164]
80005b2c:	80 00       	ld.sh	r0,r0[0x0]
80005b2e:	45 d8       	lddsp	r8,sp[0x174]

80005b30 <udd_ctrl_endofrequest>:


static void udd_ctrl_endofrequest(void)
{
80005b30:	eb cd 40 80 	pushm	r7,lr
80005b34:	1a 97       	mov	r7,sp
	// If a callback is registered then call it
	if (udd_g_ctrlreq.callback) {
80005b36:	48 58       	lddpc	r8,80005b48 <udd_ctrl_endofrequest+0x18>
80005b38:	70 48       	ld.w	r8,r8[0x10]
80005b3a:	58 08       	cp.w	r8,0
80005b3c:	c0 40       	breq	80005b44 <udd_ctrl_endofrequest+0x14>
		udd_g_ctrlreq.callback();
80005b3e:	48 38       	lddpc	r8,80005b48 <udd_ctrl_endofrequest+0x18>
80005b40:	70 48       	ld.w	r8,r8[0x10]
80005b42:	5d 18       	icall	r8
	}
}
80005b44:	e3 cd 80 80 	ldm	sp++,r7,pc
80005b48:	00 00       	add	r0,r0
80005b4a:	0b 20       	ld.uh	r0,r5++

80005b4c <udd_ctrl_interrupt>:


static bool udd_ctrl_interrupt(void)
{
80005b4c:	eb cd 40 80 	pushm	r7,lr
80005b50:	1a 97       	mov	r7,sp

	if (!Is_udd_endpoint_interrupt(0))
80005b52:	fe 68 00 00 	mov	r8,-131072
80005b56:	70 18       	ld.w	r8,r8[0x4]
80005b58:	e2 18 10 00 	andl	r8,0x1000,COH
80005b5c:	c0 31       	brne	80005b62 <udd_ctrl_interrupt+0x16>
		return false; // No interrupt events on control endpoint
80005b5e:	30 08       	mov	r8,0
80005b60:	c4 c8       	rjmp	80005bf8 <udd_ctrl_interrupt+0xac>

	// By default disable overflow and underflow interrupt
	udd_disable_nak_in_interrupt(0);
80005b62:	fe 68 02 20 	mov	r8,-130528
80005b66:	31 09       	mov	r9,16
80005b68:	91 09       	st.w	r8[0x0],r9
	udd_disable_nak_out_interrupt(0);
80005b6a:	fe 68 02 20 	mov	r8,-130528
80005b6e:	30 89       	mov	r9,8
80005b70:	91 09       	st.w	r8[0x0],r9


	// Search event on control endpoint
	if (Is_udd_setup_received(0)) {
80005b72:	fe 68 01 30 	mov	r8,-130768
80005b76:	70 08       	ld.w	r8,r8[0x0]
80005b78:	e2 18 00 04 	andl	r8,0x4,COH
80005b7c:	c0 50       	breq	80005b86 <udd_ctrl_interrupt+0x3a>
		// SETUP packet received
		udd_ctrl_setup_received();
80005b7e:	f0 1f 00 21 	mcall	80005c00 <udd_ctrl_interrupt+0xb4>
		return true;
80005b82:	30 18       	mov	r8,1
80005b84:	c3 a8       	rjmp	80005bf8 <udd_ctrl_interrupt+0xac>
	}
	if (Is_udd_in_send(0) && Is_udd_in_send_interrupt_enabled(0)) {
80005b86:	fe 68 01 30 	mov	r8,-130768
80005b8a:	70 08       	ld.w	r8,r8[0x0]
80005b8c:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80005b90:	5c 58       	castu.b	r8
80005b92:	c0 c0       	breq	80005baa <udd_ctrl_interrupt+0x5e>
80005b94:	fe 68 01 c0 	mov	r8,-130624
80005b98:	70 08       	ld.w	r8,r8[0x0]
80005b9a:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80005b9e:	5c 58       	castu.b	r8
80005ba0:	c0 50       	breq	80005baa <udd_ctrl_interrupt+0x5e>
		// IN packet sent
		udd_ctrl_in_sent();
80005ba2:	f0 1f 00 19 	mcall	80005c04 <udd_ctrl_interrupt+0xb8>
		return true;
80005ba6:	30 18       	mov	r8,1
80005ba8:	c2 88       	rjmp	80005bf8 <udd_ctrl_interrupt+0xac>
	}
	if (Is_udd_out_received(0)) {
80005baa:	fe 68 01 30 	mov	r8,-130768
80005bae:	70 08       	ld.w	r8,r8[0x0]
80005bb0:	e2 18 00 02 	andl	r8,0x2,COH
80005bb4:	c0 50       	breq	80005bbe <udd_ctrl_interrupt+0x72>
		// OUT packet received
		udd_ctrl_out_received();
80005bb6:	f0 1f 00 15 	mcall	80005c08 <udd_ctrl_interrupt+0xbc>
		return true;
80005bba:	30 18       	mov	r8,1
80005bbc:	c1 e8       	rjmp	80005bf8 <udd_ctrl_interrupt+0xac>
	}
	if (Is_udd_nak_out(0)) {
80005bbe:	fe 68 01 30 	mov	r8,-130768
80005bc2:	70 08       	ld.w	r8,r8[0x0]
80005bc4:	e2 18 00 08 	andl	r8,0x8,COH
80005bc8:	c0 90       	breq	80005bda <udd_ctrl_interrupt+0x8e>
		// Overflow on OUT packet
		udd_ack_nak_out(0);
80005bca:	fe 68 01 60 	mov	r8,-130720
80005bce:	30 89       	mov	r9,8
80005bd0:	91 09       	st.w	r8[0x0],r9
		udd_ctrl_overflow();
80005bd2:	f0 1f 00 0f 	mcall	80005c0c <udd_ctrl_interrupt+0xc0>
		return true;
80005bd6:	30 18       	mov	r8,1
80005bd8:	c1 08       	rjmp	80005bf8 <udd_ctrl_interrupt+0xac>
	}
	if (Is_udd_nak_in(0)) {
80005bda:	fe 68 01 30 	mov	r8,-130768
80005bde:	70 08       	ld.w	r8,r8[0x0]
80005be0:	e2 18 00 10 	andl	r8,0x10,COH
80005be4:	c0 90       	breq	80005bf6 <udd_ctrl_interrupt+0xaa>
		// Underflow on IN packet
		udd_ack_nak_in(0);
80005be6:	fe 68 01 60 	mov	r8,-130720
80005bea:	31 09       	mov	r9,16
80005bec:	91 09       	st.w	r8[0x0],r9
		udd_ctrl_underflow();
80005bee:	f0 1f 00 09 	mcall	80005c10 <udd_ctrl_interrupt+0xc4>
		return true;
80005bf2:	30 18       	mov	r8,1
80005bf4:	c0 28       	rjmp	80005bf8 <udd_ctrl_interrupt+0xac>
	}
	return false;
80005bf6:	30 08       	mov	r8,0
}
80005bf8:	10 9c       	mov	r12,r8
80005bfa:	e3 cd 80 80 	ldm	sp++,r7,pc
80005bfe:	00 00       	add	r0,r0
80005c00:	80 00       	ld.sh	r0,r0[0x0]
80005c02:	55 08       	stdsp	sp[0x140],r8
80005c04:	80 00       	ld.sh	r0,r0[0x0]
80005c06:	56 6c       	stdsp	sp[0x198],r12
80005c08:	80 00       	ld.sh	r0,r0[0x0]
80005c0a:	58 0c       	cp.w	r12,0
80005c0c:	80 00       	ld.sh	r0,r0[0x0]
80005c0e:	5a 44       	cp.w	r4,-28
80005c10:	80 00       	ld.sh	r0,r0[0x0]
80005c12:	5a 00       	cp.w	r0,-32

80005c14 <udd_ep_job_table_reset>:
//--- INTERNAL ROUTINES TO MANAGED THE BULK/INTERRUPT/ISOCHRONOUS ENDPOINTS

#if (0!=USB_DEVICE_MAX_EP)

static void udd_ep_job_table_reset(void)
{
80005c14:	eb cd 40 80 	pushm	r7,lr
80005c18:	1a 97       	mov	r7,sp
80005c1a:	20 1d       	sub	sp,4
	uint8_t i;
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
80005c1c:	30 08       	mov	r8,0
80005c1e:	ef 68 ff ff 	st.b	r7[-1],r8
80005c22:	c2 28       	rjmp	80005c66 <udd_ep_job_table_reset+0x52>
		udd_ep_job[i].busy = false;
80005c24:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80005c28:	49 5a       	lddpc	r10,80005c7c <udd_ep_job_table_reset+0x68>
80005c2a:	12 98       	mov	r8,r9
80005c2c:	a3 68       	lsl	r8,0x2
80005c2e:	12 08       	add	r8,r9
80005c30:	a3 68       	lsl	r8,0x2
80005c32:	f4 08 00 09 	add	r9,r10,r8
80005c36:	72 08       	ld.w	r8,r9[0x0]
80005c38:	30 0a       	mov	r10,0
80005c3a:	f1 da d3 e1 	bfins	r8,r10,0x1f,0x1
80005c3e:	93 08       	st.w	r9[0x0],r8
		udd_ep_job[i].stall_requested = false;
80005c40:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80005c44:	48 ea       	lddpc	r10,80005c7c <udd_ep_job_table_reset+0x68>
80005c46:	12 98       	mov	r8,r9
80005c48:	a3 68       	lsl	r8,0x2
80005c4a:	12 08       	add	r8,r9
80005c4c:	a3 68       	lsl	r8,0x2
80005c4e:	f4 08 00 09 	add	r9,r10,r8
80005c52:	72 08       	ld.w	r8,r9[0x0]
80005c54:	30 0a       	mov	r10,0
80005c56:	f1 da d3 a1 	bfins	r8,r10,0x1d,0x1
80005c5a:	93 08       	st.w	r9[0x0],r8
#if (0!=USB_DEVICE_MAX_EP)

static void udd_ep_job_table_reset(void)
{
	uint8_t i;
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
80005c5c:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80005c60:	2f f8       	sub	r8,-1
80005c62:	ef 68 ff ff 	st.b	r7[-1],r8
80005c66:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80005c6a:	30 28       	mov	r8,2
80005c6c:	f0 09 18 00 	cp.b	r9,r8
80005c70:	fe 98 ff da 	brls	80005c24 <udd_ep_job_table_reset+0x10>
		udd_ep_job[i].busy = false;
		udd_ep_job[i].stall_requested = false;
	}
}
80005c74:	2f fd       	sub	sp,-4
80005c76:	e3 cd 80 80 	ldm	sp++,r7,pc
80005c7a:	00 00       	add	r0,r0
80005c7c:	00 00       	add	r0,r0
80005c7e:	06 30       	cp.w	r0,r3

80005c80 <udd_ep_job_table_kill>:


static void udd_ep_job_table_kill(void)
{
80005c80:	eb cd 40 80 	pushm	r7,lr
80005c84:	1a 97       	mov	r7,sp
80005c86:	20 1d       	sub	sp,4
	uint8_t i;

	// For each endpoint, kill job
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
80005c88:	30 08       	mov	r8,0
80005c8a:	ef 68 ff ff 	st.b	r7[-1],r8
80005c8e:	c1 98       	rjmp	80005cc0 <udd_ep_job_table_kill+0x40>
		udd_ep_finish_job(&udd_ep_job[i], true, i + 1);
80005c90:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80005c94:	2f f8       	sub	r8,-1
80005c96:	5c 58       	castu.b	r8
80005c98:	10 9a       	mov	r10,r8
80005c9a:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80005c9e:	12 98       	mov	r8,r9
80005ca0:	a3 68       	lsl	r8,0x2
80005ca2:	12 08       	add	r8,r9
80005ca4:	a3 68       	lsl	r8,0x2
80005ca6:	10 99       	mov	r9,r8
80005ca8:	48 b8       	lddpc	r8,80005cd4 <udd_ep_job_table_kill+0x54>
80005caa:	f2 08 00 08 	add	r8,r9,r8
80005cae:	30 1b       	mov	r11,1
80005cb0:	10 9c       	mov	r12,r8
80005cb2:	f0 1f 00 0a 	mcall	80005cd8 <udd_ep_job_table_kill+0x58>
static void udd_ep_job_table_kill(void)
{
	uint8_t i;

	// For each endpoint, kill job
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
80005cb6:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80005cba:	2f f8       	sub	r8,-1
80005cbc:	ef 68 ff ff 	st.b	r7[-1],r8
80005cc0:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80005cc4:	30 28       	mov	r8,2
80005cc6:	f0 09 18 00 	cp.b	r9,r8
80005cca:	fe 98 ff e3 	brls	80005c90 <udd_ep_job_table_kill+0x10>
		udd_ep_finish_job(&udd_ep_job[i], true, i + 1);
	}
}
80005cce:	2f fd       	sub	sp,-4
80005cd0:	e3 cd 80 80 	ldm	sp++,r7,pc
80005cd4:	00 00       	add	r0,r0
80005cd6:	06 30       	cp.w	r0,r3
80005cd8:	80 00       	ld.sh	r0,r0[0x0]
80005cda:	5d 28       	mustr	r8

80005cdc <udd_ep_abort_job>:


static void udd_ep_abort_job(udd_ep_id_t ep)
{
80005cdc:	eb cd 40 80 	pushm	r7,lr
80005ce0:	1a 97       	mov	r7,sp
80005ce2:	20 1d       	sub	sp,4
80005ce4:	18 98       	mov	r8,r12
80005ce6:	ef 68 ff fc 	st.b	r7[-4],r8
	ep &= USB_EP_ADDR_MASK;
80005cea:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80005cee:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80005cf2:	ef 68 ff fc 	st.b	r7[-4],r8

	// Abort job on endpoint
	udd_ep_finish_job(&udd_ep_job[ep - 1], true, ep);
80005cf6:	ef 3a ff fc 	ld.ub	r10,r7[-4]
80005cfa:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80005cfe:	f0 c9 00 01 	sub	r9,r8,1
80005d02:	12 98       	mov	r8,r9
80005d04:	a3 68       	lsl	r8,0x2
80005d06:	12 08       	add	r8,r9
80005d08:	a3 68       	lsl	r8,0x2
80005d0a:	10 99       	mov	r9,r8
80005d0c:	48 58       	lddpc	r8,80005d20 <udd_ep_abort_job+0x44>
80005d0e:	f2 08 00 08 	add	r8,r9,r8
80005d12:	30 1b       	mov	r11,1
80005d14:	10 9c       	mov	r12,r8
80005d16:	f0 1f 00 04 	mcall	80005d24 <udd_ep_abort_job+0x48>
}
80005d1a:	2f fd       	sub	sp,-4
80005d1c:	e3 cd 80 80 	ldm	sp++,r7,pc
80005d20:	00 00       	add	r0,r0
80005d22:	06 30       	cp.w	r0,r3
80005d24:	80 00       	ld.sh	r0,r0[0x0]
80005d26:	5d 28       	mustr	r8

80005d28 <udd_ep_finish_job>:


static void udd_ep_finish_job(udd_ep_job_t * ptr_job, bool b_abort, uint8_t ep_num)
{
80005d28:	eb cd 40 80 	pushm	r7,lr
80005d2c:	1a 97       	mov	r7,sp
80005d2e:	20 3d       	sub	sp,12
80005d30:	ef 4c ff fc 	st.w	r7[-4],r12
80005d34:	16 99       	mov	r9,r11
80005d36:	14 98       	mov	r8,r10
80005d38:	ef 69 ff f8 	st.b	r7[-8],r9
80005d3c:	ef 68 ff f4 	st.b	r7[-12],r8
	if (ptr_job->busy == false) {
80005d40:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005d44:	70 08       	ld.w	r8,r8[0x0]
80005d46:	e6 18 80 00 	andh	r8,0x8000,COH
80005d4a:	c2 b0       	breq	80005da0 <udd_ep_finish_job+0x78>
		return; // No on-going job
	}
	ptr_job->busy = false;
80005d4c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80005d50:	72 08       	ld.w	r8,r9[0x0]
80005d52:	30 0a       	mov	r10,0
80005d54:	f1 da d3 e1 	bfins	r8,r10,0x1f,0x1
80005d58:	93 08       	st.w	r9[0x0],r8
	if (NULL == ptr_job->call_trans) {
80005d5a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005d5e:	70 48       	ld.w	r8,r8[0x10]
80005d60:	58 08       	cp.w	r8,0
80005d62:	c2 10       	breq	80005da4 <udd_ep_finish_job+0x7c>
		return; // No callback linked to job
	}
	if (Is_udd_endpoint_in(ep_num)) {
80005d64:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80005d68:	a3 68       	lsl	r8,0x2
80005d6a:	e0 38 ff 00 	sub	r8,130816
80005d6e:	70 08       	ld.w	r8,r8[0x0]
80005d70:	e2 18 01 00 	andl	r8,0x100,COH
80005d74:	c0 90       	breq	80005d86 <udd_ep_finish_job+0x5e>
		ep_num |= USB_EP_DIR_IN;
80005d76:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80005d7a:	ea 18 ff ff 	orh	r8,0xffff
80005d7e:	e8 18 ff 80 	orl	r8,0xff80
80005d82:	ef 68 ff f4 	st.b	r7[-12],r8
	}
	ptr_job->call_trans((b_abort) ? UDD_EP_TRANSFER_ABORT :
80005d86:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005d8a:	70 48       	ld.w	r8,r8[0x10]
80005d8c:	ef 3a ff f4 	ld.ub	r10,r7[-12]
80005d90:	ee f9 ff fc 	ld.w	r9,r7[-4]
80005d94:	72 2b       	ld.w	r11,r9[0x8]
80005d96:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80005d9a:	12 9c       	mov	r12,r9
80005d9c:	5d 18       	icall	r8
80005d9e:	c0 48       	rjmp	80005da6 <udd_ep_finish_job+0x7e>


static void udd_ep_finish_job(udd_ep_job_t * ptr_job, bool b_abort, uint8_t ep_num)
{
	if (ptr_job->busy == false) {
		return; // No on-going job
80005da0:	d7 03       	nop
80005da2:	c0 28       	rjmp	80005da6 <udd_ep_finish_job+0x7e>
	}
	ptr_job->busy = false;
	if (NULL == ptr_job->call_trans) {
		return; // No callback linked to job
80005da4:	d7 03       	nop
	if (Is_udd_endpoint_in(ep_num)) {
		ep_num |= USB_EP_DIR_IN;
	}
	ptr_job->call_trans((b_abort) ? UDD_EP_TRANSFER_ABORT :
			UDD_EP_TRANSFER_OK, ptr_job->buf_size, ep_num);
}
80005da6:	2f dd       	sub	sp,-12
80005da8:	e3 cd 80 80 	ldm	sp++,r7,pc

80005dac <udd_ep_trans_done>:

static void udd_ep_trans_done(udd_ep_id_t ep)
{
80005dac:	eb cd 40 80 	pushm	r7,lr
80005db0:	1a 97       	mov	r7,sp
80005db2:	20 5d       	sub	sp,20
80005db4:	18 98       	mov	r8,r12
80005db6:	ef 68 ff ec 	st.b	r7[-20],r8
	uint32_t udd_dma_ctrl = 0;
80005dba:	30 08       	mov	r8,0
80005dbc:	ef 48 ff f0 	st.w	r7[-16],r8
	udd_ep_job_t *ptr_job;
	iram_size_t next_trans;
	irqflags_t flags;

	// Get job corresponding at endpoint
	ptr_job = &udd_ep_job[ep - 1];
80005dc0:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80005dc4:	f0 c9 00 01 	sub	r9,r8,1
80005dc8:	12 98       	mov	r8,r9
80005dca:	a3 68       	lsl	r8,0x2
80005dcc:	12 08       	add	r8,r9
80005dce:	a3 68       	lsl	r8,0x2
80005dd0:	10 99       	mov	r9,r8
80005dd2:	fe f8 02 1a 	ld.w	r8,pc[538]
80005dd6:	f2 08 00 08 	add	r8,r9,r8
80005dda:	ef 48 ff f4 	st.w	r7[-12],r8

	if (!ptr_job->busy) {
80005dde:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005de2:	70 08       	ld.w	r8,r8[0x0]
80005de4:	e6 18 80 00 	andh	r8,0x8000,COH
80005de8:	e0 80 00 fe 	breq	80005fe4 <udd_ep_trans_done+0x238>
		return; // No job is running, then ignore it (system error)
	}

	if (ptr_job->nb_trans != ptr_job->buf_size) {
80005dec:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005df0:	70 39       	ld.w	r9,r8[0xc]
80005df2:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005df6:	70 28       	ld.w	r8,r8[0x8]
80005df8:	10 39       	cp.w	r9,r8
80005dfa:	e0 80 00 b5 	breq	80005f64 <udd_ep_trans_done+0x1b8>
		// Need to send or receive other data
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
80005dfe:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005e02:	70 29       	ld.w	r9,r8[0x8]
80005e04:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005e08:	70 38       	ld.w	r8,r8[0xc]
80005e0a:	10 19       	sub	r9,r8
80005e0c:	ef 49 ff f8 	st.w	r7[-8],r9

		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
80005e10:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005e14:	e0 58 00 00 	cp.w	r8,65536
80005e18:	e0 88 00 0a 	brls	80005e2c <udd_ep_trans_done+0x80>
			// The USB hardware support a maximum
			// transfer size of UDD_ENDPOINT_MAX_TRANS Bytes
			next_trans = UDD_ENDPOINT_MAX_TRANS;
80005e1c:	e0 78 00 00 	mov	r8,65536
80005e20:	ef 48 ff f8 	st.w	r7[-8],r8

			// Set 0 to transfer the maximum
			udd_dma_ctrl = (0 <<
80005e24:	30 08       	mov	r8,0
80005e26:	ef 48 ff f0 	st.w	r7[-16],r8
80005e2a:	c0 68       	rjmp	80005e36 <udd_ep_trans_done+0x8a>
					AVR32_USBB_UDDMA1_CONTROL_CH_BYTE_LENGTH_OFFSET)
					& AVR32_USBB_UDDMA1_CONTROL_CH_BYTE_LENGTH_MASK;
		} else {
			udd_dma_ctrl = (next_trans <<
80005e2c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005e30:	b1 68       	lsl	r8,0x10
80005e32:	ef 48 ff f0 	st.w	r7[-16],r8
					AVR32_USBB_UDDMA1_CONTROL_CH_BYTE_LENGTH_OFFSET)
					& AVR32_USBB_UDDMA1_CONTROL_CH_BYTE_LENGTH_MASK;
		}
		if (Is_udd_endpoint_in(ep)) {
80005e36:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80005e3a:	a3 68       	lsl	r8,0x2
80005e3c:	e0 38 ff 00 	sub	r8,130816
80005e40:	70 08       	ld.w	r8,r8[0x0]
80005e42:	e2 18 01 00 	andl	r8,0x100,COH
80005e46:	c2 10       	breq	80005e88 <udd_ep_trans_done+0xdc>
			if (0 != next_trans % udd_get_endpoint_size(ep)) {
80005e48:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80005e4c:	a3 68       	lsl	r8,0x2
80005e4e:	e0 38 ff 00 	sub	r8,130816
80005e52:	70 08       	ld.w	r8,r8[0x0]
80005e54:	e2 18 00 70 	andl	r8,0x70,COH
80005e58:	a5 88       	lsr	r8,0x4
80005e5a:	30 89       	mov	r9,8
80005e5c:	f2 08 09 48 	lsl	r8,r9,r8
80005e60:	20 18       	sub	r8,1
80005e62:	10 99       	mov	r9,r8
80005e64:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005e68:	f3 e8 00 08 	and	r8,r9,r8
80005e6c:	c3 00       	breq	80005ecc <udd_ep_trans_done+0x120>
				// Enable short packet option
				// else the DMA transfer is accepted
				// and interrupt DMA valid but nothing is sent.
				udd_dma_ctrl |= AVR32_USBB_UDDMA1_CONTROL_DMAEND_EN_MASK;
80005e6e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80005e72:	a3 b8       	sbr	r8,0x3
80005e74:	ef 48 ff f0 	st.w	r7[-16],r8
				// No need to request another ZLP
				ptr_job->b_shortpacket = false;
80005e78:	ee f9 ff f4 	ld.w	r9,r7[-12]
80005e7c:	72 08       	ld.w	r8,r9[0x0]
80005e7e:	30 0a       	mov	r10,0
80005e80:	f1 da d3 c1 	bfins	r8,r10,0x1e,0x1
80005e84:	93 08       	st.w	r9[0x0],r8
80005e86:	c2 38       	rjmp	80005ecc <udd_ep_trans_done+0x120>
			}
		} else {
			if ((USB_EP_TYPE_ISOCHRONOUS != udd_get_endpoint_type(ep))
80005e88:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80005e8c:	a3 68       	lsl	r8,0x2
80005e8e:	e0 38 ff 00 	sub	r8,130816
80005e92:	70 08       	ld.w	r8,r8[0x0]
80005e94:	e2 18 18 00 	andl	r8,0x1800,COH
80005e98:	ab 98       	lsr	r8,0xb
80005e9a:	58 18       	cp.w	r8,1
80005e9c:	c1 21       	brne	80005ec0 <udd_ep_trans_done+0x114>
					|| (next_trans <= udd_get_endpoint_size(ep))) {
80005e9e:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80005ea2:	a3 68       	lsl	r8,0x2
80005ea4:	e0 38 ff 00 	sub	r8,130816
80005ea8:	70 08       	ld.w	r8,r8[0x0]
80005eaa:	e2 18 00 70 	andl	r8,0x70,COH
80005eae:	a5 88       	lsr	r8,0x4
80005eb0:	30 89       	mov	r9,8
80005eb2:	f2 08 09 48 	lsl	r8,r9,r8
80005eb6:	10 99       	mov	r9,r8
				udd_dma_ctrl |= AVR32_USBB_UDDMA1_CONTROL_DMAEND_EN_MASK;
				// No need to request another ZLP
				ptr_job->b_shortpacket = false;
			}
		} else {
			if ((USB_EP_TYPE_ISOCHRONOUS != udd_get_endpoint_type(ep))
80005eb8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005ebc:	10 39       	cp.w	r9,r8
80005ebe:	c0 73       	brcs	80005ecc <udd_ep_trans_done+0x120>
					|| (next_trans <= udd_get_endpoint_size(ep))) {

				// Enable short packet reception
				udd_dma_ctrl |= AVR32_USBB_UDDMA1_CONTROL_EOT_IRQ_EN_MASK
80005ec0:	ee f8 ff f0 	ld.w	r8,r7[-16]
80005ec4:	e8 18 00 14 	orl	r8,0x14
80005ec8:	ef 48 ff f0 	st.w	r7[-16],r8
						| AVR32_USBB_UDDMA1_CONTROL_BUFF_CLOSE_IN_EN_MASK;
			}
		}

		// Start USB DMA to fill or read fifo of the selected endpoint
		udd_endpoint_dma_set_addr(ep, (U32) &ptr_job->buf[ptr_job->nb_trans]);
80005ecc:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80005ed0:	a5 68       	lsl	r8,0x4
80005ed2:	e0 38 fd 00 	sub	r8,130304
80005ed6:	ee f9 ff f4 	ld.w	r9,r7[-12]
80005eda:	72 1a       	ld.w	r10,r9[0x4]
80005edc:	ee f9 ff f4 	ld.w	r9,r7[-12]
80005ee0:	72 39       	ld.w	r9,r9[0xc]
80005ee2:	f4 09 00 09 	add	r9,r10,r9
80005ee6:	91 19       	st.w	r8[0x4],r9
		udd_dma_ctrl |= AVR32_USBB_UDDMA1_CONTROL_EOBUFF_IRQ_EN_MASK |
80005ee8:	ee f8 ff f0 	ld.w	r8,r7[-16]
80005eec:	e8 18 00 21 	orl	r8,0x21
80005ef0:	ef 48 ff f0 	st.w	r7[-16],r8
				AVR32_USBB_UDDMA1_CONTROL_CH_EN_MASK;

		// Disable IRQs to have a short sequence
		// between read of EOT_STA and DMA enable
		flags = cpu_irq_save();
80005ef4:	f0 1f 00 3f 	mcall	80005ff0 <udd_ep_trans_done+0x244>
80005ef8:	18 98       	mov	r8,r12
80005efa:	ef 48 ff fc 	st.w	r7[-4],r8
		if ( !(udd_endpoint_dma_get_status(ep)
80005efe:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80005f02:	a5 68       	lsl	r8,0x4
80005f04:	e0 38 fd 00 	sub	r8,130304
80005f08:	70 38       	ld.w	r8,r8[0xc]
80005f0a:	e2 18 00 10 	andl	r8,0x10,COH
80005f0e:	c2 11       	brne	80005f50 <udd_ep_trans_done+0x1a4>
				& AVR32_USBB_UDDMA1_STATUS_EOT_STA_MASK)) {
			udd_endpoint_dma_set_control(ep, udd_dma_ctrl);
80005f10:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80005f14:	a5 68       	lsl	r8,0x4
80005f16:	e0 38 fd 00 	sub	r8,130304
80005f1a:	ee f9 ff f0 	ld.w	r9,r7[-16]
80005f1e:	91 29       	st.w	r8[0x8],r9
			ptr_job->nb_trans += next_trans;
80005f20:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005f24:	70 39       	ld.w	r9,r8[0xc]
80005f26:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005f2a:	10 09       	add	r9,r8
80005f2c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005f30:	91 39       	st.w	r8[0xc],r9
			udd_enable_endpoint_dma_interrupt(ep);
80005f32:	fe 68 00 00 	mov	r8,-131072
80005f36:	ef 39 ff ec 	ld.ub	r9,r7[-20]
80005f3a:	20 19       	sub	r9,1
80005f3c:	fc 1a 02 00 	movh	r10,0x200
80005f40:	f4 09 09 49 	lsl	r9,r10,r9
80005f44:	91 69       	st.w	r8[0x18],r9
			cpu_irq_restore(flags);
80005f46:	ee fc ff fc 	ld.w	r12,r7[-4]
80005f4a:	f0 1f 00 2b 	mcall	80005ff4 <udd_ep_trans_done+0x248>
			return;
80005f4e:	c4 c8       	rjmp	80005fe6 <udd_ep_trans_done+0x23a>
		}
		cpu_irq_restore(flags);
80005f50:	ee fc ff fc 	ld.w	r12,r7[-4]
80005f54:	f0 1f 00 28 	mcall	80005ff4 <udd_ep_trans_done+0x248>

		// Here a ZLP has been received
		// and the DMA transfer must be not started.
		// It is the end of transfer
		ptr_job->buf_size = ptr_job->nb_trans;
80005f58:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005f5c:	70 39       	ld.w	r9,r8[0xc]
80005f5e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005f62:	91 29       	st.w	r8[0x8],r9
	}
	if (Is_udd_endpoint_in(ep)) {
80005f64:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80005f68:	a3 68       	lsl	r8,0x2
80005f6a:	e0 38 ff 00 	sub	r8,130816
80005f6e:	70 08       	ld.w	r8,r8[0x0]
80005f70:	e2 18 01 00 	andl	r8,0x100,COH
80005f74:	c2 f0       	breq	80005fd2 <udd_ep_trans_done+0x226>
		if (ptr_job->b_shortpacket) {
80005f76:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005f7a:	70 08       	ld.w	r8,r8[0x0]
80005f7c:	e6 18 40 00 	andh	r8,0x4000,COH
80005f80:	c2 90       	breq	80005fd2 <udd_ep_trans_done+0x226>
			// Need to send a ZLP (No possible with USB DMA)
			// enable interrupt to wait a free bank to sent ZLP
			udd_ack_in_send(ep);
80005f82:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80005f86:	a3 68       	lsl	r8,0x2
80005f88:	e0 38 fe a0 	sub	r8,130720
80005f8c:	30 19       	mov	r9,1
80005f8e:	91 09       	st.w	r8[0x0],r9
			if (Is_udd_write_enabled(ep)) {
80005f90:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80005f94:	a3 68       	lsl	r8,0x2
80005f96:	e0 38 fe d0 	sub	r8,130768
80005f9a:	70 08       	ld.w	r8,r8[0x0]
80005f9c:	e6 18 00 01 	andh	r8,0x1,COH
80005fa0:	c0 80       	breq	80005fb0 <udd_ep_trans_done+0x204>
				// Force interrupt in case of ep already free
				udd_raise_in_send(ep);
80005fa2:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80005fa6:	a3 68       	lsl	r8,0x2
80005fa8:	e0 38 fe 70 	sub	r8,130672
80005fac:	30 19       	mov	r9,1
80005fae:	91 09       	st.w	r8[0x0],r9
			}
			udd_enable_in_send_interrupt(ep);
80005fb0:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80005fb4:	a3 68       	lsl	r8,0x2
80005fb6:	e0 38 fe 10 	sub	r8,130576
80005fba:	30 19       	mov	r9,1
80005fbc:	91 09       	st.w	r8[0x0],r9
			udd_enable_endpoint_interrupt(ep);
80005fbe:	fe 68 00 00 	mov	r8,-131072
80005fc2:	ef 39 ff ec 	ld.ub	r9,r7[-20]
80005fc6:	e0 6a 10 00 	mov	r10,4096
80005fca:	f4 09 09 49 	lsl	r9,r10,r9
80005fce:	91 69       	st.w	r8[0x18],r9
			return;
80005fd0:	c0 b8       	rjmp	80005fe6 <udd_ep_trans_done+0x23a>
		}
	}
	// Call callback to signal end of transfer
	udd_ep_finish_job(ptr_job, false, ep);
80005fd2:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80005fd6:	10 9a       	mov	r10,r8
80005fd8:	30 0b       	mov	r11,0
80005fda:	ee fc ff f4 	ld.w	r12,r7[-12]
80005fde:	f0 1f 00 07 	mcall	80005ff8 <udd_ep_trans_done+0x24c>
80005fe2:	c0 28       	rjmp	80005fe6 <udd_ep_trans_done+0x23a>

	// Get job corresponding at endpoint
	ptr_job = &udd_ep_job[ep - 1];

	if (!ptr_job->busy) {
		return; // No job is running, then ignore it (system error)
80005fe4:	d7 03       	nop
			return;
		}
	}
	// Call callback to signal end of transfer
	udd_ep_finish_job(ptr_job, false, ep);
}
80005fe6:	2f bd       	sub	sp,-20
80005fe8:	e3 cd 80 80 	ldm	sp++,r7,pc
80005fec:	00 00       	add	r0,r0
80005fee:	06 30       	cp.w	r0,r3
80005ff0:	80 00       	ld.sh	r0,r0[0x0]
80005ff2:	45 98       	lddsp	r8,sp[0x164]
80005ff4:	80 00       	ld.sh	r0,r0[0x0]
80005ff6:	45 d8       	lddsp	r8,sp[0x174]
80005ff8:	80 00       	ld.sh	r0,r0[0x0]
80005ffa:	5d 28       	mustr	r8

80005ffc <udd_ep_interrupt>:


static bool udd_ep_interrupt(void)
{
80005ffc:	eb cd 40 80 	pushm	r7,lr
80006000:	1a 97       	mov	r7,sp
80006002:	20 3d       	sub	sp,12
	udd_ep_id_t ep;
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
80006004:	30 18       	mov	r8,1
80006006:	ef 68 ff f7 	st.b	r7[-9],r8
8000600a:	cf 18       	rjmp	800061ec <udd_ep_interrupt+0x1f0>
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
8000600c:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80006010:	f0 c9 00 01 	sub	r9,r8,1
80006014:	12 98       	mov	r8,r9
80006016:	a3 68       	lsl	r8,0x2
80006018:	12 08       	add	r8,r9
8000601a:	a3 68       	lsl	r8,0x2
8000601c:	10 99       	mov	r9,r8
8000601e:	4f a8       	lddpc	r8,80006204 <udd_ep_interrupt+0x208>
80006020:	f2 08 00 08 	add	r8,r9,r8
80006024:	ef 48 ff f8 	st.w	r7[-8],r8

		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
80006028:	fe 68 00 00 	mov	r8,-131072
8000602c:	70 49       	ld.w	r9,r8[0x10]
8000602e:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80006032:	20 18       	sub	r8,1
80006034:	fc 1a 02 00 	movh	r10,0x200
80006038:	f4 08 09 48 	lsl	r8,r10,r8
8000603c:	f3 e8 00 08 	and	r8,r9,r8
80006040:	c4 70       	breq	800060ce <udd_ep_interrupt+0xd2>
				&& Is_udd_endpoint_dma_interrupt(ep)) {
80006042:	fe 68 00 00 	mov	r8,-131072
80006046:	70 19       	ld.w	r9,r8[0x4]
80006048:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000604c:	20 18       	sub	r8,1
8000604e:	fc 1a 02 00 	movh	r10,0x200
80006052:	f4 08 09 48 	lsl	r8,r10,r8
80006056:	f3 e8 00 08 	and	r8,r9,r8
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];

		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
8000605a:	c3 a0       	breq	800060ce <udd_ep_interrupt+0xd2>
				&& Is_udd_endpoint_dma_interrupt(ep)) {
			uint32_t nb_remaining;
			if( udd_endpoint_dma_get_status(ep)
8000605c:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80006060:	a5 68       	lsl	r8,0x4
80006062:	e0 38 fd 00 	sub	r8,130304
80006066:	70 38       	ld.w	r8,r8[0xc]
80006068:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000606c:	5c 58       	castu.b	r8
8000606e:	c0 30       	breq	80006074 <udd_ep_interrupt+0x78>
					& AVR32_USBB_UDDMA1_STATUS_CH_EN_MASK) {
				return true; // Ignore EOT_STA interrupt
80006070:	30 18       	mov	r8,1
80006072:	cc 58       	rjmp	800061fc <udd_ep_interrupt+0x200>
			}
			udd_disable_endpoint_dma_interrupt(ep);
80006074:	fe 68 00 00 	mov	r8,-131072
80006078:	ef 39 ff f7 	ld.ub	r9,r7[-9]
8000607c:	20 19       	sub	r9,1
8000607e:	fc 1a 02 00 	movh	r10,0x200
80006082:	f4 09 09 49 	lsl	r9,r10,r9
80006086:	91 59       	st.w	r8[0x14],r9
			// Save number of data no transfered
			nb_remaining = (udd_endpoint_dma_get_status(ep) &
80006088:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000608c:	a5 68       	lsl	r8,0x4
8000608e:	e0 38 fd 00 	sub	r8,130304
80006092:	70 38       	ld.w	r8,r8[0xc]
80006094:	b1 88       	lsr	r8,0x10
80006096:	ef 48 ff fc 	st.w	r7[-4],r8
					AVR32_USBB_UDDMA1_STATUS_CH_BYTE_CNT_MASK)
					>> AVR32_USBB_UDDMA1_STATUS_CH_BYTE_CNT_OFFSET;
			if (nb_remaining) {
8000609a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000609e:	58 08       	cp.w	r8,0
800060a0:	c1 00       	breq	800060c0 <udd_ep_interrupt+0xc4>
				// Transfer no complete (short packet or ZLP) then:
				// Update number of data transfered
				ptr_job->nb_trans -= nb_remaining;
800060a2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800060a6:	70 39       	ld.w	r9,r8[0xc]
800060a8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800060ac:	10 19       	sub	r9,r8
800060ae:	ee f8 ff f8 	ld.w	r8,r7[-8]
800060b2:	91 39       	st.w	r8[0xc],r9
				// Set transfer complete to stop the transfer
				ptr_job->buf_size = ptr_job->nb_trans;
800060b4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800060b8:	70 39       	ld.w	r9,r8[0xc]
800060ba:	ee f8 ff f8 	ld.w	r8,r7[-8]
800060be:	91 29       	st.w	r8[0x8],r9
			}
			udd_ep_trans_done(ep);
800060c0:	ef 38 ff f7 	ld.ub	r8,r7[-9]
800060c4:	10 9c       	mov	r12,r8
800060c6:	f0 1f 00 51 	mcall	80006208 <udd_ep_interrupt+0x20c>
			return true;
800060ca:	30 18       	mov	r8,1
800060cc:	c9 88       	rjmp	800061fc <udd_ep_interrupt+0x200>
		}
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
800060ce:	fe 68 00 00 	mov	r8,-131072
800060d2:	70 49       	ld.w	r9,r8[0x10]
800060d4:	ef 38 ff f7 	ld.ub	r8,r7[-9]
800060d8:	e0 6a 10 00 	mov	r10,4096
800060dc:	f4 08 09 48 	lsl	r8,r10,r8
800060e0:	f3 e8 00 08 	and	r8,r9,r8
800060e4:	c7 f0       	breq	800061e2 <udd_ep_interrupt+0x1e6>
			if (Is_udd_in_send_interrupt_enabled(ep) && Is_udd_in_send(ep)) {
800060e6:	ef 38 ff f7 	ld.ub	r8,r7[-9]
800060ea:	a3 68       	lsl	r8,0x2
800060ec:	e0 38 fe 40 	sub	r8,130624
800060f0:	70 08       	ld.w	r8,r8[0x0]
800060f2:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800060f6:	5c 58       	castu.b	r8
800060f8:	c2 b0       	breq	8000614e <udd_ep_interrupt+0x152>
800060fa:	ef 38 ff f7 	ld.ub	r8,r7[-9]
800060fe:	a3 68       	lsl	r8,0x2
80006100:	e0 38 fe d0 	sub	r8,130768
80006104:	70 08       	ld.w	r8,r8[0x0]
80006106:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000610a:	5c 58       	castu.b	r8
8000610c:	c2 10       	breq	8000614e <udd_ep_interrupt+0x152>
				udd_disable_in_send_interrupt(ep);
8000610e:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80006112:	a3 68       	lsl	r8,0x2
80006114:	e0 38 fd e0 	sub	r8,130528
80006118:	30 19       	mov	r9,1
8000611a:	91 09       	st.w	r8[0x0],r9
				// One bank is free then send a ZLP
				udd_ack_in_send(ep);
8000611c:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80006120:	a3 68       	lsl	r8,0x2
80006122:	e0 38 fe a0 	sub	r8,130720
80006126:	30 19       	mov	r9,1
80006128:	91 09       	st.w	r8[0x0],r9
				udd_ack_fifocon(ep);
8000612a:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000612e:	a3 68       	lsl	r8,0x2
80006130:	e0 38 fd e0 	sub	r8,130528
80006134:	e0 69 40 00 	mov	r9,16384
80006138:	91 09       	st.w	r8[0x0],r9
				udd_ep_finish_job(ptr_job, false, ep);
8000613a:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000613e:	10 9a       	mov	r10,r8
80006140:	30 0b       	mov	r11,0
80006142:	ee fc ff f8 	ld.w	r12,r7[-8]
80006146:	f0 1f 00 32 	mcall	8000620c <udd_ep_interrupt+0x210>
				return true;
8000614a:	30 18       	mov	r8,1
8000614c:	c5 88       	rjmp	800061fc <udd_ep_interrupt+0x200>
			}
			if (Is_udd_bank_interrupt_enabled(ep) && (0 == udd_nb_busy_bank(ep))) {
8000614e:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80006152:	a3 68       	lsl	r8,0x2
80006154:	e0 38 fe 40 	sub	r8,130624
80006158:	70 08       	ld.w	r8,r8[0x0]
8000615a:	e2 18 10 00 	andl	r8,0x1000,COH
8000615e:	c4 20       	breq	800061e2 <udd_ep_interrupt+0x1e6>
80006160:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80006164:	a3 68       	lsl	r8,0x2
80006166:	e0 38 fe d0 	sub	r8,130768
8000616a:	70 08       	ld.w	r8,r8[0x0]
8000616c:	e2 18 30 00 	andl	r8,0x3000,COH
80006170:	ad 88       	lsr	r8,0xc
80006172:	c3 81       	brne	800061e2 <udd_ep_interrupt+0x1e6>
				// End of background transfer on IN endpoint
				udd_disable_bank_interrupt(ep);
80006174:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80006178:	a3 68       	lsl	r8,0x2
8000617a:	e0 38 fd e0 	sub	r8,130528
8000617e:	e0 69 10 00 	mov	r9,4096
80006182:	91 09       	st.w	r8[0x0],r9
				udd_disable_endpoint_interrupt(ep);
80006184:	fe 68 00 00 	mov	r8,-131072
80006188:	ef 39 ff f7 	ld.ub	r9,r7[-9]
8000618c:	e0 6a 10 00 	mov	r10,4096
80006190:	f4 09 09 49 	lsl	r9,r10,r9
80006194:	91 59       	st.w	r8[0x14],r9

				Assert(ptr_job->stall_requested);
				// A stall has been requested during background transfer
				ptr_job->stall_requested = false;
80006196:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000619a:	72 08       	ld.w	r8,r9[0x0]
8000619c:	30 0a       	mov	r10,0
8000619e:	f1 da d3 a1 	bfins	r8,r10,0x1d,0x1
800061a2:	93 08       	st.w	r9[0x0],r8
				udd_disable_endpoint_bank_autoswitch(ep);
800061a4:	ef 38 ff f7 	ld.ub	r8,r7[-9]
800061a8:	a3 68       	lsl	r8,0x2
800061aa:	e0 38 ff 00 	sub	r8,130816
800061ae:	ef 39 ff f7 	ld.ub	r9,r7[-9]
800061b2:	a3 69       	lsl	r9,0x2
800061b4:	e0 39 ff 00 	sub	r9,130816
800061b8:	72 09       	ld.w	r9,r9[0x0]
800061ba:	a9 d9       	cbr	r9,0x9
800061bc:	91 09       	st.w	r8[0x0],r9
				udd_enable_stall_handshake(ep);
800061be:	ef 38 ff f7 	ld.ub	r8,r7[-9]
800061c2:	a3 68       	lsl	r8,0x2
800061c4:	e0 38 fe 10 	sub	r8,130576
800061c8:	e8 69 00 00 	mov	r9,524288
800061cc:	91 09       	st.w	r8[0x0],r9
				udd_reset_data_toggle(ep);
800061ce:	ef 38 ff f7 	ld.ub	r8,r7[-9]
800061d2:	a3 68       	lsl	r8,0x2
800061d4:	e0 38 fe 10 	sub	r8,130576
800061d8:	e4 69 00 00 	mov	r9,262144
800061dc:	91 09       	st.w	r8[0x0],r9
				return true;
800061de:	30 18       	mov	r8,1
800061e0:	c0 e8       	rjmp	800061fc <udd_ep_interrupt+0x200>
{
	udd_ep_id_t ep;
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
800061e2:	ef 38 ff f7 	ld.ub	r8,r7[-9]
800061e6:	2f f8       	sub	r8,-1
800061e8:	ef 68 ff f7 	st.b	r7[-9],r8
800061ec:	ef 39 ff f7 	ld.ub	r9,r7[-9]
800061f0:	30 38       	mov	r8,3
800061f2:	f0 09 18 00 	cp.b	r9,r8
800061f6:	fe 98 ff 0b 	brls	8000600c <udd_ep_interrupt+0x10>
				udd_reset_data_toggle(ep);
				return true;
			}
		}
	}
	return false;
800061fa:	30 08       	mov	r8,0
}
800061fc:	10 9c       	mov	r12,r8
800061fe:	2f dd       	sub	sp,-12
80006200:	e3 cd 80 80 	ldm	sp++,r7,pc
80006204:	00 00       	add	r0,r0
80006206:	06 30       	cp.w	r0,r3
80006208:	80 00       	ld.sh	r0,r0[0x0]
8000620a:	5d ac       	*unknown*
8000620c:	80 00       	ld.sh	r0,r0[0x0]
8000620e:	5d 28       	mustr	r8

80006210 <cpu_irq_save>:
#endif

typedef uint32_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
80006210:	eb cd 40 80 	pushm	r7,lr
80006214:	1a 97       	mov	r7,sp
80006216:	20 1d       	sub	sp,4
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80006218:	e1 b8 00 00 	mfsr	r8,0x0
8000621c:	ef 48 ff fc 	st.w	r7[-4],r8
	cpu_irq_disable();
80006220:	d3 03       	ssrf	0x10

	return flags;
80006222:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
80006226:	10 9c       	mov	r12,r8
80006228:	2f fd       	sub	sp,-4
8000622a:	e3 cd 80 80 	ldm	sp++,r7,pc

8000622e <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
8000622e:	eb cd 40 80 	pushm	r7,lr
80006232:	1a 97       	mov	r7,sp
80006234:	20 1d       	sub	sp,4
80006236:	ef 4c ff fc 	st.w	r7[-4],r12
	return !(flags & AVR32_SR_GM_MASK);
8000623a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000623e:	e6 18 00 01 	andh	r8,0x1,COH
80006242:	5f 08       	sreq	r8
80006244:	5c 58       	castu.b	r8
}
80006246:	10 9c       	mov	r12,r8
80006248:	2f fd       	sub	sp,-4
8000624a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000624e:	d7 03       	nop

80006250 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
80006250:	eb cd 40 80 	pushm	r7,lr
80006254:	1a 97       	mov	r7,sp
80006256:	20 1d       	sub	sp,4
80006258:	ef 4c ff fc 	st.w	r7[-4],r12
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
8000625c:	ee fc ff fc 	ld.w	r12,r7[-4]
80006260:	f0 1f 00 05 	mcall	80006274 <cpu_irq_restore+0x24>
80006264:	18 98       	mov	r8,r12
80006266:	58 08       	cp.w	r8,0
80006268:	c0 20       	breq	8000626c <cpu_irq_restore+0x1c>
      cpu_irq_enable();
8000626a:	d5 03       	csrf	0x10
   }

	barrier();
}
8000626c:	2f fd       	sub	sp,-4
8000626e:	e3 cd 80 80 	ldm	sp++,r7,pc
80006272:	00 00       	add	r0,r0
80006274:	80 00       	ld.sh	r0,r0[0x0]
80006276:	62 2e       	ld.w	lr,r1[0x8]

80006278 <udi_cdc_comm_enable>:
static volatile bool udi_cdc_tx_both_buf_to_send[UDI_CDC_PORT_NB];

//@}

bool udi_cdc_comm_enable(void)
{
80006278:	eb cd 40 80 	pushm	r7,lr
8000627c:	1a 97       	mov	r7,sp
8000627e:	20 1d       	sub	sp,4
	uint8_t port;
	uint8_t iface_comm_num;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
80006280:	30 08       	mov	r8,0
80006282:	ef 68 ff fe 	st.b	r7[-2],r8
	udi_cdc_nb_comm_enabled = 0;
80006286:	4d c9       	lddpc	r9,800063f4 <udi_cdc_comm_enable+0x17c>
80006288:	30 08       	mov	r8,0
8000628a:	b2 88       	st.b	r9[0x0],r8
	}
	port = udi_cdc_nb_comm_enabled;
#endif

	// Initialize control signal management
	udi_cdc_state[port] = CPU_TO_LE16(0);
8000628c:	ef 3a ff fe 	ld.ub	r10,r7[-2]
80006290:	4d a9       	lddpc	r9,800063f8 <udi_cdc_comm_enable+0x180>
80006292:	30 08       	mov	r8,0
80006294:	f2 0a 0a 18 	st.h	r9[r10<<0x1],r8

	uid_cdc_state_msg[port].header.bmRequestType =
80006298:	ef 39 ff fe 	ld.ub	r9,r7[-2]
8000629c:	4d 8a       	lddpc	r10,800063fc <udi_cdc_comm_enable+0x184>
8000629e:	12 98       	mov	r8,r9
800062a0:	a3 68       	lsl	r8,0x2
800062a2:	12 08       	add	r8,r9
800062a4:	a1 78       	lsl	r8,0x1
800062a6:	f4 08 00 09 	add	r9,r10,r8
800062aa:	3a 18       	mov	r8,-95
800062ac:	b2 88       	st.b	r9[0x0],r8
			USB_REQ_DIR_IN | USB_REQ_TYPE_CLASS |
			USB_REQ_RECIP_INTERFACE;
	uid_cdc_state_msg[port].header.bNotification = USB_REQ_CDC_NOTIFY_SERIAL_STATE;
800062ae:	ef 39 ff fe 	ld.ub	r9,r7[-2]
800062b2:	4d 3a       	lddpc	r10,800063fc <udi_cdc_comm_enable+0x184>
800062b4:	12 98       	mov	r8,r9
800062b6:	a3 68       	lsl	r8,0x2
800062b8:	12 08       	add	r8,r9
800062ba:	a1 78       	lsl	r8,0x1
800062bc:	f4 08 00 09 	add	r9,r10,r8
800062c0:	32 08       	mov	r8,32
800062c2:	b2 98       	st.b	r9[0x1],r8
	uid_cdc_state_msg[port].header.wValue = LE16(0);
800062c4:	ef 39 ff fe 	ld.ub	r9,r7[-2]
800062c8:	4c da       	lddpc	r10,800063fc <udi_cdc_comm_enable+0x184>
800062ca:	12 98       	mov	r8,r9
800062cc:	a3 68       	lsl	r8,0x2
800062ce:	12 08       	add	r8,r9
800062d0:	a1 78       	lsl	r8,0x1
800062d2:	f4 08 00 09 	add	r9,r10,r8
800062d6:	30 08       	mov	r8,0
800062d8:	b2 18       	st.h	r9[0x2],r8

	switch (port) {
800062da:	ef 38 ff fe 	ld.ub	r8,r7[-2]
800062de:	58 08       	cp.w	r8,0
800062e0:	c0 51       	brne	800062ea <udi_cdc_comm_enable+0x72>
#define UDI_CDC_PORT_TO_IFACE_COMM(index, unused) \
	case index: \
		iface_comm_num = UDI_CDC_COMM_IFACE_NUMBER_##index; \
		break;
	MREPEAT(UDI_CDC_PORT_NB, UDI_CDC_PORT_TO_IFACE_COMM, ~)
800062e2:	30 08       	mov	r8,0
800062e4:	ef 68 ff ff 	st.b	r7[-1],r8
800062e8:	c0 48       	rjmp	800062f0 <udi_cdc_comm_enable+0x78>
#undef UDI_CDC_PORT_TO_IFACE_COMM
	default:
		iface_comm_num = UDI_CDC_COMM_IFACE_NUMBER_0;
800062ea:	30 08       	mov	r8,0
800062ec:	ef 68 ff ff 	st.b	r7[-1],r8
		break;
	}

	uid_cdc_state_msg[port].header.wIndex = LE16(iface_comm_num);
800062f0:	ef 39 ff fe 	ld.ub	r9,r7[-2]
800062f4:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800062f8:	a9 48       	asr	r8,0x8
800062fa:	f5 d8 b0 10 	bfexts	r10,r8,0x0,0x10
800062fe:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80006302:	a9 68       	lsl	r8,0x8
80006304:	5c 88       	casts.h	r8
80006306:	f5 e8 10 08 	or	r8,r10,r8
8000630a:	5c 88       	casts.h	r8
8000630c:	10 9a       	mov	r10,r8
8000630e:	4b cb       	lddpc	r11,800063fc <udi_cdc_comm_enable+0x184>
80006310:	12 98       	mov	r8,r9
80006312:	a3 68       	lsl	r8,0x2
80006314:	12 08       	add	r8,r9
80006316:	a1 78       	lsl	r8,0x1
80006318:	f6 08 00 08 	add	r8,r11,r8
8000631c:	f0 c9 ff fc 	sub	r9,r8,-4
80006320:	14 98       	mov	r8,r10
80006322:	b2 08       	st.h	r9[0x0],r8
	uid_cdc_state_msg[port].header.wLength = LE16(2);
80006324:	ef 39 ff fe 	ld.ub	r9,r7[-2]
80006328:	4b 5a       	lddpc	r10,800063fc <udi_cdc_comm_enable+0x184>
8000632a:	12 98       	mov	r8,r9
8000632c:	a3 68       	lsl	r8,0x2
8000632e:	12 08       	add	r8,r9
80006330:	a1 78       	lsl	r8,0x1
80006332:	f4 08 00 08 	add	r8,r10,r8
80006336:	f0 c9 ff fc 	sub	r9,r8,-4
8000633a:	e0 68 02 00 	mov	r8,512
8000633e:	b2 18       	st.h	r9[0x2],r8
	uid_cdc_state_msg[port].value = CPU_TO_LE16(0);
80006340:	ef 39 ff fe 	ld.ub	r9,r7[-2]
80006344:	4a ea       	lddpc	r10,800063fc <udi_cdc_comm_enable+0x184>
80006346:	12 98       	mov	r8,r9
80006348:	a3 68       	lsl	r8,0x2
8000634a:	12 08       	add	r8,r9
8000634c:	a1 78       	lsl	r8,0x1
8000634e:	f4 08 00 08 	add	r8,r10,r8
80006352:	f0 c9 ff f8 	sub	r9,r8,-8
80006356:	30 08       	mov	r8,0
80006358:	b2 08       	st.h	r9[0x0],r8

	udi_cdc_line_coding[port].dwDTERate = CPU_TO_LE32(UDI_CDC_DEFAULT_RATE);
8000635a:	ef 39 ff fe 	ld.ub	r9,r7[-2]
8000635e:	4a 9a       	lddpc	r10,80006400 <udi_cdc_comm_enable+0x188>
80006360:	12 98       	mov	r8,r9
80006362:	a3 78       	lsl	r8,0x3
80006364:	12 18       	sub	r8,r9
80006366:	f4 08 00 08 	add	r8,r10,r8
8000636a:	11 89       	ld.ub	r9,r8[0x0]
8000636c:	e2 19 00 00 	andl	r9,0x0,COH
80006370:	b0 89       	st.b	r8[0x0],r9
80006372:	11 99       	ld.ub	r9,r8[0x1]
80006374:	e2 19 00 00 	andl	r9,0x0,COH
80006378:	ea 19 ff ff 	orh	r9,0xffff
8000637c:	e8 19 ff c2 	orl	r9,0xffc2
80006380:	b0 99       	st.b	r8[0x1],r9
80006382:	11 a9       	ld.ub	r9,r8[0x2]
80006384:	e2 19 00 00 	andl	r9,0x0,COH
80006388:	a1 a9       	sbr	r9,0x0
8000638a:	b0 a9       	st.b	r8[0x2],r9
8000638c:	11 b9       	ld.ub	r9,r8[0x3]
8000638e:	e2 19 00 00 	andl	r9,0x0,COH
80006392:	b0 b9       	st.b	r8[0x3],r9
	udi_cdc_line_coding[port].bCharFormat = UDI_CDC_DEFAULT_STOPBITS;
80006394:	ef 39 ff fe 	ld.ub	r9,r7[-2]
80006398:	49 aa       	lddpc	r10,80006400 <udi_cdc_comm_enable+0x188>
8000639a:	12 98       	mov	r8,r9
8000639c:	a3 78       	lsl	r8,0x3
8000639e:	12 18       	sub	r8,r9
800063a0:	f4 08 00 08 	add	r8,r10,r8
800063a4:	f0 c9 ff fc 	sub	r9,r8,-4
800063a8:	30 08       	mov	r8,0
800063aa:	b2 88       	st.b	r9[0x0],r8
	udi_cdc_line_coding[port].bParityType = UDI_CDC_DEFAULT_PARITY;
800063ac:	ef 39 ff fe 	ld.ub	r9,r7[-2]
800063b0:	49 4a       	lddpc	r10,80006400 <udi_cdc_comm_enable+0x188>
800063b2:	12 98       	mov	r8,r9
800063b4:	a3 78       	lsl	r8,0x3
800063b6:	12 18       	sub	r8,r9
800063b8:	f4 08 00 08 	add	r8,r10,r8
800063bc:	f0 c9 ff fc 	sub	r9,r8,-4
800063c0:	30 08       	mov	r8,0
800063c2:	b2 98       	st.b	r9[0x1],r8
	udi_cdc_line_coding[port].bDataBits = UDI_CDC_DEFAULT_DATABITS;
800063c4:	ef 39 ff fe 	ld.ub	r9,r7[-2]
800063c8:	48 ea       	lddpc	r10,80006400 <udi_cdc_comm_enable+0x188>
800063ca:	12 98       	mov	r8,r9
800063cc:	a3 78       	lsl	r8,0x3
800063ce:	12 18       	sub	r8,r9
800063d0:	f4 08 00 08 	add	r8,r10,r8
800063d4:	f0 c9 ff fc 	sub	r9,r8,-4
800063d8:	30 88       	mov	r8,8
800063da:	b2 a8       	st.b	r9[0x2],r8
	// to initialize memories or indicate that interface is enabled
	UDI_CDC_SET_CODING_EXT(port,(&udi_cdc_line_coding[port]));
	if (!UDI_CDC_ENABLE_EXT(port)) {
		return false;
	}
	udi_cdc_nb_comm_enabled++;
800063dc:	48 68       	lddpc	r8,800063f4 <udi_cdc_comm_enable+0x17c>
800063de:	11 88       	ld.ub	r8,r8[0x0]
800063e0:	5c 58       	castu.b	r8
800063e2:	2f f8       	sub	r8,-1
800063e4:	5c 58       	castu.b	r8
800063e6:	48 49       	lddpc	r9,800063f4 <udi_cdc_comm_enable+0x17c>
800063e8:	b2 88       	st.b	r9[0x0],r8
	return true;
800063ea:	30 18       	mov	r8,1
}
800063ec:	10 9c       	mov	r12,r8
800063ee:	2f fd       	sub	sp,-4
800063f0:	e3 cd 80 80 	ldm	sp++,r7,pc
800063f4:	00 00       	add	r0,r0
800063f6:	06 88       	andn	r8,r3
800063f8:	00 00       	add	r0,r0
800063fa:	06 78       	tst	r8,r3
800063fc:	00 00       	add	r0,r0
800063fe:	06 7c       	tst	r12,r3
80006400:	00 00       	add	r0,r0
80006402:	06 70       	tst	r0,r3

80006404 <udi_cdc_data_enable>:

bool udi_cdc_data_enable(void)
{
80006404:	eb cd 40 80 	pushm	r7,lr
80006408:	1a 97       	mov	r7,sp
8000640a:	20 1d       	sub	sp,4
	uint8_t port;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
8000640c:	30 08       	mov	r8,0
8000640e:	ef 68 ff ff 	st.b	r7[-1],r8
	udi_cdc_nb_data_enabled = 0;
80006412:	4b a9       	lddpc	r9,800064f8 <udi_cdc_data_enable+0xf4>
80006414:	30 08       	mov	r8,0
80006416:	b2 88       	st.b	r9[0x0],r8
	}
	port = udi_cdc_nb_data_enabled;
#endif

	// Initialize TX management
	udi_cdc_tx_trans_ongoing[port] = false;
80006418:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000641c:	4b 8a       	lddpc	r10,800064fc <udi_cdc_data_enable+0xf8>
8000641e:	30 08       	mov	r8,0
80006420:	f4 09 0b 08 	st.b	r10[r9],r8
	udi_cdc_tx_both_buf_to_send[port] = false;
80006424:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80006428:	4b 6a       	lddpc	r10,80006500 <udi_cdc_data_enable+0xfc>
8000642a:	30 08       	mov	r8,0
8000642c:	f4 09 0b 08 	st.b	r10[r9],r8
	udi_cdc_tx_buf_sel[port] = 0;
80006430:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80006434:	4b 4a       	lddpc	r10,80006504 <udi_cdc_data_enable+0x100>
80006436:	30 08       	mov	r8,0
80006438:	f4 09 0b 08 	st.b	r10[r9],r8
	udi_cdc_tx_buf_nb[port][0] = 0;
8000643c:	ef 3a ff ff 	ld.ub	r10,r7[-1]
80006440:	4b 29       	lddpc	r9,80006508 <udi_cdc_data_enable+0x104>
80006442:	30 08       	mov	r8,0
80006444:	f2 0a 0a 28 	st.h	r9[r10<<0x2],r8
	udi_cdc_tx_buf_nb[port][1] = 0;
80006448:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000644c:	4a f9       	lddpc	r9,80006508 <udi_cdc_data_enable+0x104>
8000644e:	a1 78       	lsl	r8,0x1
80006450:	f0 ca ff ff 	sub	r10,r8,-1
80006454:	30 08       	mov	r8,0
80006456:	f2 0a 0a 18 	st.h	r9[r10<<0x1],r8
	udi_cdc_tx_sof_num[port] = 0;
8000645a:	ef 3a ff ff 	ld.ub	r10,r7[-1]
8000645e:	4a c9       	lddpc	r9,8000650c <udi_cdc_data_enable+0x108>
80006460:	30 08       	mov	r8,0
80006462:	f2 0a 0a 18 	st.h	r9[r10<<0x1],r8
	udi_cdc_tx_send(port);
80006466:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000646a:	10 9c       	mov	r12,r8
8000646c:	f0 1f 00 29 	mcall	80006510 <udi_cdc_data_enable+0x10c>

	// Initialize RX management
	udi_cdc_rx_trans_ongoing[port] = false;
80006470:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80006474:	4a 8a       	lddpc	r10,80006514 <udi_cdc_data_enable+0x110>
80006476:	30 08       	mov	r8,0
80006478:	f4 09 0b 08 	st.b	r10[r9],r8
	udi_cdc_rx_buf_sel[port] = 0;
8000647c:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80006480:	4a 6a       	lddpc	r10,80006518 <udi_cdc_data_enable+0x114>
80006482:	30 08       	mov	r8,0
80006484:	f4 09 0b 08 	st.b	r10[r9],r8
	udi_cdc_rx_buf_nb[port][0] = 0;
80006488:	ef 3a ff ff 	ld.ub	r10,r7[-1]
8000648c:	4a 49       	lddpc	r9,8000651c <udi_cdc_data_enable+0x118>
8000648e:	30 08       	mov	r8,0
80006490:	f2 0a 0a 28 	st.h	r9[r10<<0x2],r8
	udi_cdc_rx_buf_nb[port][1] = 0;
80006494:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80006498:	4a 19       	lddpc	r9,8000651c <udi_cdc_data_enable+0x118>
8000649a:	a1 78       	lsl	r8,0x1
8000649c:	f0 ca ff ff 	sub	r10,r8,-1
800064a0:	30 08       	mov	r8,0
800064a2:	f2 0a 0a 18 	st.h	r9[r10<<0x1],r8
	udi_cdc_rx_pos[port] = 0;
800064a6:	ef 3a ff ff 	ld.ub	r10,r7[-1]
800064aa:	49 e9       	lddpc	r9,80006520 <udi_cdc_data_enable+0x11c>
800064ac:	30 08       	mov	r8,0
800064ae:	f2 0a 0a 18 	st.h	r9[r10<<0x1],r8
	if (!udi_cdc_rx_start(port)) {
800064b2:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800064b6:	10 9c       	mov	r12,r8
800064b8:	f0 1f 00 1b 	mcall	80006524 <udi_cdc_data_enable+0x120>
800064bc:	18 98       	mov	r8,r12
800064be:	ec 18 00 01 	eorl	r8,0x1
800064c2:	5c 58       	castu.b	r8
800064c4:	c0 30       	breq	800064ca <udi_cdc_data_enable+0xc6>
		return false;
800064c6:	30 08       	mov	r8,0
800064c8:	c1 48       	rjmp	800064f0 <udi_cdc_data_enable+0xec>
	}
	udi_cdc_nb_data_enabled++;
800064ca:	48 c8       	lddpc	r8,800064f8 <udi_cdc_data_enable+0xf4>
800064cc:	11 88       	ld.ub	r8,r8[0x0]
800064ce:	5c 58       	castu.b	r8
800064d0:	2f f8       	sub	r8,-1
800064d2:	5c 58       	castu.b	r8
800064d4:	48 99       	lddpc	r9,800064f8 <udi_cdc_data_enable+0xf4>
800064d6:	b2 88       	st.b	r9[0x0],r8
	if (udi_cdc_nb_data_enabled == UDI_CDC_PORT_NB) {
800064d8:	48 88       	lddpc	r8,800064f8 <udi_cdc_data_enable+0xf4>
800064da:	11 88       	ld.ub	r8,r8[0x0]
800064dc:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800064e0:	30 18       	mov	r8,1
800064e2:	f0 09 18 00 	cp.b	r9,r8
800064e6:	c0 41       	brne	800064ee <udi_cdc_data_enable+0xea>
		udi_cdc_data_running = true;
800064e8:	49 09       	lddpc	r9,80006528 <udi_cdc_data_enable+0x124>
800064ea:	30 18       	mov	r8,1
800064ec:	b2 88       	st.b	r9[0x0],r8
	}
	return true;
800064ee:	30 18       	mov	r8,1
}
800064f0:	10 9c       	mov	r12,r8
800064f2:	2f fd       	sub	sp,-4
800064f4:	e3 cd 80 80 	ldm	sp++,r7,pc
800064f8:	00 00       	add	r0,r0
800064fa:	06 89       	andn	r9,r3
800064fc:	00 00       	add	r0,r0
800064fe:	07 a8       	ld.ub	r8,r3[0x2]
80006500:	00 00       	add	r0,r0
80006502:	07 ac       	ld.ub	r12,r3[0x2]
80006504:	00 00       	add	r0,r0
80006506:	07 a0       	ld.ub	r0,r3[0x2]
80006508:	00 00       	add	r0,r0
8000650a:	07 9c       	ld.ub	r12,r3[0x1]
8000650c:	00 00       	add	r0,r0
8000650e:	07 a4       	ld.ub	r4,r3[0x2]
80006510:	80 00       	ld.sh	r0,r0[0x0]
80006512:	69 7c       	ld.w	r12,r4[0x5c]
80006514:	00 00       	add	r0,r0
80006516:	07 18       	ld.sh	r8,r3++
80006518:	00 00       	add	r0,r0
8000651a:	07 10       	ld.sh	r0,r3++
8000651c:	00 00       	add	r0,r0
8000651e:	07 0c       	ld.w	r12,r3++
80006520:	00 00       	add	r0,r0
80006522:	07 14       	ld.sh	r4,r3++
80006524:	80 00       	ld.sh	r0,r0[0x0]
80006526:	66 ec       	ld.w	r12,r3[0x38]
80006528:	00 00       	add	r0,r0
8000652a:	06 8a       	andn	r10,r3

8000652c <udi_cdc_comm_disable>:

void udi_cdc_comm_disable(void)
{
8000652c:	eb cd 40 80 	pushm	r7,lr
80006530:	1a 97       	mov	r7,sp
	Assert(udi_cdc_nb_comm_enabled != 0);
	udi_cdc_nb_comm_enabled--;
80006532:	48 58       	lddpc	r8,80006544 <udi_cdc_comm_disable+0x18>
80006534:	11 88       	ld.ub	r8,r8[0x0]
80006536:	5c 58       	castu.b	r8
80006538:	20 18       	sub	r8,1
8000653a:	5c 58       	castu.b	r8
8000653c:	48 29       	lddpc	r9,80006544 <udi_cdc_comm_disable+0x18>
8000653e:	b2 88       	st.b	r9[0x0],r8
}
80006540:	e3 cd 80 80 	ldm	sp++,r7,pc
80006544:	00 00       	add	r0,r0
80006546:	06 88       	andn	r8,r3

80006548 <udi_cdc_data_disable>:

void udi_cdc_data_disable(void)
{
80006548:	eb cd 40 80 	pushm	r7,lr
8000654c:	1a 97       	mov	r7,sp
8000654e:	20 1d       	sub	sp,4
	uint8_t port;

	Assert(udi_cdc_nb_data_enabled != 0);
	udi_cdc_nb_data_enabled--;
80006550:	48 98       	lddpc	r8,80006574 <udi_cdc_data_disable+0x2c>
80006552:	11 88       	ld.ub	r8,r8[0x0]
80006554:	5c 58       	castu.b	r8
80006556:	20 18       	sub	r8,1
80006558:	5c 58       	castu.b	r8
8000655a:	48 79       	lddpc	r9,80006574 <udi_cdc_data_disable+0x2c>
8000655c:	b2 88       	st.b	r9[0x0],r8
	port = udi_cdc_nb_data_enabled;
8000655e:	48 68       	lddpc	r8,80006574 <udi_cdc_data_disable+0x2c>
80006560:	11 88       	ld.ub	r8,r8[0x0]
80006562:	ef 68 ff ff 	st.b	r7[-1],r8
	UDI_CDC_DISABLE_EXT(port);
	udi_cdc_data_running = false;
80006566:	48 59       	lddpc	r9,80006578 <udi_cdc_data_disable+0x30>
80006568:	30 08       	mov	r8,0
8000656a:	b2 88       	st.b	r9[0x0],r8
}
8000656c:	2f fd       	sub	sp,-4
8000656e:	e3 cd 80 80 	ldm	sp++,r7,pc
80006572:	00 00       	add	r0,r0
80006574:	00 00       	add	r0,r0
80006576:	06 89       	andn	r9,r3
80006578:	00 00       	add	r0,r0
8000657a:	06 8a       	andn	r10,r3

8000657c <udi_cdc_comm_setup>:

bool udi_cdc_comm_setup(void)
{
8000657c:	eb cd 40 80 	pushm	r7,lr
80006580:	1a 97       	mov	r7,sp
80006582:	20 1d       	sub	sp,4
	uint8_t port = udi_cdc_setup_to_port();
80006584:	f0 1f 00 34 	mcall	80006654 <udi_cdc_comm_setup+0xd8>
80006588:	18 98       	mov	r8,r12
8000658a:	ef 68 ff ff 	st.b	r7[-1],r8

	if (Udd_setup_is_in()) {
8000658e:	4b 38       	lddpc	r8,80006658 <udi_cdc_comm_setup+0xdc>
80006590:	11 88       	ld.ub	r8,r8[0x0]
80006592:	10 99       	mov	r9,r8
80006594:	30 08       	mov	r8,0
80006596:	f0 09 18 00 	cp.b	r9,r8
8000659a:	c2 44       	brge	800065e2 <udi_cdc_comm_setup+0x66>
		// GET Interface Requests
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
8000659c:	4a f8       	lddpc	r8,80006658 <udi_cdc_comm_setup+0xdc>
8000659e:	11 88       	ld.ub	r8,r8[0x0]
800065a0:	e2 18 00 60 	andl	r8,0x60,COH
800065a4:	e0 48 00 20 	cp.w	r8,32
800065a8:	c1 d1       	brne	800065e2 <udi_cdc_comm_setup+0x66>
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
800065aa:	4a c8       	lddpc	r8,80006658 <udi_cdc_comm_setup+0xdc>
800065ac:	11 98       	ld.ub	r8,r8[0x1]
800065ae:	e0 48 00 21 	cp.w	r8,33
800065b2:	c1 81       	brne	800065e2 <udi_cdc_comm_setup+0x66>
			case USB_REQ_CDC_GET_LINE_CODING:
				// Get configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
800065b4:	4a 98       	lddpc	r8,80006658 <udi_cdc_comm_setup+0xdc>
800065b6:	90 39       	ld.sh	r9,r8[0x6]
800065b8:	30 78       	mov	r8,7
800065ba:	f0 09 19 00 	cp.h	r9,r8
800065be:	c0 30       	breq	800065c4 <udi_cdc_comm_setup+0x48>
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
800065c0:	30 08       	mov	r8,0
800065c2:	c4 48       	rjmp	8000664a <udi_cdc_comm_setup+0xce>
				udd_g_ctrlreq.payload =
						(uint8_t *) &
800065c4:	4a 6a       	lddpc	r10,8000665c <udi_cdc_comm_setup+0xe0>
800065c6:	ef 39 ff ff 	ld.ub	r9,r7[-1]
						udi_cdc_line_coding[port];
800065ca:	12 98       	mov	r8,r9
800065cc:	a3 78       	lsl	r8,0x3
800065ce:	12 18       	sub	r8,r9
				// Get configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
				udd_g_ctrlreq.payload =
						(uint8_t *) &
800065d0:	f4 08 00 09 	add	r9,r10,r8
			case USB_REQ_CDC_GET_LINE_CODING:
				// Get configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
				udd_g_ctrlreq.payload =
800065d4:	4a 18       	lddpc	r8,80006658 <udi_cdc_comm_setup+0xdc>
800065d6:	91 29       	st.w	r8[0x8],r9
						(uint8_t *) &
						udi_cdc_line_coding[port];
				udd_g_ctrlreq.payload_size =
800065d8:	4a 09       	lddpc	r9,80006658 <udi_cdc_comm_setup+0xdc>
800065da:	30 78       	mov	r8,7
800065dc:	b2 68       	st.h	r9[0xc],r8
						sizeof(usb_cdc_line_coding_t);
				return true;
800065de:	30 18       	mov	r8,1
800065e0:	c3 58       	rjmp	8000664a <udi_cdc_comm_setup+0xce>
			}
		}
	}
	if (Udd_setup_is_out()) {
800065e2:	49 e8       	lddpc	r8,80006658 <udi_cdc_comm_setup+0xdc>
800065e4:	11 88       	ld.ub	r8,r8[0x0]
800065e6:	10 99       	mov	r9,r8
800065e8:	30 08       	mov	r8,0
800065ea:	f0 09 18 00 	cp.b	r9,r8
800065ee:	c2 d5       	brlt	80006648 <udi_cdc_comm_setup+0xcc>
		// SET Interface Requests
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
800065f0:	49 a8       	lddpc	r8,80006658 <udi_cdc_comm_setup+0xdc>
800065f2:	11 88       	ld.ub	r8,r8[0x0]
800065f4:	e2 18 00 60 	andl	r8,0x60,COH
800065f8:	e0 48 00 20 	cp.w	r8,32
800065fc:	c2 61       	brne	80006648 <udi_cdc_comm_setup+0xcc>
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
800065fe:	49 78       	lddpc	r8,80006658 <udi_cdc_comm_setup+0xdc>
80006600:	11 98       	ld.ub	r8,r8[0x1]
80006602:	e0 48 00 20 	cp.w	r8,32
80006606:	c0 50       	breq	80006610 <udi_cdc_comm_setup+0x94>
80006608:	e0 48 00 22 	cp.w	r8,34
8000660c:	c1 c0       	breq	80006644 <udi_cdc_comm_setup+0xc8>
8000660e:	c1 d8       	rjmp	80006648 <udi_cdc_comm_setup+0xcc>
			case USB_REQ_CDC_SET_LINE_CODING:
				// Change configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
80006610:	49 28       	lddpc	r8,80006658 <udi_cdc_comm_setup+0xdc>
80006612:	90 39       	ld.sh	r9,r8[0x6]
80006614:	30 78       	mov	r8,7
80006616:	f0 09 19 00 	cp.h	r9,r8
8000661a:	c0 30       	breq	80006620 <udi_cdc_comm_setup+0xa4>
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
8000661c:	30 08       	mov	r8,0
8000661e:	c1 68       	rjmp	8000664a <udi_cdc_comm_setup+0xce>
				udd_g_ctrlreq.callback =
80006620:	48 e8       	lddpc	r8,80006658 <udi_cdc_comm_setup+0xdc>
80006622:	49 09       	lddpc	r9,80006660 <udi_cdc_comm_setup+0xe4>
80006624:	91 49       	st.w	r8[0x10],r9
						udi_cdc_line_coding_received;
				udd_g_ctrlreq.payload =
						(uint8_t *) &
80006626:	48 ea       	lddpc	r10,8000665c <udi_cdc_comm_setup+0xe0>
80006628:	ef 39 ff ff 	ld.ub	r9,r7[-1]
						udi_cdc_line_coding[port];
8000662c:	12 98       	mov	r8,r9
8000662e:	a3 78       	lsl	r8,0x3
80006630:	12 18       	sub	r8,r9
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
				udd_g_ctrlreq.callback =
						udi_cdc_line_coding_received;
				udd_g_ctrlreq.payload =
						(uint8_t *) &
80006632:	f4 08 00 09 	add	r9,r10,r8
				if (sizeof(usb_cdc_line_coding_t) !=
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
				udd_g_ctrlreq.callback =
						udi_cdc_line_coding_received;
				udd_g_ctrlreq.payload =
80006636:	48 98       	lddpc	r8,80006658 <udi_cdc_comm_setup+0xdc>
80006638:	91 29       	st.w	r8[0x8],r9
						(uint8_t *) &
						udi_cdc_line_coding[port];
				udd_g_ctrlreq.payload_size =
8000663a:	48 89       	lddpc	r9,80006658 <udi_cdc_comm_setup+0xdc>
8000663c:	30 78       	mov	r8,7
8000663e:	b2 68       	st.h	r9[0xc],r8
						sizeof(usb_cdc_line_coding_t);
				return true;
80006640:	30 18       	mov	r8,1
80006642:	c0 48       	rjmp	8000664a <udi_cdc_comm_setup+0xce>
						(udd_g_ctrlreq.req.wValue
						 & CDC_CTRL_SIGNAL_DTE_PRESENT)));
				UDI_CDC_SET_RTS_EXT(port, (0 !=
						(udd_g_ctrlreq.req.wValue
						 & CDC_CTRL_SIGNAL_ACTIVATE_CARRIER)));
				return true;
80006644:	30 18       	mov	r8,1
80006646:	c0 28       	rjmp	8000664a <udi_cdc_comm_setup+0xce>
			}
		}
	}
	return false;  // request Not supported
80006648:	30 08       	mov	r8,0
}
8000664a:	10 9c       	mov	r12,r8
8000664c:	2f fd       	sub	sp,-4
8000664e:	e3 cd 80 80 	ldm	sp++,r7,pc
80006652:	00 00       	add	r0,r0
80006654:	80 00       	ld.sh	r0,r0[0x0]
80006656:	66 9c       	ld.w	r12,r3[0x24]
80006658:	00 00       	add	r0,r0
8000665a:	0b 20       	ld.uh	r0,r5++
8000665c:	00 00       	add	r0,r0
8000665e:	06 70       	tst	r0,r3
80006660:	80 00       	ld.sh	r0,r0[0x0]
80006662:	66 d0       	ld.w	r0,r3[0x34]

80006664 <udi_cdc_data_setup>:

bool udi_cdc_data_setup(void)
{
80006664:	eb cd 40 80 	pushm	r7,lr
80006668:	1a 97       	mov	r7,sp
	return false;  // request Not supported
8000666a:	30 08       	mov	r8,0
}
8000666c:	10 9c       	mov	r12,r8
8000666e:	e3 cd 80 80 	ldm	sp++,r7,pc

80006672 <udi_cdc_getsetting>:

uint8_t udi_cdc_getsetting(void)
{
80006672:	eb cd 40 80 	pushm	r7,lr
80006676:	1a 97       	mov	r7,sp
	return 0;      // CDC don't have multiple alternate setting
80006678:	30 08       	mov	r8,0
}
8000667a:	10 9c       	mov	r12,r8
8000667c:	e3 cd 80 80 	ldm	sp++,r7,pc

80006680 <udi_cdc_data_sof_notify>:

void udi_cdc_data_sof_notify(void)
{
80006680:	eb cd 40 80 	pushm	r7,lr
80006684:	1a 97       	mov	r7,sp
	static uint8_t port_notify = 0;

	// A call of udi_cdc_data_sof_notify() is done for each port
	udi_cdc_tx_send(port_notify);
80006686:	48 48       	lddpc	r8,80006694 <udi_cdc_data_sof_notify+0x14>
80006688:	11 88       	ld.ub	r8,r8[0x0]
8000668a:	10 9c       	mov	r12,r8
8000668c:	f0 1f 00 03 	mcall	80006698 <udi_cdc_data_sof_notify+0x18>
	port_notify++;
	if (port_notify >= UDI_CDC_PORT_NB) {
		port_notify = 0;
	}
#endif
}
80006690:	e3 cd 80 80 	ldm	sp++,r7,pc
80006694:	00 00       	add	r0,r0
80006696:	07 b2       	ld.ub	r2,r3[0x3]
80006698:	80 00       	ld.sh	r0,r0[0x0]
8000669a:	69 7c       	ld.w	r12,r4[0x5c]

8000669c <udi_cdc_setup_to_port>:

//-------------------------------------------------
//------- Internal routines to control serial line

static uint8_t udi_cdc_setup_to_port(void)
{
8000669c:	eb cd 40 80 	pushm	r7,lr
800066a0:	1a 97       	mov	r7,sp
800066a2:	20 1d       	sub	sp,4
	uint8_t port;

	switch (udd_g_ctrlreq.req.wIndex & 0xFF) {
800066a4:	48 a8       	lddpc	r8,800066cc <udi_cdc_setup_to_port+0x30>
800066a6:	90 28       	ld.sh	r8,r8[0x4]
800066a8:	5c 78       	castu.h	r8
800066aa:	f1 d8 c0 08 	bfextu	r8,r8,0x0,0x8
800066ae:	c0 51       	brne	800066b8 <udi_cdc_setup_to_port+0x1c>
#define UDI_CDC_IFACE_COMM_TO_PORT(iface, unused) \
	case UDI_CDC_COMM_IFACE_NUMBER_##iface: \
		port = iface; \
		break;
	MREPEAT(UDI_CDC_PORT_NB, UDI_CDC_IFACE_COMM_TO_PORT, ~)
800066b0:	30 08       	mov	r8,0
800066b2:	ef 68 ff ff 	st.b	r7[-1],r8
800066b6:	c0 48       	rjmp	800066be <udi_cdc_setup_to_port+0x22>
#undef UDI_CDC_IFACE_COMM_TO_PORT
	default:
		port = 0;
800066b8:	30 08       	mov	r8,0
800066ba:	ef 68 ff ff 	st.b	r7[-1],r8
		break;
	}
	return port;
800066be:	ef 38 ff ff 	ld.ub	r8,r7[-1]
}
800066c2:	10 9c       	mov	r12,r8
800066c4:	2f fd       	sub	sp,-4
800066c6:	e3 cd 80 80 	ldm	sp++,r7,pc
800066ca:	00 00       	add	r0,r0
800066cc:	00 00       	add	r0,r0
800066ce:	0b 20       	ld.uh	r0,r5++

800066d0 <udi_cdc_line_coding_received>:

static void udi_cdc_line_coding_received(void)
{
800066d0:	eb cd 40 80 	pushm	r7,lr
800066d4:	1a 97       	mov	r7,sp
800066d6:	20 1d       	sub	sp,4
	uint8_t port = udi_cdc_setup_to_port();
800066d8:	f0 1f 00 04 	mcall	800066e8 <udi_cdc_line_coding_received+0x18>
800066dc:	18 98       	mov	r8,r12
800066de:	ef 68 ff ff 	st.b	r7[-1],r8
	UNUSED(port);

	UDI_CDC_SET_CODING_EXT(port, (&udi_cdc_line_coding[port]));
}
800066e2:	2f fd       	sub	sp,-4
800066e4:	e3 cd 80 80 	ldm	sp++,r7,pc
800066e8:	80 00       	ld.sh	r0,r0[0x0]
800066ea:	66 9c       	ld.w	r12,r3[0x24]

800066ec <udi_cdc_rx_start>:
//-------------------------------------------------
//------- Internal routines to process data transfer


static bool udi_cdc_rx_start(uint8_t port)
{
800066ec:	eb cd 40 80 	pushm	r7,lr
800066f0:	1a 97       	mov	r7,sp
800066f2:	20 3d       	sub	sp,12
800066f4:	18 98       	mov	r8,r12
800066f6:	ef 68 ff f4 	st.b	r7[-12],r8
	irqflags_t flags;
	uint8_t buf_sel_trans;
	udd_ep_id_t ep;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
800066fa:	30 08       	mov	r8,0
800066fc:	ef 68 ff f4 	st.b	r7[-12],r8
#endif

	flags = cpu_irq_save();
80006700:	f0 1f 00 39 	mcall	800067e4 <udi_cdc_rx_start+0xf8>
80006704:	18 98       	mov	r8,r12
80006706:	ef 48 ff f8 	st.w	r7[-8],r8
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
8000670a:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000670e:	4b 79       	lddpc	r9,800067e8 <udi_cdc_rx_start+0xfc>
80006710:	f2 08 07 08 	ld.ub	r8,r9[r8]
80006714:	ef 68 ff fe 	st.b	r7[-2],r8
	if (udi_cdc_rx_trans_ongoing[port] ||
80006718:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000671c:	4b 49       	lddpc	r9,800067ec <udi_cdc_rx_start+0x100>
8000671e:	f2 08 07 08 	ld.ub	r8,r9[r8]
80006722:	5c 58       	castu.b	r8
80006724:	c1 61       	brne	80006750 <udi_cdc_rx_start+0x64>
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
80006726:	ef 39 ff f4 	ld.ub	r9,r7[-12]
8000672a:	4b 28       	lddpc	r8,800067f0 <udi_cdc_rx_start+0x104>
8000672c:	f0 09 04 18 	ld.sh	r8,r8[r9<<0x1]
80006730:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
80006734:	ef 3b ff f4 	ld.ub	r11,r7[-12]
80006738:	ef 3a ff fe 	ld.ub	r10,r7[-2]
8000673c:	4a e8       	lddpc	r8,800067f4 <udi_cdc_rx_start+0x108>
8000673e:	a1 7b       	lsl	r11,0x1
80006740:	f6 0a 00 0a 	add	r10,r11,r10
80006744:	f0 0a 04 18 	ld.sh	r8,r8[r10<<0x1]
80006748:	5c 88       	casts.h	r8
	port = 0;
#endif

	flags = cpu_irq_save();
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
	if (udi_cdc_rx_trans_ongoing[port] ||
8000674a:	f0 09 19 00 	cp.h	r9,r8
8000674e:	c0 72       	brcc	8000675c <udi_cdc_rx_start+0x70>
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
		// Transfer already on-going or current buffer no empty
		cpu_irq_restore(flags);
80006750:	ee fc ff f8 	ld.w	r12,r7[-8]
80006754:	f0 1f 00 29 	mcall	800067f8 <udi_cdc_rx_start+0x10c>
		return false;
80006758:	30 08       	mov	r8,0
8000675a:	c4 08       	rjmp	800067da <udi_cdc_rx_start+0xee>
	}

	// Change current buffer
	udi_cdc_rx_pos[port] = 0;
8000675c:	ef 3a ff f4 	ld.ub	r10,r7[-12]
80006760:	4a 49       	lddpc	r9,800067f0 <udi_cdc_rx_start+0x104>
80006762:	30 08       	mov	r8,0
80006764:	f2 0a 0a 18 	st.h	r9[r10<<0x1],r8
	udi_cdc_rx_buf_sel[port] = (buf_sel_trans==0)?1:0;
80006768:	ef 3a ff f4 	ld.ub	r10,r7[-12]
8000676c:	ef 39 ff fe 	ld.ub	r9,r7[-2]
80006770:	30 08       	mov	r8,0
80006772:	f0 09 18 00 	cp.b	r9,r8
80006776:	5f 08       	sreq	r8
80006778:	49 c9       	lddpc	r9,800067e8 <udi_cdc_rx_start+0xfc>
8000677a:	f2 0a 0b 08 	st.b	r9[r10],r8

	// Start transfer on RX
	udi_cdc_rx_trans_ongoing[port] = true;
8000677e:	ef 39 ff f4 	ld.ub	r9,r7[-12]
80006782:	49 ba       	lddpc	r10,800067ec <udi_cdc_rx_start+0x100>
80006784:	30 18       	mov	r8,1
80006786:	f4 09 0b 08 	st.b	r10[r9],r8
	cpu_irq_restore(flags);
8000678a:	ee fc ff f8 	ld.w	r12,r7[-8]
8000678e:	f0 1f 00 1b 	mcall	800067f8 <udi_cdc_rx_start+0x10c>

	if (udi_cdc_multi_is_rx_ready(port)) {
80006792:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80006796:	10 9c       	mov	r12,r8
80006798:	f0 1f 00 19 	mcall	800067fc <udi_cdc_rx_start+0x110>
		UDI_CDC_RX_NOTIFY(port);
	}
	// Send the buffer with enable of short packet
	switch (port) {
8000679c:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800067a0:	58 08       	cp.w	r8,0
800067a2:	c0 51       	brne	800067ac <udi_cdc_rx_start+0xc0>
#define UDI_CDC_PORT_TO_DATA_EP_OUT(index, unused) \
	case index: \
		ep = UDI_CDC_DATA_EP_OUT_##index; \
		break;
	MREPEAT(UDI_CDC_PORT_NB, UDI_CDC_PORT_TO_DATA_EP_OUT, ~)
800067a4:	30 28       	mov	r8,2
800067a6:	ef 68 ff ff 	st.b	r7[-1],r8
800067aa:	c0 48       	rjmp	800067b2 <udi_cdc_rx_start+0xc6>
#undef UDI_CDC_PORT_TO_DATA_EP_OUT
	default:
		ep = UDI_CDC_DATA_EP_OUT_0;
800067ac:	30 28       	mov	r8,2
800067ae:	ef 68 ff ff 	st.b	r7[-1],r8
		break;
	}
	return udd_ep_run(ep,
800067b2:	49 49       	lddpc	r9,80006800 <udi_cdc_rx_start+0x114>
800067b4:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800067b8:	f0 0a 15 01 	lsl	r10,r8,0x1
800067bc:	ef 38 ff fe 	ld.ub	r8,r7[-2]
800067c0:	f4 08 00 08 	add	r8,r10,r8
800067c4:	a7 68       	lsl	r8,0x6
800067c6:	f2 08 00 0a 	add	r10,r9,r8
800067ca:	ef 3c ff ff 	ld.ub	r12,r7[-1]
800067ce:	48 e8       	lddpc	r8,80006804 <udi_cdc_rx_start+0x118>
800067d0:	34 09       	mov	r9,64
800067d2:	30 1b       	mov	r11,1
800067d4:	f0 1f 00 0d 	mcall	80006808 <udi_cdc_rx_start+0x11c>
800067d8:	18 98       	mov	r8,r12
			true,
			udi_cdc_rx_buf[port][buf_sel_trans],
			UDI_CDC_RX_BUFFERS,
			udi_cdc_data_received);
}
800067da:	10 9c       	mov	r12,r8
800067dc:	2f dd       	sub	sp,-12
800067de:	e3 cd 80 80 	ldm	sp++,r7,pc
800067e2:	00 00       	add	r0,r0
800067e4:	80 00       	ld.sh	r0,r0[0x0]
800067e6:	62 10       	ld.w	r0,r1[0x4]
800067e8:	00 00       	add	r0,r0
800067ea:	07 10       	ld.sh	r0,r3++
800067ec:	00 00       	add	r0,r0
800067ee:	07 18       	ld.sh	r8,r3++
800067f0:	00 00       	add	r0,r0
800067f2:	07 14       	ld.sh	r4,r3++
800067f4:	00 00       	add	r0,r0
800067f6:	07 0c       	ld.w	r12,r3++
800067f8:	80 00       	ld.sh	r0,r0[0x0]
800067fa:	62 50       	ld.w	r0,r1[0x14]
800067fc:	80 00       	ld.sh	r0,r0[0x0]
800067fe:	6c 38       	ld.w	r8,r6[0xc]
80006800:	00 00       	add	r0,r0
80006802:	06 8c       	andn	r12,r3
80006804:	80 00       	ld.sh	r0,r0[0x0]
80006806:	68 0c       	ld.w	r12,r4[0x0]
80006808:	80 00       	ld.sh	r0,r0[0x0]
8000680a:	52 0c       	stdsp	sp[0x80],r12

8000680c <udi_cdc_data_received>:


static void udi_cdc_data_received(udd_ep_status_t status, iram_size_t n, udd_ep_id_t ep)
{
8000680c:	eb cd 40 80 	pushm	r7,lr
80006810:	1a 97       	mov	r7,sp
80006812:	20 4d       	sub	sp,16
80006814:	ef 4c ff f8 	st.w	r7[-8],r12
80006818:	ef 4b ff f4 	st.w	r7[-12],r11
8000681c:	14 98       	mov	r8,r10
8000681e:	ef 68 ff f0 	st.b	r7[-16],r8
	uint8_t buf_sel_trans;
	uint8_t port;

	switch (ep) {
80006822:	ef 38 ff f0 	ld.ub	r8,r7[-16]
80006826:	58 28       	cp.w	r8,2
80006828:	c0 51       	brne	80006832 <udi_cdc_data_received+0x26>
#define UDI_CDC_DATA_EP_OUT_TO_PORT(index, unused) \
	case UDI_CDC_DATA_EP_OUT_##index: \
		port = index; \
		break;
	MREPEAT(UDI_CDC_PORT_NB, UDI_CDC_DATA_EP_OUT_TO_PORT, ~)
8000682a:	30 08       	mov	r8,0
8000682c:	ef 68 ff ff 	st.b	r7[-1],r8
80006830:	c0 48       	rjmp	80006838 <udi_cdc_data_received+0x2c>
#undef UDI_CDC_DATA_EP_OUT_TO_PORT
	default:
		port = 0;
80006832:	30 08       	mov	r8,0
80006834:	ef 68 ff ff 	st.b	r7[-1],r8
		break;
	}

	if (UDD_EP_TRANSFER_OK != status) {
80006838:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000683c:	58 08       	cp.w	r8,0
8000683e:	c4 01       	brne	800068be <udi_cdc_data_received+0xb2>
		// Abort reception
		return;
	}
	buf_sel_trans = (udi_cdc_rx_buf_sel[port]==0)?1:0;
80006840:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80006844:	4a 19       	lddpc	r9,800068c8 <udi_cdc_data_received+0xbc>
80006846:	f2 08 07 08 	ld.ub	r8,r9[r8]
8000684a:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8000684e:	30 08       	mov	r8,0
80006850:	f0 09 18 00 	cp.b	r9,r8
80006854:	5f 08       	sreq	r8
80006856:	ef 68 ff fe 	st.b	r7[-2],r8
	if (!n) {
8000685a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000685e:	58 08       	cp.w	r8,0
80006860:	c1 61       	brne	8000688c <udi_cdc_data_received+0x80>
		udd_ep_run( ep,
80006862:	49 b9       	lddpc	r9,800068cc <udi_cdc_data_received+0xc0>
80006864:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80006868:	f0 0a 15 01 	lsl	r10,r8,0x1
8000686c:	ef 38 ff fe 	ld.ub	r8,r7[-2]
80006870:	f4 08 00 08 	add	r8,r10,r8
80006874:	a7 68       	lsl	r8,0x6
80006876:	f2 08 00 0a 	add	r10,r9,r8
8000687a:	ef 3c ff f0 	ld.ub	r12,r7[-16]
8000687e:	fe c8 00 72 	sub	r8,pc,114
80006882:	34 09       	mov	r9,64
80006884:	30 1b       	mov	r11,1
80006886:	f0 1f 00 13 	mcall	800068d0 <udi_cdc_data_received+0xc4>
				true,
				udi_cdc_rx_buf[port][buf_sel_trans],
				UDI_CDC_RX_BUFFERS,
				udi_cdc_data_received);
		return;
8000688a:	c1 b8       	rjmp	800068c0 <udi_cdc_data_received+0xb4>
	}
	udi_cdc_rx_buf_nb[port][buf_sel_trans] = n;
8000688c:	ef 3b ff ff 	ld.ub	r11,r7[-1]
80006890:	ef 3a ff fe 	ld.ub	r10,r7[-2]
80006894:	ee f8 ff f4 	ld.w	r8,r7[-12]
80006898:	5c 88       	casts.h	r8
8000689a:	48 f9       	lddpc	r9,800068d4 <udi_cdc_data_received+0xc8>
8000689c:	a1 7b       	lsl	r11,0x1
8000689e:	f6 0a 00 0a 	add	r10,r11,r10
800068a2:	f2 0a 0a 18 	st.h	r9[r10<<0x1],r8
	udi_cdc_rx_trans_ongoing[port] = false;
800068a6:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800068aa:	48 ca       	lddpc	r10,800068d8 <udi_cdc_data_received+0xcc>
800068ac:	30 08       	mov	r8,0
800068ae:	f4 09 0b 08 	st.b	r10[r9],r8
	udi_cdc_rx_start(port);
800068b2:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800068b6:	10 9c       	mov	r12,r8
800068b8:	f0 1f 00 09 	mcall	800068dc <udi_cdc_data_received+0xd0>
800068bc:	c0 28       	rjmp	800068c0 <udi_cdc_data_received+0xb4>
		break;
	}

	if (UDD_EP_TRANSFER_OK != status) {
		// Abort reception
		return;
800068be:	d7 03       	nop
		return;
	}
	udi_cdc_rx_buf_nb[port][buf_sel_trans] = n;
	udi_cdc_rx_trans_ongoing[port] = false;
	udi_cdc_rx_start(port);
}
800068c0:	2f cd       	sub	sp,-16
800068c2:	e3 cd 80 80 	ldm	sp++,r7,pc
800068c6:	00 00       	add	r0,r0
800068c8:	00 00       	add	r0,r0
800068ca:	07 10       	ld.sh	r0,r3++
800068cc:	00 00       	add	r0,r0
800068ce:	06 8c       	andn	r12,r3
800068d0:	80 00       	ld.sh	r0,r0[0x0]
800068d2:	52 0c       	stdsp	sp[0x80],r12
800068d4:	00 00       	add	r0,r0
800068d6:	07 0c       	ld.w	r12,r3++
800068d8:	00 00       	add	r0,r0
800068da:	07 18       	ld.sh	r8,r3++
800068dc:	80 00       	ld.sh	r0,r0[0x0]
800068de:	66 ec       	ld.w	r12,r3[0x38]

800068e0 <udi_cdc_data_sent>:


static void udi_cdc_data_sent(udd_ep_status_t status, iram_size_t n, udd_ep_id_t ep)
{
800068e0:	eb cd 40 80 	pushm	r7,lr
800068e4:	1a 97       	mov	r7,sp
800068e6:	20 4d       	sub	sp,16
800068e8:	ef 4c ff f8 	st.w	r7[-8],r12
800068ec:	ef 4b ff f4 	st.w	r7[-12],r11
800068f0:	14 98       	mov	r8,r10
800068f2:	ef 68 ff f0 	st.b	r7[-16],r8
	uint8_t port;
	UNUSED(n);

	switch (ep) {
800068f6:	ef 38 ff f0 	ld.ub	r8,r7[-16]
800068fa:	e0 48 00 81 	cp.w	r8,129
800068fe:	c0 51       	brne	80006908 <udi_cdc_data_sent+0x28>
#define UDI_CDC_DATA_EP_IN_TO_PORT(index, unused) \
	case UDI_CDC_DATA_EP_IN_##index: \
		port = index; \
		break;
	MREPEAT(UDI_CDC_PORT_NB, UDI_CDC_DATA_EP_IN_TO_PORT, ~)
80006900:	30 08       	mov	r8,0
80006902:	ef 68 ff ff 	st.b	r7[-1],r8
80006906:	c0 48       	rjmp	8000690e <udi_cdc_data_sent+0x2e>
#undef UDI_CDC_DATA_EP_IN_TO_PORT
	default:
		port = 0;
80006908:	30 08       	mov	r8,0
8000690a:	ef 68 ff ff 	st.b	r7[-1],r8
		break;
	}

	if (UDD_EP_TRANSFER_OK != status) {
8000690e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006912:	58 08       	cp.w	r8,0
80006914:	c2 61       	brne	80006960 <udi_cdc_data_sent+0x80>
		// Abort transfer
		return;
	}
	udi_cdc_tx_buf_nb[port][(udi_cdc_tx_buf_sel[port]==0)?1:0] = 0;
80006916:	ef 3a ff ff 	ld.ub	r10,r7[-1]
8000691a:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000691e:	49 39       	lddpc	r9,80006968 <udi_cdc_data_sent+0x88>
80006920:	f2 08 07 08 	ld.ub	r8,r9[r8]
80006924:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80006928:	30 08       	mov	r8,0
8000692a:	f0 09 18 00 	cp.b	r9,r8
8000692e:	5f 08       	sreq	r8
80006930:	48 f9       	lddpc	r9,8000696c <udi_cdc_data_sent+0x8c>
80006932:	a1 7a       	lsl	r10,0x1
80006934:	10 0a       	add	r10,r8
80006936:	30 08       	mov	r8,0
80006938:	f2 0a 0a 18 	st.h	r9[r10<<0x1],r8
	udi_cdc_tx_both_buf_to_send[port] = false;
8000693c:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80006940:	48 ca       	lddpc	r10,80006970 <udi_cdc_data_sent+0x90>
80006942:	30 08       	mov	r8,0
80006944:	f4 09 0b 08 	st.b	r10[r9],r8
	udi_cdc_tx_trans_ongoing[port] = false;
80006948:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000694c:	48 aa       	lddpc	r10,80006974 <udi_cdc_data_sent+0x94>
8000694e:	30 08       	mov	r8,0
80006950:	f4 09 0b 08 	st.b	r10[r9],r8

	if (n != 0) {
		UDI_CDC_TX_EMPTY_NOTIFY(port);
	}
	udi_cdc_tx_send(port);
80006954:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80006958:	10 9c       	mov	r12,r8
8000695a:	f0 1f 00 08 	mcall	80006978 <udi_cdc_data_sent+0x98>
8000695e:	c0 28       	rjmp	80006962 <udi_cdc_data_sent+0x82>
		break;
	}

	if (UDD_EP_TRANSFER_OK != status) {
		// Abort transfer
		return;
80006960:	d7 03       	nop

	if (n != 0) {
		UDI_CDC_TX_EMPTY_NOTIFY(port);
	}
	udi_cdc_tx_send(port);
}
80006962:	2f cd       	sub	sp,-16
80006964:	e3 cd 80 80 	ldm	sp++,r7,pc
80006968:	00 00       	add	r0,r0
8000696a:	07 a0       	ld.ub	r0,r3[0x2]
8000696c:	00 00       	add	r0,r0
8000696e:	07 9c       	ld.ub	r12,r3[0x1]
80006970:	00 00       	add	r0,r0
80006972:	07 ac       	ld.ub	r12,r3[0x2]
80006974:	00 00       	add	r0,r0
80006976:	07 a8       	ld.ub	r8,r3[0x2]
80006978:	80 00       	ld.sh	r0,r0[0x0]
8000697a:	69 7c       	ld.w	r12,r4[0x5c]

8000697c <udi_cdc_tx_send>:


static void udi_cdc_tx_send(uint8_t port)
{
8000697c:	eb cd 40 c0 	pushm	r6-r7,lr
80006980:	1a 97       	mov	r7,sp
80006982:	20 3d       	sub	sp,12
80006984:	18 98       	mov	r8,r12
80006986:	ef 68 ff f4 	st.b	r7[-12],r8
	bool b_short_packet;
	udd_ep_id_t ep;
	static uint16_t sof_zlp_counter = 0;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
8000698a:	30 08       	mov	r8,0
8000698c:	ef 68 ff f4 	st.b	r7[-12],r8
#endif

	if (udi_cdc_tx_trans_ongoing[port]) {
80006990:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80006994:	4f a9       	lddpc	r9,80006b7c <udi_cdc_tx_send+0x200>
80006996:	f2 08 07 08 	ld.ub	r8,r9[r8]
8000699a:	5c 58       	castu.b	r8
8000699c:	e0 81 00 e9 	brne	80006b6e <udi_cdc_tx_send+0x1f2>
		return; // Already on going or wait next SOF to send next data
	}
	if (udd_is_high_speed()) {
800069a0:	f0 1f 00 78 	mcall	80006b80 <udi_cdc_tx_send+0x204>
800069a4:	18 98       	mov	r8,r12
800069a6:	58 08       	cp.w	r8,0
800069a8:	c0 e0       	breq	800069c4 <udi_cdc_tx_send+0x48>
		if (udi_cdc_tx_sof_num[port] == udd_get_micro_frame_number()) {
800069aa:	ef 39 ff f4 	ld.ub	r9,r7[-12]
800069ae:	4f 68       	lddpc	r8,80006b84 <udi_cdc_tx_send+0x208>
800069b0:	f0 09 04 16 	ld.sh	r6,r8[r9<<0x1]
800069b4:	f0 1f 00 75 	mcall	80006b88 <udi_cdc_tx_send+0x20c>
800069b8:	18 98       	mov	r8,r12
800069ba:	5c 88       	casts.h	r8
800069bc:	f0 06 19 00 	cp.h	r6,r8
800069c0:	c0 f1       	brne	800069de <udi_cdc_tx_send+0x62>
			return; // Wait next SOF to send next data
800069c2:	cd 98       	rjmp	80006b74 <udi_cdc_tx_send+0x1f8>
		}
	}else{
		if (udi_cdc_tx_sof_num[port] == udd_get_frame_number()) {
800069c4:	ef 39 ff f4 	ld.ub	r9,r7[-12]
800069c8:	4e f8       	lddpc	r8,80006b84 <udi_cdc_tx_send+0x208>
800069ca:	f0 09 04 16 	ld.sh	r6,r8[r9<<0x1]
800069ce:	f0 1f 00 70 	mcall	80006b8c <udi_cdc_tx_send+0x210>
800069d2:	18 98       	mov	r8,r12
800069d4:	5c 88       	casts.h	r8
800069d6:	f0 06 19 00 	cp.h	r6,r8
800069da:	e0 80 00 cc 	breq	80006b72 <udi_cdc_tx_send+0x1f6>
			return; // Wait next SOF to send next data
		}
	}

	flags = cpu_irq_save(); // to protect udi_cdc_tx_buf_sel
800069de:	f0 1f 00 6d 	mcall	80006b90 <udi_cdc_tx_send+0x214>
800069e2:	18 98       	mov	r8,r12
800069e4:	ef 48 ff f8 	st.w	r7[-8],r8
	buf_sel_trans = udi_cdc_tx_buf_sel[port];
800069e8:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800069ec:	4e a9       	lddpc	r9,80006b94 <udi_cdc_tx_send+0x218>
800069ee:	f2 08 07 08 	ld.ub	r8,r9[r8]
800069f2:	ef 68 ff fd 	st.b	r7[-3],r8
	if (udi_cdc_tx_buf_nb[port][buf_sel_trans] == 0) {
800069f6:	ef 3a ff f4 	ld.ub	r10,r7[-12]
800069fa:	ef 39 ff fd 	ld.ub	r9,r7[-3]
800069fe:	4e 78       	lddpc	r8,80006b98 <udi_cdc_tx_send+0x21c>
80006a00:	a1 7a       	lsl	r10,0x1
80006a02:	f4 09 00 09 	add	r9,r10,r9
80006a06:	f0 09 04 18 	ld.sh	r8,r8[r9<<0x1]
80006a0a:	58 08       	cp.w	r8,0
80006a0c:	c2 71       	brne	80006a5a <udi_cdc_tx_send+0xde>
		sof_zlp_counter++;
80006a0e:	4e 48       	lddpc	r8,80006b9c <udi_cdc_tx_send+0x220>
80006a10:	90 08       	ld.sh	r8,r8[0x0]
80006a12:	2f f8       	sub	r8,-1
80006a14:	5c 88       	casts.h	r8
80006a16:	4e 29       	lddpc	r9,80006b9c <udi_cdc_tx_send+0x220>
80006a18:	b2 08       	st.h	r9[0x0],r8
		if (((!udd_is_high_speed()) && (sof_zlp_counter < 100))
80006a1a:	f0 1f 00 5a 	mcall	80006b80 <udi_cdc_tx_send+0x204>
80006a1e:	18 98       	mov	r8,r12
80006a20:	ec 18 00 01 	eorl	r8,0x1
80006a24:	5c 58       	castu.b	r8
80006a26:	c0 80       	breq	80006a36 <udi_cdc_tx_send+0xba>
80006a28:	4d d8       	lddpc	r8,80006b9c <udi_cdc_tx_send+0x220>
80006a2a:	90 09       	ld.sh	r9,r8[0x0]
80006a2c:	36 38       	mov	r8,99
80006a2e:	f0 09 19 00 	cp.h	r9,r8
80006a32:	e0 88 00 0f 	brls	80006a50 <udi_cdc_tx_send+0xd4>
80006a36:	f0 1f 00 53 	mcall	80006b80 <udi_cdc_tx_send+0x204>
80006a3a:	18 98       	mov	r8,r12
80006a3c:	58 08       	cp.w	r8,0
80006a3e:	c0 e0       	breq	80006a5a <udi_cdc_tx_send+0xde>
				|| (udd_is_high_speed() && (sof_zlp_counter < 800))) {
80006a40:	4d 78       	lddpc	r8,80006b9c <udi_cdc_tx_send+0x220>
80006a42:	90 09       	ld.sh	r9,r8[0x0]

	flags = cpu_irq_save(); // to protect udi_cdc_tx_buf_sel
	buf_sel_trans = udi_cdc_tx_buf_sel[port];
	if (udi_cdc_tx_buf_nb[port][buf_sel_trans] == 0) {
		sof_zlp_counter++;
		if (((!udd_is_high_speed()) && (sof_zlp_counter < 100))
80006a44:	e0 68 03 1f 	mov	r8,799
80006a48:	f0 09 19 00 	cp.h	r9,r8
80006a4c:	e0 8b 00 07 	brhi	80006a5a <udi_cdc_tx_send+0xde>
				|| (udd_is_high_speed() && (sof_zlp_counter < 800))) {
			cpu_irq_restore(flags);
80006a50:	ee fc ff f8 	ld.w	r12,r7[-8]
80006a54:	f0 1f 00 53 	mcall	80006ba0 <udi_cdc_tx_send+0x224>
			return;
80006a58:	c8 e8       	rjmp	80006b74 <udi_cdc_tx_send+0x1f8>
		}
	}
	sof_zlp_counter = 0;
80006a5a:	4d 19       	lddpc	r9,80006b9c <udi_cdc_tx_send+0x220>
80006a5c:	30 08       	mov	r8,0
80006a5e:	b2 08       	st.h	r9[0x0],r8

	if (!udi_cdc_tx_both_buf_to_send[port]) {
80006a60:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80006a64:	4d 09       	lddpc	r9,80006ba4 <udi_cdc_tx_send+0x228>
80006a66:	f2 08 07 08 	ld.ub	r8,r9[r8]
80006a6a:	5c 58       	castu.b	r8
80006a6c:	ec 18 00 01 	eorl	r8,0x1
80006a70:	5c 58       	castu.b	r8
80006a72:	c0 d0       	breq	80006a8c <udi_cdc_tx_send+0x110>
		// Send current Buffer
		// and switch the current buffer
		udi_cdc_tx_buf_sel[port] = (buf_sel_trans==0)?1:0;
80006a74:	ef 3a ff f4 	ld.ub	r10,r7[-12]
80006a78:	ef 39 ff fd 	ld.ub	r9,r7[-3]
80006a7c:	30 08       	mov	r8,0
80006a7e:	f0 09 18 00 	cp.b	r9,r8
80006a82:	5f 08       	sreq	r8
80006a84:	4c 49       	lddpc	r9,80006b94 <udi_cdc_tx_send+0x218>
80006a86:	f2 0a 0b 08 	st.b	r9[r10],r8
80006a8a:	c0 98       	rjmp	80006a9c <udi_cdc_tx_send+0x120>
	}else{
		// Send the other Buffer
		// and no switch the current buffer
		buf_sel_trans = (buf_sel_trans==0)?1:0;
80006a8c:	ef 39 ff fd 	ld.ub	r9,r7[-3]
80006a90:	30 08       	mov	r8,0
80006a92:	f0 09 18 00 	cp.b	r9,r8
80006a96:	5f 08       	sreq	r8
80006a98:	ef 68 ff fd 	st.b	r7[-3],r8
	}
	udi_cdc_tx_trans_ongoing[port] = true;
80006a9c:	ef 39 ff f4 	ld.ub	r9,r7[-12]
80006aa0:	4b 7a       	lddpc	r10,80006b7c <udi_cdc_tx_send+0x200>
80006aa2:	30 18       	mov	r8,1
80006aa4:	f4 09 0b 08 	st.b	r10[r9],r8
	cpu_irq_restore(flags);
80006aa8:	ee fc ff f8 	ld.w	r12,r7[-8]
80006aac:	f0 1f 00 3d 	mcall	80006ba0 <udi_cdc_tx_send+0x224>

	b_short_packet = (udi_cdc_tx_buf_nb[port][buf_sel_trans] != UDI_CDC_TX_BUFFERS);
80006ab0:	ef 3a ff f4 	ld.ub	r10,r7[-12]
80006ab4:	ef 39 ff fd 	ld.ub	r9,r7[-3]
80006ab8:	4b 88       	lddpc	r8,80006b98 <udi_cdc_tx_send+0x21c>
80006aba:	a1 7a       	lsl	r10,0x1
80006abc:	f4 09 00 09 	add	r9,r10,r9
80006ac0:	f0 09 04 19 	ld.sh	r9,r8[r9<<0x1]
80006ac4:	34 08       	mov	r8,64
80006ac6:	f0 09 19 00 	cp.h	r9,r8
80006aca:	5f 18       	srne	r8
80006acc:	ef 68 ff fe 	st.b	r7[-2],r8
	if (b_short_packet) {
80006ad0:	ef 39 ff fe 	ld.ub	r9,r7[-2]
80006ad4:	30 08       	mov	r8,0
80006ad6:	f0 09 18 00 	cp.b	r9,r8
80006ada:	c1 a0       	breq	80006b0e <udi_cdc_tx_send+0x192>
		if (udd_is_high_speed()) {
80006adc:	f0 1f 00 29 	mcall	80006b80 <udi_cdc_tx_send+0x204>
80006ae0:	18 98       	mov	r8,r12
80006ae2:	58 08       	cp.w	r8,0
80006ae4:	c0 b0       	breq	80006afa <udi_cdc_tx_send+0x17e>
			udi_cdc_tx_sof_num[port] = udd_get_micro_frame_number();
80006ae6:	ef 36 ff f4 	ld.ub	r6,r7[-12]
80006aea:	f0 1f 00 28 	mcall	80006b88 <udi_cdc_tx_send+0x20c>
80006aee:	18 98       	mov	r8,r12
80006af0:	5c 88       	casts.h	r8
80006af2:	4a 59       	lddpc	r9,80006b84 <udi_cdc_tx_send+0x208>
80006af4:	f2 06 0a 18 	st.h	r9[r6<<0x1],r8
80006af8:	c1 18       	rjmp	80006b1a <udi_cdc_tx_send+0x19e>
		}else{
			udi_cdc_tx_sof_num[port] = udd_get_frame_number();
80006afa:	ef 36 ff f4 	ld.ub	r6,r7[-12]
80006afe:	f0 1f 00 24 	mcall	80006b8c <udi_cdc_tx_send+0x210>
80006b02:	18 98       	mov	r8,r12
80006b04:	5c 88       	casts.h	r8
80006b06:	4a 09       	lddpc	r9,80006b84 <udi_cdc_tx_send+0x208>
80006b08:	f2 06 0a 18 	st.h	r9[r6<<0x1],r8
80006b0c:	c0 78       	rjmp	80006b1a <udi_cdc_tx_send+0x19e>
		}
	}else{
		udi_cdc_tx_sof_num[port] = 0; // Force next transfer without wait SOF
80006b0e:	ef 3a ff f4 	ld.ub	r10,r7[-12]
80006b12:	49 d9       	lddpc	r9,80006b84 <udi_cdc_tx_send+0x208>
80006b14:	30 08       	mov	r8,0
80006b16:	f2 0a 0a 18 	st.h	r9[r10<<0x1],r8
	}

	// Send the buffer with enable of short packet
	switch (port) {
80006b1a:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80006b1e:	58 08       	cp.w	r8,0
80006b20:	c0 51       	brne	80006b2a <udi_cdc_tx_send+0x1ae>
#define UDI_CDC_PORT_TO_DATA_EP_IN(index, unused) \
	case index: \
		ep = UDI_CDC_DATA_EP_IN_##index; \
		break;
	MREPEAT(UDI_CDC_PORT_NB, UDI_CDC_PORT_TO_DATA_EP_IN, ~)
80006b22:	38 18       	mov	r8,-127
80006b24:	ef 68 ff ff 	st.b	r7[-1],r8
80006b28:	c0 48       	rjmp	80006b30 <udi_cdc_tx_send+0x1b4>
#undef UDI_CDC_PORT_TO_DATA_EP_IN
	default:
		ep = UDI_CDC_DATA_EP_IN_0;
80006b2a:	38 18       	mov	r8,-127
80006b2c:	ef 68 ff ff 	st.b	r7[-1],r8
		break;
	}
	udd_ep_run( ep,
			b_short_packet,
			udi_cdc_tx_buf[port][buf_sel_trans],
			udi_cdc_tx_buf_nb[port][buf_sel_trans],
80006b30:	ef 3a ff f4 	ld.ub	r10,r7[-12]
80006b34:	ef 39 ff fd 	ld.ub	r9,r7[-3]
80006b38:	49 88       	lddpc	r8,80006b98 <udi_cdc_tx_send+0x21c>
80006b3a:	a1 7a       	lsl	r10,0x1
80006b3c:	f4 09 00 09 	add	r9,r10,r9
80006b40:	f0 09 04 18 	ld.sh	r8,r8[r9<<0x1]
#undef UDI_CDC_PORT_TO_DATA_EP_IN
	default:
		ep = UDI_CDC_DATA_EP_IN_0;
		break;
	}
	udd_ep_run( ep,
80006b44:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
80006b48:	49 8a       	lddpc	r10,80006ba8 <udi_cdc_tx_send+0x22c>
80006b4a:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80006b4e:	f0 0b 15 01 	lsl	r11,r8,0x1
80006b52:	ef 38 ff fd 	ld.ub	r8,r7[-3]
80006b56:	f6 08 00 08 	add	r8,r11,r8
80006b5a:	a7 68       	lsl	r8,0x6
80006b5c:	10 0a       	add	r10,r8
80006b5e:	ef 3b ff fe 	ld.ub	r11,r7[-2]
80006b62:	ef 3c ff ff 	ld.ub	r12,r7[-1]
80006b66:	49 28       	lddpc	r8,80006bac <udi_cdc_tx_send+0x230>
80006b68:	f0 1f 00 12 	mcall	80006bb0 <udi_cdc_tx_send+0x234>
80006b6c:	c0 48       	rjmp	80006b74 <udi_cdc_tx_send+0x1f8>
#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	if (udi_cdc_tx_trans_ongoing[port]) {
		return; // Already on going or wait next SOF to send next data
80006b6e:	d7 03       	nop
80006b70:	c0 28       	rjmp	80006b74 <udi_cdc_tx_send+0x1f8>
		if (udi_cdc_tx_sof_num[port] == udd_get_micro_frame_number()) {
			return; // Wait next SOF to send next data
		}
	}else{
		if (udi_cdc_tx_sof_num[port] == udd_get_frame_number()) {
			return; // Wait next SOF to send next data
80006b72:	d7 03       	nop
	udd_ep_run( ep,
			b_short_packet,
			udi_cdc_tx_buf[port][buf_sel_trans],
			udi_cdc_tx_buf_nb[port][buf_sel_trans],
			udi_cdc_data_sent);
}
80006b74:	2f dd       	sub	sp,-12
80006b76:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80006b7a:	00 00       	add	r0,r0
80006b7c:	00 00       	add	r0,r0
80006b7e:	07 a8       	ld.ub	r8,r3[0x2]
80006b80:	80 00       	ld.sh	r0,r0[0x0]
80006b82:	4a c8       	lddpc	r8,80006c30 <udi_cdc_multi_get_nb_received_data+0x7c>
80006b84:	00 00       	add	r0,r0
80006b86:	07 a4       	ld.ub	r4,r3[0x2]
80006b88:	80 00       	ld.sh	r0,r0[0x0]
80006b8a:	4b 56       	lddpc	r6,80006c5c <udi_cdc_multi_is_rx_ready+0x24>
80006b8c:	80 00       	ld.sh	r0,r0[0x0]
80006b8e:	4b 3c       	lddpc	r12,80006c58 <udi_cdc_multi_is_rx_ready+0x20>
80006b90:	80 00       	ld.sh	r0,r0[0x0]
80006b92:	62 10       	ld.w	r0,r1[0x4]
80006b94:	00 00       	add	r0,r0
80006b96:	07 a0       	ld.ub	r0,r3[0x2]
80006b98:	00 00       	add	r0,r0
80006b9a:	07 9c       	ld.ub	r12,r3[0x1]
80006b9c:	00 00       	add	r0,r0
80006b9e:	07 b0       	ld.ub	r0,r3[0x3]
80006ba0:	80 00       	ld.sh	r0,r0[0x0]
80006ba2:	62 50       	ld.w	r0,r1[0x14]
80006ba4:	00 00       	add	r0,r0
80006ba6:	07 ac       	ld.ub	r12,r3[0x2]
80006ba8:	00 00       	add	r0,r0
80006baa:	07 1c       	ld.sh	r12,r3++
80006bac:	80 00       	ld.sh	r0,r0[0x0]
80006bae:	68 e0       	ld.w	r0,r4[0x38]
80006bb0:	80 00       	ld.sh	r0,r0[0x0]
80006bb2:	52 0c       	stdsp	sp[0x80],r12

80006bb4 <udi_cdc_multi_get_nb_received_data>:
{
	udi_cdc_ctrl_state_change(port, true, CDC_SERIAL_STATE_OVERRUN);
}

iram_size_t udi_cdc_multi_get_nb_received_data(uint8_t port)
{
80006bb4:	eb cd 40 80 	pushm	r7,lr
80006bb8:	1a 97       	mov	r7,sp
80006bba:	20 4d       	sub	sp,16
80006bbc:	18 98       	mov	r8,r12
80006bbe:	ef 68 ff f0 	st.b	r7[-16],r8
	irqflags_t flags;
	uint16_t pos;
	iram_size_t nb_received;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
80006bc2:	30 08       	mov	r8,0
80006bc4:	ef 68 ff f0 	st.b	r7[-16],r8
#endif
	flags = cpu_irq_save();
80006bc8:	f0 1f 00 17 	mcall	80006c24 <udi_cdc_multi_get_nb_received_data+0x70>
80006bcc:	18 98       	mov	r8,r12
80006bce:	ef 48 ff f4 	st.w	r7[-12],r8
	pos = udi_cdc_rx_pos[port];
80006bd2:	ef 39 ff f0 	ld.ub	r9,r7[-16]
80006bd6:	49 58       	lddpc	r8,80006c28 <udi_cdc_multi_get_nb_received_data+0x74>
80006bd8:	f0 09 04 18 	ld.sh	r8,r8[r9<<0x1]
80006bdc:	ef 58 ff fa 	st.h	r7[-6],r8
	nb_received = udi_cdc_rx_buf_nb[port][udi_cdc_rx_buf_sel[port]] - pos;
80006be0:	ef 3a ff f0 	ld.ub	r10,r7[-16]
80006be4:	ef 38 ff f0 	ld.ub	r8,r7[-16]
80006be8:	49 19       	lddpc	r9,80006c2c <udi_cdc_multi_get_nb_received_data+0x78>
80006bea:	f2 08 07 08 	ld.ub	r8,r9[r8]
80006bee:	5c 58       	castu.b	r8
80006bf0:	10 99       	mov	r9,r8
80006bf2:	49 08       	lddpc	r8,80006c30 <udi_cdc_multi_get_nb_received_data+0x7c>
80006bf4:	a1 7a       	lsl	r10,0x1
80006bf6:	f4 09 00 09 	add	r9,r10,r9
80006bfa:	f0 09 04 18 	ld.sh	r8,r8[r9<<0x1]
80006bfe:	5c 88       	casts.h	r8
80006c00:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
80006c04:	ef 18 ff fa 	ld.uh	r8,r7[-6]
80006c08:	f2 08 01 08 	sub	r8,r9,r8
80006c0c:	ef 48 ff fc 	st.w	r7[-4],r8
	cpu_irq_restore(flags);
80006c10:	ee fc ff f4 	ld.w	r12,r7[-12]
80006c14:	f0 1f 00 08 	mcall	80006c34 <udi_cdc_multi_get_nb_received_data+0x80>
	return nb_received;
80006c18:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
80006c1c:	10 9c       	mov	r12,r8
80006c1e:	2f cd       	sub	sp,-16
80006c20:	e3 cd 80 80 	ldm	sp++,r7,pc
80006c24:	80 00       	ld.sh	r0,r0[0x0]
80006c26:	62 10       	ld.w	r0,r1[0x4]
80006c28:	00 00       	add	r0,r0
80006c2a:	07 14       	ld.sh	r4,r3++
80006c2c:	00 00       	add	r0,r0
80006c2e:	07 10       	ld.sh	r0,r3++
80006c30:	00 00       	add	r0,r0
80006c32:	07 0c       	ld.w	r12,r3++
80006c34:	80 00       	ld.sh	r0,r0[0x0]
80006c36:	62 50       	ld.w	r0,r1[0x14]

80006c38 <udi_cdc_multi_is_rx_ready>:
{
	return udi_cdc_multi_get_nb_received_data(0);
}

bool udi_cdc_multi_is_rx_ready(uint8_t port)
{
80006c38:	eb cd 40 80 	pushm	r7,lr
80006c3c:	1a 97       	mov	r7,sp
80006c3e:	20 1d       	sub	sp,4
80006c40:	18 98       	mov	r8,r12
80006c42:	ef 68 ff fc 	st.b	r7[-4],r8
	return (udi_cdc_multi_get_nb_received_data(port) > 0);
80006c46:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80006c4a:	10 9c       	mov	r12,r8
80006c4c:	f0 1f 00 05 	mcall	80006c60 <udi_cdc_multi_is_rx_ready+0x28>
80006c50:	18 98       	mov	r8,r12
80006c52:	58 08       	cp.w	r8,0
80006c54:	5f 18       	srne	r8
80006c56:	5c 58       	castu.b	r8
}
80006c58:	10 9c       	mov	r12,r8
80006c5a:	2f fd       	sub	sp,-4
80006c5c:	e3 cd 80 80 	ldm	sp++,r7,pc
80006c60:	80 00       	ld.sh	r0,r0[0x0]
80006c62:	6b b4       	ld.w	r4,r5[0x6c]

80006c64 <udi_cdc_is_rx_ready>:

bool udi_cdc_is_rx_ready(void)
{
80006c64:	eb cd 40 80 	pushm	r7,lr
80006c68:	1a 97       	mov	r7,sp
	return udi_cdc_multi_is_rx_ready(0);
80006c6a:	30 0c       	mov	r12,0
80006c6c:	f0 1f 00 03 	mcall	80006c78 <udi_cdc_is_rx_ready+0x14>
80006c70:	18 98       	mov	r8,r12
}
80006c72:	10 9c       	mov	r12,r8
80006c74:	e3 cd 80 80 	ldm	sp++,r7,pc
80006c78:	80 00       	ld.sh	r0,r0[0x0]
80006c7a:	6c 38       	ld.w	r8,r6[0xc]

80006c7c <udi_cdc_multi_read_buf>:
{
	return udi_cdc_multi_getc(0);
}

iram_size_t udi_cdc_multi_read_buf(uint8_t port, void* buf, iram_size_t size)
{
80006c7c:	eb cd 40 80 	pushm	r7,lr
80006c80:	1a 97       	mov	r7,sp
80006c82:	20 7d       	sub	sp,28
80006c84:	18 98       	mov	r8,r12
80006c86:	ef 4b ff e8 	st.w	r7[-24],r11
80006c8a:	ef 4a ff e4 	st.w	r7[-28],r10
80006c8e:	ef 68 ff ec 	st.b	r7[-20],r8
	irqflags_t flags;
	uint8_t *ptr_buf = (uint8_t *)buf;
80006c92:	ee f8 ff e8 	ld.w	r8,r7[-24]
80006c96:	ef 48 ff f4 	st.w	r7[-12],r8
	uint16_t pos;
	uint8_t buf_sel;
	bool again;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
80006c9a:	30 08       	mov	r8,0
80006c9c:	ef 68 ff ec 	st.b	r7[-20],r8
80006ca0:	c0 48       	rjmp	80006ca8 <udi_cdc_multi_read_buf+0x2c>
	cpu_irq_restore(flags);
	while (again) {
		if (!udi_cdc_data_running) {
			return size;
		}
		goto udi_cdc_read_buf_loop_wait;
80006ca2:	d7 03       	nop
80006ca4:	c0 28       	rjmp	80006ca8 <udi_cdc_multi_read_buf+0x2c>
	ptr_buf += copy_nb;
	size -= copy_nb;
	udi_cdc_rx_start(port);

	if (size) {
		goto udi_cdc_read_buf_loop_wait;
80006ca6:	d7 03       	nop
	port = 0;
#endif

udi_cdc_read_buf_loop_wait:
	// Check available data
	flags = cpu_irq_save();
80006ca8:	f0 1f 00 50 	mcall	80006de8 <udi_cdc_multi_read_buf+0x16c>
80006cac:	18 98       	mov	r8,r12
80006cae:	ef 48 ff f0 	st.w	r7[-16],r8
	pos = udi_cdc_rx_pos[port];
80006cb2:	ef 39 ff ec 	ld.ub	r9,r7[-20]
80006cb6:	4c e8       	lddpc	r8,80006dec <udi_cdc_multi_read_buf+0x170>
80006cb8:	f0 09 04 18 	ld.sh	r8,r8[r9<<0x1]
80006cbc:	ef 58 ff fc 	st.h	r7[-4],r8
	buf_sel = udi_cdc_rx_buf_sel[port];
80006cc0:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80006cc4:	4c b9       	lddpc	r9,80006df0 <udi_cdc_multi_read_buf+0x174>
80006cc6:	f2 08 07 08 	ld.ub	r8,r9[r8]
80006cca:	ef 68 ff fe 	st.b	r7[-2],r8
	again = pos >= udi_cdc_rx_buf_nb[port][buf_sel];
80006cce:	ef 3a ff ec 	ld.ub	r10,r7[-20]
80006cd2:	ef 39 ff fe 	ld.ub	r9,r7[-2]
80006cd6:	4c 88       	lddpc	r8,80006df4 <udi_cdc_multi_read_buf+0x178>
80006cd8:	a1 7a       	lsl	r10,0x1
80006cda:	f4 09 00 09 	add	r9,r10,r9
80006cde:	f0 09 04 18 	ld.sh	r8,r8[r9<<0x1]
80006ce2:	5c 88       	casts.h	r8
80006ce4:	ef 09 ff fc 	ld.sh	r9,r7[-4]
80006ce8:	f0 09 19 00 	cp.h	r9,r8
80006cec:	5f 28       	srhs	r8
80006cee:	ef 68 ff ff 	st.b	r7[-1],r8
	cpu_irq_restore(flags);
80006cf2:	ee fc ff f0 	ld.w	r12,r7[-16]
80006cf6:	f0 1f 00 41 	mcall	80006df8 <udi_cdc_multi_read_buf+0x17c>
	while (again) {
80006cfa:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80006cfe:	30 08       	mov	r8,0
80006d00:	f0 09 18 00 	cp.b	r9,r8
80006d04:	c0 b0       	breq	80006d1a <udi_cdc_multi_read_buf+0x9e>
		if (!udi_cdc_data_running) {
80006d06:	4b e8       	lddpc	r8,80006dfc <udi_cdc_multi_read_buf+0x180>
80006d08:	11 88       	ld.ub	r8,r8[0x0]
80006d0a:	5c 58       	castu.b	r8
80006d0c:	ec 18 00 01 	eorl	r8,0x1
80006d10:	5c 58       	castu.b	r8
80006d12:	cc 80       	breq	80006ca2 <udi_cdc_multi_read_buf+0x26>
			return size;
80006d14:	ee f8 ff e4 	ld.w	r8,r7[-28]
80006d18:	c6 38       	rjmp	80006dde <udi_cdc_multi_read_buf+0x162>
		}
		goto udi_cdc_read_buf_loop_wait;
	}

	// Read data
	copy_nb = udi_cdc_rx_buf_nb[port][buf_sel] - pos;
80006d1a:	ef 3a ff ec 	ld.ub	r10,r7[-20]
80006d1e:	ef 39 ff fe 	ld.ub	r9,r7[-2]
80006d22:	4b 58       	lddpc	r8,80006df4 <udi_cdc_multi_read_buf+0x178>
80006d24:	a1 7a       	lsl	r10,0x1
80006d26:	f4 09 00 09 	add	r9,r10,r9
80006d2a:	f0 09 04 18 	ld.sh	r8,r8[r9<<0x1]
80006d2e:	5c 88       	casts.h	r8
80006d30:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
80006d34:	ef 18 ff fc 	ld.uh	r8,r7[-4]
80006d38:	f2 08 01 08 	sub	r8,r9,r8
80006d3c:	ef 48 ff f8 	st.w	r7[-8],r8
	if (copy_nb>size) {
80006d40:	ee f9 ff f8 	ld.w	r9,r7[-8]
80006d44:	ee f8 ff e4 	ld.w	r8,r7[-28]
80006d48:	10 39       	cp.w	r9,r8
80006d4a:	e0 88 00 06 	brls	80006d56 <udi_cdc_multi_read_buf+0xda>
		copy_nb = size;
80006d4e:	ee f8 ff e4 	ld.w	r8,r7[-28]
80006d52:	ef 48 ff f8 	st.w	r7[-8],r8
	}
	memcpy(ptr_buf, &udi_cdc_rx_buf[port][buf_sel][pos], copy_nb);
80006d56:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80006d5a:	f0 09 15 01 	lsl	r9,r8,0x1
80006d5e:	ef 38 ff fe 	ld.ub	r8,r7[-2]
80006d62:	f2 08 00 08 	add	r8,r9,r8
80006d66:	f0 09 15 06 	lsl	r9,r8,0x6
80006d6a:	ef 18 ff fc 	ld.uh	r8,r7[-4]
80006d6e:	10 09       	add	r9,r8
80006d70:	4a 48       	lddpc	r8,80006e00 <udi_cdc_multi_read_buf+0x184>
80006d72:	f2 08 00 08 	add	r8,r9,r8
80006d76:	ee fa ff f8 	ld.w	r10,r7[-8]
80006d7a:	10 9b       	mov	r11,r8
80006d7c:	ee fc ff f4 	ld.w	r12,r7[-12]
80006d80:	f0 1f 00 21 	mcall	80006e04 <udi_cdc_multi_read_buf+0x188>
	udi_cdc_rx_pos[port] += copy_nb;
80006d84:	ef 3a ff ec 	ld.ub	r10,r7[-20]
80006d88:	ef 39 ff ec 	ld.ub	r9,r7[-20]
80006d8c:	49 88       	lddpc	r8,80006dec <udi_cdc_multi_read_buf+0x170>
80006d8e:	f0 09 04 18 	ld.sh	r8,r8[r9<<0x1]
80006d92:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
80006d96:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006d9a:	5c 88       	casts.h	r8
80006d9c:	f2 08 00 08 	add	r8,r9,r8
80006da0:	5c 88       	casts.h	r8
80006da2:	49 39       	lddpc	r9,80006dec <udi_cdc_multi_read_buf+0x170>
80006da4:	f2 0a 0a 18 	st.h	r9[r10<<0x1],r8
	ptr_buf += copy_nb;
80006da8:	ee f9 ff f4 	ld.w	r9,r7[-12]
80006dac:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006db0:	f2 08 00 08 	add	r8,r9,r8
80006db4:	ef 48 ff f4 	st.w	r7[-12],r8
	size -= copy_nb;
80006db8:	ee f9 ff e4 	ld.w	r9,r7[-28]
80006dbc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006dc0:	f2 08 01 08 	sub	r8,r9,r8
80006dc4:	ef 48 ff e4 	st.w	r7[-28],r8
	udi_cdc_rx_start(port);
80006dc8:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80006dcc:	10 9c       	mov	r12,r8
80006dce:	f0 1f 00 0f 	mcall	80006e08 <udi_cdc_multi_read_buf+0x18c>

	if (size) {
80006dd2:	ee f8 ff e4 	ld.w	r8,r7[-28]
80006dd6:	58 08       	cp.w	r8,0
80006dd8:	fe 91 ff 67 	brne	80006ca6 <udi_cdc_multi_read_buf+0x2a>
		goto udi_cdc_read_buf_loop_wait;
	}
	return 0;
80006ddc:	30 08       	mov	r8,0
}
80006dde:	10 9c       	mov	r12,r8
80006de0:	2f 9d       	sub	sp,-28
80006de2:	e3 cd 80 80 	ldm	sp++,r7,pc
80006de6:	00 00       	add	r0,r0
80006de8:	80 00       	ld.sh	r0,r0[0x0]
80006dea:	62 10       	ld.w	r0,r1[0x4]
80006dec:	00 00       	add	r0,r0
80006dee:	07 14       	ld.sh	r4,r3++
80006df0:	00 00       	add	r0,r0
80006df2:	07 10       	ld.sh	r0,r3++
80006df4:	00 00       	add	r0,r0
80006df6:	07 0c       	ld.w	r12,r3++
80006df8:	80 00       	ld.sh	r0,r0[0x0]
80006dfa:	62 50       	ld.w	r0,r1[0x14]
80006dfc:	00 00       	add	r0,r0
80006dfe:	06 8a       	andn	r10,r3
80006e00:	00 00       	add	r0,r0
80006e02:	06 8c       	andn	r12,r3
80006e04:	80 00       	ld.sh	r0,r0[0x0]
80006e06:	f2 16 80 00 	pref	r6[-32768]
80006e0a:	66 ec       	ld.w	r12,r3[0x38]

80006e0c <udi_cdc_read_buf>:

iram_size_t udi_cdc_read_buf(void* buf, iram_size_t size)
{
80006e0c:	eb cd 40 80 	pushm	r7,lr
80006e10:	1a 97       	mov	r7,sp
80006e12:	20 2d       	sub	sp,8
80006e14:	ef 4c ff fc 	st.w	r7[-4],r12
80006e18:	ef 4b ff f8 	st.w	r7[-8],r11
	return udi_cdc_multi_read_buf(0, buf, size);
80006e1c:	ee fa ff f8 	ld.w	r10,r7[-8]
80006e20:	ee fb ff fc 	ld.w	r11,r7[-4]
80006e24:	30 0c       	mov	r12,0
80006e26:	f0 1f 00 04 	mcall	80006e34 <udi_cdc_read_buf+0x28>
80006e2a:	18 98       	mov	r8,r12
}
80006e2c:	10 9c       	mov	r12,r8
80006e2e:	2f ed       	sub	sp,-8
80006e30:	e3 cd 80 80 	ldm	sp++,r7,pc
80006e34:	80 00       	ld.sh	r0,r0[0x0]
80006e36:	6c 7c       	ld.w	r12,r6[0x1c]

80006e38 <udi_cdc_multi_get_free_tx_buffer>:

iram_size_t udi_cdc_multi_get_free_tx_buffer(uint8_t port)
{
80006e38:	eb cd 40 80 	pushm	r7,lr
80006e3c:	1a 97       	mov	r7,sp
80006e3e:	20 5d       	sub	sp,20
80006e40:	18 98       	mov	r8,r12
80006e42:	ef 68 ff ec 	st.b	r7[-20],r8
	irqflags_t flags;
	iram_size_t buf_sel_nb, retval;
	uint8_t buf_sel;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
80006e46:	30 08       	mov	r8,0
80006e48:	ef 68 ff ec 	st.b	r7[-20],r8
#endif

	flags = cpu_irq_save();
80006e4c:	f0 1f 00 2b 	mcall	80006ef8 <udi_cdc_multi_get_free_tx_buffer+0xc0>
80006e50:	18 98       	mov	r8,r12
80006e52:	ef 48 ff f0 	st.w	r7[-16],r8
	buf_sel = udi_cdc_tx_buf_sel[port];
80006e56:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80006e5a:	4a 99       	lddpc	r9,80006efc <udi_cdc_multi_get_free_tx_buffer+0xc4>
80006e5c:	f2 08 07 08 	ld.ub	r8,r9[r8]
80006e60:	ef 68 ff ff 	st.b	r7[-1],r8
	buf_sel_nb = udi_cdc_tx_buf_nb[port][buf_sel];
80006e64:	ef 3a ff ec 	ld.ub	r10,r7[-20]
80006e68:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80006e6c:	4a 58       	lddpc	r8,80006f00 <udi_cdc_multi_get_free_tx_buffer+0xc8>
80006e6e:	a1 7a       	lsl	r10,0x1
80006e70:	f4 09 00 09 	add	r9,r10,r9
80006e74:	f0 09 04 18 	ld.sh	r8,r8[r9<<0x1]
80006e78:	5c 78       	castu.h	r8
80006e7a:	ef 48 ff f4 	st.w	r7[-12],r8
	if (buf_sel_nb == UDI_CDC_TX_BUFFERS) {
80006e7e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80006e82:	e0 48 00 40 	cp.w	r8,64
80006e86:	c2 91       	brne	80006ed8 <udi_cdc_multi_get_free_tx_buffer+0xa0>
		if ((!udi_cdc_tx_trans_ongoing[port])
80006e88:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80006e8c:	49 e9       	lddpc	r9,80006f04 <udi_cdc_multi_get_free_tx_buffer+0xcc>
80006e8e:	f2 08 07 08 	ld.ub	r8,r9[r8]
80006e92:	5c 58       	castu.b	r8
80006e94:	ec 18 00 01 	eorl	r8,0x1
80006e98:	5c 58       	castu.b	r8
80006e9a:	c1 f0       	breq	80006ed8 <udi_cdc_multi_get_free_tx_buffer+0xa0>
80006e9c:	ef 38 ff ec 	ld.ub	r8,r7[-20]
			&& (!udi_cdc_tx_both_buf_to_send[port])) {
80006ea0:	49 a9       	lddpc	r9,80006f08 <udi_cdc_multi_get_free_tx_buffer+0xd0>
80006ea2:	f2 08 07 08 	ld.ub	r8,r9[r8]
80006ea6:	5c 58       	castu.b	r8

	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
	buf_sel_nb = udi_cdc_tx_buf_nb[port][buf_sel];
	if (buf_sel_nb == UDI_CDC_TX_BUFFERS) {
		if ((!udi_cdc_tx_trans_ongoing[port])
80006ea8:	ec 18 00 01 	eorl	r8,0x1
80006eac:	5c 58       	castu.b	r8
80006eae:	c1 50       	breq	80006ed8 <udi_cdc_multi_get_free_tx_buffer+0xa0>
			&& (!udi_cdc_tx_both_buf_to_send[port])) {
			/* One buffer is full, but the other buffer is not used.
			 * (not used = transfer on-going)
			 * then move to the other buffer to store data */
			udi_cdc_tx_both_buf_to_send[port] = true;
80006eb0:	ef 39 ff ec 	ld.ub	r9,r7[-20]
80006eb4:	49 5a       	lddpc	r10,80006f08 <udi_cdc_multi_get_free_tx_buffer+0xd0>
80006eb6:	30 18       	mov	r8,1
80006eb8:	f4 09 0b 08 	st.b	r10[r9],r8
			udi_cdc_tx_buf_sel[port] = (buf_sel == 0)? 1 : 0;
80006ebc:	ef 3a ff ec 	ld.ub	r10,r7[-20]
80006ec0:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80006ec4:	30 08       	mov	r8,0
80006ec6:	f0 09 18 00 	cp.b	r9,r8
80006eca:	5f 08       	sreq	r8
80006ecc:	48 c9       	lddpc	r9,80006efc <udi_cdc_multi_get_free_tx_buffer+0xc4>
80006ece:	f2 0a 0b 08 	st.b	r9[r10],r8
			buf_sel_nb = 0;
80006ed2:	30 08       	mov	r8,0
80006ed4:	ef 48 ff f4 	st.w	r7[-12],r8
		}
	}
	retval = UDI_CDC_TX_BUFFERS - buf_sel_nb;  
80006ed8:	ee f8 ff f4 	ld.w	r8,r7[-12]
80006edc:	f0 08 11 40 	rsub	r8,r8,64
80006ee0:	ef 48 ff f8 	st.w	r7[-8],r8
	cpu_irq_restore(flags);
80006ee4:	ee fc ff f0 	ld.w	r12,r7[-16]
80006ee8:	f0 1f 00 09 	mcall	80006f0c <udi_cdc_multi_get_free_tx_buffer+0xd4>
	return retval;
80006eec:	ee f8 ff f8 	ld.w	r8,r7[-8]
}
80006ef0:	10 9c       	mov	r12,r8
80006ef2:	2f bd       	sub	sp,-20
80006ef4:	e3 cd 80 80 	ldm	sp++,r7,pc
80006ef8:	80 00       	ld.sh	r0,r0[0x0]
80006efa:	62 10       	ld.w	r0,r1[0x4]
80006efc:	00 00       	add	r0,r0
80006efe:	07 a0       	ld.ub	r0,r3[0x2]
80006f00:	00 00       	add	r0,r0
80006f02:	07 9c       	ld.ub	r12,r3[0x1]
80006f04:	00 00       	add	r0,r0
80006f06:	07 a8       	ld.ub	r8,r3[0x2]
80006f08:	00 00       	add	r0,r0
80006f0a:	07 ac       	ld.ub	r12,r3[0x2]
80006f0c:	80 00       	ld.sh	r0,r0[0x0]
80006f0e:	62 50       	ld.w	r0,r1[0x14]

80006f10 <udi_cdc_multi_is_tx_ready>:
{
	return udi_cdc_multi_get_free_tx_buffer(0);
}

bool udi_cdc_multi_is_tx_ready(uint8_t port)
{
80006f10:	eb cd 40 80 	pushm	r7,lr
80006f14:	1a 97       	mov	r7,sp
80006f16:	20 1d       	sub	sp,4
80006f18:	18 98       	mov	r8,r12
80006f1a:	ef 68 ff fc 	st.b	r7[-4],r8
	return (udi_cdc_multi_get_free_tx_buffer(port) != 0);
80006f1e:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80006f22:	10 9c       	mov	r12,r8
80006f24:	f0 1f 00 05 	mcall	80006f38 <udi_cdc_multi_is_tx_ready+0x28>
80006f28:	18 98       	mov	r8,r12
80006f2a:	58 08       	cp.w	r8,0
80006f2c:	5f 18       	srne	r8
80006f2e:	5c 58       	castu.b	r8
}
80006f30:	10 9c       	mov	r12,r8
80006f32:	2f fd       	sub	sp,-4
80006f34:	e3 cd 80 80 	ldm	sp++,r7,pc
80006f38:	80 00       	ld.sh	r0,r0[0x0]
80006f3a:	6e 38       	ld.w	r8,r7[0xc]

80006f3c <udi_cdc_multi_putc>:
{
	return udi_cdc_multi_is_tx_ready(0);
}

int udi_cdc_multi_putc(uint8_t port, int value)
{
80006f3c:	eb cd 40 e0 	pushm	r5-r7,lr
80006f40:	1a 97       	mov	r7,sp
80006f42:	20 4d       	sub	sp,16
80006f44:	18 98       	mov	r8,r12
80006f46:	ef 4b ff f0 	st.w	r7[-16],r11
80006f4a:	ef 68 ff f4 	st.b	r7[-12],r8
	irqflags_t flags;
	bool b_databit_9;
	uint8_t buf_sel;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
80006f4e:	30 08       	mov	r8,0
80006f50:	ef 68 ff f4 	st.b	r7[-12],r8
#endif

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);
80006f54:	ef 39 ff f4 	ld.ub	r9,r7[-12]
80006f58:	4b 6a       	lddpc	r10,80007030 <udi_cdc_multi_putc+0xf4>
80006f5a:	12 98       	mov	r8,r9
80006f5c:	a3 78       	lsl	r8,0x3
80006f5e:	12 18       	sub	r8,r9
80006f60:	f4 08 00 08 	add	r8,r10,r8
80006f64:	2f c8       	sub	r8,-4
80006f66:	11 a9       	ld.ub	r9,r8[0x2]
80006f68:	30 98       	mov	r8,9
80006f6a:	f0 09 18 00 	cp.b	r9,r8
80006f6e:	5f 08       	sreq	r8
80006f70:	ef 68 ff fe 	st.b	r7[-2],r8
80006f74:	c0 28       	rjmp	80006f78 <udi_cdc_multi_putc+0x3c>
	// Check available space
	if (!udi_cdc_multi_is_tx_ready(port)) {
		if (!udi_cdc_data_running) {
			return false;
		}
		goto udi_cdc_putc_process_one_byte;
80006f76:	d7 03       	nop

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);

udi_cdc_putc_process_one_byte:
	// Check available space
	if (!udi_cdc_multi_is_tx_ready(port)) {
80006f78:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80006f7c:	10 9c       	mov	r12,r8
80006f7e:	f0 1f 00 2e 	mcall	80007034 <udi_cdc_multi_putc+0xf8>
80006f82:	18 98       	mov	r8,r12
80006f84:	ec 18 00 01 	eorl	r8,0x1
80006f88:	5c 58       	castu.b	r8
80006f8a:	c0 a0       	breq	80006f9e <udi_cdc_multi_putc+0x62>
		if (!udi_cdc_data_running) {
80006f8c:	4a b8       	lddpc	r8,80007038 <udi_cdc_multi_putc+0xfc>
80006f8e:	11 88       	ld.ub	r8,r8[0x0]
80006f90:	5c 58       	castu.b	r8
80006f92:	ec 18 00 01 	eorl	r8,0x1
80006f96:	5c 58       	castu.b	r8
80006f98:	ce f0       	breq	80006f76 <udi_cdc_multi_putc+0x3a>
			return false;
80006f9a:	30 08       	mov	r8,0
80006f9c:	c4 68       	rjmp	80007028 <udi_cdc_multi_putc+0xec>
		}
		goto udi_cdc_putc_process_one_byte;
	}

	// Write value
	flags = cpu_irq_save();
80006f9e:	f0 1f 00 28 	mcall	8000703c <udi_cdc_multi_putc+0x100>
80006fa2:	18 98       	mov	r8,r12
80006fa4:	ef 48 ff f8 	st.w	r7[-8],r8
	buf_sel = udi_cdc_tx_buf_sel[port];
80006fa8:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80006fac:	4a 59       	lddpc	r9,80007040 <udi_cdc_multi_putc+0x104>
80006fae:	f2 08 07 08 	ld.ub	r8,r9[r8]
80006fb2:	ef 68 ff ff 	st.b	r7[-1],r8
	udi_cdc_tx_buf[port][buf_sel][udi_cdc_tx_buf_nb[port][buf_sel]++] = value;
80006fb6:	ef 35 ff f4 	ld.ub	r5,r7[-12]
80006fba:	ef 36 ff ff 	ld.ub	r6,r7[-1]
80006fbe:	ef 3a ff f4 	ld.ub	r10,r7[-12]
80006fc2:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80006fc6:	4a 08       	lddpc	r8,80007044 <udi_cdc_multi_putc+0x108>
80006fc8:	f4 0b 15 01 	lsl	r11,r10,0x1
80006fcc:	12 0b       	add	r11,r9
80006fce:	f0 0b 04 18 	ld.sh	r8,r8[r11<<0x1]
80006fd2:	f9 d8 c0 10 	bfextu	r12,r8,0x0,0x10
80006fd6:	ee fb ff f0 	ld.w	r11,r7[-16]
80006fda:	5c 5b       	castu.b	r11
80006fdc:	49 be       	lddpc	lr,80007048 <udi_cdc_multi_putc+0x10c>
80006fde:	a1 75       	lsl	r5,0x1
80006fe0:	ea 06 00 06 	add	r6,r5,r6
80006fe4:	a7 66       	lsl	r6,0x6
80006fe6:	ec 0c 00 0c 	add	r12,r6,r12
80006fea:	fc 0c 00 0c 	add	r12,lr,r12
80006fee:	b8 8b       	st.b	r12[0x0],r11
80006ff0:	2f f8       	sub	r8,-1
80006ff2:	5c 88       	casts.h	r8
80006ff4:	49 4b       	lddpc	r11,80007044 <udi_cdc_multi_putc+0x108>
80006ff6:	a1 7a       	lsl	r10,0x1
80006ff8:	f4 09 00 09 	add	r9,r10,r9
80006ffc:	f6 09 0a 18 	st.h	r11[r9<<0x1],r8
	cpu_irq_restore(flags);
80007000:	ee fc ff f8 	ld.w	r12,r7[-8]
80007004:	f0 1f 00 12 	mcall	8000704c <udi_cdc_multi_putc+0x110>

	if (b_databit_9) {
80007008:	ef 39 ff fe 	ld.ub	r9,r7[-2]
8000700c:	30 08       	mov	r8,0
8000700e:	f0 09 18 00 	cp.b	r9,r8
80007012:	c0 a0       	breq	80007026 <udi_cdc_multi_putc+0xea>
		// Send MSB
		b_databit_9 = false;
80007014:	30 08       	mov	r8,0
80007016:	ef 68 ff fe 	st.b	r7[-2],r8
		value = value >> 8;
8000701a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000701e:	a9 48       	asr	r8,0x8
80007020:	ef 48 ff f0 	st.w	r7[-16],r8
		goto udi_cdc_putc_process_one_byte;
80007024:	ca ab       	rjmp	80006f78 <udi_cdc_multi_putc+0x3c>
	}
	return true;
80007026:	30 18       	mov	r8,1
}
80007028:	10 9c       	mov	r12,r8
8000702a:	2f cd       	sub	sp,-16
8000702c:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80007030:	00 00       	add	r0,r0
80007032:	06 70       	tst	r0,r3
80007034:	80 00       	ld.sh	r0,r0[0x0]
80007036:	6f 10       	ld.w	r0,r7[0x44]
80007038:	00 00       	add	r0,r0
8000703a:	06 8a       	andn	r10,r3
8000703c:	80 00       	ld.sh	r0,r0[0x0]
8000703e:	62 10       	ld.w	r0,r1[0x4]
80007040:	00 00       	add	r0,r0
80007042:	07 a0       	ld.ub	r0,r3[0x2]
80007044:	00 00       	add	r0,r0
80007046:	07 9c       	ld.ub	r12,r3[0x1]
80007048:	00 00       	add	r0,r0
8000704a:	07 1c       	ld.sh	r12,r3++
8000704c:	80 00       	ld.sh	r0,r0[0x0]
8000704e:	62 50       	ld.w	r0,r1[0x14]

80007050 <udi_cdc_putc>:

int udi_cdc_putc(int value)
{
80007050:	eb cd 40 80 	pushm	r7,lr
80007054:	1a 97       	mov	r7,sp
80007056:	20 1d       	sub	sp,4
80007058:	ef 4c ff fc 	st.w	r7[-4],r12
	return udi_cdc_multi_putc(0, value);
8000705c:	ee fb ff fc 	ld.w	r11,r7[-4]
80007060:	30 0c       	mov	r12,0
80007062:	f0 1f 00 04 	mcall	80007070 <udi_cdc_putc+0x20>
80007066:	18 98       	mov	r8,r12
}
80007068:	10 9c       	mov	r12,r8
8000706a:	2f fd       	sub	sp,-4
8000706c:	e3 cd 80 80 	ldm	sp++,r7,pc
80007070:	80 00       	ld.sh	r0,r0[0x0]
80007072:	6f 3c       	ld.w	r12,r7[0x4c]

80007074 <udc_get_eof_conf>:
 * \brief Returns a value to check the end of USB Configuration descriptor
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
80007074:	eb cd 40 80 	pushm	r7,lr
80007078:	1a 97       	mov	r7,sp
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
8000707a:	48 b8       	lddpc	r8,800070a4 <udc_get_eof_conf+0x30>
8000707c:	70 08       	ld.w	r8,r8[0x0]
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
8000707e:	70 09       	ld.w	r9,r8[0x0]
			udc_ptr_conf->desc +
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
80007080:	48 98       	lddpc	r8,800070a4 <udc_get_eof_conf+0x30>
80007082:	70 08       	ld.w	r8,r8[0x0]
80007084:	70 08       	ld.w	r8,r8[0x0]
80007086:	11 aa       	ld.ub	r10,r8[0x2]
80007088:	a9 6a       	lsl	r10,0x8
8000708a:	11 b8       	ld.ub	r8,r8[0x3]
8000708c:	14 48       	or	r8,r10
8000708e:	5c 88       	casts.h	r8
80007090:	5c 88       	casts.h	r8
80007092:	5c c8       	swap.bh	r8
80007094:	5c 88       	casts.h	r8
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
80007096:	5c 78       	castu.h	r8
80007098:	f2 08 00 08 	add	r8,r9,r8
			udc_ptr_conf->desc +
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
}
8000709c:	10 9c       	mov	r12,r8
8000709e:	e3 cd 80 80 	ldm	sp++,r7,pc
800070a2:	00 00       	add	r0,r0
800070a4:	00 00       	add	r0,r0
800070a6:	07 c0       	ld.ub	r0,r3[0x4]

800070a8 <udc_next_desc_in_iface>:
 * \return address of specific descriptor found
 * \return NULL if it is the end of global interface descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_next_desc_in_iface(usb_conf_desc_t
		UDC_DESC_STORAGE * desc, uint8_t desc_id)
{
800070a8:	eb cd 40 80 	pushm	r7,lr
800070ac:	1a 97       	mov	r7,sp
800070ae:	20 3d       	sub	sp,12
800070b0:	ef 4c ff f8 	st.w	r7[-8],r12
800070b4:	16 98       	mov	r8,r11
800070b6:	ef 68 ff f4 	st.b	r7[-12],r8
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
800070ba:	f0 1f 00 1d 	mcall	8000712c <udc_next_desc_in_iface+0x84>
800070be:	18 98       	mov	r8,r12
800070c0:	ef 48 ff fc 	st.w	r7[-4],r8
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
800070c4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800070c8:	11 88       	ld.ub	r8,r8[0x0]
800070ca:	ee f9 ff f8 	ld.w	r9,r7[-8]
800070ce:	f2 08 00 08 	add	r8,r9,r8
800070d2:	ef 48 ff f8 	st.w	r7[-8],r8
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
800070d6:	c1 c8       	rjmp	8000710e <udc_next_desc_in_iface+0x66>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
800070d8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800070dc:	11 99       	ld.ub	r9,r8[0x1]
800070de:	30 48       	mov	r8,4
800070e0:	f0 09 18 00 	cp.b	r9,r8
800070e4:	c1 d0       	breq	8000711e <udc_next_desc_in_iface+0x76>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
800070e6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800070ea:	11 98       	ld.ub	r8,r8[0x1]
800070ec:	ef 39 ff f4 	ld.ub	r9,r7[-12]
800070f0:	f0 09 18 00 	cp.b	r9,r8
800070f4:	c0 41       	brne	800070fc <udc_next_desc_in_iface+0x54>
			return desc; // Specific descriptor found
800070f6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800070fa:	c1 48       	rjmp	80007122 <udc_next_desc_in_iface+0x7a>
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
800070fc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007100:	11 88       	ld.ub	r8,r8[0x0]
80007102:	ee f9 ff f8 	ld.w	r9,r7[-8]
80007106:	f2 08 00 08 	add	r8,r9,r8
8000710a:	ef 48 ff f8 	st.w	r7[-8],r8
	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
8000710e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80007112:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007116:	10 39       	cp.w	r9,r8
80007118:	fe 9b ff e0 	brhi	800070d8 <udc_next_desc_in_iface+0x30>
8000711c:	c0 28       	rjmp	80007120 <udc_next_desc_in_iface+0x78>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
			break; // End of global interface descriptor
8000711e:	d7 03       	nop
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
	}
	return NULL; // No specific descriptor found
80007120:	30 08       	mov	r8,0
}
80007122:	10 9c       	mov	r12,r8
80007124:	2f dd       	sub	sp,-12
80007126:	e3 cd 80 80 	ldm	sp++,r7,pc
8000712a:	00 00       	add	r0,r0
8000712c:	80 00       	ld.sh	r0,r0[0x0]
8000712e:	70 74       	ld.w	r4,r8[0x1c]

80007130 <udc_update_iface_desc>:
 * \param setting_num   Setting number of interface to find
 *
 * \return 1 if found or 0 if not found
 */
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
80007130:	eb cd 40 80 	pushm	r7,lr
80007134:	1a 97       	mov	r7,sp
80007136:	20 3d       	sub	sp,12
80007138:	18 99       	mov	r9,r12
8000713a:	16 98       	mov	r8,r11
8000713c:	ef 69 ff f8 	st.b	r7[-8],r9
80007140:	ef 68 ff f4 	st.b	r7[-12],r8
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_end_desc;

	if (0 == udc_num_configuration) {
80007144:	4a 58       	lddpc	r8,800071d8 <udc_update_iface_desc+0xa8>
80007146:	11 88       	ld.ub	r8,r8[0x0]
80007148:	58 08       	cp.w	r8,0
8000714a:	c0 31       	brne	80007150 <udc_update_iface_desc+0x20>
		return false;
8000714c:	30 08       	mov	r8,0
8000714e:	c4 18       	rjmp	800071d0 <udc_update_iface_desc+0xa0>
	}

	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
80007150:	4a 38       	lddpc	r8,800071dc <udc_update_iface_desc+0xac>
80007152:	70 08       	ld.w	r8,r8[0x0]
80007154:	70 08       	ld.w	r8,r8[0x0]
80007156:	11 c8       	ld.ub	r8,r8[0x4]
80007158:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000715c:	f0 09 18 00 	cp.b	r9,r8
80007160:	c0 33       	brcs	80007166 <udc_update_iface_desc+0x36>
		return false;
80007162:	30 08       	mov	r8,0
80007164:	c3 68       	rjmp	800071d0 <udc_update_iface_desc+0xa0>
	}

	// Start at the beginning of configuration descriptor
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;
80007166:	49 e8       	lddpc	r8,800071dc <udc_update_iface_desc+0xac>
80007168:	70 08       	ld.w	r8,r8[0x0]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
		return false;
	}

	// Start at the beginning of configuration descriptor
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
8000716a:	70 08       	ld.w	r8,r8[0x0]
8000716c:	10 99       	mov	r9,r8
8000716e:	49 d8       	lddpc	r8,800071e0 <udc_update_iface_desc+0xb0>
80007170:	91 09       	st.w	r8[0x0],r9
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
80007172:	f0 1f 00 1d 	mcall	800071e4 <udc_update_iface_desc+0xb4>
80007176:	18 98       	mov	r8,r12
80007178:	ef 48 ff fc 	st.w	r7[-4],r8
	while (ptr_end_desc >
8000717c:	c2 28       	rjmp	800071c0 <udc_update_iface_desc+0x90>
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
8000717e:	49 98       	lddpc	r8,800071e0 <udc_update_iface_desc+0xb0>
80007180:	70 08       	ld.w	r8,r8[0x0]
80007182:	11 99       	ld.ub	r9,r8[0x1]
80007184:	30 48       	mov	r8,4
80007186:	f0 09 18 00 	cp.b	r9,r8
8000718a:	c1 31       	brne	800071b0 <udc_update_iface_desc+0x80>
			// A interface descriptor is found
			// Check interface and alternate setting number
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
8000718c:	49 58       	lddpc	r8,800071e0 <udc_update_iface_desc+0xb0>
8000718e:	70 08       	ld.w	r8,r8[0x0]
80007190:	11 a8       	ld.ub	r8,r8[0x2]
80007192:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80007196:	f0 09 18 00 	cp.b	r9,r8
8000719a:	c0 b1       	brne	800071b0 <udc_update_iface_desc+0x80>
					(setting_num ==
					udc_ptr_iface->bAlternateSetting)) {
8000719c:	49 18       	lddpc	r8,800071e0 <udc_update_iface_desc+0xb0>
8000719e:	70 08       	ld.w	r8,r8[0x0]
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
			// A interface descriptor is found
			// Check interface and alternate setting number
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
					(setting_num ==
800071a0:	11 b8       	ld.ub	r8,r8[0x3]
	while (ptr_end_desc >
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
			// A interface descriptor is found
			// Check interface and alternate setting number
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
800071a2:	ef 39 ff f4 	ld.ub	r9,r7[-12]
800071a6:	f0 09 18 00 	cp.b	r9,r8
800071aa:	c0 31       	brne	800071b0 <udc_update_iface_desc+0x80>
					(setting_num ==
					udc_ptr_iface->bAlternateSetting)) {
				return true; // Interface found
800071ac:	30 18       	mov	r8,1
800071ae:	c1 18       	rjmp	800071d0 <udc_update_iface_desc+0xa0>
			}
		}
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
800071b0:	48 c8       	lddpc	r8,800071e0 <udc_update_iface_desc+0xb0>
800071b2:	70 09       	ld.w	r9,r8[0x0]
				(uint8_t *) udc_ptr_iface +
				udc_ptr_iface->bLength);
800071b4:	48 b8       	lddpc	r8,800071e0 <udc_update_iface_desc+0xb0>
800071b6:	70 08       	ld.w	r8,r8[0x0]
					udc_ptr_iface->bAlternateSetting)) {
				return true; // Interface found
			}
		}
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
800071b8:	11 88       	ld.ub	r8,r8[0x0]
800071ba:	10 09       	add	r9,r8
800071bc:	48 98       	lddpc	r8,800071e0 <udc_update_iface_desc+0xb0>
800071be:	91 09       	st.w	r8[0x0],r9
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
800071c0:	48 88       	lddpc	r8,800071e0 <udc_update_iface_desc+0xb0>
800071c2:	70 08       	ld.w	r8,r8[0x0]
800071c4:	ee f9 ff fc 	ld.w	r9,r7[-4]
800071c8:	10 39       	cp.w	r9,r8
800071ca:	fe 9b ff da 	brhi	8000717e <udc_update_iface_desc+0x4e>
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
				(uint8_t *) udc_ptr_iface +
				udc_ptr_iface->bLength);
	}
	return false; // Interface not found
800071ce:	30 08       	mov	r8,0
}
800071d0:	10 9c       	mov	r12,r8
800071d2:	2f dd       	sub	sp,-12
800071d4:	e3 cd 80 80 	ldm	sp++,r7,pc
800071d8:	00 00       	add	r0,r0
800071da:	07 bc       	ld.ub	r12,r3[0x3]
800071dc:	00 00       	add	r0,r0
800071de:	07 c0       	ld.ub	r0,r3[0x4]
800071e0:	00 00       	add	r0,r0
800071e2:	07 c4       	ld.ub	r4,r3[0x4]
800071e4:	80 00       	ld.sh	r0,r0[0x0]
800071e6:	70 74       	ld.w	r4,r8[0x1c]

800071e8 <udc_iface_disable>:
 * \param iface_num     Interface number to disable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_disable(uint8_t iface_num)
{
800071e8:	eb cd 40 80 	pushm	r7,lr
800071ec:	1a 97       	mov	r7,sp
800071ee:	20 3d       	sub	sp,12
800071f0:	18 98       	mov	r8,r12
800071f2:	ef 68 ff f4 	st.b	r7[-12],r8
	udi_api_t UDC_DESC_STORAGE *udi_api;

	// Select first alternate setting of the interface
	// to update udc_ptr_iface before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
800071f6:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800071fa:	30 0b       	mov	r11,0
800071fc:	10 9c       	mov	r12,r8
800071fe:	f0 1f 00 25 	mcall	80007290 <udc_iface_disable+0xa8>
80007202:	18 98       	mov	r8,r12
80007204:	ec 18 00 01 	eorl	r8,0x1
80007208:	5c 58       	castu.b	r8
8000720a:	c0 30       	breq	80007210 <udc_iface_disable+0x28>
		return false;
8000720c:	30 08       	mov	r8,0
8000720e:	c3 d8       	rjmp	80007288 <udc_iface_disable+0xa0>
	}

	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
80007210:	4a 18       	lddpc	r8,80007294 <udc_iface_disable+0xac>
80007212:	70 08       	ld.w	r8,r8[0x0]
80007214:	70 19       	ld.w	r9,r8[0x4]
80007216:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000721a:	a3 68       	lsl	r8,0x2
8000721c:	f2 08 00 08 	add	r8,r9,r8
80007220:	70 08       	ld.w	r8,r8[0x0]
80007222:	ef 48 ff f8 	st.w	r7[-8],r8

#if (0!=USB_DEVICE_MAX_EP)
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
80007226:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000722a:	70 38       	ld.w	r8,r8[0xc]
8000722c:	5d 18       	icall	r8
8000722e:	18 98       	mov	r8,r12
80007230:	10 99       	mov	r9,r8
80007232:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80007236:	12 9b       	mov	r11,r9
80007238:	10 9c       	mov	r12,r8
8000723a:	f0 1f 00 16 	mcall	80007290 <udc_iface_disable+0xa8>
8000723e:	18 98       	mov	r8,r12
80007240:	ec 18 00 01 	eorl	r8,0x1
80007244:	5c 58       	castu.b	r8
80007246:	c0 30       	breq	8000724c <udc_iface_disable+0x64>
		return false;
80007248:	30 08       	mov	r8,0
8000724a:	c1 f8       	rjmp	80007288 <udc_iface_disable+0xa0>
	}

	// Start at the beginning of interface descriptor
	{
		usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
8000724c:	49 38       	lddpc	r8,80007298 <udc_iface_disable+0xb0>
8000724e:	70 08       	ld.w	r8,r8[0x0]
80007250:	ef 48 ff fc 	st.w	r7[-4],r8
		while (1) {
			// Search Endpoint descriptor included in global interface descriptor
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
80007254:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007258:	30 5b       	mov	r11,5
8000725a:	10 9c       	mov	r12,r8
8000725c:	f0 1f 00 10 	mcall	8000729c <udc_iface_disable+0xb4>
80007260:	18 98       	mov	r8,r12
80007262:	ef 48 ff fc 	st.w	r7[-4],r8
					udc_next_desc_in_iface((UDC_DESC_STORAGE
					usb_conf_desc_t *)
					ep_desc, USB_DT_ENDPOINT);
			if (NULL == ep_desc) {
80007266:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000726a:	58 08       	cp.w	r8,0
8000726c:	c0 71       	brne	8000727a <udc_iface_disable+0x92>
		}
	}
#endif

	// Disable interface
	udi_api->disable();
8000726e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007272:	70 18       	ld.w	r8,r8[0x4]
80007274:	5d 18       	icall	r8
	return true;
80007276:	30 18       	mov	r8,1
80007278:	c0 88       	rjmp	80007288 <udc_iface_disable+0xa0>
					ep_desc, USB_DT_ENDPOINT);
			if (NULL == ep_desc) {
				break;
			}
			// Free the endpoint used by the interface
			udd_ep_free(ep_desc->bEndpointAddress);
8000727a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000727e:	11 a8       	ld.ub	r8,r8[0x2]
80007280:	10 9c       	mov	r12,r8
80007282:	f0 1f 00 08 	mcall	800072a0 <udc_iface_disable+0xb8>
		}
80007286:	ce 7b       	rjmp	80007254 <udc_iface_disable+0x6c>
#endif

	// Disable interface
	udi_api->disable();
	return true;
}
80007288:	10 9c       	mov	r12,r8
8000728a:	2f dd       	sub	sp,-12
8000728c:	e3 cd 80 80 	ldm	sp++,r7,pc
80007290:	80 00       	ld.sh	r0,r0[0x0]
80007292:	71 30       	ld.w	r0,r8[0x4c]
80007294:	00 00       	add	r0,r0
80007296:	07 c0       	ld.ub	r0,r3[0x4]
80007298:	00 00       	add	r0,r0
8000729a:	07 c4       	ld.ub	r4,r3[0x4]
8000729c:	80 00       	ld.sh	r0,r0[0x0]
8000729e:	70 a8       	ld.w	r8,r8[0x28]
800072a0:	80 00       	ld.sh	r0,r0[0x0]
800072a2:	4e ec       	lddpc	r12,80007458 <udc_req_std_dev_get_status+0x4>

800072a4 <udc_iface_enable>:
 * \param setting_num   Setting number to enable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_enable(uint8_t iface_num, uint8_t setting_num)
{
800072a4:	eb cd 40 80 	pushm	r7,lr
800072a8:	1a 97       	mov	r7,sp
800072aa:	20 3d       	sub	sp,12
800072ac:	18 99       	mov	r9,r12
800072ae:	16 98       	mov	r8,r11
800072b0:	ef 69 ff f8 	st.b	r7[-8],r9
800072b4:	ef 68 ff f4 	st.b	r7[-12],r8
	// Select the interface descriptor
	if (!udc_update_iface_desc(iface_num, setting_num)) {
800072b8:	ef 39 ff f4 	ld.ub	r9,r7[-12]
800072bc:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800072c0:	12 9b       	mov	r11,r9
800072c2:	10 9c       	mov	r12,r8
800072c4:	f0 1f 00 25 	mcall	80007358 <udc_iface_enable+0xb4>
800072c8:	18 98       	mov	r8,r12
800072ca:	ec 18 00 01 	eorl	r8,0x1
800072ce:	5c 58       	castu.b	r8
800072d0:	c0 30       	breq	800072d6 <udc_iface_enable+0x32>
		return false;
800072d2:	30 08       	mov	r8,0
800072d4:	c3 e8       	rjmp	80007350 <udc_iface_enable+0xac>

#if (0!=USB_DEVICE_MAX_EP)
	usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;

	// Start at the beginning of the global interface descriptor
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
800072d6:	4a 28       	lddpc	r8,8000735c <udc_iface_enable+0xb8>
800072d8:	70 08       	ld.w	r8,r8[0x0]
800072da:	ef 48 ff fc 	st.w	r7[-4],r8
800072de:	c0 28       	rjmp	800072e2 <udc_iface_enable+0x3e>
				ep_desc->bmAttributes,
				le16_to_cpu
				(ep_desc->wMaxPacketSize))) {
			return false;
		}
	}
800072e0:	d7 03       	nop

	// Start at the beginning of the global interface descriptor
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
	while (1) {
		// Search Endpoint descriptor included in the global interface descriptor
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
800072e2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800072e6:	30 5b       	mov	r11,5
800072e8:	10 9c       	mov	r12,r8
800072ea:	f0 1f 00 1e 	mcall	80007360 <udc_iface_enable+0xbc>
800072ee:	18 98       	mov	r8,r12
800072f0:	ef 48 ff fc 	st.w	r7[-4],r8
				udc_next_desc_in_iface((UDC_DESC_STORAGE
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
800072f4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800072f8:	58 08       	cp.w	r8,0
800072fa:	c0 e1       	brne	80007316 <udc_iface_enable+0x72>
			return false;
		}
	}
#endif
	// Enable the interface
	return udc_ptr_conf->udi_apis[iface_num]->enable();
800072fc:	49 a8       	lddpc	r8,80007364 <udc_iface_enable+0xc0>
800072fe:	70 08       	ld.w	r8,r8[0x0]
80007300:	70 19       	ld.w	r9,r8[0x4]
80007302:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80007306:	a3 68       	lsl	r8,0x2
80007308:	f2 08 00 08 	add	r8,r9,r8
8000730c:	70 08       	ld.w	r8,r8[0x0]
8000730e:	70 08       	ld.w	r8,r8[0x0]
80007310:	5d 18       	icall	r8
80007312:	18 98       	mov	r8,r12
80007314:	c1 e8       	rjmp	80007350 <udc_iface_enable+0xac>
		if (NULL == ep_desc)
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
				ep_desc->bmAttributes,
				le16_to_cpu
80007316:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000731a:	11 c9       	ld.ub	r9,r8[0x4]
8000731c:	a9 69       	lsl	r9,0x8
8000731e:	11 d8       	ld.ub	r8,r8[0x5]
80007320:	12 48       	or	r8,r9
80007322:	5c 88       	casts.h	r8
80007324:	5c 88       	casts.h	r8
80007326:	5c c8       	swap.bh	r8
80007328:	5c 88       	casts.h	r8
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
8000732a:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
				ep_desc->bmAttributes,
8000732e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007332:	11 b8       	ld.ub	r8,r8[0x3]
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
80007334:	10 99       	mov	r9,r8
80007336:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000733a:	11 a8       	ld.ub	r8,r8[0x2]
8000733c:	12 9b       	mov	r11,r9
8000733e:	10 9c       	mov	r12,r8
80007340:	f0 1f 00 0a 	mcall	80007368 <udc_iface_enable+0xc4>
80007344:	18 98       	mov	r8,r12
80007346:	ec 18 00 01 	eorl	r8,0x1
8000734a:	5c 58       	castu.b	r8
8000734c:	cc a0       	breq	800072e0 <udc_iface_enable+0x3c>
				ep_desc->bmAttributes,
				le16_to_cpu
				(ep_desc->wMaxPacketSize))) {
			return false;
8000734e:	30 08       	mov	r8,0
		}
	}
#endif
	// Enable the interface
	return udc_ptr_conf->udi_apis[iface_num]->enable();
}
80007350:	10 9c       	mov	r12,r8
80007352:	2f dd       	sub	sp,-12
80007354:	e3 cd 80 80 	ldm	sp++,r7,pc
80007358:	80 00       	ld.sh	r0,r0[0x0]
8000735a:	71 30       	ld.w	r0,r8[0x4c]
8000735c:	00 00       	add	r0,r0
8000735e:	07 c4       	ld.ub	r4,r3[0x4]
80007360:	80 00       	ld.sh	r0,r0[0x0]
80007362:	70 a8       	ld.w	r8,r8[0x28]
80007364:	00 00       	add	r0,r0
80007366:	07 c0       	ld.ub	r0,r3[0x4]
80007368:	80 00       	ld.sh	r0,r0[0x0]
8000736a:	4b 9c       	lddpc	r12,8000744c <udc_sof_notify+0x68>

8000736c <udc_start>:

/*! \brief Start the USB Device stack
 */
void udc_start(void)
{
8000736c:	eb cd 40 80 	pushm	r7,lr
80007370:	1a 97       	mov	r7,sp
	udd_enable();
80007372:	f0 1f 00 03 	mcall	8000737c <udc_start+0x10>
}
80007376:	e3 cd 80 80 	ldm	sp++,r7,pc
8000737a:	00 00       	add	r0,r0
8000737c:	80 00       	ld.sh	r0,r0[0x0]
8000737e:	48 b8       	lddpc	r8,800073a8 <udc_reset+0x28>

80007380 <udc_reset>:
/**
 * \brief Reset the current configuration of the USB device,
 * This routines can be called by UDD when a RESET on the USB line occurs.
 */
void udc_reset(void)
{
80007380:	eb cd 40 80 	pushm	r7,lr
80007384:	1a 97       	mov	r7,sp
80007386:	20 1d       	sub	sp,4
	uint8_t iface_num;

	if (udc_num_configuration) {
80007388:	49 38       	lddpc	r8,800073d4 <udc_reset+0x54>
8000738a:	11 88       	ld.ub	r8,r8[0x0]
8000738c:	58 08       	cp.w	r8,0
8000738e:	c1 80       	breq	800073be <udc_reset+0x3e>
		for (iface_num = 0;
80007390:	30 08       	mov	r8,0
80007392:	ef 68 ff ff 	st.b	r7[-1],r8
80007396:	c0 b8       	rjmp	800073ac <udc_reset+0x2c>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
80007398:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000739c:	10 9c       	mov	r12,r8
8000739e:	f0 1f 00 0f 	mcall	800073d8 <udc_reset+0x58>
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
800073a2:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800073a6:	2f f8       	sub	r8,-1
800073a8:	ef 68 ff ff 	st.b	r7[-1],r8
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
800073ac:	48 c8       	lddpc	r8,800073dc <udc_reset+0x5c>
800073ae:	70 08       	ld.w	r8,r8[0x0]
800073b0:	70 08       	ld.w	r8,r8[0x0]
800073b2:	11 c8       	ld.ub	r8,r8[0x4]
void udc_reset(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
800073b4:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800073b8:	f0 09 18 00 	cp.b	r9,r8
800073bc:	ce e3       	brcs	80007398 <udc_reset+0x18>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
		}
	}
	udc_num_configuration = 0;
800073be:	48 69       	lddpc	r9,800073d4 <udc_reset+0x54>
800073c0:	30 08       	mov	r8,0
800073c2:	b2 88       	st.b	r9[0x0],r8
	if (CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP) & udc_device_status) {
		// Remote wakeup is enabled then disable it
		UDC_REMOTEWAKEUP_DISABLE();
	}
#endif
	udc_device_status =
800073c4:	48 79       	lddpc	r9,800073e0 <udc_reset+0x60>
800073c6:	e0 68 01 00 	mov	r8,256
800073ca:	b2 08       	st.h	r9[0x0],r8
#if (USB_DEVICE_ATTR & USB_CONFIG_ATTR_SELF_POWERED)
			CPU_TO_LE16(USB_DEV_STATUS_SELF_POWERED);
#else
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}
800073cc:	2f fd       	sub	sp,-4
800073ce:	e3 cd 80 80 	ldm	sp++,r7,pc
800073d2:	00 00       	add	r0,r0
800073d4:	00 00       	add	r0,r0
800073d6:	07 bc       	ld.ub	r12,r3[0x3]
800073d8:	80 00       	ld.sh	r0,r0[0x0]
800073da:	71 e8       	ld.w	r8,r8[0x78]
800073dc:	00 00       	add	r0,r0
800073de:	07 c0       	ld.ub	r0,r3[0x4]
800073e0:	00 00       	add	r0,r0
800073e2:	07 b4       	ld.ub	r4,r3[0x3]

800073e4 <udc_sof_notify>:

void udc_sof_notify(void)
{
800073e4:	eb cd 40 80 	pushm	r7,lr
800073e8:	1a 97       	mov	r7,sp
800073ea:	20 1d       	sub	sp,4
	uint8_t iface_num;

	if (udc_num_configuration) {
800073ec:	49 88       	lddpc	r8,8000744c <udc_sof_notify+0x68>
800073ee:	11 88       	ld.ub	r8,r8[0x0]
800073f0:	58 08       	cp.w	r8,0
800073f2:	c2 a0       	breq	80007446 <udc_sof_notify+0x62>
		for (iface_num = 0;
800073f4:	30 08       	mov	r8,0
800073f6:	ef 68 ff ff 	st.b	r7[-1],r8
800073fa:	c1 d8       	rjmp	80007434 <udc_sof_notify+0x50>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
800073fc:	49 58       	lddpc	r8,80007450 <udc_sof_notify+0x6c>
800073fe:	70 08       	ld.w	r8,r8[0x0]
80007400:	70 19       	ld.w	r9,r8[0x4]
80007402:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80007406:	a3 68       	lsl	r8,0x2
80007408:	f2 08 00 08 	add	r8,r9,r8
8000740c:	70 08       	ld.w	r8,r8[0x0]
8000740e:	70 48       	ld.w	r8,r8[0x10]
80007410:	58 08       	cp.w	r8,0
80007412:	c0 c0       	breq	8000742a <udc_sof_notify+0x46>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
80007414:	48 f8       	lddpc	r8,80007450 <udc_sof_notify+0x6c>
80007416:	70 08       	ld.w	r8,r8[0x0]
80007418:	70 19       	ld.w	r9,r8[0x4]
8000741a:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000741e:	a3 68       	lsl	r8,0x2
80007420:	f2 08 00 08 	add	r8,r9,r8
80007424:	70 08       	ld.w	r8,r8[0x0]
80007426:	70 48       	ld.w	r8,r8[0x10]
80007428:	5d 18       	icall	r8
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
8000742a:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000742e:	2f f8       	sub	r8,-1
80007430:	ef 68 ff ff 	st.b	r7[-1],r8
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
80007434:	48 78       	lddpc	r8,80007450 <udc_sof_notify+0x6c>
80007436:	70 08       	ld.w	r8,r8[0x0]
80007438:	70 08       	ld.w	r8,r8[0x0]
8000743a:	11 c8       	ld.ub	r8,r8[0x4]
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
8000743c:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80007440:	f0 09 18 00 	cp.b	r9,r8
80007444:	cd c3       	brcs	800073fc <udc_sof_notify+0x18>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
			}
		}
	}
}
80007446:	2f fd       	sub	sp,-4
80007448:	e3 cd 80 80 	ldm	sp++,r7,pc
8000744c:	00 00       	add	r0,r0
8000744e:	07 bc       	ld.ub	r12,r3[0x3]
80007450:	00 00       	add	r0,r0
80007452:	07 c0       	ld.ub	r0,r3[0x4]

80007454 <udc_req_std_dev_get_status>:
 * \brief Standard device request to get device status
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
80007454:	eb cd 40 80 	pushm	r7,lr
80007458:	1a 97       	mov	r7,sp
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
8000745a:	48 98       	lddpc	r8,8000747c <udc_req_std_dev_get_status+0x28>
8000745c:	90 39       	ld.sh	r9,r8[0x6]
8000745e:	30 28       	mov	r8,2
80007460:	f0 09 19 00 	cp.h	r9,r8
80007464:	c0 30       	breq	8000746a <udc_req_std_dev_get_status+0x16>
		return false;
80007466:	30 08       	mov	r8,0
80007468:	c0 78       	rjmp	80007476 <udc_req_std_dev_get_status+0x22>
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
8000746a:	48 68       	lddpc	r8,80007480 <udc_req_std_dev_get_status+0x2c>
8000746c:	30 2b       	mov	r11,2
8000746e:	10 9c       	mov	r12,r8
80007470:	f0 1f 00 05 	mcall	80007484 <udc_req_std_dev_get_status+0x30>
			sizeof(udc_device_status));
	return true;
80007474:	30 18       	mov	r8,1
}
80007476:	10 9c       	mov	r12,r8
80007478:	e3 cd 80 80 	ldm	sp++,r7,pc
8000747c:	00 00       	add	r0,r0
8000747e:	0b 20       	ld.uh	r0,r5++
80007480:	00 00       	add	r0,r0
80007482:	07 b4       	ld.ub	r4,r3[0x3]
80007484:	80 00       	ld.sh	r0,r0[0x0]
80007486:	4b 70       	lddpc	r0,80007560 <udc_req_std_dev_set_feature+0x4>

80007488 <udc_req_std_ep_get_status>:
 * \brief Standard endpoint request to get endpoint status
 *
 * \return true if success
 */
static bool udc_req_std_ep_get_status(void)
{
80007488:	eb cd 40 80 	pushm	r7,lr
8000748c:	1a 97       	mov	r7,sp
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
8000748e:	49 18       	lddpc	r8,800074d0 <udc_req_std_ep_get_status+0x48>
80007490:	90 39       	ld.sh	r9,r8[0x6]
80007492:	30 28       	mov	r8,2
80007494:	f0 09 19 00 	cp.h	r9,r8
80007498:	c0 30       	breq	8000749e <udc_req_std_ep_get_status+0x16>
		return false;
8000749a:	30 08       	mov	r8,0
8000749c:	c1 68       	rjmp	800074c8 <udc_req_std_ep_get_status+0x40>
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
8000749e:	48 d8       	lddpc	r8,800074d0 <udc_req_std_ep_get_status+0x48>
800074a0:	90 28       	ld.sh	r8,r8[0x4]
800074a2:	5c 58       	castu.b	r8
800074a4:	10 9c       	mov	r12,r8
800074a6:	f0 1f 00 0c 	mcall	800074d4 <udc_req_std_ep_get_status+0x4c>
800074aa:	18 98       	mov	r8,r12
800074ac:	58 08       	cp.w	r8,0
800074ae:	c0 40       	breq	800074b6 <udc_req_std_ep_get_status+0x2e>
800074b0:	e0 68 01 00 	mov	r8,256
800074b4:	c0 28       	rjmp	800074b8 <udc_req_std_ep_get_status+0x30>
800074b6:	30 08       	mov	r8,0
800074b8:	48 89       	lddpc	r9,800074d8 <udc_req_std_ep_get_status+0x50>
800074ba:	b2 08       	st.h	r9[0x0],r8
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
800074bc:	48 78       	lddpc	r8,800074d8 <udc_req_std_ep_get_status+0x50>
800074be:	30 2b       	mov	r11,2
800074c0:	10 9c       	mov	r12,r8
800074c2:	f0 1f 00 07 	mcall	800074dc <udc_req_std_ep_get_status+0x54>
			sizeof(udc_ep_status));
	return true;
800074c6:	30 18       	mov	r8,1
}
800074c8:	10 9c       	mov	r12,r8
800074ca:	e3 cd 80 80 	ldm	sp++,r7,pc
800074ce:	00 00       	add	r0,r0
800074d0:	00 00       	add	r0,r0
800074d2:	0b 20       	ld.uh	r0,r5++
800074d4:	80 00       	ld.sh	r0,r0[0x0]
800074d6:	4f 88       	lddpc	r8,800076b4 <udc_req_std_dev_get_str_desc+0x94>
800074d8:	00 00       	add	r0,r0
800074da:	07 c8       	ld.ub	r8,r3[0x4]
800074dc:	80 00       	ld.sh	r0,r0[0x0]
800074de:	4b 70       	lddpc	r0,800075b8 <udc_req_std_ep_set_feature+0x30>

800074e0 <udc_req_std_dev_clear_feature>:
 * \brief Standard device request to change device status
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
800074e0:	eb cd 40 80 	pushm	r7,lr
800074e4:	1a 97       	mov	r7,sp
	if (udd_g_ctrlreq.req.wLength) {
800074e6:	48 d8       	lddpc	r8,80007518 <udc_req_std_dev_clear_feature+0x38>
800074e8:	90 38       	ld.sh	r8,r8[0x6]
800074ea:	58 08       	cp.w	r8,0
800074ec:	c0 30       	breq	800074f2 <udc_req_std_dev_clear_feature+0x12>
		return false;
800074ee:	30 08       	mov	r8,0
800074f0:	c1 08       	rjmp	80007510 <udc_req_std_dev_clear_feature+0x30>
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
800074f2:	48 a8       	lddpc	r8,80007518 <udc_req_std_dev_clear_feature+0x38>
800074f4:	90 19       	ld.sh	r9,r8[0x2]
800074f6:	30 18       	mov	r8,1
800074f8:	f0 09 19 00 	cp.h	r9,r8
800074fc:	c0 91       	brne	8000750e <udc_req_std_dev_clear_feature+0x2e>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
800074fe:	48 88       	lddpc	r8,8000751c <udc_req_std_dev_clear_feature+0x3c>
80007500:	90 08       	ld.sh	r8,r8[0x0]
80007502:	a9 d8       	cbr	r8,0x9
80007504:	5c 88       	casts.h	r8
80007506:	48 69       	lddpc	r9,8000751c <udc_req_std_dev_clear_feature+0x3c>
80007508:	b2 08       	st.h	r9[0x0],r8
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
#endif
		return true;
8000750a:	30 18       	mov	r8,1
8000750c:	c0 28       	rjmp	80007510 <udc_req_std_dev_clear_feature+0x30>
	}
	return false;
8000750e:	30 08       	mov	r8,0
}
80007510:	10 9c       	mov	r12,r8
80007512:	e3 cd 80 80 	ldm	sp++,r7,pc
80007516:	00 00       	add	r0,r0
80007518:	00 00       	add	r0,r0
8000751a:	0b 20       	ld.uh	r0,r5++
8000751c:	00 00       	add	r0,r0
8000751e:	07 b4       	ld.ub	r4,r3[0x3]

80007520 <udc_req_std_ep_clear_feature>:
 * \brief Standard endpoint request to clear endpoint feature
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
80007520:	eb cd 40 80 	pushm	r7,lr
80007524:	1a 97       	mov	r7,sp
	if (udd_g_ctrlreq.req.wLength) {
80007526:	48 c8       	lddpc	r8,80007554 <udc_req_std_ep_clear_feature+0x34>
80007528:	90 38       	ld.sh	r8,r8[0x6]
8000752a:	58 08       	cp.w	r8,0
8000752c:	c0 30       	breq	80007532 <udc_req_std_ep_clear_feature+0x12>
		return false;
8000752e:	30 08       	mov	r8,0
80007530:	c0 e8       	rjmp	8000754c <udc_req_std_ep_clear_feature+0x2c>
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
80007532:	48 98       	lddpc	r8,80007554 <udc_req_std_ep_clear_feature+0x34>
80007534:	90 18       	ld.sh	r8,r8[0x2]
80007536:	58 08       	cp.w	r8,0
80007538:	c0 91       	brne	8000754a <udc_req_std_ep_clear_feature+0x2a>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
8000753a:	48 78       	lddpc	r8,80007554 <udc_req_std_ep_clear_feature+0x34>
8000753c:	90 28       	ld.sh	r8,r8[0x4]
8000753e:	5c 58       	castu.b	r8
80007540:	10 9c       	mov	r12,r8
80007542:	f0 1f 00 06 	mcall	80007558 <udc_req_std_ep_clear_feature+0x38>
80007546:	18 98       	mov	r8,r12
80007548:	c0 28       	rjmp	8000754c <udc_req_std_ep_clear_feature+0x2c>
	}
	return false;
8000754a:	30 08       	mov	r8,0
}
8000754c:	10 9c       	mov	r12,r8
8000754e:	e3 cd 80 80 	ldm	sp++,r7,pc
80007552:	00 00       	add	r0,r0
80007554:	00 00       	add	r0,r0
80007556:	0b 20       	ld.uh	r0,r5++
80007558:	80 00       	ld.sh	r0,r0[0x0]
8000755a:	50 cc       	stdsp	sp[0x30],r12

8000755c <udc_req_std_dev_set_feature>:
 * \brief Standard device request to set a feature
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_feature(void)
{
8000755c:	eb cd 40 80 	pushm	r7,lr
80007560:	1a 97       	mov	r7,sp
	if (udd_g_ctrlreq.req.wLength) {
80007562:	48 98       	lddpc	r8,80007584 <udc_req_std_dev_set_feature+0x28>
80007564:	90 38       	ld.sh	r8,r8[0x6]
80007566:	58 08       	cp.w	r8,0
80007568:	c0 30       	breq	8000756e <udc_req_std_dev_set_feature+0x12>
		return false;
8000756a:	30 08       	mov	r8,0
8000756c:	c0 98       	rjmp	8000757e <udc_req_std_dev_set_feature+0x22>
	}

	switch (udd_g_ctrlreq.req.wValue) {
8000756e:	48 68       	lddpc	r8,80007584 <udc_req_std_dev_set_feature+0x28>
80007570:	90 18       	ld.sh	r8,r8[0x2]
80007572:	5c 78       	castu.h	r8
80007574:	58 18       	cp.w	r8,1
80007576:	c0 31       	brne	8000757c <udc_req_std_dev_set_feature+0x20>
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		udc_device_status |= CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP);
		UDC_REMOTEWAKEUP_ENABLE();
		return true;
#else
		return false;
80007578:	30 08       	mov	r8,0
8000757a:	c0 28       	rjmp	8000757e <udc_req_std_dev_set_feature+0x22>
		break;
#endif
	default:
		break;
	}
	return false;
8000757c:	30 08       	mov	r8,0
}
8000757e:	10 9c       	mov	r12,r8
80007580:	e3 cd 80 80 	ldm	sp++,r7,pc
80007584:	00 00       	add	r0,r0
80007586:	0b 20       	ld.uh	r0,r5++

80007588 <udc_req_std_ep_set_feature>:
 *
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
80007588:	eb cd 40 80 	pushm	r7,lr
8000758c:	1a 97       	mov	r7,sp
	if (udd_g_ctrlreq.req.wLength) {
8000758e:	48 f8       	lddpc	r8,800075c8 <udc_req_std_ep_set_feature+0x40>
80007590:	90 38       	ld.sh	r8,r8[0x6]
80007592:	58 08       	cp.w	r8,0
80007594:	c0 30       	breq	8000759a <udc_req_std_ep_set_feature+0x12>
		return false;
80007596:	30 08       	mov	r8,0
80007598:	c1 48       	rjmp	800075c0 <udc_req_std_ep_set_feature+0x38>
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
8000759a:	48 c8       	lddpc	r8,800075c8 <udc_req_std_ep_set_feature+0x40>
8000759c:	90 18       	ld.sh	r8,r8[0x2]
8000759e:	58 08       	cp.w	r8,0
800075a0:	c0 f1       	brne	800075be <udc_req_std_ep_set_feature+0x36>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
800075a2:	48 a8       	lddpc	r8,800075c8 <udc_req_std_ep_set_feature+0x40>
800075a4:	90 28       	ld.sh	r8,r8[0x4]
800075a6:	5c 58       	castu.b	r8
800075a8:	10 9c       	mov	r12,r8
800075aa:	f0 1f 00 09 	mcall	800075cc <udc_req_std_ep_set_feature+0x44>
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
800075ae:	48 78       	lddpc	r8,800075c8 <udc_req_std_ep_set_feature+0x40>
800075b0:	90 28       	ld.sh	r8,r8[0x4]
800075b2:	5c 58       	castu.b	r8
800075b4:	10 9c       	mov	r12,r8
800075b6:	f0 1f 00 07 	mcall	800075d0 <udc_req_std_ep_set_feature+0x48>
800075ba:	18 98       	mov	r8,r12
800075bc:	c0 28       	rjmp	800075c0 <udc_req_std_ep_set_feature+0x38>
	}
	return false;
800075be:	30 08       	mov	r8,0
}
800075c0:	10 9c       	mov	r12,r8
800075c2:	e3 cd 80 80 	ldm	sp++,r7,pc
800075c6:	00 00       	add	r0,r0
800075c8:	00 00       	add	r0,r0
800075ca:	0b 20       	ld.uh	r0,r5++
800075cc:	80 00       	ld.sh	r0,r0[0x0]
800075ce:	53 30       	stdsp	sp[0xcc],r0
800075d0:	80 00       	ld.sh	r0,r0[0x0]
800075d2:	4f b8       	lddpc	r8,800077bc <udc_req_std_dev_get_descriptor+0xec>

800075d4 <udc_valid_address>:
/**
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
800075d4:	eb cd 40 80 	pushm	r7,lr
800075d8:	1a 97       	mov	r7,sp
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
800075da:	48 68       	lddpc	r8,800075f0 <udc_valid_address+0x1c>
800075dc:	90 18       	ld.sh	r8,r8[0x2]
800075de:	5c 58       	castu.b	r8
800075e0:	f1 d8 c0 07 	bfextu	r8,r8,0x0,0x7
800075e4:	10 9c       	mov	r12,r8
800075e6:	f0 1f 00 04 	mcall	800075f4 <udc_valid_address+0x20>
}
800075ea:	e3 cd 80 80 	ldm	sp++,r7,pc
800075ee:	00 00       	add	r0,r0
800075f0:	00 00       	add	r0,r0
800075f2:	0b 20       	ld.uh	r0,r5++
800075f4:	80 00       	ld.sh	r0,r0[0x0]
800075f6:	4a d6       	lddpc	r6,800076a8 <udc_req_std_dev_get_str_desc+0x88>

800075f8 <udc_req_std_dev_set_address>:
 * \brief Standard device request to set device address
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
800075f8:	eb cd 40 80 	pushm	r7,lr
800075fc:	1a 97       	mov	r7,sp
	if (udd_g_ctrlreq.req.wLength) {
800075fe:	48 78       	lddpc	r8,80007618 <udc_req_std_dev_set_address+0x20>
80007600:	90 38       	ld.sh	r8,r8[0x6]
80007602:	58 08       	cp.w	r8,0
80007604:	c0 30       	breq	8000760a <udc_req_std_dev_set_address+0x12>
		return false;
80007606:	30 08       	mov	r8,0
80007608:	c0 58       	rjmp	80007612 <udc_req_std_dev_set_address+0x1a>
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
8000760a:	48 48       	lddpc	r8,80007618 <udc_req_std_dev_set_address+0x20>
8000760c:	48 49       	lddpc	r9,8000761c <udc_req_std_dev_set_address+0x24>
8000760e:	91 49       	st.w	r8[0x10],r9
	return true;
80007610:	30 18       	mov	r8,1
}
80007612:	10 9c       	mov	r12,r8
80007614:	e3 cd 80 80 	ldm	sp++,r7,pc
80007618:	00 00       	add	r0,r0
8000761a:	0b 20       	ld.uh	r0,r5++
8000761c:	80 00       	ld.sh	r0,r0[0x0]
8000761e:	75 d4       	ld.w	r4,r10[0x74]

80007620 <udc_req_std_dev_get_str_desc>:
 * \brief Standard device request to get device string descriptor
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_str_desc(void)
{
80007620:	eb cd 40 80 	pushm	r7,lr
80007624:	1a 97       	mov	r7,sp
80007626:	20 3d       	sub	sp,12
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;
80007628:	30 08       	mov	r8,0
8000762a:	ef 68 ff ff 	st.b	r7[-1],r8

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
8000762e:	4a 58       	lddpc	r8,800076c0 <udc_req_std_dev_get_str_desc+0xa0>
80007630:	90 18       	ld.sh	r8,r8[0x2]
80007632:	5c 78       	castu.h	r8
80007634:	f1 d8 c0 08 	bfextu	r8,r8,0x0,0x8
80007638:	c0 c1       	brne	80007650 <udc_req_std_dev_get_str_desc+0x30>
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
8000763a:	30 4b       	mov	r11,4
8000763c:	4a 2c       	lddpc	r12,800076c4 <udc_req_std_dev_get_str_desc+0xa4>
8000763e:	f0 1f 00 23 	mcall	800076c8 <udc_req_std_dev_get_str_desc+0xa8>
		}
#endif
		return false;
	}

	if (str_length) {
80007642:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80007646:	30 08       	mov	r8,0
80007648:	f0 09 18 00 	cp.b	r9,r8
8000764c:	c0 41       	brne	80007654 <udc_req_std_dev_get_str_desc+0x34>
8000764e:	c3 38       	rjmp	800076b4 <udc_req_std_dev_get_str_desc+0x94>
#ifdef UDC_GET_EXTRA_STRING
		if (UDC_GET_EXTRA_STRING()) {
			break;
		}
#endif
		return false;
80007650:	30 08       	mov	r8,0
80007652:	c3 28       	rjmp	800076b6 <udc_req_std_dev_get_str_desc+0x96>
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
80007654:	30 08       	mov	r8,0
80007656:	ef 68 ff f7 	st.b	r7[-9],r8
8000765a:	c1 88       	rjmp	8000768a <udc_req_std_dev_get_str_desc+0x6a>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
8000765c:	ef 3b ff f7 	ld.ub	r11,r7[-9]
80007660:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80007664:	ee f9 ff f8 	ld.w	r9,r7[-8]
80007668:	f2 08 00 08 	add	r8,r9,r8
8000766c:	11 88       	ld.ub	r8,r8[0x0]
8000766e:	5c c8       	swap.bh	r8
80007670:	5c 88       	casts.h	r8
80007672:	10 99       	mov	r9,r8
80007674:	49 6a       	lddpc	r10,800076cc <udc_req_std_dev_get_str_desc+0xac>
80007676:	f6 08 15 01 	lsl	r8,r11,0x1
8000767a:	f4 08 00 08 	add	r8,r10,r8
8000767e:	b0 19       	st.h	r8[0x2],r9
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
80007680:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80007684:	2f f8       	sub	r8,-1
80007686:	ef 68 ff f7 	st.b	r7[-9],r8
8000768a:	ef 39 ff f7 	ld.ub	r9,r7[-9]
8000768e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80007692:	f0 09 18 00 	cp.b	r9,r8
80007696:	ce 33       	brcs	8000765c <udc_req_std_dev_get_str_desc+0x3c>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
80007698:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000769c:	2f f8       	sub	r8,-1
8000769e:	5c 58       	castu.b	r8
800076a0:	a1 78       	lsl	r8,0x1
800076a2:	5c 58       	castu.b	r8
800076a4:	48 a9       	lddpc	r9,800076cc <udc_req_std_dev_get_str_desc+0xac>
800076a6:	b2 88       	st.b	r9[0x0],r8
		udd_set_setup_payload(
			(uint8_t *) &udc_string_desc,
			udc_string_desc.header.bLength);
800076a8:	48 98       	lddpc	r8,800076cc <udc_req_std_dev_get_str_desc+0xac>
800076aa:	11 88       	ld.ub	r8,r8[0x0]
		for(i = 0; i < str_length; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
		udd_set_setup_payload(
800076ac:	10 9b       	mov	r11,r8
800076ae:	48 8c       	lddpc	r12,800076cc <udc_req_std_dev_get_str_desc+0xac>
800076b0:	f0 1f 00 06 	mcall	800076c8 <udc_req_std_dev_get_str_desc+0xa8>
			(uint8_t *) &udc_string_desc,
			udc_string_desc.header.bLength);
	}

	return true;
800076b4:	30 18       	mov	r8,1
}
800076b6:	10 9c       	mov	r12,r8
800076b8:	2f dd       	sub	sp,-12
800076ba:	e3 cd 80 80 	ldm	sp++,r7,pc
800076be:	00 00       	add	r0,r0
800076c0:	00 00       	add	r0,r0
800076c2:	0b 20       	ld.uh	r0,r5++
800076c4:	00 00       	add	r0,r0
800076c6:	00 34       	cp.w	r4,r0
800076c8:	80 00       	ld.sh	r0,r0[0x0]
800076ca:	4b 70       	lddpc	r0,800077a4 <udc_req_std_dev_get_descriptor+0xd4>
800076cc:	00 00       	add	r0,r0
800076ce:	00 38       	cp.w	r8,r0

800076d0 <udc_req_std_dev_get_descriptor>:
 * \brief Standard device request to get descriptors about USB device
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_descriptor(void)
{
800076d0:	eb cd 40 80 	pushm	r7,lr
800076d4:	1a 97       	mov	r7,sp
800076d6:	20 1d       	sub	sp,4
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
800076d8:	4c 18       	lddpc	r8,800077dc <udc_req_std_dev_get_descriptor+0x10c>
800076da:	90 18       	ld.sh	r8,r8[0x2]
800076dc:	ef 68 ff ff 	st.b	r7[-1],r8

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
800076e0:	4b f8       	lddpc	r8,800077dc <udc_req_std_dev_get_descriptor+0x10c>
800076e2:	90 18       	ld.sh	r8,r8[0x2]
800076e4:	5c 78       	castu.h	r8
800076e6:	a9 88       	lsr	r8,0x8
800076e8:	5c 88       	casts.h	r8
800076ea:	5c 58       	castu.b	r8
800076ec:	58 28       	cp.w	r8,2
800076ee:	c1 60       	breq	8000771a <udc_req_std_dev_get_descriptor+0x4a>
800076f0:	e0 89 00 05 	brgt	800076fa <udc_req_std_dev_get_descriptor+0x2a>
800076f4:	58 18       	cp.w	r8,1
800076f6:	c0 70       	breq	80007704 <udc_req_std_dev_get_descriptor+0x34>
800076f8:	c5 f8       	rjmp	800077b6 <udc_req_std_dev_get_descriptor+0xe6>
800076fa:	58 38       	cp.w	r8,3
800076fc:	c5 40       	breq	800077a4 <udc_req_std_dev_get_descriptor+0xd4>
800076fe:	58 f8       	cp.w	r8,15
80007700:	c3 c0       	breq	80007778 <udc_req_std_dev_get_descriptor+0xa8>
80007702:	c5 a8       	rjmp	800077b6 <udc_req_std_dev_get_descriptor+0xe6>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
80007704:	4b 78       	lddpc	r8,800077e0 <udc_req_std_dev_get_descriptor+0x110>
80007706:	70 08       	ld.w	r8,r8[0x0]
80007708:	11 88       	ld.ub	r8,r8[0x0]
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
8000770a:	10 99       	mov	r9,r8
8000770c:	4b 58       	lddpc	r8,800077e0 <udc_req_std_dev_get_descriptor+0x110>
8000770e:	70 08       	ld.w	r8,r8[0x0]
80007710:	12 9b       	mov	r11,r9
80007712:	10 9c       	mov	r12,r8
80007714:	f0 1f 00 34 	mcall	800077e4 <udc_req_std_dev_get_descriptor+0x114>
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
		}
		break;
80007718:	c5 28       	rjmp	800077bc <udc_req_std_dev_get_descriptor+0xec>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
8000771a:	4b 28       	lddpc	r8,800077e0 <udc_req_std_dev_get_descriptor+0x110>
8000771c:	70 08       	ld.w	r8,r8[0x0]
8000771e:	f1 38 00 11 	ld.ub	r8,r8[17]
80007722:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80007726:	f0 09 18 00 	cp.b	r9,r8
8000772a:	c0 33       	brcs	80007730 <udc_req_std_dev_get_descriptor+0x60>
					bNumConfigurations) {
				return false;
8000772c:	30 08       	mov	r8,0
8000772e:	c5 38       	rjmp	800077d4 <udc_req_std_dev_get_descriptor+0x104>
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
80007730:	4a c8       	lddpc	r8,800077e0 <udc_req_std_dev_get_descriptor+0x110>
80007732:	70 19       	ld.w	r9,r8[0x4]
80007734:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80007738:	a3 78       	lsl	r8,0x3
8000773a:	f2 08 00 08 	add	r8,r9,r8
8000773e:	70 08       	ld.w	r8,r8[0x0]
80007740:	11 a9       	ld.ub	r9,r8[0x2]
80007742:	a9 69       	lsl	r9,0x8
80007744:	11 b8       	ld.ub	r8,r8[0x3]
80007746:	12 48       	or	r8,r9
80007748:	5c 88       	casts.h	r8
8000774a:	5c 88       	casts.h	r8
8000774c:	5c c8       	swap.bh	r8
8000774e:	5c 88       	casts.h	r8
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
80007750:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
80007754:	4a 38       	lddpc	r8,800077e0 <udc_req_std_dev_get_descriptor+0x110>
80007756:	70 1a       	ld.w	r10,r8[0x4]
80007758:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000775c:	a3 78       	lsl	r8,0x3
8000775e:	f4 08 00 08 	add	r8,r10,r8
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
80007762:	70 08       	ld.w	r8,r8[0x0]
80007764:	12 9b       	mov	r11,r9
80007766:	10 9c       	mov	r12,r8
80007768:	f0 1f 00 1f 	mcall	800077e4 <udc_req_std_dev_get_descriptor+0x114>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
8000776c:	49 c8       	lddpc	r8,800077dc <udc_req_std_dev_get_descriptor+0x10c>
8000776e:	70 28       	ld.w	r8,r8[0x8]
80007770:	10 99       	mov	r9,r8
80007772:	30 28       	mov	r8,2
80007774:	b2 98       	st.b	r9[0x1],r8
				USB_DT_CONFIGURATION;
		break;
80007776:	c2 38       	rjmp	800077bc <udc_req_std_dev_get_descriptor+0xec>
		break;
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
80007778:	49 a8       	lddpc	r8,800077e0 <udc_req_std_dev_get_descriptor+0x110>
8000777a:	70 28       	ld.w	r8,r8[0x8]
8000777c:	58 08       	cp.w	r8,0
8000777e:	c0 31       	brne	80007784 <udc_req_std_dev_get_descriptor+0xb4>
			return false;
80007780:	30 08       	mov	r8,0
80007782:	c2 98       	rjmp	800077d4 <udc_req_std_dev_get_descriptor+0x104>
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
				udc_config.conf_bos->wTotalLength);
80007784:	49 78       	lddpc	r8,800077e0 <udc_req_std_dev_get_descriptor+0x110>
80007786:	70 28       	ld.w	r8,r8[0x8]
80007788:	11 a9       	ld.ub	r9,r8[0x2]
8000778a:	a9 69       	lsl	r9,0x8
8000778c:	11 b8       	ld.ub	r8,r8[0x3]
8000778e:	12 48       	or	r8,r9
80007790:	5c 88       	casts.h	r8
	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
			return false;
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
80007792:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
80007796:	49 38       	lddpc	r8,800077e0 <udc_req_std_dev_get_descriptor+0x110>
80007798:	70 28       	ld.w	r8,r8[0x8]
8000779a:	12 9b       	mov	r11,r9
8000779c:	10 9c       	mov	r12,r8
8000779e:	f0 1f 00 12 	mcall	800077e4 <udc_req_std_dev_get_descriptor+0x114>
				udc_config.conf_bos->wTotalLength);
		break;
800077a2:	c0 d8       	rjmp	800077bc <udc_req_std_dev_get_descriptor+0xec>

	case USB_DT_STRING:
		// String descriptor requested
		if (!udc_req_std_dev_get_str_desc()) {
800077a4:	f0 1f 00 11 	mcall	800077e8 <udc_req_std_dev_get_descriptor+0x118>
800077a8:	18 98       	mov	r8,r12
800077aa:	ec 18 00 01 	eorl	r8,0x1
800077ae:	5c 58       	castu.b	r8
800077b0:	c0 50       	breq	800077ba <udc_req_std_dev_get_descriptor+0xea>
			return false;
800077b2:	30 08       	mov	r8,0
800077b4:	c1 08       	rjmp	800077d4 <udc_req_std_dev_get_descriptor+0x104>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
800077b6:	30 08       	mov	r8,0
800077b8:	c0 e8       	rjmp	800077d4 <udc_req_std_dev_get_descriptor+0x104>
	case USB_DT_STRING:
		// String descriptor requested
		if (!udc_req_std_dev_get_str_desc()) {
			return false;
		}
		break;
800077ba:	d7 03       	nop
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
800077bc:	48 88       	lddpc	r8,800077dc <udc_req_std_dev_get_descriptor+0x10c>
800077be:	90 39       	ld.sh	r9,r8[0x6]
800077c0:	48 78       	lddpc	r8,800077dc <udc_req_std_dev_get_descriptor+0x10c>
800077c2:	90 68       	ld.sh	r8,r8[0xc]
800077c4:	f0 09 19 00 	cp.h	r9,r8
800077c8:	c0 52       	brcc	800077d2 <udc_req_std_dev_get_descriptor+0x102>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
800077ca:	48 58       	lddpc	r8,800077dc <udc_req_std_dev_get_descriptor+0x10c>
800077cc:	90 38       	ld.sh	r8,r8[0x6]
800077ce:	48 49       	lddpc	r9,800077dc <udc_req_std_dev_get_descriptor+0x10c>
800077d0:	b2 68       	st.h	r9[0xc],r8
	}
	return true;
800077d2:	30 18       	mov	r8,1
}
800077d4:	10 9c       	mov	r12,r8
800077d6:	2f fd       	sub	sp,-4
800077d8:	e3 cd 80 80 	ldm	sp++,r7,pc
800077dc:	00 00       	add	r0,r0
800077de:	0b 20       	ld.uh	r0,r5++
800077e0:	00 00       	add	r0,r0
800077e2:	00 a4       	st.w	r0++,r4
800077e4:	80 00       	ld.sh	r0,r0[0x0]
800077e6:	4b 70       	lddpc	r0,800078c0 <udc_req_std_dev_set_configuration+0xa0>
800077e8:	80 00       	ld.sh	r0,r0[0x0]
800077ea:	76 20       	ld.w	r0,r11[0x8]

800077ec <udc_req_std_dev_get_configuration>:
 * \brief Standard device request to get configuration number
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
800077ec:	eb cd 40 80 	pushm	r7,lr
800077f0:	1a 97       	mov	r7,sp
	if (udd_g_ctrlreq.req.wLength != 1) {
800077f2:	48 98       	lddpc	r8,80007814 <udc_req_std_dev_get_configuration+0x28>
800077f4:	90 39       	ld.sh	r9,r8[0x6]
800077f6:	30 18       	mov	r8,1
800077f8:	f0 09 19 00 	cp.h	r9,r8
800077fc:	c0 30       	breq	80007802 <udc_req_std_dev_get_configuration+0x16>
		return false;
800077fe:	30 08       	mov	r8,0
80007800:	c0 68       	rjmp	8000780c <udc_req_std_dev_get_configuration+0x20>
	}

	udd_set_setup_payload(&udc_num_configuration,1);
80007802:	30 1b       	mov	r11,1
80007804:	48 5c       	lddpc	r12,80007818 <udc_req_std_dev_get_configuration+0x2c>
80007806:	f0 1f 00 06 	mcall	8000781c <udc_req_std_dev_get_configuration+0x30>
	return true;
8000780a:	30 18       	mov	r8,1
}
8000780c:	10 9c       	mov	r12,r8
8000780e:	e3 cd 80 80 	ldm	sp++,r7,pc
80007812:	00 00       	add	r0,r0
80007814:	00 00       	add	r0,r0
80007816:	0b 20       	ld.uh	r0,r5++
80007818:	00 00       	add	r0,r0
8000781a:	07 bc       	ld.ub	r12,r3[0x3]
8000781c:	80 00       	ld.sh	r0,r0[0x0]
8000781e:	4b 70       	lddpc	r0,800078f8 <udc_req_std_iface_get_setting+0x8>

80007820 <udc_req_std_dev_set_configuration>:
 * \brief Standard device request to enable a configuration
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_configuration(void)
{
80007820:	eb cd 40 80 	pushm	r7,lr
80007824:	1a 97       	mov	r7,sp
80007826:	20 1d       	sub	sp,4
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
80007828:	4a b8       	lddpc	r8,800078d4 <udc_req_std_dev_set_configuration+0xb4>
8000782a:	90 38       	ld.sh	r8,r8[0x6]
8000782c:	58 08       	cp.w	r8,0
8000782e:	c0 30       	breq	80007834 <udc_req_std_dev_set_configuration+0x14>
		return false;
80007830:	30 08       	mov	r8,0
80007832:	c4 c8       	rjmp	800078ca <udc_req_std_dev_set_configuration+0xaa>
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
80007834:	f0 1f 00 29 	mcall	800078d8 <udc_req_std_dev_set_configuration+0xb8>
80007838:	18 98       	mov	r8,r12
8000783a:	58 08       	cp.w	r8,0
8000783c:	c0 31       	brne	80007842 <udc_req_std_dev_set_configuration+0x22>
		return false;
8000783e:	30 08       	mov	r8,0
80007840:	c4 58       	rjmp	800078ca <udc_req_std_dev_set_configuration+0xaa>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
80007842:	4a 58       	lddpc	r8,800078d4 <udc_req_std_dev_set_configuration+0xb4>
80007844:	90 18       	ld.sh	r8,r8[0x2]
80007846:	5c 78       	castu.h	r8
80007848:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
				udc_config.confdev_lsfs->bNumConfigurations) {
8000784c:	4a 48       	lddpc	r8,800078dc <udc_req_std_dev_set_configuration+0xbc>
8000784e:	70 08       	ld.w	r8,r8[0x0]
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
80007850:	f1 38 00 11 	ld.ub	r8,r8[17]
80007854:	10 39       	cp.w	r9,r8
80007856:	e0 8a 00 04 	brle	8000785e <udc_req_std_dev_set_configuration+0x3e>
				udc_config.confdev_lsfs->bNumConfigurations) {
			return false;
8000785a:	30 08       	mov	r8,0
8000785c:	c3 78       	rjmp	800078ca <udc_req_std_dev_set_configuration+0xaa>
		}
	}

	// Reset current configuration
	udc_reset();
8000785e:	f0 1f 00 21 	mcall	800078e0 <udc_req_std_dev_set_configuration+0xc0>

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
80007862:	49 d8       	lddpc	r8,800078d4 <udc_req_std_dev_set_configuration+0xb4>
80007864:	90 18       	ld.sh	r8,r8[0x2]
80007866:	5c 58       	castu.b	r8
80007868:	49 f9       	lddpc	r9,800078e4 <udc_req_std_dev_set_configuration+0xc4>
8000786a:	b2 88       	st.b	r9[0x0],r8
	if (udc_num_configuration == 0) {
8000786c:	49 e8       	lddpc	r8,800078e4 <udc_req_std_dev_set_configuration+0xc4>
8000786e:	11 88       	ld.ub	r8,r8[0x0]
80007870:	58 08       	cp.w	r8,0
80007872:	c0 31       	brne	80007878 <udc_req_std_dev_set_configuration+0x58>
		return true; // Default empty configuration requested
80007874:	30 18       	mov	r8,1
80007876:	c2 a8       	rjmp	800078ca <udc_req_std_dev_set_configuration+0xaa>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
80007878:	49 98       	lddpc	r8,800078dc <udc_req_std_dev_set_configuration+0xbc>
8000787a:	70 19       	ld.w	r9,r8[0x4]
8000787c:	49 a8       	lddpc	r8,800078e4 <udc_req_std_dev_set_configuration+0xc4>
8000787e:	11 88       	ld.ub	r8,r8[0x0]
80007880:	20 18       	sub	r8,1
80007882:	a3 78       	lsl	r8,0x3
80007884:	10 09       	add	r9,r8
80007886:	49 98       	lddpc	r8,800078e8 <udc_req_std_dev_set_configuration+0xc8>
80007888:	91 09       	st.w	r8[0x0],r9
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
8000788a:	30 08       	mov	r8,0
8000788c:	ef 68 ff ff 	st.b	r7[-1],r8
80007890:	c1 38       	rjmp	800078b6 <udc_req_std_dev_set_configuration+0x96>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
80007892:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80007896:	30 0b       	mov	r11,0
80007898:	10 9c       	mov	r12,r8
8000789a:	f0 1f 00 15 	mcall	800078ec <udc_req_std_dev_set_configuration+0xcc>
8000789e:	18 98       	mov	r8,r12
800078a0:	ec 18 00 01 	eorl	r8,0x1
800078a4:	5c 58       	castu.b	r8
800078a6:	c0 30       	breq	800078ac <udc_req_std_dev_set_configuration+0x8c>
			return false;
800078a8:	30 08       	mov	r8,0
800078aa:	c1 08       	rjmp	800078ca <udc_req_std_dev_set_configuration+0xaa>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
800078ac:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800078b0:	2f f8       	sub	r8,-1
800078b2:	ef 68 ff ff 	st.b	r7[-1],r8
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
800078b6:	48 d8       	lddpc	r8,800078e8 <udc_req_std_dev_set_configuration+0xc8>
800078b8:	70 08       	ld.w	r8,r8[0x0]
800078ba:	70 08       	ld.w	r8,r8[0x0]
800078bc:	11 c8       	ld.ub	r8,r8[0x4]
800078be:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800078c2:	f0 09 18 00 	cp.b	r9,r8
800078c6:	ce 63       	brcs	80007892 <udc_req_std_dev_set_configuration+0x72>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
			return false;
		}
	}
	return true;
800078c8:	30 18       	mov	r8,1
}
800078ca:	10 9c       	mov	r12,r8
800078cc:	2f fd       	sub	sp,-4
800078ce:	e3 cd 80 80 	ldm	sp++,r7,pc
800078d2:	00 00       	add	r0,r0
800078d4:	00 00       	add	r0,r0
800078d6:	0b 20       	ld.uh	r0,r5++
800078d8:	80 00       	ld.sh	r0,r0[0x0]
800078da:	4b 24       	lddpc	r4,800079a0 <udc_req_std_iface_set_setting+0x4>
800078dc:	00 00       	add	r0,r0
800078de:	00 a4       	st.w	r0++,r4
800078e0:	80 00       	ld.sh	r0,r0[0x0]
800078e2:	73 80       	ld.w	r0,r9[0x60]
800078e4:	00 00       	add	r0,r0
800078e6:	07 bc       	ld.ub	r12,r3[0x3]
800078e8:	00 00       	add	r0,r0
800078ea:	07 c0       	ld.ub	r0,r3[0x4]
800078ec:	80 00       	ld.sh	r0,r0[0x0]
800078ee:	72 a4       	ld.w	r4,r9[0x28]

800078f0 <udc_req_std_iface_get_setting>:
 * to get the alternate setting number of an interface
 *
 * \return true if success
 */
static bool udc_req_std_iface_get_setting(void)
{
800078f0:	eb cd 40 80 	pushm	r7,lr
800078f4:	1a 97       	mov	r7,sp
800078f6:	20 2d       	sub	sp,8
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
800078f8:	4a 38       	lddpc	r8,80007984 <udc_req_std_iface_get_setting+0x94>
800078fa:	90 39       	ld.sh	r9,r8[0x6]
800078fc:	30 18       	mov	r8,1
800078fe:	f0 09 19 00 	cp.h	r9,r8
80007902:	c0 30       	breq	80007908 <udc_req_std_iface_get_setting+0x18>
		return false; // Error in request
80007904:	30 08       	mov	r8,0
80007906:	c3 a8       	rjmp	8000797a <udc_req_std_iface_get_setting+0x8a>
	}
	if (!udc_num_configuration) {
80007908:	4a 08       	lddpc	r8,80007988 <udc_req_std_iface_get_setting+0x98>
8000790a:	11 88       	ld.ub	r8,r8[0x0]
8000790c:	58 08       	cp.w	r8,0
8000790e:	c0 31       	brne	80007914 <udc_req_std_iface_get_setting+0x24>
		return false; // The device is not is configured state yet
80007910:	30 08       	mov	r8,0
80007912:	c3 48       	rjmp	8000797a <udc_req_std_iface_get_setting+0x8a>
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
80007914:	49 c8       	lddpc	r8,80007984 <udc_req_std_iface_get_setting+0x94>
80007916:	90 28       	ld.sh	r8,r8[0x4]
80007918:	ef 68 ff fb 	st.b	r7[-5],r8
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
8000791c:	49 c8       	lddpc	r8,8000798c <udc_req_std_iface_get_setting+0x9c>
8000791e:	70 08       	ld.w	r8,r8[0x0]
80007920:	70 08       	ld.w	r8,r8[0x0]
80007922:	11 c8       	ld.ub	r8,r8[0x4]
80007924:	ef 39 ff fb 	ld.ub	r9,r7[-5]
80007928:	f0 09 18 00 	cp.b	r9,r8
8000792c:	c0 33       	brcs	80007932 <udc_req_std_iface_get_setting+0x42>
		return false;
8000792e:	30 08       	mov	r8,0
80007930:	c2 58       	rjmp	8000797a <udc_req_std_iface_get_setting+0x8a>
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
80007932:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80007936:	30 0b       	mov	r11,0
80007938:	10 9c       	mov	r12,r8
8000793a:	f0 1f 00 16 	mcall	80007990 <udc_req_std_iface_get_setting+0xa0>
8000793e:	18 98       	mov	r8,r12
80007940:	ec 18 00 01 	eorl	r8,0x1
80007944:	5c 58       	castu.b	r8
80007946:	c0 30       	breq	8000794c <udc_req_std_iface_get_setting+0x5c>
		return false;
80007948:	30 08       	mov	r8,0
8000794a:	c1 88       	rjmp	8000797a <udc_req_std_iface_get_setting+0x8a>
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
8000794c:	49 08       	lddpc	r8,8000798c <udc_req_std_iface_get_setting+0x9c>
8000794e:	70 08       	ld.w	r8,r8[0x0]
80007950:	70 19       	ld.w	r9,r8[0x4]
80007952:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80007956:	a3 68       	lsl	r8,0x2
80007958:	f2 08 00 08 	add	r8,r9,r8
8000795c:	70 08       	ld.w	r8,r8[0x0]
8000795e:	ef 48 ff fc 	st.w	r7[-4],r8
	udc_iface_setting = udi_api->getsetting();
80007962:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007966:	70 38       	ld.w	r8,r8[0xc]
80007968:	5d 18       	icall	r8
8000796a:	18 98       	mov	r8,r12
8000796c:	48 a9       	lddpc	r9,80007994 <udc_req_std_iface_get_setting+0xa4>
8000796e:	b2 88       	st.b	r9[0x0],r8

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
80007970:	30 1b       	mov	r11,1
80007972:	48 9c       	lddpc	r12,80007994 <udc_req_std_iface_get_setting+0xa4>
80007974:	f0 1f 00 09 	mcall	80007998 <udc_req_std_iface_get_setting+0xa8>
	return true;
80007978:	30 18       	mov	r8,1
}
8000797a:	10 9c       	mov	r12,r8
8000797c:	2f ed       	sub	sp,-8
8000797e:	e3 cd 80 80 	ldm	sp++,r7,pc
80007982:	00 00       	add	r0,r0
80007984:	00 00       	add	r0,r0
80007986:	0b 20       	ld.uh	r0,r5++
80007988:	00 00       	add	r0,r0
8000798a:	07 bc       	ld.ub	r12,r3[0x3]
8000798c:	00 00       	add	r0,r0
8000798e:	07 c0       	ld.ub	r0,r3[0x4]
80007990:	80 00       	ld.sh	r0,r0[0x0]
80007992:	71 30       	ld.w	r0,r8[0x4c]
80007994:	00 00       	add	r0,r0
80007996:	07 b8       	ld.ub	r8,r3[0x3]
80007998:	80 00       	ld.sh	r0,r0[0x0]
8000799a:	4b 70       	lddpc	r0,80007a74 <udc_reqstd+0x64>

8000799c <udc_req_std_iface_set_setting>:
 * to set an alternate setting of an interface
 *
 * \return true if success
 */
static bool udc_req_std_iface_set_setting(void)
{
8000799c:	eb cd 40 80 	pushm	r7,lr
800079a0:	1a 97       	mov	r7,sp
800079a2:	20 1d       	sub	sp,4
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
800079a4:	49 78       	lddpc	r8,80007a00 <udc_req_std_iface_set_setting+0x64>
800079a6:	90 38       	ld.sh	r8,r8[0x6]
800079a8:	58 08       	cp.w	r8,0
800079aa:	c0 30       	breq	800079b0 <udc_req_std_iface_set_setting+0x14>
		return false; // Error in request
800079ac:	30 08       	mov	r8,0
800079ae:	c2 48       	rjmp	800079f6 <udc_req_std_iface_set_setting+0x5a>
	}
	if (!udc_num_configuration) {
800079b0:	49 58       	lddpc	r8,80007a04 <udc_req_std_iface_set_setting+0x68>
800079b2:	11 88       	ld.ub	r8,r8[0x0]
800079b4:	58 08       	cp.w	r8,0
800079b6:	c0 31       	brne	800079bc <udc_req_std_iface_set_setting+0x20>
		return false; // The device is not is configured state yet
800079b8:	30 08       	mov	r8,0
800079ba:	c1 e8       	rjmp	800079f6 <udc_req_std_iface_set_setting+0x5a>
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
800079bc:	49 18       	lddpc	r8,80007a00 <udc_req_std_iface_set_setting+0x64>
800079be:	90 28       	ld.sh	r8,r8[0x4]
800079c0:	ef 68 ff fe 	st.b	r7[-2],r8
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
800079c4:	48 f8       	lddpc	r8,80007a00 <udc_req_std_iface_set_setting+0x64>
800079c6:	90 18       	ld.sh	r8,r8[0x2]
800079c8:	ef 68 ff ff 	st.b	r7[-1],r8

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
800079cc:	ef 38 ff fe 	ld.ub	r8,r7[-2]
800079d0:	10 9c       	mov	r12,r8
800079d2:	f0 1f 00 0e 	mcall	80007a08 <udc_req_std_iface_set_setting+0x6c>
800079d6:	18 98       	mov	r8,r12
800079d8:	ec 18 00 01 	eorl	r8,0x1
800079dc:	5c 58       	castu.b	r8
800079de:	c0 30       	breq	800079e4 <udc_req_std_iface_set_setting+0x48>
		return false;
800079e0:	30 08       	mov	r8,0
800079e2:	c0 a8       	rjmp	800079f6 <udc_req_std_iface_set_setting+0x5a>
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
800079e4:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800079e8:	ef 38 ff fe 	ld.ub	r8,r7[-2]
800079ec:	12 9b       	mov	r11,r9
800079ee:	10 9c       	mov	r12,r8
800079f0:	f0 1f 00 07 	mcall	80007a0c <udc_req_std_iface_set_setting+0x70>
800079f4:	18 98       	mov	r8,r12
}
800079f6:	10 9c       	mov	r12,r8
800079f8:	2f fd       	sub	sp,-4
800079fa:	e3 cd 80 80 	ldm	sp++,r7,pc
800079fe:	00 00       	add	r0,r0
80007a00:	00 00       	add	r0,r0
80007a02:	0b 20       	ld.uh	r0,r5++
80007a04:	00 00       	add	r0,r0
80007a06:	07 bc       	ld.ub	r12,r3[0x3]
80007a08:	80 00       	ld.sh	r0,r0[0x0]
80007a0a:	71 e8       	ld.w	r8,r8[0x78]
80007a0c:	80 00       	ld.sh	r0,r0[0x0]
80007a0e:	72 a4       	ld.w	r4,r9[0x28]

80007a10 <udc_reqstd>:
 * \brief Main routine to manage the standard USB SETUP request
 *
 * \return true if the request is supported
 */
static bool udc_reqstd(void)
{
80007a10:	eb cd 40 80 	pushm	r7,lr
80007a14:	1a 97       	mov	r7,sp
	if (Udd_setup_is_in()) {
80007a16:	4c 78       	lddpc	r8,80007b30 <udc_reqstd+0x120>
80007a18:	11 88       	ld.ub	r8,r8[0x0]
80007a1a:	10 99       	mov	r9,r8
80007a1c:	30 08       	mov	r8,0
80007a1e:	f0 09 18 00 	cp.b	r9,r8
80007a22:	c3 c4       	brge	80007a9a <udc_reqstd+0x8a>
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
80007a24:	4c 38       	lddpc	r8,80007b30 <udc_reqstd+0x120>
80007a26:	90 38       	ld.sh	r8,r8[0x6]
80007a28:	58 08       	cp.w	r8,0
80007a2a:	c0 31       	brne	80007a30 <udc_reqstd+0x20>
			return false; // Error for USB host
80007a2c:	30 08       	mov	r8,0
80007a2e:	c7 d8       	rjmp	80007b28 <udc_reqstd+0x118>
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
80007a30:	4c 08       	lddpc	r8,80007b30 <udc_reqstd+0x120>
80007a32:	11 88       	ld.ub	r8,r8[0x0]
80007a34:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80007a38:	c1 51       	brne	80007a62 <udc_reqstd+0x52>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
80007a3a:	4b e8       	lddpc	r8,80007b30 <udc_reqstd+0x120>
80007a3c:	11 98       	ld.ub	r8,r8[0x1]
80007a3e:	58 68       	cp.w	r8,6
80007a40:	c0 90       	breq	80007a52 <udc_reqstd+0x42>
80007a42:	58 88       	cp.w	r8,8
80007a44:	c0 b0       	breq	80007a5a <udc_reqstd+0x4a>
80007a46:	58 08       	cp.w	r8,0
80007a48:	c0 d1       	brne	80007a62 <udc_reqstd+0x52>
			case USB_REQ_GET_STATUS:
				return udc_req_std_dev_get_status();
80007a4a:	f0 1f 00 3b 	mcall	80007b34 <udc_reqstd+0x124>
80007a4e:	18 98       	mov	r8,r12
80007a50:	c6 c8       	rjmp	80007b28 <udc_reqstd+0x118>
			case USB_REQ_GET_DESCRIPTOR:
				return udc_req_std_dev_get_descriptor();
80007a52:	f0 1f 00 3a 	mcall	80007b38 <udc_reqstd+0x128>
80007a56:	18 98       	mov	r8,r12
80007a58:	c6 88       	rjmp	80007b28 <udc_reqstd+0x118>
			case USB_REQ_GET_CONFIGURATION:
				return udc_req_std_dev_get_configuration();
80007a5a:	f0 1f 00 39 	mcall	80007b3c <udc_reqstd+0x12c>
80007a5e:	18 98       	mov	r8,r12
80007a60:	c6 48       	rjmp	80007b28 <udc_reqstd+0x118>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
80007a62:	4b 48       	lddpc	r8,80007b30 <udc_reqstd+0x120>
80007a64:	11 88       	ld.ub	r8,r8[0x0]
80007a66:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80007a6a:	58 18       	cp.w	r8,1
80007a6c:	c0 91       	brne	80007a7e <udc_reqstd+0x6e>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
80007a6e:	4b 18       	lddpc	r8,80007b30 <udc_reqstd+0x120>
80007a70:	11 98       	ld.ub	r8,r8[0x1]
80007a72:	58 a8       	cp.w	r8,10
80007a74:	c0 51       	brne	80007a7e <udc_reqstd+0x6e>
			case USB_REQ_GET_INTERFACE:
				return udc_req_std_iface_get_setting();
80007a76:	f0 1f 00 33 	mcall	80007b40 <udc_reqstd+0x130>
80007a7a:	18 98       	mov	r8,r12
80007a7c:	c5 68       	rjmp	80007b28 <udc_reqstd+0x118>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
80007a7e:	4a d8       	lddpc	r8,80007b30 <udc_reqstd+0x120>
80007a80:	11 88       	ld.ub	r8,r8[0x0]
80007a82:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80007a86:	58 28       	cp.w	r8,2
80007a88:	c4 f1       	brne	80007b26 <udc_reqstd+0x116>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
80007a8a:	4a a8       	lddpc	r8,80007b30 <udc_reqstd+0x120>
80007a8c:	11 98       	ld.ub	r8,r8[0x1]
80007a8e:	58 08       	cp.w	r8,0
80007a90:	c4 b1       	brne	80007b26 <udc_reqstd+0x116>
			case USB_REQ_GET_STATUS:
				return udc_req_std_ep_get_status();
80007a92:	f0 1f 00 2d 	mcall	80007b44 <udc_reqstd+0x134>
80007a96:	18 98       	mov	r8,r12
80007a98:	c4 88       	rjmp	80007b28 <udc_reqstd+0x118>
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
80007a9a:	4a 68       	lddpc	r8,80007b30 <udc_reqstd+0x120>
80007a9c:	11 88       	ld.ub	r8,r8[0x0]
80007a9e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80007aa2:	c1 f1       	brne	80007ae0 <udc_reqstd+0xd0>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
80007aa4:	4a 38       	lddpc	r8,80007b30 <udc_reqstd+0x120>
80007aa6:	11 98       	ld.ub	r8,r8[0x1]
80007aa8:	58 38       	cp.w	r8,3
80007aaa:	c1 30       	breq	80007ad0 <udc_reqstd+0xc0>
80007aac:	e0 89 00 05 	brgt	80007ab6 <udc_reqstd+0xa6>
80007ab0:	58 18       	cp.w	r8,1
80007ab2:	c0 b0       	breq	80007ac8 <udc_reqstd+0xb8>
80007ab4:	c1 68       	rjmp	80007ae0 <udc_reqstd+0xd0>
80007ab6:	58 58       	cp.w	r8,5
80007ab8:	c0 40       	breq	80007ac0 <udc_reqstd+0xb0>
80007aba:	58 98       	cp.w	r8,9
80007abc:	c0 e0       	breq	80007ad8 <udc_reqstd+0xc8>
80007abe:	c1 18       	rjmp	80007ae0 <udc_reqstd+0xd0>
			case USB_REQ_SET_ADDRESS:
				return udc_req_std_dev_set_address();
80007ac0:	f0 1f 00 22 	mcall	80007b48 <udc_reqstd+0x138>
80007ac4:	18 98       	mov	r8,r12
80007ac6:	c3 18       	rjmp	80007b28 <udc_reqstd+0x118>
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_dev_clear_feature();
80007ac8:	f0 1f 00 21 	mcall	80007b4c <udc_reqstd+0x13c>
80007acc:	18 98       	mov	r8,r12
80007ace:	c2 d8       	rjmp	80007b28 <udc_reqstd+0x118>
			case USB_REQ_SET_FEATURE:
				return udc_req_std_dev_set_feature();
80007ad0:	f0 1f 00 20 	mcall	80007b50 <udc_reqstd+0x140>
80007ad4:	18 98       	mov	r8,r12
80007ad6:	c2 98       	rjmp	80007b28 <udc_reqstd+0x118>
			case USB_REQ_SET_CONFIGURATION:
				return udc_req_std_dev_set_configuration();
80007ad8:	f0 1f 00 1f 	mcall	80007b54 <udc_reqstd+0x144>
80007adc:	18 98       	mov	r8,r12
80007ade:	c2 58       	rjmp	80007b28 <udc_reqstd+0x118>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
80007ae0:	49 48       	lddpc	r8,80007b30 <udc_reqstd+0x120>
80007ae2:	11 88       	ld.ub	r8,r8[0x0]
80007ae4:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80007ae8:	58 18       	cp.w	r8,1
80007aea:	c0 91       	brne	80007afc <udc_reqstd+0xec>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
80007aec:	49 18       	lddpc	r8,80007b30 <udc_reqstd+0x120>
80007aee:	11 98       	ld.ub	r8,r8[0x1]
80007af0:	58 b8       	cp.w	r8,11
80007af2:	c0 51       	brne	80007afc <udc_reqstd+0xec>
			case USB_REQ_SET_INTERFACE:
				return udc_req_std_iface_set_setting();
80007af4:	f0 1f 00 19 	mcall	80007b58 <udc_reqstd+0x148>
80007af8:	18 98       	mov	r8,r12
80007afa:	c1 78       	rjmp	80007b28 <udc_reqstd+0x118>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
80007afc:	48 d8       	lddpc	r8,80007b30 <udc_reqstd+0x120>
80007afe:	11 88       	ld.ub	r8,r8[0x0]
80007b00:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80007b04:	58 28       	cp.w	r8,2
80007b06:	c1 01       	brne	80007b26 <udc_reqstd+0x116>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
80007b08:	48 a8       	lddpc	r8,80007b30 <udc_reqstd+0x120>
80007b0a:	11 98       	ld.ub	r8,r8[0x1]
80007b0c:	58 18       	cp.w	r8,1
80007b0e:	c0 40       	breq	80007b16 <udc_reqstd+0x106>
80007b10:	58 38       	cp.w	r8,3
80007b12:	c0 60       	breq	80007b1e <udc_reqstd+0x10e>
80007b14:	c0 98       	rjmp	80007b26 <udc_reqstd+0x116>
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_ep_clear_feature();
80007b16:	f0 1f 00 12 	mcall	80007b5c <udc_reqstd+0x14c>
80007b1a:	18 98       	mov	r8,r12
80007b1c:	c0 68       	rjmp	80007b28 <udc_reqstd+0x118>
			case USB_REQ_SET_FEATURE:
				return udc_req_std_ep_set_feature();
80007b1e:	f0 1f 00 11 	mcall	80007b60 <udc_reqstd+0x150>
80007b22:	18 98       	mov	r8,r12
80007b24:	c0 28       	rjmp	80007b28 <udc_reqstd+0x118>
				break;
			}
		}
#endif
	}
	return false;
80007b26:	30 08       	mov	r8,0
}
80007b28:	10 9c       	mov	r12,r8
80007b2a:	e3 cd 80 80 	ldm	sp++,r7,pc
80007b2e:	00 00       	add	r0,r0
80007b30:	00 00       	add	r0,r0
80007b32:	0b 20       	ld.uh	r0,r5++
80007b34:	80 00       	ld.sh	r0,r0[0x0]
80007b36:	74 54       	ld.w	r4,r10[0x14]
80007b38:	80 00       	ld.sh	r0,r0[0x0]
80007b3a:	76 d0       	ld.w	r0,r11[0x34]
80007b3c:	80 00       	ld.sh	r0,r0[0x0]
80007b3e:	77 ec       	ld.w	r12,r11[0x78]
80007b40:	80 00       	ld.sh	r0,r0[0x0]
80007b42:	78 f0       	ld.w	r0,r12[0x3c]
80007b44:	80 00       	ld.sh	r0,r0[0x0]
80007b46:	74 88       	ld.w	r8,r10[0x20]
80007b48:	80 00       	ld.sh	r0,r0[0x0]
80007b4a:	75 f8       	ld.w	r8,r10[0x7c]
80007b4c:	80 00       	ld.sh	r0,r0[0x0]
80007b4e:	74 e0       	ld.w	r0,r10[0x38]
80007b50:	80 00       	ld.sh	r0,r0[0x0]
80007b52:	75 5c       	ld.w	r12,r10[0x54]
80007b54:	80 00       	ld.sh	r0,r0[0x0]
80007b56:	78 20       	ld.w	r0,r12[0x8]
80007b58:	80 00       	ld.sh	r0,r0[0x0]
80007b5a:	79 9c       	ld.w	r12,r12[0x64]
80007b5c:	80 00       	ld.sh	r0,r0[0x0]
80007b5e:	75 20       	ld.w	r0,r10[0x48]
80007b60:	80 00       	ld.sh	r0,r0[0x0]
80007b62:	75 88       	ld.w	r8,r10[0x60]

80007b64 <udc_req_iface>:
 * \brief Send the SETUP interface request to UDI
 *
 * \return true if the request is supported
 */
static bool udc_req_iface(void)
{
80007b64:	eb cd 40 80 	pushm	r7,lr
80007b68:	1a 97       	mov	r7,sp
80007b6a:	20 2d       	sub	sp,8
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
80007b6c:	4a 58       	lddpc	r8,80007c00 <udc_req_iface+0x9c>
80007b6e:	11 88       	ld.ub	r8,r8[0x0]
80007b70:	58 08       	cp.w	r8,0
80007b72:	c0 31       	brne	80007b78 <udc_req_iface+0x14>
		return false; // The device is not is configured state yet
80007b74:	30 08       	mov	r8,0
80007b76:	c4 08       	rjmp	80007bf6 <udc_req_iface+0x92>
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
80007b78:	4a 38       	lddpc	r8,80007c04 <udc_req_iface+0xa0>
80007b7a:	90 28       	ld.sh	r8,r8[0x4]
80007b7c:	ef 68 ff fb 	st.b	r7[-5],r8
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
80007b80:	4a 28       	lddpc	r8,80007c08 <udc_req_iface+0xa4>
80007b82:	70 08       	ld.w	r8,r8[0x0]
80007b84:	70 08       	ld.w	r8,r8[0x0]
80007b86:	11 c8       	ld.ub	r8,r8[0x4]
80007b88:	ef 39 ff fb 	ld.ub	r9,r7[-5]
80007b8c:	f0 09 18 00 	cp.b	r9,r8
80007b90:	c0 33       	brcs	80007b96 <udc_req_iface+0x32>
		return false;
80007b92:	30 08       	mov	r8,0
80007b94:	c3 18       	rjmp	80007bf6 <udc_req_iface+0x92>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
80007b96:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80007b9a:	30 0b       	mov	r11,0
80007b9c:	10 9c       	mov	r12,r8
80007b9e:	f0 1f 00 1c 	mcall	80007c0c <udc_req_iface+0xa8>
80007ba2:	18 98       	mov	r8,r12
80007ba4:	ec 18 00 01 	eorl	r8,0x1
80007ba8:	5c 58       	castu.b	r8
80007baa:	c0 30       	breq	80007bb0 <udc_req_iface+0x4c>
		return false;
80007bac:	30 08       	mov	r8,0
80007bae:	c2 48       	rjmp	80007bf6 <udc_req_iface+0x92>
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
80007bb0:	49 68       	lddpc	r8,80007c08 <udc_req_iface+0xa4>
80007bb2:	70 08       	ld.w	r8,r8[0x0]
80007bb4:	70 19       	ld.w	r9,r8[0x4]
80007bb6:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80007bba:	a3 68       	lsl	r8,0x2
80007bbc:	f2 08 00 08 	add	r8,r9,r8
80007bc0:	70 08       	ld.w	r8,r8[0x0]
80007bc2:	ef 48 ff fc 	st.w	r7[-4],r8
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
80007bc6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007bca:	70 38       	ld.w	r8,r8[0xc]
80007bcc:	5d 18       	icall	r8
80007bce:	18 98       	mov	r8,r12
80007bd0:	10 99       	mov	r9,r8
80007bd2:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80007bd6:	12 9b       	mov	r11,r9
80007bd8:	10 9c       	mov	r12,r8
80007bda:	f0 1f 00 0d 	mcall	80007c0c <udc_req_iface+0xa8>
80007bde:	18 98       	mov	r8,r12
80007be0:	ec 18 00 01 	eorl	r8,0x1
80007be4:	5c 58       	castu.b	r8
80007be6:	c0 30       	breq	80007bec <udc_req_iface+0x88>
		return false;
80007be8:	30 08       	mov	r8,0
80007bea:	c0 68       	rjmp	80007bf6 <udc_req_iface+0x92>
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
80007bec:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007bf0:	70 28       	ld.w	r8,r8[0x8]
80007bf2:	5d 18       	icall	r8
80007bf4:	18 98       	mov	r8,r12
}
80007bf6:	10 9c       	mov	r12,r8
80007bf8:	2f ed       	sub	sp,-8
80007bfa:	e3 cd 80 80 	ldm	sp++,r7,pc
80007bfe:	00 00       	add	r0,r0
80007c00:	00 00       	add	r0,r0
80007c02:	07 bc       	ld.ub	r12,r3[0x3]
80007c04:	00 00       	add	r0,r0
80007c06:	0b 20       	ld.uh	r0,r5++
80007c08:	00 00       	add	r0,r0
80007c0a:	07 c0       	ld.ub	r0,r3[0x4]
80007c0c:	80 00       	ld.sh	r0,r0[0x0]
80007c0e:	71 30       	ld.w	r0,r8[0x4c]

80007c10 <udc_req_ep>:
 * \brief Send the SETUP interface request to UDI
 *
 * \return true if the request is supported
 */
static bool udc_req_ep(void)
{
80007c10:	eb cd 40 80 	pushm	r7,lr
80007c14:	1a 97       	mov	r7,sp
80007c16:	20 2d       	sub	sp,8
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
80007c18:	4a 48       	lddpc	r8,80007ca8 <udc_req_ep+0x98>
80007c1a:	11 88       	ld.ub	r8,r8[0x0]
80007c1c:	58 08       	cp.w	r8,0
80007c1e:	c0 31       	brne	80007c24 <udc_req_ep+0x14>
		return false; // The device is not is configured state yet
80007c20:	30 08       	mov	r8,0
80007c22:	c3 f8       	rjmp	80007ca0 <udc_req_ep+0x90>
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
80007c24:	4a 28       	lddpc	r8,80007cac <udc_req_ep+0x9c>
80007c26:	90 28       	ld.sh	r8,r8[0x4]
80007c28:	ef 68 ff fb 	st.b	r7[-5],r8
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
80007c2c:	30 08       	mov	r8,0
80007c2e:	ef 68 ff fb 	st.b	r7[-5],r8
80007c32:	c2 d8       	rjmp	80007c8c <udc_req_ep+0x7c>
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
80007c34:	49 f8       	lddpc	r8,80007cb0 <udc_req_ep+0xa0>
80007c36:	70 08       	ld.w	r8,r8[0x0]
80007c38:	70 19       	ld.w	r9,r8[0x4]
80007c3a:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80007c3e:	a3 68       	lsl	r8,0x2
80007c40:	f2 08 00 08 	add	r8,r9,r8
80007c44:	70 08       	ld.w	r8,r8[0x0]
80007c46:	ef 48 ff fc 	st.w	r7[-4],r8
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
80007c4a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007c4e:	70 38       	ld.w	r8,r8[0xc]
80007c50:	5d 18       	icall	r8
80007c52:	18 98       	mov	r8,r12
80007c54:	10 99       	mov	r9,r8
80007c56:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80007c5a:	12 9b       	mov	r11,r9
80007c5c:	10 9c       	mov	r12,r8
80007c5e:	f0 1f 00 16 	mcall	80007cb4 <udc_req_ep+0xa4>
80007c62:	18 98       	mov	r8,r12
80007c64:	ec 18 00 01 	eorl	r8,0x1
80007c68:	5c 58       	castu.b	r8
80007c6a:	c0 30       	breq	80007c70 <udc_req_ep+0x60>
			return false;
80007c6c:	30 08       	mov	r8,0
80007c6e:	c1 98       	rjmp	80007ca0 <udc_req_ep+0x90>
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
80007c70:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007c74:	70 28       	ld.w	r8,r8[0x8]
80007c76:	5d 18       	icall	r8
80007c78:	18 98       	mov	r8,r12
80007c7a:	58 08       	cp.w	r8,0
80007c7c:	c0 30       	breq	80007c82 <udc_req_ep+0x72>
			return true;
80007c7e:	30 18       	mov	r8,1
80007c80:	c1 08       	rjmp	80007ca0 <udc_req_ep+0x90>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
80007c82:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80007c86:	2f f8       	sub	r8,-1
80007c88:	ef 68 ff fb 	st.b	r7[-5],r8
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
80007c8c:	48 98       	lddpc	r8,80007cb0 <udc_req_ep+0xa0>
80007c8e:	70 08       	ld.w	r8,r8[0x0]
80007c90:	70 08       	ld.w	r8,r8[0x0]
80007c92:	11 c8       	ld.ub	r8,r8[0x4]
80007c94:	ef 39 ff fb 	ld.ub	r9,r7[-5]
80007c98:	f0 09 18 00 	cp.b	r9,r8
80007c9c:	cc c3       	brcs	80007c34 <udc_req_ep+0x24>
		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
		}
	}
	return false;
80007c9e:	30 08       	mov	r8,0
}
80007ca0:	10 9c       	mov	r12,r8
80007ca2:	2f ed       	sub	sp,-8
80007ca4:	e3 cd 80 80 	ldm	sp++,r7,pc
80007ca8:	00 00       	add	r0,r0
80007caa:	07 bc       	ld.ub	r12,r3[0x3]
80007cac:	00 00       	add	r0,r0
80007cae:	0b 20       	ld.uh	r0,r5++
80007cb0:	00 00       	add	r0,r0
80007cb2:	07 c0       	ld.ub	r0,r3[0x4]
80007cb4:	80 00       	ld.sh	r0,r0[0x0]
80007cb6:	71 30       	ld.w	r0,r8[0x4c]

80007cb8 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
80007cb8:	eb cd 40 80 	pushm	r7,lr
80007cbc:	1a 97       	mov	r7,sp
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
80007cbe:	4a 19       	lddpc	r9,80007d40 <udc_process_setup+0x88>
80007cc0:	30 08       	mov	r8,0
80007cc2:	b2 68       	st.h	r9[0xc],r8
	udd_g_ctrlreq.callback = NULL;
80007cc4:	49 f8       	lddpc	r8,80007d40 <udc_process_setup+0x88>
80007cc6:	30 09       	mov	r9,0
80007cc8:	91 49       	st.w	r8[0x10],r9
	udd_g_ctrlreq.over_under_run = NULL;
80007cca:	49 e8       	lddpc	r8,80007d40 <udc_process_setup+0x88>
80007ccc:	30 09       	mov	r9,0
80007cce:	91 59       	st.w	r8[0x14],r9

	if (Udd_setup_is_in()) {
80007cd0:	49 c8       	lddpc	r8,80007d40 <udc_process_setup+0x88>
80007cd2:	11 88       	ld.ub	r8,r8[0x0]
80007cd4:	10 99       	mov	r9,r8
80007cd6:	30 08       	mov	r8,0
80007cd8:	f0 09 18 00 	cp.b	r9,r8
80007cdc:	c0 74       	brge	80007cea <udc_process_setup+0x32>
		if (udd_g_ctrlreq.req.wLength == 0) {
80007cde:	49 98       	lddpc	r8,80007d40 <udc_process_setup+0x88>
80007ce0:	90 38       	ld.sh	r8,r8[0x6]
80007ce2:	58 08       	cp.w	r8,0
80007ce4:	c0 31       	brne	80007cea <udc_process_setup+0x32>
			return false; // Error from USB host
80007ce6:	30 08       	mov	r8,0
80007ce8:	c2 88       	rjmp	80007d38 <udc_process_setup+0x80>
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
80007cea:	49 68       	lddpc	r8,80007d40 <udc_process_setup+0x88>
80007cec:	11 88       	ld.ub	r8,r8[0x0]
80007cee:	e2 18 00 60 	andl	r8,0x60,COH
80007cf2:	c0 81       	brne	80007d02 <udc_process_setup+0x4a>
		if (udc_reqstd()) {
80007cf4:	f0 1f 00 14 	mcall	80007d44 <udc_process_setup+0x8c>
80007cf8:	18 98       	mov	r8,r12
80007cfa:	58 08       	cp.w	r8,0
80007cfc:	c0 30       	breq	80007d02 <udc_process_setup+0x4a>
			return true;
80007cfe:	30 18       	mov	r8,1
80007d00:	c1 c8       	rjmp	80007d38 <udc_process_setup+0x80>
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
80007d02:	49 08       	lddpc	r8,80007d40 <udc_process_setup+0x88>
80007d04:	11 88       	ld.ub	r8,r8[0x0]
80007d06:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80007d0a:	58 18       	cp.w	r8,1
80007d0c:	c0 81       	brne	80007d1c <udc_process_setup+0x64>
		if (udc_req_iface()) {
80007d0e:	f0 1f 00 0f 	mcall	80007d48 <udc_process_setup+0x90>
80007d12:	18 98       	mov	r8,r12
80007d14:	58 08       	cp.w	r8,0
80007d16:	c0 30       	breq	80007d1c <udc_process_setup+0x64>
			return true;
80007d18:	30 18       	mov	r8,1
80007d1a:	c0 f8       	rjmp	80007d38 <udc_process_setup+0x80>
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
80007d1c:	48 98       	lddpc	r8,80007d40 <udc_process_setup+0x88>
80007d1e:	11 88       	ld.ub	r8,r8[0x0]
80007d20:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80007d24:	58 28       	cp.w	r8,2
80007d26:	c0 81       	brne	80007d36 <udc_process_setup+0x7e>
		if (udc_req_ep()) {
80007d28:	f0 1f 00 09 	mcall	80007d4c <udc_process_setup+0x94>
80007d2c:	18 98       	mov	r8,r12
80007d2e:	58 08       	cp.w	r8,0
80007d30:	c0 30       	breq	80007d36 <udc_process_setup+0x7e>
			return true;
80007d32:	30 18       	mov	r8,1
80007d34:	c0 28       	rjmp	80007d38 <udc_process_setup+0x80>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
80007d36:	30 08       	mov	r8,0
#endif
}
80007d38:	10 9c       	mov	r12,r8
80007d3a:	e3 cd 80 80 	ldm	sp++,r7,pc
80007d3e:	00 00       	add	r0,r0
80007d40:	00 00       	add	r0,r0
80007d42:	0b 20       	ld.uh	r0,r5++
80007d44:	80 00       	ld.sh	r0,r0[0x0]
80007d46:	7a 10       	ld.w	r0,sp[0x4]
80007d48:	80 00       	ld.sh	r0,r0[0x0]
80007d4a:	7b 64       	ld.w	r4,sp[0x58]
80007d4c:	80 00       	ld.sh	r0,r0[0x0]
80007d4e:	7c 10       	ld.w	r0,lr[0x4]

80007d50 <cpu_irq_save>:
#endif

typedef uint32_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
80007d50:	eb cd 40 80 	pushm	r7,lr
80007d54:	1a 97       	mov	r7,sp
80007d56:	20 1d       	sub	sp,4
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80007d58:	e1 b8 00 00 	mfsr	r8,0x0
80007d5c:	ef 48 ff fc 	st.w	r7[-4],r8
	cpu_irq_disable();
80007d60:	d3 03       	ssrf	0x10

	return flags;
80007d62:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
80007d66:	10 9c       	mov	r12,r8
80007d68:	2f fd       	sub	sp,-4
80007d6a:	e3 cd 80 80 	ldm	sp++,r7,pc

80007d6e <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
80007d6e:	eb cd 40 80 	pushm	r7,lr
80007d72:	1a 97       	mov	r7,sp
80007d74:	20 1d       	sub	sp,4
80007d76:	ef 4c ff fc 	st.w	r7[-4],r12
	return !(flags & AVR32_SR_GM_MASK);
80007d7a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007d7e:	e6 18 00 01 	andh	r8,0x1,COH
80007d82:	5f 08       	sreq	r8
80007d84:	5c 58       	castu.b	r8
}
80007d86:	10 9c       	mov	r12,r8
80007d88:	2f fd       	sub	sp,-4
80007d8a:	e3 cd 80 80 	ldm	sp++,r7,pc
80007d8e:	d7 03       	nop

80007d90 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
80007d90:	eb cd 40 80 	pushm	r7,lr
80007d94:	1a 97       	mov	r7,sp
80007d96:	20 1d       	sub	sp,4
80007d98:	ef 4c ff fc 	st.w	r7[-4],r12
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80007d9c:	ee fc ff fc 	ld.w	r12,r7[-4]
80007da0:	f0 1f 00 05 	mcall	80007db4 <cpu_irq_restore+0x24>
80007da4:	18 98       	mov	r8,r12
80007da6:	58 08       	cp.w	r8,0
80007da8:	c0 20       	breq	80007dac <cpu_irq_restore+0x1c>
      cpu_irq_enable();
80007daa:	d5 03       	csrf	0x10
   }

	barrier();
}
80007dac:	2f fd       	sub	sp,-4
80007dae:	e3 cd 80 80 	ldm	sp++,r7,pc
80007db2:	00 00       	add	r0,r0
80007db4:	80 00       	ld.sh	r0,r0[0x0]
80007db6:	7d 6e       	ld.w	lr,lr[0x58]

80007db8 <osc_enable>:
#include <stdbool.h>
#include <stdint.h>
#include <avr32/io.h>

static inline void osc_enable(uint8_t id)
{
80007db8:	eb cd 40 80 	pushm	r7,lr
80007dbc:	1a 97       	mov	r7,sp
80007dbe:	20 3d       	sub	sp,12
80007dc0:	18 98       	mov	r8,r12
80007dc2:	ef 68 ff f4 	st.b	r7[-12],r8
	irqflags_t flags;
	uint32_t   oscctrl;

	flags = cpu_irq_save();
80007dc6:	f0 1f 00 1f 	mcall	80007e40 <osc_enable+0x88>
80007dca:	18 98       	mov	r8,r12
80007dcc:	ef 48 ff f8 	st.w	r7[-8],r8

	switch (id) {
80007dd0:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80007dd4:	58 08       	cp.w	r8,0
80007dd6:	c0 40       	breq	80007dde <osc_enable+0x26>
80007dd8:	58 28       	cp.w	r8,2
80007dda:	c1 90       	breq	80007e0c <osc_enable+0x54>
80007ddc:	c2 b8       	rjmp	80007e32 <osc_enable+0x7a>
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		oscctrl = OSC0_STARTUP_VALUE <<
80007dde:	e0 68 03 00 	mov	r8,768
80007de2:	ef 48 ff fc 	st.w	r7[-4],r8
				AVR32_PM_OSCCTRL0_STARTUP_OFFSET;
		oscctrl |= OSC0_MODE_VALUE << AVR32_PM_OSCCTRL0_MODE_OFFSET;
80007de6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007dea:	e8 18 00 07 	orl	r8,0x7
80007dee:	ef 48 ff fc 	st.w	r7[-4],r8
		AVR32_PM.oscctrl0 = oscctrl;
80007df2:	fe 78 0c 00 	mov	r8,-62464
80007df6:	ee f9 ff fc 	ld.w	r9,r7[-4]
80007dfa:	91 a9       	st.w	r8[0x28],r9
		AVR32_PM.mcctrl |= 1U << AVR32_PM_MCCTRL_OSC0EN;
80007dfc:	fe 78 0c 00 	mov	r8,-62464
80007e00:	fe 79 0c 00 	mov	r9,-62464
80007e04:	72 09       	ld.w	r9,r9[0x0]
80007e06:	a3 a9       	sbr	r9,0x2
80007e08:	91 09       	st.w	r8[0x0],r9
		break;
80007e0a:	c1 48       	rjmp	80007e32 <osc_enable+0x7a>
		break;
#endif

#ifdef BOARD_OSC32_HZ
	case OSC_ID_OSC32:
		oscctrl = OSC32_STARTUP_VALUE
80007e0c:	e2 68 00 00 	mov	r8,131072
80007e10:	ef 48 ff fc 	st.w	r7[-4],r8
				<< AVR32_PM_OSCCTRL32_STARTUP_OFFSET;
		oscctrl |= OSC32_MODE_VALUE << AVR32_PM_OSCCTRL32_MODE_OFFSET;
80007e14:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007e18:	a9 a8       	sbr	r8,0x8
80007e1a:	ef 48 ff fc 	st.w	r7[-4],r8
		oscctrl |= 1 << AVR32_PM_OSCCTRL32_OSC32EN_OFFSET;
80007e1e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007e22:	a1 a8       	sbr	r8,0x0
80007e24:	ef 48 ff fc 	st.w	r7[-4],r8
		AVR32_PM.oscctrl32 = oscctrl;
80007e28:	fe 78 0c 00 	mov	r8,-62464
80007e2c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80007e30:	91 c9       	st.w	r8[0x30],r9
	default:
		/* unhandled_case(id); */
		break;
	}

	cpu_irq_restore(flags);
80007e32:	ee fc ff f8 	ld.w	r12,r7[-8]
80007e36:	f0 1f 00 04 	mcall	80007e44 <osc_enable+0x8c>
}
80007e3a:	2f dd       	sub	sp,-12
80007e3c:	e3 cd 80 80 	ldm	sp++,r7,pc
80007e40:	80 00       	ld.sh	r0,r0[0x0]
80007e42:	7d 50       	ld.w	r0,lr[0x54]
80007e44:	80 00       	ld.sh	r0,r0[0x0]
80007e46:	7d 90       	ld.w	r0,lr[0x64]

80007e48 <osc_is_ready>:
	}
	cpu_irq_restore(flags);
}

static inline bool osc_is_ready(uint8_t id)
{
80007e48:	eb cd 40 80 	pushm	r7,lr
80007e4c:	1a 97       	mov	r7,sp
80007e4e:	20 1d       	sub	sp,4
80007e50:	18 98       	mov	r8,r12
80007e52:	ef 68 ff fc 	st.b	r7[-4],r8
	switch (id) {
80007e56:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80007e5a:	58 08       	cp.w	r8,0
80007e5c:	c0 40       	breq	80007e64 <osc_is_ready+0x1c>
80007e5e:	58 28       	cp.w	r8,2
80007e60:	c0 a0       	breq	80007e74 <osc_is_ready+0x2c>
80007e62:	c1 18       	rjmp	80007e84 <osc_is_ready+0x3c>
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		return !!(AVR32_PM.poscsr & (1U << AVR32_PM_POSCSR_OSC0RDY));
80007e64:	fe 78 0c 00 	mov	r8,-62464
80007e68:	71 58       	ld.w	r8,r8[0x54]
80007e6a:	e2 18 00 80 	andl	r8,0x80,COH
80007e6e:	5f 18       	srne	r8
80007e70:	5c 58       	castu.b	r8
80007e72:	c0 a8       	rjmp	80007e86 <osc_is_ready+0x3e>
		return !!(AVR32_PM.poscsr & (1U << AVR32_PM_POSCSR_OSC1RDY));
#endif

#ifdef BOARD_OSC32_HZ
	case OSC_ID_OSC32:
		return !!(AVR32_PM.poscsr & (1U << AVR32_PM_POSCSR_OSC32RDY));
80007e74:	fe 78 0c 00 	mov	r8,-62464
80007e78:	71 58       	ld.w	r8,r8[0x54]
80007e7a:	e2 18 02 00 	andl	r8,0x200,COH
80007e7e:	5f 18       	srne	r8
80007e80:	5c 58       	castu.b	r8
80007e82:	c0 28       	rjmp	80007e86 <osc_is_ready+0x3e>
#endif

	default:
		/* unhandled_case(id); */
		return false;
80007e84:	30 08       	mov	r8,0
	}
}
80007e86:	10 9c       	mov	r12,r8
80007e88:	2f fd       	sub	sp,-4
80007e8a:	e3 cd 80 80 	ldm	sp++,r7,pc

80007e8e <osc_get_rate>:

static inline uint32_t osc_get_rate(uint8_t id)
{
80007e8e:	eb cd 40 80 	pushm	r7,lr
80007e92:	1a 97       	mov	r7,sp
80007e94:	20 1d       	sub	sp,4
80007e96:	18 98       	mov	r8,r12
80007e98:	ef 68 ff fc 	st.b	r7[-4],r8
	switch (id) {
80007e9c:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80007ea0:	58 08       	cp.w	r8,0
80007ea2:	c0 40       	breq	80007eaa <osc_get_rate+0x1c>
80007ea4:	58 28       	cp.w	r8,2
80007ea6:	c0 70       	breq	80007eb4 <osc_get_rate+0x26>
80007ea8:	c0 98       	rjmp	80007eba <osc_get_rate+0x2c>
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		return BOARD_OSC0_HZ;
80007eaa:	e0 68 1b 00 	mov	r8,6912
80007eae:	ea 18 00 b7 	orh	r8,0xb7
80007eb2:	c0 58       	rjmp	80007ebc <osc_get_rate+0x2e>
		return BOARD_OSC1_HZ;
#endif

#ifdef BOARD_OSC32_HZ
	case OSC_ID_OSC32:
		return BOARD_OSC32_HZ;
80007eb4:	e0 68 80 00 	mov	r8,32768
80007eb8:	c0 28       	rjmp	80007ebc <osc_get_rate+0x2e>
#endif
	default:
		/* unhandled_case(id); */
		return 0;
80007eba:	30 08       	mov	r8,0
	}
}
80007ebc:	10 9c       	mov	r12,r8
80007ebe:	2f fd       	sub	sp,-4
80007ec0:	e3 cd 80 80 	ldm	sp++,r7,pc

80007ec4 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
80007ec4:	eb cd 40 80 	pushm	r7,lr
80007ec8:	1a 97       	mov	r7,sp
80007eca:	20 1d       	sub	sp,4
80007ecc:	18 98       	mov	r8,r12
80007ece:	ef 68 ff fc 	st.b	r7[-4],r8
	while (!osc_is_ready(id)) {
80007ed2:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80007ed6:	10 9c       	mov	r12,r8
80007ed8:	f0 1f 00 05 	mcall	80007eec <osc_wait_ready+0x28>
80007edc:	18 98       	mov	r8,r12
80007ede:	ec 18 00 01 	eorl	r8,0x1
80007ee2:	5c 58       	castu.b	r8
80007ee4:	cf 71       	brne	80007ed2 <osc_wait_ready+0xe>
		/* Do nothing */
	}
}
80007ee6:	2f fd       	sub	sp,-4
80007ee8:	e3 cd 80 80 	ldm	sp++,r7,pc
80007eec:	80 00       	ld.sh	r0,r0[0x0]
80007eee:	7e 48       	ld.w	r8,pc[0x10]

80007ef0 <pll_config_set_option>:
			* CONFIG_PLL##pll_id##_MUL)                            \
			/ CONFIG_PLL##pll_id##_DIV)

static inline void pll_config_set_option(struct pll_config *cfg,
		unsigned int option)
{
80007ef0:	eb cd 40 80 	pushm	r7,lr
80007ef4:	1a 97       	mov	r7,sp
80007ef6:	20 2d       	sub	sp,8
80007ef8:	ef 4c ff fc 	st.w	r7[-4],r12
80007efc:	ef 4b ff f8 	st.w	r7[-8],r11
	Assert(option < PLL_NR_OPTIONS);

	cfg->ctrl |= 1U << (AVR32_PM_PLL0_PLLOPT + option);
80007f00:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007f04:	70 09       	ld.w	r9,r8[0x0]
80007f06:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007f0a:	2f e8       	sub	r8,-2
80007f0c:	30 1a       	mov	r10,1
80007f0e:	f4 08 09 48 	lsl	r8,r10,r8
80007f12:	10 49       	or	r9,r8
80007f14:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007f18:	91 09       	st.w	r8[0x0],r9
}
80007f1a:	2f ed       	sub	sp,-8
80007f1c:	e3 cd 80 80 	ldm	sp++,r7,pc

80007f20 <pll_config_init>:
 * The PLL options #PLL_OPT_VCO_RANGE_LOW and #PLL_OPT_OUTPUT_DIV will
 * be set automatically based on the calculated target frequency.
 */
static inline void pll_config_init(struct pll_config *cfg,
		enum pll_source src, unsigned int div, unsigned int mul)
{
80007f20:	eb cd 40 80 	pushm	r7,lr
80007f24:	1a 97       	mov	r7,sp
80007f26:	20 5d       	sub	sp,20
80007f28:	ef 4c ff f8 	st.w	r7[-8],r12
80007f2c:	ef 4b ff f4 	st.w	r7[-12],r11
80007f30:	ef 4a ff f0 	st.w	r7[-16],r10
80007f34:	ef 49 ff ec 	st.w	r7[-20],r9
	uint32_t vco_hz;

	Assert(src < PLL_NR_SOURCES);

	/* Calculate internal VCO frequency */
	vco_hz = osc_get_rate(src) * mul;
80007f38:	ee f8 ff f4 	ld.w	r8,r7[-12]
80007f3c:	5c 58       	castu.b	r8
80007f3e:	10 9c       	mov	r12,r8
80007f40:	f0 1f 00 2e 	mcall	80007ff8 <pll_config_init+0xd8>
80007f44:	18 99       	mov	r9,r12
80007f46:	ee f8 ff ec 	ld.w	r8,r7[-20]
80007f4a:	f2 08 02 48 	mul	r8,r9,r8
80007f4e:	ef 48 ff fc 	st.w	r7[-4],r8
	vco_hz /= div;
80007f52:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007f56:	ee f9 ff f0 	ld.w	r9,r7[-16]
80007f5a:	f0 09 0d 08 	divu	r8,r8,r9
80007f5e:	ef 48 ff fc 	st.w	r7[-4],r8
	Assert(vco_hz >= PLL_MIN_HZ);
	Assert(vco_hz <= PLL_MAX_HZ);

	cfg->ctrl = 0;
80007f62:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007f66:	30 09       	mov	r9,0
80007f68:	91 09       	st.w	r8[0x0],r9

	/* Bring the internal VCO frequency up to the minimum value */
	if ((vco_hz < PLL_MIN_HZ * 2) && (mul <= 8)) {
80007f6a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007f6e:	e0 69 b3 ff 	mov	r9,46079
80007f72:	ea 19 04 c4 	orh	r9,0x4c4
80007f76:	12 38       	cp.w	r8,r9
80007f78:	e0 8b 00 16 	brhi	80007fa4 <pll_config_init+0x84>
80007f7c:	ee f8 ff ec 	ld.w	r8,r7[-20]
80007f80:	58 88       	cp.w	r8,8
80007f82:	e0 8b 00 11 	brhi	80007fa4 <pll_config_init+0x84>
		mul *= 2;
80007f86:	ee f8 ff ec 	ld.w	r8,r7[-20]
80007f8a:	a1 78       	lsl	r8,0x1
80007f8c:	ef 48 ff ec 	st.w	r7[-20],r8
		vco_hz *= 2;
80007f90:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007f94:	a1 78       	lsl	r8,0x1
80007f96:	ef 48 ff fc 	st.w	r7[-4],r8
		pll_config_set_option(cfg, PLL_OPT_OUTPUT_DIV);
80007f9a:	30 1b       	mov	r11,1
80007f9c:	ee fc ff f8 	ld.w	r12,r7[-8]
80007fa0:	f0 1f 00 17 	mcall	80007ffc <pll_config_init+0xdc>
	}

	/* Set VCO frequency range according to calculated value */
	if (vco_hz < PLL_VCO_LOW_THRESHOLD)
80007fa4:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007fa8:	e0 69 fe 7f 	mov	r9,65151
80007fac:	ea 19 0a 21 	orh	r9,0xa21
80007fb0:	12 38       	cp.w	r8,r9
80007fb2:	e0 8b 00 07 	brhi	80007fc0 <pll_config_init+0xa0>
		pll_config_set_option(cfg, PLL_OPT_VCO_RANGE_LOW);
80007fb6:	30 0b       	mov	r11,0
80007fb8:	ee fc ff f8 	ld.w	r12,r7[-8]
80007fbc:	f0 1f 00 10 	mcall	80007ffc <pll_config_init+0xdc>

	Assert((mul > 2) && (mul <= 16));
	Assert((div > 0) && (div <= 15));

	cfg->ctrl |= ((mul - 1) << AVR32_PM_PLL0_PLLMUL)
80007fc0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007fc4:	70 09       	ld.w	r9,r8[0x0]
80007fc6:	ee f8 ff ec 	ld.w	r8,r7[-20]
80007fca:	20 18       	sub	r8,1
80007fcc:	f0 0a 15 10 	lsl	r10,r8,0x10
			| (div << AVR32_PM_PLL0_PLLDIV)
80007fd0:	ee f8 ff f0 	ld.w	r8,r7[-16]
80007fd4:	a9 68       	lsl	r8,0x8
			| (PLL_MAX_STARTUP_CYCLES << AVR32_PM_PLL0_PLLCOUNT)
80007fd6:	10 4a       	or	r10,r8
			| (src << AVR32_PM_PLL0_PLLOSC);
80007fd8:	ee f8 ff f4 	ld.w	r8,r7[-12]
80007fdc:	a1 78       	lsl	r8,0x1
		pll_config_set_option(cfg, PLL_OPT_VCO_RANGE_LOW);

	Assert((mul > 2) && (mul <= 16));
	Assert((div > 0) && (div <= 15));

	cfg->ctrl |= ((mul - 1) << AVR32_PM_PLL0_PLLMUL)
80007fde:	f5 e8 10 08 	or	r8,r10,r8
80007fe2:	f3 e8 10 08 	or	r8,r9,r8
80007fe6:	10 99       	mov	r9,r8
80007fe8:	ea 19 3f 00 	orh	r9,0x3f00
80007fec:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007ff0:	91 09       	st.w	r8[0x0],r9
			| (div << AVR32_PM_PLL0_PLLDIV)
			| (PLL_MAX_STARTUP_CYCLES << AVR32_PM_PLL0_PLLCOUNT)
			| (src << AVR32_PM_PLL0_PLLOSC);
}
80007ff2:	2f bd       	sub	sp,-20
80007ff4:	e3 cd 80 80 	ldm	sp++,r7,pc
80007ff8:	80 00       	ld.sh	r0,r0[0x0]
80007ffa:	7e 8e       	ld.w	lr,pc[0x20]
80007ffc:	80 00       	ld.sh	r0,r0[0x0]
80007ffe:	7e f0       	ld.w	r0,pc[0x3c]

80008000 <pll_enable>:
	AVR32_PM.pll[pll_id] = cfg->ctrl;
}

static inline void pll_enable(const struct pll_config *cfg,
		unsigned int pll_id)
{
80008000:	eb cd 40 80 	pushm	r7,lr
80008004:	1a 97       	mov	r7,sp
80008006:	20 2d       	sub	sp,8
80008008:	ef 4c ff fc 	st.w	r7[-4],r12
8000800c:	ef 4b ff f8 	st.w	r7[-8],r11
	Assert(pll_id < NR_PLLS);

	AVR32_PM.pll[pll_id] = cfg->ctrl | (1U << AVR32_PM_PLL0_PLLEN);
80008010:	fe 78 0c 00 	mov	r8,-62464
80008014:	ee f9 ff f8 	ld.w	r9,r7[-8]
80008018:	ee fa ff fc 	ld.w	r10,r7[-4]
8000801c:	74 0a       	ld.w	r10,r10[0x0]
8000801e:	a1 aa       	sbr	r10,0x0
80008020:	2f 89       	sub	r9,-8
80008022:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
}
80008026:	2f ed       	sub	sp,-8
80008028:	e3 cd 80 80 	ldm	sp++,r7,pc

8000802c <pll_is_locked>:

	AVR32_PM.pll[pll_id] = 0;
}

static inline bool pll_is_locked(unsigned int pll_id)
{
8000802c:	eb cd 40 80 	pushm	r7,lr
80008030:	1a 97       	mov	r7,sp
80008032:	20 1d       	sub	sp,4
80008034:	ef 4c ff fc 	st.w	r7[-4],r12
	Assert(pll_id < NR_PLLS);

	return !!(AVR32_PM.poscsr & (1U << (AVR32_PM_POSCSR_LOCK0 + pll_id)));
80008038:	fe 78 0c 00 	mov	r8,-62464
8000803c:	71 59       	ld.w	r9,r8[0x54]
8000803e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008042:	30 1a       	mov	r10,1
80008044:	f4 08 09 48 	lsl	r8,r10,r8
80008048:	f3 e8 00 08 	and	r8,r9,r8
8000804c:	5f 18       	srne	r8
8000804e:	5c 58       	castu.b	r8
}
80008050:	10 9c       	mov	r12,r8
80008052:	2f fd       	sub	sp,-4
80008054:	e3 cd 80 80 	ldm	sp++,r7,pc

80008058 <pll_enable_source>:

static inline void pll_enable_source(enum pll_source src)
{
80008058:	eb cd 40 80 	pushm	r7,lr
8000805c:	1a 97       	mov	r7,sp
8000805e:	20 1d       	sub	sp,4
80008060:	ef 4c ff fc 	st.w	r7[-4],r12
	switch (src) {
80008064:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008068:	58 08       	cp.w	r8,0
8000806a:	c0 40       	breq	80008072 <pll_enable_source+0x1a>
8000806c:	58 18       	cp.w	r8,1
8000806e:	c1 10       	breq	80008090 <pll_enable_source+0x38>
80008070:	c2 08       	rjmp	800080b0 <pll_enable_source+0x58>
	case PLL_SRC_OSC0:
		if (!osc_is_ready(OSC_ID_OSC0)) {
80008072:	30 0c       	mov	r12,0
80008074:	f0 1f 00 11 	mcall	800080b8 <pll_enable_source+0x60>
80008078:	18 98       	mov	r8,r12
8000807a:	ec 18 00 01 	eorl	r8,0x1
8000807e:	5c 58       	castu.b	r8
80008080:	c1 70       	breq	800080ae <pll_enable_source+0x56>
			osc_enable(OSC_ID_OSC0);
80008082:	30 0c       	mov	r12,0
80008084:	f0 1f 00 0e 	mcall	800080bc <pll_enable_source+0x64>
			osc_wait_ready(OSC_ID_OSC0);
80008088:	30 0c       	mov	r12,0
8000808a:	f0 1f 00 0e 	mcall	800080c0 <pll_enable_source+0x68>
		}
		break;
8000808e:	c1 18       	rjmp	800080b0 <pll_enable_source+0x58>

	case PLL_SRC_OSC1:
		if (!osc_is_ready(OSC_ID_OSC1)) {
80008090:	30 1c       	mov	r12,1
80008092:	f0 1f 00 0a 	mcall	800080b8 <pll_enable_source+0x60>
80008096:	18 98       	mov	r8,r12
80008098:	ec 18 00 01 	eorl	r8,0x1
8000809c:	5c 58       	castu.b	r8
8000809e:	c0 90       	breq	800080b0 <pll_enable_source+0x58>
			osc_enable(OSC_ID_OSC1);
800080a0:	30 1c       	mov	r12,1
800080a2:	f0 1f 00 07 	mcall	800080bc <pll_enable_source+0x64>
			osc_wait_ready(OSC_ID_OSC1);
800080a6:	30 1c       	mov	r12,1
800080a8:	f0 1f 00 06 	mcall	800080c0 <pll_enable_source+0x68>
800080ac:	c0 28       	rjmp	800080b0 <pll_enable_source+0x58>
	case PLL_SRC_OSC0:
		if (!osc_is_ready(OSC_ID_OSC0)) {
			osc_enable(OSC_ID_OSC0);
			osc_wait_ready(OSC_ID_OSC0);
		}
		break;
800080ae:	d7 03       	nop

	default:
		Assert(false);
		break;
	}
}
800080b0:	2f fd       	sub	sp,-4
800080b2:	e3 cd 80 80 	ldm	sp++,r7,pc
800080b6:	00 00       	add	r0,r0
800080b8:	80 00       	ld.sh	r0,r0[0x0]
800080ba:	7e 48       	ld.w	r8,pc[0x10]
800080bc:	80 00       	ld.sh	r0,r0[0x0]
800080be:	7d b8       	ld.w	r8,lr[0x6c]
800080c0:	80 00       	ld.sh	r0,r0[0x0]
800080c2:	7e c4       	ld.w	r4,pc[0x30]

800080c4 <pll_enable_config_defaults>:

static inline void pll_enable_config_defaults(unsigned int pll_id)
{
800080c4:	eb cd 40 80 	pushm	r7,lr
800080c8:	1a 97       	mov	r7,sp
800080ca:	20 2d       	sub	sp,8
800080cc:	ef 4c ff f8 	st.w	r7[-8],r12
	struct pll_config pllcfg;

	if (pll_is_locked(pll_id)) {
800080d0:	ee fc ff f8 	ld.w	r12,r7[-8]
800080d4:	f0 1f 00 15 	mcall	80008128 <pll_enable_config_defaults+0x64>
800080d8:	18 98       	mov	r8,r12
800080da:	58 08       	cp.w	r8,0
800080dc:	c2 11       	brne	8000811e <pll_enable_config_defaults+0x5a>
		return; // Pll already running
	}
	switch (pll_id) {
800080de:	ee f8 ff f8 	ld.w	r8,r7[-8]
800080e2:	58 08       	cp.w	r8,0
800080e4:	c0 c1       	brne	800080fc <pll_enable_config_defaults+0x38>
#ifdef CONFIG_PLL0_SOURCE
	case 0:
		pll_enable_source(CONFIG_PLL0_SOURCE);
800080e6:	30 0c       	mov	r12,0
800080e8:	f0 1f 00 11 	mcall	8000812c <pll_enable_config_defaults+0x68>
		pll_config_init(&pllcfg,
800080ec:	ee c8 00 04 	sub	r8,r7,4
800080f0:	30 89       	mov	r9,8
800080f2:	30 2a       	mov	r10,2
800080f4:	30 0b       	mov	r11,0
800080f6:	10 9c       	mov	r12,r8
800080f8:	f0 1f 00 0e 	mcall	80008130 <pll_enable_config_defaults+0x6c>
#endif
	default:
		Assert(false);
		break;
	}
	pll_enable(&pllcfg, pll_id);
800080fc:	ee c8 00 04 	sub	r8,r7,4
80008100:	ee fb ff f8 	ld.w	r11,r7[-8]
80008104:	10 9c       	mov	r12,r8
80008106:	f0 1f 00 0c 	mcall	80008134 <pll_enable_config_defaults+0x70>
	while (!pll_is_locked(pll_id));
8000810a:	ee fc ff f8 	ld.w	r12,r7[-8]
8000810e:	f0 1f 00 07 	mcall	80008128 <pll_enable_config_defaults+0x64>
80008112:	18 98       	mov	r8,r12
80008114:	ec 18 00 01 	eorl	r8,0x1
80008118:	5c 58       	castu.b	r8
8000811a:	cf 81       	brne	8000810a <pll_enable_config_defaults+0x46>
8000811c:	c0 28       	rjmp	80008120 <pll_enable_config_defaults+0x5c>
static inline void pll_enable_config_defaults(unsigned int pll_id)
{
	struct pll_config pllcfg;

	if (pll_is_locked(pll_id)) {
		return; // Pll already running
8000811e:	d7 03       	nop
		Assert(false);
		break;
	}
	pll_enable(&pllcfg, pll_id);
	while (!pll_is_locked(pll_id));
}
80008120:	2f ed       	sub	sp,-8
80008122:	e3 cd 80 80 	ldm	sp++,r7,pc
80008126:	00 00       	add	r0,r0
80008128:	80 00       	ld.sh	r0,r0[0x0]
8000812a:	80 2c       	ld.sh	r12,r0[0x4]
8000812c:	80 00       	ld.sh	r0,r0[0x0]
8000812e:	80 58       	ld.sh	r8,r0[0xa]
80008130:	80 00       	ld.sh	r0,r0[0x0]
80008132:	7f 20       	ld.w	r0,pc[0x48]
80008134:	80 00       	ld.sh	r0,r0[0x0]
80008136:	80 00       	ld.sh	r0,r0[0x0]

80008138 <genclk_config_defaults>:
	uint32_t ctrl;
};

static inline void genclk_config_defaults(struct genclk_config *cfg,
		unsigned int id)
{
80008138:	eb cd 40 80 	pushm	r7,lr
8000813c:	1a 97       	mov	r7,sp
8000813e:	20 2d       	sub	sp,8
80008140:	ef 4c ff fc 	st.w	r7[-4],r12
80008144:	ef 4b ff f8 	st.w	r7[-8],r11
	cfg->ctrl = 0;
80008148:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000814c:	30 09       	mov	r9,0
8000814e:	91 09       	st.w	r8[0x0],r9
}
80008150:	2f ed       	sub	sp,-8
80008152:	e3 cd 80 80 	ldm	sp++,r7,pc

80008156 <genclk_config_set_source>:
	AVR32_PM.gcctrl[id] = cfg->ctrl;
}

static inline void genclk_config_set_source(struct genclk_config *cfg,
		enum genclk_source src)
{
80008156:	eb cd 40 80 	pushm	r7,lr
8000815a:	1a 97       	mov	r7,sp
8000815c:	20 3d       	sub	sp,12
8000815e:	ef 4c ff f8 	st.w	r7[-8],r12
80008162:	ef 4b ff f4 	st.w	r7[-12],r11
	uint32_t mask;

	mask = AVR32_PM_GCCTRL_OSCSEL_MASK | AVR32_PM_GCCTRL_PLLSEL_MASK;
80008166:	30 38       	mov	r8,3
80008168:	ef 48 ff fc 	st.w	r7[-4],r8
	Assert(!(src & ~mask));

	cfg->ctrl = (cfg->ctrl & ~mask) | (src << AVR32_PM_GCCTRL_OSCSEL);
8000816c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008170:	70 09       	ld.w	r9,r8[0x0]
80008172:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008176:	5c d8       	com	r8
80008178:	10 69       	and	r9,r8
8000817a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000817e:	10 49       	or	r9,r8
80008180:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008184:	91 09       	st.w	r8[0x0],r9
}
80008186:	2f dd       	sub	sp,-12
80008188:	e3 cd 80 80 	ldm	sp++,r7,pc

8000818c <genclk_config_set_divider>:

static inline void genclk_config_set_divider(struct genclk_config *cfg,
		unsigned int divider)
{
8000818c:	eb cd 40 80 	pushm	r7,lr
80008190:	1a 97       	mov	r7,sp
80008192:	20 2d       	sub	sp,8
80008194:	ef 4c ff fc 	st.w	r7[-4],r12
80008198:	ef 4b ff f8 	st.w	r7[-8],r11
	Assert((divider > 0) && (divider <= GENCLK_DIV_MAX));

	/* Clear all the bits we're about to modify */
	cfg->ctrl &= ~(AVR32_PM_GCCTRL_DIVEN_MASK | AVR32_PM_GCCTRL_DIV_MASK);
8000819c:	ee f8 ff fc 	ld.w	r8,r7[-4]
800081a0:	70 08       	ld.w	r8,r8[0x0]
800081a2:	10 99       	mov	r9,r8
800081a4:	e0 19 00 ef 	andl	r9,0xef
800081a8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800081ac:	91 09       	st.w	r8[0x0],r9

	if (divider > 1) {
800081ae:	ee f8 ff f8 	ld.w	r8,r7[-8]
800081b2:	58 18       	cp.w	r8,1
800081b4:	e0 88 00 16 	brls	800081e0 <genclk_config_set_divider+0x54>
		cfg->ctrl |= 1U << AVR32_PM_GCCTRL_DIVEN;
800081b8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800081bc:	70 08       	ld.w	r8,r8[0x0]
800081be:	10 99       	mov	r9,r8
800081c0:	a5 a9       	sbr	r9,0x4
800081c2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800081c6:	91 09       	st.w	r8[0x0],r9
		cfg->ctrl |= ((divider >> 1) - 1) << AVR32_PM_GCCTRL_DIV;
800081c8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800081cc:	70 09       	ld.w	r9,r8[0x0]
800081ce:	ee f8 ff f8 	ld.w	r8,r7[-8]
800081d2:	a1 98       	lsr	r8,0x1
800081d4:	20 18       	sub	r8,1
800081d6:	a9 68       	lsl	r8,0x8
800081d8:	10 49       	or	r9,r8
800081da:	ee f8 ff fc 	ld.w	r8,r7[-4]
800081de:	91 09       	st.w	r8[0x0],r9
	}
}
800081e0:	2f ed       	sub	sp,-8
800081e2:	e3 cd 80 80 	ldm	sp++,r7,pc

800081e6 <genclk_enable>:

static inline void genclk_enable(const struct genclk_config *cfg,
		unsigned int id)
{
800081e6:	eb cd 40 80 	pushm	r7,lr
800081ea:	1a 97       	mov	r7,sp
800081ec:	20 2d       	sub	sp,8
800081ee:	ef 4c ff fc 	st.w	r7[-4],r12
800081f2:	ef 4b ff f8 	st.w	r7[-8],r11
	AVR32_PM.gcctrl[id] = cfg->ctrl | (1U << AVR32_PM_GCCTRL_CEN);
800081f6:	fe 78 0c 00 	mov	r8,-62464
800081fa:	ee f9 ff f8 	ld.w	r9,r7[-8]
800081fe:	ee fa ff fc 	ld.w	r10,r7[-4]
80008202:	74 0a       	ld.w	r10,r10[0x0]
80008204:	a3 aa       	sbr	r10,0x2
80008206:	2e 89       	sub	r9,-24
80008208:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
}
8000820c:	2f ed       	sub	sp,-8
8000820e:	e3 cd 80 80 	ldm	sp++,r7,pc
80008212:	d7 03       	nop

80008214 <genclk_enable_source>:
{
	AVR32_PM.gcctrl[id] = 0;
}

static inline void genclk_enable_source(enum genclk_source src)
{
80008214:	eb cd 40 80 	pushm	r7,lr
80008218:	1a 97       	mov	r7,sp
8000821a:	20 1d       	sub	sp,4
8000821c:	ef 4c ff fc 	st.w	r7[-4],r12
	switch (src) {
80008220:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008224:	58 08       	cp.w	r8,0
80008226:	c0 40       	breq	8000822e <genclk_enable_source+0x1a>
80008228:	58 28       	cp.w	r8,2
8000822a:	c1 10       	breq	8000824c <genclk_enable_source+0x38>
8000822c:	c1 58       	rjmp	80008256 <genclk_enable_source+0x42>
#ifdef BOARD_OSC0_HZ
	case GENCLK_SRC_OSC0:
		if (!osc_is_ready(OSC_ID_OSC0)) {
8000822e:	30 0c       	mov	r12,0
80008230:	f0 1f 00 0b 	mcall	8000825c <genclk_enable_source+0x48>
80008234:	18 98       	mov	r8,r12
80008236:	ec 18 00 01 	eorl	r8,0x1
8000823a:	5c 58       	castu.b	r8
8000823c:	c0 c0       	breq	80008254 <genclk_enable_source+0x40>
			osc_enable(OSC_ID_OSC0);
8000823e:	30 0c       	mov	r12,0
80008240:	f0 1f 00 08 	mcall	80008260 <genclk_enable_source+0x4c>
			osc_wait_ready(OSC_ID_OSC0);
80008244:	30 0c       	mov	r12,0
80008246:	f0 1f 00 08 	mcall	80008264 <genclk_enable_source+0x50>
		}
		break;
8000824a:	c0 68       	rjmp	80008256 <genclk_enable_source+0x42>
		break;
#endif

#ifdef CONFIG_PLL0_SOURCE
	case GENCLK_SRC_PLL0: {
		pll_enable_config_defaults(0);
8000824c:	30 0c       	mov	r12,0
8000824e:	f0 1f 00 07 	mcall	80008268 <genclk_enable_source+0x54>
80008252:	c0 28       	rjmp	80008256 <genclk_enable_source+0x42>
	case GENCLK_SRC_OSC0:
		if (!osc_is_ready(OSC_ID_OSC0)) {
			osc_enable(OSC_ID_OSC0);
			osc_wait_ready(OSC_ID_OSC0);
		}
		break;
80008254:	d7 03       	nop

	default:
		Assert(false);
		break;
	}
}
80008256:	2f fd       	sub	sp,-4
80008258:	e3 cd 80 80 	ldm	sp++,r7,pc
8000825c:	80 00       	ld.sh	r0,r0[0x0]
8000825e:	7e 48       	ld.w	r8,pc[0x10]
80008260:	80 00       	ld.sh	r0,r0[0x0]
80008262:	7d b8       	ld.w	r8,lr[0x6c]
80008264:	80 00       	ld.sh	r0,r0[0x0]
80008266:	7e c4       	ld.w	r4,pc[0x30]
80008268:	80 00       	ld.sh	r0,r0[0x0]
8000826a:	80 c4       	ld.uh	r4,r0[0x8]

8000826c <genclk_enable_config>:
 * \param id      The ID of the generic clock.
 * \param src     The source clock of the generic clock.
 * \param divider The divider used to generate the generic clock.
 */
static inline void genclk_enable_config(unsigned int id, enum genclk_source src, unsigned int divider)
{
8000826c:	eb cd 40 80 	pushm	r7,lr
80008270:	1a 97       	mov	r7,sp
80008272:	20 4d       	sub	sp,16
80008274:	ef 4c ff f8 	st.w	r7[-8],r12
80008278:	ef 4b ff f4 	st.w	r7[-12],r11
8000827c:	ef 4a ff f0 	st.w	r7[-16],r10
	struct genclk_config gcfg;

	genclk_config_defaults(&gcfg, id);
80008280:	ee c8 00 04 	sub	r8,r7,4
80008284:	ee fb ff f8 	ld.w	r11,r7[-8]
80008288:	10 9c       	mov	r12,r8
8000828a:	f0 1f 00 10 	mcall	800082c8 <genclk_enable_config+0x5c>
	genclk_enable_source(src);
8000828e:	ee fc ff f4 	ld.w	r12,r7[-12]
80008292:	f0 1f 00 0f 	mcall	800082cc <genclk_enable_config+0x60>
	genclk_config_set_source(&gcfg, src);
80008296:	ee c8 00 04 	sub	r8,r7,4
8000829a:	ee fb ff f4 	ld.w	r11,r7[-12]
8000829e:	10 9c       	mov	r12,r8
800082a0:	f0 1f 00 0c 	mcall	800082d0 <genclk_enable_config+0x64>
	genclk_config_set_divider(&gcfg, divider);
800082a4:	ee c8 00 04 	sub	r8,r7,4
800082a8:	ee fb ff f0 	ld.w	r11,r7[-16]
800082ac:	10 9c       	mov	r12,r8
800082ae:	f0 1f 00 0a 	mcall	800082d4 <genclk_enable_config+0x68>
	genclk_enable(&gcfg, id);
800082b2:	ee c8 00 04 	sub	r8,r7,4
800082b6:	ee fb ff f8 	ld.w	r11,r7[-8]
800082ba:	10 9c       	mov	r12,r8
800082bc:	f0 1f 00 07 	mcall	800082d8 <genclk_enable_config+0x6c>
}
800082c0:	2f cd       	sub	sp,-16
800082c2:	e3 cd 80 80 	ldm	sp++,r7,pc
800082c6:	00 00       	add	r0,r0
800082c8:	80 00       	ld.sh	r0,r0[0x0]
800082ca:	81 38       	st.w	r0[0xc],r8
800082cc:	80 00       	ld.sh	r0,r0[0x0]
800082ce:	82 14       	ld.sh	r4,r1[0x2]
800082d0:	80 00       	ld.sh	r0,r0[0x0]
800082d2:	81 56       	st.w	r0[0x14],r6
800082d4:	80 00       	ld.sh	r0,r0[0x0]
800082d6:	81 8c       	st.w	r0[0x20],r12
800082d8:	80 00       	ld.sh	r0,r0[0x0]
800082da:	81 e6       	st.w	r0[0x38],r6

800082dc <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern bool sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
800082dc:	eb cd 40 80 	pushm	r7,lr
800082e0:	1a 97       	mov	r7,sp
		return BOARD_OSC0_HZ;
#endif

#ifdef CONFIG_PLL0_SOURCE
	case SYSCLK_SRC_PLL0:
		return pll_get_default_rate(0);
800082e2:	30 0c       	mov	r12,0
800082e4:	f0 1f 00 04 	mcall	800082f4 <sysclk_get_main_hz+0x18>
800082e8:	18 98       	mov	r8,r12
800082ea:	a3 78       	lsl	r8,0x3
800082ec:	a1 98       	lsr	r8,0x1

	default:
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
800082ee:	10 9c       	mov	r12,r8
800082f0:	e3 cd 80 80 	ldm	sp++,r7,pc
800082f4:	80 00       	ld.sh	r0,r0[0x0]
800082f6:	7e 8e       	ld.w	lr,pc[0x20]

800082f8 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
800082f8:	eb cd 40 80 	pushm	r7,lr
800082fc:	1a 97       	mov	r7,sp
	return sysclk_get_main_hz() >> CONFIG_SYSCLK_CPU_DIV;
800082fe:	f0 1f 00 04 	mcall	8000830c <sysclk_get_cpu_hz+0x14>
80008302:	18 98       	mov	r8,r12
}
80008304:	10 9c       	mov	r12,r8
80008306:	e3 cd 80 80 	ldm	sp++,r7,pc
8000830a:	00 00       	add	r0,r0
8000830c:	80 00       	ld.sh	r0,r0[0x0]
8000830e:	82 dc       	ld.uh	r12,r1[0xa]

80008310 <sysclk_enable_hsb_module>:
/**
 * \brief Enable a module clock derived from the HSB clock
 * \param index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_enable_hsb_module(unsigned int index)
{
80008310:	eb cd 40 80 	pushm	r7,lr
80008314:	1a 97       	mov	r7,sp
80008316:	20 1d       	sub	sp,4
80008318:	ef 4c ff fc 	st.w	r7[-4],r12
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_HSB, index);
8000831c:	ee fb ff fc 	ld.w	r11,r7[-4]
80008320:	30 1c       	mov	r12,1
80008322:	f0 1f 00 03 	mcall	8000832c <sysclk_enable_hsb_module+0x1c>
}
80008326:	2f fd       	sub	sp,-4
80008328:	e3 cd 80 80 	ldm	sp++,r7,pc
8000832c:	80 00       	ld.sh	r0,r0[0x0]
8000832e:	84 04       	ld.sh	r4,r2[0x0]

80008330 <sysclk_set_prescalers>:
 * \param pba_shift The PBA clock will be divided by \f$2^{pba\_shift}\f$
 * \param pbb_shift The PBB clock will be divided by \f$2^{pbb\_shift}\f$
 */
static inline void sysclk_set_prescalers(unsigned int cpu_shift,
		unsigned int pba_shift, unsigned int pbb_shift)
{
80008330:	eb cd 40 80 	pushm	r7,lr
80008334:	1a 97       	mov	r7,sp
80008336:	20 4d       	sub	sp,16
80008338:	ef 4c ff f8 	st.w	r7[-8],r12
8000833c:	ef 4b ff f4 	st.w	r7[-12],r11
80008340:	ef 4a ff f0 	st.w	r7[-16],r10
	uint32_t cksel = 0;
80008344:	30 08       	mov	r8,0
80008346:	ef 48 ff fc 	st.w	r7[-4],r8

	Assert(cpu_shift <= pba_shift);
	Assert(cpu_shift <= pbb_shift);

	if (cpu_shift > 0)
8000834a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000834e:	58 08       	cp.w	r8,0
80008350:	c0 70       	breq	8000835e <sysclk_set_prescalers+0x2e>
		cksel = ((cpu_shift - 1) << AVR32_PM_CKSEL_CPUSEL)
80008352:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008356:	20 18       	sub	r8,1
80008358:	a7 b8       	sbr	r8,0x7
8000835a:	ef 48 ff fc 	st.w	r7[-4],r8
				| (1U << AVR32_PM_CKSEL_CPUDIV);

	if (pba_shift > 0)
8000835e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008362:	58 08       	cp.w	r8,0
80008364:	c0 d0       	breq	8000837e <sysclk_set_prescalers+0x4e>
		cksel |= ((pba_shift - 1) << AVR32_PM_CKSEL_PBASEL)
80008366:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000836a:	20 18       	sub	r8,1
8000836c:	f0 09 15 10 	lsl	r9,r8,0x10
80008370:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008374:	f3 e8 10 08 	or	r8,r9,r8
80008378:	b7 b8       	sbr	r8,0x17
8000837a:	ef 48 ff fc 	st.w	r7[-4],r8
				| (1U << AVR32_PM_CKSEL_PBADIV);

	if (pbb_shift > 0)
8000837e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80008382:	58 08       	cp.w	r8,0
80008384:	c0 d0       	breq	8000839e <sysclk_set_prescalers+0x6e>
		cksel |= ((pbb_shift - 1) << AVR32_PM_CKSEL_PBBSEL)
80008386:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000838a:	20 18       	sub	r8,1
8000838c:	f0 09 15 18 	lsl	r9,r8,0x18
80008390:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008394:	f3 e8 10 08 	or	r8,r9,r8
80008398:	bf b8       	sbr	r8,0x1f
8000839a:	ef 48 ff fc 	st.w	r7[-4],r8
				| (1U << AVR32_PM_CKSEL_PBBDIV);

	AVR32_PM.cksel = cksel;
8000839e:	fe 78 0c 00 	mov	r8,-62464
800083a2:	ee f9 ff fc 	ld.w	r9,r7[-4]
800083a6:	91 19       	st.w	r8[0x4],r9
}
800083a8:	2f cd       	sub	sp,-16
800083aa:	e3 cd 80 80 	ldm	sp++,r7,pc
800083ae:	d7 03       	nop

800083b0 <sysclk_set_source>:
 *
 * \param src The new system clock source. Must be one of the constants
 * from the <em>System Clock Sources</em> section.
 */
static inline void sysclk_set_source(uint_fast8_t src)
{
800083b0:	eb cd 40 80 	pushm	r7,lr
800083b4:	1a 97       	mov	r7,sp
800083b6:	20 3d       	sub	sp,12
800083b8:	ef 4c ff f4 	st.w	r7[-12],r12
	irqflags_t flags;
	uint32_t   mcctrl;

	Assert(src <= SYSCLK_SRC_PLL0);

	flags = cpu_irq_save();
800083bc:	f0 1f 00 10 	mcall	800083fc <sysclk_set_source+0x4c>
800083c0:	18 98       	mov	r8,r12
800083c2:	ef 48 ff f8 	st.w	r7[-8],r8
	mcctrl = AVR32_PM.mcctrl & ~AVR32_PM_MCCTRL_MCSEL_MASK;
800083c6:	fe 78 0c 00 	mov	r8,-62464
800083ca:	70 08       	ld.w	r8,r8[0x0]
800083cc:	e0 18 ff fc 	andl	r8,0xfffc
800083d0:	ef 48 ff fc 	st.w	r7[-4],r8
	mcctrl |= src << AVR32_PM_MCCTRL_MCSEL;
800083d4:	ee f9 ff fc 	ld.w	r9,r7[-4]
800083d8:	ee f8 ff f4 	ld.w	r8,r7[-12]
800083dc:	f3 e8 10 08 	or	r8,r9,r8
800083e0:	ef 48 ff fc 	st.w	r7[-4],r8
	AVR32_PM.mcctrl = mcctrl;
800083e4:	fe 78 0c 00 	mov	r8,-62464
800083e8:	ee f9 ff fc 	ld.w	r9,r7[-4]
800083ec:	91 09       	st.w	r8[0x0],r9
	cpu_irq_restore(flags);
800083ee:	ee fc ff f8 	ld.w	r12,r7[-8]
800083f2:	f0 1f 00 04 	mcall	80008400 <sysclk_set_source+0x50>
}
800083f6:	2f dd       	sub	sp,-12
800083f8:	e3 cd 80 80 	ldm	sp++,r7,pc
800083fc:	80 00       	ld.sh	r0,r0[0x0]
800083fe:	7d 50       	ld.w	r0,lr[0x54]
80008400:	80 00       	ld.sh	r0,r0[0x0]
80008402:	7d 90       	ld.w	r0,lr[0x64]

80008404 <sysclk_priv_enable_module>:
 * \param bus_id Bus index, given by the \c AVR32_PM_CLK_GRP_xxx definitions.
 * \param module_index Index of the module to be enabled. This is the
 * bit number in the corresponding xxxMASK register.
 */
void sysclk_priv_enable_module(unsigned int bus_id, unsigned int module_index)
{
80008404:	eb cd 40 80 	pushm	r7,lr
80008408:	1a 97       	mov	r7,sp
8000840a:	20 4d       	sub	sp,16
8000840c:	ef 4c ff f4 	st.w	r7[-12],r12
80008410:	ef 4b ff f0 	st.w	r7[-16],r11
	irqflags_t flags;
	uint32_t   mask;

	flags = cpu_irq_save();
80008414:	f0 1f 00 17 	mcall	80008470 <sysclk_priv_enable_module+0x6c>
80008418:	18 98       	mov	r8,r12
8000841a:	ef 48 ff f8 	st.w	r7[-8],r8

	/*
	 * Poll MSKRDY before changing mask rather than after, as it's
	 * highly unlikely to actually be cleared at this point.
	 */
	while (!(AVR32_PM.poscsr & (1U << AVR32_PM_POSCSR_MSKRDY))) {
8000841e:	fe 78 0c 00 	mov	r8,-62464
80008422:	71 58       	ld.w	r8,r8[0x54]
80008424:	e2 18 00 40 	andl	r8,0x40,COH
80008428:	cf b0       	breq	8000841e <sysclk_priv_enable_module+0x1a>
		/* Do nothing */
	}

	/* Enable the clock */
	mask = *(&AVR32_PM.cpumask + bus_id);
8000842a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000842e:	a3 68       	lsl	r8,0x2
80008430:	e0 28 f3 f8 	sub	r8,62456
80008434:	70 08       	ld.w	r8,r8[0x0]
80008436:	ef 48 ff fc 	st.w	r7[-4],r8
	mask |= 1U << module_index;
8000843a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000843e:	30 19       	mov	r9,1
80008440:	f2 08 09 48 	lsl	r8,r9,r8
80008444:	ee f9 ff fc 	ld.w	r9,r7[-4]
80008448:	f3 e8 10 08 	or	r8,r9,r8
8000844c:	ef 48 ff fc 	st.w	r7[-4],r8
	*(&AVR32_PM.cpumask + bus_id) = mask;
80008450:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008454:	a3 68       	lsl	r8,0x2
80008456:	e0 28 f3 f8 	sub	r8,62456
8000845a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000845e:	91 09       	st.w	r8[0x0],r9

	cpu_irq_restore(flags);
80008460:	ee fc ff f8 	ld.w	r12,r7[-8]
80008464:	f0 1f 00 04 	mcall	80008474 <sysclk_priv_enable_module+0x70>
}
80008468:	2f cd       	sub	sp,-16
8000846a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000846e:	00 00       	add	r0,r0
80008470:	80 00       	ld.sh	r0,r0[0x0]
80008472:	7d 50       	ld.w	r0,lr[0x54]
80008474:	80 00       	ld.sh	r0,r0[0x0]
80008476:	7d 90       	ld.w	r0,lr[0x64]

80008478 <sysclk_enable_pbb_module>:
/**
 * \brief Enable a module clock derived from the PBB clock
 * \param index Index of the module clock in the PBBMASK register
 */
void sysclk_enable_pbb_module(unsigned int index)
{
80008478:	eb cd 40 80 	pushm	r7,lr
8000847c:	1a 97       	mov	r7,sp
8000847e:	20 2d       	sub	sp,8
80008480:	ef 4c ff f8 	st.w	r7[-8],r12
	irqflags_t flags;

	/* Enable the bridge if necessary */
	flags = cpu_irq_save();
80008484:	f0 1f 00 0f 	mcall	800084c0 <sysclk_enable_pbb_module+0x48>
80008488:	18 98       	mov	r8,r12
8000848a:	ef 48 ff fc 	st.w	r7[-4],r8

	if (!sysclk_pbb_refcount)
8000848e:	48 e8       	lddpc	r8,800084c4 <sysclk_enable_pbb_module+0x4c>
80008490:	11 88       	ld.ub	r8,r8[0x0]
80008492:	58 08       	cp.w	r8,0
80008494:	c0 41       	brne	8000849c <sysclk_enable_pbb_module+0x24>
		sysclk_enable_hsb_module(SYSCLK_PBB_BRIDGE);
80008496:	30 2c       	mov	r12,2
80008498:	f0 1f 00 0c 	mcall	800084c8 <sysclk_enable_pbb_module+0x50>

	sysclk_pbb_refcount++;
8000849c:	48 a8       	lddpc	r8,800084c4 <sysclk_enable_pbb_module+0x4c>
8000849e:	11 88       	ld.ub	r8,r8[0x0]
800084a0:	2f f8       	sub	r8,-1
800084a2:	5c 58       	castu.b	r8
800084a4:	48 89       	lddpc	r9,800084c4 <sysclk_enable_pbb_module+0x4c>
800084a6:	b2 88       	st.b	r9[0x0],r8

	cpu_irq_restore(flags);
800084a8:	ee fc ff fc 	ld.w	r12,r7[-4]
800084ac:	f0 1f 00 08 	mcall	800084cc <sysclk_enable_pbb_module+0x54>

	/* Enable the module */
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_PBB, index);
800084b0:	ee fb ff f8 	ld.w	r11,r7[-8]
800084b4:	30 3c       	mov	r12,3
800084b6:	f0 1f 00 07 	mcall	800084d0 <sysclk_enable_pbb_module+0x58>
}
800084ba:	2f ed       	sub	sp,-8
800084bc:	e3 cd 80 80 	ldm	sp++,r7,pc
800084c0:	80 00       	ld.sh	r0,r0[0x0]
800084c2:	7d 50       	ld.w	r0,lr[0x54]
800084c4:	00 00       	add	r0,r0
800084c6:	07 ca       	ld.ub	r10,r3[0x4]
800084c8:	80 00       	ld.sh	r0,r0[0x0]
800084ca:	83 10       	st.w	r1[0x4],r0
800084cc:	80 00       	ld.sh	r0,r0[0x0]
800084ce:	7d 90       	ld.w	r0,lr[0x64]
800084d0:	80 00       	ld.sh	r0,r0[0x0]
800084d2:	84 04       	ld.sh	r4,r2[0x0]

800084d4 <sysclk_enable_usb>:
 * \pre The USB generic clock must be configured to 48MHz.
 * CONFIG_USBCLK_SOURCE and CONFIG_USBCLK_DIV must be defined with proper
 * configuration. The selected clock source must also be configured.
 */
void sysclk_enable_usb(void)
{
800084d4:	eb cd 40 80 	pushm	r7,lr
800084d8:	1a 97       	mov	r7,sp
	sysclk_enable_pbb_module(SYSCLK_USBB_REGS);
800084da:	30 1c       	mov	r12,1
800084dc:	f0 1f 00 06 	mcall	800084f4 <sysclk_enable_usb+0x20>
	sysclk_enable_hsb_module(SYSCLK_USBB_DATA);
800084e0:	30 3c       	mov	r12,3
800084e2:	f0 1f 00 06 	mcall	800084f8 <sysclk_enable_usb+0x24>
	genclk_enable_config(AVR32_PM_GCLK_USBB, CONFIG_USBCLK_SOURCE, CONFIG_USBCLK_DIV);
800084e6:	30 1a       	mov	r10,1
800084e8:	30 2b       	mov	r11,2
800084ea:	30 4c       	mov	r12,4
800084ec:	f0 1f 00 04 	mcall	800084fc <sysclk_enable_usb+0x28>
}
800084f0:	e3 cd 80 80 	ldm	sp++,r7,pc
800084f4:	80 00       	ld.sh	r0,r0[0x0]
800084f6:	84 78       	ld.sh	r8,r2[0xe]
800084f8:	80 00       	ld.sh	r0,r0[0x0]
800084fa:	83 10       	st.w	r1[0x4],r0
800084fc:	80 00       	ld.sh	r0,r0[0x0]
800084fe:	82 6c       	ld.sh	r12,r1[0xc]

80008500 <sysclk_init>:
}
#endif // CONFIG_USBCLK_SOURCE


void sysclk_init(void)
{
80008500:	eb cd 40 80 	pushm	r7,lr
80008504:	1a 97       	mov	r7,sp
	/* Set up system clock dividers if different from defaults */
	if ((CONFIG_SYSCLK_CPU_DIV > 0) || (CONFIG_SYSCLK_PBA_DIV > 0) ||
			(CONFIG_SYSCLK_PBB_DIV > 0)) {
		sysclk_set_prescalers(CONFIG_SYSCLK_CPU_DIV,
80008506:	30 0a       	mov	r10,0
80008508:	30 2b       	mov	r11,2
8000850a:	30 0c       	mov	r12,0
8000850c:	f0 1f 00 08 	mcall	8000852c <sysclk_init+0x2c>
		break;
#endif

#ifdef CONFIG_PLL0_SOURCE
	case SYSCLK_SRC_PLL0: {
		pll_enable_config_defaults(0);
80008510:	30 0c       	mov	r12,0
80008512:	f0 1f 00 08 	mcall	80008530 <sysclk_init+0x30>
		// Set a flash wait state depending on the new cpu frequency.
		flash_set_bus_freq(sysclk_get_cpu_hz());
80008516:	f0 1f 00 08 	mcall	80008534 <sysclk_init+0x34>
8000851a:	18 98       	mov	r8,r12
8000851c:	10 9c       	mov	r12,r8
8000851e:	f0 1f 00 07 	mcall	80008538 <sysclk_init+0x38>
		sysclk_set_source(SYSCLK_SRC_PLL0);
80008522:	30 2c       	mov	r12,2
80008524:	f0 1f 00 06 	mcall	8000853c <sysclk_init+0x3c>

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = true;
#endif
}
80008528:	e3 cd 80 80 	ldm	sp++,r7,pc
8000852c:	80 00       	ld.sh	r0,r0[0x0]
8000852e:	83 30       	st.w	r1[0xc],r0
80008530:	80 00       	ld.sh	r0,r0[0x0]
80008532:	80 c4       	ld.uh	r4,r0[0x8]
80008534:	80 00       	ld.sh	r0,r0[0x0]
80008536:	82 f8       	ld.uh	r8,r1[0xe]
80008538:	80 00       	ld.sh	r0,r0[0x0]
8000853a:	3f ac       	mov	r12,-6
8000853c:	80 00       	ld.sh	r0,r0[0x0]
8000853e:	83 b0       	st.w	r1[0x2c],r0

80008540 <getBaudDiv>:
/** The SPI mutex. */
xSemaphoreHandle xSPIMutex;
#endif

int16_t getBaudDiv(const uint32_t baudrate, uint32_t pb_hz)
{
80008540:	eb cd 40 80 	pushm	r7,lr
80008544:	1a 97       	mov	r7,sp
80008546:	20 3d       	sub	sp,12
80008548:	ef 4c ff f8 	st.w	r7[-8],r12
8000854c:	ef 4b ff f4 	st.w	r7[-12],r11
	uint32_t baudDiv = div_ceil(pb_hz, baudrate);
80008550:	ee f9 ff f4 	ld.w	r9,r7[-12]
80008554:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008558:	f2 08 00 08 	add	r8,r9,r8
8000855c:	20 18       	sub	r8,1
8000855e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80008562:	f0 09 0d 08 	divu	r8,r8,r9
80008566:	ef 48 ff fc 	st.w	r7[-4],r8

	if (baudDiv <= 0 || baudDiv > 255) {
8000856a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000856e:	58 08       	cp.w	r8,0
80008570:	c0 70       	breq	8000857e <getBaudDiv+0x3e>
80008572:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008576:	e0 48 00 ff 	cp.w	r8,255
8000857a:	e0 88 00 04 	brls	80008582 <getBaudDiv+0x42>
		return -1;
8000857e:	3f f8       	mov	r8,-1
80008580:	c0 48       	rjmp	80008588 <getBaudDiv+0x48>
	}

	return baudDiv;
80008582:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008586:	5c 88       	casts.h	r8
}
80008588:	10 9c       	mov	r12,r8
8000858a:	2f dd       	sub	sp,-12
8000858c:	e3 cd 80 80 	ldm	sp++,r7,pc

80008590 <spi_initMaster>:
	return SPI_OK;
}

spi_status_t spi_initMaster(volatile avr32_spi_t *spi,
		const spi_options_t *options)
{
80008590:	eb cd 40 80 	pushm	r7,lr
80008594:	1a 97       	mov	r7,sp
80008596:	20 3d       	sub	sp,12
80008598:	ef 4c ff f8 	st.w	r7[-8],r12
8000859c:	ef 4b ff f4 	st.w	r7[-12],r11
	u_avr32_spi_mr_t u_avr32_spi_mr;

	if (options->modfdis > 1) {
800085a0:	ee f8 ff f4 	ld.w	r8,r7[-12]
800085a4:	f1 39 00 0d 	ld.ub	r9,r8[13]
800085a8:	30 18       	mov	r8,1
800085aa:	f0 09 18 00 	cp.b	r9,r8
800085ae:	e0 88 00 04 	brls	800085b6 <spi_initMaster+0x26>
		return SPI_ERROR_ARGUMENT;
800085b2:	30 28       	mov	r8,2
800085b4:	c3 48       	rjmp	8000861c <spi_initMaster+0x8c>
	}

	/* Reset. */
	spi->cr = AVR32_SPI_CR_SWRST_MASK;
800085b6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800085ba:	e0 69 00 80 	mov	r9,128
800085be:	91 09       	st.w	r8[0x0],r9

	/* Master Mode. */
	u_avr32_spi_mr.mr = spi->mr;
800085c0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800085c4:	70 18       	ld.w	r8,r8[0x4]
800085c6:	ef 48 ff fc 	st.w	r7[-4],r8
	u_avr32_spi_mr.MR.mstr = 1;
800085ca:	ee f8 ff fc 	ld.w	r8,r7[-4]
800085ce:	30 19       	mov	r9,1
800085d0:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
800085d4:	ef 48 ff fc 	st.w	r7[-4],r8
	u_avr32_spi_mr.MR.modfdis = options->modfdis;
800085d8:	ee f8 ff f4 	ld.w	r8,r7[-12]
800085dc:	f1 38 00 0d 	ld.ub	r8,r8[13]
800085e0:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800085e4:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800085e8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800085ec:	f1 d9 d0 81 	bfins	r8,r9,0x4,0x1
800085f0:	ef 48 ff fc 	st.w	r7[-4],r8
	u_avr32_spi_mr.MR.llb = 0;
800085f4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800085f8:	30 09       	mov	r9,0
800085fa:	f1 d9 d0 e1 	bfins	r8,r9,0x7,0x1
800085fe:	ef 48 ff fc 	st.w	r7[-4],r8
	u_avr32_spi_mr.MR.pcs = (1 << AVR32_SPI_MR_PCS_SIZE) - 1;
80008602:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008606:	30 f9       	mov	r9,15
80008608:	f1 d9 d2 04 	bfins	r8,r9,0x10,0x4
8000860c:	ef 48 ff fc 	st.w	r7[-4],r8
	spi->mr = u_avr32_spi_mr.mr;
80008610:	ee f9 ff fc 	ld.w	r9,r7[-4]
80008614:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008618:	91 19       	st.w	r8[0x4],r9

	return SPI_OK;
8000861a:	30 08       	mov	r8,0
}
8000861c:	10 9c       	mov	r12,r8
8000861e:	2f dd       	sub	sp,-12
80008620:	e3 cd 80 80 	ldm	sp++,r7,pc

80008624 <spi_selectionMode>:

spi_status_t spi_selectionMode(volatile avr32_spi_t *spi,
		uint8_t variable_ps,
		uint8_t pcs_decode,
		uint8_t delay)
{
80008624:	eb cd 40 80 	pushm	r7,lr
80008628:	1a 97       	mov	r7,sp
8000862a:	20 5d       	sub	sp,20
8000862c:	ef 4c ff f8 	st.w	r7[-8],r12
80008630:	12 98       	mov	r8,r9
80008632:	16 99       	mov	r9,r11
80008634:	ef 69 ff f4 	st.b	r7[-12],r9
80008638:	14 99       	mov	r9,r10
8000863a:	ef 69 ff f0 	st.b	r7[-16],r9
8000863e:	ef 68 ff ec 	st.b	r7[-20],r8
	u_avr32_spi_mr_t u_avr32_spi_mr;

	if (variable_ps > 1 ||
80008642:	ef 39 ff f4 	ld.ub	r9,r7[-12]
80008646:	30 18       	mov	r8,1
80008648:	f0 09 18 00 	cp.b	r9,r8
8000864c:	e0 8b 00 09 	brhi	8000865e <spi_selectionMode+0x3a>
80008650:	ef 39 ff f0 	ld.ub	r9,r7[-16]
80008654:	30 18       	mov	r8,1
80008656:	f0 09 18 00 	cp.b	r9,r8
8000865a:	e0 88 00 04 	brls	80008662 <spi_selectionMode+0x3e>
			pcs_decode > 1) {
		return SPI_ERROR_ARGUMENT;
8000865e:	30 28       	mov	r8,2
80008660:	c2 88       	rjmp	800086b0 <spi_selectionMode+0x8c>
	}

	u_avr32_spi_mr.mr = spi->mr;
80008662:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008666:	70 18       	ld.w	r8,r8[0x4]
80008668:	ef 48 ff fc 	st.w	r7[-4],r8
	u_avr32_spi_mr.MR.ps = variable_ps;
8000866c:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80008670:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80008674:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80008678:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000867c:	f1 d9 d0 21 	bfins	r8,r9,0x1,0x1
80008680:	ef 48 ff fc 	st.w	r7[-4],r8
	u_avr32_spi_mr.MR.pcsdec = pcs_decode;
80008684:	ef 38 ff f0 	ld.ub	r8,r7[-16]
80008688:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000868c:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80008690:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008694:	f1 d9 d0 41 	bfins	r8,r9,0x2,0x1
80008698:	ef 48 ff fc 	st.w	r7[-4],r8
	u_avr32_spi_mr.MR.dlybcs = delay;
8000869c:	ef 38 ff ec 	ld.ub	r8,r7[-20]
800086a0:	ef 68 ff fc 	st.b	r7[-4],r8
	spi->mr = u_avr32_spi_mr.mr;
800086a4:	ee f9 ff fc 	ld.w	r9,r7[-4]
800086a8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800086ac:	91 19       	st.w	r8[0x4],r9

	return SPI_OK;
800086ae:	30 08       	mov	r8,0
}
800086b0:	10 9c       	mov	r12,r8
800086b2:	2f bd       	sub	sp,-20
800086b4:	e3 cd 80 80 	ldm	sp++,r7,pc

800086b8 <spi_selectChip>:

spi_status_t spi_selectChip(volatile avr32_spi_t *spi, uint8_t chip)
{
800086b8:	eb cd 40 80 	pushm	r7,lr
800086bc:	1a 97       	mov	r7,sp
800086be:	20 2d       	sub	sp,8
800086c0:	ef 4c ff fc 	st.w	r7[-4],r12
800086c4:	16 98       	mov	r8,r11
800086c6:	ef 68 ff f8 	st.b	r7[-8],r8
	while (pdFALSE == xSemaphoreTake(xSPIMutex, 20)) {
	}
#endif

	/* Assert all lines; no peripheral is selected. */
	spi->mr |= AVR32_SPI_MR_PCS_MASK;
800086ca:	ee f8 ff fc 	ld.w	r8,r7[-4]
800086ce:	70 18       	ld.w	r8,r8[0x4]
800086d0:	10 99       	mov	r9,r8
800086d2:	ea 19 00 0f 	orh	r9,0xf
800086d6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800086da:	91 19       	st.w	r8[0x4],r9

	if (spi->mr & AVR32_SPI_MR_PCSDEC_MASK) {
800086dc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800086e0:	70 18       	ld.w	r8,r8[0x4]
800086e2:	e2 18 00 04 	andl	r8,0x4,COH
800086e6:	c1 90       	breq	80008718 <spi_selectChip+0x60>
		/* The signal is decoded; allow up to 15 chips. */
		if (chip > 14) {
800086e8:	ef 39 ff f8 	ld.ub	r9,r7[-8]
800086ec:	30 e8       	mov	r8,14
800086ee:	f0 09 18 00 	cp.b	r9,r8
800086f2:	e0 88 00 04 	brls	800086fa <spi_selectChip+0x42>
			return SPI_ERROR_ARGUMENT;
800086f6:	30 28       	mov	r8,2
800086f8:	c2 88       	rjmp	80008748 <spi_selectChip+0x90>
		}

		spi->mr &= ~AVR32_SPI_MR_PCS_MASK |
800086fa:	ee f8 ff fc 	ld.w	r8,r7[-4]
800086fe:	70 19       	ld.w	r9,r8[0x4]
				(chip << AVR32_SPI_MR_PCS_OFFSET);
80008700:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80008704:	b1 68       	lsl	r8,0x10
		/* The signal is decoded; allow up to 15 chips. */
		if (chip > 14) {
			return SPI_ERROR_ARGUMENT;
		}

		spi->mr &= ~AVR32_SPI_MR_PCS_MASK |
80008706:	ea 18 ff f0 	orh	r8,0xfff0
8000870a:	e8 18 ff ff 	orl	r8,0xffff
8000870e:	10 69       	and	r9,r8
80008710:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008714:	91 19       	st.w	r8[0x4],r9
80008716:	c1 88       	rjmp	80008746 <spi_selectChip+0x8e>
				(chip << AVR32_SPI_MR_PCS_OFFSET);
	} else {
		if (chip > 3) {
80008718:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000871c:	30 38       	mov	r8,3
8000871e:	f0 09 18 00 	cp.b	r9,r8
80008722:	e0 88 00 04 	brls	8000872a <spi_selectChip+0x72>
			return SPI_ERROR_ARGUMENT;
80008726:	30 28       	mov	r8,2
80008728:	c1 08       	rjmp	80008748 <spi_selectChip+0x90>
		}

		spi->mr &= ~(1 << (AVR32_SPI_MR_PCS_OFFSET + chip));
8000872a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000872e:	70 19       	ld.w	r9,r8[0x4]
80008730:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80008734:	2f 08       	sub	r8,-16
80008736:	30 1a       	mov	r10,1
80008738:	f4 08 09 48 	lsl	r8,r10,r8
8000873c:	5c d8       	com	r8
8000873e:	10 69       	and	r9,r8
80008740:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008744:	91 19       	st.w	r8[0x4],r9
	}

	return SPI_OK;
80008746:	30 08       	mov	r8,0
}
80008748:	10 9c       	mov	r12,r8
8000874a:	2f ed       	sub	sp,-8
8000874c:	e3 cd 80 80 	ldm	sp++,r7,pc

80008750 <spi_unselectChip>:

spi_status_t spi_unselectChip(volatile avr32_spi_t *spi, uint8_t chip)
{
80008750:	eb cd 40 80 	pushm	r7,lr
80008754:	1a 97       	mov	r7,sp
80008756:	20 3d       	sub	sp,12
80008758:	ef 4c ff f8 	st.w	r7[-8],r12
8000875c:	16 98       	mov	r8,r11
8000875e:	ef 68 ff f4 	st.b	r7[-12],r8
	uint32_t timeout = SPI_TIMEOUT;
80008762:	e0 68 3a 98 	mov	r8,15000
80008766:	ef 48 ff fc 	st.w	r7[-4],r8

	while (!(spi->sr & AVR32_SPI_SR_TXEMPTY_MASK)) {
8000876a:	c0 f8       	rjmp	80008788 <spi_unselectChip+0x38>
		if (!timeout--) {
8000876c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008770:	58 08       	cp.w	r8,0
80008772:	5f 08       	sreq	r8
80008774:	5c 58       	castu.b	r8
80008776:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000877a:	20 19       	sub	r9,1
8000877c:	ef 49 ff fc 	st.w	r7[-4],r9
80008780:	58 08       	cp.w	r8,0
80008782:	c0 30       	breq	80008788 <spi_unselectChip+0x38>
			return SPI_ERROR_TIMEOUT;
80008784:	30 18       	mov	r8,1
80008786:	c1 68       	rjmp	800087b2 <spi_unselectChip+0x62>

spi_status_t spi_unselectChip(volatile avr32_spi_t *spi, uint8_t chip)
{
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TXEMPTY_MASK)) {
80008788:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000878c:	70 48       	ld.w	r8,r8[0x10]
8000878e:	e2 18 02 00 	andl	r8,0x200,COH
80008792:	ce d0       	breq	8000876c <spi_unselectChip+0x1c>
			return SPI_ERROR_TIMEOUT;
		}
	}

	/* Assert all lines; no peripheral is selected. */
	spi->mr |= AVR32_SPI_MR_PCS_MASK;
80008794:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008798:	70 18       	ld.w	r8,r8[0x4]
8000879a:	10 99       	mov	r9,r8
8000879c:	ea 19 00 0f 	orh	r9,0xf
800087a0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800087a4:	91 19       	st.w	r8[0x4],r9

	/* Last transfer, so de-assert the current NPCS if CSAAT is set. */
	spi->cr = AVR32_SPI_CR_LASTXFER_MASK;
800087a6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800087aa:	fc 19 01 00 	movh	r9,0x100
800087ae:	91 09       	st.w	r8[0x0],r9

#ifdef FREERTOS_USED
	xSemaphoreGive(xSPIMutex);
#endif

	return SPI_OK;
800087b0:	30 08       	mov	r8,0
}
800087b2:	10 9c       	mov	r12,r8
800087b4:	2f dd       	sub	sp,-12
800087b6:	e3 cd 80 80 	ldm	sp++,r7,pc
800087ba:	d7 03       	nop

800087bc <spi_setupChipReg>:

spi_status_t spi_setupChipReg(volatile avr32_spi_t *spi,
		const spi_options_t *options,
		uint32_t pb_hz)
{
800087bc:	eb cd 40 80 	pushm	r7,lr
800087c0:	1a 97       	mov	r7,sp
800087c2:	20 5d       	sub	sp,20
800087c4:	ef 4c ff f4 	st.w	r7[-12],r12
800087c8:	ef 4b ff f0 	st.w	r7[-16],r11
800087cc:	ef 4a ff ec 	st.w	r7[-20],r10
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
800087d0:	ee f8 ff f0 	ld.w	r8,r7[-16]
800087d4:	f1 39 00 0c 	ld.ub	r9,r8[12]
800087d8:	30 38       	mov	r8,3
800087da:	f0 09 18 00 	cp.b	r9,r8
800087de:	e0 8b 00 1d 	brhi	80008818 <spi_setupChipReg+0x5c>
			options->stay_act > 1 ||
800087e2:	ee f8 ff f0 	ld.w	r8,r7[-16]
800087e6:	f1 39 00 0b 	ld.ub	r9,r8[11]
		const spi_options_t *options,
		uint32_t pb_hz)
{
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
800087ea:	30 18       	mov	r8,1
800087ec:	f0 09 18 00 	cp.b	r9,r8
800087f0:	e0 8b 00 14 	brhi	80008818 <spi_setupChipReg+0x5c>
			options->stay_act > 1 ||
			options->bits < 8 || options->bits > 16) {
800087f4:	ee f8 ff f0 	ld.w	r8,r7[-16]
800087f8:	f1 39 00 08 	ld.ub	r9,r8[8]
		const spi_options_t *options,
		uint32_t pb_hz)
{
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
800087fc:	30 78       	mov	r8,7
800087fe:	f0 09 18 00 	cp.b	r9,r8
80008802:	e0 88 00 0b 	brls	80008818 <spi_setupChipReg+0x5c>
			options->stay_act > 1 ||
			options->bits < 8 || options->bits > 16) {
80008806:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000880a:	f1 39 00 08 	ld.ub	r9,r8[8]
		const spi_options_t *options,
		uint32_t pb_hz)
{
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
8000880e:	31 08       	mov	r8,16
80008810:	f0 09 18 00 	cp.b	r9,r8
80008814:	e0 88 00 04 	brls	8000881c <spi_setupChipReg+0x60>
			options->stay_act > 1 ||
			options->bits < 8 || options->bits > 16) {
		return SPI_ERROR_ARGUMENT;
80008818:	30 28       	mov	r8,2
8000881a:	c8 d8       	rjmp	80008934 <spi_setupChipReg+0x178>
	}

	int baudDiv = getBaudDiv(options->baudrate, pb_hz);
8000881c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80008820:	70 18       	ld.w	r8,r8[0x4]
80008822:	ee fb ff ec 	ld.w	r11,r7[-20]
80008826:	10 9c       	mov	r12,r8
80008828:	f0 1f 00 45 	mcall	8000893c <spi_setupChipReg+0x180>
8000882c:	18 98       	mov	r8,r12
8000882e:	ef 48 ff fc 	st.w	r7[-4],r8

	if (baudDiv < 0) {
80008832:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008836:	58 08       	cp.w	r8,0
80008838:	c0 34       	brge	8000883e <spi_setupChipReg+0x82>
		return SPI_ERROR_ARGUMENT;
8000883a:	30 28       	mov	r8,2
8000883c:	c7 c8       	rjmp	80008934 <spi_setupChipReg+0x178>
	}

	/* Will use CSR0 offsets; these are the same for CSR0 to CSR3. */
	u_avr32_spi_csr.csr = 0;
8000883e:	30 08       	mov	r8,0
80008840:	ef 48 ff f8 	st.w	r7[-8],r8
	u_avr32_spi_csr.CSR.cpol   = options->spi_mode >> 1;
80008844:	ee f8 ff f0 	ld.w	r8,r7[-16]
80008848:	f1 38 00 0c 	ld.ub	r8,r8[12]
8000884c:	a1 98       	lsr	r8,0x1
8000884e:	5c 58       	castu.b	r8
80008850:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80008854:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80008858:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000885c:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
80008860:	ef 48 ff f8 	st.w	r7[-8],r8
	u_avr32_spi_csr.CSR.ncpha  = (options->spi_mode & 0x1) ^ 0x1;
80008864:	ee f8 ff f0 	ld.w	r8,r7[-16]
80008868:	f1 38 00 0c 	ld.ub	r8,r8[12]
8000886c:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80008870:	5f 08       	sreq	r8
80008872:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80008876:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000887a:	f1 d9 d0 21 	bfins	r8,r9,0x1,0x1
8000887e:	ef 48 ff f8 	st.w	r7[-8],r8
	u_avr32_spi_csr.CSR.csaat  = options->stay_act;
80008882:	ee f8 ff f0 	ld.w	r8,r7[-16]
80008886:	f1 38 00 0b 	ld.ub	r8,r8[11]
8000888a:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000888e:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80008892:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008896:	f1 d9 d0 61 	bfins	r8,r9,0x3,0x1
8000889a:	ef 48 ff f8 	st.w	r7[-8],r8
	u_avr32_spi_csr.CSR.bits   = options->bits - 8;
8000889e:	ee f8 ff f0 	ld.w	r8,r7[-16]
800088a2:	f1 38 00 08 	ld.ub	r8,r8[8]
800088a6:	20 88       	sub	r8,8
800088a8:	5c 58       	castu.b	r8
800088aa:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
800088ae:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800088b2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800088b6:	f1 d9 d0 84 	bfins	r8,r9,0x4,0x4
800088ba:	ef 48 ff f8 	st.w	r7[-8],r8
	u_avr32_spi_csr.CSR.scbr   = baudDiv;
800088be:	ee f8 ff fc 	ld.w	r8,r7[-4]
800088c2:	5c 58       	castu.b	r8
800088c4:	ef 68 ff fa 	st.b	r7[-6],r8
	u_avr32_spi_csr.CSR.dlybs  = options->spck_delay;
800088c8:	ee f8 ff f0 	ld.w	r8,r7[-16]
800088cc:	f1 38 00 09 	ld.ub	r8,r8[9]
800088d0:	ef 68 ff f9 	st.b	r7[-7],r8
	u_avr32_spi_csr.CSR.dlybct = options->trans_delay;
800088d4:	ee f8 ff f0 	ld.w	r8,r7[-16]
800088d8:	f1 38 00 0a 	ld.ub	r8,r8[10]
800088dc:	ef 68 ff f8 	st.b	r7[-8],r8

	switch (options->reg) {
800088e0:	ee f8 ff f0 	ld.w	r8,r7[-16]
800088e4:	11 88       	ld.ub	r8,r8[0x0]
800088e6:	58 18       	cp.w	r8,1
800088e8:	c1 10       	breq	8000890a <spi_setupChipReg+0x14e>
800088ea:	e0 89 00 05 	brgt	800088f4 <spi_setupChipReg+0x138>
800088ee:	58 08       	cp.w	r8,0
800088f0:	c0 70       	breq	800088fe <spi_setupChipReg+0x142>
800088f2:	c1 e8       	rjmp	8000892e <spi_setupChipReg+0x172>
800088f4:	58 28       	cp.w	r8,2
800088f6:	c1 00       	breq	80008916 <spi_setupChipReg+0x15a>
800088f8:	58 38       	cp.w	r8,3
800088fa:	c1 40       	breq	80008922 <spi_setupChipReg+0x166>
800088fc:	c1 98       	rjmp	8000892e <spi_setupChipReg+0x172>
	case 0:
		spi->csr0 = u_avr32_spi_csr.csr;
800088fe:	ee f9 ff f8 	ld.w	r9,r7[-8]
80008902:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008906:	91 c9       	st.w	r8[0x30],r9
		break;
80008908:	c1 58       	rjmp	80008932 <spi_setupChipReg+0x176>

	case 1:
		spi->csr1 = u_avr32_spi_csr.csr;
8000890a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000890e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008912:	91 d9       	st.w	r8[0x34],r9
		break;
80008914:	c0 f8       	rjmp	80008932 <spi_setupChipReg+0x176>

	case 2:
		spi->csr2 = u_avr32_spi_csr.csr;
80008916:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000891a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000891e:	91 e9       	st.w	r8[0x38],r9
		break;
80008920:	c0 98       	rjmp	80008932 <spi_setupChipReg+0x176>

	case 3:
		spi->csr3 = u_avr32_spi_csr.csr;
80008922:	ee f9 ff f8 	ld.w	r9,r7[-8]
80008926:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000892a:	91 f9       	st.w	r8[0x3c],r9
		break;
8000892c:	c0 38       	rjmp	80008932 <spi_setupChipReg+0x176>

	default:
		return SPI_ERROR_ARGUMENT;
8000892e:	30 28       	mov	r8,2
80008930:	c0 28       	rjmp	80008934 <spi_setupChipReg+0x178>
			}
		}
	}
#endif

	return SPI_OK;
80008932:	30 08       	mov	r8,0
}
80008934:	10 9c       	mov	r12,r8
80008936:	2f bd       	sub	sp,-20
80008938:	e3 cd 80 80 	ldm	sp++,r7,pc
8000893c:	80 00       	ld.sh	r0,r0[0x0]
8000893e:	85 40       	st.w	r2[0x10],r0

80008940 <spi_enable>:

void spi_enable(volatile avr32_spi_t *spi)
{
80008940:	eb cd 40 80 	pushm	r7,lr
80008944:	1a 97       	mov	r7,sp
80008946:	20 1d       	sub	sp,4
80008948:	ef 4c ff fc 	st.w	r7[-4],r12
	spi->cr = AVR32_SPI_CR_SPIEN_MASK;
8000894c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008950:	30 19       	mov	r9,1
80008952:	91 09       	st.w	r8[0x0],r9
}
80008954:	2f fd       	sub	sp,-4
80008956:	e3 cd 80 80 	ldm	sp++,r7,pc

8000895a <spi_write>:
{
	return ((spi->sr & AVR32_SPI_SR_TDRE_MASK) != 0);
}

spi_status_t spi_write(volatile avr32_spi_t *spi, uint16_t data)
{
8000895a:	eb cd 40 80 	pushm	r7,lr
8000895e:	1a 97       	mov	r7,sp
80008960:	20 3d       	sub	sp,12
80008962:	ef 4c ff f8 	st.w	r7[-8],r12
80008966:	16 98       	mov	r8,r11
80008968:	ef 58 ff f4 	st.h	r7[-12],r8
	uint32_t timeout = SPI_TIMEOUT;
8000896c:	e0 68 3a 98 	mov	r8,15000
80008970:	ef 48 ff fc 	st.w	r7[-4],r8

	while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK)) {
80008974:	c0 f8       	rjmp	80008992 <spi_write+0x38>
		if (!timeout--) {
80008976:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000897a:	58 08       	cp.w	r8,0
8000897c:	5f 08       	sreq	r8
8000897e:	5c 58       	castu.b	r8
80008980:	ee f9 ff fc 	ld.w	r9,r7[-4]
80008984:	20 19       	sub	r9,1
80008986:	ef 49 ff fc 	st.w	r7[-4],r9
8000898a:	58 08       	cp.w	r8,0
8000898c:	c0 30       	breq	80008992 <spi_write+0x38>
			return SPI_ERROR_TIMEOUT;
8000898e:	30 18       	mov	r8,1
80008990:	c0 d8       	rjmp	800089aa <spi_write+0x50>

spi_status_t spi_write(volatile avr32_spi_t *spi, uint16_t data)
{
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK)) {
80008992:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008996:	70 48       	ld.w	r8,r8[0x10]
80008998:	e2 18 00 02 	andl	r8,0x2,COH
8000899c:	ce d0       	breq	80008976 <spi_write+0x1c>
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
		}
	}

	spi->tdr = data << AVR32_SPI_TDR_TD_OFFSET;
8000899e:	ef 19 ff f4 	ld.uh	r9,r7[-12]
800089a2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800089a6:	91 39       	st.w	r8[0xc],r9

	return SPI_OK;
800089a8:	30 08       	mov	r8,0
}
800089aa:	10 9c       	mov	r12,r8
800089ac:	2f dd       	sub	sp,-12
800089ae:	e3 cd 80 80 	ldm	sp++,r7,pc

800089b2 <spi_read>:
{
	return ((spi->sr & AVR32_SPI_SR_RDRF_MASK) != 0);
}

spi_status_t spi_read(volatile avr32_spi_t *spi, uint16_t *data)
{
800089b2:	eb cd 40 80 	pushm	r7,lr
800089b6:	1a 97       	mov	r7,sp
800089b8:	20 3d       	sub	sp,12
800089ba:	ef 4c ff f8 	st.w	r7[-8],r12
800089be:	ef 4b ff f4 	st.w	r7[-12],r11
	unsigned int timeout = SPI_TIMEOUT;
800089c2:	e0 68 3a 98 	mov	r8,15000
800089c6:	ef 48 ff fc 	st.w	r7[-4],r8

	while ((spi->sr &
800089ca:	c0 f8       	rjmp	800089e8 <spi_read+0x36>
			(AVR32_SPI_SR_RDRF_MASK | AVR32_SPI_SR_TXEMPTY_MASK)) !=
			(AVR32_SPI_SR_RDRF_MASK | AVR32_SPI_SR_TXEMPTY_MASK)) {
		if (!timeout--) {
800089cc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800089d0:	58 08       	cp.w	r8,0
800089d2:	5f 08       	sreq	r8
800089d4:	5c 58       	castu.b	r8
800089d6:	ee f9 ff fc 	ld.w	r9,r7[-4]
800089da:	20 19       	sub	r9,1
800089dc:	ef 49 ff fc 	st.w	r7[-4],r9
800089e0:	58 08       	cp.w	r8,0
800089e2:	c0 30       	breq	800089e8 <spi_read+0x36>
			return SPI_ERROR_TIMEOUT;
800089e4:	30 18       	mov	r8,1
800089e6:	c1 18       	rjmp	80008a08 <spi_read+0x56>

spi_status_t spi_read(volatile avr32_spi_t *spi, uint16_t *data)
{
	unsigned int timeout = SPI_TIMEOUT;

	while ((spi->sr &
800089e8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800089ec:	70 48       	ld.w	r8,r8[0x10]
800089ee:	e2 18 02 01 	andl	r8,0x201,COH
800089f2:	e0 48 02 01 	cp.w	r8,513
800089f6:	ce b1       	brne	800089cc <spi_read+0x1a>
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
		}
	}

	*data = spi->rdr >> AVR32_SPI_RDR_RD_OFFSET;
800089f8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800089fc:	70 28       	ld.w	r8,r8[0x8]
800089fe:	5c 88       	casts.h	r8
80008a00:	ee f9 ff f4 	ld.w	r9,r7[-12]
80008a04:	b2 08       	st.h	r9[0x0],r8

	return SPI_OK;
80008a06:	30 08       	mov	r8,0
}
80008a08:	10 9c       	mov	r12,r8
80008a0a:	2f dd       	sub	sp,-12
80008a0c:	e3 cd 80 80 	ldm	sp++,r7,pc

80008a10 <fat_check_device>:
//! @verbatim
//! This function updates all navigator data when the device state change.
//! @endverbatim
//!
bool  fat_check_device( void )
{
80008a10:	eb cd 40 80 	pushm	r7,lr
80008a14:	1a 97       	mov	r7,sp
80008a16:	20 2d       	sub	sp,8
   uint8_t retry=0;
80008a18:	30 08       	mov	r8,0
80008a1a:	ef 68 ff fa 	st.b	r7[-6],r8
   uint8_t i;
#endif
   Ctrl_status status;

   // Possibility to ignore the disk check. Used to take time during multi read/write access
   if( g_b_no_check_disk )
80008a1e:	4c 18       	lddpc	r8,80008b20 <fat_check_device+0x110>
80008a20:	11 88       	ld.ub	r8,r8[0x0]
80008a22:	58 08       	cp.w	r8,0
80008a24:	c0 30       	breq	80008a2a <fat_check_device+0x1a>
      return true;
80008a26:	30 18       	mov	r8,1
80008a28:	c7 78       	rjmp	80008b16 <fat_check_device+0x106>

   if( 0xFF == fs_g_nav.u8_lun )
80008a2a:	4b f8       	lddpc	r8,80008b24 <fat_check_device+0x114>
80008a2c:	11 89       	ld.ub	r9,r8[0x0]
80008a2e:	3f f8       	mov	r8,-1
80008a30:	f0 09 18 00 	cp.b	r9,r8
80008a34:	c0 61       	brne	80008a40 <fat_check_device+0x30>
   {
      fs_g_status = FS_ERR_HW;
80008a36:	4b d9       	lddpc	r9,80008b28 <fat_check_device+0x118>
80008a38:	30 18       	mov	r8,1
80008a3a:	b2 88       	st.b	r9[0x0],r8
      return false;                                // No device selected
80008a3c:	30 08       	mov	r8,0
80008a3e:	c6 c8       	rjmp	80008b16 <fat_check_device+0x106>
   }

   for( retry=0 ; retry<100 ; retry++ )
80008a40:	30 08       	mov	r8,0
80008a42:	ef 68 ff fa 	st.b	r7[-6],r8
80008a46:	c5 e8       	rjmp	80008b02 <fat_check_device+0xf2>
   {
      // Check device
      status = mem_test_unit_ready( fs_g_nav.u8_lun );
80008a48:	4b 78       	lddpc	r8,80008b24 <fat_check_device+0x114>
80008a4a:	11 88       	ld.ub	r8,r8[0x0]
80008a4c:	10 9c       	mov	r12,r8
80008a4e:	f0 1f 00 38 	mcall	80008b2c <fat_check_device+0x11c>
80008a52:	18 98       	mov	r8,r12
80008a54:	ef 48 ff fc 	st.w	r7[-4],r8
      if( CTRL_GOOD       == status )
80008a58:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008a5c:	58 08       	cp.w	r8,0
80008a5e:	c0 31       	brne	80008a64 <fat_check_device+0x54>
         return true;                              // drive ready
80008a60:	30 18       	mov	r8,1
80008a62:	c5 a8       	rjmp	80008b16 <fat_check_device+0x106>

      //* HERE error or state change
      // Clean all navigator data which use this device
      fs_g_nav_fast.u8_type_fat = FS_TYPE_FAT_UNM; // By default the fat isn't mounted
80008a64:	4b 39       	lddpc	r9,80008b30 <fat_check_device+0x120>
80008a66:	30 08       	mov	r8,0
80008a68:	b2 88       	st.b	r9[0x0],r8
      Fat_file_close();                            // By default the file is not open
80008a6a:	4b 39       	lddpc	r9,80008b34 <fat_check_device+0x124>
80008a6c:	30 08       	mov	r8,0
80008a6e:	b2 88       	st.b	r9[0x0],r8
#if (FS_NB_NAVIGATOR > 1)
      for( i=0 ; i!=(FS_NB_NAVIGATOR-1) ; i++ )
80008a70:	30 08       	mov	r8,0
80008a72:	ef 68 ff fb 	st.b	r7[-5],r8
80008a76:	c2 08       	rjmp	80008ab6 <fat_check_device+0xa6>
      {
         if( fs_g_nav.u8_lun == fs_g_navext[i].u8_lun )
80008a78:	4a b8       	lddpc	r8,80008b24 <fat_check_device+0x114>
80008a7a:	11 89       	ld.ub	r9,r8[0x0]
80008a7c:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80008a80:	4a ea       	lddpc	r10,80008b38 <fat_check_device+0x128>
80008a82:	f0 08 10 34 	mul	r8,r8,52
80008a86:	f4 08 00 08 	add	r8,r10,r8
80008a8a:	11 88       	ld.ub	r8,r8[0x0]
80008a8c:	f0 09 18 00 	cp.b	r9,r8
80008a90:	c0 e1       	brne	80008aac <fat_check_device+0x9c>
         {
            fs_g_navext_fast[i].u8_type_fat     = FS_TYPE_FAT_UNM;   // By default the fat isn't mounted
80008a92:	ef 3a ff fb 	ld.ub	r10,r7[-5]
80008a96:	4a a9       	lddpc	r9,80008b3c <fat_check_device+0x12c>
80008a98:	30 08       	mov	r8,0
80008a9a:	f2 0a 0b 28 	st.b	r9[r10<<0x2],r8
            fs_g_navext_entry[i].u8_open_mode   = 0;                 // By default the file is not open
80008a9e:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80008aa2:	4a 89       	lddpc	r9,80008b40 <fat_check_device+0x130>
80008aa4:	a5 68       	lsl	r8,0x4
80008aa6:	10 09       	add	r9,r8
80008aa8:	30 08       	mov	r8,0
80008aaa:	b2 88       	st.b	r9[0x0],r8
      //* HERE error or state change
      // Clean all navigator data which use this device
      fs_g_nav_fast.u8_type_fat = FS_TYPE_FAT_UNM; // By default the fat isn't mounted
      Fat_file_close();                            // By default the file is not open
#if (FS_NB_NAVIGATOR > 1)
      for( i=0 ; i!=(FS_NB_NAVIGATOR-1) ; i++ )
80008aac:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80008ab0:	2f f8       	sub	r8,-1
80008ab2:	ef 68 ff fb 	st.b	r7[-5],r8
80008ab6:	ef 39 ff fb 	ld.ub	r9,r7[-5]
80008aba:	30 18       	mov	r8,1
80008abc:	f0 09 18 00 	cp.b	r9,r8
80008ac0:	cd c1       	brne	80008a78 <fat_check_device+0x68>
            fs_g_navext_entry[i].u8_open_mode   = 0;                 // By default the file is not open
         }
      }
#endif
      // If the internal cache corresponding at device then clean it
      if( fs_g_nav.u8_lun == fs_g_sectorcache.u8_lun )
80008ac2:	49 98       	lddpc	r8,80008b24 <fat_check_device+0x114>
80008ac4:	11 89       	ld.ub	r9,r8[0x0]
80008ac6:	4a 08       	lddpc	r8,80008b44 <fat_check_device+0x134>
80008ac8:	11 88       	ld.ub	r8,r8[0x0]
80008aca:	f0 09 18 00 	cp.b	r9,r8
80008ace:	c0 31       	brne	80008ad4 <fat_check_device+0xc4>
      {
         fat_cache_reset();
80008ad0:	f0 1f 00 1e 	mcall	80008b48 <fat_check_device+0x138>
      }
      fat_cache_clusterlist_reset();
80008ad4:	f0 1f 00 1e 	mcall	80008b4c <fat_check_device+0x13c>

      fs_g_status = FS_ERR_HW;                     // By default HW error
80008ad8:	49 49       	lddpc	r9,80008b28 <fat_check_device+0x118>
80008ada:	30 18       	mov	r8,1
80008adc:	b2 88       	st.b	r9[0x0],r8
      if( CTRL_BUSY == status )
80008ade:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008ae2:	58 38       	cp.w	r8,3
80008ae4:	c0 71       	brne	80008af2 <fat_check_device+0xe2>
   {
      fs_g_status = FS_ERR_HW;
      return false;                                // No device selected
   }

   for( retry=0 ; retry<100 ; retry++ )
80008ae6:	ef 38 ff fa 	ld.ub	r8,r7[-6]
80008aea:	2f f8       	sub	r8,-1
80008aec:	ef 68 ff fa 	st.b	r7[-6],r8
80008af0:	c0 98       	rjmp	80008b02 <fat_check_device+0xf2>

      fs_g_status = FS_ERR_HW;                     // By default HW error
      if( CTRL_BUSY == status )
         continue;                                 // If device busy then retry

      if( CTRL_NO_PRESENT == status )
80008af2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008af6:	58 28       	cp.w	r8,2
80008af8:	c0 d1       	brne	80008b12 <fat_check_device+0x102>
         fs_g_status = FS_ERR_HW_NO_PRESENT;       // Update error flag
80008afa:	48 c9       	lddpc	r9,80008b28 <fat_check_device+0x118>
80008afc:	31 88       	mov	r8,24
80008afe:	b2 88       	st.b	r9[0x0],r8
      break;                                       // FAIL or NOT PRESENT = fatal error = no retry
80008b00:	c0 a8       	rjmp	80008b14 <fat_check_device+0x104>
   {
      fs_g_status = FS_ERR_HW;
      return false;                                // No device selected
   }

   for( retry=0 ; retry<100 ; retry++ )
80008b02:	ef 39 ff fa 	ld.ub	r9,r7[-6]
80008b06:	36 38       	mov	r8,99
80008b08:	f0 09 18 00 	cp.b	r9,r8
80008b0c:	fe 98 ff 9e 	brls	80008a48 <fat_check_device+0x38>
80008b10:	c0 28       	rjmp	80008b14 <fat_check_device+0x104>
      if( CTRL_BUSY == status )
         continue;                                 // If device busy then retry

      if( CTRL_NO_PRESENT == status )
         fs_g_status = FS_ERR_HW_NO_PRESENT;       // Update error flag
      break;                                       // FAIL or NOT PRESENT = fatal error = no retry
80008b12:	d7 03       	nop
   }
   return false;
80008b14:	30 08       	mov	r8,0
}
80008b16:	10 9c       	mov	r12,r8
80008b18:	2f ed       	sub	sp,-8
80008b1a:	e3 cd 80 80 	ldm	sp++,r7,pc
80008b1e:	00 00       	add	r0,r0
80008b20:	00 00       	add	r0,r0
80008b22:	0b 56       	ld.sh	r6,--r5
80008b24:	00 00       	add	r0,r0
80008b26:	0d 84       	ld.ub	r4,r6[0x0]
80008b28:	00 00       	add	r0,r0
80008b2a:	0d d4       	ld.ub	r4,r6[0x5]
80008b2c:	80 00       	ld.sh	r0,r0[0x0]
80008b2e:	ac 60       	st.h	r6[0xc],r0
80008b30:	00 00       	add	r0,r0
80008b32:	0d d0       	ld.ub	r0,r6[0x5]
80008b34:	00 00       	add	r0,r0
80008b36:	0b 44       	ld.w	r4,--r5
80008b38:	00 00       	add	r0,r0
80008b3a:	0d d8       	ld.ub	r8,r6[0x5]
80008b3c:	00 00       	add	r0,r0
80008b3e:	0d cc       	ld.ub	r12,r6[0x4]
80008b40:	00 00       	add	r0,r0
80008b42:	0d bc       	ld.ub	r12,r6[0x3]
80008b44:	00 00       	add	r0,r0
80008b46:	0e 0c       	add	r12,r7
80008b48:	80 00       	ld.sh	r0,r0[0x0]
80008b4a:	a9 68       	lsl	r8,0x8
80008b4c:	80 00       	ld.sh	r0,r0[0x0]
80008b4e:	97 e8       	st.w	r11[0x38],r8

80008b50 <fat_check_mount>:
//!
//! @return    true  partition mounted
//! @return    false otherwise
//!
bool  fat_check_mount( void )
{
80008b50:	eb cd 40 80 	pushm	r7,lr
80008b54:	1a 97       	mov	r7,sp
   if( !fat_check_device() )
80008b56:	f0 1f 00 0f 	mcall	80008b90 <fat_check_mount+0x40>
80008b5a:	18 98       	mov	r8,r12
80008b5c:	ec 18 00 01 	eorl	r8,0x1
80008b60:	5c 58       	castu.b	r8
80008b62:	c0 30       	breq	80008b68 <fat_check_mount+0x18>
      return false;
80008b64:	30 08       	mov	r8,0
80008b66:	c1 28       	rjmp	80008b8a <fat_check_mount+0x3a>
   if (FS_TYPE_FAT_UNM == fs_g_nav_fast.u8_type_fat)
80008b68:	48 b8       	lddpc	r8,80008b94 <fat_check_mount+0x44>
80008b6a:	11 88       	ld.ub	r8,r8[0x0]
80008b6c:	58 08       	cp.w	r8,0
80008b6e:	c0 d1       	brne	80008b88 <fat_check_mount+0x38>
   {
      if( !fat_mount() )
80008b70:	f0 1f 00 0a 	mcall	80008b98 <fat_check_mount+0x48>
80008b74:	18 98       	mov	r8,r12
80008b76:	ec 18 00 01 	eorl	r8,0x1
80008b7a:	5c 58       	castu.b	r8
80008b7c:	c0 60       	breq	80008b88 <fat_check_mount+0x38>
      {
         fs_g_status = FS_ERR_NO_MOUNT;
80008b7e:	48 89       	lddpc	r9,80008b9c <fat_check_mount+0x4c>
80008b80:	30 e8       	mov	r8,14
80008b82:	b2 88       	st.b	r9[0x0],r8
         return false;
80008b84:	30 08       	mov	r8,0
80008b86:	c0 28       	rjmp	80008b8a <fat_check_mount+0x3a>
      }
   }
   return true;
80008b88:	30 18       	mov	r8,1
}
80008b8a:	10 9c       	mov	r12,r8
80008b8c:	e3 cd 80 80 	ldm	sp++,r7,pc
80008b90:	80 00       	ld.sh	r0,r0[0x0]
80008b92:	8a 10       	ld.sh	r0,r5[0x2]
80008b94:	00 00       	add	r0,r0
80008b96:	0d d0       	ld.ub	r0,r6[0x5]
80008b98:	80 00       	ld.sh	r0,r0[0x0]
80008b9a:	ad f0       	*unknown*
80008b9c:	00 00       	add	r0,r0
80008b9e:	0d d4       	ld.ub	r4,r6[0x5]

80008ba0 <fat_check_noopen>:
//!
//! @return    true  no file opened
//! @return    false otherwise
//!
bool  fat_check_noopen( void )
{
80008ba0:	eb cd 40 80 	pushm	r7,lr
80008ba4:	1a 97       	mov	r7,sp
   if( !fat_check_device() )
80008ba6:	f0 1f 00 0f 	mcall	80008be0 <fat_check_noopen+0x40>
80008baa:	18 98       	mov	r8,r12
80008bac:	ec 18 00 01 	eorl	r8,0x1
80008bb0:	5c 58       	castu.b	r8
80008bb2:	c0 30       	breq	80008bb8 <fat_check_noopen+0x18>
      return true;
80008bb4:	30 18       	mov	r8,1
80008bb6:	c1 18       	rjmp	80008bd8 <fat_check_noopen+0x38>
   if (FS_TYPE_FAT_UNM == fs_g_nav_fast.u8_type_fat)
80008bb8:	48 b8       	lddpc	r8,80008be4 <fat_check_noopen+0x44>
80008bba:	11 88       	ld.ub	r8,r8[0x0]
80008bbc:	58 08       	cp.w	r8,0
80008bbe:	c0 31       	brne	80008bc4 <fat_check_noopen+0x24>
      return true;
80008bc0:	30 18       	mov	r8,1
80008bc2:	c0 b8       	rjmp	80008bd8 <fat_check_noopen+0x38>
   if( Fat_file_is_open() )
80008bc4:	48 98       	lddpc	r8,80008be8 <fat_check_noopen+0x48>
80008bc6:	11 88       	ld.ub	r8,r8[0x0]
80008bc8:	58 08       	cp.w	r8,0
80008bca:	c0 60       	breq	80008bd6 <fat_check_noopen+0x36>
   {
      fs_g_status = FS_ERR_TOO_FILE_OPEN;  // The navigation have already open a file
80008bcc:	48 89       	lddpc	r9,80008bec <fat_check_noopen+0x4c>
80008bce:	30 58       	mov	r8,5
80008bd0:	b2 88       	st.b	r9[0x0],r8
      return false;
80008bd2:	30 08       	mov	r8,0
80008bd4:	c0 28       	rjmp	80008bd8 <fat_check_noopen+0x38>
   }
   return true;
80008bd6:	30 18       	mov	r8,1
}
80008bd8:	10 9c       	mov	r12,r8
80008bda:	e3 cd 80 80 	ldm	sp++,r7,pc
80008bde:	00 00       	add	r0,r0
80008be0:	80 00       	ld.sh	r0,r0[0x0]
80008be2:	8a 10       	ld.sh	r0,r5[0x2]
80008be4:	00 00       	add	r0,r0
80008be6:	0d d0       	ld.ub	r0,r6[0x5]
80008be8:	00 00       	add	r0,r0
80008bea:	0b 44       	ld.w	r4,--r5
80008bec:	00 00       	add	r0,r0
80008bee:	0d d4       	ld.ub	r4,r6[0x5]

80008bf0 <fat_check_open>:
//!
//! @return    true  a file is opened
//! @return    false otherwise
//!
bool  fat_check_open( void )
{
80008bf0:	eb cd 40 80 	pushm	r7,lr
80008bf4:	1a 97       	mov	r7,sp
   if( Fat_file_isnot_open() )
80008bf6:	48 78       	lddpc	r8,80008c10 <fat_check_open+0x20>
80008bf8:	11 88       	ld.ub	r8,r8[0x0]
80008bfa:	58 08       	cp.w	r8,0
80008bfc:	c0 61       	brne	80008c08 <fat_check_open+0x18>
   {
      fs_g_status = FS_ERR_FILE_NO_OPEN;
80008bfe:	48 69       	lddpc	r9,80008c14 <fat_check_open+0x24>
80008c00:	31 78       	mov	r8,23
80008c02:	b2 88       	st.b	r9[0x0],r8
      return false;
80008c04:	30 08       	mov	r8,0
80008c06:	c0 28       	rjmp	80008c0a <fat_check_open+0x1a>
   }
   return true;
80008c08:	30 18       	mov	r8,1
}
80008c0a:	10 9c       	mov	r12,r8
80008c0c:	e3 cd 80 80 	ldm	sp++,r7,pc
80008c10:	00 00       	add	r0,r0
80008c12:	0b 44       	ld.w	r4,--r5
80008c14:	00 00       	add	r0,r0
80008c16:	0d d4       	ld.ub	r4,r6[0x5]

80008c18 <fat_check_select>:
//!
//! @return    true  a file is selected
//! @return    false otherwise
//!
bool  fat_check_select( void )
{
80008c18:	eb cd 40 80 	pushm	r7,lr
80008c1c:	1a 97       	mov	r7,sp
   if (FS_NO_SEL == fs_g_nav_fast.u16_entry_pos_sel_file)
80008c1e:	48 88       	lddpc	r8,80008c3c <fat_check_select+0x24>
80008c20:	90 19       	ld.sh	r9,r8[0x2]
80008c22:	3f f8       	mov	r8,-1
80008c24:	f0 09 19 00 	cp.h	r9,r8
80008c28:	c0 61       	brne	80008c34 <fat_check_select+0x1c>
   {
      fs_g_status = FS_ERR_NO_FILE_SEL;
80008c2a:	48 69       	lddpc	r9,80008c40 <fat_check_select+0x28>
80008c2c:	30 f8       	mov	r8,15
80008c2e:	b2 88       	st.b	r9[0x0],r8
      return false;
80008c30:	30 08       	mov	r8,0
80008c32:	c0 28       	rjmp	80008c36 <fat_check_select+0x1e>
   }
   return true;
80008c34:	30 18       	mov	r8,1
}
80008c36:	10 9c       	mov	r12,r8
80008c38:	e3 cd 80 80 	ldm	sp++,r7,pc
80008c3c:	00 00       	add	r0,r0
80008c3e:	0d d0       	ld.ub	r0,r6[0x5]
80008c40:	00 00       	add	r0,r0
80008c42:	0d d4       	ld.ub	r4,r6[0x5]

80008c44 <fat_check_mount_noopen>:
//!
//! @return    true  partition mounted and no file is opened
//! @return    false otherwise
//!
bool  fat_check_mount_noopen( void )
{
80008c44:	eb cd 40 80 	pushm	r7,lr
80008c48:	1a 97       	mov	r7,sp
   if( !fat_check_mount() )
80008c4a:	f0 1f 00 08 	mcall	80008c68 <fat_check_mount_noopen+0x24>
80008c4e:	18 98       	mov	r8,r12
80008c50:	ec 18 00 01 	eorl	r8,0x1
80008c54:	5c 58       	castu.b	r8
80008c56:	c0 30       	breq	80008c5c <fat_check_mount_noopen+0x18>
      return false;
80008c58:	30 08       	mov	r8,0
80008c5a:	c0 48       	rjmp	80008c62 <fat_check_mount_noopen+0x1e>
   return fat_check_noopen();
80008c5c:	f0 1f 00 04 	mcall	80008c6c <fat_check_mount_noopen+0x28>
80008c60:	18 98       	mov	r8,r12
}
80008c62:	10 9c       	mov	r12,r8
80008c64:	e3 cd 80 80 	ldm	sp++,r7,pc
80008c68:	80 00       	ld.sh	r0,r0[0x0]
80008c6a:	8b 50       	st.w	r5[0x14],r0
80008c6c:	80 00       	ld.sh	r0,r0[0x0]
80008c6e:	8b a0       	st.w	r5[0x28],r0

80008c70 <fat_check_mount_select_noopen>:
//!
//! @return    true  partition mounted and no file is opened and a file is selected
//! @return    false otherwise
//!
bool  fat_check_mount_select_noopen( void )
{
80008c70:	eb cd 40 80 	pushm	r7,lr
80008c74:	1a 97       	mov	r7,sp
   if( !fat_check_mount() )
80008c76:	f0 1f 00 0d 	mcall	80008ca8 <fat_check_mount_select_noopen+0x38>
80008c7a:	18 98       	mov	r8,r12
80008c7c:	ec 18 00 01 	eorl	r8,0x1
80008c80:	5c 58       	castu.b	r8
80008c82:	c0 30       	breq	80008c88 <fat_check_mount_select_noopen+0x18>
      return false;
80008c84:	30 08       	mov	r8,0
80008c86:	c0 d8       	rjmp	80008ca0 <fat_check_mount_select_noopen+0x30>
   if( !fat_check_select() )
80008c88:	f0 1f 00 09 	mcall	80008cac <fat_check_mount_select_noopen+0x3c>
80008c8c:	18 98       	mov	r8,r12
80008c8e:	ec 18 00 01 	eorl	r8,0x1
80008c92:	5c 58       	castu.b	r8
80008c94:	c0 30       	breq	80008c9a <fat_check_mount_select_noopen+0x2a>
      return false;
80008c96:	30 08       	mov	r8,0
80008c98:	c0 48       	rjmp	80008ca0 <fat_check_mount_select_noopen+0x30>
   return fat_check_noopen();
80008c9a:	f0 1f 00 06 	mcall	80008cb0 <fat_check_mount_select_noopen+0x40>
80008c9e:	18 98       	mov	r8,r12
}
80008ca0:	10 9c       	mov	r12,r8
80008ca2:	e3 cd 80 80 	ldm	sp++,r7,pc
80008ca6:	00 00       	add	r0,r0
80008ca8:	80 00       	ld.sh	r0,r0[0x0]
80008caa:	8b 50       	st.w	r5[0x14],r0
80008cac:	80 00       	ld.sh	r0,r0[0x0]
80008cae:	8c 18       	ld.sh	r8,r6[0x2]
80008cb0:	80 00       	ld.sh	r0,r0[0x0]
80008cb2:	8b a0       	st.w	r5[0x28],r0

80008cb4 <fat_check_mount_select_open>:
//!
//! @return    true  partition mounted and a file is opened
//! @return    false otherwise
//!
bool  fat_check_mount_select_open( void )
{
80008cb4:	eb cd 40 80 	pushm	r7,lr
80008cb8:	1a 97       	mov	r7,sp
   if( !fat_check_mount() )
80008cba:	f0 1f 00 0d 	mcall	80008cec <fat_check_mount_select_open+0x38>
80008cbe:	18 98       	mov	r8,r12
80008cc0:	ec 18 00 01 	eorl	r8,0x1
80008cc4:	5c 58       	castu.b	r8
80008cc6:	c0 30       	breq	80008ccc <fat_check_mount_select_open+0x18>
      return false;
80008cc8:	30 08       	mov	r8,0
80008cca:	c0 d8       	rjmp	80008ce4 <fat_check_mount_select_open+0x30>
   if( !fat_check_select() )
80008ccc:	f0 1f 00 09 	mcall	80008cf0 <fat_check_mount_select_open+0x3c>
80008cd0:	18 98       	mov	r8,r12
80008cd2:	ec 18 00 01 	eorl	r8,0x1
80008cd6:	5c 58       	castu.b	r8
80008cd8:	c0 30       	breq	80008cde <fat_check_mount_select_open+0x2a>
      return false;
80008cda:	30 08       	mov	r8,0
80008cdc:	c0 48       	rjmp	80008ce4 <fat_check_mount_select_open+0x30>
   return fat_check_open();
80008cde:	f0 1f 00 06 	mcall	80008cf4 <fat_check_mount_select_open+0x40>
80008ce2:	18 98       	mov	r8,r12
}
80008ce4:	10 9c       	mov	r12,r8
80008ce6:	e3 cd 80 80 	ldm	sp++,r7,pc
80008cea:	00 00       	add	r0,r0
80008cec:	80 00       	ld.sh	r0,r0[0x0]
80008cee:	8b 50       	st.w	r5[0x14],r0
80008cf0:	80 00       	ld.sh	r0,r0[0x0]
80008cf2:	8c 18       	ld.sh	r8,r6[0x2]
80008cf4:	80 00       	ld.sh	r0,r0[0x0]
80008cf6:	8b f0       	st.w	r5[0x3c],r0

80008cf8 <fat_check_mount_select>:
//!
//! @return    true  partition mounted and a file is selected
//! @return    false otherwise
//!
bool  fat_check_mount_select( void )
{
80008cf8:	eb cd 40 80 	pushm	r7,lr
80008cfc:	1a 97       	mov	r7,sp
   if( !fat_check_mount() )
80008cfe:	f0 1f 00 08 	mcall	80008d1c <fat_check_mount_select+0x24>
80008d02:	18 98       	mov	r8,r12
80008d04:	ec 18 00 01 	eorl	r8,0x1
80008d08:	5c 58       	castu.b	r8
80008d0a:	c0 30       	breq	80008d10 <fat_check_mount_select+0x18>
      return false;
80008d0c:	30 08       	mov	r8,0
80008d0e:	c0 48       	rjmp	80008d16 <fat_check_mount_select+0x1e>
   return fat_check_select();
80008d10:	f0 1f 00 04 	mcall	80008d20 <fat_check_mount_select+0x28>
80008d14:	18 98       	mov	r8,r12
}
80008d16:	10 9c       	mov	r12,r8
80008d18:	e3 cd 80 80 	ldm	sp++,r7,pc
80008d1c:	80 00       	ld.sh	r0,r0[0x0]
80008d1e:	8b 50       	st.w	r5[0x14],r0
80008d20:	80 00       	ld.sh	r0,r0[0x0]
80008d22:	8c 18       	ld.sh	r8,r6[0x2]

80008d24 <fat_check_is_file>:
//!
//! @return    true  It is a file and not a directory
//! @return    false otherwise
//!
bool  fat_check_is_file( void )
{
80008d24:	eb cd 40 80 	pushm	r7,lr
80008d28:	1a 97       	mov	r7,sp
   if( Fat_is_not_a_file )
80008d2a:	48 a8       	lddpc	r8,80008d50 <fat_check_is_file+0x2c>
80008d2c:	11 a8       	ld.ub	r8,r8[0x2]
80008d2e:	e2 18 00 10 	andl	r8,0x10,COH
80008d32:	c0 61       	brne	80008d3e <fat_check_is_file+0x1a>
80008d34:	48 78       	lddpc	r8,80008d50 <fat_check_is_file+0x2c>
80008d36:	11 a8       	ld.ub	r8,r8[0x2]
80008d38:	e2 18 00 08 	andl	r8,0x8,COH
80008d3c:	c0 60       	breq	80008d48 <fat_check_is_file+0x24>
   {
      fs_g_status = FS_ERR_NO_FILE;   // It isn't a file, it is a directory or a volume id
80008d3e:	48 69       	lddpc	r9,80008d54 <fat_check_is_file+0x30>
80008d40:	31 38       	mov	r8,19
80008d42:	b2 88       	st.b	r9[0x0],r8
      return false;
80008d44:	30 08       	mov	r8,0
80008d46:	c0 28       	rjmp	80008d4a <fat_check_is_file+0x26>
   }
   return true;
80008d48:	30 18       	mov	r8,1
}
80008d4a:	10 9c       	mov	r12,r8
80008d4c:	e3 cd 80 80 	ldm	sp++,r7,pc
80008d50:	00 00       	add	r0,r0
80008d52:	0b 44       	ld.w	r4,--r5
80008d54:	00 00       	add	r0,r0
80008d56:	0d d4       	ld.ub	r4,r6[0x5]

80008d58 <fat_cluster_list>:
//!   fs_g_seg.u32_addr          The memory segment address corresponding at the beginning of cluster list (only for action FS_CLUST_ACT_SEG & FS_CLUST_ACT_ONE)
//!   fs_g_seg.u32_size_or_pos   The memory segment size corresponding at cluster list read or cleared (unit 512B)
//! @endverbatim
//!
bool  fat_cluster_list( uint8_t opt_action, bool b_for_file )
{
80008d58:	eb cd 40 80 	pushm	r7,lr
80008d5c:	1a 97       	mov	r7,sp
80008d5e:	20 4d       	sub	sp,16
80008d60:	18 99       	mov	r9,r12
80008d62:	16 98       	mov	r8,r11
80008d64:	ef 69 ff f4 	st.b	r7[-12],r9
80008d68:	ef 68 ff f0 	st.b	r7[-16],r8
   _MEM_TYPE_FAST_ uint32_t u32_tmp;
   _MEM_TYPE_FAST_ uint8_t u8_cluster_status;

   fs_g_status = FS_ERR_FS;      // By default system error
80008d6c:	fe f9 04 58 	ld.w	r9,pc[1112]
80008d70:	30 88       	mov	r8,8
80008d72:	b2 88       	st.b	r9[0x0],r8

   if(  Is_fat32
80008d74:	fe f8 04 54 	ld.w	r8,pc[1108]
80008d78:	11 89       	ld.ub	r9,r8[0x0]
80008d7a:	30 38       	mov	r8,3
80008d7c:	f0 09 18 00 	cp.b	r9,r8
80008d80:	c1 21       	brne	80008da4 <fat_cluster_list+0x4c>
80008d82:	ef 39 ff f4 	ld.ub	r9,r7[-12]
80008d86:	30 38       	mov	r8,3
80008d88:	f0 09 18 00 	cp.b	r9,r8
80008d8c:	c0 c1       	brne	80008da4 <fat_cluster_list+0x4c>
   &&  (FS_CLUST_ACT_CLR == opt_action) )
   {
#if (FSFEATURE_WRITE_COMPLET == (FS_LEVEL_FEATURES & FSFEATURE_WRITE_COMPLET) )
      // Clear free space information storage in FAT32
      if( !fat_write_fat32_FSInfo( 0xFFFFFFFF ))
80008d8e:	3f fc       	mov	r12,-1
80008d90:	f0 1f 01 0f 	mcall	800091cc <fat_cluster_list+0x474>
80008d94:	18 98       	mov	r8,r12
80008d96:	ec 18 00 01 	eorl	r8,0x1
80008d9a:	5c 58       	castu.b	r8
80008d9c:	c0 40       	breq	80008da4 <fat_cluster_list+0x4c>
         return false;
80008d9e:	30 08       	mov	r8,0
80008da0:	e0 8f 02 0d 	bral	800091ba <fat_cluster_list+0x462>
#else
      return false;
#endif
   }

   if ( 0 == fs_g_seg.u32_addr )
80008da4:	fe f8 04 2c 	ld.w	r8,pc[1068]
80008da8:	70 08       	ld.w	r8,r8[0x0]
80008daa:	58 08       	cp.w	r8,0
80008dac:	c5 71       	brne	80008e5a <fat_cluster_list+0x102>
   {
      // Cluster list of root directory
      if( FS_CLUST_ACT_CLR == opt_action )
80008dae:	ef 39 ff f4 	ld.ub	r9,r7[-12]
80008db2:	30 38       	mov	r8,3
80008db4:	f0 09 18 00 	cp.b	r9,r8
80008db8:	c0 41       	brne	80008dc0 <fat_cluster_list+0x68>
         return false;           // Impossible to erase ROOT DIR
80008dba:	30 08       	mov	r8,0
80008dbc:	e0 8f 01 ff 	bral	800091ba <fat_cluster_list+0x462>

      if ( Is_fat12 || Is_fat16 )
80008dc0:	fe f8 04 08 	ld.w	r8,pc[1032]
80008dc4:	11 89       	ld.ub	r9,r8[0x0]
80008dc6:	30 18       	mov	r8,1
80008dc8:	f0 09 18 00 	cp.b	r9,r8
80008dcc:	c0 80       	breq	80008ddc <fat_cluster_list+0x84>
80008dce:	fe f8 03 fa 	ld.w	r8,pc[1018]
80008dd2:	11 89       	ld.ub	r9,r8[0x0]
80008dd4:	30 28       	mov	r8,2
80008dd6:	f0 09 18 00 	cp.b	r9,r8
80008dda:	c3 21       	brne	80008e3e <fat_cluster_list+0xe6>
      {
         // For a FAT 12 & 16, the root dir isn't a cluster list
         // Check the position
         if ( fs_g_seg.u32_size_or_pos < fs_g_nav.rootdir.seg.u16_size )
80008ddc:	fe f8 03 f4 	ld.w	r8,pc[1012]
80008de0:	70 19       	ld.w	r9,r8[0x4]
80008de2:	fe f8 03 f2 	ld.w	r8,pc[1010]
80008de6:	f1 08 00 1a 	ld.sh	r8,r8[26]
80008dea:	5c 78       	castu.h	r8
80008dec:	10 39       	cp.w	r9,r8
80008dee:	c2 12       	brcc	80008e30 <fat_cluster_list+0xd8>
         {
            // Compute the start address and the size
            fs_g_seg.u32_addr = fs_g_nav.u32_ptr_fat + fs_g_nav.rootdir.seg.u16_pos + fs_g_seg.u32_size_or_pos;
80008df0:	fe f8 03 e4 	ld.w	r8,pc[996]
80008df4:	70 49       	ld.w	r9,r8[0x10]
80008df6:	fe f8 03 de 	ld.w	r8,pc[990]
80008dfa:	f1 08 00 18 	ld.sh	r8,r8[24]
80008dfe:	5c 78       	castu.h	r8
80008e00:	10 09       	add	r9,r8
80008e02:	fe f8 03 ce 	ld.w	r8,pc[974]
80008e06:	70 18       	ld.w	r8,r8[0x4]
80008e08:	10 09       	add	r9,r8
80008e0a:	fe f8 03 c6 	ld.w	r8,pc[966]
80008e0e:	91 09       	st.w	r8[0x0],r9
            fs_g_seg.u32_size_or_pos = fs_g_nav.rootdir.seg.u16_size - fs_g_seg.u32_size_or_pos;
80008e10:	fe f8 03 c4 	ld.w	r8,pc[964]
80008e14:	f1 08 00 1a 	ld.sh	r8,r8[26]
80008e18:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
80008e1c:	fe f8 03 b4 	ld.w	r8,pc[948]
80008e20:	70 18       	ld.w	r8,r8[0x4]
80008e22:	10 19       	sub	r9,r8
80008e24:	fe f8 03 ac 	ld.w	r8,pc[940]
80008e28:	91 19       	st.w	r8[0x4],r9
            return true;
80008e2a:	30 18       	mov	r8,1
80008e2c:	e0 8f 01 c7 	bral	800091ba <fat_cluster_list+0x462>
         } else {
            fs_g_status = FS_ERR_OUT_LIST;
80008e30:	fe f9 03 94 	ld.w	r9,pc[916]
80008e34:	31 a8       	mov	r8,26
80008e36:	b2 88       	st.b	r9[0x0],r8
            return false;        // Position outside the root area
80008e38:	30 08       	mov	r8,0
80008e3a:	e0 8f 01 c0 	bral	800091ba <fat_cluster_list+0x462>
         }
      }
      if ( Is_fat32 )
80008e3e:	fe f8 03 8a 	ld.w	r8,pc[906]
80008e42:	11 89       	ld.ub	r9,r8[0x0]
80008e44:	30 38       	mov	r8,3
80008e46:	f0 09 18 00 	cp.b	r9,r8
80008e4a:	c0 e1       	brne	80008e66 <fat_cluster_list+0x10e>
      {
         // For FAT 32, the root is a cluster list and the first cluster is reading during the mount
         fs_g_cluster.u32_pos = fs_g_nav.rootdir.u32_cluster;
80008e4c:	fe f8 03 88 	ld.w	r8,pc[904]
80008e50:	70 69       	ld.w	r9,r8[0x18]
80008e52:	fe f8 03 86 	ld.w	r8,pc[902]
80008e56:	91 09       	st.w	r8[0x0],r9
80008e58:	c0 78       	rjmp	80008e66 <fat_cluster_list+0x10e>
      }
   } else {
      // It is the first cluster of a cluster list
      fs_g_cluster.u32_pos = fs_g_seg.u32_addr;
80008e5a:	fe f8 03 76 	ld.w	r8,pc[886]
80008e5e:	70 09       	ld.w	r9,r8[0x0]
80008e60:	fe f8 03 78 	ld.w	r8,pc[888]
80008e64:	91 09       	st.w	r8[0x0],r9
   }

   // Management of cluster list caches
   if( FS_CLUST_ACT_CLR != opt_action )
80008e66:	ef 39 ff f4 	ld.ub	r9,r7[-12]
80008e6a:	30 38       	mov	r8,3
80008e6c:	f0 09 18 00 	cp.b	r9,r8
80008e70:	c0 c0       	breq	80008e88 <fat_cluster_list+0x130>
   {
      if( fat_cache_clusterlist_update_read( b_for_file ) )
80008e72:	ef 38 ff f0 	ld.ub	r8,r7[-16]
80008e76:	10 9c       	mov	r12,r8
80008e78:	f0 1f 00 d9 	mcall	800091dc <fat_cluster_list+0x484>
80008e7c:	18 98       	mov	r8,r12
80008e7e:	58 08       	cp.w	r8,0
80008e80:	c0 80       	breq	80008e90 <fat_cluster_list+0x138>
         return true;            // Segment found in cache
80008e82:	30 18       	mov	r8,1
80008e84:	e0 8f 01 9b 	bral	800091ba <fat_cluster_list+0x462>
      // Segment not found & cache ready to update
   }else{
      fat_cache_clusterlist_reset();   // It is a clear action then clear cluster list caches
80008e88:	f0 1f 00 d6 	mcall	800091e0 <fat_cluster_list+0x488>
#if (FS_LEVEL_FEATURES > FSFEATURE_READ)
      fat_clear_info_fat_mod();        // Init cache on fat modification range
80008e8c:	f0 1f 00 d6 	mcall	800091e4 <fat_cluster_list+0x48c>
#endif  // FS_LEVEL_FEATURES
   }

   // Init loop with a start segment no found
   MSB0( fs_g_seg.u32_addr ) = 0xFF;
80008e90:	fe f9 03 40 	ld.w	r9,pc[832]
80008e94:	3f f8       	mov	r8,-1
80008e96:	b2 88       	st.b	r9[0x0],r8

   //**** Loop to read the cluster list
   while ( 1 )
   {
      if ( fs_g_seg.u32_size_or_pos < fs_g_nav.u8_BPB_SecPerClus )
80008e98:	fe f8 03 38 	ld.w	r8,pc[824]
80008e9c:	70 19       	ld.w	r9,r8[0x4]
80008e9e:	fe f8 03 36 	ld.w	r8,pc[822]
80008ea2:	11 98       	ld.ub	r8,r8[0x1]
80008ea4:	10 39       	cp.w	r9,r8
80008ea6:	e0 82 00 9b 	brhs	80008fdc <fat_cluster_list+0x284>
      {
         // The segment starts in this cluster
         // Compute the sector address of this cluster
         fs_g_seg.u32_addr = ((fs_g_cluster.u32_pos - 2) * fs_g_nav.u8_BPB_SecPerClus)
80008eaa:	fe f8 03 2e 	ld.w	r8,pc[814]
80008eae:	70 08       	ld.w	r8,r8[0x0]
80008eb0:	f0 c9 00 02 	sub	r9,r8,2
80008eb4:	fe f8 03 20 	ld.w	r8,pc[800]
80008eb8:	11 98       	ld.ub	r8,r8[0x1]
80008eba:	b1 39       	mul	r9,r8
                           + fs_g_nav.u32_ptr_fat + fs_g_nav.u32_offset_data + fs_g_seg.u32_size_or_pos;
80008ebc:	fe f8 03 18 	ld.w	r8,pc[792]
80008ec0:	70 48       	ld.w	r8,r8[0x10]
80008ec2:	10 09       	add	r9,r8
80008ec4:	fe f8 03 10 	ld.w	r8,pc[784]
80008ec8:	70 58       	ld.w	r8,r8[0x14]
80008eca:	10 09       	add	r9,r8
   {
      if ( fs_g_seg.u32_size_or_pos < fs_g_nav.u8_BPB_SecPerClus )
      {
         // The segment starts in this cluster
         // Compute the sector address of this cluster
         fs_g_seg.u32_addr = ((fs_g_cluster.u32_pos - 2) * fs_g_nav.u8_BPB_SecPerClus)
80008ecc:	fe f8 03 04 	ld.w	r8,pc[772]
80008ed0:	70 18       	ld.w	r8,r8[0x4]
80008ed2:	10 09       	add	r9,r8
80008ed4:	fe f8 02 fc 	ld.w	r8,pc[764]
80008ed8:	91 09       	st.w	r8[0x0],r9
                           + fs_g_nav.u32_ptr_fat + fs_g_nav.u32_offset_data + fs_g_seg.u32_size_or_pos;

         if ( FS_CLUST_ACT_ONE == opt_action )
80008eda:	ef 39 ff f4 	ld.ub	r9,r7[-12]
80008ede:	30 28       	mov	r8,2
80008ee0:	f0 09 18 00 	cp.b	r9,r8
80008ee4:	c1 51       	brne	80008f0e <fat_cluster_list+0x1b6>
         {
            // Compute the maximum size
            fs_g_seg.u32_size_or_pos = fs_g_nav.u8_BPB_SecPerClus-fs_g_seg.u32_size_or_pos;
80008ee6:	fe f8 02 ee 	ld.w	r8,pc[750]
80008eea:	11 98       	ld.ub	r8,r8[0x1]
80008eec:	10 99       	mov	r9,r8
80008eee:	fe f8 02 e2 	ld.w	r8,pc[738]
80008ef2:	70 18       	ld.w	r8,r8[0x4]
80008ef4:	10 19       	sub	r9,r8
80008ef6:	fe f8 02 da 	ld.w	r8,pc[730]
80008efa:	91 19       	st.w	r8[0x4],r9
            fat_cache_clusterlist_update_finish();
80008efc:	f0 1f 00 bb 	mcall	800091e8 <fat_cluster_list+0x490>
            // Send a size of one sector
            fs_g_seg.u32_size_or_pos = 1;
80008f00:	fe f8 02 d0 	ld.w	r8,pc[720]
80008f04:	30 19       	mov	r9,1
80008f06:	91 19       	st.w	r8[0x4],r9
            return true;
80008f08:	30 18       	mov	r8,1
80008f0a:	e0 8f 01 58 	bral	800091ba <fat_cluster_list+0x462>
         }
         // Update the segment size
         fs_g_seg.u32_size_or_pos = fs_g_nav.u8_BPB_SecPerClus - LSB0( fs_g_seg.u32_size_or_pos );
80008f0e:	fe f8 02 c6 	ld.w	r8,pc[710]
80008f12:	11 98       	ld.ub	r8,r8[0x1]
80008f14:	10 99       	mov	r9,r8
80008f16:	fe f8 02 ba 	ld.w	r8,pc[698]
80008f1a:	2f c8       	sub	r8,-4
80008f1c:	2f d8       	sub	r8,-3
80008f1e:	11 88       	ld.ub	r8,r8[0x0]
80008f20:	f2 08 01 08 	sub	r8,r9,r8
80008f24:	10 99       	mov	r9,r8
80008f26:	fe f8 02 aa 	ld.w	r8,pc[682]
80008f2a:	91 19       	st.w	r8[0x4],r9

         // Take time, during read cluster list on FAT 16 & 32
         if( (FS_CLUST_ACT_SEG == opt_action)
80008f2c:	ef 39 ff f4 	ld.ub	r9,r7[-12]
80008f30:	30 18       	mov	r8,1
80008f32:	f0 09 18 00 	cp.b	r9,r8
80008f36:	c5 31       	brne	80008fdc <fat_cluster_list+0x284>
         &&  (!Is_fat12) )
80008f38:	fe f8 02 90 	ld.w	r8,pc[656]
80008f3c:	11 89       	ld.ub	r9,r8[0x0]
         }
         // Update the segment size
         fs_g_seg.u32_size_or_pos = fs_g_nav.u8_BPB_SecPerClus - LSB0( fs_g_seg.u32_size_or_pos );

         // Take time, during read cluster list on FAT 16 & 32
         if( (FS_CLUST_ACT_SEG == opt_action)
80008f3e:	30 18       	mov	r8,1
80008f40:	f0 09 18 00 	cp.b	r9,r8
80008f44:	c4 c0       	breq	80008fdc <fat_cluster_list+0x284>
         &&  (!Is_fat12) )
         {
            // Init loop with the current cluster
            u32_tmp = fs_g_cluster.u32_pos;
80008f46:	fe f8 02 92 	ld.w	r8,pc[658]
80008f4a:	70 08       	ld.w	r8,r8[0x0]
80008f4c:	ef 48 ff f8 	st.w	r7[-8],r8
            if( !fat_cluster_val( FS_CLUST_VAL_READ ))
80008f50:	30 0c       	mov	r12,0
80008f52:	f0 1f 00 a7 	mcall	800091ec <fat_cluster_list+0x494>
80008f56:	18 98       	mov	r8,r12
80008f58:	ec 18 00 01 	eorl	r8,0x1
80008f5c:	5c 58       	castu.b	r8
80008f5e:	c0 50       	breq	80008f68 <fat_cluster_list+0x210>
               return false;
80008f60:	30 08       	mov	r8,0
80008f62:	e0 8f 01 2c 	bral	800091ba <fat_cluster_list+0x462>
                  fs_g_seg.u32_size_or_pos += u32_tmp * fs_g_nav.u8_BPB_SecPerClus;
                  break;
               }
               if( !fat_cluster_readnext() )
                  return false;
            }
80008f66:	d7 03       	nop
            if( !fat_cluster_val( FS_CLUST_VAL_READ ))
               return false;
            // Read cluster list, while this one is continue
            while(1)
            {
               if ( (++fs_g_cluster.u32_pos) != fs_g_cluster.u32_val )
80008f68:	fe f8 02 70 	ld.w	r8,pc[624]
80008f6c:	70 08       	ld.w	r8,r8[0x0]
80008f6e:	f0 c9 ff ff 	sub	r9,r8,-1
80008f72:	fe f8 02 66 	ld.w	r8,pc[614]
80008f76:	91 09       	st.w	r8[0x0],r9
80008f78:	fe f8 02 60 	ld.w	r8,pc[608]
80008f7c:	70 09       	ld.w	r9,r8[0x0]
80008f7e:	fe f8 02 5a 	ld.w	r8,pc[602]
80008f82:	70 18       	ld.w	r8,r8[0x4]
80008f84:	10 39       	cp.w	r9,r8
80008f86:	c2 20       	breq	80008fca <fat_cluster_list+0x272>
               {
                  fs_g_cluster.u32_pos--;                   // Recompute previous value
80008f88:	fe f8 02 50 	ld.w	r8,pc[592]
80008f8c:	70 08       	ld.w	r8,r8[0x0]
80008f8e:	f0 c9 00 01 	sub	r9,r8,1
80008f92:	fe f8 02 46 	ld.w	r8,pc[582]
80008f96:	91 09       	st.w	r8[0x0],r9
                  u32_tmp = fs_g_cluster.u32_pos - u32_tmp; // Compute the size of cluster list
80008f98:	fe f8 02 40 	ld.w	r8,pc[576]
80008f9c:	70 09       	ld.w	r9,r8[0x0]
80008f9e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008fa2:	f2 08 01 08 	sub	r8,r9,r8
80008fa6:	ef 48 ff f8 	st.w	r7[-8],r8
                  fs_g_seg.u32_size_or_pos += u32_tmp * fs_g_nav.u8_BPB_SecPerClus;
80008faa:	fe f8 02 26 	ld.w	r8,pc[550]
80008fae:	70 19       	ld.w	r9,r8[0x4]
80008fb0:	fe f8 02 24 	ld.w	r8,pc[548]
80008fb4:	11 98       	ld.ub	r8,r8[0x1]
80008fb6:	10 9a       	mov	r10,r8
80008fb8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008fbc:	f4 08 02 48 	mul	r8,r10,r8
80008fc0:	10 09       	add	r9,r8
80008fc2:	fe f8 02 0e 	ld.w	r8,pc[526]
80008fc6:	91 19       	st.w	r8[0x4],r9
                  break;
80008fc8:	c0 a8       	rjmp	80008fdc <fat_cluster_list+0x284>
               }
               if( !fat_cluster_readnext() )
80008fca:	f0 1f 00 8a 	mcall	800091f0 <fat_cluster_list+0x498>
80008fce:	18 98       	mov	r8,r12
80008fd0:	ec 18 00 01 	eorl	r8,0x1
80008fd4:	5c 58       	castu.b	r8
80008fd6:	cc 80       	breq	80008f66 <fat_cluster_list+0x20e>
                  return false;
80008fd8:	30 08       	mov	r8,0
80008fda:	cf 08       	rjmp	800091ba <fat_cluster_list+0x462>
            }
         }
      }
      // Get the cluster value
      if( !fat_cluster_val( FS_CLUST_VAL_READ ))
80008fdc:	30 0c       	mov	r12,0
80008fde:	f0 1f 00 84 	mcall	800091ec <fat_cluster_list+0x494>
80008fe2:	18 98       	mov	r8,r12
80008fe4:	ec 18 00 01 	eorl	r8,0x1
80008fe8:	5c 58       	castu.b	r8
80008fea:	c0 30       	breq	80008ff0 <fat_cluster_list+0x298>
         return false;
80008fec:	30 08       	mov	r8,0
80008fee:	ce 68       	rjmp	800091ba <fat_cluster_list+0x462>

      // Read and check the status of the new cluster
      u8_cluster_status = fat_checkcluster();
80008ff0:	f0 1f 00 81 	mcall	800091f4 <fat_cluster_list+0x49c>
80008ff4:	18 98       	mov	r8,r12
80008ff6:	ef 68 ff ff 	st.b	r7[-1],r8
      if (FS_CLUS_BAD == u8_cluster_status)
80008ffa:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80008ffe:	30 18       	mov	r8,1
80009000:	f0 09 18 00 	cp.b	r9,r8
80009004:	c0 31       	brne	8000900a <fat_cluster_list+0x2b2>
         return false; // error, end of cluster list
80009006:	30 08       	mov	r8,0
80009008:	cd 98       	rjmp	800091ba <fat_cluster_list+0x462>

      if (0xFF == MSB0(fs_g_seg.u32_addr))
8000900a:	4f 28       	lddpc	r8,800091d0 <fat_cluster_list+0x478>
8000900c:	11 89       	ld.ub	r9,r8[0x0]
8000900e:	3f f8       	mov	r8,-1
80009010:	f0 09 18 00 	cp.b	r9,r8
80009014:	c7 91       	brne	80009106 <fat_cluster_list+0x3ae>
      {
         // The beginning of the segment isn't found
         if (FS_CLUS_END == u8_cluster_status)
80009016:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000901a:	30 28       	mov	r8,2
8000901c:	f0 09 18 00 	cp.b	r9,r8
80009020:	c4 91       	brne	800090b2 <fat_cluster_list+0x35a>
         {
            u32_tmp = fs_g_seg.u32_size_or_pos;       // Save number of sector remaining
80009022:	4e c8       	lddpc	r8,800091d0 <fat_cluster_list+0x478>
80009024:	70 18       	ld.w	r8,r8[0x4]
80009026:	ef 48 ff f8 	st.w	r7[-8],r8

            // Compute the sector address of this last cluster to take time during a future request with the same cluster list
            fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_start -= fs_g_seg.u32_size_or_pos;
8000902a:	4f 48       	lddpc	r8,800091f8 <fat_cluster_list+0x4a0>
8000902c:	11 88       	ld.ub	r8,r8[0x0]
8000902e:	10 99       	mov	r9,r8
80009030:	4f 28       	lddpc	r8,800091f8 <fat_cluster_list+0x4a0>
80009032:	11 88       	ld.ub	r8,r8[0x0]
80009034:	10 9a       	mov	r10,r8
80009036:	4f 2b       	lddpc	r11,800091fc <fat_cluster_list+0x4a4>
80009038:	14 98       	mov	r8,r10
8000903a:	a3 68       	lsl	r8,0x2
8000903c:	14 08       	add	r8,r10
8000903e:	a3 68       	lsl	r8,0x2
80009040:	f6 08 00 08 	add	r8,r11,r8
80009044:	2f 88       	sub	r8,-8
80009046:	70 0a       	ld.w	r10,r8[0x0]
80009048:	4e 28       	lddpc	r8,800091d0 <fat_cluster_list+0x478>
8000904a:	70 18       	ld.w	r8,r8[0x4]
8000904c:	10 1a       	sub	r10,r8
8000904e:	4e cb       	lddpc	r11,800091fc <fat_cluster_list+0x4a4>
80009050:	12 98       	mov	r8,r9
80009052:	a3 68       	lsl	r8,0x2
80009054:	12 08       	add	r8,r9
80009056:	a3 68       	lsl	r8,0x2
80009058:	f6 08 00 08 	add	r8,r11,r8
8000905c:	2f 88       	sub	r8,-8
8000905e:	91 0a       	st.w	r8[0x0],r10
            fs_g_seg.u32_addr = ((fs_g_cluster.u32_pos - 2) * fs_g_nav.u8_BPB_SecPerClus)
80009060:	4d e8       	lddpc	r8,800091d8 <fat_cluster_list+0x480>
80009062:	70 08       	ld.w	r8,r8[0x0]
80009064:	f0 c9 00 02 	sub	r9,r8,2
80009068:	4d b8       	lddpc	r8,800091d4 <fat_cluster_list+0x47c>
8000906a:	11 98       	ld.ub	r8,r8[0x1]
8000906c:	b1 39       	mul	r9,r8
                              + fs_g_nav.u32_ptr_fat + fs_g_nav.u32_offset_data;
8000906e:	4d a8       	lddpc	r8,800091d4 <fat_cluster_list+0x47c>
80009070:	70 48       	ld.w	r8,r8[0x10]
80009072:	10 09       	add	r9,r8
         {
            u32_tmp = fs_g_seg.u32_size_or_pos;       // Save number of sector remaining

            // Compute the sector address of this last cluster to take time during a future request with the same cluster list
            fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_start -= fs_g_seg.u32_size_or_pos;
            fs_g_seg.u32_addr = ((fs_g_cluster.u32_pos - 2) * fs_g_nav.u8_BPB_SecPerClus)
80009074:	4d 88       	lddpc	r8,800091d4 <fat_cluster_list+0x47c>
80009076:	70 58       	ld.w	r8,r8[0x14]
80009078:	10 09       	add	r9,r8
8000907a:	4d 68       	lddpc	r8,800091d0 <fat_cluster_list+0x478>
8000907c:	91 09       	st.w	r8[0x0],r9
                              + fs_g_nav.u32_ptr_fat + fs_g_nav.u32_offset_data;
            fs_g_seg.u32_size_or_pos = fs_g_nav.u8_BPB_SecPerClus;
8000907e:	4d 68       	lddpc	r8,800091d4 <fat_cluster_list+0x47c>
80009080:	11 98       	ld.ub	r8,r8[0x1]
80009082:	10 99       	mov	r9,r8
80009084:	4d 38       	lddpc	r8,800091d0 <fat_cluster_list+0x478>
80009086:	91 19       	st.w	r8[0x4],r9
            if (FS_CLUST_ACT_CLR != opt_action)
80009088:	ef 39 ff f4 	ld.ub	r9,r7[-12]
8000908c:	30 38       	mov	r8,3
8000908e:	f0 09 18 00 	cp.b	r9,r8
80009092:	c0 30       	breq	80009098 <fat_cluster_list+0x340>
               fat_cache_clusterlist_update_finish();
80009094:	f0 1f 00 55 	mcall	800091e8 <fat_cluster_list+0x490>

            // The position is outside the cluster list
            fs_g_seg.u32_addr = fs_g_cluster.u32_pos; // Send the last cluster value
80009098:	4d 08       	lddpc	r8,800091d8 <fat_cluster_list+0x480>
8000909a:	70 09       	ld.w	r9,r8[0x0]
8000909c:	4c d8       	lddpc	r8,800091d0 <fat_cluster_list+0x478>
8000909e:	91 09       	st.w	r8[0x0],r9
            fs_g_seg.u32_size_or_pos = u32_tmp;       // Restore number of sector remaining
800090a0:	4c c8       	lddpc	r8,800091d0 <fat_cluster_list+0x478>
800090a2:	ee f9 ff f8 	ld.w	r9,r7[-8]
800090a6:	91 19       	st.w	r8[0x4],r9
            fs_g_status = FS_ERR_OUT_LIST;
800090a8:	4c 79       	lddpc	r9,800091c4 <fat_cluster_list+0x46c>
800090aa:	31 a8       	mov	r8,26
800090ac:	b2 88       	st.b	r9[0x0],r8
            return false;
800090ae:	30 08       	mov	r8,0
800090b0:	c8 58       	rjmp	800091ba <fat_cluster_list+0x462>
         }
         // Good cluster then continue
         fs_g_seg.u32_size_or_pos -= fs_g_nav.u8_BPB_SecPerClus;
800090b2:	4c 88       	lddpc	r8,800091d0 <fat_cluster_list+0x478>
800090b4:	70 19       	ld.w	r9,r8[0x4]
800090b6:	4c 88       	lddpc	r8,800091d4 <fat_cluster_list+0x47c>
800090b8:	11 98       	ld.ub	r8,r8[0x1]
800090ba:	10 19       	sub	r9,r8
800090bc:	4c 58       	lddpc	r8,800091d0 <fat_cluster_list+0x478>
800090be:	91 19       	st.w	r8[0x4],r9
#if (FS_LEVEL_FEATURES > FSFEATURE_READ)
         if (FS_CLUST_ACT_CLR == opt_action)
800090c0:	ef 39 ff f4 	ld.ub	r9,r7[-12]
800090c4:	30 38       	mov	r8,3
800090c6:	f0 09 18 00 	cp.b	r9,r8
800090ca:	c7 21       	brne	800091ae <fat_cluster_list+0x456>
         {
            if( fs_g_seg.u32_size_or_pos == 0)
800090cc:	4c 18       	lddpc	r8,800091d0 <fat_cluster_list+0x478>
800090ce:	70 18       	ld.w	r8,r8[0x4]
800090d0:	58 08       	cp.w	r8,0
800090d2:	c6 e1       	brne	800091ae <fat_cluster_list+0x456>
            {
               // At cluster position, set the flag end of cluster list
               fs_g_seg.u32_addr = fs_g_cluster.u32_val; // Save the next cluster
800090d4:	4c 18       	lddpc	r8,800091d8 <fat_cluster_list+0x480>
800090d6:	70 19       	ld.w	r9,r8[0x4]
800090d8:	4b e8       	lddpc	r8,800091d0 <fat_cluster_list+0x478>
800090da:	91 09       	st.w	r8[0x0],r9
               fs_g_cluster.u32_val = FS_CLUST_VAL_EOL;
800090dc:	4b f8       	lddpc	r8,800091d8 <fat_cluster_list+0x480>
800090de:	e0 69 ff ff 	mov	r9,65535
800090e2:	ea 19 0f ff 	orh	r9,0xfff
800090e6:	91 19       	st.w	r8[0x4],r9
               if( !fat_cluster_val( FS_CLUST_VAL_WRITE ))
800090e8:	30 1c       	mov	r12,1
800090ea:	f0 1f 00 41 	mcall	800091ec <fat_cluster_list+0x494>
800090ee:	18 98       	mov	r8,r12
800090f0:	ec 18 00 01 	eorl	r8,0x1
800090f4:	5c 58       	castu.b	r8
800090f6:	c0 30       	breq	800090fc <fat_cluster_list+0x3a4>
                  return false;
800090f8:	30 08       	mov	r8,0
800090fa:	c6 08       	rjmp	800091ba <fat_cluster_list+0x462>
               fs_g_cluster.u32_val = fs_g_seg.u32_addr; // Restore the next cluster
800090fc:	4b 58       	lddpc	r8,800091d0 <fat_cluster_list+0x478>
800090fe:	70 09       	ld.w	r9,r8[0x0]
80009100:	4b 68       	lddpc	r8,800091d8 <fat_cluster_list+0x480>
80009102:	91 19       	st.w	r8[0x4],r9
80009104:	c5 58       	rjmp	800091ae <fat_cluster_list+0x456>
#endif  // FS_LEVEL_FEATURES
      }
      else
      {
         // The beginning of segment is found
         if (FS_CLUST_ACT_SEG == opt_action)
80009106:	ef 39 ff f4 	ld.ub	r9,r7[-12]
8000910a:	30 18       	mov	r8,1
8000910c:	f0 09 18 00 	cp.b	r9,r8
80009110:	c0 d1       	brne	8000912a <fat_cluster_list+0x3d2>
         {
            if ( (fs_g_cluster.u32_pos+1) != fs_g_cluster.u32_val )
80009112:	4b 28       	lddpc	r8,800091d8 <fat_cluster_list+0x480>
80009114:	70 08       	ld.w	r8,r8[0x0]
80009116:	f0 c9 ff ff 	sub	r9,r8,-1
8000911a:	4b 08       	lddpc	r8,800091d8 <fat_cluster_list+0x480>
8000911c:	70 18       	ld.w	r8,r8[0x4]
8000911e:	10 39       	cp.w	r9,r8
80009120:	c0 50       	breq	8000912a <fat_cluster_list+0x3d2>
            {
               // The cluster is not a continue cluster or a invalid cluster
               fat_cache_clusterlist_update_finish();
80009122:	f0 1f 00 32 	mcall	800091e8 <fat_cluster_list+0x490>
               return true;                              // End of segment
80009126:	30 18       	mov	r8,1
80009128:	c4 98       	rjmp	800091ba <fat_cluster_list+0x462>
            }
         }
#if (FS_LEVEL_FEATURES > FSFEATURE_READ)
         if (FS_CLUST_ACT_CLR == opt_action)
8000912a:	ef 39 ff f4 	ld.ub	r9,r7[-12]
8000912e:	30 38       	mov	r8,3
80009130:	f0 09 18 00 	cp.b	r9,r8
80009134:	c2 21       	brne	80009178 <fat_cluster_list+0x420>
         {
            //** Clear cluster position
            fs_g_seg.u32_addr = fs_g_cluster.u32_val;    // Save the next cluster
80009136:	4a 98       	lddpc	r8,800091d8 <fat_cluster_list+0x480>
80009138:	70 19       	ld.w	r9,r8[0x4]
8000913a:	4a 68       	lddpc	r8,800091d0 <fat_cluster_list+0x478>
8000913c:	91 09       	st.w	r8[0x0],r9
            fs_g_cluster.u32_val = 0;                    // by default free cluster
8000913e:	4a 78       	lddpc	r8,800091d8 <fat_cluster_list+0x480>
80009140:	30 09       	mov	r9,0
80009142:	91 19       	st.w	r8[0x4],r9
            // If it is the first cluster (fs_g_seg.u32_size_or_pos <= fs_g_nav.u8_BPB_SecPerClus)
            // and doesn't start at the beginning of cluster (fs_g_seg.u32_size_or_pos != fs_g_nav.u8_BPB_SecPerClus)
            if (fs_g_seg.u32_size_or_pos < fs_g_nav.u8_BPB_SecPerClus)
80009144:	4a 38       	lddpc	r8,800091d0 <fat_cluster_list+0x478>
80009146:	70 19       	ld.w	r9,r8[0x4]
80009148:	4a 38       	lddpc	r8,800091d4 <fat_cluster_list+0x47c>
8000914a:	11 98       	ld.ub	r8,r8[0x1]
8000914c:	10 39       	cp.w	r9,r8
8000914e:	c0 72       	brcc	8000915c <fat_cluster_list+0x404>
            {
               fs_g_cluster.u32_val = FS_CLUST_VAL_EOL;  // End of cluster list allocated
80009150:	4a 28       	lddpc	r8,800091d8 <fat_cluster_list+0x480>
80009152:	e0 69 ff ff 	mov	r9,65535
80009156:	ea 19 0f ff 	orh	r9,0xfff
8000915a:	91 19       	st.w	r8[0x4],r9
            }
            if( !fat_cluster_val( FS_CLUST_VAL_WRITE ))
8000915c:	30 1c       	mov	r12,1
8000915e:	f0 1f 00 24 	mcall	800091ec <fat_cluster_list+0x494>
80009162:	18 98       	mov	r8,r12
80009164:	ec 18 00 01 	eorl	r8,0x1
80009168:	5c 58       	castu.b	r8
8000916a:	c0 30       	breq	80009170 <fat_cluster_list+0x418>
               return false;
8000916c:	30 08       	mov	r8,0
8000916e:	c2 68       	rjmp	800091ba <fat_cluster_list+0x462>
            fs_g_cluster.u32_val = fs_g_seg.u32_addr;    // Restore the next cluster
80009170:	49 88       	lddpc	r8,800091d0 <fat_cluster_list+0x478>
80009172:	70 09       	ld.w	r9,r8[0x0]
80009174:	49 98       	lddpc	r8,800091d8 <fat_cluster_list+0x480>
80009176:	91 19       	st.w	r8[0x4],r9
            // !!!! because it isn't possible that MSB0( fs_g_cluster.val ) = 0xFF.
         }
#endif  // FS_LEVEL_FEATURES

         // Check the end of cluster list
         if (FS_CLUS_END == u8_cluster_status)
80009178:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000917c:	30 28       	mov	r8,2
8000917e:	f0 09 18 00 	cp.b	r9,r8
80009182:	c0 f1       	brne	800091a0 <fat_cluster_list+0x448>
         {
#if (FS_LEVEL_FEATURES > FSFEATURE_READ)
            if (FS_CLUST_ACT_CLR == opt_action)
80009184:	ef 39 ff f4 	ld.ub	r9,r7[-12]
80009188:	30 38       	mov	r8,3
8000918a:	f0 09 18 00 	cp.b	r9,r8
8000918e:	c0 51       	brne	80009198 <fat_cluster_list+0x440>
            {
               return fat_update_fat2();
80009190:	f0 1f 00 1c 	mcall	80009200 <fat_cluster_list+0x4a8>
80009194:	18 98       	mov	r8,r12
80009196:	c1 28       	rjmp	800091ba <fat_cluster_list+0x462>
            }
#endif  // FS_LEVEL_FEATURES
            fat_cache_clusterlist_update_finish();
80009198:	f0 1f 00 14 	mcall	800091e8 <fat_cluster_list+0x490>
            return true; // End of segment
8000919c:	30 18       	mov	r8,1
8000919e:	c0 e8       	rjmp	800091ba <fat_cluster_list+0x462>
         }

         // Update the segment size
         fs_g_seg.u32_size_or_pos += fs_g_nav.u8_BPB_SecPerClus;
800091a0:	48 c8       	lddpc	r8,800091d0 <fat_cluster_list+0x478>
800091a2:	70 19       	ld.w	r9,r8[0x4]
800091a4:	48 c8       	lddpc	r8,800091d4 <fat_cluster_list+0x47c>
800091a6:	11 98       	ld.ub	r8,r8[0x1]
800091a8:	10 09       	add	r9,r8
800091aa:	48 a8       	lddpc	r8,800091d0 <fat_cluster_list+0x478>
800091ac:	91 19       	st.w	r8[0x4],r9
      }
      // HERE, Continue to read the cluster list
      // The next cluster is the value of previous cluster
      fs_g_cluster.u32_pos = fs_g_cluster.u32_val;
800091ae:	48 b8       	lddpc	r8,800091d8 <fat_cluster_list+0x480>
800091b0:	70 19       	ld.w	r9,r8[0x4]
800091b2:	48 a8       	lddpc	r8,800091d8 <fat_cluster_list+0x480>
800091b4:	91 09       	st.w	r8[0x0],r9
   }  // End of main loop
800091b6:	fe 9f fe 71 	bral	80008e98 <fat_cluster_list+0x140>
}
800091ba:	10 9c       	mov	r12,r8
800091bc:	2f cd       	sub	sp,-16
800091be:	e3 cd 80 80 	ldm	sp++,r7,pc
800091c2:	00 00       	add	r0,r0
800091c4:	00 00       	add	r0,r0
800091c6:	0d d4       	ld.ub	r4,r6[0x5]
800091c8:	00 00       	add	r0,r0
800091ca:	0d d0       	ld.ub	r0,r6[0x5]
800091cc:	80 00       	ld.sh	r0,r0[0x0]
800091ce:	b3 cc       	cbr	r12,0x12
800091d0:	00 00       	add	r0,r0
800091d2:	0e 2c       	rsub	r12,r7
800091d4:	00 00       	add	r0,r0
800091d6:	0d 84       	ld.ub	r4,r6[0x0]
800091d8:	00 00       	add	r0,r0
800091da:	0e 24       	rsub	r4,r7
800091dc:	80 00       	ld.sh	r0,r0[0x0]
800091de:	9b 1c       	st.w	sp[0x4],r12
800091e0:	80 00       	ld.sh	r0,r0[0x0]
800091e2:	97 e8       	st.w	r11[0x38],r8
800091e4:	80 00       	ld.sh	r0,r0[0x0]
800091e6:	c3 b4       	brge	8000925c <fat_cluster_val+0x58>
800091e8:	80 00       	ld.sh	r0,r0[0x0]
800091ea:	99 4c       	st.w	r12[0x10],r12
800091ec:	80 00       	ld.sh	r0,r0[0x0]
800091ee:	92 04       	ld.sh	r4,r9[0x0]
800091f0:	80 00       	ld.sh	r0,r0[0x0]
800091f2:	96 54       	ld.sh	r4,r11[0xa]
800091f4:	80 00       	ld.sh	r0,r0[0x0]
800091f6:	97 3c       	st.w	r11[0xc],r12
800091f8:	00 00       	add	r0,r0
800091fa:	0d d6       	ld.ub	r6,r6[0x5]
800091fc:	00 00       	add	r0,r0
800091fe:	0b 58       	ld.sh	r8,--r5
80009200:	80 00       	ld.sh	r0,r0[0x0]
80009202:	c3 d4       	brge	8000927c <fat_cluster_val+0x78>

80009204 <fat_cluster_val>:
//!   fs_g_u16_pos_fat        position in FAT of the cluster to read or write
//!                           value init in case of the fat_cluster_readnext() routine is used after
//! @endverbatim
//!
bool  fat_cluster_val( bool b_mode )
{
80009204:	eb cd 40 80 	pushm	r7,lr
80009208:	1a 97       	mov	r7,sp
8000920a:	20 4d       	sub	sp,16
8000920c:	18 98       	mov	r8,r12
8000920e:	ef 68 ff f0 	st.b	r7[-16],r8
   _MEM_TYPE_FAST_ uint32_t   u32_offset_fat =0;
80009212:	30 08       	mov	r8,0
80009214:	ef 48 ff f4 	st.w	r7[-12],r8
   _MEM_TYPE_FAST_ uint8_t    u8_data1, u8_data2,u8_data3,u8_data4;
   _MEM_TYPE_FAST_ PTR_CACHE u8_ptr_cluster;

   //**** Compute the cluster position in FAT (sector address & position in sector)
   if ( Is_fat32 )
80009218:	fe f8 04 14 	ld.w	r8,pc[1044]
8000921c:	11 89       	ld.ub	r9,r8[0x0]
8000921e:	30 38       	mov	r8,3
80009220:	f0 09 18 00 	cp.b	r9,r8
80009224:	c1 41       	brne	8000924c <fat_cluster_val+0x48>
   {
      // FAT 32
      // Optimization of -> u32_offset_fat = fs_g_cluster.pos * 4 / FS_CACHE_SIZE;
      // Optimization of -> u32_offset_fat = fs_g_cluster.pos / 128
      u32_offset_fat = fs_g_cluster.u32_pos >> (8-1);
80009226:	fe f8 04 0a 	ld.w	r8,pc[1034]
8000922a:	70 08       	ld.w	r8,r8[0x0]
8000922c:	a7 98       	lsr	r8,0x7
8000922e:	ef 48 ff f4 	st.w	r7[-12],r8

      // Optimization of -> fs_g_u16_pos_fat = (fs_g_cluster.u32_pos * 4) % FS_CACHE_SIZE;
      // Optimization of -> fs_g_u16_pos_fat = (fs_g_cluster.u32_pos % 128) * 4
      fs_g_u16_pos_fat = ((uint16_t)(LSB0(fs_g_cluster.u32_pos) & 0x7F))<< 2;
80009232:	fe f8 03 fe 	ld.w	r8,pc[1022]
80009236:	2f d8       	sub	r8,-3
80009238:	11 88       	ld.ub	r8,r8[0x0]
8000923a:	5c 88       	casts.h	r8
8000923c:	f1 d8 c0 07 	bfextu	r8,r8,0x0,0x7
80009240:	a3 68       	lsl	r8,0x2
80009242:	5c 88       	casts.h	r8
80009244:	fe f9 03 f0 	ld.w	r9,pc[1008]
80009248:	b2 08       	st.h	r9[0x0],r8
8000924a:	c4 08       	rjmp	800092ca <fat_cluster_val+0xc6>
   }
   else if ( Is_fat16 )
8000924c:	fe f8 03 e0 	ld.w	r8,pc[992]
80009250:	11 89       	ld.ub	r9,r8[0x0]
80009252:	30 28       	mov	r8,2
80009254:	f0 09 18 00 	cp.b	r9,r8
80009258:	c1 11       	brne	8000927a <fat_cluster_val+0x76>
   {
      // FAT 16
      // Optimization of -> u32_offset_fat = fs_g_cluster.u32_pos * 2 / FS_CACHE_SIZE = fs_g_cluster.u32_pos / 256;
      u32_offset_fat = LSB1(fs_g_cluster.u32_pos);
8000925a:	fe f8 03 d6 	ld.w	r8,pc[982]
8000925e:	2f e8       	sub	r8,-2
80009260:	11 88       	ld.ub	r8,r8[0x0]
80009262:	ef 48 ff f4 	st.w	r7[-12],r8
      // Optimization of -> fs_g_u16_pos_fat = (fs_g_cluster.u32_pos * 2) % FS_CACHE_SIZE;
      // Optimization of -> fs_g_u16_pos_fat = (fs_g_cluster.u32_pos % 256) * 2
      fs_g_u16_pos_fat = ((uint16_t)LSB0(fs_g_cluster.u32_pos)) <<1;
80009266:	fe f8 03 ca 	ld.w	r8,pc[970]
8000926a:	2f d8       	sub	r8,-3
8000926c:	11 88       	ld.ub	r8,r8[0x0]
8000926e:	a1 78       	lsl	r8,0x1
80009270:	5c 88       	casts.h	r8
80009272:	fe f9 03 c2 	ld.w	r9,pc[962]
80009276:	b2 08       	st.h	r9[0x0],r8
80009278:	c2 98       	rjmp	800092ca <fat_cluster_val+0xc6>
   }
   else if ( Is_fat12 )
8000927a:	fe f8 03 b2 	ld.w	r8,pc[946]
8000927e:	11 89       	ld.ub	r9,r8[0x0]
80009280:	30 18       	mov	r8,1
80009282:	f0 09 18 00 	cp.b	r9,r8
80009286:	c2 21       	brne	800092ca <fat_cluster_val+0xc6>
   {
      // FAT 12
      // Optimization of -> fs_g_u16_pos_fat = fs_g_cluster.u32_pos + (fs_g_cluster.u32_pos/ 2)
      fs_g_u16_pos_fat = (uint16_t)fs_g_cluster.u32_pos + ((uint16_t)fs_g_cluster.u32_pos >>1);
80009288:	fe f8 03 a8 	ld.w	r8,pc[936]
8000928c:	70 08       	ld.w	r8,r8[0x0]
8000928e:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
80009292:	fe f8 03 9e 	ld.w	r8,pc[926]
80009296:	70 08       	ld.w	r8,r8[0x0]
80009298:	5c 88       	casts.h	r8
8000929a:	5c 78       	castu.h	r8
8000929c:	a1 98       	lsr	r8,0x1
8000929e:	5c 88       	casts.h	r8
800092a0:	f2 08 00 08 	add	r8,r9,r8
800092a4:	5c 88       	casts.h	r8
800092a6:	fe f9 03 8e 	ld.w	r9,pc[910]
800092aa:	b2 08       	st.h	r9[0x0],r8
      // Optimization of -> u32_offset_fat = fs_g_cluster.u32_pos / FS_CACHE_SIZE
      u32_offset_fat = MSB(fs_g_u16_pos_fat) >> 1;
800092ac:	fe f8 03 88 	ld.w	r8,pc[904]
800092b0:	11 88       	ld.ub	r8,r8[0x0]
800092b2:	a1 98       	lsr	r8,0x1
800092b4:	5c 58       	castu.b	r8
800092b6:	ef 48 ff f4 	st.w	r7[-12],r8
      // Optimization of -> fs_g_u16_pos_fat = fs_g_u16_pos_fat % FS_CACHE_SIZE
      MSB( fs_g_u16_pos_fat ) &= 0x01;
800092ba:	fe f9 03 7a 	ld.w	r9,pc[890]
800092be:	fe f8 03 76 	ld.w	r8,pc[886]
800092c2:	11 88       	ld.ub	r8,r8[0x0]
800092c4:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800092c8:	b2 88       	st.b	r9[0x0],r8
   }

#if (FS_LEVEL_FEATURES > FSFEATURE_READ)
   if (b_mode)
800092ca:	ef 39 ff f0 	ld.ub	r9,r7[-16]
800092ce:	30 08       	mov	r8,0
800092d0:	f0 09 18 00 	cp.b	r9,r8
800092d4:	c3 a0       	breq	80009348 <fat_cluster_val+0x144>
   {
      // Update information about FAT modification
      if( fs_g_u32_first_mod_fat > u32_offset_fat )
800092d6:	fe f8 03 62 	ld.w	r8,pc[866]
800092da:	70 09       	ld.w	r9,r8[0x0]
800092dc:	ee f8 ff f4 	ld.w	r8,r7[-12]
800092e0:	10 39       	cp.w	r9,r8
800092e2:	e0 88 00 07 	brls	800092f0 <fat_cluster_val+0xec>
      {
         fs_g_u32_first_mod_fat = u32_offset_fat;
800092e6:	fe f8 03 52 	ld.w	r8,pc[850]
800092ea:	ee f9 ff f4 	ld.w	r9,r7[-12]
800092ee:	91 09       	st.w	r8[0x0],r9
      }
      if( fs_g_u32_last_mod_fat < u32_offset_fat )
800092f0:	fe f8 03 4c 	ld.w	r8,pc[844]
800092f4:	70 09       	ld.w	r9,r8[0x0]
800092f6:	ee f8 ff f4 	ld.w	r8,r7[-12]
800092fa:	10 39       	cp.w	r9,r8
800092fc:	c0 62       	brcc	80009308 <fat_cluster_val+0x104>
      {
         fs_g_u32_last_mod_fat = u32_offset_fat;
800092fe:	fe f8 03 3e 	ld.w	r8,pc[830]
80009302:	ee f9 ff f4 	ld.w	r9,r7[-12]
80009306:	91 09       	st.w	r8[0x0],r9
      }
      if ( Is_fat12 )
80009308:	fe f8 03 24 	ld.w	r8,pc[804]
8000930c:	11 89       	ld.ub	r9,r8[0x0]
8000930e:	30 18       	mov	r8,1
80009310:	f0 09 18 00 	cp.b	r9,r8
80009314:	c1 a1       	brne	80009348 <fat_cluster_val+0x144>
      {  // A cluster may be stored on two sectors
         if( fs_g_u16_pos_fat == (FS_CACHE_SIZE-1) )
80009316:	fe f8 03 1e 	ld.w	r8,pc[798]
8000931a:	90 09       	ld.sh	r9,r8[0x0]
8000931c:	e0 68 01 ff 	mov	r8,511
80009320:	f0 09 19 00 	cp.h	r9,r8
80009324:	c1 21       	brne	80009348 <fat_cluster_val+0x144>
         {  // Count the next FAT sector
            if( fs_g_u32_last_mod_fat < (u32_offset_fat+1) )
80009326:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000932a:	f0 c9 ff ff 	sub	r9,r8,-1
8000932e:	fe f8 03 0e 	ld.w	r8,pc[782]
80009332:	70 08       	ld.w	r8,r8[0x0]
80009334:	10 39       	cp.w	r9,r8
80009336:	e0 88 00 09 	brls	80009348 <fat_cluster_val+0x144>
            {
               fs_g_u32_last_mod_fat = (u32_offset_fat+1);
8000933a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000933e:	f0 c9 ff ff 	sub	r9,r8,-1
80009342:	fe f8 02 fa 	ld.w	r8,pc[762]
80009346:	91 09       	st.w	r8[0x0],r9
      }
   }
#endif  // FS_LEVEL_FEATURES

   //**** Read cluster sector in FAT
   fs_gu32_addrsector = fs_g_nav.u32_ptr_fat + u32_offset_fat;   // Computed logical sector address
80009348:	fe f8 02 f8 	ld.w	r8,pc[760]
8000934c:	70 49       	ld.w	r9,r8[0x10]
8000934e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80009352:	10 09       	add	r9,r8
80009354:	fe f8 02 f0 	ld.w	r8,pc[752]
80009358:	91 09       	st.w	r8[0x0],r9
   if( !fat_cache_read_sector( true ))
8000935a:	30 1c       	mov	r12,1
8000935c:	f0 1f 00 bb 	mcall	80009648 <fat_cluster_val+0x444>
80009360:	18 98       	mov	r8,r12
80009362:	ec 18 00 01 	eorl	r8,0x1
80009366:	5c 58       	castu.b	r8
80009368:	c0 40       	breq	80009370 <fat_cluster_val+0x16c>
      return false;
8000936a:	30 08       	mov	r8,0
8000936c:	e0 8f 01 5c 	bral	80009624 <fat_cluster_val+0x420>

   // Read cluster information
   u8_ptr_cluster = &fs_g_sector[fs_g_u16_pos_fat];
80009370:	fe f8 02 c4 	ld.w	r8,pc[708]
80009374:	90 08       	ld.sh	r8,r8[0x0]
80009376:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
8000937a:	fe f8 02 d2 	ld.w	r8,pc[722]
8000937e:	f2 08 00 08 	add	r8,r9,r8
80009382:	ef 48 ff fc 	st.w	r7[-4],r8
   u8_data1 = u8_ptr_cluster[0];
80009386:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000938a:	11 88       	ld.ub	r8,r8[0x0]
8000938c:	ef 68 ff f8 	st.b	r7[-8],r8
   // Remark: if (fs_g_u16_pos_fat+1)=512 then it isn't a mistake, because this value will be erase in next lines
   u8_data2 = u8_ptr_cluster[1];
80009390:	ee f8 ff fc 	ld.w	r8,r7[-4]
80009394:	2f f8       	sub	r8,-1
80009396:	11 88       	ld.ub	r8,r8[0x0]
80009398:	ef 68 ff f9 	st.b	r7[-7],r8
   u8_data3 = u8_ptr_cluster[2];
8000939c:	ee f8 ff fc 	ld.w	r8,r7[-4]
800093a0:	2f e8       	sub	r8,-2
800093a2:	11 88       	ld.ub	r8,r8[0x0]
800093a4:	ef 68 ff fa 	st.b	r7[-6],r8
   u8_data4 = u8_ptr_cluster[3];
800093a8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800093ac:	2f d8       	sub	r8,-3
800093ae:	11 88       	ld.ub	r8,r8[0x0]
800093b0:	ef 68 ff fb 	st.b	r7[-5],r8

   if ( Is_fat12 )
800093b4:	fe f8 02 78 	ld.w	r8,pc[632]
800093b8:	11 89       	ld.ub	r9,r8[0x0]
800093ba:	30 18       	mov	r8,1
800093bc:	f0 09 18 00 	cp.b	r9,r8
800093c0:	c2 01       	brne	80009400 <fat_cluster_val+0x1fc>
   {   // A cluster may be stored on two sectors
      if(  fs_g_u16_pos_fat == (FS_CACHE_SIZE-1) )
800093c2:	fe f8 02 72 	ld.w	r8,pc[626]
800093c6:	90 09       	ld.sh	r9,r8[0x0]
800093c8:	e0 68 01 ff 	mov	r8,511
800093cc:	f0 09 19 00 	cp.h	r9,r8
800093d0:	c1 81       	brne	80009400 <fat_cluster_val+0x1fc>
      {  // Go to next sector
         fs_gu32_addrsector++;
800093d2:	fe f8 02 72 	ld.w	r8,pc[626]
800093d6:	70 08       	ld.w	r8,r8[0x0]
800093d8:	f0 c9 ff ff 	sub	r9,r8,-1
800093dc:	fe f8 02 68 	ld.w	r8,pc[616]
800093e0:	91 09       	st.w	r8[0x0],r9
         if( !fat_cache_read_sector( true ))
800093e2:	30 1c       	mov	r12,1
800093e4:	f0 1f 00 99 	mcall	80009648 <fat_cluster_val+0x444>
800093e8:	18 98       	mov	r8,r12
800093ea:	ec 18 00 01 	eorl	r8,0x1
800093ee:	5c 58       	castu.b	r8
800093f0:	c0 30       	breq	800093f6 <fat_cluster_val+0x1f2>
           return false;
800093f2:	30 08       	mov	r8,0
800093f4:	c1 89       	rjmp	80009624 <fat_cluster_val+0x420>
         u8_data2 = fs_g_sector[0];
800093f6:	fe f8 02 56 	ld.w	r8,pc[598]
800093fa:	11 88       	ld.ub	r8,r8[0x0]
800093fc:	ef 68 ff f9 	st.b	r7[-7],r8
      }
   }

   if (false == b_mode)
80009400:	ef 38 ff f0 	ld.ub	r8,r7[-16]
80009404:	ec 18 00 01 	eorl	r8,0x1
80009408:	5c 58       	castu.b	r8
8000940a:	c6 e0       	breq	800094e6 <fat_cluster_val+0x2e2>
   {
      //**** Read the cluster value
      LSB0( fs_g_cluster.u32_val ) = u8_data1;  // FAT 12,16,32
8000940c:	fe f8 02 24 	ld.w	r8,pc[548]
80009410:	2f c8       	sub	r8,-4
80009412:	f0 c9 ff fd 	sub	r9,r8,-3
80009416:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000941a:	b2 88       	st.b	r9[0x0],r8
      LSB1( fs_g_cluster.u32_val ) = u8_data2;  // FAT 12,16,32
8000941c:	fe f8 02 14 	ld.w	r8,pc[532]
80009420:	2f c8       	sub	r8,-4
80009422:	f0 c9 ff fe 	sub	r9,r8,-2
80009426:	ef 38 ff f9 	ld.ub	r8,r7[-7]
8000942a:	b2 88       	st.b	r9[0x0],r8

      if ( Is_fat32 )
8000942c:	fe f8 02 00 	ld.w	r8,pc[512]
80009430:	11 89       	ld.ub	r9,r8[0x0]
80009432:	30 38       	mov	r8,3
80009434:	f0 09 18 00 	cp.b	r9,r8
80009438:	c1 11       	brne	8000945a <fat_cluster_val+0x256>
      {  // FAT 32
         LSB2( fs_g_cluster.u32_val ) = u8_data3;
8000943a:	4f e8       	lddpc	r8,80009630 <fat_cluster_val+0x42c>
8000943c:	2f c8       	sub	r8,-4
8000943e:	f0 c9 ff ff 	sub	r9,r8,-1
80009442:	ef 38 ff fa 	ld.ub	r8,r7[-6]
80009446:	b2 88       	st.b	r9[0x0],r8
         LSB3( fs_g_cluster.u32_val ) = u8_data4 & 0x0F; // The high 4 bits are reserved
80009448:	4f a8       	lddpc	r8,80009630 <fat_cluster_val+0x42c>
8000944a:	f0 c9 ff fc 	sub	r9,r8,-4
8000944e:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80009452:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80009456:	b2 88       	st.b	r9[0x0],r8
80009458:	ce 58       	rjmp	80009622 <fat_cluster_val+0x41e>
      }
      else
      {  // FAT 12 & 16 don't use the high bytes
         LSB2( fs_g_cluster.u32_val ) = 0;
8000945a:	4f 68       	lddpc	r8,80009630 <fat_cluster_val+0x42c>
8000945c:	2f c8       	sub	r8,-4
8000945e:	f0 c9 ff ff 	sub	r9,r8,-1
80009462:	30 08       	mov	r8,0
80009464:	b2 88       	st.b	r9[0x0],r8
         LSB3( fs_g_cluster.u32_val ) = 0;
80009466:	4f 38       	lddpc	r8,80009630 <fat_cluster_val+0x42c>
80009468:	f0 c9 ff fc 	sub	r9,r8,-4
8000946c:	30 08       	mov	r8,0
8000946e:	b2 88       	st.b	r9[0x0],r8

         // FAT 12 translate 16bits value to 12bits
         if ( Is_fat12 )
80009470:	4e f8       	lddpc	r8,8000962c <fat_cluster_val+0x428>
80009472:	11 89       	ld.ub	r9,r8[0x0]
80009474:	30 18       	mov	r8,1
80009476:	f0 09 18 00 	cp.b	r9,r8
8000947a:	e0 81 00 d4 	brne	80009622 <fat_cluster_val+0x41e>
         {
            if ( 0x01 & LSB0(fs_g_cluster.u32_pos) )
8000947e:	4e d8       	lddpc	r8,80009630 <fat_cluster_val+0x42c>
80009480:	2f d8       	sub	r8,-3
80009482:	11 88       	ld.ub	r8,r8[0x0]
80009484:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80009488:	5c 58       	castu.b	r8
8000948a:	c2 20       	breq	800094ce <fat_cluster_val+0x2ca>
            {  // Read cluster is ODD
               LSB0( fs_g_cluster.u32_val ) = (LSB1( fs_g_cluster.u32_val ) <<4 ) + (LSB0( fs_g_cluster.u32_val ) >>4 );
8000948c:	4e 98       	lddpc	r8,80009630 <fat_cluster_val+0x42c>
8000948e:	2f c8       	sub	r8,-4
80009490:	f0 ca ff fd 	sub	r10,r8,-3
80009494:	4e 78       	lddpc	r8,80009630 <fat_cluster_val+0x42c>
80009496:	2f c8       	sub	r8,-4
80009498:	2f e8       	sub	r8,-2
8000949a:	11 88       	ld.ub	r8,r8[0x0]
8000949c:	a5 68       	lsl	r8,0x4
8000949e:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800094a2:	4e 48       	lddpc	r8,80009630 <fat_cluster_val+0x42c>
800094a4:	2f c8       	sub	r8,-4
800094a6:	2f d8       	sub	r8,-3
800094a8:	11 88       	ld.ub	r8,r8[0x0]
800094aa:	a5 88       	lsr	r8,0x4
800094ac:	5c 58       	castu.b	r8
800094ae:	f2 08 00 08 	add	r8,r9,r8
800094b2:	5c 58       	castu.b	r8
800094b4:	b4 88       	st.b	r10[0x0],r8
               LSB1( fs_g_cluster.u32_val ) =  LSB1( fs_g_cluster.u32_val ) >>4 ;
800094b6:	4d f8       	lddpc	r8,80009630 <fat_cluster_val+0x42c>
800094b8:	2f c8       	sub	r8,-4
800094ba:	f0 c9 ff fe 	sub	r9,r8,-2
800094be:	4d d8       	lddpc	r8,80009630 <fat_cluster_val+0x42c>
800094c0:	2f c8       	sub	r8,-4
800094c2:	2f e8       	sub	r8,-2
800094c4:	11 88       	ld.ub	r8,r8[0x0]
800094c6:	a5 88       	lsr	r8,0x4
800094c8:	5c 58       	castu.b	r8
800094ca:	b2 88       	st.b	r9[0x0],r8
800094cc:	ca b8       	rjmp	80009622 <fat_cluster_val+0x41e>
            }
            else
            {  // Read cluster is EVEN
               LSB1( fs_g_cluster.u32_val ) &= 0x0F;
800094ce:	4d 98       	lddpc	r8,80009630 <fat_cluster_val+0x42c>
800094d0:	2f c8       	sub	r8,-4
800094d2:	f0 c9 ff fe 	sub	r9,r8,-2
800094d6:	4d 78       	lddpc	r8,80009630 <fat_cluster_val+0x42c>
800094d8:	2f c8       	sub	r8,-4
800094da:	2f e8       	sub	r8,-2
800094dc:	11 88       	ld.ub	r8,r8[0x0]
800094de:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
800094e2:	b2 88       	st.b	r9[0x0],r8
800094e4:	c9 f8       	rjmp	80009622 <fat_cluster_val+0x41e>
         }
      }
   } else {
#if (FS_LEVEL_FEATURES > FSFEATURE_READ)
      //**** Write the cluster value
      if ( Is_fat12 )
800094e6:	4d 28       	lddpc	r8,8000962c <fat_cluster_val+0x428>
800094e8:	11 89       	ld.ub	r9,r8[0x0]
800094ea:	30 18       	mov	r8,1
800094ec:	f0 09 18 00 	cp.b	r9,r8
800094f0:	c6 11       	brne	800095b2 <fat_cluster_val+0x3ae>
      {
         // FAT 12, translate cluster value
         if ( 0x01 & LSB0(fs_g_cluster.u32_pos) )
800094f2:	4d 08       	lddpc	r8,80009630 <fat_cluster_val+0x42c>
800094f4:	2f d8       	sub	r8,-3
800094f6:	11 88       	ld.ub	r8,r8[0x0]
800094f8:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800094fc:	5c 58       	castu.b	r8
800094fe:	c2 00       	breq	8000953e <fat_cluster_val+0x33a>
         {  // Cluster writing is ODD
            u8_data1 = (u8_data1 & 0x0F) + (LSB0( fs_g_cluster.u32_val )<<4);
80009500:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80009504:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80009508:	4c a9       	lddpc	r9,80009630 <fat_cluster_val+0x42c>
8000950a:	2f c9       	sub	r9,-4
8000950c:	2f d9       	sub	r9,-3
8000950e:	13 89       	ld.ub	r9,r9[0x0]
80009510:	a5 69       	lsl	r9,0x4
80009512:	5c 59       	castu.b	r9
80009514:	12 08       	add	r8,r9
80009516:	ef 68 ff f8 	st.b	r7[-8],r8
            u8_data2 = (LSB1( fs_g_cluster.u32_val )<<4) + (LSB0( fs_g_cluster.u32_val )>>4) ;
8000951a:	4c 68       	lddpc	r8,80009630 <fat_cluster_val+0x42c>
8000951c:	2f c8       	sub	r8,-4
8000951e:	2f e8       	sub	r8,-2
80009520:	11 88       	ld.ub	r8,r8[0x0]
80009522:	a5 68       	lsl	r8,0x4
80009524:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80009528:	4c 28       	lddpc	r8,80009630 <fat_cluster_val+0x42c>
8000952a:	2f c8       	sub	r8,-4
8000952c:	2f d8       	sub	r8,-3
8000952e:	11 88       	ld.ub	r8,r8[0x0]
80009530:	a5 88       	lsr	r8,0x4
80009532:	5c 58       	castu.b	r8
80009534:	f2 08 00 08 	add	r8,r9,r8
80009538:	ef 68 ff f9 	st.b	r7[-7],r8
8000953c:	c1 58       	rjmp	80009566 <fat_cluster_val+0x362>
         } else {
            // Cluster writing is EVEN
            u8_data1 = LSB0( fs_g_cluster.u32_val );
8000953e:	4b d8       	lddpc	r8,80009630 <fat_cluster_val+0x42c>
80009540:	2f c8       	sub	r8,-4
80009542:	2f d8       	sub	r8,-3
80009544:	11 88       	ld.ub	r8,r8[0x0]
80009546:	ef 68 ff f8 	st.b	r7[-8],r8
            u8_data2 = (u8_data2 & 0xF0) + (LSB1( fs_g_cluster.u32_val ) & 0x0F) ;
8000954a:	ef 39 ff f9 	ld.ub	r9,r7[-7]
8000954e:	e2 19 00 f0 	andl	r9,0xf0,COH
80009552:	4b 88       	lddpc	r8,80009630 <fat_cluster_val+0x42c>
80009554:	2f c8       	sub	r8,-4
80009556:	2f e8       	sub	r8,-2
80009558:	11 88       	ld.ub	r8,r8[0x0]
8000955a:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
8000955e:	f2 08 00 08 	add	r8,r9,r8
80009562:	ef 68 ff f9 	st.b	r7[-7],r8
         }

         // A cluster may be stored on two sectors
         if( fs_g_u16_pos_fat == (FS_CACHE_SIZE-1) )
80009566:	4b 48       	lddpc	r8,80009634 <fat_cluster_val+0x430>
80009568:	90 09       	ld.sh	r9,r8[0x0]
8000956a:	e0 68 01 ff 	mov	r8,511
8000956e:	f0 09 19 00 	cp.h	r9,r8
80009572:	c4 a1       	brne	80009606 <fat_cluster_val+0x402>
         {
            fs_g_sector[0] = u8_data2;
80009574:	4b 69       	lddpc	r9,8000964c <fat_cluster_val+0x448>
80009576:	ef 38 ff f9 	ld.ub	r8,r7[-7]
8000957a:	b2 88       	st.b	r9[0x0],r8
            fat_cache_mark_sector_as_dirty();
8000957c:	f0 1f 00 35 	mcall	80009650 <fat_cluster_val+0x44c>
            // Go to previous sector
            fs_gu32_addrsector--;
80009580:	4b 18       	lddpc	r8,80009644 <fat_cluster_val+0x440>
80009582:	70 08       	ld.w	r8,r8[0x0]
80009584:	f0 c9 00 01 	sub	r9,r8,1
80009588:	4a f8       	lddpc	r8,80009644 <fat_cluster_val+0x440>
8000958a:	91 09       	st.w	r8[0x0],r9
            if( !fat_cache_read_sector( true ))
8000958c:	30 1c       	mov	r12,1
8000958e:	f0 1f 00 2f 	mcall	80009648 <fat_cluster_val+0x444>
80009592:	18 98       	mov	r8,r12
80009594:	ec 18 00 01 	eorl	r8,0x1
80009598:	5c 58       	castu.b	r8
8000959a:	c0 30       	breq	800095a0 <fat_cluster_val+0x39c>
              return false;
8000959c:	30 08       	mov	r8,0
8000959e:	c4 38       	rjmp	80009624 <fat_cluster_val+0x420>
            // Modify the previous sector
            fs_g_sector[ FS_CACHE_SIZE-1 ] = u8_data1;
800095a0:	4a b9       	lddpc	r9,8000964c <fat_cluster_val+0x448>
800095a2:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800095a6:	f3 68 01 ff 	st.b	r9[511],r8
            fat_cache_mark_sector_as_dirty();
800095aa:	f0 1f 00 2a 	mcall	80009650 <fat_cluster_val+0x44c>
            return true;
800095ae:	30 18       	mov	r8,1
800095b0:	c3 a8       	rjmp	80009624 <fat_cluster_val+0x420>
         }
      }
      else
      {
         // FAT 16 & 32
         u8_data1 = LSB0( fs_g_cluster.u32_val );
800095b2:	4a 08       	lddpc	r8,80009630 <fat_cluster_val+0x42c>
800095b4:	2f c8       	sub	r8,-4
800095b6:	2f d8       	sub	r8,-3
800095b8:	11 88       	ld.ub	r8,r8[0x0]
800095ba:	ef 68 ff f8 	st.b	r7[-8],r8
         u8_data2 = LSB1( fs_g_cluster.u32_val );
800095be:	49 d8       	lddpc	r8,80009630 <fat_cluster_val+0x42c>
800095c0:	2f c8       	sub	r8,-4
800095c2:	2f e8       	sub	r8,-2
800095c4:	11 88       	ld.ub	r8,r8[0x0]
800095c6:	ef 68 ff f9 	st.b	r7[-7],r8
         if ( Is_fat32 )
800095ca:	49 98       	lddpc	r8,8000962c <fat_cluster_val+0x428>
800095cc:	11 89       	ld.ub	r9,r8[0x0]
800095ce:	30 38       	mov	r8,3
800095d0:	f0 09 18 00 	cp.b	r9,r8
800095d4:	c1 91       	brne	80009606 <fat_cluster_val+0x402>
         {  // FAT 32
            u8_ptr_cluster[2] = LSB2( fs_g_cluster.u32_val );
800095d6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800095da:	f0 c9 ff fe 	sub	r9,r8,-2
800095de:	49 58       	lddpc	r8,80009630 <fat_cluster_val+0x42c>
800095e0:	2f c8       	sub	r8,-4
800095e2:	2f f8       	sub	r8,-1
800095e4:	11 88       	ld.ub	r8,r8[0x0]
800095e6:	b2 88       	st.b	r9[0x0],r8
            u8_ptr_cluster[3] = LSB3( fs_g_cluster.u32_val ) + (u8_data4 & 0xF0); // The high 4 bits are reserved
800095e8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800095ec:	f0 ca ff fd 	sub	r10,r8,-3
800095f0:	49 08       	lddpc	r8,80009630 <fat_cluster_val+0x42c>
800095f2:	2f c8       	sub	r8,-4
800095f4:	11 89       	ld.ub	r9,r8[0x0]
800095f6:	ef 38 ff fb 	ld.ub	r8,r7[-5]
800095fa:	e2 18 00 f0 	andl	r8,0xf0,COH
800095fe:	f2 08 00 08 	add	r8,r9,r8
80009602:	5c 58       	castu.b	r8
80009604:	b4 88       	st.b	r10[0x0],r8
         }
      }
      // Here for FAT 32, 16 & 12 (only if the cluster values are in the same sector)
      u8_ptr_cluster[0] = u8_data1;
80009606:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000960a:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000960e:	b2 88       	st.b	r9[0x0],r8
      u8_ptr_cluster[1] = u8_data2;
80009610:	ee f8 ff fc 	ld.w	r8,r7[-4]
80009614:	f0 c9 ff ff 	sub	r9,r8,-1
80009618:	ef 38 ff f9 	ld.ub	r8,r7[-7]
8000961c:	b2 88       	st.b	r9[0x0],r8
      fat_cache_mark_sector_as_dirty();
8000961e:	f0 1f 00 0d 	mcall	80009650 <fat_cluster_val+0x44c>
      fs_g_status = FS_ERR_COMMAND;
      return false;
#endif  // FS_LEVEL_FEATURES
   }

   return true;
80009622:	30 18       	mov	r8,1
}
80009624:	10 9c       	mov	r12,r8
80009626:	2f cd       	sub	sp,-16
80009628:	e3 cd 80 80 	ldm	sp++,r7,pc
8000962c:	00 00       	add	r0,r0
8000962e:	0d d0       	ld.ub	r0,r6[0x5]
80009630:	00 00       	add	r0,r0
80009632:	0e 24       	rsub	r4,r7
80009634:	00 00       	add	r0,r0
80009636:	0b 54       	ld.sh	r4,--r5
80009638:	00 00       	add	r0,r0
8000963a:	0d b8       	ld.ub	r8,r6[0x3]
8000963c:	00 00       	add	r0,r0
8000963e:	0b 80       	ld.ub	r0,r5[0x0]
80009640:	00 00       	add	r0,r0
80009642:	0d 84       	ld.ub	r4,r6[0x0]
80009644:	00 00       	add	r0,r0
80009646:	0b 40       	ld.w	r0,--r5
80009648:	80 00       	ld.sh	r0,r0[0x0]
8000964a:	a8 bc       	st.b	r4[0x3],r12
8000964c:	00 00       	add	r0,r0
8000964e:	0b 84       	ld.ub	r4,r5[0x0]
80009650:	80 00       	ld.sh	r0,r0[0x0]
80009652:	a9 ac       	sbr	r12,0x8

80009654 <fat_cluster_readnext>:
//!   fs_g_u16_pos_fat        read cluster position in FAT
//!   fs_g_cluster.u32_val    value of cluster read
//! @endverbatim
//!
bool  fat_cluster_readnext( void )
{
80009654:	eb cd 40 80 	pushm	r7,lr
80009658:	1a 97       	mov	r7,sp
   // Compute the next cluster position in FAT
   if ( Is_fat32 )
8000965a:	4b 38       	lddpc	r8,80009724 <fat_cluster_readnext+0xd0>
8000965c:	11 89       	ld.ub	r9,r8[0x0]
8000965e:	30 38       	mov	r8,3
80009660:	f0 09 18 00 	cp.b	r9,r8
80009664:	c0 81       	brne	80009674 <fat_cluster_readnext+0x20>
   {
      fs_g_u16_pos_fat += 4;
80009666:	4b 18       	lddpc	r8,80009728 <fat_cluster_readnext+0xd4>
80009668:	90 08       	ld.sh	r8,r8[0x0]
8000966a:	2f c8       	sub	r8,-4
8000966c:	5c 88       	casts.h	r8
8000966e:	4a f9       	lddpc	r9,80009728 <fat_cluster_readnext+0xd4>
80009670:	b2 08       	st.h	r9[0x0],r8
80009672:	c0 78       	rjmp	80009680 <fat_cluster_readnext+0x2c>
   }else{
      // Is_fat16
      fs_g_u16_pos_fat += 2;
80009674:	4a d8       	lddpc	r8,80009728 <fat_cluster_readnext+0xd4>
80009676:	90 08       	ld.sh	r8,r8[0x0]
80009678:	2f e8       	sub	r8,-2
8000967a:	5c 88       	casts.h	r8
8000967c:	4a b9       	lddpc	r9,80009728 <fat_cluster_readnext+0xd4>
8000967e:	b2 08       	st.h	r9[0x0],r8
   }

   // Check if next cluster is in internal cache
   if( FS_CACHE_SIZE == fs_g_u16_pos_fat )
80009680:	4a a8       	lddpc	r8,80009728 <fat_cluster_readnext+0xd4>
80009682:	90 09       	ld.sh	r9,r8[0x0]
80009684:	e0 68 02 00 	mov	r8,512
80009688:	f0 09 19 00 	cp.h	r9,r8
8000968c:	c1 41       	brne	800096b4 <fat_cluster_readnext+0x60>
   {
      // Update cache
      fs_g_u16_pos_fat = 0;
8000968e:	4a 79       	lddpc	r9,80009728 <fat_cluster_readnext+0xd4>
80009690:	30 08       	mov	r8,0
80009692:	b2 08       	st.h	r9[0x0],r8
      fs_gu32_addrsector++;
80009694:	4a 68       	lddpc	r8,8000972c <fat_cluster_readnext+0xd8>
80009696:	70 08       	ld.w	r8,r8[0x0]
80009698:	f0 c9 ff ff 	sub	r9,r8,-1
8000969c:	4a 48       	lddpc	r8,8000972c <fat_cluster_readnext+0xd8>
8000969e:	91 09       	st.w	r8[0x0],r9
      if( !fat_cache_read_sector( true ))
800096a0:	30 1c       	mov	r12,1
800096a2:	f0 1f 00 24 	mcall	80009730 <fat_cluster_readnext+0xdc>
800096a6:	18 98       	mov	r8,r12
800096a8:	ec 18 00 01 	eorl	r8,0x1
800096ac:	5c 58       	castu.b	r8
800096ae:	c0 30       	breq	800096b4 <fat_cluster_readnext+0x60>
         return false;
800096b0:	30 08       	mov	r8,0
800096b2:	c3 68       	rjmp	8000971e <fat_cluster_readnext+0xca>
   }

   //**** Read the cluster value
   LSB0( fs_g_cluster.u32_val ) = fs_g_sector[fs_g_u16_pos_fat+0];  // FAT 16,32
800096b4:	4a 08       	lddpc	r8,80009734 <fat_cluster_readnext+0xe0>
800096b6:	2f c8       	sub	r8,-4
800096b8:	f0 c9 ff fd 	sub	r9,r8,-3
800096bc:	49 b8       	lddpc	r8,80009728 <fat_cluster_readnext+0xd4>
800096be:	90 08       	ld.sh	r8,r8[0x0]
800096c0:	5c 78       	castu.h	r8
800096c2:	49 ea       	lddpc	r10,80009738 <fat_cluster_readnext+0xe4>
800096c4:	f4 08 07 08 	ld.ub	r8,r10[r8]
800096c8:	b2 88       	st.b	r9[0x0],r8
   LSB1( fs_g_cluster.u32_val ) = fs_g_sector[fs_g_u16_pos_fat+1];  // FAT 16,32
800096ca:	49 b8       	lddpc	r8,80009734 <fat_cluster_readnext+0xe0>
800096cc:	2f c8       	sub	r8,-4
800096ce:	f0 c9 ff fe 	sub	r9,r8,-2
800096d2:	49 68       	lddpc	r8,80009728 <fat_cluster_readnext+0xd4>
800096d4:	90 08       	ld.sh	r8,r8[0x0]
800096d6:	5c 78       	castu.h	r8
800096d8:	2f f8       	sub	r8,-1
800096da:	49 8a       	lddpc	r10,80009738 <fat_cluster_readnext+0xe4>
800096dc:	f4 08 07 08 	ld.ub	r8,r10[r8]
800096e0:	b2 88       	st.b	r9[0x0],r8

   if ( Is_fat32 )
800096e2:	49 18       	lddpc	r8,80009724 <fat_cluster_readnext+0xd0>
800096e4:	11 89       	ld.ub	r9,r8[0x0]
800096e6:	30 38       	mov	r8,3
800096e8:	f0 09 18 00 	cp.b	r9,r8
800096ec:	c1 81       	brne	8000971c <fat_cluster_readnext+0xc8>
   {  // FAT 32
      LSB2( fs_g_cluster.u32_val ) = fs_g_sector[fs_g_u16_pos_fat+2];
800096ee:	49 28       	lddpc	r8,80009734 <fat_cluster_readnext+0xe0>
800096f0:	2f c8       	sub	r8,-4
800096f2:	f0 c9 ff ff 	sub	r9,r8,-1
800096f6:	48 d8       	lddpc	r8,80009728 <fat_cluster_readnext+0xd4>
800096f8:	90 08       	ld.sh	r8,r8[0x0]
800096fa:	5c 78       	castu.h	r8
800096fc:	2f e8       	sub	r8,-2
800096fe:	48 fa       	lddpc	r10,80009738 <fat_cluster_readnext+0xe4>
80009700:	f4 08 07 08 	ld.ub	r8,r10[r8]
80009704:	b2 88       	st.b	r9[0x0],r8
      LSB3( fs_g_cluster.u32_val ) = fs_g_sector[fs_g_u16_pos_fat+3];
80009706:	48 c8       	lddpc	r8,80009734 <fat_cluster_readnext+0xe0>
80009708:	f0 c9 ff fc 	sub	r9,r8,-4
8000970c:	48 78       	lddpc	r8,80009728 <fat_cluster_readnext+0xd4>
8000970e:	90 08       	ld.sh	r8,r8[0x0]
80009710:	5c 78       	castu.h	r8
80009712:	2f d8       	sub	r8,-3
80009714:	48 9a       	lddpc	r10,80009738 <fat_cluster_readnext+0xe4>
80009716:	f4 08 07 08 	ld.ub	r8,r10[r8]
8000971a:	b2 88       	st.b	r9[0x0],r8
   }
   return true;
8000971c:	30 18       	mov	r8,1
}
8000971e:	10 9c       	mov	r12,r8
80009720:	e3 cd 80 80 	ldm	sp++,r7,pc
80009724:	00 00       	add	r0,r0
80009726:	0d d0       	ld.ub	r0,r6[0x5]
80009728:	00 00       	add	r0,r0
8000972a:	0b 54       	ld.sh	r4,--r5
8000972c:	00 00       	add	r0,r0
8000972e:	0b 40       	ld.w	r0,--r5
80009730:	80 00       	ld.sh	r0,r0[0x0]
80009732:	a8 bc       	st.b	r4[0x3],r12
80009734:	00 00       	add	r0,r0
80009736:	0e 24       	rsub	r4,r7
80009738:	00 00       	add	r0,r0
8000973a:	0b 84       	ld.ub	r4,r5[0x0]

8000973c <fat_checkcluster>:
//! IN :
//!   fs_g_cluster.u32_val       value to check
//! @endverbatim
//!
uint8_t    fat_checkcluster( void )
{
8000973c:	eb cd 40 80 	pushm	r7,lr
80009740:	1a 97       	mov	r7,sp
  if ( !fs_g_cluster.u32_val )
80009742:	4a 88       	lddpc	r8,800097e0 <fat_checkcluster+0xa4>
80009744:	70 18       	ld.w	r8,r8[0x4]
80009746:	58 08       	cp.w	r8,0
80009748:	c0 31       	brne	8000974e <fat_checkcluster+0x12>
    return FS_CLUS_BAD;
8000974a:	30 18       	mov	r8,1
8000974c:	c4 78       	rjmp	800097da <fat_checkcluster+0x9e>

  // Cluster bad if (FAT12 == 0x0FF7) (FAT16 == 0xFFF7) (FAT32 == 0x0FFFFFF7)
  // Last cluster if (FAT12 > 0x0FF7) (FAT16 > 0xFFF7) (FAT32 > 0x0FFFFFF7)
  if ( Is_fat32 )
8000974e:	4a 68       	lddpc	r8,800097e4 <fat_checkcluster+0xa8>
80009750:	11 89       	ld.ub	r9,r8[0x0]
80009752:	30 38       	mov	r8,3
80009754:	f0 09 18 00 	cp.b	r9,r8
80009758:	c1 61       	brne	80009784 <fat_checkcluster+0x48>
  {
    if (fs_g_cluster.u32_val >= 0x0FFFFFF8)
8000975a:	4a 28       	lddpc	r8,800097e0 <fat_checkcluster+0xa4>
8000975c:	70 18       	ld.w	r8,r8[0x4]
8000975e:	e0 69 ff f7 	mov	r9,65527
80009762:	ea 19 0f ff 	orh	r9,0xfff
80009766:	12 38       	cp.w	r8,r9
80009768:	e0 88 00 04 	brls	80009770 <fat_checkcluster+0x34>
      return FS_CLUS_END;
8000976c:	30 28       	mov	r8,2
8000976e:	c3 68       	rjmp	800097da <fat_checkcluster+0x9e>
    else if (fs_g_cluster.u32_val == 0x0FFFFFF7)
80009770:	49 c8       	lddpc	r8,800097e0 <fat_checkcluster+0xa4>
80009772:	70 18       	ld.w	r8,r8[0x4]
80009774:	e0 69 ff f7 	mov	r9,65527
80009778:	ea 19 0f ff 	orh	r9,0xfff
8000977c:	12 38       	cp.w	r8,r9
8000977e:	c2 d1       	brne	800097d8 <fat_checkcluster+0x9c>
      return FS_CLUS_BAD;
80009780:	30 18       	mov	r8,1
80009782:	c2 c8       	rjmp	800097da <fat_checkcluster+0x9e>
  }
  else if ( Is_fat16 )
80009784:	49 88       	lddpc	r8,800097e4 <fat_checkcluster+0xa8>
80009786:	11 89       	ld.ub	r9,r8[0x0]
80009788:	30 28       	mov	r8,2
8000978a:	f0 09 18 00 	cp.b	r9,r8
8000978e:	c1 01       	brne	800097ae <fat_checkcluster+0x72>
  {
    if (fs_g_cluster.u32_val >= 0xFFF8)
80009790:	49 48       	lddpc	r8,800097e0 <fat_checkcluster+0xa4>
80009792:	70 18       	ld.w	r8,r8[0x4]
80009794:	e0 48 ff f7 	cp.w	r8,65527
80009798:	e0 88 00 04 	brls	800097a0 <fat_checkcluster+0x64>
      return FS_CLUS_END;
8000979c:	30 28       	mov	r8,2
8000979e:	c1 e8       	rjmp	800097da <fat_checkcluster+0x9e>
    else if (fs_g_cluster.u32_val == 0xFFF7)
800097a0:	49 08       	lddpc	r8,800097e0 <fat_checkcluster+0xa4>
800097a2:	70 18       	ld.w	r8,r8[0x4]
800097a4:	e0 48 ff f7 	cp.w	r8,65527
800097a8:	c1 81       	brne	800097d8 <fat_checkcluster+0x9c>
      return FS_CLUS_BAD;
800097aa:	30 18       	mov	r8,1
800097ac:	c1 78       	rjmp	800097da <fat_checkcluster+0x9e>
  }
  else if ( Is_fat12 )
800097ae:	48 e8       	lddpc	r8,800097e4 <fat_checkcluster+0xa8>
800097b0:	11 89       	ld.ub	r9,r8[0x0]
800097b2:	30 18       	mov	r8,1
800097b4:	f0 09 18 00 	cp.b	r9,r8
800097b8:	c1 01       	brne	800097d8 <fat_checkcluster+0x9c>
  {
    if (fs_g_cluster.u32_val >= 0xFF8)
800097ba:	48 a8       	lddpc	r8,800097e0 <fat_checkcluster+0xa4>
800097bc:	70 18       	ld.w	r8,r8[0x4]
800097be:	e0 48 0f f7 	cp.w	r8,4087
800097c2:	e0 88 00 04 	brls	800097ca <fat_checkcluster+0x8e>
      return FS_CLUS_END;
800097c6:	30 28       	mov	r8,2
800097c8:	c0 98       	rjmp	800097da <fat_checkcluster+0x9e>
    else if (fs_g_cluster.u32_val == 0xFF7)
800097ca:	48 68       	lddpc	r8,800097e0 <fat_checkcluster+0xa4>
800097cc:	70 18       	ld.w	r8,r8[0x4]
800097ce:	e0 48 0f f7 	cp.w	r8,4087
800097d2:	c0 31       	brne	800097d8 <fat_checkcluster+0x9c>
      return FS_CLUS_BAD;
800097d4:	30 18       	mov	r8,1
800097d6:	c0 28       	rjmp	800097da <fat_checkcluster+0x9e>
  }

  return FS_CLUS_OK;
800097d8:	30 08       	mov	r8,0
}
800097da:	10 9c       	mov	r12,r8
800097dc:	e3 cd 80 80 	ldm	sp++,r7,pc
800097e0:	00 00       	add	r0,r0
800097e2:	0e 24       	rsub	r4,r7
800097e4:	00 00       	add	r0,r0
800097e6:	0d d0       	ld.ub	r0,r6[0x5]

800097e8 <fat_cache_clusterlist_reset>:
//! @{

//! This function resets the cluster list caches
//!
void  fat_cache_clusterlist_reset( void )
{
800097e8:	eb cd 40 80 	pushm	r7,lr
800097ec:	1a 97       	mov	r7,sp
800097ee:	20 1d       	sub	sp,4
   uint8_t u8_i;
   fs_g_u8_current_cache=0;
800097f0:	4a 09       	lddpc	r9,80009870 <fat_cache_clusterlist_reset+0x88>
800097f2:	30 08       	mov	r8,0
800097f4:	b2 88       	st.b	r9[0x0],r8
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
800097f6:	30 08       	mov	r8,0
800097f8:	ef 68 ff ff 	st.b	r7[-1],r8
800097fc:	c2 f8       	rjmp	8000985a <fat_cache_clusterlist_reset+0x72>
   {
      // The cache list is split in two cache (file cluster list and directory cluster list)
      fs_g_cache_clusterlist[u8_i].b_cache_file = (u8_i<FS_NB_CACHE_CLUSLIST)?true:false;
800097fe:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80009802:	ef 3a ff ff 	ld.ub	r10,r7[-1]
80009806:	30 08       	mov	r8,0
80009808:	f0 0a 18 00 	cp.b	r10,r8
8000980c:	5f 08       	sreq	r8
8000980e:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
80009812:	49 9b       	lddpc	r11,80009874 <fat_cache_clusterlist_reset+0x8c>
80009814:	12 98       	mov	r8,r9
80009816:	a3 68       	lsl	r8,0x2
80009818:	12 08       	add	r8,r9
8000981a:	a3 68       	lsl	r8,0x2
8000981c:	f6 08 00 09 	add	r9,r11,r8
80009820:	14 98       	mov	r8,r10
80009822:	b2 88       	st.b	r9[0x0],r8
      fs_g_cache_clusterlist[u8_i].u8_lun = 0xFF;
80009824:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80009828:	49 3a       	lddpc	r10,80009874 <fat_cache_clusterlist_reset+0x8c>
8000982a:	12 98       	mov	r8,r9
8000982c:	a3 68       	lsl	r8,0x2
8000982e:	12 08       	add	r8,r9
80009830:	a3 68       	lsl	r8,0x2
80009832:	f4 08 00 09 	add	r9,r10,r8
80009836:	3f f8       	mov	r8,-1
80009838:	b2 a8       	st.b	r9[0x2],r8
      fs_g_cache_clusterlist[u8_i].u8_level_use = 0xFF;
8000983a:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000983e:	48 ea       	lddpc	r10,80009874 <fat_cache_clusterlist_reset+0x8c>
80009840:	12 98       	mov	r8,r9
80009842:	a3 68       	lsl	r8,0x2
80009844:	12 08       	add	r8,r9
80009846:	a3 68       	lsl	r8,0x2
80009848:	f4 08 00 09 	add	r9,r10,r8
8000984c:	3f f8       	mov	r8,-1
8000984e:	b2 98       	st.b	r9[0x1],r8
//!
void  fat_cache_clusterlist_reset( void )
{
   uint8_t u8_i;
   fs_g_u8_current_cache=0;
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
80009850:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80009854:	2f f8       	sub	r8,-1
80009856:	ef 68 ff ff 	st.b	r7[-1],r8
8000985a:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000985e:	30 18       	mov	r8,1
80009860:	f0 09 18 00 	cp.b	r9,r8
80009864:	fe 98 ff cd 	brls	800097fe <fat_cache_clusterlist_reset+0x16>
      // The cache list is split in two cache (file cluster list and directory cluster list)
      fs_g_cache_clusterlist[u8_i].b_cache_file = (u8_i<FS_NB_CACHE_CLUSLIST)?true:false;
      fs_g_cache_clusterlist[u8_i].u8_lun = 0xFF;
      fs_g_cache_clusterlist[u8_i].u8_level_use = 0xFF;
   }
}
80009868:	2f fd       	sub	sp,-4
8000986a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000986e:	00 00       	add	r0,r0
80009870:	00 00       	add	r0,r0
80009872:	0d d6       	ld.ub	r6,r6[0x5]
80009874:	00 00       	add	r0,r0
80009876:	0b 58       	ld.sh	r8,--r5

80009878 <fat_cache_clusterlist_update_start>:
//! This function initializes a cache in cluster list caches
//!
//! @param     b_for_file  If true then it is a file cluster list else a directory cluster list  <br>
//!
void  fat_cache_clusterlist_update_start( bool b_for_file )
{
80009878:	eb cd 40 80 	pushm	r7,lr
8000987c:	1a 97       	mov	r7,sp
8000987e:	20 2d       	sub	sp,8
80009880:	18 98       	mov	r8,r12
80009882:	ef 68 ff f8 	st.b	r7[-8],r8
   // Get the OLD cache (=max level used)
   uint8_t u8_i;
   for( u8_i=0; u8_i<((FS_NB_CACHE_CLUSLIST*2)-1); u8_i++ ) // (FS_NB_CACHE_CLUSLIST*2)-1, in case of error
80009886:	30 08       	mov	r8,0
80009888:	ef 68 ff ff 	st.b	r7[-1],r8
8000988c:	c1 58       	rjmp	800098b6 <fat_cache_clusterlist_update_start+0x3e>
   {
      if( fs_g_cache_clusterlist[u8_i].b_cache_file == b_for_file )
8000988e:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80009892:	4a ba       	lddpc	r10,8000993c <fat_cache_clusterlist_update_start+0xc4>
80009894:	12 98       	mov	r8,r9
80009896:	a3 68       	lsl	r8,0x2
80009898:	12 08       	add	r8,r9
8000989a:	a3 68       	lsl	r8,0x2
8000989c:	f4 08 00 08 	add	r8,r10,r8
800098a0:	11 88       	ld.ub	r8,r8[0x0]
800098a2:	ef 39 ff f8 	ld.ub	r9,r7[-8]
800098a6:	f0 09 18 00 	cp.b	r9,r8
800098aa:	c0 d0       	breq	800098c4 <fat_cache_clusterlist_update_start+0x4c>
//!
void  fat_cache_clusterlist_update_start( bool b_for_file )
{
   // Get the OLD cache (=max level used)
   uint8_t u8_i;
   for( u8_i=0; u8_i<((FS_NB_CACHE_CLUSLIST*2)-1); u8_i++ ) // (FS_NB_CACHE_CLUSLIST*2)-1, in case of error
800098ac:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800098b0:	2f f8       	sub	r8,-1
800098b2:	ef 68 ff ff 	st.b	r7[-1],r8
800098b6:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800098ba:	30 08       	mov	r8,0
800098bc:	f0 09 18 00 	cp.b	r9,r8
800098c0:	ce 70       	breq	8000988e <fat_cache_clusterlist_update_start+0x16>
800098c2:	c0 28       	rjmp	800098c6 <fat_cache_clusterlist_update_start+0x4e>
      if( fs_g_cache_clusterlist[u8_i].b_cache_file == b_for_file )
      {
#if (FS_NB_CACHE_CLUSLIST>1)
         if( (FS_NB_CACHE_CLUSLIST-2) < fs_g_cache_clusterlist[u8_i].u8_level_use )
#endif
            break;
800098c4:	d7 03       	nop
      }
   }
   fs_g_u8_current_cache = u8_i;
800098c6:	49 f9       	lddpc	r9,80009940 <fat_cache_clusterlist_update_start+0xc8>
800098c8:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800098cc:	b2 88       	st.b	r9[0x0],r8
   fs_g_cache_clusterlist[fs_g_u8_current_cache].b_cache_file = b_for_file;
800098ce:	49 d8       	lddpc	r8,80009940 <fat_cache_clusterlist_update_start+0xc8>
800098d0:	11 88       	ld.ub	r8,r8[0x0]
800098d2:	10 99       	mov	r9,r8
800098d4:	49 aa       	lddpc	r10,8000993c <fat_cache_clusterlist_update_start+0xc4>
800098d6:	12 98       	mov	r8,r9
800098d8:	a3 68       	lsl	r8,0x2
800098da:	12 08       	add	r8,r9
800098dc:	a3 68       	lsl	r8,0x2
800098de:	f4 08 00 09 	add	r9,r10,r8
800098e2:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800098e6:	b2 88       	st.b	r9[0x0],r8
   fs_g_cache_clusterlist[fs_g_u8_current_cache].u8_lun       = 0xFF;                     // invalid cache
800098e8:	49 68       	lddpc	r8,80009940 <fat_cache_clusterlist_update_start+0xc8>
800098ea:	11 88       	ld.ub	r8,r8[0x0]
800098ec:	10 99       	mov	r9,r8
800098ee:	49 4a       	lddpc	r10,8000993c <fat_cache_clusterlist_update_start+0xc4>
800098f0:	12 98       	mov	r8,r9
800098f2:	a3 68       	lsl	r8,0x2
800098f4:	12 08       	add	r8,r9
800098f6:	a3 68       	lsl	r8,0x2
800098f8:	f4 08 00 09 	add	r9,r10,r8
800098fc:	3f f8       	mov	r8,-1
800098fe:	b2 a8       	st.b	r9[0x2],r8
   fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_cluster  = fs_g_cluster.u32_pos;
80009900:	49 08       	lddpc	r8,80009940 <fat_cache_clusterlist_update_start+0xc8>
80009902:	11 88       	ld.ub	r8,r8[0x0]
80009904:	10 99       	mov	r9,r8
80009906:	49 08       	lddpc	r8,80009944 <fat_cache_clusterlist_update_start+0xcc>
80009908:	70 0b       	ld.w	r11,r8[0x0]
8000990a:	48 da       	lddpc	r10,8000993c <fat_cache_clusterlist_update_start+0xc4>
8000990c:	12 98       	mov	r8,r9
8000990e:	a3 68       	lsl	r8,0x2
80009910:	12 08       	add	r8,r9
80009912:	2f f8       	sub	r8,-1
80009914:	f4 08 09 2b 	st.w	r10[r8<<0x2],r11
   fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_start    = fs_g_seg.u32_size_or_pos;
80009918:	48 a8       	lddpc	r8,80009940 <fat_cache_clusterlist_update_start+0xc8>
8000991a:	11 88       	ld.ub	r8,r8[0x0]
8000991c:	10 99       	mov	r9,r8
8000991e:	48 b8       	lddpc	r8,80009948 <fat_cache_clusterlist_update_start+0xd0>
80009920:	70 1a       	ld.w	r10,r8[0x4]
80009922:	48 7b       	lddpc	r11,8000993c <fat_cache_clusterlist_update_start+0xc4>
80009924:	12 98       	mov	r8,r9
80009926:	a3 68       	lsl	r8,0x2
80009928:	12 08       	add	r8,r9
8000992a:	a3 68       	lsl	r8,0x2
8000992c:	f6 08 00 08 	add	r8,r11,r8
80009930:	2f 88       	sub	r8,-8
80009932:	91 0a       	st.w	r8[0x0],r10
}
80009934:	2f ed       	sub	sp,-8
80009936:	e3 cd 80 80 	ldm	sp++,r7,pc
8000993a:	00 00       	add	r0,r0
8000993c:	00 00       	add	r0,r0
8000993e:	0b 58       	ld.sh	r8,--r5
80009940:	00 00       	add	r0,r0
80009942:	0d d6       	ld.ub	r6,r6[0x5]
80009944:	00 00       	add	r0,r0
80009946:	0e 24       	rsub	r4,r7
80009948:	00 00       	add	r0,r0
8000994a:	0e 2c       	rsub	r12,r7

8000994c <fat_cache_clusterlist_update_finish>:


//! This function updates a cache of cluster list caches
//!
void  fat_cache_clusterlist_update_finish( void )
{
8000994c:	eb cd 40 80 	pushm	r7,lr
80009950:	1a 97       	mov	r7,sp
80009952:	20 1d       	sub	sp,4
   uint8_t u8_cluster_offset = fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_start % fs_g_nav.u8_BPB_SecPerClus;
80009954:	4b 28       	lddpc	r8,80009a1c <fat_cache_clusterlist_update_finish+0xd0>
80009956:	11 88       	ld.ub	r8,r8[0x0]
80009958:	10 99       	mov	r9,r8
8000995a:	4b 2a       	lddpc	r10,80009a20 <fat_cache_clusterlist_update_finish+0xd4>
8000995c:	12 98       	mov	r8,r9
8000995e:	a3 68       	lsl	r8,0x2
80009960:	12 08       	add	r8,r9
80009962:	a3 68       	lsl	r8,0x2
80009964:	f4 08 00 08 	add	r8,r10,r8
80009968:	2f 88       	sub	r8,-8
8000996a:	70 08       	ld.w	r8,r8[0x0]
8000996c:	4a e9       	lddpc	r9,80009a24 <fat_cache_clusterlist_update_finish+0xd8>
8000996e:	13 99       	ld.ub	r9,r9[0x1]
80009970:	f0 09 0d 08 	divu	r8,r8,r9
80009974:	12 98       	mov	r8,r9
80009976:	ef 68 ff ff 	st.b	r7[-1],r8
   fs_g_cache_clusterlist[fs_g_u8_current_cache].u8_lun       = fs_g_nav.u8_lun;          // valid cache
8000997a:	4a 98       	lddpc	r8,80009a1c <fat_cache_clusterlist_update_finish+0xd0>
8000997c:	11 88       	ld.ub	r8,r8[0x0]
8000997e:	10 99       	mov	r9,r8
80009980:	4a 98       	lddpc	r8,80009a24 <fat_cache_clusterlist_update_finish+0xd8>
80009982:	11 8a       	ld.ub	r10,r8[0x0]
80009984:	4a 7b       	lddpc	r11,80009a20 <fat_cache_clusterlist_update_finish+0xd4>
80009986:	12 98       	mov	r8,r9
80009988:	a3 68       	lsl	r8,0x2
8000998a:	12 08       	add	r8,r9
8000998c:	a3 68       	lsl	r8,0x2
8000998e:	f6 08 00 09 	add	r9,r11,r8
80009992:	14 98       	mov	r8,r10
80009994:	b2 a8       	st.b	r9[0x2],r8
   fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_start   -= u8_cluster_offset;
80009996:	4a 28       	lddpc	r8,80009a1c <fat_cache_clusterlist_update_finish+0xd0>
80009998:	11 88       	ld.ub	r8,r8[0x0]
8000999a:	10 99       	mov	r9,r8
8000999c:	4a 08       	lddpc	r8,80009a1c <fat_cache_clusterlist_update_finish+0xd0>
8000999e:	11 88       	ld.ub	r8,r8[0x0]
800099a0:	10 9a       	mov	r10,r8
800099a2:	4a 0b       	lddpc	r11,80009a20 <fat_cache_clusterlist_update_finish+0xd4>
800099a4:	14 98       	mov	r8,r10
800099a6:	a3 68       	lsl	r8,0x2
800099a8:	14 08       	add	r8,r10
800099aa:	a3 68       	lsl	r8,0x2
800099ac:	f6 08 00 08 	add	r8,r11,r8
800099b0:	2f 88       	sub	r8,-8
800099b2:	70 0a       	ld.w	r10,r8[0x0]
800099b4:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800099b8:	10 1a       	sub	r10,r8
800099ba:	49 ab       	lddpc	r11,80009a20 <fat_cache_clusterlist_update_finish+0xd4>
800099bc:	12 98       	mov	r8,r9
800099be:	a3 68       	lsl	r8,0x2
800099c0:	12 08       	add	r8,r9
800099c2:	a3 68       	lsl	r8,0x2
800099c4:	f6 08 00 08 	add	r8,r11,r8
800099c8:	2f 88       	sub	r8,-8
800099ca:	91 0a       	st.w	r8[0x0],r10
   fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_addr     = fs_g_seg.u32_addr - u8_cluster_offset;
800099cc:	49 48       	lddpc	r8,80009a1c <fat_cache_clusterlist_update_finish+0xd0>
800099ce:	11 88       	ld.ub	r8,r8[0x0]
800099d0:	10 99       	mov	r9,r8
800099d2:	49 68       	lddpc	r8,80009a28 <fat_cache_clusterlist_update_finish+0xdc>
800099d4:	70 0a       	ld.w	r10,r8[0x0]
800099d6:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800099da:	10 1a       	sub	r10,r8
800099dc:	49 1b       	lddpc	r11,80009a20 <fat_cache_clusterlist_update_finish+0xd4>
800099de:	12 98       	mov	r8,r9
800099e0:	a3 68       	lsl	r8,0x2
800099e2:	12 08       	add	r8,r9
800099e4:	a3 68       	lsl	r8,0x2
800099e6:	f6 08 00 08 	add	r8,r11,r8
800099ea:	2f 48       	sub	r8,-12
800099ec:	91 0a       	st.w	r8[0x0],r10
   fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_size     = fs_g_seg.u32_size_or_pos + u8_cluster_offset;
800099ee:	48 c8       	lddpc	r8,80009a1c <fat_cache_clusterlist_update_finish+0xd0>
800099f0:	11 88       	ld.ub	r8,r8[0x0]
800099f2:	10 99       	mov	r9,r8
800099f4:	48 d8       	lddpc	r8,80009a28 <fat_cache_clusterlist_update_finish+0xdc>
800099f6:	70 1a       	ld.w	r10,r8[0x4]
800099f8:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800099fc:	10 0a       	add	r10,r8
800099fe:	48 9b       	lddpc	r11,80009a20 <fat_cache_clusterlist_update_finish+0xd4>
80009a00:	12 98       	mov	r8,r9
80009a02:	a3 68       	lsl	r8,0x2
80009a04:	12 08       	add	r8,r9
80009a06:	a3 68       	lsl	r8,0x2
80009a08:	f6 08 00 08 	add	r8,r11,r8
80009a0c:	2f 08       	sub	r8,-16
80009a0e:	91 0a       	st.w	r8[0x0],r10

   // Update the "level used" of cache
   fat_cache_clusterlist_update_select();
80009a10:	f0 1f 00 07 	mcall	80009a2c <fat_cache_clusterlist_update_finish+0xe0>
}
80009a14:	2f fd       	sub	sp,-4
80009a16:	e3 cd 80 80 	ldm	sp++,r7,pc
80009a1a:	00 00       	add	r0,r0
80009a1c:	00 00       	add	r0,r0
80009a1e:	0d d6       	ld.ub	r6,r6[0x5]
80009a20:	00 00       	add	r0,r0
80009a22:	0b 58       	ld.sh	r8,--r5
80009a24:	00 00       	add	r0,r0
80009a26:	0d 84       	ld.ub	r4,r6[0x0]
80009a28:	00 00       	add	r0,r0
80009a2a:	0e 2c       	rsub	r12,r7
80009a2c:	80 00       	ld.sh	r0,r0[0x0]
80009a2e:	9a 30       	ld.sh	r0,sp[0x6]

80009a30 <fat_cache_clusterlist_update_select>:


//! This function signals that a cache is used
//!
void  fat_cache_clusterlist_update_select( void )
{
80009a30:	eb cd 40 80 	pushm	r7,lr
80009a34:	1a 97       	mov	r7,sp
80009a36:	20 1d       	sub	sp,4
   uint8_t u8_i;
   uint8_t u8_level_to_update;
   bool b_file_cache;

   b_file_cache         = fs_g_cache_clusterlist[ fs_g_u8_current_cache ].b_cache_file;
80009a38:	4b 78       	lddpc	r8,80009b14 <fat_cache_clusterlist_update_select+0xe4>
80009a3a:	11 88       	ld.ub	r8,r8[0x0]
80009a3c:	10 99       	mov	r9,r8
80009a3e:	4b 7a       	lddpc	r10,80009b18 <fat_cache_clusterlist_update_select+0xe8>
80009a40:	12 98       	mov	r8,r9
80009a42:	a3 68       	lsl	r8,0x2
80009a44:	12 08       	add	r8,r9
80009a46:	a3 68       	lsl	r8,0x2
80009a48:	f4 08 00 08 	add	r8,r10,r8
80009a4c:	11 88       	ld.ub	r8,r8[0x0]
80009a4e:	ef 68 ff ff 	st.b	r7[-1],r8
   u8_level_to_update   = fs_g_cache_clusterlist[ fs_g_u8_current_cache ].u8_level_use;
80009a52:	4b 18       	lddpc	r8,80009b14 <fat_cache_clusterlist_update_select+0xe4>
80009a54:	11 88       	ld.ub	r8,r8[0x0]
80009a56:	10 99       	mov	r9,r8
80009a58:	4b 0a       	lddpc	r10,80009b18 <fat_cache_clusterlist_update_select+0xe8>
80009a5a:	12 98       	mov	r8,r9
80009a5c:	a3 68       	lsl	r8,0x2
80009a5e:	12 08       	add	r8,r9
80009a60:	a3 68       	lsl	r8,0x2
80009a62:	f4 08 00 08 	add	r8,r10,r8
80009a66:	11 98       	ld.ub	r8,r8[0x1]
80009a68:	ef 68 ff fe 	st.b	r7[-2],r8
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
80009a6c:	30 08       	mov	r8,0
80009a6e:	ef 68 ff fd 	st.b	r7[-3],r8
80009a72:	c3 b8       	rjmp	80009ae8 <fat_cache_clusterlist_update_select+0xb8>
   {
      if( fs_g_cache_clusterlist[u8_i].b_cache_file == b_file_cache )
80009a74:	ef 39 ff fd 	ld.ub	r9,r7[-3]
80009a78:	4a 8a       	lddpc	r10,80009b18 <fat_cache_clusterlist_update_select+0xe8>
80009a7a:	12 98       	mov	r8,r9
80009a7c:	a3 68       	lsl	r8,0x2
80009a7e:	12 08       	add	r8,r9
80009a80:	a3 68       	lsl	r8,0x2
80009a82:	f4 08 00 08 	add	r8,r10,r8
80009a86:	11 88       	ld.ub	r8,r8[0x0]
80009a88:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80009a8c:	f0 09 18 00 	cp.b	r9,r8
80009a90:	c2 71       	brne	80009ade <fat_cache_clusterlist_update_select+0xae>
         if( u8_level_to_update > fs_g_cache_clusterlist[u8_i].u8_level_use )
80009a92:	ef 39 ff fd 	ld.ub	r9,r7[-3]
80009a96:	4a 1a       	lddpc	r10,80009b18 <fat_cache_clusterlist_update_select+0xe8>
80009a98:	12 98       	mov	r8,r9
80009a9a:	a3 68       	lsl	r8,0x2
80009a9c:	12 08       	add	r8,r9
80009a9e:	a3 68       	lsl	r8,0x2
80009aa0:	f4 08 00 08 	add	r8,r10,r8
80009aa4:	11 98       	ld.ub	r8,r8[0x1]
80009aa6:	ef 39 ff fe 	ld.ub	r9,r7[-2]
80009aaa:	f0 09 18 00 	cp.b	r9,r8
80009aae:	e0 88 00 18 	brls	80009ade <fat_cache_clusterlist_update_select+0xae>
           fs_g_cache_clusterlist[u8_i].u8_level_use++;
80009ab2:	ef 39 ff fd 	ld.ub	r9,r7[-3]
80009ab6:	49 9a       	lddpc	r10,80009b18 <fat_cache_clusterlist_update_select+0xe8>
80009ab8:	12 98       	mov	r8,r9
80009aba:	a3 68       	lsl	r8,0x2
80009abc:	12 08       	add	r8,r9
80009abe:	a3 68       	lsl	r8,0x2
80009ac0:	f4 08 00 08 	add	r8,r10,r8
80009ac4:	11 98       	ld.ub	r8,r8[0x1]
80009ac6:	2f f8       	sub	r8,-1
80009ac8:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
80009acc:	49 3b       	lddpc	r11,80009b18 <fat_cache_clusterlist_update_select+0xe8>
80009ace:	12 98       	mov	r8,r9
80009ad0:	a3 68       	lsl	r8,0x2
80009ad2:	12 08       	add	r8,r9
80009ad4:	a3 68       	lsl	r8,0x2
80009ad6:	f6 08 00 09 	add	r9,r11,r8
80009ada:	14 98       	mov	r8,r10
80009adc:	b2 98       	st.b	r9[0x1],r8
   uint8_t u8_level_to_update;
   bool b_file_cache;

   b_file_cache         = fs_g_cache_clusterlist[ fs_g_u8_current_cache ].b_cache_file;
   u8_level_to_update   = fs_g_cache_clusterlist[ fs_g_u8_current_cache ].u8_level_use;
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
80009ade:	ef 38 ff fd 	ld.ub	r8,r7[-3]
80009ae2:	2f f8       	sub	r8,-1
80009ae4:	ef 68 ff fd 	st.b	r7[-3],r8
80009ae8:	ef 39 ff fd 	ld.ub	r9,r7[-3]
80009aec:	30 18       	mov	r8,1
80009aee:	f0 09 18 00 	cp.b	r9,r8
80009af2:	fe 98 ff c1 	brls	80009a74 <fat_cache_clusterlist_update_select+0x44>
   {
      if( fs_g_cache_clusterlist[u8_i].b_cache_file == b_file_cache )
         if( u8_level_to_update > fs_g_cache_clusterlist[u8_i].u8_level_use )
           fs_g_cache_clusterlist[u8_i].u8_level_use++;
   }
   fs_g_cache_clusterlist[  fs_g_u8_current_cache  ].u8_level_use = 0;
80009af6:	48 88       	lddpc	r8,80009b14 <fat_cache_clusterlist_update_select+0xe4>
80009af8:	11 88       	ld.ub	r8,r8[0x0]
80009afa:	10 99       	mov	r9,r8
80009afc:	48 7a       	lddpc	r10,80009b18 <fat_cache_clusterlist_update_select+0xe8>
80009afe:	12 98       	mov	r8,r9
80009b00:	a3 68       	lsl	r8,0x2
80009b02:	12 08       	add	r8,r9
80009b04:	a3 68       	lsl	r8,0x2
80009b06:	f4 08 00 09 	add	r9,r10,r8
80009b0a:	30 08       	mov	r8,0
80009b0c:	b2 98       	st.b	r9[0x1],r8
}
80009b0e:	2f fd       	sub	sp,-4
80009b10:	e3 cd 80 80 	ldm	sp++,r7,pc
80009b14:	00 00       	add	r0,r0
80009b16:	0d d6       	ld.ub	r6,r6[0x5]
80009b18:	00 00       	add	r0,r0
80009b1a:	0b 58       	ld.sh	r8,--r5

80009b1c <fat_cache_clusterlist_update_read>:
//!
//! @return    true  cluster list found and global variable fs_g_seg updated
//! @return    false no found in cluster list caches
//!
bool  fat_cache_clusterlist_update_read( bool b_for_file )
{
80009b1c:	eb cd 40 80 	pushm	r7,lr
80009b20:	1a 97       	mov	r7,sp
80009b22:	20 3d       	sub	sp,12
80009b24:	18 98       	mov	r8,r12
80009b26:	ef 68 ff f4 	st.b	r7[-12],r8
   uint32_t u32_tmp;
   uint8_t u8_i;
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
80009b2a:	30 08       	mov	r8,0
80009b2c:	ef 68 ff ff 	st.b	r7[-1],r8
80009b30:	c1 29       	rjmp	80009d54 <fat_cache_clusterlist_update_read+0x238>
   {
      if( (fs_g_cache_clusterlist[u8_i].b_cache_file == b_for_file)
80009b32:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80009b36:	fe fa 02 42 	ld.w	r10,pc[578]
80009b3a:	12 98       	mov	r8,r9
80009b3c:	a3 68       	lsl	r8,0x2
80009b3e:	12 08       	add	r8,r9
80009b40:	a3 68       	lsl	r8,0x2
80009b42:	f4 08 00 08 	add	r8,r10,r8
80009b46:	11 88       	ld.ub	r8,r8[0x0]
80009b48:	ef 39 ff f4 	ld.ub	r9,r7[-12]
80009b4c:	f0 09 18 00 	cp.b	r9,r8
80009b50:	e0 81 00 fd 	brne	80009d4a <fat_cache_clusterlist_update_read+0x22e>
      &&  (fs_g_cache_clusterlist[u8_i].u8_lun == fs_g_nav.u8_lun ) )
80009b54:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80009b58:	fe fa 02 20 	ld.w	r10,pc[544]
80009b5c:	12 98       	mov	r8,r9
80009b5e:	a3 68       	lsl	r8,0x2
80009b60:	12 08       	add	r8,r9
80009b62:	a3 68       	lsl	r8,0x2
80009b64:	f4 08 00 08 	add	r8,r10,r8
80009b68:	11 a9       	ld.ub	r9,r8[0x2]
80009b6a:	fe f8 02 12 	ld.w	r8,pc[530]
80009b6e:	11 88       	ld.ub	r8,r8[0x0]
{
   uint32_t u32_tmp;
   uint8_t u8_i;
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
   {
      if( (fs_g_cache_clusterlist[u8_i].b_cache_file == b_for_file)
80009b70:	f0 09 18 00 	cp.b	r9,r8
80009b74:	e0 81 00 eb 	brne	80009d4a <fat_cache_clusterlist_update_read+0x22e>
      &&  (fs_g_cache_clusterlist[u8_i].u8_lun == fs_g_nav.u8_lun ) )
      {
         if( fs_g_cache_clusterlist[u8_i].u32_cluster == fs_g_cluster.u32_pos )
80009b78:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80009b7c:	4f fa       	lddpc	r10,80009d78 <fat_cache_clusterlist_update_read+0x25c>
80009b7e:	12 98       	mov	r8,r9
80009b80:	a3 68       	lsl	r8,0x2
80009b82:	12 08       	add	r8,r9
80009b84:	2f f8       	sub	r8,-1
80009b86:	f4 08 03 29 	ld.w	r9,r10[r8<<0x2]
80009b8a:	4f e8       	lddpc	r8,80009d80 <fat_cache_clusterlist_update_read+0x264>
80009b8c:	70 08       	ld.w	r8,r8[0x0]
80009b8e:	10 39       	cp.w	r9,r8
80009b90:	e0 81 00 dd 	brne	80009d4a <fat_cache_clusterlist_update_read+0x22e>
         {
            if( fs_g_cache_clusterlist[u8_i].u32_start <= fs_g_seg.u32_size_or_pos )
80009b94:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80009b98:	4f 8a       	lddpc	r10,80009d78 <fat_cache_clusterlist_update_read+0x25c>
80009b9a:	12 98       	mov	r8,r9
80009b9c:	a3 68       	lsl	r8,0x2
80009b9e:	12 08       	add	r8,r9
80009ba0:	a3 68       	lsl	r8,0x2
80009ba2:	f4 08 00 08 	add	r8,r10,r8
80009ba6:	2f 88       	sub	r8,-8
80009ba8:	70 09       	ld.w	r9,r8[0x0]
80009baa:	4f 78       	lddpc	r8,80009d84 <fat_cache_clusterlist_update_read+0x268>
80009bac:	70 18       	ld.w	r8,r8[0x4]
80009bae:	10 39       	cp.w	r9,r8
80009bb0:	e0 8b 00 cd 	brhi	80009d4a <fat_cache_clusterlist_update_read+0x22e>
            {
               // The segment research is in or after the cache
               if( fs_g_cache_clusterlist[u8_i].u32_size  > (fs_g_seg.u32_size_or_pos-fs_g_cache_clusterlist[u8_i].u32_start) )
80009bb4:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80009bb8:	4f 0a       	lddpc	r10,80009d78 <fat_cache_clusterlist_update_read+0x25c>
80009bba:	12 98       	mov	r8,r9
80009bbc:	a3 68       	lsl	r8,0x2
80009bbe:	12 08       	add	r8,r9
80009bc0:	a3 68       	lsl	r8,0x2
80009bc2:	f4 08 00 08 	add	r8,r10,r8
80009bc6:	2f 08       	sub	r8,-16
80009bc8:	70 0a       	ld.w	r10,r8[0x0]
80009bca:	4e f8       	lddpc	r8,80009d84 <fat_cache_clusterlist_update_read+0x268>
80009bcc:	70 1b       	ld.w	r11,r8[0x4]
80009bce:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80009bd2:	4e ac       	lddpc	r12,80009d78 <fat_cache_clusterlist_update_read+0x25c>
80009bd4:	12 98       	mov	r8,r9
80009bd6:	a3 68       	lsl	r8,0x2
80009bd8:	12 08       	add	r8,r9
80009bda:	a3 68       	lsl	r8,0x2
80009bdc:	f8 08 00 08 	add	r8,r12,r8
80009be0:	2f 88       	sub	r8,-8
80009be2:	70 08       	ld.w	r8,r8[0x0]
80009be4:	f6 08 01 08 	sub	r8,r11,r8
80009be8:	10 3a       	cp.w	r10,r8
80009bea:	e0 88 00 3b 	brls	80009c60 <fat_cache_clusterlist_update_read+0x144>
               {
                  //** The segment research is in cache, then compute the segment infos
                  fs_g_seg.u32_size_or_pos -= fs_g_cache_clusterlist[u8_i].u32_start;
80009bee:	4e 68       	lddpc	r8,80009d84 <fat_cache_clusterlist_update_read+0x268>
80009bf0:	70 1a       	ld.w	r10,r8[0x4]
80009bf2:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80009bf6:	4e 1b       	lddpc	r11,80009d78 <fat_cache_clusterlist_update_read+0x25c>
80009bf8:	12 98       	mov	r8,r9
80009bfa:	a3 68       	lsl	r8,0x2
80009bfc:	12 08       	add	r8,r9
80009bfe:	a3 68       	lsl	r8,0x2
80009c00:	f6 08 00 08 	add	r8,r11,r8
80009c04:	2f 88       	sub	r8,-8
80009c06:	70 08       	ld.w	r8,r8[0x0]
80009c08:	f4 08 01 09 	sub	r9,r10,r8
80009c0c:	4d e8       	lddpc	r8,80009d84 <fat_cache_clusterlist_update_read+0x268>
80009c0e:	91 19       	st.w	r8[0x4],r9
                  fs_g_seg.u32_addr = fs_g_cache_clusterlist[u8_i].u32_addr + fs_g_seg.u32_size_or_pos;
80009c10:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80009c14:	4d 9a       	lddpc	r10,80009d78 <fat_cache_clusterlist_update_read+0x25c>
80009c16:	12 98       	mov	r8,r9
80009c18:	a3 68       	lsl	r8,0x2
80009c1a:	12 08       	add	r8,r9
80009c1c:	a3 68       	lsl	r8,0x2
80009c1e:	f4 08 00 08 	add	r8,r10,r8
80009c22:	2f 48       	sub	r8,-12
80009c24:	70 09       	ld.w	r9,r8[0x0]
80009c26:	4d 88       	lddpc	r8,80009d84 <fat_cache_clusterlist_update_read+0x268>
80009c28:	70 18       	ld.w	r8,r8[0x4]
80009c2a:	10 09       	add	r9,r8
80009c2c:	4d 68       	lddpc	r8,80009d84 <fat_cache_clusterlist_update_read+0x268>
80009c2e:	91 09       	st.w	r8[0x0],r9
                  fs_g_seg.u32_size_or_pos = fs_g_cache_clusterlist[u8_i].u32_size - fs_g_seg.u32_size_or_pos;
80009c30:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80009c34:	4d 1a       	lddpc	r10,80009d78 <fat_cache_clusterlist_update_read+0x25c>
80009c36:	12 98       	mov	r8,r9
80009c38:	a3 68       	lsl	r8,0x2
80009c3a:	12 08       	add	r8,r9
80009c3c:	a3 68       	lsl	r8,0x2
80009c3e:	f4 08 00 08 	add	r8,r10,r8
80009c42:	2f 08       	sub	r8,-16
80009c44:	70 09       	ld.w	r9,r8[0x0]
80009c46:	4d 08       	lddpc	r8,80009d84 <fat_cache_clusterlist_update_read+0x268>
80009c48:	70 18       	ld.w	r8,r8[0x4]
80009c4a:	10 19       	sub	r9,r8
80009c4c:	4c e8       	lddpc	r8,80009d84 <fat_cache_clusterlist_update_read+0x268>
80009c4e:	91 19       	st.w	r8[0x4],r9
                  fs_g_u8_current_cache = u8_i;
80009c50:	4c e9       	lddpc	r9,80009d88 <fat_cache_clusterlist_update_read+0x26c>
80009c52:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80009c56:	b2 88       	st.b	r9[0x0],r8
                  fat_cache_clusterlist_update_select();
80009c58:	f0 1f 00 4d 	mcall	80009d8c <fat_cache_clusterlist_update_read+0x270>
                  return true;   // the segment is in cluster list cache
80009c5c:	30 18       	mov	r8,1
80009c5e:	c8 88       	rjmp	80009d6e <fat_cache_clusterlist_update_read+0x252>
               }else{
                  //** It is after the cache then get cache information and continue to read the cluster list in FAT
                  // Store the result in this cache
                  fs_g_u8_current_cache = u8_i;
80009c60:	4c a9       	lddpc	r9,80009d88 <fat_cache_clusterlist_update_read+0x26c>
80009c62:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80009c66:	b2 88       	st.b	r9[0x0],r8
                  fs_g_cache_clusterlist[fs_g_u8_current_cache].u8_lun       = 0xFF;   // invalid cache
80009c68:	4c 88       	lddpc	r8,80009d88 <fat_cache_clusterlist_update_read+0x26c>
80009c6a:	11 88       	ld.ub	r8,r8[0x0]
80009c6c:	10 99       	mov	r9,r8
80009c6e:	4c 3a       	lddpc	r10,80009d78 <fat_cache_clusterlist_update_read+0x25c>
80009c70:	12 98       	mov	r8,r9
80009c72:	a3 68       	lsl	r8,0x2
80009c74:	12 08       	add	r8,r9
80009c76:	a3 68       	lsl	r8,0x2
80009c78:	f4 08 00 09 	add	r9,r10,r8
80009c7c:	3f f8       	mov	r8,-1
80009c7e:	b2 a8       	st.b	r9[0x2],r8
                  // fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_cluster  = fs_g_cluster.u32_pos;  // It is the same cluster start

                  // Get cache information to take time during the next FAT access
                  // Compute the cluster number corresponding at the last cluster of the cluster list cache
                  fs_g_cluster.u32_pos     = ((fs_g_cache_clusterlist[u8_i].u32_addr -fs_g_nav.u32_ptr_fat - fs_g_nav.u32_offset_data + fs_g_cache_clusterlist[u8_i].u32_size -1)
80009c80:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80009c84:	4b da       	lddpc	r10,80009d78 <fat_cache_clusterlist_update_read+0x25c>
80009c86:	12 98       	mov	r8,r9
80009c88:	a3 68       	lsl	r8,0x2
80009c8a:	12 08       	add	r8,r9
80009c8c:	a3 68       	lsl	r8,0x2
80009c8e:	f4 08 00 08 	add	r8,r10,r8
80009c92:	2f 48       	sub	r8,-12
80009c94:	70 09       	ld.w	r9,r8[0x0]
80009c96:	4b a8       	lddpc	r8,80009d7c <fat_cache_clusterlist_update_read+0x260>
80009c98:	70 48       	ld.w	r8,r8[0x10]
80009c9a:	10 19       	sub	r9,r8
80009c9c:	4b 88       	lddpc	r8,80009d7c <fat_cache_clusterlist_update_read+0x260>
80009c9e:	70 58       	ld.w	r8,r8[0x14]
80009ca0:	f2 08 01 0a 	sub	r10,r9,r8
80009ca4:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80009ca8:	4b 4b       	lddpc	r11,80009d78 <fat_cache_clusterlist_update_read+0x25c>
80009caa:	12 98       	mov	r8,r9
80009cac:	a3 68       	lsl	r8,0x2
80009cae:	12 08       	add	r8,r9
80009cb0:	a3 68       	lsl	r8,0x2
80009cb2:	f6 08 00 08 	add	r8,r11,r8
80009cb6:	2f 08       	sub	r8,-16
80009cb8:	70 08       	ld.w	r8,r8[0x0]
80009cba:	f4 08 00 08 	add	r8,r10,r8
80009cbe:	20 18       	sub	r8,1
80009cc0:	4a f9       	lddpc	r9,80009d7c <fat_cache_clusterlist_update_read+0x260>
80009cc2:	13 99       	ld.ub	r9,r9[0x1]
80009cc4:	f0 09 0d 08 	divu	r8,r8,r9
80009cc8:	f0 c9 ff fe 	sub	r9,r8,-2
80009ccc:	4a d8       	lddpc	r8,80009d80 <fat_cache_clusterlist_update_read+0x264>
80009cce:	91 09       	st.w	r8[0x0],r9
                                             / fs_g_nav.u8_BPB_SecPerClus) +2;
                  u32_tmp  = fs_g_seg.u32_size_or_pos;                                 // save position ask
80009cd0:	4a d8       	lddpc	r8,80009d84 <fat_cache_clusterlist_update_read+0x268>
80009cd2:	70 18       	ld.w	r8,r8[0x4]
80009cd4:	ef 48 ff f8 	st.w	r7[-8],r8
                  // Compute the position of the end of cluster list cache, and decrement the position asked
                  fs_g_seg.u32_size_or_pos-= ((fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_start + fs_g_cache_clusterlist[u8_i].u32_size -1)
80009cd8:	4a b8       	lddpc	r8,80009d84 <fat_cache_clusterlist_update_read+0x268>
80009cda:	70 1a       	ld.w	r10,r8[0x4]
80009cdc:	4a b8       	lddpc	r8,80009d88 <fat_cache_clusterlist_update_read+0x26c>
80009cde:	11 88       	ld.ub	r8,r8[0x0]
80009ce0:	10 99       	mov	r9,r8
80009ce2:	4a 6b       	lddpc	r11,80009d78 <fat_cache_clusterlist_update_read+0x25c>
80009ce4:	12 98       	mov	r8,r9
80009ce6:	a3 68       	lsl	r8,0x2
80009ce8:	12 08       	add	r8,r9
80009cea:	a3 68       	lsl	r8,0x2
80009cec:	f6 08 00 08 	add	r8,r11,r8
80009cf0:	2f 88       	sub	r8,-8
80009cf2:	70 0b       	ld.w	r11,r8[0x0]
80009cf4:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80009cf8:	4a 0c       	lddpc	r12,80009d78 <fat_cache_clusterlist_update_read+0x25c>
80009cfa:	12 98       	mov	r8,r9
80009cfc:	a3 68       	lsl	r8,0x2
80009cfe:	12 08       	add	r8,r9
80009d00:	a3 68       	lsl	r8,0x2
80009d02:	f8 08 00 08 	add	r8,r12,r8
80009d06:	2f 08       	sub	r8,-16
80009d08:	70 08       	ld.w	r8,r8[0x0]
80009d0a:	f6 08 00 08 	add	r8,r11,r8
80009d0e:	20 18       	sub	r8,1
80009d10:	49 b9       	lddpc	r9,80009d7c <fat_cache_clusterlist_update_read+0x260>
80009d12:	13 99       	ld.ub	r9,r9[0x1]
80009d14:	f0 09 0d 08 	divu	r8,r8,r9
80009d18:	10 99       	mov	r9,r8
80009d1a:	49 98       	lddpc	r8,80009d7c <fat_cache_clusterlist_update_read+0x260>
80009d1c:	11 98       	ld.ub	r8,r8[0x1]
80009d1e:	f2 08 02 48 	mul	r8,r9,r8
80009d22:	f4 08 01 09 	sub	r9,r10,r8
80009d26:	49 88       	lddpc	r8,80009d84 <fat_cache_clusterlist_update_read+0x268>
80009d28:	91 19       	st.w	r8[0x4],r9
                                             / fs_g_nav.u8_BPB_SecPerClus)
                                             * fs_g_nav.u8_BPB_SecPerClus;
                  fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_start = u32_tmp;   // Update cache with the position asked
80009d2a:	49 88       	lddpc	r8,80009d88 <fat_cache_clusterlist_update_read+0x26c>
80009d2c:	11 88       	ld.ub	r8,r8[0x0]
80009d2e:	10 99       	mov	r9,r8
80009d30:	49 2a       	lddpc	r10,80009d78 <fat_cache_clusterlist_update_read+0x25c>
80009d32:	12 98       	mov	r8,r9
80009d34:	a3 68       	lsl	r8,0x2
80009d36:	12 08       	add	r8,r9
80009d38:	a3 68       	lsl	r8,0x2
80009d3a:	f4 08 00 08 	add	r8,r10,r8
80009d3e:	2f 88       	sub	r8,-8
80009d40:	ee f9 ff f8 	ld.w	r9,r7[-8]
80009d44:	91 09       	st.w	r8[0x0],r9
                  return false;                                                        // The segment isn't in cluster list cache
80009d46:	30 08       	mov	r8,0
80009d48:	c1 38       	rjmp	80009d6e <fat_cache_clusterlist_update_read+0x252>
//!
bool  fat_cache_clusterlist_update_read( bool b_for_file )
{
   uint32_t u32_tmp;
   uint8_t u8_i;
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
80009d4a:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80009d4e:	2f f8       	sub	r8,-1
80009d50:	ef 68 ff ff 	st.b	r7[-1],r8
80009d54:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80009d58:	30 18       	mov	r8,1
80009d5a:	f0 09 18 00 	cp.b	r9,r8
80009d5e:	fe 98 fe ea 	brls	80009b32 <fat_cache_clusterlist_update_read+0x16>
            }
         }
      }
   }
   // No found in cache then read FAT and store the result in cache
   fat_cache_clusterlist_update_start(b_for_file);
80009d62:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80009d66:	10 9c       	mov	r12,r8
80009d68:	f0 1f 00 0a 	mcall	80009d90 <fat_cache_clusterlist_update_read+0x274>
   return false;
80009d6c:	30 08       	mov	r8,0
}
80009d6e:	10 9c       	mov	r12,r8
80009d70:	2f dd       	sub	sp,-12
80009d72:	e3 cd 80 80 	ldm	sp++,r7,pc
80009d76:	00 00       	add	r0,r0
80009d78:	00 00       	add	r0,r0
80009d7a:	0b 58       	ld.sh	r8,--r5
80009d7c:	00 00       	add	r0,r0
80009d7e:	0d 84       	ld.ub	r4,r6[0x0]
80009d80:	00 00       	add	r0,r0
80009d82:	0e 24       	rsub	r4,r7
80009d84:	00 00       	add	r0,r0
80009d86:	0e 2c       	rsub	r12,r7
80009d88:	00 00       	add	r0,r0
80009d8a:	0d d6       	ld.ub	r6,r6[0x5]
80009d8c:	80 00       	ld.sh	r0,r0[0x0]
80009d8e:	9a 30       	ld.sh	r0,sp[0x6]
80009d90:	80 00       	ld.sh	r0,r0[0x0]
80009d92:	98 78       	ld.sh	r8,r12[0xe]

80009d94 <fat_read_file>:
//!   fs_g_nav_entry.u32_cluster       First cluster of selected file
//!   fs_g_nav_entry.u32_pos_in_file   Position in file (unit byte)
//! @endverbatim
//!
bool  fat_read_file( uint8_t mode )
{
80009d94:	eb cd 40 80 	pushm	r7,lr
80009d98:	1a 97       	mov	r7,sp
80009d9a:	20 2d       	sub	sp,8
80009d9c:	18 98       	mov	r8,r12
80009d9e:	ef 68 ff f8 	st.b	r7[-8],r8
   uint32_t   u32_sector_pos;

   // Compute sector position
   u32_sector_pos = fs_g_nav_entry.u32_pos_in_file >> FS_512B_SHIFT_BIT;
80009da2:	4b f8       	lddpc	r8,80009e9c <fat_read_file+0x108>
80009da4:	70 38       	ld.w	r8,r8[0xc]
80009da6:	a9 98       	lsr	r8,0x9
80009da8:	ef 48 ff fc 	st.w	r7[-4],r8

   if(FS_CLUST_ACT_ONE  == mode)
80009dac:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80009db0:	30 28       	mov	r8,2
80009db2:	f0 09 18 00 	cp.b	r9,r8
80009db6:	c1 61       	brne	80009de2 <fat_read_file+0x4e>
   {
      if( (fs_g_sectorcache.u8_lun                 == fs_g_nav.u8_lun )
80009db8:	4b a8       	lddpc	r8,80009ea0 <fat_read_file+0x10c>
80009dba:	11 89       	ld.ub	r9,r8[0x0]
80009dbc:	4b a8       	lddpc	r8,80009ea4 <fat_read_file+0x110>
80009dbe:	11 88       	ld.ub	r8,r8[0x0]
80009dc0:	f0 09 18 00 	cp.b	r9,r8
80009dc4:	c2 51       	brne	80009e0e <fat_read_file+0x7a>
      &&  (fs_g_sectorcache.u32_clusterlist_start  == fs_g_nav_entry.u32_cluster )
80009dc6:	4b 78       	lddpc	r8,80009ea0 <fat_read_file+0x10c>
80009dc8:	70 39       	ld.w	r9,r8[0xc]
80009dca:	4b 58       	lddpc	r8,80009e9c <fat_read_file+0x108>
80009dcc:	70 18       	ld.w	r8,r8[0x4]
   // Compute sector position
   u32_sector_pos = fs_g_nav_entry.u32_pos_in_file >> FS_512B_SHIFT_BIT;

   if(FS_CLUST_ACT_ONE  == mode)
   {
      if( (fs_g_sectorcache.u8_lun                 == fs_g_nav.u8_lun )
80009dce:	10 39       	cp.w	r9,r8
80009dd0:	c1 f1       	brne	80009e0e <fat_read_file+0x7a>
      &&  (fs_g_sectorcache.u32_clusterlist_start  == fs_g_nav_entry.u32_cluster )
      &&  (fs_g_sectorcache.u32_clusterlist_pos    == u32_sector_pos ) )
80009dd2:	4b 48       	lddpc	r8,80009ea0 <fat_read_file+0x10c>
80009dd4:	70 49       	ld.w	r9,r8[0x10]
   // Compute sector position
   u32_sector_pos = fs_g_nav_entry.u32_pos_in_file >> FS_512B_SHIFT_BIT;

   if(FS_CLUST_ACT_ONE  == mode)
   {
      if( (fs_g_sectorcache.u8_lun                 == fs_g_nav.u8_lun )
80009dd6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80009dda:	10 39       	cp.w	r9,r8
80009ddc:	c1 91       	brne	80009e0e <fat_read_file+0x7a>
      &&  (fs_g_sectorcache.u32_clusterlist_start  == fs_g_nav_entry.u32_cluster )
      &&  (fs_g_sectorcache.u32_clusterlist_pos    == u32_sector_pos ) )
      {
         return true;      // The internal cache contains the sector requested
80009dde:	30 18       	mov	r8,1
80009de0:	c5 a8       	rjmp	80009e94 <fat_read_file+0x100>
      }
   }
   else
   {
      if( FS_CLUST_ACT_CLR == mode )
80009de2:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80009de6:	30 38       	mov	r8,3
80009de8:	f0 09 18 00 	cp.b	r9,r8
80009dec:	c1 11       	brne	80009e0e <fat_read_file+0x7a>
      {
         // Clear cluster list
         if( 0 == fs_g_nav_entry.u32_cluster )
80009dee:	4a c8       	lddpc	r8,80009e9c <fat_read_file+0x108>
80009df0:	70 18       	ld.w	r8,r8[0x4]
80009df2:	58 08       	cp.w	r8,0
80009df4:	c0 31       	brne	80009dfa <fat_read_file+0x66>
            return true;   // No cluster list is linked with the file, then no clear is necessary
80009df6:	30 18       	mov	r8,1
80009df8:	c4 e8       	rjmp	80009e94 <fat_read_file+0x100>

         if(0 != (fs_g_nav_entry.u32_pos_in_file & FS_512B_MASK) )
80009dfa:	4a 98       	lddpc	r8,80009e9c <fat_read_file+0x108>
80009dfc:	70 38       	ld.w	r8,r8[0xc]
80009dfe:	f1 d8 c0 09 	bfextu	r8,r8,0x0,0x9
80009e02:	c0 60       	breq	80009e0e <fat_read_file+0x7a>
         {
            // The actual sector is used, then start clear on the next sector
            u32_sector_pos++;
80009e04:	ee f8 ff fc 	ld.w	r8,r7[-4]
80009e08:	2f f8       	sub	r8,-1
80009e0a:	ef 48 ff fc 	st.w	r7[-4],r8
         }
      }
   }

   // Get the segment which start at the current position
   fs_g_seg.u32_addr = fs_g_nav_entry.u32_cluster;
80009e0e:	4a 48       	lddpc	r8,80009e9c <fat_read_file+0x108>
80009e10:	70 19       	ld.w	r9,r8[0x4]
80009e12:	4a 68       	lddpc	r8,80009ea8 <fat_read_file+0x114>
80009e14:	91 09       	st.w	r8[0x0],r9
   fs_g_seg.u32_size_or_pos = u32_sector_pos;
80009e16:	4a 58       	lddpc	r8,80009ea8 <fat_read_file+0x114>
80009e18:	ee f9 ff fc 	ld.w	r9,r7[-4]
80009e1c:	91 19       	st.w	r8[0x4],r9
   if( FS_CLUST_ACT_ONE != mode )
80009e1e:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80009e22:	30 28       	mov	r8,2
80009e24:	f0 09 18 00 	cp.b	r9,r8
80009e28:	c0 c0       	breq	80009e40 <fat_read_file+0xac>
   {
      if( fat_cluster_list( mode, true ) )
80009e2a:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80009e2e:	30 1b       	mov	r11,1
80009e30:	10 9c       	mov	r12,r8
80009e32:	f0 1f 00 1f 	mcall	80009eac <fat_read_file+0x118>
80009e36:	18 98       	mov	r8,r12
80009e38:	58 08       	cp.w	r8,0
80009e3a:	c1 e0       	breq	80009e76 <fat_read_file+0xe2>
         return true;      // Get or clear segment OK
80009e3c:	30 18       	mov	r8,1
80009e3e:	c2 b8       	rjmp	80009e94 <fat_read_file+0x100>
   }
   else
   {
      if( fat_cluster_list( FS_CLUST_ACT_SEG, true ) )   // Read all segment
80009e40:	30 1b       	mov	r11,1
80009e42:	30 1c       	mov	r12,1
80009e44:	f0 1f 00 1a 	mcall	80009eac <fat_read_file+0x118>
80009e48:	18 98       	mov	r8,r12
80009e4a:	58 08       	cp.w	r8,0
80009e4c:	c1 50       	breq	80009e76 <fat_read_file+0xe2>
      {
         // Read the sector corresponding at the position file (= first sector of segment)
         fs_gu32_addrsector = fs_g_seg.u32_addr ;
80009e4e:	49 78       	lddpc	r8,80009ea8 <fat_read_file+0x114>
80009e50:	70 09       	ld.w	r9,r8[0x0]
80009e52:	49 88       	lddpc	r8,80009eb0 <fat_read_file+0x11c>
80009e54:	91 09       	st.w	r8[0x0],r9
         if( fat_cache_read_sector( true ) )
80009e56:	30 1c       	mov	r12,1
80009e58:	f0 1f 00 17 	mcall	80009eb4 <fat_read_file+0x120>
80009e5c:	18 98       	mov	r8,r12
80009e5e:	58 08       	cp.w	r8,0
80009e60:	c0 b0       	breq	80009e76 <fat_read_file+0xe2>
         {
            fs_g_sectorcache.u32_clusterlist_start  = fs_g_nav_entry.u32_cluster;
80009e62:	48 f8       	lddpc	r8,80009e9c <fat_read_file+0x108>
80009e64:	70 19       	ld.w	r9,r8[0x4]
80009e66:	48 f8       	lddpc	r8,80009ea0 <fat_read_file+0x10c>
80009e68:	91 39       	st.w	r8[0xc],r9
            fs_g_sectorcache.u32_clusterlist_pos    = u32_sector_pos;
80009e6a:	48 e8       	lddpc	r8,80009ea0 <fat_read_file+0x10c>
80009e6c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80009e70:	91 49       	st.w	r8[0x10],r9
            return true;
80009e72:	30 18       	mov	r8,1
80009e74:	c1 08       	rjmp	80009e94 <fat_read_file+0x100>
         }
      }
   }
   if( (FS_CLUST_ACT_CLR == mode       )
80009e76:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80009e7a:	30 38       	mov	r8,3
80009e7c:	f0 09 18 00 	cp.b	r9,r8
80009e80:	c0 91       	brne	80009e92 <fat_read_file+0xfe>
   &&  (FS_ERR_OUT_LIST  == fs_g_status) )
80009e82:	48 e8       	lddpc	r8,80009eb8 <fat_read_file+0x124>
80009e84:	11 89       	ld.ub	r9,r8[0x0]
            fs_g_sectorcache.u32_clusterlist_pos    = u32_sector_pos;
            return true;
         }
      }
   }
   if( (FS_CLUST_ACT_CLR == mode       )
80009e86:	31 a8       	mov	r8,26
80009e88:	f0 09 18 00 	cp.b	r9,r8
80009e8c:	c0 31       	brne	80009e92 <fat_read_file+0xfe>
   &&  (FS_ERR_OUT_LIST  == fs_g_status) )
   {
      // It is possible to clear nothing
      return true;
80009e8e:	30 18       	mov	r8,1
80009e90:	c0 28       	rjmp	80009e94 <fat_read_file+0x100>
   }
   return false;
80009e92:	30 08       	mov	r8,0
}
80009e94:	10 9c       	mov	r12,r8
80009e96:	2f ed       	sub	sp,-8
80009e98:	e3 cd 80 80 	ldm	sp++,r7,pc
80009e9c:	00 00       	add	r0,r0
80009e9e:	0b 44       	ld.w	r4,--r5
80009ea0:	00 00       	add	r0,r0
80009ea2:	0e 0c       	add	r12,r7
80009ea4:	00 00       	add	r0,r0
80009ea6:	0d 84       	ld.ub	r4,r6[0x0]
80009ea8:	00 00       	add	r0,r0
80009eaa:	0e 2c       	rsub	r12,r7
80009eac:	80 00       	ld.sh	r0,r0[0x0]
80009eae:	8d 58       	st.w	r6[0x14],r8
80009eb0:	00 00       	add	r0,r0
80009eb2:	0b 40       	ld.w	r0,--r5
80009eb4:	80 00       	ld.sh	r0,r0[0x0]
80009eb6:	a8 bc       	st.b	r4[0x3],r12
80009eb8:	00 00       	add	r0,r0
80009eba:	0d d4       	ld.ub	r4,r6[0x5]

80009ebc <fat_write_file>:
//!   fs_g_nav_entry.u32_cluster       First cluster of selected file
//!   fs_g_nav_entry.u32_pos_in_file   Position in the file (unit byte)
//! @endverbatim
//!
bool  fat_write_file( uint8_t mode , uint32_t u32_nb_sector_write )
{
80009ebc:	eb cd 40 80 	pushm	r7,lr
80009ec0:	1a 97       	mov	r7,sp
80009ec2:	20 2d       	sub	sp,8
80009ec4:	18 98       	mov	r8,r12
80009ec6:	ef 4b ff f8 	st.w	r7[-8],r11
80009eca:	ef 68 ff fc 	st.b	r7[-4],r8
   if( 0 == fs_g_nav_entry.u32_cluster )
80009ece:	4d 18       	lddpc	r8,8000a010 <fat_write_file+0x154>
80009ed0:	70 18       	ld.w	r8,r8[0x4]
80009ed2:	58 08       	cp.w	r8,0
80009ed4:	c0 b1       	brne	80009eea <fat_write_file+0x2e>
   {
      // File don't have a cluster list, then alloc the first cluster list of the file
      MSB0(fs_g_seg.u32_addr)    = 0xFF;     // It is a new cluster list
80009ed6:	4d 09       	lddpc	r9,8000a014 <fat_write_file+0x158>
80009ed8:	3f f8       	mov	r8,-1
80009eda:	b2 88       	st.b	r9[0x0],r8
      // Update cluster list caches
      // fs_g_cluster.u32_pos    = ?         // To fill after alloc
      fs_g_seg.u32_size_or_pos   = 0;
80009edc:	4c e8       	lddpc	r8,8000a014 <fat_write_file+0x158>
80009ede:	30 09       	mov	r9,0
80009ee0:	91 19       	st.w	r8[0x4],r9
      fat_cache_clusterlist_update_start(true);
80009ee2:	30 1c       	mov	r12,1
80009ee4:	f0 1f 00 4d 	mcall	8000a018 <fat_write_file+0x15c>
80009ee8:	c3 a8       	rjmp	80009f5c <fat_write_file+0xa0>
   }
   else
   {
      if( fat_read_file( mode ) )
80009eea:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80009eee:	10 9c       	mov	r12,r8
80009ef0:	f0 1f 00 4b 	mcall	8000a01c <fat_write_file+0x160>
80009ef4:	18 98       	mov	r8,r12
80009ef6:	58 08       	cp.w	r8,0
80009ef8:	c0 30       	breq	80009efe <fat_write_file+0x42>
         return true;      // A segment is available (no alloc necessary)
80009efa:	30 18       	mov	r8,1
80009efc:	c8 68       	rjmp	8000a008 <fat_write_file+0x14c>

      if( FS_ERR_OUT_LIST != fs_g_status )
80009efe:	4c 98       	lddpc	r8,8000a020 <fat_write_file+0x164>
80009f00:	11 89       	ld.ub	r9,r8[0x0]
80009f02:	31 a8       	mov	r8,26
80009f04:	f0 09 18 00 	cp.b	r9,r8
80009f08:	c0 30       	breq	80009f0e <fat_write_file+0x52>
      {
         return false;     // Error system
80009f0a:	30 08       	mov	r8,0
80009f0c:	c7 e8       	rjmp	8000a008 <fat_write_file+0x14c>
      }
      // fat_read_file is outsize the list then the current cluster list cache contains the last cluster

      // Initialize cluster list caches before alloc routine
      fs_g_cache_clusterlist[fs_g_u8_current_cache].u8_lun       = 0xFF;                     // invalid cache
80009f0e:	4c 68       	lddpc	r8,8000a024 <fat_write_file+0x168>
80009f10:	11 88       	ld.ub	r8,r8[0x0]
80009f12:	10 99       	mov	r9,r8
80009f14:	4c 5a       	lddpc	r10,8000a028 <fat_write_file+0x16c>
80009f16:	12 98       	mov	r8,r9
80009f18:	a3 68       	lsl	r8,0x2
80009f1a:	12 08       	add	r8,r9
80009f1c:	a3 68       	lsl	r8,0x2
80009f1e:	f4 08 00 09 	add	r9,r10,r8
80009f22:	3f f8       	mov	r8,-1
80009f24:	b2 a8       	st.b	r9[0x2],r8
      // fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_cluster  = fs_g_cluster.u32_pos;  // it is the same
      fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_start += fs_g_nav.u8_BPB_SecPerClus; // Position of next cluster (the first new)
80009f26:	4c 08       	lddpc	r8,8000a024 <fat_write_file+0x168>
80009f28:	11 88       	ld.ub	r8,r8[0x0]
80009f2a:	10 99       	mov	r9,r8
80009f2c:	4b e8       	lddpc	r8,8000a024 <fat_write_file+0x168>
80009f2e:	11 88       	ld.ub	r8,r8[0x0]
80009f30:	10 9a       	mov	r10,r8
80009f32:	4b eb       	lddpc	r11,8000a028 <fat_write_file+0x16c>
80009f34:	14 98       	mov	r8,r10
80009f36:	a3 68       	lsl	r8,0x2
80009f38:	14 08       	add	r8,r10
80009f3a:	a3 68       	lsl	r8,0x2
80009f3c:	f6 08 00 08 	add	r8,r11,r8
80009f40:	2f 88       	sub	r8,-8
80009f42:	70 0a       	ld.w	r10,r8[0x0]
80009f44:	4b a8       	lddpc	r8,8000a02c <fat_write_file+0x170>
80009f46:	11 98       	ld.ub	r8,r8[0x1]
80009f48:	10 0a       	add	r10,r8
80009f4a:	4b 8b       	lddpc	r11,8000a028 <fat_write_file+0x16c>
80009f4c:	12 98       	mov	r8,r9
80009f4e:	a3 68       	lsl	r8,0x2
80009f50:	12 08       	add	r8,r9
80009f52:	a3 68       	lsl	r8,0x2
80009f54:	f6 08 00 08 	add	r8,r11,r8
80009f58:	2f 88       	sub	r8,-8
80009f5a:	91 0a       	st.w	r8[0x0],r10
   }

   // Alloc a cluster list
   if( FS_CLUST_ACT_SEG == mode )
80009f5c:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80009f60:	30 18       	mov	r8,1
80009f62:	f0 09 18 00 	cp.b	r9,r8
80009f66:	c0 61       	brne	80009f72 <fat_write_file+0xb6>
   {
      fs_g_seg.u32_size_or_pos = u32_nb_sector_write;
80009f68:	4a b8       	lddpc	r8,8000a014 <fat_write_file+0x158>
80009f6a:	ee f9 ff f8 	ld.w	r9,r7[-8]
80009f6e:	91 19       	st.w	r8[0x4],r9
80009f70:	c0 48       	rjmp	80009f78 <fat_write_file+0xbc>
   }else{
      fs_g_seg.u32_size_or_pos = 1;                                                          // only one sector
80009f72:	4a 98       	lddpc	r8,8000a014 <fat_write_file+0x158>
80009f74:	30 19       	mov	r9,1
80009f76:	91 19       	st.w	r8[0x4],r9
   }

   //note: fs_g_seg.u32_addr is already initialized with the last cluster value (see fat_cluster_list())
   if( !fat_allocfreespace())
80009f78:	f0 1f 00 2e 	mcall	8000a030 <fat_write_file+0x174>
80009f7c:	18 98       	mov	r8,r12
80009f7e:	ec 18 00 01 	eorl	r8,0x1
80009f82:	5c 58       	castu.b	r8
80009f84:	c0 30       	breq	80009f8a <fat_write_file+0xce>
      return false;
80009f86:	30 08       	mov	r8,0
80009f88:	c4 08       	rjmp	8000a008 <fat_write_file+0x14c>
   //note: fs_g_seg.u32_addr is the first cluster of the cluster list allocated by alloc_free_space()
   //note: fs_g_seg.u32_size_or_pos = number of sectors remaining

   if( 0 == fs_g_nav_entry.u32_cluster )
80009f8a:	4a 28       	lddpc	r8,8000a010 <fat_write_file+0x154>
80009f8c:	70 18       	ld.w	r8,r8[0x4]
80009f8e:	58 08       	cp.w	r8,0
80009f90:	c1 11       	brne	80009fb2 <fat_write_file+0xf6>
   {
      // It is the first cluster list of file, then update following values in cluster list cache
      // fs_g_seg.u32_addr = already contains the first cluster of the file (see alloc_free_space())
      fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_cluster = fs_g_seg.u32_addr;
80009f92:	4a 58       	lddpc	r8,8000a024 <fat_write_file+0x168>
80009f94:	11 88       	ld.ub	r8,r8[0x0]
80009f96:	10 99       	mov	r9,r8
80009f98:	49 f8       	lddpc	r8,8000a014 <fat_write_file+0x158>
80009f9a:	70 0b       	ld.w	r11,r8[0x0]
80009f9c:	4a 3a       	lddpc	r10,8000a028 <fat_write_file+0x16c>
80009f9e:	12 98       	mov	r8,r9
80009fa0:	a3 68       	lsl	r8,0x2
80009fa2:	12 08       	add	r8,r9
80009fa4:	2f f8       	sub	r8,-1
80009fa6:	f4 08 09 2b 	st.w	r10[r8<<0x2],r11
      // Update file entry
      fs_g_nav_entry.u32_cluster = fs_g_seg.u32_addr;
80009faa:	49 b8       	lddpc	r8,8000a014 <fat_write_file+0x158>
80009fac:	70 09       	ld.w	r9,r8[0x0]
80009fae:	49 98       	lddpc	r8,8000a010 <fat_write_file+0x154>
80009fb0:	91 19       	st.w	r8[0x4],r9
   }

   // Update cluster list cache
   if( FS_CLUST_ACT_SEG == mode )
80009fb2:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80009fb6:	30 18       	mov	r8,1
80009fb8:	f0 09 18 00 	cp.b	r9,r8
80009fbc:	c0 91       	brne	80009fce <fat_write_file+0x112>
   {
      fs_g_seg.u32_size_or_pos = u32_nb_sector_write - fs_g_seg.u32_size_or_pos;
80009fbe:	49 68       	lddpc	r8,8000a014 <fat_write_file+0x158>
80009fc0:	70 18       	ld.w	r8,r8[0x4]
80009fc2:	ee f9 ff f8 	ld.w	r9,r7[-8]
80009fc6:	10 19       	sub	r9,r8
80009fc8:	49 38       	lddpc	r8,8000a014 <fat_write_file+0x158>
80009fca:	91 19       	st.w	r8[0x4],r9
80009fcc:	c0 78       	rjmp	80009fda <fat_write_file+0x11e>
   }else{
      fs_g_seg.u32_size_or_pos = 1 - fs_g_seg.u32_size_or_pos;
80009fce:	49 28       	lddpc	r8,8000a014 <fat_write_file+0x158>
80009fd0:	70 18       	ld.w	r8,r8[0x4]
80009fd2:	f0 09 11 01 	rsub	r9,r8,1
80009fd6:	49 08       	lddpc	r8,8000a014 <fat_write_file+0x158>
80009fd8:	91 19       	st.w	r8[0x4],r9
   }
   fs_g_seg.u32_addr = ((fs_g_seg.u32_addr - 2) * fs_g_nav.u8_BPB_SecPerClus)
80009fda:	48 f8       	lddpc	r8,8000a014 <fat_write_file+0x158>
80009fdc:	70 08       	ld.w	r8,r8[0x0]
80009fde:	f0 c9 00 02 	sub	r9,r8,2
80009fe2:	49 38       	lddpc	r8,8000a02c <fat_write_file+0x170>
80009fe4:	11 98       	ld.ub	r8,r8[0x1]
80009fe6:	b1 39       	mul	r9,r8
                     + fs_g_nav.u32_ptr_fat + fs_g_nav.u32_offset_data;
80009fe8:	49 18       	lddpc	r8,8000a02c <fat_write_file+0x170>
80009fea:	70 48       	ld.w	r8,r8[0x10]
80009fec:	10 09       	add	r9,r8
   {
      fs_g_seg.u32_size_or_pos = u32_nb_sector_write - fs_g_seg.u32_size_or_pos;
   }else{
      fs_g_seg.u32_size_or_pos = 1 - fs_g_seg.u32_size_or_pos;
   }
   fs_g_seg.u32_addr = ((fs_g_seg.u32_addr - 2) * fs_g_nav.u8_BPB_SecPerClus)
80009fee:	49 08       	lddpc	r8,8000a02c <fat_write_file+0x170>
80009ff0:	70 58       	ld.w	r8,r8[0x14]
80009ff2:	10 09       	add	r9,r8
80009ff4:	48 88       	lddpc	r8,8000a014 <fat_write_file+0x158>
80009ff6:	91 09       	st.w	r8[0x0],r9
                     + fs_g_nav.u32_ptr_fat + fs_g_nav.u32_offset_data;
   fat_cache_clusterlist_update_finish();
80009ff8:	f0 1f 00 0f 	mcall	8000a034 <fat_write_file+0x178>

   return fat_read_file( mode );    // load the new cluster list
80009ffc:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000a000:	10 9c       	mov	r12,r8
8000a002:	f0 1f 00 07 	mcall	8000a01c <fat_write_file+0x160>
8000a006:	18 98       	mov	r8,r12
}
8000a008:	10 9c       	mov	r12,r8
8000a00a:	2f ed       	sub	sp,-8
8000a00c:	e3 cd 80 80 	ldm	sp++,r7,pc
8000a010:	00 00       	add	r0,r0
8000a012:	0b 44       	ld.w	r4,--r5
8000a014:	00 00       	add	r0,r0
8000a016:	0e 2c       	rsub	r12,r7
8000a018:	80 00       	ld.sh	r0,r0[0x0]
8000a01a:	98 78       	ld.sh	r8,r12[0xe]
8000a01c:	80 00       	ld.sh	r0,r0[0x0]
8000a01e:	9d 94       	st.w	lr[0x24],r4
8000a020:	00 00       	add	r0,r0
8000a022:	0d d4       	ld.ub	r4,r6[0x5]
8000a024:	00 00       	add	r0,r0
8000a026:	0d d6       	ld.ub	r6,r6[0x5]
8000a028:	00 00       	add	r0,r0
8000a02a:	0b 58       	ld.sh	r8,--r5
8000a02c:	00 00       	add	r0,r0
8000a02e:	0d 84       	ld.ub	r4,r6[0x0]
8000a030:	80 00       	ld.sh	r0,r0[0x0]
8000a032:	c1 c0       	breq	8000a06a <fat_read_dir+0x32>
8000a034:	80 00       	ld.sh	r0,r0[0x0]
8000a036:	99 4c       	st.w	r12[0x10],r12

8000a038 <fat_read_dir>:
//!   fs_g_nav.u32_cluster_sel_dir           First cluster of current directory
//!   fs_g_nav_fast.u16_entry_pos_sel_file   Position in directory (unit entry)
//! @endverbatim
//!
bool  fat_read_dir( void )
{
8000a038:	eb cd 40 80 	pushm	r7,lr
8000a03c:	1a 97       	mov	r7,sp
8000a03e:	20 1d       	sub	sp,4
   uint32_t u32_cluster_pos;

   // Compute the cluster list position corresponding of the current entry
   u32_cluster_pos = fs_g_nav_fast.u16_entry_pos_sel_file >> (FS_512B_SHIFT_BIT - FS_SHIFT_B_TO_FILE_ENTRY);
8000a040:	4a 38       	lddpc	r8,8000a0cc <fat_read_dir+0x94>
8000a042:	90 18       	ld.sh	r8,r8[0x2]
8000a044:	5c 78       	castu.h	r8
8000a046:	a5 88       	lsr	r8,0x4
8000a048:	5c 88       	casts.h	r8
8000a04a:	5c 78       	castu.h	r8
8000a04c:	ef 48 ff fc 	st.w	r7[-4],r8

   if( (fs_g_sectorcache.u8_lun                 == fs_g_nav.u8_lun )
8000a050:	4a 08       	lddpc	r8,8000a0d0 <fat_read_dir+0x98>
8000a052:	11 89       	ld.ub	r9,r8[0x0]
8000a054:	4a 08       	lddpc	r8,8000a0d4 <fat_read_dir+0x9c>
8000a056:	11 88       	ld.ub	r8,r8[0x0]
8000a058:	f0 09 18 00 	cp.b	r9,r8
8000a05c:	c0 f1       	brne	8000a07a <fat_read_dir+0x42>
   &&  (fs_g_sectorcache.u32_clusterlist_start  == fs_g_nav.u32_cluster_sel_dir )
8000a05e:	49 d8       	lddpc	r8,8000a0d0 <fat_read_dir+0x98>
8000a060:	70 39       	ld.w	r9,r8[0xc]
8000a062:	49 d8       	lddpc	r8,8000a0d4 <fat_read_dir+0x9c>
8000a064:	70 88       	ld.w	r8,r8[0x20]
   uint32_t u32_cluster_pos;

   // Compute the cluster list position corresponding of the current entry
   u32_cluster_pos = fs_g_nav_fast.u16_entry_pos_sel_file >> (FS_512B_SHIFT_BIT - FS_SHIFT_B_TO_FILE_ENTRY);

   if( (fs_g_sectorcache.u8_lun                 == fs_g_nav.u8_lun )
8000a066:	10 39       	cp.w	r9,r8
8000a068:	c0 91       	brne	8000a07a <fat_read_dir+0x42>
   &&  (fs_g_sectorcache.u32_clusterlist_start  == fs_g_nav.u32_cluster_sel_dir )
   &&  (fs_g_sectorcache.u32_clusterlist_pos    == u32_cluster_pos ) )
8000a06a:	49 a8       	lddpc	r8,8000a0d0 <fat_read_dir+0x98>
8000a06c:	70 49       	ld.w	r9,r8[0x10]
   uint32_t u32_cluster_pos;

   // Compute the cluster list position corresponding of the current entry
   u32_cluster_pos = fs_g_nav_fast.u16_entry_pos_sel_file >> (FS_512B_SHIFT_BIT - FS_SHIFT_B_TO_FILE_ENTRY);

   if( (fs_g_sectorcache.u8_lun                 == fs_g_nav.u8_lun )
8000a06e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a072:	10 39       	cp.w	r9,r8
8000a074:	c0 31       	brne	8000a07a <fat_read_dir+0x42>
   &&  (fs_g_sectorcache.u32_clusterlist_start  == fs_g_nav.u32_cluster_sel_dir )
   &&  (fs_g_sectorcache.u32_clusterlist_pos    == u32_cluster_pos ) )
   {
         return true;      // The internal cache contains the sector asked
8000a076:	30 18       	mov	r8,1
8000a078:	c2 58       	rjmp	8000a0c2 <fat_read_dir+0x8a>
   }

   // Get sector address corresponding at cluster list position
   fs_g_seg.u32_addr = fs_g_nav.u32_cluster_sel_dir;
8000a07a:	49 78       	lddpc	r8,8000a0d4 <fat_read_dir+0x9c>
8000a07c:	70 89       	ld.w	r9,r8[0x20]
8000a07e:	49 78       	lddpc	r8,8000a0d8 <fat_read_dir+0xa0>
8000a080:	91 09       	st.w	r8[0x0],r9
   fs_g_seg.u32_size_or_pos = u32_cluster_pos;
8000a082:	49 68       	lddpc	r8,8000a0d8 <fat_read_dir+0xa0>
8000a084:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000a088:	91 19       	st.w	r8[0x4],r9
   if( fat_cluster_list( FS_CLUST_ACT_ONE, false ) )
8000a08a:	30 0b       	mov	r11,0
8000a08c:	30 2c       	mov	r12,2
8000a08e:	f0 1f 00 14 	mcall	8000a0dc <fat_read_dir+0xa4>
8000a092:	18 98       	mov	r8,r12
8000a094:	58 08       	cp.w	r8,0
8000a096:	c1 50       	breq	8000a0c0 <fat_read_dir+0x88>
   {
      // Read the sector
      fs_gu32_addrsector = fs_g_seg.u32_addr;
8000a098:	49 08       	lddpc	r8,8000a0d8 <fat_read_dir+0xa0>
8000a09a:	70 09       	ld.w	r9,r8[0x0]
8000a09c:	49 18       	lddpc	r8,8000a0e0 <fat_read_dir+0xa8>
8000a09e:	91 09       	st.w	r8[0x0],r9
      if( fat_cache_read_sector( true ) )
8000a0a0:	30 1c       	mov	r12,1
8000a0a2:	f0 1f 00 11 	mcall	8000a0e4 <fat_read_dir+0xac>
8000a0a6:	18 98       	mov	r8,r12
8000a0a8:	58 08       	cp.w	r8,0
8000a0aa:	c0 b0       	breq	8000a0c0 <fat_read_dir+0x88>
      {
         // Update information about internal sector cache
         fs_g_sectorcache.u32_clusterlist_start  = fs_g_nav.u32_cluster_sel_dir;
8000a0ac:	48 a8       	lddpc	r8,8000a0d4 <fat_read_dir+0x9c>
8000a0ae:	70 89       	ld.w	r9,r8[0x20]
8000a0b0:	48 88       	lddpc	r8,8000a0d0 <fat_read_dir+0x98>
8000a0b2:	91 39       	st.w	r8[0xc],r9
         fs_g_sectorcache.u32_clusterlist_pos    = u32_cluster_pos;
8000a0b4:	48 78       	lddpc	r8,8000a0d0 <fat_read_dir+0x98>
8000a0b6:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000a0ba:	91 49       	st.w	r8[0x10],r9
         return true;
8000a0bc:	30 18       	mov	r8,1
8000a0be:	c0 28       	rjmp	8000a0c2 <fat_read_dir+0x8a>
      }
   }
   return false;
8000a0c0:	30 08       	mov	r8,0
}
8000a0c2:	10 9c       	mov	r12,r8
8000a0c4:	2f fd       	sub	sp,-4
8000a0c6:	e3 cd 80 80 	ldm	sp++,r7,pc
8000a0ca:	00 00       	add	r0,r0
8000a0cc:	00 00       	add	r0,r0
8000a0ce:	0d d0       	ld.ub	r0,r6[0x5]
8000a0d0:	00 00       	add	r0,r0
8000a0d2:	0e 0c       	add	r12,r7
8000a0d4:	00 00       	add	r0,r0
8000a0d6:	0d 84       	ld.ub	r4,r6[0x0]
8000a0d8:	00 00       	add	r0,r0
8000a0da:	0e 2c       	rsub	r12,r7
8000a0dc:	80 00       	ld.sh	r0,r0[0x0]
8000a0de:	8d 58       	st.w	r6[0x14],r8
8000a0e0:	00 00       	add	r0,r0
8000a0e2:	0b 40       	ld.w	r0,--r5
8000a0e4:	80 00       	ld.sh	r0,r0[0x0]
8000a0e6:	a8 bc       	st.b	r4[0x3],r12

8000a0e8 <fat_entry_check>:
//!   fs_g_sector       The directory sector corresponding at the current position
//!   fs_g_nav_fast.u16_entry_pos_sel_file    Position in directory of the entry file (unit entry)
//! @endverbatim
//!
bool  fat_entry_check( bool b_type )
{
8000a0e8:	eb cd 40 80 	pushm	r7,lr
8000a0ec:	1a 97       	mov	r7,sp
8000a0ee:	20 3d       	sub	sp,12
8000a0f0:	18 98       	mov	r8,r12
8000a0f2:	ef 68 ff f4 	st.b	r7[-12],r8
   PTR_CACHE u8_ptr_entry;
   uint8_t u8_first_byte, u8_seconde_byte;
   uint8_t u8_attribut;

   u8_ptr_entry = fat_get_ptr_entry();
8000a0f6:	f0 1f 00 2e 	mcall	8000a1ac <fat_entry_check+0xc4>
8000a0fa:	18 98       	mov	r8,r12
8000a0fc:	ef 48 ff f8 	st.w	r7[-8],r8

   u8_first_byte = u8_ptr_entry[0];
8000a100:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a104:	11 88       	ld.ub	r8,r8[0x0]
8000a106:	ef 68 ff fd 	st.b	r7[-3],r8
   if ( FS_ENTRY_END == u8_first_byte )
8000a10a:	ef 39 ff fd 	ld.ub	r9,r7[-3]
8000a10e:	30 08       	mov	r8,0
8000a110:	f0 09 18 00 	cp.b	r9,r8
8000a114:	c0 61       	brne	8000a120 <fat_entry_check+0x38>
   {
      fs_g_status = FS_ERR_ENTRY_EMPTY;   // end of directory
8000a116:	4a 79       	lddpc	r9,8000a1b0 <fat_entry_check+0xc8>
8000a118:	30 a8       	mov	r8,10
8000a11a:	b2 88       	st.b	r9[0x0],r8
      return false;
8000a11c:	30 08       	mov	r8,0
8000a11e:	c4 38       	rjmp	8000a1a4 <fat_entry_check+0xbc>
   }
   fs_g_status = FS_ERR_ENTRY_BAD;        // by default BAD ENTRY
8000a120:	4a 49       	lddpc	r9,8000a1b0 <fat_entry_check+0xc8>
8000a122:	30 b8       	mov	r8,11
8000a124:	b2 88       	st.b	r9[0x0],r8
   if ( FS_ENTRY_DEL == u8_first_byte )      { return false;   } // entry deleted
8000a126:	ef 39 ff fd 	ld.ub	r9,r7[-3]
8000a12a:	3e 58       	mov	r8,-27
8000a12c:	f0 09 18 00 	cp.b	r9,r8
8000a130:	c0 31       	brne	8000a136 <fat_entry_check+0x4e>
8000a132:	30 08       	mov	r8,0
8000a134:	c3 88       	rjmp	8000a1a4 <fat_entry_check+0xbc>
   if (   '.'  == u8_first_byte )            { return false;   } // current dir "."
8000a136:	ef 39 ff fd 	ld.ub	r9,r7[-3]
8000a13a:	32 e8       	mov	r8,46
8000a13c:	f0 09 18 00 	cp.b	r9,r8
8000a140:	c0 31       	brne	8000a146 <fat_entry_check+0x5e>
8000a142:	30 08       	mov	r8,0
8000a144:	c3 08       	rjmp	8000a1a4 <fat_entry_check+0xbc>
   u8_seconde_byte = u8_ptr_entry[1];
8000a146:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a14a:	2f f8       	sub	r8,-1
8000a14c:	11 88       	ld.ub	r8,r8[0x0]
8000a14e:	ef 68 ff fe 	st.b	r7[-2],r8
   if ( ('.'  == u8_first_byte)
8000a152:	ef 39 ff fd 	ld.ub	r9,r7[-3]
8000a156:	32 e8       	mov	r8,46
8000a158:	f0 09 18 00 	cp.b	r9,r8
8000a15c:	c0 91       	brne	8000a16e <fat_entry_check+0x86>
8000a15e:	ef 39 ff fe 	ld.ub	r9,r7[-2]
8000a162:	32 e8       	mov	r8,46
8000a164:	f0 09 18 00 	cp.b	r9,r8
8000a168:	c0 31       	brne	8000a16e <fat_entry_check+0x86>
   &&   ('.'  == u8_seconde_byte) )          { return false;   } // current dir ".."
8000a16a:	30 08       	mov	r8,0
8000a16c:	c1 c8       	rjmp	8000a1a4 <fat_entry_check+0xbc>

   // Check Attribute
   u8_attribut = u8_ptr_entry[11];
8000a16e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a172:	2f 58       	sub	r8,-11
8000a174:	11 88       	ld.ub	r8,r8[0x0]
8000a176:	ef 68 ff ff 	st.b	r7[-1],r8
   if ( FS_ATTR_VOLUME_ID & u8_attribut )    { return false;   } // volume id
8000a17a:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000a17e:	e2 18 00 08 	andl	r8,0x8,COH
8000a182:	c0 30       	breq	8000a188 <fat_entry_check+0xa0>
8000a184:	30 08       	mov	r8,0
8000a186:	c0 f8       	rjmp	8000a1a4 <fat_entry_check+0xbc>
   // Optimization, this line isn't necessary because the next test control this case
   // if ( FS_ATTR_LFN_ENTRY == *u8_ptr_entry) { return false;   } // long file name

   // Check entry type
   if( FS_ATTR_DIRECTORY & u8_attribut )
8000a188:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000a18c:	e2 18 00 10 	andl	r8,0x10,COH
8000a190:	c0 80       	breq	8000a1a0 <fat_entry_check+0xb8>
   {
      return (FS_DIR == b_type);
8000a192:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000a196:	ec 18 00 01 	eorl	r8,0x1
8000a19a:	5c 58       	castu.b	r8
8000a19c:	5c 58       	castu.b	r8
8000a19e:	c0 38       	rjmp	8000a1a4 <fat_entry_check+0xbc>
   }else{
      return (FS_FILE == b_type);
8000a1a0:	ef 38 ff f4 	ld.ub	r8,r7[-12]
   }
}
8000a1a4:	10 9c       	mov	r12,r8
8000a1a6:	2f dd       	sub	sp,-12
8000a1a8:	e3 cd 80 80 	ldm	sp++,r7,pc
8000a1ac:	80 00       	ld.sh	r0,r0[0x0]
8000a1ae:	a8 94       	st.b	r4[0x1],r4
8000a1b0:	00 00       	add	r0,r0
8000a1b2:	0d d4       	ld.ub	r4,r6[0x5]

8000a1b4 <fat_get_entry_info>:
//! OUT:
//!   fs_g_nav_entry. u32_cluster, u8_attr, u32_size
//! @endverbatim
//!
void  fat_get_entry_info( void )
{
8000a1b4:	eb cd 40 80 	pushm	r7,lr
8000a1b8:	1a 97       	mov	r7,sp
8000a1ba:	20 1d       	sub	sp,4
   PTR_CACHE ptr_entry;

   ptr_entry = fat_get_ptr_entry();
8000a1bc:	f0 1f 00 32 	mcall	8000a284 <fat_get_entry_info+0xd0>
8000a1c0:	18 98       	mov	r8,r12
8000a1c2:	ef 48 ff fc 	st.w	r7[-4],r8

   // Get Attribute
   ptr_entry+= 11;
8000a1c6:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a1ca:	2f 58       	sub	r8,-11
8000a1cc:	ef 48 ff fc 	st.w	r7[-4],r8
   fs_g_nav_entry.u8_attr = ptr_entry[0];
8000a1d0:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a1d4:	11 88       	ld.ub	r8,r8[0x0]
8000a1d6:	4a d9       	lddpc	r9,8000a288 <fat_get_entry_info+0xd4>
8000a1d8:	b2 a8       	st.b	r9[0x2],r8

   // Get the first cluster of the file cluster list
   ptr_entry += (20-11);
8000a1da:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a1de:	2f 78       	sub	r8,-9
8000a1e0:	ef 48 ff fc 	st.w	r7[-4],r8
   LSB2(fs_g_nav_entry.u32_cluster) = ptr_entry[0];
8000a1e4:	4a 98       	lddpc	r8,8000a288 <fat_get_entry_info+0xd4>
8000a1e6:	2f c8       	sub	r8,-4
8000a1e8:	f0 c9 ff ff 	sub	r9,r8,-1
8000a1ec:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a1f0:	11 88       	ld.ub	r8,r8[0x0]
8000a1f2:	b2 88       	st.b	r9[0x0],r8
   LSB3(fs_g_nav_entry.u32_cluster) = ptr_entry[1];
8000a1f4:	4a 58       	lddpc	r8,8000a288 <fat_get_entry_info+0xd4>
8000a1f6:	f0 c9 ff fc 	sub	r9,r8,-4
8000a1fa:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a1fe:	2f f8       	sub	r8,-1
8000a200:	11 88       	ld.ub	r8,r8[0x0]
8000a202:	b2 88       	st.b	r9[0x0],r8
   ptr_entry += (26-20);
8000a204:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a208:	2f a8       	sub	r8,-6
8000a20a:	ef 48 ff fc 	st.w	r7[-4],r8
   LSB0(fs_g_nav_entry.u32_cluster) = ptr_entry[0];
8000a20e:	49 f8       	lddpc	r8,8000a288 <fat_get_entry_info+0xd4>
8000a210:	2f c8       	sub	r8,-4
8000a212:	f0 c9 ff fd 	sub	r9,r8,-3
8000a216:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a21a:	11 88       	ld.ub	r8,r8[0x0]
8000a21c:	b2 88       	st.b	r9[0x0],r8
   LSB1(fs_g_nav_entry.u32_cluster) = ptr_entry[1];
8000a21e:	49 b8       	lddpc	r8,8000a288 <fat_get_entry_info+0xd4>
8000a220:	2f c8       	sub	r8,-4
8000a222:	f0 c9 ff fe 	sub	r9,r8,-2
8000a226:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a22a:	2f f8       	sub	r8,-1
8000a22c:	11 88       	ld.ub	r8,r8[0x0]
8000a22e:	b2 88       	st.b	r9[0x0],r8

   // Get the size of file
   ptr_entry += (28-26);
8000a230:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a234:	2f e8       	sub	r8,-2
8000a236:	ef 48 ff fc 	st.w	r7[-4],r8
   LSB0(fs_g_nav_entry.u32_size) = ptr_entry[0];
8000a23a:	49 48       	lddpc	r8,8000a288 <fat_get_entry_info+0xd4>
8000a23c:	2f 88       	sub	r8,-8
8000a23e:	f0 c9 ff fd 	sub	r9,r8,-3
8000a242:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a246:	11 88       	ld.ub	r8,r8[0x0]
8000a248:	b2 88       	st.b	r9[0x0],r8
   LSB1(fs_g_nav_entry.u32_size) = ptr_entry[1];
8000a24a:	49 08       	lddpc	r8,8000a288 <fat_get_entry_info+0xd4>
8000a24c:	2f 88       	sub	r8,-8
8000a24e:	f0 c9 ff fe 	sub	r9,r8,-2
8000a252:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a256:	2f f8       	sub	r8,-1
8000a258:	11 88       	ld.ub	r8,r8[0x0]
8000a25a:	b2 88       	st.b	r9[0x0],r8
   LSB2(fs_g_nav_entry.u32_size) = ptr_entry[2];
8000a25c:	48 b8       	lddpc	r8,8000a288 <fat_get_entry_info+0xd4>
8000a25e:	2f 88       	sub	r8,-8
8000a260:	f0 c9 ff ff 	sub	r9,r8,-1
8000a264:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a268:	2f e8       	sub	r8,-2
8000a26a:	11 88       	ld.ub	r8,r8[0x0]
8000a26c:	b2 88       	st.b	r9[0x0],r8
   LSB3(fs_g_nav_entry.u32_size) = ptr_entry[3];
8000a26e:	48 78       	lddpc	r8,8000a288 <fat_get_entry_info+0xd4>
8000a270:	f0 c9 ff f8 	sub	r9,r8,-8
8000a274:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a278:	2f d8       	sub	r8,-3
8000a27a:	11 88       	ld.ub	r8,r8[0x0]
8000a27c:	b2 88       	st.b	r9[0x0],r8
}
8000a27e:	2f fd       	sub	sp,-4
8000a280:	e3 cd 80 80 	ldm	sp++,r7,pc
8000a284:	80 00       	ld.sh	r0,r0[0x0]
8000a286:	a8 94       	st.b	r4[0x1],r4
8000a288:	00 00       	add	r0,r0
8000a28a:	0b 44       	ld.w	r4,--r5

8000a28c <fat_entry_is_dir>:
//!
//! @return    true,    this entry is a directory
//! @return    false,   otherwise
//!
bool  fat_entry_is_dir(void)
{
8000a28c:	eb cd 40 80 	pushm	r7,lr
8000a290:	1a 97       	mov	r7,sp
   fs_g_status = FS_ERR_NO_DIR;
8000a292:	48 79       	lddpc	r9,8000a2ac <fat_entry_is_dir+0x20>
8000a294:	30 d8       	mov	r8,13
8000a296:	b2 88       	st.b	r9[0x0],r8
   return (FS_ATTR_DIRECTORY & fs_g_nav_entry.u8_attr);
8000a298:	48 68       	lddpc	r8,8000a2b0 <fat_entry_is_dir+0x24>
8000a29a:	11 a8       	ld.ub	r8,r8[0x2]
8000a29c:	e2 18 00 10 	andl	r8,0x10,COH
8000a2a0:	5f 18       	srne	r8
8000a2a2:	5c 58       	castu.b	r8
}
8000a2a4:	10 9c       	mov	r12,r8
8000a2a6:	e3 cd 80 80 	ldm	sp++,r7,pc
8000a2aa:	00 00       	add	r0,r0
8000a2ac:	00 00       	add	r0,r0
8000a2ae:	0d d4       	ld.ub	r4,r6[0x5]
8000a2b0:	00 00       	add	r0,r0
8000a2b2:	0b 44       	ld.w	r4,--r5

8000a2b4 <fat_clear_entry_info_and_ptr>:


//! This function resets the selection pointers
//!
void  fat_clear_entry_info_and_ptr( void )
{
8000a2b4:	eb cd 40 80 	pushm	r7,lr
8000a2b8:	1a 97       	mov	r7,sp
   fs_g_nav_fast.u16_entry_pos_sel_file= FS_NO_SEL;
8000a2ba:	49 09       	lddpc	r9,8000a2f8 <fat_clear_entry_info_and_ptr+0x44>
8000a2bc:	3f f8       	mov	r8,-1
8000a2be:	b2 18       	st.h	r9[0x2],r8
   fs_g_nav.u16_pos_sel_file           = FS_NO_SEL;
8000a2c0:	48 f9       	lddpc	r9,8000a2fc <fat_clear_entry_info_and_ptr+0x48>
8000a2c2:	3f f8       	mov	r8,-1
8000a2c4:	f3 58 00 24 	st.h	r9[36],r8
   if( !fs_g_nav.b_mode_nav_single )
8000a2c8:	48 d8       	lddpc	r8,8000a2fc <fat_clear_entry_info_and_ptr+0x48>
8000a2ca:	f1 38 00 2d 	ld.ub	r8,r8[45]
8000a2ce:	58 08       	cp.w	r8,0
8000a2d0:	c0 51       	brne	8000a2da <fat_clear_entry_info_and_ptr+0x26>
   {
      fs_g_nav.b_mode_nav                 = FS_DIR;
8000a2d2:	48 b9       	lddpc	r9,8000a2fc <fat_clear_entry_info_and_ptr+0x48>
8000a2d4:	30 08       	mov	r8,0
8000a2d6:	f3 68 00 2c 	st.b	r9[44],r8
   }
   fs_g_nav_entry.u8_attr     = 0;
8000a2da:	48 a9       	lddpc	r9,8000a300 <fat_clear_entry_info_and_ptr+0x4c>
8000a2dc:	30 08       	mov	r8,0
8000a2de:	b2 a8       	st.b	r9[0x2],r8
   fs_g_nav_entry.u32_cluster = 0;
8000a2e0:	48 88       	lddpc	r8,8000a300 <fat_clear_entry_info_and_ptr+0x4c>
8000a2e2:	30 09       	mov	r9,0
8000a2e4:	91 19       	st.w	r8[0x4],r9
   fs_g_nav_entry.u32_size    = 0;
8000a2e6:	48 78       	lddpc	r8,8000a300 <fat_clear_entry_info_and_ptr+0x4c>
8000a2e8:	30 09       	mov	r9,0
8000a2ea:	91 29       	st.w	r8[0x8],r9
   Fat_file_close();
8000a2ec:	48 59       	lddpc	r9,8000a300 <fat_clear_entry_info_and_ptr+0x4c>
8000a2ee:	30 08       	mov	r8,0
8000a2f0:	b2 88       	st.b	r9[0x0],r8
}
8000a2f2:	e3 cd 80 80 	ldm	sp++,r7,pc
8000a2f6:	00 00       	add	r0,r0
8000a2f8:	00 00       	add	r0,r0
8000a2fa:	0d d0       	ld.ub	r0,r6[0x5]
8000a2fc:	00 00       	add	r0,r0
8000a2fe:	0d 84       	ld.ub	r4,r6[0x0]
8000a300:	00 00       	add	r0,r0
8000a302:	0b 44       	ld.w	r4,--r5

8000a304 <fat_write_entry_file>:
//! OUT:
//!   fs_g_sector    Updated
//! @endverbatim
//!
void  fat_write_entry_file( void )
{
8000a304:	eb cd 40 80 	pushm	r7,lr
8000a308:	1a 97       	mov	r7,sp
8000a30a:	20 1d       	sub	sp,4
   PTR_CACHE ptr_entry;

   fat_cache_mark_sector_as_dirty();
8000a30c:	f0 1f 00 32 	mcall	8000a3d4 <fat_write_entry_file+0xd0>
   ptr_entry = fat_get_ptr_entry();
8000a310:	f0 1f 00 32 	mcall	8000a3d8 <fat_write_entry_file+0xd4>
8000a314:	18 98       	mov	r8,r12
8000a316:	ef 48 ff fc 	st.w	r7[-4],r8
      if( 0 == fs_g_nav_entry.u32_size )
         fs_g_nav_entry.u32_cluster = 0;
   }

   //! Write the Attribute
   ptr_entry+= 11;
8000a31a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a31e:	2f 58       	sub	r8,-11
8000a320:	ef 48 ff fc 	st.w	r7[-4],r8
   ptr_entry[0] = fs_g_nav_entry.u8_attr;
8000a324:	4a e8       	lddpc	r8,8000a3dc <fat_write_entry_file+0xd8>
8000a326:	11 a8       	ld.ub	r8,r8[0x2]
8000a328:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000a32c:	b2 88       	st.b	r9[0x0],r8

   // Write the first cluster of file cluster list
   ptr_entry += (20-11);
8000a32e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a332:	2f 78       	sub	r8,-9
8000a334:	ef 48 ff fc 	st.w	r7[-4],r8
   ptr_entry[0] = LSB2(fs_g_nav_entry.u32_cluster);
8000a338:	4a 98       	lddpc	r8,8000a3dc <fat_write_entry_file+0xd8>
8000a33a:	2f c8       	sub	r8,-4
8000a33c:	2f f8       	sub	r8,-1
8000a33e:	11 88       	ld.ub	r8,r8[0x0]
8000a340:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000a344:	b2 88       	st.b	r9[0x0],r8
   ptr_entry[1] = LSB3(fs_g_nav_entry.u32_cluster);
8000a346:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a34a:	f0 c9 ff ff 	sub	r9,r8,-1
8000a34e:	4a 48       	lddpc	r8,8000a3dc <fat_write_entry_file+0xd8>
8000a350:	2f c8       	sub	r8,-4
8000a352:	11 88       	ld.ub	r8,r8[0x0]
8000a354:	b2 88       	st.b	r9[0x0],r8
   ptr_entry += (26-20);
8000a356:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a35a:	2f a8       	sub	r8,-6
8000a35c:	ef 48 ff fc 	st.w	r7[-4],r8
   ptr_entry[0] = LSB0(fs_g_nav_entry.u32_cluster);
8000a360:	49 f8       	lddpc	r8,8000a3dc <fat_write_entry_file+0xd8>
8000a362:	2f c8       	sub	r8,-4
8000a364:	2f d8       	sub	r8,-3
8000a366:	11 88       	ld.ub	r8,r8[0x0]
8000a368:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000a36c:	b2 88       	st.b	r9[0x0],r8
   ptr_entry[1] = LSB1(fs_g_nav_entry.u32_cluster);
8000a36e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a372:	f0 c9 ff ff 	sub	r9,r8,-1
8000a376:	49 a8       	lddpc	r8,8000a3dc <fat_write_entry_file+0xd8>
8000a378:	2f c8       	sub	r8,-4
8000a37a:	2f e8       	sub	r8,-2
8000a37c:	11 88       	ld.ub	r8,r8[0x0]
8000a37e:	b2 88       	st.b	r9[0x0],r8

   //! Write the size of file
   ptr_entry += (28-26);
8000a380:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a384:	2f e8       	sub	r8,-2
8000a386:	ef 48 ff fc 	st.w	r7[-4],r8
   ptr_entry[0] = LSB0(fs_g_nav_entry.u32_size);
8000a38a:	49 58       	lddpc	r8,8000a3dc <fat_write_entry_file+0xd8>
8000a38c:	2f 88       	sub	r8,-8
8000a38e:	2f d8       	sub	r8,-3
8000a390:	11 88       	ld.ub	r8,r8[0x0]
8000a392:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000a396:	b2 88       	st.b	r9[0x0],r8
   ptr_entry[1] = LSB1(fs_g_nav_entry.u32_size);
8000a398:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a39c:	f0 c9 ff ff 	sub	r9,r8,-1
8000a3a0:	48 f8       	lddpc	r8,8000a3dc <fat_write_entry_file+0xd8>
8000a3a2:	2f 88       	sub	r8,-8
8000a3a4:	2f e8       	sub	r8,-2
8000a3a6:	11 88       	ld.ub	r8,r8[0x0]
8000a3a8:	b2 88       	st.b	r9[0x0],r8
   ptr_entry[2] = LSB2(fs_g_nav_entry.u32_size);
8000a3aa:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a3ae:	f0 c9 ff fe 	sub	r9,r8,-2
8000a3b2:	48 b8       	lddpc	r8,8000a3dc <fat_write_entry_file+0xd8>
8000a3b4:	2f 88       	sub	r8,-8
8000a3b6:	2f f8       	sub	r8,-1
8000a3b8:	11 88       	ld.ub	r8,r8[0x0]
8000a3ba:	b2 88       	st.b	r9[0x0],r8
   ptr_entry[3] = LSB3(fs_g_nav_entry.u32_size);
8000a3bc:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a3c0:	f0 c9 ff fd 	sub	r9,r8,-3
8000a3c4:	48 68       	lddpc	r8,8000a3dc <fat_write_entry_file+0xd8>
8000a3c6:	2f 88       	sub	r8,-8
8000a3c8:	11 88       	ld.ub	r8,r8[0x0]
8000a3ca:	b2 88       	st.b	r9[0x0],r8
}
8000a3cc:	2f fd       	sub	sp,-4
8000a3ce:	e3 cd 80 80 	ldm	sp++,r7,pc
8000a3d2:	00 00       	add	r0,r0
8000a3d4:	80 00       	ld.sh	r0,r0[0x0]
8000a3d6:	a9 ac       	sbr	r12,0x8
8000a3d8:	80 00       	ld.sh	r0,r0[0x0]
8000a3da:	a8 94       	st.b	r4[0x1],r4
8000a3dc:	00 00       	add	r0,r0
8000a3de:	0b 44       	ld.w	r4,--r5

8000a3e0 <fat_entry_shortname>:
//!   fs_g_sector       The directory sector corresponding at the current position
//!   fs_g_nav_fast.u16_entry_pos_sel_file    Position in directory of the entry file (unit entry)
//! @endverbatim
//!
bool  fat_entry_shortname( FS_STRING sz_name , uint8_t u8_size_max , bool b_mode )
{
8000a3e0:	eb cd 40 80 	pushm	r7,lr
8000a3e4:	1a 97       	mov	r7,sp
8000a3e6:	20 6d       	sub	sp,24
8000a3e8:	ef 4c ff f0 	st.w	r7[-16],r12
8000a3ec:	16 99       	mov	r9,r11
8000a3ee:	14 98       	mov	r8,r10
8000a3f0:	ef 69 ff ec 	st.b	r7[-20],r9
8000a3f4:	ef 68 ff e8 	st.b	r7[-24],r8
   bool b_extension_nostart = true;
8000a3f8:	30 18       	mov	r8,1
8000a3fa:	ef 68 ff f4 	st.b	r7[-12],r8
   uint8_t u8_pos_name;
   uint8_t u8_entry_char, u8_szname_char;
   PTR_CACHE ptr_entry;
   uint8_t u8_pos_entry;

   fs_g_status = FS_ERR_NAME_INCORRECT;  // by default the name don't corresponding at filter name
8000a3fe:	4e e9       	lddpc	r9,8000a5b4 <fat_entry_shortname+0x1d4>
8000a400:	31 68       	mov	r8,22
8000a402:	b2 88       	st.b	r9[0x0],r8

   u8_pos_name = 0;
8000a404:	30 08       	mov	r8,0
8000a406:	ef 68 ff f5 	st.b	r7[-11],r8
   u8_pos_entry = 0;
8000a40a:	30 08       	mov	r8,0
8000a40c:	ef 68 ff ff 	st.b	r7[-1],r8
   ptr_entry = fat_get_ptr_entry();
8000a410:	f0 1f 00 6a 	mcall	8000a5b8 <fat_entry_shortname+0x1d8>
8000a414:	18 98       	mov	r8,r12
8000a416:	ef 48 ff f8 	st.w	r7[-8],r8

   // for each characters of short name
   while( 1 )
   {
      if( FS_SIZE_SFNAME == u8_pos_entry )
8000a41a:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000a41e:	30 b8       	mov	r8,11
8000a420:	f0 09 18 00 	cp.b	r9,r8
8000a424:	c0 51       	brne	8000a42e <fat_entry_shortname+0x4e>
      {
         u8_entry_char = 0;   // end of name
8000a426:	30 08       	mov	r8,0
8000a428:	ef 68 ff f6 	st.b	r7[-10],r8
8000a42c:	c3 88       	rjmp	8000a49c <fat_entry_shortname+0xbc>
      }
      else
      {
         u8_entry_char = ptr_entry[ u8_pos_entry ];
8000a42e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000a432:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000a436:	f2 08 00 08 	add	r8,r9,r8
8000a43a:	11 88       	ld.ub	r8,r8[0x0]
8000a43c:	ef 68 ff f6 	st.b	r7[-10],r8
         if( ((FS_SIZE_SFNAME_WITHOUT_EXT == u8_pos_entry) && b_extension_nostart)  // end of name and '.' character not written
8000a440:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000a444:	30 88       	mov	r8,8
8000a446:	f0 09 18 00 	cp.b	r9,r8
8000a44a:	c0 71       	brne	8000a458 <fat_entry_shortname+0x78>
8000a44c:	ef 39 ff f4 	ld.ub	r9,r7[-12]
8000a450:	30 08       	mov	r8,0
8000a452:	f0 09 18 00 	cp.b	r9,r8
8000a456:	c0 71       	brne	8000a464 <fat_entry_shortname+0x84>
8000a458:	ef 39 ff f6 	ld.ub	r9,r7[-10]
8000a45c:	32 08       	mov	r8,32
8000a45e:	f0 09 18 00 	cp.b	r9,r8
8000a462:	c1 d1       	brne	8000a49c <fat_entry_shortname+0xbc>
         ||  ( ' ' == u8_entry_char) )
         {
            // end of name or extension
            if( (FS_SIZE_SFNAME_WITHOUT_EXT >= u8_pos_entry)         // End of name without extension
8000a464:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000a468:	30 88       	mov	r8,8
8000a46a:	f0 09 18 00 	cp.b	r9,r8
8000a46e:	e0 8b 00 14 	brhi	8000a496 <fat_entry_shortname+0xb6>
            &&  (' ' != ptr_entry[ FS_SIZE_SFNAME_WITHOUT_EXT ]) )   // extension exists
8000a472:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a476:	2f 88       	sub	r8,-8
8000a478:	11 89       	ld.ub	r9,r8[0x0]
         u8_entry_char = ptr_entry[ u8_pos_entry ];
         if( ((FS_SIZE_SFNAME_WITHOUT_EXT == u8_pos_entry) && b_extension_nostart)  // end of name and '.' character not written
         ||  ( ' ' == u8_entry_char) )
         {
            // end of name or extension
            if( (FS_SIZE_SFNAME_WITHOUT_EXT >= u8_pos_entry)         // End of name without extension
8000a47a:	32 08       	mov	r8,32
8000a47c:	f0 09 18 00 	cp.b	r9,r8
8000a480:	c0 b0       	breq	8000a496 <fat_entry_shortname+0xb6>
            &&  (' ' != ptr_entry[ FS_SIZE_SFNAME_WITHOUT_EXT ]) )   // extension exists
            {
               // go to extension position
               b_extension_nostart = false;
8000a482:	30 08       	mov	r8,0
8000a484:	ef 68 ff f4 	st.b	r7[-12],r8
               u8_pos_entry = FS_SIZE_SFNAME_WITHOUT_EXT-1;
8000a488:	30 78       	mov	r8,7
8000a48a:	ef 68 ff ff 	st.b	r7[-1],r8
               u8_entry_char = '.';
8000a48e:	32 e8       	mov	r8,46
8000a490:	ef 68 ff f6 	st.b	r7[-10],r8
         u8_entry_char = ptr_entry[ u8_pos_entry ];
         if( ((FS_SIZE_SFNAME_WITHOUT_EXT == u8_pos_entry) && b_extension_nostart)  // end of name and '.' character not written
         ||  ( ' ' == u8_entry_char) )
         {
            // end of name or extension
            if( (FS_SIZE_SFNAME_WITHOUT_EXT >= u8_pos_entry)         // End of name without extension
8000a494:	c0 48       	rjmp	8000a49c <fat_entry_shortname+0xbc>
               u8_pos_entry = FS_SIZE_SFNAME_WITHOUT_EXT-1;
               u8_entry_char = '.';
            }
            else
            {
               u8_entry_char = 0;                                    // end of name
8000a496:	30 08       	mov	r8,0
8000a498:	ef 68 ff f6 	st.b	r7[-10],r8
            }
         }
      }

      if( FS_NAME_GET == b_mode )
8000a49c:	ef 39 ff e8 	ld.ub	r9,r7[-24]
8000a4a0:	30 08       	mov	r8,0
8000a4a2:	f0 09 18 00 	cp.b	r9,r8
8000a4a6:	c2 a0       	breq	8000a4fa <fat_entry_shortname+0x11a>
      {
         if( !g_b_string_length )
8000a4a8:	4c 58       	lddpc	r8,8000a5bc <fat_entry_shortname+0x1dc>
8000a4aa:	11 88       	ld.ub	r8,r8[0x0]
8000a4ac:	ec 18 00 01 	eorl	r8,0x1
8000a4b0:	5c 58       	castu.b	r8
8000a4b2:	c5 30       	breq	8000a558 <fat_entry_shortname+0x178>
         {
            if(u8_pos_name >= (u8_size_max-1))
8000a4b4:	ef 39 ff f5 	ld.ub	r9,r7[-11]
8000a4b8:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8000a4bc:	20 18       	sub	r8,1
8000a4be:	10 39       	cp.w	r9,r8
8000a4c0:	c0 45       	brlt	8000a4c8 <fat_entry_shortname+0xe8>
               u8_entry_char = 0;                                    // buffer full then force end of string
8000a4c2:	30 08       	mov	r8,0
8000a4c4:	ef 68 ff f6 	st.b	r7[-10],r8

            if( ('A'<=u8_entry_char) && (u8_entry_char<='Z'))
8000a4c8:	ef 39 ff f6 	ld.ub	r9,r7[-10]
8000a4cc:	34 08       	mov	r8,64
8000a4ce:	f0 09 18 00 	cp.b	r9,r8
8000a4d2:	e0 88 00 0e 	brls	8000a4ee <fat_entry_shortname+0x10e>
8000a4d6:	ef 39 ff f6 	ld.ub	r9,r7[-10]
8000a4da:	35 a8       	mov	r8,90
8000a4dc:	f0 09 18 00 	cp.b	r9,r8
8000a4e0:	e0 8b 00 07 	brhi	8000a4ee <fat_entry_shortname+0x10e>
               u8_entry_char += ('a'-'A');                           // display short name in down case
8000a4e4:	ef 38 ff f6 	ld.ub	r8,r7[-10]
8000a4e8:	2e 08       	sub	r8,-32
8000a4ea:	ef 68 ff f6 	st.b	r7[-10],r8

            if( Is_unicode )
            {
               ((FS_STR_UNICODE)sz_name)[0] = u8_entry_char;
            }else{
               sz_name[0] = u8_entry_char;
8000a4ee:	ee f9 ff f0 	ld.w	r9,r7[-16]
8000a4f2:	ef 38 ff f6 	ld.ub	r8,r7[-10]
8000a4f6:	b2 88       	st.b	r9[0x0],r8
8000a4f8:	c3 08       	rjmp	8000a558 <fat_entry_shortname+0x178>

         if( Is_unicode )
         {
            u8_szname_char = ((FS_STR_UNICODE)sz_name)[0];
         }else{
            u8_szname_char = sz_name[0];
8000a4fa:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000a4fe:	11 88       	ld.ub	r8,r8[0x0]
8000a500:	ef 68 ff f7 	st.b	r7[-9],r8
         }
         if ('*' == u8_szname_char)
8000a504:	ef 39 ff f7 	ld.ub	r9,r7[-9]
8000a508:	32 a8       	mov	r8,42
8000a50a:	f0 09 18 00 	cp.b	r9,r8
8000a50e:	c0 31       	brne	8000a514 <fat_entry_shortname+0x134>
         {  // end of filter name which authorize all next character
            return true;   //*** The name is correct ***
8000a510:	30 18       	mov	r8,1
8000a512:	c4 c8       	rjmp	8000a5aa <fat_entry_shortname+0x1ca>
         }

         if( (0 != u8_entry_char) || (('\\' != u8_szname_char) && ('/' != u8_szname_char)) )
8000a514:	ef 39 ff f6 	ld.ub	r9,r7[-10]
8000a518:	30 08       	mov	r8,0
8000a51a:	f0 09 18 00 	cp.b	r9,r8
8000a51e:	c0 d1       	brne	8000a538 <fat_entry_shortname+0x158>
8000a520:	ef 39 ff f7 	ld.ub	r9,r7[-9]
8000a524:	35 c8       	mov	r8,92
8000a526:	f0 09 18 00 	cp.b	r9,r8
8000a52a:	c1 70       	breq	8000a558 <fat_entry_shortname+0x178>
8000a52c:	ef 39 ff f7 	ld.ub	r9,r7[-9]
8000a530:	32 f8       	mov	r8,47
8000a532:	f0 09 18 00 	cp.b	r9,r8
8000a536:	c1 10       	breq	8000a558 <fat_entry_shortname+0x178>
         {
            if((u8_szname_char != u8_entry_char)
8000a538:	ef 39 ff f7 	ld.ub	r9,r7[-9]
8000a53c:	ef 38 ff f6 	ld.ub	r8,r7[-10]
8000a540:	f0 09 18 00 	cp.b	r9,r8
8000a544:	c0 a0       	breq	8000a558 <fat_entry_shortname+0x178>
            && (u8_szname_char != (u8_entry_char+('a'-'A'))) )  // no case sensitive
8000a546:	ef 39 ff f7 	ld.ub	r9,r7[-9]
8000a54a:	ef 38 ff f6 	ld.ub	r8,r7[-10]
8000a54e:	2e 08       	sub	r8,-32
            return true;   //*** The name is correct ***
         }

         if( (0 != u8_entry_char) || (('\\' != u8_szname_char) && ('/' != u8_szname_char)) )
         {
            if((u8_szname_char != u8_entry_char)
8000a550:	10 39       	cp.w	r9,r8
8000a552:	c0 30       	breq	8000a558 <fat_entry_shortname+0x178>
            && (u8_szname_char != (u8_entry_char+('a'-'A'))) )  // no case sensitive
               return false;  // short name not equal
8000a554:	30 08       	mov	r8,0
8000a556:	c2 a8       	rjmp	8000a5aa <fat_entry_shortname+0x1ca>
         }
      }

      // For each characters
      if (0 == u8_entry_char)
8000a558:	ef 39 ff f6 	ld.ub	r9,r7[-10]
8000a55c:	30 08       	mov	r8,0
8000a55e:	f0 09 18 00 	cp.b	r9,r8
8000a562:	c0 e1       	brne	8000a57e <fat_entry_shortname+0x19e>
      {
         if( g_b_string_length )
8000a564:	49 68       	lddpc	r8,8000a5bc <fat_entry_shortname+0x1dc>
8000a566:	11 88       	ld.ub	r8,r8[0x0]
8000a568:	58 08       	cp.w	r8,0
8000a56a:	c0 80       	breq	8000a57a <fat_entry_shortname+0x19a>
         {
            ((FS_STR_UNICODE)sz_name)[0] = u8_pos_name+1;      // Get length name
8000a56c:	ee f9 ff f0 	ld.w	r9,r7[-16]
8000a570:	ef 38 ff f5 	ld.ub	r8,r7[-11]
8000a574:	2f f8       	sub	r8,-1
8000a576:	5c 88       	casts.h	r8
8000a578:	b2 08       	st.h	r9[0x0],r8
         }
         return true;   // End of test correct or end of get name
8000a57a:	30 18       	mov	r8,1
8000a57c:	c1 78       	rjmp	8000a5aa <fat_entry_shortname+0x1ca>
      }
      if( !g_b_string_length )
8000a57e:	49 08       	lddpc	r8,8000a5bc <fat_entry_shortname+0x1dc>
8000a580:	11 88       	ld.ub	r8,r8[0x0]
8000a582:	ec 18 00 01 	eorl	r8,0x1
8000a586:	5c 58       	castu.b	r8
8000a588:	c0 60       	breq	8000a594 <fat_entry_shortname+0x1b4>
      {
         sz_name += (Is_unicode? 2 : 1 );
8000a58a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000a58e:	2f f8       	sub	r8,-1
8000a590:	ef 48 ff f0 	st.w	r7[-16],r8
      }
      u8_pos_name++;
8000a594:	ef 38 ff f5 	ld.ub	r8,r7[-11]
8000a598:	2f f8       	sub	r8,-1
8000a59a:	ef 68 ff f5 	st.b	r7[-11],r8
      u8_pos_entry++;
8000a59e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000a5a2:	2f f8       	sub	r8,-1
8000a5a4:	ef 68 ff ff 	st.b	r7[-1],r8
   }
8000a5a8:	c3 9b       	rjmp	8000a41a <fat_entry_shortname+0x3a>
}
8000a5aa:	10 9c       	mov	r12,r8
8000a5ac:	2f ad       	sub	sp,-24
8000a5ae:	e3 cd 80 80 	ldm	sp++,r7,pc
8000a5b2:	00 00       	add	r0,r0
8000a5b4:	00 00       	add	r0,r0
8000a5b6:	0d d4       	ld.ub	r4,r6[0x5]
8000a5b8:	80 00       	ld.sh	r0,r0[0x0]
8000a5ba:	a8 94       	st.b	r4[0x1],r4
8000a5bc:	00 00       	add	r0,r0
8000a5be:	0d d5       	ld.ub	r5,r6[0x5]

8000a5c0 <fat_entry_longname>:
//!   fs_g_sector       The directory sector corresponding at the current position
//!   fs_g_nav_fast.u16_entry_pos_sel_file    Position in directory of the entry file (unit entry)
//! @endverbatim
//!
bool  fat_entry_longname( FS_STRING sz_name , uint8_t u8_size_max , bool b_mode , bool b_match_case )
{
8000a5c0:	eb cd 40 80 	pushm	r7,lr
8000a5c4:	1a 97       	mov	r7,sp
8000a5c6:	20 7d       	sub	sp,28
8000a5c8:	ef 4c ff f0 	st.w	r7[-16],r12
8000a5cc:	12 98       	mov	r8,r9
8000a5ce:	16 99       	mov	r9,r11
8000a5d0:	ef 69 ff ec 	st.b	r7[-20],r9
8000a5d4:	14 99       	mov	r9,r10
8000a5d6:	ef 69 ff e8 	st.b	r7[-24],r9
8000a5da:	ef 68 ff e4 	st.b	r7[-28],r8
   uint8_t u8_pos_name;
   PTR_CACHE ptr_entry;
   uint16_t u16_unicode_entry;
   uint16_t u16_unicode_szname;

   ptr_entry = fat_get_ptr_entry();
8000a5de:	f0 1f 00 99 	mcall	8000a840 <fat_entry_longname+0x280>
8000a5e2:	18 98       	mov	r8,r12
8000a5e4:	ef 48 ff f8 	st.w	r7[-8],r8

   if( (FS_ENTRY_END == *ptr_entry )            // end of directory
8000a5e8:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a5ec:	11 88       	ld.ub	r8,r8[0x0]
8000a5ee:	58 08       	cp.w	r8,0
8000a5f0:	c1 00       	breq	8000a610 <fat_entry_longname+0x50>
   ||  (FS_ENTRY_DEL == *ptr_entry )            // entry deleted
8000a5f2:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a5f6:	11 89       	ld.ub	r9,r8[0x0]
   uint16_t u16_unicode_entry;
   uint16_t u16_unicode_szname;

   ptr_entry = fat_get_ptr_entry();

   if( (FS_ENTRY_END == *ptr_entry )            // end of directory
8000a5f8:	3e 58       	mov	r8,-27
8000a5fa:	f0 09 18 00 	cp.b	r9,r8
8000a5fe:	c0 90       	breq	8000a610 <fat_entry_longname+0x50>
   ||  (FS_ENTRY_DEL == *ptr_entry )            // entry deleted
   ||  (FS_ATTR_LFN_ENTRY != ptr_entry[11]) )   // no long name
8000a600:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a604:	2f 58       	sub	r8,-11
8000a606:	11 89       	ld.ub	r9,r8[0x0]
   uint16_t u16_unicode_entry;
   uint16_t u16_unicode_szname;

   ptr_entry = fat_get_ptr_entry();

   if( (FS_ENTRY_END == *ptr_entry )            // end of directory
8000a608:	30 f8       	mov	r8,15
8000a60a:	f0 09 18 00 	cp.b	r9,r8
8000a60e:	c0 70       	breq	8000a61c <fat_entry_longname+0x5c>
   ||  (FS_ENTRY_DEL == *ptr_entry )            // entry deleted
   ||  (FS_ATTR_LFN_ENTRY != ptr_entry[11]) )   // no long name
   {
      fs_g_status = FS_ERR_ENTRY_BAD;
8000a610:	fe f9 02 34 	ld.w	r9,pc[564]
8000a614:	30 b8       	mov	r8,11
8000a616:	b2 88       	st.b	r9[0x0],r8
      return false;
8000a618:	30 08       	mov	r8,0
8000a61a:	c0 e9       	rjmp	8000a836 <fat_entry_longname+0x276>
   }

   if( g_b_string_length )
8000a61c:	fe f8 02 2c 	ld.w	r8,pc[556]
8000a620:	11 88       	ld.ub	r8,r8[0x0]
8000a622:	58 08       	cp.w	r8,0
8000a624:	c0 d0       	breq	8000a63e <fat_entry_longname+0x7e>
   {
      if ( 0 == (FS_ENTRY_LFN_LAST & *ptr_entry))
8000a626:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a62a:	11 88       	ld.ub	r8,r8[0x0]
8000a62c:	e2 18 00 40 	andl	r8,0x40,COH
8000a630:	c0 71       	brne	8000a63e <fat_entry_longname+0x7e>
      {
         // no necessary -> ((FS_STR_UNICODE)sz_name)[0] = FS_SIZE_LFN_ENTRY;
         fs_g_status = FS_NO_LAST_LFN_ENTRY;
8000a632:	fe f9 02 12 	ld.w	r9,pc[530]
8000a636:	31 08       	mov	r8,16
8000a638:	b2 88       	st.b	r9[0x0],r8
         return false;                          // Other entry long name
8000a63a:	30 08       	mov	r8,0
8000a63c:	cf d8       	rjmp	8000a836 <fat_entry_longname+0x276>
      }
   }

   ptr_entry++;                                 // The long name start at offset 1 of the entry file
8000a63e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a642:	2f f8       	sub	r8,-1
8000a644:	ef 48 ff f8 	st.w	r7[-8],r8

   u8_pos_name=0;
8000a648:	30 08       	mov	r8,0
8000a64a:	ef 68 ff f7 	st.b	r7[-9],r8
   while( 1 )
   {
      LSB(u16_unicode_entry) = ptr_entry[0];
8000a64e:	ee c8 00 0c 	sub	r8,r7,12
8000a652:	f0 c9 ff ff 	sub	r9,r8,-1
8000a656:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a65a:	11 88       	ld.ub	r8,r8[0x0]
8000a65c:	b2 88       	st.b	r9[0x0],r8
      MSB(u16_unicode_entry) = ptr_entry[1];
8000a65e:	ee c9 00 0c 	sub	r9,r7,12
8000a662:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a666:	2f f8       	sub	r8,-1
8000a668:	11 88       	ld.ub	r8,r8[0x0]
8000a66a:	b2 88       	st.b	r9[0x0],r8
      if( FS_NAME_GET == b_mode )
8000a66c:	ef 39 ff e8 	ld.ub	r9,r7[-24]
8000a670:	30 08       	mov	r8,0
8000a672:	f0 09 18 00 	cp.b	r9,r8
8000a676:	c1 b0       	breq	8000a6ac <fat_entry_longname+0xec>
      {
         if( !g_b_string_length )
8000a678:	4f 48       	lddpc	r8,8000a848 <fat_entry_longname+0x288>
8000a67a:	11 88       	ld.ub	r8,r8[0x0]
8000a67c:	ec 18 00 01 	eorl	r8,0x1
8000a680:	5c 58       	castu.b	r8
8000a682:	c5 a0       	breq	8000a736 <fat_entry_longname+0x176>
         {
            // Check the end of buffer
            if( u8_pos_name>=(u8_size_max-1) )
8000a684:	ef 39 ff f7 	ld.ub	r9,r7[-9]
8000a688:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8000a68c:	20 18       	sub	r8,1
8000a68e:	10 39       	cp.w	r9,r8
8000a690:	c0 75       	brlt	8000a69e <fat_entry_longname+0xde>
               // Write end of string
               if( Is_unicode )
               {
                  ((FS_STR_UNICODE)sz_name)[0] = 0;
               }else{
                  sz_name[0] = 0;
8000a692:	ee f9 ff f0 	ld.w	r9,r7[-16]
8000a696:	30 08       	mov	r8,0
8000a698:	b2 88       	st.b	r9[0x0],r8
               }
               return true;                     // the buffer is full
8000a69a:	30 18       	mov	r8,1
8000a69c:	cc d8       	rjmp	8000a836 <fat_entry_longname+0x276>
            // Read and store the long name
            if( Is_unicode )
            {
               ((FS_STR_UNICODE)sz_name)[0] = u16_unicode_entry;
            }else{
               sz_name[0] = (uint8_t)u16_unicode_entry;
8000a69e:	ef 08 ff f4 	ld.sh	r8,r7[-12]
8000a6a2:	5c 58       	castu.b	r8
8000a6a4:	ee f9 ff f0 	ld.w	r9,r7[-16]
8000a6a8:	b2 88       	st.b	r9[0x0],r8
8000a6aa:	c4 68       	rjmp	8000a736 <fat_entry_longname+0x176>
      {
         if( Is_unicode )
         {
            u16_unicode_szname = ((FS_STR_UNICODE)sz_name)[0];
         }else{
            u16_unicode_szname = sz_name[0];
8000a6ac:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000a6b0:	11 88       	ld.ub	r8,r8[0x0]
8000a6b2:	ef 58 ff fe 	st.h	r7[-2],r8
         }
         // Check the name
         if( '*' == u16_unicode_szname )
8000a6b6:	ef 09 ff fe 	ld.sh	r9,r7[-2]
8000a6ba:	32 a8       	mov	r8,42
8000a6bc:	f0 09 19 00 	cp.h	r9,r8
8000a6c0:	c0 31       	brne	8000a6c6 <fat_entry_longname+0x106>
         {  // end of filter name which authorize all next character
            return true;   //*** The name is correct ***
8000a6c2:	30 18       	mov	r8,1
8000a6c4:	cb 98       	rjmp	8000a836 <fat_entry_longname+0x276>
         }

         if( ((0 != u16_unicode_entry ) || (( '\\' != u16_unicode_szname) && ( '/' != u16_unicode_szname)) )
8000a6c6:	ef 08 ff f4 	ld.sh	r8,r7[-12]
8000a6ca:	58 08       	cp.w	r8,0
8000a6cc:	c0 d1       	brne	8000a6e6 <fat_entry_longname+0x126>
8000a6ce:	ef 09 ff fe 	ld.sh	r9,r7[-2]
8000a6d2:	35 c8       	mov	r8,92
8000a6d4:	f0 09 19 00 	cp.h	r9,r8
8000a6d8:	c2 f0       	breq	8000a736 <fat_entry_longname+0x176>
8000a6da:	ef 09 ff fe 	ld.sh	r9,r7[-2]
8000a6de:	32 f8       	mov	r8,47
8000a6e0:	f0 09 19 00 	cp.h	r9,r8
8000a6e4:	c2 90       	breq	8000a736 <fat_entry_longname+0x176>
         &&  ((u16_unicode_szname != (u16_unicode_entry+('a'-'A'))) || b_match_case)
8000a6e6:	ef 19 ff fe 	ld.uh	r9,r7[-2]
8000a6ea:	ef 08 ff f4 	ld.sh	r8,r7[-12]
8000a6ee:	5c 78       	castu.h	r8
8000a6f0:	2e 08       	sub	r8,-32
         if( '*' == u16_unicode_szname )
         {  // end of filter name which authorize all next character
            return true;   //*** The name is correct ***
         }

         if( ((0 != u16_unicode_entry ) || (( '\\' != u16_unicode_szname) && ( '/' != u16_unicode_szname)) )
8000a6f2:	10 39       	cp.w	r9,r8
8000a6f4:	c0 71       	brne	8000a702 <fat_entry_longname+0x142>
8000a6f6:	ef 39 ff e4 	ld.ub	r9,r7[-28]
8000a6fa:	30 08       	mov	r8,0
8000a6fc:	f0 09 18 00 	cp.b	r9,r8
8000a700:	c1 b0       	breq	8000a736 <fat_entry_longname+0x176>
         &&  ((u16_unicode_szname != (u16_unicode_entry+('a'-'A'))) || b_match_case)
         &&  ((u16_unicode_szname != (u16_unicode_entry-('a'-'A'))) || b_match_case)
8000a702:	ef 19 ff fe 	ld.uh	r9,r7[-2]
8000a706:	ef 08 ff f4 	ld.sh	r8,r7[-12]
8000a70a:	5c 78       	castu.h	r8
8000a70c:	22 08       	sub	r8,32
         if( '*' == u16_unicode_szname )
         {  // end of filter name which authorize all next character
            return true;   //*** The name is correct ***
         }

         if( ((0 != u16_unicode_entry ) || (( '\\' != u16_unicode_szname) && ( '/' != u16_unicode_szname)) )
8000a70e:	10 39       	cp.w	r9,r8
8000a710:	c0 71       	brne	8000a71e <fat_entry_longname+0x15e>
8000a712:	ef 39 ff e4 	ld.ub	r9,r7[-28]
8000a716:	30 08       	mov	r8,0
8000a718:	f0 09 18 00 	cp.b	r9,r8
8000a71c:	c0 d0       	breq	8000a736 <fat_entry_longname+0x176>
         &&  ((u16_unicode_szname != (u16_unicode_entry+('a'-'A'))) || b_match_case)
         &&  ((u16_unicode_szname != (u16_unicode_entry-('a'-'A'))) || b_match_case)
         &&  (u16_unicode_szname != u16_unicode_entry) )
8000a71e:	ef 08 ff f4 	ld.sh	r8,r7[-12]
         if( '*' == u16_unicode_szname )
         {  // end of filter name which authorize all next character
            return true;   //*** The name is correct ***
         }

         if( ((0 != u16_unicode_entry ) || (( '\\' != u16_unicode_szname) && ( '/' != u16_unicode_szname)) )
8000a722:	ef 09 ff fe 	ld.sh	r9,r7[-2]
8000a726:	f0 09 19 00 	cp.h	r9,r8
8000a72a:	c0 60       	breq	8000a736 <fat_entry_longname+0x176>
         &&  ((u16_unicode_szname != (u16_unicode_entry+('a'-'A'))) || b_match_case)
         &&  ((u16_unicode_szname != (u16_unicode_entry-('a'-'A'))) || b_match_case)
         &&  (u16_unicode_szname != u16_unicode_entry) )
         {
           fs_g_status = FS_ERR_NAME_INCORRECT; //  The name don't corresponding at filter name
8000a72c:	4c 69       	lddpc	r9,8000a844 <fat_entry_longname+0x284>
8000a72e:	31 68       	mov	r8,22
8000a730:	b2 88       	st.b	r9[0x0],r8
           return false;
8000a732:	30 08       	mov	r8,0
8000a734:	c8 18       	rjmp	8000a836 <fat_entry_longname+0x276>
         }
      }

      if( 0 == u16_unicode_entry)
8000a736:	ef 08 ff f4 	ld.sh	r8,r7[-12]
8000a73a:	58 08       	cp.w	r8,0
8000a73c:	c0 e1       	brne	8000a758 <fat_entry_longname+0x198>
      {
         if( g_b_string_length )
8000a73e:	4c 38       	lddpc	r8,8000a848 <fat_entry_longname+0x288>
8000a740:	11 88       	ld.ub	r8,r8[0x0]
8000a742:	58 08       	cp.w	r8,0
8000a744:	c0 80       	breq	8000a754 <fat_entry_longname+0x194>
         {
            ((FS_STR_UNICODE)sz_name)[0] = u8_pos_name+1;
8000a746:	ee f9 ff f0 	ld.w	r9,r7[-16]
8000a74a:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000a74e:	2f f8       	sub	r8,-1
8000a750:	5c 88       	casts.h	r8
8000a752:	b2 08       	st.h	r9[0x0],r8
         }
         return true;                           // Last long name entry
8000a754:	30 18       	mov	r8,1
8000a756:	c7 08       	rjmp	8000a836 <fat_entry_longname+0x276>
      }
      if( 4 == u8_pos_name )
8000a758:	ef 39 ff f7 	ld.ub	r9,r7[-9]
8000a75c:	30 48       	mov	r8,4
8000a75e:	f0 09 18 00 	cp.b	r9,r8
8000a762:	c0 61       	brne	8000a76e <fat_entry_longname+0x1ae>
         ptr_entry += 3;                        // Go to second character
8000a764:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a768:	2f d8       	sub	r8,-3
8000a76a:	ef 48 ff f8 	st.w	r7[-8],r8

      if( 10 == u8_pos_name )
8000a76e:	ef 39 ff f7 	ld.ub	r9,r7[-9]
8000a772:	30 a8       	mov	r8,10
8000a774:	f0 09 18 00 	cp.b	r9,r8
8000a778:	c0 61       	brne	8000a784 <fat_entry_longname+0x1c4>
         ptr_entry += 2;                        // Go to third character
8000a77a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a77e:	2f e8       	sub	r8,-2
8000a780:	ef 48 ff f8 	st.w	r7[-8],r8

      if( 12 == u8_pos_name )
8000a784:	ef 39 ff f7 	ld.ub	r9,r7[-9]
8000a788:	30 c8       	mov	r8,12
8000a78a:	f0 09 18 00 	cp.b	r9,r8
8000a78e:	c3 e1       	brne	8000a80a <fat_entry_longname+0x24a>
      {  // End of entry long name
         ptr_entry -= (FS_SIZE_FILE_ENTRY-2);   // Go to the first byte of the file entry
8000a790:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a794:	21 e8       	sub	r8,30
8000a796:	ef 48 ff f8 	st.w	r7[-8],r8
         if ( 0 == (FS_ENTRY_LFN_LAST & ptr_entry[0]))
8000a79a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a79e:	11 88       	ld.ub	r8,r8[0x0]
8000a7a0:	e2 18 00 40 	andl	r8,0x40,COH
8000a7a4:	c0 61       	brne	8000a7b0 <fat_entry_longname+0x1f0>
         {
            fs_g_status = FS_NO_LAST_LFN_ENTRY;
8000a7a6:	4a 89       	lddpc	r9,8000a844 <fat_entry_longname+0x284>
8000a7a8:	31 08       	mov	r8,16
8000a7aa:	b2 88       	st.b	r9[0x0],r8
            return false;                       // Other long name entry is present
8000a7ac:	30 08       	mov	r8,0
8000a7ae:	c4 48       	rjmp	8000a836 <fat_entry_longname+0x276>
         }
         else
         {  // It is the last long name entry
            // then it is the end of name
            if( (FS_NAME_GET == b_mode) && g_b_string_length )
8000a7b0:	ef 39 ff e8 	ld.ub	r9,r7[-24]
8000a7b4:	30 08       	mov	r8,0
8000a7b6:	f0 09 18 00 	cp.b	r9,r8
8000a7ba:	c0 b0       	breq	8000a7d0 <fat_entry_longname+0x210>
8000a7bc:	4a 38       	lddpc	r8,8000a848 <fat_entry_longname+0x288>
8000a7be:	11 88       	ld.ub	r8,r8[0x0]
8000a7c0:	58 08       	cp.w	r8,0
8000a7c2:	c0 70       	breq	8000a7d0 <fat_entry_longname+0x210>
            {
               ((FS_STR_UNICODE)sz_name)[0] = 14;
8000a7c4:	ee f9 ff f0 	ld.w	r9,r7[-16]
8000a7c8:	30 e8       	mov	r8,14
8000a7ca:	b2 08       	st.h	r9[0x0],r8
               return true;
8000a7cc:	30 18       	mov	r8,1
8000a7ce:	c3 48       	rjmp	8000a836 <fat_entry_longname+0x276>
            }
            sz_name += (Is_unicode? 2 : 1 );
8000a7d0:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000a7d4:	2f f8       	sub	r8,-1
8000a7d6:	ef 48 ff f0 	st.w	r7[-16],r8
            if( FS_NAME_GET == b_mode )
8000a7da:	ef 39 ff e8 	ld.ub	r9,r7[-24]
8000a7de:	30 08       	mov	r8,0
8000a7e0:	f0 09 18 00 	cp.b	r9,r8
8000a7e4:	c0 70       	breq	8000a7f2 <fat_entry_longname+0x232>
               // Write end of string UNICODE
               if( Is_unicode )
               {
                  ((FS_STR_UNICODE)sz_name)[0] = 0;
               }else{
                  sz_name[0] = 0;
8000a7e6:	ee f9 ff f0 	ld.w	r9,r7[-16]
8000a7ea:	30 08       	mov	r8,0
8000a7ec:	b2 88       	st.b	r9[0x0],r8
               }
               return true;
8000a7ee:	30 18       	mov	r8,1
8000a7f0:	c2 38       	rjmp	8000a836 <fat_entry_longname+0x276>
               // if it is the end of filter
               if( Is_unicode )
               {
                  u16_unicode_szname = ((FS_STR_UNICODE)sz_name)[0];
               }else{
                  u16_unicode_szname = sz_name[0];
8000a7f2:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000a7f6:	11 88       	ld.ub	r8,r8[0x0]
8000a7f8:	ef 58 ff fe 	st.h	r7[-2],r8
               }
               return fat_check_eof_name(u16_unicode_szname);
8000a7fc:	ef 18 ff fe 	ld.uh	r8,r7[-2]
8000a800:	10 9c       	mov	r12,r8
8000a802:	f0 1f 00 13 	mcall	8000a84c <fat_entry_longname+0x28c>
8000a806:	18 98       	mov	r8,r12
8000a808:	c1 78       	rjmp	8000a836 <fat_entry_longname+0x276>
            }
         }
      }

      if( !g_b_string_length )
8000a80a:	49 08       	lddpc	r8,8000a848 <fat_entry_longname+0x288>
8000a80c:	11 88       	ld.ub	r8,r8[0x0]
8000a80e:	ec 18 00 01 	eorl	r8,0x1
8000a812:	5c 58       	castu.b	r8
8000a814:	c0 60       	breq	8000a820 <fat_entry_longname+0x260>
      {
         sz_name += (Is_unicode? 2 : 1 );
8000a816:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000a81a:	2f f8       	sub	r8,-1
8000a81c:	ef 48 ff f0 	st.w	r7[-16],r8
      }
      u8_pos_name++;
8000a820:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000a824:	2f f8       	sub	r8,-1
8000a826:	ef 68 ff f7 	st.b	r7[-9],r8
      ptr_entry+=2;
8000a82a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a82e:	2f e8       	sub	r8,-2
8000a830:	ef 48 ff f8 	st.w	r7[-8],r8
   }
8000a834:	c0 db       	rjmp	8000a64e <fat_entry_longname+0x8e>
}
8000a836:	10 9c       	mov	r12,r8
8000a838:	2f 9d       	sub	sp,-28
8000a83a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000a83e:	00 00       	add	r0,r0
8000a840:	80 00       	ld.sh	r0,r0[0x0]
8000a842:	a8 94       	st.b	r4[0x1],r4
8000a844:	00 00       	add	r0,r0
8000a846:	0d d4       	ld.ub	r4,r6[0x5]
8000a848:	00 00       	add	r0,r0
8000a84a:	0d d5       	ld.ub	r5,r6[0x5]
8000a84c:	80 00       	ld.sh	r0,r0[0x0]
8000a84e:	a8 50       	st.h	r4[0xa],r0

8000a850 <fat_check_eof_name>:
//!
//! @return    true, it is a character to signal a end of name (0,'\\','/')
//! @return    false, otherwise
//!
bool  fat_check_eof_name( uint16_t character )
{
8000a850:	eb cd 40 80 	pushm	r7,lr
8000a854:	1a 97       	mov	r7,sp
8000a856:	20 1d       	sub	sp,4
8000a858:	18 98       	mov	r8,r12
8000a85a:	ef 58 ff fc 	st.h	r7[-4],r8
   return (('\0'==character)||('\\'==character)||('/'==character));
8000a85e:	ef 09 ff fc 	ld.sh	r9,r7[-4]
8000a862:	30 08       	mov	r8,0
8000a864:	f0 09 19 00 	cp.h	r9,r8
8000a868:	c0 d0       	breq	8000a882 <fat_check_eof_name+0x32>
8000a86a:	ef 09 ff fc 	ld.sh	r9,r7[-4]
8000a86e:	35 c8       	mov	r8,92
8000a870:	f0 09 19 00 	cp.h	r9,r8
8000a874:	c0 70       	breq	8000a882 <fat_check_eof_name+0x32>
8000a876:	ef 09 ff fc 	ld.sh	r9,r7[-4]
8000a87a:	32 f8       	mov	r8,47
8000a87c:	f0 09 19 00 	cp.h	r9,r8
8000a880:	c0 31       	brne	8000a886 <fat_check_eof_name+0x36>
8000a882:	30 18       	mov	r8,1
8000a884:	c0 28       	rjmp	8000a888 <fat_check_eof_name+0x38>
8000a886:	30 08       	mov	r8,0
8000a888:	5c 58       	castu.b	r8
}
8000a88a:	10 9c       	mov	r12,r8
8000a88c:	2f fd       	sub	sp,-4
8000a88e:	e3 cd 80 80 	ldm	sp++,r7,pc
8000a892:	d7 03       	nop

8000a894 <fat_get_ptr_entry>:
//! This function returns a cache pointer on the current entry
//!
//! @return a pointer on the internal cache
//!
PTR_CACHE fat_get_ptr_entry( void )
{
8000a894:	eb cd 40 80 	pushm	r7,lr
8000a898:	1a 97       	mov	r7,sp
   return &fs_g_sector[(fs_g_nav_fast.u16_entry_pos_sel_file * FS_SIZE_FILE_ENTRY) & FS_512B_MASK];
8000a89a:	48 78       	lddpc	r8,8000a8b4 <fat_get_ptr_entry+0x20>
8000a89c:	90 18       	ld.sh	r8,r8[0x2]
8000a89e:	5c 78       	castu.h	r8
8000a8a0:	a5 78       	lsl	r8,0x5
8000a8a2:	f3 d8 c0 09 	bfextu	r9,r8,0x0,0x9
8000a8a6:	48 58       	lddpc	r8,8000a8b8 <fat_get_ptr_entry+0x24>
8000a8a8:	f2 08 00 08 	add	r8,r9,r8
}
8000a8ac:	10 9c       	mov	r12,r8
8000a8ae:	e3 cd 80 80 	ldm	sp++,r7,pc
8000a8b2:	00 00       	add	r0,r0
8000a8b4:	00 00       	add	r0,r0
8000a8b6:	0d d0       	ld.ub	r0,r6[0x5]
8000a8b8:	00 00       	add	r0,r0
8000a8ba:	0b 84       	ld.ub	r4,r5[0x0]

8000a8bc <fat_cache_read_sector>:
//!   fs_g_nav.u8_lun      drive number to read
//!   fs_gu32_addrsector   address to read (unit sector)
//! @endverbatim
//!
bool  fat_cache_read_sector( bool b_load )
{
8000a8bc:	eb cd 40 80 	pushm	r7,lr
8000a8c0:	1a 97       	mov	r7,sp
8000a8c2:	20 1d       	sub	sp,4
8000a8c4:	18 98       	mov	r8,r12
8000a8c6:	ef 68 ff fc 	st.b	r7[-4],r8
   // Check if the sector asked is the same in cache
   if( (fs_g_sectorcache.u8_lun     == fs_g_nav.u8_lun )
8000a8ca:	4a 08       	lddpc	r8,8000a948 <fat_cache_read_sector+0x8c>
8000a8cc:	11 89       	ld.ub	r9,r8[0x0]
8000a8ce:	4a 08       	lddpc	r8,8000a94c <fat_cache_read_sector+0x90>
8000a8d0:	11 88       	ld.ub	r8,r8[0x0]
8000a8d2:	f0 09 18 00 	cp.b	r9,r8
8000a8d6:	c0 91       	brne	8000a8e8 <fat_cache_read_sector+0x2c>
   &&  (fs_g_sectorcache.u32_addr   == fs_gu32_addrsector ) )
8000a8d8:	49 c8       	lddpc	r8,8000a948 <fat_cache_read_sector+0x8c>
8000a8da:	70 19       	ld.w	r9,r8[0x4]
8000a8dc:	49 d8       	lddpc	r8,8000a950 <fat_cache_read_sector+0x94>
8000a8de:	70 08       	ld.w	r8,r8[0x0]
//! @endverbatim
//!
bool  fat_cache_read_sector( bool b_load )
{
   // Check if the sector asked is the same in cache
   if( (fs_g_sectorcache.u8_lun     == fs_g_nav.u8_lun )
8000a8e0:	10 39       	cp.w	r9,r8
8000a8e2:	c0 31       	brne	8000a8e8 <fat_cache_read_sector+0x2c>
   &&  (fs_g_sectorcache.u32_addr   == fs_gu32_addrsector ) )
   {
      return true;
8000a8e4:	30 18       	mov	r8,1
8000a8e6:	c2 c8       	rjmp	8000a93e <fat_cache_read_sector+0x82>
   }

   // Write previous cache before fill cache with a new sector
   if( !fat_cache_flush())
8000a8e8:	f0 1f 00 1b 	mcall	8000a954 <fat_cache_read_sector+0x98>
8000a8ec:	18 98       	mov	r8,r12
8000a8ee:	ec 18 00 01 	eorl	r8,0x1
8000a8f2:	5c 58       	castu.b	r8
8000a8f4:	c0 30       	breq	8000a8fa <fat_cache_read_sector+0x3e>
      return false;
8000a8f6:	30 08       	mov	r8,0
8000a8f8:	c2 38       	rjmp	8000a93e <fat_cache_read_sector+0x82>

   // Delete informations about the caches
   fat_cache_reset();
8000a8fa:	f0 1f 00 18 	mcall	8000a958 <fat_cache_read_sector+0x9c>

   // Init sector cache
   fs_g_sectorcache.u32_addr = fs_gu32_addrsector;
8000a8fe:	49 58       	lddpc	r8,8000a950 <fat_cache_read_sector+0x94>
8000a900:	70 09       	ld.w	r9,r8[0x0]
8000a902:	49 28       	lddpc	r8,8000a948 <fat_cache_read_sector+0x8c>
8000a904:	91 19       	st.w	r8[0x4],r9
   if( b_load )
8000a906:	ef 39 ff fc 	ld.ub	r9,r7[-4]
8000a90a:	30 08       	mov	r8,0
8000a90c:	f0 09 18 00 	cp.b	r9,r8
8000a910:	c1 20       	breq	8000a934 <fat_cache_read_sector+0x78>
   {
      // Load the sector from memory
      if( CTRL_GOOD != memory_2_ram( fs_g_nav.u8_lun  , fs_g_sectorcache.u32_addr, fs_g_sector))
8000a912:	48 e8       	lddpc	r8,8000a948 <fat_cache_read_sector+0x8c>
8000a914:	70 19       	ld.w	r9,r8[0x4]
8000a916:	48 e8       	lddpc	r8,8000a94c <fat_cache_read_sector+0x90>
8000a918:	11 88       	ld.ub	r8,r8[0x0]
8000a91a:	49 1a       	lddpc	r10,8000a95c <fat_cache_read_sector+0xa0>
8000a91c:	12 9b       	mov	r11,r9
8000a91e:	10 9c       	mov	r12,r8
8000a920:	f0 1f 00 10 	mcall	8000a960 <fat_cache_read_sector+0xa4>
8000a924:	18 98       	mov	r8,r12
8000a926:	58 08       	cp.w	r8,0
8000a928:	c0 60       	breq	8000a934 <fat_cache_read_sector+0x78>
      {
         fs_g_status = FS_ERR_HW;
8000a92a:	48 f9       	lddpc	r9,8000a964 <fat_cache_read_sector+0xa8>
8000a92c:	30 18       	mov	r8,1
8000a92e:	b2 88       	st.b	r9[0x0],r8
         return false;
8000a930:	30 08       	mov	r8,0
8000a932:	c0 68       	rjmp	8000a93e <fat_cache_read_sector+0x82>
      }
   }
   // Valid sector cache
   fs_g_sectorcache.u8_lun = fs_g_nav.u8_lun;
8000a934:	48 68       	lddpc	r8,8000a94c <fat_cache_read_sector+0x90>
8000a936:	11 88       	ld.ub	r8,r8[0x0]
8000a938:	48 49       	lddpc	r9,8000a948 <fat_cache_read_sector+0x8c>
8000a93a:	b2 88       	st.b	r9[0x0],r8
   return true;
8000a93c:	30 18       	mov	r8,1
}
8000a93e:	10 9c       	mov	r12,r8
8000a940:	2f fd       	sub	sp,-4
8000a942:	e3 cd 80 80 	ldm	sp++,r7,pc
8000a946:	00 00       	add	r0,r0
8000a948:	00 00       	add	r0,r0
8000a94a:	0e 0c       	add	r12,r7
8000a94c:	00 00       	add	r0,r0
8000a94e:	0d 84       	ld.ub	r4,r6[0x0]
8000a950:	00 00       	add	r0,r0
8000a952:	0b 40       	ld.w	r0,--r5
8000a954:	80 00       	ld.sh	r0,r0[0x0]
8000a956:	a9 c4       	cbr	r4,0x8
8000a958:	80 00       	ld.sh	r0,r0[0x0]
8000a95a:	a9 68       	lsl	r8,0x8
8000a95c:	00 00       	add	r0,r0
8000a95e:	0b 84       	ld.ub	r4,r5[0x0]
8000a960:	80 00       	ld.sh	r0,r0[0x0]
8000a962:	ad 18       	ld.d	r8,--r6
8000a964:	00 00       	add	r0,r0
8000a966:	0d d4       	ld.ub	r4,r6[0x5]

8000a968 <fat_cache_reset>:


//! This function resets the sector cache
//!
void  fat_cache_reset( void )
{
8000a968:	eb cd 40 80 	pushm	r7,lr
8000a96c:	1a 97       	mov	r7,sp
   fs_g_sectorcache.u8_lun                = FS_BUF_SECTOR_EMPTY;
8000a96e:	48 79       	lddpc	r9,8000a988 <fat_cache_reset+0x20>
8000a970:	3f f8       	mov	r8,-1
8000a972:	b2 88       	st.b	r9[0x0],r8
   fs_g_sectorcache.u8_dirty              = false;
8000a974:	48 59       	lddpc	r9,8000a988 <fat_cache_reset+0x20>
8000a976:	30 08       	mov	r8,0
8000a978:	f3 68 00 08 	st.b	r9[8],r8
   fs_g_sectorcache.u32_clusterlist_start = 0xFFFFFFFF;
8000a97c:	48 38       	lddpc	r8,8000a988 <fat_cache_reset+0x20>
8000a97e:	3f f9       	mov	r9,-1
8000a980:	91 39       	st.w	r8[0xc],r9
}
8000a982:	e3 cd 80 80 	ldm	sp++,r7,pc
8000a986:	00 00       	add	r0,r0
8000a988:	00 00       	add	r0,r0
8000a98a:	0e 0c       	add	r12,r7

8000a98c <fat_cache_clear>:

#if (FS_LEVEL_FEATURES > FSFEATURE_READ)
//! This function clears the sector cache
//!
void  fat_cache_clear( void )
{
8000a98c:	eb cd 40 80 	pushm	r7,lr
8000a990:	1a 97       	mov	r7,sp
   memset( fs_g_sector , 0 , FS_CACHE_SIZE );
8000a992:	e0 6a 02 00 	mov	r10,512
8000a996:	30 0b       	mov	r11,0
8000a998:	48 3c       	lddpc	r12,8000a9a4 <fat_cache_clear+0x18>
8000a99a:	f0 1f 00 04 	mcall	8000a9a8 <fat_cache_clear+0x1c>
}
8000a99e:	e3 cd 80 80 	ldm	sp++,r7,pc
8000a9a2:	00 00       	add	r0,r0
8000a9a4:	00 00       	add	r0,r0
8000a9a6:	0b 84       	ld.ub	r4,r5[0x0]
8000a9a8:	80 00       	ld.sh	r0,r0[0x0]
8000a9aa:	f3 5e eb cd 	st.h	r9[-5171],lr

8000a9ac <fat_cache_mark_sector_as_dirty>:


//! This function sets a flag to signal that sector cache is modified
//!
void  fat_cache_mark_sector_as_dirty( void )
{
8000a9ac:	eb cd 40 80 	pushm	r7,lr
8000a9b0:	1a 97       	mov	r7,sp
   fs_g_sectorcache.u8_dirty = true;
8000a9b2:	48 49       	lddpc	r9,8000a9c0 <fat_cache_mark_sector_as_dirty+0x14>
8000a9b4:	30 18       	mov	r8,1
8000a9b6:	f3 68 00 08 	st.b	r9[8],r8
}
8000a9ba:	e3 cd 80 80 	ldm	sp++,r7,pc
8000a9be:	00 00       	add	r0,r0
8000a9c0:	00 00       	add	r0,r0
8000a9c2:	0e 0c       	add	r12,r7

8000a9c4 <fat_cache_flush>:
//!
//! @return    false in case of error, see global value "fs_g_status" for more detail
//! @return    true otherwise
//!
bool  fat_cache_flush( void )
{
8000a9c4:	eb cd 40 80 	pushm	r7,lr
8000a9c8:	1a 97       	mov	r7,sp
   // If the cache is modified, then write the sector cache on the device
   if ( true == fs_g_sectorcache.u8_dirty )
8000a9ca:	49 78       	lddpc	r8,8000aa24 <fat_cache_flush+0x60>
8000a9cc:	f1 39 00 08 	ld.ub	r9,r8[8]
8000a9d0:	30 18       	mov	r8,1
8000a9d2:	f0 09 18 00 	cp.b	r9,r8
8000a9d6:	c2 31       	brne	8000aa1c <fat_cache_flush+0x58>
   {
      fs_g_sectorcache.u8_dirty = false; // Always clear, although an error occur
8000a9d8:	49 39       	lddpc	r9,8000aa24 <fat_cache_flush+0x60>
8000a9da:	30 08       	mov	r8,0
8000a9dc:	f3 68 00 08 	st.b	r9[8],r8
      if( mem_wr_protect( fs_g_sectorcache.u8_lun  ))
8000a9e0:	49 18       	lddpc	r8,8000aa24 <fat_cache_flush+0x60>
8000a9e2:	11 88       	ld.ub	r8,r8[0x0]
8000a9e4:	10 9c       	mov	r12,r8
8000a9e6:	f0 1f 00 11 	mcall	8000aa28 <fat_cache_flush+0x64>
8000a9ea:	18 98       	mov	r8,r12
8000a9ec:	58 08       	cp.w	r8,0
8000a9ee:	c0 60       	breq	8000a9fa <fat_cache_flush+0x36>
      {
         fs_g_status = FS_LUN_WP;
8000a9f0:	48 f9       	lddpc	r9,8000aa2c <fat_cache_flush+0x68>
8000a9f2:	31 48       	mov	r8,20
8000a9f4:	b2 88       	st.b	r9[0x0],r8
         return false;
8000a9f6:	30 08       	mov	r8,0
8000a9f8:	c1 38       	rjmp	8000aa1e <fat_cache_flush+0x5a>
      }
      if (CTRL_GOOD != ram_2_memory( fs_g_sectorcache.u8_lun , fs_g_sectorcache.u32_addr , fs_g_sector ))
8000a9fa:	48 b8       	lddpc	r8,8000aa24 <fat_cache_flush+0x60>
8000a9fc:	70 19       	ld.w	r9,r8[0x4]
8000a9fe:	48 a8       	lddpc	r8,8000aa24 <fat_cache_flush+0x60>
8000aa00:	11 88       	ld.ub	r8,r8[0x0]
8000aa02:	48 ca       	lddpc	r10,8000aa30 <fat_cache_flush+0x6c>
8000aa04:	12 9b       	mov	r11,r9
8000aa06:	10 9c       	mov	r12,r8
8000aa08:	f0 1f 00 0b 	mcall	8000aa34 <fat_cache_flush+0x70>
8000aa0c:	18 98       	mov	r8,r12
8000aa0e:	58 08       	cp.w	r8,0
8000aa10:	c0 60       	breq	8000aa1c <fat_cache_flush+0x58>
      {
         fs_g_status = FS_ERR_HW;
8000aa12:	48 79       	lddpc	r9,8000aa2c <fat_cache_flush+0x68>
8000aa14:	30 18       	mov	r8,1
8000aa16:	b2 88       	st.b	r9[0x0],r8
         return false;
8000aa18:	30 08       	mov	r8,0
8000aa1a:	c0 28       	rjmp	8000aa1e <fat_cache_flush+0x5a>
      }
   }
   return true;
8000aa1c:	30 18       	mov	r8,1
}
8000aa1e:	10 9c       	mov	r12,r8
8000aa20:	e3 cd 80 80 	ldm	sp++,r7,pc
8000aa24:	00 00       	add	r0,r0
8000aa26:	0e 0c       	add	r12,r7
8000aa28:	80 00       	ld.sh	r0,r0[0x0]
8000aa2a:	ac d0       	st.b	r6[0x5],r0
8000aa2c:	00 00       	add	r0,r0
8000aa2e:	0d d4       	ld.ub	r4,r6[0x5]
8000aa30:	00 00       	add	r0,r0
8000aa32:	0b 84       	ld.ub	r4,r5[0x0]
8000aa34:	80 00       	ld.sh	r0,r0[0x0]
8000aa36:	ad 84       	lsr	r4,0xc

8000aa38 <fat_check_nav_access_file>:
//!            mode true,  File opened then write access not possibles <br>
//!            mode false, File opened in write mode then read access not possibles <br>
//! @return    true, access file possibles
//!
bool  fat_check_nav_access_file( bool mode )
{
8000aa38:	eb cd 40 80 	pushm	r7,lr
8000aa3c:	1a 97       	mov	r7,sp
8000aa3e:	20 2d       	sub	sp,8
8000aa40:	18 98       	mov	r8,r12
8000aa42:	ef 68 ff f8 	st.b	r7[-8],r8
   uint8_t i;

   // For each navigators
   for( i=0 ; i!=(FS_NB_NAVIGATOR-1) ; i++ )
8000aa46:	30 08       	mov	r8,0
8000aa48:	ef 68 ff ff 	st.b	r7[-1],r8
8000aa4c:	c5 68       	rjmp	8000aaf8 <fat_check_nav_access_file+0xc0>
   {
      // Disk mounted ?
      if( FS_TYPE_FAT_UNM != fs_g_navext_fast[i].u8_type_fat )
8000aa4e:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000aa52:	4b 08       	lddpc	r8,8000ab10 <fat_check_nav_access_file+0xd8>
8000aa54:	f0 09 07 28 	ld.ub	r8,r8[r9<<0x2]
8000aa58:	58 08       	cp.w	r8,0
8000aa5a:	c4 a0       	breq	8000aaee <fat_check_nav_access_file+0xb6>
      // Is it the same disk ?
      if( fs_g_nav.u8_lun == fs_g_navext[i].u8_lun )
8000aa5c:	4a e8       	lddpc	r8,8000ab14 <fat_check_nav_access_file+0xdc>
8000aa5e:	11 89       	ld.ub	r9,r8[0x0]
8000aa60:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000aa64:	4a da       	lddpc	r10,8000ab18 <fat_check_nav_access_file+0xe0>
8000aa66:	f0 08 10 34 	mul	r8,r8,52
8000aa6a:	f4 08 00 08 	add	r8,r10,r8
8000aa6e:	11 88       	ld.ub	r8,r8[0x0]
8000aa70:	f0 09 18 00 	cp.b	r9,r8
8000aa74:	c3 d1       	brne	8000aaee <fat_check_nav_access_file+0xb6>
#if (FS_MULTI_PARTITION == true)
      // Is it the same partition ?
      if( fs_g_nav.u8_partition == fs_g_navext[i].u8_partition )
#endif
      // Is it the same directory ?
      if( fs_g_nav.u32_cluster_sel_dir == fs_g_navext[i].u32_cluster_sel_dir )
8000aa76:	4a 88       	lddpc	r8,8000ab14 <fat_check_nav_access_file+0xdc>
8000aa78:	70 89       	ld.w	r9,r8[0x20]
8000aa7a:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000aa7e:	4a 7a       	lddpc	r10,8000ab18 <fat_check_nav_access_file+0xe0>
8000aa80:	f0 08 10 34 	mul	r8,r8,52
8000aa84:	f4 08 00 08 	add	r8,r10,r8
8000aa88:	2e 08       	sub	r8,-32
8000aa8a:	70 08       	ld.w	r8,r8[0x0]
8000aa8c:	10 39       	cp.w	r9,r8
8000aa8e:	c3 01       	brne	8000aaee <fat_check_nav_access_file+0xb6>
      // Is it the same file ?
      if( fs_g_nav_fast.u16_entry_pos_sel_file == fs_g_navext_fast[i].u16_entry_pos_sel_file )
8000aa90:	4a 38       	lddpc	r8,8000ab1c <fat_check_nav_access_file+0xe4>
8000aa92:	90 19       	ld.sh	r9,r8[0x2]
8000aa94:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000aa98:	49 ea       	lddpc	r10,8000ab10 <fat_check_nav_access_file+0xd8>
8000aa9a:	a3 68       	lsl	r8,0x2
8000aa9c:	f4 08 00 08 	add	r8,r10,r8
8000aaa0:	90 18       	ld.sh	r8,r8[0x2]
8000aaa2:	f0 09 19 00 	cp.h	r9,r8
8000aaa6:	c2 41       	brne	8000aaee <fat_check_nav_access_file+0xb6>
      {
         if( mode )
8000aaa8:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000aaac:	30 08       	mov	r8,0
8000aaae:	f0 09 18 00 	cp.b	r9,r8
8000aab2:	c0 f0       	breq	8000aad0 <fat_check_nav_access_file+0x98>
         {
            // Is it open ?
            if( fs_g_navext_entry[i].u8_open_mode!=0 )
8000aab4:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000aab8:	49 a9       	lddpc	r9,8000ab20 <fat_check_nav_access_file+0xe8>
8000aaba:	a5 68       	lsl	r8,0x4
8000aabc:	f2 08 00 08 	add	r8,r9,r8
8000aac0:	11 88       	ld.ub	r8,r8[0x0]
8000aac2:	58 08       	cp.w	r8,0
8000aac4:	c1 50       	breq	8000aaee <fat_check_nav_access_file+0xb6>
            {
               fs_g_status = FS_ERR_FILE_OPEN;
8000aac6:	49 89       	lddpc	r9,8000ab24 <fat_check_nav_access_file+0xec>
8000aac8:	32 88       	mov	r8,40
8000aaca:	b2 88       	st.b	r9[0x0],r8
               return false;  // File opened then write access not possible
8000aacc:	30 08       	mov	r8,0
8000aace:	c1 c8       	rjmp	8000ab06 <fat_check_nav_access_file+0xce>
            }
         }
         else
         {
            // Is it open in write mode ?
            if( fs_g_navext_entry[i].u8_open_mode & FOPEN_WRITE_ACCESS )
8000aad0:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000aad4:	49 39       	lddpc	r9,8000ab20 <fat_check_nav_access_file+0xe8>
8000aad6:	a5 68       	lsl	r8,0x4
8000aad8:	f2 08 00 08 	add	r8,r9,r8
8000aadc:	11 88       	ld.ub	r8,r8[0x0]
8000aade:	e2 18 00 02 	andl	r8,0x2,COH
8000aae2:	c0 60       	breq	8000aaee <fat_check_nav_access_file+0xb6>
            {
               fs_g_status = FS_ERR_FILE_OPEN_WR;
8000aae4:	49 09       	lddpc	r9,8000ab24 <fat_check_nav_access_file+0xec>
8000aae6:	32 98       	mov	r8,41
8000aae8:	b2 88       	st.b	r9[0x0],r8
               return false;  // File opened in write mode then read access not possible
8000aaea:	30 08       	mov	r8,0
8000aaec:	c0 d8       	rjmp	8000ab06 <fat_check_nav_access_file+0xce>
bool  fat_check_nav_access_file( bool mode )
{
   uint8_t i;

   // For each navigators
   for( i=0 ; i!=(FS_NB_NAVIGATOR-1) ; i++ )
8000aaee:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000aaf2:	2f f8       	sub	r8,-1
8000aaf4:	ef 68 ff ff 	st.b	r7[-1],r8
8000aaf8:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000aafc:	30 18       	mov	r8,1
8000aafe:	f0 09 18 00 	cp.b	r9,r8
8000ab02:	ca 61       	brne	8000aa4e <fat_check_nav_access_file+0x16>
               return false;  // File opened in write mode then read access not possible
            }
         }
      }
   }
   return true;
8000ab04:	30 18       	mov	r8,1
}
8000ab06:	10 9c       	mov	r12,r8
8000ab08:	2f ed       	sub	sp,-8
8000ab0a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000ab0e:	00 00       	add	r0,r0
8000ab10:	00 00       	add	r0,r0
8000ab12:	0d cc       	ld.ub	r12,r6[0x4]
8000ab14:	00 00       	add	r0,r0
8000ab16:	0d 84       	ld.ub	r4,r6[0x0]
8000ab18:	00 00       	add	r0,r0
8000ab1a:	0d d8       	ld.ub	r8,r6[0x5]
8000ab1c:	00 00       	add	r0,r0
8000ab1e:	0d d0       	ld.ub	r0,r6[0x5]
8000ab20:	00 00       	add	r0,r0
8000ab22:	0d bc       	ld.ub	r12,r6[0x3]
8000ab24:	00 00       	add	r0,r0
8000ab26:	0d d4       	ld.ub	r4,r6[0x5]

8000ab28 <fat_invert_nav>:
//! This function inverts the current navigation with another
//!
//! @param     u8_idnav    Id navigator to invert
//!
void  fat_invert_nav( uint8_t u8_idnav )
{
8000ab28:	eb cd 40 80 	pushm	r7,lr
8000ab2c:	1a 97       	mov	r7,sp
8000ab2e:	20 ed       	sub	sp,56
8000ab30:	18 98       	mov	r8,r12
8000ab32:	ef 68 ff c8 	st.b	r7[-56],r8
   _MEM_TYPE_SLOW_ uint8_t Temp[Max(Max(sizeof(Fs_management),sizeof(Fs_management_entry)),sizeof(Fs_management_fast))];

   if( u8_idnav == 0 )
8000ab36:	ef 39 ff c8 	ld.ub	r9,r7[-56]
8000ab3a:	30 08       	mov	r8,0
8000ab3c:	f0 09 18 00 	cp.b	r9,r8
8000ab40:	c6 a0       	breq	8000ac14 <fat_invert_nav+0xec>
      return;
   u8_idnav--;
8000ab42:	ef 38 ff c8 	ld.ub	r8,r7[-56]
8000ab46:	20 18       	sub	r8,1
8000ab48:	ef 68 ff c8 	st.b	r7[-56],r8

   memcpy_ram2ram(Temp,                              (uint8_t*)&fs_g_nav,                     sizeof(Fs_management));
8000ab4c:	ee c8 00 34 	sub	r8,r7,52
8000ab50:	33 4a       	mov	r10,52
8000ab52:	4b 3b       	lddpc	r11,8000ac1c <fat_invert_nav+0xf4>
8000ab54:	10 9c       	mov	r12,r8
8000ab56:	f0 1f 00 33 	mcall	8000ac20 <fat_invert_nav+0xf8>
   memcpy_ram2ram((uint8_t*)&fs_g_nav,                    (uint8_t*)&fs_g_navext[u8_idnav],        sizeof(Fs_management));
8000ab5a:	ef 38 ff c8 	ld.ub	r8,r7[-56]
8000ab5e:	f0 09 10 34 	mul	r9,r8,52
8000ab62:	4b 18       	lddpc	r8,8000ac24 <fat_invert_nav+0xfc>
8000ab64:	f2 08 00 08 	add	r8,r9,r8
8000ab68:	33 4a       	mov	r10,52
8000ab6a:	10 9b       	mov	r11,r8
8000ab6c:	4a cc       	lddpc	r12,8000ac1c <fat_invert_nav+0xf4>
8000ab6e:	f0 1f 00 2d 	mcall	8000ac20 <fat_invert_nav+0xf8>
   memcpy_ram2ram((uint8_t*)&fs_g_navext[u8_idnav],       Temp,                               sizeof(Fs_management));
8000ab72:	ef 38 ff c8 	ld.ub	r8,r7[-56]
8000ab76:	f0 09 10 34 	mul	r9,r8,52
8000ab7a:	4a b8       	lddpc	r8,8000ac24 <fat_invert_nav+0xfc>
8000ab7c:	f2 08 00 08 	add	r8,r9,r8
8000ab80:	ee c9 00 34 	sub	r9,r7,52
8000ab84:	33 4a       	mov	r10,52
8000ab86:	12 9b       	mov	r11,r9
8000ab88:	10 9c       	mov	r12,r8
8000ab8a:	f0 1f 00 26 	mcall	8000ac20 <fat_invert_nav+0xf8>

   memcpy_ram2ram(Temp,                              (uint8_t*)&fs_g_nav_entry,               sizeof(Fs_management_entry));
8000ab8e:	ee c8 00 34 	sub	r8,r7,52
8000ab92:	31 0a       	mov	r10,16
8000ab94:	4a 5b       	lddpc	r11,8000ac28 <fat_invert_nav+0x100>
8000ab96:	10 9c       	mov	r12,r8
8000ab98:	f0 1f 00 22 	mcall	8000ac20 <fat_invert_nav+0xf8>
   memcpy_ram2ram((uint8_t*)&fs_g_nav_entry,              (uint8_t*)&fs_g_navext_entry[u8_idnav],  sizeof(Fs_management_entry));
8000ab9c:	ef 38 ff c8 	ld.ub	r8,r7[-56]
8000aba0:	f0 09 15 04 	lsl	r9,r8,0x4
8000aba4:	4a 28       	lddpc	r8,8000ac2c <fat_invert_nav+0x104>
8000aba6:	f2 08 00 08 	add	r8,r9,r8
8000abaa:	31 0a       	mov	r10,16
8000abac:	10 9b       	mov	r11,r8
8000abae:	49 fc       	lddpc	r12,8000ac28 <fat_invert_nav+0x100>
8000abb0:	f0 1f 00 1c 	mcall	8000ac20 <fat_invert_nav+0xf8>
   memcpy_ram2ram((uint8_t*)&fs_g_navext_entry[u8_idnav], Temp,                               sizeof(Fs_management_entry));
8000abb4:	ef 38 ff c8 	ld.ub	r8,r7[-56]
8000abb8:	f0 09 15 04 	lsl	r9,r8,0x4
8000abbc:	49 c8       	lddpc	r8,8000ac2c <fat_invert_nav+0x104>
8000abbe:	f2 08 00 08 	add	r8,r9,r8
8000abc2:	ee c9 00 34 	sub	r9,r7,52
8000abc6:	31 0a       	mov	r10,16
8000abc8:	12 9b       	mov	r11,r9
8000abca:	10 9c       	mov	r12,r8
8000abcc:	f0 1f 00 15 	mcall	8000ac20 <fat_invert_nav+0xf8>

   memcpy_ram2ram(Temp,                              (uint8_t*)&fs_g_nav_fast,                sizeof(Fs_management_fast));
8000abd0:	ee c8 00 34 	sub	r8,r7,52
8000abd4:	30 4a       	mov	r10,4
8000abd6:	49 7b       	lddpc	r11,8000ac30 <fat_invert_nav+0x108>
8000abd8:	10 9c       	mov	r12,r8
8000abda:	f0 1f 00 12 	mcall	8000ac20 <fat_invert_nav+0xf8>
   memcpy_ram2ram((uint8_t*)&fs_g_nav_fast,               (uint8_t*)&fs_g_navext_fast[u8_idnav],   sizeof(Fs_management_fast));
8000abde:	ef 38 ff c8 	ld.ub	r8,r7[-56]
8000abe2:	f0 09 15 02 	lsl	r9,r8,0x2
8000abe6:	49 48       	lddpc	r8,8000ac34 <fat_invert_nav+0x10c>
8000abe8:	f2 08 00 08 	add	r8,r9,r8
8000abec:	30 4a       	mov	r10,4
8000abee:	10 9b       	mov	r11,r8
8000abf0:	49 0c       	lddpc	r12,8000ac30 <fat_invert_nav+0x108>
8000abf2:	f0 1f 00 0c 	mcall	8000ac20 <fat_invert_nav+0xf8>
   memcpy_ram2ram((uint8_t*)&fs_g_navext_fast[u8_idnav],  Temp,                               sizeof(Fs_management_fast));
8000abf6:	ef 38 ff c8 	ld.ub	r8,r7[-56]
8000abfa:	f0 09 15 02 	lsl	r9,r8,0x2
8000abfe:	48 e8       	lddpc	r8,8000ac34 <fat_invert_nav+0x10c>
8000ac00:	f2 08 00 08 	add	r8,r9,r8
8000ac04:	ee c9 00 34 	sub	r9,r7,52
8000ac08:	30 4a       	mov	r10,4
8000ac0a:	12 9b       	mov	r11,r9
8000ac0c:	10 9c       	mov	r12,r8
8000ac0e:	f0 1f 00 05 	mcall	8000ac20 <fat_invert_nav+0xf8>
8000ac12:	c0 28       	rjmp	8000ac16 <fat_invert_nav+0xee>
void  fat_invert_nav( uint8_t u8_idnav )
{
   _MEM_TYPE_SLOW_ uint8_t Temp[Max(Max(sizeof(Fs_management),sizeof(Fs_management_entry)),sizeof(Fs_management_fast))];

   if( u8_idnav == 0 )
      return;
8000ac14:	d7 03       	nop
   memcpy_ram2ram((uint8_t*)&fs_g_navext_entry[u8_idnav], Temp,                               sizeof(Fs_management_entry));

   memcpy_ram2ram(Temp,                              (uint8_t*)&fs_g_nav_fast,                sizeof(Fs_management_fast));
   memcpy_ram2ram((uint8_t*)&fs_g_nav_fast,               (uint8_t*)&fs_g_navext_fast[u8_idnav],   sizeof(Fs_management_fast));
   memcpy_ram2ram((uint8_t*)&fs_g_navext_fast[u8_idnav],  Temp,                               sizeof(Fs_management_fast));
}
8000ac16:	2f 2d       	sub	sp,-56
8000ac18:	e3 cd 80 80 	ldm	sp++,r7,pc
8000ac1c:	00 00       	add	r0,r0
8000ac1e:	0d 84       	ld.ub	r4,r6[0x0]
8000ac20:	80 00       	ld.sh	r0,r0[0x0]
8000ac22:	f2 16 00 00 	pref	r6[0]
8000ac26:	0d d8       	ld.ub	r8,r6[0x5]
8000ac28:	00 00       	add	r0,r0
8000ac2a:	0b 44       	ld.w	r4,--r5
8000ac2c:	00 00       	add	r0,r0
8000ac2e:	0d bc       	ld.ub	r12,r6[0x3]
8000ac30:	00 00       	add	r0,r0
8000ac32:	0d d0       	ld.ub	r0,r6[0x5]
8000ac34:	00 00       	add	r0,r0
8000ac36:	0d cc       	ld.ub	r12,r6[0x4]
8000ac38:	22 53       	sub	r3,37
8000ac3a:	44 2f       	lddsp	pc,sp[0x108]
8000ac3c:	4d 4d       	lddpc	sp,8000ad8c <ram_2_memory+0x8>
8000ac3e:	43 20       	lddsp	r0,sp[0xc8]
8000ac40:	43 61       	lddsp	r1,sp[0xd8]
8000ac42:	72 64       	ld.w	r4,r9[0x18]
8000ac44:	20 6f       	sub	pc,6
8000ac46:	76 65       	ld.w	r5,r11[0x18]
8000ac48:	72 20       	ld.w	r0,r9[0x8]
8000ac4a:	53 50       	stdsp	sp[0xd4],r0
8000ac4c:	49 22       	lddpc	r2,8000ac94 <mem_test_unit_ready+0x34>
	...

8000ac50 <get_nb_lun>:

#endif  // FREERTOS_USED


U8 get_nb_lun(void)
{
8000ac50:	eb cd 40 80 	pushm	r7,lr
8000ac54:	1a 97       	mov	r7,sp

  Ctrl_access_unlock();

  return nb_lun;
#else
  return MAX_LUN;
8000ac56:	30 18       	mov	r8,1
#endif
}
8000ac58:	10 9c       	mov	r12,r8
8000ac5a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000ac5e:	d7 03       	nop

8000ac60 <mem_test_unit_ready>:
  return LUN_ID_0;
}


Ctrl_status mem_test_unit_ready(U8 lun)
{
8000ac60:	eb cd 40 80 	pushm	r7,lr
8000ac64:	1a 97       	mov	r7,sp
8000ac66:	20 2d       	sub	sp,8
8000ac68:	18 98       	mov	r8,r12
8000ac6a:	ef 68 ff f8 	st.b	r7[-8],r8
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
8000ac6e:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000ac72:	30 08       	mov	r8,0
8000ac74:	f0 09 18 00 	cp.b	r9,r8
8000ac78:	c0 b1       	brne	8000ac8e <mem_test_unit_ready+0x2e>
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
8000ac7a:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000ac7e:	48 99       	lddpc	r9,8000aca0 <mem_test_unit_ready+0x40>
8000ac80:	a5 78       	lsl	r8,0x5
8000ac82:	f2 08 00 08 	add	r8,r9,r8
8000ac86:	70 08       	ld.w	r8,r8[0x0]
8000ac88:	5d 18       	icall	r8
8000ac8a:	18 98       	mov	r8,r12
8000ac8c:	c0 28       	rjmp	8000ac90 <mem_test_unit_ready+0x30>
{
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
8000ac8e:	30 18       	mov	r8,1
8000ac90:	ef 48 ff fc 	st.w	r7[-4],r8
                             CTRL_FAIL;
#endif

  Ctrl_access_unlock();

  return status;
8000ac94:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8000ac98:	10 9c       	mov	r12,r8
8000ac9a:	2f ed       	sub	sp,-8
8000ac9c:	e3 cd 80 80 	ldm	sp++,r7,pc
8000aca0:	80 01       	ld.sh	r1,r0[0x0]
8000aca2:	4c 00       	lddpc	r0,8000ada0 <ram_2_memory+0x1c>

8000aca4 <mem_sector_size>:
  return status;
}


U8 mem_sector_size(U8 lun)
{
8000aca4:	eb cd 40 80 	pushm	r7,lr
8000aca8:	1a 97       	mov	r7,sp
8000acaa:	20 2d       	sub	sp,8
8000acac:	18 98       	mov	r8,r12
8000acae:	ef 68 ff f8 	st.b	r7[-8],r8
  U8 sector_size;

  if (!Ctrl_access_lock()) return 0;

  sector_size =
8000acb2:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000acb6:	30 08       	mov	r8,0
8000acb8:	f0 09 18 00 	cp.b	r9,r8
8000acbc:	5f 08       	sreq	r8
8000acbe:	ef 68 ff ff 	st.b	r7[-1],r8
                                  0;
#endif

  Ctrl_access_unlock();

  return sector_size;
8000acc2:	ef 38 ff ff 	ld.ub	r8,r7[-1]
}
8000acc6:	10 9c       	mov	r12,r8
8000acc8:	2f ed       	sub	sp,-8
8000acca:	e3 cd 80 80 	ldm	sp++,r7,pc
8000acce:	d7 03       	nop

8000acd0 <mem_wr_protect>:

  return unloaded;
}

bool mem_wr_protect(U8 lun)
{
8000acd0:	eb cd 40 80 	pushm	r7,lr
8000acd4:	1a 97       	mov	r7,sp
8000acd6:	20 2d       	sub	sp,8
8000acd8:	18 98       	mov	r8,r12
8000acda:	ef 68 ff f8 	st.b	r7[-8],r8
  bool wr_protect;

  if (!Ctrl_access_lock()) return true;

  wr_protect =
8000acde:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000ace2:	30 08       	mov	r8,0
8000ace4:	f0 09 18 00 	cp.b	r9,r8
8000ace8:	c0 c1       	brne	8000ad00 <mem_wr_protect+0x30>
#if MAX_LUN
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
8000acea:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000acee:	48 a9       	lddpc	r9,8000ad14 <mem_wr_protect+0x44>
8000acf0:	a5 78       	lsl	r8,0x5
8000acf2:	f2 08 00 08 	add	r8,r9,r8
8000acf6:	2f 48       	sub	r8,-12
8000acf8:	70 08       	ld.w	r8,r8[0x0]
8000acfa:	5d 18       	icall	r8
8000acfc:	18 98       	mov	r8,r12
8000acfe:	c0 28       	rjmp	8000ad02 <mem_wr_protect+0x32>
{
  bool wr_protect;

  if (!Ctrl_access_lock()) return true;

  wr_protect =
8000ad00:	30 18       	mov	r8,1
8000ad02:	ef 68 ff ff 	st.b	r7[-1],r8
                                 true;
#endif

  Ctrl_access_unlock();

  return wr_protect;
8000ad06:	ef 38 ff ff 	ld.ub	r8,r7[-1]
}
8000ad0a:	10 9c       	mov	r12,r8
8000ad0c:	2f ed       	sub	sp,-8
8000ad0e:	e3 cd 80 80 	ldm	sp++,r7,pc
8000ad12:	00 00       	add	r0,r0
8000ad14:	80 01       	ld.sh	r1,r0[0x0]
8000ad16:	4c 00       	lddpc	r0,8000ae14 <fat_mount+0x24>

8000ad18 <memory_2_ram>:
 */
//! @{


Ctrl_status memory_2_ram(U8 lun, U32 addr, void *ram)
{
8000ad18:	eb cd 40 80 	pushm	r7,lr
8000ad1c:	1a 97       	mov	r7,sp
8000ad1e:	20 4d       	sub	sp,16
8000ad20:	18 98       	mov	r8,r12
8000ad22:	ef 4b ff f4 	st.w	r7[-12],r11
8000ad26:	ef 4a ff f0 	st.w	r7[-16],r10
8000ad2a:	ef 68 ff f8 	st.b	r7[-8],r8
  UNUSED(lun);
#endif

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(1);
8000ad2e:	32 0c       	mov	r12,32
8000ad30:	f0 1f 00 12 	mcall	8000ad78 <memory_2_ram+0x60>
  status =
8000ad34:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000ad38:	30 08       	mov	r8,0
8000ad3a:	f0 09 18 00 	cp.b	r9,r8
8000ad3e:	c1 01       	brne	8000ad5e <memory_2_ram+0x46>
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
8000ad40:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000ad44:	48 e9       	lddpc	r9,8000ad7c <memory_2_ram+0x64>
8000ad46:	a5 78       	lsl	r8,0x5
8000ad48:	f2 08 00 08 	add	r8,r9,r8
8000ad4c:	2e c8       	sub	r8,-20
8000ad4e:	70 08       	ld.w	r8,r8[0x0]
8000ad50:	ee fb ff f0 	ld.w	r11,r7[-16]
8000ad54:	ee fc ff f4 	ld.w	r12,r7[-12]
8000ad58:	5d 18       	icall	r8
8000ad5a:	18 98       	mov	r8,r12
8000ad5c:	c0 28       	rjmp	8000ad60 <memory_2_ram+0x48>
#endif

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(1);
  status =
8000ad5e:	30 18       	mov	r8,1
8000ad60:	ef 48 ff fc 	st.w	r7[-4],r8
#if LUN_USB == ENABLE
                             Lun_usb_mem_2_ram(addr, ram);
#else
                             CTRL_FAIL;
#endif
  memory_stop_read_action();
8000ad64:	32 0c       	mov	r12,32
8000ad66:	f0 1f 00 07 	mcall	8000ad80 <memory_2_ram+0x68>

  Ctrl_access_unlock();

  return status;
8000ad6a:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8000ad6e:	10 9c       	mov	r12,r8
8000ad70:	2f cd       	sub	sp,-16
8000ad72:	e3 cd 80 80 	ldm	sp++,r7,pc
8000ad76:	00 00       	add	r0,r0
8000ad78:	80 00       	ld.sh	r0,r0[0x0]
8000ad7a:	d9 24       	*unknown*
8000ad7c:	80 01       	ld.sh	r1,r0[0x0]
8000ad7e:	4c 00       	lddpc	r0,8000ae7c <fat_mount+0x8c>
8000ad80:	80 00       	ld.sh	r0,r0[0x0]
8000ad82:	d8 6c       	*unknown*

8000ad84 <ram_2_memory>:


Ctrl_status ram_2_memory(U8 lun, U32 addr, const void *ram)
{
8000ad84:	eb cd 40 80 	pushm	r7,lr
8000ad88:	1a 97       	mov	r7,sp
8000ad8a:	20 4d       	sub	sp,16
8000ad8c:	18 98       	mov	r8,r12
8000ad8e:	ef 4b ff f4 	st.w	r7[-12],r11
8000ad92:	ef 4a ff f0 	st.w	r7[-16],r10
8000ad96:	ef 68 ff f8 	st.b	r7[-8],r8
  UNUSED(lun);
#endif

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(1);
8000ad9a:	31 0c       	mov	r12,16
8000ad9c:	f0 1f 00 12 	mcall	8000ade4 <ram_2_memory+0x60>
  status =
8000ada0:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000ada4:	30 08       	mov	r8,0
8000ada6:	f0 09 18 00 	cp.b	r9,r8
8000adaa:	c1 01       	brne	8000adca <ram_2_memory+0x46>
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
8000adac:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000adb0:	48 e9       	lddpc	r9,8000ade8 <ram_2_memory+0x64>
8000adb2:	a5 78       	lsl	r8,0x5
8000adb4:	f2 08 00 08 	add	r8,r9,r8
8000adb8:	2e 88       	sub	r8,-24
8000adba:	70 08       	ld.w	r8,r8[0x0]
8000adbc:	ee fb ff f0 	ld.w	r11,r7[-16]
8000adc0:	ee fc ff f4 	ld.w	r12,r7[-12]
8000adc4:	5d 18       	icall	r8
8000adc6:	18 98       	mov	r8,r12
8000adc8:	c0 28       	rjmp	8000adcc <ram_2_memory+0x48>
#endif

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(1);
  status =
8000adca:	30 18       	mov	r8,1
8000adcc:	ef 48 ff fc 	st.w	r7[-4],r8
#if LUN_USB == ENABLE
                             Lun_usb_ram_2_mem(addr, ram);
#else
                             CTRL_FAIL;
#endif
  memory_stop_write_action();
8000add0:	31 0c       	mov	r12,16
8000add2:	f0 1f 00 07 	mcall	8000adec <ram_2_memory+0x68>

  Ctrl_access_unlock();

  return status;
8000add6:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8000adda:	10 9c       	mov	r12,r8
8000addc:	2f cd       	sub	sp,-16
8000adde:	e3 cd 80 80 	ldm	sp++,r7,pc
8000ade2:	00 00       	add	r0,r0
8000ade4:	80 00       	ld.sh	r0,r0[0x0]
8000ade6:	d9 24       	*unknown*
8000ade8:	80 01       	ld.sh	r1,r0[0x0]
8000adea:	4c 00       	lddpc	r0,8000aee8 <fat_mount+0xf8>
8000adec:	80 00       	ld.sh	r0,r0[0x0]
8000adee:	d8 6c       	*unknown*

8000adf0 <fat_mount>:
//! If the FS_MULTI_PARTITION option is disabled
//! then the mount routine selects the first partition supported by file system. <br>
//! @endverbatim
//!
bool  fat_mount( void )
{
8000adf0:	eb cd 40 80 	pushm	r7,lr
8000adf4:	1a 97       	mov	r7,sp
8000adf6:	20 2d       	sub	sp,8
   uint8_t  u8_tmp;
   uint16_t u16_tmp;
   uint32_t u32_tmp;

   // Select the root directory
   fs_g_nav.u32_cluster_sel_dir   = 0;
8000adf8:	fe f8 05 b0 	ld.w	r8,pc[1456]
8000adfc:	30 09       	mov	r9,0
8000adfe:	91 89       	st.w	r8[0x20],r9
   // No selected file
   fat_clear_entry_info_and_ptr();
8000ae00:	f0 1f 01 6b 	mcall	8000b3ac <fat_mount+0x5bc>

   fs_g_nav_fast.u8_type_fat = FS_TYPE_FAT_UNM;
8000ae04:	fe f9 05 ac 	ld.w	r9,pc[1452]
8000ae08:	30 08       	mov	r8,0
8000ae0a:	b2 88       	st.b	r9[0x0],r8
   fs_gu32_addrsector = 0;    // Start read at the beginning of memory
8000ae0c:	fe f8 05 a8 	ld.w	r8,pc[1448]
8000ae10:	30 09       	mov	r9,0
8000ae12:	91 09       	st.w	r8[0x0],r9

   // Check if the drive is available
   if( !fat_check_device() )
8000ae14:	f0 1f 01 69 	mcall	8000b3b8 <fat_mount+0x5c8>
8000ae18:	18 98       	mov	r8,r12
8000ae1a:	ec 18 00 01 	eorl	r8,0x1
8000ae1e:	5c 58       	castu.b	r8
8000ae20:	c0 40       	breq	8000ae28 <fat_mount+0x38>
      return false;
8000ae22:	30 08       	mov	r8,0
8000ae24:	e0 8f 02 be 	bral	8000b3a0 <fat_mount+0x5b0>

   while( 1 )  // Search a valid partition
   {
      // Read one sector
      if( !fat_cache_read_sector( true ))
8000ae28:	30 1c       	mov	r12,1
8000ae2a:	f0 1f 01 65 	mcall	8000b3bc <fat_mount+0x5cc>
8000ae2e:	18 98       	mov	r8,r12
8000ae30:	ec 18 00 01 	eorl	r8,0x1
8000ae34:	5c 58       	castu.b	r8
8000ae36:	c0 40       	breq	8000ae3e <fat_mount+0x4e>
         return false;
8000ae38:	30 08       	mov	r8,0
8000ae3a:	e0 8f 02 b3 	bral	8000b3a0 <fat_mount+0x5b0>

      // Check PBR/MBR signature
      if ( (fs_g_sector[510] != FS_BR_SIGNATURE_LOW  )
8000ae3e:	fe f8 05 82 	ld.w	r8,pc[1410]
8000ae42:	f1 39 01 fe 	ld.ub	r9,r8[510]
8000ae46:	35 58       	mov	r8,85
8000ae48:	f0 09 18 00 	cp.b	r9,r8
8000ae4c:	c1 00       	breq	8000ae6c <fat_mount+0x7c>
      &&   (fs_g_sector[511] != FS_BR_SIGNATURE_HIGH ) )
8000ae4e:	fe f8 05 72 	ld.w	r8,pc[1394]
8000ae52:	f1 39 01 ff 	ld.ub	r9,r8[511]
      // Read one sector
      if( !fat_cache_read_sector( true ))
         return false;

      // Check PBR/MBR signature
      if ( (fs_g_sector[510] != FS_BR_SIGNATURE_LOW  )
8000ae56:	3a a8       	mov	r8,-86
8000ae58:	f0 09 18 00 	cp.b	r9,r8
8000ae5c:	c0 80       	breq	8000ae6c <fat_mount+0x7c>
      &&   (fs_g_sector[511] != FS_BR_SIGNATURE_HIGH ) )
      {
         fs_g_status = FS_ERR_NO_FORMAT;
8000ae5e:	fe f9 05 66 	ld.w	r9,pc[1382]
8000ae62:	30 28       	mov	r8,2
8000ae64:	b2 88       	st.b	r9[0x0],r8
         return false;
8000ae66:	30 08       	mov	r8,0
8000ae68:	e0 8f 02 9c 	bral	8000b3a0 <fat_mount+0x5b0>
      }

      if ( 0 == fs_gu32_addrsector )
8000ae6c:	fe f8 05 48 	ld.w	r8,pc[1352]
8000ae70:	70 08       	ld.w	r8,r8[0x0]
8000ae72:	58 08       	cp.w	r8,0
8000ae74:	e0 81 00 f2 	brne	8000b058 <fat_mount+0x268>
         //** first sector then check a MBR structure
         // Search the first partition supported
#if (FS_MULTI_PARTITION == true)
         u16_tmp=0;  // Init to "no valid partition found"
#endif
         for( u8_tmp=0 ; u8_tmp!=4 ; u8_tmp++ )
8000ae78:	30 08       	mov	r8,0
8000ae7a:	ef 68 ff ff 	st.b	r7[-1],r8
8000ae7e:	c8 a8       	rjmp	8000af92 <fat_mount+0x1a2>
         {
            // The first sector must be a MBR, then check the partition entry in the MBR
            if ( ((fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+0] == FS_PART_BOOTABLE             )||
8000ae80:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000ae84:	a5 68       	lsl	r8,0x4
8000ae86:	5c 88       	casts.h	r8
8000ae88:	f0 c8 fe 42 	sub	r8,r8,-446
8000ae8c:	5c 88       	casts.h	r8
8000ae8e:	5c 78       	castu.h	r8
8000ae90:	fe f9 05 30 	ld.w	r9,pc[1328]
8000ae94:	f2 08 07 09 	ld.ub	r9,r9[r8]
8000ae98:	38 08       	mov	r8,-128
8000ae9a:	f0 09 18 00 	cp.b	r9,r8
8000ae9e:	c0 f0       	breq	8000aebc <fat_mount+0xcc>
                  (fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+0] == FS_PART_NO_BOOTABLE          )  )
8000aea0:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000aea4:	a5 68       	lsl	r8,0x4
8000aea6:	5c 88       	casts.h	r8
8000aea8:	f0 c8 fe 42 	sub	r8,r8,-446
8000aeac:	5c 88       	casts.h	r8
8000aeae:	5c 78       	castu.h	r8
8000aeb0:	fe f9 05 10 	ld.w	r9,pc[1296]
8000aeb4:	f2 08 07 08 	ld.ub	r8,r9[r8]
         u16_tmp=0;  // Init to "no valid partition found"
#endif
         for( u8_tmp=0 ; u8_tmp!=4 ; u8_tmp++ )
         {
            // The first sector must be a MBR, then check the partition entry in the MBR
            if ( ((fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+0] == FS_PART_BOOTABLE             )||
8000aeb8:	58 08       	cp.w	r8,0
8000aeba:	c6 71       	brne	8000af88 <fat_mount+0x198>
                  (fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+0] == FS_PART_NO_BOOTABLE          )  )
            &&   ((fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+4] == FS_PART_TYPE_FAT12           )||
8000aebc:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000aec0:	a5 68       	lsl	r8,0x4
8000aec2:	5c 88       	casts.h	r8
8000aec4:	f0 c8 fe 42 	sub	r8,r8,-446
8000aec8:	5c 88       	casts.h	r8
8000aeca:	5c 78       	castu.h	r8
8000aecc:	2f c8       	sub	r8,-4
8000aece:	fe f9 04 f2 	ld.w	r9,pc[1266]
8000aed2:	f2 08 07 09 	ld.ub	r9,r9[r8]
         u16_tmp=0;  // Init to "no valid partition found"
#endif
         for( u8_tmp=0 ; u8_tmp!=4 ; u8_tmp++ )
         {
            // The first sector must be a MBR, then check the partition entry in the MBR
            if ( ((fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+0] == FS_PART_BOOTABLE             )||
8000aed6:	30 18       	mov	r8,1
8000aed8:	f0 09 18 00 	cp.b	r9,r8
8000aedc:	c6 20       	breq	8000afa0 <fat_mount+0x1b0>
                  (fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+0] == FS_PART_NO_BOOTABLE          )  )
            &&   ((fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+4] == FS_PART_TYPE_FAT12           )||
                  (fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+4] == FS_PART_TYPE_FAT16_INF32M    )||
8000aede:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000aee2:	a5 68       	lsl	r8,0x4
8000aee4:	5c 88       	casts.h	r8
8000aee6:	f0 c8 fe 42 	sub	r8,r8,-446
8000aeea:	5c 88       	casts.h	r8
8000aeec:	5c 78       	castu.h	r8
8000aeee:	2f c8       	sub	r8,-4
8000aef0:	fe f9 04 d0 	ld.w	r9,pc[1232]
8000aef4:	f2 08 07 09 	ld.ub	r9,r9[r8]
         u16_tmp=0;  // Init to "no valid partition found"
#endif
         for( u8_tmp=0 ; u8_tmp!=4 ; u8_tmp++ )
         {
            // The first sector must be a MBR, then check the partition entry in the MBR
            if ( ((fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+0] == FS_PART_BOOTABLE             )||
8000aef8:	30 48       	mov	r8,4
8000aefa:	f0 09 18 00 	cp.b	r9,r8
8000aefe:	c5 10       	breq	8000afa0 <fat_mount+0x1b0>
                  (fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+0] == FS_PART_NO_BOOTABLE          )  )
            &&   ((fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+4] == FS_PART_TYPE_FAT12           )||
                  (fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+4] == FS_PART_TYPE_FAT16_INF32M    )||
                  (fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+4] == FS_PART_TYPE_FAT16_SUP32M    )||
8000af00:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000af04:	a5 68       	lsl	r8,0x4
8000af06:	5c 88       	casts.h	r8
8000af08:	f0 c8 fe 42 	sub	r8,r8,-446
8000af0c:	5c 88       	casts.h	r8
8000af0e:	5c 78       	castu.h	r8
8000af10:	2f c8       	sub	r8,-4
8000af12:	fe f9 04 ae 	ld.w	r9,pc[1198]
8000af16:	f2 08 07 09 	ld.ub	r9,r9[r8]
         u16_tmp=0;  // Init to "no valid partition found"
#endif
         for( u8_tmp=0 ; u8_tmp!=4 ; u8_tmp++ )
         {
            // The first sector must be a MBR, then check the partition entry in the MBR
            if ( ((fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+0] == FS_PART_BOOTABLE             )||
8000af1a:	30 68       	mov	r8,6
8000af1c:	f0 09 18 00 	cp.b	r9,r8
8000af20:	c4 00       	breq	8000afa0 <fat_mount+0x1b0>
                  (fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+0] == FS_PART_NO_BOOTABLE          )  )
            &&   ((fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+4] == FS_PART_TYPE_FAT12           )||
                  (fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+4] == FS_PART_TYPE_FAT16_INF32M    )||
                  (fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+4] == FS_PART_TYPE_FAT16_SUP32M    )||
                  (fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+4] == FS_PART_TYPE_FAT16_SUP32M_BIS)||
8000af22:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000af26:	a5 68       	lsl	r8,0x4
8000af28:	5c 88       	casts.h	r8
8000af2a:	f0 c8 fe 42 	sub	r8,r8,-446
8000af2e:	5c 88       	casts.h	r8
8000af30:	5c 78       	castu.h	r8
8000af32:	2f c8       	sub	r8,-4
8000af34:	fe f9 04 8c 	ld.w	r9,pc[1164]
8000af38:	f2 08 07 09 	ld.ub	r9,r9[r8]
         u16_tmp=0;  // Init to "no valid partition found"
#endif
         for( u8_tmp=0 ; u8_tmp!=4 ; u8_tmp++ )
         {
            // The first sector must be a MBR, then check the partition entry in the MBR
            if ( ((fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+0] == FS_PART_BOOTABLE             )||
8000af3c:	30 e8       	mov	r8,14
8000af3e:	f0 09 18 00 	cp.b	r9,r8
8000af42:	c2 f0       	breq	8000afa0 <fat_mount+0x1b0>
                  (fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+0] == FS_PART_NO_BOOTABLE          )  )
            &&   ((fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+4] == FS_PART_TYPE_FAT12           )||
                  (fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+4] == FS_PART_TYPE_FAT16_INF32M    )||
                  (fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+4] == FS_PART_TYPE_FAT16_SUP32M    )||
                  (fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+4] == FS_PART_TYPE_FAT16_SUP32M_BIS)||
                  (fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+4] == FS_PART_TYPE_FAT32           )||
8000af44:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000af48:	a5 68       	lsl	r8,0x4
8000af4a:	5c 88       	casts.h	r8
8000af4c:	f0 c8 fe 42 	sub	r8,r8,-446
8000af50:	5c 88       	casts.h	r8
8000af52:	5c 78       	castu.h	r8
8000af54:	2f c8       	sub	r8,-4
8000af56:	fe f9 04 6a 	ld.w	r9,pc[1130]
8000af5a:	f2 08 07 09 	ld.ub	r9,r9[r8]
         u16_tmp=0;  // Init to "no valid partition found"
#endif
         for( u8_tmp=0 ; u8_tmp!=4 ; u8_tmp++ )
         {
            // The first sector must be a MBR, then check the partition entry in the MBR
            if ( ((fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+0] == FS_PART_BOOTABLE             )||
8000af5e:	30 b8       	mov	r8,11
8000af60:	f0 09 18 00 	cp.b	r9,r8
8000af64:	c1 e0       	breq	8000afa0 <fat_mount+0x1b0>
            &&   ((fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+4] == FS_PART_TYPE_FAT12           )||
                  (fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+4] == FS_PART_TYPE_FAT16_INF32M    )||
                  (fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+4] == FS_PART_TYPE_FAT16_SUP32M    )||
                  (fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+4] == FS_PART_TYPE_FAT16_SUP32M_BIS)||
                  (fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+4] == FS_PART_TYPE_FAT32           )||
                  (fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+4] == FS_PART_TYPE_FAT32_BIS       )) )
8000af66:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000af6a:	a5 68       	lsl	r8,0x4
8000af6c:	5c 88       	casts.h	r8
8000af6e:	f0 c8 fe 42 	sub	r8,r8,-446
8000af72:	5c 88       	casts.h	r8
8000af74:	5c 78       	castu.h	r8
8000af76:	2f c8       	sub	r8,-4
8000af78:	fe f9 04 48 	ld.w	r9,pc[1096]
8000af7c:	f2 08 07 09 	ld.ub	r9,r9[r8]
         u16_tmp=0;  // Init to "no valid partition found"
#endif
         for( u8_tmp=0 ; u8_tmp!=4 ; u8_tmp++ )
         {
            // The first sector must be a MBR, then check the partition entry in the MBR
            if ( ((fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+0] == FS_PART_BOOTABLE             )||
8000af80:	30 c8       	mov	r8,12
8000af82:	f0 09 18 00 	cp.b	r9,r8
8000af86:	c0 d0       	breq	8000afa0 <fat_mount+0x1b0>
         //** first sector then check a MBR structure
         // Search the first partition supported
#if (FS_MULTI_PARTITION == true)
         u16_tmp=0;  // Init to "no valid partition found"
#endif
         for( u8_tmp=0 ; u8_tmp!=4 ; u8_tmp++ )
8000af88:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000af8c:	2f f8       	sub	r8,-1
8000af8e:	ef 68 ff ff 	st.b	r7[-1],r8
8000af92:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000af96:	30 48       	mov	r8,4
8000af98:	f0 09 18 00 	cp.b	r9,r8
8000af9c:	fe 91 ff 72 	brne	8000ae80 <fat_mount+0x90>
#else
               break;
#endif
            }
         }
         if( u8_tmp != 4 )
8000afa0:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000afa4:	30 48       	mov	r8,4
8000afa6:	f0 09 18 00 	cp.b	r9,r8
8000afaa:	c5 70       	breq	8000b058 <fat_mount+0x268>
         {
            // Partition found -> Get partition position (unit sector) at offset 8
            LSB0(fs_gu32_addrsector) = fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+8];
8000afac:	fe f8 04 08 	ld.w	r8,pc[1032]
8000afb0:	f0 c9 ff fd 	sub	r9,r8,-3
8000afb4:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000afb8:	a5 68       	lsl	r8,0x4
8000afba:	5c 88       	casts.h	r8
8000afbc:	f0 c8 fe 42 	sub	r8,r8,-446
8000afc0:	5c 88       	casts.h	r8
8000afc2:	5c 78       	castu.h	r8
8000afc4:	2f 88       	sub	r8,-8
8000afc6:	fe fa 03 fa 	ld.w	r10,pc[1018]
8000afca:	f4 08 07 08 	ld.ub	r8,r10[r8]
8000afce:	b2 88       	st.b	r9[0x0],r8
            LSB1(fs_gu32_addrsector) = fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+9];
8000afd0:	fe f8 03 e4 	ld.w	r8,pc[996]
8000afd4:	f0 c9 ff fe 	sub	r9,r8,-2
8000afd8:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000afdc:	a5 68       	lsl	r8,0x4
8000afde:	5c 88       	casts.h	r8
8000afe0:	f0 c8 fe 42 	sub	r8,r8,-446
8000afe4:	5c 88       	casts.h	r8
8000afe6:	5c 78       	castu.h	r8
8000afe8:	2f 78       	sub	r8,-9
8000afea:	fe fa 03 d6 	ld.w	r10,pc[982]
8000afee:	f4 08 07 08 	ld.ub	r8,r10[r8]
8000aff2:	b2 88       	st.b	r9[0x0],r8
            LSB2(fs_gu32_addrsector) = fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+10];
8000aff4:	fe f8 03 c0 	ld.w	r8,pc[960]
8000aff8:	f0 c9 ff ff 	sub	r9,r8,-1
8000affc:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000b000:	a5 68       	lsl	r8,0x4
8000b002:	5c 88       	casts.h	r8
8000b004:	f0 c8 fe 42 	sub	r8,r8,-446
8000b008:	5c 88       	casts.h	r8
8000b00a:	5c 78       	castu.h	r8
8000b00c:	2f 68       	sub	r8,-10
8000b00e:	fe fa 03 b2 	ld.w	r10,pc[946]
8000b012:	f4 08 07 08 	ld.ub	r8,r10[r8]
8000b016:	b2 88       	st.b	r9[0x0],r8
            LSB3(fs_gu32_addrsector) = fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+11];
8000b018:	fe f9 03 9c 	ld.w	r9,pc[924]
8000b01c:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000b020:	a5 68       	lsl	r8,0x4
8000b022:	5c 88       	casts.h	r8
8000b024:	f0 c8 fe 42 	sub	r8,r8,-446
8000b028:	5c 88       	casts.h	r8
8000b02a:	5c 78       	castu.h	r8
8000b02c:	2f 58       	sub	r8,-11
8000b02e:	fe fa 03 92 	ld.w	r10,pc[914]
8000b032:	f4 08 07 08 	ld.ub	r8,r10[r8]
8000b036:	b2 88       	st.b	r9[0x0],r8
            fs_gu32_addrsector *= mem_sector_size( fs_g_nav.u8_lun );
8000b038:	fe f8 03 70 	ld.w	r8,pc[880]
8000b03c:	11 88       	ld.ub	r8,r8[0x0]
8000b03e:	10 9c       	mov	r12,r8
8000b040:	f0 1f 00 e2 	mcall	8000b3c8 <fat_mount+0x5d8>
8000b044:	18 98       	mov	r8,r12
8000b046:	10 99       	mov	r9,r8
8000b048:	fe f8 03 6c 	ld.w	r8,pc[876]
8000b04c:	70 08       	ld.w	r8,r8[0x0]
8000b04e:	b1 39       	mul	r9,r8
8000b050:	fe f8 03 64 	ld.w	r8,pc[868]
8000b054:	91 09       	st.w	r8[0x0],r9
         break;   // valid PBR found
      }
      // PBR not found
      fs_g_status = FS_ERR_NO_PART;
      return false;
   }
8000b056:	ce 9a       	rjmp	8000ae28 <fat_mount+0x38>
         }
#endif
      }

      //** Check a PBR structure
      if ( (fs_g_sector[0] == 0xEB) &&          // PBR Byte 0
8000b058:	fe f8 03 68 	ld.w	r8,pc[872]
8000b05c:	11 89       	ld.ub	r9,r8[0x0]
8000b05e:	3e b8       	mov	r8,-21
8000b060:	f0 09 18 00 	cp.b	r9,r8
8000b064:	c4 21       	brne	8000b0e8 <fat_mount+0x2f8>
           (fs_g_sector[2] == 0x90) &&          // PBR Byte 2
8000b066:	fe f8 03 5a 	ld.w	r8,pc[858]
8000b06a:	11 a9       	ld.ub	r9,r8[0x2]
         }
#endif
      }

      //** Check a PBR structure
      if ( (fs_g_sector[0] == 0xEB) &&          // PBR Byte 0
8000b06c:	39 08       	mov	r8,-112
8000b06e:	f0 09 18 00 	cp.b	r9,r8
8000b072:	c3 b1       	brne	8000b0e8 <fat_mount+0x2f8>
           (fs_g_sector[2] == 0x90) &&          // PBR Byte 2
           ((fs_g_sector[21] & 0xF0) == 0xF0) ) // PBR Byte 21 : Media byte
8000b074:	fe f8 03 4c 	ld.w	r8,pc[844]
8000b078:	f1 38 00 15 	ld.ub	r8,r8[21]
8000b07c:	e2 18 00 f0 	andl	r8,0xf0,COH
         }
#endif
      }

      //** Check a PBR structure
      if ( (fs_g_sector[0] == 0xEB) &&          // PBR Byte 0
8000b080:	e0 48 00 f0 	cp.w	r8,240
8000b084:	c3 21       	brne	8000b0e8 <fat_mount+0x2f8>
      // PBR not found
      fs_g_status = FS_ERR_NO_PART;
      return false;
   }

   fs_g_status = FS_ERR_NO_SUPPORT_PART;  // by default partition no supported
8000b086:	fe f9 03 3e 	ld.w	r9,pc[830]
8000b08a:	30 48       	mov	r8,4
8000b08c:	b2 88       	st.b	r9[0x0],r8

   // Get sector size of File System (unit 512B)
   // To translate from sector disk unit to sector 512B unit
   u8_sector_size = HIGH_16_BPB_BytsPerSec/2;
8000b08e:	fe f8 03 32 	ld.w	r8,pc[818]
8000b092:	f1 38 00 0c 	ld.ub	r8,r8[12]
8000b096:	a1 98       	lsr	r8,0x1
8000b098:	ef 68 ff fe 	st.b	r7[-2],r8

   // Read BPB_SecPerClus (unit sector)
   fs_g_nav.u8_BPB_SecPerClus = U8_BPB_SecPerClus * u8_sector_size;
8000b09c:	fe f8 03 24 	ld.w	r8,pc[804]
8000b0a0:	f1 38 00 0d 	ld.ub	r8,r8[13]
8000b0a4:	ef 39 ff fe 	ld.ub	r9,r7[-2]
8000b0a8:	f2 08 02 48 	mul	r8,r9,r8
8000b0ac:	5c 58       	castu.b	r8
8000b0ae:	fe f9 02 fa 	ld.w	r9,pc[762]
8000b0b2:	b2 98       	st.b	r9[0x1],r8

   //** FAT Type determination (algorithm of "Hardware White Paper FAT")
   // Get FAT size (unit sector)
   u32_tmp=0;
8000b0b4:	30 08       	mov	r8,0
8000b0b6:	ef 48 ff f8 	st.w	r7[-8],r8
   LSB0( u32_tmp ) = LOW_16_BPB_FATSz16;
8000b0ba:	ee c8 00 08 	sub	r8,r7,8
8000b0be:	f0 c9 ff fd 	sub	r9,r8,-3
8000b0c2:	fe f8 02 fe 	ld.w	r8,pc[766]
8000b0c6:	f1 38 00 16 	ld.ub	r8,r8[22]
8000b0ca:	b2 88       	st.b	r9[0x0],r8
   LSB1( u32_tmp ) = HIGH_16_BPB_FATSz16;
8000b0cc:	ee c8 00 08 	sub	r8,r7,8
8000b0d0:	f0 c9 ff fe 	sub	r9,r8,-2
8000b0d4:	fe f8 02 ec 	ld.w	r8,pc[748]
8000b0d8:	f1 38 00 17 	ld.ub	r8,r8[23]
8000b0dc:	b2 88       	st.b	r9[0x0],r8
   if ( 0==u32_tmp )
8000b0de:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b0e2:	58 08       	cp.w	r8,0
8000b0e4:	c0 90       	breq	8000b0f6 <fat_mount+0x306>
8000b0e6:	c2 a8       	rjmp	8000b13a <fat_mount+0x34a>
           ((fs_g_sector[21] & 0xF0) == 0xF0) ) // PBR Byte 21 : Media byte
      {
         break;   // valid PBR found
      }
      // PBR not found
      fs_g_status = FS_ERR_NO_PART;
8000b0e8:	fe f9 02 dc 	ld.w	r9,pc[732]
8000b0ec:	30 38       	mov	r8,3
8000b0ee:	b2 88       	st.b	r9[0x0],r8
      return false;
8000b0f0:	30 08       	mov	r8,0
8000b0f2:	e0 8f 01 57 	bral	8000b3a0 <fat_mount+0x5b0>
   u32_tmp=0;
   LSB0( u32_tmp ) = LOW_16_BPB_FATSz16;
   LSB1( u32_tmp ) = HIGH_16_BPB_FATSz16;
   if ( 0==u32_tmp )
   {
      LSB0( u32_tmp ) = LOW0_32_BPB_FATSz32;
8000b0f6:	ee c8 00 08 	sub	r8,r7,8
8000b0fa:	f0 c9 ff fd 	sub	r9,r8,-3
8000b0fe:	fe f8 02 c2 	ld.w	r8,pc[706]
8000b102:	f1 38 00 24 	ld.ub	r8,r8[36]
8000b106:	b2 88       	st.b	r9[0x0],r8
      LSB1( u32_tmp ) = LOW1_32_BPB_FATSz32;
8000b108:	ee c8 00 08 	sub	r8,r7,8
8000b10c:	f0 c9 ff fe 	sub	r9,r8,-2
8000b110:	fe f8 02 b0 	ld.w	r8,pc[688]
8000b114:	f1 38 00 25 	ld.ub	r8,r8[37]
8000b118:	b2 88       	st.b	r9[0x0],r8
      LSB2( u32_tmp ) = LOW2_32_BPB_FATSz32;
8000b11a:	ee c8 00 08 	sub	r8,r7,8
8000b11e:	f0 c9 ff ff 	sub	r9,r8,-1
8000b122:	fe f8 02 9e 	ld.w	r8,pc[670]
8000b126:	f1 38 00 26 	ld.ub	r8,r8[38]
8000b12a:	b2 88       	st.b	r9[0x0],r8
      LSB3( u32_tmp ) = LOW3_32_BPB_FATSz32;
8000b12c:	ee c9 00 08 	sub	r9,r7,8
8000b130:	fe f8 02 90 	ld.w	r8,pc[656]
8000b134:	f1 38 00 27 	ld.ub	r8,r8[39]
8000b138:	b2 88       	st.b	r9[0x0],r8
   }
   fs_g_nav.u32_fat_size = u32_tmp * u8_sector_size;
8000b13a:	ef 39 ff fe 	ld.ub	r9,r7[-2]
8000b13e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b142:	b1 39       	mul	r9,r8
8000b144:	fe f8 02 64 	ld.w	r8,pc[612]
8000b148:	91 19       	st.w	r8[0x4],r9

   // Get total count of sectors in partition
   if ( (0==LOW_16_BPB_TotSec16) && (0==HIGH_16_BPB_TotSec16) )
8000b14a:	fe f8 02 76 	ld.w	r8,pc[630]
8000b14e:	f1 38 00 13 	ld.ub	r8,r8[19]
8000b152:	58 08       	cp.w	r8,0
8000b154:	c2 a1       	brne	8000b1a8 <fat_mount+0x3b8>
8000b156:	fe f8 02 6a 	ld.w	r8,pc[618]
8000b15a:	f1 38 00 14 	ld.ub	r8,r8[20]
8000b15e:	58 08       	cp.w	r8,0
8000b160:	c2 41       	brne	8000b1a8 <fat_mount+0x3b8>
   {
      LSB0( u32_tmp ) = LOW0_32_BPB_TotSec32;
8000b162:	ee c8 00 08 	sub	r8,r7,8
8000b166:	f0 c9 ff fd 	sub	r9,r8,-3
8000b16a:	fe f8 02 56 	ld.w	r8,pc[598]
8000b16e:	f1 38 00 20 	ld.ub	r8,r8[32]
8000b172:	b2 88       	st.b	r9[0x0],r8
      LSB1( u32_tmp ) = LOW1_32_BPB_TotSec32;
8000b174:	ee c8 00 08 	sub	r8,r7,8
8000b178:	f0 c9 ff fe 	sub	r9,r8,-2
8000b17c:	fe f8 02 44 	ld.w	r8,pc[580]
8000b180:	f1 38 00 21 	ld.ub	r8,r8[33]
8000b184:	b2 88       	st.b	r9[0x0],r8
      LSB2( u32_tmp ) = LOW2_32_BPB_TotSec32;
8000b186:	ee c8 00 08 	sub	r8,r7,8
8000b18a:	f0 c9 ff ff 	sub	r9,r8,-1
8000b18e:	fe f8 02 32 	ld.w	r8,pc[562]
8000b192:	f1 38 00 22 	ld.ub	r8,r8[34]
8000b196:	b2 88       	st.b	r9[0x0],r8
      LSB3( u32_tmp ) = LOW3_32_BPB_TotSec32;
8000b198:	ee c9 00 08 	sub	r9,r7,8
8000b19c:	fe f8 02 24 	ld.w	r8,pc[548]
8000b1a0:	f1 38 00 23 	ld.ub	r8,r8[35]
8000b1a4:	b2 88       	st.b	r9[0x0],r8
      LSB3( u32_tmp ) = LOW3_32_BPB_FATSz32;
   }
   fs_g_nav.u32_fat_size = u32_tmp * u8_sector_size;

   // Get total count of sectors in partition
   if ( (0==LOW_16_BPB_TotSec16) && (0==HIGH_16_BPB_TotSec16) )
8000b1a6:	c1 d8       	rjmp	8000b1e0 <fat_mount+0x3f0>
      LSB2( u32_tmp ) = LOW2_32_BPB_TotSec32;
      LSB3( u32_tmp ) = LOW3_32_BPB_TotSec32;
   }
   else
   {
      LSB0( u32_tmp ) = LOW_16_BPB_TotSec16;
8000b1a8:	ee c8 00 08 	sub	r8,r7,8
8000b1ac:	f0 c9 ff fd 	sub	r9,r8,-3
8000b1b0:	fe f8 02 10 	ld.w	r8,pc[528]
8000b1b4:	f1 38 00 13 	ld.ub	r8,r8[19]
8000b1b8:	b2 88       	st.b	r9[0x0],r8
      LSB1( u32_tmp ) = HIGH_16_BPB_TotSec16;
8000b1ba:	ee c8 00 08 	sub	r8,r7,8
8000b1be:	f0 c9 ff fe 	sub	r9,r8,-2
8000b1c2:	fe f8 01 fe 	ld.w	r8,pc[510]
8000b1c6:	f1 38 00 14 	ld.ub	r8,r8[20]
8000b1ca:	b2 88       	st.b	r9[0x0],r8
      LSB2( u32_tmp ) = 0;
8000b1cc:	ee c8 00 08 	sub	r8,r7,8
8000b1d0:	f0 c9 ff ff 	sub	r9,r8,-1
8000b1d4:	30 08       	mov	r8,0
8000b1d6:	b2 88       	st.b	r9[0x0],r8
      LSB3( u32_tmp ) = 0;
8000b1d8:	ee c9 00 08 	sub	r9,r7,8
8000b1dc:	30 08       	mov	r8,0
8000b1de:	b2 88       	st.b	r9[0x0],r8
   }
   u32_tmp *= u8_sector_size;   // Translate from sector disk unit to sector 512B unit
8000b1e0:	ef 39 ff fe 	ld.ub	r9,r7[-2]
8000b1e4:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b1e8:	f2 08 02 48 	mul	r8,r9,r8
8000b1ec:	ef 48 ff f8 	st.w	r7[-8],r8

   // Compute the offset (unit 512B) between the end of FAT (beginning of root dir in FAT1x) and the beginning of PBR
   fs_g_nav.rootdir.seg.u16_pos = FS_NB_FAT * (uint16_t)fs_g_nav.u32_fat_size;
8000b1f0:	4e e8       	lddpc	r8,8000b3a8 <fat_mount+0x5b8>
8000b1f2:	70 18       	ld.w	r8,r8[0x4]
8000b1f4:	5c 88       	casts.h	r8
8000b1f6:	a1 78       	lsl	r8,0x1
8000b1f8:	5c 88       	casts.h	r8
8000b1fa:	4e c9       	lddpc	r9,8000b3a8 <fat_mount+0x5b8>
8000b1fc:	f3 58 00 18 	st.h	r9[24],r8

   // Compute the root directory size (unit sector), for FAT32 is always 0
   LSB( u16_tmp ) = LOW_16_BPB_RootEntCnt;
8000b200:	ee c8 00 04 	sub	r8,r7,4
8000b204:	f0 c9 ff ff 	sub	r9,r8,-1
8000b208:	4e e8       	lddpc	r8,8000b3c0 <fat_mount+0x5d0>
8000b20a:	f1 38 00 11 	ld.ub	r8,r8[17]
8000b20e:	b2 88       	st.b	r9[0x0],r8
   MSB( u16_tmp ) = HIGH_16_BPB_RootEntCnt;
8000b210:	ee c9 00 04 	sub	r9,r7,4
8000b214:	4e b8       	lddpc	r8,8000b3c0 <fat_mount+0x5d0>
8000b216:	f1 38 00 12 	ld.ub	r8,r8[18]
8000b21a:	b2 88       	st.b	r9[0x0],r8
   fs_g_nav.rootdir.seg.u16_size = ((u16_tmp * FS_SIZE_FILE_ENTRY) + ((FS_512B*u8_sector_size)-1)) / (FS_512B*u8_sector_size);
8000b21c:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8000b220:	f0 09 15 04 	lsl	r9,r8,0x4
8000b224:	ef 08 ff fc 	ld.sh	r8,r7[-4]
8000b228:	5c 78       	castu.h	r8
8000b22a:	f2 08 00 08 	add	r8,r9,r8
8000b22e:	a5 78       	lsl	r8,0x5
8000b230:	20 18       	sub	r8,1
8000b232:	ef 39 ff fe 	ld.ub	r9,r7[-2]
8000b236:	a9 79       	lsl	r9,0x9
8000b238:	f0 09 0c 08 	divs	r8,r8,r9
8000b23c:	5c 88       	casts.h	r8
8000b23e:	4d b9       	lddpc	r9,8000b3a8 <fat_mount+0x5b8>
8000b240:	f3 58 00 1a 	st.h	r9[26],r8
   fs_g_nav.rootdir.seg.u16_size *= u8_sector_size;
8000b244:	4d 98       	lddpc	r8,8000b3a8 <fat_mount+0x5b8>
8000b246:	f1 09 00 1a 	ld.sh	r9,r8[26]
8000b24a:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8000b24e:	f2 08 02 48 	mul	r8,r9,r8
8000b252:	5c 88       	casts.h	r8
8000b254:	4d 59       	lddpc	r9,8000b3a8 <fat_mount+0x5b8>
8000b256:	f3 58 00 1a 	st.h	r9[26],r8

   // Get number of reserved sector
   LSB( u16_tmp ) = LOW_16_BPB_ResvSecCnt;
8000b25a:	ee c8 00 04 	sub	r8,r7,4
8000b25e:	f0 c9 ff ff 	sub	r9,r8,-1
8000b262:	4d 88       	lddpc	r8,8000b3c0 <fat_mount+0x5d0>
8000b264:	f1 38 00 0e 	ld.ub	r8,r8[14]
8000b268:	b2 88       	st.b	r9[0x0],r8
   MSB( u16_tmp ) = HIGH_16_BPB_ResvSecCnt;
8000b26a:	ee c9 00 04 	sub	r9,r7,4
8000b26e:	4d 58       	lddpc	r8,8000b3c0 <fat_mount+0x5d0>
8000b270:	f1 38 00 0f 	ld.ub	r8,r8[15]
8000b274:	b2 88       	st.b	r9[0x0],r8
   // Get FSInfo position
   fs_g_nav.u16_offset_FSInfo = (u16_tmp-LOW_16_BPB_FSInfo)*u8_sector_size;
8000b276:	ef 08 ff fc 	ld.sh	r8,r7[-4]
8000b27a:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
8000b27e:	4d 18       	lddpc	r8,8000b3c0 <fat_mount+0x5d0>
8000b280:	f1 38 00 30 	ld.ub	r8,r8[48]
8000b284:	f2 08 01 08 	sub	r8,r9,r8
8000b288:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
8000b28c:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8000b290:	f2 08 02 48 	mul	r8,r9,r8
8000b294:	5c 88       	casts.h	r8
8000b296:	4c 59       	lddpc	r9,8000b3a8 <fat_mount+0x5b8>
8000b298:	b2 48       	st.h	r9[0x8],r8
   u16_tmp *= u8_sector_size; // number of reserved sector translated in unit 512B
8000b29a:	ef 39 ff fe 	ld.ub	r9,r7[-2]
8000b29e:	ef 08 ff fc 	ld.sh	r8,r7[-4]
8000b2a2:	f2 08 02 48 	mul	r8,r9,r8
8000b2a6:	5c 88       	casts.h	r8
8000b2a8:	ef 58 ff fc 	st.h	r7[-4],r8

   // Compute the FAT address (unit 512B)
   fs_g_nav.u32_ptr_fat = fs_gu32_addrsector + u16_tmp;
8000b2ac:	ef 08 ff fc 	ld.sh	r8,r7[-4]
8000b2b0:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
8000b2b4:	4c 08       	lddpc	r8,8000b3b4 <fat_mount+0x5c4>
8000b2b6:	70 08       	ld.w	r8,r8[0x0]
8000b2b8:	10 09       	add	r9,r8
8000b2ba:	4b c8       	lddpc	r8,8000b3a8 <fat_mount+0x5b8>
8000b2bc:	91 49       	st.w	r8[0x10],r9

   // Compute the offset (unit 512B) between the first data cluster and the FAT beginning
   fs_g_nav.u32_offset_data = (FS_NB_FAT * fs_g_nav.u32_fat_size) + (uint32_t)fs_g_nav.rootdir.seg.u16_size;
8000b2be:	4b b8       	lddpc	r8,8000b3a8 <fat_mount+0x5b8>
8000b2c0:	70 18       	ld.w	r8,r8[0x4]
8000b2c2:	f0 09 15 01 	lsl	r9,r8,0x1
8000b2c6:	4b 98       	lddpc	r8,8000b3a8 <fat_mount+0x5b8>
8000b2c8:	f1 08 00 1a 	ld.sh	r8,r8[26]
8000b2cc:	5c 78       	castu.h	r8
8000b2ce:	10 09       	add	r9,r8
8000b2d0:	4b 68       	lddpc	r8,8000b3a8 <fat_mount+0x5b8>
8000b2d2:	91 59       	st.w	r8[0x14],r9

   // Compute the data region (clusters space = Total - Sector used) size (unit 512B)
   u32_tmp -= ((uint32_t)u16_tmp + fs_g_nav.u32_offset_data);
8000b2d4:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000b2d8:	ef 08 ff fc 	ld.sh	r8,r7[-4]
8000b2dc:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
8000b2e0:	4b 28       	lddpc	r8,8000b3a8 <fat_mount+0x5b8>
8000b2e2:	70 58       	ld.w	r8,r8[0x14]
8000b2e4:	f4 08 00 08 	add	r8,r10,r8
8000b2e8:	f2 08 01 08 	sub	r8,r9,r8
8000b2ec:	ef 48 ff f8 	st.w	r7[-8],r8

   // Compute the count of CLUSTER in the data region
   // !!!Optimization -> u32_CountofCluster (unit 512B)/ fs_g_nav.u8_BPB_SecPerClus (unit 512B & power of 2)
   if (!fs_g_nav.u8_BPB_SecPerClus)
8000b2f0:	4a e8       	lddpc	r8,8000b3a8 <fat_mount+0x5b8>
8000b2f2:	11 98       	ld.ub	r8,r8[0x1]
8000b2f4:	58 08       	cp.w	r8,0
8000b2f6:	c0 31       	brne	8000b2fc <fat_mount+0x50c>
     return false;
8000b2f8:	30 08       	mov	r8,0
8000b2fa:	c5 38       	rjmp	8000b3a0 <fat_mount+0x5b0>
   for( u8_tmp = fs_g_nav.u8_BPB_SecPerClus; u8_tmp!=1 ; u8_tmp >>= 1 )
8000b2fc:	4a b8       	lddpc	r8,8000b3a8 <fat_mount+0x5b8>
8000b2fe:	11 98       	ld.ub	r8,r8[0x1]
8000b300:	ef 68 ff ff 	st.b	r7[-1],r8
8000b304:	c0 b8       	rjmp	8000b31a <fat_mount+0x52a>
   {
     u32_tmp  >>= 1;   // This computation round down
8000b306:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b30a:	a1 98       	lsr	r8,0x1
8000b30c:	ef 48 ff f8 	st.w	r7[-8],r8

   // Compute the count of CLUSTER in the data region
   // !!!Optimization -> u32_CountofCluster (unit 512B)/ fs_g_nav.u8_BPB_SecPerClus (unit 512B & power of 2)
   if (!fs_g_nav.u8_BPB_SecPerClus)
     return false;
   for( u8_tmp = fs_g_nav.u8_BPB_SecPerClus; u8_tmp!=1 ; u8_tmp >>= 1 )
8000b310:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000b314:	a1 98       	lsr	r8,0x1
8000b316:	ef 68 ff ff 	st.b	r7[-1],r8
8000b31a:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000b31e:	30 18       	mov	r8,1
8000b320:	f0 09 18 00 	cp.b	r9,r8
8000b324:	cf 11       	brne	8000b306 <fat_mount+0x516>
   {
     u32_tmp  >>= 1;   // This computation round down
   }
   fs_g_nav.u32_CountofCluster = u32_tmp+2; // The total of cluster include the two reserved clusters
8000b326:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b32a:	f0 c9 ff fe 	sub	r9,r8,-2
8000b32e:	49 f8       	lddpc	r8,8000b3a8 <fat_mount+0x5b8>
8000b330:	91 39       	st.w	r8[0xc],r9

   // Determine the FAT type
   if (u32_tmp < FS_FAT12_MAX_CLUSTERS)
8000b332:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b336:	e0 48 0f f4 	cp.w	r8,4084
8000b33a:	e0 8b 00 06 	brhi	8000b346 <fat_mount+0x556>
   {
      // Is FAT 12
#if (FS_FAT_12 == false)
      return false;
#endif
      fs_g_nav_fast.u8_type_fat = FS_TYPE_FAT_12;
8000b33e:	49 d9       	lddpc	r9,8000b3b0 <fat_mount+0x5c0>
8000b340:	30 18       	mov	r8,1
8000b342:	b2 88       	st.b	r9[0x0],r8
8000b344:	c2 d8       	rjmp	8000b39e <fat_mount+0x5ae>
   } else {
   if (u32_tmp < FS_FAT16_MAX_CLUSTERS)
8000b346:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b34a:	e0 48 ff f4 	cp.w	r8,65524
8000b34e:	e0 8b 00 06 	brhi	8000b35a <fat_mount+0x56a>
   {
      // Is FAT 16
#if (FS_FAT_16 == false)
      return FS_NO_SUPPORT_PART;
#endif
      fs_g_nav_fast.u8_type_fat = FS_TYPE_FAT_16;
8000b352:	49 89       	lddpc	r9,8000b3b0 <fat_mount+0x5c0>
8000b354:	30 28       	mov	r8,2
8000b356:	b2 88       	st.b	r9[0x0],r8
8000b358:	c2 38       	rjmp	8000b39e <fat_mount+0x5ae>
   } else {
      // Is FAT 32
#if (FS_FAT_32 == false)
      return false;
#endif
      fs_g_nav_fast.u8_type_fat = FS_TYPE_FAT_32;
8000b35a:	49 69       	lddpc	r9,8000b3b0 <fat_mount+0x5c0>
8000b35c:	30 38       	mov	r8,3
8000b35e:	b2 88       	st.b	r9[0x0],r8
      // In FAT32, the root dir is like another directory, this one have a cluster list
      // Get the first cluster number of root
      LSB0( fs_g_nav.rootdir.u32_cluster ) = LOW0_32_BPB_RootClus;
8000b360:	49 28       	lddpc	r8,8000b3a8 <fat_mount+0x5b8>
8000b362:	2e 88       	sub	r8,-24
8000b364:	f0 c9 ff fd 	sub	r9,r8,-3
8000b368:	49 68       	lddpc	r8,8000b3c0 <fat_mount+0x5d0>
8000b36a:	f1 38 00 2c 	ld.ub	r8,r8[44]
8000b36e:	b2 88       	st.b	r9[0x0],r8
      LSB1( fs_g_nav.rootdir.u32_cluster ) = LOW1_32_BPB_RootClus;
8000b370:	48 e8       	lddpc	r8,8000b3a8 <fat_mount+0x5b8>
8000b372:	2e 88       	sub	r8,-24
8000b374:	f0 c9 ff fe 	sub	r9,r8,-2
8000b378:	49 28       	lddpc	r8,8000b3c0 <fat_mount+0x5d0>
8000b37a:	f1 38 00 2d 	ld.ub	r8,r8[45]
8000b37e:	b2 88       	st.b	r9[0x0],r8
      LSB2( fs_g_nav.rootdir.u32_cluster ) = LOW2_32_BPB_RootClus;
8000b380:	48 a8       	lddpc	r8,8000b3a8 <fat_mount+0x5b8>
8000b382:	2e 88       	sub	r8,-24
8000b384:	f0 c9 ff ff 	sub	r9,r8,-1
8000b388:	48 e8       	lddpc	r8,8000b3c0 <fat_mount+0x5d0>
8000b38a:	f1 38 00 2e 	ld.ub	r8,r8[46]
8000b38e:	b2 88       	st.b	r9[0x0],r8
      LSB3( fs_g_nav.rootdir.u32_cluster ) = LOW3_32_BPB_RootClus;
8000b390:	48 68       	lddpc	r8,8000b3a8 <fat_mount+0x5b8>
8000b392:	f0 c9 ff e8 	sub	r9,r8,-24
8000b396:	48 b8       	lddpc	r8,8000b3c0 <fat_mount+0x5d0>
8000b398:	f1 38 00 2f 	ld.ub	r8,r8[47]
8000b39c:	b2 88       	st.b	r9[0x0],r8
   }
   }

   return true;
8000b39e:	30 18       	mov	r8,1
}
8000b3a0:	10 9c       	mov	r12,r8
8000b3a2:	2f ed       	sub	sp,-8
8000b3a4:	e3 cd 80 80 	ldm	sp++,r7,pc
8000b3a8:	00 00       	add	r0,r0
8000b3aa:	0d 84       	ld.ub	r4,r6[0x0]
8000b3ac:	80 00       	ld.sh	r0,r0[0x0]
8000b3ae:	a2 b4       	st.b	r1[0x3],r4
8000b3b0:	00 00       	add	r0,r0
8000b3b2:	0d d0       	ld.ub	r0,r6[0x5]
8000b3b4:	00 00       	add	r0,r0
8000b3b6:	0b 40       	ld.w	r0,--r5
8000b3b8:	80 00       	ld.sh	r0,r0[0x0]
8000b3ba:	8a 10       	ld.sh	r0,r5[0x2]
8000b3bc:	80 00       	ld.sh	r0,r0[0x0]
8000b3be:	a8 bc       	st.b	r4[0x3],r12
8000b3c0:	00 00       	add	r0,r0
8000b3c2:	0b 84       	ld.ub	r4,r5[0x0]
8000b3c4:	00 00       	add	r0,r0
8000b3c6:	0d d4       	ld.ub	r4,r6[0x5]
8000b3c8:	80 00       	ld.sh	r0,r0[0x0]
8000b3ca:	ac a4       	st.b	r6[0x2],r4

8000b3cc <fat_write_fat32_FSInfo>:
//!
//! @return    false in case of error, see global value "fs_g_status" for more detail
//! @return    true otherwise
//!
bool  fat_write_fat32_FSInfo( uint32_t u32_nb_free_cluster )
{
8000b3cc:	eb cd 40 80 	pushm	r7,lr
8000b3d0:	1a 97       	mov	r7,sp
8000b3d2:	20 1d       	sub	sp,4
8000b3d4:	ef 4c ff fc 	st.w	r7[-4],r12
   // Init sector
   fs_gu32_addrsector = fs_g_nav.u32_ptr_fat - fs_g_nav.u16_offset_FSInfo;
8000b3d8:	4a a8       	lddpc	r8,8000b480 <fat_write_fat32_FSInfo+0xb4>
8000b3da:	70 49       	ld.w	r9,r8[0x10]
8000b3dc:	4a 98       	lddpc	r8,8000b480 <fat_write_fat32_FSInfo+0xb4>
8000b3de:	90 48       	ld.sh	r8,r8[0x8]
8000b3e0:	5c 78       	castu.h	r8
8000b3e2:	10 19       	sub	r9,r8
8000b3e4:	4a 88       	lddpc	r8,8000b484 <fat_write_fat32_FSInfo+0xb8>
8000b3e6:	91 09       	st.w	r8[0x0],r9

   if( !fat_cache_read_sector( false ))
8000b3e8:	30 0c       	mov	r12,0
8000b3ea:	f0 1f 00 28 	mcall	8000b488 <fat_write_fat32_FSInfo+0xbc>
8000b3ee:	18 98       	mov	r8,r12
8000b3f0:	ec 18 00 01 	eorl	r8,0x1
8000b3f4:	5c 58       	castu.b	r8
8000b3f6:	c0 30       	breq	8000b3fc <fat_write_fat32_FSInfo+0x30>
      return false;
8000b3f8:	30 08       	mov	r8,0
8000b3fa:	c3 f8       	rjmp	8000b478 <fat_write_fat32_FSInfo+0xac>
   fat_cache_mark_sector_as_dirty();
8000b3fc:	f0 1f 00 24 	mcall	8000b48c <fat_write_fat32_FSInfo+0xc0>
   fat_cache_clear();
8000b400:	f0 1f 00 24 	mcall	8000b490 <fat_write_fat32_FSInfo+0xc4>

   // Fill sector
   // offset 00-04, This lead signature
   memcpy_code2ram( &fs_g_sector[0], const_FSI_LeadSig, sizeof(const_FSI_LeadSig) );
8000b404:	30 4a       	mov	r10,4
8000b406:	4a 4b       	lddpc	r11,8000b494 <fat_write_fat32_FSInfo+0xc8>
8000b408:	4a 4c       	lddpc	r12,8000b498 <fat_write_fat32_FSInfo+0xcc>
8000b40a:	f0 1f 00 25 	mcall	8000b49c <fat_write_fat32_FSInfo+0xd0>
   // offset 004-483, reserved (fill with 0)
   // offset 484-487, signature
   memcpy_code2ram( &fs_g_sector[484], const_FSI_StrucSig, sizeof(const_FSI_StrucSig) );
8000b40e:	4a 38       	lddpc	r8,8000b498 <fat_write_fat32_FSInfo+0xcc>
8000b410:	f0 c8 fe 1c 	sub	r8,r8,-484
8000b414:	30 4a       	mov	r10,4
8000b416:	4a 3b       	lddpc	r11,8000b4a0 <fat_write_fat32_FSInfo+0xd4>
8000b418:	10 9c       	mov	r12,r8
8000b41a:	f0 1f 00 21 	mcall	8000b49c <fat_write_fat32_FSInfo+0xd0>
   // offset 488-491, free cluster count (by default NO value)
   fs_g_sector[488] = LSB0(u32_nb_free_cluster);
8000b41e:	ee c8 00 04 	sub	r8,r7,4
8000b422:	2f d8       	sub	r8,-3
8000b424:	11 88       	ld.ub	r8,r8[0x0]
8000b426:	49 d9       	lddpc	r9,8000b498 <fat_write_fat32_FSInfo+0xcc>
8000b428:	f3 68 01 e8 	st.b	r9[488],r8
   fs_g_sector[489] = LSB1(u32_nb_free_cluster);
8000b42c:	ee c8 00 04 	sub	r8,r7,4
8000b430:	2f e8       	sub	r8,-2
8000b432:	11 88       	ld.ub	r8,r8[0x0]
8000b434:	49 99       	lddpc	r9,8000b498 <fat_write_fat32_FSInfo+0xcc>
8000b436:	f3 68 01 e9 	st.b	r9[489],r8
   fs_g_sector[490] = LSB2(u32_nb_free_cluster);
8000b43a:	ee c8 00 04 	sub	r8,r7,4
8000b43e:	2f f8       	sub	r8,-1
8000b440:	11 88       	ld.ub	r8,r8[0x0]
8000b442:	49 69       	lddpc	r9,8000b498 <fat_write_fat32_FSInfo+0xcc>
8000b444:	f3 68 01 ea 	st.b	r9[490],r8
   fs_g_sector[491] = LSB3(u32_nb_free_cluster);
8000b448:	ee c8 00 04 	sub	r8,r7,4
8000b44c:	11 88       	ld.ub	r8,r8[0x0]
8000b44e:	49 39       	lddpc	r9,8000b498 <fat_write_fat32_FSInfo+0xcc>
8000b450:	f3 68 01 eb 	st.b	r9[491],r8
   // offset 492-495, indicates the cluster number at which the driver should start looking for free clusters (by default NO value)
   memset( &fs_g_sector[492] , 0xFF , 4 );
8000b454:	49 18       	lddpc	r8,8000b498 <fat_write_fat32_FSInfo+0xcc>
8000b456:	f0 c8 fe 14 	sub	r8,r8,-492
8000b45a:	30 4a       	mov	r10,4
8000b45c:	e0 6b 00 ff 	mov	r11,255
8000b460:	10 9c       	mov	r12,r8
8000b462:	f0 1f 00 11 	mcall	8000b4a4 <fat_write_fat32_FSInfo+0xd8>
   // offset 496-509, reserved (fill with 0)
   // offset 510-511, Signature
   fs_g_sector[510] = FS_BR_SIGNATURE_LOW;
8000b466:	48 d9       	lddpc	r9,8000b498 <fat_write_fat32_FSInfo+0xcc>
8000b468:	35 58       	mov	r8,85
8000b46a:	f3 68 01 fe 	st.b	r9[510],r8
   fs_g_sector[511] = FS_BR_SIGNATURE_HIGH;
8000b46e:	48 b9       	lddpc	r9,8000b498 <fat_write_fat32_FSInfo+0xcc>
8000b470:	3a a8       	mov	r8,-86
8000b472:	f3 68 01 ff 	st.b	r9[511],r8
   return true;
8000b476:	30 18       	mov	r8,1
}
8000b478:	10 9c       	mov	r12,r8
8000b47a:	2f fd       	sub	sp,-4
8000b47c:	e3 cd 80 80 	ldm	sp++,r7,pc
8000b480:	00 00       	add	r0,r0
8000b482:	0d 84       	ld.ub	r4,r6[0x0]
8000b484:	00 00       	add	r0,r0
8000b486:	0b 40       	ld.w	r0,--r5
8000b488:	80 00       	ld.sh	r0,r0[0x0]
8000b48a:	a8 bc       	st.b	r4[0x3],r12
8000b48c:	80 00       	ld.sh	r0,r0[0x0]
8000b48e:	a9 ac       	sbr	r12,0x8
8000b490:	80 00       	ld.sh	r0,r0[0x0]
8000b492:	a9 8c       	lsr	r12,0x8
8000b494:	80 01       	ld.sh	r1,r0[0x0]
8000b496:	4c 20       	lddpc	r0,8000b59c <fat_initialize_dir+0xf4>
8000b498:	00 00       	add	r0,r0
8000b49a:	0b 84       	ld.ub	r4,r5[0x0]
8000b49c:	80 00       	ld.sh	r0,r0[0x0]
8000b49e:	f2 16 80 01 	pref	r6[-32767]
8000b4a2:	4c 24       	lddpc	r4,8000b5a8 <fat_initialize_dir+0x100>
8000b4a4:	80 00       	ld.sh	r0,r0[0x0]
8000b4a6:	f3 5e eb cd 	st.h	r9[-5171],lr

8000b4a8 <fat_initialize_dir>:
//! OUT:
//!   update the sector cache with init directory data
//! @endverbatim
//!
bool  fat_initialize_dir( void )
{
8000b4a8:	eb cd 40 80 	pushm	r7,lr
8000b4ac:	1a 97       	mov	r7,sp
8000b4ae:	20 1d       	sub	sp,4
   uint8_t u8_i;

   // Clear the cluster corresponding at directory
   if( !fat_clear_cluster())
8000b4b0:	f0 1f 00 44 	mcall	8000b5c0 <fat_initialize_dir+0x118>
8000b4b4:	18 98       	mov	r8,r12
8000b4b6:	ec 18 00 01 	eorl	r8,0x1
8000b4ba:	5c 58       	castu.b	r8
8000b4bc:	c0 30       	breq	8000b4c2 <fat_initialize_dir+0x1a>
      return false;
8000b4be:	30 08       	mov	r8,0
8000b4c0:	c7 b8       	rjmp	8000b5b6 <fat_initialize_dir+0x10e>
   fat_cache_mark_sector_as_dirty();
8000b4c2:	f0 1f 00 41 	mcall	8000b5c4 <fat_initialize_dir+0x11c>
   // here, the internal cache is the first sector of the cluster

   // Create the dot "." entry, this one is a directory that points to itself
   fs_g_sector[0]='.';
8000b4c6:	4c 19       	lddpc	r9,8000b5c8 <fat_initialize_dir+0x120>
8000b4c8:	32 e8       	mov	r8,46
8000b4ca:	b2 88       	st.b	r9[0x0],r8
   for( u8_i=1 ; u8_i<11 ; u8_i++ )
8000b4cc:	30 18       	mov	r8,1
8000b4ce:	ef 68 ff ff 	st.b	r7[-1],r8
8000b4d2:	c0 c8       	rjmp	8000b4ea <fat_initialize_dir+0x42>
      fs_g_sector[u8_i]=' ';
8000b4d4:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000b4d8:	4b ca       	lddpc	r10,8000b5c8 <fat_initialize_dir+0x120>
8000b4da:	32 08       	mov	r8,32
8000b4dc:	f4 09 0b 08 	st.b	r10[r9],r8
   fat_cache_mark_sector_as_dirty();
   // here, the internal cache is the first sector of the cluster

   // Create the dot "." entry, this one is a directory that points to itself
   fs_g_sector[0]='.';
   for( u8_i=1 ; u8_i<11 ; u8_i++ )
8000b4e0:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000b4e4:	2f f8       	sub	r8,-1
8000b4e6:	ef 68 ff ff 	st.b	r7[-1],r8
8000b4ea:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000b4ee:	30 a8       	mov	r8,10
8000b4f0:	f0 09 18 00 	cp.b	r9,r8
8000b4f4:	fe 98 ff f0 	brls	8000b4d4 <fat_initialize_dir+0x2c>
      fs_g_sector[u8_i]=' ';
   fs_g_sector[11]=FS_ATTR_DIRECTORY;
8000b4f8:	4b 49       	lddpc	r9,8000b5c8 <fat_initialize_dir+0x120>
8000b4fa:	31 08       	mov	r8,16
8000b4fc:	f3 68 00 0b 	st.b	r9[11],r8
   fs_g_sector[26]= LSB0( fs_g_nav_entry.u32_cluster );
8000b500:	4b 38       	lddpc	r8,8000b5cc <fat_initialize_dir+0x124>
8000b502:	2f c8       	sub	r8,-4
8000b504:	2f d8       	sub	r8,-3
8000b506:	11 88       	ld.ub	r8,r8[0x0]
8000b508:	4b 09       	lddpc	r9,8000b5c8 <fat_initialize_dir+0x120>
8000b50a:	f3 68 00 1a 	st.b	r9[26],r8
   fs_g_sector[27]= LSB1( fs_g_nav_entry.u32_cluster );
8000b50e:	4b 08       	lddpc	r8,8000b5cc <fat_initialize_dir+0x124>
8000b510:	2f c8       	sub	r8,-4
8000b512:	2f e8       	sub	r8,-2
8000b514:	11 88       	ld.ub	r8,r8[0x0]
8000b516:	4a d9       	lddpc	r9,8000b5c8 <fat_initialize_dir+0x120>
8000b518:	f3 68 00 1b 	st.b	r9[27],r8
   fs_g_sector[20]= LSB2( fs_g_nav_entry.u32_cluster );
8000b51c:	4a c8       	lddpc	r8,8000b5cc <fat_initialize_dir+0x124>
8000b51e:	2f c8       	sub	r8,-4
8000b520:	2f f8       	sub	r8,-1
8000b522:	11 88       	ld.ub	r8,r8[0x0]
8000b524:	4a 99       	lddpc	r9,8000b5c8 <fat_initialize_dir+0x120>
8000b526:	f3 68 00 14 	st.b	r9[20],r8
   fs_g_sector[21]= LSB3( fs_g_nav_entry.u32_cluster );
8000b52a:	4a 98       	lddpc	r8,8000b5cc <fat_initialize_dir+0x124>
8000b52c:	2f c8       	sub	r8,-4
8000b52e:	11 88       	ld.ub	r8,r8[0x0]
8000b530:	4a 69       	lddpc	r9,8000b5c8 <fat_initialize_dir+0x120>
8000b532:	f3 68 00 15 	st.b	r9[21],r8
   // Create the dotdot ".." entry, this one points to the starting cluster of the parent directory
   fs_g_sector[FS_SIZE_FILE_ENTRY+0]='.';
8000b536:	4a 59       	lddpc	r9,8000b5c8 <fat_initialize_dir+0x120>
8000b538:	32 e8       	mov	r8,46
8000b53a:	f3 68 00 20 	st.b	r9[32],r8
   fs_g_sector[FS_SIZE_FILE_ENTRY+1]='.';
8000b53e:	4a 39       	lddpc	r9,8000b5c8 <fat_initialize_dir+0x120>
8000b540:	32 e8       	mov	r8,46
8000b542:	f3 68 00 21 	st.b	r9[33],r8
   for( u8_i=2 ; u8_i<11 ; u8_i++ )
8000b546:	30 28       	mov	r8,2
8000b548:	ef 68 ff ff 	st.b	r7[-1],r8
8000b54c:	c0 e8       	rjmp	8000b568 <fat_initialize_dir+0xc0>
      fs_g_sector[FS_SIZE_FILE_ENTRY+u8_i]=' ';
8000b54e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000b552:	f0 c9 ff e0 	sub	r9,r8,-32
8000b556:	49 da       	lddpc	r10,8000b5c8 <fat_initialize_dir+0x120>
8000b558:	32 08       	mov	r8,32
8000b55a:	f4 09 0b 08 	st.b	r10[r9],r8
   fs_g_sector[20]= LSB2( fs_g_nav_entry.u32_cluster );
   fs_g_sector[21]= LSB3( fs_g_nav_entry.u32_cluster );
   // Create the dotdot ".." entry, this one points to the starting cluster of the parent directory
   fs_g_sector[FS_SIZE_FILE_ENTRY+0]='.';
   fs_g_sector[FS_SIZE_FILE_ENTRY+1]='.';
   for( u8_i=2 ; u8_i<11 ; u8_i++ )
8000b55e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000b562:	2f f8       	sub	r8,-1
8000b564:	ef 68 ff ff 	st.b	r7[-1],r8
8000b568:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000b56c:	30 a8       	mov	r8,10
8000b56e:	f0 09 18 00 	cp.b	r9,r8
8000b572:	fe 98 ff ee 	brls	8000b54e <fat_initialize_dir+0xa6>
      fs_g_sector[FS_SIZE_FILE_ENTRY+u8_i]=' ';
   fs_g_sector[FS_SIZE_FILE_ENTRY+11]=FS_ATTR_DIRECTORY;
8000b576:	49 59       	lddpc	r9,8000b5c8 <fat_initialize_dir+0x120>
8000b578:	31 08       	mov	r8,16
8000b57a:	f3 68 00 2b 	st.b	r9[43],r8
   fs_g_sector[FS_SIZE_FILE_ENTRY+26]= LSB0( fs_g_nav.u32_cluster_sel_dir );
8000b57e:	49 58       	lddpc	r8,8000b5d0 <fat_initialize_dir+0x128>
8000b580:	2e 08       	sub	r8,-32
8000b582:	2f d8       	sub	r8,-3
8000b584:	11 88       	ld.ub	r8,r8[0x0]
8000b586:	49 19       	lddpc	r9,8000b5c8 <fat_initialize_dir+0x120>
8000b588:	f3 68 00 3a 	st.b	r9[58],r8
   fs_g_sector[FS_SIZE_FILE_ENTRY+27]= LSB1( fs_g_nav.u32_cluster_sel_dir );
8000b58c:	49 18       	lddpc	r8,8000b5d0 <fat_initialize_dir+0x128>
8000b58e:	2e 08       	sub	r8,-32
8000b590:	2f e8       	sub	r8,-2
8000b592:	11 88       	ld.ub	r8,r8[0x0]
8000b594:	48 d9       	lddpc	r9,8000b5c8 <fat_initialize_dir+0x120>
8000b596:	f3 68 00 3b 	st.b	r9[59],r8
   fs_g_sector[FS_SIZE_FILE_ENTRY+20]= LSB2( fs_g_nav.u32_cluster_sel_dir );
8000b59a:	48 e8       	lddpc	r8,8000b5d0 <fat_initialize_dir+0x128>
8000b59c:	2e 08       	sub	r8,-32
8000b59e:	2f f8       	sub	r8,-1
8000b5a0:	11 88       	ld.ub	r8,r8[0x0]
8000b5a2:	48 a9       	lddpc	r9,8000b5c8 <fat_initialize_dir+0x120>
8000b5a4:	f3 68 00 34 	st.b	r9[52],r8
   fs_g_sector[FS_SIZE_FILE_ENTRY+21]= LSB3( fs_g_nav.u32_cluster_sel_dir );
8000b5a8:	48 a8       	lddpc	r8,8000b5d0 <fat_initialize_dir+0x128>
8000b5aa:	2e 08       	sub	r8,-32
8000b5ac:	11 88       	ld.ub	r8,r8[0x0]
8000b5ae:	48 79       	lddpc	r9,8000b5c8 <fat_initialize_dir+0x120>
8000b5b0:	f3 68 00 35 	st.b	r9[53],r8

   return true;
8000b5b4:	30 18       	mov	r8,1
}
8000b5b6:	10 9c       	mov	r12,r8
8000b5b8:	2f fd       	sub	sp,-4
8000b5ba:	e3 cd 80 80 	ldm	sp++,r7,pc
8000b5be:	00 00       	add	r0,r0
8000b5c0:	80 00       	ld.sh	r0,r0[0x0]
8000b5c2:	c4 68       	rjmp	8000b64e <fat_create_entry_file_name+0x7a>
8000b5c4:	80 00       	ld.sh	r0,r0[0x0]
8000b5c6:	a9 ac       	sbr	r12,0x8
8000b5c8:	00 00       	add	r0,r0
8000b5ca:	0b 84       	ld.ub	r4,r5[0x0]
8000b5cc:	00 00       	add	r0,r0
8000b5ce:	0b 44       	ld.w	r4,--r5
8000b5d0:	00 00       	add	r0,r0
8000b5d2:	0d 84       	ld.ub	r4,r6[0x0]

8000b5d4 <fat_create_entry_file_name>:
//! b_unicode is a global flag to select UNICODE or ASCII
//! The name must be terminated by NULL and it can't have two dot characters.
//! @endverbatim
//!
bool  fat_create_entry_file_name( FS_STRING sz_name )
{
8000b5d4:	eb cd 40 80 	pushm	r7,lr
8000b5d8:	1a 97       	mov	r7,sp
8000b5da:	20 2d       	sub	sp,8
8000b5dc:	ef 4c ff f8 	st.w	r7[-8],r12
   uint8_t u8_i, u8_nb;
   uint8_t u8_crc, u8_nb_entry;

   // Compute the number of entry for this name
   u8_nb_entry = fat_check_name( sz_name  );
8000b5e0:	ee fc ff f8 	ld.w	r12,r7[-8]
8000b5e4:	f0 1f 00 43 	mcall	8000b6f0 <fat_create_entry_file_name+0x11c>
8000b5e8:	18 98       	mov	r8,r12
8000b5ea:	ef 68 ff ff 	st.b	r7[-1],r8
   if( 0 == u8_nb_entry )
8000b5ee:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000b5f2:	30 08       	mov	r8,0
8000b5f4:	f0 09 18 00 	cp.b	r9,r8
8000b5f8:	c0 31       	brne	8000b5fe <fat_create_entry_file_name+0x2a>
      return false;
8000b5fa:	30 08       	mov	r8,0
8000b5fc:	c7 58       	rjmp	8000b6e6 <fat_create_entry_file_name+0x112>

   // Search a unique short entry
   u8_nb = fat_find_short_entry_name( sz_name  );
8000b5fe:	ee fc ff f8 	ld.w	r12,r7[-8]
8000b602:	f0 1f 00 3d 	mcall	8000b6f4 <fat_create_entry_file_name+0x120>
8000b606:	18 98       	mov	r8,r12
8000b608:	ef 68 ff fd 	st.b	r7[-3],r8
   if( 0 == u8_nb )
8000b60c:	ef 39 ff fd 	ld.ub	r9,r7[-3]
8000b610:	30 08       	mov	r8,0
8000b612:	f0 09 18 00 	cp.b	r9,r8
8000b616:	c0 61       	brne	8000b622 <fat_create_entry_file_name+0x4e>
   {
      fs_g_status = FS_ERR_FILE_EXIST;
8000b618:	4b 89       	lddpc	r9,8000b6f8 <fat_create_entry_file_name+0x124>
8000b61a:	32 a8       	mov	r8,42
8000b61c:	b2 88       	st.b	r9[0x0],r8
      return false;  // All short name exist
8000b61e:	30 08       	mov	r8,0
8000b620:	c6 38       	rjmp	8000b6e6 <fat_create_entry_file_name+0x112>
   }

   // Alloc a space for entries
   if( !fat_alloc_entry_free( u8_nb_entry ))
8000b622:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000b626:	10 9c       	mov	r12,r8
8000b628:	f0 1f 00 35 	mcall	8000b6fc <fat_create_entry_file_name+0x128>
8000b62c:	18 98       	mov	r8,r12
8000b62e:	ec 18 00 01 	eorl	r8,0x1
8000b632:	5c 58       	castu.b	r8
8000b634:	c0 30       	breq	8000b63a <fat_create_entry_file_name+0x66>
      return false;
8000b636:	30 08       	mov	r8,0
8000b638:	c5 78       	rjmp	8000b6e6 <fat_create_entry_file_name+0x112>
   // Remark: here the pointer of entry is on the last free entry of new space allocated

   // Add short name entry
   u8_crc = fat_create_short_entry_name( sz_name , 0 , u8_nb, false  );
8000b63a:	ef 38 ff fd 	ld.ub	r8,r7[-3]
8000b63e:	30 09       	mov	r9,0
8000b640:	10 9a       	mov	r10,r8
8000b642:	30 0b       	mov	r11,0
8000b644:	ee fc ff f8 	ld.w	r12,r7[-8]
8000b648:	f0 1f 00 2e 	mcall	8000b700 <fat_create_entry_file_name+0x12c>
8000b64c:	18 98       	mov	r8,r12
8000b64e:	ef 68 ff fe 	st.b	r7[-2],r8
   u8_nb_entry--;
8000b652:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000b656:	20 18       	sub	r8,1
8000b658:	ef 68 ff ff 	st.b	r7[-1],r8

   // For each long name entry
   for( u8_i=1 ; u8_i<=u8_nb_entry ; u8_i++ )
8000b65c:	30 18       	mov	r8,1
8000b65e:	ef 68 ff fc 	st.b	r7[-4],r8
8000b662:	c3 08       	rjmp	8000b6c2 <fat_create_entry_file_name+0xee>
   {
      // Go to previous entry
      fs_g_nav_fast.u16_entry_pos_sel_file--;
8000b664:	4a 88       	lddpc	r8,8000b704 <fat_create_entry_file_name+0x130>
8000b666:	90 18       	ld.sh	r8,r8[0x2]
8000b668:	20 18       	sub	r8,1
8000b66a:	5c 88       	casts.h	r8
8000b66c:	4a 69       	lddpc	r9,8000b704 <fat_create_entry_file_name+0x130>
8000b66e:	b2 18       	st.h	r9[0x2],r8
      if( !fat_read_dir())
8000b670:	f0 1f 00 26 	mcall	8000b708 <fat_create_entry_file_name+0x134>
8000b674:	18 98       	mov	r8,r12
8000b676:	ec 18 00 01 	eorl	r8,0x1
8000b67a:	5c 58       	castu.b	r8
8000b67c:	c0 30       	breq	8000b682 <fat_create_entry_file_name+0xae>
         return false;
8000b67e:	30 08       	mov	r8,0
8000b680:	c3 38       	rjmp	8000b6e6 <fat_create_entry_file_name+0x112>
      // Write a long name entry
      if( u8_i == u8_nb_entry )
8000b682:	ef 39 ff fc 	ld.ub	r9,r7[-4]
8000b686:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000b68a:	f0 09 18 00 	cp.b	r9,r8
8000b68e:	c0 61       	brne	8000b69a <fat_create_entry_file_name+0xc6>
      {
         u8_i += FS_ENTRY_LFN_LAST;
8000b690:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000b694:	2c 08       	sub	r8,-64
8000b696:	ef 68 ff fc 	st.b	r7[-4],r8
      }
      fat_create_long_name_entry( sz_name , u8_crc , u8_i );
8000b69a:	ef 39 ff fc 	ld.ub	r9,r7[-4]
8000b69e:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8000b6a2:	12 9a       	mov	r10,r9
8000b6a4:	10 9b       	mov	r11,r8
8000b6a6:	ee fc ff f8 	ld.w	r12,r7[-8]
8000b6aa:	f0 1f 00 19 	mcall	8000b70c <fat_create_entry_file_name+0x138>
      sz_name += FS_SIZE_LFN_ENTRY*(Is_unicode? 2 : 1 );
8000b6ae:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b6b2:	2f 38       	sub	r8,-13
8000b6b4:	ef 48 ff f8 	st.w	r7[-8],r8
   // Add short name entry
   u8_crc = fat_create_short_entry_name( sz_name , 0 , u8_nb, false  );
   u8_nb_entry--;

   // For each long name entry
   for( u8_i=1 ; u8_i<=u8_nb_entry ; u8_i++ )
8000b6b8:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000b6bc:	2f f8       	sub	r8,-1
8000b6be:	ef 68 ff fc 	st.b	r7[-4],r8
8000b6c2:	ef 39 ff fc 	ld.ub	r9,r7[-4]
8000b6c6:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000b6ca:	f0 09 18 00 	cp.b	r9,r8
8000b6ce:	fe 98 ff cb 	brls	8000b664 <fat_create_entry_file_name+0x90>
      }
      fat_create_long_name_entry( sz_name , u8_crc , u8_i );
      sz_name += FS_SIZE_LFN_ENTRY*(Is_unicode? 2 : 1 );
  }
  // Go back to the short name entry
  fs_g_nav_fast.u16_entry_pos_sel_file += u8_nb_entry;
8000b6d2:	48 d8       	lddpc	r8,8000b704 <fat_create_entry_file_name+0x130>
8000b6d4:	90 19       	ld.sh	r9,r8[0x2]
8000b6d6:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000b6da:	f2 08 00 08 	add	r8,r9,r8
8000b6de:	5c 88       	casts.h	r8
8000b6e0:	48 99       	lddpc	r9,8000b704 <fat_create_entry_file_name+0x130>
8000b6e2:	b2 18       	st.h	r9[0x2],r8
  return true;
8000b6e4:	30 18       	mov	r8,1
}
8000b6e6:	10 9c       	mov	r12,r8
8000b6e8:	2f ed       	sub	sp,-8
8000b6ea:	e3 cd 80 80 	ldm	sp++,r7,pc
8000b6ee:	00 00       	add	r0,r0
8000b6f0:	80 00       	ld.sh	r0,r0[0x0]
8000b6f2:	bc e8       	st.b	lr[0x6],r8
8000b6f4:	80 00       	ld.sh	r0,r0[0x0]
8000b6f6:	bb a8       	sbr	r8,0x1a
8000b6f8:	00 00       	add	r0,r0
8000b6fa:	0d d4       	ld.ub	r4,r6[0x5]
8000b6fc:	80 00       	ld.sh	r0,r0[0x0]
8000b6fe:	be 58       	st.h	pc[0xa],r8
8000b700:	80 00       	ld.sh	r0,r0[0x0]
8000b702:	b8 6c       	st.h	r12[0xc],r12
8000b704:	00 00       	add	r0,r0
8000b706:	0d d0       	ld.ub	r0,r6[0x5]
8000b708:	80 00       	ld.sh	r0,r0[0x0]
8000b70a:	a0 38       	st.h	r0[0x6],r8
8000b70c:	80 00       	ld.sh	r0,r0[0x0]
8000b70e:	b7 10       	ld.d	r0,--r11

8000b710 <fat_create_long_name_entry>:
//! @verbatim
//! OUT: Update the entry in internal cache sector with a new long name entry
//! @endverbatim
//!
void  fat_create_long_name_entry( FS_STRING sz_name , uint8_t u8_crc , uint8_t u8_id  )
{
8000b710:	eb cd 40 80 	pushm	r7,lr
8000b714:	1a 97       	mov	r7,sp
8000b716:	20 6d       	sub	sp,24
8000b718:	ef 4c ff f0 	st.w	r7[-16],r12
8000b71c:	16 99       	mov	r9,r11
8000b71e:	14 98       	mov	r8,r10
8000b720:	ef 69 ff ec 	st.b	r7[-20],r9
8000b724:	ef 68 ff e8 	st.b	r7[-24],r8
   PTR_CACHE ptr_entry;
   bool b_end_of_name = false;
8000b728:	30 08       	mov	r8,0
8000b72a:	ef 68 ff ff 	st.b	r7[-1],r8

   fat_cache_mark_sector_as_dirty();
8000b72e:	f0 1f 00 4e 	mcall	8000b864 <fat_create_long_name_entry+0x154>
   ptr_entry = fat_get_ptr_entry();
8000b732:	f0 1f 00 4e 	mcall	8000b868 <fat_create_long_name_entry+0x158>
8000b736:	18 98       	mov	r8,r12
8000b738:	ef 48 ff f8 	st.w	r7[-8],r8
   *ptr_entry = u8_id;
8000b73c:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000b740:	ef 38 ff e8 	ld.ub	r8,r7[-24]
8000b744:	b2 88       	st.b	r9[0x0],r8
   ptr_entry++;   // The long name start at offset 1 of the entry file
8000b746:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b74a:	2f f8       	sub	r8,-1
8000b74c:	ef 48 ff f8 	st.w	r7[-8],r8

   for( u8_id=1; u8_id<FS_SIZE_FILE_ENTRY ; u8_id++ , ptr_entry++ )
8000b750:	30 18       	mov	r8,1
8000b752:	ef 68 ff e8 	st.b	r7[-24],r8
8000b756:	c7 c8       	rjmp	8000b84e <fat_create_long_name_entry+0x13e>
   {
      // fields with no character
      if( 11 == u8_id)
8000b758:	ef 39 ff e8 	ld.ub	r9,r7[-24]
8000b75c:	30 b8       	mov	r8,11
8000b75e:	f0 09 18 00 	cp.b	r9,r8
8000b762:	c0 61       	brne	8000b76e <fat_create_long_name_entry+0x5e>
      {
         *ptr_entry = FS_ATTR_LFN_ENTRY;  // Attribute field
8000b764:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000b768:	30 f8       	mov	r8,15
8000b76a:	b2 88       	st.b	r9[0x0],r8
         continue;
8000b76c:	c6 78       	rjmp	8000b83a <fat_create_long_name_entry+0x12a>
      }
      if( (12 == u8_id)
8000b76e:	ef 39 ff e8 	ld.ub	r9,r7[-24]
8000b772:	30 c8       	mov	r8,12
8000b774:	f0 09 18 00 	cp.b	r9,r8
8000b778:	c5 c0       	breq	8000b830 <fat_create_long_name_entry+0x120>
8000b77a:	ef 39 ff e8 	ld.ub	r9,r7[-24]
8000b77e:	31 a8       	mov	r8,26
8000b780:	f0 09 18 00 	cp.b	r9,r8
8000b784:	c5 80       	breq	8000b834 <fat_create_long_name_entry+0x124>
8000b786:	ef 39 ff e8 	ld.ub	r9,r7[-24]
8000b78a:	31 b8       	mov	r8,27
8000b78c:	f0 09 18 00 	cp.b	r9,r8
8000b790:	c5 40       	breq	8000b838 <fat_create_long_name_entry+0x128>
      {
         // Reserved field
         // *ptr_entry = 0x00;            // No necessary because the cache must be clean
         continue;
      }
      if( 13 == u8_id)
8000b792:	ef 39 ff e8 	ld.ub	r9,r7[-24]
8000b796:	30 d8       	mov	r8,13
8000b798:	f0 09 18 00 	cp.b	r9,r8
8000b79c:	c0 71       	brne	8000b7aa <fat_create_long_name_entry+0x9a>
      {
         *ptr_entry = u8_crc;             // CRC field
8000b79e:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000b7a2:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8000b7a6:	b2 88       	st.b	r9[0x0],r8
         continue;
8000b7a8:	c4 98       	rjmp	8000b83a <fat_create_long_name_entry+0x12a>
      }

      // fields with a character
      if( !b_end_of_name )
8000b7aa:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000b7ae:	ec 18 00 01 	eorl	r8,0x1
8000b7b2:	5c 58       	castu.b	r8
8000b7b4:	c3 90       	breq	8000b826 <fat_create_long_name_entry+0x116>
         uint16_t u16_tmp;
         if( Is_unicode )
         {
            u16_tmp = ((FS_STR_UNICODE)sz_name)[0];
         }else{
            u16_tmp = sz_name[0];
8000b7b6:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000b7ba:	11 88       	ld.ub	r8,r8[0x0]
8000b7bc:	ef 58 ff f6 	st.h	r7[-10],r8
         }
         if(('\\' == u16_tmp )
8000b7c0:	ef 09 ff f6 	ld.sh	r9,r7[-10]
8000b7c4:	35 c8       	mov	r8,92
8000b7c6:	f0 09 19 00 	cp.h	r9,r8
8000b7ca:	c0 70       	breq	8000b7d8 <fat_create_long_name_entry+0xc8>
         || ('/'  == u16_tmp ) )
8000b7cc:	ef 09 ff f6 	ld.sh	r9,r7[-10]
         {
            u16_tmp = ((FS_STR_UNICODE)sz_name)[0];
         }else{
            u16_tmp = sz_name[0];
         }
         if(('\\' == u16_tmp )
8000b7d0:	32 f8       	mov	r8,47
8000b7d2:	f0 09 19 00 	cp.h	r9,r8
8000b7d6:	c0 41       	brne	8000b7de <fat_create_long_name_entry+0xce>
         || ('/'  == u16_tmp ) )
         {  // end of name
            u16_tmp = 0;                  // Set a end of name flag
8000b7d8:	30 08       	mov	r8,0
8000b7da:	ef 58 ff f6 	st.h	r7[-10],r8
         }
         if( 0 == u16_tmp )
8000b7de:	ef 08 ff f6 	ld.sh	r8,r7[-10]
8000b7e2:	58 08       	cp.w	r8,0
8000b7e4:	c0 41       	brne	8000b7ec <fat_create_long_name_entry+0xdc>
         {
            b_end_of_name = true;
8000b7e6:	30 18       	mov	r8,1
8000b7e8:	ef 68 ff ff 	st.b	r7[-1],r8
         }
         *ptr_entry = LSB(u16_tmp);
8000b7ec:	ee c8 00 0a 	sub	r8,r7,10
8000b7f0:	2f f8       	sub	r8,-1
8000b7f2:	11 88       	ld.ub	r8,r8[0x0]
8000b7f4:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000b7f8:	b2 88       	st.b	r9[0x0],r8
         ptr_entry++;
8000b7fa:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b7fe:	2f f8       	sub	r8,-1
8000b800:	ef 48 ff f8 	st.w	r7[-8],r8
         *ptr_entry = MSB(u16_tmp);
8000b804:	ee c8 00 0a 	sub	r8,r7,10
8000b808:	11 88       	ld.ub	r8,r8[0x0]
8000b80a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000b80e:	b2 88       	st.b	r9[0x0],r8
         u8_id++;
8000b810:	ef 38 ff e8 	ld.ub	r8,r7[-24]
8000b814:	2f f8       	sub	r8,-1
8000b816:	ef 68 ff e8 	st.b	r7[-24],r8
         sz_name += (Is_unicode? 2 : 1 );
8000b81a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000b81e:	2f f8       	sub	r8,-1
8000b820:	ef 48 ff f0 	st.w	r7[-16],r8
8000b824:	c0 b8       	rjmp	8000b83a <fat_create_long_name_entry+0x12a>
      }
      else
      {  // end of name
         *ptr_entry = 0xFF;               // Padding mandatory
8000b826:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000b82a:	3f f8       	mov	r8,-1
8000b82c:	b2 88       	st.b	r9[0x0],r8
8000b82e:	c0 68       	rjmp	8000b83a <fat_create_long_name_entry+0x12a>
      ||  (26 == u8_id)
      ||  (27 == u8_id) )
      {
         // Reserved field
         // *ptr_entry = 0x00;            // No necessary because the cache must be clean
         continue;
8000b830:	d7 03       	nop
8000b832:	c0 48       	rjmp	8000b83a <fat_create_long_name_entry+0x12a>
8000b834:	d7 03       	nop
8000b836:	c0 28       	rjmp	8000b83a <fat_create_long_name_entry+0x12a>
8000b838:	d7 03       	nop
   fat_cache_mark_sector_as_dirty();
   ptr_entry = fat_get_ptr_entry();
   *ptr_entry = u8_id;
   ptr_entry++;   // The long name start at offset 1 of the entry file

   for( u8_id=1; u8_id<FS_SIZE_FILE_ENTRY ; u8_id++ , ptr_entry++ )
8000b83a:	ef 38 ff e8 	ld.ub	r8,r7[-24]
8000b83e:	2f f8       	sub	r8,-1
8000b840:	ef 68 ff e8 	st.b	r7[-24],r8
8000b844:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b848:	2f f8       	sub	r8,-1
8000b84a:	ef 48 ff f8 	st.w	r7[-8],r8
8000b84e:	ef 39 ff e8 	ld.ub	r9,r7[-24]
8000b852:	31 f8       	mov	r8,31
8000b854:	f0 09 18 00 	cp.b	r9,r8
8000b858:	fe 98 ff 80 	brls	8000b758 <fat_create_long_name_entry+0x48>
      else
      {  // end of name
         *ptr_entry = 0xFF;               // Padding mandatory
      }
   } // end of loop
}
8000b85c:	2f ad       	sub	sp,-24
8000b85e:	e3 cd 80 80 	ldm	sp++,r7,pc
8000b862:	00 00       	add	r0,r0
8000b864:	80 00       	ld.sh	r0,r0[0x0]
8000b866:	a9 ac       	sbr	r12,0x8
8000b868:	80 00       	ld.sh	r0,r0[0x0]
8000b86a:	a8 94       	st.b	r4[0x1],r4

8000b86c <fat_create_short_entry_name>:
//!                           false to write in internal cache
//!
//! @return    short name CRC
//!
uint8_t    fat_create_short_entry_name( FS_STRING sz_name , FS_STRING short_name , uint8_t nb , bool mode  )
{
8000b86c:	eb cd 40 80 	pushm	r7,lr
8000b870:	1a 97       	mov	r7,sp
8000b872:	20 7d       	sub	sp,28
8000b874:	ef 4c ff f0 	st.w	r7[-16],r12
8000b878:	ef 4b ff ec 	st.w	r7[-20],r11
8000b87c:	12 98       	mov	r8,r9
8000b87e:	14 99       	mov	r9,r10
8000b880:	ef 69 ff e8 	st.b	r7[-24],r9
8000b884:	ef 68 ff e4 	st.b	r7[-28],r8
   PTR_CACHE ptr_entry = 0;
8000b888:	30 08       	mov	r8,0
8000b88a:	ef 48 ff f4 	st.w	r7[-12],r8
   uint8_t u8_i, u8_step, character;
   uint8_t crc;
   uint8_t nb_digit;

   if( !mode )
8000b88e:	ef 38 ff e4 	ld.ub	r8,r7[-28]
8000b892:	ec 18 00 01 	eorl	r8,0x1
8000b896:	5c 58       	castu.b	r8
8000b898:	c0 80       	breq	8000b8a8 <fat_create_short_entry_name+0x3c>
   {
      // Modify internal cache to create short name entry in the current entry
      fat_cache_mark_sector_as_dirty();
8000b89a:	f0 1f 00 c0 	mcall	8000bb98 <fat_create_short_entry_name+0x32c>
      // Get pointer on current entry
      ptr_entry = fat_get_ptr_entry();
8000b89e:	f0 1f 00 c0 	mcall	8000bb9c <fat_create_short_entry_name+0x330>
8000b8a2:	18 98       	mov	r8,r12
8000b8a4:	ef 48 ff f4 	st.w	r7[-12],r8
   }

   // Compute the digit number
   if( nb < 10 )        nb_digit = 1;
8000b8a8:	ef 39 ff e8 	ld.ub	r9,r7[-24]
8000b8ac:	30 98       	mov	r8,9
8000b8ae:	f0 09 18 00 	cp.b	r9,r8
8000b8b2:	e0 8b 00 06 	brhi	8000b8be <fat_create_short_entry_name+0x52>
8000b8b6:	30 18       	mov	r8,1
8000b8b8:	ef 68 ff ff 	st.b	r7[-1],r8
8000b8bc:	c0 f8       	rjmp	8000b8da <fat_create_short_entry_name+0x6e>
   else if( nb < 100 )  nb_digit = 2;
8000b8be:	ef 39 ff e8 	ld.ub	r9,r7[-24]
8000b8c2:	36 38       	mov	r8,99
8000b8c4:	f0 09 18 00 	cp.b	r9,r8
8000b8c8:	e0 8b 00 06 	brhi	8000b8d4 <fat_create_short_entry_name+0x68>
8000b8cc:	30 28       	mov	r8,2
8000b8ce:	ef 68 ff ff 	st.b	r7[-1],r8
8000b8d2:	c0 48       	rjmp	8000b8da <fat_create_short_entry_name+0x6e>
   else                 nb_digit = 3;
8000b8d4:	30 38       	mov	r8,3
8000b8d6:	ef 68 ff ff 	st.b	r7[-1],r8

   crc = u8_i = 0;
8000b8da:	30 08       	mov	r8,0
8000b8dc:	ef 68 ff fb 	st.b	r7[-5],r8
8000b8e0:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000b8e4:	ef 68 ff fe 	st.b	r7[-2],r8
   u8_step = 1;
8000b8e8:	30 18       	mov	r8,1
8000b8ea:	ef 68 ff fc 	st.b	r7[-4],r8
   {
      if( Is_unicode )
      {
         character = ((FS_STR_UNICODE)sz_name)[0];
      }else{
         character = sz_name[0];
8000b8ee:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000b8f2:	11 88       	ld.ub	r8,r8[0x0]
8000b8f4:	ef 68 ff fd 	st.b	r7[-3],r8
      }

      if( 1 == u8_step )
8000b8f8:	ef 39 ff fc 	ld.ub	r9,r7[-4]
8000b8fc:	30 18       	mov	r8,1
8000b8fe:	f0 09 18 00 	cp.b	r9,r8
8000b902:	c1 e1       	brne	8000b93e <fat_create_short_entry_name+0xd2>
      {  // step 1 = translate the name
         if( ((FS_SIZE_SFNAME_WITHOUT_EXT-(1+nb_digit)) == u8_i)    // name field is full (-2 for "~1")
8000b904:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000b908:	5c d8       	com	r8
8000b90a:	f0 c9 ff f8 	sub	r9,r8,-8
8000b90e:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000b912:	10 39       	cp.w	r9,r8
8000b914:	c0 f0       	breq	8000b932 <fat_create_short_entry_name+0xc6>
8000b916:	ef 39 ff fd 	ld.ub	r9,r7[-3]
8000b91a:	32 e8       	mov	r8,46
8000b91c:	f0 09 18 00 	cp.b	r9,r8
8000b920:	c0 90       	breq	8000b932 <fat_create_short_entry_name+0xc6>
8000b922:	ef 38 ff fd 	ld.ub	r8,r7[-3]
8000b926:	10 9c       	mov	r12,r8
8000b928:	f0 1f 00 9e 	mcall	8000bba0 <fat_create_short_entry_name+0x334>
8000b92c:	18 98       	mov	r8,r12
8000b92e:	58 08       	cp.w	r8,0
8000b930:	c0 70       	breq	8000b93e <fat_create_short_entry_name+0xd2>
         ||  ('.'    == character)                       // is the end of name without extension
         ||  fat_check_eof_name(character)            )  // is the end of name
         {
            u8_step++;                                   // go to next step
8000b932:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000b936:	2f f8       	sub	r8,-1
8000b938:	ef 68 ff fc 	st.b	r7[-4],r8
            continue;
8000b93c:	c2 c9       	rjmp	8000bb94 <fat_create_short_entry_name+0x328>
         }
      }
      if( 8 == u8_step )
8000b93e:	ef 39 ff fc 	ld.ub	r9,r7[-4]
8000b942:	30 88       	mov	r8,8
8000b944:	f0 09 18 00 	cp.b	r9,r8
8000b948:	c1 51       	brne	8000b972 <fat_create_short_entry_name+0x106>
      {  // step 8 = translate the extension
         if( (u8_i == FS_SIZE_SFNAME)                    // name field is full
8000b94a:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8000b94e:	30 b8       	mov	r8,11
8000b950:	f0 09 18 00 	cp.b	r9,r8
8000b954:	c0 90       	breq	8000b966 <fat_create_short_entry_name+0xfa>
8000b956:	ef 38 ff fd 	ld.ub	r8,r7[-3]
8000b95a:	10 9c       	mov	r12,r8
8000b95c:	f0 1f 00 91 	mcall	8000bba0 <fat_create_short_entry_name+0x334>
8000b960:	18 98       	mov	r8,r12
8000b962:	58 08       	cp.w	r8,0
8000b964:	c0 70       	breq	8000b972 <fat_create_short_entry_name+0x106>
         ||  fat_check_eof_name(character)            )  // is the end of name
         {
            u8_step++;                                   // go to next step
8000b966:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000b96a:	2f f8       	sub	r8,-1
8000b96c:	ef 68 ff fc 	st.b	r7[-4],r8
            continue;
8000b970:	c1 29       	rjmp	8000bb94 <fat_create_short_entry_name+0x328>
         }
      }
      if( (1==u8_step) || (8==u8_step) )
8000b972:	ef 39 ff fc 	ld.ub	r9,r7[-4]
8000b976:	30 18       	mov	r8,1
8000b978:	f0 09 18 00 	cp.b	r9,r8
8000b97c:	c0 70       	breq	8000b98a <fat_create_short_entry_name+0x11e>
8000b97e:	ef 39 ff fc 	ld.ub	r9,r7[-4]
8000b982:	30 88       	mov	r8,8
8000b984:	f0 09 18 00 	cp.b	r9,r8
8000b988:	c1 51       	brne	8000b9b2 <fat_create_short_entry_name+0x146>
      {  // steps to translate name
         character = fat_translate_char_shortname( character );
8000b98a:	ef 38 ff fd 	ld.ub	r8,r7[-3]
8000b98e:	10 9c       	mov	r12,r8
8000b990:	f0 1f 00 85 	mcall	8000bba4 <fat_create_short_entry_name+0x338>
8000b994:	18 98       	mov	r8,r12
8000b996:	ef 68 ff fd 	st.b	r7[-3],r8
         sz_name += (Is_unicode? 2 : 1 );
8000b99a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000b99e:	2f f8       	sub	r8,-1
8000b9a0:	ef 48 ff f0 	st.w	r7[-16],r8
         if( 0 == character )
8000b9a4:	ef 39 ff fd 	ld.ub	r9,r7[-3]
8000b9a8:	30 08       	mov	r8,0
8000b9aa:	f0 09 18 00 	cp.b	r9,r8
8000b9ae:	c0 21       	brne	8000b9b2 <fat_create_short_entry_name+0x146>
         {
            continue;                                    // Bad character, ignore this one
8000b9b0:	cf 28       	rjmp	8000bb94 <fat_create_short_entry_name+0x328>
         }
      }
      if( 7 == u8_step )
8000b9b2:	ef 39 ff fc 	ld.ub	r9,r7[-4]
8000b9b6:	30 78       	mov	r8,7
8000b9b8:	f0 09 18 00 	cp.b	r9,r8
8000b9bc:	c1 b1       	brne	8000b9f2 <fat_create_short_entry_name+0x186>
      {  // step 5 = find character '.'
         if( ('.'    == character)                       // is the end of name without extension
8000b9be:	ef 39 ff fd 	ld.ub	r9,r7[-3]
8000b9c2:	32 e8       	mov	r8,46
8000b9c4:	f0 09 18 00 	cp.b	r9,r8
8000b9c8:	c0 90       	breq	8000b9da <fat_create_short_entry_name+0x16e>
8000b9ca:	ef 38 ff fd 	ld.ub	r8,r7[-3]
8000b9ce:	10 9c       	mov	r12,r8
8000b9d0:	f0 1f 00 74 	mcall	8000bba0 <fat_create_short_entry_name+0x334>
8000b9d4:	18 98       	mov	r8,r12
8000b9d6:	58 08       	cp.w	r8,0
8000b9d8:	c0 70       	breq	8000b9e6 <fat_create_short_entry_name+0x17a>
         ||  fat_check_eof_name(character)            )  // is the end of name
         {
            u8_step++;                                   // go to next step
8000b9da:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000b9de:	2f f8       	sub	r8,-1
8000b9e0:	ef 68 ff fc 	st.b	r7[-4],r8
            continue;                                    // Bad character, ignore this one
         }
      }
      if( 7 == u8_step )
      {  // step 5 = find character '.'
         if( ('.'    == character)                       // is the end of name without extension
8000b9e4:	c0 68       	rjmp	8000b9f0 <fat_create_short_entry_name+0x184>
         ||  fat_check_eof_name(character)            )  // is the end of name
         {
            u8_step++;                                   // go to next step
         } else {
            sz_name += (Is_unicode? 2 : 1 );
8000b9e6:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000b9ea:	2f f8       	sub	r8,-1
8000b9ec:	ef 48 ff f0 	st.w	r7[-16],r8
         }
         continue;                                       // this step don't add a character in the short name
8000b9f0:	cd 28       	rjmp	8000bb94 <fat_create_short_entry_name+0x328>
      }
      if( 6 == u8_step )
8000b9f2:	ef 39 ff fc 	ld.ub	r9,r7[-4]
8000b9f6:	30 68       	mov	r8,6
8000b9f8:	f0 09 18 00 	cp.b	r9,r8
8000b9fc:	c1 01       	brne	8000ba1c <fat_create_short_entry_name+0x1b0>
      {  // step 4 = add padding
         if( u8_i == FS_SIZE_SFNAME_WITHOUT_EXT )        // end of field name without extension
8000b9fe:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8000ba02:	30 88       	mov	r8,8
8000ba04:	f0 09 18 00 	cp.b	r9,r8
8000ba08:	c0 71       	brne	8000ba16 <fat_create_short_entry_name+0x1aa>
         {
            u8_step++;                                   // go to next step
8000ba0a:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000ba0e:	2f f8       	sub	r8,-1
8000ba10:	ef 68 ff fc 	st.b	r7[-4],r8
            continue;
8000ba14:	cc 08       	rjmp	8000bb94 <fat_create_short_entry_name+0x328>
         }
         character = ' ';
8000ba16:	32 08       	mov	r8,32
8000ba18:	ef 68 ff fd 	st.b	r7[-3],r8
      }
      if( 9 == u8_step )
8000ba1c:	ef 39 ff fc 	ld.ub	r9,r7[-4]
8000ba20:	30 98       	mov	r8,9
8000ba22:	f0 09 18 00 	cp.b	r9,r8
8000ba26:	c1 01       	brne	8000ba46 <fat_create_short_entry_name+0x1da>
      {  // step 7 = add padding in extension name
         if( u8_i == FS_SIZE_SFNAME )                    // end of field name with extension
8000ba28:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8000ba2c:	30 b8       	mov	r8,11
8000ba2e:	f0 09 18 00 	cp.b	r9,r8
8000ba32:	c0 71       	brne	8000ba40 <fat_create_short_entry_name+0x1d4>

      // Compute the CRC of the short name
      crc = (crc >> 1) + ((crc & 1) << 7);               // rotate
      crc += character;                                  // add next char
   } // End of loop while
   return crc;
8000ba34:	ef 38 ff fe 	ld.ub	r8,r7[-2]
}
8000ba38:	10 9c       	mov	r12,r8
8000ba3a:	2f 9d       	sub	sp,-28
8000ba3c:	e3 cd 80 80 	ldm	sp++,r7,pc
      {  // step 7 = add padding in extension name
         if( u8_i == FS_SIZE_SFNAME )                    // end of field name with extension
         {
            break;                                       // end of loop while(1)
         }
         character = ' ';
8000ba40:	32 08       	mov	r8,32
8000ba42:	ef 68 ff fd 	st.b	r7[-3],r8
      }
      if( 5 == u8_step )
8000ba46:	ef 39 ff fc 	ld.ub	r9,r7[-4]
8000ba4a:	30 58       	mov	r8,5
8000ba4c:	f0 09 18 00 	cp.b	r9,r8
8000ba50:	c1 91       	brne	8000ba82 <fat_create_short_entry_name+0x216>
      {  // step 4 = add unit 1 of number
         character = '0'+(nb%10);
8000ba52:	ef 3a ff e8 	ld.ub	r10,r7[-24]
8000ba56:	e0 68 cc cd 	mov	r8,52429
8000ba5a:	ea 18 cc cc 	orh	r8,0xcccc
8000ba5e:	f4 08 06 48 	mulu.d	r8,r10,r8
8000ba62:	a3 99       	lsr	r9,0x3
8000ba64:	12 98       	mov	r8,r9
8000ba66:	a3 68       	lsl	r8,0x2
8000ba68:	12 08       	add	r8,r9
8000ba6a:	a1 78       	lsl	r8,0x1
8000ba6c:	f4 08 01 08 	sub	r8,r10,r8
8000ba70:	5c 58       	castu.b	r8
8000ba72:	2d 08       	sub	r8,-48
8000ba74:	ef 68 ff fd 	st.b	r7[-3],r8
         u8_step++;                                      // go to next step
8000ba78:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000ba7c:	2f f8       	sub	r8,-1
8000ba7e:	ef 68 ff fc 	st.b	r7[-4],r8
      }
      if( 4 == u8_step )
8000ba82:	ef 39 ff fc 	ld.ub	r9,r7[-4]
8000ba86:	30 48       	mov	r8,4
8000ba88:	f0 09 18 00 	cp.b	r9,r8
8000ba8c:	c2 21       	brne	8000bad0 <fat_create_short_entry_name+0x264>
      {  // step 3 = add unit 10 of number
         character = '0'+((nb%100)/10);
8000ba8e:	ef 3a ff e8 	ld.ub	r10,r7[-24]
8000ba92:	e0 68 85 1f 	mov	r8,34079
8000ba96:	ea 18 51 eb 	orh	r8,0x51eb
8000ba9a:	f4 08 06 48 	mulu.d	r8,r10,r8
8000ba9e:	f2 08 16 05 	lsr	r8,r9,0x5
8000baa2:	f0 08 10 64 	mul	r8,r8,100
8000baa6:	f4 08 01 08 	sub	r8,r10,r8
8000baaa:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8000baae:	e0 68 cc cd 	mov	r8,52429
8000bab2:	ea 18 cc cc 	orh	r8,0xcccc
8000bab6:	f2 08 06 48 	mulu.d	r8,r9,r8
8000baba:	f2 08 16 03 	lsr	r8,r9,0x3
8000babe:	5c 58       	castu.b	r8
8000bac0:	2d 08       	sub	r8,-48
8000bac2:	ef 68 ff fd 	st.b	r7[-3],r8
         u8_step++;                                      // go to next step
8000bac6:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000baca:	2f f8       	sub	r8,-1
8000bacc:	ef 68 ff fc 	st.b	r7[-4],r8
      }
      if( 3 == u8_step )
8000bad0:	ef 39 ff fc 	ld.ub	r9,r7[-4]
8000bad4:	30 38       	mov	r8,3
8000bad6:	f0 09 18 00 	cp.b	r9,r8
8000bada:	c1 41       	brne	8000bb02 <fat_create_short_entry_name+0x296>
      {  // step 2 = add unit 100 of number
         character = '0'+(nb/100);
8000badc:	ef 39 ff e8 	ld.ub	r9,r7[-24]
8000bae0:	e0 68 85 1f 	mov	r8,34079
8000bae4:	ea 18 51 eb 	orh	r8,0x51eb
8000bae8:	f2 08 06 48 	mulu.d	r8,r9,r8
8000baec:	f2 08 16 05 	lsr	r8,r9,0x5
8000baf0:	5c 58       	castu.b	r8
8000baf2:	2d 08       	sub	r8,-48
8000baf4:	ef 68 ff fd 	st.b	r7[-3],r8
         u8_step++;                                      // go to next step
8000baf8:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000bafc:	2f f8       	sub	r8,-1
8000bafe:	ef 68 ff fc 	st.b	r7[-4],r8
      }
      if( 2 == u8_step )
8000bb02:	ef 39 ff fc 	ld.ub	r9,r7[-4]
8000bb06:	30 28       	mov	r8,2
8000bb08:	f0 09 18 00 	cp.b	r9,r8
8000bb0c:	c0 e1       	brne	8000bb28 <fat_create_short_entry_name+0x2bc>
      {  // step 2 = add character '~'
         character = '~';
8000bb0e:	37 e8       	mov	r8,126
8000bb10:	ef 68 ff fd 	st.b	r7[-3],r8
         u8_step+=(4-nb_digit);                          // go to next step
8000bb14:	ef 39 ff fc 	ld.ub	r9,r7[-4]
8000bb18:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000bb1c:	f2 08 01 08 	sub	r8,r9,r8
8000bb20:	5c 58       	castu.b	r8
8000bb22:	2f c8       	sub	r8,-4
8000bb24:	ef 68 ff fc 	st.b	r7[-4],r8
      }

      if( mode )
8000bb28:	ef 39 ff e4 	ld.ub	r9,r7[-28]
8000bb2c:	30 08       	mov	r8,0
8000bb2e:	f0 09 18 00 	cp.b	r9,r8
8000bb32:	c0 c0       	breq	8000bb4a <fat_create_short_entry_name+0x2de>
      {
         // Record the short name in buffer
         *short_name = character;
8000bb34:	ee f9 ff ec 	ld.w	r9,r7[-20]
8000bb38:	ef 38 ff fd 	ld.ub	r8,r7[-3]
8000bb3c:	b2 88       	st.b	r9[0x0],r8
         short_name++;
8000bb3e:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000bb42:	2f f8       	sub	r8,-1
8000bb44:	ef 48 ff ec 	st.w	r7[-20],r8
8000bb48:	c0 b8       	rjmp	8000bb5e <fat_create_short_entry_name+0x2f2>
      }else{
         // Record the character in short entry file
         *ptr_entry = character;
8000bb4a:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000bb4e:	ef 38 ff fd 	ld.ub	r8,r7[-3]
8000bb52:	b2 88       	st.b	r9[0x0],r8
         ptr_entry++;
8000bb54:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000bb58:	2f f8       	sub	r8,-1
8000bb5a:	ef 48 ff f4 	st.w	r7[-12],r8
      }
      u8_i++;
8000bb5e:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000bb62:	2f f8       	sub	r8,-1
8000bb64:	ef 68 ff fb 	st.b	r7[-5],r8

      // Compute the CRC of the short name
      crc = (crc >> 1) + ((crc & 1) << 7);               // rotate
8000bb68:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8000bb6c:	a1 98       	lsr	r8,0x1
8000bb6e:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8000bb72:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8000bb76:	a7 78       	lsl	r8,0x7
8000bb78:	5c 58       	castu.b	r8
8000bb7a:	f2 08 00 08 	add	r8,r9,r8
8000bb7e:	ef 68 ff fe 	st.b	r7[-2],r8
      crc += character;                                  // add next char
8000bb82:	ef 39 ff fe 	ld.ub	r9,r7[-2]
8000bb86:	ef 38 ff fd 	ld.ub	r8,r7[-3]
8000bb8a:	f2 08 00 08 	add	r8,r9,r8
8000bb8e:	ef 68 ff fe 	st.b	r7[-2],r8
   } // End of loop while
8000bb92:	ca ea       	rjmp	8000b8ee <fat_create_short_entry_name+0x82>
8000bb94:	ca da       	rjmp	8000b8ee <fat_create_short_entry_name+0x82>
8000bb96:	00 00       	add	r0,r0
8000bb98:	80 00       	ld.sh	r0,r0[0x0]
8000bb9a:	a9 ac       	sbr	r12,0x8
8000bb9c:	80 00       	ld.sh	r0,r0[0x0]
8000bb9e:	a8 94       	st.b	r4[0x1],r4
8000bba0:	80 00       	ld.sh	r0,r0[0x0]
8000bba2:	a8 50       	st.h	r4[0xa],r0
8000bba4:	80 00       	ld.sh	r0,r0[0x0]
8000bba6:	bd bc       	sbr	r12,0x1d

8000bba8 <fat_find_short_entry_name>:
//!
//! @return the number used to create the short name
//! @return 0 in case of error
//!
uint8_t    fat_find_short_entry_name( FS_STRING sz_name  )
{
8000bba8:	eb cd 40 80 	pushm	r7,lr
8000bbac:	1a 97       	mov	r7,sp
8000bbae:	20 4d       	sub	sp,16
8000bbb0:	ef 4c ff f0 	st.w	r7[-16],r12
   char _MEM_TYPE_SLOW_ short_name[11];
   uint8_t u8_nb;

   u8_nb = 0;
8000bbb4:	30 08       	mov	r8,0
8000bbb6:	ef 68 ff ff 	st.b	r7[-1],r8
8000bbba:	c0 28       	rjmp	8000bbbe <fat_find_short_entry_name+0x16>
            break;                                       // Short name exist
         if( FS_ERR_ENTRY_EMPTY == fs_g_status )
            return u8_nb;                                // Short name don't exist, then good number
         fs_g_nav_fast.u16_entry_pos_sel_file++;         // Go to next entry
      }
   }
8000bbbc:	d7 03       	nop
   uint8_t u8_nb;

   u8_nb = 0;
   while(1)
   {
      if( 0xFF == u8_nb )
8000bbbe:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000bbc2:	3f f8       	mov	r8,-1
8000bbc4:	f0 09 18 00 	cp.b	r9,r8
8000bbc8:	c0 31       	brne	8000bbce <fat_find_short_entry_name+0x26>
         return 0;                                       // All short name exist
8000bbca:	30 08       	mov	r8,0
8000bbcc:	c3 d8       	rjmp	8000bc46 <fat_find_short_entry_name+0x9e>

      u8_nb++;                                           // Try next short name
8000bbce:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000bbd2:	2f f8       	sub	r8,-1
8000bbd4:	ef 68 ff ff 	st.b	r7[-1],r8
      fat_create_short_entry_name( sz_name , short_name , u8_nb , true  ); // Compute the short name
8000bbd8:	ef 3a ff ff 	ld.ub	r10,r7[-1]
8000bbdc:	ee c8 00 0c 	sub	r8,r7,12
8000bbe0:	30 19       	mov	r9,1
8000bbe2:	10 9b       	mov	r11,r8
8000bbe4:	ee fc ff f0 	ld.w	r12,r7[-16]
8000bbe8:	f0 1f 00 1a 	mcall	8000bc50 <fat_find_short_entry_name+0xa8>
      fs_g_nav_fast.u16_entry_pos_sel_file = 0;          // Go to beginning of directory
8000bbec:	49 a9       	lddpc	r9,8000bc54 <fat_find_short_entry_name+0xac>
8000bbee:	30 08       	mov	r8,0
8000bbf0:	b2 18       	st.h	r9[0x2],r8
      // Scan directory to find a short entry
      while(1)
      {
         if ( !fat_read_dir())                           // Read directory
8000bbf2:	f0 1f 00 1a 	mcall	8000bc58 <fat_find_short_entry_name+0xb0>
8000bbf6:	18 98       	mov	r8,r12
8000bbf8:	ec 18 00 01 	eorl	r8,0x1
8000bbfc:	5c 58       	castu.b	r8
8000bbfe:	c0 c0       	breq	8000bc16 <fat_find_short_entry_name+0x6e>
         {
            if( FS_ERR_OUT_LIST == fs_g_status )
8000bc00:	49 78       	lddpc	r8,8000bc5c <fat_find_short_entry_name+0xb4>
8000bc02:	11 89       	ld.ub	r9,r8[0x0]
8000bc04:	31 a8       	mov	r8,26
8000bc06:	f0 09 18 00 	cp.b	r9,r8
8000bc0a:	c0 41       	brne	8000bc12 <fat_find_short_entry_name+0x6a>
               return u8_nb;                             // short name don't exist, then good number
8000bc0c:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000bc10:	c1 b8       	rjmp	8000bc46 <fat_find_short_entry_name+0x9e>
            return 0;                                    // System or Disk Error
8000bc12:	30 08       	mov	r8,0
8000bc14:	c1 98       	rjmp	8000bc46 <fat_find_short_entry_name+0x9e>
         }
         if( fat_entry_shortname_compare( short_name ) ) // Check entry
8000bc16:	ee c8 00 0c 	sub	r8,r7,12
8000bc1a:	10 9c       	mov	r12,r8
8000bc1c:	f0 1f 00 11 	mcall	8000bc60 <fat_find_short_entry_name+0xb8>
8000bc20:	18 98       	mov	r8,r12
8000bc22:	58 08       	cp.w	r8,0
8000bc24:	cc c1       	brne	8000bbbc <fat_find_short_entry_name+0x14>
            break;                                       // Short name exist
         if( FS_ERR_ENTRY_EMPTY == fs_g_status )
8000bc26:	48 e8       	lddpc	r8,8000bc5c <fat_find_short_entry_name+0xb4>
8000bc28:	11 89       	ld.ub	r9,r8[0x0]
8000bc2a:	30 a8       	mov	r8,10
8000bc2c:	f0 09 18 00 	cp.b	r9,r8
8000bc30:	c0 41       	brne	8000bc38 <fat_find_short_entry_name+0x90>
            return u8_nb;                                // Short name don't exist, then good number
8000bc32:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000bc36:	c0 88       	rjmp	8000bc46 <fat_find_short_entry_name+0x9e>
         fs_g_nav_fast.u16_entry_pos_sel_file++;         // Go to next entry
8000bc38:	48 78       	lddpc	r8,8000bc54 <fat_find_short_entry_name+0xac>
8000bc3a:	90 18       	ld.sh	r8,r8[0x2]
8000bc3c:	2f f8       	sub	r8,-1
8000bc3e:	5c 88       	casts.h	r8
8000bc40:	48 59       	lddpc	r9,8000bc54 <fat_find_short_entry_name+0xac>
8000bc42:	b2 18       	st.h	r9[0x2],r8
      }
8000bc44:	cd 7b       	rjmp	8000bbf2 <fat_find_short_entry_name+0x4a>
   }
}
8000bc46:	10 9c       	mov	r12,r8
8000bc48:	2f cd       	sub	sp,-16
8000bc4a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000bc4e:	00 00       	add	r0,r0
8000bc50:	80 00       	ld.sh	r0,r0[0x0]
8000bc52:	b8 6c       	st.h	r12[0xc],r12
8000bc54:	00 00       	add	r0,r0
8000bc56:	0d d0       	ld.ub	r0,r6[0x5]
8000bc58:	80 00       	ld.sh	r0,r0[0x0]
8000bc5a:	a0 38       	st.h	r0[0x6],r8
8000bc5c:	00 00       	add	r0,r0
8000bc5e:	0d d4       	ld.ub	r4,r6[0x5]
8000bc60:	80 00       	ld.sh	r0,r0[0x0]
8000bc62:	bc 64       	st.h	lr[0xc],r4

8000bc64 <fat_entry_shortname_compare>:
//!
//! @return    true it is the same
//! @return    false in case of error, see global value "fs_g_status" for more detail
//!
bool  fat_entry_shortname_compare( FS_STRING short_name )
{
8000bc64:	eb cd 40 80 	pushm	r7,lr
8000bc68:	1a 97       	mov	r7,sp
8000bc6a:	20 2d       	sub	sp,8
8000bc6c:	ef 4c ff f8 	st.w	r7[-8],r12
   PTR_CACHE ptr_entry;

   ptr_entry = fat_get_ptr_entry();
8000bc70:	f0 1f 00 1b 	mcall	8000bcdc <fat_entry_shortname_compare+0x78>
8000bc74:	18 98       	mov	r8,r12
8000bc76:	ef 48 ff fc 	st.w	r7[-4],r8
   if( FS_ENTRY_END == *ptr_entry )             // end of directory
8000bc7a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000bc7e:	11 88       	ld.ub	r8,r8[0x0]
8000bc80:	58 08       	cp.w	r8,0
8000bc82:	c0 61       	brne	8000bc8e <fat_entry_shortname_compare+0x2a>
   {
      fs_g_status = FS_ERR_ENTRY_EMPTY;
8000bc84:	49 79       	lddpc	r9,8000bce0 <fat_entry_shortname_compare+0x7c>
8000bc86:	30 a8       	mov	r8,10
8000bc88:	b2 88       	st.b	r9[0x0],r8
      return false;
8000bc8a:	30 08       	mov	r8,0
8000bc8c:	c2 38       	rjmp	8000bcd2 <fat_entry_shortname_compare+0x6e>
   }
   if( (FS_ENTRY_DEL == *ptr_entry )            // deleted entry
8000bc8e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000bc92:	11 89       	ld.ub	r9,r8[0x0]
8000bc94:	3e 58       	mov	r8,-27
8000bc96:	f0 09 18 00 	cp.b	r9,r8
8000bc9a:	c0 90       	breq	8000bcac <fat_entry_shortname_compare+0x48>
   ||  (FS_ATTR_LFN_ENTRY == ptr_entry[11]) )   // long file name
8000bc9c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000bca0:	2f 58       	sub	r8,-11
8000bca2:	11 89       	ld.ub	r9,r8[0x0]
   if( FS_ENTRY_END == *ptr_entry )             // end of directory
   {
      fs_g_status = FS_ERR_ENTRY_EMPTY;
      return false;
   }
   if( (FS_ENTRY_DEL == *ptr_entry )            // deleted entry
8000bca4:	30 f8       	mov	r8,15
8000bca6:	f0 09 18 00 	cp.b	r9,r8
8000bcaa:	c0 61       	brne	8000bcb6 <fat_entry_shortname_compare+0x52>
   ||  (FS_ATTR_LFN_ENTRY == ptr_entry[11]) )   // long file name
   {
      fs_g_status = FS_ERR_ENTRY_BAD;
8000bcac:	48 d9       	lddpc	r9,8000bce0 <fat_entry_shortname_compare+0x7c>
8000bcae:	30 b8       	mov	r8,11
8000bcb0:	b2 88       	st.b	r9[0x0],r8
      return false;
8000bcb2:	30 08       	mov	r8,0
8000bcb4:	c0 f8       	rjmp	8000bcd2 <fat_entry_shortname_compare+0x6e>
   }
   fs_g_status = FS_ERR_ENTRY_BAD;              // by default this entry is different then bad
8000bcb6:	48 b9       	lddpc	r9,8000bce0 <fat_entry_shortname_compare+0x7c>
8000bcb8:	30 b8       	mov	r8,11
8000bcba:	b2 88       	st.b	r9[0x0],r8
   return (0==memcmp_ram2ram(ptr_entry , short_name , 8+3 ));
8000bcbc:	30 ba       	mov	r10,11
8000bcbe:	ee fb ff f8 	ld.w	r11,r7[-8]
8000bcc2:	ee fc ff fc 	ld.w	r12,r7[-4]
8000bcc6:	f0 1f 00 08 	mcall	8000bce4 <fat_entry_shortname_compare+0x80>
8000bcca:	18 98       	mov	r8,r12
8000bccc:	58 08       	cp.w	r8,0
8000bcce:	5f 08       	sreq	r8
8000bcd0:	5c 58       	castu.b	r8
}
8000bcd2:	10 9c       	mov	r12,r8
8000bcd4:	2f ed       	sub	sp,-8
8000bcd6:	e3 cd 80 80 	ldm	sp++,r7,pc
8000bcda:	00 00       	add	r0,r0
8000bcdc:	80 00       	ld.sh	r0,r0[0x0]
8000bcde:	a8 94       	st.b	r4[0x1],r4
8000bce0:	00 00       	add	r0,r0
8000bce2:	0d d4       	ld.ub	r4,r6[0x5]
8000bce4:	80 00       	ld.sh	r0,r0[0x0]
8000bce6:	f1 f0 eb cd 	st.wqs	r8[0x734],r0

8000bce8 <fat_check_name>:
//!
//! @return    number of entry file to store the name (short + long name) <br>
//!            if name incorrect then 0 is returned.
//!
uint8_t    fat_check_name( FS_STRING sz_name  )
{
8000bce8:	eb cd 40 80 	pushm	r7,lr
8000bcec:	1a 97       	mov	r7,sp
8000bcee:	20 3d       	sub	sp,12
8000bcf0:	ef 4c ff f4 	st.w	r7[-12],r12
   uint8_t u8_nb_entry, u8_i, u8_j;
   uint16_t u16_character;

   u8_nb_entry = 2;        // a short entry + one long name entry minimum
8000bcf4:	30 28       	mov	r8,2
8000bcf6:	ef 68 ff fb 	st.b	r7[-5],r8
   u8_i = FS_SIZE_LFN_ENTRY;
8000bcfa:	30 d8       	mov	r8,13
8000bcfc:	ef 68 ff fc 	st.b	r7[-4],r8
   {
      if( Is_unicode )
      {
         u16_character = ((FS_STR_UNICODE)sz_name)[0];
      }else{
         u16_character = sz_name[0];
8000bd00:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000bd04:	11 88       	ld.ub	r8,r8[0x0]
8000bd06:	ef 58 ff fe 	st.h	r7[-2],r8
      }
      if( fat_check_eof_name( u16_character ) )
8000bd0a:	ef 18 ff fe 	ld.uh	r8,r7[-2]
8000bd0e:	10 9c       	mov	r12,r8
8000bd10:	f0 1f 00 28 	mcall	8000bdb0 <fat_check_name+0xc8>
8000bd14:	18 98       	mov	r8,r12
8000bd16:	58 08       	cp.w	r8,0
8000bd18:	c0 90       	breq	8000bd2a <fat_check_name+0x42>
         u8_i = FS_SIZE_LFN_ENTRY;
      }
      u8_i--;
      sz_name += (Is_unicode? 2 : 1 );
   }
   if( 0x14 < u8_nb_entry )
8000bd1a:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8000bd1e:	31 48       	mov	r8,20
8000bd20:	f0 09 18 00 	cp.b	r9,r8
8000bd24:	e0 8b 00 3b 	brhi	8000bd9a <fat_check_name+0xb2>
8000bd28:	c3 e8       	rjmp	8000bda4 <fat_check_name+0xbc>
         u16_character = sz_name[0];
      }
      if( fat_check_eof_name( u16_character ) )
         break;

      for( u8_j = 0 ; u8_j < sizeof(fs_s_tab_incorrect_char) ; u8_j++ )
8000bd2a:	30 08       	mov	r8,0
8000bd2c:	ef 68 ff fd 	st.b	r7[-3],r8
8000bd30:	c1 58       	rjmp	8000bd5a <fat_check_name+0x72>
      {
         if( u16_character == fs_s_tab_incorrect_char[u8_j] )
8000bd32:	ef 38 ff fd 	ld.ub	r8,r7[-3]
8000bd36:	4a 09       	lddpc	r9,8000bdb4 <fat_check_name+0xcc>
8000bd38:	f2 08 07 08 	ld.ub	r8,r9[r8]
8000bd3c:	ef 09 ff fe 	ld.sh	r9,r7[-2]
8000bd40:	f0 09 19 00 	cp.h	r9,r8
8000bd44:	c0 61       	brne	8000bd50 <fat_check_name+0x68>
         {
            fs_g_status = FS_ERR_INCORRECT_NAME;
8000bd46:	49 d9       	lddpc	r9,8000bdb8 <fat_check_name+0xd0>
8000bd48:	31 c8       	mov	r8,28
8000bd4a:	b2 88       	st.b	r9[0x0],r8
            return 0;      // incorrect character
8000bd4c:	30 08       	mov	r8,0
8000bd4e:	c2 d8       	rjmp	8000bda8 <fat_check_name+0xc0>
         u16_character = sz_name[0];
      }
      if( fat_check_eof_name( u16_character ) )
         break;

      for( u8_j = 0 ; u8_j < sizeof(fs_s_tab_incorrect_char) ; u8_j++ )
8000bd50:	ef 38 ff fd 	ld.ub	r8,r7[-3]
8000bd54:	2f f8       	sub	r8,-1
8000bd56:	ef 68 ff fd 	st.b	r7[-3],r8
8000bd5a:	ef 39 ff fd 	ld.ub	r9,r7[-3]
8000bd5e:	30 68       	mov	r8,6
8000bd60:	f0 09 18 00 	cp.b	r9,r8
8000bd64:	fe 98 ff e7 	brls	8000bd32 <fat_check_name+0x4a>
         {
            fs_g_status = FS_ERR_INCORRECT_NAME;
            return 0;      // incorrect character
         }
      }
      if( 0 == u8_i )
8000bd68:	ef 39 ff fc 	ld.ub	r9,r7[-4]
8000bd6c:	30 08       	mov	r8,0
8000bd6e:	f0 09 18 00 	cp.b	r9,r8
8000bd72:	c0 91       	brne	8000bd84 <fat_check_name+0x9c>
      {
         u8_nb_entry++;
8000bd74:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000bd78:	2f f8       	sub	r8,-1
8000bd7a:	ef 68 ff fb 	st.b	r7[-5],r8
         u8_i = FS_SIZE_LFN_ENTRY;
8000bd7e:	30 d8       	mov	r8,13
8000bd80:	ef 68 ff fc 	st.b	r7[-4],r8
      }
      u8_i--;
8000bd84:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000bd88:	20 18       	sub	r8,1
8000bd8a:	ef 68 ff fc 	st.b	r7[-4],r8
      sz_name += (Is_unicode? 2 : 1 );
8000bd8e:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000bd92:	2f f8       	sub	r8,-1
8000bd94:	ef 48 ff f4 	st.w	r7[-12],r8
   }
8000bd98:	cb 4b       	rjmp	8000bd00 <fat_check_name+0x18>
   if( 0x14 < u8_nb_entry )
   {
      fs_g_status = FS_ERR_NAME_TOO_LARGE;
8000bd9a:	48 89       	lddpc	r9,8000bdb8 <fat_check_name+0xd0>
8000bd9c:	32 b8       	mov	r8,43
8000bd9e:	b2 88       	st.b	r9[0x0],r8
      return 0;            // Name too large
8000bda0:	30 08       	mov	r8,0
8000bda2:	c0 38       	rjmp	8000bda8 <fat_check_name+0xc0>
   }
   return u8_nb_entry;
8000bda4:	ef 38 ff fb 	ld.ub	r8,r7[-5]
}
8000bda8:	10 9c       	mov	r12,r8
8000bdaa:	2f dd       	sub	sp,-12
8000bdac:	e3 cd 80 80 	ldm	sp++,r7,pc
8000bdb0:	80 00       	ld.sh	r0,r0[0x0]
8000bdb2:	a8 50       	st.h	r4[0xa],r0
8000bdb4:	80 01       	ld.sh	r1,r0[0x0]
8000bdb6:	4c 28       	lddpc	r8,8000bebc <fat_alloc_entry_free+0x64>
8000bdb8:	00 00       	add	r0,r0
8000bdba:	0d d4       	ld.ub	r4,r6[0x5]

8000bdbc <fat_translate_char_shortname>:
//!
//! @return    character translated <br>
//!            if no supported then 0
//!
uint8_t    fat_translate_char_shortname( uint8_t character )
{
8000bdbc:	eb cd 40 80 	pushm	r7,lr
8000bdc0:	1a 97       	mov	r7,sp
8000bdc2:	20 2d       	sub	sp,8
8000bdc4:	18 98       	mov	r8,r12
8000bdc6:	ef 68 ff f8 	st.b	r7[-8],r8
   uint8_t u8_j;

   if( (character<=' ') || ('~'<character) )
8000bdca:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000bdce:	32 08       	mov	r8,32
8000bdd0:	f0 09 18 00 	cp.b	r9,r8
8000bdd4:	e0 88 00 09 	brls	8000bde6 <fat_translate_char_shortname+0x2a>
8000bdd8:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000bddc:	37 e8       	mov	r8,126
8000bdde:	f0 09 18 00 	cp.b	r9,r8
8000bde2:	e0 88 00 04 	brls	8000bdea <fat_translate_char_shortname+0x2e>
      return 0;
8000bde6:	30 08       	mov	r8,0
8000bde8:	c3 28       	rjmp	8000be4c <fat_translate_char_shortname+0x90>
   if( ('a'<=character) && (character<='z') )
8000bdea:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000bdee:	36 08       	mov	r8,96
8000bdf0:	f0 09 18 00 	cp.b	r9,r8
8000bdf4:	e0 88 00 0e 	brls	8000be10 <fat_translate_char_shortname+0x54>
8000bdf8:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000bdfc:	37 a8       	mov	r8,122
8000bdfe:	f0 09 18 00 	cp.b	r9,r8
8000be02:	e0 8b 00 07 	brhi	8000be10 <fat_translate_char_shortname+0x54>
   {
      return (character - ('a'-'A'));  // Change to upper case
8000be06:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000be0a:	22 08       	sub	r8,32
8000be0c:	5c 58       	castu.b	r8
8000be0e:	c1 f8       	rjmp	8000be4c <fat_translate_char_shortname+0x90>
   }
   for( u8_j = 0 ; u8_j < sizeof(fs_s_execption_char) ; u8_j++ )
8000be10:	30 08       	mov	r8,0
8000be12:	ef 68 ff ff 	st.b	r7[-1],r8
8000be16:	c1 28       	rjmp	8000be3a <fat_translate_char_shortname+0x7e>
   {
      if( character == fs_s_execption_char[u8_j] )
8000be18:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000be1c:	48 e9       	lddpc	r9,8000be54 <fat_translate_char_shortname+0x98>
8000be1e:	f2 08 07 08 	ld.ub	r8,r9[r8]
8000be22:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000be26:	f0 09 18 00 	cp.b	r9,r8
8000be2a:	c0 31       	brne	8000be30 <fat_translate_char_shortname+0x74>
         return 0;
8000be2c:	30 08       	mov	r8,0
8000be2e:	c0 f8       	rjmp	8000be4c <fat_translate_char_shortname+0x90>
      return 0;
   if( ('a'<=character) && (character<='z') )
   {
      return (character - ('a'-'A'));  // Change to upper case
   }
   for( u8_j = 0 ; u8_j < sizeof(fs_s_execption_char) ; u8_j++ )
8000be30:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000be34:	2f f8       	sub	r8,-1
8000be36:	ef 68 ff ff 	st.b	r7[-1],r8
8000be3a:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000be3e:	30 68       	mov	r8,6
8000be40:	f0 09 18 00 	cp.b	r9,r8
8000be44:	fe 98 ff ea 	brls	8000be18 <fat_translate_char_shortname+0x5c>
   {
      if( character == fs_s_execption_char[u8_j] )
         return 0;
   }
   return character;
8000be48:	ef 38 ff f8 	ld.ub	r8,r7[-8]
}
8000be4c:	10 9c       	mov	r12,r8
8000be4e:	2f ed       	sub	sp,-8
8000be50:	e3 cd 80 80 	ldm	sp++,r7,pc
8000be54:	80 01       	ld.sh	r1,r0[0x0]
8000be56:	4c 30       	lddpc	r0,8000bf60 <fat_alloc_entry_free+0x108>

8000be58 <fat_alloc_entry_free>:
//! @verbatim
//! OUT: Initialize the system on the last alloced free entry
//! @endverbatim
//!
bool  fat_alloc_entry_free( uint8_t u8_nb_entry )
{
8000be58:	eb cd 40 80 	pushm	r7,lr
8000be5c:	1a 97       	mov	r7,sp
8000be5e:	20 3d       	sub	sp,12
8000be60:	18 98       	mov	r8,r12
8000be62:	ef 68 ff f4 	st.b	r7[-12],r8
   PTR_CACHE ptr_entry;
   bool b_garbage_collector_used = false;
8000be66:	30 08       	mov	r8,0
8000be68:	ef 68 ff fe 	st.b	r7[-2],r8
   uint8_t u8_nb_entry_save;

   u8_nb_entry_save = u8_nb_entry;
8000be6c:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000be70:	ef 68 ff ff 	st.b	r7[-1],r8

   // Start at the beginning of dir
   fs_g_nav_fast.u16_entry_pos_sel_file=0;
8000be74:	4c 59       	lddpc	r9,8000bf88 <fat_alloc_entry_free+0x130>
8000be76:	30 08       	mov	r8,0
8000be78:	b2 18       	st.h	r9[0x2],r8
8000be7a:	c0 28       	rjmp	8000be7e <fat_alloc_entry_free+0x26>
         b_garbage_collector_used = true;
         fs_g_nav_fast.u16_entry_pos_sel_file=0;
         u8_nb_entry = u8_nb_entry_save;
         continue;
      }
   }  // end of while(1)
8000be7c:	d7 03       	nop
   fs_g_nav_fast.u16_entry_pos_sel_file=0;
   // Loop in directory
   while( 1 )
   {
      // Fill internal cache with a sector from directory
      if( !fat_read_dir() )
8000be7e:	f0 1f 00 44 	mcall	8000bf8c <fat_alloc_entry_free+0x134>
8000be82:	18 98       	mov	r8,r12
8000be84:	ec 18 00 01 	eorl	r8,0x1
8000be88:	5c 58       	castu.b	r8
8000be8a:	c3 90       	breq	8000befc <fat_alloc_entry_free+0xa4>
      {
         if( FS_ERR_OUT_LIST != fs_g_status )
8000be8c:	4c 18       	lddpc	r8,8000bf90 <fat_alloc_entry_free+0x138>
8000be8e:	11 89       	ld.ub	r9,r8[0x0]
8000be90:	31 a8       	mov	r8,26
8000be92:	f0 09 18 00 	cp.b	r9,r8
8000be96:	c0 30       	breq	8000be9c <fat_alloc_entry_free+0x44>
            return false;
8000be98:	30 08       	mov	r8,0
8000be9a:	c7 28       	rjmp	8000bf7e <fat_alloc_entry_free+0x126>

         // The position is outside the cluster list
         // then alloc a new sector (= new cluster)
         // Remark: The fs_g_seg.u32_addr contains the last cluster value of a directory list to link with the new list
         fs_g_seg.u32_size_or_pos = 1;
8000be9c:	4b e8       	lddpc	r8,8000bf94 <fat_alloc_entry_free+0x13c>
8000be9e:	30 19       	mov	r9,1
8000bea0:	91 19       	st.w	r8[0x4],r9
         if( !fat_allocfreespace())
8000bea2:	f0 1f 00 3e 	mcall	8000bf98 <fat_alloc_entry_free+0x140>
8000bea6:	18 98       	mov	r8,r12
8000bea8:	ec 18 00 01 	eorl	r8,0x1
8000beac:	5c 58       	castu.b	r8
8000beae:	c1 d0       	breq	8000bee8 <fat_alloc_entry_free+0x90>
         {
            // Garbage collector on entry file
            if( b_garbage_collector_used )
8000beb0:	ef 39 ff fe 	ld.ub	r9,r7[-2]
8000beb4:	30 08       	mov	r8,0
8000beb6:	f0 09 18 00 	cp.b	r9,r8
8000beba:	c0 30       	breq	8000bec0 <fat_alloc_entry_free+0x68>
               return false;
8000bebc:	30 08       	mov	r8,0
8000bebe:	c6 08       	rjmp	8000bf7e <fat_alloc_entry_free+0x126>
            if( !fat_garbage_collector_entry())
8000bec0:	f0 1f 00 37 	mcall	8000bf9c <fat_alloc_entry_free+0x144>
8000bec4:	18 98       	mov	r8,r12
8000bec6:	ec 18 00 01 	eorl	r8,0x1
8000beca:	5c 58       	castu.b	r8
8000becc:	c0 30       	breq	8000bed2 <fat_alloc_entry_free+0x7a>
               return false;
8000bece:	30 08       	mov	r8,0
8000bed0:	c5 78       	rjmp	8000bf7e <fat_alloc_entry_free+0x126>
            b_garbage_collector_used = true;
8000bed2:	30 18       	mov	r8,1
8000bed4:	ef 68 ff fe 	st.b	r7[-2],r8
            fs_g_nav_fast.u16_entry_pos_sel_file=0;
8000bed8:	4a c9       	lddpc	r9,8000bf88 <fat_alloc_entry_free+0x130>
8000beda:	30 08       	mov	r8,0
8000bedc:	b2 18       	st.h	r9[0x2],r8
            u8_nb_entry = u8_nb_entry_save;
8000bede:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000bee2:	ef 68 ff f4 	st.b	r7[-12],r8
            continue;
8000bee6:	c4 b8       	rjmp	8000bf7c <fat_alloc_entry_free+0x124>
         }

         // Clean this new cluster
         // Remark: The fs_g_seg.u32_addr contains the new cluster value
         if( !fat_clear_cluster())
8000bee8:	f0 1f 00 2e 	mcall	8000bfa0 <fat_alloc_entry_free+0x148>
8000beec:	18 98       	mov	r8,r12
8000beee:	ec 18 00 01 	eorl	r8,0x1
8000bef2:	5c 58       	castu.b	r8
8000bef4:	c0 30       	breq	8000befa <fat_alloc_entry_free+0xa2>
            return false;
8000bef6:	30 08       	mov	r8,0
8000bef8:	c4 38       	rjmp	8000bf7e <fat_alloc_entry_free+0x126>

         continue;  // Rescan the directory list to find the new allocated sector
8000befa:	c4 18       	rjmp	8000bf7c <fat_alloc_entry_free+0x124>
      }

      // Check entry
      ptr_entry = fat_get_ptr_entry();
8000befc:	f0 1f 00 2a 	mcall	8000bfa4 <fat_alloc_entry_free+0x14c>
8000bf00:	18 98       	mov	r8,r12
8000bf02:	ef 48 ff f8 	st.w	r7[-8],r8
      if ( FS_ENTRY_END == *ptr_entry )
8000bf06:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000bf0a:	11 88       	ld.ub	r8,r8[0x0]
8000bf0c:	58 08       	cp.w	r8,0
8000bf0e:	c0 e1       	brne	8000bf2a <fat_alloc_entry_free+0xd2>
      {  // The entry is free
         u8_nb_entry--;
8000bf10:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000bf14:	20 18       	sub	r8,1
8000bf16:	ef 68 ff f4 	st.b	r7[-12],r8
         if( 0 == u8_nb_entry )
8000bf1a:	ef 39 ff f4 	ld.ub	r9,r7[-12]
8000bf1e:	30 08       	mov	r8,0
8000bf20:	f0 09 18 00 	cp.b	r9,r8
8000bf24:	c0 31       	brne	8000bf2a <fat_alloc_entry_free+0xd2>
         {
            return true;  // All free entry is found
8000bf26:	30 18       	mov	r8,1
8000bf28:	c2 b8       	rjmp	8000bf7e <fat_alloc_entry_free+0x126>
         }
      }

      // go to next entry
      fs_g_nav_fast.u16_entry_pos_sel_file++;
8000bf2a:	49 88       	lddpc	r8,8000bf88 <fat_alloc_entry_free+0x130>
8000bf2c:	90 18       	ld.sh	r8,r8[0x2]
8000bf2e:	2f f8       	sub	r8,-1
8000bf30:	5c 88       	casts.h	r8
8000bf32:	49 69       	lddpc	r9,8000bf88 <fat_alloc_entry_free+0x130>
8000bf34:	b2 18       	st.h	r9[0x2],r8
      if( 0 == fs_g_nav_fast.u16_entry_pos_sel_file )
8000bf36:	49 58       	lddpc	r8,8000bf88 <fat_alloc_entry_free+0x130>
8000bf38:	90 18       	ld.sh	r8,r8[0x2]
8000bf3a:	58 08       	cp.w	r8,0
8000bf3c:	ca 01       	brne	8000be7c <fat_alloc_entry_free+0x24>
      {
         // Here, the directory have the maximum size
         // Garbage collector on entry file
         if( b_garbage_collector_used )
8000bf3e:	ef 39 ff fe 	ld.ub	r9,r7[-2]
8000bf42:	30 08       	mov	r8,0
8000bf44:	f0 09 18 00 	cp.b	r9,r8
8000bf48:	c0 60       	breq	8000bf54 <fat_alloc_entry_free+0xfc>
         {
            // Directory full (FAT Norm limit directory to 65535 entrys)
            fs_g_status = FS_ERR_NO_FREE_SPACE;
8000bf4a:	49 29       	lddpc	r9,8000bf90 <fat_alloc_entry_free+0x138>
8000bf4c:	31 b8       	mov	r8,27
8000bf4e:	b2 88       	st.b	r9[0x0],r8
            return false;
8000bf50:	30 08       	mov	r8,0
8000bf52:	c1 68       	rjmp	8000bf7e <fat_alloc_entry_free+0x126>
         }
         if( !fat_garbage_collector_entry())
8000bf54:	f0 1f 00 12 	mcall	8000bf9c <fat_alloc_entry_free+0x144>
8000bf58:	18 98       	mov	r8,r12
8000bf5a:	ec 18 00 01 	eorl	r8,0x1
8000bf5e:	5c 58       	castu.b	r8
8000bf60:	c0 30       	breq	8000bf66 <fat_alloc_entry_free+0x10e>
            return false;
8000bf62:	30 08       	mov	r8,0
8000bf64:	c0 d8       	rjmp	8000bf7e <fat_alloc_entry_free+0x126>
         b_garbage_collector_used = true;
8000bf66:	30 18       	mov	r8,1
8000bf68:	ef 68 ff fe 	st.b	r7[-2],r8
         fs_g_nav_fast.u16_entry_pos_sel_file=0;
8000bf6c:	48 79       	lddpc	r9,8000bf88 <fat_alloc_entry_free+0x130>
8000bf6e:	30 08       	mov	r8,0
8000bf70:	b2 18       	st.h	r9[0x2],r8
         u8_nb_entry = u8_nb_entry_save;
8000bf72:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000bf76:	ef 68 ff f4 	st.b	r7[-12],r8
         continue;
      }
   }  // end of while(1)
8000bf7a:	c8 2b       	rjmp	8000be7e <fat_alloc_entry_free+0x26>
8000bf7c:	c8 1b       	rjmp	8000be7e <fat_alloc_entry_free+0x26>
}
8000bf7e:	10 9c       	mov	r12,r8
8000bf80:	2f dd       	sub	sp,-12
8000bf82:	e3 cd 80 80 	ldm	sp++,r7,pc
8000bf86:	00 00       	add	r0,r0
8000bf88:	00 00       	add	r0,r0
8000bf8a:	0d d0       	ld.ub	r0,r6[0x5]
8000bf8c:	80 00       	ld.sh	r0,r0[0x0]
8000bf8e:	a0 38       	st.h	r0[0x6],r8
8000bf90:	00 00       	add	r0,r0
8000bf92:	0d d4       	ld.ub	r4,r6[0x5]
8000bf94:	00 00       	add	r0,r0
8000bf96:	0e 2c       	rsub	r12,r7
8000bf98:	80 00       	ld.sh	r0,r0[0x0]
8000bf9a:	c1 c0       	breq	8000bfd2 <fat_garbage_collector_entry+0x2a>
8000bf9c:	80 00       	ld.sh	r0,r0[0x0]
8000bf9e:	bf a8       	sbr	r8,0x1e
8000bfa0:	80 00       	ld.sh	r0,r0[0x0]
8000bfa2:	c4 68       	rjmp	8000c02e <fat_garbage_collector_entry+0x86>
8000bfa4:	80 00       	ld.sh	r0,r0[0x0]
8000bfa6:	a8 94       	st.b	r4[0x1],r4

8000bfa8 <fat_garbage_collector_entry>:
//!
//! @return    false in case of error, see global value "fs_g_status" for more detail
//! @return    true otherwise
//!
bool fat_garbage_collector_entry( void )
{
8000bfa8:	eb cd 40 80 	pushm	r7,lr
8000bfac:	1a 97       	mov	r7,sp
8000bfae:	20 ad       	sub	sp,40
   _MEM_TYPE_SLOW_   uint8_t entry[ FS_SIZE_FILE_ENTRY ];
   PTR_CACHE ptr_entry;
   uint16_t u16_pos_old = 0;
8000bfb0:	30 08       	mov	r8,0
8000bfb2:	ef 58 ff fc 	st.h	r7[-4],r8
   uint16_t u16_pos_new = 0;
8000bfb6:	30 08       	mov	r8,0
8000bfb8:	ef 58 ff fe 	st.h	r7[-2],r8

   // Loop in directory
   while( 1 )
   {
      // Go to old entry list
      fs_g_nav_fast.u16_entry_pos_sel_file=u16_pos_old;
8000bfbc:	4c 29       	lddpc	r9,8000c0c4 <fat_garbage_collector_entry+0x11c>
8000bfbe:	ef 08 ff fc 	ld.sh	r8,r7[-4]
8000bfc2:	b2 18       	st.h	r9[0x2],r8
      // Fill internal cache with a sector from directory
      if( !fat_read_dir() )
8000bfc4:	f0 1f 00 41 	mcall	8000c0c8 <fat_garbage_collector_entry+0x120>
8000bfc8:	18 98       	mov	r8,r12
8000bfca:	ec 18 00 01 	eorl	r8,0x1
8000bfce:	5c 58       	castu.b	r8
8000bfd0:	c0 90       	breq	8000bfe2 <fat_garbage_collector_entry+0x3a>
      {
         if( FS_ERR_OUT_LIST != fs_g_status )
8000bfd2:	4b f8       	lddpc	r8,8000c0cc <fat_garbage_collector_entry+0x124>
8000bfd4:	11 89       	ld.ub	r9,r8[0x0]
8000bfd6:	31 a8       	mov	r8,26
8000bfd8:	f0 09 18 00 	cp.b	r9,r8
8000bfdc:	c0 e0       	breq	8000bff8 <fat_garbage_collector_entry+0x50>
            return false;
8000bfde:	30 08       	mov	r8,0
8000bfe0:	c6 e8       	rjmp	8000c0bc <fat_garbage_collector_entry+0x114>
         goto fat_garbage_collector_entry_endofdir;
      }

      // Check entry
      ptr_entry = fat_get_ptr_entry();
8000bfe2:	f0 1f 00 3c 	mcall	8000c0d0 <fat_garbage_collector_entry+0x128>
8000bfe6:	18 98       	mov	r8,r12
8000bfe8:	ef 48 ff f8 	st.w	r7[-8],r8

      if ( FS_ENTRY_END == *ptr_entry )
8000bfec:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000bff0:	11 88       	ld.ub	r8,r8[0x0]
8000bff2:	58 08       	cp.w	r8,0
8000bff4:	c2 a1       	brne	8000c048 <fat_garbage_collector_entry+0xa0>
8000bff6:	c0 28       	rjmp	8000bffa <fat_garbage_collector_entry+0x52>
      // Fill internal cache with a sector from directory
      if( !fat_read_dir() )
      {
         if( FS_ERR_OUT_LIST != fs_g_status )
            return false;
         goto fat_garbage_collector_entry_endofdir;
8000bff8:	d7 03       	nop
      if ( FS_ENTRY_END == *ptr_entry )
      {
         // The entry is free, then it is the end of entry list
fat_garbage_collector_entry_endofdir:
         // Fill empty entry in old list
         fs_g_nav_fast.u16_entry_pos_sel_file=u16_pos_new;
8000bffa:	4b 39       	lddpc	r9,8000c0c4 <fat_garbage_collector_entry+0x11c>
8000bffc:	ef 08 ff fe 	ld.sh	r8,r7[-2]
8000c000:	b2 18       	st.h	r9[0x2],r8
         while( fs_g_nav_fast.u16_entry_pos_sel_file != u16_pos_old )
8000c002:	c1 a8       	rjmp	8000c036 <fat_garbage_collector_entry+0x8e>
         {
            // Fill internal cache with a sector from directory
            if( !fat_read_dir() )
8000c004:	f0 1f 00 31 	mcall	8000c0c8 <fat_garbage_collector_entry+0x120>
8000c008:	18 98       	mov	r8,r12
8000c00a:	ec 18 00 01 	eorl	r8,0x1
8000c00e:	5c 58       	castu.b	r8
8000c010:	c0 30       	breq	8000c016 <fat_garbage_collector_entry+0x6e>
               return false;
8000c012:	30 08       	mov	r8,0
8000c014:	c5 48       	rjmp	8000c0bc <fat_garbage_collector_entry+0x114>
            memset( fat_get_ptr_entry() , 0 , 32 );
8000c016:	f0 1f 00 2f 	mcall	8000c0d0 <fat_garbage_collector_entry+0x128>
8000c01a:	18 98       	mov	r8,r12
8000c01c:	32 0a       	mov	r10,32
8000c01e:	30 0b       	mov	r11,0
8000c020:	10 9c       	mov	r12,r8
8000c022:	f0 1f 00 2d 	mcall	8000c0d4 <fat_garbage_collector_entry+0x12c>
            fat_cache_mark_sector_as_dirty();
8000c026:	f0 1f 00 2d 	mcall	8000c0d8 <fat_garbage_collector_entry+0x130>
            fs_g_nav_fast.u16_entry_pos_sel_file++;
8000c02a:	4a 78       	lddpc	r8,8000c0c4 <fat_garbage_collector_entry+0x11c>
8000c02c:	90 18       	ld.sh	r8,r8[0x2]
8000c02e:	2f f8       	sub	r8,-1
8000c030:	5c 88       	casts.h	r8
8000c032:	4a 59       	lddpc	r9,8000c0c4 <fat_garbage_collector_entry+0x11c>
8000c034:	b2 18       	st.h	r9[0x2],r8
      {
         // The entry is free, then it is the end of entry list
fat_garbage_collector_entry_endofdir:
         // Fill empty entry in old list
         fs_g_nav_fast.u16_entry_pos_sel_file=u16_pos_new;
         while( fs_g_nav_fast.u16_entry_pos_sel_file != u16_pos_old )
8000c036:	4a 48       	lddpc	r8,8000c0c4 <fat_garbage_collector_entry+0x11c>
8000c038:	90 18       	ld.sh	r8,r8[0x2]
8000c03a:	ef 09 ff fc 	ld.sh	r9,r7[-4]
8000c03e:	f0 09 19 00 	cp.h	r9,r8
8000c042:	ce 11       	brne	8000c004 <fat_garbage_collector_entry+0x5c>
               return false;
            memset( fat_get_ptr_entry() , 0 , 32 );
            fat_cache_mark_sector_as_dirty();
            fs_g_nav_fast.u16_entry_pos_sel_file++;
         }
         return true;  // End of garbage
8000c044:	30 18       	mov	r8,1
8000c046:	c3 b8       	rjmp	8000c0bc <fat_garbage_collector_entry+0x114>
      }

      if ( FS_ENTRY_DEL != *ptr_entry )
8000c048:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000c04c:	11 89       	ld.ub	r9,r8[0x0]
8000c04e:	3e 58       	mov	r8,-27
8000c050:	f0 09 18 00 	cp.b	r9,r8
8000c054:	c2 e0       	breq	8000c0b0 <fat_garbage_collector_entry+0x108>
      {
         // entry valid
         if( u16_pos_old != u16_pos_new )
8000c056:	ef 09 ff fc 	ld.sh	r9,r7[-4]
8000c05a:	ef 08 ff fe 	ld.sh	r8,r7[-2]
8000c05e:	f0 09 19 00 	cp.h	r9,r8
8000c062:	c2 20       	breq	8000c0a6 <fat_garbage_collector_entry+0xfe>
         {
            // A free space exist then move entry
            memcpy_ram2ram( entry, ptr_entry, FS_SIZE_FILE_ENTRY );
8000c064:	ee c8 00 28 	sub	r8,r7,40
8000c068:	32 0a       	mov	r10,32
8000c06a:	ee fb ff f8 	ld.w	r11,r7[-8]
8000c06e:	10 9c       	mov	r12,r8
8000c070:	f0 1f 00 1b 	mcall	8000c0dc <fat_garbage_collector_entry+0x134>
            fs_g_nav_fast.u16_entry_pos_sel_file=u16_pos_new;
8000c074:	49 49       	lddpc	r9,8000c0c4 <fat_garbage_collector_entry+0x11c>
8000c076:	ef 08 ff fe 	ld.sh	r8,r7[-2]
8000c07a:	b2 18       	st.h	r9[0x2],r8
            // Fill internal cache with a sector from directory
            if( !fat_read_dir() )
8000c07c:	f0 1f 00 13 	mcall	8000c0c8 <fat_garbage_collector_entry+0x120>
8000c080:	18 98       	mov	r8,r12
8000c082:	ec 18 00 01 	eorl	r8,0x1
8000c086:	5c 58       	castu.b	r8
8000c088:	c0 30       	breq	8000c08e <fat_garbage_collector_entry+0xe6>
               return false;
8000c08a:	30 08       	mov	r8,0
8000c08c:	c1 88       	rjmp	8000c0bc <fat_garbage_collector_entry+0x114>
            memcpy_ram2ram( fat_get_ptr_entry(), entry, FS_SIZE_FILE_ENTRY );
8000c08e:	f0 1f 00 11 	mcall	8000c0d0 <fat_garbage_collector_entry+0x128>
8000c092:	18 98       	mov	r8,r12
8000c094:	ee c9 00 28 	sub	r9,r7,40
8000c098:	32 0a       	mov	r10,32
8000c09a:	12 9b       	mov	r11,r9
8000c09c:	10 9c       	mov	r12,r8
8000c09e:	f0 1f 00 10 	mcall	8000c0dc <fat_garbage_collector_entry+0x134>
            fat_cache_mark_sector_as_dirty();
8000c0a2:	f0 1f 00 0e 	mcall	8000c0d8 <fat_garbage_collector_entry+0x130>
         }
         u16_pos_new++;
8000c0a6:	ef 08 ff fe 	ld.sh	r8,r7[-2]
8000c0aa:	2f f8       	sub	r8,-1
8000c0ac:	ef 58 ff fe 	st.h	r7[-2],r8
      }
      u16_pos_old++;
8000c0b0:	ef 08 ff fc 	ld.sh	r8,r7[-4]
8000c0b4:	2f f8       	sub	r8,-1
8000c0b6:	ef 58 ff fc 	st.h	r7[-4],r8
   }  // end of while(1)
8000c0ba:	c8 1b       	rjmp	8000bfbc <fat_garbage_collector_entry+0x14>
}
8000c0bc:	10 9c       	mov	r12,r8
8000c0be:	2f 6d       	sub	sp,-40
8000c0c0:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c0c4:	00 00       	add	r0,r0
8000c0c6:	0d d0       	ld.ub	r0,r6[0x5]
8000c0c8:	80 00       	ld.sh	r0,r0[0x0]
8000c0ca:	a0 38       	st.h	r0[0x6],r8
8000c0cc:	00 00       	add	r0,r0
8000c0ce:	0d d4       	ld.ub	r4,r6[0x5]
8000c0d0:	80 00       	ld.sh	r0,r0[0x0]
8000c0d2:	a8 94       	st.b	r4[0x1],r4
8000c0d4:	80 00       	ld.sh	r0,r0[0x0]
8000c0d6:	f3 5e 80 00 	st.h	r9[-32768],lr
8000c0da:	a9 ac       	sbr	r12,0x8
8000c0dc:	80 00       	ld.sh	r0,r0[0x0]
8000c0de:	f2 16 eb cd 	pref	r6[-5171]

8000c0e0 <fat_delete_file>:
//!
//! @return    false in case of error, see global value "fs_g_status" for more detail
//! @return    true otherwise
//!
bool  fat_delete_file( bool b_cluster_list )
{
8000c0e0:	eb cd 40 80 	pushm	r7,lr
8000c0e4:	1a 97       	mov	r7,sp
8000c0e6:	20 3d       	sub	sp,12
8000c0e8:	18 98       	mov	r8,r12
8000c0ea:	ef 68 ff f4 	st.b	r7[-12],r8
   PTR_CACHE ptr_entry;
   uint8_t u8_tmp;
   bool b_short_del = false;
8000c0ee:	30 08       	mov	r8,0
8000c0f0:	ef 68 ff ff 	st.b	r7[-1],r8

   // loop in directory
   while( 1 )
   {
      // Fill internal cache with a sector from directory
      if( !fat_read_dir() )
8000c0f4:	f0 1f 00 2d 	mcall	8000c1a8 <fat_delete_file+0xc8>
8000c0f8:	18 98       	mov	r8,r12
8000c0fa:	ec 18 00 01 	eorl	r8,0x1
8000c0fe:	5c 58       	castu.b	r8
8000c100:	c0 30       	breq	8000c106 <fat_delete_file+0x26>
         return false;
8000c102:	30 08       	mov	r8,0
8000c104:	c4 d8       	rjmp	8000c19e <fat_delete_file+0xbe>

      // Get pointer on the current entry
      ptr_entry = fat_get_ptr_entry();
8000c106:	f0 1f 00 2a 	mcall	8000c1ac <fat_delete_file+0xcc>
8000c10a:	18 98       	mov	r8,r12
8000c10c:	ef 48 ff f8 	st.w	r7[-8],r8
      u8_tmp = ptr_entry[0];
8000c110:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000c114:	11 88       	ld.ub	r8,r8[0x0]
8000c116:	ef 68 ff fe 	st.b	r7[-2],r8

      if( (FS_ATTR_LFN_ENTRY != ptr_entry[11])
8000c11a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000c11e:	2f 58       	sub	r8,-11
8000c120:	11 89       	ld.ub	r9,r8[0x0]
8000c122:	30 f8       	mov	r8,15
8000c124:	f0 09 18 00 	cp.b	r9,r8
8000c128:	c0 70       	breq	8000c136 <fat_delete_file+0x56>
8000c12a:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000c12e:	30 08       	mov	r8,0
8000c130:	f0 09 18 00 	cp.b	r9,r8
8000c134:	c1 e1       	brne	8000c170 <fat_delete_file+0x90>
         // no long entry exist, then only a short entry to delete
         break;   // Go to delete cluster list
      }

      // Delete entry
      b_short_del = true;
8000c136:	30 18       	mov	r8,1
8000c138:	ef 68 ff ff 	st.b	r7[-1],r8
      ptr_entry[0] = FS_ENTRY_DEL;
8000c13c:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000c140:	3e 58       	mov	r8,-27
8000c142:	b2 88       	st.b	r9[0x0],r8
      fat_cache_mark_sector_as_dirty();
8000c144:	f0 1f 00 1b 	mcall	8000c1b0 <fat_delete_file+0xd0>

      if( (FS_ATTR_LFN_ENTRY == ptr_entry[11])
8000c148:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000c14c:	2f 58       	sub	r8,-11
8000c14e:	11 89       	ld.ub	r9,r8[0x0]
8000c150:	30 f8       	mov	r8,15
8000c152:	f0 09 18 00 	cp.b	r9,r8
8000c156:	c0 61       	brne	8000c162 <fat_delete_file+0x82>
      &&  ( 0 != (FS_ENTRY_LFN_LAST & u8_tmp)) )
8000c158:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8000c15c:	e2 18 00 40 	andl	r8,0x40,COH
      // Delete entry
      b_short_del = true;
      ptr_entry[0] = FS_ENTRY_DEL;
      fat_cache_mark_sector_as_dirty();

      if( (FS_ATTR_LFN_ENTRY == ptr_entry[11])
8000c160:	c0 a1       	brne	8000c174 <fat_delete_file+0x94>
         // It is the last entry of long name
         break;   // Go to delete cluster list
      }

      // Go to previous entry
      fs_g_nav_fast.u16_entry_pos_sel_file--;
8000c162:	49 58       	lddpc	r8,8000c1b4 <fat_delete_file+0xd4>
8000c164:	90 18       	ld.sh	r8,r8[0x2]
8000c166:	20 18       	sub	r8,1
8000c168:	5c 88       	casts.h	r8
8000c16a:	49 39       	lddpc	r9,8000c1b4 <fat_delete_file+0xd4>
8000c16c:	b2 18       	st.h	r9[0x2],r8
   }  // end of while(1)
8000c16e:	cc 3b       	rjmp	8000c0f4 <fat_delete_file+0x14>

      if( (FS_ATTR_LFN_ENTRY != ptr_entry[11])
      &&  (b_short_del) )
      {
         // no long entry exist, then only a short entry to delete
         break;   // Go to delete cluster list
8000c170:	d7 03       	nop
8000c172:	c0 28       	rjmp	8000c176 <fat_delete_file+0x96>

      if( (FS_ATTR_LFN_ENTRY == ptr_entry[11])
      &&  ( 0 != (FS_ENTRY_LFN_LAST & u8_tmp)) )
      {
         // It is the last entry of long name
         break;   // Go to delete cluster list
8000c174:	d7 03       	nop

      // Go to previous entry
      fs_g_nav_fast.u16_entry_pos_sel_file--;
   }  // end of while(1)

   if( b_cluster_list )
8000c176:	ef 39 ff f4 	ld.ub	r9,r7[-12]
8000c17a:	30 08       	mov	r8,0
8000c17c:	f0 09 18 00 	cp.b	r9,r8
8000c180:	c0 e0       	breq	8000c19c <fat_delete_file+0xbc>
   {
      // Delete cluster list
      fs_g_nav_entry.u32_pos_in_file=0;      // Delete ALL list (start at begining)
8000c182:	48 e8       	lddpc	r8,8000c1b8 <fat_delete_file+0xd8>
8000c184:	30 09       	mov	r9,0
8000c186:	91 39       	st.w	r8[0xc],r9
      if( !fat_read_file( FS_CLUST_ACT_CLR ))
8000c188:	30 3c       	mov	r12,3
8000c18a:	f0 1f 00 0d 	mcall	8000c1bc <fat_delete_file+0xdc>
8000c18e:	18 98       	mov	r8,r12
8000c190:	ec 18 00 01 	eorl	r8,0x1
8000c194:	5c 58       	castu.b	r8
8000c196:	c0 30       	breq	8000c19c <fat_delete_file+0xbc>
         return false;
8000c198:	30 08       	mov	r8,0
8000c19a:	c0 28       	rjmp	8000c19e <fat_delete_file+0xbe>
   }

   return true;
8000c19c:	30 18       	mov	r8,1
}
8000c19e:	10 9c       	mov	r12,r8
8000c1a0:	2f dd       	sub	sp,-12
8000c1a2:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c1a6:	00 00       	add	r0,r0
8000c1a8:	80 00       	ld.sh	r0,r0[0x0]
8000c1aa:	a0 38       	st.h	r0[0x6],r8
8000c1ac:	80 00       	ld.sh	r0,r0[0x0]
8000c1ae:	a8 94       	st.b	r4[0x1],r4
8000c1b0:	80 00       	ld.sh	r0,r0[0x0]
8000c1b2:	a9 ac       	sbr	r12,0x8
8000c1b4:	00 00       	add	r0,r0
8000c1b6:	0d d0       	ld.ub	r0,r6[0x5]
8000c1b8:	00 00       	add	r0,r0
8000c1ba:	0b 44       	ld.w	r4,--r5
8000c1bc:	80 00       	ld.sh	r0,r0[0x0]
8000c1be:	9d 94       	st.w	lr[0x24],r4

8000c1c0 <fat_allocfreespace>:
//!   fs_g_seg.u32_addr          Return the first cluster value of the new cluster list
//!   fs_g_seg.u32_size_or_pos   The number of sector remaining (no allocated sectors, because disk fragmented or disk full)
//! @endverbatim
//!
bool  fat_allocfreespace( void )
{
8000c1c0:	eb cd 40 80 	pushm	r7,lr
8000c1c4:	1a 97       	mov	r7,sp
8000c1c6:	20 1d       	sub	sp,4
   // Flag to signal the first step which search the first free cluster of the new list
   bool first_cluster_free_is_found = false;
8000c1c8:	30 08       	mov	r8,0
8000c1ca:	ef 68 ff fe 	st.b	r7[-2],r8
   // If true then use a quick procedure but don't scan all FAT else use a slow procedure but scan all FAT
   bool b_quick_find = true;
8000c1ce:	30 18       	mov	r8,1
8000c1d0:	ef 68 ff ff 	st.b	r7[-1],r8

   if( Is_fat32 )
8000c1d4:	4e f8       	lddpc	r8,8000c390 <fat_allocfreespace+0x1d0>
8000c1d6:	11 89       	ld.ub	r9,r8[0x0]
8000c1d8:	30 38       	mov	r8,3
8000c1da:	f0 09 18 00 	cp.b	r9,r8
8000c1de:	c0 b1       	brne	8000c1f4 <fat_allocfreespace+0x34>
   {
      // Clear info about free space
      if( !fat_write_fat32_FSInfo( 0xFFFFFFFF ))
8000c1e0:	3f fc       	mov	r12,-1
8000c1e2:	f0 1f 00 6d 	mcall	8000c394 <fat_allocfreespace+0x1d4>
8000c1e6:	18 98       	mov	r8,r12
8000c1e8:	ec 18 00 01 	eorl	r8,0x1
8000c1ec:	5c 58       	castu.b	r8
8000c1ee:	c0 30       	breq	8000c1f4 <fat_allocfreespace+0x34>
         return false;
8000c1f0:	30 08       	mov	r8,0
8000c1f2:	cc b8       	rjmp	8000c388 <fat_allocfreespace+0x1c8>
   }

   if( 0xFF == MSB0(fs_g_seg.u32_addr) )
8000c1f4:	4e 98       	lddpc	r8,8000c398 <fat_allocfreespace+0x1d8>
8000c1f6:	11 89       	ld.ub	r9,r8[0x0]
8000c1f8:	3f f8       	mov	r8,-1
8000c1fa:	f0 09 18 00 	cp.b	r9,r8
8000c1fe:	c0 51       	brne	8000c208 <fat_allocfreespace+0x48>
   {
fat_allocfreespace_start:
      // New cluster list, then research at the beginning of FAT
      fs_g_cluster.u32_pos = 2;
8000c200:	4e 78       	lddpc	r8,8000c39c <fat_allocfreespace+0x1dc>
8000c202:	30 29       	mov	r9,2
8000c204:	91 09       	st.w	r8[0x0],r9
8000c206:	c0 78       	rjmp	8000c214 <fat_allocfreespace+0x54>
   }else{
      // Continue the cluster list then start after the end of the cluster list
      fs_g_cluster.u32_pos = fs_g_seg.u32_addr+1;
8000c208:	4e 48       	lddpc	r8,8000c398 <fat_allocfreespace+0x1d8>
8000c20a:	70 08       	ld.w	r8,r8[0x0]
8000c20c:	f0 c9 ff ff 	sub	r9,r8,-1
8000c210:	4e 38       	lddpc	r8,8000c39c <fat_allocfreespace+0x1dc>
8000c212:	91 09       	st.w	r8[0x0],r9
   }

   fat_clear_info_fat_mod();
8000c214:	f0 1f 00 63 	mcall	8000c3a0 <fat_allocfreespace+0x1e0>

   // Read ALL FAT1
   for(
8000c218:	c9 78       	rjmp	8000c346 <fat_allocfreespace+0x186>
   ;     fs_g_cluster.u32_pos < fs_g_nav.u32_CountofCluster
   ;     fs_g_cluster.u32_pos++ )
   {
      // Get the value of the cluster
      if ( !fat_cluster_val( FS_CLUST_VAL_READ ) )
8000c21a:	30 0c       	mov	r12,0
8000c21c:	f0 1f 00 62 	mcall	8000c3a4 <fat_allocfreespace+0x1e4>
8000c220:	18 98       	mov	r8,r12
8000c222:	ec 18 00 01 	eorl	r8,0x1
8000c226:	5c 58       	castu.b	r8
8000c228:	c0 30       	breq	8000c22e <fat_allocfreespace+0x6e>
         return false;
8000c22a:	30 08       	mov	r8,0
8000c22c:	ca e8       	rjmp	8000c388 <fat_allocfreespace+0x1c8>

      if ( 0 == fs_g_cluster.u32_val )
8000c22e:	4d c8       	lddpc	r8,8000c39c <fat_allocfreespace+0x1dc>
8000c230:	70 18       	ld.w	r8,r8[0x4]
8000c232:	58 08       	cp.w	r8,0
8000c234:	c7 11       	brne	8000c316 <fat_allocfreespace+0x156>
      {
         // A free cluster is found
         fs_g_cluster.u32_val = fs_g_cluster.u32_pos;    // value of the cluster is the new free cluster
8000c236:	4d a8       	lddpc	r8,8000c39c <fat_allocfreespace+0x1dc>
8000c238:	70 09       	ld.w	r9,r8[0x0]
8000c23a:	4d 98       	lddpc	r8,8000c39c <fat_allocfreespace+0x1dc>
8000c23c:	91 19       	st.w	r8[0x4],r9
         if( true == first_cluster_free_is_found )
8000c23e:	ef 39 ff fe 	ld.ub	r9,r7[-2]
8000c242:	30 08       	mov	r8,0
8000c244:	f0 09 18 00 	cp.b	r9,r8
8000c248:	c1 10       	breq	8000c26a <fat_allocfreespace+0xaa>
         {
            // Link the new cluster with previous cluster
            fs_g_cluster.u32_pos--;                      // select the previous cluster
8000c24a:	4d 58       	lddpc	r8,8000c39c <fat_allocfreespace+0x1dc>
8000c24c:	70 08       	ld.w	r8,r8[0x0]
8000c24e:	f0 c9 00 01 	sub	r9,r8,1
8000c252:	4d 38       	lddpc	r8,8000c39c <fat_allocfreespace+0x1dc>
8000c254:	91 09       	st.w	r8[0x0],r9
            if ( !fat_cluster_val( FS_CLUST_VAL_WRITE ) )
8000c256:	30 1c       	mov	r12,1
8000c258:	f0 1f 00 53 	mcall	8000c3a4 <fat_allocfreespace+0x1e4>
8000c25c:	18 98       	mov	r8,r12
8000c25e:	ec 18 00 01 	eorl	r8,0x1
8000c262:	5c 58       	castu.b	r8
8000c264:	c3 20       	breq	8000c2c8 <fat_allocfreespace+0x108>
               return false;
8000c266:	30 08       	mov	r8,0
8000c268:	c9 08       	rjmp	8000c388 <fat_allocfreespace+0x1c8>
         }
         else
         {
            // It is the first cluster of the new list
            first_cluster_free_is_found = true;
8000c26a:	30 18       	mov	r8,1
8000c26c:	ef 68 ff fe 	st.b	r7[-2],r8

            if( 0xFF != MSB0(fs_g_seg.u32_addr) )
8000c270:	4c a8       	lddpc	r8,8000c398 <fat_allocfreespace+0x1d8>
8000c272:	11 89       	ld.ub	r9,r8[0x0]
8000c274:	3f f8       	mov	r8,-1
8000c276:	f0 09 18 00 	cp.b	r9,r8
8000c27a:	c2 30       	breq	8000c2c0 <fat_allocfreespace+0x100>
            {
               // Link this new cluster with the current cluster list
               // Select the last cluster of the current list
               if( 0 == fs_g_seg.u32_addr )
8000c27c:	4c 78       	lddpc	r8,8000c398 <fat_allocfreespace+0x1d8>
8000c27e:	70 08       	ld.w	r8,r8[0x0]
8000c280:	58 08       	cp.w	r8,0
8000c282:	c1 11       	brne	8000c2a4 <fat_allocfreespace+0xe4>
               {  // The current cluster list is the cluster list of root directory
                  if( FS_TYPE_FAT_32 != fs_g_nav_fast.u8_type_fat )
8000c284:	4c 38       	lddpc	r8,8000c390 <fat_allocfreespace+0x1d0>
8000c286:	11 89       	ld.ub	r9,r8[0x0]
8000c288:	30 38       	mov	r8,3
8000c28a:	f0 09 18 00 	cp.b	r9,r8
8000c28e:	c0 60       	breq	8000c29a <fat_allocfreespace+0xda>
                  {
                     // Impossible to increment ROOT DIR size of FAT12 or FAT16
                     fs_g_status = FS_ERR_NO_FREE_SPACE;
8000c290:	4c 69       	lddpc	r9,8000c3a8 <fat_allocfreespace+0x1e8>
8000c292:	31 b8       	mov	r8,27
8000c294:	b2 88       	st.b	r9[0x0],r8
                     return false;
8000c296:	30 08       	mov	r8,0
8000c298:	c7 88       	rjmp	8000c388 <fat_allocfreespace+0x1c8>
                  }
                  fs_g_cluster.u32_pos = fs_g_nav.rootdir.u32_cluster;
8000c29a:	4c 58       	lddpc	r8,8000c3ac <fat_allocfreespace+0x1ec>
8000c29c:	70 69       	ld.w	r9,r8[0x18]
8000c29e:	4c 08       	lddpc	r8,8000c39c <fat_allocfreespace+0x1dc>
8000c2a0:	91 09       	st.w	r8[0x0],r9
8000c2a2:	c0 58       	rjmp	8000c2ac <fat_allocfreespace+0xec>
               }
               else
               {
                  fs_g_cluster.u32_pos = fs_g_seg.u32_addr;
8000c2a4:	4b d8       	lddpc	r8,8000c398 <fat_allocfreespace+0x1d8>
8000c2a6:	70 09       	ld.w	r9,r8[0x0]
8000c2a8:	4b d8       	lddpc	r8,8000c39c <fat_allocfreespace+0x1dc>
8000c2aa:	91 09       	st.w	r8[0x0],r9
               }
               if ( !fat_cluster_val( FS_CLUST_VAL_WRITE ) )
8000c2ac:	30 1c       	mov	r12,1
8000c2ae:	f0 1f 00 3e 	mcall	8000c3a4 <fat_allocfreespace+0x1e4>
8000c2b2:	18 98       	mov	r8,r12
8000c2b4:	ec 18 00 01 	eorl	r8,0x1
8000c2b8:	5c 58       	castu.b	r8
8000c2ba:	c0 30       	breq	8000c2c0 <fat_allocfreespace+0x100>
                  return false;
8000c2bc:	30 08       	mov	r8,0
8000c2be:	c6 58       	rjmp	8000c388 <fat_allocfreespace+0x1c8>
            }  // else no writing the first cluster value in FAT because no current cluster list
            fs_g_seg.u32_addr = fs_g_cluster.u32_val;    // save the first cluster value
8000c2c0:	4b 78       	lddpc	r8,8000c39c <fat_allocfreespace+0x1dc>
8000c2c2:	70 19       	ld.w	r9,r8[0x4]
8000c2c4:	4b 58       	lddpc	r8,8000c398 <fat_allocfreespace+0x1d8>
8000c2c6:	91 09       	st.w	r8[0x0],r9
         }

         // At the new cluster position, set the flag end of list
         fs_g_cluster.u32_pos = fs_g_cluster.u32_val;    // Select the new cluster
8000c2c8:	4b 58       	lddpc	r8,8000c39c <fat_allocfreespace+0x1dc>
8000c2ca:	70 19       	ld.w	r9,r8[0x4]
8000c2cc:	4b 48       	lddpc	r8,8000c39c <fat_allocfreespace+0x1dc>
8000c2ce:	91 09       	st.w	r8[0x0],r9
         fs_g_cluster.u32_val = FS_CLUST_VAL_EOL;        // Cluster value is the flag end of list
8000c2d0:	4b 38       	lddpc	r8,8000c39c <fat_allocfreespace+0x1dc>
8000c2d2:	e0 69 ff ff 	mov	r9,65535
8000c2d6:	ea 19 0f ff 	orh	r9,0xfff
8000c2da:	91 19       	st.w	r8[0x4],r9
         if ( !fat_cluster_val( FS_CLUST_VAL_WRITE ) )
8000c2dc:	30 1c       	mov	r12,1
8000c2de:	f0 1f 00 32 	mcall	8000c3a4 <fat_allocfreespace+0x1e4>
8000c2e2:	18 98       	mov	r8,r12
8000c2e4:	ec 18 00 01 	eorl	r8,0x1
8000c2e8:	5c 58       	castu.b	r8
8000c2ea:	c0 30       	breq	8000c2f0 <fat_allocfreespace+0x130>
            return false;
8000c2ec:	30 08       	mov	r8,0
8000c2ee:	c4 d8       	rjmp	8000c388 <fat_allocfreespace+0x1c8>

         // Compute the remaining sectors
         if ( fs_g_seg.u32_size_or_pos <= fs_g_nav.u8_BPB_SecPerClus )
8000c2f0:	4a a8       	lddpc	r8,8000c398 <fat_allocfreespace+0x1d8>
8000c2f2:	70 19       	ld.w	r9,r8[0x4]
8000c2f4:	4a e8       	lddpc	r8,8000c3ac <fat_allocfreespace+0x1ec>
8000c2f6:	11 98       	ld.ub	r8,r8[0x1]
8000c2f8:	10 39       	cp.w	r9,r8
8000c2fa:	e0 8b 00 06 	brhi	8000c306 <fat_allocfreespace+0x146>
         {
            fs_g_seg.u32_size_or_pos = 0; // All space found
8000c2fe:	4a 78       	lddpc	r8,8000c398 <fat_allocfreespace+0x1d8>
8000c300:	30 09       	mov	r9,0
8000c302:	91 19       	st.w	r8[0x4],r9
            break;                        // Stop loop
8000c304:	c2 a8       	rjmp	8000c358 <fat_allocfreespace+0x198>
         }
         fs_g_seg.u32_size_or_pos -= fs_g_nav.u8_BPB_SecPerClus;
8000c306:	4a 58       	lddpc	r8,8000c398 <fat_allocfreespace+0x1d8>
8000c308:	70 19       	ld.w	r9,r8[0x4]
8000c30a:	4a 98       	lddpc	r8,8000c3ac <fat_allocfreespace+0x1ec>
8000c30c:	11 98       	ld.ub	r8,r8[0x1]
8000c30e:	10 19       	sub	r9,r8
8000c310:	4a 28       	lddpc	r8,8000c398 <fat_allocfreespace+0x1d8>
8000c312:	91 19       	st.w	r8[0x4],r9
8000c314:	c1 38       	rjmp	8000c33a <fat_allocfreespace+0x17a>
      }
      else
      {
         // The next cluster is not free
         if( true == first_cluster_free_is_found )
8000c316:	ef 39 ff fe 	ld.ub	r9,r7[-2]
8000c31a:	30 08       	mov	r8,0
8000c31c:	f0 09 18 00 	cp.b	r9,r8
8000c320:	c1 b1       	brne	8000c356 <fat_allocfreespace+0x196>
         }
         else
         {
            // It is the first step to search the first free cluster
            // then ignore this cluster no free and continue search
            if( b_quick_find )
8000c322:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000c326:	30 08       	mov	r8,0
8000c328:	f0 09 18 00 	cp.b	r9,r8
8000c32c:	c0 70       	breq	8000c33a <fat_allocfreespace+0x17a>
            {
               fs_g_cluster.u32_pos += 500;
8000c32e:	49 c8       	lddpc	r8,8000c39c <fat_allocfreespace+0x1dc>
8000c330:	70 08       	ld.w	r8,r8[0x0]
8000c332:	f0 c9 fe 0c 	sub	r9,r8,-500
8000c336:	49 a8       	lddpc	r8,8000c39c <fat_allocfreespace+0x1dc>
8000c338:	91 09       	st.w	r8[0x0],r9
   fat_clear_info_fat_mod();

   // Read ALL FAT1
   for(
   ;     fs_g_cluster.u32_pos < fs_g_nav.u32_CountofCluster
   ;     fs_g_cluster.u32_pos++ )
8000c33a:	49 98       	lddpc	r8,8000c39c <fat_allocfreespace+0x1dc>
8000c33c:	70 08       	ld.w	r8,r8[0x0]
8000c33e:	f0 c9 ff ff 	sub	r9,r8,-1
8000c342:	49 78       	lddpc	r8,8000c39c <fat_allocfreespace+0x1dc>
8000c344:	91 09       	st.w	r8[0x0],r9

   fat_clear_info_fat_mod();

   // Read ALL FAT1
   for(
   ;     fs_g_cluster.u32_pos < fs_g_nav.u32_CountofCluster
8000c346:	49 68       	lddpc	r8,8000c39c <fat_allocfreespace+0x1dc>
8000c348:	70 09       	ld.w	r9,r8[0x0]
8000c34a:	49 98       	lddpc	r8,8000c3ac <fat_allocfreespace+0x1ec>
8000c34c:	70 38       	ld.w	r8,r8[0xc]
   }

   fat_clear_info_fat_mod();

   // Read ALL FAT1
   for(
8000c34e:	10 39       	cp.w	r9,r8
8000c350:	fe 93 ff 65 	brlo	8000c21a <fat_allocfreespace+0x5a>
8000c354:	c0 28       	rjmp	8000c358 <fat_allocfreespace+0x198>
         // The next cluster is not free
         if( true == first_cluster_free_is_found )
         {
            // To have a segment memory continue, the cluster list must be continue
            // then stop allocation
            break;
8000c356:	d7 03       	nop
         }
      }
   }

   // End of alloc
   if( false == first_cluster_free_is_found )
8000c358:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8000c35c:	ec 18 00 01 	eorl	r8,0x1
8000c360:	5c 58       	castu.b	r8
8000c362:	c1 00       	breq	8000c382 <fat_allocfreespace+0x1c2>
   {
      if( b_quick_find )
8000c364:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000c368:	30 08       	mov	r8,0
8000c36a:	f0 09 18 00 	cp.b	r9,r8
8000c36e:	c0 50       	breq	8000c378 <fat_allocfreespace+0x1b8>
      {
         // Retry in normal mode to scan all FAT (= no quick mode)
         b_quick_find = false;
8000c370:	30 08       	mov	r8,0
8000c372:	ef 68 ff ff 	st.b	r7[-1],r8
         goto fat_allocfreespace_start;
8000c376:	c4 5b       	rjmp	8000c200 <fat_allocfreespace+0x40>
      }
      fs_g_status = FS_ERR_NO_FREE_SPACE; // NO FREE CLUSTER FIND
8000c378:	48 c9       	lddpc	r9,8000c3a8 <fat_allocfreespace+0x1e8>
8000c37a:	31 b8       	mov	r8,27
8000c37c:	b2 88       	st.b	r9[0x0],r8
      return false;
8000c37e:	30 08       	mov	r8,0
8000c380:	c0 48       	rjmp	8000c388 <fat_allocfreespace+0x1c8>
   }

   return fat_update_fat2();
8000c382:	f0 1f 00 0c 	mcall	8000c3b0 <fat_allocfreespace+0x1f0>
8000c386:	18 98       	mov	r8,r12
}
8000c388:	10 9c       	mov	r12,r8
8000c38a:	2f fd       	sub	sp,-4
8000c38c:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c390:	00 00       	add	r0,r0
8000c392:	0d d0       	ld.ub	r0,r6[0x5]
8000c394:	80 00       	ld.sh	r0,r0[0x0]
8000c396:	b3 cc       	cbr	r12,0x12
8000c398:	00 00       	add	r0,r0
8000c39a:	0e 2c       	rsub	r12,r7
8000c39c:	00 00       	add	r0,r0
8000c39e:	0e 24       	rsub	r4,r7
8000c3a0:	80 00       	ld.sh	r0,r0[0x0]
8000c3a2:	c3 b4       	brge	8000c418 <fat_update_fat2+0x44>
8000c3a4:	80 00       	ld.sh	r0,r0[0x0]
8000c3a6:	92 04       	ld.sh	r4,r9[0x0]
8000c3a8:	00 00       	add	r0,r0
8000c3aa:	0d d4       	ld.ub	r4,r6[0x5]
8000c3ac:	00 00       	add	r0,r0
8000c3ae:	0d 84       	ld.ub	r4,r6[0x0]
8000c3b0:	80 00       	ld.sh	r0,r0[0x0]
8000c3b2:	c3 d4       	brge	8000c42c <fat_update_fat2+0x58>

8000c3b4 <fat_clear_info_fat_mod>:

#if (FS_LEVEL_FEATURES > FSFEATURE_READ)
//! This function clears the cache information about FAT modifications
//!
void  fat_clear_info_fat_mod( void )
{
8000c3b4:	eb cd 40 80 	pushm	r7,lr
8000c3b8:	1a 97       	mov	r7,sp
   fs_g_u32_first_mod_fat = 0xFFFFFFFF;
8000c3ba:	48 58       	lddpc	r8,8000c3cc <fat_clear_info_fat_mod+0x18>
8000c3bc:	3f f9       	mov	r9,-1
8000c3be:	91 09       	st.w	r8[0x0],r9
   fs_g_u32_last_mod_fat = 0;
8000c3c0:	48 48       	lddpc	r8,8000c3d0 <fat_clear_info_fat_mod+0x1c>
8000c3c2:	30 09       	mov	r9,0
8000c3c4:	91 09       	st.w	r8[0x0],r9
}
8000c3c6:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c3ca:	00 00       	add	r0,r0
8000c3cc:	00 00       	add	r0,r0
8000c3ce:	0d b8       	ld.ub	r8,r6[0x3]
8000c3d0:	00 00       	add	r0,r0
8000c3d2:	0b 80       	ld.ub	r0,r5[0x0]

8000c3d4 <fat_update_fat2>:
//!
//! @return    false in case of error, see global value "fs_g_status" for more detail
//! @return    true otherwise
//!
bool  fat_update_fat2( void )
{
8000c3d4:	eb cd 40 80 	pushm	r7,lr
8000c3d8:	1a 97       	mov	r7,sp
  while( fs_g_u32_first_mod_fat <= fs_g_u32_last_mod_fat )
8000c3da:	c2 f8       	rjmp	8000c438 <fat_update_fat2+0x64>
  {
     // Compute the modification position of FAT 1
     fs_gu32_addrsector = fs_g_nav.u32_ptr_fat + fs_g_u32_first_mod_fat;
8000c3dc:	49 d8       	lddpc	r8,8000c450 <fat_update_fat2+0x7c>
8000c3de:	70 49       	ld.w	r9,r8[0x10]
8000c3e0:	49 d8       	lddpc	r8,8000c454 <fat_update_fat2+0x80>
8000c3e2:	70 08       	ld.w	r8,r8[0x0]
8000c3e4:	10 09       	add	r9,r8
8000c3e6:	49 d8       	lddpc	r8,8000c458 <fat_update_fat2+0x84>
8000c3e8:	91 09       	st.w	r8[0x0],r9
     // Read FAT1
      if( !fat_cache_read_sector( true ))
8000c3ea:	30 1c       	mov	r12,1
8000c3ec:	f0 1f 00 1c 	mcall	8000c45c <fat_update_fat2+0x88>
8000c3f0:	18 98       	mov	r8,r12
8000c3f2:	ec 18 00 01 	eorl	r8,0x1
8000c3f6:	5c 58       	castu.b	r8
8000c3f8:	c0 30       	breq	8000c3fe <fat_update_fat2+0x2a>
         return false;
8000c3fa:	30 08       	mov	r8,0
8000c3fc:	c2 68       	rjmp	8000c448 <fat_update_fat2+0x74>
     // Compute the modification position of FAT 2
     fs_gu32_addrsector = fs_g_nav.u32_ptr_fat + (fs_g_u32_first_mod_fat + fs_g_nav.u32_fat_size);
8000c3fe:	49 58       	lddpc	r8,8000c450 <fat_update_fat2+0x7c>
8000c400:	70 49       	ld.w	r9,r8[0x10]
8000c402:	49 48       	lddpc	r8,8000c450 <fat_update_fat2+0x7c>
8000c404:	70 1a       	ld.w	r10,r8[0x4]
8000c406:	49 48       	lddpc	r8,8000c454 <fat_update_fat2+0x80>
8000c408:	70 08       	ld.w	r8,r8[0x0]
8000c40a:	f4 08 00 08 	add	r8,r10,r8
8000c40e:	10 09       	add	r9,r8
8000c410:	49 28       	lddpc	r8,8000c458 <fat_update_fat2+0x84>
8000c412:	91 09       	st.w	r8[0x0],r9
     // Init the sector FAT2 with the previous sector of the FAT1
     if( !fat_cache_read_sector( false ))
8000c414:	30 0c       	mov	r12,0
8000c416:	f0 1f 00 12 	mcall	8000c45c <fat_update_fat2+0x88>
8000c41a:	18 98       	mov	r8,r12
8000c41c:	ec 18 00 01 	eorl	r8,0x1
8000c420:	5c 58       	castu.b	r8
8000c422:	c0 30       	breq	8000c428 <fat_update_fat2+0x54>
         return false;
8000c424:	30 08       	mov	r8,0
8000c426:	c1 18       	rjmp	8000c448 <fat_update_fat2+0x74>
     // Flag the sector FAT2 like modify
     fat_cache_mark_sector_as_dirty();
8000c428:	f0 1f 00 0e 	mcall	8000c460 <fat_update_fat2+0x8c>
     fs_g_u32_first_mod_fat++;
8000c42c:	48 a8       	lddpc	r8,8000c454 <fat_update_fat2+0x80>
8000c42e:	70 08       	ld.w	r8,r8[0x0]
8000c430:	f0 c9 ff ff 	sub	r9,r8,-1
8000c434:	48 88       	lddpc	r8,8000c454 <fat_update_fat2+0x80>
8000c436:	91 09       	st.w	r8[0x0],r9
//! @return    false in case of error, see global value "fs_g_status" for more detail
//! @return    true otherwise
//!
bool  fat_update_fat2( void )
{
  while( fs_g_u32_first_mod_fat <= fs_g_u32_last_mod_fat )
8000c438:	48 78       	lddpc	r8,8000c454 <fat_update_fat2+0x80>
8000c43a:	70 09       	ld.w	r9,r8[0x0]
8000c43c:	48 a8       	lddpc	r8,8000c464 <fat_update_fat2+0x90>
8000c43e:	70 08       	ld.w	r8,r8[0x0]
8000c440:	10 39       	cp.w	r9,r8
8000c442:	fe 98 ff cd 	brls	8000c3dc <fat_update_fat2+0x8>
         return false;
     // Flag the sector FAT2 like modify
     fat_cache_mark_sector_as_dirty();
     fs_g_u32_first_mod_fat++;
  }
  return true;
8000c446:	30 18       	mov	r8,1
}
8000c448:	10 9c       	mov	r12,r8
8000c44a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c44e:	00 00       	add	r0,r0
8000c450:	00 00       	add	r0,r0
8000c452:	0d 84       	ld.ub	r4,r6[0x0]
8000c454:	00 00       	add	r0,r0
8000c456:	0d b8       	ld.ub	r8,r6[0x3]
8000c458:	00 00       	add	r0,r0
8000c45a:	0b 40       	ld.w	r0,--r5
8000c45c:	80 00       	ld.sh	r0,r0[0x0]
8000c45e:	a8 bc       	st.b	r4[0x3],r12
8000c460:	80 00       	ld.sh	r0,r0[0x0]
8000c462:	a9 ac       	sbr	r12,0x8
8000c464:	00 00       	add	r0,r0
8000c466:	0b 80       	ld.ub	r0,r5[0x0]

8000c468 <fat_clear_cluster>:
//! IN :
//!   fs_g_seg.u32_addr          Cluster value to clear
//! @endverbatim
//!
bool  fat_clear_cluster( void )
{
8000c468:	eb cd 40 80 	pushm	r7,lr
8000c46c:	1a 97       	mov	r7,sp
8000c46e:	20 1d       	sub	sp,4
   uint8_t u8_loop;

   // Compute the cluster sector address
   fs_g_seg.u32_size_or_pos  = 0;   // Select the beginning of cluster
8000c470:	4a 48       	lddpc	r8,8000c500 <fat_clear_cluster+0x98>
8000c472:	30 09       	mov	r9,0
8000c474:	91 19       	st.w	r8[0x4],r9
   if( !fat_cluster_list( FS_CLUST_ACT_ONE, false ))
8000c476:	30 0b       	mov	r11,0
8000c478:	30 2c       	mov	r12,2
8000c47a:	f0 1f 00 23 	mcall	8000c504 <fat_clear_cluster+0x9c>
8000c47e:	18 98       	mov	r8,r12
8000c480:	ec 18 00 01 	eorl	r8,0x1
8000c484:	5c 58       	castu.b	r8
8000c486:	c0 30       	breq	8000c48c <fat_clear_cluster+0x24>
      return false;
8000c488:	30 08       	mov	r8,0
8000c48a:	c3 68       	rjmp	8000c4f6 <fat_clear_cluster+0x8e>

   // Loop in the cluster (start at the end of cluster)
   fs_gu32_addrsector = fs_g_seg.u32_addr + (fs_g_nav.u8_BPB_SecPerClus -1);
8000c48c:	49 d8       	lddpc	r8,8000c500 <fat_clear_cluster+0x98>
8000c48e:	70 09       	ld.w	r9,r8[0x0]
8000c490:	49 e8       	lddpc	r8,8000c508 <fat_clear_cluster+0xa0>
8000c492:	11 98       	ld.ub	r8,r8[0x1]
8000c494:	f2 08 00 08 	add	r8,r9,r8
8000c498:	f0 c9 00 01 	sub	r9,r8,1
8000c49c:	49 c8       	lddpc	r8,8000c50c <fat_clear_cluster+0xa4>
8000c49e:	91 09       	st.w	r8[0x0],r9
   for(  u8_loop = 0
   ;     fs_g_nav.u8_BPB_SecPerClus != u8_loop
8000c4a0:	30 08       	mov	r8,0
8000c4a2:	ef 68 ff ff 	st.b	r7[-1],r8
   if( !fat_cluster_list( FS_CLUST_ACT_ONE, false ))
      return false;

   // Loop in the cluster (start at the end of cluster)
   fs_gu32_addrsector = fs_g_seg.u32_addr + (fs_g_nav.u8_BPB_SecPerClus -1);
   for(  u8_loop = 0
8000c4a6:	c2 08       	rjmp	8000c4e6 <fat_clear_cluster+0x7e>
   ;     fs_g_nav.u8_BPB_SecPerClus != u8_loop
   ;     u8_loop++ )
   {
      // Update internal cache with cluster sector information but don't read data from memory
      if( !fat_cache_read_sector( false ))
8000c4a8:	30 0c       	mov	r12,0
8000c4aa:	f0 1f 00 1a 	mcall	8000c510 <fat_clear_cluster+0xa8>
8000c4ae:	18 98       	mov	r8,r12
8000c4b0:	ec 18 00 01 	eorl	r8,0x1
8000c4b4:	5c 58       	castu.b	r8
8000c4b6:	c0 30       	breq	8000c4bc <fat_clear_cluster+0x54>
         return false;
8000c4b8:	30 08       	mov	r8,0
8000c4ba:	c1 e8       	rjmp	8000c4f6 <fat_clear_cluster+0x8e>

      if(0 == u8_loop)
8000c4bc:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000c4c0:	30 08       	mov	r8,0
8000c4c2:	f0 09 18 00 	cp.b	r9,r8
8000c4c6:	c0 31       	brne	8000c4cc <fat_clear_cluster+0x64>
      {  // Clean internal cache (just for the sector)
         fat_cache_clear();
8000c4c8:	f0 1f 00 13 	mcall	8000c514 <fat_clear_cluster+0xac>
      }
      fat_cache_mark_sector_as_dirty();
8000c4cc:	f0 1f 00 13 	mcall	8000c518 <fat_clear_cluster+0xb0>
      fs_gu32_addrsector--;         // go to previous sector
8000c4d0:	48 f8       	lddpc	r8,8000c50c <fat_clear_cluster+0xa4>
8000c4d2:	70 08       	ld.w	r8,r8[0x0]
8000c4d4:	f0 c9 00 01 	sub	r9,r8,1
8000c4d8:	48 d8       	lddpc	r8,8000c50c <fat_clear_cluster+0xa4>
8000c4da:	91 09       	st.w	r8[0x0],r9

   // Loop in the cluster (start at the end of cluster)
   fs_gu32_addrsector = fs_g_seg.u32_addr + (fs_g_nav.u8_BPB_SecPerClus -1);
   for(  u8_loop = 0
   ;     fs_g_nav.u8_BPB_SecPerClus != u8_loop
   ;     u8_loop++ )
8000c4dc:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000c4e0:	2f f8       	sub	r8,-1
8000c4e2:	ef 68 ff ff 	st.b	r7[-1],r8
      return false;

   // Loop in the cluster (start at the end of cluster)
   fs_gu32_addrsector = fs_g_seg.u32_addr + (fs_g_nav.u8_BPB_SecPerClus -1);
   for(  u8_loop = 0
   ;     fs_g_nav.u8_BPB_SecPerClus != u8_loop
8000c4e6:	48 98       	lddpc	r8,8000c508 <fat_clear_cluster+0xa0>
8000c4e8:	11 98       	ld.ub	r8,r8[0x1]
   if( !fat_cluster_list( FS_CLUST_ACT_ONE, false ))
      return false;

   // Loop in the cluster (start at the end of cluster)
   fs_gu32_addrsector = fs_g_seg.u32_addr + (fs_g_nav.u8_BPB_SecPerClus -1);
   for(  u8_loop = 0
8000c4ea:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000c4ee:	f0 09 18 00 	cp.b	r9,r8
8000c4f2:	cd b1       	brne	8000c4a8 <fat_clear_cluster+0x40>
         fat_cache_clear();
      }
      fat_cache_mark_sector_as_dirty();
      fs_gu32_addrsector--;         // go to previous sector
   }
   return true;
8000c4f4:	30 18       	mov	r8,1
}
8000c4f6:	10 9c       	mov	r12,r8
8000c4f8:	2f fd       	sub	sp,-4
8000c4fa:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c4fe:	00 00       	add	r0,r0
8000c500:	00 00       	add	r0,r0
8000c502:	0e 2c       	rsub	r12,r7
8000c504:	80 00       	ld.sh	r0,r0[0x0]
8000c506:	8d 58       	st.w	r6[0x14],r8
8000c508:	00 00       	add	r0,r0
8000c50a:	0d 84       	ld.ub	r4,r6[0x0]
8000c50c:	00 00       	add	r0,r0
8000c50e:	0b 40       	ld.w	r0,--r5
8000c510:	80 00       	ld.sh	r0,r0[0x0]
8000c512:	a8 bc       	st.b	r4[0x3],r12
8000c514:	80 00       	ld.sh	r0,r0[0x0]
8000c516:	a9 8c       	lsr	r12,0x8
8000c518:	80 00       	ld.sh	r0,r0[0x0]
8000c51a:	a9 ac       	sbr	r12,0x8

8000c51c <file_open>:
//!
//! @return    false in case of error, see global value "fs_g_status" for more detail
//! @return    true otherwise
//!
bool  file_open( uint8_t fopen_mode )
{
8000c51c:	eb cd 40 80 	pushm	r7,lr
8000c520:	1a 97       	mov	r7,sp
8000c522:	20 1d       	sub	sp,4
8000c524:	18 98       	mov	r8,r12
8000c526:	ef 68 ff fc 	st.b	r7[-4],r8
   if( !fat_check_mount_select_noopen())
8000c52a:	f0 1f 00 31 	mcall	8000c5ec <file_open+0xd0>
8000c52e:	18 98       	mov	r8,r12
8000c530:	ec 18 00 01 	eorl	r8,0x1
8000c534:	5c 58       	castu.b	r8
8000c536:	c0 30       	breq	8000c53c <file_open+0x20>
      return false;
8000c538:	30 08       	mov	r8,0
8000c53a:	c5 58       	rjmp	8000c5e4 <file_open+0xc8>

   if( !fat_check_is_file())
8000c53c:	f0 1f 00 2d 	mcall	8000c5f0 <file_open+0xd4>
8000c540:	18 98       	mov	r8,r12
8000c542:	ec 18 00 01 	eorl	r8,0x1
8000c546:	5c 58       	castu.b	r8
8000c548:	c0 30       	breq	8000c54e <file_open+0x32>
      return false;
8000c54a:	30 08       	mov	r8,0
8000c54c:	c4 c8       	rjmp	8000c5e4 <file_open+0xc8>

   if(FOPEN_WRITE_ACCESS & fopen_mode)
8000c54e:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000c552:	e2 18 00 02 	andl	r8,0x2,COH
8000c556:	c2 30       	breq	8000c59c <file_open+0x80>
   {
      if( !fat_check_nav_access_file( true ) )
8000c558:	30 1c       	mov	r12,1
8000c55a:	f0 1f 00 27 	mcall	8000c5f4 <file_open+0xd8>
8000c55e:	18 98       	mov	r8,r12
8000c560:	ec 18 00 01 	eorl	r8,0x1
8000c564:	5c 58       	castu.b	r8
8000c566:	c0 30       	breq	8000c56c <file_open+0x50>
         return false;
8000c568:	30 08       	mov	r8,0
8000c56a:	c3 d8       	rjmp	8000c5e4 <file_open+0xc8>
#if (FSFEATURE_WRITE == (FS_LEVEL_FEATURES & FSFEATURE_WRITE))
      if (FS_ATTR_READ_ONLY & fs_g_nav_entry.u8_attr)
8000c56c:	4a 38       	lddpc	r8,8000c5f8 <file_open+0xdc>
8000c56e:	11 a8       	ld.ub	r8,r8[0x2]
8000c570:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000c574:	5c 58       	castu.b	r8
8000c576:	c0 60       	breq	8000c582 <file_open+0x66>
      {
         fs_g_status = FS_ERR_READ_ONLY;  // File is read only
8000c578:	4a 19       	lddpc	r9,8000c5fc <file_open+0xe0>
8000c57a:	31 58       	mov	r8,21
8000c57c:	b2 88       	st.b	r9[0x0],r8
         return false;
8000c57e:	30 08       	mov	r8,0
8000c580:	c3 28       	rjmp	8000c5e4 <file_open+0xc8>
      }
      if( mem_wr_protect( fs_g_nav.u8_lun  ))
8000c582:	4a 08       	lddpc	r8,8000c600 <file_open+0xe4>
8000c584:	11 88       	ld.ub	r8,r8[0x0]
8000c586:	10 9c       	mov	r12,r8
8000c588:	f0 1f 00 1f 	mcall	8000c604 <file_open+0xe8>
8000c58c:	18 98       	mov	r8,r12
8000c58e:	58 08       	cp.w	r8,0
8000c590:	c1 00       	breq	8000c5b0 <file_open+0x94>
      {
         fs_g_status = FS_LUN_WP;  // Disk read only
8000c592:	49 b9       	lddpc	r9,8000c5fc <file_open+0xe0>
8000c594:	31 48       	mov	r8,20
8000c596:	b2 88       	st.b	r9[0x0],r8
         return false;
8000c598:	30 08       	mov	r8,0
8000c59a:	c2 58       	rjmp	8000c5e4 <file_open+0xc8>
      return false;
#endif  // FS_LEVEL_FEATURES
   }
   else
   {
      if( !fat_check_nav_access_file( false ) )
8000c59c:	30 0c       	mov	r12,0
8000c59e:	f0 1f 00 16 	mcall	8000c5f4 <file_open+0xd8>
8000c5a2:	18 98       	mov	r8,r12
8000c5a4:	ec 18 00 01 	eorl	r8,0x1
8000c5a8:	5c 58       	castu.b	r8
8000c5aa:	c0 30       	breq	8000c5b0 <file_open+0x94>
         return false;
8000c5ac:	30 08       	mov	r8,0
8000c5ae:	c1 b8       	rjmp	8000c5e4 <file_open+0xc8>
   }

   if(FOPEN_CLEAR_SIZE & fopen_mode)
8000c5b0:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000c5b4:	e2 18 00 04 	andl	r8,0x4,COH
8000c5b8:	c0 40       	breq	8000c5c0 <file_open+0xa4>
   {
      fs_g_nav_entry.u32_size    = 0;     // The size is null
8000c5ba:	49 08       	lddpc	r8,8000c5f8 <file_open+0xdc>
8000c5bc:	30 09       	mov	r9,0
8000c5be:	91 29       	st.w	r8[0x8],r9
   }
   if(FOPEN_CLEAR_PTR & fopen_mode)
8000c5c0:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000c5c4:	e2 18 00 08 	andl	r8,0x8,COH
8000c5c8:	c0 50       	breq	8000c5d2 <file_open+0xb6>
   {
      fs_g_nav_entry.u32_pos_in_file = 0;
8000c5ca:	48 c8       	lddpc	r8,8000c5f8 <file_open+0xdc>
8000c5cc:	30 09       	mov	r9,0
8000c5ce:	91 39       	st.w	r8[0xc],r9
8000c5d0:	c0 58       	rjmp	8000c5da <file_open+0xbe>
   }
   else
   {  // Go to at the end of file
      fs_g_nav_entry.u32_pos_in_file = fs_g_nav_entry.u32_size;
8000c5d2:	48 a8       	lddpc	r8,8000c5f8 <file_open+0xdc>
8000c5d4:	70 29       	ld.w	r9,r8[0x8]
8000c5d6:	48 98       	lddpc	r8,8000c5f8 <file_open+0xdc>
8000c5d8:	91 39       	st.w	r8[0xc],r9
   }
   fs_g_nav_entry.u8_open_mode = fopen_mode;
8000c5da:	48 89       	lddpc	r9,8000c5f8 <file_open+0xdc>
8000c5dc:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000c5e0:	b2 88       	st.b	r9[0x0],r8
   return true;
8000c5e2:	30 18       	mov	r8,1
}
8000c5e4:	10 9c       	mov	r12,r8
8000c5e6:	2f fd       	sub	sp,-4
8000c5e8:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c5ec:	80 00       	ld.sh	r0,r0[0x0]
8000c5ee:	8c 70       	ld.sh	r0,r6[0xe]
8000c5f0:	80 00       	ld.sh	r0,r0[0x0]
8000c5f2:	8d 24       	st.w	r6[0x8],r4
8000c5f4:	80 00       	ld.sh	r0,r0[0x0]
8000c5f6:	aa 38       	st.h	r5[0x6],r8
8000c5f8:	00 00       	add	r0,r0
8000c5fa:	0b 44       	ld.w	r4,--r5
8000c5fc:	00 00       	add	r0,r0
8000c5fe:	0d d4       	ld.ub	r4,r6[0x5]
8000c600:	00 00       	add	r0,r0
8000c602:	0d 84       	ld.ub	r4,r6[0x0]
8000c604:	80 00       	ld.sh	r0,r0[0x0]
8000c606:	ac d0       	st.b	r6[0x5],r0

8000c608 <file_putc>:
//!
//! @return    false in case of error, see global value "fs_g_status" for more detail
//! @return    true otherwise
//!
bool  file_putc( uint8_t u8_byte )
{
8000c608:	eb cd 40 80 	pushm	r7,lr
8000c60c:	1a 97       	mov	r7,sp
8000c60e:	20 1d       	sub	sp,4
8000c610:	18 98       	mov	r8,r12
8000c612:	ef 68 ff fc 	st.b	r7[-4],r8
   if( !fat_check_mount_select_open())
8000c616:	f0 1f 00 20 	mcall	8000c694 <file_putc+0x8c>
8000c61a:	18 98       	mov	r8,r12
8000c61c:	ec 18 00 01 	eorl	r8,0x1
8000c620:	5c 58       	castu.b	r8
8000c622:	c0 30       	breq	8000c628 <file_putc+0x20>
      return false;
8000c624:	30 08       	mov	r8,0
8000c626:	c3 38       	rjmp	8000c68c <file_putc+0x84>

   if(!(FOPEN_WRITE_ACCESS & fs_g_nav_entry.u8_open_mode))
8000c628:	49 c8       	lddpc	r8,8000c698 <file_putc+0x90>
8000c62a:	11 88       	ld.ub	r8,r8[0x0]
8000c62c:	e2 18 00 02 	andl	r8,0x2,COH
8000c630:	c0 61       	brne	8000c63c <file_putc+0x34>
   {
      fs_g_status = FS_ERR_READ_ONLY;
8000c632:	49 b9       	lddpc	r9,8000c69c <file_putc+0x94>
8000c634:	31 58       	mov	r8,21
8000c636:	b2 88       	st.b	r9[0x0],r8
      return false;
8000c638:	30 08       	mov	r8,0
8000c63a:	c2 98       	rjmp	8000c68c <file_putc+0x84>
   }

   if( !fat_write_file( FS_CLUST_ACT_ONE  , 1 ))
8000c63c:	30 1b       	mov	r11,1
8000c63e:	30 2c       	mov	r12,2
8000c640:	f0 1f 00 18 	mcall	8000c6a0 <file_putc+0x98>
8000c644:	18 98       	mov	r8,r12
8000c646:	ec 18 00 01 	eorl	r8,0x1
8000c64a:	5c 58       	castu.b	r8
8000c64c:	c0 30       	breq	8000c652 <file_putc+0x4a>
      return false;
8000c64e:	30 08       	mov	r8,0
8000c650:	c1 e8       	rjmp	8000c68c <file_putc+0x84>

   // Write the data in the internal cache
   fat_cache_mark_sector_as_dirty();
8000c652:	f0 1f 00 15 	mcall	8000c6a4 <file_putc+0x9c>
   fs_g_sector[ fs_g_nav_entry.u32_pos_in_file & FS_512B_MASK ]    = u8_byte;
8000c656:	49 18       	lddpc	r8,8000c698 <file_putc+0x90>
8000c658:	70 38       	ld.w	r8,r8[0xc]
8000c65a:	f3 d8 c0 09 	bfextu	r9,r8,0x0,0x9
8000c65e:	49 3a       	lddpc	r10,8000c6a8 <file_putc+0xa0>
8000c660:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000c664:	f4 09 0b 08 	st.b	r10[r9],r8
   fs_g_nav_entry.u32_pos_in_file++;
8000c668:	48 c8       	lddpc	r8,8000c698 <file_putc+0x90>
8000c66a:	70 38       	ld.w	r8,r8[0xc]
8000c66c:	f0 c9 ff ff 	sub	r9,r8,-1
8000c670:	48 a8       	lddpc	r8,8000c698 <file_putc+0x90>
8000c672:	91 39       	st.w	r8[0xc],r9

   // Update the file size
   if( fs_g_nav_entry.u32_pos_in_file > fs_g_nav_entry.u32_size )
8000c674:	48 98       	lddpc	r8,8000c698 <file_putc+0x90>
8000c676:	70 39       	ld.w	r9,r8[0xc]
8000c678:	48 88       	lddpc	r8,8000c698 <file_putc+0x90>
8000c67a:	70 28       	ld.w	r8,r8[0x8]
8000c67c:	10 39       	cp.w	r9,r8
8000c67e:	e0 88 00 06 	brls	8000c68a <file_putc+0x82>
   {
      fs_g_nav_entry.u32_size = fs_g_nav_entry.u32_pos_in_file;
8000c682:	48 68       	lddpc	r8,8000c698 <file_putc+0x90>
8000c684:	70 39       	ld.w	r9,r8[0xc]
8000c686:	48 58       	lddpc	r8,8000c698 <file_putc+0x90>
8000c688:	91 29       	st.w	r8[0x8],r9
   }
   return true;
8000c68a:	30 18       	mov	r8,1
}
8000c68c:	10 9c       	mov	r12,r8
8000c68e:	2f fd       	sub	sp,-4
8000c690:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c694:	80 00       	ld.sh	r0,r0[0x0]
8000c696:	8c b4       	ld.uh	r4,r6[0x6]
8000c698:	00 00       	add	r0,r0
8000c69a:	0b 44       	ld.w	r4,--r5
8000c69c:	00 00       	add	r0,r0
8000c69e:	0d d4       	ld.ub	r4,r6[0x5]
8000c6a0:	80 00       	ld.sh	r0,r0[0x0]
8000c6a2:	9e bc       	ld.uh	r12,pc[0x6]
8000c6a4:	80 00       	ld.sh	r0,r0[0x0]
8000c6a6:	a9 ac       	sbr	r12,0x8
8000c6a8:	00 00       	add	r0,r0
8000c6aa:	0b 84       	ld.ub	r4,r5[0x0]

8000c6ac <file_close>:


//! This function closes the file
//!
void  file_close( void )
{
8000c6ac:	eb cd 40 80 	pushm	r7,lr
8000c6b0:	1a 97       	mov	r7,sp
   // If a file is opened, then close this one
   if( fat_check_mount_select_open() )
8000c6b2:	f0 1f 00 0f 	mcall	8000c6ec <file_close+0x40>
8000c6b6:	18 98       	mov	r8,r12
8000c6b8:	58 08       	cp.w	r8,0
8000c6ba:	c1 60       	breq	8000c6e6 <file_close+0x3a>
   {

#if (FSFEATURE_WRITE == (FS_LEVEL_FEATURES & FSFEATURE_WRITE))
      if( FOPEN_WRITE_ACCESS & fs_g_nav_entry.u8_open_mode )
8000c6bc:	48 d8       	lddpc	r8,8000c6f0 <file_close+0x44>
8000c6be:	11 88       	ld.ub	r8,r8[0x0]
8000c6c0:	e2 18 00 02 	andl	r8,0x2,COH
8000c6c4:	c0 c0       	breq	8000c6dc <file_close+0x30>
      {
         // Write file information
         if( !fat_read_dir() )
8000c6c6:	f0 1f 00 0c 	mcall	8000c6f4 <file_close+0x48>
8000c6ca:	18 98       	mov	r8,r12
8000c6cc:	ec 18 00 01 	eorl	r8,0x1
8000c6d0:	5c 58       	castu.b	r8
8000c6d2:	c0 91       	brne	8000c6e4 <file_close+0x38>
            return;           // error
         fat_write_entry_file();
8000c6d4:	f0 1f 00 09 	mcall	8000c6f8 <file_close+0x4c>
         fat_cache_flush();   // In case of error during writing data, flush the data before exit function
8000c6d8:	f0 1f 00 09 	mcall	8000c6fc <file_close+0x50>
      }
#endif  // FS_LEVEL_FEATURES
      Fat_file_close();
8000c6dc:	48 59       	lddpc	r9,8000c6f0 <file_close+0x44>
8000c6de:	30 08       	mov	r8,0
8000c6e0:	b2 88       	st.b	r9[0x0],r8
8000c6e2:	c0 28       	rjmp	8000c6e6 <file_close+0x3a>
#if (FSFEATURE_WRITE == (FS_LEVEL_FEATURES & FSFEATURE_WRITE))
      if( FOPEN_WRITE_ACCESS & fs_g_nav_entry.u8_open_mode )
      {
         // Write file information
         if( !fat_read_dir() )
            return;           // error
8000c6e4:	d7 03       	nop
         fat_cache_flush();   // In case of error during writing data, flush the data before exit function
      }
#endif  // FS_LEVEL_FEATURES
      Fat_file_close();
   }
}
8000c6e6:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c6ea:	00 00       	add	r0,r0
8000c6ec:	80 00       	ld.sh	r0,r0[0x0]
8000c6ee:	8c b4       	ld.uh	r4,r6[0x6]
8000c6f0:	00 00       	add	r0,r0
8000c6f2:	0b 44       	ld.w	r4,--r5
8000c6f4:	80 00       	ld.sh	r0,r0[0x0]
8000c6f6:	a0 38       	st.h	r0[0x6],r8
8000c6f8:	80 00       	ld.sh	r0,r0[0x0]
8000c6fa:	a3 04       	ld.d	r4,r1
8000c6fc:	80 00       	ld.sh	r0,r0[0x0]
8000c6fe:	a9 c4       	cbr	r4,0x8

8000c700 <nav_reset>:
//! @verbatim
//! Call this at the program startup or before a new session (e.g. USB Device exit)
//! @endverbatim
//!
void  nav_reset( void )
{
8000c700:	eb cd 40 80 	pushm	r7,lr
8000c704:	1a 97       	mov	r7,sp
8000c706:	20 1d       	sub	sp,4
#if ( (FS_ASCII   == true) && (FS_UNICODE == true))
   g_b_unicode = true;
#endif
   g_b_string_length = false;
8000c708:	49 99       	lddpc	r9,8000c76c <nav_reset+0x6c>
8000c70a:	30 08       	mov	r8,0
8000c70c:	b2 88       	st.b	r9[0x0],r8
   g_b_no_check_disk = false;
8000c70e:	49 99       	lddpc	r9,8000c770 <nav_reset+0x70>
8000c710:	30 08       	mov	r8,0
8000c712:	b2 88       	st.b	r9[0x0],r8

   fat_cache_reset();
8000c714:	f0 1f 00 18 	mcall	8000c774 <nav_reset+0x74>
   fat_cache_clusterlist_reset();
8000c718:	f0 1f 00 18 	mcall	8000c778 <nav_reset+0x78>

#if (FS_NB_NAVIGATOR > 1)
   {
   uint8_t i;
   // Reset variables of each navigators
   for( i=0 ; i!=FS_NB_NAVIGATOR ; i++ )
8000c71c:	30 08       	mov	r8,0
8000c71e:	ef 68 ff ff 	st.b	r7[-1],r8
8000c722:	c1 88       	rjmp	8000c752 <nav_reset+0x52>
   {
      nav_select(i);
8000c724:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000c728:	10 9c       	mov	r12,r8
8000c72a:	f0 1f 00 15 	mcall	8000c77c <nav_reset+0x7c>
      fs_g_nav_fast.u8_type_fat = FS_TYPE_FAT_UNM; // By default the fat isn't mounted
8000c72e:	49 59       	lddpc	r9,8000c780 <nav_reset+0x80>
8000c730:	30 08       	mov	r8,0
8000c732:	b2 88       	st.b	r9[0x0],r8
      fs_g_nav.u8_lun = 0xFF;                      // By default don't select a drive
8000c734:	49 49       	lddpc	r9,8000c784 <nav_reset+0x84>
8000c736:	3f f8       	mov	r8,-1
8000c738:	b2 88       	st.b	r9[0x0],r8
#if (FS_MULTI_PARTITION  ==  true)
      fs_g_nav.u8_partition=0;                     // By default select the first partition
#endif
      Fat_file_close();                            // By default no file is opened
8000c73a:	49 49       	lddpc	r9,8000c788 <nav_reset+0x88>
8000c73c:	30 08       	mov	r8,0
8000c73e:	b2 88       	st.b	r9[0x0],r8
      fs_g_nav.b_mode_nav_single = false;          // By default display files and directories
8000c740:	49 19       	lddpc	r9,8000c784 <nav_reset+0x84>
8000c742:	30 08       	mov	r8,0
8000c744:	f3 68 00 2d 	st.b	r9[45],r8

#if (FS_NB_NAVIGATOR > 1)
   {
   uint8_t i;
   // Reset variables of each navigators
   for( i=0 ; i!=FS_NB_NAVIGATOR ; i++ )
8000c748:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000c74c:	2f f8       	sub	r8,-1
8000c74e:	ef 68 ff ff 	st.b	r7[-1],r8
8000c752:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000c756:	30 28       	mov	r8,2
8000c758:	f0 09 18 00 	cp.b	r9,r8
8000c75c:	ce 41       	brne	8000c724 <nav_reset+0x24>
#endif
      Fat_file_close();                            // By default no file is opened
      fs_g_nav.b_mode_nav_single = false;          // By default display files and directories
   }
   // By default select the navigator 0
   fs_g_u8_nav_selected = 0;
8000c75e:	48 c9       	lddpc	r9,8000c78c <nav_reset+0x8c>
8000c760:	30 08       	mov	r8,0
8000c762:	b2 88       	st.b	r9[0x0],r8
#  if (FS_MULTI_PARTITION  ==  true)
   fs_g_nav.u8_partition=0;                        // By default select the first partition
#  endif
   Fat_file_close();                               // By default no file is opened
#endif // (FS_NB_NAVIGATOR > 1)
}
8000c764:	2f fd       	sub	sp,-4
8000c766:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c76a:	00 00       	add	r0,r0
8000c76c:	00 00       	add	r0,r0
8000c76e:	0d d5       	ld.ub	r5,r6[0x5]
8000c770:	00 00       	add	r0,r0
8000c772:	0b 56       	ld.sh	r6,--r5
8000c774:	80 00       	ld.sh	r0,r0[0x0]
8000c776:	a9 68       	lsl	r8,0x8
8000c778:	80 00       	ld.sh	r0,r0[0x0]
8000c77a:	97 e8       	st.w	r11[0x38],r8
8000c77c:	80 00       	ld.sh	r0,r0[0x0]
8000c77e:	c7 90       	breq	8000c870 <nav_partition_mount>
8000c780:	00 00       	add	r0,r0
8000c782:	0d d0       	ld.ub	r0,r6[0x5]
8000c784:	00 00       	add	r0,r0
8000c786:	0d 84       	ld.ub	r4,r6[0x0]
8000c788:	00 00       	add	r0,r0
8000c78a:	0b 44       	ld.w	r4,--r5
8000c78c:	00 00       	add	r0,r0
8000c78e:	0e 4c       	or	r12,r7

8000c790 <nav_select>:
//!
//! @return    false if ID navigator don't exist
//! @return    true otherwise
//!
bool  nav_select( uint8_t u8_idnav )
{
8000c790:	eb cd 40 80 	pushm	r7,lr
8000c794:	1a 97       	mov	r7,sp
8000c796:	20 1d       	sub	sp,4
8000c798:	18 98       	mov	r8,r12
8000c79a:	ef 68 ff fc 	st.b	r7[-4],r8
   if( FS_NB_NAVIGATOR <= u8_idnav )
8000c79e:	ef 39 ff fc 	ld.ub	r9,r7[-4]
8000c7a2:	30 18       	mov	r8,1
8000c7a4:	f0 09 18 00 	cp.b	r9,r8
8000c7a8:	e0 88 00 07 	brls	8000c7b6 <nav_select+0x26>
   {
      fs_g_status = FS_ERR_BAD_NAV;             // The navigator doesn't exist
8000c7ac:	49 09       	lddpc	r9,8000c7ec <nav_select+0x5c>
8000c7ae:	32 78       	mov	r8,39
8000c7b0:	b2 88       	st.b	r9[0x0],r8
      return false;
8000c7b2:	30 08       	mov	r8,0
8000c7b4:	c1 78       	rjmp	8000c7e2 <nav_select+0x52>
   }
#if (FS_NB_NAVIGATOR > 1)
   if( fs_g_u8_nav_selected != u8_idnav )
8000c7b6:	48 f8       	lddpc	r8,8000c7f0 <nav_select+0x60>
8000c7b8:	11 88       	ld.ub	r8,r8[0x0]
8000c7ba:	ef 39 ff fc 	ld.ub	r9,r7[-4]
8000c7be:	f0 09 18 00 	cp.b	r9,r8
8000c7c2:	c0 f0       	breq	8000c7e0 <nav_select+0x50>
   {
      fat_invert_nav( fs_g_u8_nav_selected );   // Deselect previous navigator = Select default navigator
8000c7c4:	48 b8       	lddpc	r8,8000c7f0 <nav_select+0x60>
8000c7c6:	11 88       	ld.ub	r8,r8[0x0]
8000c7c8:	10 9c       	mov	r12,r8
8000c7ca:	f0 1f 00 0b 	mcall	8000c7f4 <nav_select+0x64>
      fat_invert_nav( u8_idnav );               // Select new navigator
8000c7ce:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000c7d2:	10 9c       	mov	r12,r8
8000c7d4:	f0 1f 00 08 	mcall	8000c7f4 <nav_select+0x64>
      fs_g_u8_nav_selected = u8_idnav;
8000c7d8:	48 69       	lddpc	r9,8000c7f0 <nav_select+0x60>
8000c7da:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000c7de:	b2 88       	st.b	r9[0x0],r8
   }
#endif
   return true;
8000c7e0:	30 18       	mov	r8,1
}
8000c7e2:	10 9c       	mov	r12,r8
8000c7e4:	2f fd       	sub	sp,-4
8000c7e6:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c7ea:	00 00       	add	r0,r0
8000c7ec:	00 00       	add	r0,r0
8000c7ee:	0d d4       	ld.ub	r4,r6[0x5]
8000c7f0:	00 00       	add	r0,r0
8000c7f2:	0e 4c       	or	r12,r7
8000c7f4:	80 00       	ld.sh	r0,r0[0x0]
8000c7f6:	ab 28       	st.d	r5++,r8

8000c7f8 <nav_drive_set>:
//!
//! @return    false in case of error, see global value "fs_g_status" for more detail
//! @return    true otherwise
//!
bool  nav_drive_set( uint8_t u8_number )
{
8000c7f8:	eb cd 40 80 	pushm	r7,lr
8000c7fc:	1a 97       	mov	r7,sp
8000c7fe:	20 1d       	sub	sp,4
8000c800:	18 98       	mov	r8,r12
8000c802:	ef 68 ff fc 	st.b	r7[-4],r8
   if ( !fat_check_noopen() )
8000c806:	f0 1f 00 16 	mcall	8000c85c <nav_drive_set+0x64>
8000c80a:	18 98       	mov	r8,r12
8000c80c:	ec 18 00 01 	eorl	r8,0x1
8000c810:	5c 58       	castu.b	r8
8000c812:	c0 30       	breq	8000c818 <nav_drive_set+0x20>
      return false;
8000c814:	30 08       	mov	r8,0
8000c816:	c1 f8       	rjmp	8000c854 <nav_drive_set+0x5c>

   if (u8_number >= get_nb_lun() )
8000c818:	f0 1f 00 12 	mcall	8000c860 <nav_drive_set+0x68>
8000c81c:	18 98       	mov	r8,r12
8000c81e:	ef 39 ff fc 	ld.ub	r9,r7[-4]
8000c822:	f0 09 18 00 	cp.b	r9,r8
8000c826:	c0 63       	brcs	8000c832 <nav_drive_set+0x3a>
   {
      fs_g_status = FS_ERR_END_OF_DRIVE;   // The drive number is bad
8000c828:	48 f9       	lddpc	r9,8000c864 <nav_drive_set+0x6c>
8000c82a:	30 68       	mov	r8,6
8000c82c:	b2 88       	st.b	r9[0x0],r8
      return false;
8000c82e:	30 08       	mov	r8,0
8000c830:	c1 28       	rjmp	8000c854 <nav_drive_set+0x5c>
   }

   if ( fs_g_nav.u8_lun == u8_number)
8000c832:	48 e8       	lddpc	r8,8000c868 <nav_drive_set+0x70>
8000c834:	11 88       	ld.ub	r8,r8[0x0]
8000c836:	ef 39 ff fc 	ld.ub	r9,r7[-4]
8000c83a:	f0 09 18 00 	cp.b	r9,r8
8000c83e:	c0 31       	brne	8000c844 <nav_drive_set+0x4c>
      return true;   // It is the same drive number
8000c840:	30 18       	mov	r8,1
8000c842:	c0 98       	rjmp	8000c854 <nav_drive_set+0x5c>

   // Go to the device
   fs_g_nav.u8_lun = u8_number;
8000c844:	48 99       	lddpc	r9,8000c868 <nav_drive_set+0x70>
8000c846:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000c84a:	b2 88       	st.b	r9[0x0],r8
   fs_g_nav_fast.u8_type_fat = FS_TYPE_FAT_UNM;
8000c84c:	48 89       	lddpc	r9,8000c86c <nav_drive_set+0x74>
8000c84e:	30 08       	mov	r8,0
8000c850:	b2 88       	st.b	r9[0x0],r8
#if (FS_MULTI_PARTITION  ==  true)
   fs_g_nav.u8_partition=0;   // by default select the first partition
#endif
   return true;
8000c852:	30 18       	mov	r8,1
}
8000c854:	10 9c       	mov	r12,r8
8000c856:	2f fd       	sub	sp,-4
8000c858:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c85c:	80 00       	ld.sh	r0,r0[0x0]
8000c85e:	8b a0       	st.w	r5[0x28],r0
8000c860:	80 00       	ld.sh	r0,r0[0x0]
8000c862:	ac 50       	st.h	r6[0xa],r0
8000c864:	00 00       	add	r0,r0
8000c866:	0d d4       	ld.ub	r4,r6[0x5]
8000c868:	00 00       	add	r0,r0
8000c86a:	0d 84       	ld.ub	r4,r6[0x0]
8000c86c:	00 00       	add	r0,r0
8000c86e:	0d d0       	ld.ub	r0,r6[0x5]

8000c870 <nav_partition_mount>:
//! then the mount routine selects the first partition supported by file system. <br>
//! After mount, the file list contains files and directories of ROOT directory
//! @endverbatim
//!
bool  nav_partition_mount( void )
{
8000c870:	eb cd 40 80 	pushm	r7,lr
8000c874:	1a 97       	mov	r7,sp
   if ( !fat_check_noopen() )
8000c876:	f0 1f 00 0e 	mcall	8000c8ac <nav_partition_mount+0x3c>
8000c87a:	18 98       	mov	r8,r12
8000c87c:	ec 18 00 01 	eorl	r8,0x1
8000c880:	5c 58       	castu.b	r8
8000c882:	c0 30       	breq	8000c888 <nav_partition_mount+0x18>
      return false;
8000c884:	30 08       	mov	r8,0
8000c886:	c0 f8       	rjmp	8000c8a4 <nav_partition_mount+0x34>

   if( FS_TYPE_FAT_UNM != fs_g_nav_fast.u8_type_fat)
8000c888:	48 a8       	lddpc	r8,8000c8b0 <nav_partition_mount+0x40>
8000c88a:	11 88       	ld.ub	r8,r8[0x0]
8000c88c:	58 08       	cp.w	r8,0
8000c88e:	c0 80       	breq	8000c89e <nav_partition_mount+0x2e>
   {
      // Already mounted
      // Go to root directory
      fs_g_nav.u32_cluster_sel_dir   = 0;
8000c890:	48 98       	lddpc	r8,8000c8b4 <nav_partition_mount+0x44>
8000c892:	30 09       	mov	r9,0
8000c894:	91 89       	st.w	r8[0x20],r9
      // No file is selected by default
      fat_clear_entry_info_and_ptr();
8000c896:	f0 1f 00 09 	mcall	8000c8b8 <nav_partition_mount+0x48>
      return true;
8000c89a:	30 18       	mov	r8,1
8000c89c:	c0 48       	rjmp	8000c8a4 <nav_partition_mount+0x34>
   }

   return fat_mount();
8000c89e:	f0 1f 00 08 	mcall	8000c8bc <nav_partition_mount+0x4c>
8000c8a2:	18 98       	mov	r8,r12
}
8000c8a4:	10 9c       	mov	r12,r8
8000c8a6:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c8aa:	00 00       	add	r0,r0
8000c8ac:	80 00       	ld.sh	r0,r0[0x0]
8000c8ae:	8b a0       	st.w	r5[0x28],r0
8000c8b0:	00 00       	add	r0,r0
8000c8b2:	0d d0       	ld.ub	r0,r6[0x5]
8000c8b4:	00 00       	add	r0,r0
8000c8b6:	0d 84       	ld.ub	r4,r6[0x0]
8000c8b8:	80 00       	ld.sh	r0,r0[0x0]
8000c8ba:	a2 b4       	st.b	r1[0x3],r4
8000c8bc:	80 00       	ld.sh	r0,r0[0x0]
8000c8be:	ad f0       	*unknown*

8000c8c0 <nav_filelist_reset>:
//!
//! @return  false in case of error, see global value "fs_g_status" for more detail
//! @return  true otherwise
//!
bool  nav_filelist_reset( void )
{
8000c8c0:	eb cd 40 80 	pushm	r7,lr
8000c8c4:	1a 97       	mov	r7,sp
   if ( !fat_check_mount_noopen())
8000c8c6:	f0 1f 00 08 	mcall	8000c8e4 <nav_filelist_reset+0x24>
8000c8ca:	18 98       	mov	r8,r12
8000c8cc:	ec 18 00 01 	eorl	r8,0x1
8000c8d0:	5c 58       	castu.b	r8
8000c8d2:	c0 30       	breq	8000c8d8 <nav_filelist_reset+0x18>
      return false;
8000c8d4:	30 08       	mov	r8,0
8000c8d6:	c0 48       	rjmp	8000c8de <nav_filelist_reset+0x1e>

   // No file selected and reset navigation
   fat_clear_entry_info_and_ptr();
8000c8d8:	f0 1f 00 04 	mcall	8000c8e8 <nav_filelist_reset+0x28>
   return true;
8000c8dc:	30 18       	mov	r8,1
}
8000c8de:	10 9c       	mov	r12,r8
8000c8e0:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c8e4:	80 00       	ld.sh	r0,r0[0x0]
8000c8e6:	8c 44       	ld.sh	r4,r6[0x8]
8000c8e8:	80 00       	ld.sh	r0,r0[0x0]
8000c8ea:	a2 b4       	st.b	r1[0x3],r4

8000c8ec <nav_filelist_set>:
//! @verbatim
//! Note: if no file is selected then nav_filelist_set( 0 , FS_NEXT ) goes to the first entry of the file list.
//! @endverbatim
//!
bool  nav_filelist_set( uint16_t u16_nb , bool b_direction )
{
8000c8ec:	eb cd 40 80 	pushm	r7,lr
8000c8f0:	1a 97       	mov	r7,sp
8000c8f2:	20 4d       	sub	sp,16
8000c8f4:	18 99       	mov	r9,r12
8000c8f6:	16 98       	mov	r8,r11
8000c8f8:	ef 59 ff f4 	st.h	r7[-12],r9
8000c8fc:	ef 68 ff f0 	st.b	r7[-16],r8
   uint16_t   u16_ptr_save_entry;
   uint16_t   u16_save_pos_sel_file;
   bool  b_save_entry_type;
   bool  b_find_last_entry = false;
8000c900:	30 08       	mov	r8,0
8000c902:	ef 68 ff ff 	st.b	r7[-1],r8

   if ( !fat_check_mount_noopen())
8000c906:	f0 1f 00 79 	mcall	8000cae8 <nav_filelist_set+0x1fc>
8000c90a:	18 98       	mov	r8,r12
8000c90c:	ec 18 00 01 	eorl	r8,0x1
8000c910:	5c 58       	castu.b	r8
8000c912:	c0 30       	breq	8000c918 <nav_filelist_set+0x2c>
      return false;
8000c914:	30 08       	mov	r8,0
8000c916:	ce 48       	rjmp	8000cade <nav_filelist_set+0x1f2>

   // Save the current selection
   u16_ptr_save_entry      = fs_g_nav_fast.u16_entry_pos_sel_file;
8000c918:	4f 58       	lddpc	r8,8000caec <nav_filelist_set+0x200>
8000c91a:	90 18       	ld.sh	r8,r8[0x2]
8000c91c:	ef 58 ff fa 	st.h	r7[-6],r8
   u16_save_pos_sel_file   = fs_g_nav.u16_pos_sel_file;
8000c920:	4f 48       	lddpc	r8,8000caf0 <nav_filelist_set+0x204>
8000c922:	f1 08 00 24 	ld.sh	r8,r8[36]
8000c926:	ef 58 ff fc 	st.h	r7[-4],r8
   b_save_entry_type       = fs_g_nav.b_mode_nav;
8000c92a:	4f 28       	lddpc	r8,8000caf0 <nav_filelist_set+0x204>
8000c92c:	f1 39 00 2c 	ld.ub	r9,r8[44]
8000c930:	30 08       	mov	r8,0
8000c932:	f0 09 18 00 	cp.b	r9,r8
8000c936:	5f 18       	srne	r8
8000c938:	ef 68 ff fe 	st.b	r7[-2],r8
8000c93c:	c0 28       	rjmp	8000c940 <nav_filelist_set+0x54>
            // End of next dir action then starts the next file action at the beginning of directory
            fs_g_nav_fast.u16_entry_pos_sel_file = 0xFFFF;
            fs_g_nav.b_mode_nav = FS_FILE;
         }
      }
   }  // end of loop while(1)
8000c93e:	d7 03       	nop
   b_save_entry_type       = fs_g_nav.b_mode_nav;

   // Loop in directory
   while( 1 )
   {
      if(( FS_FIND_NEXT == b_direction )
8000c940:	ef 39 ff f0 	ld.ub	r9,r7[-16]
8000c944:	30 08       	mov	r8,0
8000c946:	f0 09 18 00 	cp.b	r9,r8
8000c94a:	c0 71       	brne	8000c958 <nav_filelist_set+0x6c>
8000c94c:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000c950:	30 08       	mov	r8,0
8000c952:	f0 09 18 00 	cp.b	r9,r8
8000c956:	c1 20       	breq	8000c97a <nav_filelist_set+0x8e>
      || ( b_find_last_entry ) )
      {
         if ( FS_END_FIND == fs_g_nav_fast.u16_entry_pos_sel_file )
8000c958:	4e 58       	lddpc	r8,8000caec <nav_filelist_set+0x200>
8000c95a:	90 19       	ld.sh	r9,r8[0x2]
8000c95c:	3f e8       	mov	r8,-2
8000c95e:	f0 09 19 00 	cp.h	r9,r8
8000c962:	c0 51       	brne	8000c96c <nav_filelist_set+0x80>
         {
            // Too many files in directory (case impossible)
            fs_g_status = FS_ERR_FS;
8000c964:	4e 49       	lddpc	r9,8000caf4 <nav_filelist_set+0x208>
8000c966:	30 88       	mov	r8,8
8000c968:	b2 88       	st.b	r9[0x0],r8
            break;
8000c96a:	ca b8       	rjmp	8000cac0 <nav_filelist_set+0x1d4>
         }
         fs_g_nav_fast.u16_entry_pos_sel_file++;      // Update entry position
8000c96c:	4e 08       	lddpc	r8,8000caec <nav_filelist_set+0x200>
8000c96e:	90 18       	ld.sh	r8,r8[0x2]
8000c970:	2f f8       	sub	r8,-1
8000c972:	5c 88       	casts.h	r8
8000c974:	4d e9       	lddpc	r9,8000caec <nav_filelist_set+0x200>
8000c976:	b2 18       	st.h	r9[0x2],r8
   b_save_entry_type       = fs_g_nav.b_mode_nav;

   // Loop in directory
   while( 1 )
   {
      if(( FS_FIND_NEXT == b_direction )
8000c978:	c2 78       	rjmp	8000c9c6 <nav_filelist_set+0xda>
         }
         fs_g_nav_fast.u16_entry_pos_sel_file++;      // Update entry position
      }
      else
      {
         if ( FS_NO_SEL == fs_g_nav_fast.u16_entry_pos_sel_file )
8000c97a:	4d d8       	lddpc	r8,8000caec <nav_filelist_set+0x200>
8000c97c:	90 19       	ld.sh	r9,r8[0x2]
8000c97e:	3f f8       	mov	r8,-1
8000c980:	f0 09 19 00 	cp.h	r9,r8
8000c984:	c0 51       	brne	8000c98e <nav_filelist_set+0xa2>
         {
            // No selected file then previous action impossible
            fs_g_status = FS_ERR_NO_FIND;
8000c986:	4d c9       	lddpc	r9,8000caf4 <nav_filelist_set+0x208>
8000c988:	30 98       	mov	r8,9
8000c98a:	b2 88       	st.b	r9[0x0],r8
            break;
8000c98c:	c9 a8       	rjmp	8000cac0 <nav_filelist_set+0x1d4>
         }
         if ( 0 == fs_g_nav_fast.u16_entry_pos_sel_file )
8000c98e:	4d 88       	lddpc	r8,8000caec <nav_filelist_set+0x200>
8000c990:	90 18       	ld.sh	r8,r8[0x2]
8000c992:	58 08       	cp.w	r8,0
8000c994:	c1 31       	brne	8000c9ba <nav_filelist_set+0xce>
         {
            // beginning of directory
            if ( (FS_DIR == fs_g_nav.b_mode_nav ) || fs_g_nav.b_mode_nav_single )
8000c996:	4d 78       	lddpc	r8,8000caf0 <nav_filelist_set+0x204>
8000c998:	f1 38 00 2c 	ld.ub	r8,r8[44]
8000c99c:	58 08       	cp.w	r8,0
8000c99e:	c0 60       	breq	8000c9aa <nav_filelist_set+0xbe>
8000c9a0:	4d 48       	lddpc	r8,8000caf0 <nav_filelist_set+0x204>
8000c9a2:	f1 38 00 2d 	ld.ub	r8,r8[45]
8000c9a6:	58 08       	cp.w	r8,0
8000c9a8:	c0 50       	breq	8000c9b2 <nav_filelist_set+0xc6>
            {
               // End of directory scan, then no previous action possible
               fs_g_status = FS_ERR_NO_FIND;
8000c9aa:	4d 39       	lddpc	r9,8000caf4 <nav_filelist_set+0x208>
8000c9ac:	30 98       	mov	r8,9
8000c9ae:	b2 88       	st.b	r9[0x0],r8
               break;
8000c9b0:	c8 88       	rjmp	8000cac0 <nav_filelist_set+0x1d4>
            }
            // End of file scan, then find last directory
            b_find_last_entry = true;
8000c9b2:	30 18       	mov	r8,1
8000c9b4:	ef 68 ff ff 	st.b	r7[-1],r8
8000c9b8:	c0 78       	rjmp	8000c9c6 <nav_filelist_set+0xda>
         }else{
            fs_g_nav_fast.u16_entry_pos_sel_file--;   // Update entry position
8000c9ba:	4c d8       	lddpc	r8,8000caec <nav_filelist_set+0x200>
8000c9bc:	90 18       	ld.sh	r8,r8[0x2]
8000c9be:	20 18       	sub	r8,1
8000c9c0:	5c 88       	casts.h	r8
8000c9c2:	4c b9       	lddpc	r9,8000caec <nav_filelist_set+0x200>
8000c9c4:	b2 18       	st.h	r9[0x2],r8
         }
      }

      if( !fat_read_dir())
8000c9c6:	f0 1f 00 4d 	mcall	8000caf8 <nav_filelist_set+0x20c>
8000c9ca:	18 98       	mov	r8,r12
8000c9cc:	ec 18 00 01 	eorl	r8,0x1
8000c9d0:	5c 58       	castu.b	r8
8000c9d2:	c0 80       	breq	8000c9e2 <nav_filelist_set+0xf6>
      {
         if( FS_ERR_OUT_LIST != fs_g_status )
8000c9d4:	4c 88       	lddpc	r8,8000caf4 <nav_filelist_set+0x208>
8000c9d6:	11 89       	ld.ub	r9,r8[0x0]
8000c9d8:	31 a8       	mov	r8,26
8000c9da:	f0 09 18 00 	cp.b	r9,r8
8000c9de:	c3 d0       	breq	8000ca58 <nav_filelist_set+0x16c>
            break; // Error
8000c9e0:	c7 08       	rjmp	8000cac0 <nav_filelist_set+0x1d4>
      }else{
         if ( fat_entry_check( fs_g_nav.b_mode_nav ) )
8000c9e2:	4c 48       	lddpc	r8,8000caf0 <nav_filelist_set+0x204>
8000c9e4:	f1 39 00 2c 	ld.ub	r9,r8[44]
8000c9e8:	30 08       	mov	r8,0
8000c9ea:	f0 09 18 00 	cp.b	r9,r8
8000c9ee:	5f 18       	srne	r8
8000c9f0:	10 9c       	mov	r12,r8
8000c9f2:	f0 1f 00 43 	mcall	8000cafc <nav_filelist_set+0x210>
8000c9f6:	18 98       	mov	r8,r12
8000c9f8:	58 08       	cp.w	r8,0
8000c9fa:	c2 f0       	breq	8000ca58 <nav_filelist_set+0x16c>
         {
           // HERE, the file entry match with the type searched

           if( b_find_last_entry )
8000c9fc:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000ca00:	30 08       	mov	r8,0
8000ca02:	f0 09 18 00 	cp.b	r9,r8
8000ca06:	c0 20       	breq	8000ca0a <nav_filelist_set+0x11e>
             continue;  // The search of last directory is on going then continue the search
8000ca08:	c5 b8       	rjmp	8000cabe <nav_filelist_set+0x1d2>

           // Update position in directory
           if ( FS_FIND_NEXT == b_direction )
8000ca0a:	ef 39 ff f0 	ld.ub	r9,r7[-16]
8000ca0e:	30 08       	mov	r8,0
8000ca10:	f0 09 18 00 	cp.b	r9,r8
8000ca14:	c0 a0       	breq	8000ca28 <nav_filelist_set+0x13c>
              fs_g_nav.u16_pos_sel_file++;
8000ca16:	4b 78       	lddpc	r8,8000caf0 <nav_filelist_set+0x204>
8000ca18:	f1 08 00 24 	ld.sh	r8,r8[36]
8000ca1c:	2f f8       	sub	r8,-1
8000ca1e:	5c 88       	casts.h	r8
8000ca20:	4b 49       	lddpc	r9,8000caf0 <nav_filelist_set+0x204>
8000ca22:	f3 58 00 24 	st.h	r9[36],r8
8000ca26:	c0 98       	rjmp	8000ca38 <nav_filelist_set+0x14c>
           else
              fs_g_nav.u16_pos_sel_file--;
8000ca28:	4b 28       	lddpc	r8,8000caf0 <nav_filelist_set+0x204>
8000ca2a:	f1 08 00 24 	ld.sh	r8,r8[36]
8000ca2e:	20 18       	sub	r8,1
8000ca30:	5c 88       	casts.h	r8
8000ca32:	4b 09       	lddpc	r9,8000caf0 <nav_filelist_set+0x204>
8000ca34:	f3 58 00 24 	st.h	r9[36],r8

           if (0 == u16_nb)
8000ca38:	ef 09 ff f4 	ld.sh	r9,r7[-12]
8000ca3c:	30 08       	mov	r8,0
8000ca3e:	f0 09 19 00 	cp.h	r9,r8
8000ca42:	c0 51       	brne	8000ca4c <nav_filelist_set+0x160>
           {
              // It is the end of move then update file information
              fat_get_entry_info();
8000ca44:	f0 1f 00 2f 	mcall	8000cb00 <nav_filelist_set+0x214>
              return true;         // NB FILE FIND
8000ca48:	30 18       	mov	r8,1
8000ca4a:	c4 a8       	rjmp	8000cade <nav_filelist_set+0x1f2>
           }
           u16_nb--;
8000ca4c:	ef 08 ff f4 	ld.sh	r8,r7[-12]
8000ca50:	20 18       	sub	r8,1
8000ca52:	ef 58 ff f4 	st.h	r7[-12],r8
           continue;
8000ca56:	c3 48       	rjmp	8000cabe <nav_filelist_set+0x1d2>
         }
      }

      // Here error, check type of error
      if(( FS_ERR_ENTRY_EMPTY == fs_g_status )
8000ca58:	4a 78       	lddpc	r8,8000caf4 <nav_filelist_set+0x208>
8000ca5a:	11 89       	ld.ub	r9,r8[0x0]
8000ca5c:	30 a8       	mov	r8,10
8000ca5e:	f0 09 18 00 	cp.b	r9,r8
8000ca62:	c0 80       	breq	8000ca72 <nav_filelist_set+0x186>
      || ( FS_ERR_OUT_LIST    == fs_g_status ) )
8000ca64:	4a 48       	lddpc	r8,8000caf4 <nav_filelist_set+0x208>
8000ca66:	11 89       	ld.ub	r9,r8[0x0]
           continue;
         }
      }

      // Here error, check type of error
      if(( FS_ERR_ENTRY_EMPTY == fs_g_status )
8000ca68:	31 a8       	mov	r8,26
8000ca6a:	f0 09 18 00 	cp.b	r9,r8
8000ca6e:	fe 91 ff 68 	brne	8000c93e <nav_filelist_set+0x52>
      || ( FS_ERR_OUT_LIST    == fs_g_status ) )
      {
         // Here, end of the directory
         if( b_find_last_entry )
8000ca72:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000ca76:	30 08       	mov	r8,0
8000ca78:	f0 09 18 00 	cp.b	r9,r8
8000ca7c:	c0 90       	breq	8000ca8e <nav_filelist_set+0x1a2>
         {
            // Re enable the previous command at the end of directory to find the last directory entry
            b_find_last_entry = false;
8000ca7e:	30 08       	mov	r8,0
8000ca80:	ef 68 ff ff 	st.b	r7[-1],r8
            fs_g_nav.b_mode_nav = FS_DIR;
8000ca84:	49 b9       	lddpc	r9,8000caf0 <nav_filelist_set+0x204>
8000ca86:	30 08       	mov	r8,0
8000ca88:	f3 68 00 2c 	st.b	r9[44],r8
            continue;
8000ca8c:	c1 98       	rjmp	8000cabe <nav_filelist_set+0x1d2>
         }
         // Here, a next action is on going
         if ( (FS_FILE == fs_g_nav.b_mode_nav) || fs_g_nav.b_mode_nav_single )
8000ca8e:	49 98       	lddpc	r8,8000caf0 <nav_filelist_set+0x204>
8000ca90:	f1 39 00 2c 	ld.ub	r9,r8[44]
8000ca94:	30 18       	mov	r8,1
8000ca96:	f0 09 18 00 	cp.b	r9,r8
8000ca9a:	c0 60       	breq	8000caa6 <nav_filelist_set+0x1ba>
8000ca9c:	49 58       	lddpc	r8,8000caf0 <nav_filelist_set+0x204>
8000ca9e:	f1 38 00 2d 	ld.ub	r8,r8[45]
8000caa2:	58 08       	cp.w	r8,0
8000caa4:	c0 50       	breq	8000caae <nav_filelist_set+0x1c2>
         {
            // End of next file action then end of next action
            fs_g_status = FS_ERR_NO_FIND; // No file found
8000caa6:	49 49       	lddpc	r9,8000caf4 <nav_filelist_set+0x208>
8000caa8:	30 98       	mov	r8,9
8000caaa:	b2 88       	st.b	r9[0x0],r8
            break;                        // end of search
8000caac:	c0 a8       	rjmp	8000cac0 <nav_filelist_set+0x1d4>
         }else{
            // End of next dir action then starts the next file action at the beginning of directory
            fs_g_nav_fast.u16_entry_pos_sel_file = 0xFFFF;
8000caae:	49 09       	lddpc	r9,8000caec <nav_filelist_set+0x200>
8000cab0:	3f f8       	mov	r8,-1
8000cab2:	b2 18       	st.h	r9[0x2],r8
            fs_g_nav.b_mode_nav = FS_FILE;
8000cab4:	48 f9       	lddpc	r9,8000caf0 <nav_filelist_set+0x204>
8000cab6:	30 18       	mov	r8,1
8000cab8:	f3 68 00 2c 	st.b	r9[44],r8
         }
      }
   }  // end of loop while(1)
8000cabc:	c4 2b       	rjmp	8000c940 <nav_filelist_set+0x54>
8000cabe:	c4 1b       	rjmp	8000c940 <nav_filelist_set+0x54>

   fs_g_nav.b_mode_nav                    = b_save_entry_type;
8000cac0:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8000cac4:	48 b9       	lddpc	r9,8000caf0 <nav_filelist_set+0x204>
8000cac6:	f3 68 00 2c 	st.b	r9[44],r8
   fs_g_nav_fast.u16_entry_pos_sel_file   = u16_ptr_save_entry;
8000caca:	48 99       	lddpc	r9,8000caec <nav_filelist_set+0x200>
8000cacc:	ef 08 ff fa 	ld.sh	r8,r7[-6]
8000cad0:	b2 18       	st.h	r9[0x2],r8
   fs_g_nav.u16_pos_sel_file              = u16_save_pos_sel_file;
8000cad2:	48 89       	lddpc	r9,8000caf0 <nav_filelist_set+0x204>
8000cad4:	ef 08 ff fc 	ld.sh	r8,r7[-4]
8000cad8:	f3 58 00 24 	st.h	r9[36],r8
   return false;
8000cadc:	30 08       	mov	r8,0
}
8000cade:	10 9c       	mov	r12,r8
8000cae0:	2f cd       	sub	sp,-16
8000cae2:	e3 cd 80 80 	ldm	sp++,r7,pc
8000cae6:	00 00       	add	r0,r0
8000cae8:	80 00       	ld.sh	r0,r0[0x0]
8000caea:	8c 44       	ld.sh	r4,r6[0x8]
8000caec:	00 00       	add	r0,r0
8000caee:	0d d0       	ld.ub	r0,r6[0x5]
8000caf0:	00 00       	add	r0,r0
8000caf2:	0d 84       	ld.ub	r4,r6[0x0]
8000caf4:	00 00       	add	r0,r0
8000caf6:	0d d4       	ld.ub	r4,r6[0x5]
8000caf8:	80 00       	ld.sh	r0,r0[0x0]
8000cafa:	a0 38       	st.h	r0[0x6],r8
8000cafc:	80 00       	ld.sh	r0,r0[0x0]
8000cafe:	a0 e8       	st.b	r0[0x6],r8
8000cb00:	80 00       	ld.sh	r0,r0[0x0]
8000cb02:	a1 b4       	sbr	r4,0x1

8000cb04 <nav_filelist_findname>:
//! @verbatim
//! This function starts a search at the next position of the current in file list
//! @endverbatim
//!
bool  nav_filelist_findname( const FS_STRING sz_name , bool b_match_case )
{
8000cb04:	eb cd 40 80 	pushm	r7,lr
8000cb08:	1a 97       	mov	r7,sp
8000cb0a:	20 2d       	sub	sp,8
8000cb0c:	ef 4c ff fc 	st.w	r7[-4],r12
8000cb10:	16 98       	mov	r8,r11
8000cb12:	ef 68 ff f8 	st.b	r7[-8],r8
8000cb16:	c0 28       	rjmp	8000cb1a <nav_filelist_findname+0x16>
   {
      if ( !nav_filelist_set( 0, FS_FIND_NEXT ))
         return false;
      if ( nav_file_name( sz_name , 0 , FS_NAME_CHECK , b_match_case ))
         return true;
   }
8000cb18:	d7 03       	nop
//!
bool  nav_filelist_findname( const FS_STRING sz_name , bool b_match_case )
{
   while( 1 )
   {
      if ( !nav_filelist_set( 0, FS_FIND_NEXT ))
8000cb1a:	30 1b       	mov	r11,1
8000cb1c:	30 0c       	mov	r12,0
8000cb1e:	f0 1f 00 0e 	mcall	8000cb54 <nav_filelist_findname+0x50>
8000cb22:	18 98       	mov	r8,r12
8000cb24:	ec 18 00 01 	eorl	r8,0x1
8000cb28:	5c 58       	castu.b	r8
8000cb2a:	c0 30       	breq	8000cb30 <nav_filelist_findname+0x2c>
         return false;
8000cb2c:	30 08       	mov	r8,0
8000cb2e:	c0 e8       	rjmp	8000cb4a <nav_filelist_findname+0x46>
      if ( nav_file_name( sz_name , 0 , FS_NAME_CHECK , b_match_case ))
8000cb30:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000cb34:	10 99       	mov	r9,r8
8000cb36:	30 0a       	mov	r10,0
8000cb38:	30 0b       	mov	r11,0
8000cb3a:	ee fc ff fc 	ld.w	r12,r7[-4]
8000cb3e:	f0 1f 00 07 	mcall	8000cb58 <nav_filelist_findname+0x54>
8000cb42:	18 98       	mov	r8,r12
8000cb44:	58 08       	cp.w	r8,0
8000cb46:	ce 90       	breq	8000cb18 <nav_filelist_findname+0x14>
         return true;
8000cb48:	30 18       	mov	r8,1
   }
}
8000cb4a:	10 9c       	mov	r12,r8
8000cb4c:	2f ed       	sub	sp,-8
8000cb4e:	e3 cd 80 80 	ldm	sp++,r7,pc
8000cb52:	00 00       	add	r0,r0
8000cb54:	80 00       	ld.sh	r0,r0[0x0]
8000cb56:	c8 ec       	rcall	8000cc72 <nav_filelist_last+0x2>
8000cb58:	80 00       	ld.sh	r0,r0[0x0]
8000cb5a:	d3 68       	*unknown*

8000cb5c <nav_filelist_nb>:
//!                     FS_FILE to compute the number of files <br>
//!
//! @return    number of files or directories in file list
//!
uint16_t   nav_filelist_nb( bool b_type )
{
8000cb5c:	eb cd 40 80 	pushm	r7,lr
8000cb60:	1a 97       	mov	r7,sp
8000cb62:	20 3d       	sub	sp,12
8000cb64:	18 98       	mov	r8,r12
8000cb66:	ef 68 ff f4 	st.b	r7[-12],r8
   uint16_t   u16_save_position;
   uint16_t   u16_save_number_dir;
   uint16_t   u16_save_number_file;

   // Save current position
   u16_save_position = fs_g_nav.u16_pos_sel_file;
8000cb6a:	4a 68       	lddpc	r8,8000cc00 <nav_filelist_nb+0xa4>
8000cb6c:	f1 08 00 24 	ld.sh	r8,r8[36]
8000cb70:	ef 58 ff fa 	st.h	r7[-6],r8
   // Reset position
   if ( !nav_filelist_reset())
8000cb74:	f0 1f 00 24 	mcall	8000cc04 <nav_filelist_nb+0xa8>
8000cb78:	18 98       	mov	r8,r12
8000cb7a:	ec 18 00 01 	eorl	r8,0x1
8000cb7e:	5c 58       	castu.b	r8
8000cb80:	c0 30       	breq	8000cb86 <nav_filelist_nb+0x2a>
      return 0;
8000cb82:	30 08       	mov	r8,0
8000cb84:	c3 a8       	rjmp	8000cbf8 <nav_filelist_nb+0x9c>
   // Scan all directory
   u16_save_number_dir  = 0;
8000cb86:	30 08       	mov	r8,0
8000cb88:	ef 58 ff fc 	st.h	r7[-4],r8
   u16_save_number_file = 0;
8000cb8c:	30 08       	mov	r8,0
8000cb8e:	ef 58 ff fe 	st.h	r7[-2],r8
   while( nav_filelist_set( 0 , FS_FIND_NEXT ) )
8000cb92:	c1 38       	rjmp	8000cbb8 <nav_filelist_nb+0x5c>
   {
      if( FS_FILE == fs_g_nav.b_mode_nav )
8000cb94:	49 b8       	lddpc	r8,8000cc00 <nav_filelist_nb+0xa4>
8000cb96:	f1 39 00 2c 	ld.ub	r9,r8[44]
8000cb9a:	30 18       	mov	r8,1
8000cb9c:	f0 09 18 00 	cp.b	r9,r8
8000cba0:	c0 71       	brne	8000cbae <nav_filelist_nb+0x52>
         u16_save_number_file++;    // It is a file
8000cba2:	ef 08 ff fe 	ld.sh	r8,r7[-2]
8000cba6:	2f f8       	sub	r8,-1
8000cba8:	ef 58 ff fe 	st.h	r7[-2],r8
8000cbac:	c0 68       	rjmp	8000cbb8 <nav_filelist_nb+0x5c>
      else
         u16_save_number_dir++;     // It is a directory
8000cbae:	ef 08 ff fc 	ld.sh	r8,r7[-4]
8000cbb2:	2f f8       	sub	r8,-1
8000cbb4:	ef 58 ff fc 	st.h	r7[-4],r8
   if ( !nav_filelist_reset())
      return 0;
   // Scan all directory
   u16_save_number_dir  = 0;
   u16_save_number_file = 0;
   while( nav_filelist_set( 0 , FS_FIND_NEXT ) )
8000cbb8:	30 1b       	mov	r11,1
8000cbba:	30 0c       	mov	r12,0
8000cbbc:	f0 1f 00 13 	mcall	8000cc08 <nav_filelist_nb+0xac>
8000cbc0:	18 98       	mov	r8,r12
8000cbc2:	58 08       	cp.w	r8,0
8000cbc4:	ce 81       	brne	8000cb94 <nav_filelist_nb+0x38>
         u16_save_number_file++;    // It is a file
      else
         u16_save_number_dir++;     // It is a directory
   }
   // Restore previous position
   nav_filelist_reset();
8000cbc6:	f0 1f 00 10 	mcall	8000cc04 <nav_filelist_nb+0xa8>
   if ( u16_save_position != FS_NO_SEL )
8000cbca:	ef 09 ff fa 	ld.sh	r9,r7[-6]
8000cbce:	3f f8       	mov	r8,-1
8000cbd0:	f0 09 19 00 	cp.h	r9,r8
8000cbd4:	c0 70       	breq	8000cbe2 <nav_filelist_nb+0x86>
   {
      nav_filelist_set( u16_save_position , FS_FIND_NEXT );
8000cbd6:	ef 18 ff fa 	ld.uh	r8,r7[-6]
8000cbda:	30 1b       	mov	r11,1
8000cbdc:	10 9c       	mov	r12,r8
8000cbde:	f0 1f 00 0b 	mcall	8000cc08 <nav_filelist_nb+0xac>
   }
   // Return the value asked
   if( FS_FILE == b_type )
8000cbe2:	ef 39 ff f4 	ld.ub	r9,r7[-12]
8000cbe6:	30 08       	mov	r8,0
8000cbe8:	f0 09 18 00 	cp.b	r9,r8
8000cbec:	c0 40       	breq	8000cbf4 <nav_filelist_nb+0x98>
      return u16_save_number_file;
8000cbee:	ef 08 ff fe 	ld.sh	r8,r7[-2]
8000cbf2:	c0 38       	rjmp	8000cbf8 <nav_filelist_nb+0x9c>
   else
      return u16_save_number_dir;
8000cbf4:	ef 08 ff fc 	ld.sh	r8,r7[-4]
}
8000cbf8:	10 9c       	mov	r12,r8
8000cbfa:	2f dd       	sub	sp,-12
8000cbfc:	e3 cd 80 80 	ldm	sp++,r7,pc
8000cc00:	00 00       	add	r0,r0
8000cc02:	0d 84       	ld.ub	r4,r6[0x0]
8000cc04:	80 00       	ld.sh	r0,r0[0x0]
8000cc06:	c8 c0       	breq	8000cb1e <nav_filelist_findname+0x1a>
8000cc08:	80 00       	ld.sh	r0,r0[0x0]
8000cc0a:	c8 ec       	rcall	8000cd26 <nav_getindex+0x26>

8000cc0c <nav_filelist_first>:
//!
//! @return  false in case of error, see global value "fs_g_status" for more detail
//! @return  true otherwise
//!
bool  nav_filelist_first( bool b_type )
{
8000cc0c:	eb cd 40 80 	pushm	r7,lr
8000cc10:	1a 97       	mov	r7,sp
8000cc12:	20 1d       	sub	sp,4
8000cc14:	18 98       	mov	r8,r12
8000cc16:	ef 68 ff fc 	st.b	r7[-4],r8
   // Reset position
   if ( !nav_filelist_reset())
8000cc1a:	f0 1f 00 12 	mcall	8000cc60 <nav_filelist_first+0x54>
8000cc1e:	18 98       	mov	r8,r12
8000cc20:	ec 18 00 01 	eorl	r8,0x1
8000cc24:	5c 58       	castu.b	r8
8000cc26:	c0 c0       	breq	8000cc3e <nav_filelist_first+0x32>
      return false;
8000cc28:	30 08       	mov	r8,0
8000cc2a:	c1 68       	rjmp	8000cc56 <nav_filelist_first+0x4a>
   // Find the first file or directory
   while( nav_filelist_set( 0 , FS_FIND_NEXT ) )
   {
      if( b_type == fs_g_nav.b_mode_nav )
8000cc2c:	ef 39 ff fc 	ld.ub	r9,r7[-4]
8000cc30:	48 d8       	lddpc	r8,8000cc64 <nav_filelist_first+0x58>
8000cc32:	f1 38 00 2c 	ld.ub	r8,r8[44]
8000cc36:	10 39       	cp.w	r9,r8
8000cc38:	c0 41       	brne	8000cc40 <nav_filelist_first+0x34>
         return true;   // First file or directory found
8000cc3a:	30 18       	mov	r8,1
8000cc3c:	c0 d8       	rjmp	8000cc56 <nav_filelist_first+0x4a>
{
   // Reset position
   if ( !nav_filelist_reset())
      return false;
   // Find the first file or directory
   while( nav_filelist_set( 0 , FS_FIND_NEXT ) )
8000cc3e:	d7 03       	nop
8000cc40:	30 1b       	mov	r11,1
8000cc42:	30 0c       	mov	r12,0
8000cc44:	f0 1f 00 09 	mcall	8000cc68 <nav_filelist_first+0x5c>
8000cc48:	18 98       	mov	r8,r12
8000cc4a:	58 08       	cp.w	r8,0
8000cc4c:	cf 01       	brne	8000cc2c <nav_filelist_first+0x20>
   {
      if( b_type == fs_g_nav.b_mode_nav )
         return true;   // First file or directory found
   }
   fs_g_status = FS_ERR_NO_FIND;
8000cc4e:	48 89       	lddpc	r9,8000cc6c <nav_filelist_first+0x60>
8000cc50:	30 98       	mov	r8,9
8000cc52:	b2 88       	st.b	r9[0x0],r8
   return false;
8000cc54:	30 08       	mov	r8,0
}
8000cc56:	10 9c       	mov	r12,r8
8000cc58:	2f fd       	sub	sp,-4
8000cc5a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000cc5e:	00 00       	add	r0,r0
8000cc60:	80 00       	ld.sh	r0,r0[0x0]
8000cc62:	c8 c0       	breq	8000cb7a <nav_filelist_nb+0x1e>
8000cc64:	00 00       	add	r0,r0
8000cc66:	0d 84       	ld.ub	r4,r6[0x0]
8000cc68:	80 00       	ld.sh	r0,r0[0x0]
8000cc6a:	c8 ec       	rcall	8000cd86 <nav_gotoindex+0x42>
8000cc6c:	00 00       	add	r0,r0
8000cc6e:	0d d4       	ld.ub	r4,r6[0x5]

8000cc70 <nav_filelist_last>:
//!
//! @return  false in case of error, see global value "fs_g_status" for more detail
//! @return  true otherwise
//!
bool  nav_filelist_last( bool b_type )
{
8000cc70:	eb cd 40 80 	pushm	r7,lr
8000cc74:	1a 97       	mov	r7,sp
8000cc76:	20 2d       	sub	sp,8
8000cc78:	18 98       	mov	r8,r12
8000cc7a:	ef 68 ff f8 	st.b	r7[-8],r8
   uint16_t u16_nb;

   // Get number of file or directory
   u16_nb = nav_filelist_nb( b_type  );
8000cc7e:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000cc82:	10 9c       	mov	r12,r8
8000cc84:	f0 1f 00 1b 	mcall	8000ccf0 <nav_filelist_last+0x80>
8000cc88:	18 98       	mov	r8,r12
8000cc8a:	5c 88       	casts.h	r8
8000cc8c:	ef 58 ff fe 	st.h	r7[-2],r8
   if( 0 == u16_nb )
8000cc90:	ef 09 ff fe 	ld.sh	r9,r7[-2]
8000cc94:	30 08       	mov	r8,0
8000cc96:	f0 09 19 00 	cp.h	r9,r8
8000cc9a:	c0 61       	brne	8000cca6 <nav_filelist_last+0x36>
   {
      fs_g_status = FS_ERR_NO_FIND;
8000cc9c:	49 69       	lddpc	r9,8000ccf4 <nav_filelist_last+0x84>
8000cc9e:	30 98       	mov	r8,9
8000cca0:	b2 88       	st.b	r9[0x0],r8
      return false;  // NO FILE FOUND
8000cca2:	30 08       	mov	r8,0
8000cca4:	c2 18       	rjmp	8000cce6 <nav_filelist_last+0x76>
   }
   // Go to the first file or directory
   if ( !nav_filelist_first( b_type ))
8000cca6:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000ccaa:	10 9c       	mov	r12,r8
8000ccac:	f0 1f 00 13 	mcall	8000ccf8 <nav_filelist_last+0x88>
8000ccb0:	18 98       	mov	r8,r12
8000ccb2:	ec 18 00 01 	eorl	r8,0x1
8000ccb6:	5c 58       	castu.b	r8
8000ccb8:	c0 30       	breq	8000ccbe <nav_filelist_last+0x4e>
      return false;
8000ccba:	30 08       	mov	r8,0
8000ccbc:	c1 58       	rjmp	8000cce6 <nav_filelist_last+0x76>
   // If there are more one file or directory, then go to at the last of list
   if( 1 == u16_nb )
8000ccbe:	ef 09 ff fe 	ld.sh	r9,r7[-2]
8000ccc2:	30 18       	mov	r8,1
8000ccc4:	f0 09 19 00 	cp.h	r9,r8
8000ccc8:	c0 31       	brne	8000ccce <nav_filelist_last+0x5e>
      return true;
8000ccca:	30 18       	mov	r8,1
8000cccc:	c0 d8       	rjmp	8000cce6 <nav_filelist_last+0x76>
   u16_nb -= 2;
8000ccce:	ef 08 ff fe 	ld.sh	r8,r7[-2]
8000ccd2:	20 28       	sub	r8,2
8000ccd4:	ef 58 ff fe 	st.h	r7[-2],r8
   return nav_filelist_set( u16_nb , FS_FIND_NEXT );
8000ccd8:	ef 18 ff fe 	ld.uh	r8,r7[-2]
8000ccdc:	30 1b       	mov	r11,1
8000ccde:	10 9c       	mov	r12,r8
8000cce0:	f0 1f 00 07 	mcall	8000ccfc <nav_filelist_last+0x8c>
8000cce4:	18 98       	mov	r8,r12
}
8000cce6:	10 9c       	mov	r12,r8
8000cce8:	2f ed       	sub	sp,-8
8000ccea:	e3 cd 80 80 	ldm	sp++,r7,pc
8000ccee:	00 00       	add	r0,r0
8000ccf0:	80 00       	ld.sh	r0,r0[0x0]
8000ccf2:	cb 5c       	rcall	8000ce5c <nav_dir_cd+0x5c>
8000ccf4:	00 00       	add	r0,r0
8000ccf6:	0d d4       	ld.ub	r4,r6[0x5]
8000ccf8:	80 00       	ld.sh	r0,r0[0x0]
8000ccfa:	cc 0c       	rcall	8000ce7a <nav_dir_gotoparent+0xa>
8000ccfc:	80 00       	ld.sh	r0,r0[0x0]
8000ccfe:	c8 ec       	rcall	8000ce1a <nav_dir_cd+0x1a>

8000cd00 <nav_getindex>:
//! This routine is interesting to save a file position in small variable.
//! This pointer allow to reinit a navigator quickly with nav_gotoindex() routine.
//! @endverbatim
//!
Fs_index nav_getindex( void )
{
8000cd00:	eb cd 40 80 	pushm	r7,lr
8000cd04:	1a 97       	mov	r7,sp
8000cd06:	20 3d       	sub	sp,12
8000cd08:	18 9a       	mov	r10,r12
   Fs_index index;

   // Fill index structure
   index.u8_lun                  = fs_g_nav.u8_lun;
8000cd0a:	48 d8       	lddpc	r8,8000cd3c <nav_getindex+0x3c>
8000cd0c:	11 88       	ld.ub	r8,r8[0x0]
8000cd0e:	ef 68 ff f4 	st.b	r7[-12],r8
#if (FS_MULTI_PARTITION  ==  true)
   index.u8_partition            = fs_g_nav.u8_partition;
#endif
   index.u32_cluster_sel_dir     = fs_g_nav.u32_cluster_sel_dir;
8000cd12:	48 b8       	lddpc	r8,8000cd3c <nav_getindex+0x3c>
8000cd14:	70 88       	ld.w	r8,r8[0x20]
8000cd16:	ef 48 ff f8 	st.w	r7[-8],r8
   index.u16_entry_pos_sel_file  = fs_g_nav_fast.u16_entry_pos_sel_file;
8000cd1a:	48 a8       	lddpc	r8,8000cd40 <nav_getindex+0x40>
8000cd1c:	90 18       	ld.sh	r8,r8[0x2]
8000cd1e:	ef 58 ff fc 	st.h	r7[-4],r8
   return index;
8000cd22:	14 9b       	mov	r11,r10
8000cd24:	ee cc 00 0c 	sub	r12,r7,12
8000cd28:	f8 e8 00 00 	ld.d	r8,r12[0]
8000cd2c:	f6 e9 00 00 	st.d	r11[0],r8
8000cd30:	78 28       	ld.w	r8,r12[0x8]
8000cd32:	97 28       	st.w	r11[0x8],r8
}
8000cd34:	14 9c       	mov	r12,r10
8000cd36:	2f dd       	sub	sp,-12
8000cd38:	e3 cd 80 80 	ldm	sp++,r7,pc
8000cd3c:	00 00       	add	r0,r0
8000cd3e:	0d 84       	ld.ub	r4,r6[0x0]
8000cd40:	00 00       	add	r0,r0
8000cd42:	0d d0       	ld.ub	r0,r6[0x5]

8000cd44 <nav_gotoindex>:
//! This routine allow to reinit a navigator quickly via a file index (disk, partition, dir, file/dir selected )
//! To get a file index, you shall used the routine nav_getindex().
//! @endverbatim
//!
bool  nav_gotoindex( const Fs_index _MEM_TYPE_SLOW_ *index )
{
8000cd44:	eb cd 40 80 	pushm	r7,lr
8000cd48:	1a 97       	mov	r7,sp
8000cd4a:	20 1d       	sub	sp,4
8000cd4c:	ef 4c ff fc 	st.w	r7[-4],r12
   // Select the drive and partition corresponding at file index
   if( !nav_drive_set( index->u8_lun ))
8000cd50:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000cd54:	11 88       	ld.ub	r8,r8[0x0]
8000cd56:	10 9c       	mov	r12,r8
8000cd58:	f0 1f 00 1e 	mcall	8000cdd0 <nav_gotoindex+0x8c>
8000cd5c:	18 98       	mov	r8,r12
8000cd5e:	ec 18 00 01 	eorl	r8,0x1
8000cd62:	5c 58       	castu.b	r8
8000cd64:	c0 30       	breq	8000cd6a <nav_gotoindex+0x26>
      return false;
8000cd66:	30 08       	mov	r8,0
8000cd68:	c2 f8       	rjmp	8000cdc6 <nav_gotoindex+0x82>
#if (FS_MULTI_PARTITION  ==  true)
   if( !nav_partition_set(index->u8_partition))
      return false;
#endif
   if( !nav_partition_mount())
8000cd6a:	f0 1f 00 1b 	mcall	8000cdd4 <nav_gotoindex+0x90>
8000cd6e:	18 98       	mov	r8,r12
8000cd70:	ec 18 00 01 	eorl	r8,0x1
8000cd74:	5c 58       	castu.b	r8
8000cd76:	c0 30       	breq	8000cd7c <nav_gotoindex+0x38>
      return false;
8000cd78:	30 08       	mov	r8,0
8000cd7a:	c2 68       	rjmp	8000cdc6 <nav_gotoindex+0x82>

   // Select the directory corresponding at file index
   fs_g_nav.u32_cluster_sel_dir   = index->u32_cluster_sel_dir;
8000cd7c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000cd80:	70 19       	ld.w	r9,r8[0x4]
8000cd82:	49 68       	lddpc	r8,8000cdd8 <nav_gotoindex+0x94>
8000cd84:	91 89       	st.w	r8[0x20],r9

   // Search the file position corresponding at file index
   if ( !nav_filelist_reset())
8000cd86:	f0 1f 00 16 	mcall	8000cddc <nav_gotoindex+0x98>
8000cd8a:	18 98       	mov	r8,r12
8000cd8c:	ec 18 00 01 	eorl	r8,0x1
8000cd90:	5c 58       	castu.b	r8
8000cd92:	c1 00       	breq	8000cdb2 <nav_gotoindex+0x6e>
      return false;
8000cd94:	30 08       	mov	r8,0
8000cd96:	c1 88       	rjmp	8000cdc6 <nav_gotoindex+0x82>
   while( fs_g_nav_fast.u16_entry_pos_sel_file != index->u16_entry_pos_sel_file )
   {
      if( !nav_filelist_set( 0 , FS_FIND_NEXT ) )
8000cd98:	30 1b       	mov	r11,1
8000cd9a:	30 0c       	mov	r12,0
8000cd9c:	f0 1f 00 11 	mcall	8000cde0 <nav_gotoindex+0x9c>
8000cda0:	18 98       	mov	r8,r12
8000cda2:	ec 18 00 01 	eorl	r8,0x1
8000cda6:	5c 58       	castu.b	r8
8000cda8:	c0 60       	breq	8000cdb4 <nav_gotoindex+0x70>
      {
         nav_filelist_reset();
8000cdaa:	f0 1f 00 0d 	mcall	8000cddc <nav_gotoindex+0x98>
         return false;
8000cdae:	30 08       	mov	r8,0
8000cdb0:	c0 b8       	rjmp	8000cdc6 <nav_gotoindex+0x82>
   fs_g_nav.u32_cluster_sel_dir   = index->u32_cluster_sel_dir;

   // Search the file position corresponding at file index
   if ( !nav_filelist_reset())
      return false;
   while( fs_g_nav_fast.u16_entry_pos_sel_file != index->u16_entry_pos_sel_file )
8000cdb2:	d7 03       	nop
8000cdb4:	48 c8       	lddpc	r8,8000cde4 <nav_gotoindex+0xa0>
8000cdb6:	90 19       	ld.sh	r9,r8[0x2]
8000cdb8:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000cdbc:	90 48       	ld.sh	r8,r8[0x8]
8000cdbe:	f0 09 19 00 	cp.h	r9,r8
8000cdc2:	ce b1       	brne	8000cd98 <nav_gotoindex+0x54>
      {
         nav_filelist_reset();
         return false;
      }
   }
   return true;
8000cdc4:	30 18       	mov	r8,1
}
8000cdc6:	10 9c       	mov	r12,r8
8000cdc8:	2f fd       	sub	sp,-4
8000cdca:	e3 cd 80 80 	ldm	sp++,r7,pc
8000cdce:	00 00       	add	r0,r0
8000cdd0:	80 00       	ld.sh	r0,r0[0x0]
8000cdd2:	c7 f8       	rjmp	8000ced0 <nav_dir_gotoparent+0x60>
8000cdd4:	80 00       	ld.sh	r0,r0[0x0]
8000cdd6:	c8 70       	breq	8000cce4 <nav_filelist_last+0x74>
8000cdd8:	00 00       	add	r0,r0
8000cdda:	0d 84       	ld.ub	r4,r6[0x0]
8000cddc:	80 00       	ld.sh	r0,r0[0x0]
8000cdde:	c8 c0       	breq	8000ccf6 <nav_filelist_last+0x86>
8000cde0:	80 00       	ld.sh	r0,r0[0x0]
8000cde2:	c8 ec       	rcall	8000cefe <nav_dir_gotoparent+0x8e>
8000cde4:	00 00       	add	r0,r0
8000cde6:	0d d0       	ld.ub	r0,r6[0x5]

8000cde8 <nav_dir_root>:
//!
//! @return  false in case of error, see global value "fs_g_status" for more detail
//! @return  true otherwise
//!
bool  nav_dir_root( void )
{
8000cde8:	eb cd 40 80 	pushm	r7,lr
8000cdec:	1a 97       	mov	r7,sp
   return nav_partition_mount();
8000cdee:	f0 1f 00 04 	mcall	8000cdfc <nav_dir_root+0x14>
8000cdf2:	18 98       	mov	r8,r12
}
8000cdf4:	10 9c       	mov	r12,r8
8000cdf6:	e3 cd 80 80 	ldm	sp++,r7,pc
8000cdfa:	00 00       	add	r0,r0
8000cdfc:	80 00       	ld.sh	r0,r0[0x0]
8000cdfe:	c8 70       	breq	8000cd0c <nav_getindex+0xc>

8000ce00 <nav_dir_cd>:
//! After this routine the file list changes and contains the files and directories of the new directory.
//! By default no file is selected.
//! @endverbatim
//!
bool  nav_dir_cd( void )
{
8000ce00:	eb cd 40 80 	pushm	r7,lr
8000ce04:	1a 97       	mov	r7,sp
   if ( !fat_check_mount_select_noopen())
8000ce06:	f0 1f 00 15 	mcall	8000ce58 <nav_dir_cd+0x58>
8000ce0a:	18 98       	mov	r8,r12
8000ce0c:	ec 18 00 01 	eorl	r8,0x1
8000ce10:	5c 58       	castu.b	r8
8000ce12:	c0 30       	breq	8000ce18 <nav_dir_cd+0x18>
      return false;
8000ce14:	30 08       	mov	r8,0
8000ce16:	c1 d8       	rjmp	8000ce50 <nav_dir_cd+0x50>

   // The current selection, is it a directory ?
   if ( !fat_entry_is_dir())
8000ce18:	f0 1f 00 11 	mcall	8000ce5c <nav_dir_cd+0x5c>
8000ce1c:	18 98       	mov	r8,r12
8000ce1e:	ec 18 00 01 	eorl	r8,0x1
8000ce22:	5c 58       	castu.b	r8
8000ce24:	c0 30       	breq	8000ce2a <nav_dir_cd+0x2a>
      return false;
8000ce26:	30 08       	mov	r8,0
8000ce28:	c1 48       	rjmp	8000ce50 <nav_dir_cd+0x50>

   // Select the current directory
   fs_g_nav.u16_entry_pos_sel_dir = fs_g_nav_fast.u16_entry_pos_sel_file;
8000ce2a:	48 e8       	lddpc	r8,8000ce60 <nav_dir_cd+0x60>
8000ce2c:	90 18       	ld.sh	r8,r8[0x2]
8000ce2e:	48 e9       	lddpc	r9,8000ce64 <nav_dir_cd+0x64>
8000ce30:	f3 58 00 1c 	st.h	r9[28],r8
   fs_g_nav.u32_cluster_sel_dir = fs_g_nav_entry.u32_cluster;
8000ce34:	48 d8       	lddpc	r8,8000ce68 <nav_dir_cd+0x68>
8000ce36:	70 19       	ld.w	r9,r8[0x4]
8000ce38:	48 b8       	lddpc	r8,8000ce64 <nav_dir_cd+0x64>
8000ce3a:	91 89       	st.w	r8[0x20],r9

   // Reset file list
   if( false == nav_filelist_reset())
8000ce3c:	f0 1f 00 0c 	mcall	8000ce6c <nav_dir_cd+0x6c>
8000ce40:	18 98       	mov	r8,r12
8000ce42:	ec 18 00 01 	eorl	r8,0x1
8000ce46:	5c 58       	castu.b	r8
8000ce48:	c0 30       	breq	8000ce4e <nav_dir_cd+0x4e>
      return false;
8000ce4a:	30 08       	mov	r8,0
8000ce4c:	c0 28       	rjmp	8000ce50 <nav_dir_cd+0x50>
   return true;
8000ce4e:	30 18       	mov	r8,1
}
8000ce50:	10 9c       	mov	r12,r8
8000ce52:	e3 cd 80 80 	ldm	sp++,r7,pc
8000ce56:	00 00       	add	r0,r0
8000ce58:	80 00       	ld.sh	r0,r0[0x0]
8000ce5a:	8c 70       	ld.sh	r0,r6[0xe]
8000ce5c:	80 00       	ld.sh	r0,r0[0x0]
8000ce5e:	a2 8c       	st.b	r1[0x0],r12
8000ce60:	00 00       	add	r0,r0
8000ce62:	0d d0       	ld.ub	r0,r6[0x5]
8000ce64:	00 00       	add	r0,r0
8000ce66:	0d 84       	ld.ub	r4,r6[0x0]
8000ce68:	00 00       	add	r0,r0
8000ce6a:	0b 44       	ld.w	r4,--r5
8000ce6c:	80 00       	ld.sh	r0,r0[0x0]
8000ce6e:	c8 c0       	breq	8000cd86 <nav_gotoindex+0x42>

8000ce70 <nav_dir_gotoparent>:
//! After, the file list changes and contains the files and directories of the new directory.
//! By default, the file selected in file list is the previous (children) directory.
//! @endverbatim
//!
bool  nav_dir_gotoparent( void )
{
8000ce70:	eb cd 40 80 	pushm	r7,lr
8000ce74:	1a 97       	mov	r7,sp
8000ce76:	20 1d       	sub	sp,4
   uint32_t u32_cluster_old_dir;

   if (!fat_check_mount_noopen())
8000ce78:	f0 1f 00 2c 	mcall	8000cf28 <nav_dir_gotoparent+0xb8>
8000ce7c:	18 98       	mov	r8,r12
8000ce7e:	ec 18 00 01 	eorl	r8,0x1
8000ce82:	5c 58       	castu.b	r8
8000ce84:	c0 30       	breq	8000ce8a <nav_dir_gotoparent+0x1a>
      return false;
8000ce86:	30 08       	mov	r8,0
8000ce88:	c4 b8       	rjmp	8000cf1e <nav_dir_gotoparent+0xae>

   if (0 == fs_g_nav.u32_cluster_sel_dir)
8000ce8a:	4a 98       	lddpc	r8,8000cf2c <nav_dir_gotoparent+0xbc>
8000ce8c:	70 88       	ld.w	r8,r8[0x20]
8000ce8e:	58 08       	cp.w	r8,0
8000ce90:	c0 61       	brne	8000ce9c <nav_dir_gotoparent+0x2c>
   {
      fs_g_status = FS_ERR_IS_ROOT;        // There aren't parent
8000ce92:	4a 89       	lddpc	r9,8000cf30 <nav_dir_gotoparent+0xc0>
8000ce94:	31 98       	mov	r8,25
8000ce96:	b2 88       	st.b	r9[0x0],r8
      return false;
8000ce98:	30 08       	mov	r8,0
8000ce9a:	c4 28       	rjmp	8000cf1e <nav_dir_gotoparent+0xae>
   }

   // Select and read information about directory ".."
   fs_g_nav_fast.u16_entry_pos_sel_file = 1;
8000ce9c:	4a 69       	lddpc	r9,8000cf34 <nav_dir_gotoparent+0xc4>
8000ce9e:	30 18       	mov	r8,1
8000cea0:	b2 18       	st.h	r9[0x2],r8
   if ( !fat_read_dir())
8000cea2:	f0 1f 00 26 	mcall	8000cf38 <nav_dir_gotoparent+0xc8>
8000cea6:	18 98       	mov	r8,r12
8000cea8:	ec 18 00 01 	eorl	r8,0x1
8000ceac:	5c 58       	castu.b	r8
8000ceae:	c0 30       	breq	8000ceb4 <nav_dir_gotoparent+0x44>
      return false;
8000ceb0:	30 08       	mov	r8,0
8000ceb2:	c3 68       	rjmp	8000cf1e <nav_dir_gotoparent+0xae>
   fat_get_entry_info();
8000ceb4:	f0 1f 00 22 	mcall	8000cf3c <nav_dir_gotoparent+0xcc>
   // Save the children directory cluster
   u32_cluster_old_dir = fs_g_nav.u32_cluster_sel_dir;
8000ceb8:	49 d8       	lddpc	r8,8000cf2c <nav_dir_gotoparent+0xbc>
8000ceba:	70 88       	ld.w	r8,r8[0x20]
8000cebc:	ef 48 ff fc 	st.w	r7[-4],r8

   // Select the parent directory via information present in the current directory ".."
   fs_g_nav.u32_cluster_sel_dir = fs_g_nav_entry.u32_cluster;
8000cec0:	4a 08       	lddpc	r8,8000cf40 <nav_dir_gotoparent+0xd0>
8000cec2:	70 19       	ld.w	r9,r8[0x4]
8000cec4:	49 a8       	lddpc	r8,8000cf2c <nav_dir_gotoparent+0xbc>
8000cec6:	91 89       	st.w	r8[0x20],r9

   // Select the children directory in new directory (=parent directory)
   if( false == nav_filelist_reset())
8000cec8:	f0 1f 00 1f 	mcall	8000cf44 <nav_dir_gotoparent+0xd4>
8000cecc:	18 98       	mov	r8,r12
8000cece:	ec 18 00 01 	eorl	r8,0x1
8000ced2:	5c 58       	castu.b	r8
8000ced4:	c0 30       	breq	8000ceda <nav_dir_gotoparent+0x6a>
      return false;
8000ced6:	30 08       	mov	r8,0
8000ced8:	c2 38       	rjmp	8000cf1e <nav_dir_gotoparent+0xae>
   if( fs_g_nav.b_mode_nav_single && (FS_DIR != fs_g_nav.b_mode_nav) )
8000ceda:	49 58       	lddpc	r8,8000cf2c <nav_dir_gotoparent+0xbc>
8000cedc:	f1 38 00 2d 	ld.ub	r8,r8[45]
8000cee0:	58 08       	cp.w	r8,0
8000cee2:	c1 00       	breq	8000cf02 <nav_dir_gotoparent+0x92>
8000cee4:	49 28       	lddpc	r8,8000cf2c <nav_dir_gotoparent+0xbc>
8000cee6:	f1 38 00 2c 	ld.ub	r8,r8[44]
8000ceea:	58 08       	cp.w	r8,0
8000ceec:	c0 d0       	breq	8000cf06 <nav_dir_gotoparent+0x96>
      return true;
8000ceee:	30 18       	mov	r8,1
8000cef0:	c1 78       	rjmp	8000cf1e <nav_dir_gotoparent+0xae>

   while( nav_filelist_set( 0 , FS_FIND_NEXT ) )
   {
      if (fs_g_nav_entry.u32_cluster == u32_cluster_old_dir)
8000cef2:	49 48       	lddpc	r8,8000cf40 <nav_dir_gotoparent+0xd0>
8000cef4:	70 19       	ld.w	r9,r8[0x4]
8000cef6:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000cefa:	10 39       	cp.w	r9,r8
8000cefc:	c0 61       	brne	8000cf08 <nav_dir_gotoparent+0x98>
         return true;         // It is the children directory
8000cefe:	30 18       	mov	r8,1
8000cf00:	c0 f8       	rjmp	8000cf1e <nav_dir_gotoparent+0xae>
   if( false == nav_filelist_reset())
      return false;
   if( fs_g_nav.b_mode_nav_single && (FS_DIR != fs_g_nav.b_mode_nav) )
      return true;

   while( nav_filelist_set( 0 , FS_FIND_NEXT ) )
8000cf02:	d7 03       	nop
8000cf04:	c0 28       	rjmp	8000cf08 <nav_dir_gotoparent+0x98>
8000cf06:	d7 03       	nop
8000cf08:	30 1b       	mov	r11,1
8000cf0a:	30 0c       	mov	r12,0
8000cf0c:	f0 1f 00 0f 	mcall	8000cf48 <nav_dir_gotoparent+0xd8>
8000cf10:	18 98       	mov	r8,r12
8000cf12:	58 08       	cp.w	r8,0
8000cf14:	ce f1       	brne	8000cef2 <nav_dir_gotoparent+0x82>
   {
      if (fs_g_nav_entry.u32_cluster == u32_cluster_old_dir)
         return true;         // It is the children directory
   }
   fs_g_status = FS_ERR_FS;
8000cf16:	48 79       	lddpc	r9,8000cf30 <nav_dir_gotoparent+0xc0>
8000cf18:	30 88       	mov	r8,8
8000cf1a:	b2 88       	st.b	r9[0x0],r8
   return false;
8000cf1c:	30 08       	mov	r8,0
}
8000cf1e:	10 9c       	mov	r12,r8
8000cf20:	2f fd       	sub	sp,-4
8000cf22:	e3 cd 80 80 	ldm	sp++,r7,pc
8000cf26:	00 00       	add	r0,r0
8000cf28:	80 00       	ld.sh	r0,r0[0x0]
8000cf2a:	8c 44       	ld.sh	r4,r6[0x8]
8000cf2c:	00 00       	add	r0,r0
8000cf2e:	0d 84       	ld.ub	r4,r6[0x0]
8000cf30:	00 00       	add	r0,r0
8000cf32:	0d d4       	ld.ub	r4,r6[0x5]
8000cf34:	00 00       	add	r0,r0
8000cf36:	0d d0       	ld.ub	r0,r6[0x5]
8000cf38:	80 00       	ld.sh	r0,r0[0x0]
8000cf3a:	a0 38       	st.h	r0[0x6],r8
8000cf3c:	80 00       	ld.sh	r0,r0[0x0]
8000cf3e:	a1 b4       	sbr	r4,0x1
8000cf40:	00 00       	add	r0,r0
8000cf42:	0b 44       	ld.w	r4,--r5
8000cf44:	80 00       	ld.sh	r0,r0[0x0]
8000cf46:	c8 c0       	breq	8000ce5e <nav_dir_cd+0x5e>
8000cf48:	80 00       	ld.sh	r0,r0[0x0]
8000cf4a:	c8 ec       	rcall	8000d066 <nav_setcwd+0x32>

8000cf4c <nav_dir_make>:
//!
//! @return    false in case of error, see global value "fs_g_status" for more detail
//! @return    true otherwise
//!
bool  nav_dir_make( const FS_STRING sz_name  )
{
8000cf4c:	eb cd 40 80 	pushm	r7,lr
8000cf50:	1a 97       	mov	r7,sp
8000cf52:	20 1d       	sub	sp,4
8000cf54:	ef 4c ff fc 	st.w	r7[-4],r12
   if ( !fat_check_mount_noopen())
8000cf58:	f0 1f 00 2c 	mcall	8000d008 <nav_dir_make+0xbc>
8000cf5c:	18 98       	mov	r8,r12
8000cf5e:	ec 18 00 01 	eorl	r8,0x1
8000cf62:	5c 58       	castu.b	r8
8000cf64:	c0 30       	breq	8000cf6a <nav_dir_make+0x1e>
      return false;
8000cf66:	30 08       	mov	r8,0
8000cf68:	c4 b8       	rjmp	8000cffe <nav_dir_make+0xb2>

   // Create an entry file
   if ( !nav_file_create( sz_name ))
8000cf6a:	ee fc ff fc 	ld.w	r12,r7[-4]
8000cf6e:	f0 1f 00 28 	mcall	8000d00c <nav_dir_make+0xc0>
8000cf72:	18 98       	mov	r8,r12
8000cf74:	ec 18 00 01 	eorl	r8,0x1
8000cf78:	5c 58       	castu.b	r8
8000cf7a:	c0 30       	breq	8000cf80 <nav_dir_make+0x34>
      return false;
8000cf7c:	30 08       	mov	r8,0
8000cf7e:	c4 08       	rjmp	8000cffe <nav_dir_make+0xb2>

   // Allocate one cluster for the new directory
   MSB0(fs_g_seg.u32_addr)=0xFF;    // It is a new cluster list
8000cf80:	4a 49       	lddpc	r9,8000d010 <nav_dir_make+0xc4>
8000cf82:	3f f8       	mov	r8,-1
8000cf84:	b2 88       	st.b	r9[0x0],r8
   fs_g_seg.u32_size_or_pos = 1;    // Only one sector (= one cluster)
8000cf86:	4a 38       	lddpc	r8,8000d010 <nav_dir_make+0xc4>
8000cf88:	30 19       	mov	r9,1
8000cf8a:	91 19       	st.w	r8[0x4],r9
   if ( !fat_allocfreespace())
8000cf8c:	f0 1f 00 22 	mcall	8000d014 <nav_dir_make+0xc8>
8000cf90:	18 98       	mov	r8,r12
8000cf92:	ec 18 00 01 	eorl	r8,0x1
8000cf96:	5c 58       	castu.b	r8
8000cf98:	c0 80       	breq	8000cfa8 <nav_dir_make+0x5c>
   {
      fat_delete_file( false );
8000cf9a:	30 0c       	mov	r12,0
8000cf9c:	f0 1f 00 1f 	mcall	8000d018 <nav_dir_make+0xcc>
      fat_cache_flush();
8000cfa0:	f0 1f 00 1f 	mcall	8000d01c <nav_dir_make+0xd0>
      return false;
8000cfa4:	30 08       	mov	r8,0
8000cfa6:	c2 c8       	rjmp	8000cffe <nav_dir_make+0xb2>
   }

   // Save information about the new directory
   fs_g_nav_entry.u32_cluster = fs_g_seg.u32_addr; // First cluster of the directory returned by alloc_free_space
8000cfa8:	49 a8       	lddpc	r8,8000d010 <nav_dir_make+0xc4>
8000cfaa:	70 09       	ld.w	r9,r8[0x0]
8000cfac:	49 d8       	lddpc	r8,8000d020 <nav_dir_make+0xd4>
8000cfae:	91 19       	st.w	r8[0x4],r9
   fs_g_nav_entry.u32_size    = 0;                 // The directory size is null
8000cfb0:	49 c8       	lddpc	r8,8000d020 <nav_dir_make+0xd4>
8000cfb2:	30 09       	mov	r9,0
8000cfb4:	91 29       	st.w	r8[0x8],r9
   fs_g_nav_entry.u8_attr     = FS_ATTR_DIRECTORY; // Directory Attribute
8000cfb6:	49 b9       	lddpc	r9,8000d020 <nav_dir_make+0xd4>
8000cfb8:	31 08       	mov	r8,16
8000cfba:	b2 a8       	st.b	r9[0x2],r8

   // Initialize the values in the new directory
   if ( !fat_initialize_dir())
8000cfbc:	f0 1f 00 1a 	mcall	8000d024 <nav_dir_make+0xd8>
8000cfc0:	18 98       	mov	r8,r12
8000cfc2:	ec 18 00 01 	eorl	r8,0x1
8000cfc6:	5c 58       	castu.b	r8
8000cfc8:	c0 30       	breq	8000cfce <nav_dir_make+0x82>
      return false;
8000cfca:	30 08       	mov	r8,0
8000cfcc:	c1 98       	rjmp	8000cffe <nav_dir_make+0xb2>

   // Write directory information in her entry file
   if ( !fat_read_dir())
8000cfce:	f0 1f 00 17 	mcall	8000d028 <nav_dir_make+0xdc>
8000cfd2:	18 98       	mov	r8,r12
8000cfd4:	ec 18 00 01 	eorl	r8,0x1
8000cfd8:	5c 58       	castu.b	r8
8000cfda:	c0 30       	breq	8000cfe0 <nav_dir_make+0x94>
      return false;
8000cfdc:	30 08       	mov	r8,0
8000cfde:	c1 08       	rjmp	8000cffe <nav_dir_make+0xb2>
   fat_write_entry_file();
8000cfe0:	f0 1f 00 13 	mcall	8000d02c <nav_dir_make+0xe0>
   if( !fat_cache_flush())
8000cfe4:	f0 1f 00 0e 	mcall	8000d01c <nav_dir_make+0xd0>
8000cfe8:	18 98       	mov	r8,r12
8000cfea:	ec 18 00 01 	eorl	r8,0x1
8000cfee:	5c 58       	castu.b	r8
8000cff0:	c0 30       	breq	8000cff6 <nav_dir_make+0xaa>
      return false;
8000cff2:	30 08       	mov	r8,0
8000cff4:	c0 58       	rjmp	8000cffe <nav_dir_make+0xb2>

   // Go to position of new directory (it is the last directory)
   return nav_filelist_last( FS_DIR );
8000cff6:	30 0c       	mov	r12,0
8000cff8:	f0 1f 00 0e 	mcall	8000d030 <nav_dir_make+0xe4>
8000cffc:	18 98       	mov	r8,r12
}
8000cffe:	10 9c       	mov	r12,r8
8000d000:	2f fd       	sub	sp,-4
8000d002:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d006:	00 00       	add	r0,r0
8000d008:	80 00       	ld.sh	r0,r0[0x0]
8000d00a:	8c 44       	ld.sh	r4,r6[0x8]
8000d00c:	80 00       	ld.sh	r0,r0[0x0]
8000d00e:	d4 e8       	*unknown*
8000d010:	00 00       	add	r0,r0
8000d012:	0e 2c       	rsub	r12,r7
8000d014:	80 00       	ld.sh	r0,r0[0x0]
8000d016:	c1 c0       	breq	8000d04e <nav_setcwd+0x1a>
8000d018:	80 00       	ld.sh	r0,r0[0x0]
8000d01a:	c0 e0       	breq	8000d036 <nav_setcwd+0x2>
8000d01c:	80 00       	ld.sh	r0,r0[0x0]
8000d01e:	a9 c4       	cbr	r4,0x8
8000d020:	00 00       	add	r0,r0
8000d022:	0b 44       	ld.w	r4,--r5
8000d024:	80 00       	ld.sh	r0,r0[0x0]
8000d026:	b4 a8       	st.b	r10[0x2],r8
8000d028:	80 00       	ld.sh	r0,r0[0x0]
8000d02a:	a0 38       	st.h	r0[0x6],r8
8000d02c:	80 00       	ld.sh	r0,r0[0x0]
8000d02e:	a3 04       	ld.d	r4,r1
8000d030:	80 00       	ld.sh	r0,r0[0x0]
8000d032:	cc 70       	breq	8000cfc0 <nav_dir_make+0x74>

8000d034 <nav_setcwd>:
//! With syntax "./dir_parent/directory_name"  the file list corresponding at "dir_parent" and "directory_name" is selected.
//! With syntax "./dir_parent/directory_name/" the file list corresponding at "directory_name" and no file is selected.
//! @endverbatim
//!
bool  nav_setcwd( FS_STRING sz_path , bool b_match_case , bool b_create )
{
8000d034:	eb cd 40 80 	pushm	r7,lr
8000d038:	1a 97       	mov	r7,sp
8000d03a:	20 dd       	sub	sp,52
8000d03c:	ef 4c ff e0 	st.w	r7[-32],r12
8000d040:	16 99       	mov	r9,r11
8000d042:	14 98       	mov	r8,r10
8000d044:	ef 69 ff dc 	st.b	r7[-36],r9
8000d048:	ef 68 ff d8 	st.b	r7[-40],r8
   _MEM_TYPE_SLOW_   Fs_index index;
#if (FSFEATURE_WRITE == (FS_LEVEL_FEATURES & FSFEATURE_WRITE)) ||              \
    (FSFEATURE_WRITE_COMPLET == (FS_LEVEL_FEATURES & FSFEATURE_WRITE_COMPLET))
   FS_STRING sz_save_path = 0;
8000d04c:	30 08       	mov	r8,0
8000d04e:	ef 48 ff f0 	st.w	r7[-16],r8
#endif
   bool b_create_name = false;
8000d052:	30 08       	mov	r8,0
8000d054:	ef 68 ff f7 	st.b	r7[-9],r8

   if ( !fat_check_noopen())
8000d058:	f0 1f 00 b6 	mcall	8000d330 <nav_setcwd+0x2fc>
8000d05c:	18 98       	mov	r8,r12
8000d05e:	ec 18 00 01 	eorl	r8,0x1
8000d062:	5c 58       	castu.b	r8
8000d064:	c0 30       	breq	8000d06a <nav_setcwd+0x36>
      return false;
8000d066:	30 08       	mov	r8,0
8000d068:	c5 f9       	rjmp	8000d326 <nav_setcwd+0x2f2>

   index = nav_getindex();             // Save current position
8000d06a:	ee c8 00 34 	sub	r8,r7,52
8000d06e:	10 9c       	mov	r12,r8
8000d070:	f0 1f 00 b1 	mcall	8000d334 <nav_setcwd+0x300>
8000d074:	ee ca 00 1c 	sub	r10,r7,28
8000d078:	ee cb 00 34 	sub	r11,r7,52
8000d07c:	f6 e8 00 00 	ld.d	r8,r11[0]
8000d080:	f4 e9 00 00 	st.d	r10[0],r8
8000d084:	76 28       	ld.w	r8,r11[0x8]
8000d086:	95 28       	st.w	r10[0x8],r8

   // Check syntax "\path..."
   if( (( Is_unicode) && (('\\'  == ((FS_STR_UNICODE)sz_path )[0]) || ('/'  == ((FS_STR_UNICODE)sz_path )[0])) )
   ||  ((!Is_unicode) && (('\\'  == sz_path [0]) || ('/'  == sz_path [0])) ) )
8000d088:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000d08c:	11 89       	ld.ub	r9,r8[0x0]
      return false;

   index = nav_getindex();             // Save current position

   // Check syntax "\path..."
   if( (( Is_unicode) && (('\\'  == ((FS_STR_UNICODE)sz_path )[0]) || ('/'  == ((FS_STR_UNICODE)sz_path )[0])) )
8000d08e:	35 c8       	mov	r8,92
8000d090:	f0 09 18 00 	cp.b	r9,r8
8000d094:	c0 80       	breq	8000d0a4 <nav_setcwd+0x70>
   ||  ((!Is_unicode) && (('\\'  == sz_path [0]) || ('/'  == sz_path [0])) ) )
8000d096:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000d09a:	11 89       	ld.ub	r9,r8[0x0]
      return false;

   index = nav_getindex();             // Save current position

   // Check syntax "\path..."
   if( (( Is_unicode) && (('\\'  == ((FS_STR_UNICODE)sz_path )[0]) || ('/'  == ((FS_STR_UNICODE)sz_path )[0])) )
8000d09c:	32 f8       	mov	r8,47
8000d09e:	f0 09 18 00 	cp.b	r9,r8
8000d0a2:	c0 f1       	brne	8000d0c0 <nav_setcwd+0x8c>
   ||  ((!Is_unicode) && (('\\'  == sz_path [0]) || ('/'  == sz_path [0])) ) )
   {
      // Go to the root of current drive
      if( !nav_dir_root())
8000d0a4:	f0 1f 00 a5 	mcall	8000d338 <nav_setcwd+0x304>
8000d0a8:	18 98       	mov	r8,r12
8000d0aa:	ec 18 00 01 	eorl	r8,0x1
8000d0ae:	5c 58       	castu.b	r8
8000d0b0:	e0 81 01 22 	brne	8000d2f4 <nav_setcwd+0x2c0>
         goto nav_setcwd_fail;
      sz_path  += (Is_unicode? 2 : 1 );
8000d0b4:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000d0b8:	2f f8       	sub	r8,-1
8000d0ba:	ef 48 ff e0 	st.w	r7[-32],r8
      return false;

   index = nav_getindex();             // Save current position

   // Check syntax "\path..."
   if( (( Is_unicode) && (('\\'  == ((FS_STR_UNICODE)sz_path )[0]) || ('/'  == ((FS_STR_UNICODE)sz_path )[0])) )
8000d0be:	ca 68       	rjmp	8000d20a <nav_setcwd+0x1d6>
      sz_path  += (Is_unicode? 2 : 1 );
   }else

   // Check syntax "x:\path..."
   if( (( Is_unicode) && (( ':'  == ((FS_STR_UNICODE)sz_path )[1] ) && (('\\'  == ((FS_STR_UNICODE)sz_path )[2] ) || ('/'  == ((FS_STR_UNICODE)sz_path )[2]))) )
   ||  ((!Is_unicode) && (( ':'  == sz_path [1] ) && (('\\'  == sz_path [2] ) || ('/'  == sz_path [2]))) ) )
8000d0c0:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000d0c4:	2f f8       	sub	r8,-1
8000d0c6:	11 89       	ld.ub	r9,r8[0x0]
         goto nav_setcwd_fail;
      sz_path  += (Is_unicode? 2 : 1 );
   }else

   // Check syntax "x:\path..."
   if( (( Is_unicode) && (( ':'  == ((FS_STR_UNICODE)sz_path )[1] ) && (('\\'  == ((FS_STR_UNICODE)sz_path )[2] ) || ('/'  == ((FS_STR_UNICODE)sz_path )[2]))) )
8000d0c8:	33 a8       	mov	r8,58
8000d0ca:	f0 09 18 00 	cp.b	r9,r8
8000d0ce:	c4 11       	brne	8000d150 <nav_setcwd+0x11c>
   ||  ((!Is_unicode) && (( ':'  == sz_path [1] ) && (('\\'  == sz_path [2] ) || ('/'  == sz_path [2]))) ) )
8000d0d0:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000d0d4:	2f e8       	sub	r8,-2
8000d0d6:	11 89       	ld.ub	r9,r8[0x0]
         goto nav_setcwd_fail;
      sz_path  += (Is_unicode? 2 : 1 );
   }else

   // Check syntax "x:\path..."
   if( (( Is_unicode) && (( ':'  == ((FS_STR_UNICODE)sz_path )[1] ) && (('\\'  == ((FS_STR_UNICODE)sz_path )[2] ) || ('/'  == ((FS_STR_UNICODE)sz_path )[2]))) )
8000d0d8:	35 c8       	mov	r8,92
8000d0da:	f0 09 18 00 	cp.b	r9,r8
8000d0de:	c0 90       	breq	8000d0f0 <nav_setcwd+0xbc>
   ||  ((!Is_unicode) && (( ':'  == sz_path [1] ) && (('\\'  == sz_path [2] ) || ('/'  == sz_path [2]))) ) )
8000d0e0:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000d0e4:	2f e8       	sub	r8,-2
8000d0e6:	11 89       	ld.ub	r9,r8[0x0]
         goto nav_setcwd_fail;
      sz_path  += (Is_unicode? 2 : 1 );
   }else

   // Check syntax "x:\path..."
   if( (( Is_unicode) && (( ':'  == ((FS_STR_UNICODE)sz_path )[1] ) && (('\\'  == ((FS_STR_UNICODE)sz_path )[2] ) || ('/'  == ((FS_STR_UNICODE)sz_path )[2]))) )
8000d0e8:	32 f8       	mov	r8,47
8000d0ea:	f0 09 18 00 	cp.b	r9,r8
8000d0ee:	c3 11       	brne	8000d150 <nav_setcwd+0x11c>
      if( Is_unicode )
      {
         if( !nav_drive_set( toupper(((FS_STR_UNICODE)sz_path )[0])-'A' ) )
            goto nav_setcwd_fail;
      }else{
         if( !nav_drive_set( toupper(sz_path [0])-'A' ) )
8000d0f0:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000d0f4:	11 88       	ld.ub	r8,r8[0x0]
8000d0f6:	ef 48 ff fc 	st.w	r7[-4],r8
8000d0fa:	fe f8 02 42 	ld.w	r8,pc[578]
8000d0fe:	70 09       	ld.w	r9,r8[0x0]
8000d100:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000d104:	f2 08 00 08 	add	r8,r9,r8
8000d108:	11 88       	ld.ub	r8,r8[0x0]
8000d10a:	e2 18 00 02 	andl	r8,0x2,COH
8000d10e:	c0 50       	breq	8000d118 <nav_setcwd+0xe4>
8000d110:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000d114:	22 08       	sub	r8,32
8000d116:	c0 38       	rjmp	8000d11c <nav_setcwd+0xe8>
8000d118:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000d11c:	5c 58       	castu.b	r8
8000d11e:	24 18       	sub	r8,65
8000d120:	5c 58       	castu.b	r8
8000d122:	10 9c       	mov	r12,r8
8000d124:	f0 1f 00 87 	mcall	8000d340 <nav_setcwd+0x30c>
8000d128:	18 98       	mov	r8,r12
8000d12a:	ec 18 00 01 	eorl	r8,0x1
8000d12e:	5c 58       	castu.b	r8
8000d130:	e0 81 00 e4 	brne	8000d2f8 <nav_setcwd+0x2c4>
            goto nav_setcwd_fail;
      }
      if( !nav_partition_mount())
8000d134:	f0 1f 00 84 	mcall	8000d344 <nav_setcwd+0x310>
8000d138:	18 98       	mov	r8,r12
8000d13a:	ec 18 00 01 	eorl	r8,0x1
8000d13e:	5c 58       	castu.b	r8
8000d140:	e0 81 00 de 	brne	8000d2fc <nav_setcwd+0x2c8>
         goto nav_setcwd_fail;
      sz_path  += 3*(Is_unicode? 2 : 1 );
8000d144:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000d148:	2f d8       	sub	r8,-3
8000d14a:	ef 48 ff e0 	st.w	r7[-32],r8
         goto nav_setcwd_fail;
      sz_path  += (Is_unicode? 2 : 1 );
   }else

   // Check syntax "x:\path..."
   if( (( Is_unicode) && (( ':'  == ((FS_STR_UNICODE)sz_path )[1] ) && (('\\'  == ((FS_STR_UNICODE)sz_path )[2] ) || ('/'  == ((FS_STR_UNICODE)sz_path )[2]))) )
8000d14e:	c5 e8       	rjmp	8000d20a <nav_setcwd+0x1d6>
      sz_path  += 3*(Is_unicode? 2 : 1 );
   }else

   // Check syntax ".\path..."
   if( (( Is_unicode) && (( '.'  == ((FS_STR_UNICODE)sz_path )[0] ) && (('\\'  == ((FS_STR_UNICODE)sz_path )[1] ) || ('/'  == ((FS_STR_UNICODE)sz_path )[1] ))) )
   ||  ((!Is_unicode) && (( '.'  == sz_path [0] ) && (('\\'  == sz_path [1] ) || ('/'  == sz_path [1] ))) ) )
8000d150:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000d154:	11 89       	ld.ub	r9,r8[0x0]
         goto nav_setcwd_fail;
      sz_path  += 3*(Is_unicode? 2 : 1 );
   }else

   // Check syntax ".\path..."
   if( (( Is_unicode) && (( '.'  == ((FS_STR_UNICODE)sz_path )[0] ) && (('\\'  == ((FS_STR_UNICODE)sz_path )[1] ) || ('/'  == ((FS_STR_UNICODE)sz_path )[1] ))) )
8000d156:	32 e8       	mov	r8,46
8000d158:	f0 09 18 00 	cp.b	r9,r8
8000d15c:	c2 f1       	brne	8000d1ba <nav_setcwd+0x186>
   ||  ((!Is_unicode) && (( '.'  == sz_path [0] ) && (('\\'  == sz_path [1] ) || ('/'  == sz_path [1] ))) ) )
8000d15e:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000d162:	2f f8       	sub	r8,-1
8000d164:	11 89       	ld.ub	r9,r8[0x0]
         goto nav_setcwd_fail;
      sz_path  += 3*(Is_unicode? 2 : 1 );
   }else

   // Check syntax ".\path..."
   if( (( Is_unicode) && (( '.'  == ((FS_STR_UNICODE)sz_path )[0] ) && (('\\'  == ((FS_STR_UNICODE)sz_path )[1] ) || ('/'  == ((FS_STR_UNICODE)sz_path )[1] ))) )
8000d166:	35 c8       	mov	r8,92
8000d168:	f0 09 18 00 	cp.b	r9,r8
8000d16c:	c0 90       	breq	8000d17e <nav_setcwd+0x14a>
   ||  ((!Is_unicode) && (( '.'  == sz_path [0] ) && (('\\'  == sz_path [1] ) || ('/'  == sz_path [1] ))) ) )
8000d16e:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000d172:	2f f8       	sub	r8,-1
8000d174:	11 89       	ld.ub	r9,r8[0x0]
         goto nav_setcwd_fail;
      sz_path  += 3*(Is_unicode? 2 : 1 );
   }else

   // Check syntax ".\path..."
   if( (( Is_unicode) && (( '.'  == ((FS_STR_UNICODE)sz_path )[0] ) && (('\\'  == ((FS_STR_UNICODE)sz_path )[1] ) || ('/'  == ((FS_STR_UNICODE)sz_path )[1] ))) )
8000d176:	32 f8       	mov	r8,47
8000d178:	f0 09 18 00 	cp.b	r9,r8
8000d17c:	c2 11       	brne	8000d1be <nav_setcwd+0x18a>
   ||  ((!Is_unicode) && (( '.'  == sz_path [0] ) && (('\\'  == sz_path [1] ) || ('/'  == sz_path [1] ))) ) )
   {
      // Search in current directory
      sz_path  += 2*(Is_unicode? 2 : 1 );
8000d17e:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000d182:	2f e8       	sub	r8,-2
8000d184:	ef 48 ff e0 	st.w	r7[-32],r8
         goto nav_setcwd_fail;
      sz_path  += 3*(Is_unicode? 2 : 1 );
   }else

   // Check syntax ".\path..."
   if( (( Is_unicode) && (( '.'  == ((FS_STR_UNICODE)sz_path )[0] ) && (('\\'  == ((FS_STR_UNICODE)sz_path )[1] ) || ('/'  == ((FS_STR_UNICODE)sz_path )[1] ))) )
8000d188:	c4 18       	rjmp	8000d20a <nav_setcwd+0x1d6>
         while(( '.'  == sz_path [0] )
         &&    ( '.'  == sz_path [1] )
         &&    (('\\'  == sz_path [2]) || ('/'  == sz_path [2]) || (0  == sz_path [2])) )
         {
         // Go to parent directory
         if( !nav_dir_gotoparent() )
8000d18a:	f0 1f 00 70 	mcall	8000d348 <nav_setcwd+0x314>
8000d18e:	18 98       	mov	r8,r12
8000d190:	ec 18 00 01 	eorl	r8,0x1
8000d194:	5c 58       	castu.b	r8
8000d196:	e0 81 00 b5 	brne	8000d300 <nav_setcwd+0x2cc>
            goto nav_setcwd_fail;
            sz_path  += 2; // jump ".."
8000d19a:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000d19e:	2f e8       	sub	r8,-2
8000d1a0:	ef 48 ff e0 	st.w	r7[-32],r8
            if( 0 != sz_path [0])
8000d1a4:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000d1a8:	11 88       	ld.ub	r8,r8[0x0]
8000d1aa:	58 08       	cp.w	r8,0
8000d1ac:	c0 a0       	breq	8000d1c0 <nav_setcwd+0x18c>
               sz_path  +=1; // jump "/"
8000d1ae:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000d1b2:	2f f8       	sub	r8,-1
8000d1b4:	ef 48 ff e0 	st.w	r7[-32],r8
8000d1b8:	c0 48       	rjmp	8000d1c0 <nav_setcwd+0x18c>
            sz_path  += (2*2); // jump ".."
            if( 0 != ((FS_STR_UNICODE)sz_path )[0])
               sz_path  += (2*1); // jump "/"
         }
      }else{
         while(( '.'  == sz_path [0] )
8000d1ba:	d7 03       	nop
8000d1bc:	c0 28       	rjmp	8000d1c0 <nav_setcwd+0x18c>
8000d1be:	d7 03       	nop
8000d1c0:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000d1c4:	11 89       	ld.ub	r9,r8[0x0]
8000d1c6:	32 e8       	mov	r8,46
8000d1c8:	f0 09 18 00 	cp.b	r9,r8
8000d1cc:	c1 f1       	brne	8000d20a <nav_setcwd+0x1d6>
         &&    ( '.'  == sz_path [1] )
8000d1ce:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000d1d2:	2f f8       	sub	r8,-1
8000d1d4:	11 89       	ld.ub	r9,r8[0x0]
            sz_path  += (2*2); // jump ".."
            if( 0 != ((FS_STR_UNICODE)sz_path )[0])
               sz_path  += (2*1); // jump "/"
         }
      }else{
         while(( '.'  == sz_path [0] )
8000d1d6:	32 e8       	mov	r8,46
8000d1d8:	f0 09 18 00 	cp.b	r9,r8
8000d1dc:	c1 71       	brne	8000d20a <nav_setcwd+0x1d6>
         &&    ( '.'  == sz_path [1] )
         &&    (('\\'  == sz_path [2]) || ('/'  == sz_path [2]) || (0  == sz_path [2])) )
8000d1de:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000d1e2:	2f e8       	sub	r8,-2
8000d1e4:	11 89       	ld.ub	r9,r8[0x0]
            sz_path  += (2*2); // jump ".."
            if( 0 != ((FS_STR_UNICODE)sz_path )[0])
               sz_path  += (2*1); // jump "/"
         }
      }else{
         while(( '.'  == sz_path [0] )
8000d1e6:	35 c8       	mov	r8,92
8000d1e8:	f0 09 18 00 	cp.b	r9,r8
8000d1ec:	cc f0       	breq	8000d18a <nav_setcwd+0x156>
         &&    ( '.'  == sz_path [1] )
         &&    (('\\'  == sz_path [2]) || ('/'  == sz_path [2]) || (0  == sz_path [2])) )
8000d1ee:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000d1f2:	2f e8       	sub	r8,-2
8000d1f4:	11 89       	ld.ub	r9,r8[0x0]
            sz_path  += (2*2); // jump ".."
            if( 0 != ((FS_STR_UNICODE)sz_path )[0])
               sz_path  += (2*1); // jump "/"
         }
      }else{
         while(( '.'  == sz_path [0] )
8000d1f6:	32 f8       	mov	r8,47
8000d1f8:	f0 09 18 00 	cp.b	r9,r8
8000d1fc:	cc 70       	breq	8000d18a <nav_setcwd+0x156>
         &&    ( '.'  == sz_path [1] )
         &&    (('\\'  == sz_path [2]) || ('/'  == sz_path [2]) || (0  == sz_path [2])) )
8000d1fe:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000d202:	2f e8       	sub	r8,-2
8000d204:	11 88       	ld.ub	r8,r8[0x0]
            sz_path  += (2*2); // jump ".."
            if( 0 != ((FS_STR_UNICODE)sz_path )[0])
               sz_path  += (2*1); // jump "/"
         }
      }else{
         while(( '.'  == sz_path [0] )
8000d206:	58 08       	cp.w	r8,0
8000d208:	cc 10       	breq	8000d18a <nav_setcwd+0x156>
         }
      }
   }

   // Reset list to start the search at the beginning
   if( !nav_filelist_reset())
8000d20a:	f0 1f 00 51 	mcall	8000d34c <nav_setcwd+0x318>
8000d20e:	18 98       	mov	r8,r12
8000d210:	ec 18 00 01 	eorl	r8,0x1
8000d214:	5c 58       	castu.b	r8
8000d216:	c7 71       	brne	8000d304 <nav_setcwd+0x2d0>
      goto nav_setcwd_fail;

   while( 1 )
   {
      if( (( Is_unicode) && ( 0 == ((FS_STR_UNICODE)sz_path )[0] ) )
      ||  ((!Is_unicode) && ( 0 == sz_path [0] ) ) )
8000d218:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000d21c:	11 88       	ld.ub	r8,r8[0x0]
   if( !nav_filelist_reset())
      goto nav_setcwd_fail;

   while( 1 )
   {
      if( (( Is_unicode) && ( 0 == ((FS_STR_UNICODE)sz_path )[0] ) )
8000d21e:	58 08       	cp.w	r8,0
8000d220:	c0 31       	brne	8000d226 <nav_setcwd+0x1f2>
      ||  ((!Is_unicode) && ( 0 == sz_path [0] ) ) )
      {
         return true;   // path (without file) is found or create
8000d222:	30 18       	mov	r8,1
8000d224:	c8 18       	rjmp	8000d326 <nav_setcwd+0x2f2>
      }
      if( !nav_filelist_findname( sz_path  , b_match_case  ))
8000d226:	ef 38 ff dc 	ld.ub	r8,r7[-36]
8000d22a:	10 9b       	mov	r11,r8
8000d22c:	ee fc ff e0 	ld.w	r12,r7[-32]
8000d230:	f0 1f 00 48 	mcall	8000d350 <nav_setcwd+0x31c>
8000d234:	18 98       	mov	r8,r12
8000d236:	ec 18 00 01 	eorl	r8,0x1
8000d23a:	5c 58       	castu.b	r8
8000d23c:	c1 00       	breq	8000d25c <nav_setcwd+0x228>
      {
         // The file or directory is not found
         if( !b_create )
8000d23e:	ef 38 ff d8 	ld.ub	r8,r7[-40]
8000d242:	ec 18 00 01 	eorl	r8,0x1
8000d246:	5c 58       	castu.b	r8
8000d248:	c6 01       	brne	8000d308 <nav_setcwd+0x2d4>
            goto nav_setcwd_fail;   // don't create the directory then exit
         // Set flag to create the directory
         b_create_name = true;
8000d24a:	30 18       	mov	r8,1
8000d24c:	ef 68 ff f7 	st.b	r7[-9],r8
#if (FSFEATURE_WRITE == (FS_LEVEL_FEATURES & FSFEATURE_WRITE)) ||              \
    (FSFEATURE_WRITE_COMPLET == (FS_LEVEL_FEATURES & FSFEATURE_WRITE_COMPLET))
         sz_save_path = sz_path;
8000d250:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000d254:	ef 48 ff f0 	st.w	r7[-16],r8
8000d258:	c0 28       	rjmp	8000d25c <nav_setcwd+0x228>
            sz_path  += (Is_unicode? 2 : 1 );
            if( !nav_dir_cd())
               goto nav_setcwd_fail;
            break;
         }
      }
8000d25a:	d7 03       	nop
#endif
      }

      while( 1 )
      {
         sz_path  += (Is_unicode? 2 : 1 );
8000d25c:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000d260:	2f f8       	sub	r8,-1
8000d262:	ef 48 ff e0 	st.w	r7[-32],r8
         if( (( Is_unicode) && ( 0 == ((FS_STR_UNICODE)sz_path )[0] ) )
         ||  ((!Is_unicode) && ( 0 == sz_path [0] ) ) )
8000d266:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000d26a:	11 88       	ld.ub	r8,r8[0x0]
      }

      while( 1 )
      {
         sz_path  += (Is_unicode? 2 : 1 );
         if( (( Is_unicode) && ( 0 == ((FS_STR_UNICODE)sz_path )[0] ) )
8000d26c:	58 08       	cp.w	r8,0
8000d26e:	c1 11       	brne	8000d290 <nav_setcwd+0x25c>
         ||  ((!Is_unicode) && ( 0 == sz_path [0] ) ) )
         {
            // Is it the last name of path and it is a file
            if( b_create_name )
8000d270:	ef 39 ff f7 	ld.ub	r9,r7[-9]
8000d274:	30 08       	mov	r8,0
8000d276:	f0 09 18 00 	cp.b	r9,r8
8000d27a:	c0 a0       	breq	8000d28e <nav_setcwd+0x25a>
            {
#if (FSFEATURE_WRITE == (FS_LEVEL_FEATURES & FSFEATURE_WRITE))
               // The file must be created
               if( !nav_file_create( sz_save_path ) )
8000d27c:	ee fc ff f0 	ld.w	r12,r7[-16]
8000d280:	f0 1f 00 35 	mcall	8000d354 <nav_setcwd+0x320>
8000d284:	18 98       	mov	r8,r12
8000d286:	ec 18 00 01 	eorl	r8,0x1
8000d28a:	5c 58       	castu.b	r8
8000d28c:	c4 01       	brne	8000d30c <nav_setcwd+0x2d8>
                  goto nav_setcwd_fail;
#else
               goto nav_setcwd_fail;
#endif
            }
            break;   // The file include in path is found or created, then end of set_cwd
8000d28e:	c3 28       	rjmp	8000d2f2 <nav_setcwd+0x2be>
         }

         if( (( Is_unicode) && (('\\' == ((FS_STR_UNICODE)sz_path )[0] ) || ('/' == ((FS_STR_UNICODE)sz_path )[0] )) )
         ||  ((!Is_unicode) && (('\\' == sz_path [0] ) || ('/' == sz_path [0] )) ) )
8000d290:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000d294:	11 89       	ld.ub	r9,r8[0x0]
#endif
            }
            break;   // The file include in path is found or created, then end of set_cwd
         }

         if( (( Is_unicode) && (('\\' == ((FS_STR_UNICODE)sz_path )[0] ) || ('/' == ((FS_STR_UNICODE)sz_path )[0] )) )
8000d296:	35 c8       	mov	r8,92
8000d298:	f0 09 18 00 	cp.b	r9,r8
8000d29c:	c0 80       	breq	8000d2ac <nav_setcwd+0x278>
         ||  ((!Is_unicode) && (('\\' == sz_path [0] ) || ('/' == sz_path [0] )) ) )
8000d29e:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000d2a2:	11 89       	ld.ub	r9,r8[0x0]
#endif
            }
            break;   // The file include in path is found or created, then end of set_cwd
         }

         if( (( Is_unicode) && (('\\' == ((FS_STR_UNICODE)sz_path )[0] ) || ('/' == ((FS_STR_UNICODE)sz_path )[0] )) )
8000d2a4:	32 f8       	mov	r8,47
8000d2a6:	f0 09 18 00 	cp.b	r9,r8
8000d2aa:	cd 81       	brne	8000d25a <nav_setcwd+0x226>
         ||  ((!Is_unicode) && (('\\' == sz_path [0] ) || ('/' == sz_path [0] )) ) )
         {
            // Is it a folder name
            if( b_create_name )
8000d2ac:	ef 39 ff f7 	ld.ub	r9,r7[-9]
8000d2b0:	30 08       	mov	r8,0
8000d2b2:	f0 09 18 00 	cp.b	r9,r8
8000d2b6:	c0 a0       	breq	8000d2ca <nav_setcwd+0x296>
            {
#if (FSFEATURE_WRITE_COMPLET == (FS_LEVEL_FEATURES & FSFEATURE_WRITE_COMPLET))
               // The folder doesn't exist and it must be created
               if( !nav_dir_make( sz_save_path ))
8000d2b8:	ee fc ff f0 	ld.w	r12,r7[-16]
8000d2bc:	f0 1f 00 27 	mcall	8000d358 <nav_setcwd+0x324>
8000d2c0:	18 98       	mov	r8,r12
8000d2c2:	ec 18 00 01 	eorl	r8,0x1
8000d2c6:	5c 58       	castu.b	r8
8000d2c8:	c2 41       	brne	8000d310 <nav_setcwd+0x2dc>
                  goto nav_setcwd_fail;
#else
               goto nav_setcwd_fail;
#endif
            }
            if( !fat_entry_is_dir() )
8000d2ca:	f0 1f 00 25 	mcall	8000d35c <nav_setcwd+0x328>
8000d2ce:	18 98       	mov	r8,r12
8000d2d0:	ec 18 00 01 	eorl	r8,0x1
8000d2d4:	5c 58       	castu.b	r8
8000d2d6:	c1 f1       	brne	8000d314 <nav_setcwd+0x2e0>
               goto nav_setcwd_fail;
            // jump '\'
            sz_path  += (Is_unicode? 2 : 1 );
8000d2d8:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000d2dc:	2f f8       	sub	r8,-1
8000d2de:	ef 48 ff e0 	st.w	r7[-32],r8
            if( !nav_dir_cd())
8000d2e2:	f0 1f 00 20 	mcall	8000d360 <nav_setcwd+0x32c>
8000d2e6:	18 98       	mov	r8,r12
8000d2e8:	ec 18 00 01 	eorl	r8,0x1
8000d2ec:	5c 58       	castu.b	r8
8000d2ee:	c1 51       	brne	8000d318 <nav_setcwd+0x2e4>
               goto nav_setcwd_fail;
            break;
8000d2f0:	d7 03       	nop
         }
      }

   }
8000d2f2:	c9 3b       	rjmp	8000d218 <nav_setcwd+0x1e4>
   if( (( Is_unicode) && (('\\'  == ((FS_STR_UNICODE)sz_path )[0]) || ('/'  == ((FS_STR_UNICODE)sz_path )[0])) )
   ||  ((!Is_unicode) && (('\\'  == sz_path [0]) || ('/'  == sz_path [0])) ) )
   {
      // Go to the root of current drive
      if( !nav_dir_root())
         goto nav_setcwd_fail;
8000d2f4:	d7 03       	nop
8000d2f6:	c1 28       	rjmp	8000d31a <nav_setcwd+0x2e6>
      {
         if( !nav_drive_set( toupper(((FS_STR_UNICODE)sz_path )[0])-'A' ) )
            goto nav_setcwd_fail;
      }else{
         if( !nav_drive_set( toupper(sz_path [0])-'A' ) )
            goto nav_setcwd_fail;
8000d2f8:	d7 03       	nop
8000d2fa:	c1 08       	rjmp	8000d31a <nav_setcwd+0x2e6>
      }
      if( !nav_partition_mount())
         goto nav_setcwd_fail;
8000d2fc:	d7 03       	nop
8000d2fe:	c0 e8       	rjmp	8000d31a <nav_setcwd+0x2e6>
         &&    ( '.'  == sz_path [1] )
         &&    (('\\'  == sz_path [2]) || ('/'  == sz_path [2]) || (0  == sz_path [2])) )
         {
         // Go to parent directory
         if( !nav_dir_gotoparent() )
            goto nav_setcwd_fail;
8000d300:	d7 03       	nop
8000d302:	c0 c8       	rjmp	8000d31a <nav_setcwd+0x2e6>
      }
   }

   // Reset list to start the search at the beginning
   if( !nav_filelist_reset())
      goto nav_setcwd_fail;
8000d304:	d7 03       	nop
8000d306:	c0 a8       	rjmp	8000d31a <nav_setcwd+0x2e6>
      }
      if( !nav_filelist_findname( sz_path  , b_match_case  ))
      {
         // The file or directory is not found
         if( !b_create )
            goto nav_setcwd_fail;   // don't create the directory then exit
8000d308:	d7 03       	nop
8000d30a:	c0 88       	rjmp	8000d31a <nav_setcwd+0x2e6>
            if( b_create_name )
            {
#if (FSFEATURE_WRITE == (FS_LEVEL_FEATURES & FSFEATURE_WRITE))
               // The file must be created
               if( !nav_file_create( sz_save_path ) )
                  goto nav_setcwd_fail;
8000d30c:	d7 03       	nop
8000d30e:	c0 68       	rjmp	8000d31a <nav_setcwd+0x2e6>
            if( b_create_name )
            {
#if (FSFEATURE_WRITE_COMPLET == (FS_LEVEL_FEATURES & FSFEATURE_WRITE_COMPLET))
               // The folder doesn't exist and it must be created
               if( !nav_dir_make( sz_save_path ))
                  goto nav_setcwd_fail;
8000d310:	d7 03       	nop
8000d312:	c0 48       	rjmp	8000d31a <nav_setcwd+0x2e6>
#else
               goto nav_setcwd_fail;
#endif
            }
            if( !fat_entry_is_dir() )
               goto nav_setcwd_fail;
8000d314:	d7 03       	nop
8000d316:	c0 28       	rjmp	8000d31a <nav_setcwd+0x2e6>
            // jump '\'
            sz_path  += (Is_unicode? 2 : 1 );
            if( !nav_dir_cd())
               goto nav_setcwd_fail;
8000d318:	d7 03       	nop
      }

   }

nav_setcwd_fail:
   nav_gotoindex( &index );   // Restore the position
8000d31a:	ee c8 00 1c 	sub	r8,r7,28
8000d31e:	10 9c       	mov	r12,r8
8000d320:	f0 1f 00 11 	mcall	8000d364 <nav_setcwd+0x330>
   return false;
8000d324:	30 08       	mov	r8,0
}
8000d326:	10 9c       	mov	r12,r8
8000d328:	2f 3d       	sub	sp,-52
8000d32a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d32e:	00 00       	add	r0,r0
8000d330:	80 00       	ld.sh	r0,r0[0x0]
8000d332:	8b a0       	st.w	r5[0x28],r0
8000d334:	80 00       	ld.sh	r0,r0[0x0]
8000d336:	cd 00       	breq	8000d2d6 <nav_setcwd+0x2a2>
8000d338:	80 00       	ld.sh	r0,r0[0x0]
8000d33a:	cd e8       	rjmp	8000d4f6 <nav_file_create+0xe>
8000d33c:	00 00       	add	r0,r0
8000d33e:	00 dc       	st.w	--r0,r12
8000d340:	80 00       	ld.sh	r0,r0[0x0]
8000d342:	c7 f8       	rjmp	8000d440 <nav_file_name+0xd8>
8000d344:	80 00       	ld.sh	r0,r0[0x0]
8000d346:	c8 70       	breq	8000d254 <nav_setcwd+0x220>
8000d348:	80 00       	ld.sh	r0,r0[0x0]
8000d34a:	ce 70       	breq	8000d318 <nav_setcwd+0x2e4>
8000d34c:	80 00       	ld.sh	r0,r0[0x0]
8000d34e:	c8 c0       	breq	8000d266 <nav_setcwd+0x232>
8000d350:	80 00       	ld.sh	r0,r0[0x0]
8000d352:	cb 04       	brge	8000d2b2 <nav_setcwd+0x27e>
8000d354:	80 00       	ld.sh	r0,r0[0x0]
8000d356:	d4 e8       	*unknown*
8000d358:	80 00       	ld.sh	r0,r0[0x0]
8000d35a:	cf 4c       	rcall	8000d542 <nav_file_create+0x5a>
8000d35c:	80 00       	ld.sh	r0,r0[0x0]
8000d35e:	a2 8c       	st.b	r1[0x0],r12
8000d360:	80 00       	ld.sh	r0,r0[0x0]
8000d362:	ce 00       	breq	8000d322 <nav_setcwd+0x2ee>
8000d364:	80 00       	ld.sh	r0,r0[0x0]
8000d366:	cd 44       	brge	8000d30e <nav_setcwd+0x2da>

8000d368 <nav_file_name>:
//!
//! @return  false in case of error, see global value "fs_g_status" for more detail
//! @return  true otherwise
//!
bool  nav_file_name( FS_STRING sz_name , uint8_t u8_size_max , bool b_mode , bool b_match_case  )
{
8000d368:	eb cd 40 80 	pushm	r7,lr
8000d36c:	1a 97       	mov	r7,sp
8000d36e:	20 6d       	sub	sp,24
8000d370:	ef 4c ff f4 	st.w	r7[-12],r12
8000d374:	12 98       	mov	r8,r9
8000d376:	16 99       	mov	r9,r11
8000d378:	ef 69 ff f0 	st.b	r7[-16],r9
8000d37c:	14 99       	mov	r9,r10
8000d37e:	ef 69 ff ec 	st.b	r7[-20],r9
8000d382:	ef 68 ff e8 	st.b	r7[-24],r8
   _MEM_TYPE_SLOW_   uint16_t u16_lgt;   // Only used if LENGTH string mode enabled
   uint16_t  u16_ptr_save_entry;
   bool  b_readshortname = false;
8000d386:	30 08       	mov	r8,0
8000d388:	ef 68 ff ff 	st.b	r7[-1],r8

   if ( !fat_check_mount_select())
8000d38c:	f0 1f 00 50 	mcall	8000d4cc <nav_file_name+0x164>
8000d390:	18 98       	mov	r8,r12
8000d392:	ec 18 00 01 	eorl	r8,0x1
8000d396:	5c 58       	castu.b	r8
8000d398:	c0 30       	breq	8000d39e <nav_file_name+0x36>
      return false;
8000d39a:	30 08       	mov	r8,0
8000d39c:	c9 48       	rjmp	8000d4c4 <nav_file_name+0x15c>

   // Check if the string size is not 0
   if( (FS_NAME_GET == b_mode)
8000d39e:	ef 39 ff ec 	ld.ub	r9,r7[-20]
8000d3a2:	30 08       	mov	r8,0
8000d3a4:	f0 09 18 00 	cp.b	r9,r8
8000d3a8:	c0 90       	breq	8000d3ba <nav_file_name+0x52>
8000d3aa:	ef 39 ff f0 	ld.ub	r9,r7[-16]
8000d3ae:	30 08       	mov	r8,0
8000d3b0:	f0 09 18 00 	cp.b	r9,r8
8000d3b4:	c0 31       	brne	8000d3ba <nav_file_name+0x52>
   &&  (0 == u8_size_max) )
   {
      return true;
8000d3b6:	30 18       	mov	r8,1
8000d3b8:	c8 68       	rjmp	8000d4c4 <nav_file_name+0x15c>
   }

   // Save the current entry position
   u16_ptr_save_entry = fs_g_nav_fast.u16_entry_pos_sel_file;
8000d3ba:	4c 68       	lddpc	r8,8000d4d0 <nav_file_name+0x168>
8000d3bc:	90 18       	ld.sh	r8,r8[0x2]
8000d3be:	ef 58 ff fc 	st.h	r7[-4],r8
   // if it is the beginning of the directory
   if ( 0 == fs_g_nav_fast.u16_entry_pos_sel_file )
8000d3c2:	4c 48       	lddpc	r8,8000d4d0 <nav_file_name+0x168>
8000d3c4:	90 18       	ld.sh	r8,r8[0x2]
8000d3c6:	58 08       	cp.w	r8,0
8000d3c8:	c0 51       	brne	8000d3d2 <nav_file_name+0x6a>
   {
      b_readshortname = true;                   // It isn't possible to have a long name
8000d3ca:	30 18       	mov	r8,1
8000d3cc:	ef 68 ff ff 	st.b	r7[-1],r8
8000d3d0:	c0 78       	rjmp	8000d3de <nav_file_name+0x76>
   }
   else
   {
      fs_g_nav_fast.u16_entry_pos_sel_file--;   // Initialize entry position to search the first long name entry
8000d3d2:	4c 08       	lddpc	r8,8000d4d0 <nav_file_name+0x168>
8000d3d4:	90 18       	ld.sh	r8,r8[0x2]
8000d3d6:	20 18       	sub	r8,1
8000d3d8:	5c 88       	casts.h	r8
8000d3da:	4b e9       	lddpc	r9,8000d4d0 <nav_file_name+0x168>
8000d3dc:	b2 18       	st.h	r9[0x2],r8
   }

   // Loop in directory entry
   u16_lgt = 0;
8000d3de:	30 08       	mov	r8,0
8000d3e0:	ef 58 ff fa 	st.h	r7[-6],r8
   while( 1 )
   {
      if ( !fat_read_dir())
8000d3e4:	f0 1f 00 3c 	mcall	8000d4d4 <nav_file_name+0x16c>
8000d3e8:	18 98       	mov	r8,r12
8000d3ea:	ec 18 00 01 	eorl	r8,0x1
8000d3ee:	5c 58       	castu.b	r8
8000d3f0:	c6 61       	brne	8000d4bc <nav_file_name+0x154>
         break; // error

      if ( b_readshortname )
8000d3f2:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000d3f6:	30 08       	mov	r8,0
8000d3f8:	f0 09 18 00 	cp.b	r9,r8
8000d3fc:	c0 d0       	breq	8000d416 <nav_file_name+0xae>
      {
         // No long name present then read short name
         return fat_entry_shortname( sz_name , u8_size_max , b_mode  );
8000d3fe:	ef 39 ff ec 	ld.ub	r9,r7[-20]
8000d402:	ef 38 ff f0 	ld.ub	r8,r7[-16]
8000d406:	12 9a       	mov	r10,r9
8000d408:	10 9b       	mov	r11,r8
8000d40a:	ee fc ff f4 	ld.w	r12,r7[-12]
8000d40e:	f0 1f 00 33 	mcall	8000d4d8 <nav_file_name+0x170>
8000d412:	18 98       	mov	r8,r12
8000d414:	c5 88       	rjmp	8000d4c4 <nav_file_name+0x15c>
      }

      // Check or read the part of long file name in this entry
      if ( fat_entry_longname( sz_name , u8_size_max , b_mode , b_match_case  ))
8000d416:	ef 39 ff e8 	ld.ub	r9,r7[-24]
8000d41a:	ef 3a ff ec 	ld.ub	r10,r7[-20]
8000d41e:	ef 38 ff f0 	ld.ub	r8,r7[-16]
8000d422:	10 9b       	mov	r11,r8
8000d424:	ee fc ff f4 	ld.w	r12,r7[-12]
8000d428:	f0 1f 00 2d 	mcall	8000d4dc <nav_file_name+0x174>
8000d42c:	18 98       	mov	r8,r12
8000d42e:	58 08       	cp.w	r8,0
8000d430:	c1 60       	breq	8000d45c <nav_file_name+0xf4>
      {
         if( g_b_string_length )
8000d432:	4a c8       	lddpc	r8,8000d4e0 <nav_file_name+0x178>
8000d434:	11 88       	ld.ub	r8,r8[0x0]
8000d436:	58 08       	cp.w	r8,0
8000d438:	c0 c0       	breq	8000d450 <nav_file_name+0xe8>
         {
            ((FS_STR_UNICODE)sz_name )[0] += u16_lgt;
8000d43a:	ee fa ff f4 	ld.w	r10,r7[-12]
8000d43e:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000d442:	90 08       	ld.sh	r8,r8[0x0]
8000d444:	ef 09 ff fa 	ld.sh	r9,r7[-6]
8000d448:	f2 08 00 08 	add	r8,r9,r8
8000d44c:	5c 88       	casts.h	r8
8000d44e:	b4 08       	st.h	r10[0x0],r8
         }
         fs_g_nav_fast.u16_entry_pos_sel_file = u16_ptr_save_entry;
8000d450:	4a 09       	lddpc	r9,8000d4d0 <nav_file_name+0x168>
8000d452:	ef 08 ff fc 	ld.sh	r8,r7[-4]
8000d456:	b2 18       	st.h	r9[0x2],r8
         return true;
8000d458:	30 18       	mov	r8,1
8000d45a:	c3 58       	rjmp	8000d4c4 <nav_file_name+0x15c>
      }

      if ( FS_NO_LAST_LFN_ENTRY != fs_g_status )
8000d45c:	4a 28       	lddpc	r8,8000d4e4 <nav_file_name+0x17c>
8000d45e:	11 89       	ld.ub	r9,r8[0x0]
8000d460:	31 08       	mov	r8,16
8000d462:	f0 09 18 00 	cp.b	r9,r8
8000d466:	c1 00       	breq	8000d486 <nav_file_name+0x11e>
      {
         // Go to the main entry file (=short name entry)
         fs_g_nav_fast.u16_entry_pos_sel_file = u16_ptr_save_entry;
8000d468:	49 a9       	lddpc	r9,8000d4d0 <nav_file_name+0x168>
8000d46a:	ef 08 ff fc 	ld.sh	r8,r7[-4]
8000d46e:	b2 18       	st.h	r9[0x2],r8

         if ( FS_ERR_ENTRY_BAD == fs_g_status )
8000d470:	49 d8       	lddpc	r8,8000d4e4 <nav_file_name+0x17c>
8000d472:	11 89       	ld.ub	r9,r8[0x0]
8000d474:	30 b8       	mov	r8,11
8000d476:	f0 09 18 00 	cp.b	r9,r8
8000d47a:	c2 31       	brne	8000d4c0 <nav_file_name+0x158>
         {
            // It isn't a long name entry then there aren't long file name
            b_readshortname = true;   // It is mandatory to use the short name
8000d47c:	30 18       	mov	r8,1
8000d47e:	ef 68 ff ff 	st.b	r7[-1],r8
            continue;                 // restart the loop
8000d482:	d7 03       	nop
         sz_name += FS_SIZE_LFN_ENTRY * (Is_unicode? 2 : 1 );
         u8_size_max -= FS_SIZE_LFN_ENTRY;
      }
      fs_g_nav_fast.u16_entry_pos_sel_file--;   // Go to the next part of long file name

   }  // end of loop while(1)
8000d484:	cb 0b       	rjmp	8000d3e4 <nav_file_name+0x7c>
            continue;                 // restart the loop
         }
         // here, it is a error system or the string don't match with the file name
         break;
      }
      if( g_b_string_length )
8000d486:	49 78       	lddpc	r8,8000d4e0 <nav_file_name+0x178>
8000d488:	11 88       	ld.ub	r8,r8[0x0]
8000d48a:	58 08       	cp.w	r8,0
8000d48c:	c0 70       	breq	8000d49a <nav_file_name+0x132>
      {
         u16_lgt += FS_SIZE_LFN_ENTRY;
8000d48e:	ef 08 ff fa 	ld.sh	r8,r7[-6]
8000d492:	2f 38       	sub	r8,-13
8000d494:	ef 58 ff fa 	st.h	r7[-6],r8
8000d498:	c0 b8       	rjmp	8000d4ae <nav_file_name+0x146>
      }
      else
      {
         // Increment the string to store the next part of file name
         sz_name += FS_SIZE_LFN_ENTRY * (Is_unicode? 2 : 1 );
8000d49a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000d49e:	2f 38       	sub	r8,-13
8000d4a0:	ef 48 ff f4 	st.w	r7[-12],r8
         u8_size_max -= FS_SIZE_LFN_ENTRY;
8000d4a4:	ef 38 ff f0 	ld.ub	r8,r7[-16]
8000d4a8:	20 d8       	sub	r8,13
8000d4aa:	ef 68 ff f0 	st.b	r7[-16],r8
      }
      fs_g_nav_fast.u16_entry_pos_sel_file--;   // Go to the next part of long file name
8000d4ae:	48 98       	lddpc	r8,8000d4d0 <nav_file_name+0x168>
8000d4b0:	90 18       	ld.sh	r8,r8[0x2]
8000d4b2:	20 18       	sub	r8,1
8000d4b4:	5c 88       	casts.h	r8
8000d4b6:	48 79       	lddpc	r9,8000d4d0 <nav_file_name+0x168>
8000d4b8:	b2 18       	st.h	r9[0x2],r8

   }  // end of loop while(1)
8000d4ba:	c9 5b       	rjmp	8000d3e4 <nav_file_name+0x7c>
   // Loop in directory entry
   u16_lgt = 0;
   while( 1 )
   {
      if ( !fat_read_dir())
         break; // error
8000d4bc:	d7 03       	nop
8000d4be:	c0 28       	rjmp	8000d4c2 <nav_file_name+0x15a>
            // It isn't a long name entry then there aren't long file name
            b_readshortname = true;   // It is mandatory to use the short name
            continue;                 // restart the loop
         }
         // here, it is a error system or the string don't match with the file name
         break;
8000d4c0:	d7 03       	nop
         u8_size_max -= FS_SIZE_LFN_ENTRY;
      }
      fs_g_nav_fast.u16_entry_pos_sel_file--;   // Go to the next part of long file name

   }  // end of loop while(1)
   return false;
8000d4c2:	30 08       	mov	r8,0
}
8000d4c4:	10 9c       	mov	r12,r8
8000d4c6:	2f ad       	sub	sp,-24
8000d4c8:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d4cc:	80 00       	ld.sh	r0,r0[0x0]
8000d4ce:	8c f8       	ld.uh	r8,r6[0xe]
8000d4d0:	00 00       	add	r0,r0
8000d4d2:	0d d0       	ld.ub	r0,r6[0x5]
8000d4d4:	80 00       	ld.sh	r0,r0[0x0]
8000d4d6:	a0 38       	st.h	r0[0x6],r8
8000d4d8:	80 00       	ld.sh	r0,r0[0x0]
8000d4da:	a3 e0       	*unknown*
8000d4dc:	80 00       	ld.sh	r0,r0[0x0]
8000d4de:	a5 c0       	cbr	r0,0x4
8000d4e0:	00 00       	add	r0,r0
8000d4e2:	0d d5       	ld.ub	r5,r6[0x5]
8000d4e4:	00 00       	add	r0,r0
8000d4e6:	0d d4       	ld.ub	r4,r6[0x5]

8000d4e8 <nav_file_create>:
//! @verbatim
//! If you use this routine to create a file, then you must called file_open() to open this new file
//! @endverbatim
//!
bool  nav_file_create( const FS_STRING sz_name  )
{
8000d4e8:	eb cd 40 80 	pushm	r7,lr
8000d4ec:	1a 97       	mov	r7,sp
8000d4ee:	20 1d       	sub	sp,4
8000d4f0:	ef 4c ff fc 	st.w	r7[-4],r12
   // Check if the name already exists
   if (!nav_filelist_reset())
8000d4f4:	f0 1f 00 1f 	mcall	8000d570 <nav_file_create+0x88>
8000d4f8:	18 98       	mov	r8,r12
8000d4fa:	ec 18 00 01 	eorl	r8,0x1
8000d4fe:	5c 58       	castu.b	r8
8000d500:	c0 30       	breq	8000d506 <nav_file_create+0x1e>
      return false;
8000d502:	30 08       	mov	r8,0
8000d504:	c3 18       	rjmp	8000d566 <nav_file_create+0x7e>
   if (nav_filelist_findname(sz_name , false))
8000d506:	30 0b       	mov	r11,0
8000d508:	ee fc ff fc 	ld.w	r12,r7[-4]
8000d50c:	f0 1f 00 1a 	mcall	8000d574 <nav_file_create+0x8c>
8000d510:	18 98       	mov	r8,r12
8000d512:	58 08       	cp.w	r8,0
8000d514:	c0 60       	breq	8000d520 <nav_file_create+0x38>
   {
      fs_g_status = FS_ERR_FILE_EXIST;
8000d516:	49 99       	lddpc	r9,8000d578 <nav_file_create+0x90>
8000d518:	32 a8       	mov	r8,42
8000d51a:	b2 88       	st.b	r9[0x0],r8
      return false;  // File exist -> it is not possible to create this name
8000d51c:	30 08       	mov	r8,0
8000d51e:	c2 48       	rjmp	8000d566 <nav_file_create+0x7e>
   }
   // FYC: here, the selection is at the end of the list
   // Create name entries
   if ( !fat_create_entry_file_name( sz_name ))
8000d520:	ee fc ff fc 	ld.w	r12,r7[-4]
8000d524:	f0 1f 00 16 	mcall	8000d57c <nav_file_create+0x94>
8000d528:	18 98       	mov	r8,r12
8000d52a:	ec 18 00 01 	eorl	r8,0x1
8000d52e:	5c 58       	castu.b	r8
8000d530:	c0 30       	breq	8000d536 <nav_file_create+0x4e>
      return false; // error
8000d532:	30 08       	mov	r8,0
8000d534:	c1 98       	rjmp	8000d566 <nav_file_create+0x7e>
   // By default the information about the new file is NULL
   fs_g_nav_entry.u32_cluster = 0;     // No first cluster
8000d536:	49 38       	lddpc	r8,8000d580 <nav_file_create+0x98>
8000d538:	30 09       	mov	r9,0
8000d53a:	91 19       	st.w	r8[0x4],r9
   fs_g_nav_entry.u32_size    = 0;     // The size is null
8000d53c:	49 18       	lddpc	r8,8000d580 <nav_file_create+0x98>
8000d53e:	30 09       	mov	r9,0
8000d540:	91 29       	st.w	r8[0x8],r9
   fs_g_nav_entry.u8_attr     = 0;     // Attribute is a file
8000d542:	49 09       	lddpc	r9,8000d580 <nav_file_create+0x98>
8000d544:	30 08       	mov	r8,0
8000d546:	b2 a8       	st.b	r9[0x2],r8

   // It is the last FILE of the list
   fs_g_nav.u16_pos_sel_file++;
8000d548:	48 f8       	lddpc	r8,8000d584 <nav_file_create+0x9c>
8000d54a:	f1 08 00 24 	ld.sh	r8,r8[36]
8000d54e:	2f f8       	sub	r8,-1
8000d550:	5c 88       	casts.h	r8
8000d552:	48 d9       	lddpc	r9,8000d584 <nav_file_create+0x9c>
8000d554:	f3 58 00 24 	st.h	r9[36],r8
   fs_g_nav.b_mode_nav = FS_FILE;
8000d558:	48 b9       	lddpc	r9,8000d584 <nav_file_create+0x9c>
8000d55a:	30 18       	mov	r8,1
8000d55c:	f3 68 00 2c 	st.b	r9[44],r8
   return fat_cache_flush();
8000d560:	f0 1f 00 0a 	mcall	8000d588 <nav_file_create+0xa0>
8000d564:	18 98       	mov	r8,r12
}
8000d566:	10 9c       	mov	r12,r8
8000d568:	2f fd       	sub	sp,-4
8000d56a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d56e:	00 00       	add	r0,r0
8000d570:	80 00       	ld.sh	r0,r0[0x0]
8000d572:	c8 c0       	breq	8000d48a <nav_file_name+0x122>
8000d574:	80 00       	ld.sh	r0,r0[0x0]
8000d576:	cb 04       	brge	8000d4d6 <nav_file_name+0x16e>
8000d578:	00 00       	add	r0,r0
8000d57a:	0d d4       	ld.ub	r4,r6[0x5]
8000d57c:	80 00       	ld.sh	r0,r0[0x0]
8000d57e:	b5 d4       	cbr	r4,0x15
8000d580:	00 00       	add	r0,r0
8000d582:	0b 44       	ld.w	r4,--r5
8000d584:	00 00       	add	r0,r0
8000d586:	0d 84       	ld.ub	r4,r6[0x0]
8000d588:	80 00       	ld.sh	r0,r0[0x0]
8000d58a:	a9 c4       	cbr	r4,0x8

8000d58c <sd_mmc_spi_mem_init>:

//_____ D E C L A R A T I O N ______________________________________________


void sd_mmc_spi_mem_init(void)
{
8000d58c:	eb cd 40 80 	pushm	r7,lr
8000d590:	1a 97       	mov	r7,sp
  sd_mmc_spi_internal_init();        // Restart Init of SD/MMC card after previous first init
8000d592:	f0 1f 00 03 	mcall	8000d59c <sd_mmc_spi_mem_init+0x10>
}
8000d596:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d59a:	00 00       	add	r0,r0
8000d59c:	80 00       	ld.sh	r0,r0[0x0]
8000d59e:	2f 50       	sub	r0,-11

8000d5a0 <sd_mmc_spi_test_unit_ready>:



Ctrl_status sd_mmc_spi_test_unit_ready(void)
{
8000d5a0:	eb cd 40 80 	pushm	r7,lr
8000d5a4:	1a 97       	mov	r7,sp
  Sd_mmc_spi_access_signal_on();
  switch (sd_mmc_spi_presence_status)
8000d5a6:	49 b8       	lddpc	r8,8000d610 <sd_mmc_spi_test_unit_ready+0x70>
8000d5a8:	11 88       	ld.ub	r8,r8[0x0]
8000d5aa:	58 18       	cp.w	r8,1
8000d5ac:	c1 40       	breq	8000d5d4 <sd_mmc_spi_test_unit_ready+0x34>
8000d5ae:	58 28       	cp.w	r8,2
8000d5b0:	c2 30       	breq	8000d5f6 <sd_mmc_spi_test_unit_ready+0x56>
8000d5b2:	58 08       	cp.w	r8,0
8000d5b4:	c2 61       	brne	8000d600 <sd_mmc_spi_test_unit_ready+0x60>
  {
    case SD_MMC_REMOVED:
      sd_mmc_spi_init_done = false;
8000d5b6:	49 89       	lddpc	r9,8000d614 <sd_mmc_spi_test_unit_ready+0x74>
8000d5b8:	30 08       	mov	r8,0
8000d5ba:	b2 88       	st.b	r9[0x0],r8
      if (sd_mmc_spi_mem_check())
8000d5bc:	f0 1f 00 17 	mcall	8000d618 <sd_mmc_spi_test_unit_ready+0x78>
8000d5c0:	18 98       	mov	r8,r12
8000d5c2:	58 08       	cp.w	r8,0
8000d5c4:	c0 60       	breq	8000d5d0 <sd_mmc_spi_test_unit_ready+0x30>
      {
        sd_mmc_spi_presence_status = SD_MMC_INSERTED;
8000d5c6:	49 39       	lddpc	r9,8000d610 <sd_mmc_spi_test_unit_ready+0x70>
8000d5c8:	30 18       	mov	r8,1
8000d5ca:	b2 88       	st.b	r9[0x0],r8
        Sd_mmc_spi_access_signal_off();
        return CTRL_BUSY;
8000d5cc:	30 38       	mov	r8,3
8000d5ce:	c1 d8       	rjmp	8000d608 <sd_mmc_spi_test_unit_ready+0x68>
      }
      Sd_mmc_spi_access_signal_off();
      return CTRL_NO_PRESENT;
8000d5d0:	30 28       	mov	r8,2
8000d5d2:	c1 b8       	rjmp	8000d608 <sd_mmc_spi_test_unit_ready+0x68>

    case SD_MMC_INSERTED:
      if (!sd_mmc_spi_mem_check())
8000d5d4:	f0 1f 00 11 	mcall	8000d618 <sd_mmc_spi_test_unit_ready+0x78>
8000d5d8:	18 98       	mov	r8,r12
8000d5da:	ec 18 00 01 	eorl	r8,0x1
8000d5de:	5c 58       	castu.b	r8
8000d5e0:	c0 90       	breq	8000d5f2 <sd_mmc_spi_test_unit_ready+0x52>
      {
        sd_mmc_spi_presence_status = SD_MMC_REMOVING;
8000d5e2:	48 c9       	lddpc	r9,8000d610 <sd_mmc_spi_test_unit_ready+0x70>
8000d5e4:	30 28       	mov	r8,2
8000d5e6:	b2 88       	st.b	r9[0x0],r8
        sd_mmc_spi_init_done = false;
8000d5e8:	48 b9       	lddpc	r9,8000d614 <sd_mmc_spi_test_unit_ready+0x74>
8000d5ea:	30 08       	mov	r8,0
8000d5ec:	b2 88       	st.b	r9[0x0],r8
        Sd_mmc_spi_access_signal_off();
        return CTRL_BUSY;
8000d5ee:	30 38       	mov	r8,3
8000d5f0:	c0 c8       	rjmp	8000d608 <sd_mmc_spi_test_unit_ready+0x68>
      }
      Sd_mmc_spi_access_signal_off();
      return CTRL_GOOD;
8000d5f2:	30 08       	mov	r8,0
8000d5f4:	c0 a8       	rjmp	8000d608 <sd_mmc_spi_test_unit_ready+0x68>

    case SD_MMC_REMOVING:
      sd_mmc_spi_presence_status = SD_MMC_REMOVED;
8000d5f6:	48 79       	lddpc	r9,8000d610 <sd_mmc_spi_test_unit_ready+0x70>
8000d5f8:	30 08       	mov	r8,0
8000d5fa:	b2 88       	st.b	r9[0x0],r8
      Sd_mmc_spi_access_signal_off();
      return CTRL_NO_PRESENT;
8000d5fc:	30 28       	mov	r8,2
8000d5fe:	c0 58       	rjmp	8000d608 <sd_mmc_spi_test_unit_ready+0x68>

    default:
      sd_mmc_spi_presence_status = SD_MMC_REMOVED;
8000d600:	48 49       	lddpc	r9,8000d610 <sd_mmc_spi_test_unit_ready+0x70>
8000d602:	30 08       	mov	r8,0
8000d604:	b2 88       	st.b	r9[0x0],r8
      Sd_mmc_spi_access_signal_off();
      return CTRL_BUSY;
8000d606:	30 38       	mov	r8,3
    }
    else
      return CTRL_NO_PRESENT;
  }
*/
}
8000d608:	10 9c       	mov	r12,r8
8000d60a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d60e:	00 00       	add	r0,r0
8000d610:	00 00       	add	r0,r0
8000d612:	00 b0       	st.h	r0++,r0
8000d614:	00 00       	add	r0,r0
8000d616:	06 24       	rsub	r4,r3
8000d618:	80 00       	ld.sh	r0,r0[0x0]
8000d61a:	3a 38       	mov	r8,-93

8000d61c <sd_mmc_spi_read_capacity>:



Ctrl_status sd_mmc_spi_read_capacity(uint32_t *nb_sector)
{
8000d61c:	eb cd 40 80 	pushm	r7,lr
8000d620:	1a 97       	mov	r7,sp
8000d622:	20 1d       	sub	sp,4
8000d624:	ef 4c ff fc 	st.w	r7[-4],r12
//   sd_mmc_spi_check_presence();   // omitted because creates interferences with "sd_mmc_spi_test_unit_ready()" function
   Sd_mmc_spi_access_signal_on();

   if (!sd_mmc_spi_init_done)
8000d628:	48 d8       	lddpc	r8,8000d65c <sd_mmc_spi_read_capacity+0x40>
8000d62a:	11 88       	ld.ub	r8,r8[0x0]
8000d62c:	ec 18 00 01 	eorl	r8,0x1
8000d630:	5c 58       	castu.b	r8
8000d632:	c0 30       	breq	8000d638 <sd_mmc_spi_read_capacity+0x1c>
   {
      sd_mmc_spi_mem_init();
8000d634:	f0 1f 00 0b 	mcall	8000d660 <sd_mmc_spi_read_capacity+0x44>
   }

   if (sd_mmc_spi_init_done)
8000d638:	48 98       	lddpc	r8,8000d65c <sd_mmc_spi_read_capacity+0x40>
8000d63a:	11 88       	ld.ub	r8,r8[0x0]
8000d63c:	58 08       	cp.w	r8,0
8000d63e:	c0 a0       	breq	8000d652 <sd_mmc_spi_read_capacity+0x36>
   {
     *nb_sector = sd_mmc_spi_last_block_address+1;
8000d640:	48 98       	lddpc	r8,8000d664 <sd_mmc_spi_read_capacity+0x48>
8000d642:	70 08       	ld.w	r8,r8[0x0]
8000d644:	f0 c9 ff ff 	sub	r9,r8,-1
8000d648:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000d64c:	91 09       	st.w	r8[0x0],r9
     Sd_mmc_spi_access_signal_off();
     return CTRL_GOOD;
8000d64e:	30 08       	mov	r8,0
8000d650:	c0 28       	rjmp	8000d654 <sd_mmc_spi_read_capacity+0x38>
   }
   else
   {
     Sd_mmc_spi_access_signal_off();
     return CTRL_NO_PRESENT;
8000d652:	30 28       	mov	r8,2
   }
}
8000d654:	10 9c       	mov	r12,r8
8000d656:	2f fd       	sub	sp,-4
8000d658:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d65c:	00 00       	add	r0,r0
8000d65e:	06 24       	rsub	r4,r3
8000d660:	80 00       	ld.sh	r0,r0[0x0]
8000d662:	d5 8c       	*unknown*
8000d664:	00 00       	add	r0,r0
8000d666:	0b 04       	ld.w	r4,r5++

8000d668 <sd_mmc_spi_wr_protect>:
//! which cannot be for a SD_MMC.
//!
//! @return false  -> the memory is not write-protected (always)
//!/
bool  sd_mmc_spi_wr_protect(void)
{
8000d668:	eb cd 40 80 	pushm	r7,lr
8000d66c:	1a 97       	mov	r7,sp
   return false;
8000d66e:	30 08       	mov	r8,0
}
8000d670:	10 9c       	mov	r12,r8
8000d672:	e3 cd 80 80 	ldm	sp++,r7,pc

8000d676 <sd_mmc_spi_removal>:
//! @brief This function tells if the memory has been removed or not.
//!
//! @return false  -> The memory isn't removed
//!/
bool  sd_mmc_spi_removal(void)
{
8000d676:	eb cd 40 80 	pushm	r7,lr
8000d67a:	1a 97       	mov	r7,sp
  return false;
8000d67c:	30 08       	mov	r8,0
//  return ((sd_mmc_spi_check_presence()) ? false : true);
}
8000d67e:	10 9c       	mov	r12,r8
8000d680:	e3 cd 80 80 	ldm	sp++,r7,pc

8000d684 <sd_mmc_spi_mem_2_ram>:
//------------ Standard functions for read/write 1 sector to 1 sector ram buffer -----------------

#if ACCESS_MEM_TO_RAM == true

Ctrl_status sd_mmc_spi_mem_2_ram(uint32_t addr, void *ram)
{
8000d684:	eb cd 40 80 	pushm	r7,lr
8000d688:	1a 97       	mov	r7,sp
8000d68a:	20 2d       	sub	sp,8
8000d68c:	ef 4c ff fc 	st.w	r7[-4],r12
8000d690:	ef 4b ff f8 	st.w	r7[-8],r11
   Sd_mmc_spi_access_signal_on();
   sd_mmc_spi_check_presence();
8000d694:	f0 1f 00 1c 	mcall	8000d704 <sd_mmc_spi_mem_2_ram+0x80>

   if (!sd_mmc_spi_init_done)
8000d698:	49 c8       	lddpc	r8,8000d708 <sd_mmc_spi_mem_2_ram+0x84>
8000d69a:	11 88       	ld.ub	r8,r8[0x0]
8000d69c:	ec 18 00 01 	eorl	r8,0x1
8000d6a0:	5c 58       	castu.b	r8
8000d6a2:	c0 30       	breq	8000d6a8 <sd_mmc_spi_mem_2_ram+0x24>
   {
      sd_mmc_spi_mem_init();
8000d6a4:	f0 1f 00 1a 	mcall	8000d70c <sd_mmc_spi_mem_2_ram+0x88>
   }

   if (!sd_mmc_spi_init_done)
8000d6a8:	49 88       	lddpc	r8,8000d708 <sd_mmc_spi_mem_2_ram+0x84>
8000d6aa:	11 88       	ld.ub	r8,r8[0x0]
8000d6ac:	ec 18 00 01 	eorl	r8,0x1
8000d6b0:	5c 58       	castu.b	r8
8000d6b2:	c0 30       	breq	8000d6b8 <sd_mmc_spi_mem_2_ram+0x34>
     return CTRL_NO_PRESENT;
8000d6b4:	30 28       	mov	r8,2
8000d6b6:	c2 28       	rjmp	8000d6fa <sd_mmc_spi_mem_2_ram+0x76>

   if( !sd_mmc_spi_read_open(addr) )
8000d6b8:	ee fc ff fc 	ld.w	r12,r7[-4]
8000d6bc:	f0 1f 00 15 	mcall	8000d710 <sd_mmc_spi_mem_2_ram+0x8c>
8000d6c0:	18 98       	mov	r8,r12
8000d6c2:	ec 18 00 01 	eorl	r8,0x1
8000d6c6:	5c 58       	castu.b	r8
8000d6c8:	c1 31       	brne	8000d6ee <sd_mmc_spi_mem_2_ram+0x6a>
     goto sd_mmc_spi_mem_2_ram_fail;

   if( !sd_mmc_spi_read_sector_to_ram(ram))
8000d6ca:	ee fc ff f8 	ld.w	r12,r7[-8]
8000d6ce:	f0 1f 00 12 	mcall	8000d714 <sd_mmc_spi_mem_2_ram+0x90>
8000d6d2:	18 98       	mov	r8,r12
8000d6d4:	ec 18 00 01 	eorl	r8,0x1
8000d6d8:	5c 58       	castu.b	r8
8000d6da:	c0 c1       	brne	8000d6f2 <sd_mmc_spi_mem_2_ram+0x6e>
     goto sd_mmc_spi_mem_2_ram_fail;

   if( !sd_mmc_spi_read_close() )
8000d6dc:	f0 1f 00 0f 	mcall	8000d718 <sd_mmc_spi_mem_2_ram+0x94>
8000d6e0:	18 98       	mov	r8,r12
8000d6e2:	ec 18 00 01 	eorl	r8,0x1
8000d6e6:	5c 58       	castu.b	r8
8000d6e8:	c0 71       	brne	8000d6f6 <sd_mmc_spi_mem_2_ram+0x72>
     goto sd_mmc_spi_mem_2_ram_fail;

   Sd_mmc_spi_access_signal_off();
   return CTRL_GOOD;
8000d6ea:	30 08       	mov	r8,0
8000d6ec:	c0 78       	rjmp	8000d6fa <sd_mmc_spi_mem_2_ram+0x76>

   if (!sd_mmc_spi_init_done)
     return CTRL_NO_PRESENT;

   if( !sd_mmc_spi_read_open(addr) )
     goto sd_mmc_spi_mem_2_ram_fail;
8000d6ee:	d7 03       	nop
8000d6f0:	c0 48       	rjmp	8000d6f8 <sd_mmc_spi_mem_2_ram+0x74>

   if( !sd_mmc_spi_read_sector_to_ram(ram))
     goto sd_mmc_spi_mem_2_ram_fail;
8000d6f2:	d7 03       	nop
8000d6f4:	c0 28       	rjmp	8000d6f8 <sd_mmc_spi_mem_2_ram+0x74>

   if( !sd_mmc_spi_read_close() )
     goto sd_mmc_spi_mem_2_ram_fail;
8000d6f6:	d7 03       	nop
   Sd_mmc_spi_access_signal_off();
   return CTRL_GOOD;

sd_mmc_spi_mem_2_ram_fail:
   Sd_mmc_spi_access_signal_off();
   return CTRL_FAIL;
8000d6f8:	30 18       	mov	r8,1
}
8000d6fa:	10 9c       	mov	r12,r8
8000d6fc:	2f ed       	sub	sp,-8
8000d6fe:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d702:	00 00       	add	r0,r0
8000d704:	80 00       	ld.sh	r0,r0[0x0]
8000d706:	39 9c       	mov	r12,-103
8000d708:	00 00       	add	r0,r0
8000d70a:	06 24       	rsub	r4,r3
8000d70c:	80 00       	ld.sh	r0,r0[0x0]
8000d70e:	d5 8c       	*unknown*
8000d710:	80 00       	ld.sh	r0,r0[0x0]
8000d712:	3a 74       	mov	r4,-89
8000d714:	80 00       	ld.sh	r0,r0[0x0]
8000d716:	3b 04       	mov	r4,-80
8000d718:	80 00       	ld.sh	r0,r0[0x0]
8000d71a:	3a a4       	mov	r4,-86

8000d71c <sd_mmc_spi_ram_2_mem>:
//! @return                Ctrl_status
//!   It is ready      ->    CTRL_GOOD
//!   An error occurs  ->    CTRL_FAIL
//!
Ctrl_status    sd_mmc_spi_ram_2_mem(uint32_t addr, const void *ram)
{
8000d71c:	eb cd 40 80 	pushm	r7,lr
8000d720:	1a 97       	mov	r7,sp
8000d722:	20 2d       	sub	sp,8
8000d724:	ef 4c ff fc 	st.w	r7[-4],r12
8000d728:	ef 4b ff f8 	st.w	r7[-8],r11
   Sd_mmc_spi_access_signal_on();
   sd_mmc_spi_check_presence();
8000d72c:	f0 1f 00 14 	mcall	8000d77c <sd_mmc_spi_ram_2_mem+0x60>

   if (!sd_mmc_spi_init_done)
8000d730:	49 48       	lddpc	r8,8000d780 <sd_mmc_spi_ram_2_mem+0x64>
8000d732:	11 88       	ld.ub	r8,r8[0x0]
8000d734:	ec 18 00 01 	eorl	r8,0x1
8000d738:	5c 58       	castu.b	r8
8000d73a:	c0 30       	breq	8000d740 <sd_mmc_spi_ram_2_mem+0x24>
   {
      sd_mmc_spi_mem_init();
8000d73c:	f0 1f 00 12 	mcall	8000d784 <sd_mmc_spi_ram_2_mem+0x68>
   }

   if (sd_mmc_spi_init_done)
8000d740:	49 08       	lddpc	r8,8000d780 <sd_mmc_spi_ram_2_mem+0x64>
8000d742:	11 88       	ld.ub	r8,r8[0x0]
8000d744:	58 08       	cp.w	r8,0
8000d746:	c1 60       	breq	8000d772 <sd_mmc_spi_ram_2_mem+0x56>
   {
     sd_mmc_spi_write_open(addr);
8000d748:	ee fc ff fc 	ld.w	r12,r7[-4]
8000d74c:	f0 1f 00 0f 	mcall	8000d788 <sd_mmc_spi_ram_2_mem+0x6c>
     if (!sd_mmc_spi_write_sector_from_ram(ram))
8000d750:	ee fc ff f8 	ld.w	r12,r7[-8]
8000d754:	f0 1f 00 0e 	mcall	8000d78c <sd_mmc_spi_ram_2_mem+0x70>
8000d758:	18 98       	mov	r8,r12
8000d75a:	ec 18 00 01 	eorl	r8,0x1
8000d75e:	5c 58       	castu.b	r8
8000d760:	c0 50       	breq	8000d76a <sd_mmc_spi_ram_2_mem+0x4e>
     {
       sd_mmc_spi_write_close();
8000d762:	f0 1f 00 0c 	mcall	8000d790 <sd_mmc_spi_ram_2_mem+0x74>
       Sd_mmc_spi_access_signal_off();
       return CTRL_NO_PRESENT;
8000d766:	30 28       	mov	r8,2
8000d768:	c0 68       	rjmp	8000d774 <sd_mmc_spi_ram_2_mem+0x58>
     }
     sd_mmc_spi_write_close();
8000d76a:	f0 1f 00 0a 	mcall	8000d790 <sd_mmc_spi_ram_2_mem+0x74>
     Sd_mmc_spi_access_signal_off();
     return CTRL_GOOD;
8000d76e:	30 08       	mov	r8,0
8000d770:	c0 28       	rjmp	8000d774 <sd_mmc_spi_ram_2_mem+0x58>
   }
   Sd_mmc_spi_access_signal_off();

   return CTRL_NO_PRESENT;
8000d772:	30 28       	mov	r8,2
}
8000d774:	10 9c       	mov	r12,r8
8000d776:	2f ed       	sub	sp,-8
8000d778:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d77c:	80 00       	ld.sh	r0,r0[0x0]
8000d77e:	39 9c       	mov	r12,-103
8000d780:	00 00       	add	r0,r0
8000d782:	06 24       	rsub	r4,r3
8000d784:	80 00       	ld.sh	r0,r0[0x0]
8000d786:	d5 8c       	*unknown*
8000d788:	80 00       	ld.sh	r0,r0[0x0]
8000d78a:	3a c8       	mov	r8,-84
8000d78c:	80 00       	ld.sh	r0,r0[0x0]
8000d78e:	3c b8       	mov	r8,-53
8000d790:	80 00       	ld.sh	r0,r0[0x0]
8000d792:	3a f8       	mov	r8,-81

8000d794 <board_init>:
#if defined (CONF_BOARD_AT45DBX)
#  define AT45DBX_MEM_CNT  1
#endif

void board_init(void)
{
8000d794:	eb cd 40 80 	pushm	r7,lr
8000d798:	1a 97       	mov	r7,sp
	gpio_configure_pin(LED0_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
8000d79a:	30 3b       	mov	r11,3
8000d79c:	33 bc       	mov	r12,59
8000d79e:	f0 1f 00 2d 	mcall	8000d850 <board_init+0xbc>
	gpio_configure_pin(LED1_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
8000d7a2:	30 3b       	mov	r11,3
8000d7a4:	33 cc       	mov	r12,60
8000d7a6:	f0 1f 00 2b 	mcall	8000d850 <board_init+0xbc>
	gpio_configure_pin(LED2_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
8000d7aa:	30 3b       	mov	r11,3
8000d7ac:	33 dc       	mov	r12,61
8000d7ae:	f0 1f 00 29 	mcall	8000d850 <board_init+0xbc>
	gpio_configure_pin(LED3_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
8000d7b2:	30 3b       	mov	r11,3
8000d7b4:	33 ec       	mov	r12,62
8000d7b6:	f0 1f 00 27 	mcall	8000d850 <board_init+0xbc>
	gpio_configure_pin(LED4_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
8000d7ba:	30 3b       	mov	r11,3
8000d7bc:	33 3c       	mov	r12,51
8000d7be:	f0 1f 00 25 	mcall	8000d850 <board_init+0xbc>
	gpio_configure_pin(LED5_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
8000d7c2:	30 3b       	mov	r11,3
8000d7c4:	33 4c       	mov	r12,52
8000d7c6:	f0 1f 00 23 	mcall	8000d850 <board_init+0xbc>
	gpio_configure_pin(LED6_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
8000d7ca:	30 3b       	mov	r11,3
8000d7cc:	33 5c       	mov	r12,53
8000d7ce:	f0 1f 00 21 	mcall	8000d850 <board_init+0xbc>
	gpio_configure_pin(LED7_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
8000d7d2:	30 3b       	mov	r11,3
8000d7d4:	33 6c       	mov	r12,54
8000d7d6:	f0 1f 00 1f 	mcall	8000d850 <board_init+0xbc>

	gpio_configure_pin(GPIO_PUSH_BUTTON_0,GPIO_DIR_INPUT);
8000d7da:	30 0b       	mov	r11,0
8000d7dc:	35 8c       	mov	r12,88
8000d7de:	f0 1f 00 1d 	mcall	8000d850 <board_init+0xbc>
	gpio_configure_pin(GPIO_PUSH_BUTTON_1,GPIO_DIR_INPUT);
8000d7e2:	30 0b       	mov	r11,0
8000d7e4:	35 5c       	mov	r12,85
8000d7e6:	f0 1f 00 1b 	mcall	8000d850 <board_init+0xbc>
	gpio_configure_pin(GPIO_PUSH_BUTTON_2,GPIO_DIR_INPUT);
8000d7ea:	30 0b       	mov	r11,0
8000d7ec:	35 2c       	mov	r12,82
8000d7ee:	f0 1f 00 19 	mcall	8000d850 <board_init+0xbc>
	gpio_configure_pin(GPIO_JOYSTICK_PUSH,GPIO_DIR_INPUT);
8000d7f2:	30 0b       	mov	r11,0
8000d7f4:	31 4c       	mov	r12,20
8000d7f6:	f0 1f 00 17 	mcall	8000d850 <board_init+0xbc>
	gpio_configure_pin(GPIO_JOYSTICK_LEFT,GPIO_DIR_INPUT);
8000d7fa:	30 0b       	mov	r11,0
8000d7fc:	31 9c       	mov	r12,25
8000d7fe:	f0 1f 00 15 	mcall	8000d850 <board_init+0xbc>
	gpio_configure_pin(GPIO_JOYSTICK_UP,GPIO_DIR_INPUT);
8000d802:	30 0b       	mov	r11,0
8000d804:	31 ac       	mov	r12,26
8000d806:	f0 1f 00 13 	mcall	8000d850 <board_init+0xbc>
	gpio_configure_pin(GPIO_JOYSTICK_DOWN,GPIO_DIR_INPUT);
8000d80a:	30 0b       	mov	r11,0
8000d80c:	31 bc       	mov	r12,27
8000d80e:	f0 1f 00 11 	mcall	8000d850 <board_init+0xbc>
		MREPEAT(AT45DBX_MEM_CNT, AT45DBX_ENABLE_NPCS_PIN, ~)
#  undef AT45DBX_ENABLE_NPCS_PIN
	};

	// Assign I/Os to SPI.
	gpio_enable_module(AT45DBX_SPI_GPIO_MAP,
8000d812:	30 4b       	mov	r11,4
8000d814:	49 0c       	lddpc	r12,8000d854 <board_init+0xc0>
8000d816:	f0 1f 00 11 	mcall	8000d858 <board_init+0xc4>
		{SD_MMC_SPI_MOSI_PIN, SD_MMC_SPI_MOSI_FUNCTION},
		{SD_MMC_SPI_NPCS_PIN, SD_MMC_SPI_NPCS_FUNCTION},
	};

	// Assign I/Os to SPI.
	gpio_enable_module(SD_MMC_SPI_GPIO_MAP,
8000d81a:	30 4b       	mov	r11,4
8000d81c:	49 0c       	lddpc	r12,8000d85c <board_init+0xc8>
8000d81e:	f0 1f 00 0f 	mcall	8000d858 <board_init+0xc4>

	// Configure SD/MMC card detect and write protect pins
#  define SD_MMC_CONFIGURE_CD_WP_PIN(slot, unused) \
	gpio_configure_pin(SD_MMC_##slot##_CD_GPIO,GPIO_DIR_INPUT); \
	gpio_configure_pin(SD_MMC_##slot##_WP_GPIO,GPIO_DIR_INPUT);
	MREPEAT(SD_MMC_SPI_MEM_CNT, SD_MMC_CONFIGURE_CD_WP_PIN, ~)
8000d822:	30 0b       	mov	r11,0
8000d824:	30 2c       	mov	r12,2
8000d826:	f0 1f 00 0b 	mcall	8000d850 <board_init+0xbc>
8000d82a:	30 0b       	mov	r11,0
8000d82c:	30 7c       	mov	r12,7
8000d82e:	f0 1f 00 09 	mcall	8000d850 <board_init+0xbc>
		{AVR32_TWI_SDA_0_0_PIN, AVR32_TWI_SDA_0_0_FUNCTION},
		{AVR32_TWI_SCL_0_0_PIN, AVR32_TWI_SCL_0_0_FUNCTION},
	};

	// TWI gpio pins configuration
	gpio_enable_module(TWI_GPIO_MAP,
8000d832:	30 2b       	mov	r11,2
8000d834:	48 bc       	lddpc	r12,8000d860 <board_init+0xcc>
8000d836:	f0 1f 00 09 	mcall	8000d858 <board_init+0xc4>
	// USART GPIO pin configuration.
	static const gpio_map_t COMPORT_GPIO_MAP = {
		{USART_RXD_PIN, USART_RXD_FUNCTION },
		{USART_TXD_PIN, USART_TXD_FUNCTION },
	};
	gpio_enable_module(COMPORT_GPIO_MAP,
8000d83a:	30 2b       	mov	r11,2
8000d83c:	48 ac       	lddpc	r12,8000d864 <board_init+0xd0>
8000d83e:	f0 1f 00 07 	mcall	8000d858 <board_init+0xc4>
	// USART GPIO pin configuration.
	static const gpio_map_t COMPORT0_GPIO_MAP = {
		{USART0_RXD_PIN, USART0_RXD_FUNCTION },
		{USART0_TXD_PIN, USART0_TXD_FUNCTION },
	};
	gpio_enable_module(COMPORT0_GPIO_MAP,
8000d842:	30 2b       	mov	r11,2
8000d844:	48 9c       	lddpc	r12,8000d868 <board_init+0xd4>
8000d846:	f0 1f 00 05 	mcall	8000d858 <board_init+0xc4>
			sizeof(COMPORT0_GPIO_MAP) / sizeof(COMPORT0_GPIO_MAP[0]));
#endif
}
8000d84a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d84e:	00 00       	add	r0,r0
8000d850:	80 00       	ld.sh	r0,r0[0x0]
8000d852:	db 58       	*unknown*
8000d854:	80 01       	ld.sh	r1,r0[0x0]
8000d856:	4c 38       	lddpc	r8,8000d960 <LED_On+0x3c>
8000d858:	80 00       	ld.sh	r0,r0[0x0]
8000d85a:	d9 d8       	*unknown*
8000d85c:	80 01       	ld.sh	r1,r0[0x0]
8000d85e:	4c 58       	lddpc	r8,8000d970 <LED_On+0x4c>
8000d860:	80 01       	ld.sh	r1,r0[0x0]
8000d862:	4c 78       	lddpc	r8,8000d97c <LED_On+0x58>
8000d864:	80 01       	ld.sh	r1,r0[0x0]
8000d866:	4c 88       	lddpc	r8,8000d984 <LED_On+0x60>
8000d868:	80 01       	ld.sh	r1,r0[0x0]
8000d86a:	4c 98       	lddpc	r8,8000d98c <LED_On+0x68>

8000d86c <LED_Off>:
  return Tst_bits(LED_State, leds);
}


void LED_Off(U32 leds)
{
8000d86c:	eb cd 40 80 	pushm	r7,lr
8000d870:	1a 97       	mov	r7,sp
8000d872:	20 4d       	sub	sp,16
8000d874:	ef 4c ff f0 	st.w	r7[-16],r12
  // Use the LED descriptors to get the connections of a given LED to the MCU.
  tLED_DESCRIPTOR *led_descriptor = &LED_DESCRIPTOR[0] - 1;
8000d878:	4a 98       	lddpc	r8,8000d91c <LED_Off+0xb0>
8000d87a:	21 08       	sub	r8,16
8000d87c:	ef 48 ff f4 	st.w	r7[-12],r8
  volatile avr32_gpio_port_t *led_gpio_port;
  U8 led_shift;

  // Make sure only existing LEDs are specified.
  leds &= (1 << LED_COUNT) - 1;
8000d880:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000d884:	f1 d8 c0 08 	bfextu	r8,r8,0x0,0x8
8000d888:	ef 48 ff f0 	st.w	r7[-16],r8

  // Update the saved state of all LEDs with the requested changes.
  Clr_bits(LED_State, leds);
8000d88c:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000d890:	f0 09 11 ff 	rsub	r9,r8,-1
8000d894:	4a 38       	lddpc	r8,8000d920 <LED_Off+0xb4>
8000d896:	70 08       	ld.w	r8,r8[0x0]
8000d898:	10 69       	and	r9,r8
8000d89a:	4a 28       	lddpc	r8,8000d920 <LED_Off+0xb4>
8000d89c:	91 09       	st.w	r8[0x0],r9

  // While there are specified LEDs left to manage...
  while (leds)
8000d89e:	c3 78       	rjmp	8000d90c <LED_Off+0xa0>
  {
    // Select the next specified LED and turn it off.
    led_shift = 1 + ctz(leds);
8000d8a0:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000d8a4:	5c 98       	brev	r8
8000d8a6:	f0 08 12 00 	clz	r8,r8
8000d8aa:	5c 58       	castu.b	r8
8000d8ac:	2f f8       	sub	r8,-1
8000d8ae:	ef 68 ff ff 	st.b	r7[-1],r8
    led_descriptor += led_shift;
8000d8b2:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000d8b6:	a5 68       	lsl	r8,0x4
8000d8b8:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000d8bc:	f2 08 00 08 	add	r8,r9,r8
8000d8c0:	ef 48 ff f4 	st.w	r7[-12],r8
    led_gpio_port = &AVR32_GPIO.port[led_descriptor->GPIO.PORT];
8000d8c4:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000d8c8:	70 08       	ld.w	r8,r8[0x0]
8000d8ca:	a9 68       	lsl	r8,0x8
8000d8cc:	e0 28 f0 00 	sub	r8,61440
8000d8d0:	ef 48 ff f8 	st.w	r7[-8],r8
    led_gpio_port->ovrs  = led_descriptor->GPIO.PIN_MASK;
8000d8d4:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000d8d8:	70 19       	ld.w	r9,r8[0x4]
8000d8da:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000d8de:	f1 49 00 54 	st.w	r8[84],r9
    led_gpio_port->oders = led_descriptor->GPIO.PIN_MASK;
8000d8e2:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000d8e6:	70 19       	ld.w	r9,r8[0x4]
8000d8e8:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000d8ec:	f1 49 00 44 	st.w	r8[68],r9
    led_gpio_port->gpers = led_descriptor->GPIO.PIN_MASK;
8000d8f0:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000d8f4:	70 19       	ld.w	r9,r8[0x4]
8000d8f6:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000d8fa:	91 19       	st.w	r8[0x4],r9
    leds >>= led_shift;
8000d8fc:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000d900:	ee f9 ff f0 	ld.w	r9,r7[-16]
8000d904:	f2 08 0a 48 	lsr	r8,r9,r8
8000d908:	ef 48 ff f0 	st.w	r7[-16],r8

  // Update the saved state of all LEDs with the requested changes.
  Clr_bits(LED_State, leds);

  // While there are specified LEDs left to manage...
  while (leds)
8000d90c:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000d910:	58 08       	cp.w	r8,0
8000d912:	cc 71       	brne	8000d8a0 <LED_Off+0x34>
    led_gpio_port->ovrs  = led_descriptor->GPIO.PIN_MASK;
    led_gpio_port->oders = led_descriptor->GPIO.PIN_MASK;
    led_gpio_port->gpers = led_descriptor->GPIO.PIN_MASK;
    leds >>= led_shift;
  }
}
8000d914:	2f cd       	sub	sp,-16
8000d916:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d91a:	00 00       	add	r0,r0
8000d91c:	80 01       	ld.sh	r1,r0[0x0]
8000d91e:	4c a8       	lddpc	r8,8000da44 <gpio_enable_module+0x6c>
8000d920:	00 00       	add	r0,r0
8000d922:	00 b4       	st.h	r0++,r4

8000d924 <LED_On>:


void LED_On(U32 leds)
{
8000d924:	eb cd 40 80 	pushm	r7,lr
8000d928:	1a 97       	mov	r7,sp
8000d92a:	20 4d       	sub	sp,16
8000d92c:	ef 4c ff f0 	st.w	r7[-16],r12
  // Use the LED descriptors to get the connections of a given LED to the MCU.
  tLED_DESCRIPTOR *led_descriptor = &LED_DESCRIPTOR[0] - 1;
8000d930:	4a 88       	lddpc	r8,8000d9d0 <LED_On+0xac>
8000d932:	21 08       	sub	r8,16
8000d934:	ef 48 ff f4 	st.w	r7[-12],r8
  volatile avr32_gpio_port_t *led_gpio_port;
  U8 led_shift;

  // Make sure only existing LEDs are specified.
  leds &= (1 << LED_COUNT) - 1;
8000d938:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000d93c:	f1 d8 c0 08 	bfextu	r8,r8,0x0,0x8
8000d940:	ef 48 ff f0 	st.w	r7[-16],r8

  // Update the saved state of all LEDs with the requested changes.
  Set_bits(LED_State, leds);
8000d944:	4a 48       	lddpc	r8,8000d9d4 <LED_On+0xb0>
8000d946:	70 09       	ld.w	r9,r8[0x0]
8000d948:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000d94c:	10 49       	or	r9,r8
8000d94e:	4a 28       	lddpc	r8,8000d9d4 <LED_On+0xb0>
8000d950:	91 09       	st.w	r8[0x0],r9

  // While there are specified LEDs left to manage...
  while (leds)
8000d952:	c3 78       	rjmp	8000d9c0 <LED_On+0x9c>
  {
    // Select the next specified LED and turn it on.
    led_shift = 1 + ctz(leds);
8000d954:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000d958:	5c 98       	brev	r8
8000d95a:	f0 08 12 00 	clz	r8,r8
8000d95e:	5c 58       	castu.b	r8
8000d960:	2f f8       	sub	r8,-1
8000d962:	ef 68 ff ff 	st.b	r7[-1],r8
    led_descriptor += led_shift;
8000d966:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000d96a:	a5 68       	lsl	r8,0x4
8000d96c:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000d970:	f2 08 00 08 	add	r8,r9,r8
8000d974:	ef 48 ff f4 	st.w	r7[-12],r8
    led_gpio_port = &AVR32_GPIO.port[led_descriptor->GPIO.PORT];
8000d978:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000d97c:	70 08       	ld.w	r8,r8[0x0]
8000d97e:	a9 68       	lsl	r8,0x8
8000d980:	e0 28 f0 00 	sub	r8,61440
8000d984:	ef 48 ff f8 	st.w	r7[-8],r8
    led_gpio_port->ovrc  = led_descriptor->GPIO.PIN_MASK;
8000d988:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000d98c:	70 19       	ld.w	r9,r8[0x4]
8000d98e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000d992:	f1 49 00 58 	st.w	r8[88],r9
    led_gpio_port->oders = led_descriptor->GPIO.PIN_MASK;
8000d996:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000d99a:	70 19       	ld.w	r9,r8[0x4]
8000d99c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000d9a0:	f1 49 00 44 	st.w	r8[68],r9
    led_gpio_port->gpers = led_descriptor->GPIO.PIN_MASK;
8000d9a4:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000d9a8:	70 19       	ld.w	r9,r8[0x4]
8000d9aa:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000d9ae:	91 19       	st.w	r8[0x4],r9
    leds >>= led_shift;
8000d9b0:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000d9b4:	ee f9 ff f0 	ld.w	r9,r7[-16]
8000d9b8:	f2 08 0a 48 	lsr	r8,r9,r8
8000d9bc:	ef 48 ff f0 	st.w	r7[-16],r8

  // Update the saved state of all LEDs with the requested changes.
  Set_bits(LED_State, leds);

  // While there are specified LEDs left to manage...
  while (leds)
8000d9c0:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000d9c4:	58 08       	cp.w	r8,0
8000d9c6:	cc 71       	brne	8000d954 <LED_On+0x30>
    led_gpio_port->ovrc  = led_descriptor->GPIO.PIN_MASK;
    led_gpio_port->oders = led_descriptor->GPIO.PIN_MASK;
    led_gpio_port->gpers = led_descriptor->GPIO.PIN_MASK;
    leds >>= led_shift;
  }
}
8000d9c8:	2f cd       	sub	sp,-16
8000d9ca:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d9ce:	00 00       	add	r0,r0
8000d9d0:	80 01       	ld.sh	r1,r0[0x0]
8000d9d2:	4c a8       	lddpc	r8,8000daf8 <gpio_enable_module_pin+0xb0>
8000d9d4:	00 00       	add	r0,r0
8000d9d6:	00 b4       	st.h	r0++,r4

8000d9d8 <gpio_enable_module>:
 * \param size The number of pins in \a gpiomap.
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
8000d9d8:	eb cd 40 80 	pushm	r7,lr
8000d9dc:	1a 97       	mov	r7,sp
8000d9de:	20 4d       	sub	sp,16
8000d9e0:	ef 4c ff f4 	st.w	r7[-12],r12
8000d9e4:	ef 4b ff f0 	st.w	r7[-16],r11
	uint32_t status = GPIO_SUCCESS;
8000d9e8:	30 08       	mov	r8,0
8000d9ea:	ef 48 ff f8 	st.w	r7[-8],r8
	uint32_t i;

	for (i = 0; i < size; i++) {
8000d9ee:	30 08       	mov	r8,0
8000d9f0:	ef 48 ff fc 	st.w	r7[-4],r8
8000d9f4:	c1 c8       	rjmp	8000da2c <gpio_enable_module+0x54>
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
8000d9f6:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000d9fa:	70 19       	ld.w	r9,r8[0x4]
8000d9fc:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000da00:	70 08       	ld.w	r8,r8[0x0]
8000da02:	12 9b       	mov	r11,r9
8000da04:	10 9c       	mov	r12,r8
8000da06:	f0 1f 00 10 	mcall	8000da44 <gpio_enable_module+0x6c>
8000da0a:	18 98       	mov	r8,r12
8000da0c:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000da10:	f3 e8 10 08 	or	r8,r9,r8
8000da14:	ef 48 ff f8 	st.w	r7[-8],r8
		gpiomap++;
8000da18:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000da1c:	2f 88       	sub	r8,-8
8000da1e:	ef 48 ff f4 	st.w	r7[-12],r8
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
8000da22:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000da26:	2f f8       	sub	r8,-1
8000da28:	ef 48 ff fc 	st.w	r7[-4],r8
8000da2c:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000da30:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000da34:	10 39       	cp.w	r9,r8
8000da36:	ce 03       	brcs	8000d9f6 <gpio_enable_module+0x1e>
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
		gpiomap++;
	}

	return status;
8000da38:	ee f8 ff f8 	ld.w	r8,r7[-8]
}
8000da3c:	10 9c       	mov	r12,r8
8000da3e:	2f cd       	sub	sp,-16
8000da40:	e3 cd 80 80 	ldm	sp++,r7,pc
8000da44:	80 00       	ld.sh	r0,r0[0x0]
8000da46:	da 48       	*unknown*

8000da48 <gpio_enable_module_pin>:
 * \param function The pin function.
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module_pin(uint32_t pin, uint32_t function)
{
8000da48:	eb cd 40 80 	pushm	r7,lr
8000da4c:	1a 97       	mov	r7,sp
8000da4e:	20 3d       	sub	sp,12
8000da50:	ef 4c ff f8 	st.w	r7[-8],r12
8000da54:	ef 4b ff f4 	st.w	r7[-12],r11
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
8000da58:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000da5c:	a5 98       	lsr	r8,0x5
8000da5e:	a9 68       	lsl	r8,0x8
8000da60:	e0 28 f0 00 	sub	r8,61440
8000da64:	ef 48 ff fc 	st.w	r7[-4],r8

	/* Enable the correct function. */
	switch (function) {
8000da68:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000da6c:	58 18       	cp.w	r8,1
8000da6e:	c1 e0       	breq	8000daaa <gpio_enable_module_pin+0x62>
8000da70:	c0 63       	brcs	8000da7c <gpio_enable_module_pin+0x34>
8000da72:	58 28       	cp.w	r8,2
8000da74:	c3 20       	breq	8000dad8 <gpio_enable_module_pin+0x90>
8000da76:	58 38       	cp.w	r8,3
8000da78:	c4 70       	breq	8000db06 <gpio_enable_module_pin+0xbe>
8000da7a:	c5 d8       	rjmp	8000db34 <gpio_enable_module_pin+0xec>
	case 0: /* A function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
8000da7c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000da80:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000da84:	30 19       	mov	r9,1
8000da86:	f2 08 09 48 	lsl	r8,r9,r8
8000da8a:	10 99       	mov	r9,r8
8000da8c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000da90:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
8000da92:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000da96:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000da9a:	30 19       	mov	r9,1
8000da9c:	f2 08 09 48 	lsl	r8,r9,r8
8000daa0:	10 99       	mov	r9,r8
8000daa2:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000daa6:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
		break;
8000daa8:	c4 88       	rjmp	8000db38 <gpio_enable_module_pin+0xf0>

	case 1: /* B function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
8000daaa:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000daae:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000dab2:	30 19       	mov	r9,1
8000dab4:	f2 08 09 48 	lsl	r8,r9,r8
8000dab8:	10 99       	mov	r9,r8
8000daba:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000dabe:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
8000dac0:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000dac4:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000dac8:	30 19       	mov	r9,1
8000daca:	f2 08 09 48 	lsl	r8,r9,r8
8000dace:	10 99       	mov	r9,r8
8000dad0:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000dad4:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
		break;
8000dad6:	c3 18       	rjmp	8000db38 <gpio_enable_module_pin+0xf0>

	case 2: /* C function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
8000dad8:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000dadc:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000dae0:	30 19       	mov	r9,1
8000dae2:	f2 08 09 48 	lsl	r8,r9,r8
8000dae6:	10 99       	mov	r9,r8
8000dae8:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000daec:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
8000daee:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000daf2:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000daf6:	30 19       	mov	r9,1
8000daf8:	f2 08 09 48 	lsl	r8,r9,r8
8000dafc:	10 99       	mov	r9,r8
8000dafe:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000db02:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
		break;
8000db04:	c1 a8       	rjmp	8000db38 <gpio_enable_module_pin+0xf0>

	case 3: /* D function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
8000db06:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000db0a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000db0e:	30 19       	mov	r9,1
8000db10:	f2 08 09 48 	lsl	r8,r9,r8
8000db14:	10 99       	mov	r9,r8
8000db16:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000db1a:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
8000db1c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000db20:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000db24:	30 19       	mov	r9,1
8000db26:	f2 08 09 48 	lsl	r8,r9,r8
8000db2a:	10 99       	mov	r9,r8
8000db2c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000db30:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
		break;
8000db32:	c0 38       	rjmp	8000db38 <gpio_enable_module_pin+0xf0>
		gpio_port->pmr2s = 1 << (pin & 0x1F);
		break;
#endif

	default:
		return GPIO_INVALID_ARGUMENT;
8000db34:	30 18       	mov	r8,1
8000db36:	c0 d8       	rjmp	8000db50 <gpio_enable_module_pin+0x108>
	}

	/* Disable GPIO control. */
	gpio_port->gperc = 1 << (pin & 0x1F);
8000db38:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000db3c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000db40:	30 19       	mov	r9,1
8000db42:	f2 08 09 48 	lsl	r8,r9,r8
8000db46:	10 99       	mov	r9,r8
8000db48:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000db4c:	91 29       	st.w	r8[0x8],r9

	return GPIO_SUCCESS;
8000db4e:	30 08       	mov	r8,0
}
8000db50:	10 9c       	mov	r12,r8
8000db52:	2f dd       	sub	sp,-12
8000db54:	e3 cd 80 80 	ldm	sp++,r7,pc

8000db58 <gpio_configure_pin>:
 *
 * \param pin The pin number.
 * \param flags The configuration.
 */
void gpio_configure_pin(uint32_t pin, uint32_t flags)
{
8000db58:	eb cd 40 80 	pushm	r7,lr
8000db5c:	1a 97       	mov	r7,sp
8000db5e:	20 3d       	sub	sp,12
8000db60:	ef 4c ff f8 	st.w	r7[-8],r12
8000db64:	ef 4b ff f4 	st.w	r7[-12],r11
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
8000db68:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000db6c:	a5 98       	lsr	r8,0x5
8000db6e:	a9 68       	lsl	r8,0x8
8000db70:	e0 28 f0 00 	sub	r8,61440
8000db74:	ef 48 ff fc 	st.w	r7[-4],r8
	} else {
		gpio_port->pderc = 1 << (pin & 0x1F);
	}

#endif
	if (flags & GPIO_PULL_UP) {
8000db78:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000db7c:	e2 18 00 04 	andl	r8,0x4,COH
8000db80:	c0 e0       	breq	8000db9c <gpio_configure_pin+0x44>
		gpio_port->puers = 1 << (pin & 0x1F);
8000db82:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000db86:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000db8a:	30 19       	mov	r9,1
8000db8c:	f2 08 09 48 	lsl	r8,r9,r8
8000db90:	10 99       	mov	r9,r8
8000db92:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000db96:	f1 49 00 74 	st.w	r8[116],r9
8000db9a:	c0 d8       	rjmp	8000dbb4 <gpio_configure_pin+0x5c>
	} else {
		gpio_port->puerc = 1 << (pin & 0x1F);
8000db9c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000dba0:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000dba4:	30 19       	mov	r9,1
8000dba6:	f2 08 09 48 	lsl	r8,r9,r8
8000dbaa:	10 99       	mov	r9,r8
8000dbac:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000dbb0:	f1 49 00 78 	st.w	r8[120],r9
	}

#endif

	/* Select interrupt level for group */
	if (flags & GPIO_INTERRUPT) {
8000dbb4:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000dbb8:	e2 18 00 80 	andl	r8,0x80,COH
8000dbbc:	c5 a0       	breq	8000dc70 <gpio_configure_pin+0x118>
		if (flags & GPIO_BOTHEDGES) {
8000dbbe:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000dbc2:	e2 18 01 80 	andl	r8,0x180,COH
8000dbc6:	c1 a0       	breq	8000dbfa <gpio_configure_pin+0xa2>
			gpio_port->imr0c = 1 << (pin & 0x1F);
8000dbc8:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000dbcc:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000dbd0:	30 19       	mov	r9,1
8000dbd2:	f2 08 09 48 	lsl	r8,r9,r8
8000dbd6:	10 99       	mov	r9,r8
8000dbd8:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000dbdc:	f1 49 00 a8 	st.w	r8[168],r9
			gpio_port->imr1c = 1 << (pin & 0x1F);
8000dbe0:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000dbe4:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000dbe8:	30 19       	mov	r9,1
8000dbea:	f2 08 09 48 	lsl	r8,r9,r8
8000dbee:	10 99       	mov	r9,r8
8000dbf0:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000dbf4:	f1 49 00 b8 	st.w	r8[184],r9
8000dbf8:	c3 c8       	rjmp	8000dc70 <gpio_configure_pin+0x118>
		} else if (flags & GPIO_RISING) {
8000dbfa:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000dbfe:	e2 18 02 80 	andl	r8,0x280,COH
8000dc02:	c1 a0       	breq	8000dc36 <gpio_configure_pin+0xde>
			gpio_port->imr0s = 1 << (pin & 0x1F);
8000dc04:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000dc08:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000dc0c:	30 19       	mov	r9,1
8000dc0e:	f2 08 09 48 	lsl	r8,r9,r8
8000dc12:	10 99       	mov	r9,r8
8000dc14:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000dc18:	f1 49 00 a4 	st.w	r8[164],r9
			gpio_port->imr1c = 1 << (pin & 0x1F);
8000dc1c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000dc20:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000dc24:	30 19       	mov	r9,1
8000dc26:	f2 08 09 48 	lsl	r8,r9,r8
8000dc2a:	10 99       	mov	r9,r8
8000dc2c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000dc30:	f1 49 00 b8 	st.w	r8[184],r9
8000dc34:	c1 e8       	rjmp	8000dc70 <gpio_configure_pin+0x118>
		} else if (flags & GPIO_FALLING) {
8000dc36:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000dc3a:	e2 18 03 80 	andl	r8,0x380,COH
8000dc3e:	c1 90       	breq	8000dc70 <gpio_configure_pin+0x118>
			gpio_port->imr0c = 1 << (pin & 0x1F);
8000dc40:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000dc44:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000dc48:	30 19       	mov	r9,1
8000dc4a:	f2 08 09 48 	lsl	r8,r9,r8
8000dc4e:	10 99       	mov	r9,r8
8000dc50:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000dc54:	f1 49 00 a8 	st.w	r8[168],r9
			gpio_port->imr1s = 1 << (pin & 0x1F);
8000dc58:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000dc5c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000dc60:	30 19       	mov	r9,1
8000dc62:	f2 08 09 48 	lsl	r8,r9,r8
8000dc66:	10 99       	mov	r9,r8
8000dc68:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000dc6c:	f1 49 00 b4 	st.w	r8[180],r9
		}
	}

	/* Select direction and initial pin state */
	if (flags & GPIO_DIR_OUTPUT) {
8000dc70:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000dc74:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000dc78:	5c 58       	castu.b	r8
8000dc7a:	c2 c0       	breq	8000dcd2 <gpio_configure_pin+0x17a>
		if (flags & GPIO_INIT_HIGH) {
8000dc7c:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000dc80:	e2 18 00 02 	andl	r8,0x2,COH
8000dc84:	c0 e0       	breq	8000dca0 <gpio_configure_pin+0x148>
			gpio_port->ovrs = 1 << (pin & 0x1F);
8000dc86:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000dc8a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000dc8e:	30 19       	mov	r9,1
8000dc90:	f2 08 09 48 	lsl	r8,r9,r8
8000dc94:	10 99       	mov	r9,r8
8000dc96:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000dc9a:	f1 49 00 54 	st.w	r8[84],r9
8000dc9e:	c0 d8       	rjmp	8000dcb8 <gpio_configure_pin+0x160>
		} else {
			gpio_port->ovrc = 1 << (pin & 0x1F);
8000dca0:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000dca4:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000dca8:	30 19       	mov	r9,1
8000dcaa:	f2 08 09 48 	lsl	r8,r9,r8
8000dcae:	10 99       	mov	r9,r8
8000dcb0:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000dcb4:	f1 49 00 58 	st.w	r8[88],r9
		}

		gpio_port->oders = 1 << (pin & 0x1F);
8000dcb8:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000dcbc:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000dcc0:	30 19       	mov	r9,1
8000dcc2:	f2 08 09 48 	lsl	r8,r9,r8
8000dcc6:	10 99       	mov	r9,r8
8000dcc8:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000dccc:	f1 49 00 44 	st.w	r8[68],r9
8000dcd0:	c0 d8       	rjmp	8000dcea <gpio_configure_pin+0x192>
	} else {
		gpio_port->oderc = 1 << (pin & 0x1F);
8000dcd2:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000dcd6:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000dcda:	30 19       	mov	r9,1
8000dcdc:	f2 08 09 48 	lsl	r8,r9,r8
8000dce0:	10 99       	mov	r9,r8
8000dce2:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000dce6:	f1 49 00 48 	st.w	r8[72],r9
	}

	/* Enable GPIO */
	gpio_port->gpers = 1 << (pin & 0x1F);
8000dcea:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000dcee:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000dcf2:	30 19       	mov	r9,1
8000dcf4:	f2 08 09 48 	lsl	r8,r9,r8
8000dcf8:	10 99       	mov	r9,r8
8000dcfa:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000dcfe:	91 19       	st.w	r8[0x4],r9
}
8000dd00:	2f dd       	sub	sp,-12
8000dd02:	e3 cd 80 80 	ldm	sp++,r7,pc

8000dd06 <gpio_set_gpio_pin>:
/** \brief Drives a GPIO pin to 1.
 *
 * \param pin The pin number.
 */
void gpio_set_gpio_pin(uint32_t pin)
{
8000dd06:	eb cd 40 80 	pushm	r7,lr
8000dd0a:	1a 97       	mov	r7,sp
8000dd0c:	20 2d       	sub	sp,8
8000dd0e:	ef 4c ff f8 	st.w	r7[-8],r12
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
8000dd12:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000dd16:	a5 98       	lsr	r8,0x5
8000dd18:	a9 68       	lsl	r8,0x8
8000dd1a:	e0 28 f0 00 	sub	r8,61440
8000dd1e:	ef 48 ff fc 	st.w	r7[-4],r8
	
	/* Value to be driven on the I/O line: 1. */
	gpio_port->ovrs  = 1 << (pin & 0x1F);
8000dd22:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000dd26:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000dd2a:	30 19       	mov	r9,1
8000dd2c:	f2 08 09 48 	lsl	r8,r9,r8
8000dd30:	10 99       	mov	r9,r8
8000dd32:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000dd36:	f1 49 00 54 	st.w	r8[84],r9
	/* The GPIO output driver is enabled for that pin. */ 
	gpio_port->oders = 1 << (pin & 0x1F);
8000dd3a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000dd3e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000dd42:	30 19       	mov	r9,1
8000dd44:	f2 08 09 48 	lsl	r8,r9,r8
8000dd48:	10 99       	mov	r9,r8
8000dd4a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000dd4e:	f1 49 00 44 	st.w	r8[68],r9
	/* The GPIO module controls that pin. */
	gpio_port->gpers = 1 << (pin & 0x1F);
8000dd52:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000dd56:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000dd5a:	30 19       	mov	r9,1
8000dd5c:	f2 08 09 48 	lsl	r8,r9,r8
8000dd60:	10 99       	mov	r9,r8
8000dd62:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000dd66:	91 19       	st.w	r8[0x4],r9
}
8000dd68:	2f ed       	sub	sp,-8
8000dd6a:	e3 cd 80 80 	ldm	sp++,r7,pc

8000dd6e <gpio_clr_gpio_pin>:
/** \brief Drives a GPIO pin to 0.
 *
 * \param pin The pin number.
 */
void gpio_clr_gpio_pin(uint32_t pin)
{
8000dd6e:	eb cd 40 80 	pushm	r7,lr
8000dd72:	1a 97       	mov	r7,sp
8000dd74:	20 2d       	sub	sp,8
8000dd76:	ef 4c ff f8 	st.w	r7[-8],r12
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
8000dd7a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000dd7e:	a5 98       	lsr	r8,0x5
8000dd80:	a9 68       	lsl	r8,0x8
8000dd82:	e0 28 f0 00 	sub	r8,61440
8000dd86:	ef 48 ff fc 	st.w	r7[-4],r8
	
	/* Value to be driven on the I/O line: 0. */
	gpio_port->ovrc  = 1 << (pin & 0x1F);
8000dd8a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000dd8e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000dd92:	30 19       	mov	r9,1
8000dd94:	f2 08 09 48 	lsl	r8,r9,r8
8000dd98:	10 99       	mov	r9,r8
8000dd9a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000dd9e:	f1 49 00 58 	st.w	r8[88],r9
	/* The GPIO output driver is enabled for that pin. */
	gpio_port->oders = 1 << (pin & 0x1F);
8000dda2:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000dda6:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000ddaa:	30 19       	mov	r9,1
8000ddac:	f2 08 09 48 	lsl	r8,r9,r8
8000ddb0:	10 99       	mov	r9,r8
8000ddb2:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000ddb6:	f1 49 00 44 	st.w	r8[68],r9
	/* The GPIO module controls that pin. */
	gpio_port->gpers = 1 << (pin & 0x1F);
8000ddba:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000ddbe:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000ddc2:	30 19       	mov	r9,1
8000ddc4:	f2 08 09 48 	lsl	r8,r9,r8
8000ddc8:	10 99       	mov	r9,r8
8000ddca:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000ddce:	91 19       	st.w	r8[0x4],r9
}
8000ddd0:	2f ed       	sub	sp,-8
8000ddd2:	e3 cd 80 80 	ldm	sp++,r7,pc

8000ddd6 <gpio_configure_edge_detector>:
 *             \ref GPIO_RISING_EDGE or \ref GPIO_FALLING_EDGE).
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
static uint32_t gpio_configure_edge_detector(uint32_t pin, uint32_t mode)
{
8000ddd6:	eb cd 40 80 	pushm	r7,lr
8000ddda:	1a 97       	mov	r7,sp
8000dddc:	20 3d       	sub	sp,12
8000ddde:	ef 4c ff f8 	st.w	r7[-8],r12
8000dde2:	ef 4b ff f4 	st.w	r7[-12],r11
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
8000dde6:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000ddea:	a5 98       	lsr	r8,0x5
8000ddec:	a9 68       	lsl	r8,0x8
8000ddee:	e0 28 f0 00 	sub	r8,61440
8000ddf2:	ef 48 ff fc 	st.w	r7[-4],r8

	/* Configure the edge detector. */
	switch (mode) {
8000ddf6:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000ddfa:	58 18       	cp.w	r8,1
8000ddfc:	c1 e0       	breq	8000de38 <gpio_configure_edge_detector+0x62>
8000ddfe:	c0 43       	brcs	8000de06 <gpio_configure_edge_detector+0x30>
8000de00:	58 28       	cp.w	r8,2
8000de02:	c3 40       	breq	8000de6a <gpio_configure_edge_detector+0x94>
8000de04:	c4 c8       	rjmp	8000de9c <gpio_configure_edge_detector+0xc6>
	case GPIO_PIN_CHANGE:
		gpio_port->imr0c = 1 << (pin & 0x1F);
8000de06:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000de0a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000de0e:	30 19       	mov	r9,1
8000de10:	f2 08 09 48 	lsl	r8,r9,r8
8000de14:	10 99       	mov	r9,r8
8000de16:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000de1a:	f1 49 00 a8 	st.w	r8[168],r9
		gpio_port->imr1c = 1 << (pin & 0x1F);
8000de1e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000de22:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000de26:	30 19       	mov	r9,1
8000de28:	f2 08 09 48 	lsl	r8,r9,r8
8000de2c:	10 99       	mov	r9,r8
8000de2e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000de32:	f1 49 00 b8 	st.w	r8[184],r9
		break;
8000de36:	c3 58       	rjmp	8000dea0 <gpio_configure_edge_detector+0xca>

	case GPIO_RISING_EDGE:
		gpio_port->imr0s = 1 << (pin & 0x1F);
8000de38:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000de3c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000de40:	30 19       	mov	r9,1
8000de42:	f2 08 09 48 	lsl	r8,r9,r8
8000de46:	10 99       	mov	r9,r8
8000de48:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000de4c:	f1 49 00 a4 	st.w	r8[164],r9
		gpio_port->imr1c = 1 << (pin & 0x1F);
8000de50:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000de54:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000de58:	30 19       	mov	r9,1
8000de5a:	f2 08 09 48 	lsl	r8,r9,r8
8000de5e:	10 99       	mov	r9,r8
8000de60:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000de64:	f1 49 00 b8 	st.w	r8[184],r9
		break;
8000de68:	c1 c8       	rjmp	8000dea0 <gpio_configure_edge_detector+0xca>

	case GPIO_FALLING_EDGE:
		gpio_port->imr0c = 1 << (pin & 0x1F);
8000de6a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000de6e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000de72:	30 19       	mov	r9,1
8000de74:	f2 08 09 48 	lsl	r8,r9,r8
8000de78:	10 99       	mov	r9,r8
8000de7a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000de7e:	f1 49 00 a8 	st.w	r8[168],r9
		gpio_port->imr1s = 1 << (pin & 0x1F);
8000de82:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000de86:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000de8a:	30 19       	mov	r9,1
8000de8c:	f2 08 09 48 	lsl	r8,r9,r8
8000de90:	10 99       	mov	r9,r8
8000de92:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000de96:	f1 49 00 b4 	st.w	r8[180],r9
		break;
8000de9a:	c0 38       	rjmp	8000dea0 <gpio_configure_edge_detector+0xca>

	default:
		return GPIO_INVALID_ARGUMENT;
8000de9c:	30 18       	mov	r8,1
8000de9e:	c0 28       	rjmp	8000dea2 <gpio_configure_edge_detector+0xcc>
	}

	return GPIO_SUCCESS;
8000dea0:	30 08       	mov	r8,0
}
8000dea2:	10 9c       	mov	r12,r8
8000dea4:	2f dd       	sub	sp,-12
8000dea6:	e3 cd 80 80 	ldm	sp++,r7,pc
8000deaa:	d7 03       	nop

8000deac <gpio_enable_pin_interrupt>:
 *             \ref GPIO_FALLING_EDGE).
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_pin_interrupt(uint32_t pin, uint32_t mode)
{
8000deac:	eb cd 40 80 	pushm	r7,lr
8000deb0:	1a 97       	mov	r7,sp
8000deb2:	20 3d       	sub	sp,12
8000deb4:	ef 4c ff f8 	st.w	r7[-8],r12
8000deb8:	ef 4b ff f4 	st.w	r7[-12],r11
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
8000debc:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000dec0:	a5 98       	lsr	r8,0x5
8000dec2:	a9 68       	lsl	r8,0x8
8000dec4:	e0 28 f0 00 	sub	r8,61440
8000dec8:	ef 48 ff fc 	st.w	r7[-4],r8

	/* Enable the glitch filter. */
	gpio_port->gfers = 1 << (pin & 0x1F);
8000decc:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000ded0:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000ded4:	30 19       	mov	r9,1
8000ded6:	f2 08 09 48 	lsl	r8,r9,r8
8000deda:	10 99       	mov	r9,r8
8000dedc:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000dee0:	f1 49 00 c4 	st.w	r8[196],r9

	/* Configure the edge detector. */
	if (GPIO_INVALID_ARGUMENT == gpio_configure_edge_detector(pin, mode)) {
8000dee4:	ee fb ff f4 	ld.w	r11,r7[-12]
8000dee8:	ee fc ff f8 	ld.w	r12,r7[-8]
8000deec:	f0 1f 00 0c 	mcall	8000df1c <gpio_enable_pin_interrupt+0x70>
8000def0:	18 98       	mov	r8,r12
8000def2:	58 18       	cp.w	r8,1
8000def4:	c0 31       	brne	8000defa <gpio_enable_pin_interrupt+0x4e>
		return(GPIO_INVALID_ARGUMENT);
8000def6:	30 18       	mov	r8,1
8000def8:	c0 e8       	rjmp	8000df14 <gpio_enable_pin_interrupt+0x68>
	}

	/* Enable interrupt. */
	gpio_port->iers = 1 << (pin & 0x1F);
8000defa:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000defe:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000df02:	30 19       	mov	r9,1
8000df04:	f2 08 09 48 	lsl	r8,r9,r8
8000df08:	10 99       	mov	r9,r8
8000df0a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000df0e:	f1 49 00 94 	st.w	r8[148],r9

	return GPIO_SUCCESS;
8000df12:	30 08       	mov	r8,0
}
8000df14:	10 9c       	mov	r12,r8
8000df16:	2f dd       	sub	sp,-12
8000df18:	e3 cd 80 80 	ldm	sp++,r7,pc
8000df1c:	80 00       	ld.sh	r0,r0[0x0]
8000df1e:	dd d6       	*unknown*

8000df20 <gpio_get_pin_interrupt_flag>:
 * \param pin The pin number.
 *
 * \return The pin interrupt flag.
 */
bool gpio_get_pin_interrupt_flag(uint32_t pin)
{
8000df20:	eb cd 40 80 	pushm	r7,lr
8000df24:	1a 97       	mov	r7,sp
8000df26:	20 2d       	sub	sp,8
8000df28:	ef 4c ff f8 	st.w	r7[-8],r12
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
8000df2c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000df30:	a5 98       	lsr	r8,0x5
8000df32:	a9 68       	lsl	r8,0x8
8000df34:	e0 28 f0 00 	sub	r8,61440
8000df38:	ef 48 ff fc 	st.w	r7[-4],r8
	
	return (gpio_port->ifr >> (pin & 0x1F)) & 1;
8000df3c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000df40:	f0 f9 00 d0 	ld.w	r9,r8[208]
8000df44:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000df48:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000df4c:	f2 08 0a 48 	lsr	r8,r9,r8
8000df50:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000df54:	5c 58       	castu.b	r8
}
8000df56:	10 9c       	mov	r12,r8
8000df58:	2f ed       	sub	sp,-8
8000df5a:	e3 cd 80 80 	ldm	sp++,r7,pc

8000df5e <gpio_clear_pin_interrupt_flag>:
/** \brief Clears the interrupt flag of a pin.
 *
 * \param pin The pin number.
 */
void gpio_clear_pin_interrupt_flag(uint32_t pin)
{
8000df5e:	eb cd 40 80 	pushm	r7,lr
8000df62:	1a 97       	mov	r7,sp
8000df64:	20 2d       	sub	sp,8
8000df66:	ef 4c ff f8 	st.w	r7[-8],r12
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
8000df6a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000df6e:	a5 98       	lsr	r8,0x5
8000df70:	a9 68       	lsl	r8,0x8
8000df72:	e0 28 f0 00 	sub	r8,61440
8000df76:	ef 48 ff fc 	st.w	r7[-4],r8
	gpio_port->ifrc = 1 << (pin & 0x1F);

	/* Restore interrupt enable register. */
	gpio_port->ier = gpio_ier;
#else
	gpio_port->ifrc = 1 << (pin & 0x1F);
8000df7a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000df7e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000df82:	30 19       	mov	r9,1
8000df84:	f2 08 09 48 	lsl	r8,r9,r8
8000df88:	10 99       	mov	r9,r8
8000df8a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000df8e:	f1 49 00 d8 	st.w	r8[216],r9
#endif
}
8000df92:	2f ed       	sub	sp,-8
8000df94:	e3 cd 80 80 	ldm	sp++,r7,pc

8000df98 <_unhandled_interrupt>:
__attribute__((__interrupt__))
#elif (defined __ICCAVR32__)
__interrupt
#endif
static void _unhandled_interrupt(void)
{
8000df98:	eb cd 40 80 	pushm	r7,lr
8000df9c:	1a 97       	mov	r7,sp
	// Catch unregistered interrupts.
	while (true);
8000df9e:	c0 08       	rjmp	8000df9e <_unhandled_interrupt+0x6>

8000dfa0 <_get_interrupt_handler>:
 *
 * \return Interrupt handler to execute.
 */
__int_handler _get_interrupt_handler(uint32_t int_level);
__int_handler _get_interrupt_handler(uint32_t int_level)
{
8000dfa0:	eb cd 40 80 	pushm	r7,lr
8000dfa4:	1a 97       	mov	r7,sp
8000dfa6:	20 3d       	sub	sp,12
8000dfa8:	ef 4c ff f4 	st.w	r7[-12],r12
	/* ICR3 is mapped first, ICR0 last.
	Code in exception.S puts int_level in R12 which is used by the compiler
	to pass a single argument to a function. */
	uint32_t int_grp = AVR32_INTC.icr[AVR32_INTC_INT3 - int_level];
8000dfac:	fe 78 08 00 	mov	r8,-63488
8000dfb0:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000dfb4:	f2 09 11 03 	rsub	r9,r9,3
8000dfb8:	28 09       	sub	r9,-128
8000dfba:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8000dfbe:	ef 48 ff f8 	st.w	r7[-8],r8
	uint32_t int_req = AVR32_INTC.irr[int_grp];
8000dfc2:	fe 78 08 00 	mov	r8,-63488
8000dfc6:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000dfca:	2c 09       	sub	r9,-64
8000dfcc:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8000dfd0:	ef 48 ff fc 	st.w	r7[-4],r8
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
8000dfd4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000dfd8:	58 08       	cp.w	r8,0
8000dfda:	c1 30       	breq	8000e000 <_get_interrupt_handler+0x60>
		? _int_handler_table[int_grp]._int_line_handler_table[32
8000dfdc:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000dfe0:	48 b8       	lddpc	r8,8000e00c <_get_interrupt_handler+0x6c>
8000dfe2:	a1 79       	lsl	r9,0x1
8000dfe4:	2f f9       	sub	r9,-1
8000dfe6:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
8000dfea:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000dfee:	f0 08 12 00 	clz	r8,r8
8000dff2:	f0 08 11 1f 	rsub	r8,r8,31
			- clz(int_req) - 1]
8000dff6:	a3 68       	lsl	r8,0x2
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
		? _int_handler_table[int_grp]._int_line_handler_table[32
8000dff8:	f2 08 00 08 	add	r8,r9,r8
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
8000dffc:	70 08       	ld.w	r8,r8[0x0]
8000dffe:	c0 28       	rjmp	8000e002 <_get_interrupt_handler+0x62>
8000e000:	30 08       	mov	r8,0
		? _int_handler_table[int_grp]._int_line_handler_table[32
			- clz(int_req) - 1]
		: NULL;
}
8000e002:	10 9c       	mov	r12,r8
8000e004:	2f dd       	sub	sp,-12
8000e006:	e3 cd 80 80 	ldm	sp++,r7,pc
8000e00a:	00 00       	add	r0,r0
8000e00c:	80 01       	ld.sh	r1,r0[0x0]
8000e00e:	4d 28       	lddpc	r8,8000e154 <INTC_register_interrupt+0x98>

8000e010 <INTC_init_evba>:
 * \internal
 * \brief Init EVBA address. This operation may or may not have been done by the
 * C startup process.
 */
static __inline__ void INTC_init_evba(void)
{
8000e010:	eb cd 40 80 	pushm	r7,lr
8000e014:	1a 97       	mov	r7,sp
  Set_system_register(AVR32_EVBA, (int32_t)&_evba );
8000e016:	48 38       	lddpc	r8,8000e020 <INTC_init_evba+0x10>
8000e018:	e3 b8 00 01 	mtsr	0x4,r8
}
8000e01c:	e3 cd 80 80 	ldm	sp++,r7,pc
8000e020:	80 01       	ld.sh	r1,r0[0x0]
8000e022:	4a 00       	lddpc	r0,8000e0a0 <INTC_init_interrupts+0x7c>

8000e024 <INTC_init_interrupts>:
/**
 * \brief Initializes the hardware interrupt controller driver.
 *
 */
void INTC_init_interrupts(void)
{
8000e024:	eb cd 40 80 	pushm	r7,lr
8000e028:	1a 97       	mov	r7,sp
8000e02a:	20 2d       	sub	sp,8
	uint32_t int_grp, int_req;

	INTC_init_evba();
8000e02c:	f0 1f 00 1f 	mcall	8000e0a8 <INTC_init_interrupts+0x84>

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
8000e030:	30 08       	mov	r8,0
8000e032:	ef 48 ff f8 	st.w	r7[-8],r8
8000e036:	c3 18       	rjmp	8000e098 <INTC_init_interrupts+0x74>
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
8000e038:	30 08       	mov	r8,0
8000e03a:	ef 48 ff fc 	st.w	r7[-4],r8
8000e03e:	c1 48       	rjmp	8000e066 <INTC_init_interrupts+0x42>
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
				._int_line_handler_table[int_req]
8000e040:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000e044:	49 a8       	lddpc	r8,8000e0ac <INTC_init_interrupts+0x88>
8000e046:	a1 79       	lsl	r9,0x1
8000e048:	2f f9       	sub	r9,-1
8000e04a:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
8000e04e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000e052:	a3 68       	lsl	r8,0x2
8000e054:	f2 08 00 08 	add	r8,r9,r8
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
8000e058:	49 69       	lddpc	r9,8000e0b0 <INTC_init_interrupts+0x8c>
8000e05a:	91 09       	st.w	r8[0x0],r9
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
8000e05c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000e060:	2f f8       	sub	r8,-1
8000e062:	ef 48 ff fc 	st.w	r7[-4],r8
	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
			int_req < _int_handler_table[int_grp].num_irqs;
8000e066:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000e06a:	49 18       	lddpc	r8,8000e0ac <INTC_init_interrupts+0x88>
8000e06c:	f0 09 03 39 	ld.w	r9,r8[r9<<0x3]

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
8000e070:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000e074:	10 39       	cp.w	r9,r8
8000e076:	fe 9b ff e5 	brhi	8000e040 <INTC_init_interrupts+0x1c>

		/* Set the interrupt group priority register to its default
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
8000e07a:	fe 78 08 00 	mov	r8,-63488
8000e07e:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000e082:	48 db       	lddpc	r11,8000e0b4 <INTC_init_interrupts+0x90>
8000e084:	48 da       	lddpc	r10,8000e0b8 <INTC_init_interrupts+0x94>
8000e086:	f6 0a 01 0a 	sub	r10,r11,r10
8000e08a:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	uint32_t int_grp, int_req;

	INTC_init_evba();

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
8000e08e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000e092:	2f f8       	sub	r8,-1
8000e094:	ef 48 ff f8 	st.w	r7[-8],r8
8000e098:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000e09c:	59 38       	cp.w	r8,19
8000e09e:	fe 98 ff cd 	brls	8000e038 <INTC_init_interrupts+0x14>
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
	}
}
8000e0a2:	2f ed       	sub	sp,-8
8000e0a4:	e3 cd 80 80 	ldm	sp++,r7,pc
8000e0a8:	80 00       	ld.sh	r0,r0[0x0]
8000e0aa:	e0 10 80 01 	andl	r0,0x8001
8000e0ae:	4d 28       	lddpc	r8,8000e1f4 <udata_clear_loop_end+0x2a>
8000e0b0:	80 00       	ld.sh	r0,r0[0x0]
8000e0b2:	df 98       	*unknown*
8000e0b4:	80 01       	ld.sh	r1,r0[0x0]
8000e0b6:	4b 04       	lddpc	r4,8000e174 <INTC_register_interrupt+0xb8>
8000e0b8:	80 01       	ld.sh	r1,r0[0x0]
8000e0ba:	4a 00       	lddpc	r0,8000e138 <INTC_register_interrupt+0x7c>

8000e0bc <INTC_register_interrupt>:
 *          be effective.
 *
 */
void INTC_register_interrupt(__int_handler handler, uint32_t irq,
	uint32_t int_level)
{
8000e0bc:	eb cd 40 80 	pushm	r7,lr
8000e0c0:	1a 97       	mov	r7,sp
8000e0c2:	20 4d       	sub	sp,16
8000e0c4:	ef 4c ff f8 	st.w	r7[-8],r12
8000e0c8:	ef 4b ff f4 	st.w	r7[-12],r11
8000e0cc:	ef 4a ff f0 	st.w	r7[-16],r10
	// Determine the group of the IRQ.
	uint32_t int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;
8000e0d0:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000e0d4:	a5 98       	lsr	r8,0x5
8000e0d6:	ef 48 ff fc 	st.w	r7[-4],r8

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
		._int_line_handler_table[irq % AVR32_INTC_MAX_NUM_IRQS_PER_GRP]
8000e0da:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000e0de:	4a 78       	lddpc	r8,8000e178 <INTC_register_interrupt+0xbc>
8000e0e0:	a1 79       	lsl	r9,0x1
8000e0e2:	2f f9       	sub	r9,-1
8000e0e4:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
8000e0e8:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000e0ec:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000e0f0:	a3 68       	lsl	r8,0x2
8000e0f2:	f2 08 00 08 	add	r8,r9,r8
	uint32_t int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
8000e0f6:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000e0fa:	91 09       	st.w	r8[0x0],r9
	/* Program the corresponding IPRX register to set the interrupt priority
	level and the interrupt vector offset that will be fetched by the core
	interrupt system.
	NOTE: The _intx functions are intermediate assembly functions between
	the core interrupt system and the user interrupt handler. */
	if (int_level == AVR32_INTC_INT0) {
8000e0fc:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000e100:	58 08       	cp.w	r8,0
8000e102:	c0 c1       	brne	8000e11a <INTC_register_interrupt+0x5e>
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
8000e104:	fe 78 08 00 	mov	r8,-63488
8000e108:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000e10c:	49 cb       	lddpc	r11,8000e17c <INTC_register_interrupt+0xc0>
8000e10e:	49 da       	lddpc	r10,8000e180 <INTC_register_interrupt+0xc4>
8000e110:	f6 0a 01 0a 	sub	r10,r11,r10
8000e114:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
8000e118:	c2 d8       	rjmp	8000e172 <INTC_register_interrupt+0xb6>
	} else if (int_level == AVR32_INTC_INT1) {
8000e11a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000e11e:	58 18       	cp.w	r8,1
8000e120:	c0 d1       	brne	8000e13a <INTC_register_interrupt+0x7e>
		AVR32_INTC.ipr[int_grp] = IPR_INT1;
8000e122:	fe 78 08 00 	mov	r8,-63488
8000e126:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000e12a:	49 7b       	lddpc	r11,8000e184 <INTC_register_interrupt+0xc8>
8000e12c:	49 5a       	lddpc	r10,8000e180 <INTC_register_interrupt+0xc4>
8000e12e:	f6 0a 01 0a 	sub	r10,r11,r10
8000e132:	bf aa       	sbr	r10,0x1e
8000e134:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
8000e138:	c1 d8       	rjmp	8000e172 <INTC_register_interrupt+0xb6>
	} else if (int_level == AVR32_INTC_INT2) {
8000e13a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000e13e:	58 28       	cp.w	r8,2
8000e140:	c0 d1       	brne	8000e15a <INTC_register_interrupt+0x9e>
		AVR32_INTC.ipr[int_grp] = IPR_INT2;
8000e142:	fe 78 08 00 	mov	r8,-63488
8000e146:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000e14a:	49 0b       	lddpc	r11,8000e188 <INTC_register_interrupt+0xcc>
8000e14c:	48 da       	lddpc	r10,8000e180 <INTC_register_interrupt+0xc4>
8000e14e:	f6 0a 01 0a 	sub	r10,r11,r10
8000e152:	bf ba       	sbr	r10,0x1f
8000e154:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
8000e158:	c0 d8       	rjmp	8000e172 <INTC_register_interrupt+0xb6>
	} else {
		AVR32_INTC.ipr[int_grp] = IPR_INT3;
8000e15a:	fe 78 08 00 	mov	r8,-63488
8000e15e:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000e162:	48 bb       	lddpc	r11,8000e18c <INTC_register_interrupt+0xd0>
8000e164:	48 7a       	lddpc	r10,8000e180 <INTC_register_interrupt+0xc4>
8000e166:	f6 0a 01 0a 	sub	r10,r11,r10
8000e16a:	ea 1a c0 00 	orh	r10,0xc000
8000e16e:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	}
}
8000e172:	2f cd       	sub	sp,-16
8000e174:	e3 cd 80 80 	ldm	sp++,r7,pc
8000e178:	80 01       	ld.sh	r1,r0[0x0]
8000e17a:	4d 28       	lddpc	r8,8000e2c0 <udata_clear_loop_end+0xf6>
8000e17c:	80 01       	ld.sh	r1,r0[0x0]
8000e17e:	4b 04       	lddpc	r4,8000e23c <udata_clear_loop_end+0x72>
8000e180:	80 01       	ld.sh	r1,r0[0x0]
8000e182:	4a 00       	lddpc	r0,8000e200 <udata_clear_loop_end+0x36>
8000e184:	80 01       	ld.sh	r1,r0[0x0]
8000e186:	4b 12       	lddpc	r2,8000e248 <udata_clear_loop_end+0x7e>
8000e188:	80 01       	ld.sh	r1,r0[0x0]
8000e18a:	4b 20       	lddpc	r0,8000e250 <udata_clear_loop_end+0x86>
8000e18c:	80 01       	ld.sh	r1,r0[0x0]
8000e18e:	4b 2e       	lddpc	lr,8000e254 <udata_clear_loop_end+0x8a>

8000e190 <_stext>:

  .global _stext
  .type _stext, @function
_stext:
  // Set initial stack pointer.
  lda.w   sp, _estack
8000e190:	e0 7d 00 00 	mov	sp,65536

  // Set up EVBA so interrupts can be enabled.
  lda.w   r0, _evba
  mtsr    AVR32_EVBA, r0
8000e194:	fe c0 97 94 	sub	r0,pc,-26732

  // Enable the exception processing.
  csrf    AVR32_SR_EM_OFFSET
8000e198:	e3 b0 00 01 	mtsr	0x4,r0

  // Load initialized data having a global lifetime from the data LMA.
  lda.w   r0, _data
  lda.w   r1, _edata
8000e19c:	d5 53       	csrf	0x15
  cp      r0, r1
8000e19e:	30 80       	mov	r0,8
  brhs    idata_load_loop_end
8000e1a0:	e0 61 05 e8 	mov	r1,1512
  lda.w   r2, _data_lma
idata_load_loop:
  ld.d    r4, r2++
8000e1a4:	02 30       	cp.w	r0,r1
  st.d    r0++, r4
8000e1a6:	c0 72       	brcc	8000e1b4 <idata_load_loop_end>
  cp      r0, r1
8000e1a8:	fe c2 8d 10 	sub	r2,pc,-29424

8000e1ac <idata_load_loop>:
  brlo    idata_load_loop
idata_load_loop_end:

  // Clear uninitialized data having a global lifetime in the blank static storage section.
  lda.w   r0, __bss_start
8000e1ac:	a5 05       	ld.d	r4,r2++
  lda.w   r1, _end
8000e1ae:	a1 24       	st.d	r0++,r4
  cp      r0, r1
8000e1b0:	02 30       	cp.w	r0,r1
  brhs    udata_clear_loop_end
8000e1b2:	cf d3       	brcs	8000e1ac <idata_load_loop>

8000e1b4 <idata_load_loop_end>:
  mov     r2, 0
8000e1b4:	e0 60 05 e8 	mov	r0,1512
  mov     r3, 0
udata_clear_loop:
  st.d    r0++, r2
8000e1b8:	e0 61 0e 78 	mov	r1,3704
  cp      r0, r1
  brlo    udata_clear_loop
8000e1bc:	02 30       	cp.w	r0,r1
  // Safety: Set the default "return" @ to the exit routine address.
  lda.w   lr, exit
#endif

  // Start the show.
  lda.w   pc, main
8000e1be:	c0 62       	brcc	8000e1ca <udata_clear_loop_end>
8000e1c0:	30 02       	mov	r2,0
8000e1c2:	30 03       	mov	r3,0

8000e1c4 <udata_clear_loop>:
8000e1c4:	a1 22       	st.d	r0++,r2
8000e1c6:	02 30       	cp.w	r0,r1
8000e1c8:	cf e3       	brcs	8000e1c4 <udata_clear_loop>

8000e1ca <udata_clear_loop_end>:
8000e1ca:	fe cf f8 2a 	sub	pc,pc,-2006
8000e1ce:	d7 03       	nop
8000e1d0:	73 74       	ld.w	r4,r9[0x5c]
8000e1d2:	61 72       	ld.w	r2,r0[0x5c]
8000e1d4:	74 00       	ld.w	r0,r10[0x0]
8000e1d6:	00 00       	add	r0,r0
8000e1d8:	0d 0a       	ld.w	r10,r6++
8000e1da:	53 74       	stdsp	sp[0xdc],r4
8000e1dc:	61 72       	ld.w	r2,r0[0x5c]
8000e1de:	74 20       	ld.w	r0,r10[0x8]
8000e1e0:	63 6f       	ld.w	pc,r1[0x58]
8000e1e2:	6d 6d       	ld.w	sp,r6[0x58]
8000e1e4:	61 6e       	ld.w	lr,r0[0x58]
8000e1e6:	64 20       	ld.w	r0,r2[0x8]
8000e1e8:	72 65       	ld.w	r5,r9[0x18]
8000e1ea:	63 6f       	ld.w	pc,r1[0x58]
8000e1ec:	67 6e       	ld.w	lr,r3[0x58]
8000e1ee:	69 7a       	ld.w	r10,r4[0x5c]
8000e1f0:	65 64       	ld.w	r4,r2[0x58]
8000e1f2:	21 00       	sub	r0,16
8000e1f4:	4c 6f       	lddpc	pc,8000e30c <udata_clear_loop_end+0x142>
8000e1f6:	67 67       	ld.w	r7,r3[0x58]
8000e1f8:	69 6e       	ld.w	lr,r4[0x58]
8000e1fa:	67 20       	ld.w	r0,r3[0x48]
8000e1fc:	50 4f       	stdsp	sp[0x10],pc
8000e1fe:	54 20       	stdsp	sp[0x108],r0
8000e200:	76 61       	ld.w	r1,r11[0x18]
8000e202:	6c 75       	ld.w	r5,r6[0x1c]
8000e204:	65 73       	ld.w	r3,r2[0x5c]
8000e206:	20 74       	sub	r4,7
8000e208:	6f 20       	ld.w	r0,r7[0x48]
8000e20a:	53 44       	stdsp	sp[0xd0],r4
8000e20c:	2f 4d       	sub	sp,-48
8000e20e:	4d 43       	lddpc	r3,8000e35c <udata_clear_loop_end+0x192>
8000e210:	2e 2e       	sub	lr,-30
8000e212:	2e 00       	sub	r0,-32
8000e214:	0d 0a       	ld.w	r10,r6++
8000e216:	3e 3e       	mov	lr,-29
8000e218:	00 00       	add	r0,r0
8000e21a:	00 00       	add	r0,r0
8000e21c:	73 74       	ld.w	r4,r9[0x5c]
8000e21e:	6f 70       	ld.w	r0,r7[0x5c]
8000e220:	00 00       	add	r0,r0
8000e222:	00 00       	add	r0,r0
8000e224:	0d 0a       	ld.w	r10,r6++
8000e226:	53 74       	stdsp	sp[0xdc],r4
8000e228:	6f 70       	ld.w	r0,r7[0x5c]
8000e22a:	20 63       	sub	r3,6
8000e22c:	6f 6d       	ld.w	sp,r7[0x58]
8000e22e:	6d 61       	ld.w	r1,r6[0x58]
8000e230:	6e 64       	ld.w	r4,r7[0x18]
8000e232:	20 72       	sub	r2,7
8000e234:	65 63       	ld.w	r3,r2[0x58]
8000e236:	6f 67       	ld.w	r7,r7[0x58]
8000e238:	6e 69       	ld.w	r9,r7[0x18]
8000e23a:	7a 65       	ld.w	r5,sp[0x18]
8000e23c:	64 21       	ld.w	r1,r2[0x8]
8000e23e:	00 00       	add	r0,r0
8000e240:	4c 6f       	lddpc	pc,8000e358 <udata_clear_loop_end+0x18e>
8000e242:	67 67       	ld.w	r7,r3[0x58]
8000e244:	69 6e       	ld.w	lr,r4[0x58]
8000e246:	67 20       	ld.w	r0,r3[0x48]
8000e248:	68 61       	ld.w	r1,r4[0x18]
8000e24a:	73 20       	ld.w	r0,r9[0x48]
8000e24c:	73 74       	ld.w	r4,r9[0x5c]
8000e24e:	6f 70       	ld.w	r0,r7[0x5c]
8000e250:	70 65       	ld.w	r5,r8[0x18]
8000e252:	64 21       	ld.w	r1,r2[0x8]
8000e254:	00 00       	add	r0,r0
8000e256:	00 00       	add	r0,r0
8000e258:	0d 0a       	ld.w	r10,r6++
8000e25a:	49 6e       	lddpc	lr,8000e2b0 <udata_clear_loop_end+0xe6>
8000e25c:	76 61       	ld.w	r1,r11[0x18]
8000e25e:	6c 69       	ld.w	r9,r6[0x18]
8000e260:	64 20       	ld.w	r0,r2[0x8]
8000e262:	63 6f       	ld.w	pc,r1[0x58]
8000e264:	6d 6d       	ld.w	sp,r6[0x58]
8000e266:	61 6e       	ld.w	lr,r0[0x58]
8000e268:	64 2c       	ld.w	r12,r2[0x8]
8000e26a:	20 74       	sub	r4,7
8000e26c:	72 79       	ld.w	r9,r9[0x1c]
8000e26e:	20 61       	sub	r1,6
8000e270:	67 61       	ld.w	r1,r3[0x58]
8000e272:	69 6e       	ld.w	lr,r4[0x58]
8000e274:	21 00       	sub	r0,16
8000e276:	00 00       	add	r0,r0
8000e278:	4f 70       	lddpc	r0,8000e454 <osc_get_rate+0xc>
8000e27a:	65 6e       	ld.w	lr,r2[0x58]
8000e27c:	20 50       	sub	r0,5
8000e27e:	43 20       	lddsp	r0,sp[0xc8]
8000e280:	74 65       	ld.w	r5,r10[0x18]
8000e282:	72 6d       	ld.w	sp,r9[0x18]
8000e284:	69 6e       	ld.w	lr,r4[0x58]
8000e286:	61 6c       	ld.w	r12,r0[0x58]
8000e288:	00 00       	add	r0,r0
8000e28a:	00 00       	add	r0,r0
8000e28c:	50 72       	stdsp	sp[0x1c],r2
8000e28e:	65 73       	ld.w	r3,r2[0x5c]
8000e290:	73 20       	ld.w	r0,r9[0x48]
8000e292:	50 42       	stdsp	sp[0x10],r2
8000e294:	30 20       	mov	r0,2
8000e296:	74 6f       	ld.w	pc,r10[0x18]
8000e298:	20 73       	sub	r3,7
8000e29a:	74 61       	ld.w	r1,r10[0x18]
8000e29c:	72 74       	ld.w	r4,r9[0x1c]
8000e29e:	00 00       	add	r0,r0
8000e2a0:	74 65       	ld.w	r5,r10[0x18]
8000e2a2:	73 74       	ld.w	r4,r9[0x5c]
8000e2a4:	2e 74       	sub	r4,-25
8000e2a6:	78 74       	ld.w	r4,r12[0x1c]
8000e2a8:	00 00       	add	r0,r0
8000e2aa:	00 00       	add	r0,r0
8000e2ac:	65 72       	ld.w	r2,r2[0x5c]
8000e2ae:	72 6f       	ld.w	pc,r9[0x18]
8000e2b0:	72 20       	ld.w	r0,r9[0x8]
8000e2b2:	73 65       	ld.w	r5,r9[0x58]
8000e2b4:	6c 65       	ld.w	r5,r6[0x18]
8000e2b6:	63 74       	ld.w	r4,r1[0x5c]
8000e2b8:	69 6e       	ld.w	lr,r4[0x58]
8000e2ba:	67 20       	ld.w	r0,r3[0x48]
8000e2bc:	73 64       	ld.w	r4,r9[0x58]
8000e2be:	2f 6d       	sub	sp,-40
8000e2c0:	6d 63       	ld.w	r3,r6[0x58]
8000e2c2:	00 00       	add	r0,r0
8000e2c4:	25 6c       	sub	r12,86
8000e2c6:	75 03       	ld.w	r3,r10[0x40]
8000e2c8:	00 00       	add	r0,r0
8000e2ca:	00 00       	add	r0,r0
8000e2cc:	0c 2d       	rsub	sp,r6
8000e2ce:	2d 2d       	sub	sp,-184
8000e2d0:	2d 2d       	sub	sp,-184
8000e2d2:	2d 2d       	sub	sp,-184
8000e2d4:	2d 2d       	sub	sp,-184
8000e2d6:	2d 2d       	sub	sp,-184
8000e2d8:	2d 2d       	sub	sp,-184
8000e2da:	2d 2d       	sub	sp,-184
8000e2dc:	2d 2d       	sub	sp,-184
8000e2de:	2d 2d       	sub	sp,-184
8000e2e0:	2d 2d       	sub	sp,-184
8000e2e2:	2d 2d       	sub	sp,-184
8000e2e4:	2d 2d       	sub	sp,-184
8000e2e6:	2d 2d       	sub	sp,-184
8000e2e8:	2d 2d       	sub	sp,-184
8000e2ea:	2d 2d       	sub	sp,-184
8000e2ec:	2d 2d       	sub	sp,-184
8000e2ee:	2d 2d       	sub	sp,-184
8000e2f0:	2d 2d       	sub	sp,-184
8000e2f2:	2d 2d       	sub	sp,-184
8000e2f4:	2d 2d       	sub	sp,-184
8000e2f6:	2d 2d       	sub	sp,-184
8000e2f8:	2d 2d       	sub	sp,-184
8000e2fa:	2d 2d       	sub	sp,-184
8000e2fc:	2d 2d       	sub	sp,-184
8000e2fe:	2d 2d       	sub	sp,-184
8000e300:	2d 2d       	sub	sp,-184
8000e302:	2d 2d       	sub	sp,-184
8000e304:	2d 2d       	sub	sp,-184
8000e306:	2d 2d       	sub	sp,-184
8000e308:	2d 2d       	sub	sp,-184
8000e30a:	2d 2d       	sub	sp,-184
8000e30c:	2d 2d       	sub	sp,-184
8000e30e:	2d 2d       	sub	sp,-184
8000e310:	2d 2d       	sub	sp,-184
8000e312:	00 00       	add	r0,r0
8000e314:	0d 0a       	ld.w	r10,r6++
8000e316:	4c 61       	lddpc	r1,8000e42c <udata_clear_loop_end+0x262>
8000e318:	62 20       	ld.w	r0,r1[0x8]
8000e31a:	34 20       	mov	r0,66
8000e31c:	2d 20       	sub	r0,-46
8000e31e:	45 72       	lddsp	r2,sp[0x15c]
8000e320:	6c 65       	ld.w	r5,r6[0x18]
8000e322:	6e 64       	ld.w	r4,r7[0x18]
8000e324:	20 52       	sub	r2,5
8000e326:	2e 20       	sub	r0,-30
8000e328:	4d 79       	lddpc	r9,8000e484 <sysclk_get_main_hz+0x4>
8000e32a:	6b 6c       	ld.w	r12,r5[0x58]
8000e32c:	65 62       	ld.w	r2,r2[0x58]
8000e32e:	75 73       	ld.w	r3,r10[0x5c]
8000e330:	74 00       	ld.w	r0,r10[0x0]
8000e332:	00 00       	add	r0,r0
8000e334:	0d 0a       	ld.w	r10,r6++
8000e336:	2d 2d       	sub	sp,-184
8000e338:	2d 2d       	sub	sp,-184
8000e33a:	2d 2d       	sub	sp,-184
8000e33c:	2d 2d       	sub	sp,-184
8000e33e:	2d 2d       	sub	sp,-184
8000e340:	2d 2d       	sub	sp,-184
8000e342:	2d 2d       	sub	sp,-184
8000e344:	2d 2d       	sub	sp,-184
8000e346:	2d 2d       	sub	sp,-184
8000e348:	2d 2d       	sub	sp,-184
8000e34a:	2d 2d       	sub	sp,-184
8000e34c:	2d 2d       	sub	sp,-184
8000e34e:	2d 2d       	sub	sp,-184
8000e350:	2d 2d       	sub	sp,-184
8000e352:	2d 2d       	sub	sp,-184
8000e354:	2d 2d       	sub	sp,-184
8000e356:	2d 2d       	sub	sp,-184
8000e358:	2d 2d       	sub	sp,-184
8000e35a:	2d 2d       	sub	sp,-184
8000e35c:	2d 2d       	sub	sp,-184
8000e35e:	2d 2d       	sub	sp,-184
8000e360:	2d 2d       	sub	sp,-184
8000e362:	2d 2d       	sub	sp,-184
8000e364:	2d 2d       	sub	sp,-184
8000e366:	2d 2d       	sub	sp,-184
8000e368:	2d 2d       	sub	sp,-184
8000e36a:	2d 2d       	sub	sp,-184
8000e36c:	2d 2d       	sub	sp,-184
8000e36e:	2d 2d       	sub	sp,-184
8000e370:	2d 2d       	sub	sp,-184
8000e372:	2d 2d       	sub	sp,-184
8000e374:	2d 2d       	sub	sp,-184
8000e376:	2d 2d       	sub	sp,-184
8000e378:	2d 2d       	sub	sp,-184
8000e37a:	2d 00       	sub	r0,-48
8000e37c:	0d 0a       	ld.w	r10,r6++
8000e37e:	43 6f       	lddsp	pc,sp[0xd8]
8000e380:	6d 6d       	ld.w	sp,r6[0x58]
8000e382:	61 6e       	ld.w	lr,r0[0x58]
8000e384:	64 20       	ld.w	r0,r2[0x8]
8000e386:	6c 69       	ld.w	r9,r6[0x18]
8000e388:	73 74       	ld.w	r4,r9[0x5c]
8000e38a:	3a 00       	mov	r0,-96
8000e38c:	73 74       	ld.w	r4,r9[0x5c]
8000e38e:	61 72       	ld.w	r2,r0[0x5c]
8000e390:	74 20       	ld.w	r0,r10[0x8]
8000e392:	20 3d       	sub	sp,12
8000e394:	20 73       	sub	r3,7
8000e396:	74 61       	ld.w	r1,r10[0x18]
8000e398:	72 74       	ld.w	r4,r9[0x1c]
8000e39a:	20 6c       	sub	r12,6
8000e39c:	6f 67       	ld.w	r7,r7[0x58]
8000e39e:	67 69       	ld.w	r9,r3[0x58]
8000e3a0:	6e 67       	ld.w	r7,r7[0x18]
8000e3a2:	20 50       	sub	r0,5
8000e3a4:	4f 54       	lddpc	r4,8000e578 <erm_tc_init+0xc4>
8000e3a6:	20 76       	sub	r6,7
8000e3a8:	61 6c       	ld.w	r12,r0[0x58]
8000e3aa:	75 65       	ld.w	r5,r10[0x58]
8000e3ac:	73 20       	ld.w	r0,r9[0x48]
8000e3ae:	74 6f       	ld.w	pc,r10[0x18]
8000e3b0:	20 73       	sub	r3,7
8000e3b2:	64 2f       	ld.w	pc,r2[0x8]
8000e3b4:	6d 6d       	ld.w	sp,r6[0x58]
8000e3b6:	63 00       	ld.w	r0,r1[0x40]
8000e3b8:	73 74       	ld.w	r4,r9[0x5c]
8000e3ba:	6f 70       	ld.w	r0,r7[0x5c]
8000e3bc:	20 20       	sub	r0,2
8000e3be:	20 3d       	sub	sp,12
8000e3c0:	20 73       	sub	r3,7
8000e3c2:	74 6f       	ld.w	pc,r10[0x18]
8000e3c4:	70 20       	ld.w	r0,r8[0x8]
8000e3c6:	6c 6f       	ld.w	pc,r6[0x18]
8000e3c8:	67 67       	ld.w	r7,r3[0x58]
8000e3ca:	69 6e       	ld.w	lr,r4[0x58]
8000e3cc:	67 20       	ld.w	r0,r3[0x48]
8000e3ce:	50 4f       	stdsp	sp[0x10],pc
8000e3d0:	54 20       	stdsp	sp[0x108],r0
8000e3d2:	76 61       	ld.w	r1,r11[0x18]
8000e3d4:	6c 75       	ld.w	r5,r6[0x1c]
8000e3d6:	65 73       	ld.w	r3,r2[0x5c]
8000e3d8:	20 74       	sub	r4,7
8000e3da:	6f 20       	ld.w	r0,r7[0x48]
8000e3dc:	73 64       	ld.w	r4,r9[0x58]
8000e3de:	2f 6d       	sub	sp,-40
8000e3e0:	6d 63       	ld.w	r3,r6[0x58]
8000e3e2:	00 00       	add	r0,r0
8000e3e4:	0d 0a       	ld.w	r10,r6++
8000e3e6:	54 79       	stdsp	sp[0x11c],r9
8000e3e8:	70 65       	ld.w	r5,r8[0x18]
8000e3ea:	20 63       	sub	r3,6
8000e3ec:	6f 6d       	ld.w	sp,r7[0x58]
8000e3ee:	6d 61       	ld.w	r1,r6[0x58]
8000e3f0:	6e 64       	ld.w	r4,r7[0x18]
8000e3f2:	20 66       	sub	r6,6
8000e3f4:	6f 6c       	ld.w	r12,r7[0x58]
8000e3f6:	6c 6f       	ld.w	pc,r6[0x18]
8000e3f8:	77 65       	ld.w	r5,r11[0x58]
8000e3fa:	64 20       	ld.w	r0,r2[0x8]
8000e3fc:	62 79       	ld.w	r9,r1[0x1c]
8000e3fe:	20 65       	sub	r5,6
8000e400:	6e 74       	ld.w	r4,r7[0x1c]
8000e402:	65 72       	ld.w	r2,r2[0x5c]
8000e404:	3a 00       	mov	r0,-96
8000e406:	00 00       	add	r0,r0
8000e408:	3e 3e       	mov	lr,-29
8000e40a:	00 00       	add	r0,r0
8000e40c:	45 6e       	lddsp	lr,sp[0x158]
8000e40e:	74 65       	ld.w	r5,r10[0x18]
8000e410:	72 20       	ld.w	r0,r9[0x8]
8000e412:	63 6f       	ld.w	pc,r1[0x58]
8000e414:	6d 6d       	ld.w	sp,r6[0x58]
8000e416:	61 6e       	ld.w	lr,r0[0x58]
8000e418:	64 2e       	ld.w	lr,r2[0x8]
8000e41a:	2e 2e       	sub	lr,-30
8000e41c:	00 00       	add	r0,r0
8000e41e:	00 00       	add	r0,r0
8000e420:	4c 6f       	lddpc	pc,8000e538 <erm_tc_init+0x84>
8000e422:	67 67       	ld.w	r7,r3[0x58]
8000e424:	69 6e       	ld.w	lr,r4[0x58]
8000e426:	67 20       	ld.w	r0,r3[0x48]
8000e428:	61 63       	ld.w	r3,r0[0x58]
8000e42a:	74 69       	ld.w	r9,r10[0x18]
8000e42c:	76 65       	ld.w	r5,r11[0x18]
8000e42e:	2e 2e       	sub	lr,-30
8000e430:	2e 00       	sub	r0,-32
8000e432:	00 00       	add	r0,r0
8000e434:	4c 6f       	lddpc	pc,8000e54c <erm_tc_init+0x98>
8000e436:	67 67       	ld.w	r7,r3[0x58]
8000e438:	69 6e       	ld.w	lr,r4[0x58]
8000e43a:	67 20       	ld.w	r0,r3[0x48]
8000e43c:	73 74       	ld.w	r4,r9[0x5c]
8000e43e:	6f 70       	ld.w	r0,r7[0x5c]
8000e440:	70 65       	ld.w	r5,r8[0x18]
8000e442:	64 2e       	ld.w	lr,r2[0x8]
8000e444:	2e 2e       	sub	lr,-30
	...

8000e448 <osc_get_rate>:
		return false;
	}
}

static inline uint32_t osc_get_rate(uint8_t id)
{
8000e448:	eb cd 40 80 	pushm	r7,lr
8000e44c:	1a 97       	mov	r7,sp
8000e44e:	20 1d       	sub	sp,4
8000e450:	18 98       	mov	r8,r12
8000e452:	ef 68 ff fc 	st.b	r7[-4],r8
	switch (id) {
8000e456:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000e45a:	58 08       	cp.w	r8,0
8000e45c:	c0 40       	breq	8000e464 <osc_get_rate+0x1c>
8000e45e:	58 28       	cp.w	r8,2
8000e460:	c0 70       	breq	8000e46e <osc_get_rate+0x26>
8000e462:	c0 98       	rjmp	8000e474 <osc_get_rate+0x2c>
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		return BOARD_OSC0_HZ;
8000e464:	e0 68 1b 00 	mov	r8,6912
8000e468:	ea 18 00 b7 	orh	r8,0xb7
8000e46c:	c0 58       	rjmp	8000e476 <osc_get_rate+0x2e>
		return BOARD_OSC1_HZ;
#endif

#ifdef BOARD_OSC32_HZ
	case OSC_ID_OSC32:
		return BOARD_OSC32_HZ;
8000e46e:	e0 68 80 00 	mov	r8,32768
8000e472:	c0 28       	rjmp	8000e476 <osc_get_rate+0x2e>
#endif
	default:
		/* unhandled_case(id); */
		return 0;
8000e474:	30 08       	mov	r8,0
	}
}
8000e476:	10 9c       	mov	r12,r8
8000e478:	2f fd       	sub	sp,-4
8000e47a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000e47e:	d7 03       	nop

8000e480 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern bool sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
8000e480:	eb cd 40 80 	pushm	r7,lr
8000e484:	1a 97       	mov	r7,sp
		return BOARD_OSC0_HZ;
#endif

#ifdef CONFIG_PLL0_SOURCE
	case SYSCLK_SRC_PLL0:
		return pll_get_default_rate(0);
8000e486:	30 0c       	mov	r12,0
8000e488:	f0 1f 00 04 	mcall	8000e498 <sysclk_get_main_hz+0x18>
8000e48c:	18 98       	mov	r8,r12
8000e48e:	a3 78       	lsl	r8,0x3
8000e490:	a1 98       	lsr	r8,0x1

	default:
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
8000e492:	10 9c       	mov	r12,r8
8000e494:	e3 cd 80 80 	ldm	sp++,r7,pc
8000e498:	80 00       	ld.sh	r0,r0[0x0]
8000e49a:	e4 48 eb cd 	cp.w	r8,322509

8000e49c <sysclk_get_pba_hz>:
 * \brief Return the current rate in Hz of the Peripheral Bus A clock
 *
 * \return Frequency of the Peripheral Bus A clock, in Hz.
 */
static inline uint32_t sysclk_get_pba_hz(void)
{
8000e49c:	eb cd 40 80 	pushm	r7,lr
8000e4a0:	1a 97       	mov	r7,sp
	return sysclk_get_main_hz() >> CONFIG_SYSCLK_PBA_DIV;
8000e4a2:	f0 1f 00 04 	mcall	8000e4b0 <sysclk_get_pba_hz+0x14>
8000e4a6:	18 98       	mov	r8,r12
8000e4a8:	a3 88       	lsr	r8,0x2
}
8000e4aa:	10 9c       	mov	r12,r8
8000e4ac:	e3 cd 80 80 	ldm	sp++,r7,pc
8000e4b0:	80 00       	ld.sh	r0,r0[0x0]
8000e4b2:	e4 80 eb cd 	breq	800abc4c <_data_lma+0x967b4>

8000e4b4 <erm_tc_init>:
#define ERM_TC_CHANNEL_ID			0
#define ERM_TC_CHANNEL_PIN			AVR32_TC_A0_0_0_PIN
#define ERM_TC_CHANNEL_FUNCTION		AVR32_TC_A0_0_0_FUNCTION

static void erm_tc_init(volatile avr32_tc_t *tc, uint32_t tick_ms, uint32_t pba_clk)
{
8000e4b4:	eb cd 40 c0 	pushm	r6-r7,lr
8000e4b8:	1a 97       	mov	r7,sp
8000e4ba:	20 7d       	sub	sp,28
8000e4bc:	ef 4c ff ec 	st.w	r7[-20],r12
8000e4c0:	ef 4b ff e8 	st.w	r7[-24],r11
8000e4c4:	ef 4a ff e4 	st.w	r7[-28],r10
		.cpcstop  = false,								// Counter clock stopped with RC compare.

		.burst    = false,								// Burst signal selection.
		.clki     = false,								// Clock inversion.
		.tcclks   = TC_CLOCK_SOURCE_TC4					// Internal source clock 3, connected to fPBA / 32.
	};
8000e4c8:	30 08       	mov	r8,0
8000e4ca:	30 09       	mov	r9,0
8000e4cc:	ee e9 ff f0 	st.d	r7[-16],r8
8000e4d0:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000e4d4:	30 29       	mov	r9,2
8000e4d6:	f1 d9 d1 a2 	bfins	r8,r9,0xd,0x2
8000e4da:	ef 48 ff f4 	st.w	r7[-12],r8
8000e4de:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000e4e2:	30 39       	mov	r9,3
8000e4e4:	f1 d9 d0 03 	bfins	r8,r9,0x0,0x3
8000e4e8:	ef 48 ff f4 	st.w	r7[-12],r8
		.lovrs = 0,
		.covfs = 0
	};
	
	// Initialize the timer/counter.
	tc_init_waveform(tc, &waveform_opt);
8000e4ec:	ee c8 00 10 	sub	r8,r7,16
8000e4f0:	10 9b       	mov	r11,r8
8000e4f2:	ee fc ff ec 	ld.w	r12,r7[-20]
8000e4f6:	f0 1f 00 1c 	mcall	8000e564 <erm_tc_init+0xb0>
	
	// Internal clock source 4 is active, hence tc_clk = pba_clk / 32
	// Determine value of RC based on desired tick_time_ms
	temp = ( ((float) pba_clk) * ((float) tick_ms) ) / 32000.0;
8000e4fa:	ee fc ff e4 	ld.w	r12,r7[-28]
8000e4fe:	f0 1f 00 1b 	mcall	8000e568 <erm_tc_init+0xb4>
8000e502:	18 96       	mov	r6,r12
8000e504:	ee fc ff e8 	ld.w	r12,r7[-24]
8000e508:	f0 1f 00 18 	mcall	8000e568 <erm_tc_init+0xb4>
8000e50c:	18 98       	mov	r8,r12
8000e50e:	10 9b       	mov	r11,r8
8000e510:	0c 9c       	mov	r12,r6
8000e512:	f0 1f 00 17 	mcall	8000e56c <erm_tc_init+0xb8>
8000e516:	18 98       	mov	r8,r12
8000e518:	fc 1b 46 fa 	movh	r11,0x46fa
8000e51c:	10 9c       	mov	r12,r8
8000e51e:	f0 1f 00 15 	mcall	8000e570 <erm_tc_init+0xbc>
8000e522:	18 98       	mov	r8,r12
8000e524:	ef 48 ff f8 	st.w	r7[-8],r8
	RC = (uint16_t) temp;
8000e528:	ee fc ff f8 	ld.w	r12,r7[-8]
8000e52c:	f0 1f 00 12 	mcall	8000e574 <erm_tc_init+0xc0>
8000e530:	18 98       	mov	r8,r12
8000e532:	ef 58 ff fe 	st.h	r7[-2],r8
	
	// Set RC value
	tc_write_rc(tc, ERM_TC_CHANNEL_ID, RC);
8000e536:	ef 18 ff fe 	ld.uh	r8,r7[-2]
8000e53a:	10 9a       	mov	r10,r8
8000e53c:	30 0b       	mov	r11,0
8000e53e:	ee fc ff ec 	ld.w	r12,r7[-20]
8000e542:	f0 1f 00 0e 	mcall	8000e578 <erm_tc_init+0xc4>
	
	// Configure the timer interrupt
	tc_configure_interrupts(tc, ERM_TC_CHANNEL_ID, &tc_interrupt);
8000e546:	48 ea       	lddpc	r10,8000e57c <erm_tc_init+0xc8>
8000e548:	30 0b       	mov	r11,0
8000e54a:	ee fc ff ec 	ld.w	r12,r7[-20]
8000e54e:	f0 1f 00 0d 	mcall	8000e580 <erm_tc_init+0xcc>
	
	// Start the timer/counter.
	tc_start(tc, ERM_TC_CHANNEL_ID);
8000e552:	30 0b       	mov	r11,0
8000e554:	ee fc ff ec 	ld.w	r12,r7[-20]
8000e558:	f0 1f 00 0b 	mcall	8000e584 <erm_tc_init+0xd0>
}
8000e55c:	2f 9d       	sub	sp,-28
8000e55e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000e562:	00 00       	add	r0,r0
8000e564:	80 00       	ld.sh	r0,r0[0x0]
8000e566:	43 58       	lddsp	r8,sp[0xd4]
8000e568:	80 00       	ld.sh	r0,r0[0x0]
8000e56a:	ef 02 80 00 	ld.sh	r2,r7[-32768]
8000e56e:	ee 20 80 00 	sub	r0,950272
8000e572:	ec c0 80 00 	sub	r0,r6,-32768
8000e576:	ef 72 80 00 	stcond	r7[-32768],r2
8000e57a:	45 20       	lddsp	r0,sp[0x148]
8000e57c:	80 01       	ld.sh	r1,r0[0x0]
8000e57e:	4e 08       	lddpc	r8,8000e6fc <lcd_spi_init>
8000e580:	80 00       	ld.sh	r0,r0[0x0]
8000e582:	41 70       	lddsp	r0,sp[0x5c]
8000e584:	80 00       	ld.sh	r0,r0[0x0]
8000e586:	44 ac       	lddsp	r12,sp[0x128]

8000e588 <erm_cdc_print>:

#ifndef ERM_CDC_H_
#define ERM_CDC_H_

static void erm_cdc_print(char *input_string)
{
8000e588:	eb cd 40 80 	pushm	r7,lr
8000e58c:	1a 97       	mov	r7,sp
8000e58e:	20 1d       	sub	sp,4
8000e590:	ef 4c ff fc 	st.w	r7[-4],r12
	while (*input_string)
8000e594:	c0 c8       	rjmp	8000e5ac <erm_cdc_print+0x24>
	{
		udi_cdc_putc(*input_string);
8000e596:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000e59a:	11 88       	ld.ub	r8,r8[0x0]
8000e59c:	10 9c       	mov	r12,r8
8000e59e:	f0 1f 00 08 	mcall	8000e5bc <erm_cdc_print+0x34>
		*input_string++;
8000e5a2:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000e5a6:	2f f8       	sub	r8,-1
8000e5a8:	ef 48 ff fc 	st.w	r7[-4],r8
#ifndef ERM_CDC_H_
#define ERM_CDC_H_

static void erm_cdc_print(char *input_string)
{
	while (*input_string)
8000e5ac:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000e5b0:	11 88       	ld.ub	r8,r8[0x0]
8000e5b2:	58 08       	cp.w	r8,0
8000e5b4:	cf 11       	brne	8000e596 <erm_cdc_print+0xe>
	{
		udi_cdc_putc(*input_string);
		*input_string++;
	}
}
8000e5b6:	2f fd       	sub	sp,-4
8000e5b8:	e3 cd 80 80 	ldm	sp++,r7,pc
8000e5bc:	80 00       	ld.sh	r0,r0[0x0]
8000e5be:	70 50       	ld.w	r0,r8[0x14]

8000e5c0 <erm_cdc_println>:


static void erm_cdc_println(char *input_string)
{
8000e5c0:	eb cd 40 80 	pushm	r7,lr
8000e5c4:	1a 97       	mov	r7,sp
8000e5c6:	20 1d       	sub	sp,4
8000e5c8:	ef 4c ff fc 	st.w	r7[-4],r12
	while (*input_string)
8000e5cc:	c0 c8       	rjmp	8000e5e4 <erm_cdc_println+0x24>
	{
		udi_cdc_putc(*input_string);
8000e5ce:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000e5d2:	11 88       	ld.ub	r8,r8[0x0]
8000e5d4:	10 9c       	mov	r12,r8
8000e5d6:	f0 1f 00 0b 	mcall	8000e600 <erm_cdc_println+0x40>
		*input_string++;
8000e5da:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000e5de:	2f f8       	sub	r8,-1
8000e5e0:	ef 48 ff fc 	st.w	r7[-4],r8
}


static void erm_cdc_println(char *input_string)
{
	while (*input_string)
8000e5e4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000e5e8:	11 88       	ld.ub	r8,r8[0x0]
8000e5ea:	58 08       	cp.w	r8,0
8000e5ec:	cf 11       	brne	8000e5ce <erm_cdc_println+0xe>
	{
		udi_cdc_putc(*input_string);
		*input_string++;
	}
	udi_cdc_putc('\r');
8000e5ee:	30 dc       	mov	r12,13
8000e5f0:	f0 1f 00 04 	mcall	8000e600 <erm_cdc_println+0x40>
	udi_cdc_putc('\n');
8000e5f4:	30 ac       	mov	r12,10
8000e5f6:	f0 1f 00 03 	mcall	8000e600 <erm_cdc_println+0x40>
}
8000e5fa:	2f fd       	sub	sp,-4
8000e5fc:	e3 cd 80 80 	ldm	sp++,r7,pc
8000e600:	80 00       	ld.sh	r0,r0[0x0]
8000e602:	70 50       	ld.w	r0,r8[0x14]

8000e604 <erm_sd_mmc_pin_init>:
	.modfdis      = 1
};


static void erm_sd_mmc_pin_init(void)
{
8000e604:	eb cd 40 80 	pushm	r7,lr
8000e608:	1a 97       	mov	r7,sp
		{SD_MMC_SPI_NPCS_PIN, SD_MMC_SPI_NPCS_FUNCTION}   // Chip Select NPCS.
	};


	// Assign I/Os to SPI.
	gpio_enable_module(SD_MMC_SPI_GPIO_MAP,
8000e60a:	30 4b       	mov	r11,4
8000e60c:	48 3c       	lddpc	r12,8000e618 <erm_sd_mmc_pin_init+0x14>
8000e60e:	f0 1f 00 04 	mcall	8000e61c <erm_sd_mmc_pin_init+0x18>
	sizeof(SD_MMC_SPI_GPIO_MAP) / sizeof(SD_MMC_SPI_GPIO_MAP[0]));
}
8000e612:	e3 cd 80 80 	ldm	sp++,r7,pc
8000e616:	00 00       	add	r0,r0
8000e618:	80 01       	ld.sh	r1,r0[0x0]
8000e61a:	4d e8       	lddpc	r8,8000e790 <push_button_0_interrupt_init+0x2c>
8000e61c:	80 00       	ld.sh	r0,r0[0x0]
8000e61e:	d9 d8       	*unknown*

8000e620 <erm_sd_mmc_init>:

static void erm_sd_mmc_init(uint32_t pba_clk)
{
8000e620:	eb cd 40 80 	pushm	r7,lr
8000e624:	1a 97       	mov	r7,sp
8000e626:	20 1d       	sub	sp,4
8000e628:	ef 4c ff fc 	st.w	r7[-4],r12
	// Initialize as master.
	spi_initMaster(SD_MMC_SPI, &erm_sd_mmc_spiOptions);
8000e62c:	49 3b       	lddpc	r11,8000e678 <erm_sd_mmc_init+0x58>
8000e62e:	fe 7c 28 00 	mov	r12,-55296
8000e632:	f0 1f 00 13 	mcall	8000e67c <erm_sd_mmc_init+0x5c>

	// Set SPI selection mode: variable_ps, pcs_decode, delay.
	spi_selectionMode(SD_MMC_SPI, 0, 0, 0);
8000e636:	30 09       	mov	r9,0
8000e638:	30 0a       	mov	r10,0
8000e63a:	30 0b       	mov	r11,0
8000e63c:	fe 7c 28 00 	mov	r12,-55296
8000e640:	f0 1f 00 10 	mcall	8000e680 <erm_sd_mmc_init+0x60>

	// Enable SPI module.
	spi_enable(SD_MMC_SPI);
8000e644:	fe 7c 28 00 	mov	r12,-55296
8000e648:	f0 1f 00 0f 	mcall	8000e684 <erm_sd_mmc_init+0x64>

	// Initialize SD/MMC driver with SPI clock (PBA).
	sd_mmc_spi_init(erm_sd_mmc_spiOptions, pba_clk);
8000e64c:	48 b8       	lddpc	r8,8000e678 <erm_sd_mmc_init+0x58>
8000e64e:	20 4d       	sub	sp,16
8000e650:	1a 99       	mov	r9,sp
8000e652:	12 9a       	mov	r10,r9
8000e654:	10 9b       	mov	r11,r8
8000e656:	f6 e8 00 00 	ld.d	r8,r11[0]
8000e65a:	f4 e9 00 00 	st.d	r10[0],r8
8000e65e:	f6 e8 00 08 	ld.d	r8,r11[8]
8000e662:	f4 e9 00 08 	st.d	r10[8],r8
8000e666:	ee fc ff fc 	ld.w	r12,r7[-4]
8000e66a:	f0 1f 00 08 	mcall	8000e688 <erm_sd_mmc_init+0x68>
8000e66e:	2f cd       	sub	sp,-16
}
8000e670:	2f fd       	sub	sp,-4
8000e672:	e3 cd 80 80 	ldm	sp++,r7,pc
8000e676:	00 00       	add	r0,r0
8000e678:	00 00       	add	r0,r0
8000e67a:	00 b8       	st.h	r0++,r8
8000e67c:	80 00       	ld.sh	r0,r0[0x0]
8000e67e:	85 90       	st.w	r2[0x24],r0
8000e680:	80 00       	ld.sh	r0,r0[0x0]
8000e682:	86 24       	ld.sh	r4,r3[0x4]
8000e684:	80 00       	ld.sh	r0,r0[0x0]
8000e686:	89 40       	st.w	r4[0x10],r0
8000e688:	80 00       	ld.sh	r0,r0[0x0]
8000e68a:	32 5c       	mov	r12,37

8000e68c <adc_pot_init>:

#ifndef ADC_POT_H_
#define ADC_POT_H_

static void adc_pot_init(void)
{
8000e68c:	eb cd 40 80 	pushm	r7,lr
8000e690:	1a 97       	mov	r7,sp
8000e692:	20 2d       	sub	sp,8
	// Define Potentiometer GIPO options
	const gpio_map_t ADC_GPIO_MAP ={
		{ADC_POTENTIOMETER_PIN, ADC_POTENTIOMETER_FUNCTION}
	};
8000e694:	31 68       	mov	r8,22
8000e696:	ef 48 ff f8 	st.w	r7[-8],r8
8000e69a:	30 08       	mov	r8,0
8000e69c:	ef 48 ff fc 	st.w	r7[-4],r8
	
	// Assign I/O
	gpio_enable_module(ADC_GPIO_MAP, 
8000e6a0:	ee c8 00 08 	sub	r8,r7,8
8000e6a4:	30 1b       	mov	r11,1
8000e6a6:	10 9c       	mov	r12,r8
8000e6a8:	f0 1f 00 0b 	mcall	8000e6d4 <adc_pot_init+0x48>
	
	// Configure the ADC peripheral module.
	// Lower the ADC clock to match the ADC characteristics (because we
	// configured the CPU clock to 12MHz, and the ADC clock characteristics are
	// usually lower; cf. the ADC Characteristic section in the datasheet).
	AVR32_ADC.mr |= 0x1 << AVR32_ADC_MR_PRESCAL_OFFSET;
8000e6ac:	fe 78 3c 00 	mov	r8,-50176
8000e6b0:	fe 79 3c 00 	mov	r9,-50176
8000e6b4:	72 19       	ld.w	r9,r9[0x4]
8000e6b6:	a9 a9       	sbr	r9,0x8
8000e6b8:	91 19       	st.w	r8[0x4],r9
	adc_configure(&AVR32_ADC);
8000e6ba:	fe 7c 3c 00 	mov	r12,-50176
8000e6be:	f0 1f 00 07 	mcall	8000e6d8 <adc_pot_init+0x4c>
	
	// Enable ADC
	adc_enable(&AVR32_ADC, ADC_POTENTIOMETER_CHANNEL);
8000e6c2:	30 1b       	mov	r11,1
8000e6c4:	fe 7c 3c 00 	mov	r12,-50176
8000e6c8:	f0 1f 00 05 	mcall	8000e6dc <adc_pot_init+0x50>
}
8000e6cc:	2f ed       	sub	sp,-8
8000e6ce:	e3 cd 80 80 	ldm	sp++,r7,pc
8000e6d2:	00 00       	add	r0,r0
8000e6d4:	80 00       	ld.sh	r0,r0[0x0]
8000e6d6:	d9 d8       	*unknown*
8000e6d8:	80 00       	ld.sh	r0,r0[0x0]
8000e6da:	3e 6c       	mov	r12,-26
8000e6dc:	80 00       	ld.sh	r0,r0[0x0]
8000e6de:	3e bc       	mov	r12,-21

8000e6e0 <lcd_spi_pin_init>:
	.spi_mode     = SPI_MODE_0,			// Select SPI mode
	.modfdis      = 1					// Disable mode fault detection
};

void lcd_spi_pin_init(void)
{
8000e6e0:	eb cd 40 80 	pushm	r7,lr
8000e6e4:	1a 97       	mov	r7,sp
		{DIP204_SPI_MOSI_PIN, DIP204_SPI_MOSI_FUNCTION},  // MOSI.
		{DIP204_SPI_NPCS_PIN, DIP204_SPI_NPCS_FUNCTION}   // Chip Select NPCS.
	};
	
	// Assign I/Os to SPI
	gpio_enable_module(DIP204_SPI_GPIO_MAP,
8000e6e6:	30 4b       	mov	r11,4
8000e6e8:	48 3c       	lddpc	r12,8000e6f4 <lcd_spi_pin_init+0x14>
8000e6ea:	f0 1f 00 04 	mcall	8000e6f8 <lcd_spi_pin_init+0x18>
	sizeof(DIP204_SPI_GPIO_MAP) / sizeof(DIP204_SPI_GPIO_MAP[0]));
}
8000e6ee:	e3 cd 80 80 	ldm	sp++,r7,pc
8000e6f2:	00 00       	add	r0,r0
8000e6f4:	80 01       	ld.sh	r1,r0[0x0]
8000e6f6:	4d c8       	lddpc	r8,8000e864 <decode_command+0x30>
8000e6f8:	80 00       	ld.sh	r0,r0[0x0]
8000e6fa:	d9 d8       	*unknown*

8000e6fc <lcd_spi_init>:

void lcd_spi_init(uint32_t pba_freq)
{
8000e6fc:	eb cd 40 80 	pushm	r7,lr
8000e700:	1a 97       	mov	r7,sp
8000e702:	20 1d       	sub	sp,4
8000e704:	ef 4c ff fc 	st.w	r7[-4],r12
	spi_initMaster(DIP204_SPI, &erm_lcd_spiOptions);				// Initialize the AVR32 as SPI MASTER
8000e708:	49 0b       	lddpc	r11,8000e748 <lcd_spi_init+0x4c>
8000e70a:	fe 7c 28 00 	mov	r12,-55296
8000e70e:	f0 1f 00 10 	mcall	8000e74c <lcd_spi_init+0x50>
	spi_selectionMode(DIP204_SPI, 0, 0, 0);							// Set selection mode: variable_ps, pcs_decode, delay
8000e712:	30 09       	mov	r9,0
8000e714:	30 0a       	mov	r10,0
8000e716:	30 0b       	mov	r11,0
8000e718:	fe 7c 28 00 	mov	r12,-55296
8000e71c:	f0 1f 00 0d 	mcall	8000e750 <lcd_spi_init+0x54>
	spi_enable(DIP204_SPI);											// Enable SPI
8000e720:	fe 7c 28 00 	mov	r12,-55296
8000e724:	f0 1f 00 0c 	mcall	8000e754 <lcd_spi_init+0x58>
	spi_setupChipReg(DIP204_SPI, &erm_lcd_spiOptions, pba_freq);	// Configure registers on MASTER
8000e728:	ee fa ff fc 	ld.w	r10,r7[-4]
8000e72c:	48 7b       	lddpc	r11,8000e748 <lcd_spi_init+0x4c>
8000e72e:	fe 7c 28 00 	mov	r12,-55296
8000e732:	f0 1f 00 0a 	mcall	8000e758 <lcd_spi_init+0x5c>
	dip204_init(backlight_IO, true);								// Initialize LCD
8000e736:	30 1b       	mov	r11,1
8000e738:	30 0c       	mov	r12,0
8000e73a:	f0 1f 00 09 	mcall	8000e75c <lcd_spi_init+0x60>
	dip204_hide_cursor();											// Hide cursor
8000e73e:	f0 1f 00 09 	mcall	8000e760 <lcd_spi_init+0x64>
}
8000e742:	2f fd       	sub	sp,-4
8000e744:	e3 cd 80 80 	ldm	sp++,r7,pc
8000e748:	00 00       	add	r0,r0
8000e74a:	00 c8       	st.b	r0++,r8
8000e74c:	80 00       	ld.sh	r0,r0[0x0]
8000e74e:	85 90       	st.w	r2[0x24],r0
8000e750:	80 00       	ld.sh	r0,r0[0x0]
8000e752:	86 24       	ld.sh	r4,r3[0x4]
8000e754:	80 00       	ld.sh	r0,r0[0x0]
8000e756:	89 40       	st.w	r4[0x10],r0
8000e758:	80 00       	ld.sh	r0,r0[0x0]
8000e75a:	87 bc       	st.w	r3[0x2c],r12
8000e75c:	80 00       	ld.sh	r0,r0[0x0]
8000e75e:	20 7c       	sub	r12,7
8000e760:	80 00       	ld.sh	r0,r0[0x0]
8000e762:	2b 58       	sub	r8,-75

8000e764 <push_button_0_interrupt_init>:

#ifndef INTERRUPTS_INIT_H_
#define INTERRUPTS_INIT_H_

static void push_button_0_interrupt_init(__int_handler handler, uint32_t priority)
{
8000e764:	eb cd 40 80 	pushm	r7,lr
8000e768:	1a 97       	mov	r7,sp
8000e76a:	20 2d       	sub	sp,8
8000e76c:	ef 4c ff fc 	st.w	r7[-4],r12
8000e770:	ef 4b ff f8 	st.w	r7[-8],r11
	// Define handler and configure interrupt with correct priority
	INTC_register_interrupt(handler,
8000e774:	ee fa ff f8 	ld.w	r10,r7[-8]
8000e778:	34 bb       	mov	r11,75
8000e77a:	ee fc ff fc 	ld.w	r12,r7[-4]
8000e77e:	f0 1f 00 05 	mcall	8000e790 <push_button_0_interrupt_init+0x2c>
							AVR32_GPIO_IRQ_0 + (GPIO_PUSH_BUTTON_0/8),
							priority);
	
	// Enable falling edge interrupt on Push Button 1
	gpio_enable_pin_interrupt(GPIO_PUSH_BUTTON_0, GPIO_FALLING_EDGE);
8000e782:	30 2b       	mov	r11,2
8000e784:	35 8c       	mov	r12,88
8000e786:	f0 1f 00 04 	mcall	8000e794 <push_button_0_interrupt_init+0x30>
}
8000e78a:	2f ed       	sub	sp,-8
8000e78c:	e3 cd 80 80 	ldm	sp++,r7,pc
8000e790:	80 00       	ld.sh	r0,r0[0x0]
8000e792:	e0 bc       	*unknown*
8000e794:	80 00       	ld.sh	r0,r0[0x0]
8000e796:	de ac       	*unknown*

8000e798 <erm_tc_interrupt_init>:
	gpio_enable_pin_interrupt(GPIO_PUSH_BUTTON_1, GPIO_FALLING_EDGE);
}


static void erm_tc_interrupt_init(__int_handler handler, uint32_t priority)
{
8000e798:	eb cd 40 80 	pushm	r7,lr
8000e79c:	1a 97       	mov	r7,sp
8000e79e:	20 2d       	sub	sp,8
8000e7a0:	ef 4c ff fc 	st.w	r7[-4],r12
8000e7a4:	ef 4b ff f8 	st.w	r7[-8],r11
	// Define handler and configure interrupt with correct priority
	INTC_register_interrupt(handler, AVR32_TC_IRQ0, priority);
8000e7a8:	ee fa ff f8 	ld.w	r10,r7[-8]
8000e7ac:	e0 6b 01 c0 	mov	r11,448
8000e7b0:	ee fc ff fc 	ld.w	r12,r7[-4]
8000e7b4:	f0 1f 00 03 	mcall	8000e7c0 <erm_tc_interrupt_init+0x28>
}
8000e7b8:	2f ed       	sub	sp,-8
8000e7ba:	e3 cd 80 80 	ldm	sp++,r7,pc
8000e7be:	00 00       	add	r0,r0
8000e7c0:	80 00       	ld.sh	r0,r0[0x0]
8000e7c2:	e0 bc       	*unknown*

8000e7c4 <erm_tc_handler>:
__attribute__((__interrupt__))
#elif __ICCAVR32__
__interrupt
#endif
static void erm_tc_handler(void)
{	
8000e7c4:	eb cd 40 80 	pushm	r7,lr
8000e7c8:	1a 97       	mov	r7,sp
	// Set interrupt identifier
	interrupt_identifier = INT_TC;
8000e7ca:	48 69       	lddpc	r9,8000e7e0 <erm_tc_handler+0x1c>
8000e7cc:	30 18       	mov	r8,1
8000e7ce:	b2 88       	st.b	r9[0x0],r8
	
	// Clear TC interrupt flag
	tc_read_sr((&AVR32_TC), 0);
8000e7d0:	30 0b       	mov	r11,0
8000e7d2:	fe 7c 38 00 	mov	r12,-51200
8000e7d6:	f0 1f 00 04 	mcall	8000e7e4 <erm_tc_handler+0x20>
}
8000e7da:	e3 cd 40 80 	ldm	sp++,r7,lr
8000e7de:	d6 03       	rete
8000e7e0:	00 00       	add	r0,r0
8000e7e2:	08 b8       	st.h	r4++,r8
8000e7e4:	80 00       	ld.sh	r0,r0[0x0]
8000e7e6:	44 e6       	lddsp	r6,sp[0x138]

8000e7e8 <push_button_handler>:
__attribute__((__interrupt__))
#elif __ICCAVR32__
__interrupt
#endif
static void push_button_handler(void)
{
8000e7e8:	eb cd 40 80 	pushm	r7,lr
8000e7ec:	1a 97       	mov	r7,sp
	if (gpio_get_pin_interrupt_flag(GPIO_PUSH_BUTTON_0))
8000e7ee:	35 8c       	mov	r12,88
8000e7f0:	f0 1f 00 0c 	mcall	8000e820 <push_button_handler+0x38>
8000e7f4:	18 98       	mov	r8,r12
8000e7f6:	58 08       	cp.w	r8,0
8000e7f8:	c1 10       	breq	8000e81a <push_button_handler+0x32>
	{
		if (update_identifier != ERM_IDLE)
8000e7fa:	48 b8       	lddpc	r8,8000e824 <push_button_handler+0x3c>
8000e7fc:	11 88       	ld.ub	r8,r8[0x0]
8000e7fe:	58 08       	cp.w	r8,0
8000e800:	c0 a0       	breq	8000e814 <push_button_handler+0x2c>
		{	
			// Set interrupt_identifier
			interrupt_identifier	= INT_PB0;
8000e802:	48 a9       	lddpc	r9,8000e828 <push_button_handler+0x40>
8000e804:	30 28       	mov	r8,2
8000e806:	b2 88       	st.b	r9[0x0],r8
			
			// Set commence_program identifier
			commence_program	= true;
8000e808:	48 99       	lddpc	r9,8000e82c <push_button_handler+0x44>
8000e80a:	30 18       	mov	r8,1
8000e80c:	b2 88       	st.b	r9[0x0],r8
			
			// Set update_display to LCD_INITIAL
			update_identifier	= ERM_INITIAL;
8000e80e:	48 69       	lddpc	r9,8000e824 <push_button_handler+0x3c>
8000e810:	30 18       	mov	r8,1
8000e812:	b2 88       	st.b	r9[0x0],r8
		}
		
		// Clear interrupt flag to allow new interrupts
		gpio_clear_pin_interrupt_flag(GPIO_PUSH_BUTTON_0);
8000e814:	35 8c       	mov	r12,88
8000e816:	f0 1f 00 07 	mcall	8000e830 <push_button_handler+0x48>
	}
}
8000e81a:	e3 cd 40 80 	ldm	sp++,r7,lr
8000e81e:	d6 03       	rete
8000e820:	80 00       	ld.sh	r0,r0[0x0]
8000e822:	df 20       	acall	0xf2
8000e824:	00 00       	add	r0,r0
8000e826:	00 d8       	st.w	--r0,r8
8000e828:	00 00       	add	r0,r0
8000e82a:	08 b8       	st.h	r4++,r8
8000e82c:	00 00       	add	r0,r0
8000e82e:	08 b9       	st.h	r4++,r9
8000e830:	80 00       	ld.sh	r0,r0[0x0]
8000e832:	df 5e       	*unknown*

8000e834 <decode_command>:



static void decode_command(void)
{
8000e834:	eb cd 40 80 	pushm	r7,lr
8000e838:	1a 97       	mov	r7,sp
	if (!strcmp(command_string, "start"))
8000e83a:	49 db       	lddpc	r11,8000e8ac <decode_command+0x78>
8000e83c:	49 dc       	lddpc	r12,8000e8b0 <decode_command+0x7c>
8000e83e:	f0 1f 00 1e 	mcall	8000e8b4 <decode_command+0x80>
8000e842:	18 98       	mov	r8,r12
8000e844:	58 08       	cp.w	r8,0
8000e846:	c1 11       	brne	8000e868 <decode_command+0x34>
	{
		command = START_COMMAND;
8000e848:	49 c9       	lddpc	r9,8000e8b8 <decode_command+0x84>
8000e84a:	30 18       	mov	r8,1
8000e84c:	b2 88       	st.b	r9[0x0],r8
		update_identifier = ERM_RUNNING;
8000e84e:	49 c9       	lddpc	r9,8000e8bc <decode_command+0x88>
8000e850:	30 28       	mov	r8,2
8000e852:	b2 88       	st.b	r9[0x0],r8
		erm_cdc_println("\r\nStart command recognized!");
8000e854:	49 bc       	lddpc	r12,8000e8c0 <decode_command+0x8c>
8000e856:	f0 1f 00 1c 	mcall	8000e8c4 <decode_command+0x90>
		erm_cdc_println("Logging POT values to SD/MMC...");
8000e85a:	49 cc       	lddpc	r12,8000e8c8 <decode_command+0x94>
8000e85c:	f0 1f 00 1a 	mcall	8000e8c4 <decode_command+0x90>
		erm_cdc_print("\r\n>>");
8000e860:	49 bc       	lddpc	r12,8000e8cc <decode_command+0x98>
8000e862:	f0 1f 00 1c 	mcall	8000e8d0 <decode_command+0x9c>
8000e866:	c2 18       	rjmp	8000e8a8 <decode_command+0x74>
	}
	
	else if (!strcmp(command_string, "stop"))
8000e868:	49 bb       	lddpc	r11,8000e8d4 <decode_command+0xa0>
8000e86a:	49 2c       	lddpc	r12,8000e8b0 <decode_command+0x7c>
8000e86c:	f0 1f 00 12 	mcall	8000e8b4 <decode_command+0x80>
8000e870:	18 98       	mov	r8,r12
8000e872:	58 08       	cp.w	r8,0
8000e874:	c1 11       	brne	8000e896 <decode_command+0x62>
	{
		command = STOP_COMMAND;
8000e876:	49 19       	lddpc	r9,8000e8b8 <decode_command+0x84>
8000e878:	30 28       	mov	r8,2
8000e87a:	b2 88       	st.b	r9[0x0],r8
		update_identifier = ERM_STOPPED;
8000e87c:	49 09       	lddpc	r9,8000e8bc <decode_command+0x88>
8000e87e:	30 38       	mov	r8,3
8000e880:	b2 88       	st.b	r9[0x0],r8
		erm_cdc_println("\r\nStop command recognized!");
8000e882:	49 6c       	lddpc	r12,8000e8d8 <decode_command+0xa4>
8000e884:	f0 1f 00 10 	mcall	8000e8c4 <decode_command+0x90>
		erm_cdc_println("Logging has stopped!");
8000e888:	49 5c       	lddpc	r12,8000e8dc <decode_command+0xa8>
8000e88a:	f0 1f 00 0f 	mcall	8000e8c4 <decode_command+0x90>
		erm_cdc_print("\r\n>>");
8000e88e:	49 0c       	lddpc	r12,8000e8cc <decode_command+0x98>
8000e890:	f0 1f 00 10 	mcall	8000e8d0 <decode_command+0x9c>
8000e894:	c0 a8       	rjmp	8000e8a8 <decode_command+0x74>
	}
	
	else
	{
		command	= NO_COMMAND;
8000e896:	48 99       	lddpc	r9,8000e8b8 <decode_command+0x84>
8000e898:	30 08       	mov	r8,0
8000e89a:	b2 88       	st.b	r9[0x0],r8
		erm_cdc_println("\r\nInvalid command, try again!");
8000e89c:	49 1c       	lddpc	r12,8000e8e0 <decode_command+0xac>
8000e89e:	f0 1f 00 0a 	mcall	8000e8c4 <decode_command+0x90>
		erm_cdc_print("\r\n>>");
8000e8a2:	48 bc       	lddpc	r12,8000e8cc <decode_command+0x98>
8000e8a4:	f0 1f 00 0b 	mcall	8000e8d0 <decode_command+0x9c>
	}
}
8000e8a8:	e3 cd 80 80 	ldm	sp++,r7,pc
8000e8ac:	80 00       	ld.sh	r0,r0[0x0]
8000e8ae:	e1 d0 00 00 	ldins.h	r0:b,r0[0]
8000e8b2:	0e 50       	eor	r0,r7
8000e8b4:	80 00       	ld.sh	r0,r0[0x0]
8000e8b6:	f3 a4 00 00 	ldc0.d	cr0,r4[0x0]
8000e8ba:	08 ba       	st.h	r4++,r10
8000e8bc:	00 00       	add	r0,r0
8000e8be:	00 d8       	st.w	--r0,r8
8000e8c0:	80 00       	ld.sh	r0,r0[0x0]
8000e8c2:	e1 d8 80 00 	ldswp.w	r8,r0[0]
8000e8c6:	e5 c0 80 00 	ldmts	r0,pc
8000e8ca:	e1 f4 80 00 	ld.wls	r4,r0[0x0]
8000e8ce:	e2 14 80 00 	andl	r4,0x8000,COH
8000e8d2:	e5 88       	*unknown*
8000e8d4:	80 00       	ld.sh	r0,r0[0x0]
8000e8d6:	e2 1c 80 00 	andl	r12,0x8000,COH
8000e8da:	e2 24 80 00 	sub	r4,163840
8000e8de:	e2 40 80 00 	cp.w	r0,163840
8000e8e2:	e2 58 eb cd 	cp.w	r8,256973

8000e8e4 <build_cmd>:



static void build_cmd(void)
{
8000e8e4:	eb cd 40 80 	pushm	r7,lr
8000e8e8:	1a 97       	mov	r7,sp
8000e8ea:	20 1d       	sub	sp,4
	char rx_character;
	
	if (udi_cdc_is_rx_ready())
8000e8ec:	f0 1f 00 27 	mcall	8000e988 <build_cmd+0xa4>
8000e8f0:	18 98       	mov	r8,r12
8000e8f2:	58 08       	cp.w	r8,0
8000e8f4:	c4 70       	breq	8000e982 <build_cmd+0x9e>
	{
		udi_cdc_read_buf(&rx_character, 1);
8000e8f6:	ee c8 00 01 	sub	r8,r7,1
8000e8fa:	30 1b       	mov	r11,1
8000e8fc:	10 9c       	mov	r12,r8
8000e8fe:	f0 1f 00 24 	mcall	8000e98c <build_cmd+0xa8>
		
		switch (rx_character)
8000e902:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000e906:	58 88       	cp.w	r8,8
8000e908:	c1 80       	breq	8000e938 <build_cmd+0x54>
8000e90a:	58 d8       	cp.w	r8,13
8000e90c:	c2 61       	brne	8000e958 <build_cmd+0x74>
		{
			case '\r':
			// Echo back to CDC
			udi_cdc_putc(rx_character);
8000e90e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000e912:	10 9c       	mov	r12,r8
8000e914:	f0 1f 00 1f 	mcall	8000e990 <build_cmd+0xac>
			udi_cdc_putc('\n');
8000e918:	30 ac       	mov	r12,10
8000e91a:	f0 1f 00 1e 	mcall	8000e990 <build_cmd+0xac>
			// Add NULL to command string
			command_string[command_string_counter] = '\0';
8000e91e:	49 e8       	lddpc	r8,8000e994 <build_cmd+0xb0>
8000e920:	11 88       	ld.ub	r8,r8[0x0]
8000e922:	10 99       	mov	r9,r8
8000e924:	49 da       	lddpc	r10,8000e998 <build_cmd+0xb4>
8000e926:	30 08       	mov	r8,0
8000e928:	f4 09 0b 08 	st.b	r10[r9],r8
			// Decode command
			decode_command();
8000e92c:	f0 1f 00 1c 	mcall	8000e99c <build_cmd+0xb8>
			// Reset command string counter
			command_string_counter = 0;
8000e930:	49 99       	lddpc	r9,8000e994 <build_cmd+0xb0>
8000e932:	30 08       	mov	r8,0
8000e934:	b2 88       	st.b	r9[0x0],r8
			break;
8000e936:	c2 68       	rjmp	8000e982 <build_cmd+0x9e>
			
			case '\b':
			if (command_string_counter > 0)
8000e938:	49 78       	lddpc	r8,8000e994 <build_cmd+0xb0>
8000e93a:	11 88       	ld.ub	r8,r8[0x0]
8000e93c:	58 08       	cp.w	r8,0
8000e93e:	c2 10       	breq	8000e980 <build_cmd+0x9c>
			{
				// Echo back to CDC
				udi_cdc_putc(rx_character);
8000e940:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000e944:	10 9c       	mov	r12,r8
8000e946:	f0 1f 00 13 	mcall	8000e990 <build_cmd+0xac>
				// Decrease command string counter
				command_string_counter--;
8000e94a:	49 38       	lddpc	r8,8000e994 <build_cmd+0xb0>
8000e94c:	11 88       	ld.ub	r8,r8[0x0]
8000e94e:	20 18       	sub	r8,1
8000e950:	5c 58       	castu.b	r8
8000e952:	49 19       	lddpc	r9,8000e994 <build_cmd+0xb0>
8000e954:	b2 88       	st.b	r9[0x0],r8
			}
			break;
8000e956:	c1 68       	rjmp	8000e982 <build_cmd+0x9e>
			
			default:
			// Echo back to CDC
			udi_cdc_putc(rx_character);
8000e958:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000e95c:	10 9c       	mov	r12,r8
8000e95e:	f0 1f 00 0d 	mcall	8000e990 <build_cmd+0xac>
			// Append to command string
			command_string[command_string_counter] = rx_character;
8000e962:	48 d8       	lddpc	r8,8000e994 <build_cmd+0xb0>
8000e964:	11 88       	ld.ub	r8,r8[0x0]
8000e966:	10 99       	mov	r9,r8
8000e968:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000e96c:	48 ba       	lddpc	r10,8000e998 <build_cmd+0xb4>
8000e96e:	f4 09 0b 08 	st.b	r10[r9],r8
			command_string_counter++;
8000e972:	48 98       	lddpc	r8,8000e994 <build_cmd+0xb0>
8000e974:	11 88       	ld.ub	r8,r8[0x0]
8000e976:	2f f8       	sub	r8,-1
8000e978:	5c 58       	castu.b	r8
8000e97a:	48 79       	lddpc	r9,8000e994 <build_cmd+0xb0>
8000e97c:	b2 88       	st.b	r9[0x0],r8
8000e97e:	c0 28       	rjmp	8000e982 <build_cmd+0x9e>
				// Echo back to CDC
				udi_cdc_putc(rx_character);
				// Decrease command string counter
				command_string_counter--;
			}
			break;
8000e980:	d7 03       	nop
			command_string[command_string_counter] = rx_character;
			command_string_counter++;
			break;
		}
	}
}
8000e982:	2f fd       	sub	sp,-4
8000e984:	e3 cd 80 80 	ldm	sp++,r7,pc
8000e988:	80 00       	ld.sh	r0,r0[0x0]
8000e98a:	6c 64       	ld.w	r4,r6[0x18]
8000e98c:	80 00       	ld.sh	r0,r0[0x0]
8000e98e:	6e 0c       	ld.w	r12,r7[0x0]
8000e990:	80 00       	ld.sh	r0,r0[0x0]
8000e992:	70 50       	ld.w	r0,r8[0x14]
8000e994:	00 00       	add	r0,r0
8000e996:	08 bb       	st.h	r4++,r11
8000e998:	00 00       	add	r0,r0
8000e99a:	0e 50       	eor	r0,r7
8000e99c:	80 00       	ld.sh	r0,r0[0x0]
8000e99e:	e8 34 eb cd 	sub	r4,650189

8000e9a0 <main>:



int main (void)
{
8000e9a0:	eb cd 40 80 	pushm	r7,lr
8000e9a4:	1a 97       	mov	r7,sp
8000e9a6:	20 6d       	sub	sp,24
	uint32_t	i;
	uint32_t	temp_value;
	uint32_t	pot_value;
	
	// Initialize CPU clock to 48 MHz and PBA clock to 12 MHz (conf_clock.h)
	sysclk_init();
8000e9a8:	f0 1f 00 92 	mcall	8000ebf0 <main+0x250>
	
	// Initialize the EVK1100 and its pin config
	board_init();
8000e9ac:	f0 1f 00 92 	mcall	8000ebf4 <main+0x254>
	
	// Initialize the LCD display
	lcd_spi_pin_init();
8000e9b0:	f0 1f 00 92 	mcall	8000ebf8 <main+0x258>
	lcd_spi_init(PBA_HZ);
8000e9b4:	f0 1f 00 92 	mcall	8000ebfc <main+0x25c>
8000e9b8:	18 98       	mov	r8,r12
8000e9ba:	10 9c       	mov	r12,r8
8000e9bc:	f0 1f 00 91 	mcall	8000ec00 <main+0x260>
	
	// Write start string to the LCD display
	dip204_set_cursor_position(2,2);
8000e9c0:	30 2b       	mov	r11,2
8000e9c2:	30 2c       	mov	r12,2
8000e9c4:	f0 1f 00 90 	mcall	8000ec04 <main+0x264>
	dip204_write_string("Open PC terminal");
8000e9c8:	fe fc 02 40 	ld.w	r12,pc[576]
8000e9cc:	f0 1f 00 90 	mcall	8000ec0c <main+0x26c>
	dip204_set_cursor_position(2,3);
8000e9d0:	30 3b       	mov	r11,3
8000e9d2:	30 2c       	mov	r12,2
8000e9d4:	f0 1f 00 8c 	mcall	8000ec04 <main+0x264>
	dip204_write_string("Press PB0 to start");
8000e9d8:	fe fc 02 38 	ld.w	r12,pc[568]
8000e9dc:	f0 1f 00 8c 	mcall	8000ec0c <main+0x26c>
	
	// Configure IRQs (needed for the USB CDC)
	irq_initialize_vectors();
8000e9e0:	f0 1f 00 8d 	mcall	8000ec14 <main+0x274>
	cpu_irq_enable();
8000e9e4:	d5 03       	csrf	0x10
	
	// Disable all interrupts
	Disable_global_interrupt();
8000e9e6:	d3 03       	ssrf	0x10
	
	// Initialize interrupt module
	INTC_init_interrupts();
8000e9e8:	f0 1f 00 8b 	mcall	8000ec14 <main+0x274>
	// Interrupt priority for this program should be:
	// INT3 (highest):	TC event (ADC measurement)
	// INT0 (lowest):	Push button event
	
	// Initialize TC interrupt with INT3 priority
	erm_tc_interrupt_init(&erm_tc_handler, AVR32_INTC_INT3);
8000e9ec:	30 3b       	mov	r11,3
8000e9ee:	fe fc 02 2a 	ld.w	r12,pc[554]
8000e9f2:	f0 1f 00 8b 	mcall	8000ec1c <main+0x27c>
	
	// Initialize Push Button 0 (PB0) interrupt with INT0 priority
	push_button_0_interrupt_init(&push_button_handler, AVR32_INTC_INT0);
8000e9f6:	30 0b       	mov	r11,0
8000e9f8:	fe fc 02 28 	ld.w	r12,pc[552]
8000e9fc:	f0 1f 00 8a 	mcall	8000ec24 <main+0x284>
	
	// Enable global interrupts
	Enable_global_interrupt();
8000ea00:	d5 03       	csrf	0x10
	
	// Initialize the SD/MMC
	erm_sd_mmc_pin_init();
8000ea02:	f0 1f 00 8a 	mcall	8000ec28 <main+0x288>
	erm_sd_mmc_init(PBA_HZ); 
8000ea06:	f0 1f 00 7e 	mcall	8000ebfc <main+0x25c>
8000ea0a:	18 98       	mov	r8,r12
8000ea0c:	10 9c       	mov	r12,r8
8000ea0e:	f0 1f 00 88 	mcall	8000ec2c <main+0x28c>
	
	// Initialize and enable ADC for the Potentiometer
	adc_pot_init();
8000ea12:	f0 1f 00 88 	mcall	8000ec30 <main+0x290>
	
	// Initialize and start the TC with interrupts every SAMPLING_TIME
	erm_tc_init((&AVR32_TC), SAMPLING_TIME, PBA_HZ);
8000ea16:	f0 1f 00 7a 	mcall	8000ebfc <main+0x25c>
8000ea1a:	18 98       	mov	r8,r12
8000ea1c:	10 9a       	mov	r10,r8
8000ea1e:	31 4b       	mov	r11,20
8000ea20:	fe 7c 38 00 	mov	r12,-51200
8000ea24:	f0 1f 00 84 	mcall	8000ec34 <main+0x294>
	
	// Start USB CDC
	udc_start();
8000ea28:	f0 1f 00 84 	mcall	8000ec38 <main+0x298>
	
	// Start ADC
	adc_start(&AVR32_ADC);
8000ea2c:	fe 7c 3c 00 	mov	r12,-50176
8000ea30:	f0 1f 00 83 	mcall	8000ec3c <main+0x29c>
	
	// Select and mount the FAT partition on the SD/MMC
	nav_reset();
8000ea34:	f0 1f 00 83 	mcall	8000ec40 <main+0x2a0>
	nav_drive_set(0);
8000ea38:	30 0c       	mov	r12,0
8000ea3a:	f0 1f 00 83 	mcall	8000ec44 <main+0x2a4>
	nav_partition_mount();
8000ea3e:	f0 1f 00 83 	mcall	8000ec48 <main+0x2a8>
	
	// Create the file test.txt on root if it doesn't exist already 
	nav_file_create((FS_STRING)"test.txt");
8000ea42:	fe fc 02 0a 	ld.w	r12,pc[522]
8000ea46:	f0 1f 00 83 	mcall	8000ec50 <main+0x2b0>
8000ea4a:	c0 48       	rjmp	8000ea52 <main+0xb2>
			// Reset interrupt identifier
			interrupt_identifier = INT_NONE;
		}
		
		// Otherwise do nothing
	}
8000ea4c:	d7 03       	nop
8000ea4e:	c0 28       	rjmp	8000ea52 <main+0xb2>
8000ea50:	d7 03       	nop
	nav_file_create((FS_STRING)"test.txt");
	
	// Main while loop
	while (1)
	{
		if (commence_program)
8000ea52:	fe f8 02 02 	ld.w	r8,pc[514]
8000ea56:	11 88       	ld.ub	r8,r8[0x0]
8000ea58:	58 08       	cp.w	r8,0
8000ea5a:	c0 30       	breq	8000ea60 <main+0xc0>
		{
			build_cmd();
8000ea5c:	f0 1f 00 7f 	mcall	8000ec58 <main+0x2b8>
		}
				
		if ((interrupt_identifier != INT_NONE) && commence_program)
8000ea60:	4f f8       	lddpc	r8,8000ec5c <main+0x2bc>
8000ea62:	11 88       	ld.ub	r8,r8[0x0]
8000ea64:	58 08       	cp.w	r8,0
8000ea66:	cf 30       	breq	8000ea4c <main+0xac>
8000ea68:	4f b8       	lddpc	r8,8000ec54 <main+0x2b4>
8000ea6a:	11 88       	ld.ub	r8,r8[0x0]
8000ea6c:	58 08       	cp.w	r8,0
8000ea6e:	cf 10       	breq	8000ea50 <main+0xb0>
		{
			if (interrupt_identifier == INT_TC && command == START_COMMAND)
8000ea70:	4f b8       	lddpc	r8,8000ec5c <main+0x2bc>
8000ea72:	11 89       	ld.ub	r9,r8[0x0]
8000ea74:	30 18       	mov	r8,1
8000ea76:	f0 09 18 00 	cp.b	r9,r8
8000ea7a:	c5 21       	brne	8000eb1e <main+0x17e>
8000ea7c:	4f 98       	lddpc	r8,8000ec60 <main+0x2c0>
8000ea7e:	11 89       	ld.ub	r9,r8[0x0]
8000ea80:	30 18       	mov	r8,1
8000ea82:	f0 09 18 00 	cp.b	r9,r8
8000ea86:	c4 c1       	brne	8000eb1e <main+0x17e>
			{
				// Read Potentiometer value
				pot_value = adc_get_value(&AVR32_ADC, ADC_POTENTIOMETER_CHANNEL);
8000ea88:	30 1b       	mov	r11,1
8000ea8a:	fe 7c 3c 00 	mov	r12,-50176
8000ea8e:	f0 1f 00 76 	mcall	8000ec64 <main+0x2c4>
8000ea92:	18 98       	mov	r8,r12
8000ea94:	ef 48 ff fc 	st.w	r7[-4],r8
				
				// Restart ADC
				adc_start(&AVR32_ADC);
8000ea98:	fe 7c 3c 00 	mov	r12,-50176
8000ea9c:	f0 1f 00 68 	mcall	8000ec3c <main+0x29c>
				
				// Set navigator to desired file
				if (!nav_setcwd((FS_STRING)"test.txt", true, true))
8000eaa0:	30 1a       	mov	r10,1
8000eaa2:	30 1b       	mov	r11,1
8000eaa4:	4e ac       	lddpc	r12,8000ec4c <main+0x2ac>
8000eaa6:	f0 1f 00 71 	mcall	8000ec68 <main+0x2c8>
8000eaaa:	18 98       	mov	r8,r12
8000eaac:	ec 18 00 01 	eorl	r8,0x1
8000eab0:	5c 58       	castu.b	r8
8000eab2:	c0 50       	breq	8000eabc <main+0x11c>
				{
					erm_cdc_println("error selecting sd/mmc");
8000eab4:	4e ec       	lddpc	r12,8000ec6c <main+0x2cc>
8000eab6:	f0 1f 00 6f 	mcall	8000ec70 <main+0x2d0>
8000eaba:	c3 28       	rjmp	8000eb1e <main+0x17e>
				}
				else
				{
					// Open file
					file_open(FOPEN_MODE_APPEND);
8000eabc:	30 2c       	mov	r12,2
8000eabe:	f0 1f 00 6e 	mcall	8000ec74 <main+0x2d4>
					
					// Convert pot_value to a string
					sprintf(temp_string, "%lu\x03", pot_value);
8000eac2:	ee c8 00 18 	sub	r8,r7,24
8000eac6:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000eaca:	1a d9       	st.w	--sp,r9
8000eacc:	4e bb       	lddpc	r11,8000ec78 <main+0x2d8>
8000eace:	10 9c       	mov	r12,r8
8000ead0:	f0 1f 00 6b 	mcall	8000ec7c <main+0x2dc>
8000ead4:	2f fd       	sub	sp,-4
					
					// Write value to file
					i = 0;					
8000ead6:	30 08       	mov	r8,0
8000ead8:	ef 48 ff f4 	st.w	r7[-12],r8
					while ((int) temp_string[i] != 0x03)
8000eadc:	c0 f8       	rjmp	8000eafa <main+0x15a>
					{
						file_putc((int) temp_string[i]);
8000eade:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000eae2:	ee 08 00 08 	add	r8,r7,r8
8000eae6:	f1 38 ff e8 	ld.ub	r8,r8[-24]
8000eaea:	10 9c       	mov	r12,r8
8000eaec:	f0 1f 00 65 	mcall	8000ec80 <main+0x2e0>
						i++;					
8000eaf0:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000eaf4:	2f f8       	sub	r8,-1
8000eaf6:	ef 48 ff f4 	st.w	r7[-12],r8
					// Convert pot_value to a string
					sprintf(temp_string, "%lu\x03", pot_value);
					
					// Write value to file
					i = 0;					
					while ((int) temp_string[i] != 0x03)
8000eafa:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000eafe:	ee 08 00 08 	add	r8,r7,r8
8000eb02:	f1 39 ff e8 	ld.ub	r9,r8[-24]
8000eb06:	30 38       	mov	r8,3
8000eb08:	f0 09 18 00 	cp.b	r9,r8
8000eb0c:	ce 91       	brne	8000eade <main+0x13e>
						file_putc((int) temp_string[i]);
						i++;					
					}
					
					// Add CR and LF
					file_putc('\r');
8000eb0e:	30 dc       	mov	r12,13
8000eb10:	f0 1f 00 5c 	mcall	8000ec80 <main+0x2e0>
					file_putc('\n');
8000eb14:	30 ac       	mov	r12,10
8000eb16:	f0 1f 00 5b 	mcall	8000ec80 <main+0x2e0>
					
					// Close file
					file_close();
8000eb1a:	f0 1f 00 5b 	mcall	8000ec84 <main+0x2e4>
				}
			}
			
			switch (update_identifier)
8000eb1e:	4d b8       	lddpc	r8,8000ec88 <main+0x2e8>
8000eb20:	11 88       	ld.ub	r8,r8[0x0]
8000eb22:	58 28       	cp.w	r8,2
8000eb24:	c3 30       	breq	8000eb8a <main+0x1ea>
8000eb26:	58 38       	cp.w	r8,3
8000eb28:	c4 70       	breq	8000ebb6 <main+0x216>
8000eb2a:	58 18       	cp.w	r8,1
8000eb2c:	c5 a1       	brne	8000ebe0 <main+0x240>
			{
				case ERM_INITIAL:
				// Write initial string to CDC
				erm_cdc_println("\x0C---------------------------------------------------------------------");
8000eb2e:	4d 8c       	lddpc	r12,8000ec8c <main+0x2ec>
8000eb30:	f0 1f 00 50 	mcall	8000ec70 <main+0x2d0>
				erm_cdc_println("\r\nLab 4 - Erlend R. Myklebust");
8000eb34:	4d 7c       	lddpc	r12,8000ec90 <main+0x2f0>
8000eb36:	f0 1f 00 4f 	mcall	8000ec70 <main+0x2d0>
				erm_cdc_println("\r\n---------------------------------------------------------------------");
8000eb3a:	4d 7c       	lddpc	r12,8000ec94 <main+0x2f4>
8000eb3c:	f0 1f 00 4d 	mcall	8000ec70 <main+0x2d0>
				erm_cdc_println("\r\nCommand list:");
8000eb40:	4d 6c       	lddpc	r12,8000ec98 <main+0x2f8>
8000eb42:	f0 1f 00 4c 	mcall	8000ec70 <main+0x2d0>
				erm_cdc_println("start  = start logging POT values to sd/mmc");
8000eb46:	4d 6c       	lddpc	r12,8000ec9c <main+0x2fc>
8000eb48:	f0 1f 00 4a 	mcall	8000ec70 <main+0x2d0>
				erm_cdc_println("stop   = stop logging POT values to sd/mmc");
8000eb4c:	4d 5c       	lddpc	r12,8000eca0 <main+0x300>
8000eb4e:	f0 1f 00 49 	mcall	8000ec70 <main+0x2d0>
				erm_cdc_println("\r\nType command followed by enter:");
8000eb52:	4d 5c       	lddpc	r12,8000eca4 <main+0x304>
8000eb54:	f0 1f 00 47 	mcall	8000ec70 <main+0x2d0>
				erm_cdc_print(">>");
8000eb58:	4d 4c       	lddpc	r12,8000eca8 <main+0x308>
8000eb5a:	f0 1f 00 55 	mcall	8000ecac <main+0x30c>
				// Re-initialize LCD SPI
				lcd_spi_init(PBA_HZ);
8000eb5e:	f0 1f 00 28 	mcall	8000ebfc <main+0x25c>
8000eb62:	18 98       	mov	r8,r12
8000eb64:	10 9c       	mov	r12,r8
8000eb66:	f0 1f 00 27 	mcall	8000ec00 <main+0x260>
				// Update LCD display
				dip204_clear_display();
8000eb6a:	f0 1f 00 52 	mcall	8000ecb0 <main+0x310>
				dip204_set_cursor_position(2,2);
8000eb6e:	30 2b       	mov	r11,2
8000eb70:	30 2c       	mov	r12,2
8000eb72:	f0 1f 00 25 	mcall	8000ec04 <main+0x264>
				dip204_write_string("Enter command...");
8000eb76:	4d 0c       	lddpc	r12,8000ecb4 <main+0x314>
8000eb78:	f0 1f 00 25 	mcall	8000ec0c <main+0x26c>
				// Re-initialize SD/MMC SPI
				erm_sd_mmc_init(PBA_HZ);
8000eb7c:	f0 1f 00 20 	mcall	8000ebfc <main+0x25c>
8000eb80:	18 98       	mov	r8,r12
8000eb82:	10 9c       	mov	r12,r8
8000eb84:	f0 1f 00 2a 	mcall	8000ec2c <main+0x28c>
				
				break;
8000eb88:	c2 c8       	rjmp	8000ebe0 <main+0x240>
				
				case ERM_RUNNING:
				// Re-initialize LCD SPI
				lcd_spi_init(PBA_HZ);
8000eb8a:	f0 1f 00 1d 	mcall	8000ebfc <main+0x25c>
8000eb8e:	18 98       	mov	r8,r12
8000eb90:	10 9c       	mov	r12,r8
8000eb92:	f0 1f 00 1c 	mcall	8000ec00 <main+0x260>
				dip204_clear_display();
8000eb96:	f0 1f 00 47 	mcall	8000ecb0 <main+0x310>
				dip204_set_cursor_position(2,2);
8000eb9a:	30 2b       	mov	r11,2
8000eb9c:	30 2c       	mov	r12,2
8000eb9e:	f0 1f 00 1a 	mcall	8000ec04 <main+0x264>
				dip204_write_string("Logging active...");
8000eba2:	4c 6c       	lddpc	r12,8000ecb8 <main+0x318>
8000eba4:	f0 1f 00 1a 	mcall	8000ec0c <main+0x26c>
				// Re-initialize SD/MMC SPI
				erm_sd_mmc_init(PBA_HZ);
8000eba8:	f0 1f 00 15 	mcall	8000ebfc <main+0x25c>
8000ebac:	18 98       	mov	r8,r12
8000ebae:	10 9c       	mov	r12,r8
8000ebb0:	f0 1f 00 1f 	mcall	8000ec2c <main+0x28c>
				break;
8000ebb4:	c1 68       	rjmp	8000ebe0 <main+0x240>
				
				case ERM_STOPPED:
				// Re-initialize LCD SPI
				lcd_spi_init(PBA_HZ);
8000ebb6:	f0 1f 00 12 	mcall	8000ebfc <main+0x25c>
8000ebba:	18 98       	mov	r8,r12
8000ebbc:	10 9c       	mov	r12,r8
8000ebbe:	f0 1f 00 11 	mcall	8000ec00 <main+0x260>
				dip204_clear_display();
8000ebc2:	f0 1f 00 3c 	mcall	8000ecb0 <main+0x310>
				dip204_set_cursor_position(2,2);
8000ebc6:	30 2b       	mov	r11,2
8000ebc8:	30 2c       	mov	r12,2
8000ebca:	f0 1f 00 0f 	mcall	8000ec04 <main+0x264>
				dip204_write_string("Logging stopped...");
8000ebce:	4b cc       	lddpc	r12,8000ecbc <main+0x31c>
8000ebd0:	f0 1f 00 0f 	mcall	8000ec0c <main+0x26c>
				// Re-initialize SD/MMC SPI
				erm_sd_mmc_init(PBA_HZ);
8000ebd4:	f0 1f 00 0a 	mcall	8000ebfc <main+0x25c>
8000ebd8:	18 98       	mov	r8,r12
8000ebda:	10 9c       	mov	r12,r8
8000ebdc:	f0 1f 00 14 	mcall	8000ec2c <main+0x28c>
				// Do nothing
				break;
			}
			
			// Reset update_identifier
			update_identifier = ERM_IDLE;
8000ebe0:	4a a9       	lddpc	r9,8000ec88 <main+0x2e8>
8000ebe2:	30 08       	mov	r8,0
8000ebe4:	b2 88       	st.b	r9[0x0],r8
					
			// Reset interrupt identifier
			interrupt_identifier = INT_NONE;
8000ebe6:	49 e9       	lddpc	r9,8000ec5c <main+0x2bc>
8000ebe8:	30 08       	mov	r8,0
8000ebea:	b2 88       	st.b	r9[0x0],r8
		}
		
		// Otherwise do nothing
	}
8000ebec:	c3 3b       	rjmp	8000ea52 <main+0xb2>
8000ebee:	00 00       	add	r0,r0
8000ebf0:	80 00       	ld.sh	r0,r0[0x0]
8000ebf2:	85 00       	st.w	r2[0x0],r0
8000ebf4:	80 00       	ld.sh	r0,r0[0x0]
8000ebf6:	d7 94       	*unknown*
8000ebf8:	80 00       	ld.sh	r0,r0[0x0]
8000ebfa:	e6 e0 80 00 	ld.d	r0,r3[-32768]
8000ebfe:	e4 9c 80 00 	brvs	800bebfe <_data_lma+0xa9766>
8000ec02:	e6 fc 80 00 	ld.w	r12,r3[-32768]
8000ec06:	2b 8c       	sub	r12,-72
8000ec08:	80 00       	ld.sh	r0,r0[0x0]
8000ec0a:	e2 78 80 00 	mov	r8,229376
8000ec0e:	2d 90       	sub	r0,-39
8000ec10:	80 00       	ld.sh	r0,r0[0x0]
8000ec12:	e2 8c 80 00 	brvs	8005ec12 <_data_lma+0x4977a>
8000ec16:	e0 24 80 00 	sub	r4,32768
8000ec1a:	e7 c4 80 00 	ldmts	r4++,pc
8000ec1e:	e7 98       	*unknown*
8000ec20:	80 00       	ld.sh	r0,r0[0x0]
8000ec22:	e7 e8 80 00 	sthh.w	r0[r0],r3:b,r8:b
8000ec26:	e7 64 80 00 	st.b	r3[-32768],r4
8000ec2a:	e6 04       	*unknown*
8000ec2c:	80 00       	ld.sh	r0,r0[0x0]
8000ec2e:	e6 20 80 00 	sub	r0,425984
8000ec32:	e6 8c 80 00 	brvs	800dec32 <_data_lma+0xc979a>
8000ec36:	e4 b4       	*unknown*
8000ec38:	80 00       	ld.sh	r0,r0[0x0]
8000ec3a:	73 6c       	ld.w	r12,r9[0x58]
8000ec3c:	80 00       	ld.sh	r0,r0[0x0]
8000ec3e:	3e a2       	mov	r2,-22
8000ec40:	80 00       	ld.sh	r0,r0[0x0]
8000ec42:	c7 00       	breq	8000ed22 <__avr32_f32_div+0x62>
8000ec44:	80 00       	ld.sh	r0,r0[0x0]
8000ec46:	c7 f8       	rjmp	8000ed44 <__avr32_f32_div+0x84>
8000ec48:	80 00       	ld.sh	r0,r0[0x0]
8000ec4a:	c8 70       	breq	8000eb58 <main+0x1b8>
8000ec4c:	80 00       	ld.sh	r0,r0[0x0]
8000ec4e:	e2 a0 80 00 	rcall	8005ec4e <_data_lma+0x497b6>
8000ec52:	d4 e8       	*unknown*
8000ec54:	00 00       	add	r0,r0
8000ec56:	08 b9       	st.h	r4++,r9
8000ec58:	80 00       	ld.sh	r0,r0[0x0]
8000ec5a:	e8 e4 00 00 	ld.d	r4,r4[0]
8000ec5e:	08 b8       	st.h	r4++,r8
8000ec60:	00 00       	add	r0,r0
8000ec62:	08 ba       	st.h	r4++,r10
8000ec64:	80 00       	ld.sh	r0,r0[0x0]
8000ec66:	3f 18       	mov	r8,-15
8000ec68:	80 00       	ld.sh	r0,r0[0x0]
8000ec6a:	d0 34       	*unknown*
8000ec6c:	80 00       	ld.sh	r0,r0[0x0]
8000ec6e:	e2 ac       	*unknown*
8000ec70:	80 00       	ld.sh	r0,r0[0x0]
8000ec72:	e5 c0 80 00 	ldmts	r0,pc
8000ec76:	c5 1c       	rcall	8000ed18 <__avr32_f32_div+0x58>
8000ec78:	80 00       	ld.sh	r0,r0[0x0]
8000ec7a:	e2 c4 80 00 	sub	r4,r1,-32768
8000ec7e:	f3 6c 80 00 	st.b	r9[-32768],r12
8000ec82:	c6 08       	rjmp	8000ed42 <__avr32_f32_div+0x82>
8000ec84:	80 00       	ld.sh	r0,r0[0x0]
8000ec86:	c6 ac       	rcall	8000ed5a <__avr32_f32_div+0x9a>
8000ec88:	00 00       	add	r0,r0
8000ec8a:	00 d8       	st.w	--r0,r8
8000ec8c:	80 00       	ld.sh	r0,r0[0x0]
8000ec8e:	e2 cc 80 00 	sub	r12,r1,-32768
8000ec92:	e3 14 80 00 	ld.uh	r4,r1[-32768]
8000ec96:	e3 34 80 00 	ld.ub	r4,r1[-32768]
8000ec9a:	e3 7c 80 00 	stcond	r1[-32768],r12
8000ec9e:	e3 8c       	*unknown*
8000eca0:	80 00       	ld.sh	r0,r0[0x0]
8000eca2:	e3 b8       	*unknown*
8000eca4:	80 00       	ld.sh	r0,r0[0x0]
8000eca6:	e3 e4 80 00 	sthh.w	r0[r0],r1:b,r4:b
8000ecaa:	e4 08       	*unknown*
8000ecac:	80 00       	ld.sh	r0,r0[0x0]
8000ecae:	e5 88       	*unknown*
8000ecb0:	80 00       	ld.sh	r0,r0[0x0]
8000ecb2:	2c 14       	sub	r4,-63
8000ecb4:	80 00       	ld.sh	r0,r0[0x0]
8000ecb6:	e4 0c       	*unknown*
8000ecb8:	80 00       	ld.sh	r0,r0[0x0]
8000ecba:	e4 20 80 00 	sub	r0,294912
8000ecbe:	e4 34 f7 ec 	sub	r4,391148

8000ecc0 <__avr32_f32_div>:
8000ecc0:	f7 ec 20 08 	eor	r8,r11,r12
8000ecc4:	a1 7c       	lsl	r12,0x1
8000ecc6:	a1 7b       	lsl	r11,0x1
8000ecc8:	c7 a0       	breq	8000edbc <__divsf_return_op1+0x16>
8000ecca:	18 7c       	tst	r12,r12
8000eccc:	f9 b9 00 00 	moveq	r9,0
8000ecd0:	c0 90       	breq	8000ece2 <__avr32_f32_div+0x22>
8000ecd2:	f8 09 16 18 	lsr	r9,r12,0x18
8000ecd6:	c7 e0       	breq	8000edd2 <__divsf_return_op1+0x2c>
8000ecd8:	e0 49 00 ff 	cp.w	r9,255
8000ecdc:	c6 82       	brcc	8000edac <__divsf_return_op1+0x6>
8000ecde:	a7 7c       	lsl	r12,0x7
8000ece0:	bf bc       	sbr	r12,0x1f
8000ece2:	f6 0a 16 18 	lsr	r10,r11,0x18
8000ece6:	c7 e0       	breq	8000ede2 <__divsf_return_op1+0x3c>
8000ece8:	e0 4a 00 ff 	cp.w	r10,255
8000ecec:	c6 62       	brcc	8000edb8 <__divsf_return_op1+0x12>
8000ecee:	a7 7b       	lsl	r11,0x7
8000ecf0:	bf bb       	sbr	r11,0x1f
8000ecf2:	58 09       	cp.w	r9,0
8000ecf4:	f5 bc 00 00 	subfeq	r12,0
8000ecf8:	5e 0d       	reteq	0
8000ecfa:	1a d5       	st.w	--sp,r5
8000ecfc:	bb 27       	st.d	--sp,r6
8000ecfe:	14 19       	sub	r9,r10
8000ed00:	28 19       	sub	r9,-127
8000ed02:	fc 1a 80 00 	movh	r10,0x8000
8000ed06:	a3 8c       	lsr	r12,0x2
8000ed08:	f6 05 16 02 	lsr	r5,r11,0x2
8000ed0c:	f4 0b 16 01 	lsr	r11,r10,0x1
8000ed10:	ed d5 c3 62 	bfextu	r6,r5,0x1b,0x2
8000ed14:	5c d6       	com	r6
8000ed16:	f7 d6 d3 82 	bfins	r11,r6,0x1c,0x2
8000ed1a:	f6 05 06 46 	mulu.d	r6,r11,r5
8000ed1e:	f4 07 01 27 	sub	r7,r10,r7<<0x2
8000ed22:	f6 07 06 46 	mulu.d	r6,r11,r7
8000ed26:	ee 0b 15 02 	lsl	r11,r7,0x2
8000ed2a:	f6 05 06 46 	mulu.d	r6,r11,r5
8000ed2e:	f4 07 01 27 	sub	r7,r10,r7<<0x2
8000ed32:	f6 07 06 46 	mulu.d	r6,r11,r7
8000ed36:	ee 0b 15 02 	lsl	r11,r7,0x2
8000ed3a:	f6 05 06 46 	mulu.d	r6,r11,r5
8000ed3e:	f4 07 01 27 	sub	r7,r10,r7<<0x2
8000ed42:	f6 07 06 46 	mulu.d	r6,r11,r7
8000ed46:	ee 0b 15 02 	lsl	r11,r7,0x2
8000ed4a:	f6 05 06 46 	mulu.d	r6,r11,r5
8000ed4e:	f4 07 01 27 	sub	r7,r10,r7<<0x2
8000ed52:	f6 07 06 46 	mulu.d	r6,r11,r7
8000ed56:	ee 0b 15 02 	lsl	r11,r7,0x2
8000ed5a:	f6 0c 06 46 	mulu.d	r6,r11,r12
8000ed5e:	a5 8c       	lsr	r12,0x4
8000ed60:	ed b7 00 1c 	bld	r7,0x1c
8000ed64:	c0 40       	breq	8000ed6c <__avr32_f32_div+0xac>
8000ed66:	a1 77       	lsl	r7,0x1
8000ed68:	20 19       	sub	r9,1
8000ed6a:	a1 7c       	lsl	r12,0x1
8000ed6c:	58 09       	cp.w	r9,0
8000ed6e:	e0 8a 00 42 	brle	8000edf2 <__avr32_f32_div_res_subnormal>
8000ed72:	e0 17 ff e0 	andl	r7,0xffe0
8000ed76:	e8 17 00 10 	orl	r7,0x10
8000ed7a:	ea 07 06 4a 	mulu.d	r10,r5,r7
8000ed7e:	eb d7 c0 a1 	bfextu	r5,r7,0x5,0x1
8000ed82:	58 0a       	cp.w	r10,0

8000ed84 <__avr32_f32_div_round_subnormal>:
8000ed84:	f8 0b 13 00 	cpc	r11,r12
8000ed88:	5f 3b       	srlo	r11
8000ed8a:	ea 0b 17 00 	moveq	r11,r5
8000ed8e:	ee 0c 16 05 	lsr	r12,r7,0x5
8000ed92:	f9 d9 d2 e8 	bfins	r12,r9,0x17,0x8
8000ed96:	bb 07       	ld.d	r6,sp++
8000ed98:	1b 05       	ld.w	r5,sp++
8000ed9a:	ed b8 00 1f 	bld	r8,0x1f
8000ed9e:	ef bc 00 1f 	bst	r12,0x1f
8000eda2:	16 0c       	add	r12,r11
8000eda4:	5e fc       	retal	r12

8000eda6 <__divsf_return_op1>:
8000eda6:	a1 78       	lsl	r8,0x1
8000eda8:	5d 0c       	ror	r12
8000edaa:	5e fc       	retal	r12
8000edac:	5e 1e       	retne	-1
8000edae:	fc 19 ff 00 	movh	r9,0xff00
8000edb2:	12 3b       	cp.w	r11,r9
8000edb4:	cf 93       	brcs	8000eda6 <__divsf_return_op1>
8000edb6:	5e fe       	retal	-1
8000edb8:	5e 0d       	reteq	0
8000edba:	5e fe       	retal	-1
8000edbc:	18 7c       	tst	r12,r12
8000edbe:	5e 0e       	reteq	-1
8000edc0:	f8 09 16 18 	lsr	r9,r12,0x18
8000edc4:	c0 70       	breq	8000edd2 <__divsf_return_op1+0x2c>
8000edc6:	e0 49 00 ff 	cp.w	r9,255
8000edca:	cf 12       	brcc	8000edac <__divsf_return_op1+0x6>
8000edcc:	fc 1c ff 00 	movh	r12,0xff00
8000edd0:	ce bb       	rjmp	8000eda6 <__divsf_return_op1>
8000edd2:	a7 7c       	lsl	r12,0x7
8000edd4:	f8 09 12 00 	clz	r9,r12
8000edd8:	f8 09 09 4c 	lsl	r12,r12,r9
8000eddc:	f2 09 11 01 	rsub	r9,r9,1
8000ede0:	c8 1b       	rjmp	8000ece2 <__avr32_f32_div+0x22>
8000ede2:	a7 7b       	lsl	r11,0x7
8000ede4:	f6 0a 12 00 	clz	r10,r11
8000ede8:	f6 0a 09 4b 	lsl	r11,r11,r10
8000edec:	f4 0a 11 01 	rsub	r10,r10,1
8000edf0:	c8 5b       	rjmp	8000ecfa <__avr32_f32_div+0x3a>

8000edf2 <__avr32_f32_div_res_subnormal>:
8000edf2:	5c 39       	neg	r9
8000edf4:	2f f9       	sub	r9,-1
8000edf6:	f1 b9 04 a0 	satu	r9,0x5
8000edfa:	f2 0a 11 20 	rsub	r10,r9,32
8000edfe:	ee 09 0a 47 	lsr	r7,r7,r9
8000ee02:	f8 0a 09 46 	lsl	r6,r12,r10
8000ee06:	f8 09 0a 4c 	lsr	r12,r12,r9
8000ee0a:	e0 17 ff e0 	andl	r7,0xffe0
8000ee0e:	e8 17 00 10 	orl	r7,0x10
8000ee12:	ea 07 06 4a 	mulu.d	r10,r5,r7
8000ee16:	30 09       	mov	r9,0
8000ee18:	eb d7 c0 a1 	bfextu	r5,r7,0x5,0x1
8000ee1c:	0c 3a       	cp.w	r10,r6
8000ee1e:	cb 3b       	rjmp	8000ed84 <__avr32_f32_div_round_subnormal>

8000ee20 <__avr32_f32_mul>:
8000ee20:	18 98       	mov	r8,r12
8000ee22:	16 5c       	eor	r12,r11
8000ee24:	e6 1c 80 00 	andh	r12,0x8000,COH
8000ee28:	bf d8       	cbr	r8,0x1f
8000ee2a:	c6 60       	breq	8000eef6 <__avr32_f32_mul_op1_zero>
8000ee2c:	bf db       	cbr	r11,0x1f
8000ee2e:	f0 0b 0c 4a 	max	r10,r8,r11
8000ee32:	f0 0b 0d 49 	min	r9,r8,r11
8000ee36:	f4 08 15 08 	lsl	r8,r10,0x8
8000ee3a:	bf b8       	sbr	r8,0x1f
8000ee3c:	b7 9a       	lsr	r10,0x17
8000ee3e:	e0 4a 00 ff 	cp.w	r10,255
8000ee42:	c3 d0       	breq	8000eebc <__avr32_f32_mul_op1_nan_or_inf>
8000ee44:	f2 0b 15 08 	lsl	r11,r9,0x8
8000ee48:	bf bb       	sbr	r11,0x1f
8000ee4a:	b7 99       	lsr	r9,0x17
8000ee4c:	c2 40       	breq	8000ee94 <__avr32_f32_mul_op2_subnormal>
8000ee4e:	14 09       	add	r9,r10
8000ee50:	f0 0b 06 4a 	mulu.d	r10,r8,r11
8000ee54:	f6 08 15 01 	lsl	r8,r11,0x1
8000ee58:	f0 0b 17 20 	movhs	r11,r8
8000ee5c:	f7 b9 02 01 	subhs	r9,1
8000ee60:	a9 8a       	lsr	r10,0x8
8000ee62:	f5 db d3 08 	bfins	r10,r11,0x18,0x8
8000ee66:	27 e9       	sub	r9,126
8000ee68:	e0 8a 00 39 	brle	8000eeda <__avr32_f32_mul_res_subnormal>
8000ee6c:	e0 49 00 ff 	cp.w	r9,255
8000ee70:	c0 f4       	brge	8000ee8e <__avr32_f32_mul_round+0x14>
8000ee72:	f9 eb 12 8c 	or	r12,r12,r11>>0x8
8000ee76:	f9 d9 d2 e8 	bfins	r12,r9,0x17,0x8

8000ee7a <__avr32_f32_mul_round>:
8000ee7a:	fc 18 80 00 	movh	r8,0x8000
8000ee7e:	ed bc 00 00 	bld	r12,0x0
8000ee82:	f7 b8 01 ff 	subne	r8,-1
8000ee86:	10 3a       	cp.w	r10,r8
8000ee88:	f7 bc 02 ff 	subhs	r12,-1
8000ee8c:	5e fc       	retal	r12
8000ee8e:	ea 1c 7f 80 	orh	r12,0x7f80
8000ee92:	5e fc       	retal	r12

8000ee94 <__avr32_f32_mul_op2_subnormal>:
8000ee94:	bf db       	cbr	r11,0x1f
8000ee96:	f6 09 12 00 	clz	r9,r11
8000ee9a:	5e 3d       	retlo	0
8000ee9c:	20 89       	sub	r9,8
8000ee9e:	f6 09 09 4b 	lsl	r11,r11,r9
8000eea2:	f2 09 11 01 	rsub	r9,r9,1
8000eea6:	14 7a       	tst	r10,r10
8000eea8:	cd 31       	brne	8000ee4e <__avr32_f32_mul+0x2e>
8000eeaa:	bf d8       	cbr	r8,0x1f
8000eeac:	f6 0a 12 00 	clz	r10,r11
8000eeb0:	5e 3d       	retlo	0
8000eeb2:	f0 0a 09 48 	lsl	r8,r8,r10
8000eeb6:	f4 0a 11 01 	rsub	r10,r10,1
8000eeba:	cc ab       	rjmp	8000ee4e <__avr32_f32_mul+0x2e>

8000eebc <__avr32_f32_mul_op1_nan_or_inf>:
8000eebc:	f0 0b 15 01 	lsl	r11,r8,0x1
8000eec0:	5e 1e       	retne	-1
8000eec2:	12 79       	tst	r9,r9
8000eec4:	5e 0e       	reteq	-1
8000eec6:	f9 da d2 e8 	bfins	r12,r10,0x17,0x8
8000eeca:	f2 0b 16 17 	lsr	r11,r9,0x17
8000eece:	e0 4b 00 ff 	cp.w	r11,255
8000eed2:	5e 1c       	retne	r12
8000eed4:	a9 79       	lsl	r9,0x9
8000eed6:	5e 0c       	reteq	r12
8000eed8:	5e fe       	retal	-1

8000eeda <__avr32_f32_mul_res_subnormal>:
8000eeda:	f2 09 11 09 	rsub	r9,r9,9
8000eede:	f2 08 11 20 	rsub	r8,r9,32
8000eee2:	5e 3d       	retlo	0
8000eee4:	f6 09 0a 49 	lsr	r9,r11,r9
8000eee8:	12 4c       	or	r12,r9
8000eeea:	f6 08 09 4b 	lsl	r11,r11,r8
8000eeee:	e4 1a 00 ff 	andh	r10,0xff
8000eef2:	16 4a       	or	r10,r11
8000eef4:	cc 3b       	rjmp	8000ee7a <__avr32_f32_mul_round>

8000eef6 <__avr32_f32_mul_op1_zero>:
8000eef6:	f5 db c2 e8 	bfextu	r10,r11,0x17,0x8
8000eefa:	e0 4a 00 ff 	cp.w	r10,255
8000eefe:	5e 1c       	retne	r12
8000ef00:	5e 0e       	reteq	-1

8000ef02 <__avr32_u32_to_f32>:
8000ef02:	58 0c       	cp.w	r12,0
8000ef04:	5e 0c       	reteq	r12
8000ef06:	e0 6a 00 9e 	mov	r10,158
8000ef0a:	f8 09 12 00 	clz	r9,r12
8000ef0e:	12 1a       	sub	r10,r9
8000ef10:	f8 09 09 4c 	lsl	r12,r12,r9
8000ef14:	58 0a       	cp.w	r10,0
8000ef16:	e0 8a 00 14 	brle	8000ef3e <__avr32_u32_to_f32_subnormal>
8000ef1a:	37 f9       	mov	r9,127
8000ef1c:	ed bc 00 08 	bld	r12,0x8
8000ef20:	f7 b9 00 ff 	subeq	r9,-1
8000ef24:	12 0c       	add	r12,r9
8000ef26:	f7 ba 03 fe 	sublo	r10,-2
8000ef2a:	ed bc 00 1f 	bld	r12,0x1f
8000ef2e:	f7 ba 01 01 	subne	r10,1
8000ef32:	f8 0c 16 07 	lsr	r12,r12,0x7
8000ef36:	f9 da d3 08 	bfins	r12,r10,0x18,0x8
8000ef3a:	a1 9c       	lsr	r12,0x1
8000ef3c:	5e fc       	retal	r12

8000ef3e <__avr32_u32_to_f32_subnormal>:
8000ef3e:	30 08       	mov	r8,0
8000ef40:	f4 0a 11 01 	rsub	r10,r10,1
8000ef44:	59 9a       	cp.w	r10,25
8000ef46:	f9 bc 02 00 	movhs	r12,0
8000ef4a:	c1 32       	brcc	8000ef70 <__avr32_u32_to_f32_subnormal+0x32>
8000ef4c:	f4 09 11 20 	rsub	r9,r10,32
8000ef50:	f8 09 09 49 	lsl	r9,r12,r9
8000ef54:	5f 19       	srne	r9
8000ef56:	f8 0a 0a 4c 	lsr	r12,r12,r10
8000ef5a:	12 4c       	or	r12,r9
8000ef5c:	37 f9       	mov	r9,127
8000ef5e:	ed bc 00 08 	bld	r12,0x8
8000ef62:	f7 b9 00 ff 	subeq	r9,-1
8000ef66:	12 0c       	add	r12,r9
8000ef68:	f8 0c 16 07 	lsr	r12,r12,0x7
8000ef6c:	a1 78       	lsl	r8,0x1
8000ef6e:	5d 0c       	ror	r12
8000ef70:	5e fc       	retal	r12

8000ef72 <__avr32_f32_to_u32>:
8000ef72:	58 0c       	cp.w	r12,0
8000ef74:	5e 6d       	retmi	0
8000ef76:	f7 dc c2 e8 	bfextu	r11,r12,0x17,0x8
8000ef7a:	27 fb       	sub	r11,127
8000ef7c:	5e 3d       	retlo	0
8000ef7e:	f6 0b 11 1f 	rsub	r11,r11,31
8000ef82:	a9 6c       	lsl	r12,0x8
8000ef84:	bf bc       	sbr	r12,0x1f
8000ef86:	f8 0b 0a 4c 	lsr	r12,r12,r11
8000ef8a:	5e fc       	retal	r12

8000ef8c <__avr32_udiv64>:
8000ef8c:	d4 31       	pushm	r0-r7,lr
8000ef8e:	1a 97       	mov	r7,sp
8000ef90:	20 3d       	sub	sp,12
8000ef92:	10 9c       	mov	r12,r8
8000ef94:	12 9e       	mov	lr,r9
8000ef96:	14 93       	mov	r3,r10
8000ef98:	58 09       	cp.w	r9,0
8000ef9a:	e0 81 00 bd 	brne	8000f114 <__avr32_udiv64+0x188>
8000ef9e:	16 38       	cp.w	r8,r11
8000efa0:	e0 88 00 40 	brls	8000f020 <__avr32_udiv64+0x94>
8000efa4:	f0 08 12 00 	clz	r8,r8
8000efa8:	c0 d0       	breq	8000efc2 <__avr32_udiv64+0x36>
8000efaa:	f6 08 09 4b 	lsl	r11,r11,r8
8000efae:	f0 09 11 20 	rsub	r9,r8,32
8000efb2:	f8 08 09 4c 	lsl	r12,r12,r8
8000efb6:	f4 09 0a 49 	lsr	r9,r10,r9
8000efba:	f4 08 09 43 	lsl	r3,r10,r8
8000efbe:	f3 eb 10 0b 	or	r11,r9,r11
8000efc2:	f8 0e 16 10 	lsr	lr,r12,0x10
8000efc6:	f5 dc c0 10 	bfextu	r10,r12,0x0,0x10
8000efca:	f6 0e 0d 00 	divu	r0,r11,lr
8000efce:	e6 0b 16 10 	lsr	r11,r3,0x10
8000efd2:	00 99       	mov	r9,r0
8000efd4:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
8000efd8:	e0 0a 02 48 	mul	r8,r0,r10
8000efdc:	10 3b       	cp.w	r11,r8
8000efde:	c0 a2       	brcc	8000eff2 <__avr32_udiv64+0x66>
8000efe0:	20 19       	sub	r9,1
8000efe2:	18 0b       	add	r11,r12
8000efe4:	18 3b       	cp.w	r11,r12
8000efe6:	c0 63       	brcs	8000eff2 <__avr32_udiv64+0x66>
8000efe8:	10 3b       	cp.w	r11,r8
8000efea:	f7 b9 03 01 	sublo	r9,1
8000efee:	f7 dc e3 0b 	addcs	r11,r11,r12
8000eff2:	f6 08 01 01 	sub	r1,r11,r8
8000eff6:	e7 d3 c0 10 	bfextu	r3,r3,0x0,0x10
8000effa:	e2 0e 0d 00 	divu	r0,r1,lr
8000effe:	e7 e1 11 03 	or	r3,r3,r1<<0x10
8000f002:	00 98       	mov	r8,r0
8000f004:	e0 0a 02 4a 	mul	r10,r0,r10
8000f008:	14 33       	cp.w	r3,r10
8000f00a:	c0 82       	brcc	8000f01a <__avr32_udiv64+0x8e>
8000f00c:	20 18       	sub	r8,1
8000f00e:	18 03       	add	r3,r12
8000f010:	18 33       	cp.w	r3,r12
8000f012:	c0 43       	brcs	8000f01a <__avr32_udiv64+0x8e>
8000f014:	14 33       	cp.w	r3,r10
8000f016:	f7 b8 03 01 	sublo	r8,1
8000f01a:	f1 e9 11 08 	or	r8,r8,r9<<0x10
8000f01e:	cd f8       	rjmp	8000f1dc <__avr32_udiv64+0x250>
8000f020:	58 08       	cp.w	r8,0
8000f022:	c0 51       	brne	8000f02c <__avr32_udiv64+0xa0>
8000f024:	30 19       	mov	r9,1
8000f026:	f2 08 0d 08 	divu	r8,r9,r8
8000f02a:	10 9c       	mov	r12,r8
8000f02c:	f8 06 12 00 	clz	r6,r12
8000f030:	c0 41       	brne	8000f038 <__avr32_udiv64+0xac>
8000f032:	18 1b       	sub	r11,r12
8000f034:	30 19       	mov	r9,1
8000f036:	c4 08       	rjmp	8000f0b6 <__avr32_udiv64+0x12a>
8000f038:	ec 01 11 20 	rsub	r1,r6,32
8000f03c:	f4 01 0a 49 	lsr	r9,r10,r1
8000f040:	f8 06 09 4c 	lsl	r12,r12,r6
8000f044:	f6 06 09 48 	lsl	r8,r11,r6
8000f048:	f6 01 0a 41 	lsr	r1,r11,r1
8000f04c:	f3 e8 10 08 	or	r8,r9,r8
8000f050:	f8 03 16 10 	lsr	r3,r12,0x10
8000f054:	eb dc c0 10 	bfextu	r5,r12,0x0,0x10
8000f058:	e2 03 0d 00 	divu	r0,r1,r3
8000f05c:	f0 0b 16 10 	lsr	r11,r8,0x10
8000f060:	00 9e       	mov	lr,r0
8000f062:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
8000f066:	e0 05 02 49 	mul	r9,r0,r5
8000f06a:	12 3b       	cp.w	r11,r9
8000f06c:	c0 a2       	brcc	8000f080 <__avr32_udiv64+0xf4>
8000f06e:	20 1e       	sub	lr,1
8000f070:	18 0b       	add	r11,r12
8000f072:	18 3b       	cp.w	r11,r12
8000f074:	c0 63       	brcs	8000f080 <__avr32_udiv64+0xf4>
8000f076:	12 3b       	cp.w	r11,r9
8000f078:	f7 be 03 01 	sublo	lr,1
8000f07c:	f7 dc e3 0b 	addcs	r11,r11,r12
8000f080:	12 1b       	sub	r11,r9
8000f082:	f1 d8 c0 10 	bfextu	r8,r8,0x0,0x10
8000f086:	f6 03 0d 02 	divu	r2,r11,r3
8000f08a:	f1 e3 11 08 	or	r8,r8,r3<<0x10
8000f08e:	04 99       	mov	r9,r2
8000f090:	e4 05 02 4b 	mul	r11,r2,r5
8000f094:	16 38       	cp.w	r8,r11
8000f096:	c0 a2       	brcc	8000f0aa <__avr32_udiv64+0x11e>
8000f098:	20 19       	sub	r9,1
8000f09a:	18 08       	add	r8,r12
8000f09c:	18 38       	cp.w	r8,r12
8000f09e:	c0 63       	brcs	8000f0aa <__avr32_udiv64+0x11e>
8000f0a0:	16 38       	cp.w	r8,r11
8000f0a2:	f7 b9 03 01 	sublo	r9,1
8000f0a6:	f1 dc e3 08 	addcs	r8,r8,r12
8000f0aa:	f4 06 09 43 	lsl	r3,r10,r6
8000f0ae:	f0 0b 01 0b 	sub	r11,r8,r11
8000f0b2:	f3 ee 11 09 	or	r9,r9,lr<<0x10
8000f0b6:	f8 06 16 10 	lsr	r6,r12,0x10
8000f0ba:	fd dc c0 10 	bfextu	lr,r12,0x0,0x10
8000f0be:	f6 06 0d 00 	divu	r0,r11,r6
8000f0c2:	e6 0b 16 10 	lsr	r11,r3,0x10
8000f0c6:	00 9a       	mov	r10,r0
8000f0c8:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
8000f0cc:	e0 0e 02 48 	mul	r8,r0,lr
8000f0d0:	10 3b       	cp.w	r11,r8
8000f0d2:	c0 a2       	brcc	8000f0e6 <__avr32_udiv64+0x15a>
8000f0d4:	20 1a       	sub	r10,1
8000f0d6:	18 0b       	add	r11,r12
8000f0d8:	18 3b       	cp.w	r11,r12
8000f0da:	c0 63       	brcs	8000f0e6 <__avr32_udiv64+0x15a>
8000f0dc:	10 3b       	cp.w	r11,r8
8000f0de:	f7 ba 03 01 	sublo	r10,1
8000f0e2:	f7 dc e3 0b 	addcs	r11,r11,r12
8000f0e6:	f6 08 01 01 	sub	r1,r11,r8
8000f0ea:	e7 d3 c0 10 	bfextu	r3,r3,0x0,0x10
8000f0ee:	e2 06 0d 00 	divu	r0,r1,r6
8000f0f2:	e7 e1 11 03 	or	r3,r3,r1<<0x10
8000f0f6:	00 98       	mov	r8,r0
8000f0f8:	e0 0e 02 4b 	mul	r11,r0,lr
8000f0fc:	16 33       	cp.w	r3,r11
8000f0fe:	c0 82       	brcc	8000f10e <__avr32_udiv64+0x182>
8000f100:	20 18       	sub	r8,1
8000f102:	18 03       	add	r3,r12
8000f104:	18 33       	cp.w	r3,r12
8000f106:	c0 43       	brcs	8000f10e <__avr32_udiv64+0x182>
8000f108:	16 33       	cp.w	r3,r11
8000f10a:	f7 b8 03 01 	sublo	r8,1
8000f10e:	f1 ea 11 08 	or	r8,r8,r10<<0x10
8000f112:	c6 98       	rjmp	8000f1e4 <__avr32_udiv64+0x258>
8000f114:	16 39       	cp.w	r9,r11
8000f116:	e0 8b 00 65 	brhi	8000f1e0 <__avr32_udiv64+0x254>
8000f11a:	f2 09 12 00 	clz	r9,r9
8000f11e:	c0 b1       	brne	8000f134 <__avr32_udiv64+0x1a8>
8000f120:	10 3a       	cp.w	r10,r8
8000f122:	5f 2a       	srhs	r10
8000f124:	1c 3b       	cp.w	r11,lr
8000f126:	5f b8       	srhi	r8
8000f128:	10 4a       	or	r10,r8
8000f12a:	f2 0a 18 00 	cp.b	r10,r9
8000f12e:	c5 90       	breq	8000f1e0 <__avr32_udiv64+0x254>
8000f130:	30 18       	mov	r8,1
8000f132:	c5 98       	rjmp	8000f1e4 <__avr32_udiv64+0x258>
8000f134:	f0 09 09 46 	lsl	r6,r8,r9
8000f138:	f2 03 11 20 	rsub	r3,r9,32
8000f13c:	fc 09 09 4e 	lsl	lr,lr,r9
8000f140:	f0 03 0a 48 	lsr	r8,r8,r3
8000f144:	f6 09 09 4c 	lsl	r12,r11,r9
8000f148:	f4 03 0a 42 	lsr	r2,r10,r3
8000f14c:	ef 46 ff f4 	st.w	r7[-12],r6
8000f150:	f6 03 0a 43 	lsr	r3,r11,r3
8000f154:	18 42       	or	r2,r12
8000f156:	f1 ee 10 0c 	or	r12,r8,lr
8000f15a:	f8 01 16 10 	lsr	r1,r12,0x10
8000f15e:	ed dc c0 10 	bfextu	r6,r12,0x0,0x10
8000f162:	e6 01 0d 04 	divu	r4,r3,r1
8000f166:	e4 03 16 10 	lsr	r3,r2,0x10
8000f16a:	08 9e       	mov	lr,r4
8000f16c:	e7 e5 11 03 	or	r3,r3,r5<<0x10
8000f170:	e8 06 02 48 	mul	r8,r4,r6
8000f174:	10 33       	cp.w	r3,r8
8000f176:	c0 a2       	brcc	8000f18a <__avr32_udiv64+0x1fe>
8000f178:	20 1e       	sub	lr,1
8000f17a:	18 03       	add	r3,r12
8000f17c:	18 33       	cp.w	r3,r12
8000f17e:	c0 63       	brcs	8000f18a <__avr32_udiv64+0x1fe>
8000f180:	10 33       	cp.w	r3,r8
8000f182:	f7 be 03 01 	sublo	lr,1
8000f186:	e7 dc e3 03 	addcs	r3,r3,r12
8000f18a:	10 13       	sub	r3,r8
8000f18c:	f7 d2 c0 10 	bfextu	r11,r2,0x0,0x10
8000f190:	e6 01 0d 00 	divu	r0,r3,r1
8000f194:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
8000f198:	00 98       	mov	r8,r0
8000f19a:	e0 06 02 46 	mul	r6,r0,r6
8000f19e:	0c 3b       	cp.w	r11,r6
8000f1a0:	c0 a2       	brcc	8000f1b4 <__avr32_udiv64+0x228>
8000f1a2:	20 18       	sub	r8,1
8000f1a4:	18 0b       	add	r11,r12
8000f1a6:	18 3b       	cp.w	r11,r12
8000f1a8:	c0 63       	brcs	8000f1b4 <__avr32_udiv64+0x228>
8000f1aa:	0c 3b       	cp.w	r11,r6
8000f1ac:	f7 dc e3 0b 	addcs	r11,r11,r12
8000f1b0:	f7 b8 03 01 	sublo	r8,1
8000f1b4:	f1 ee 11 08 	or	r8,r8,lr<<0x10
8000f1b8:	ee f4 ff f4 	ld.w	r4,r7[-12]
8000f1bc:	0c 1b       	sub	r11,r6
8000f1be:	f0 04 06 42 	mulu.d	r2,r8,r4
8000f1c2:	06 95       	mov	r5,r3
8000f1c4:	16 35       	cp.w	r5,r11
8000f1c6:	e0 8b 00 0a 	brhi	8000f1da <__avr32_udiv64+0x24e>
8000f1ca:	5f 0b       	sreq	r11
8000f1cc:	f4 09 09 49 	lsl	r9,r10,r9
8000f1d0:	12 32       	cp.w	r2,r9
8000f1d2:	5f b9       	srhi	r9
8000f1d4:	f7 e9 00 09 	and	r9,r11,r9
8000f1d8:	c0 60       	breq	8000f1e4 <__avr32_udiv64+0x258>
8000f1da:	20 18       	sub	r8,1
8000f1dc:	30 09       	mov	r9,0
8000f1de:	c0 38       	rjmp	8000f1e4 <__avr32_udiv64+0x258>
8000f1e0:	30 09       	mov	r9,0
8000f1e2:	12 98       	mov	r8,r9
8000f1e4:	10 9a       	mov	r10,r8
8000f1e6:	12 93       	mov	r3,r9
8000f1e8:	10 92       	mov	r2,r8
8000f1ea:	12 9b       	mov	r11,r9
8000f1ec:	2f dd       	sub	sp,-12
8000f1ee:	d8 32       	popm	r0-r7,pc

8000f1f0 <memcmp>:
8000f1f0:	d4 01       	pushm	lr
8000f1f2:	30 08       	mov	r8,0
8000f1f4:	c0 d8       	rjmp	8000f20e <memcmp+0x1e>
8000f1f6:	f8 08 07 0e 	ld.ub	lr,r12[r8]
8000f1fa:	f6 08 07 09 	ld.ub	r9,r11[r8]
8000f1fe:	20 1a       	sub	r10,1
8000f200:	2f f8       	sub	r8,-1
8000f202:	f2 0e 18 00 	cp.b	lr,r9
8000f206:	c0 40       	breq	8000f20e <memcmp+0x1e>
8000f208:	fc 09 01 0c 	sub	r12,lr,r9
8000f20c:	d8 02       	popm	pc
8000f20e:	58 0a       	cp.w	r10,0
8000f210:	cf 31       	brne	8000f1f6 <memcmp+0x6>
8000f212:	14 9c       	mov	r12,r10
8000f214:	d8 02       	popm	pc

8000f216 <memcpy>:
8000f216:	58 8a       	cp.w	r10,8
8000f218:	c2 f5       	brlt	8000f276 <memcpy+0x60>
8000f21a:	f9 eb 10 09 	or	r9,r12,r11
8000f21e:	e2 19 00 03 	andl	r9,0x3,COH
8000f222:	e0 81 00 97 	brne	8000f350 <memcpy+0x13a>
8000f226:	e0 4a 00 20 	cp.w	r10,32
8000f22a:	c3 b4       	brge	8000f2a0 <memcpy+0x8a>
8000f22c:	f4 08 14 02 	asr	r8,r10,0x2
8000f230:	f0 09 11 08 	rsub	r9,r8,8
8000f234:	fe 09 00 2f 	add	pc,pc,r9<<0x2
8000f238:	76 69       	ld.w	r9,r11[0x18]
8000f23a:	99 69       	st.w	r12[0x18],r9
8000f23c:	76 59       	ld.w	r9,r11[0x14]
8000f23e:	99 59       	st.w	r12[0x14],r9
8000f240:	76 49       	ld.w	r9,r11[0x10]
8000f242:	99 49       	st.w	r12[0x10],r9
8000f244:	76 39       	ld.w	r9,r11[0xc]
8000f246:	99 39       	st.w	r12[0xc],r9
8000f248:	76 29       	ld.w	r9,r11[0x8]
8000f24a:	99 29       	st.w	r12[0x8],r9
8000f24c:	76 19       	ld.w	r9,r11[0x4]
8000f24e:	99 19       	st.w	r12[0x4],r9
8000f250:	76 09       	ld.w	r9,r11[0x0]
8000f252:	99 09       	st.w	r12[0x0],r9
8000f254:	f6 08 00 2b 	add	r11,r11,r8<<0x2
8000f258:	f8 08 00 28 	add	r8,r12,r8<<0x2
8000f25c:	e0 1a 00 03 	andl	r10,0x3
8000f260:	f4 0a 11 04 	rsub	r10,r10,4
8000f264:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
8000f268:	17 a9       	ld.ub	r9,r11[0x2]
8000f26a:	b0 a9       	st.b	r8[0x2],r9
8000f26c:	17 99       	ld.ub	r9,r11[0x1]
8000f26e:	b0 99       	st.b	r8[0x1],r9
8000f270:	17 89       	ld.ub	r9,r11[0x0]
8000f272:	b0 89       	st.b	r8[0x0],r9
8000f274:	5e fc       	retal	r12
8000f276:	f4 0a 11 09 	rsub	r10,r10,9
8000f27a:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
8000f27e:	17 f9       	ld.ub	r9,r11[0x7]
8000f280:	b8 f9       	st.b	r12[0x7],r9
8000f282:	17 e9       	ld.ub	r9,r11[0x6]
8000f284:	b8 e9       	st.b	r12[0x6],r9
8000f286:	17 d9       	ld.ub	r9,r11[0x5]
8000f288:	b8 d9       	st.b	r12[0x5],r9
8000f28a:	17 c9       	ld.ub	r9,r11[0x4]
8000f28c:	b8 c9       	st.b	r12[0x4],r9
8000f28e:	17 b9       	ld.ub	r9,r11[0x3]
8000f290:	b8 b9       	st.b	r12[0x3],r9
8000f292:	17 a9       	ld.ub	r9,r11[0x2]
8000f294:	b8 a9       	st.b	r12[0x2],r9
8000f296:	17 99       	ld.ub	r9,r11[0x1]
8000f298:	b8 99       	st.b	r12[0x1],r9
8000f29a:	17 89       	ld.ub	r9,r11[0x0]
8000f29c:	b8 89       	st.b	r12[0x0],r9
8000f29e:	5e fc       	retal	r12
8000f2a0:	eb cd 40 c0 	pushm	r6-r7,lr
8000f2a4:	18 99       	mov	r9,r12
8000f2a6:	22 0a       	sub	r10,32
8000f2a8:	b7 07       	ld.d	r6,r11++
8000f2aa:	b3 26       	st.d	r9++,r6
8000f2ac:	b7 07       	ld.d	r6,r11++
8000f2ae:	b3 26       	st.d	r9++,r6
8000f2b0:	b7 07       	ld.d	r6,r11++
8000f2b2:	b3 26       	st.d	r9++,r6
8000f2b4:	b7 07       	ld.d	r6,r11++
8000f2b6:	b3 26       	st.d	r9++,r6
8000f2b8:	22 0a       	sub	r10,32
8000f2ba:	cf 74       	brge	8000f2a8 <memcpy+0x92>
8000f2bc:	2f 0a       	sub	r10,-16
8000f2be:	c0 65       	brlt	8000f2ca <memcpy+0xb4>
8000f2c0:	b7 07       	ld.d	r6,r11++
8000f2c2:	b3 26       	st.d	r9++,r6
8000f2c4:	b7 07       	ld.d	r6,r11++
8000f2c6:	b3 26       	st.d	r9++,r6
8000f2c8:	21 0a       	sub	r10,16
8000f2ca:	5c 3a       	neg	r10
8000f2cc:	fe 0a 00 3f 	add	pc,pc,r10<<0x3
8000f2d0:	d7 03       	nop
8000f2d2:	d7 03       	nop
8000f2d4:	f7 36 00 0e 	ld.ub	r6,r11[14]
8000f2d8:	f3 66 00 0e 	st.b	r9[14],r6
8000f2dc:	f7 36 00 0d 	ld.ub	r6,r11[13]
8000f2e0:	f3 66 00 0d 	st.b	r9[13],r6
8000f2e4:	f7 36 00 0c 	ld.ub	r6,r11[12]
8000f2e8:	f3 66 00 0c 	st.b	r9[12],r6
8000f2ec:	f7 36 00 0b 	ld.ub	r6,r11[11]
8000f2f0:	f3 66 00 0b 	st.b	r9[11],r6
8000f2f4:	f7 36 00 0a 	ld.ub	r6,r11[10]
8000f2f8:	f3 66 00 0a 	st.b	r9[10],r6
8000f2fc:	f7 36 00 09 	ld.ub	r6,r11[9]
8000f300:	f3 66 00 09 	st.b	r9[9],r6
8000f304:	f7 36 00 08 	ld.ub	r6,r11[8]
8000f308:	f3 66 00 08 	st.b	r9[8],r6
8000f30c:	f7 36 00 07 	ld.ub	r6,r11[7]
8000f310:	f3 66 00 07 	st.b	r9[7],r6
8000f314:	f7 36 00 06 	ld.ub	r6,r11[6]
8000f318:	f3 66 00 06 	st.b	r9[6],r6
8000f31c:	f7 36 00 05 	ld.ub	r6,r11[5]
8000f320:	f3 66 00 05 	st.b	r9[5],r6
8000f324:	f7 36 00 04 	ld.ub	r6,r11[4]
8000f328:	f3 66 00 04 	st.b	r9[4],r6
8000f32c:	f7 36 00 03 	ld.ub	r6,r11[3]
8000f330:	f3 66 00 03 	st.b	r9[3],r6
8000f334:	f7 36 00 02 	ld.ub	r6,r11[2]
8000f338:	f3 66 00 02 	st.b	r9[2],r6
8000f33c:	f7 36 00 01 	ld.ub	r6,r11[1]
8000f340:	f3 66 00 01 	st.b	r9[1],r6
8000f344:	f7 36 00 00 	ld.ub	r6,r11[0]
8000f348:	f3 66 00 00 	st.b	r9[0],r6
8000f34c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000f350:	20 1a       	sub	r10,1
8000f352:	f6 0a 07 09 	ld.ub	r9,r11[r10]
8000f356:	f8 0a 0b 09 	st.b	r12[r10],r9
8000f35a:	cf b1       	brne	8000f350 <memcpy+0x13a>
8000f35c:	5e fc       	retal	r12

8000f35e <memset>:
8000f35e:	18 98       	mov	r8,r12
8000f360:	c0 38       	rjmp	8000f366 <memset+0x8>
8000f362:	10 cb       	st.b	r8++,r11
8000f364:	20 1a       	sub	r10,1
8000f366:	58 0a       	cp.w	r10,0
8000f368:	cf d1       	brne	8000f362 <memset+0x4>
8000f36a:	5e fc       	retal	r12

8000f36c <sprintf>:
8000f36c:	d4 01       	pushm	lr
8000f36e:	21 7d       	sub	sp,92
8000f370:	e0 68 ff ff 	mov	r8,65535
8000f374:	ea 18 7f ff 	orh	r8,0x7fff
8000f378:	50 58       	stdsp	sp[0x14],r8
8000f37a:	50 28       	stdsp	sp[0x8],r8
8000f37c:	e0 68 02 08 	mov	r8,520
8000f380:	ba 68       	st.h	sp[0xc],r8
8000f382:	3f f8       	mov	r8,-1
8000f384:	ba 78       	st.h	sp[0xe],r8
8000f386:	e0 68 01 d0 	mov	r8,464
8000f38a:	50 4c       	stdsp	sp[0x10],r12
8000f38c:	16 9a       	mov	r10,r11
8000f38e:	50 0c       	stdsp	sp[0x0],r12
8000f390:	fa c9 ff a0 	sub	r9,sp,-96
8000f394:	70 0c       	ld.w	r12,r8[0x0]
8000f396:	1a 9b       	mov	r11,sp
8000f398:	cf 0d       	rcall	8000f778 <_vfprintf_r>
8000f39a:	30 09       	mov	r9,0
8000f39c:	40 08       	lddsp	r8,sp[0x0]
8000f39e:	b0 89       	st.b	r8[0x0],r9
8000f3a0:	2e 9d       	sub	sp,-92
8000f3a2:	d8 02       	popm	pc

8000f3a4 <strcmp>:
8000f3a4:	f9 eb 10 0a 	or	r10,r12,r11
8000f3a8:	e2 1a 00 03 	andl	r10,0x3,COH
8000f3ac:	c3 41       	brne	8000f414 <strcmp+0x70>
8000f3ae:	78 0a       	ld.w	r10,r12[0x0]
8000f3b0:	76 09       	ld.w	r9,r11[0x0]
8000f3b2:	5c ea       	tnbz	r10
8000f3b4:	c1 70       	breq	8000f3e2 <strcmp+0x3e>
8000f3b6:	12 3a       	cp.w	r10,r9
8000f3b8:	c1 51       	brne	8000f3e2 <strcmp+0x3e>
8000f3ba:	78 1a       	ld.w	r10,r12[0x4]
8000f3bc:	76 19       	ld.w	r9,r11[0x4]
8000f3be:	5c ea       	tnbz	r10
8000f3c0:	c1 10       	breq	8000f3e2 <strcmp+0x3e>
8000f3c2:	12 3a       	cp.w	r10,r9
8000f3c4:	c0 f1       	brne	8000f3e2 <strcmp+0x3e>
8000f3c6:	78 2a       	ld.w	r10,r12[0x8]
8000f3c8:	76 29       	ld.w	r9,r11[0x8]
8000f3ca:	5c ea       	tnbz	r10
8000f3cc:	c0 b0       	breq	8000f3e2 <strcmp+0x3e>
8000f3ce:	12 3a       	cp.w	r10,r9
8000f3d0:	c0 91       	brne	8000f3e2 <strcmp+0x3e>
8000f3d2:	78 3a       	ld.w	r10,r12[0xc]
8000f3d4:	76 39       	ld.w	r9,r11[0xc]
8000f3d6:	5c ea       	tnbz	r10
8000f3d8:	c0 50       	breq	8000f3e2 <strcmp+0x3e>
8000f3da:	2f 0c       	sub	r12,-16
8000f3dc:	2f 0b       	sub	r11,-16
8000f3de:	12 3a       	cp.w	r10,r9
8000f3e0:	ce 70       	breq	8000f3ae <strcmp+0xa>
8000f3e2:	f9 da c3 08 	bfextu	r12,r10,0x18,0x8
8000f3e6:	f7 d9 c3 08 	bfextu	r11,r9,0x18,0x8
8000f3ea:	5e 0c       	reteq	r12
8000f3ec:	16 1c       	sub	r12,r11
8000f3ee:	5e 1c       	retne	r12
8000f3f0:	f9 da c2 08 	bfextu	r12,r10,0x10,0x8
8000f3f4:	f7 d9 c2 08 	bfextu	r11,r9,0x10,0x8
8000f3f8:	5e 0c       	reteq	r12
8000f3fa:	16 1c       	sub	r12,r11
8000f3fc:	5e 1c       	retne	r12
8000f3fe:	f9 da c1 08 	bfextu	r12,r10,0x8,0x8
8000f402:	f7 d9 c1 08 	bfextu	r11,r9,0x8,0x8
8000f406:	5e 0c       	reteq	r12
8000f408:	16 1c       	sub	r12,r11
8000f40a:	5e 1c       	retne	r12
8000f40c:	5c 5a       	castu.b	r10
8000f40e:	5c 59       	castu.b	r9
8000f410:	12 1a       	sub	r10,r9
8000f412:	5e fa       	retal	r10
8000f414:	17 8a       	ld.ub	r10,r11[0x0]
8000f416:	19 89       	ld.ub	r9,r12[0x0]
8000f418:	58 0a       	cp.w	r10,0
8000f41a:	5e 09       	reteq	r9
8000f41c:	14 19       	sub	r9,r10
8000f41e:	5e 19       	retne	r9
8000f420:	17 9a       	ld.ub	r10,r11[0x1]
8000f422:	19 99       	ld.ub	r9,r12[0x1]
8000f424:	58 0a       	cp.w	r10,0
8000f426:	5e 09       	reteq	r9
8000f428:	14 19       	sub	r9,r10
8000f42a:	5e 19       	retne	r9
8000f42c:	17 aa       	ld.ub	r10,r11[0x2]
8000f42e:	19 a9       	ld.ub	r9,r12[0x2]
8000f430:	58 0a       	cp.w	r10,0
8000f432:	5e 09       	reteq	r9
8000f434:	14 19       	sub	r9,r10
8000f436:	5e 19       	retne	r9
8000f438:	17 ba       	ld.ub	r10,r11[0x3]
8000f43a:	19 b9       	ld.ub	r9,r12[0x3]
8000f43c:	58 0a       	cp.w	r10,0
8000f43e:	5e 09       	reteq	r9
8000f440:	14 19       	sub	r9,r10
8000f442:	5e 19       	retne	r9
8000f444:	2f cb       	sub	r11,-4
8000f446:	2f cc       	sub	r12,-4
8000f448:	ce 6b       	rjmp	8000f414 <strcmp+0x70>
8000f44a:	d7 03       	nop

8000f44c <get_arg>:
8000f44c:	d4 31       	pushm	r0-r7,lr
8000f44e:	20 8d       	sub	sp,32
8000f450:	fa c4 ff bc 	sub	r4,sp,-68
8000f454:	50 4b       	stdsp	sp[0x10],r11
8000f456:	68 2e       	ld.w	lr,r4[0x8]
8000f458:	50 58       	stdsp	sp[0x14],r8
8000f45a:	12 96       	mov	r6,r9
8000f45c:	7c 0b       	ld.w	r11,lr[0x0]
8000f45e:	70 05       	ld.w	r5,r8[0x0]
8000f460:	50 6e       	stdsp	sp[0x18],lr
8000f462:	58 0b       	cp.w	r11,0
8000f464:	f4 0b 17 00 	moveq	r11,r10
8000f468:	68 03       	ld.w	r3,r4[0x0]
8000f46a:	68 11       	ld.w	r1,r4[0x4]
8000f46c:	40 49       	lddsp	r9,sp[0x10]
8000f46e:	30 08       	mov	r8,0
8000f470:	c2 69       	rjmp	8000f6bc <get_arg+0x270>
8000f472:	2f fb       	sub	r11,-1
8000f474:	32 5c       	mov	r12,37
8000f476:	17 8a       	ld.ub	r10,r11[0x0]
8000f478:	f8 0a 18 00 	cp.b	r10,r12
8000f47c:	5f 1e       	srne	lr
8000f47e:	f0 0a 18 00 	cp.b	r10,r8
8000f482:	5f 1c       	srne	r12
8000f484:	fd ec 00 0c 	and	r12,lr,r12
8000f488:	f0 0c 18 00 	cp.b	r12,r8
8000f48c:	cf 31       	brne	8000f472 <get_arg+0x26>
8000f48e:	58 0a       	cp.w	r10,0
8000f490:	e0 80 01 23 	breq	8000f6d6 <get_arg+0x28a>
8000f494:	30 0c       	mov	r12,0
8000f496:	3f fa       	mov	r10,-1
8000f498:	18 90       	mov	r0,r12
8000f49a:	50 3a       	stdsp	sp[0xc],r10
8000f49c:	18 94       	mov	r4,r12
8000f49e:	18 92       	mov	r2,r12
8000f4a0:	f8 0c 00 3c 	add	r12,r12,r12<<0x3
8000f4a4:	16 97       	mov	r7,r11
8000f4a6:	50 7c       	stdsp	sp[0x1c],r12
8000f4a8:	fe cc a2 c4 	sub	r12,pc,-23868
8000f4ac:	0f 3a       	ld.ub	r10,r7++
8000f4ae:	f8 0a 07 0e 	ld.ub	lr,r12[r10]
8000f4b2:	40 7c       	lddsp	r12,sp[0x1c]
8000f4b4:	1c 0c       	add	r12,lr
8000f4b6:	fe ce a3 9a 	sub	lr,pc,-23654
8000f4ba:	fc 0c 07 0e 	ld.ub	lr,lr[r12]
8000f4be:	20 1e       	sub	lr,1
8000f4c0:	50 0e       	stdsp	sp[0x0],lr
8000f4c2:	fe ce a4 12 	sub	lr,pc,-23534
8000f4c6:	fc 0c 07 0c 	ld.ub	r12,lr[r12]
8000f4ca:	50 7c       	stdsp	sp[0x1c],r12
8000f4cc:	40 0c       	lddsp	r12,sp[0x0]
8000f4ce:	58 7c       	cp.w	r12,7
8000f4d0:	e0 8b 00 ef 	brhi	8000f6ae <get_arg+0x262>
8000f4d4:	fe ce a5 c4 	sub	lr,pc,-23100
8000f4d8:	fc 0c 03 2f 	ld.w	pc,lr[r12<<0x2]
8000f4dc:	36 8b       	mov	r11,104
8000f4de:	f6 0a 18 00 	cp.b	r10,r11
8000f4e2:	e0 80 00 e6 	breq	8000f6ae <get_arg+0x262>
8000f4e6:	37 1b       	mov	r11,113
8000f4e8:	f6 0a 18 00 	cp.b	r10,r11
8000f4ec:	c0 70       	breq	8000f4fa <get_arg+0xae>
8000f4ee:	34 cb       	mov	r11,76
8000f4f0:	f6 0a 18 00 	cp.b	r10,r11
8000f4f4:	c0 51       	brne	8000f4fe <get_arg+0xb2>
8000f4f6:	a3 b4       	sbr	r4,0x3
8000f4f8:	cd b8       	rjmp	8000f6ae <get_arg+0x262>
8000f4fa:	a5 b4       	sbr	r4,0x5
8000f4fc:	cd 98       	rjmp	8000f6ae <get_arg+0x262>
8000f4fe:	08 9a       	mov	r10,r4
8000f500:	0e 9b       	mov	r11,r7
8000f502:	a5 aa       	sbr	r10,0x4
8000f504:	17 3c       	ld.ub	r12,r11++
8000f506:	a5 b4       	sbr	r4,0x5
8000f508:	36 ce       	mov	lr,108
8000f50a:	fc 0c 18 00 	cp.b	r12,lr
8000f50e:	e0 80 00 d1 	breq	8000f6b0 <get_arg+0x264>
8000f512:	14 94       	mov	r4,r10
8000f514:	cc d8       	rjmp	8000f6ae <get_arg+0x262>
8000f516:	eb d5 c0 05 	bfextu	r5,r5,0x0,0x5
8000f51a:	36 7c       	mov	r12,103
8000f51c:	f8 0a 18 00 	cp.b	r10,r12
8000f520:	e0 8b 00 27 	brhi	8000f56e <get_arg+0x122>
8000f524:	36 5b       	mov	r11,101
8000f526:	f6 0a 18 00 	cp.b	r10,r11
8000f52a:	c4 82       	brcc	8000f5ba <get_arg+0x16e>
8000f52c:	34 fb       	mov	r11,79
8000f52e:	f6 0a 18 00 	cp.b	r10,r11
8000f532:	c4 80       	breq	8000f5c2 <get_arg+0x176>
8000f534:	e0 8b 00 0c 	brhi	8000f54c <get_arg+0x100>
8000f538:	34 5b       	mov	r11,69
8000f53a:	f6 0a 18 00 	cp.b	r10,r11
8000f53e:	c3 e0       	breq	8000f5ba <get_arg+0x16e>
8000f540:	34 7b       	mov	r11,71
8000f542:	f6 0a 18 00 	cp.b	r10,r11
8000f546:	c3 a0       	breq	8000f5ba <get_arg+0x16e>
8000f548:	34 4b       	mov	r11,68
8000f54a:	c0 88       	rjmp	8000f55a <get_arg+0x10e>
8000f54c:	35 8b       	mov	r11,88
8000f54e:	f6 0a 18 00 	cp.b	r10,r11
8000f552:	c2 c0       	breq	8000f5aa <get_arg+0x15e>
8000f554:	e0 8b 00 07 	brhi	8000f562 <get_arg+0x116>
8000f558:	35 5b       	mov	r11,85
8000f55a:	f6 0a 18 00 	cp.b	r10,r11
8000f55e:	c3 51       	brne	8000f5c8 <get_arg+0x17c>
8000f560:	c3 18       	rjmp	8000f5c2 <get_arg+0x176>
8000f562:	36 3b       	mov	r11,99
8000f564:	f6 0a 18 00 	cp.b	r10,r11
8000f568:	c2 f0       	breq	8000f5c6 <get_arg+0x17a>
8000f56a:	36 4b       	mov	r11,100
8000f56c:	c0 e8       	rjmp	8000f588 <get_arg+0x13c>
8000f56e:	37 0b       	mov	r11,112
8000f570:	f6 0a 18 00 	cp.b	r10,r11
8000f574:	c2 50       	breq	8000f5be <get_arg+0x172>
8000f576:	e0 8b 00 0d 	brhi	8000f590 <get_arg+0x144>
8000f57a:	36 eb       	mov	r11,110
8000f57c:	f6 0a 18 00 	cp.b	r10,r11
8000f580:	c1 f0       	breq	8000f5be <get_arg+0x172>
8000f582:	e0 8b 00 14 	brhi	8000f5aa <get_arg+0x15e>
8000f586:	36 9b       	mov	r11,105
8000f588:	f6 0a 18 00 	cp.b	r10,r11
8000f58c:	c1 e1       	brne	8000f5c8 <get_arg+0x17c>
8000f58e:	c0 e8       	rjmp	8000f5aa <get_arg+0x15e>
8000f590:	37 5b       	mov	r11,117
8000f592:	f6 0a 18 00 	cp.b	r10,r11
8000f596:	c0 a0       	breq	8000f5aa <get_arg+0x15e>
8000f598:	37 8b       	mov	r11,120
8000f59a:	f6 0a 18 00 	cp.b	r10,r11
8000f59e:	c0 60       	breq	8000f5aa <get_arg+0x15e>
8000f5a0:	37 3b       	mov	r11,115
8000f5a2:	f6 0a 18 00 	cp.b	r10,r11
8000f5a6:	c1 11       	brne	8000f5c8 <get_arg+0x17c>
8000f5a8:	c0 b8       	rjmp	8000f5be <get_arg+0x172>
8000f5aa:	ed b4 00 04 	bld	r4,0x4
8000f5ae:	c0 a0       	breq	8000f5c2 <get_arg+0x176>
8000f5b0:	ed b4 00 05 	bld	r4,0x5
8000f5b4:	c0 91       	brne	8000f5c6 <get_arg+0x17a>
8000f5b6:	30 20       	mov	r0,2
8000f5b8:	c0 88       	rjmp	8000f5c8 <get_arg+0x17c>
8000f5ba:	30 40       	mov	r0,4
8000f5bc:	c0 68       	rjmp	8000f5c8 <get_arg+0x17c>
8000f5be:	30 30       	mov	r0,3
8000f5c0:	c0 48       	rjmp	8000f5c8 <get_arg+0x17c>
8000f5c2:	30 10       	mov	r0,1
8000f5c4:	c0 28       	rjmp	8000f5c8 <get_arg+0x17c>
8000f5c6:	30 00       	mov	r0,0
8000f5c8:	40 3b       	lddsp	r11,sp[0xc]
8000f5ca:	5b fb       	cp.w	r11,-1
8000f5cc:	c0 40       	breq	8000f5d4 <get_arg+0x188>
8000f5ce:	e2 0b 09 20 	st.w	r1[r11<<0x2],r0
8000f5d2:	c6 e8       	rjmp	8000f6ae <get_arg+0x262>
8000f5d4:	58 60       	cp.w	r0,6
8000f5d6:	e0 8b 00 6c 	brhi	8000f6ae <get_arg+0x262>
8000f5da:	6c 0a       	ld.w	r10,r6[0x0]
8000f5dc:	ea cc ff ff 	sub	r12,r5,-1
8000f5e0:	fe ce a6 b0 	sub	lr,pc,-22864
8000f5e4:	fc 00 03 2f 	ld.w	pc,lr[r0<<0x2]
8000f5e8:	f4 cb ff f8 	sub	r11,r10,-8
8000f5ec:	8d 0b       	st.w	r6[0x0],r11
8000f5ee:	f4 ea 00 00 	ld.d	r10,r10[0]
8000f5f2:	e6 05 08 3a 	st.d	r3[r5<<0x3],r10
8000f5f6:	c0 f8       	rjmp	8000f614 <get_arg+0x1c8>
8000f5f8:	f4 cb ff fc 	sub	r11,r10,-4
8000f5fc:	8d 0b       	st.w	r6[0x0],r11
8000f5fe:	74 0a       	ld.w	r10,r10[0x0]
8000f600:	e6 05 09 3a 	st.w	r3[r5<<0x3],r10
8000f604:	c0 88       	rjmp	8000f614 <get_arg+0x1c8>
8000f606:	f4 cb ff f8 	sub	r11,r10,-8
8000f60a:	8d 0b       	st.w	r6[0x0],r11
8000f60c:	f4 ea 00 00 	ld.d	r10,r10[0]
8000f610:	e6 05 08 3a 	st.d	r3[r5<<0x3],r10
8000f614:	0e 9b       	mov	r11,r7
8000f616:	18 95       	mov	r5,r12
8000f618:	c4 c8       	rjmp	8000f6b0 <get_arg+0x264>
8000f61a:	62 0a       	ld.w	r10,r1[0x0]
8000f61c:	5b fa       	cp.w	r10,-1
8000f61e:	c0 a1       	brne	8000f632 <get_arg+0x1e6>
8000f620:	50 19       	stdsp	sp[0x4],r9
8000f622:	50 28       	stdsp	sp[0x8],r8
8000f624:	e0 6a 00 80 	mov	r10,128
8000f628:	30 0b       	mov	r11,0
8000f62a:	02 9c       	mov	r12,r1
8000f62c:	c9 9e       	rcall	8000f35e <memset>
8000f62e:	40 28       	lddsp	r8,sp[0x8]
8000f630:	40 19       	lddsp	r9,sp[0x4]
8000f632:	e4 cc 00 01 	sub	r12,r2,1
8000f636:	0e 9b       	mov	r11,r7
8000f638:	50 3c       	stdsp	sp[0xc],r12
8000f63a:	f2 0c 0c 49 	max	r9,r9,r12
8000f63e:	c3 98       	rjmp	8000f6b0 <get_arg+0x264>
8000f640:	62 0a       	ld.w	r10,r1[0x0]
8000f642:	5b fa       	cp.w	r10,-1
8000f644:	c0 a1       	brne	8000f658 <get_arg+0x20c>
8000f646:	50 19       	stdsp	sp[0x4],r9
8000f648:	50 28       	stdsp	sp[0x8],r8
8000f64a:	e0 6a 00 80 	mov	r10,128
8000f64e:	30 0b       	mov	r11,0
8000f650:	02 9c       	mov	r12,r1
8000f652:	c8 6e       	rcall	8000f35e <memset>
8000f654:	40 28       	lddsp	r8,sp[0x8]
8000f656:	40 19       	lddsp	r9,sp[0x4]
8000f658:	20 12       	sub	r2,1
8000f65a:	30 0a       	mov	r10,0
8000f65c:	0e 9b       	mov	r11,r7
8000f65e:	e2 02 09 2a 	st.w	r1[r2<<0x2],r10
8000f662:	f2 02 0c 49 	max	r9,r9,r2
8000f666:	c2 58       	rjmp	8000f6b0 <get_arg+0x264>
8000f668:	16 97       	mov	r7,r11
8000f66a:	6c 0a       	ld.w	r10,r6[0x0]
8000f66c:	f4 cb ff fc 	sub	r11,r10,-4
8000f670:	8d 0b       	st.w	r6[0x0],r11
8000f672:	74 0a       	ld.w	r10,r10[0x0]
8000f674:	0e 9b       	mov	r11,r7
8000f676:	e6 05 09 3a 	st.w	r3[r5<<0x3],r10
8000f67a:	2f f5       	sub	r5,-1
8000f67c:	c1 a8       	rjmp	8000f6b0 <get_arg+0x264>
8000f67e:	f4 c2 00 30 	sub	r2,r10,48
8000f682:	c0 68       	rjmp	8000f68e <get_arg+0x242>
8000f684:	e4 02 00 22 	add	r2,r2,r2<<0x2
8000f688:	2f f7       	sub	r7,-1
8000f68a:	f4 02 00 12 	add	r2,r10,r2<<0x1
8000f68e:	0f 8a       	ld.ub	r10,r7[0x0]
8000f690:	58 0a       	cp.w	r10,0
8000f692:	c0 e0       	breq	8000f6ae <get_arg+0x262>
8000f694:	23 0a       	sub	r10,48
8000f696:	58 9a       	cp.w	r10,9
8000f698:	fe 98 ff f6 	brls	8000f684 <get_arg+0x238>
8000f69c:	c0 98       	rjmp	8000f6ae <get_arg+0x262>
8000f69e:	2f f7       	sub	r7,-1
8000f6a0:	0f 8a       	ld.ub	r10,r7[0x0]
8000f6a2:	58 0a       	cp.w	r10,0
8000f6a4:	c0 50       	breq	8000f6ae <get_arg+0x262>
8000f6a6:	23 0a       	sub	r10,48
8000f6a8:	58 9a       	cp.w	r10,9
8000f6aa:	fe 98 ff fa 	brls	8000f69e <get_arg+0x252>
8000f6ae:	0e 9b       	mov	r11,r7
8000f6b0:	40 7c       	lddsp	r12,sp[0x1c]
8000f6b2:	30 ba       	mov	r10,11
8000f6b4:	f4 0c 18 00 	cp.b	r12,r10
8000f6b8:	fe 91 fe f4 	brne	8000f4a0 <get_arg+0x54>
8000f6bc:	40 42       	lddsp	r2,sp[0x10]
8000f6be:	17 8c       	ld.ub	r12,r11[0x0]
8000f6c0:	0a 32       	cp.w	r2,r5
8000f6c2:	5f 4a       	srge	r10
8000f6c4:	f0 0c 18 00 	cp.b	r12,r8
8000f6c8:	5f 1c       	srne	r12
8000f6ca:	f9 ea 00 0a 	and	r10,r12,r10
8000f6ce:	f0 0a 18 00 	cp.b	r10,r8
8000f6d2:	fe 91 fe d1 	brne	8000f474 <get_arg+0x28>
8000f6d6:	30 08       	mov	r8,0
8000f6d8:	40 4e       	lddsp	lr,sp[0x10]
8000f6da:	17 8a       	ld.ub	r10,r11[0x0]
8000f6dc:	e2 05 00 21 	add	r1,r1,r5<<0x2
8000f6e0:	f0 0a 18 00 	cp.b	r10,r8
8000f6e4:	fc 09 17 10 	movne	r9,lr
8000f6e8:	e6 05 00 38 	add	r8,r3,r5<<0x3
8000f6ec:	06 9e       	mov	lr,r3
8000f6ee:	c2 a8       	rjmp	8000f742 <get_arg+0x2f6>
8000f6f0:	62 0a       	ld.w	r10,r1[0x0]
8000f6f2:	58 3a       	cp.w	r10,3
8000f6f4:	c1 e0       	breq	8000f730 <get_arg+0x2e4>
8000f6f6:	e0 89 00 07 	brgt	8000f704 <get_arg+0x2b8>
8000f6fa:	58 1a       	cp.w	r10,1
8000f6fc:	c1 a0       	breq	8000f730 <get_arg+0x2e4>
8000f6fe:	58 2a       	cp.w	r10,2
8000f700:	c1 81       	brne	8000f730 <get_arg+0x2e4>
8000f702:	c0 58       	rjmp	8000f70c <get_arg+0x2c0>
8000f704:	58 5a       	cp.w	r10,5
8000f706:	c0 c0       	breq	8000f71e <get_arg+0x2d2>
8000f708:	c0 b5       	brlt	8000f71e <get_arg+0x2d2>
8000f70a:	c1 38       	rjmp	8000f730 <get_arg+0x2e4>
8000f70c:	6c 0a       	ld.w	r10,r6[0x0]
8000f70e:	f4 cc ff f8 	sub	r12,r10,-8
8000f712:	8d 0c       	st.w	r6[0x0],r12
8000f714:	f4 e2 00 00 	ld.d	r2,r10[0]
8000f718:	f0 e3 00 00 	st.d	r8[0],r2
8000f71c:	c1 08       	rjmp	8000f73c <get_arg+0x2f0>
8000f71e:	6c 0a       	ld.w	r10,r6[0x0]
8000f720:	f4 cc ff f8 	sub	r12,r10,-8
8000f724:	8d 0c       	st.w	r6[0x0],r12
8000f726:	f4 e2 00 00 	ld.d	r2,r10[0]
8000f72a:	f0 e3 00 00 	st.d	r8[0],r2
8000f72e:	c0 78       	rjmp	8000f73c <get_arg+0x2f0>
8000f730:	6c 0a       	ld.w	r10,r6[0x0]
8000f732:	f4 cc ff fc 	sub	r12,r10,-4
8000f736:	8d 0c       	st.w	r6[0x0],r12
8000f738:	74 0a       	ld.w	r10,r10[0x0]
8000f73a:	91 0a       	st.w	r8[0x0],r10
8000f73c:	2f f5       	sub	r5,-1
8000f73e:	2f 88       	sub	r8,-8
8000f740:	2f c1       	sub	r1,-4
8000f742:	12 35       	cp.w	r5,r9
8000f744:	fe 9a ff d6 	brle	8000f6f0 <get_arg+0x2a4>
8000f748:	1c 93       	mov	r3,lr
8000f74a:	40 52       	lddsp	r2,sp[0x14]
8000f74c:	40 6e       	lddsp	lr,sp[0x18]
8000f74e:	85 05       	st.w	r2[0x0],r5
8000f750:	9d 0b       	st.w	lr[0x0],r11
8000f752:	40 4b       	lddsp	r11,sp[0x10]
8000f754:	e6 0b 00 3c 	add	r12,r3,r11<<0x3
8000f758:	2f 8d       	sub	sp,-32
8000f75a:	d8 32       	popm	r0-r7,pc

8000f75c <__sprint_r>:
8000f75c:	d4 21       	pushm	r4-r7,lr
8000f75e:	14 97       	mov	r7,r10
8000f760:	74 28       	ld.w	r8,r10[0x8]
8000f762:	58 08       	cp.w	r8,0
8000f764:	c0 41       	brne	8000f76c <__sprint_r+0x10>
8000f766:	95 18       	st.w	r10[0x4],r8
8000f768:	10 9c       	mov	r12,r8
8000f76a:	d8 22       	popm	r4-r7,pc
8000f76c:	e0 a0 18 b4 	rcall	800128d4 <__sfvwrite_r>
8000f770:	30 08       	mov	r8,0
8000f772:	8f 18       	st.w	r7[0x4],r8
8000f774:	8f 28       	st.w	r7[0x8],r8
8000f776:	d8 22       	popm	r4-r7,pc

8000f778 <_vfprintf_r>:
8000f778:	d4 31       	pushm	r0-r7,lr
8000f77a:	fa cd 06 bc 	sub	sp,sp,1724
8000f77e:	51 09       	stdsp	sp[0x40],r9
8000f780:	16 91       	mov	r1,r11
8000f782:	14 97       	mov	r7,r10
8000f784:	18 95       	mov	r5,r12
8000f786:	e0 a0 1a 1d 	rcall	80012bc0 <_localeconv_r>
8000f78a:	78 0c       	ld.w	r12,r12[0x0]
8000f78c:	50 cc       	stdsp	sp[0x30],r12
8000f78e:	58 05       	cp.w	r5,0
8000f790:	c0 70       	breq	8000f79e <_vfprintf_r+0x26>
8000f792:	6a 68       	ld.w	r8,r5[0x18]
8000f794:	58 08       	cp.w	r8,0
8000f796:	c0 41       	brne	8000f79e <_vfprintf_r+0x26>
8000f798:	0a 9c       	mov	r12,r5
8000f79a:	e0 a0 17 3d 	rcall	80012614 <__sinit>
8000f79e:	fe c8 a4 aa 	sub	r8,pc,-23382
8000f7a2:	10 31       	cp.w	r1,r8
8000f7a4:	c0 31       	brne	8000f7aa <_vfprintf_r+0x32>
8000f7a6:	6a 01       	ld.w	r1,r5[0x0]
8000f7a8:	c0 c8       	rjmp	8000f7c0 <_vfprintf_r+0x48>
8000f7aa:	fe c8 a4 96 	sub	r8,pc,-23402
8000f7ae:	10 31       	cp.w	r1,r8
8000f7b0:	c0 31       	brne	8000f7b6 <_vfprintf_r+0x3e>
8000f7b2:	6a 11       	ld.w	r1,r5[0x4]
8000f7b4:	c0 68       	rjmp	8000f7c0 <_vfprintf_r+0x48>
8000f7b6:	fe c8 a4 82 	sub	r8,pc,-23422
8000f7ba:	10 31       	cp.w	r1,r8
8000f7bc:	eb f1 00 02 	ld.weq	r1,r5[0x8]
8000f7c0:	82 68       	ld.sh	r8,r1[0xc]
8000f7c2:	ed b8 00 03 	bld	r8,0x3
8000f7c6:	c0 41       	brne	8000f7ce <_vfprintf_r+0x56>
8000f7c8:	62 48       	ld.w	r8,r1[0x10]
8000f7ca:	58 08       	cp.w	r8,0
8000f7cc:	c0 71       	brne	8000f7da <_vfprintf_r+0x62>
8000f7ce:	02 9b       	mov	r11,r1
8000f7d0:	0a 9c       	mov	r12,r5
8000f7d2:	e0 a0 0f 5d 	rcall	8001168c <__swsetup_r>
8000f7d6:	e0 81 0f 54 	brne	8001167e <_vfprintf_r+0x1f06>
8000f7da:	82 68       	ld.sh	r8,r1[0xc]
8000f7dc:	10 99       	mov	r9,r8
8000f7de:	e2 19 00 1a 	andl	r9,0x1a,COH
8000f7e2:	58 a9       	cp.w	r9,10
8000f7e4:	c3 c1       	brne	8000f85c <_vfprintf_r+0xe4>
8000f7e6:	82 79       	ld.sh	r9,r1[0xe]
8000f7e8:	30 0a       	mov	r10,0
8000f7ea:	f4 09 19 00 	cp.h	r9,r10
8000f7ee:	c3 75       	brlt	8000f85c <_vfprintf_r+0xe4>
8000f7f0:	a1 d8       	cbr	r8,0x1
8000f7f2:	fb 58 05 d0 	st.h	sp[1488],r8
8000f7f6:	62 88       	ld.w	r8,r1[0x20]
8000f7f8:	fb 48 05 e4 	st.w	sp[1508],r8
8000f7fc:	62 a8       	ld.w	r8,r1[0x28]
8000f7fe:	fb 48 05 ec 	st.w	sp[1516],r8
8000f802:	fa c8 ff bc 	sub	r8,sp,-68
8000f806:	fb 48 05 d4 	st.w	sp[1492],r8
8000f80a:	fb 48 05 c4 	st.w	sp[1476],r8
8000f80e:	e0 68 04 00 	mov	r8,1024
8000f812:	fb 48 05 d8 	st.w	sp[1496],r8
8000f816:	fb 48 05 cc 	st.w	sp[1484],r8
8000f81a:	30 08       	mov	r8,0
8000f81c:	fb 59 05 d2 	st.h	sp[1490],r9
8000f820:	0e 9a       	mov	r10,r7
8000f822:	41 09       	lddsp	r9,sp[0x40]
8000f824:	fa c7 fa 3c 	sub	r7,sp,-1476
8000f828:	fb 48 05 dc 	st.w	sp[1500],r8
8000f82c:	0a 9c       	mov	r12,r5
8000f82e:	0e 9b       	mov	r11,r7
8000f830:	ca 4f       	rcall	8000f778 <_vfprintf_r>
8000f832:	50 bc       	stdsp	sp[0x2c],r12
8000f834:	c0 95       	brlt	8000f846 <_vfprintf_r+0xce>
8000f836:	0e 9b       	mov	r11,r7
8000f838:	0a 9c       	mov	r12,r5
8000f83a:	e0 a0 16 15 	rcall	80012464 <_fflush_r>
8000f83e:	40 be       	lddsp	lr,sp[0x2c]
8000f840:	f9 be 01 ff 	movne	lr,-1
8000f844:	50 be       	stdsp	sp[0x2c],lr
8000f846:	fb 08 05 d0 	ld.sh	r8,sp[1488]
8000f84a:	ed b8 00 06 	bld	r8,0x6
8000f84e:	e0 81 0f 1a 	brne	80011682 <_vfprintf_r+0x1f0a>
8000f852:	82 68       	ld.sh	r8,r1[0xc]
8000f854:	a7 a8       	sbr	r8,0x6
8000f856:	a2 68       	st.h	r1[0xc],r8
8000f858:	e0 8f 0f 15 	bral	80011682 <_vfprintf_r+0x1f0a>
8000f85c:	30 08       	mov	r8,0
8000f85e:	fb 48 06 b4 	st.w	sp[1716],r8
8000f862:	fb 48 06 90 	st.w	sp[1680],r8
8000f866:	fb 48 06 8c 	st.w	sp[1676],r8
8000f86a:	fb 48 06 b0 	st.w	sp[1712],r8
8000f86e:	30 08       	mov	r8,0
8000f870:	30 09       	mov	r9,0
8000f872:	50 a7       	stdsp	sp[0x28],r7
8000f874:	50 78       	stdsp	sp[0x1c],r8
8000f876:	fa c3 f9 e0 	sub	r3,sp,-1568
8000f87a:	3f f8       	mov	r8,-1
8000f87c:	50 59       	stdsp	sp[0x14],r9
8000f87e:	fb 43 06 88 	st.w	sp[1672],r3
8000f882:	fb 48 05 44 	st.w	sp[1348],r8
8000f886:	12 9c       	mov	r12,r9
8000f888:	50 69       	stdsp	sp[0x18],r9
8000f88a:	50 d9       	stdsp	sp[0x34],r9
8000f88c:	50 e9       	stdsp	sp[0x38],r9
8000f88e:	50 b9       	stdsp	sp[0x2c],r9
8000f890:	12 97       	mov	r7,r9
8000f892:	0a 94       	mov	r4,r5
8000f894:	40 a2       	lddsp	r2,sp[0x28]
8000f896:	32 5a       	mov	r10,37
8000f898:	30 08       	mov	r8,0
8000f89a:	c0 28       	rjmp	8000f89e <_vfprintf_r+0x126>
8000f89c:	2f f2       	sub	r2,-1
8000f89e:	05 89       	ld.ub	r9,r2[0x0]
8000f8a0:	f0 09 18 00 	cp.b	r9,r8
8000f8a4:	5f 1b       	srne	r11
8000f8a6:	f4 09 18 00 	cp.b	r9,r10
8000f8aa:	5f 19       	srne	r9
8000f8ac:	f3 eb 00 0b 	and	r11,r9,r11
8000f8b0:	f0 0b 18 00 	cp.b	r11,r8
8000f8b4:	cf 41       	brne	8000f89c <_vfprintf_r+0x124>
8000f8b6:	40 ab       	lddsp	r11,sp[0x28]
8000f8b8:	e4 0b 01 06 	sub	r6,r2,r11
8000f8bc:	c1 e0       	breq	8000f8f8 <_vfprintf_r+0x180>
8000f8be:	fa f8 06 90 	ld.w	r8,sp[1680]
8000f8c2:	0c 08       	add	r8,r6
8000f8c4:	87 0b       	st.w	r3[0x0],r11
8000f8c6:	fb 48 06 90 	st.w	sp[1680],r8
8000f8ca:	87 16       	st.w	r3[0x4],r6
8000f8cc:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000f8d0:	2f f8       	sub	r8,-1
8000f8d2:	fb 48 06 8c 	st.w	sp[1676],r8
8000f8d6:	58 78       	cp.w	r8,7
8000f8d8:	e0 89 00 04 	brgt	8000f8e0 <_vfprintf_r+0x168>
8000f8dc:	2f 83       	sub	r3,-8
8000f8de:	c0 a8       	rjmp	8000f8f2 <_vfprintf_r+0x17a>
8000f8e0:	fa ca f9 78 	sub	r10,sp,-1672
8000f8e4:	02 9b       	mov	r11,r1
8000f8e6:	08 9c       	mov	r12,r4
8000f8e8:	c3 af       	rcall	8000f75c <__sprint_r>
8000f8ea:	e0 81 0e c6 	brne	80011676 <_vfprintf_r+0x1efe>
8000f8ee:	fa c3 f9 e0 	sub	r3,sp,-1568
8000f8f2:	40 ba       	lddsp	r10,sp[0x2c]
8000f8f4:	0c 0a       	add	r10,r6
8000f8f6:	50 ba       	stdsp	sp[0x2c],r10
8000f8f8:	05 89       	ld.ub	r9,r2[0x0]
8000f8fa:	30 08       	mov	r8,0
8000f8fc:	f0 09 18 00 	cp.b	r9,r8
8000f900:	e0 80 0e aa 	breq	80011654 <_vfprintf_r+0x1edc>
8000f904:	30 09       	mov	r9,0
8000f906:	fb 68 06 bb 	st.b	sp[1723],r8
8000f90a:	0e 96       	mov	r6,r7
8000f90c:	e4 c8 ff ff 	sub	r8,r2,-1
8000f910:	3f fe       	mov	lr,-1
8000f912:	50 93       	stdsp	sp[0x24],r3
8000f914:	50 41       	stdsp	sp[0x10],r1
8000f916:	0e 93       	mov	r3,r7
8000f918:	04 91       	mov	r1,r2
8000f91a:	50 89       	stdsp	sp[0x20],r9
8000f91c:	50 a8       	stdsp	sp[0x28],r8
8000f91e:	50 2e       	stdsp	sp[0x8],lr
8000f920:	50 39       	stdsp	sp[0xc],r9
8000f922:	12 95       	mov	r5,r9
8000f924:	12 90       	mov	r0,r9
8000f926:	10 97       	mov	r7,r8
8000f928:	08 92       	mov	r2,r4
8000f92a:	c0 78       	rjmp	8000f938 <_vfprintf_r+0x1c0>
8000f92c:	3f fc       	mov	r12,-1
8000f92e:	08 97       	mov	r7,r4
8000f930:	50 2c       	stdsp	sp[0x8],r12
8000f932:	c0 38       	rjmp	8000f938 <_vfprintf_r+0x1c0>
8000f934:	30 0b       	mov	r11,0
8000f936:	50 3b       	stdsp	sp[0xc],r11
8000f938:	0f 38       	ld.ub	r8,r7++
8000f93a:	c0 28       	rjmp	8000f93e <_vfprintf_r+0x1c6>
8000f93c:	12 90       	mov	r0,r9
8000f93e:	f0 c9 00 20 	sub	r9,r8,32
8000f942:	e0 49 00 58 	cp.w	r9,88
8000f946:	e0 8b 0a 30 	brhi	80010da6 <_vfprintf_r+0x162e>
8000f94a:	fe ca a9 fe 	sub	r10,pc,-22018
8000f94e:	f4 09 03 2f 	ld.w	pc,r10[r9<<0x2]
8000f952:	50 a7       	stdsp	sp[0x28],r7
8000f954:	50 80       	stdsp	sp[0x20],r0
8000f956:	0c 97       	mov	r7,r6
8000f958:	04 94       	mov	r4,r2
8000f95a:	06 96       	mov	r6,r3
8000f95c:	02 92       	mov	r2,r1
8000f95e:	fe c9 a7 d6 	sub	r9,pc,-22570
8000f962:	40 93       	lddsp	r3,sp[0x24]
8000f964:	10 90       	mov	r0,r8
8000f966:	40 41       	lddsp	r1,sp[0x10]
8000f968:	50 d9       	stdsp	sp[0x34],r9
8000f96a:	e0 8f 08 8e 	bral	80010a86 <_vfprintf_r+0x130e>
8000f96e:	30 08       	mov	r8,0
8000f970:	fb 39 06 bb 	ld.ub	r9,sp[1723]
8000f974:	f0 09 18 00 	cp.b	r9,r8
8000f978:	ce 01       	brne	8000f938 <_vfprintf_r+0x1c0>
8000f97a:	32 08       	mov	r8,32
8000f97c:	c6 e8       	rjmp	8000fa58 <_vfprintf_r+0x2e0>
8000f97e:	a1 a5       	sbr	r5,0x0
8000f980:	cd cb       	rjmp	8000f938 <_vfprintf_r+0x1c0>
8000f982:	0f 89       	ld.ub	r9,r7[0x0]
8000f984:	f2 c8 00 30 	sub	r8,r9,48
8000f988:	58 98       	cp.w	r8,9
8000f98a:	e0 8b 00 1d 	brhi	8000f9c4 <_vfprintf_r+0x24c>
8000f98e:	ee c8 ff ff 	sub	r8,r7,-1
8000f992:	30 0b       	mov	r11,0
8000f994:	23 09       	sub	r9,48
8000f996:	f6 0b 00 2b 	add	r11,r11,r11<<0x2
8000f99a:	f2 0b 00 1b 	add	r11,r9,r11<<0x1
8000f99e:	11 39       	ld.ub	r9,r8++
8000f9a0:	f2 ca 00 30 	sub	r10,r9,48
8000f9a4:	58 9a       	cp.w	r10,9
8000f9a6:	fe 98 ff f7 	brls	8000f994 <_vfprintf_r+0x21c>
8000f9aa:	e0 49 00 24 	cp.w	r9,36
8000f9ae:	cc 31       	brne	8000f934 <_vfprintf_r+0x1bc>
8000f9b0:	e0 4b 00 20 	cp.w	r11,32
8000f9b4:	e0 89 0e 60 	brgt	80011674 <_vfprintf_r+0x1efc>
8000f9b8:	20 1b       	sub	r11,1
8000f9ba:	fa f9 06 b4 	ld.w	r9,sp[1716]
8000f9be:	12 3b       	cp.w	r11,r9
8000f9c0:	c0 95       	brlt	8000f9d2 <_vfprintf_r+0x25a>
8000f9c2:	c1 08       	rjmp	8000f9e2 <_vfprintf_r+0x26a>
8000f9c4:	fa f9 06 b4 	ld.w	r9,sp[1716]
8000f9c8:	ec ca ff ff 	sub	r10,r6,-1
8000f9cc:	12 36       	cp.w	r6,r9
8000f9ce:	c1 f5       	brlt	8000fa0c <_vfprintf_r+0x294>
8000f9d0:	c2 68       	rjmp	8000fa1c <_vfprintf_r+0x2a4>
8000f9d2:	fa ce f9 44 	sub	lr,sp,-1724
8000f9d6:	10 97       	mov	r7,r8
8000f9d8:	fc 0b 00 3b 	add	r11,lr,r11<<0x3
8000f9dc:	f6 f0 fd 88 	ld.w	r0,r11[-632]
8000f9e0:	c3 58       	rjmp	8000fa4a <_vfprintf_r+0x2d2>
8000f9e2:	10 97       	mov	r7,r8
8000f9e4:	fa c8 f9 50 	sub	r8,sp,-1712
8000f9e8:	1a d8       	st.w	--sp,r8
8000f9ea:	fa c8 fa b8 	sub	r8,sp,-1352
8000f9ee:	1a d8       	st.w	--sp,r8
8000f9f0:	fa c8 fb b4 	sub	r8,sp,-1100
8000f9f4:	02 9a       	mov	r10,r1
8000f9f6:	1a d8       	st.w	--sp,r8
8000f9f8:	04 9c       	mov	r12,r2
8000f9fa:	fa c8 f9 40 	sub	r8,sp,-1728
8000f9fe:	fa c9 ff b4 	sub	r9,sp,-76
8000fa02:	fe b0 fd 25 	rcall	8000f44c <get_arg>
8000fa06:	2f dd       	sub	sp,-12
8000fa08:	78 00       	ld.w	r0,r12[0x0]
8000fa0a:	c2 08       	rjmp	8000fa4a <_vfprintf_r+0x2d2>
8000fa0c:	fa cc f9 44 	sub	r12,sp,-1724
8000fa10:	14 96       	mov	r6,r10
8000fa12:	f8 03 00 38 	add	r8,r12,r3<<0x3
8000fa16:	f0 f0 fd 88 	ld.w	r0,r8[-632]
8000fa1a:	c1 88       	rjmp	8000fa4a <_vfprintf_r+0x2d2>
8000fa1c:	41 08       	lddsp	r8,sp[0x40]
8000fa1e:	59 f9       	cp.w	r9,31
8000fa20:	e0 89 00 11 	brgt	8000fa42 <_vfprintf_r+0x2ca>
8000fa24:	f0 cb ff fc 	sub	r11,r8,-4
8000fa28:	51 0b       	stdsp	sp[0x40],r11
8000fa2a:	70 00       	ld.w	r0,r8[0x0]
8000fa2c:	fa cb f9 44 	sub	r11,sp,-1724
8000fa30:	f6 09 00 38 	add	r8,r11,r9<<0x3
8000fa34:	f1 40 fd 88 	st.w	r8[-632],r0
8000fa38:	2f f9       	sub	r9,-1
8000fa3a:	14 96       	mov	r6,r10
8000fa3c:	fb 49 06 b4 	st.w	sp[1716],r9
8000fa40:	c0 58       	rjmp	8000fa4a <_vfprintf_r+0x2d2>
8000fa42:	70 00       	ld.w	r0,r8[0x0]
8000fa44:	14 96       	mov	r6,r10
8000fa46:	2f c8       	sub	r8,-4
8000fa48:	51 08       	stdsp	sp[0x40],r8
8000fa4a:	58 00       	cp.w	r0,0
8000fa4c:	fe 94 ff 76 	brge	8000f938 <_vfprintf_r+0x1c0>
8000fa50:	5c 30       	neg	r0
8000fa52:	a3 a5       	sbr	r5,0x2
8000fa54:	c7 2b       	rjmp	8000f938 <_vfprintf_r+0x1c0>
8000fa56:	32 b8       	mov	r8,43
8000fa58:	fb 68 06 bb 	st.b	sp[1723],r8
8000fa5c:	c6 eb       	rjmp	8000f938 <_vfprintf_r+0x1c0>
8000fa5e:	0f 38       	ld.ub	r8,r7++
8000fa60:	e0 48 00 2a 	cp.w	r8,42
8000fa64:	c0 30       	breq	8000fa6a <_vfprintf_r+0x2f2>
8000fa66:	30 09       	mov	r9,0
8000fa68:	c7 98       	rjmp	8000fb5a <_vfprintf_r+0x3e2>
8000fa6a:	0f 88       	ld.ub	r8,r7[0x0]
8000fa6c:	f0 c9 00 30 	sub	r9,r8,48
8000fa70:	58 99       	cp.w	r9,9
8000fa72:	e0 8b 00 1f 	brhi	8000fab0 <_vfprintf_r+0x338>
8000fa76:	ee c4 ff ff 	sub	r4,r7,-1
8000fa7a:	30 0b       	mov	r11,0
8000fa7c:	23 08       	sub	r8,48
8000fa7e:	f6 0b 00 2b 	add	r11,r11,r11<<0x2
8000fa82:	f0 0b 00 1b 	add	r11,r8,r11<<0x1
8000fa86:	09 38       	ld.ub	r8,r4++
8000fa88:	f0 c9 00 30 	sub	r9,r8,48
8000fa8c:	58 99       	cp.w	r9,9
8000fa8e:	fe 98 ff f7 	brls	8000fa7c <_vfprintf_r+0x304>
8000fa92:	e0 48 00 24 	cp.w	r8,36
8000fa96:	fe 91 ff 4f 	brne	8000f934 <_vfprintf_r+0x1bc>
8000fa9a:	e0 4b 00 20 	cp.w	r11,32
8000fa9e:	e0 89 0d eb 	brgt	80011674 <_vfprintf_r+0x1efc>
8000faa2:	20 1b       	sub	r11,1
8000faa4:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000faa8:	10 3b       	cp.w	r11,r8
8000faaa:	c0 a5       	brlt	8000fabe <_vfprintf_r+0x346>
8000faac:	c1 18       	rjmp	8000face <_vfprintf_r+0x356>
8000faae:	d7 03       	nop
8000fab0:	fa fa 06 b4 	ld.w	r10,sp[1716]
8000fab4:	ec c9 ff ff 	sub	r9,r6,-1
8000fab8:	14 36       	cp.w	r6,r10
8000faba:	c1 f5       	brlt	8000faf8 <_vfprintf_r+0x380>
8000fabc:	c2 88       	rjmp	8000fb0c <_vfprintf_r+0x394>
8000fabe:	fa ca f9 44 	sub	r10,sp,-1724
8000fac2:	f4 0b 00 3b 	add	r11,r10,r11<<0x3
8000fac6:	f6 fb fd 88 	ld.w	r11,r11[-632]
8000faca:	50 2b       	stdsp	sp[0x8],r11
8000facc:	c3 c8       	rjmp	8000fb44 <_vfprintf_r+0x3cc>
8000face:	fa c8 f9 50 	sub	r8,sp,-1712
8000fad2:	1a d8       	st.w	--sp,r8
8000fad4:	fa c8 fa b8 	sub	r8,sp,-1352
8000fad8:	1a d8       	st.w	--sp,r8
8000fada:	fa c8 fb b4 	sub	r8,sp,-1100
8000fade:	02 9a       	mov	r10,r1
8000fae0:	1a d8       	st.w	--sp,r8
8000fae2:	04 9c       	mov	r12,r2
8000fae4:	fa c8 f9 40 	sub	r8,sp,-1728
8000fae8:	fa c9 ff b4 	sub	r9,sp,-76
8000faec:	fe b0 fc b0 	rcall	8000f44c <get_arg>
8000faf0:	2f dd       	sub	sp,-12
8000faf2:	78 0c       	ld.w	r12,r12[0x0]
8000faf4:	50 2c       	stdsp	sp[0x8],r12
8000faf6:	c2 78       	rjmp	8000fb44 <_vfprintf_r+0x3cc>
8000faf8:	12 96       	mov	r6,r9
8000fafa:	0e 94       	mov	r4,r7
8000fafc:	fa c9 f9 44 	sub	r9,sp,-1724
8000fb00:	f2 03 00 38 	add	r8,r9,r3<<0x3
8000fb04:	f0 f8 fd 88 	ld.w	r8,r8[-632]
8000fb08:	50 28       	stdsp	sp[0x8],r8
8000fb0a:	c1 d8       	rjmp	8000fb44 <_vfprintf_r+0x3cc>
8000fb0c:	41 08       	lddsp	r8,sp[0x40]
8000fb0e:	59 fa       	cp.w	r10,31
8000fb10:	e0 89 00 14 	brgt	8000fb38 <_vfprintf_r+0x3c0>
8000fb14:	f0 cb ff fc 	sub	r11,r8,-4
8000fb18:	70 08       	ld.w	r8,r8[0x0]
8000fb1a:	51 0b       	stdsp	sp[0x40],r11
8000fb1c:	50 28       	stdsp	sp[0x8],r8
8000fb1e:	fa c6 f9 44 	sub	r6,sp,-1724
8000fb22:	40 2e       	lddsp	lr,sp[0x8]
8000fb24:	ec 0a 00 38 	add	r8,r6,r10<<0x3
8000fb28:	f1 4e fd 88 	st.w	r8[-632],lr
8000fb2c:	2f fa       	sub	r10,-1
8000fb2e:	0e 94       	mov	r4,r7
8000fb30:	fb 4a 06 b4 	st.w	sp[1716],r10
8000fb34:	12 96       	mov	r6,r9
8000fb36:	c0 78       	rjmp	8000fb44 <_vfprintf_r+0x3cc>
8000fb38:	70 0c       	ld.w	r12,r8[0x0]
8000fb3a:	0e 94       	mov	r4,r7
8000fb3c:	2f c8       	sub	r8,-4
8000fb3e:	50 2c       	stdsp	sp[0x8],r12
8000fb40:	12 96       	mov	r6,r9
8000fb42:	51 08       	stdsp	sp[0x40],r8
8000fb44:	40 2b       	lddsp	r11,sp[0x8]
8000fb46:	58 0b       	cp.w	r11,0
8000fb48:	fe 95 fe f2 	brlt	8000f92c <_vfprintf_r+0x1b4>
8000fb4c:	08 97       	mov	r7,r4
8000fb4e:	cf 5a       	rjmp	8000f938 <_vfprintf_r+0x1c0>
8000fb50:	f2 09 00 29 	add	r9,r9,r9<<0x2
8000fb54:	0f 38       	ld.ub	r8,r7++
8000fb56:	f4 09 00 19 	add	r9,r10,r9<<0x1
8000fb5a:	f0 ca 00 30 	sub	r10,r8,48
8000fb5e:	58 9a       	cp.w	r10,9
8000fb60:	fe 98 ff f8 	brls	8000fb50 <_vfprintf_r+0x3d8>
8000fb64:	3f fa       	mov	r10,-1
8000fb66:	f2 0a 0c 49 	max	r9,r9,r10
8000fb6a:	50 29       	stdsp	sp[0x8],r9
8000fb6c:	ce 9a       	rjmp	8000f93e <_vfprintf_r+0x1c6>
8000fb6e:	a7 b5       	sbr	r5,0x7
8000fb70:	ce 4a       	rjmp	8000f938 <_vfprintf_r+0x1c0>
8000fb72:	30 09       	mov	r9,0
8000fb74:	23 08       	sub	r8,48
8000fb76:	f2 09 00 29 	add	r9,r9,r9<<0x2
8000fb7a:	f0 09 00 19 	add	r9,r8,r9<<0x1
8000fb7e:	0f 38       	ld.ub	r8,r7++
8000fb80:	f0 ca 00 30 	sub	r10,r8,48
8000fb84:	58 9a       	cp.w	r10,9
8000fb86:	fe 98 ff f7 	brls	8000fb74 <_vfprintf_r+0x3fc>
8000fb8a:	e0 48 00 24 	cp.w	r8,36
8000fb8e:	fe 91 fe d7 	brne	8000f93c <_vfprintf_r+0x1c4>
8000fb92:	e0 49 00 20 	cp.w	r9,32
8000fb96:	e0 89 0d 6f 	brgt	80011674 <_vfprintf_r+0x1efc>
8000fb9a:	f2 c3 00 01 	sub	r3,r9,1
8000fb9e:	30 19       	mov	r9,1
8000fba0:	50 39       	stdsp	sp[0xc],r9
8000fba2:	cc ba       	rjmp	8000f938 <_vfprintf_r+0x1c0>
8000fba4:	a3 b5       	sbr	r5,0x3
8000fba6:	cc 9a       	rjmp	8000f938 <_vfprintf_r+0x1c0>
8000fba8:	a7 a5       	sbr	r5,0x6
8000fbaa:	cc 7a       	rjmp	8000f938 <_vfprintf_r+0x1c0>
8000fbac:	0a 98       	mov	r8,r5
8000fbae:	a5 b5       	sbr	r5,0x5
8000fbb0:	a5 a8       	sbr	r8,0x4
8000fbb2:	0f 89       	ld.ub	r9,r7[0x0]
8000fbb4:	36 ce       	mov	lr,108
8000fbb6:	fc 09 18 00 	cp.b	r9,lr
8000fbba:	f7 b7 00 ff 	subeq	r7,-1
8000fbbe:	f0 05 17 10 	movne	r5,r8
8000fbc2:	cb ba       	rjmp	8000f938 <_vfprintf_r+0x1c0>
8000fbc4:	a5 b5       	sbr	r5,0x5
8000fbc6:	cb 9a       	rjmp	8000f938 <_vfprintf_r+0x1c0>
8000fbc8:	50 a7       	stdsp	sp[0x28],r7
8000fbca:	50 80       	stdsp	sp[0x20],r0
8000fbcc:	0c 97       	mov	r7,r6
8000fbce:	10 90       	mov	r0,r8
8000fbd0:	06 96       	mov	r6,r3
8000fbd2:	04 94       	mov	r4,r2
8000fbd4:	40 93       	lddsp	r3,sp[0x24]
8000fbd6:	02 92       	mov	r2,r1
8000fbd8:	0e 99       	mov	r9,r7
8000fbda:	40 41       	lddsp	r1,sp[0x10]
8000fbdc:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000fbe0:	40 3c       	lddsp	r12,sp[0xc]
8000fbe2:	58 0c       	cp.w	r12,0
8000fbe4:	c1 d0       	breq	8000fc1e <_vfprintf_r+0x4a6>
8000fbe6:	10 36       	cp.w	r6,r8
8000fbe8:	c0 64       	brge	8000fbf4 <_vfprintf_r+0x47c>
8000fbea:	fa cb f9 44 	sub	r11,sp,-1724
8000fbee:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000fbf2:	c1 d8       	rjmp	8000fc2c <_vfprintf_r+0x4b4>
8000fbf4:	fa c8 f9 50 	sub	r8,sp,-1712
8000fbf8:	1a d8       	st.w	--sp,r8
8000fbfa:	fa c8 fa b8 	sub	r8,sp,-1352
8000fbfe:	1a d8       	st.w	--sp,r8
8000fc00:	fa c8 fb b4 	sub	r8,sp,-1100
8000fc04:	1a d8       	st.w	--sp,r8
8000fc06:	fa c8 f9 40 	sub	r8,sp,-1728
8000fc0a:	fa c9 ff b4 	sub	r9,sp,-76
8000fc0e:	04 9a       	mov	r10,r2
8000fc10:	0c 9b       	mov	r11,r6
8000fc12:	08 9c       	mov	r12,r4
8000fc14:	fe b0 fc 1c 	rcall	8000f44c <get_arg>
8000fc18:	2f dd       	sub	sp,-12
8000fc1a:	19 b8       	ld.ub	r8,r12[0x3]
8000fc1c:	c2 28       	rjmp	8000fc60 <_vfprintf_r+0x4e8>
8000fc1e:	2f f7       	sub	r7,-1
8000fc20:	10 39       	cp.w	r9,r8
8000fc22:	c0 84       	brge	8000fc32 <_vfprintf_r+0x4ba>
8000fc24:	fa ca f9 44 	sub	r10,sp,-1724
8000fc28:	f4 06 00 36 	add	r6,r10,r6<<0x3
8000fc2c:	ed 38 fd 8b 	ld.ub	r8,r6[-629]
8000fc30:	c1 88       	rjmp	8000fc60 <_vfprintf_r+0x4e8>
8000fc32:	41 09       	lddsp	r9,sp[0x40]
8000fc34:	59 f8       	cp.w	r8,31
8000fc36:	e0 89 00 12 	brgt	8000fc5a <_vfprintf_r+0x4e2>
8000fc3a:	f2 ca ff fc 	sub	r10,r9,-4
8000fc3e:	51 0a       	stdsp	sp[0x40],r10
8000fc40:	72 09       	ld.w	r9,r9[0x0]
8000fc42:	fa c6 f9 44 	sub	r6,sp,-1724
8000fc46:	ec 08 00 3a 	add	r10,r6,r8<<0x3
8000fc4a:	2f f8       	sub	r8,-1
8000fc4c:	f5 49 fd 88 	st.w	r10[-632],r9
8000fc50:	fb 48 06 b4 	st.w	sp[1716],r8
8000fc54:	f1 d9 c0 08 	bfextu	r8,r9,0x0,0x8
8000fc58:	c0 48       	rjmp	8000fc60 <_vfprintf_r+0x4e8>
8000fc5a:	13 b8       	ld.ub	r8,r9[0x3]
8000fc5c:	2f c9       	sub	r9,-4
8000fc5e:	51 09       	stdsp	sp[0x40],r9
8000fc60:	fb 68 06 60 	st.b	sp[1632],r8
8000fc64:	30 0e       	mov	lr,0
8000fc66:	30 08       	mov	r8,0
8000fc68:	30 12       	mov	r2,1
8000fc6a:	fb 68 06 bb 	st.b	sp[1723],r8
8000fc6e:	50 2e       	stdsp	sp[0x8],lr
8000fc70:	e0 8f 08 ad 	bral	80010dca <_vfprintf_r+0x1652>
8000fc74:	50 a7       	stdsp	sp[0x28],r7
8000fc76:	50 80       	stdsp	sp[0x20],r0
8000fc78:	0c 97       	mov	r7,r6
8000fc7a:	04 94       	mov	r4,r2
8000fc7c:	06 96       	mov	r6,r3
8000fc7e:	02 92       	mov	r2,r1
8000fc80:	40 93       	lddsp	r3,sp[0x24]
8000fc82:	10 90       	mov	r0,r8
8000fc84:	40 41       	lddsp	r1,sp[0x10]
8000fc86:	a5 a5       	sbr	r5,0x4
8000fc88:	c0 a8       	rjmp	8000fc9c <_vfprintf_r+0x524>
8000fc8a:	50 a7       	stdsp	sp[0x28],r7
8000fc8c:	50 80       	stdsp	sp[0x20],r0
8000fc8e:	0c 97       	mov	r7,r6
8000fc90:	04 94       	mov	r4,r2
8000fc92:	06 96       	mov	r6,r3
8000fc94:	02 92       	mov	r2,r1
8000fc96:	40 93       	lddsp	r3,sp[0x24]
8000fc98:	10 90       	mov	r0,r8
8000fc9a:	40 41       	lddsp	r1,sp[0x10]
8000fc9c:	ed b5 00 05 	bld	r5,0x5
8000fca0:	c5 11       	brne	8000fd42 <_vfprintf_r+0x5ca>
8000fca2:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000fca6:	40 3c       	lddsp	r12,sp[0xc]
8000fca8:	58 0c       	cp.w	r12,0
8000fcaa:	c1 e0       	breq	8000fce6 <_vfprintf_r+0x56e>
8000fcac:	10 36       	cp.w	r6,r8
8000fcae:	c0 64       	brge	8000fcba <_vfprintf_r+0x542>
8000fcb0:	fa cb f9 44 	sub	r11,sp,-1724
8000fcb4:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000fcb8:	c2 08       	rjmp	8000fcf8 <_vfprintf_r+0x580>
8000fcba:	fa c8 f9 50 	sub	r8,sp,-1712
8000fcbe:	1a d8       	st.w	--sp,r8
8000fcc0:	fa c8 fa b8 	sub	r8,sp,-1352
8000fcc4:	0c 9b       	mov	r11,r6
8000fcc6:	1a d8       	st.w	--sp,r8
8000fcc8:	fa c8 fb b4 	sub	r8,sp,-1100
8000fccc:	1a d8       	st.w	--sp,r8
8000fcce:	fa c9 ff b4 	sub	r9,sp,-76
8000fcd2:	fa c8 f9 40 	sub	r8,sp,-1728
8000fcd6:	04 9a       	mov	r10,r2
8000fcd8:	08 9c       	mov	r12,r4
8000fcda:	fe b0 fb b9 	rcall	8000f44c <get_arg>
8000fcde:	2f dd       	sub	sp,-12
8000fce0:	78 1b       	ld.w	r11,r12[0x4]
8000fce2:	78 09       	ld.w	r9,r12[0x0]
8000fce4:	c2 b8       	rjmp	8000fd3a <_vfprintf_r+0x5c2>
8000fce6:	ee ca ff ff 	sub	r10,r7,-1
8000fcea:	10 37       	cp.w	r7,r8
8000fcec:	c0 b4       	brge	8000fd02 <_vfprintf_r+0x58a>
8000fcee:	fa c9 f9 44 	sub	r9,sp,-1724
8000fcf2:	14 97       	mov	r7,r10
8000fcf4:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000fcf8:	ec fb fd 8c 	ld.w	r11,r6[-628]
8000fcfc:	ec f9 fd 88 	ld.w	r9,r6[-632]
8000fd00:	c1 d8       	rjmp	8000fd3a <_vfprintf_r+0x5c2>
8000fd02:	41 09       	lddsp	r9,sp[0x40]
8000fd04:	59 f8       	cp.w	r8,31
8000fd06:	e0 89 00 14 	brgt	8000fd2e <_vfprintf_r+0x5b6>
8000fd0a:	f2 cb ff f8 	sub	r11,r9,-8
8000fd0e:	51 0b       	stdsp	sp[0x40],r11
8000fd10:	fa c6 f9 44 	sub	r6,sp,-1724
8000fd14:	72 1b       	ld.w	r11,r9[0x4]
8000fd16:	ec 08 00 3c 	add	r12,r6,r8<<0x3
8000fd1a:	72 09       	ld.w	r9,r9[0x0]
8000fd1c:	f9 4b fd 8c 	st.w	r12[-628],r11
8000fd20:	f9 49 fd 88 	st.w	r12[-632],r9
8000fd24:	2f f8       	sub	r8,-1
8000fd26:	14 97       	mov	r7,r10
8000fd28:	fb 48 06 b4 	st.w	sp[1716],r8
8000fd2c:	c0 78       	rjmp	8000fd3a <_vfprintf_r+0x5c2>
8000fd2e:	f2 c8 ff f8 	sub	r8,r9,-8
8000fd32:	72 1b       	ld.w	r11,r9[0x4]
8000fd34:	14 97       	mov	r7,r10
8000fd36:	51 08       	stdsp	sp[0x40],r8
8000fd38:	72 09       	ld.w	r9,r9[0x0]
8000fd3a:	16 98       	mov	r8,r11
8000fd3c:	fa e9 00 00 	st.d	sp[0],r8
8000fd40:	ca e8       	rjmp	8000fe9c <_vfprintf_r+0x724>
8000fd42:	ed b5 00 04 	bld	r5,0x4
8000fd46:	c1 71       	brne	8000fd74 <_vfprintf_r+0x5fc>
8000fd48:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000fd4c:	40 3e       	lddsp	lr,sp[0xc]
8000fd4e:	58 0e       	cp.w	lr,0
8000fd50:	c0 80       	breq	8000fd60 <_vfprintf_r+0x5e8>
8000fd52:	10 36       	cp.w	r6,r8
8000fd54:	c6 94       	brge	8000fe26 <_vfprintf_r+0x6ae>
8000fd56:	fa cc f9 44 	sub	r12,sp,-1724
8000fd5a:	f8 06 00 36 	add	r6,r12,r6<<0x3
8000fd5e:	c8 28       	rjmp	8000fe62 <_vfprintf_r+0x6ea>
8000fd60:	ee ca ff ff 	sub	r10,r7,-1
8000fd64:	10 37       	cp.w	r7,r8
8000fd66:	e0 84 00 81 	brge	8000fe68 <_vfprintf_r+0x6f0>
8000fd6a:	fa cb f9 44 	sub	r11,sp,-1724
8000fd6e:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000fd72:	c7 78       	rjmp	8000fe60 <_vfprintf_r+0x6e8>
8000fd74:	ed b5 00 06 	bld	r5,0x6
8000fd78:	c4 b1       	brne	8000fe0e <_vfprintf_r+0x696>
8000fd7a:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000fd7e:	40 3c       	lddsp	r12,sp[0xc]
8000fd80:	58 0c       	cp.w	r12,0
8000fd82:	c1 d0       	breq	8000fdbc <_vfprintf_r+0x644>
8000fd84:	10 36       	cp.w	r6,r8
8000fd86:	c0 64       	brge	8000fd92 <_vfprintf_r+0x61a>
8000fd88:	fa cb f9 44 	sub	r11,sp,-1724
8000fd8c:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000fd90:	c1 f8       	rjmp	8000fdce <_vfprintf_r+0x656>
8000fd92:	fa c8 f9 50 	sub	r8,sp,-1712
8000fd96:	1a d8       	st.w	--sp,r8
8000fd98:	fa c8 fa b8 	sub	r8,sp,-1352
8000fd9c:	1a d8       	st.w	--sp,r8
8000fd9e:	fa c8 fb b4 	sub	r8,sp,-1100
8000fda2:	1a d8       	st.w	--sp,r8
8000fda4:	fa c8 f9 40 	sub	r8,sp,-1728
8000fda8:	fa c9 ff b4 	sub	r9,sp,-76
8000fdac:	04 9a       	mov	r10,r2
8000fdae:	0c 9b       	mov	r11,r6
8000fdb0:	08 9c       	mov	r12,r4
8000fdb2:	fe b0 fb 4d 	rcall	8000f44c <get_arg>
8000fdb6:	2f dd       	sub	sp,-12
8000fdb8:	98 18       	ld.sh	r8,r12[0x2]
8000fdba:	c2 68       	rjmp	8000fe06 <_vfprintf_r+0x68e>
8000fdbc:	ee ca ff ff 	sub	r10,r7,-1
8000fdc0:	10 37       	cp.w	r7,r8
8000fdc2:	c0 94       	brge	8000fdd4 <_vfprintf_r+0x65c>
8000fdc4:	fa c9 f9 44 	sub	r9,sp,-1724
8000fdc8:	14 97       	mov	r7,r10
8000fdca:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000fdce:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
8000fdd2:	c1 a8       	rjmp	8000fe06 <_vfprintf_r+0x68e>
8000fdd4:	41 09       	lddsp	r9,sp[0x40]
8000fdd6:	59 f8       	cp.w	r8,31
8000fdd8:	e0 89 00 13 	brgt	8000fdfe <_vfprintf_r+0x686>
8000fddc:	f2 cb ff fc 	sub	r11,r9,-4
8000fde0:	51 0b       	stdsp	sp[0x40],r11
8000fde2:	72 09       	ld.w	r9,r9[0x0]
8000fde4:	fa c6 f9 44 	sub	r6,sp,-1724
8000fde8:	ec 08 00 3b 	add	r11,r6,r8<<0x3
8000fdec:	2f f8       	sub	r8,-1
8000fdee:	f7 49 fd 88 	st.w	r11[-632],r9
8000fdf2:	fb 48 06 b4 	st.w	sp[1716],r8
8000fdf6:	14 97       	mov	r7,r10
8000fdf8:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
8000fdfc:	c0 58       	rjmp	8000fe06 <_vfprintf_r+0x68e>
8000fdfe:	92 18       	ld.sh	r8,r9[0x2]
8000fe00:	14 97       	mov	r7,r10
8000fe02:	2f c9       	sub	r9,-4
8000fe04:	51 09       	stdsp	sp[0x40],r9
8000fe06:	50 18       	stdsp	sp[0x4],r8
8000fe08:	bf 58       	asr	r8,0x1f
8000fe0a:	50 08       	stdsp	sp[0x0],r8
8000fe0c:	c4 88       	rjmp	8000fe9c <_vfprintf_r+0x724>
8000fe0e:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000fe12:	40 3c       	lddsp	r12,sp[0xc]
8000fe14:	58 0c       	cp.w	r12,0
8000fe16:	c1 d0       	breq	8000fe50 <_vfprintf_r+0x6d8>
8000fe18:	10 36       	cp.w	r6,r8
8000fe1a:	c0 64       	brge	8000fe26 <_vfprintf_r+0x6ae>
8000fe1c:	fa cb f9 44 	sub	r11,sp,-1724
8000fe20:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000fe24:	c1 f8       	rjmp	8000fe62 <_vfprintf_r+0x6ea>
8000fe26:	fa c8 f9 50 	sub	r8,sp,-1712
8000fe2a:	1a d8       	st.w	--sp,r8
8000fe2c:	fa c8 fa b8 	sub	r8,sp,-1352
8000fe30:	0c 9b       	mov	r11,r6
8000fe32:	1a d8       	st.w	--sp,r8
8000fe34:	fa c8 fb b4 	sub	r8,sp,-1100
8000fe38:	04 9a       	mov	r10,r2
8000fe3a:	1a d8       	st.w	--sp,r8
8000fe3c:	08 9c       	mov	r12,r4
8000fe3e:	fa c8 f9 40 	sub	r8,sp,-1728
8000fe42:	fa c9 ff b4 	sub	r9,sp,-76
8000fe46:	fe b0 fb 03 	rcall	8000f44c <get_arg>
8000fe4a:	2f dd       	sub	sp,-12
8000fe4c:	78 0b       	ld.w	r11,r12[0x0]
8000fe4e:	c2 48       	rjmp	8000fe96 <_vfprintf_r+0x71e>
8000fe50:	ee ca ff ff 	sub	r10,r7,-1
8000fe54:	10 37       	cp.w	r7,r8
8000fe56:	c0 94       	brge	8000fe68 <_vfprintf_r+0x6f0>
8000fe58:	fa c9 f9 44 	sub	r9,sp,-1724
8000fe5c:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000fe60:	14 97       	mov	r7,r10
8000fe62:	ec fb fd 88 	ld.w	r11,r6[-632]
8000fe66:	c1 88       	rjmp	8000fe96 <_vfprintf_r+0x71e>
8000fe68:	41 09       	lddsp	r9,sp[0x40]
8000fe6a:	59 f8       	cp.w	r8,31
8000fe6c:	e0 89 00 11 	brgt	8000fe8e <_vfprintf_r+0x716>
8000fe70:	f2 cb ff fc 	sub	r11,r9,-4
8000fe74:	51 0b       	stdsp	sp[0x40],r11
8000fe76:	fa c6 f9 44 	sub	r6,sp,-1724
8000fe7a:	72 0b       	ld.w	r11,r9[0x0]
8000fe7c:	ec 08 00 39 	add	r9,r6,r8<<0x3
8000fe80:	f3 4b fd 88 	st.w	r9[-632],r11
8000fe84:	2f f8       	sub	r8,-1
8000fe86:	14 97       	mov	r7,r10
8000fe88:	fb 48 06 b4 	st.w	sp[1716],r8
8000fe8c:	c0 58       	rjmp	8000fe96 <_vfprintf_r+0x71e>
8000fe8e:	72 0b       	ld.w	r11,r9[0x0]
8000fe90:	14 97       	mov	r7,r10
8000fe92:	2f c9       	sub	r9,-4
8000fe94:	51 09       	stdsp	sp[0x40],r9
8000fe96:	50 1b       	stdsp	sp[0x4],r11
8000fe98:	bf 5b       	asr	r11,0x1f
8000fe9a:	50 0b       	stdsp	sp[0x0],r11
8000fe9c:	fa ea 00 00 	ld.d	r10,sp[0]
8000fea0:	58 0a       	cp.w	r10,0
8000fea2:	5c 2b       	cpc	r11
8000fea4:	c0 e4       	brge	8000fec0 <_vfprintf_r+0x748>
8000fea6:	30 08       	mov	r8,0
8000fea8:	fa ea 00 00 	ld.d	r10,sp[0]
8000feac:	30 09       	mov	r9,0
8000feae:	f0 0a 01 0a 	sub	r10,r8,r10
8000feb2:	f2 0b 01 4b 	sbc	r11,r9,r11
8000feb6:	32 d8       	mov	r8,45
8000feb8:	fa eb 00 00 	st.d	sp[0],r10
8000febc:	fb 68 06 bb 	st.b	sp[1723],r8
8000fec0:	30 18       	mov	r8,1
8000fec2:	e0 8f 06 fa 	bral	80010cb6 <_vfprintf_r+0x153e>
8000fec6:	50 a7       	stdsp	sp[0x28],r7
8000fec8:	50 80       	stdsp	sp[0x20],r0
8000feca:	0c 97       	mov	r7,r6
8000fecc:	04 94       	mov	r4,r2
8000fece:	06 96       	mov	r6,r3
8000fed0:	02 92       	mov	r2,r1
8000fed2:	40 93       	lddsp	r3,sp[0x24]
8000fed4:	10 90       	mov	r0,r8
8000fed6:	40 41       	lddsp	r1,sp[0x10]
8000fed8:	0e 99       	mov	r9,r7
8000feda:	ed b5 00 03 	bld	r5,0x3
8000fede:	c4 11       	brne	8000ff60 <_vfprintf_r+0x7e8>
8000fee0:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000fee4:	40 3a       	lddsp	r10,sp[0xc]
8000fee6:	58 0a       	cp.w	r10,0
8000fee8:	c1 90       	breq	8000ff1a <_vfprintf_r+0x7a2>
8000feea:	10 36       	cp.w	r6,r8
8000feec:	c6 45       	brlt	8000ffb4 <_vfprintf_r+0x83c>
8000feee:	fa c8 f9 50 	sub	r8,sp,-1712
8000fef2:	1a d8       	st.w	--sp,r8
8000fef4:	fa c8 fa b8 	sub	r8,sp,-1352
8000fef8:	1a d8       	st.w	--sp,r8
8000fefa:	fa c8 fb b4 	sub	r8,sp,-1100
8000fefe:	0c 9b       	mov	r11,r6
8000ff00:	1a d8       	st.w	--sp,r8
8000ff02:	04 9a       	mov	r10,r2
8000ff04:	fa c8 f9 40 	sub	r8,sp,-1728
8000ff08:	fa c9 ff b4 	sub	r9,sp,-76
8000ff0c:	08 9c       	mov	r12,r4
8000ff0e:	fe b0 fa 9f 	rcall	8000f44c <get_arg>
8000ff12:	2f dd       	sub	sp,-12
8000ff14:	78 16       	ld.w	r6,r12[0x4]
8000ff16:	50 76       	stdsp	sp[0x1c],r6
8000ff18:	c4 88       	rjmp	8000ffa8 <_vfprintf_r+0x830>
8000ff1a:	2f f7       	sub	r7,-1
8000ff1c:	10 39       	cp.w	r9,r8
8000ff1e:	c0 c4       	brge	8000ff36 <_vfprintf_r+0x7be>
8000ff20:	fa ce f9 44 	sub	lr,sp,-1724
8000ff24:	fc 06 00 36 	add	r6,lr,r6<<0x3
8000ff28:	ec fc fd 8c 	ld.w	r12,r6[-628]
8000ff2c:	50 7c       	stdsp	sp[0x1c],r12
8000ff2e:	ec f6 fd 88 	ld.w	r6,r6[-632]
8000ff32:	50 56       	stdsp	sp[0x14],r6
8000ff34:	c6 68       	rjmp	80010000 <_vfprintf_r+0x888>
8000ff36:	41 09       	lddsp	r9,sp[0x40]
8000ff38:	59 f8       	cp.w	r8,31
8000ff3a:	e0 89 00 10 	brgt	8000ff5a <_vfprintf_r+0x7e2>
8000ff3e:	f2 ca ff f8 	sub	r10,r9,-8
8000ff42:	72 1b       	ld.w	r11,r9[0x4]
8000ff44:	51 0a       	stdsp	sp[0x40],r10
8000ff46:	72 09       	ld.w	r9,r9[0x0]
8000ff48:	fa ca f9 44 	sub	r10,sp,-1724
8000ff4c:	50 7b       	stdsp	sp[0x1c],r11
8000ff4e:	50 59       	stdsp	sp[0x14],r9
8000ff50:	f4 08 00 39 	add	r9,r10,r8<<0x3
8000ff54:	40 5b       	lddsp	r11,sp[0x14]
8000ff56:	40 7a       	lddsp	r10,sp[0x1c]
8000ff58:	c4 78       	rjmp	8000ffe6 <_vfprintf_r+0x86e>
8000ff5a:	72 18       	ld.w	r8,r9[0x4]
8000ff5c:	50 78       	stdsp	sp[0x1c],r8
8000ff5e:	c4 c8       	rjmp	8000fff6 <_vfprintf_r+0x87e>
8000ff60:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000ff64:	40 3e       	lddsp	lr,sp[0xc]
8000ff66:	58 0e       	cp.w	lr,0
8000ff68:	c2 30       	breq	8000ffae <_vfprintf_r+0x836>
8000ff6a:	10 36       	cp.w	r6,r8
8000ff6c:	c0 94       	brge	8000ff7e <_vfprintf_r+0x806>
8000ff6e:	fa cc f9 44 	sub	r12,sp,-1724
8000ff72:	f8 06 00 36 	add	r6,r12,r6<<0x3
8000ff76:	ec fb fd 8c 	ld.w	r11,r6[-628]
8000ff7a:	50 7b       	stdsp	sp[0x1c],r11
8000ff7c:	cd 9b       	rjmp	8000ff2e <_vfprintf_r+0x7b6>
8000ff7e:	fa c8 f9 50 	sub	r8,sp,-1712
8000ff82:	1a d8       	st.w	--sp,r8
8000ff84:	fa c8 fa b8 	sub	r8,sp,-1352
8000ff88:	04 9a       	mov	r10,r2
8000ff8a:	1a d8       	st.w	--sp,r8
8000ff8c:	fa c8 fb b4 	sub	r8,sp,-1100
8000ff90:	0c 9b       	mov	r11,r6
8000ff92:	1a d8       	st.w	--sp,r8
8000ff94:	08 9c       	mov	r12,r4
8000ff96:	fa c8 f9 40 	sub	r8,sp,-1728
8000ff9a:	fa c9 ff b4 	sub	r9,sp,-76
8000ff9e:	fe b0 fa 57 	rcall	8000f44c <get_arg>
8000ffa2:	2f dd       	sub	sp,-12
8000ffa4:	78 1a       	ld.w	r10,r12[0x4]
8000ffa6:	50 7a       	stdsp	sp[0x1c],r10
8000ffa8:	78 0c       	ld.w	r12,r12[0x0]
8000ffaa:	50 5c       	stdsp	sp[0x14],r12
8000ffac:	c2 a8       	rjmp	80010000 <_vfprintf_r+0x888>
8000ffae:	2f f7       	sub	r7,-1
8000ffb0:	10 39       	cp.w	r9,r8
8000ffb2:	c0 94       	brge	8000ffc4 <_vfprintf_r+0x84c>
8000ffb4:	fa c9 f9 44 	sub	r9,sp,-1724
8000ffb8:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000ffbc:	ec f8 fd 8c 	ld.w	r8,r6[-628]
8000ffc0:	50 78       	stdsp	sp[0x1c],r8
8000ffc2:	cb 6b       	rjmp	8000ff2e <_vfprintf_r+0x7b6>
8000ffc4:	41 09       	lddsp	r9,sp[0x40]
8000ffc6:	59 f8       	cp.w	r8,31
8000ffc8:	e0 89 00 15 	brgt	8000fff2 <_vfprintf_r+0x87a>
8000ffcc:	f2 ca ff f8 	sub	r10,r9,-8
8000ffd0:	72 16       	ld.w	r6,r9[0x4]
8000ffd2:	72 09       	ld.w	r9,r9[0x0]
8000ffd4:	51 0a       	stdsp	sp[0x40],r10
8000ffd6:	50 59       	stdsp	sp[0x14],r9
8000ffd8:	fa ce f9 44 	sub	lr,sp,-1724
8000ffdc:	50 76       	stdsp	sp[0x1c],r6
8000ffde:	fc 08 00 39 	add	r9,lr,r8<<0x3
8000ffe2:	40 5b       	lddsp	r11,sp[0x14]
8000ffe4:	0c 9a       	mov	r10,r6
8000ffe6:	f2 eb fd 88 	st.d	r9[-632],r10
8000ffea:	2f f8       	sub	r8,-1
8000ffec:	fb 48 06 b4 	st.w	sp[1716],r8
8000fff0:	c0 88       	rjmp	80010000 <_vfprintf_r+0x888>
8000fff2:	72 1c       	ld.w	r12,r9[0x4]
8000fff4:	50 7c       	stdsp	sp[0x1c],r12
8000fff6:	f2 c8 ff f8 	sub	r8,r9,-8
8000fffa:	51 08       	stdsp	sp[0x40],r8
8000fffc:	72 09       	ld.w	r9,r9[0x0]
8000fffe:	50 59       	stdsp	sp[0x14],r9
80010000:	40 5b       	lddsp	r11,sp[0x14]
80010002:	40 7a       	lddsp	r10,sp[0x1c]
80010004:	e0 a0 1c d6 	rcall	800139b0 <__isinfd>
80010008:	18 96       	mov	r6,r12
8001000a:	c1 70       	breq	80010038 <_vfprintf_r+0x8c0>
8001000c:	30 08       	mov	r8,0
8001000e:	30 09       	mov	r9,0
80010010:	40 5b       	lddsp	r11,sp[0x14]
80010012:	40 7a       	lddsp	r10,sp[0x1c]
80010014:	e0 a0 21 c4 	rcall	8001439c <__avr32_f64_cmp_lt>
80010018:	c0 40       	breq	80010020 <_vfprintf_r+0x8a8>
8001001a:	32 d8       	mov	r8,45
8001001c:	fb 68 06 bb 	st.b	sp[1723],r8
80010020:	fe c8 ae 84 	sub	r8,pc,-20860
80010024:	fe c6 ae 84 	sub	r6,pc,-20860
80010028:	a7 d5       	cbr	r5,0x7
8001002a:	e0 40 00 47 	cp.w	r0,71
8001002e:	f0 06 17 a0 	movle	r6,r8
80010032:	30 32       	mov	r2,3
80010034:	e0 8f 06 ce 	bral	80010dd0 <_vfprintf_r+0x1658>
80010038:	40 5b       	lddsp	r11,sp[0x14]
8001003a:	40 7a       	lddsp	r10,sp[0x1c]
8001003c:	e0 a0 1c cf 	rcall	800139da <__isnand>
80010040:	c0 e0       	breq	8001005c <_vfprintf_r+0x8e4>
80010042:	50 26       	stdsp	sp[0x8],r6
80010044:	fe c8 ae a0 	sub	r8,pc,-20832
80010048:	fe c6 ae a0 	sub	r6,pc,-20832
8001004c:	a7 d5       	cbr	r5,0x7
8001004e:	e0 40 00 47 	cp.w	r0,71
80010052:	f0 06 17 a0 	movle	r6,r8
80010056:	30 32       	mov	r2,3
80010058:	e0 8f 06 c2 	bral	80010ddc <_vfprintf_r+0x1664>
8001005c:	40 2a       	lddsp	r10,sp[0x8]
8001005e:	5b fa       	cp.w	r10,-1
80010060:	c0 41       	brne	80010068 <_vfprintf_r+0x8f0>
80010062:	30 69       	mov	r9,6
80010064:	50 29       	stdsp	sp[0x8],r9
80010066:	c1 18       	rjmp	80010088 <_vfprintf_r+0x910>
80010068:	e0 40 00 47 	cp.w	r0,71
8001006c:	5f 09       	sreq	r9
8001006e:	e0 40 00 67 	cp.w	r0,103
80010072:	5f 08       	sreq	r8
80010074:	f3 e8 10 08 	or	r8,r9,r8
80010078:	f8 08 18 00 	cp.b	r8,r12
8001007c:	c0 60       	breq	80010088 <_vfprintf_r+0x910>
8001007e:	40 28       	lddsp	r8,sp[0x8]
80010080:	58 08       	cp.w	r8,0
80010082:	f9 b8 00 01 	moveq	r8,1
80010086:	50 28       	stdsp	sp[0x8],r8
80010088:	40 78       	lddsp	r8,sp[0x1c]
8001008a:	40 59       	lddsp	r9,sp[0x14]
8001008c:	fa e9 06 94 	st.d	sp[1684],r8
80010090:	a9 a5       	sbr	r5,0x8
80010092:	fa f8 06 94 	ld.w	r8,sp[1684]
80010096:	58 08       	cp.w	r8,0
80010098:	c0 65       	brlt	800100a4 <_vfprintf_r+0x92c>
8001009a:	40 5e       	lddsp	lr,sp[0x14]
8001009c:	30 0c       	mov	r12,0
8001009e:	50 6e       	stdsp	sp[0x18],lr
800100a0:	50 9c       	stdsp	sp[0x24],r12
800100a2:	c0 78       	rjmp	800100b0 <_vfprintf_r+0x938>
800100a4:	40 5b       	lddsp	r11,sp[0x14]
800100a6:	32 da       	mov	r10,45
800100a8:	ee 1b 80 00 	eorh	r11,0x8000
800100ac:	50 9a       	stdsp	sp[0x24],r10
800100ae:	50 6b       	stdsp	sp[0x18],r11
800100b0:	e0 40 00 46 	cp.w	r0,70
800100b4:	5f 09       	sreq	r9
800100b6:	e0 40 00 66 	cp.w	r0,102
800100ba:	5f 08       	sreq	r8
800100bc:	f3 e8 10 08 	or	r8,r9,r8
800100c0:	50 48       	stdsp	sp[0x10],r8
800100c2:	c0 40       	breq	800100ca <_vfprintf_r+0x952>
800100c4:	40 22       	lddsp	r2,sp[0x8]
800100c6:	30 39       	mov	r9,3
800100c8:	c1 08       	rjmp	800100e8 <_vfprintf_r+0x970>
800100ca:	e0 40 00 45 	cp.w	r0,69
800100ce:	5f 09       	sreq	r9
800100d0:	e0 40 00 65 	cp.w	r0,101
800100d4:	5f 08       	sreq	r8
800100d6:	40 22       	lddsp	r2,sp[0x8]
800100d8:	10 49       	or	r9,r8
800100da:	2f f2       	sub	r2,-1
800100dc:	40 46       	lddsp	r6,sp[0x10]
800100de:	ec 09 18 00 	cp.b	r9,r6
800100e2:	fb f2 00 02 	ld.weq	r2,sp[0x8]
800100e6:	30 29       	mov	r9,2
800100e8:	fa c8 f9 5c 	sub	r8,sp,-1700
800100ec:	1a d8       	st.w	--sp,r8
800100ee:	fa c8 f9 54 	sub	r8,sp,-1708
800100f2:	1a d8       	st.w	--sp,r8
800100f4:	fa c8 f9 4c 	sub	r8,sp,-1716
800100f8:	08 9c       	mov	r12,r4
800100fa:	1a d8       	st.w	--sp,r8
800100fc:	04 98       	mov	r8,r2
800100fe:	40 9b       	lddsp	r11,sp[0x24]
80010100:	40 aa       	lddsp	r10,sp[0x28]
80010102:	e0 a0 0b c3 	rcall	80011888 <_dtoa_r>
80010106:	e0 40 00 47 	cp.w	r0,71
8001010a:	5f 19       	srne	r9
8001010c:	e0 40 00 67 	cp.w	r0,103
80010110:	5f 18       	srne	r8
80010112:	18 96       	mov	r6,r12
80010114:	2f dd       	sub	sp,-12
80010116:	f3 e8 00 08 	and	r8,r9,r8
8001011a:	c0 41       	brne	80010122 <_vfprintf_r+0x9aa>
8001011c:	ed b5 00 00 	bld	r5,0x0
80010120:	c3 01       	brne	80010180 <_vfprintf_r+0xa08>
80010122:	ec 02 00 0e 	add	lr,r6,r2
80010126:	50 3e       	stdsp	sp[0xc],lr
80010128:	40 4c       	lddsp	r12,sp[0x10]
8001012a:	58 0c       	cp.w	r12,0
8001012c:	c1 50       	breq	80010156 <_vfprintf_r+0x9de>
8001012e:	0d 89       	ld.ub	r9,r6[0x0]
80010130:	33 08       	mov	r8,48
80010132:	f0 09 18 00 	cp.b	r9,r8
80010136:	c0 b1       	brne	8001014c <_vfprintf_r+0x9d4>
80010138:	30 08       	mov	r8,0
8001013a:	30 09       	mov	r9,0
8001013c:	40 6b       	lddsp	r11,sp[0x18]
8001013e:	40 7a       	lddsp	r10,sp[0x1c]
80010140:	e0 a0 20 e7 	rcall	8001430e <__avr32_f64_cmp_eq>
80010144:	fb b2 00 01 	rsubeq	r2,1
80010148:	fb f2 0b ab 	st.weq	sp[0x6ac],r2
8001014c:	40 3b       	lddsp	r11,sp[0xc]
8001014e:	fa f8 06 ac 	ld.w	r8,sp[1708]
80010152:	10 0b       	add	r11,r8
80010154:	50 3b       	stdsp	sp[0xc],r11
80010156:	40 6b       	lddsp	r11,sp[0x18]
80010158:	30 08       	mov	r8,0
8001015a:	30 09       	mov	r9,0
8001015c:	40 7a       	lddsp	r10,sp[0x1c]
8001015e:	e0 a0 20 d8 	rcall	8001430e <__avr32_f64_cmp_eq>
80010162:	c0 90       	breq	80010174 <_vfprintf_r+0x9fc>
80010164:	40 3a       	lddsp	r10,sp[0xc]
80010166:	fb 4a 06 a4 	st.w	sp[1700],r10
8001016a:	c0 58       	rjmp	80010174 <_vfprintf_r+0x9fc>
8001016c:	10 c9       	st.b	r8++,r9
8001016e:	fb 48 06 a4 	st.w	sp[1700],r8
80010172:	c0 28       	rjmp	80010176 <_vfprintf_r+0x9fe>
80010174:	33 09       	mov	r9,48
80010176:	fa f8 06 a4 	ld.w	r8,sp[1700]
8001017a:	40 3e       	lddsp	lr,sp[0xc]
8001017c:	1c 38       	cp.w	r8,lr
8001017e:	cf 73       	brcs	8001016c <_vfprintf_r+0x9f4>
80010180:	e0 40 00 47 	cp.w	r0,71
80010184:	5f 09       	sreq	r9
80010186:	e0 40 00 67 	cp.w	r0,103
8001018a:	5f 08       	sreq	r8
8001018c:	f3 e8 10 08 	or	r8,r9,r8
80010190:	fa f9 06 a4 	ld.w	r9,sp[1700]
80010194:	0c 19       	sub	r9,r6
80010196:	50 69       	stdsp	sp[0x18],r9
80010198:	58 08       	cp.w	r8,0
8001019a:	c0 b0       	breq	800101b0 <_vfprintf_r+0xa38>
8001019c:	fa f8 06 ac 	ld.w	r8,sp[1708]
800101a0:	5b d8       	cp.w	r8,-3
800101a2:	c0 55       	brlt	800101ac <_vfprintf_r+0xa34>
800101a4:	40 2c       	lddsp	r12,sp[0x8]
800101a6:	18 38       	cp.w	r8,r12
800101a8:	e0 8a 00 6a 	brle	8001027c <_vfprintf_r+0xb04>
800101ac:	20 20       	sub	r0,2
800101ae:	c0 58       	rjmp	800101b8 <_vfprintf_r+0xa40>
800101b0:	e0 40 00 65 	cp.w	r0,101
800101b4:	e0 89 00 46 	brgt	80010240 <_vfprintf_r+0xac8>
800101b8:	fa fb 06 ac 	ld.w	r11,sp[1708]
800101bc:	fb 60 06 9c 	st.b	sp[1692],r0
800101c0:	20 1b       	sub	r11,1
800101c2:	fb 4b 06 ac 	st.w	sp[1708],r11
800101c6:	c0 47       	brpl	800101ce <_vfprintf_r+0xa56>
800101c8:	5c 3b       	neg	r11
800101ca:	32 d8       	mov	r8,45
800101cc:	c0 28       	rjmp	800101d0 <_vfprintf_r+0xa58>
800101ce:	32 b8       	mov	r8,43
800101d0:	fb 68 06 9d 	st.b	sp[1693],r8
800101d4:	58 9b       	cp.w	r11,9
800101d6:	e0 8a 00 1d 	brle	80010210 <_vfprintf_r+0xa98>
800101da:	fa c9 fa 35 	sub	r9,sp,-1483
800101de:	30 aa       	mov	r10,10
800101e0:	12 98       	mov	r8,r9
800101e2:	0e 9c       	mov	r12,r7
800101e4:	0c 92       	mov	r2,r6
800101e6:	f6 0a 0c 06 	divs	r6,r11,r10
800101ea:	0e 9b       	mov	r11,r7
800101ec:	2d 0b       	sub	r11,-48
800101ee:	10 fb       	st.b	--r8,r11
800101f0:	0c 9b       	mov	r11,r6
800101f2:	58 96       	cp.w	r6,9
800101f4:	fe 99 ff f9 	brgt	800101e6 <_vfprintf_r+0xa6e>
800101f8:	2d 0b       	sub	r11,-48
800101fa:	18 97       	mov	r7,r12
800101fc:	04 96       	mov	r6,r2
800101fe:	10 fb       	st.b	--r8,r11
80010200:	fa ca f9 62 	sub	r10,sp,-1694
80010204:	c0 38       	rjmp	8001020a <_vfprintf_r+0xa92>
80010206:	11 3b       	ld.ub	r11,r8++
80010208:	14 cb       	st.b	r10++,r11
8001020a:	12 38       	cp.w	r8,r9
8001020c:	cf d3       	brcs	80010206 <_vfprintf_r+0xa8e>
8001020e:	c0 98       	rjmp	80010220 <_vfprintf_r+0xaa8>
80010210:	2d 0b       	sub	r11,-48
80010212:	33 08       	mov	r8,48
80010214:	fb 6b 06 9f 	st.b	sp[1695],r11
80010218:	fb 68 06 9e 	st.b	sp[1694],r8
8001021c:	fa ca f9 60 	sub	r10,sp,-1696
80010220:	fa c8 f9 64 	sub	r8,sp,-1692
80010224:	f4 08 01 08 	sub	r8,r10,r8
80010228:	50 e8       	stdsp	sp[0x38],r8
8001022a:	10 92       	mov	r2,r8
8001022c:	40 6b       	lddsp	r11,sp[0x18]
8001022e:	16 02       	add	r2,r11
80010230:	58 1b       	cp.w	r11,1
80010232:	e0 89 00 05 	brgt	8001023c <_vfprintf_r+0xac4>
80010236:	ed b5 00 00 	bld	r5,0x0
8001023a:	c3 51       	brne	800102a4 <_vfprintf_r+0xb2c>
8001023c:	2f f2       	sub	r2,-1
8001023e:	c3 38       	rjmp	800102a4 <_vfprintf_r+0xb2c>
80010240:	e0 40 00 66 	cp.w	r0,102
80010244:	c1 c1       	brne	8001027c <_vfprintf_r+0xb04>
80010246:	fa f2 06 ac 	ld.w	r2,sp[1708]
8001024a:	58 02       	cp.w	r2,0
8001024c:	e0 8a 00 0c 	brle	80010264 <_vfprintf_r+0xaec>
80010250:	40 2a       	lddsp	r10,sp[0x8]
80010252:	58 0a       	cp.w	r10,0
80010254:	c0 41       	brne	8001025c <_vfprintf_r+0xae4>
80010256:	ed b5 00 00 	bld	r5,0x0
8001025a:	c2 51       	brne	800102a4 <_vfprintf_r+0xb2c>
8001025c:	2f f2       	sub	r2,-1
8001025e:	40 29       	lddsp	r9,sp[0x8]
80010260:	12 02       	add	r2,r9
80010262:	c0 b8       	rjmp	80010278 <_vfprintf_r+0xb00>
80010264:	40 28       	lddsp	r8,sp[0x8]
80010266:	58 08       	cp.w	r8,0
80010268:	c0 61       	brne	80010274 <_vfprintf_r+0xafc>
8001026a:	ed b5 00 00 	bld	r5,0x0
8001026e:	c0 30       	breq	80010274 <_vfprintf_r+0xafc>
80010270:	30 12       	mov	r2,1
80010272:	c1 98       	rjmp	800102a4 <_vfprintf_r+0xb2c>
80010274:	40 22       	lddsp	r2,sp[0x8]
80010276:	2f e2       	sub	r2,-2
80010278:	36 60       	mov	r0,102
8001027a:	c1 58       	rjmp	800102a4 <_vfprintf_r+0xb2c>
8001027c:	fa f2 06 ac 	ld.w	r2,sp[1708]
80010280:	40 6e       	lddsp	lr,sp[0x18]
80010282:	1c 32       	cp.w	r2,lr
80010284:	c0 65       	brlt	80010290 <_vfprintf_r+0xb18>
80010286:	ed b5 00 00 	bld	r5,0x0
8001028a:	f7 b2 00 ff 	subeq	r2,-1
8001028e:	c0 a8       	rjmp	800102a2 <_vfprintf_r+0xb2a>
80010290:	e4 08 11 02 	rsub	r8,r2,2
80010294:	40 6c       	lddsp	r12,sp[0x18]
80010296:	58 02       	cp.w	r2,0
80010298:	f0 02 17 a0 	movle	r2,r8
8001029c:	f9 b2 09 01 	movgt	r2,1
800102a0:	18 02       	add	r2,r12
800102a2:	36 70       	mov	r0,103
800102a4:	40 9b       	lddsp	r11,sp[0x24]
800102a6:	58 0b       	cp.w	r11,0
800102a8:	e0 80 05 94 	breq	80010dd0 <_vfprintf_r+0x1658>
800102ac:	32 d8       	mov	r8,45
800102ae:	fb 68 06 bb 	st.b	sp[1723],r8
800102b2:	e0 8f 05 93 	bral	80010dd8 <_vfprintf_r+0x1660>
800102b6:	50 a7       	stdsp	sp[0x28],r7
800102b8:	04 94       	mov	r4,r2
800102ba:	0c 97       	mov	r7,r6
800102bc:	02 92       	mov	r2,r1
800102be:	06 96       	mov	r6,r3
800102c0:	40 41       	lddsp	r1,sp[0x10]
800102c2:	40 93       	lddsp	r3,sp[0x24]
800102c4:	0e 99       	mov	r9,r7
800102c6:	ed b5 00 05 	bld	r5,0x5
800102ca:	c4 81       	brne	8001035a <_vfprintf_r+0xbe2>
800102cc:	fa f8 06 b4 	ld.w	r8,sp[1716]
800102d0:	40 3e       	lddsp	lr,sp[0xc]
800102d2:	58 0e       	cp.w	lr,0
800102d4:	c1 d0       	breq	8001030e <_vfprintf_r+0xb96>
800102d6:	10 36       	cp.w	r6,r8
800102d8:	c0 64       	brge	800102e4 <_vfprintf_r+0xb6c>
800102da:	fa cc f9 44 	sub	r12,sp,-1724
800102de:	f8 06 00 36 	add	r6,r12,r6<<0x3
800102e2:	c1 d8       	rjmp	8001031c <_vfprintf_r+0xba4>
800102e4:	fa c8 f9 50 	sub	r8,sp,-1712
800102e8:	1a d8       	st.w	--sp,r8
800102ea:	fa c8 fa b8 	sub	r8,sp,-1352
800102ee:	04 9a       	mov	r10,r2
800102f0:	1a d8       	st.w	--sp,r8
800102f2:	fa c8 fb b4 	sub	r8,sp,-1100
800102f6:	0c 9b       	mov	r11,r6
800102f8:	1a d8       	st.w	--sp,r8
800102fa:	08 9c       	mov	r12,r4
800102fc:	fa c8 f9 40 	sub	r8,sp,-1728
80010300:	fa c9 ff b4 	sub	r9,sp,-76
80010304:	fe b0 f8 a4 	rcall	8000f44c <get_arg>
80010308:	2f dd       	sub	sp,-12
8001030a:	78 0a       	ld.w	r10,r12[0x0]
8001030c:	c2 08       	rjmp	8001034c <_vfprintf_r+0xbd4>
8001030e:	2f f7       	sub	r7,-1
80010310:	10 39       	cp.w	r9,r8
80010312:	c0 84       	brge	80010322 <_vfprintf_r+0xbaa>
80010314:	fa cb f9 44 	sub	r11,sp,-1724
80010318:	f6 06 00 36 	add	r6,r11,r6<<0x3
8001031c:	ec fa fd 88 	ld.w	r10,r6[-632]
80010320:	c1 68       	rjmp	8001034c <_vfprintf_r+0xbd4>
80010322:	41 09       	lddsp	r9,sp[0x40]
80010324:	59 f8       	cp.w	r8,31
80010326:	e0 89 00 10 	brgt	80010346 <_vfprintf_r+0xbce>
8001032a:	f2 ca ff fc 	sub	r10,r9,-4
8001032e:	51 0a       	stdsp	sp[0x40],r10
80010330:	fa c6 f9 44 	sub	r6,sp,-1724
80010334:	72 0a       	ld.w	r10,r9[0x0]
80010336:	ec 08 00 39 	add	r9,r6,r8<<0x3
8001033a:	f3 4a fd 88 	st.w	r9[-632],r10
8001033e:	2f f8       	sub	r8,-1
80010340:	fb 48 06 b4 	st.w	sp[1716],r8
80010344:	c0 48       	rjmp	8001034c <_vfprintf_r+0xbd4>
80010346:	72 0a       	ld.w	r10,r9[0x0]
80010348:	2f c9       	sub	r9,-4
8001034a:	51 09       	stdsp	sp[0x40],r9
8001034c:	40 be       	lddsp	lr,sp[0x2c]
8001034e:	1c 98       	mov	r8,lr
80010350:	95 1e       	st.w	r10[0x4],lr
80010352:	bf 58       	asr	r8,0x1f
80010354:	95 08       	st.w	r10[0x0],r8
80010356:	fe 9f fa 9f 	bral	8000f894 <_vfprintf_r+0x11c>
8001035a:	ed b5 00 04 	bld	r5,0x4
8001035e:	c4 80       	breq	800103ee <_vfprintf_r+0xc76>
80010360:	e2 15 00 40 	andl	r5,0x40,COH
80010364:	c4 50       	breq	800103ee <_vfprintf_r+0xc76>
80010366:	fa f8 06 b4 	ld.w	r8,sp[1716]
8001036a:	40 3c       	lddsp	r12,sp[0xc]
8001036c:	58 0c       	cp.w	r12,0
8001036e:	c1 d0       	breq	800103a8 <_vfprintf_r+0xc30>
80010370:	10 36       	cp.w	r6,r8
80010372:	c0 64       	brge	8001037e <_vfprintf_r+0xc06>
80010374:	fa cb f9 44 	sub	r11,sp,-1724
80010378:	f6 06 00 36 	add	r6,r11,r6<<0x3
8001037c:	c1 d8       	rjmp	800103b6 <_vfprintf_r+0xc3e>
8001037e:	fa c8 f9 50 	sub	r8,sp,-1712
80010382:	1a d8       	st.w	--sp,r8
80010384:	fa c8 fa b8 	sub	r8,sp,-1352
80010388:	04 9a       	mov	r10,r2
8001038a:	1a d8       	st.w	--sp,r8
8001038c:	fa c8 fb b4 	sub	r8,sp,-1100
80010390:	0c 9b       	mov	r11,r6
80010392:	1a d8       	st.w	--sp,r8
80010394:	08 9c       	mov	r12,r4
80010396:	fa c8 f9 40 	sub	r8,sp,-1728
8001039a:	fa c9 ff b4 	sub	r9,sp,-76
8001039e:	fe b0 f8 57 	rcall	8000f44c <get_arg>
800103a2:	2f dd       	sub	sp,-12
800103a4:	78 0a       	ld.w	r10,r12[0x0]
800103a6:	c2 08       	rjmp	800103e6 <_vfprintf_r+0xc6e>
800103a8:	2f f7       	sub	r7,-1
800103aa:	10 39       	cp.w	r9,r8
800103ac:	c0 84       	brge	800103bc <_vfprintf_r+0xc44>
800103ae:	fa ca f9 44 	sub	r10,sp,-1724
800103b2:	f4 06 00 36 	add	r6,r10,r6<<0x3
800103b6:	ec fa fd 88 	ld.w	r10,r6[-632]
800103ba:	c1 68       	rjmp	800103e6 <_vfprintf_r+0xc6e>
800103bc:	41 09       	lddsp	r9,sp[0x40]
800103be:	59 f8       	cp.w	r8,31
800103c0:	e0 89 00 10 	brgt	800103e0 <_vfprintf_r+0xc68>
800103c4:	f2 ca ff fc 	sub	r10,r9,-4
800103c8:	51 0a       	stdsp	sp[0x40],r10
800103ca:	fa c6 f9 44 	sub	r6,sp,-1724
800103ce:	72 0a       	ld.w	r10,r9[0x0]
800103d0:	ec 08 00 39 	add	r9,r6,r8<<0x3
800103d4:	f3 4a fd 88 	st.w	r9[-632],r10
800103d8:	2f f8       	sub	r8,-1
800103da:	fb 48 06 b4 	st.w	sp[1716],r8
800103de:	c0 48       	rjmp	800103e6 <_vfprintf_r+0xc6e>
800103e0:	72 0a       	ld.w	r10,r9[0x0]
800103e2:	2f c9       	sub	r9,-4
800103e4:	51 09       	stdsp	sp[0x40],r9
800103e6:	40 be       	lddsp	lr,sp[0x2c]
800103e8:	b4 0e       	st.h	r10[0x0],lr
800103ea:	fe 9f fa 55 	bral	8000f894 <_vfprintf_r+0x11c>
800103ee:	fa f8 06 b4 	ld.w	r8,sp[1716]
800103f2:	40 3c       	lddsp	r12,sp[0xc]
800103f4:	58 0c       	cp.w	r12,0
800103f6:	c1 d0       	breq	80010430 <_vfprintf_r+0xcb8>
800103f8:	10 36       	cp.w	r6,r8
800103fa:	c0 64       	brge	80010406 <_vfprintf_r+0xc8e>
800103fc:	fa cb f9 44 	sub	r11,sp,-1724
80010400:	f6 06 00 36 	add	r6,r11,r6<<0x3
80010404:	c1 d8       	rjmp	8001043e <_vfprintf_r+0xcc6>
80010406:	fa c8 f9 50 	sub	r8,sp,-1712
8001040a:	1a d8       	st.w	--sp,r8
8001040c:	fa c8 fa b8 	sub	r8,sp,-1352
80010410:	04 9a       	mov	r10,r2
80010412:	1a d8       	st.w	--sp,r8
80010414:	fa c8 fb b4 	sub	r8,sp,-1100
80010418:	0c 9b       	mov	r11,r6
8001041a:	1a d8       	st.w	--sp,r8
8001041c:	08 9c       	mov	r12,r4
8001041e:	fa c8 f9 40 	sub	r8,sp,-1728
80010422:	fa c9 ff b4 	sub	r9,sp,-76
80010426:	fe b0 f8 13 	rcall	8000f44c <get_arg>
8001042a:	2f dd       	sub	sp,-12
8001042c:	78 0a       	ld.w	r10,r12[0x0]
8001042e:	c2 08       	rjmp	8001046e <_vfprintf_r+0xcf6>
80010430:	2f f7       	sub	r7,-1
80010432:	10 39       	cp.w	r9,r8
80010434:	c0 84       	brge	80010444 <_vfprintf_r+0xccc>
80010436:	fa ca f9 44 	sub	r10,sp,-1724
8001043a:	f4 06 00 36 	add	r6,r10,r6<<0x3
8001043e:	ec fa fd 88 	ld.w	r10,r6[-632]
80010442:	c1 68       	rjmp	8001046e <_vfprintf_r+0xcf6>
80010444:	41 09       	lddsp	r9,sp[0x40]
80010446:	59 f8       	cp.w	r8,31
80010448:	e0 89 00 10 	brgt	80010468 <_vfprintf_r+0xcf0>
8001044c:	f2 ca ff fc 	sub	r10,r9,-4
80010450:	51 0a       	stdsp	sp[0x40],r10
80010452:	fa c6 f9 44 	sub	r6,sp,-1724
80010456:	72 0a       	ld.w	r10,r9[0x0]
80010458:	ec 08 00 39 	add	r9,r6,r8<<0x3
8001045c:	f3 4a fd 88 	st.w	r9[-632],r10
80010460:	2f f8       	sub	r8,-1
80010462:	fb 48 06 b4 	st.w	sp[1716],r8
80010466:	c0 48       	rjmp	8001046e <_vfprintf_r+0xcf6>
80010468:	72 0a       	ld.w	r10,r9[0x0]
8001046a:	2f c9       	sub	r9,-4
8001046c:	51 09       	stdsp	sp[0x40],r9
8001046e:	40 be       	lddsp	lr,sp[0x2c]
80010470:	95 0e       	st.w	r10[0x0],lr
80010472:	fe 9f fa 11 	bral	8000f894 <_vfprintf_r+0x11c>
80010476:	50 a7       	stdsp	sp[0x28],r7
80010478:	50 80       	stdsp	sp[0x20],r0
8001047a:	0c 97       	mov	r7,r6
8001047c:	04 94       	mov	r4,r2
8001047e:	06 96       	mov	r6,r3
80010480:	02 92       	mov	r2,r1
80010482:	40 93       	lddsp	r3,sp[0x24]
80010484:	10 90       	mov	r0,r8
80010486:	40 41       	lddsp	r1,sp[0x10]
80010488:	a5 a5       	sbr	r5,0x4
8001048a:	c0 a8       	rjmp	8001049e <_vfprintf_r+0xd26>
8001048c:	50 a7       	stdsp	sp[0x28],r7
8001048e:	50 80       	stdsp	sp[0x20],r0
80010490:	0c 97       	mov	r7,r6
80010492:	04 94       	mov	r4,r2
80010494:	06 96       	mov	r6,r3
80010496:	02 92       	mov	r2,r1
80010498:	40 93       	lddsp	r3,sp[0x24]
8001049a:	10 90       	mov	r0,r8
8001049c:	40 41       	lddsp	r1,sp[0x10]
8001049e:	ed b5 00 05 	bld	r5,0x5
800104a2:	c5 d1       	brne	8001055c <_vfprintf_r+0xde4>
800104a4:	fa f8 06 b4 	ld.w	r8,sp[1716]
800104a8:	40 3c       	lddsp	r12,sp[0xc]
800104aa:	58 0c       	cp.w	r12,0
800104ac:	c2 60       	breq	800104f8 <_vfprintf_r+0xd80>
800104ae:	10 36       	cp.w	r6,r8
800104b0:	c0 a4       	brge	800104c4 <_vfprintf_r+0xd4c>
800104b2:	fa cb f9 44 	sub	r11,sp,-1724
800104b6:	f6 06 00 36 	add	r6,r11,r6<<0x3
800104ba:	ec e8 fd 88 	ld.d	r8,r6[-632]
800104be:	fa e9 00 00 	st.d	sp[0],r8
800104c2:	c1 88       	rjmp	800104f2 <_vfprintf_r+0xd7a>
800104c4:	fa c8 f9 50 	sub	r8,sp,-1712
800104c8:	1a d8       	st.w	--sp,r8
800104ca:	fa c8 fa b8 	sub	r8,sp,-1352
800104ce:	04 9a       	mov	r10,r2
800104d0:	1a d8       	st.w	--sp,r8
800104d2:	0c 9b       	mov	r11,r6
800104d4:	fa c8 fb b4 	sub	r8,sp,-1100
800104d8:	08 9c       	mov	r12,r4
800104da:	1a d8       	st.w	--sp,r8
800104dc:	fa c8 f9 40 	sub	r8,sp,-1728
800104e0:	fa c9 ff b4 	sub	r9,sp,-76
800104e4:	fe b0 f7 b4 	rcall	8000f44c <get_arg>
800104e8:	2f dd       	sub	sp,-12
800104ea:	f8 ea 00 00 	ld.d	r10,r12[0]
800104ee:	fa eb 00 00 	st.d	sp[0],r10
800104f2:	30 08       	mov	r8,0
800104f4:	e0 8f 03 de 	bral	80010cb0 <_vfprintf_r+0x1538>
800104f8:	ee ca ff ff 	sub	r10,r7,-1
800104fc:	10 37       	cp.w	r7,r8
800104fe:	c0 b4       	brge	80010514 <_vfprintf_r+0xd9c>
80010500:	fa c9 f9 44 	sub	r9,sp,-1724
80010504:	14 97       	mov	r7,r10
80010506:	f2 06 00 36 	add	r6,r9,r6<<0x3
8001050a:	ec ea fd 88 	ld.d	r10,r6[-632]
8001050e:	fa eb 00 00 	st.d	sp[0],r10
80010512:	c1 88       	rjmp	80010542 <_vfprintf_r+0xdca>
80010514:	41 09       	lddsp	r9,sp[0x40]
80010516:	59 f8       	cp.w	r8,31
80010518:	e0 89 00 18 	brgt	80010548 <_vfprintf_r+0xdd0>
8001051c:	f2 e6 00 00 	ld.d	r6,r9[0]
80010520:	f2 cb ff f8 	sub	r11,r9,-8
80010524:	fa e7 00 00 	st.d	sp[0],r6
80010528:	51 0b       	stdsp	sp[0x40],r11
8001052a:	fa c6 f9 44 	sub	r6,sp,-1724
8001052e:	ec 08 00 39 	add	r9,r6,r8<<0x3
80010532:	fa e6 00 00 	ld.d	r6,sp[0]
80010536:	f2 e7 fd 88 	st.d	r9[-632],r6
8001053a:	2f f8       	sub	r8,-1
8001053c:	14 97       	mov	r7,r10
8001053e:	fb 48 06 b4 	st.w	sp[1716],r8
80010542:	40 38       	lddsp	r8,sp[0xc]
80010544:	e0 8f 03 b6 	bral	80010cb0 <_vfprintf_r+0x1538>
80010548:	f2 e6 00 00 	ld.d	r6,r9[0]
8001054c:	40 38       	lddsp	r8,sp[0xc]
8001054e:	fa e7 00 00 	st.d	sp[0],r6
80010552:	2f 89       	sub	r9,-8
80010554:	14 97       	mov	r7,r10
80010556:	51 09       	stdsp	sp[0x40],r9
80010558:	e0 8f 03 ac 	bral	80010cb0 <_vfprintf_r+0x1538>
8001055c:	ed b5 00 04 	bld	r5,0x4
80010560:	c1 61       	brne	8001058c <_vfprintf_r+0xe14>
80010562:	fa f8 06 b4 	ld.w	r8,sp[1716]
80010566:	40 3e       	lddsp	lr,sp[0xc]
80010568:	58 0e       	cp.w	lr,0
8001056a:	c0 80       	breq	8001057a <_vfprintf_r+0xe02>
8001056c:	10 36       	cp.w	r6,r8
8001056e:	c6 74       	brge	8001063c <_vfprintf_r+0xec4>
80010570:	fa cc f9 44 	sub	r12,sp,-1724
80010574:	f8 06 00 36 	add	r6,r12,r6<<0x3
80010578:	c8 08       	rjmp	80010678 <_vfprintf_r+0xf00>
8001057a:	ee ca ff ff 	sub	r10,r7,-1
8001057e:	10 37       	cp.w	r7,r8
80010580:	c7 f4       	brge	8001067e <_vfprintf_r+0xf06>
80010582:	fa cb f9 44 	sub	r11,sp,-1724
80010586:	f6 06 00 36 	add	r6,r11,r6<<0x3
8001058a:	c7 68       	rjmp	80010676 <_vfprintf_r+0xefe>
8001058c:	ed b5 00 06 	bld	r5,0x6
80010590:	c4 a1       	brne	80010624 <_vfprintf_r+0xeac>
80010592:	fa f8 06 b4 	ld.w	r8,sp[1716]
80010596:	40 3c       	lddsp	r12,sp[0xc]
80010598:	58 0c       	cp.w	r12,0
8001059a:	c1 d0       	breq	800105d4 <_vfprintf_r+0xe5c>
8001059c:	10 36       	cp.w	r6,r8
8001059e:	c0 64       	brge	800105aa <_vfprintf_r+0xe32>
800105a0:	fa cb f9 44 	sub	r11,sp,-1724
800105a4:	f6 06 00 36 	add	r6,r11,r6<<0x3
800105a8:	c1 f8       	rjmp	800105e6 <_vfprintf_r+0xe6e>
800105aa:	fa c8 f9 50 	sub	r8,sp,-1712
800105ae:	1a d8       	st.w	--sp,r8
800105b0:	fa c8 fa b8 	sub	r8,sp,-1352
800105b4:	1a d8       	st.w	--sp,r8
800105b6:	fa c8 fb b4 	sub	r8,sp,-1100
800105ba:	1a d8       	st.w	--sp,r8
800105bc:	fa c8 f9 40 	sub	r8,sp,-1728
800105c0:	fa c9 ff b4 	sub	r9,sp,-76
800105c4:	04 9a       	mov	r10,r2
800105c6:	0c 9b       	mov	r11,r6
800105c8:	08 9c       	mov	r12,r4
800105ca:	fe b0 f7 41 	rcall	8000f44c <get_arg>
800105ce:	2f dd       	sub	sp,-12
800105d0:	98 18       	ld.sh	r8,r12[0x2]
800105d2:	c2 68       	rjmp	8001061e <_vfprintf_r+0xea6>
800105d4:	ee ca ff ff 	sub	r10,r7,-1
800105d8:	10 37       	cp.w	r7,r8
800105da:	c0 94       	brge	800105ec <_vfprintf_r+0xe74>
800105dc:	fa c9 f9 44 	sub	r9,sp,-1724
800105e0:	14 97       	mov	r7,r10
800105e2:	f2 06 00 36 	add	r6,r9,r6<<0x3
800105e6:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
800105ea:	c1 a8       	rjmp	8001061e <_vfprintf_r+0xea6>
800105ec:	41 09       	lddsp	r9,sp[0x40]
800105ee:	59 f8       	cp.w	r8,31
800105f0:	e0 89 00 13 	brgt	80010616 <_vfprintf_r+0xe9e>
800105f4:	f2 cb ff fc 	sub	r11,r9,-4
800105f8:	51 0b       	stdsp	sp[0x40],r11
800105fa:	72 09       	ld.w	r9,r9[0x0]
800105fc:	fa c6 f9 44 	sub	r6,sp,-1724
80010600:	ec 08 00 3b 	add	r11,r6,r8<<0x3
80010604:	2f f8       	sub	r8,-1
80010606:	f7 49 fd 88 	st.w	r11[-632],r9
8001060a:	fb 48 06 b4 	st.w	sp[1716],r8
8001060e:	14 97       	mov	r7,r10
80010610:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
80010614:	c0 58       	rjmp	8001061e <_vfprintf_r+0xea6>
80010616:	92 18       	ld.sh	r8,r9[0x2]
80010618:	14 97       	mov	r7,r10
8001061a:	2f c9       	sub	r9,-4
8001061c:	51 09       	stdsp	sp[0x40],r9
8001061e:	5c 78       	castu.h	r8
80010620:	50 18       	stdsp	sp[0x4],r8
80010622:	c4 68       	rjmp	800106ae <_vfprintf_r+0xf36>
80010624:	fa f8 06 b4 	ld.w	r8,sp[1716]
80010628:	40 3c       	lddsp	r12,sp[0xc]
8001062a:	58 0c       	cp.w	r12,0
8001062c:	c1 d0       	breq	80010666 <_vfprintf_r+0xeee>
8001062e:	10 36       	cp.w	r6,r8
80010630:	c0 64       	brge	8001063c <_vfprintf_r+0xec4>
80010632:	fa cb f9 44 	sub	r11,sp,-1724
80010636:	f6 06 00 36 	add	r6,r11,r6<<0x3
8001063a:	c1 f8       	rjmp	80010678 <_vfprintf_r+0xf00>
8001063c:	fa c8 f9 50 	sub	r8,sp,-1712
80010640:	1a d8       	st.w	--sp,r8
80010642:	fa c8 fa b8 	sub	r8,sp,-1352
80010646:	0c 9b       	mov	r11,r6
80010648:	1a d8       	st.w	--sp,r8
8001064a:	fa c8 fb b4 	sub	r8,sp,-1100
8001064e:	04 9a       	mov	r10,r2
80010650:	1a d8       	st.w	--sp,r8
80010652:	08 9c       	mov	r12,r4
80010654:	fa c8 f9 40 	sub	r8,sp,-1728
80010658:	fa c9 ff b4 	sub	r9,sp,-76
8001065c:	fe b0 f6 f8 	rcall	8000f44c <get_arg>
80010660:	2f dd       	sub	sp,-12
80010662:	78 0b       	ld.w	r11,r12[0x0]
80010664:	c2 48       	rjmp	800106ac <_vfprintf_r+0xf34>
80010666:	ee ca ff ff 	sub	r10,r7,-1
8001066a:	10 37       	cp.w	r7,r8
8001066c:	c0 94       	brge	8001067e <_vfprintf_r+0xf06>
8001066e:	fa c9 f9 44 	sub	r9,sp,-1724
80010672:	f2 06 00 36 	add	r6,r9,r6<<0x3
80010676:	14 97       	mov	r7,r10
80010678:	ec fb fd 88 	ld.w	r11,r6[-632]
8001067c:	c1 88       	rjmp	800106ac <_vfprintf_r+0xf34>
8001067e:	41 09       	lddsp	r9,sp[0x40]
80010680:	59 f8       	cp.w	r8,31
80010682:	e0 89 00 11 	brgt	800106a4 <_vfprintf_r+0xf2c>
80010686:	f2 cb ff fc 	sub	r11,r9,-4
8001068a:	51 0b       	stdsp	sp[0x40],r11
8001068c:	fa c6 f9 44 	sub	r6,sp,-1724
80010690:	72 0b       	ld.w	r11,r9[0x0]
80010692:	ec 08 00 39 	add	r9,r6,r8<<0x3
80010696:	f3 4b fd 88 	st.w	r9[-632],r11
8001069a:	2f f8       	sub	r8,-1
8001069c:	14 97       	mov	r7,r10
8001069e:	fb 48 06 b4 	st.w	sp[1716],r8
800106a2:	c0 58       	rjmp	800106ac <_vfprintf_r+0xf34>
800106a4:	72 0b       	ld.w	r11,r9[0x0]
800106a6:	14 97       	mov	r7,r10
800106a8:	2f c9       	sub	r9,-4
800106aa:	51 09       	stdsp	sp[0x40],r9
800106ac:	50 1b       	stdsp	sp[0x4],r11
800106ae:	30 0e       	mov	lr,0
800106b0:	50 0e       	stdsp	sp[0x0],lr
800106b2:	1c 98       	mov	r8,lr
800106b4:	e0 8f 02 fe 	bral	80010cb0 <_vfprintf_r+0x1538>
800106b8:	50 a7       	stdsp	sp[0x28],r7
800106ba:	50 80       	stdsp	sp[0x20],r0
800106bc:	0c 97       	mov	r7,r6
800106be:	04 94       	mov	r4,r2
800106c0:	06 96       	mov	r6,r3
800106c2:	02 92       	mov	r2,r1
800106c4:	40 93       	lddsp	r3,sp[0x24]
800106c6:	40 41       	lddsp	r1,sp[0x10]
800106c8:	0e 99       	mov	r9,r7
800106ca:	fa f8 06 b4 	ld.w	r8,sp[1716]
800106ce:	40 3c       	lddsp	r12,sp[0xc]
800106d0:	58 0c       	cp.w	r12,0
800106d2:	c1 d0       	breq	8001070c <_vfprintf_r+0xf94>
800106d4:	10 36       	cp.w	r6,r8
800106d6:	c0 64       	brge	800106e2 <_vfprintf_r+0xf6a>
800106d8:	fa cb f9 44 	sub	r11,sp,-1724
800106dc:	f6 06 00 36 	add	r6,r11,r6<<0x3
800106e0:	c1 d8       	rjmp	8001071a <_vfprintf_r+0xfa2>
800106e2:	fa c8 f9 50 	sub	r8,sp,-1712
800106e6:	1a d8       	st.w	--sp,r8
800106e8:	fa c8 fa b8 	sub	r8,sp,-1352
800106ec:	1a d8       	st.w	--sp,r8
800106ee:	fa c8 fb b4 	sub	r8,sp,-1100
800106f2:	1a d8       	st.w	--sp,r8
800106f4:	fa c9 ff b4 	sub	r9,sp,-76
800106f8:	fa c8 f9 40 	sub	r8,sp,-1728
800106fc:	04 9a       	mov	r10,r2
800106fe:	0c 9b       	mov	r11,r6
80010700:	08 9c       	mov	r12,r4
80010702:	fe b0 f6 a5 	rcall	8000f44c <get_arg>
80010706:	2f dd       	sub	sp,-12
80010708:	78 09       	ld.w	r9,r12[0x0]
8001070a:	c2 18       	rjmp	8001074c <_vfprintf_r+0xfd4>
8001070c:	2f f7       	sub	r7,-1
8001070e:	10 39       	cp.w	r9,r8
80010710:	c0 84       	brge	80010720 <_vfprintf_r+0xfa8>
80010712:	fa ca f9 44 	sub	r10,sp,-1724
80010716:	f4 06 00 36 	add	r6,r10,r6<<0x3
8001071a:	ec f9 fd 88 	ld.w	r9,r6[-632]
8001071e:	c1 78       	rjmp	8001074c <_vfprintf_r+0xfd4>
80010720:	41 09       	lddsp	r9,sp[0x40]
80010722:	59 f8       	cp.w	r8,31
80010724:	e0 89 00 10 	brgt	80010744 <_vfprintf_r+0xfcc>
80010728:	f2 ca ff fc 	sub	r10,r9,-4
8001072c:	51 0a       	stdsp	sp[0x40],r10
8001072e:	fa c6 f9 44 	sub	r6,sp,-1724
80010732:	72 09       	ld.w	r9,r9[0x0]
80010734:	ec 08 00 3a 	add	r10,r6,r8<<0x3
80010738:	f5 49 fd 88 	st.w	r10[-632],r9
8001073c:	2f f8       	sub	r8,-1
8001073e:	fb 48 06 b4 	st.w	sp[1716],r8
80010742:	c0 58       	rjmp	8001074c <_vfprintf_r+0xfd4>
80010744:	f2 c8 ff fc 	sub	r8,r9,-4
80010748:	51 08       	stdsp	sp[0x40],r8
8001074a:	72 09       	ld.w	r9,r9[0x0]
8001074c:	33 08       	mov	r8,48
8001074e:	fb 68 06 b8 	st.b	sp[1720],r8
80010752:	37 88       	mov	r8,120
80010754:	30 0e       	mov	lr,0
80010756:	fb 68 06 b9 	st.b	sp[1721],r8
8001075a:	fe cc b5 ae 	sub	r12,pc,-19026
8001075e:	50 19       	stdsp	sp[0x4],r9
80010760:	a1 b5       	sbr	r5,0x1
80010762:	50 0e       	stdsp	sp[0x0],lr
80010764:	50 dc       	stdsp	sp[0x34],r12
80010766:	30 28       	mov	r8,2
80010768:	37 80       	mov	r0,120
8001076a:	e0 8f 02 a3 	bral	80010cb0 <_vfprintf_r+0x1538>
8001076e:	50 a7       	stdsp	sp[0x28],r7
80010770:	50 80       	stdsp	sp[0x20],r0
80010772:	10 90       	mov	r0,r8
80010774:	30 08       	mov	r8,0
80010776:	fb 68 06 bb 	st.b	sp[1723],r8
8001077a:	0c 97       	mov	r7,r6
8001077c:	04 94       	mov	r4,r2
8001077e:	06 96       	mov	r6,r3
80010780:	02 92       	mov	r2,r1
80010782:	40 93       	lddsp	r3,sp[0x24]
80010784:	40 41       	lddsp	r1,sp[0x10]
80010786:	0e 99       	mov	r9,r7
80010788:	fa f8 06 b4 	ld.w	r8,sp[1716]
8001078c:	40 3b       	lddsp	r11,sp[0xc]
8001078e:	58 0b       	cp.w	r11,0
80010790:	c1 d0       	breq	800107ca <_vfprintf_r+0x1052>
80010792:	10 36       	cp.w	r6,r8
80010794:	c0 64       	brge	800107a0 <_vfprintf_r+0x1028>
80010796:	fa ca f9 44 	sub	r10,sp,-1724
8001079a:	f4 06 00 36 	add	r6,r10,r6<<0x3
8001079e:	c1 d8       	rjmp	800107d8 <_vfprintf_r+0x1060>
800107a0:	fa c8 f9 50 	sub	r8,sp,-1712
800107a4:	1a d8       	st.w	--sp,r8
800107a6:	fa c8 fa b8 	sub	r8,sp,-1352
800107aa:	1a d8       	st.w	--sp,r8
800107ac:	fa c8 fb b4 	sub	r8,sp,-1100
800107b0:	0c 9b       	mov	r11,r6
800107b2:	1a d8       	st.w	--sp,r8
800107b4:	04 9a       	mov	r10,r2
800107b6:	fa c8 f9 40 	sub	r8,sp,-1728
800107ba:	fa c9 ff b4 	sub	r9,sp,-76
800107be:	08 9c       	mov	r12,r4
800107c0:	fe b0 f6 46 	rcall	8000f44c <get_arg>
800107c4:	2f dd       	sub	sp,-12
800107c6:	78 06       	ld.w	r6,r12[0x0]
800107c8:	c2 08       	rjmp	80010808 <_vfprintf_r+0x1090>
800107ca:	2f f7       	sub	r7,-1
800107cc:	10 39       	cp.w	r9,r8
800107ce:	c0 84       	brge	800107de <_vfprintf_r+0x1066>
800107d0:	fa c9 f9 44 	sub	r9,sp,-1724
800107d4:	f2 06 00 36 	add	r6,r9,r6<<0x3
800107d8:	ec f6 fd 88 	ld.w	r6,r6[-632]
800107dc:	c1 68       	rjmp	80010808 <_vfprintf_r+0x1090>
800107de:	41 09       	lddsp	r9,sp[0x40]
800107e0:	59 f8       	cp.w	r8,31
800107e2:	e0 89 00 10 	brgt	80010802 <_vfprintf_r+0x108a>
800107e6:	f2 ca ff fc 	sub	r10,r9,-4
800107ea:	51 0a       	stdsp	sp[0x40],r10
800107ec:	72 06       	ld.w	r6,r9[0x0]
800107ee:	fa ce f9 44 	sub	lr,sp,-1724
800107f2:	fc 08 00 39 	add	r9,lr,r8<<0x3
800107f6:	f3 46 fd 88 	st.w	r9[-632],r6
800107fa:	2f f8       	sub	r8,-1
800107fc:	fb 48 06 b4 	st.w	sp[1716],r8
80010800:	c0 48       	rjmp	80010808 <_vfprintf_r+0x1090>
80010802:	72 06       	ld.w	r6,r9[0x0]
80010804:	2f c9       	sub	r9,-4
80010806:	51 09       	stdsp	sp[0x40],r9
80010808:	40 2c       	lddsp	r12,sp[0x8]
8001080a:	58 0c       	cp.w	r12,0
8001080c:	c1 05       	brlt	8001082c <_vfprintf_r+0x10b4>
8001080e:	18 9a       	mov	r10,r12
80010810:	30 0b       	mov	r11,0
80010812:	0c 9c       	mov	r12,r6
80010814:	e0 a0 14 58 	rcall	800130c4 <memchr>
80010818:	e0 80 02 df 	breq	80010dd6 <_vfprintf_r+0x165e>
8001081c:	f8 06 01 02 	sub	r2,r12,r6
80010820:	40 2b       	lddsp	r11,sp[0x8]
80010822:	16 32       	cp.w	r2,r11
80010824:	e0 89 02 d9 	brgt	80010dd6 <_vfprintf_r+0x165e>
80010828:	e0 8f 02 d4 	bral	80010dd0 <_vfprintf_r+0x1658>
8001082c:	30 0a       	mov	r10,0
8001082e:	0c 9c       	mov	r12,r6
80010830:	50 2a       	stdsp	sp[0x8],r10
80010832:	e0 a0 19 2b 	rcall	80013a88 <strlen>
80010836:	18 92       	mov	r2,r12
80010838:	e0 8f 02 d2 	bral	80010ddc <_vfprintf_r+0x1664>
8001083c:	50 a7       	stdsp	sp[0x28],r7
8001083e:	50 80       	stdsp	sp[0x20],r0
80010840:	0c 97       	mov	r7,r6
80010842:	04 94       	mov	r4,r2
80010844:	06 96       	mov	r6,r3
80010846:	02 92       	mov	r2,r1
80010848:	40 93       	lddsp	r3,sp[0x24]
8001084a:	10 90       	mov	r0,r8
8001084c:	40 41       	lddsp	r1,sp[0x10]
8001084e:	a5 a5       	sbr	r5,0x4
80010850:	c0 a8       	rjmp	80010864 <_vfprintf_r+0x10ec>
80010852:	50 a7       	stdsp	sp[0x28],r7
80010854:	50 80       	stdsp	sp[0x20],r0
80010856:	0c 97       	mov	r7,r6
80010858:	04 94       	mov	r4,r2
8001085a:	06 96       	mov	r6,r3
8001085c:	02 92       	mov	r2,r1
8001085e:	40 93       	lddsp	r3,sp[0x24]
80010860:	10 90       	mov	r0,r8
80010862:	40 41       	lddsp	r1,sp[0x10]
80010864:	ed b5 00 05 	bld	r5,0x5
80010868:	c5 61       	brne	80010914 <_vfprintf_r+0x119c>
8001086a:	fa f8 06 b4 	ld.w	r8,sp[1716]
8001086e:	40 39       	lddsp	r9,sp[0xc]
80010870:	58 09       	cp.w	r9,0
80010872:	c2 10       	breq	800108b4 <_vfprintf_r+0x113c>
80010874:	10 36       	cp.w	r6,r8
80010876:	c0 74       	brge	80010884 <_vfprintf_r+0x110c>
80010878:	fa c8 f9 44 	sub	r8,sp,-1724
8001087c:	f0 06 00 36 	add	r6,r8,r6<<0x3
80010880:	c2 38       	rjmp	800108c6 <_vfprintf_r+0x114e>
80010882:	d7 03       	nop
80010884:	fa c8 f9 50 	sub	r8,sp,-1712
80010888:	1a d8       	st.w	--sp,r8
8001088a:	fa c8 fa b8 	sub	r8,sp,-1352
8001088e:	1a d8       	st.w	--sp,r8
80010890:	fa c8 fb b4 	sub	r8,sp,-1100
80010894:	1a d8       	st.w	--sp,r8
80010896:	fa c8 f9 40 	sub	r8,sp,-1728
8001089a:	fa c9 ff b4 	sub	r9,sp,-76
8001089e:	04 9a       	mov	r10,r2
800108a0:	0c 9b       	mov	r11,r6
800108a2:	08 9c       	mov	r12,r4
800108a4:	fe b0 f5 d4 	rcall	8000f44c <get_arg>
800108a8:	2f dd       	sub	sp,-12
800108aa:	f8 e8 00 00 	ld.d	r8,r12[0]
800108ae:	fa e9 00 00 	st.d	sp[0],r8
800108b2:	c2 e8       	rjmp	8001090e <_vfprintf_r+0x1196>
800108b4:	ee ca ff ff 	sub	r10,r7,-1
800108b8:	10 37       	cp.w	r7,r8
800108ba:	c0 b4       	brge	800108d0 <_vfprintf_r+0x1158>
800108bc:	fa c8 f9 44 	sub	r8,sp,-1724
800108c0:	14 97       	mov	r7,r10
800108c2:	f0 06 00 36 	add	r6,r8,r6<<0x3
800108c6:	ec ea fd 88 	ld.d	r10,r6[-632]
800108ca:	fa eb 00 00 	st.d	sp[0],r10
800108ce:	c2 08       	rjmp	8001090e <_vfprintf_r+0x1196>
800108d0:	41 09       	lddsp	r9,sp[0x40]
800108d2:	59 f8       	cp.w	r8,31
800108d4:	e0 89 00 16 	brgt	80010900 <_vfprintf_r+0x1188>
800108d8:	f2 e6 00 00 	ld.d	r6,r9[0]
800108dc:	f2 cb ff f8 	sub	r11,r9,-8
800108e0:	fa e7 00 00 	st.d	sp[0],r6
800108e4:	51 0b       	stdsp	sp[0x40],r11
800108e6:	fa c6 f9 44 	sub	r6,sp,-1724
800108ea:	ec 08 00 39 	add	r9,r6,r8<<0x3
800108ee:	fa e6 00 00 	ld.d	r6,sp[0]
800108f2:	f2 e7 fd 88 	st.d	r9[-632],r6
800108f6:	2f f8       	sub	r8,-1
800108f8:	14 97       	mov	r7,r10
800108fa:	fb 48 06 b4 	st.w	sp[1716],r8
800108fe:	c0 88       	rjmp	8001090e <_vfprintf_r+0x1196>
80010900:	f2 e6 00 00 	ld.d	r6,r9[0]
80010904:	2f 89       	sub	r9,-8
80010906:	fa e7 00 00 	st.d	sp[0],r6
8001090a:	51 09       	stdsp	sp[0x40],r9
8001090c:	14 97       	mov	r7,r10
8001090e:	30 18       	mov	r8,1
80010910:	e0 8f 01 d0 	bral	80010cb0 <_vfprintf_r+0x1538>
80010914:	ed b5 00 04 	bld	r5,0x4
80010918:	c1 61       	brne	80010944 <_vfprintf_r+0x11cc>
8001091a:	fa f8 06 b4 	ld.w	r8,sp[1716]
8001091e:	40 3e       	lddsp	lr,sp[0xc]
80010920:	58 0e       	cp.w	lr,0
80010922:	c0 80       	breq	80010932 <_vfprintf_r+0x11ba>
80010924:	10 36       	cp.w	r6,r8
80010926:	c6 74       	brge	800109f4 <_vfprintf_r+0x127c>
80010928:	fa cc f9 44 	sub	r12,sp,-1724
8001092c:	f8 06 00 36 	add	r6,r12,r6<<0x3
80010930:	c8 08       	rjmp	80010a30 <_vfprintf_r+0x12b8>
80010932:	ee ca ff ff 	sub	r10,r7,-1
80010936:	10 37       	cp.w	r7,r8
80010938:	c7 f4       	brge	80010a36 <_vfprintf_r+0x12be>
8001093a:	fa cb f9 44 	sub	r11,sp,-1724
8001093e:	f6 06 00 36 	add	r6,r11,r6<<0x3
80010942:	c7 68       	rjmp	80010a2e <_vfprintf_r+0x12b6>
80010944:	ed b5 00 06 	bld	r5,0x6
80010948:	c4 a1       	brne	800109dc <_vfprintf_r+0x1264>
8001094a:	fa f8 06 b4 	ld.w	r8,sp[1716]
8001094e:	40 3c       	lddsp	r12,sp[0xc]
80010950:	58 0c       	cp.w	r12,0
80010952:	c1 d0       	breq	8001098c <_vfprintf_r+0x1214>
80010954:	10 36       	cp.w	r6,r8
80010956:	c0 64       	brge	80010962 <_vfprintf_r+0x11ea>
80010958:	fa cb f9 44 	sub	r11,sp,-1724
8001095c:	f6 06 00 36 	add	r6,r11,r6<<0x3
80010960:	c1 f8       	rjmp	8001099e <_vfprintf_r+0x1226>
80010962:	fa c8 f9 50 	sub	r8,sp,-1712
80010966:	1a d8       	st.w	--sp,r8
80010968:	fa c8 fa b8 	sub	r8,sp,-1352
8001096c:	1a d8       	st.w	--sp,r8
8001096e:	fa c8 fb b4 	sub	r8,sp,-1100
80010972:	1a d8       	st.w	--sp,r8
80010974:	fa c8 f9 40 	sub	r8,sp,-1728
80010978:	fa c9 ff b4 	sub	r9,sp,-76
8001097c:	04 9a       	mov	r10,r2
8001097e:	0c 9b       	mov	r11,r6
80010980:	08 9c       	mov	r12,r4
80010982:	fe b0 f5 65 	rcall	8000f44c <get_arg>
80010986:	2f dd       	sub	sp,-12
80010988:	98 18       	ld.sh	r8,r12[0x2]
8001098a:	c2 68       	rjmp	800109d6 <_vfprintf_r+0x125e>
8001098c:	ee ca ff ff 	sub	r10,r7,-1
80010990:	10 37       	cp.w	r7,r8
80010992:	c0 94       	brge	800109a4 <_vfprintf_r+0x122c>
80010994:	fa c9 f9 44 	sub	r9,sp,-1724
80010998:	14 97       	mov	r7,r10
8001099a:	f2 06 00 36 	add	r6,r9,r6<<0x3
8001099e:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
800109a2:	c1 a8       	rjmp	800109d6 <_vfprintf_r+0x125e>
800109a4:	41 09       	lddsp	r9,sp[0x40]
800109a6:	59 f8       	cp.w	r8,31
800109a8:	e0 89 00 13 	brgt	800109ce <_vfprintf_r+0x1256>
800109ac:	f2 cb ff fc 	sub	r11,r9,-4
800109b0:	51 0b       	stdsp	sp[0x40],r11
800109b2:	72 09       	ld.w	r9,r9[0x0]
800109b4:	fa c6 f9 44 	sub	r6,sp,-1724
800109b8:	ec 08 00 3b 	add	r11,r6,r8<<0x3
800109bc:	2f f8       	sub	r8,-1
800109be:	f7 49 fd 88 	st.w	r11[-632],r9
800109c2:	fb 48 06 b4 	st.w	sp[1716],r8
800109c6:	14 97       	mov	r7,r10
800109c8:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
800109cc:	c0 58       	rjmp	800109d6 <_vfprintf_r+0x125e>
800109ce:	92 18       	ld.sh	r8,r9[0x2]
800109d0:	14 97       	mov	r7,r10
800109d2:	2f c9       	sub	r9,-4
800109d4:	51 09       	stdsp	sp[0x40],r9
800109d6:	5c 78       	castu.h	r8
800109d8:	50 18       	stdsp	sp[0x4],r8
800109da:	c4 68       	rjmp	80010a66 <_vfprintf_r+0x12ee>
800109dc:	fa f8 06 b4 	ld.w	r8,sp[1716]
800109e0:	40 3c       	lddsp	r12,sp[0xc]
800109e2:	58 0c       	cp.w	r12,0
800109e4:	c1 d0       	breq	80010a1e <_vfprintf_r+0x12a6>
800109e6:	10 36       	cp.w	r6,r8
800109e8:	c0 64       	brge	800109f4 <_vfprintf_r+0x127c>
800109ea:	fa cb f9 44 	sub	r11,sp,-1724
800109ee:	f6 06 00 36 	add	r6,r11,r6<<0x3
800109f2:	c1 f8       	rjmp	80010a30 <_vfprintf_r+0x12b8>
800109f4:	fa c8 f9 50 	sub	r8,sp,-1712
800109f8:	1a d8       	st.w	--sp,r8
800109fa:	fa c8 fa b8 	sub	r8,sp,-1352
800109fe:	0c 9b       	mov	r11,r6
80010a00:	1a d8       	st.w	--sp,r8
80010a02:	fa c8 fb b4 	sub	r8,sp,-1100
80010a06:	04 9a       	mov	r10,r2
80010a08:	1a d8       	st.w	--sp,r8
80010a0a:	08 9c       	mov	r12,r4
80010a0c:	fa c8 f9 40 	sub	r8,sp,-1728
80010a10:	fa c9 ff b4 	sub	r9,sp,-76
80010a14:	fe b0 f5 1c 	rcall	8000f44c <get_arg>
80010a18:	2f dd       	sub	sp,-12
80010a1a:	78 0b       	ld.w	r11,r12[0x0]
80010a1c:	c2 48       	rjmp	80010a64 <_vfprintf_r+0x12ec>
80010a1e:	ee ca ff ff 	sub	r10,r7,-1
80010a22:	10 37       	cp.w	r7,r8
80010a24:	c0 94       	brge	80010a36 <_vfprintf_r+0x12be>
80010a26:	fa c9 f9 44 	sub	r9,sp,-1724
80010a2a:	f2 06 00 36 	add	r6,r9,r6<<0x3
80010a2e:	14 97       	mov	r7,r10
80010a30:	ec fb fd 88 	ld.w	r11,r6[-632]
80010a34:	c1 88       	rjmp	80010a64 <_vfprintf_r+0x12ec>
80010a36:	41 09       	lddsp	r9,sp[0x40]
80010a38:	59 f8       	cp.w	r8,31
80010a3a:	e0 89 00 11 	brgt	80010a5c <_vfprintf_r+0x12e4>
80010a3e:	f2 cb ff fc 	sub	r11,r9,-4
80010a42:	51 0b       	stdsp	sp[0x40],r11
80010a44:	fa c6 f9 44 	sub	r6,sp,-1724
80010a48:	72 0b       	ld.w	r11,r9[0x0]
80010a4a:	ec 08 00 39 	add	r9,r6,r8<<0x3
80010a4e:	f3 4b fd 88 	st.w	r9[-632],r11
80010a52:	2f f8       	sub	r8,-1
80010a54:	14 97       	mov	r7,r10
80010a56:	fb 48 06 b4 	st.w	sp[1716],r8
80010a5a:	c0 58       	rjmp	80010a64 <_vfprintf_r+0x12ec>
80010a5c:	72 0b       	ld.w	r11,r9[0x0]
80010a5e:	14 97       	mov	r7,r10
80010a60:	2f c9       	sub	r9,-4
80010a62:	51 09       	stdsp	sp[0x40],r9
80010a64:	50 1b       	stdsp	sp[0x4],r11
80010a66:	30 0e       	mov	lr,0
80010a68:	30 18       	mov	r8,1
80010a6a:	50 0e       	stdsp	sp[0x0],lr
80010a6c:	c2 29       	rjmp	80010cb0 <_vfprintf_r+0x1538>
80010a6e:	50 a7       	stdsp	sp[0x28],r7
80010a70:	50 80       	stdsp	sp[0x20],r0
80010a72:	0c 97       	mov	r7,r6
80010a74:	04 94       	mov	r4,r2
80010a76:	06 96       	mov	r6,r3
80010a78:	02 92       	mov	r2,r1
80010a7a:	fe cc b8 ce 	sub	r12,pc,-18226
80010a7e:	40 93       	lddsp	r3,sp[0x24]
80010a80:	10 90       	mov	r0,r8
80010a82:	40 41       	lddsp	r1,sp[0x10]
80010a84:	50 dc       	stdsp	sp[0x34],r12
80010a86:	ed b5 00 05 	bld	r5,0x5
80010a8a:	c5 51       	brne	80010b34 <_vfprintf_r+0x13bc>
80010a8c:	fa f8 06 b4 	ld.w	r8,sp[1716]
80010a90:	40 3b       	lddsp	r11,sp[0xc]
80010a92:	58 0b       	cp.w	r11,0
80010a94:	c2 20       	breq	80010ad8 <_vfprintf_r+0x1360>
80010a96:	10 36       	cp.w	r6,r8
80010a98:	c0 a4       	brge	80010aac <_vfprintf_r+0x1334>
80010a9a:	fa ca f9 44 	sub	r10,sp,-1724
80010a9e:	f4 06 00 36 	add	r6,r10,r6<<0x3
80010aa2:	ec e8 fd 88 	ld.d	r8,r6[-632]
80010aa6:	fa e9 00 00 	st.d	sp[0],r8
80010aaa:	cf 28       	rjmp	80010c8e <_vfprintf_r+0x1516>
80010aac:	fa c8 f9 50 	sub	r8,sp,-1712
80010ab0:	1a d8       	st.w	--sp,r8
80010ab2:	fa c8 fa b8 	sub	r8,sp,-1352
80010ab6:	04 9a       	mov	r10,r2
80010ab8:	1a d8       	st.w	--sp,r8
80010aba:	0c 9b       	mov	r11,r6
80010abc:	fa c8 fb b4 	sub	r8,sp,-1100
80010ac0:	08 9c       	mov	r12,r4
80010ac2:	1a d8       	st.w	--sp,r8
80010ac4:	fa c8 f9 40 	sub	r8,sp,-1728
80010ac8:	fa c9 ff b4 	sub	r9,sp,-76
80010acc:	fe b0 f4 c0 	rcall	8000f44c <get_arg>
80010ad0:	2f dd       	sub	sp,-12
80010ad2:	f8 ea 00 00 	ld.d	r10,r12[0]
80010ad6:	c0 c8       	rjmp	80010aee <_vfprintf_r+0x1376>
80010ad8:	ee ca ff ff 	sub	r10,r7,-1
80010adc:	10 37       	cp.w	r7,r8
80010ade:	c0 b4       	brge	80010af4 <_vfprintf_r+0x137c>
80010ae0:	fa c9 f9 44 	sub	r9,sp,-1724
80010ae4:	14 97       	mov	r7,r10
80010ae6:	f2 06 00 36 	add	r6,r9,r6<<0x3
80010aea:	ec ea fd 88 	ld.d	r10,r6[-632]
80010aee:	fa eb 00 00 	st.d	sp[0],r10
80010af2:	cc e8       	rjmp	80010c8e <_vfprintf_r+0x1516>
80010af4:	41 09       	lddsp	r9,sp[0x40]
80010af6:	59 f8       	cp.w	r8,31
80010af8:	e0 89 00 16 	brgt	80010b24 <_vfprintf_r+0x13ac>
80010afc:	f2 e6 00 00 	ld.d	r6,r9[0]
80010b00:	f2 cb ff f8 	sub	r11,r9,-8
80010b04:	fa e7 00 00 	st.d	sp[0],r6
80010b08:	51 0b       	stdsp	sp[0x40],r11
80010b0a:	fa c6 f9 44 	sub	r6,sp,-1724
80010b0e:	ec 08 00 39 	add	r9,r6,r8<<0x3
80010b12:	fa e6 00 00 	ld.d	r6,sp[0]
80010b16:	f2 e7 fd 88 	st.d	r9[-632],r6
80010b1a:	2f f8       	sub	r8,-1
80010b1c:	14 97       	mov	r7,r10
80010b1e:	fb 48 06 b4 	st.w	sp[1716],r8
80010b22:	cb 68       	rjmp	80010c8e <_vfprintf_r+0x1516>
80010b24:	f2 e6 00 00 	ld.d	r6,r9[0]
80010b28:	2f 89       	sub	r9,-8
80010b2a:	fa e7 00 00 	st.d	sp[0],r6
80010b2e:	51 09       	stdsp	sp[0x40],r9
80010b30:	14 97       	mov	r7,r10
80010b32:	ca e8       	rjmp	80010c8e <_vfprintf_r+0x1516>
80010b34:	ed b5 00 04 	bld	r5,0x4
80010b38:	c1 71       	brne	80010b66 <_vfprintf_r+0x13ee>
80010b3a:	fa f8 06 b4 	ld.w	r8,sp[1716]
80010b3e:	40 3e       	lddsp	lr,sp[0xc]
80010b40:	58 0e       	cp.w	lr,0
80010b42:	c0 80       	breq	80010b52 <_vfprintf_r+0x13da>
80010b44:	10 36       	cp.w	r6,r8
80010b46:	c6 94       	brge	80010c18 <_vfprintf_r+0x14a0>
80010b48:	fa cc f9 44 	sub	r12,sp,-1724
80010b4c:	f8 06 00 36 	add	r6,r12,r6<<0x3
80010b50:	c8 28       	rjmp	80010c54 <_vfprintf_r+0x14dc>
80010b52:	ee ca ff ff 	sub	r10,r7,-1
80010b56:	10 37       	cp.w	r7,r8
80010b58:	e0 84 00 81 	brge	80010c5a <_vfprintf_r+0x14e2>
80010b5c:	fa cb f9 44 	sub	r11,sp,-1724
80010b60:	f6 06 00 36 	add	r6,r11,r6<<0x3
80010b64:	c7 78       	rjmp	80010c52 <_vfprintf_r+0x14da>
80010b66:	ed b5 00 06 	bld	r5,0x6
80010b6a:	c4 b1       	brne	80010c00 <_vfprintf_r+0x1488>
80010b6c:	fa f8 06 b4 	ld.w	r8,sp[1716]
80010b70:	40 3c       	lddsp	r12,sp[0xc]
80010b72:	58 0c       	cp.w	r12,0
80010b74:	c1 d0       	breq	80010bae <_vfprintf_r+0x1436>
80010b76:	10 36       	cp.w	r6,r8
80010b78:	c0 64       	brge	80010b84 <_vfprintf_r+0x140c>
80010b7a:	fa cb f9 44 	sub	r11,sp,-1724
80010b7e:	f6 06 00 36 	add	r6,r11,r6<<0x3
80010b82:	c1 f8       	rjmp	80010bc0 <_vfprintf_r+0x1448>
80010b84:	fa c8 f9 50 	sub	r8,sp,-1712
80010b88:	1a d8       	st.w	--sp,r8
80010b8a:	fa c8 fa b8 	sub	r8,sp,-1352
80010b8e:	1a d8       	st.w	--sp,r8
80010b90:	fa c8 fb b4 	sub	r8,sp,-1100
80010b94:	1a d8       	st.w	--sp,r8
80010b96:	fa c8 f9 40 	sub	r8,sp,-1728
80010b9a:	fa c9 ff b4 	sub	r9,sp,-76
80010b9e:	04 9a       	mov	r10,r2
80010ba0:	0c 9b       	mov	r11,r6
80010ba2:	08 9c       	mov	r12,r4
80010ba4:	fe b0 f4 54 	rcall	8000f44c <get_arg>
80010ba8:	2f dd       	sub	sp,-12
80010baa:	98 18       	ld.sh	r8,r12[0x2]
80010bac:	c2 78       	rjmp	80010bfa <_vfprintf_r+0x1482>
80010bae:	ee ca ff ff 	sub	r10,r7,-1
80010bb2:	10 37       	cp.w	r7,r8
80010bb4:	c0 a4       	brge	80010bc8 <_vfprintf_r+0x1450>
80010bb6:	fa c9 f9 44 	sub	r9,sp,-1724
80010bba:	14 97       	mov	r7,r10
80010bbc:	f2 06 00 36 	add	r6,r9,r6<<0x3
80010bc0:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
80010bc4:	c1 b8       	rjmp	80010bfa <_vfprintf_r+0x1482>
80010bc6:	d7 03       	nop
80010bc8:	41 09       	lddsp	r9,sp[0x40]
80010bca:	59 f8       	cp.w	r8,31
80010bcc:	e0 89 00 13 	brgt	80010bf2 <_vfprintf_r+0x147a>
80010bd0:	f2 cb ff fc 	sub	r11,r9,-4
80010bd4:	51 0b       	stdsp	sp[0x40],r11
80010bd6:	72 09       	ld.w	r9,r9[0x0]
80010bd8:	fa c6 f9 44 	sub	r6,sp,-1724
80010bdc:	ec 08 00 3b 	add	r11,r6,r8<<0x3
80010be0:	2f f8       	sub	r8,-1
80010be2:	f7 49 fd 88 	st.w	r11[-632],r9
80010be6:	fb 48 06 b4 	st.w	sp[1716],r8
80010bea:	14 97       	mov	r7,r10
80010bec:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
80010bf0:	c0 58       	rjmp	80010bfa <_vfprintf_r+0x1482>
80010bf2:	92 18       	ld.sh	r8,r9[0x2]
80010bf4:	14 97       	mov	r7,r10
80010bf6:	2f c9       	sub	r9,-4
80010bf8:	51 09       	stdsp	sp[0x40],r9
80010bfa:	5c 78       	castu.h	r8
80010bfc:	50 18       	stdsp	sp[0x4],r8
80010bfe:	c4 68       	rjmp	80010c8a <_vfprintf_r+0x1512>
80010c00:	fa f8 06 b4 	ld.w	r8,sp[1716]
80010c04:	40 3c       	lddsp	r12,sp[0xc]
80010c06:	58 0c       	cp.w	r12,0
80010c08:	c1 d0       	breq	80010c42 <_vfprintf_r+0x14ca>
80010c0a:	10 36       	cp.w	r6,r8
80010c0c:	c0 64       	brge	80010c18 <_vfprintf_r+0x14a0>
80010c0e:	fa cb f9 44 	sub	r11,sp,-1724
80010c12:	f6 06 00 36 	add	r6,r11,r6<<0x3
80010c16:	c1 f8       	rjmp	80010c54 <_vfprintf_r+0x14dc>
80010c18:	fa c8 f9 50 	sub	r8,sp,-1712
80010c1c:	1a d8       	st.w	--sp,r8
80010c1e:	fa c8 fa b8 	sub	r8,sp,-1352
80010c22:	0c 9b       	mov	r11,r6
80010c24:	1a d8       	st.w	--sp,r8
80010c26:	fa c8 fb b4 	sub	r8,sp,-1100
80010c2a:	04 9a       	mov	r10,r2
80010c2c:	1a d8       	st.w	--sp,r8
80010c2e:	08 9c       	mov	r12,r4
80010c30:	fa c8 f9 40 	sub	r8,sp,-1728
80010c34:	fa c9 ff b4 	sub	r9,sp,-76
80010c38:	fe b0 f4 0a 	rcall	8000f44c <get_arg>
80010c3c:	2f dd       	sub	sp,-12
80010c3e:	78 0b       	ld.w	r11,r12[0x0]
80010c40:	c2 48       	rjmp	80010c88 <_vfprintf_r+0x1510>
80010c42:	ee ca ff ff 	sub	r10,r7,-1
80010c46:	10 37       	cp.w	r7,r8
80010c48:	c0 94       	brge	80010c5a <_vfprintf_r+0x14e2>
80010c4a:	fa c9 f9 44 	sub	r9,sp,-1724
80010c4e:	f2 06 00 36 	add	r6,r9,r6<<0x3
80010c52:	14 97       	mov	r7,r10
80010c54:	ec fb fd 88 	ld.w	r11,r6[-632]
80010c58:	c1 88       	rjmp	80010c88 <_vfprintf_r+0x1510>
80010c5a:	41 09       	lddsp	r9,sp[0x40]
80010c5c:	59 f8       	cp.w	r8,31
80010c5e:	e0 89 00 11 	brgt	80010c80 <_vfprintf_r+0x1508>
80010c62:	f2 cb ff fc 	sub	r11,r9,-4
80010c66:	51 0b       	stdsp	sp[0x40],r11
80010c68:	fa c6 f9 44 	sub	r6,sp,-1724
80010c6c:	72 0b       	ld.w	r11,r9[0x0]
80010c6e:	ec 08 00 39 	add	r9,r6,r8<<0x3
80010c72:	f3 4b fd 88 	st.w	r9[-632],r11
80010c76:	2f f8       	sub	r8,-1
80010c78:	14 97       	mov	r7,r10
80010c7a:	fb 48 06 b4 	st.w	sp[1716],r8
80010c7e:	c0 58       	rjmp	80010c88 <_vfprintf_r+0x1510>
80010c80:	72 0b       	ld.w	r11,r9[0x0]
80010c82:	14 97       	mov	r7,r10
80010c84:	2f c9       	sub	r9,-4
80010c86:	51 09       	stdsp	sp[0x40],r9
80010c88:	50 1b       	stdsp	sp[0x4],r11
80010c8a:	30 0e       	mov	lr,0
80010c8c:	50 0e       	stdsp	sp[0x0],lr
80010c8e:	40 08       	lddsp	r8,sp[0x0]
80010c90:	40 1c       	lddsp	r12,sp[0x4]
80010c92:	18 48       	or	r8,r12
80010c94:	5f 19       	srne	r9
80010c96:	0a 98       	mov	r8,r5
80010c98:	eb e9 00 09 	and	r9,r5,r9
80010c9c:	a1 b8       	sbr	r8,0x1
80010c9e:	58 09       	cp.w	r9,0
80010ca0:	c0 70       	breq	80010cae <_vfprintf_r+0x1536>
80010ca2:	10 95       	mov	r5,r8
80010ca4:	fb 60 06 b9 	st.b	sp[1721],r0
80010ca8:	33 08       	mov	r8,48
80010caa:	fb 68 06 b8 	st.b	sp[1720],r8
80010cae:	30 28       	mov	r8,2
80010cb0:	30 09       	mov	r9,0
80010cb2:	fb 69 06 bb 	st.b	sp[1723],r9
80010cb6:	0a 99       	mov	r9,r5
80010cb8:	a7 d9       	cbr	r9,0x7
80010cba:	40 2b       	lddsp	r11,sp[0x8]
80010cbc:	40 16       	lddsp	r6,sp[0x4]
80010cbe:	58 0b       	cp.w	r11,0
80010cc0:	5f 1a       	srne	r10
80010cc2:	f2 05 17 40 	movge	r5,r9
80010cc6:	fa c2 f9 78 	sub	r2,sp,-1672
80010cca:	40 09       	lddsp	r9,sp[0x0]
80010ccc:	0c 49       	or	r9,r6
80010cce:	5f 19       	srne	r9
80010cd0:	f5 e9 10 09 	or	r9,r10,r9
80010cd4:	c5 c0       	breq	80010d8c <_vfprintf_r+0x1614>
80010cd6:	30 19       	mov	r9,1
80010cd8:	f2 08 18 00 	cp.b	r8,r9
80010cdc:	c0 60       	breq	80010ce8 <_vfprintf_r+0x1570>
80010cde:	30 29       	mov	r9,2
80010ce0:	f2 08 18 00 	cp.b	r8,r9
80010ce4:	c0 41       	brne	80010cec <_vfprintf_r+0x1574>
80010ce6:	c3 c8       	rjmp	80010d5e <_vfprintf_r+0x15e6>
80010ce8:	04 96       	mov	r6,r2
80010cea:	c3 08       	rjmp	80010d4a <_vfprintf_r+0x15d2>
80010cec:	04 96       	mov	r6,r2
80010cee:	fa e8 00 00 	ld.d	r8,sp[0]
80010cf2:	f5 d8 c0 03 	bfextu	r10,r8,0x0,0x3
80010cf6:	2d 0a       	sub	r10,-48
80010cf8:	0c fa       	st.b	--r6,r10
80010cfa:	f0 0b 16 03 	lsr	r11,r8,0x3
80010cfe:	f2 0c 16 03 	lsr	r12,r9,0x3
80010d02:	f7 e9 11 db 	or	r11,r11,r9<<0x1d
80010d06:	18 99       	mov	r9,r12
80010d08:	16 98       	mov	r8,r11
80010d0a:	58 08       	cp.w	r8,0
80010d0c:	5c 29       	cpc	r9
80010d0e:	cf 21       	brne	80010cf2 <_vfprintf_r+0x157a>
80010d10:	fa e9 00 00 	st.d	sp[0],r8
80010d14:	ed b5 00 00 	bld	r5,0x0
80010d18:	c4 51       	brne	80010da2 <_vfprintf_r+0x162a>
80010d1a:	33 09       	mov	r9,48
80010d1c:	f2 0a 18 00 	cp.b	r10,r9
80010d20:	c4 10       	breq	80010da2 <_vfprintf_r+0x162a>
80010d22:	0c f9       	st.b	--r6,r9
80010d24:	c3 f8       	rjmp	80010da2 <_vfprintf_r+0x162a>
80010d26:	fa ea 00 00 	ld.d	r10,sp[0]
80010d2a:	30 a8       	mov	r8,10
80010d2c:	30 09       	mov	r9,0
80010d2e:	e0 a0 1c f7 	rcall	8001471c <__avr32_umod64>
80010d32:	30 a8       	mov	r8,10
80010d34:	2d 0a       	sub	r10,-48
80010d36:	30 09       	mov	r9,0
80010d38:	ac 8a       	st.b	r6[0x0],r10
80010d3a:	fa ea 00 00 	ld.d	r10,sp[0]
80010d3e:	fe b0 f1 27 	rcall	8000ef8c <__avr32_udiv64>
80010d42:	16 99       	mov	r9,r11
80010d44:	14 98       	mov	r8,r10
80010d46:	fa e9 00 00 	st.d	sp[0],r8
80010d4a:	20 16       	sub	r6,1
80010d4c:	fa ea 00 00 	ld.d	r10,sp[0]
80010d50:	58 9a       	cp.w	r10,9
80010d52:	5c 2b       	cpc	r11
80010d54:	fe 9b ff e9 	brhi	80010d26 <_vfprintf_r+0x15ae>
80010d58:	1b f8       	ld.ub	r8,sp[0x7]
80010d5a:	2d 08       	sub	r8,-48
80010d5c:	c2 08       	rjmp	80010d9c <_vfprintf_r+0x1624>
80010d5e:	04 96       	mov	r6,r2
80010d60:	fa e8 00 00 	ld.d	r8,sp[0]
80010d64:	f5 d8 c0 04 	bfextu	r10,r8,0x0,0x4
80010d68:	40 de       	lddsp	lr,sp[0x34]
80010d6a:	fc 0a 07 0a 	ld.ub	r10,lr[r10]
80010d6e:	0c fa       	st.b	--r6,r10
80010d70:	f2 0b 16 04 	lsr	r11,r9,0x4
80010d74:	f0 0a 16 04 	lsr	r10,r8,0x4
80010d78:	f5 e9 11 ca 	or	r10,r10,r9<<0x1c
80010d7c:	16 99       	mov	r9,r11
80010d7e:	14 98       	mov	r8,r10
80010d80:	58 08       	cp.w	r8,0
80010d82:	5c 29       	cpc	r9
80010d84:	cf 01       	brne	80010d64 <_vfprintf_r+0x15ec>
80010d86:	fa e9 00 00 	st.d	sp[0],r8
80010d8a:	c0 c8       	rjmp	80010da2 <_vfprintf_r+0x162a>
80010d8c:	58 08       	cp.w	r8,0
80010d8e:	c0 91       	brne	80010da0 <_vfprintf_r+0x1628>
80010d90:	ed b5 00 00 	bld	r5,0x0
80010d94:	c0 61       	brne	80010da0 <_vfprintf_r+0x1628>
80010d96:	fa c6 f9 79 	sub	r6,sp,-1671
80010d9a:	33 08       	mov	r8,48
80010d9c:	ac 88       	st.b	r6[0x0],r8
80010d9e:	c0 28       	rjmp	80010da2 <_vfprintf_r+0x162a>
80010da0:	04 96       	mov	r6,r2
80010da2:	0c 12       	sub	r2,r6
80010da4:	c1 c8       	rjmp	80010ddc <_vfprintf_r+0x1664>
80010da6:	50 a7       	stdsp	sp[0x28],r7
80010da8:	50 80       	stdsp	sp[0x20],r0
80010daa:	40 93       	lddsp	r3,sp[0x24]
80010dac:	0c 97       	mov	r7,r6
80010dae:	10 90       	mov	r0,r8
80010db0:	04 94       	mov	r4,r2
80010db2:	40 41       	lddsp	r1,sp[0x10]
80010db4:	58 08       	cp.w	r8,0
80010db6:	e0 80 04 4f 	breq	80011654 <_vfprintf_r+0x1edc>
80010dba:	fb 68 06 60 	st.b	sp[1632],r8
80010dbe:	30 0c       	mov	r12,0
80010dc0:	30 08       	mov	r8,0
80010dc2:	30 12       	mov	r2,1
80010dc4:	fb 68 06 bb 	st.b	sp[1723],r8
80010dc8:	50 2c       	stdsp	sp[0x8],r12
80010dca:	fa c6 f9 a0 	sub	r6,sp,-1632
80010dce:	c0 78       	rjmp	80010ddc <_vfprintf_r+0x1664>
80010dd0:	30 0b       	mov	r11,0
80010dd2:	50 2b       	stdsp	sp[0x8],r11
80010dd4:	c0 48       	rjmp	80010ddc <_vfprintf_r+0x1664>
80010dd6:	40 22       	lddsp	r2,sp[0x8]
80010dd8:	30 0a       	mov	r10,0
80010dda:	50 2a       	stdsp	sp[0x8],r10
80010ddc:	40 29       	lddsp	r9,sp[0x8]
80010dde:	e4 09 0c 49 	max	r9,r2,r9
80010de2:	fb 38 06 bb 	ld.ub	r8,sp[1723]
80010de6:	50 39       	stdsp	sp[0xc],r9
80010de8:	0a 9e       	mov	lr,r5
80010dea:	30 09       	mov	r9,0
80010dec:	e2 1e 00 02 	andl	lr,0x2,COH
80010df0:	f2 08 18 00 	cp.b	r8,r9
80010df4:	fb f8 10 03 	ld.wne	r8,sp[0xc]
80010df8:	f7 b8 01 ff 	subne	r8,-1
80010dfc:	fb f8 1a 03 	st.wne	sp[0xc],r8
80010e00:	0a 9b       	mov	r11,r5
80010e02:	58 0e       	cp.w	lr,0
80010e04:	fb fc 10 03 	ld.wne	r12,sp[0xc]
80010e08:	f7 bc 01 fe 	subne	r12,-2
80010e0c:	fb fc 1a 03 	st.wne	sp[0xc],r12
80010e10:	e2 1b 00 84 	andl	r11,0x84,COH
80010e14:	50 fe       	stdsp	sp[0x3c],lr
80010e16:	50 9b       	stdsp	sp[0x24],r11
80010e18:	c4 71       	brne	80010ea6 <_vfprintf_r+0x172e>
80010e1a:	40 8a       	lddsp	r10,sp[0x20]
80010e1c:	40 39       	lddsp	r9,sp[0xc]
80010e1e:	12 1a       	sub	r10,r9
80010e20:	50 4a       	stdsp	sp[0x10],r10
80010e22:	58 0a       	cp.w	r10,0
80010e24:	e0 89 00 20 	brgt	80010e64 <_vfprintf_r+0x16ec>
80010e28:	c3 f8       	rjmp	80010ea6 <_vfprintf_r+0x172e>
80010e2a:	2f 09       	sub	r9,-16
80010e2c:	2f f8       	sub	r8,-1
80010e2e:	fe ce bc 6a 	sub	lr,pc,-17302
80010e32:	31 0c       	mov	r12,16
80010e34:	fb 49 06 90 	st.w	sp[1680],r9
80010e38:	87 0e       	st.w	r3[0x0],lr
80010e3a:	87 1c       	st.w	r3[0x4],r12
80010e3c:	fb 48 06 8c 	st.w	sp[1676],r8
80010e40:	58 78       	cp.w	r8,7
80010e42:	e0 89 00 04 	brgt	80010e4a <_vfprintf_r+0x16d2>
80010e46:	2f 83       	sub	r3,-8
80010e48:	c0 b8       	rjmp	80010e5e <_vfprintf_r+0x16e6>
80010e4a:	fa ca f9 78 	sub	r10,sp,-1672
80010e4e:	02 9b       	mov	r11,r1
80010e50:	08 9c       	mov	r12,r4
80010e52:	fe b0 f4 85 	rcall	8000f75c <__sprint_r>
80010e56:	e0 81 04 10 	brne	80011676 <_vfprintf_r+0x1efe>
80010e5a:	fa c3 f9 e0 	sub	r3,sp,-1568
80010e5e:	40 4b       	lddsp	r11,sp[0x10]
80010e60:	21 0b       	sub	r11,16
80010e62:	50 4b       	stdsp	sp[0x10],r11
80010e64:	fa f9 06 90 	ld.w	r9,sp[1680]
80010e68:	fa f8 06 8c 	ld.w	r8,sp[1676]
80010e6c:	fe ca bc a8 	sub	r10,pc,-17240
80010e70:	40 4e       	lddsp	lr,sp[0x10]
80010e72:	59 0e       	cp.w	lr,16
80010e74:	fe 99 ff db 	brgt	80010e2a <_vfprintf_r+0x16b2>
80010e78:	1c 09       	add	r9,lr
80010e7a:	2f f8       	sub	r8,-1
80010e7c:	87 0a       	st.w	r3[0x0],r10
80010e7e:	fb 49 06 90 	st.w	sp[1680],r9
80010e82:	87 1e       	st.w	r3[0x4],lr
80010e84:	fb 48 06 8c 	st.w	sp[1676],r8
80010e88:	58 78       	cp.w	r8,7
80010e8a:	e0 89 00 04 	brgt	80010e92 <_vfprintf_r+0x171a>
80010e8e:	2f 83       	sub	r3,-8
80010e90:	c0 b8       	rjmp	80010ea6 <_vfprintf_r+0x172e>
80010e92:	fa ca f9 78 	sub	r10,sp,-1672
80010e96:	02 9b       	mov	r11,r1
80010e98:	08 9c       	mov	r12,r4
80010e9a:	fe b0 f4 61 	rcall	8000f75c <__sprint_r>
80010e9e:	e0 81 03 ec 	brne	80011676 <_vfprintf_r+0x1efe>
80010ea2:	fa c3 f9 e0 	sub	r3,sp,-1568
80010ea6:	30 09       	mov	r9,0
80010ea8:	fb 38 06 bb 	ld.ub	r8,sp[1723]
80010eac:	f2 08 18 00 	cp.b	r8,r9
80010eb0:	c1 f0       	breq	80010eee <_vfprintf_r+0x1776>
80010eb2:	fa f8 06 90 	ld.w	r8,sp[1680]
80010eb6:	fa c9 f9 45 	sub	r9,sp,-1723
80010eba:	2f f8       	sub	r8,-1
80010ebc:	87 09       	st.w	r3[0x0],r9
80010ebe:	fb 48 06 90 	st.w	sp[1680],r8
80010ec2:	30 19       	mov	r9,1
80010ec4:	fa f8 06 8c 	ld.w	r8,sp[1676]
80010ec8:	87 19       	st.w	r3[0x4],r9
80010eca:	2f f8       	sub	r8,-1
80010ecc:	fb 48 06 8c 	st.w	sp[1676],r8
80010ed0:	58 78       	cp.w	r8,7
80010ed2:	e0 89 00 04 	brgt	80010eda <_vfprintf_r+0x1762>
80010ed6:	2f 83       	sub	r3,-8
80010ed8:	c0 b8       	rjmp	80010eee <_vfprintf_r+0x1776>
80010eda:	fa ca f9 78 	sub	r10,sp,-1672
80010ede:	02 9b       	mov	r11,r1
80010ee0:	08 9c       	mov	r12,r4
80010ee2:	fe b0 f4 3d 	rcall	8000f75c <__sprint_r>
80010ee6:	e0 81 03 c8 	brne	80011676 <_vfprintf_r+0x1efe>
80010eea:	fa c3 f9 e0 	sub	r3,sp,-1568
80010eee:	40 fc       	lddsp	r12,sp[0x3c]
80010ef0:	58 0c       	cp.w	r12,0
80010ef2:	c1 f0       	breq	80010f30 <_vfprintf_r+0x17b8>
80010ef4:	fa f8 06 90 	ld.w	r8,sp[1680]
80010ef8:	fa c9 f9 48 	sub	r9,sp,-1720
80010efc:	2f e8       	sub	r8,-2
80010efe:	87 09       	st.w	r3[0x0],r9
80010f00:	fb 48 06 90 	st.w	sp[1680],r8
80010f04:	30 29       	mov	r9,2
80010f06:	fa f8 06 8c 	ld.w	r8,sp[1676]
80010f0a:	87 19       	st.w	r3[0x4],r9
80010f0c:	2f f8       	sub	r8,-1
80010f0e:	fb 48 06 8c 	st.w	sp[1676],r8
80010f12:	58 78       	cp.w	r8,7
80010f14:	e0 89 00 04 	brgt	80010f1c <_vfprintf_r+0x17a4>
80010f18:	2f 83       	sub	r3,-8
80010f1a:	c0 b8       	rjmp	80010f30 <_vfprintf_r+0x17b8>
80010f1c:	fa ca f9 78 	sub	r10,sp,-1672
80010f20:	02 9b       	mov	r11,r1
80010f22:	08 9c       	mov	r12,r4
80010f24:	fe b0 f4 1c 	rcall	8000f75c <__sprint_r>
80010f28:	e0 81 03 a7 	brne	80011676 <_vfprintf_r+0x1efe>
80010f2c:	fa c3 f9 e0 	sub	r3,sp,-1568
80010f30:	40 9b       	lddsp	r11,sp[0x24]
80010f32:	e0 4b 00 80 	cp.w	r11,128
80010f36:	c4 71       	brne	80010fc4 <_vfprintf_r+0x184c>
80010f38:	40 8a       	lddsp	r10,sp[0x20]
80010f3a:	40 39       	lddsp	r9,sp[0xc]
80010f3c:	12 1a       	sub	r10,r9
80010f3e:	50 4a       	stdsp	sp[0x10],r10
80010f40:	58 0a       	cp.w	r10,0
80010f42:	e0 89 00 20 	brgt	80010f82 <_vfprintf_r+0x180a>
80010f46:	c3 f8       	rjmp	80010fc4 <_vfprintf_r+0x184c>
80010f48:	2f 09       	sub	r9,-16
80010f4a:	2f f8       	sub	r8,-1
80010f4c:	fe ce bd 78 	sub	lr,pc,-17032
80010f50:	31 0c       	mov	r12,16
80010f52:	fb 49 06 90 	st.w	sp[1680],r9
80010f56:	87 0e       	st.w	r3[0x0],lr
80010f58:	87 1c       	st.w	r3[0x4],r12
80010f5a:	fb 48 06 8c 	st.w	sp[1676],r8
80010f5e:	58 78       	cp.w	r8,7
80010f60:	e0 89 00 04 	brgt	80010f68 <_vfprintf_r+0x17f0>
80010f64:	2f 83       	sub	r3,-8
80010f66:	c0 b8       	rjmp	80010f7c <_vfprintf_r+0x1804>
80010f68:	fa ca f9 78 	sub	r10,sp,-1672
80010f6c:	02 9b       	mov	r11,r1
80010f6e:	08 9c       	mov	r12,r4
80010f70:	fe b0 f3 f6 	rcall	8000f75c <__sprint_r>
80010f74:	e0 81 03 81 	brne	80011676 <_vfprintf_r+0x1efe>
80010f78:	fa c3 f9 e0 	sub	r3,sp,-1568
80010f7c:	40 4b       	lddsp	r11,sp[0x10]
80010f7e:	21 0b       	sub	r11,16
80010f80:	50 4b       	stdsp	sp[0x10],r11
80010f82:	fa f9 06 90 	ld.w	r9,sp[1680]
80010f86:	fa f8 06 8c 	ld.w	r8,sp[1676]
80010f8a:	fe ca bd b6 	sub	r10,pc,-16970
80010f8e:	40 4e       	lddsp	lr,sp[0x10]
80010f90:	59 0e       	cp.w	lr,16
80010f92:	fe 99 ff db 	brgt	80010f48 <_vfprintf_r+0x17d0>
80010f96:	1c 09       	add	r9,lr
80010f98:	2f f8       	sub	r8,-1
80010f9a:	87 0a       	st.w	r3[0x0],r10
80010f9c:	fb 49 06 90 	st.w	sp[1680],r9
80010fa0:	87 1e       	st.w	r3[0x4],lr
80010fa2:	fb 48 06 8c 	st.w	sp[1676],r8
80010fa6:	58 78       	cp.w	r8,7
80010fa8:	e0 89 00 04 	brgt	80010fb0 <_vfprintf_r+0x1838>
80010fac:	2f 83       	sub	r3,-8
80010fae:	c0 b8       	rjmp	80010fc4 <_vfprintf_r+0x184c>
80010fb0:	fa ca f9 78 	sub	r10,sp,-1672
80010fb4:	02 9b       	mov	r11,r1
80010fb6:	08 9c       	mov	r12,r4
80010fb8:	fe b0 f3 d2 	rcall	8000f75c <__sprint_r>
80010fbc:	e0 81 03 5d 	brne	80011676 <_vfprintf_r+0x1efe>
80010fc0:	fa c3 f9 e0 	sub	r3,sp,-1568
80010fc4:	40 2c       	lddsp	r12,sp[0x8]
80010fc6:	04 1c       	sub	r12,r2
80010fc8:	50 2c       	stdsp	sp[0x8],r12
80010fca:	58 0c       	cp.w	r12,0
80010fcc:	e0 89 00 20 	brgt	8001100c <_vfprintf_r+0x1894>
80010fd0:	c3 f8       	rjmp	8001104e <_vfprintf_r+0x18d6>
80010fd2:	2f 09       	sub	r9,-16
80010fd4:	2f f8       	sub	r8,-1
80010fd6:	fe cb be 02 	sub	r11,pc,-16894
80010fda:	31 0a       	mov	r10,16
80010fdc:	fb 49 06 90 	st.w	sp[1680],r9
80010fe0:	87 0b       	st.w	r3[0x0],r11
80010fe2:	87 1a       	st.w	r3[0x4],r10
80010fe4:	fb 48 06 8c 	st.w	sp[1676],r8
80010fe8:	58 78       	cp.w	r8,7
80010fea:	e0 89 00 04 	brgt	80010ff2 <_vfprintf_r+0x187a>
80010fee:	2f 83       	sub	r3,-8
80010ff0:	c0 b8       	rjmp	80011006 <_vfprintf_r+0x188e>
80010ff2:	fa ca f9 78 	sub	r10,sp,-1672
80010ff6:	02 9b       	mov	r11,r1
80010ff8:	08 9c       	mov	r12,r4
80010ffa:	fe b0 f3 b1 	rcall	8000f75c <__sprint_r>
80010ffe:	e0 81 03 3c 	brne	80011676 <_vfprintf_r+0x1efe>
80011002:	fa c3 f9 e0 	sub	r3,sp,-1568
80011006:	40 29       	lddsp	r9,sp[0x8]
80011008:	21 09       	sub	r9,16
8001100a:	50 29       	stdsp	sp[0x8],r9
8001100c:	fa f9 06 90 	ld.w	r9,sp[1680]
80011010:	fa f8 06 8c 	ld.w	r8,sp[1676]
80011014:	fe ca be 40 	sub	r10,pc,-16832
80011018:	40 2e       	lddsp	lr,sp[0x8]
8001101a:	59 0e       	cp.w	lr,16
8001101c:	fe 99 ff db 	brgt	80010fd2 <_vfprintf_r+0x185a>
80011020:	1c 09       	add	r9,lr
80011022:	2f f8       	sub	r8,-1
80011024:	87 0a       	st.w	r3[0x0],r10
80011026:	fb 49 06 90 	st.w	sp[1680],r9
8001102a:	87 1e       	st.w	r3[0x4],lr
8001102c:	fb 48 06 8c 	st.w	sp[1676],r8
80011030:	58 78       	cp.w	r8,7
80011032:	e0 89 00 04 	brgt	8001103a <_vfprintf_r+0x18c2>
80011036:	2f 83       	sub	r3,-8
80011038:	c0 b8       	rjmp	8001104e <_vfprintf_r+0x18d6>
8001103a:	fa ca f9 78 	sub	r10,sp,-1672
8001103e:	02 9b       	mov	r11,r1
80011040:	08 9c       	mov	r12,r4
80011042:	fe b0 f3 8d 	rcall	8000f75c <__sprint_r>
80011046:	e0 81 03 18 	brne	80011676 <_vfprintf_r+0x1efe>
8001104a:	fa c3 f9 e0 	sub	r3,sp,-1568
8001104e:	ed b5 00 08 	bld	r5,0x8
80011052:	c0 b0       	breq	80011068 <_vfprintf_r+0x18f0>
80011054:	fa f8 06 90 	ld.w	r8,sp[1680]
80011058:	87 12       	st.w	r3[0x4],r2
8001105a:	87 06       	st.w	r3[0x0],r6
8001105c:	f0 02 00 02 	add	r2,r8,r2
80011060:	fb 42 06 90 	st.w	sp[1680],r2
80011064:	e0 8f 01 d4 	bral	8001140c <_vfprintf_r+0x1c94>
80011068:	e0 40 00 65 	cp.w	r0,101
8001106c:	e0 8a 01 d6 	brle	80011418 <_vfprintf_r+0x1ca0>
80011070:	30 08       	mov	r8,0
80011072:	30 09       	mov	r9,0
80011074:	40 5b       	lddsp	r11,sp[0x14]
80011076:	40 7a       	lddsp	r10,sp[0x1c]
80011078:	e0 a0 19 4b 	rcall	8001430e <__avr32_f64_cmp_eq>
8001107c:	c7 90       	breq	8001116e <_vfprintf_r+0x19f6>
8001107e:	fa f8 06 90 	ld.w	r8,sp[1680]
80011082:	fe c9 be c2 	sub	r9,pc,-16702
80011086:	2f f8       	sub	r8,-1
80011088:	87 09       	st.w	r3[0x0],r9
8001108a:	fb 48 06 90 	st.w	sp[1680],r8
8001108e:	30 19       	mov	r9,1
80011090:	fa f8 06 8c 	ld.w	r8,sp[1676]
80011094:	87 19       	st.w	r3[0x4],r9
80011096:	2f f8       	sub	r8,-1
80011098:	fb 48 06 8c 	st.w	sp[1676],r8
8001109c:	58 78       	cp.w	r8,7
8001109e:	e0 89 00 05 	brgt	800110a8 <_vfprintf_r+0x1930>
800110a2:	2f 83       	sub	r3,-8
800110a4:	c0 c8       	rjmp	800110bc <_vfprintf_r+0x1944>
800110a6:	d7 03       	nop
800110a8:	fa ca f9 78 	sub	r10,sp,-1672
800110ac:	02 9b       	mov	r11,r1
800110ae:	08 9c       	mov	r12,r4
800110b0:	fe b0 f3 56 	rcall	8000f75c <__sprint_r>
800110b4:	e0 81 02 e1 	brne	80011676 <_vfprintf_r+0x1efe>
800110b8:	fa c3 f9 e0 	sub	r3,sp,-1568
800110bc:	fa f8 06 ac 	ld.w	r8,sp[1708]
800110c0:	40 6c       	lddsp	r12,sp[0x18]
800110c2:	18 38       	cp.w	r8,r12
800110c4:	c0 55       	brlt	800110ce <_vfprintf_r+0x1956>
800110c6:	ed b5 00 00 	bld	r5,0x0
800110ca:	e0 81 02 6b 	brne	800115a0 <_vfprintf_r+0x1e28>
800110ce:	fa f8 06 90 	ld.w	r8,sp[1680]
800110d2:	2f f8       	sub	r8,-1
800110d4:	40 cb       	lddsp	r11,sp[0x30]
800110d6:	fb 48 06 90 	st.w	sp[1680],r8
800110da:	30 19       	mov	r9,1
800110dc:	fa f8 06 8c 	ld.w	r8,sp[1676]
800110e0:	87 0b       	st.w	r3[0x0],r11
800110e2:	2f f8       	sub	r8,-1
800110e4:	87 19       	st.w	r3[0x4],r9
800110e6:	fb 48 06 8c 	st.w	sp[1676],r8
800110ea:	58 78       	cp.w	r8,7
800110ec:	e0 89 00 04 	brgt	800110f4 <_vfprintf_r+0x197c>
800110f0:	2f 83       	sub	r3,-8
800110f2:	c0 b8       	rjmp	80011108 <_vfprintf_r+0x1990>
800110f4:	fa ca f9 78 	sub	r10,sp,-1672
800110f8:	02 9b       	mov	r11,r1
800110fa:	08 9c       	mov	r12,r4
800110fc:	fe b0 f3 30 	rcall	8000f75c <__sprint_r>
80011100:	e0 81 02 bb 	brne	80011676 <_vfprintf_r+0x1efe>
80011104:	fa c3 f9 e0 	sub	r3,sp,-1568
80011108:	40 66       	lddsp	r6,sp[0x18]
8001110a:	20 16       	sub	r6,1
8001110c:	58 06       	cp.w	r6,0
8001110e:	e0 89 00 1d 	brgt	80011148 <_vfprintf_r+0x19d0>
80011112:	e0 8f 02 47 	bral	800115a0 <_vfprintf_r+0x1e28>
80011116:	2f 09       	sub	r9,-16
80011118:	2f f8       	sub	r8,-1
8001111a:	fb 49 06 90 	st.w	sp[1680],r9
8001111e:	87 02       	st.w	r3[0x0],r2
80011120:	87 10       	st.w	r3[0x4],r0
80011122:	fb 48 06 8c 	st.w	sp[1676],r8
80011126:	58 78       	cp.w	r8,7
80011128:	e0 89 00 04 	brgt	80011130 <_vfprintf_r+0x19b8>
8001112c:	2f 83       	sub	r3,-8
8001112e:	c0 b8       	rjmp	80011144 <_vfprintf_r+0x19cc>
80011130:	fa ca f9 78 	sub	r10,sp,-1672
80011134:	02 9b       	mov	r11,r1
80011136:	08 9c       	mov	r12,r4
80011138:	fe b0 f3 12 	rcall	8000f75c <__sprint_r>
8001113c:	e0 81 02 9d 	brne	80011676 <_vfprintf_r+0x1efe>
80011140:	fa c3 f9 e0 	sub	r3,sp,-1568
80011144:	21 06       	sub	r6,16
80011146:	c0 48       	rjmp	8001114e <_vfprintf_r+0x19d6>
80011148:	fe c2 bf 74 	sub	r2,pc,-16524
8001114c:	31 00       	mov	r0,16
8001114e:	fa f9 06 90 	ld.w	r9,sp[1680]
80011152:	fa f8 06 8c 	ld.w	r8,sp[1676]
80011156:	fe ca bf 82 	sub	r10,pc,-16510
8001115a:	59 06       	cp.w	r6,16
8001115c:	fe 99 ff dd 	brgt	80011116 <_vfprintf_r+0x199e>
80011160:	0c 09       	add	r9,r6
80011162:	87 0a       	st.w	r3[0x0],r10
80011164:	fb 49 06 90 	st.w	sp[1680],r9
80011168:	2f f8       	sub	r8,-1
8001116a:	87 16       	st.w	r3[0x4],r6
8001116c:	c5 39       	rjmp	80011412 <_vfprintf_r+0x1c9a>
8001116e:	fa fa 06 ac 	ld.w	r10,sp[1708]
80011172:	58 0a       	cp.w	r10,0
80011174:	e0 89 00 92 	brgt	80011298 <_vfprintf_r+0x1b20>
80011178:	fa f8 06 90 	ld.w	r8,sp[1680]
8001117c:	fe c9 bf bc 	sub	r9,pc,-16452
80011180:	2f f8       	sub	r8,-1
80011182:	87 09       	st.w	r3[0x0],r9
80011184:	fb 48 06 90 	st.w	sp[1680],r8
80011188:	30 19       	mov	r9,1
8001118a:	fa f8 06 8c 	ld.w	r8,sp[1676]
8001118e:	87 19       	st.w	r3[0x4],r9
80011190:	2f f8       	sub	r8,-1
80011192:	fb 48 06 8c 	st.w	sp[1676],r8
80011196:	58 78       	cp.w	r8,7
80011198:	e0 89 00 04 	brgt	800111a0 <_vfprintf_r+0x1a28>
8001119c:	2f 83       	sub	r3,-8
8001119e:	c0 b8       	rjmp	800111b4 <_vfprintf_r+0x1a3c>
800111a0:	fa ca f9 78 	sub	r10,sp,-1672
800111a4:	02 9b       	mov	r11,r1
800111a6:	08 9c       	mov	r12,r4
800111a8:	fe b0 f2 da 	rcall	8000f75c <__sprint_r>
800111ac:	e0 81 02 65 	brne	80011676 <_vfprintf_r+0x1efe>
800111b0:	fa c3 f9 e0 	sub	r3,sp,-1568
800111b4:	fa f8 06 ac 	ld.w	r8,sp[1708]
800111b8:	58 08       	cp.w	r8,0
800111ba:	c0 81       	brne	800111ca <_vfprintf_r+0x1a52>
800111bc:	40 6a       	lddsp	r10,sp[0x18]
800111be:	58 0a       	cp.w	r10,0
800111c0:	c0 51       	brne	800111ca <_vfprintf_r+0x1a52>
800111c2:	ed b5 00 00 	bld	r5,0x0
800111c6:	e0 81 01 ed 	brne	800115a0 <_vfprintf_r+0x1e28>
800111ca:	40 c9       	lddsp	r9,sp[0x30]
800111cc:	fa f8 06 90 	ld.w	r8,sp[1680]
800111d0:	2f f8       	sub	r8,-1
800111d2:	87 09       	st.w	r3[0x0],r9
800111d4:	fb 48 06 90 	st.w	sp[1680],r8
800111d8:	30 19       	mov	r9,1
800111da:	fa f8 06 8c 	ld.w	r8,sp[1676]
800111de:	87 19       	st.w	r3[0x4],r9
800111e0:	2f f8       	sub	r8,-1
800111e2:	fb 48 06 8c 	st.w	sp[1676],r8
800111e6:	58 78       	cp.w	r8,7
800111e8:	e0 89 00 04 	brgt	800111f0 <_vfprintf_r+0x1a78>
800111ec:	2f 83       	sub	r3,-8
800111ee:	c0 b8       	rjmp	80011204 <_vfprintf_r+0x1a8c>
800111f0:	fa ca f9 78 	sub	r10,sp,-1672
800111f4:	02 9b       	mov	r11,r1
800111f6:	08 9c       	mov	r12,r4
800111f8:	fe b0 f2 b2 	rcall	8000f75c <__sprint_r>
800111fc:	e0 81 02 3d 	brne	80011676 <_vfprintf_r+0x1efe>
80011200:	fa c3 f9 e0 	sub	r3,sp,-1568
80011204:	fa f2 06 ac 	ld.w	r2,sp[1708]
80011208:	5c 32       	neg	r2
8001120a:	58 02       	cp.w	r2,0
8001120c:	e0 89 00 1d 	brgt	80011246 <_vfprintf_r+0x1ace>
80011210:	c3 d8       	rjmp	8001128a <_vfprintf_r+0x1b12>
80011212:	2f 09       	sub	r9,-16
80011214:	2f f8       	sub	r8,-1
80011216:	31 0e       	mov	lr,16
80011218:	fb 49 06 90 	st.w	sp[1680],r9
8001121c:	87 00       	st.w	r3[0x0],r0
8001121e:	87 1e       	st.w	r3[0x4],lr
80011220:	fb 48 06 8c 	st.w	sp[1676],r8
80011224:	58 78       	cp.w	r8,7
80011226:	e0 89 00 04 	brgt	8001122e <_vfprintf_r+0x1ab6>
8001122a:	2f 83       	sub	r3,-8
8001122c:	c0 b8       	rjmp	80011242 <_vfprintf_r+0x1aca>
8001122e:	fa ca f9 78 	sub	r10,sp,-1672
80011232:	02 9b       	mov	r11,r1
80011234:	08 9c       	mov	r12,r4
80011236:	fe b0 f2 93 	rcall	8000f75c <__sprint_r>
8001123a:	e0 81 02 1e 	brne	80011676 <_vfprintf_r+0x1efe>
8001123e:	fa c3 f9 e0 	sub	r3,sp,-1568
80011242:	21 02       	sub	r2,16
80011244:	c0 38       	rjmp	8001124a <_vfprintf_r+0x1ad2>
80011246:	fe c0 c0 72 	sub	r0,pc,-16270
8001124a:	fa f9 06 90 	ld.w	r9,sp[1680]
8001124e:	fa f8 06 8c 	ld.w	r8,sp[1676]
80011252:	fe ca c0 7e 	sub	r10,pc,-16258
80011256:	59 02       	cp.w	r2,16
80011258:	fe 99 ff dd 	brgt	80011212 <_vfprintf_r+0x1a9a>
8001125c:	04 09       	add	r9,r2
8001125e:	2f f8       	sub	r8,-1
80011260:	87 0a       	st.w	r3[0x0],r10
80011262:	fb 49 06 90 	st.w	sp[1680],r9
80011266:	87 12       	st.w	r3[0x4],r2
80011268:	fb 48 06 8c 	st.w	sp[1676],r8
8001126c:	58 78       	cp.w	r8,7
8001126e:	e0 89 00 04 	brgt	80011276 <_vfprintf_r+0x1afe>
80011272:	2f 83       	sub	r3,-8
80011274:	c0 b8       	rjmp	8001128a <_vfprintf_r+0x1b12>
80011276:	fa ca f9 78 	sub	r10,sp,-1672
8001127a:	02 9b       	mov	r11,r1
8001127c:	08 9c       	mov	r12,r4
8001127e:	fe b0 f2 6f 	rcall	8000f75c <__sprint_r>
80011282:	e0 81 01 fa 	brne	80011676 <_vfprintf_r+0x1efe>
80011286:	fa c3 f9 e0 	sub	r3,sp,-1568
8001128a:	40 6c       	lddsp	r12,sp[0x18]
8001128c:	fa f8 06 90 	ld.w	r8,sp[1680]
80011290:	87 06       	st.w	r3[0x0],r6
80011292:	87 1c       	st.w	r3[0x4],r12
80011294:	18 08       	add	r8,r12
80011296:	cb 98       	rjmp	80011408 <_vfprintf_r+0x1c90>
80011298:	fa f9 06 90 	ld.w	r9,sp[1680]
8001129c:	fa f8 06 8c 	ld.w	r8,sp[1676]
800112a0:	40 6b       	lddsp	r11,sp[0x18]
800112a2:	16 3a       	cp.w	r10,r11
800112a4:	c6 f5       	brlt	80011382 <_vfprintf_r+0x1c0a>
800112a6:	16 09       	add	r9,r11
800112a8:	2f f8       	sub	r8,-1
800112aa:	87 06       	st.w	r3[0x0],r6
800112ac:	fb 49 06 90 	st.w	sp[1680],r9
800112b0:	87 1b       	st.w	r3[0x4],r11
800112b2:	fb 48 06 8c 	st.w	sp[1676],r8
800112b6:	58 78       	cp.w	r8,7
800112b8:	e0 89 00 04 	brgt	800112c0 <_vfprintf_r+0x1b48>
800112bc:	2f 83       	sub	r3,-8
800112be:	c0 b8       	rjmp	800112d4 <_vfprintf_r+0x1b5c>
800112c0:	fa ca f9 78 	sub	r10,sp,-1672
800112c4:	02 9b       	mov	r11,r1
800112c6:	08 9c       	mov	r12,r4
800112c8:	fe b0 f2 4a 	rcall	8000f75c <__sprint_r>
800112cc:	e0 81 01 d5 	brne	80011676 <_vfprintf_r+0x1efe>
800112d0:	fa c3 f9 e0 	sub	r3,sp,-1568
800112d4:	fa f6 06 ac 	ld.w	r6,sp[1708]
800112d8:	40 6a       	lddsp	r10,sp[0x18]
800112da:	14 16       	sub	r6,r10
800112dc:	58 06       	cp.w	r6,0
800112de:	e0 89 00 1c 	brgt	80011316 <_vfprintf_r+0x1b9e>
800112e2:	c3 d8       	rjmp	8001135c <_vfprintf_r+0x1be4>
800112e4:	2f 09       	sub	r9,-16
800112e6:	2f f8       	sub	r8,-1
800112e8:	fb 49 06 90 	st.w	sp[1680],r9
800112ec:	87 02       	st.w	r3[0x0],r2
800112ee:	87 10       	st.w	r3[0x4],r0
800112f0:	fb 48 06 8c 	st.w	sp[1676],r8
800112f4:	58 78       	cp.w	r8,7
800112f6:	e0 89 00 04 	brgt	800112fe <_vfprintf_r+0x1b86>
800112fa:	2f 83       	sub	r3,-8
800112fc:	c0 b8       	rjmp	80011312 <_vfprintf_r+0x1b9a>
800112fe:	fa ca f9 78 	sub	r10,sp,-1672
80011302:	02 9b       	mov	r11,r1
80011304:	08 9c       	mov	r12,r4
80011306:	fe b0 f2 2b 	rcall	8000f75c <__sprint_r>
8001130a:	e0 81 01 b6 	brne	80011676 <_vfprintf_r+0x1efe>
8001130e:	fa c3 f9 e0 	sub	r3,sp,-1568
80011312:	21 06       	sub	r6,16
80011314:	c0 48       	rjmp	8001131c <_vfprintf_r+0x1ba4>
80011316:	fe c2 c1 42 	sub	r2,pc,-16062
8001131a:	31 00       	mov	r0,16
8001131c:	fa f9 06 90 	ld.w	r9,sp[1680]
80011320:	fa f8 06 8c 	ld.w	r8,sp[1676]
80011324:	fe ca c1 50 	sub	r10,pc,-16048
80011328:	59 06       	cp.w	r6,16
8001132a:	fe 99 ff dd 	brgt	800112e4 <_vfprintf_r+0x1b6c>
8001132e:	0c 09       	add	r9,r6
80011330:	2f f8       	sub	r8,-1
80011332:	87 0a       	st.w	r3[0x0],r10
80011334:	fb 49 06 90 	st.w	sp[1680],r9
80011338:	87 16       	st.w	r3[0x4],r6
8001133a:	fb 48 06 8c 	st.w	sp[1676],r8
8001133e:	58 78       	cp.w	r8,7
80011340:	e0 89 00 04 	brgt	80011348 <_vfprintf_r+0x1bd0>
80011344:	2f 83       	sub	r3,-8
80011346:	c0 b8       	rjmp	8001135c <_vfprintf_r+0x1be4>
80011348:	fa ca f9 78 	sub	r10,sp,-1672
8001134c:	02 9b       	mov	r11,r1
8001134e:	08 9c       	mov	r12,r4
80011350:	fe b0 f2 06 	rcall	8000f75c <__sprint_r>
80011354:	e0 81 01 91 	brne	80011676 <_vfprintf_r+0x1efe>
80011358:	fa c3 f9 e0 	sub	r3,sp,-1568
8001135c:	ed b5 00 00 	bld	r5,0x0
80011360:	e0 81 01 20 	brne	800115a0 <_vfprintf_r+0x1e28>
80011364:	40 c9       	lddsp	r9,sp[0x30]
80011366:	fa f8 06 90 	ld.w	r8,sp[1680]
8001136a:	2f f8       	sub	r8,-1
8001136c:	87 09       	st.w	r3[0x0],r9
8001136e:	fb 48 06 90 	st.w	sp[1680],r8
80011372:	30 19       	mov	r9,1
80011374:	fa f8 06 8c 	ld.w	r8,sp[1676]
80011378:	87 19       	st.w	r3[0x4],r9
8001137a:	2f f8       	sub	r8,-1
8001137c:	fb 48 06 8c 	st.w	sp[1676],r8
80011380:	c0 29       	rjmp	80011584 <_vfprintf_r+0x1e0c>
80011382:	14 09       	add	r9,r10
80011384:	2f f8       	sub	r8,-1
80011386:	fb 49 06 90 	st.w	sp[1680],r9
8001138a:	87 06       	st.w	r3[0x0],r6
8001138c:	87 1a       	st.w	r3[0x4],r10
8001138e:	fb 48 06 8c 	st.w	sp[1676],r8
80011392:	58 78       	cp.w	r8,7
80011394:	e0 89 00 04 	brgt	8001139c <_vfprintf_r+0x1c24>
80011398:	2f 83       	sub	r3,-8
8001139a:	c0 b8       	rjmp	800113b0 <_vfprintf_r+0x1c38>
8001139c:	fa ca f9 78 	sub	r10,sp,-1672
800113a0:	02 9b       	mov	r11,r1
800113a2:	08 9c       	mov	r12,r4
800113a4:	fe b0 f1 dc 	rcall	8000f75c <__sprint_r>
800113a8:	e0 81 01 67 	brne	80011676 <_vfprintf_r+0x1efe>
800113ac:	fa c3 f9 e0 	sub	r3,sp,-1568
800113b0:	40 c8       	lddsp	r8,sp[0x30]
800113b2:	87 08       	st.w	r3[0x0],r8
800113b4:	fa f8 06 90 	ld.w	r8,sp[1680]
800113b8:	2f f8       	sub	r8,-1
800113ba:	30 19       	mov	r9,1
800113bc:	fb 48 06 90 	st.w	sp[1680],r8
800113c0:	87 19       	st.w	r3[0x4],r9
800113c2:	fa f8 06 8c 	ld.w	r8,sp[1676]
800113c6:	2f f8       	sub	r8,-1
800113c8:	fb 48 06 8c 	st.w	sp[1676],r8
800113cc:	fa f2 06 ac 	ld.w	r2,sp[1708]
800113d0:	58 78       	cp.w	r8,7
800113d2:	e0 89 00 04 	brgt	800113da <_vfprintf_r+0x1c62>
800113d6:	2f 83       	sub	r3,-8
800113d8:	c0 b8       	rjmp	800113ee <_vfprintf_r+0x1c76>
800113da:	fa ca f9 78 	sub	r10,sp,-1672
800113de:	02 9b       	mov	r11,r1
800113e0:	08 9c       	mov	r12,r4
800113e2:	fe b0 f1 bd 	rcall	8000f75c <__sprint_r>
800113e6:	e0 81 01 48 	brne	80011676 <_vfprintf_r+0x1efe>
800113ea:	fa c3 f9 e0 	sub	r3,sp,-1568
800113ee:	04 06       	add	r6,r2
800113f0:	fa f8 06 ac 	ld.w	r8,sp[1708]
800113f4:	87 06       	st.w	r3[0x0],r6
800113f6:	fa f9 06 90 	ld.w	r9,sp[1680]
800113fa:	40 66       	lddsp	r6,sp[0x18]
800113fc:	40 6e       	lddsp	lr,sp[0x18]
800113fe:	10 16       	sub	r6,r8
80011400:	f2 08 01 08 	sub	r8,r9,r8
80011404:	87 16       	st.w	r3[0x4],r6
80011406:	1c 08       	add	r8,lr
80011408:	fb 48 06 90 	st.w	sp[1680],r8
8001140c:	fa f8 06 8c 	ld.w	r8,sp[1676]
80011410:	2f f8       	sub	r8,-1
80011412:	fb 48 06 8c 	st.w	sp[1676],r8
80011416:	cb 78       	rjmp	80011584 <_vfprintf_r+0x1e0c>
80011418:	40 6c       	lddsp	r12,sp[0x18]
8001141a:	58 1c       	cp.w	r12,1
8001141c:	e0 89 00 06 	brgt	80011428 <_vfprintf_r+0x1cb0>
80011420:	ed b5 00 00 	bld	r5,0x0
80011424:	e0 81 00 85 	brne	8001152e <_vfprintf_r+0x1db6>
80011428:	fa f8 06 90 	ld.w	r8,sp[1680]
8001142c:	2f f8       	sub	r8,-1
8001142e:	30 19       	mov	r9,1
80011430:	fb 48 06 90 	st.w	sp[1680],r8
80011434:	87 06       	st.w	r3[0x0],r6
80011436:	fa f8 06 8c 	ld.w	r8,sp[1676]
8001143a:	87 19       	st.w	r3[0x4],r9
8001143c:	2f f8       	sub	r8,-1
8001143e:	fb 48 06 8c 	st.w	sp[1676],r8
80011442:	58 78       	cp.w	r8,7
80011444:	e0 89 00 04 	brgt	8001144c <_vfprintf_r+0x1cd4>
80011448:	2f 83       	sub	r3,-8
8001144a:	c0 b8       	rjmp	80011460 <_vfprintf_r+0x1ce8>
8001144c:	fa ca f9 78 	sub	r10,sp,-1672
80011450:	02 9b       	mov	r11,r1
80011452:	08 9c       	mov	r12,r4
80011454:	fe b0 f1 84 	rcall	8000f75c <__sprint_r>
80011458:	e0 81 01 0f 	brne	80011676 <_vfprintf_r+0x1efe>
8001145c:	fa c3 f9 e0 	sub	r3,sp,-1568
80011460:	fa f8 06 90 	ld.w	r8,sp[1680]
80011464:	2f f8       	sub	r8,-1
80011466:	40 cb       	lddsp	r11,sp[0x30]
80011468:	fb 48 06 90 	st.w	sp[1680],r8
8001146c:	30 19       	mov	r9,1
8001146e:	fa f8 06 8c 	ld.w	r8,sp[1676]
80011472:	87 0b       	st.w	r3[0x0],r11
80011474:	2f f8       	sub	r8,-1
80011476:	87 19       	st.w	r3[0x4],r9
80011478:	fb 48 06 8c 	st.w	sp[1676],r8
8001147c:	58 78       	cp.w	r8,7
8001147e:	e0 89 00 05 	brgt	80011488 <_vfprintf_r+0x1d10>
80011482:	2f 83       	sub	r3,-8
80011484:	c0 c8       	rjmp	8001149c <_vfprintf_r+0x1d24>
80011486:	d7 03       	nop
80011488:	fa ca f9 78 	sub	r10,sp,-1672
8001148c:	02 9b       	mov	r11,r1
8001148e:	08 9c       	mov	r12,r4
80011490:	fe b0 f1 66 	rcall	8000f75c <__sprint_r>
80011494:	e0 81 00 f1 	brne	80011676 <_vfprintf_r+0x1efe>
80011498:	fa c3 f9 e0 	sub	r3,sp,-1568
8001149c:	30 08       	mov	r8,0
8001149e:	30 09       	mov	r9,0
800114a0:	40 5b       	lddsp	r11,sp[0x14]
800114a2:	40 7a       	lddsp	r10,sp[0x1c]
800114a4:	e0 a0 17 35 	rcall	8001430e <__avr32_f64_cmp_eq>
800114a8:	40 68       	lddsp	r8,sp[0x18]
800114aa:	20 18       	sub	r8,1
800114ac:	58 0c       	cp.w	r12,0
800114ae:	c0 d1       	brne	800114c8 <_vfprintf_r+0x1d50>
800114b0:	2f f6       	sub	r6,-1
800114b2:	87 18       	st.w	r3[0x4],r8
800114b4:	87 06       	st.w	r3[0x0],r6
800114b6:	fa f6 06 90 	ld.w	r6,sp[1680]
800114ba:	10 06       	add	r6,r8
800114bc:	fa f8 06 8c 	ld.w	r8,sp[1676]
800114c0:	fb 46 06 90 	st.w	sp[1680],r6
800114c4:	2f f8       	sub	r8,-1
800114c6:	c3 18       	rjmp	80011528 <_vfprintf_r+0x1db0>
800114c8:	10 96       	mov	r6,r8
800114ca:	58 08       	cp.w	r8,0
800114cc:	e0 89 00 1c 	brgt	80011504 <_vfprintf_r+0x1d8c>
800114d0:	c4 b8       	rjmp	80011566 <_vfprintf_r+0x1dee>
800114d2:	2f 09       	sub	r9,-16
800114d4:	2f f8       	sub	r8,-1
800114d6:	fb 49 06 90 	st.w	sp[1680],r9
800114da:	87 02       	st.w	r3[0x0],r2
800114dc:	87 10       	st.w	r3[0x4],r0
800114de:	fb 48 06 8c 	st.w	sp[1676],r8
800114e2:	58 78       	cp.w	r8,7
800114e4:	e0 89 00 04 	brgt	800114ec <_vfprintf_r+0x1d74>
800114e8:	2f 83       	sub	r3,-8
800114ea:	c0 b8       	rjmp	80011500 <_vfprintf_r+0x1d88>
800114ec:	fa ca f9 78 	sub	r10,sp,-1672
800114f0:	02 9b       	mov	r11,r1
800114f2:	08 9c       	mov	r12,r4
800114f4:	fe b0 f1 34 	rcall	8000f75c <__sprint_r>
800114f8:	e0 81 00 bf 	brne	80011676 <_vfprintf_r+0x1efe>
800114fc:	fa c3 f9 e0 	sub	r3,sp,-1568
80011500:	21 06       	sub	r6,16
80011502:	c0 48       	rjmp	8001150a <_vfprintf_r+0x1d92>
80011504:	fe c2 c3 30 	sub	r2,pc,-15568
80011508:	31 00       	mov	r0,16
8001150a:	fa f9 06 90 	ld.w	r9,sp[1680]
8001150e:	fa f8 06 8c 	ld.w	r8,sp[1676]
80011512:	fe ca c3 3e 	sub	r10,pc,-15554
80011516:	59 06       	cp.w	r6,16
80011518:	fe 99 ff dd 	brgt	800114d2 <_vfprintf_r+0x1d5a>
8001151c:	0c 09       	add	r9,r6
8001151e:	87 0a       	st.w	r3[0x0],r10
80011520:	fb 49 06 90 	st.w	sp[1680],r9
80011524:	2f f8       	sub	r8,-1
80011526:	87 16       	st.w	r3[0x4],r6
80011528:	fb 48 06 8c 	st.w	sp[1676],r8
8001152c:	c0 e8       	rjmp	80011548 <_vfprintf_r+0x1dd0>
8001152e:	fa f8 06 90 	ld.w	r8,sp[1680]
80011532:	2f f8       	sub	r8,-1
80011534:	30 19       	mov	r9,1
80011536:	fb 48 06 90 	st.w	sp[1680],r8
8001153a:	87 06       	st.w	r3[0x0],r6
8001153c:	fa f8 06 8c 	ld.w	r8,sp[1676]
80011540:	87 19       	st.w	r3[0x4],r9
80011542:	2f f8       	sub	r8,-1
80011544:	fb 48 06 8c 	st.w	sp[1676],r8
80011548:	58 78       	cp.w	r8,7
8001154a:	e0 89 00 04 	brgt	80011552 <_vfprintf_r+0x1dda>
8001154e:	2f 83       	sub	r3,-8
80011550:	c0 b8       	rjmp	80011566 <_vfprintf_r+0x1dee>
80011552:	fa ca f9 78 	sub	r10,sp,-1672
80011556:	02 9b       	mov	r11,r1
80011558:	08 9c       	mov	r12,r4
8001155a:	fe b0 f1 01 	rcall	8000f75c <__sprint_r>
8001155e:	e0 81 00 8c 	brne	80011676 <_vfprintf_r+0x1efe>
80011562:	fa c3 f9 e0 	sub	r3,sp,-1568
80011566:	40 ea       	lddsp	r10,sp[0x38]
80011568:	fa f8 06 90 	ld.w	r8,sp[1680]
8001156c:	14 08       	add	r8,r10
8001156e:	fa c9 f9 64 	sub	r9,sp,-1692
80011572:	fb 48 06 90 	st.w	sp[1680],r8
80011576:	87 1a       	st.w	r3[0x4],r10
80011578:	fa f8 06 8c 	ld.w	r8,sp[1676]
8001157c:	87 09       	st.w	r3[0x0],r9
8001157e:	2f f8       	sub	r8,-1
80011580:	fb 48 06 8c 	st.w	sp[1676],r8
80011584:	58 78       	cp.w	r8,7
80011586:	e0 89 00 04 	brgt	8001158e <_vfprintf_r+0x1e16>
8001158a:	2f 83       	sub	r3,-8
8001158c:	c0 a8       	rjmp	800115a0 <_vfprintf_r+0x1e28>
8001158e:	fa ca f9 78 	sub	r10,sp,-1672
80011592:	02 9b       	mov	r11,r1
80011594:	08 9c       	mov	r12,r4
80011596:	fe b0 f0 e3 	rcall	8000f75c <__sprint_r>
8001159a:	c6 e1       	brne	80011676 <_vfprintf_r+0x1efe>
8001159c:	fa c3 f9 e0 	sub	r3,sp,-1568
800115a0:	e2 15 00 04 	andl	r5,0x4,COH
800115a4:	c3 f0       	breq	80011622 <_vfprintf_r+0x1eaa>
800115a6:	40 86       	lddsp	r6,sp[0x20]
800115a8:	40 39       	lddsp	r9,sp[0xc]
800115aa:	12 16       	sub	r6,r9
800115ac:	58 06       	cp.w	r6,0
800115ae:	e0 89 00 1a 	brgt	800115e2 <_vfprintf_r+0x1e6a>
800115b2:	c3 88       	rjmp	80011622 <_vfprintf_r+0x1eaa>
800115b4:	2f 09       	sub	r9,-16
800115b6:	2f f8       	sub	r8,-1
800115b8:	fb 49 06 90 	st.w	sp[1680],r9
800115bc:	87 05       	st.w	r3[0x0],r5
800115be:	87 12       	st.w	r3[0x4],r2
800115c0:	fb 48 06 8c 	st.w	sp[1676],r8
800115c4:	58 78       	cp.w	r8,7
800115c6:	e0 89 00 04 	brgt	800115ce <_vfprintf_r+0x1e56>
800115ca:	2f 83       	sub	r3,-8
800115cc:	c0 98       	rjmp	800115de <_vfprintf_r+0x1e66>
800115ce:	00 9a       	mov	r10,r0
800115d0:	02 9b       	mov	r11,r1
800115d2:	08 9c       	mov	r12,r4
800115d4:	fe b0 f0 c4 	rcall	8000f75c <__sprint_r>
800115d8:	c4 f1       	brne	80011676 <_vfprintf_r+0x1efe>
800115da:	fa c3 f9 e0 	sub	r3,sp,-1568
800115de:	21 06       	sub	r6,16
800115e0:	c0 68       	rjmp	800115ec <_vfprintf_r+0x1e74>
800115e2:	fe c5 c4 1e 	sub	r5,pc,-15330
800115e6:	31 02       	mov	r2,16
800115e8:	fa c0 f9 78 	sub	r0,sp,-1672
800115ec:	fa f9 06 90 	ld.w	r9,sp[1680]
800115f0:	fa f8 06 8c 	ld.w	r8,sp[1676]
800115f4:	fe ca c4 30 	sub	r10,pc,-15312
800115f8:	59 06       	cp.w	r6,16
800115fa:	fe 99 ff dd 	brgt	800115b4 <_vfprintf_r+0x1e3c>
800115fe:	0c 09       	add	r9,r6
80011600:	2f f8       	sub	r8,-1
80011602:	87 0a       	st.w	r3[0x0],r10
80011604:	87 16       	st.w	r3[0x4],r6
80011606:	fb 49 06 90 	st.w	sp[1680],r9
8001160a:	fb 48 06 8c 	st.w	sp[1676],r8
8001160e:	58 78       	cp.w	r8,7
80011610:	e0 8a 00 09 	brle	80011622 <_vfprintf_r+0x1eaa>
80011614:	fa ca f9 78 	sub	r10,sp,-1672
80011618:	02 9b       	mov	r11,r1
8001161a:	08 9c       	mov	r12,r4
8001161c:	fe b0 f0 a0 	rcall	8000f75c <__sprint_r>
80011620:	c2 b1       	brne	80011676 <_vfprintf_r+0x1efe>
80011622:	40 bc       	lddsp	r12,sp[0x2c]
80011624:	40 36       	lddsp	r6,sp[0xc]
80011626:	40 8e       	lddsp	lr,sp[0x20]
80011628:	ec 0e 0c 48 	max	r8,r6,lr
8001162c:	10 0c       	add	r12,r8
8001162e:	50 bc       	stdsp	sp[0x2c],r12
80011630:	fa f8 06 90 	ld.w	r8,sp[1680]
80011634:	58 08       	cp.w	r8,0
80011636:	c0 80       	breq	80011646 <_vfprintf_r+0x1ece>
80011638:	fa ca f9 78 	sub	r10,sp,-1672
8001163c:	02 9b       	mov	r11,r1
8001163e:	08 9c       	mov	r12,r4
80011640:	fe b0 f0 8e 	rcall	8000f75c <__sprint_r>
80011644:	c1 91       	brne	80011676 <_vfprintf_r+0x1efe>
80011646:	30 0b       	mov	r11,0
80011648:	fa c3 f9 e0 	sub	r3,sp,-1568
8001164c:	fb 4b 06 8c 	st.w	sp[1676],r11
80011650:	fe 9f f1 22 	bral	8000f894 <_vfprintf_r+0x11c>
80011654:	08 95       	mov	r5,r4
80011656:	fa f8 06 90 	ld.w	r8,sp[1680]
8001165a:	58 08       	cp.w	r8,0
8001165c:	c0 80       	breq	8001166c <_vfprintf_r+0x1ef4>
8001165e:	08 9c       	mov	r12,r4
80011660:	fa ca f9 78 	sub	r10,sp,-1672
80011664:	02 9b       	mov	r11,r1
80011666:	fe b0 f0 7b 	rcall	8000f75c <__sprint_r>
8001166a:	c0 61       	brne	80011676 <_vfprintf_r+0x1efe>
8001166c:	30 08       	mov	r8,0
8001166e:	fb 48 06 8c 	st.w	sp[1676],r8
80011672:	c0 28       	rjmp	80011676 <_vfprintf_r+0x1efe>
80011674:	40 41       	lddsp	r1,sp[0x10]
80011676:	82 68       	ld.sh	r8,r1[0xc]
80011678:	ed b8 00 06 	bld	r8,0x6
8001167c:	c0 31       	brne	80011682 <_vfprintf_r+0x1f0a>
8001167e:	3f fa       	mov	r10,-1
80011680:	50 ba       	stdsp	sp[0x2c],r10
80011682:	40 bc       	lddsp	r12,sp[0x2c]
80011684:	fe 3d f9 44 	sub	sp,-1724
80011688:	d8 32       	popm	r0-r7,pc
8001168a:	d7 03       	nop

8001168c <__swsetup_r>:
8001168c:	d4 21       	pushm	r4-r7,lr
8001168e:	e0 68 01 d0 	mov	r8,464
80011692:	18 96       	mov	r6,r12
80011694:	16 97       	mov	r7,r11
80011696:	70 0c       	ld.w	r12,r8[0x0]
80011698:	58 0c       	cp.w	r12,0
8001169a:	c0 60       	breq	800116a6 <__swsetup_r+0x1a>
8001169c:	78 68       	ld.w	r8,r12[0x18]
8001169e:	58 08       	cp.w	r8,0
800116a0:	c0 31       	brne	800116a6 <__swsetup_r+0x1a>
800116a2:	e0 a0 07 b9 	rcall	80012614 <__sinit>
800116a6:	fe c8 c3 b2 	sub	r8,pc,-15438
800116aa:	10 37       	cp.w	r7,r8
800116ac:	c0 61       	brne	800116b8 <__swsetup_r+0x2c>
800116ae:	e0 68 01 d0 	mov	r8,464
800116b2:	70 08       	ld.w	r8,r8[0x0]
800116b4:	70 07       	ld.w	r7,r8[0x0]
800116b6:	c1 28       	rjmp	800116da <__swsetup_r+0x4e>
800116b8:	fe c8 c3 a4 	sub	r8,pc,-15452
800116bc:	10 37       	cp.w	r7,r8
800116be:	c0 61       	brne	800116ca <__swsetup_r+0x3e>
800116c0:	e0 68 01 d0 	mov	r8,464
800116c4:	70 08       	ld.w	r8,r8[0x0]
800116c6:	70 17       	ld.w	r7,r8[0x4]
800116c8:	c0 98       	rjmp	800116da <__swsetup_r+0x4e>
800116ca:	fe c8 c3 96 	sub	r8,pc,-15466
800116ce:	10 37       	cp.w	r7,r8
800116d0:	c0 51       	brne	800116da <__swsetup_r+0x4e>
800116d2:	e0 68 01 d0 	mov	r8,464
800116d6:	70 08       	ld.w	r8,r8[0x0]
800116d8:	70 27       	ld.w	r7,r8[0x8]
800116da:	8e 68       	ld.sh	r8,r7[0xc]
800116dc:	ed b8 00 03 	bld	r8,0x3
800116e0:	c1 e0       	breq	8001171c <__swsetup_r+0x90>
800116e2:	ed b8 00 04 	bld	r8,0x4
800116e6:	c3 e1       	brne	80011762 <__swsetup_r+0xd6>
800116e8:	ed b8 00 02 	bld	r8,0x2
800116ec:	c1 51       	brne	80011716 <__swsetup_r+0x8a>
800116ee:	6e db       	ld.w	r11,r7[0x34]
800116f0:	58 0b       	cp.w	r11,0
800116f2:	c0 a0       	breq	80011706 <__swsetup_r+0x7a>
800116f4:	ee c8 ff bc 	sub	r8,r7,-68
800116f8:	10 3b       	cp.w	r11,r8
800116fa:	c0 40       	breq	80011702 <__swsetup_r+0x76>
800116fc:	0c 9c       	mov	r12,r6
800116fe:	e0 a0 08 25 	rcall	80012748 <_free_r>
80011702:	30 08       	mov	r8,0
80011704:	8f d8       	st.w	r7[0x34],r8
80011706:	8e 68       	ld.sh	r8,r7[0xc]
80011708:	e0 18 ff db 	andl	r8,0xffdb
8001170c:	ae 68       	st.h	r7[0xc],r8
8001170e:	30 08       	mov	r8,0
80011710:	8f 18       	st.w	r7[0x4],r8
80011712:	6e 48       	ld.w	r8,r7[0x10]
80011714:	8f 08       	st.w	r7[0x0],r8
80011716:	8e 68       	ld.sh	r8,r7[0xc]
80011718:	a3 b8       	sbr	r8,0x3
8001171a:	ae 68       	st.h	r7[0xc],r8
8001171c:	6e 48       	ld.w	r8,r7[0x10]
8001171e:	58 08       	cp.w	r8,0
80011720:	c0 b1       	brne	80011736 <__swsetup_r+0xaa>
80011722:	8e 68       	ld.sh	r8,r7[0xc]
80011724:	e2 18 02 80 	andl	r8,0x280,COH
80011728:	e0 48 02 00 	cp.w	r8,512
8001172c:	c0 50       	breq	80011736 <__swsetup_r+0xaa>
8001172e:	0c 9c       	mov	r12,r6
80011730:	0e 9b       	mov	r11,r7
80011732:	e0 a0 0a 4b 	rcall	80012bc8 <__smakebuf_r>
80011736:	8e 69       	ld.sh	r9,r7[0xc]
80011738:	f1 d9 c0 01 	bfextu	r8,r9,0x0,0x1
8001173c:	c0 70       	breq	8001174a <__swsetup_r+0xbe>
8001173e:	30 08       	mov	r8,0
80011740:	8f 28       	st.w	r7[0x8],r8
80011742:	6e 58       	ld.w	r8,r7[0x14]
80011744:	5c 38       	neg	r8
80011746:	8f 68       	st.w	r7[0x18],r8
80011748:	c0 68       	rjmp	80011754 <__swsetup_r+0xc8>
8001174a:	ed b9 00 01 	bld	r9,0x1
8001174e:	ef f8 10 05 	ld.wne	r8,r7[0x14]
80011752:	8f 28       	st.w	r7[0x8],r8
80011754:	6e 48       	ld.w	r8,r7[0x10]
80011756:	58 08       	cp.w	r8,0
80011758:	c0 61       	brne	80011764 <__swsetup_r+0xd8>
8001175a:	8e 68       	ld.sh	r8,r7[0xc]
8001175c:	ed b8 00 07 	bld	r8,0x7
80011760:	c0 21       	brne	80011764 <__swsetup_r+0xd8>
80011762:	dc 2a       	popm	r4-r7,pc,r12=-1
80011764:	d8 2a       	popm	r4-r7,pc,r12=0
80011766:	d7 03       	nop

80011768 <quorem>:
80011768:	d4 31       	pushm	r0-r7,lr
8001176a:	20 2d       	sub	sp,8
8001176c:	18 97       	mov	r7,r12
8001176e:	78 48       	ld.w	r8,r12[0x10]
80011770:	76 46       	ld.w	r6,r11[0x10]
80011772:	0c 38       	cp.w	r8,r6
80011774:	c0 34       	brge	8001177a <quorem+0x12>
80011776:	30 0c       	mov	r12,0
80011778:	c8 58       	rjmp	80011882 <quorem+0x11a>
8001177a:	ec c2 ff fc 	sub	r2,r6,-4
8001177e:	f6 c3 ff ec 	sub	r3,r11,-20
80011782:	f6 02 03 29 	ld.w	r9,r11[r2<<0x2]
80011786:	f8 02 03 2c 	ld.w	r12,r12[r2<<0x2]
8001178a:	2f f9       	sub	r9,-1
8001178c:	20 16       	sub	r6,1
8001178e:	f8 09 0d 08 	divu	r8,r12,r9
80011792:	f6 02 00 22 	add	r2,r11,r2<<0x2
80011796:	ee c4 ff ec 	sub	r4,r7,-20
8001179a:	10 95       	mov	r5,r8
8001179c:	58 08       	cp.w	r8,0
8001179e:	c4 10       	breq	80011820 <quorem+0xb8>
800117a0:	30 09       	mov	r9,0
800117a2:	06 9a       	mov	r10,r3
800117a4:	08 98       	mov	r8,r4
800117a6:	12 91       	mov	r1,r9
800117a8:	50 0b       	stdsp	sp[0x0],r11
800117aa:	70 0e       	ld.w	lr,r8[0x0]
800117ac:	b1 8e       	lsr	lr,0x10
800117ae:	50 1e       	stdsp	sp[0x4],lr
800117b0:	15 0e       	ld.w	lr,r10++
800117b2:	fc 00 16 10 	lsr	r0,lr,0x10
800117b6:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
800117ba:	ea 0e 03 41 	mac	r1,r5,lr
800117be:	fd d1 c0 10 	bfextu	lr,r1,0x0,0x10
800117c2:	b1 81       	lsr	r1,0x10
800117c4:	40 1b       	lddsp	r11,sp[0x4]
800117c6:	ea 00 02 40 	mul	r0,r5,r0
800117ca:	e2 00 00 00 	add	r0,r1,r0
800117ce:	e3 d0 c0 10 	bfextu	r1,r0,0x0,0x10
800117d2:	02 1b       	sub	r11,r1
800117d4:	50 1b       	stdsp	sp[0x4],r11
800117d6:	70 0b       	ld.w	r11,r8[0x0]
800117d8:	e3 db c0 10 	bfextu	r1,r11,0x0,0x10
800117dc:	02 09       	add	r9,r1
800117de:	f2 0e 01 0e 	sub	lr,r9,lr
800117e2:	b0 1e       	st.h	r8[0x2],lr
800117e4:	fc 09 14 10 	asr	r9,lr,0x10
800117e8:	40 1e       	lddsp	lr,sp[0x4]
800117ea:	fc 09 00 09 	add	r9,lr,r9
800117ee:	b0 09       	st.h	r8[0x0],r9
800117f0:	e0 01 16 10 	lsr	r1,r0,0x10
800117f4:	2f c8       	sub	r8,-4
800117f6:	b1 49       	asr	r9,0x10
800117f8:	04 3a       	cp.w	r10,r2
800117fa:	fe 98 ff d8 	brls	800117aa <quorem+0x42>
800117fe:	40 0b       	lddsp	r11,sp[0x0]
80011800:	58 0c       	cp.w	r12,0
80011802:	c0 f1       	brne	80011820 <quorem+0xb8>
80011804:	ec c8 ff fb 	sub	r8,r6,-5
80011808:	ee 08 00 28 	add	r8,r7,r8<<0x2
8001180c:	c0 28       	rjmp	80011810 <quorem+0xa8>
8001180e:	20 16       	sub	r6,1
80011810:	20 48       	sub	r8,4
80011812:	08 38       	cp.w	r8,r4
80011814:	e0 88 00 05 	brls	8001181e <quorem+0xb6>
80011818:	70 09       	ld.w	r9,r8[0x0]
8001181a:	58 09       	cp.w	r9,0
8001181c:	cf 90       	breq	8001180e <quorem+0xa6>
8001181e:	8f 46       	st.w	r7[0x10],r6
80011820:	0e 9c       	mov	r12,r7
80011822:	e0 a0 0c f4 	rcall	8001320a <__mcmp>
80011826:	c2 d5       	brlt	80011880 <quorem+0x118>
80011828:	2f f5       	sub	r5,-1
8001182a:	08 98       	mov	r8,r4
8001182c:	30 09       	mov	r9,0
8001182e:	07 0b       	ld.w	r11,r3++
80011830:	f6 0a 16 10 	lsr	r10,r11,0x10
80011834:	70 0c       	ld.w	r12,r8[0x0]
80011836:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
8001183a:	f8 0e 16 10 	lsr	lr,r12,0x10
8001183e:	14 1e       	sub	lr,r10
80011840:	f5 dc c0 10 	bfextu	r10,r12,0x0,0x10
80011844:	16 1a       	sub	r10,r11
80011846:	12 0a       	add	r10,r9
80011848:	b0 1a       	st.h	r8[0x2],r10
8001184a:	b1 4a       	asr	r10,0x10
8001184c:	fc 0a 00 09 	add	r9,lr,r10
80011850:	b0 09       	st.h	r8[0x0],r9
80011852:	2f c8       	sub	r8,-4
80011854:	b1 49       	asr	r9,0x10
80011856:	04 33       	cp.w	r3,r2
80011858:	fe 98 ff eb 	brls	8001182e <quorem+0xc6>
8001185c:	ec c8 ff fb 	sub	r8,r6,-5
80011860:	ee 08 03 29 	ld.w	r9,r7[r8<<0x2]
80011864:	58 09       	cp.w	r9,0
80011866:	c0 d1       	brne	80011880 <quorem+0x118>
80011868:	ee 08 00 28 	add	r8,r7,r8<<0x2
8001186c:	c0 28       	rjmp	80011870 <quorem+0x108>
8001186e:	20 16       	sub	r6,1
80011870:	20 48       	sub	r8,4
80011872:	08 38       	cp.w	r8,r4
80011874:	e0 88 00 05 	brls	8001187e <quorem+0x116>
80011878:	70 09       	ld.w	r9,r8[0x0]
8001187a:	58 09       	cp.w	r9,0
8001187c:	cf 90       	breq	8001186e <quorem+0x106>
8001187e:	8f 46       	st.w	r7[0x10],r6
80011880:	0a 9c       	mov	r12,r5
80011882:	2f ed       	sub	sp,-8
80011884:	d8 32       	popm	r0-r7,pc
80011886:	d7 03       	nop

80011888 <_dtoa_r>:
80011888:	d4 31       	pushm	r0-r7,lr
8001188a:	21 ad       	sub	sp,104
8001188c:	fa c4 ff 74 	sub	r4,sp,-140
80011890:	18 97       	mov	r7,r12
80011892:	16 95       	mov	r5,r11
80011894:	68 2c       	ld.w	r12,r4[0x8]
80011896:	50 c9       	stdsp	sp[0x30],r9
80011898:	68 16       	ld.w	r6,r4[0x4]
8001189a:	68 09       	ld.w	r9,r4[0x0]
8001189c:	50 e8       	stdsp	sp[0x38],r8
8001189e:	14 94       	mov	r4,r10
800118a0:	51 2c       	stdsp	sp[0x48],r12
800118a2:	fa e5 00 08 	st.d	sp[8],r4
800118a6:	51 59       	stdsp	sp[0x54],r9
800118a8:	6e 95       	ld.w	r5,r7[0x24]
800118aa:	58 05       	cp.w	r5,0
800118ac:	c0 91       	brne	800118be <_dtoa_r+0x36>
800118ae:	31 0c       	mov	r12,16
800118b0:	e0 a0 09 ea 	rcall	80012c84 <malloc>
800118b4:	99 35       	st.w	r12[0xc],r5
800118b6:	8f 9c       	st.w	r7[0x24],r12
800118b8:	99 15       	st.w	r12[0x4],r5
800118ba:	99 25       	st.w	r12[0x8],r5
800118bc:	99 05       	st.w	r12[0x0],r5
800118be:	6e 99       	ld.w	r9,r7[0x24]
800118c0:	72 08       	ld.w	r8,r9[0x0]
800118c2:	58 08       	cp.w	r8,0
800118c4:	c0 f0       	breq	800118e2 <_dtoa_r+0x5a>
800118c6:	72 1a       	ld.w	r10,r9[0x4]
800118c8:	91 1a       	st.w	r8[0x4],r10
800118ca:	30 1a       	mov	r10,1
800118cc:	72 19       	ld.w	r9,r9[0x4]
800118ce:	f4 09 09 49 	lsl	r9,r10,r9
800118d2:	10 9b       	mov	r11,r8
800118d4:	91 29       	st.w	r8[0x8],r9
800118d6:	0e 9c       	mov	r12,r7
800118d8:	e0 a0 0c b2 	rcall	8001323c <_Bfree>
800118dc:	6e 98       	ld.w	r8,r7[0x24]
800118de:	30 09       	mov	r9,0
800118e0:	91 09       	st.w	r8[0x0],r9
800118e2:	40 28       	lddsp	r8,sp[0x8]
800118e4:	10 94       	mov	r4,r8
800118e6:	58 08       	cp.w	r8,0
800118e8:	c0 64       	brge	800118f4 <_dtoa_r+0x6c>
800118ea:	f1 d8 c0 1f 	bfextu	r8,r8,0x0,0x1f
800118ee:	50 28       	stdsp	sp[0x8],r8
800118f0:	30 18       	mov	r8,1
800118f2:	c0 28       	rjmp	800118f6 <_dtoa_r+0x6e>
800118f4:	30 08       	mov	r8,0
800118f6:	8d 08       	st.w	r6[0x0],r8
800118f8:	fc 1c 7f f0 	movh	r12,0x7ff0
800118fc:	40 26       	lddsp	r6,sp[0x8]
800118fe:	0c 98       	mov	r8,r6
80011900:	e6 18 7f f0 	andh	r8,0x7ff0,COH
80011904:	18 38       	cp.w	r8,r12
80011906:	c2 01       	brne	80011946 <_dtoa_r+0xbe>
80011908:	e0 68 27 0f 	mov	r8,9999
8001190c:	41 5b       	lddsp	r11,sp[0x54]
8001190e:	97 08       	st.w	r11[0x0],r8
80011910:	40 3a       	lddsp	r10,sp[0xc]
80011912:	58 0a       	cp.w	r10,0
80011914:	c0 71       	brne	80011922 <_dtoa_r+0x9a>
80011916:	ed d6 c0 14 	bfextu	r6,r6,0x0,0x14
8001191a:	c0 41       	brne	80011922 <_dtoa_r+0x9a>
8001191c:	fe cc c6 38 	sub	r12,pc,-14792
80011920:	c0 38       	rjmp	80011926 <_dtoa_r+0x9e>
80011922:	fe cc c6 32 	sub	r12,pc,-14798
80011926:	41 29       	lddsp	r9,sp[0x48]
80011928:	58 09       	cp.w	r9,0
8001192a:	e0 80 05 9a 	breq	8001245e <_dtoa_r+0xbd6>
8001192e:	f8 c8 ff fd 	sub	r8,r12,-3
80011932:	f8 c9 ff f8 	sub	r9,r12,-8
80011936:	11 8b       	ld.ub	r11,r8[0x0]
80011938:	30 0a       	mov	r10,0
8001193a:	41 25       	lddsp	r5,sp[0x48]
8001193c:	f4 0b 18 00 	cp.b	r11,r10
80011940:	f2 08 17 10 	movne	r8,r9
80011944:	c1 68       	rjmp	80011970 <_dtoa_r+0xe8>
80011946:	fa ea 00 08 	ld.d	r10,sp[8]
8001194a:	30 08       	mov	r8,0
8001194c:	fa eb 00 3c 	st.d	sp[60],r10
80011950:	30 09       	mov	r9,0
80011952:	e0 a0 14 de 	rcall	8001430e <__avr32_f64_cmp_eq>
80011956:	c1 00       	breq	80011976 <_dtoa_r+0xee>
80011958:	30 18       	mov	r8,1
8001195a:	41 5a       	lddsp	r10,sp[0x54]
8001195c:	95 08       	st.w	r10[0x0],r8
8001195e:	fe cc c7 9e 	sub	r12,pc,-14434
80011962:	41 29       	lddsp	r9,sp[0x48]
80011964:	f8 08 00 08 	add	r8,r12,r8
80011968:	58 09       	cp.w	r9,0
8001196a:	e0 80 05 7a 	breq	8001245e <_dtoa_r+0xbd6>
8001196e:	12 95       	mov	r5,r9
80011970:	8b 08       	st.w	r5[0x0],r8
80011972:	e0 8f 05 76 	bral	8001245e <_dtoa_r+0xbd6>
80011976:	fa c8 ff 9c 	sub	r8,sp,-100
8001197a:	fa c9 ff a0 	sub	r9,sp,-96
8001197e:	fa ea 00 3c 	ld.d	r10,sp[60]
80011982:	0e 9c       	mov	r12,r7
80011984:	eb d6 c2 8b 	bfextu	r5,r6,0x14,0xb
80011988:	e0 a0 0c ac 	rcall	800132e0 <__d2b>
8001198c:	18 93       	mov	r3,r12
8001198e:	58 05       	cp.w	r5,0
80011990:	c0 d0       	breq	800119aa <_dtoa_r+0x122>
80011992:	fa ea 00 3c 	ld.d	r10,sp[60]
80011996:	30 04       	mov	r4,0
80011998:	f1 db c0 14 	bfextu	r8,r11,0x0,0x14
8001199c:	ea c5 03 ff 	sub	r5,r5,1023
800119a0:	10 9b       	mov	r11,r8
800119a2:	51 74       	stdsp	sp[0x5c],r4
800119a4:	ea 1b 3f f0 	orh	r11,0x3ff0
800119a8:	c2 58       	rjmp	800119f2 <_dtoa_r+0x16a>
800119aa:	41 88       	lddsp	r8,sp[0x60]
800119ac:	41 9c       	lddsp	r12,sp[0x64]
800119ae:	10 0c       	add	r12,r8
800119b0:	f8 c5 fb ce 	sub	r5,r12,-1074
800119b4:	e0 45 00 20 	cp.w	r5,32
800119b8:	e0 8a 00 0e 	brle	800119d4 <_dtoa_r+0x14c>
800119bc:	f8 cc fb ee 	sub	r12,r12,-1042
800119c0:	40 3b       	lddsp	r11,sp[0xc]
800119c2:	ea 08 11 40 	rsub	r8,r5,64
800119c6:	f6 0c 0a 4c 	lsr	r12,r11,r12
800119ca:	ec 08 09 46 	lsl	r6,r6,r8
800119ce:	0c 4c       	or	r12,r6
800119d0:	c0 78       	rjmp	800119de <_dtoa_r+0x156>
800119d2:	d7 03       	nop
800119d4:	ea 0c 11 20 	rsub	r12,r5,32
800119d8:	40 3a       	lddsp	r10,sp[0xc]
800119da:	f4 0c 09 4c 	lsl	r12,r10,r12
800119de:	e0 a0 14 24 	rcall	80014226 <__avr32_u32_to_f64>
800119e2:	fc 18 fe 10 	movh	r8,0xfe10
800119e6:	30 19       	mov	r9,1
800119e8:	ea c5 04 33 	sub	r5,r5,1075
800119ec:	f0 0b 00 0b 	add	r11,r8,r11
800119f0:	51 79       	stdsp	sp[0x5c],r9
800119f2:	30 08       	mov	r8,0
800119f4:	fc 19 3f f8 	movh	r9,0x3ff8
800119f8:	e0 a0 12 ac 	rcall	80013f50 <__avr32_f64_sub>
800119fc:	e0 68 43 61 	mov	r8,17249
80011a00:	ea 18 63 6f 	orh	r8,0x636f
80011a04:	e0 69 87 a7 	mov	r9,34727
80011a08:	ea 19 3f d2 	orh	r9,0x3fd2
80011a0c:	e0 a0 11 b6 	rcall	80013d78 <__avr32_f64_mul>
80011a10:	e0 68 c8 b3 	mov	r8,51379
80011a14:	ea 18 8b 60 	orh	r8,0x8b60
80011a18:	e0 69 8a 28 	mov	r9,35368
80011a1c:	ea 19 3f c6 	orh	r9,0x3fc6
80011a20:	e0 a0 13 66 	rcall	800140ec <__avr32_f64_add>
80011a24:	0a 9c       	mov	r12,r5
80011a26:	14 90       	mov	r0,r10
80011a28:	16 91       	mov	r1,r11
80011a2a:	e0 a0 14 02 	rcall	8001422e <__avr32_s32_to_f64>
80011a2e:	e0 68 79 fb 	mov	r8,31227
80011a32:	ea 18 50 9f 	orh	r8,0x509f
80011a36:	e0 69 44 13 	mov	r9,17427
80011a3a:	ea 19 3f d3 	orh	r9,0x3fd3
80011a3e:	e0 a0 11 9d 	rcall	80013d78 <__avr32_f64_mul>
80011a42:	14 98       	mov	r8,r10
80011a44:	16 99       	mov	r9,r11
80011a46:	00 9a       	mov	r10,r0
80011a48:	02 9b       	mov	r11,r1
80011a4a:	e0 a0 13 51 	rcall	800140ec <__avr32_f64_add>
80011a4e:	14 90       	mov	r0,r10
80011a50:	16 91       	mov	r1,r11
80011a52:	e0 a0 13 d7 	rcall	80014200 <__avr32_f64_to_s32>
80011a56:	30 08       	mov	r8,0
80011a58:	18 96       	mov	r6,r12
80011a5a:	30 09       	mov	r9,0
80011a5c:	00 9a       	mov	r10,r0
80011a5e:	02 9b       	mov	r11,r1
80011a60:	e0 a0 14 9e 	rcall	8001439c <__avr32_f64_cmp_lt>
80011a64:	c0 c0       	breq	80011a7c <_dtoa_r+0x1f4>
80011a66:	0c 9c       	mov	r12,r6
80011a68:	e0 a0 13 e3 	rcall	8001422e <__avr32_s32_to_f64>
80011a6c:	14 98       	mov	r8,r10
80011a6e:	16 99       	mov	r9,r11
80011a70:	00 9a       	mov	r10,r0
80011a72:	02 9b       	mov	r11,r1
80011a74:	e0 a0 14 4d 	rcall	8001430e <__avr32_f64_cmp_eq>
80011a78:	f7 b6 00 01 	subeq	r6,1
80011a7c:	59 66       	cp.w	r6,22
80011a7e:	e0 88 00 05 	brls	80011a88 <_dtoa_r+0x200>
80011a82:	30 18       	mov	r8,1
80011a84:	51 48       	stdsp	sp[0x50],r8
80011a86:	c1 38       	rjmp	80011aac <_dtoa_r+0x224>
80011a88:	fe c8 c6 e0 	sub	r8,pc,-14624
80011a8c:	fa ea 00 3c 	ld.d	r10,sp[60]
80011a90:	f0 06 02 38 	ld.d	r8,r8[r6<<0x3]
80011a94:	e0 a0 14 84 	rcall	8001439c <__avr32_f64_cmp_lt>
80011a98:	f9 b4 00 00 	moveq	r4,0
80011a9c:	fb f4 0a 14 	st.weq	sp[0x50],r4
80011aa0:	f7 b6 01 01 	subne	r6,1
80011aa4:	f9 bc 01 00 	movne	r12,0
80011aa8:	fb fc 1a 14 	st.wne	sp[0x50],r12
80011aac:	41 90       	lddsp	r0,sp[0x64]
80011aae:	20 10       	sub	r0,1
80011ab0:	0a 10       	sub	r0,r5
80011ab2:	c0 46       	brmi	80011aba <_dtoa_r+0x232>
80011ab4:	50 40       	stdsp	sp[0x10],r0
80011ab6:	30 00       	mov	r0,0
80011ab8:	c0 48       	rjmp	80011ac0 <_dtoa_r+0x238>
80011aba:	30 0b       	mov	r11,0
80011abc:	5c 30       	neg	r0
80011abe:	50 4b       	stdsp	sp[0x10],r11
80011ac0:	ec 02 11 00 	rsub	r2,r6,0
80011ac4:	58 06       	cp.w	r6,0
80011ac6:	fb fa 40 04 	ld.wge	r10,sp[0x10]
80011aca:	f5 d6 e4 0a 	addge	r10,r10,r6
80011ace:	fb fa 4a 04 	st.wge	sp[0x10],r10
80011ad2:	fb f6 4a 11 	st.wge	sp[0x44],r6
80011ad6:	f9 b2 04 00 	movge	r2,0
80011ada:	e1 d6 e5 10 	sublt	r0,r0,r6
80011ade:	f9 b9 05 00 	movlt	r9,0
80011ae2:	fb f9 5a 11 	st.wlt	sp[0x44],r9
80011ae6:	40 c8       	lddsp	r8,sp[0x30]
80011ae8:	58 98       	cp.w	r8,9
80011aea:	e0 8b 00 20 	brhi	80011b2a <_dtoa_r+0x2a2>
80011aee:	58 58       	cp.w	r8,5
80011af0:	f9 b4 0a 01 	movle	r4,1
80011af4:	fb f5 90 0c 	ld.wgt	r5,sp[0x30]
80011af8:	f7 b5 09 04 	subgt	r5,4
80011afc:	fb f5 9a 0c 	st.wgt	sp[0x30],r5
80011b00:	f9 b4 09 00 	movgt	r4,0
80011b04:	40 cc       	lddsp	r12,sp[0x30]
80011b06:	58 3c       	cp.w	r12,3
80011b08:	c2 d0       	breq	80011b62 <_dtoa_r+0x2da>
80011b0a:	e0 89 00 05 	brgt	80011b14 <_dtoa_r+0x28c>
80011b0e:	58 2c       	cp.w	r12,2
80011b10:	c1 01       	brne	80011b30 <_dtoa_r+0x2a8>
80011b12:	c1 88       	rjmp	80011b42 <_dtoa_r+0x2ba>
80011b14:	40 cb       	lddsp	r11,sp[0x30]
80011b16:	58 4b       	cp.w	r11,4
80011b18:	c0 60       	breq	80011b24 <_dtoa_r+0x29c>
80011b1a:	58 5b       	cp.w	r11,5
80011b1c:	c0 a1       	brne	80011b30 <_dtoa_r+0x2a8>
80011b1e:	30 1a       	mov	r10,1
80011b20:	50 da       	stdsp	sp[0x34],r10
80011b22:	c2 28       	rjmp	80011b66 <_dtoa_r+0x2de>
80011b24:	30 19       	mov	r9,1
80011b26:	50 d9       	stdsp	sp[0x34],r9
80011b28:	c0 f8       	rjmp	80011b46 <_dtoa_r+0x2be>
80011b2a:	30 08       	mov	r8,0
80011b2c:	30 14       	mov	r4,1
80011b2e:	50 c8       	stdsp	sp[0x30],r8
80011b30:	3f f5       	mov	r5,-1
80011b32:	30 1c       	mov	r12,1
80011b34:	30 0b       	mov	r11,0
80011b36:	50 95       	stdsp	sp[0x24],r5
80011b38:	50 dc       	stdsp	sp[0x34],r12
80011b3a:	0a 91       	mov	r1,r5
80011b3c:	31 28       	mov	r8,18
80011b3e:	50 eb       	stdsp	sp[0x38],r11
80011b40:	c2 08       	rjmp	80011b80 <_dtoa_r+0x2f8>
80011b42:	30 0a       	mov	r10,0
80011b44:	50 da       	stdsp	sp[0x34],r10
80011b46:	40 e9       	lddsp	r9,sp[0x38]
80011b48:	58 09       	cp.w	r9,0
80011b4a:	e0 89 00 07 	brgt	80011b58 <_dtoa_r+0x2d0>
80011b4e:	30 18       	mov	r8,1
80011b50:	50 98       	stdsp	sp[0x24],r8
80011b52:	10 91       	mov	r1,r8
80011b54:	50 e8       	stdsp	sp[0x38],r8
80011b56:	c1 58       	rjmp	80011b80 <_dtoa_r+0x2f8>
80011b58:	40 e5       	lddsp	r5,sp[0x38]
80011b5a:	50 95       	stdsp	sp[0x24],r5
80011b5c:	0a 91       	mov	r1,r5
80011b5e:	0a 98       	mov	r8,r5
80011b60:	c1 08       	rjmp	80011b80 <_dtoa_r+0x2f8>
80011b62:	30 0c       	mov	r12,0
80011b64:	50 dc       	stdsp	sp[0x34],r12
80011b66:	40 eb       	lddsp	r11,sp[0x38]
80011b68:	ec 0b 00 0b 	add	r11,r6,r11
80011b6c:	50 9b       	stdsp	sp[0x24],r11
80011b6e:	16 98       	mov	r8,r11
80011b70:	2f f8       	sub	r8,-1
80011b72:	58 08       	cp.w	r8,0
80011b74:	e0 89 00 05 	brgt	80011b7e <_dtoa_r+0x2f6>
80011b78:	10 91       	mov	r1,r8
80011b7a:	30 18       	mov	r8,1
80011b7c:	c0 28       	rjmp	80011b80 <_dtoa_r+0x2f8>
80011b7e:	10 91       	mov	r1,r8
80011b80:	30 09       	mov	r9,0
80011b82:	6e 9a       	ld.w	r10,r7[0x24]
80011b84:	95 19       	st.w	r10[0x4],r9
80011b86:	30 49       	mov	r9,4
80011b88:	c0 68       	rjmp	80011b94 <_dtoa_r+0x30c>
80011b8a:	d7 03       	nop
80011b8c:	6a 1a       	ld.w	r10,r5[0x4]
80011b8e:	a1 79       	lsl	r9,0x1
80011b90:	2f fa       	sub	r10,-1
80011b92:	8b 1a       	st.w	r5[0x4],r10
80011b94:	6e 95       	ld.w	r5,r7[0x24]
80011b96:	f2 ca ff ec 	sub	r10,r9,-20
80011b9a:	10 3a       	cp.w	r10,r8
80011b9c:	fe 98 ff f8 	brls	80011b8c <_dtoa_r+0x304>
80011ba0:	6a 1b       	ld.w	r11,r5[0x4]
80011ba2:	0e 9c       	mov	r12,r7
80011ba4:	e0 a0 0b 66 	rcall	80013270 <_Balloc>
80011ba8:	58 e1       	cp.w	r1,14
80011baa:	5f 88       	srls	r8
80011bac:	8b 0c       	st.w	r5[0x0],r12
80011bae:	f1 e4 00 04 	and	r4,r8,r4
80011bb2:	6e 98       	ld.w	r8,r7[0x24]
80011bb4:	70 08       	ld.w	r8,r8[0x0]
80011bb6:	50 88       	stdsp	sp[0x20],r8
80011bb8:	e0 80 01 82 	breq	80011ebc <_dtoa_r+0x634>
80011bbc:	58 06       	cp.w	r6,0
80011bbe:	e0 8a 00 43 	brle	80011c44 <_dtoa_r+0x3bc>
80011bc2:	f3 d6 c0 04 	bfextu	r9,r6,0x0,0x4
80011bc6:	fe c8 c8 1e 	sub	r8,pc,-14306
80011bca:	f0 09 02 34 	ld.d	r4,r8[r9<<0x3]
80011bce:	fa e5 00 18 	st.d	sp[24],r4
80011bd2:	ec 04 14 04 	asr	r4,r6,0x4
80011bd6:	ed b4 00 04 	bld	r4,0x4
80011bda:	c0 30       	breq	80011be0 <_dtoa_r+0x358>
80011bdc:	30 25       	mov	r5,2
80011bde:	c1 08       	rjmp	80011bfe <_dtoa_r+0x376>
80011be0:	fe c8 c7 70 	sub	r8,pc,-14480
80011be4:	f0 e8 00 20 	ld.d	r8,r8[32]
80011be8:	fa ea 00 3c 	ld.d	r10,sp[60]
80011bec:	e9 d4 c0 04 	bfextu	r4,r4,0x0,0x4
80011bf0:	e0 a0 14 0a 	rcall	80014404 <__avr32_f64_div>
80011bf4:	30 35       	mov	r5,3
80011bf6:	14 98       	mov	r8,r10
80011bf8:	16 99       	mov	r9,r11
80011bfa:	fa e9 00 08 	st.d	sp[8],r8
80011bfe:	fe cc c7 8e 	sub	r12,pc,-14450
80011c02:	50 a3       	stdsp	sp[0x28],r3
80011c04:	0c 93       	mov	r3,r6
80011c06:	18 96       	mov	r6,r12
80011c08:	c0 f8       	rjmp	80011c26 <_dtoa_r+0x39e>
80011c0a:	fa ea 00 18 	ld.d	r10,sp[24]
80011c0e:	ed b4 00 00 	bld	r4,0x0
80011c12:	c0 81       	brne	80011c22 <_dtoa_r+0x39a>
80011c14:	ec e8 00 00 	ld.d	r8,r6[0]
80011c18:	2f f5       	sub	r5,-1
80011c1a:	e0 a0 10 af 	rcall	80013d78 <__avr32_f64_mul>
80011c1e:	fa eb 00 18 	st.d	sp[24],r10
80011c22:	a1 54       	asr	r4,0x1
80011c24:	2f 86       	sub	r6,-8
80011c26:	58 04       	cp.w	r4,0
80011c28:	cf 11       	brne	80011c0a <_dtoa_r+0x382>
80011c2a:	fa e8 00 18 	ld.d	r8,sp[24]
80011c2e:	fa ea 00 08 	ld.d	r10,sp[8]
80011c32:	06 96       	mov	r6,r3
80011c34:	e0 a0 13 e8 	rcall	80014404 <__avr32_f64_div>
80011c38:	40 a3       	lddsp	r3,sp[0x28]
80011c3a:	14 98       	mov	r8,r10
80011c3c:	16 99       	mov	r9,r11
80011c3e:	fa e9 00 08 	st.d	sp[8],r8
80011c42:	c2 f8       	rjmp	80011ca0 <_dtoa_r+0x418>
80011c44:	ec 08 11 00 	rsub	r8,r6,0
80011c48:	c0 31       	brne	80011c4e <_dtoa_r+0x3c6>
80011c4a:	30 25       	mov	r5,2
80011c4c:	c2 a8       	rjmp	80011ca0 <_dtoa_r+0x418>
80011c4e:	fe cc c7 de 	sub	r12,pc,-14370
80011c52:	f0 04 14 04 	asr	r4,r8,0x4
80011c56:	50 1c       	stdsp	sp[0x4],r12
80011c58:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80011c5c:	fe c9 c8 b4 	sub	r9,pc,-14156
80011c60:	fa ea 00 3c 	ld.d	r10,sp[60]
80011c64:	f2 08 02 38 	ld.d	r8,r9[r8<<0x3]
80011c68:	e0 a0 10 88 	rcall	80013d78 <__avr32_f64_mul>
80011c6c:	40 1c       	lddsp	r12,sp[0x4]
80011c6e:	50 63       	stdsp	sp[0x18],r3
80011c70:	30 25       	mov	r5,2
80011c72:	0c 93       	mov	r3,r6
80011c74:	fa eb 00 08 	st.d	sp[8],r10
80011c78:	18 96       	mov	r6,r12
80011c7a:	c0 f8       	rjmp	80011c98 <_dtoa_r+0x410>
80011c7c:	fa ea 00 08 	ld.d	r10,sp[8]
80011c80:	ed b4 00 00 	bld	r4,0x0
80011c84:	c0 81       	brne	80011c94 <_dtoa_r+0x40c>
80011c86:	ec e8 00 00 	ld.d	r8,r6[0]
80011c8a:	2f f5       	sub	r5,-1
80011c8c:	e0 a0 10 76 	rcall	80013d78 <__avr32_f64_mul>
80011c90:	fa eb 00 08 	st.d	sp[8],r10
80011c94:	a1 54       	asr	r4,0x1
80011c96:	2f 86       	sub	r6,-8
80011c98:	58 04       	cp.w	r4,0
80011c9a:	cf 11       	brne	80011c7c <_dtoa_r+0x3f4>
80011c9c:	06 96       	mov	r6,r3
80011c9e:	40 63       	lddsp	r3,sp[0x18]
80011ca0:	41 4a       	lddsp	r10,sp[0x50]
80011ca2:	58 0a       	cp.w	r10,0
80011ca4:	c2 a0       	breq	80011cf8 <_dtoa_r+0x470>
80011ca6:	fa e8 00 08 	ld.d	r8,sp[8]
80011caa:	58 01       	cp.w	r1,0
80011cac:	5f 94       	srgt	r4
80011cae:	fa e9 00 18 	st.d	sp[24],r8
80011cb2:	30 08       	mov	r8,0
80011cb4:	fc 19 3f f0 	movh	r9,0x3ff0
80011cb8:	fa ea 00 18 	ld.d	r10,sp[24]
80011cbc:	e0 a0 13 70 	rcall	8001439c <__avr32_f64_cmp_lt>
80011cc0:	f9 bc 00 00 	moveq	r12,0
80011cc4:	f9 bc 01 01 	movne	r12,1
80011cc8:	e9 ec 00 0c 	and	r12,r4,r12
80011ccc:	c1 60       	breq	80011cf8 <_dtoa_r+0x470>
80011cce:	40 98       	lddsp	r8,sp[0x24]
80011cd0:	58 08       	cp.w	r8,0
80011cd2:	e0 8a 00 f1 	brle	80011eb4 <_dtoa_r+0x62c>
80011cd6:	30 08       	mov	r8,0
80011cd8:	fc 19 40 24 	movh	r9,0x4024
80011cdc:	ec c4 00 01 	sub	r4,r6,1
80011ce0:	fa ea 00 18 	ld.d	r10,sp[24]
80011ce4:	2f f5       	sub	r5,-1
80011ce6:	50 64       	stdsp	sp[0x18],r4
80011ce8:	e0 a0 10 48 	rcall	80013d78 <__avr32_f64_mul>
80011cec:	40 94       	lddsp	r4,sp[0x24]
80011cee:	14 98       	mov	r8,r10
80011cf0:	16 99       	mov	r9,r11
80011cf2:	fa e9 00 08 	st.d	sp[8],r8
80011cf6:	c0 38       	rjmp	80011cfc <_dtoa_r+0x474>
80011cf8:	50 66       	stdsp	sp[0x18],r6
80011cfa:	02 94       	mov	r4,r1
80011cfc:	0a 9c       	mov	r12,r5
80011cfe:	e0 a0 12 98 	rcall	8001422e <__avr32_s32_to_f64>
80011d02:	fa e8 00 08 	ld.d	r8,sp[8]
80011d06:	e0 a0 10 39 	rcall	80013d78 <__avr32_f64_mul>
80011d0a:	30 08       	mov	r8,0
80011d0c:	fc 19 40 1c 	movh	r9,0x401c
80011d10:	e0 a0 11 ee 	rcall	800140ec <__avr32_f64_add>
80011d14:	14 98       	mov	r8,r10
80011d16:	16 99       	mov	r9,r11
80011d18:	fa e9 00 28 	st.d	sp[40],r8
80011d1c:	fc 18 fc c0 	movh	r8,0xfcc0
80011d20:	40 a5       	lddsp	r5,sp[0x28]
80011d22:	10 05       	add	r5,r8
80011d24:	50 a5       	stdsp	sp[0x28],r5
80011d26:	58 04       	cp.w	r4,0
80011d28:	c2 11       	brne	80011d6a <_dtoa_r+0x4e2>
80011d2a:	fa ea 00 08 	ld.d	r10,sp[8]
80011d2e:	30 08       	mov	r8,0
80011d30:	fc 19 40 14 	movh	r9,0x4014
80011d34:	e0 a0 11 0e 	rcall	80013f50 <__avr32_f64_sub>
80011d38:	40 bc       	lddsp	r12,sp[0x2c]
80011d3a:	fa eb 00 08 	st.d	sp[8],r10
80011d3e:	14 98       	mov	r8,r10
80011d40:	16 99       	mov	r9,r11
80011d42:	18 9a       	mov	r10,r12
80011d44:	0a 9b       	mov	r11,r5
80011d46:	e0 a0 13 2b 	rcall	8001439c <__avr32_f64_cmp_lt>
80011d4a:	e0 81 02 54 	brne	800121f2 <_dtoa_r+0x96a>
80011d4e:	0a 98       	mov	r8,r5
80011d50:	40 b9       	lddsp	r9,sp[0x2c]
80011d52:	ee 18 80 00 	eorh	r8,0x8000
80011d56:	fa ea 00 08 	ld.d	r10,sp[8]
80011d5a:	10 95       	mov	r5,r8
80011d5c:	12 98       	mov	r8,r9
80011d5e:	0a 99       	mov	r9,r5
80011d60:	e0 a0 13 1e 	rcall	8001439c <__avr32_f64_cmp_lt>
80011d64:	e0 81 02 3e 	brne	800121e0 <_dtoa_r+0x958>
80011d68:	ca 68       	rjmp	80011eb4 <_dtoa_r+0x62c>
80011d6a:	fe c9 c9 c2 	sub	r9,pc,-13886
80011d6e:	e8 c8 00 01 	sub	r8,r4,1
80011d72:	40 d5       	lddsp	r5,sp[0x34]
80011d74:	58 05       	cp.w	r5,0
80011d76:	c4 f0       	breq	80011e14 <_dtoa_r+0x58c>
80011d78:	30 0c       	mov	r12,0
80011d7a:	f2 08 02 38 	ld.d	r8,r9[r8<<0x3]
80011d7e:	51 3c       	stdsp	sp[0x4c],r12
80011d80:	30 0a       	mov	r10,0
80011d82:	fc 1b 3f e0 	movh	r11,0x3fe0
80011d86:	e0 a0 13 3f 	rcall	80014404 <__avr32_f64_div>
80011d8a:	fa e8 00 28 	ld.d	r8,sp[40]
80011d8e:	40 85       	lddsp	r5,sp[0x20]
80011d90:	e0 a0 10 e0 	rcall	80013f50 <__avr32_f64_sub>
80011d94:	fa eb 00 28 	st.d	sp[40],r10
80011d98:	fa ea 00 08 	ld.d	r10,sp[8]
80011d9c:	e0 a0 12 32 	rcall	80014200 <__avr32_f64_to_s32>
80011da0:	51 6c       	stdsp	sp[0x58],r12
80011da2:	e0 a0 12 46 	rcall	8001422e <__avr32_s32_to_f64>
80011da6:	14 98       	mov	r8,r10
80011da8:	16 99       	mov	r9,r11
80011daa:	fa ea 00 08 	ld.d	r10,sp[8]
80011dae:	e0 a0 10 d1 	rcall	80013f50 <__avr32_f64_sub>
80011db2:	fa eb 00 08 	st.d	sp[8],r10
80011db6:	41 68       	lddsp	r8,sp[0x58]
80011db8:	2d 08       	sub	r8,-48
80011dba:	0a c8       	st.b	r5++,r8
80011dbc:	41 39       	lddsp	r9,sp[0x4c]
80011dbe:	2f f9       	sub	r9,-1
80011dc0:	51 39       	stdsp	sp[0x4c],r9
80011dc2:	fa e8 00 28 	ld.d	r8,sp[40]
80011dc6:	e0 a0 12 eb 	rcall	8001439c <__avr32_f64_cmp_lt>
80011dca:	e0 81 03 39 	brne	8001243c <_dtoa_r+0xbb4>
80011dce:	fa e8 00 08 	ld.d	r8,sp[8]
80011dd2:	30 0a       	mov	r10,0
80011dd4:	fc 1b 3f f0 	movh	r11,0x3ff0
80011dd8:	e0 a0 10 bc 	rcall	80013f50 <__avr32_f64_sub>
80011ddc:	fa e8 00 28 	ld.d	r8,sp[40]
80011de0:	e0 a0 12 de 	rcall	8001439c <__avr32_f64_cmp_lt>
80011de4:	fa ea 00 28 	ld.d	r10,sp[40]
80011de8:	30 08       	mov	r8,0
80011dea:	fc 19 40 24 	movh	r9,0x4024
80011dee:	e0 81 00 da 	brne	80011fa2 <_dtoa_r+0x71a>
80011df2:	41 3c       	lddsp	r12,sp[0x4c]
80011df4:	08 3c       	cp.w	r12,r4
80011df6:	c5 f4       	brge	80011eb4 <_dtoa_r+0x62c>
80011df8:	e0 a0 0f c0 	rcall	80013d78 <__avr32_f64_mul>
80011dfc:	30 08       	mov	r8,0
80011dfe:	fa eb 00 28 	st.d	sp[40],r10
80011e02:	fc 19 40 24 	movh	r9,0x4024
80011e06:	fa ea 00 08 	ld.d	r10,sp[8]
80011e0a:	e0 a0 0f b7 	rcall	80013d78 <__avr32_f64_mul>
80011e0e:	fa eb 00 08 	st.d	sp[8],r10
80011e12:	cc 3b       	rjmp	80011d98 <_dtoa_r+0x510>
80011e14:	40 85       	lddsp	r5,sp[0x20]
80011e16:	08 05       	add	r5,r4
80011e18:	f2 08 02 3a 	ld.d	r10,r9[r8<<0x3]
80011e1c:	51 35       	stdsp	sp[0x4c],r5
80011e1e:	fa e8 00 28 	ld.d	r8,sp[40]
80011e22:	40 85       	lddsp	r5,sp[0x20]
80011e24:	e0 a0 0f aa 	rcall	80013d78 <__avr32_f64_mul>
80011e28:	fa eb 00 28 	st.d	sp[40],r10
80011e2c:	fa ea 00 08 	ld.d	r10,sp[8]
80011e30:	e0 a0 11 e8 	rcall	80014200 <__avr32_f64_to_s32>
80011e34:	51 6c       	stdsp	sp[0x58],r12
80011e36:	e0 a0 11 fc 	rcall	8001422e <__avr32_s32_to_f64>
80011e3a:	14 98       	mov	r8,r10
80011e3c:	16 99       	mov	r9,r11
80011e3e:	fa ea 00 08 	ld.d	r10,sp[8]
80011e42:	e0 a0 10 87 	rcall	80013f50 <__avr32_f64_sub>
80011e46:	fa eb 00 08 	st.d	sp[8],r10
80011e4a:	41 68       	lddsp	r8,sp[0x58]
80011e4c:	2d 08       	sub	r8,-48
80011e4e:	0a c8       	st.b	r5++,r8
80011e50:	41 3c       	lddsp	r12,sp[0x4c]
80011e52:	18 35       	cp.w	r5,r12
80011e54:	c2 81       	brne	80011ea4 <_dtoa_r+0x61c>
80011e56:	30 08       	mov	r8,0
80011e58:	fc 19 3f e0 	movh	r9,0x3fe0
80011e5c:	fa ea 00 28 	ld.d	r10,sp[40]
80011e60:	e0 a0 11 46 	rcall	800140ec <__avr32_f64_add>
80011e64:	40 85       	lddsp	r5,sp[0x20]
80011e66:	fa e8 00 08 	ld.d	r8,sp[8]
80011e6a:	08 05       	add	r5,r4
80011e6c:	e0 a0 12 98 	rcall	8001439c <__avr32_f64_cmp_lt>
80011e70:	e0 81 00 99 	brne	80011fa2 <_dtoa_r+0x71a>
80011e74:	fa e8 00 28 	ld.d	r8,sp[40]
80011e78:	30 0a       	mov	r10,0
80011e7a:	fc 1b 3f e0 	movh	r11,0x3fe0
80011e7e:	e0 a0 10 69 	rcall	80013f50 <__avr32_f64_sub>
80011e82:	14 98       	mov	r8,r10
80011e84:	16 99       	mov	r9,r11
80011e86:	fa ea 00 08 	ld.d	r10,sp[8]
80011e8a:	e0 a0 12 89 	rcall	8001439c <__avr32_f64_cmp_lt>
80011e8e:	c1 30       	breq	80011eb4 <_dtoa_r+0x62c>
80011e90:	33 09       	mov	r9,48
80011e92:	0a 98       	mov	r8,r5
80011e94:	11 7a       	ld.ub	r10,--r8
80011e96:	f2 0a 18 00 	cp.b	r10,r9
80011e9a:	e0 81 02 d1 	brne	8001243c <_dtoa_r+0xbb4>
80011e9e:	10 95       	mov	r5,r8
80011ea0:	cf 9b       	rjmp	80011e92 <_dtoa_r+0x60a>
80011ea2:	d7 03       	nop
80011ea4:	30 08       	mov	r8,0
80011ea6:	fc 19 40 24 	movh	r9,0x4024
80011eaa:	e0 a0 0f 67 	rcall	80013d78 <__avr32_f64_mul>
80011eae:	fa eb 00 08 	st.d	sp[8],r10
80011eb2:	cb db       	rjmp	80011e2c <_dtoa_r+0x5a4>
80011eb4:	fa ea 00 3c 	ld.d	r10,sp[60]
80011eb8:	fa eb 00 08 	st.d	sp[8],r10
80011ebc:	58 e6       	cp.w	r6,14
80011ebe:	5f ab       	srle	r11
80011ec0:	41 8a       	lddsp	r10,sp[0x60]
80011ec2:	30 08       	mov	r8,0
80011ec4:	f4 09 11 ff 	rsub	r9,r10,-1
80011ec8:	f7 e9 03 f9 	and	r9,r11,r9>>0x1f
80011ecc:	f0 09 18 00 	cp.b	r9,r8
80011ed0:	e0 80 00 82 	breq	80011fd4 <_dtoa_r+0x74c>
80011ed4:	40 ea       	lddsp	r10,sp[0x38]
80011ed6:	58 01       	cp.w	r1,0
80011ed8:	5f a9       	srle	r9
80011eda:	f3 ea 03 f9 	and	r9,r9,r10>>0x1f
80011ede:	fe ca cb 36 	sub	r10,pc,-13514
80011ee2:	f4 06 02 34 	ld.d	r4,r10[r6<<0x3]
80011ee6:	fa e5 00 10 	st.d	sp[16],r4
80011eea:	f0 09 18 00 	cp.b	r9,r8
80011eee:	c1 40       	breq	80011f16 <_dtoa_r+0x68e>
80011ef0:	58 01       	cp.w	r1,0
80011ef2:	e0 81 01 77 	brne	800121e0 <_dtoa_r+0x958>
80011ef6:	30 08       	mov	r8,0
80011ef8:	fc 19 40 14 	movh	r9,0x4014
80011efc:	08 9a       	mov	r10,r4
80011efe:	0a 9b       	mov	r11,r5
80011f00:	e0 a0 0f 3c 	rcall	80013d78 <__avr32_f64_mul>
80011f04:	fa e8 00 08 	ld.d	r8,sp[8]
80011f08:	e0 a0 12 16 	rcall	80014334 <__avr32_f64_cmp_ge>
80011f0c:	e0 81 01 6a 	brne	800121e0 <_dtoa_r+0x958>
80011f10:	02 92       	mov	r2,r1
80011f12:	e0 8f 01 72 	bral	800121f6 <_dtoa_r+0x96e>
80011f16:	40 85       	lddsp	r5,sp[0x20]
80011f18:	30 14       	mov	r4,1
80011f1a:	fa e8 00 10 	ld.d	r8,sp[16]
80011f1e:	fa ea 00 08 	ld.d	r10,sp[8]
80011f22:	e0 a0 12 71 	rcall	80014404 <__avr32_f64_div>
80011f26:	e0 a0 11 6d 	rcall	80014200 <__avr32_f64_to_s32>
80011f2a:	18 92       	mov	r2,r12
80011f2c:	e0 a0 11 81 	rcall	8001422e <__avr32_s32_to_f64>
80011f30:	fa e8 00 10 	ld.d	r8,sp[16]
80011f34:	e0 a0 0f 22 	rcall	80013d78 <__avr32_f64_mul>
80011f38:	14 98       	mov	r8,r10
80011f3a:	16 99       	mov	r9,r11
80011f3c:	fa ea 00 08 	ld.d	r10,sp[8]
80011f40:	e0 a0 10 08 	rcall	80013f50 <__avr32_f64_sub>
80011f44:	fa eb 00 08 	st.d	sp[8],r10
80011f48:	e4 c8 ff d0 	sub	r8,r2,-48
80011f4c:	0a c8       	st.b	r5++,r8
80011f4e:	fc 19 40 24 	movh	r9,0x4024
80011f52:	30 08       	mov	r8,0
80011f54:	02 34       	cp.w	r4,r1
80011f56:	c3 31       	brne	80011fbc <_dtoa_r+0x734>
80011f58:	fa e8 00 08 	ld.d	r8,sp[8]
80011f5c:	e0 a0 10 c8 	rcall	800140ec <__avr32_f64_add>
80011f60:	16 91       	mov	r1,r11
80011f62:	14 90       	mov	r0,r10
80011f64:	14 98       	mov	r8,r10
80011f66:	02 99       	mov	r9,r1
80011f68:	fa ea 00 10 	ld.d	r10,sp[16]
80011f6c:	e0 a0 12 18 	rcall	8001439c <__avr32_f64_cmp_lt>
80011f70:	c1 a1       	brne	80011fa4 <_dtoa_r+0x71c>
80011f72:	fa e8 00 10 	ld.d	r8,sp[16]
80011f76:	00 9a       	mov	r10,r0
80011f78:	02 9b       	mov	r11,r1
80011f7a:	e0 a0 11 ca 	rcall	8001430e <__avr32_f64_cmp_eq>
80011f7e:	e0 80 02 5e 	breq	8001243a <_dtoa_r+0xbb2>
80011f82:	e5 d2 c0 01 	bfextu	r2,r2,0x0,0x1
80011f86:	c0 f1       	brne	80011fa4 <_dtoa_r+0x71c>
80011f88:	e0 8f 02 59 	bral	8001243a <_dtoa_r+0xbb2>
80011f8c:	40 8a       	lddsp	r10,sp[0x20]
80011f8e:	14 38       	cp.w	r8,r10
80011f90:	c0 30       	breq	80011f96 <_dtoa_r+0x70e>
80011f92:	10 95       	mov	r5,r8
80011f94:	c0 98       	rjmp	80011fa6 <_dtoa_r+0x71e>
80011f96:	33 08       	mov	r8,48
80011f98:	40 89       	lddsp	r9,sp[0x20]
80011f9a:	2f f6       	sub	r6,-1
80011f9c:	b2 88       	st.b	r9[0x0],r8
80011f9e:	40 88       	lddsp	r8,sp[0x20]
80011fa0:	c0 88       	rjmp	80011fb0 <_dtoa_r+0x728>
80011fa2:	40 66       	lddsp	r6,sp[0x18]
80011fa4:	33 99       	mov	r9,57
80011fa6:	0a 98       	mov	r8,r5
80011fa8:	11 7a       	ld.ub	r10,--r8
80011faa:	f2 0a 18 00 	cp.b	r10,r9
80011fae:	ce f0       	breq	80011f8c <_dtoa_r+0x704>
80011fb0:	50 66       	stdsp	sp[0x18],r6
80011fb2:	11 89       	ld.ub	r9,r8[0x0]
80011fb4:	2f f9       	sub	r9,-1
80011fb6:	b0 89       	st.b	r8[0x0],r9
80011fb8:	e0 8f 02 42 	bral	8001243c <_dtoa_r+0xbb4>
80011fbc:	e0 a0 0e de 	rcall	80013d78 <__avr32_f64_mul>
80011fc0:	2f f4       	sub	r4,-1
80011fc2:	fa eb 00 08 	st.d	sp[8],r10
80011fc6:	30 08       	mov	r8,0
80011fc8:	30 09       	mov	r9,0
80011fca:	e0 a0 11 a2 	rcall	8001430e <__avr32_f64_cmp_eq>
80011fce:	ca 60       	breq	80011f1a <_dtoa_r+0x692>
80011fd0:	e0 8f 02 35 	bral	8001243a <_dtoa_r+0xbb2>
80011fd4:	40 d8       	lddsp	r8,sp[0x34]
80011fd6:	58 08       	cp.w	r8,0
80011fd8:	c0 51       	brne	80011fe2 <_dtoa_r+0x75a>
80011fda:	04 98       	mov	r8,r2
80011fdc:	00 95       	mov	r5,r0
80011fde:	40 d4       	lddsp	r4,sp[0x34]
80011fe0:	c3 78       	rjmp	8001204e <_dtoa_r+0x7c6>
80011fe2:	40 c5       	lddsp	r5,sp[0x30]
80011fe4:	58 15       	cp.w	r5,1
80011fe6:	e0 89 00 0f 	brgt	80012004 <_dtoa_r+0x77c>
80011fea:	41 74       	lddsp	r4,sp[0x5c]
80011fec:	58 04       	cp.w	r4,0
80011fee:	c0 40       	breq	80011ff6 <_dtoa_r+0x76e>
80011ff0:	f4 c9 fb cd 	sub	r9,r10,-1075
80011ff4:	c0 48       	rjmp	80011ffc <_dtoa_r+0x774>
80011ff6:	41 99       	lddsp	r9,sp[0x64]
80011ff8:	f2 09 11 36 	rsub	r9,r9,54
80011ffc:	04 98       	mov	r8,r2
80011ffe:	00 95       	mov	r5,r0
80012000:	c1 c8       	rjmp	80012038 <_dtoa_r+0x7b0>
80012002:	d7 03       	nop
80012004:	e2 c8 00 01 	sub	r8,r1,1
80012008:	58 01       	cp.w	r1,0
8001200a:	e0 05 17 40 	movge	r5,r0
8001200e:	e2 09 17 40 	movge	r9,r1
80012012:	e1 d1 e5 15 	sublt	r5,r0,r1
80012016:	f9 b9 05 00 	movlt	r9,0
8001201a:	10 32       	cp.w	r2,r8
8001201c:	e5 d8 e4 18 	subge	r8,r2,r8
80012020:	f1 d2 e5 18 	sublt	r8,r8,r2
80012024:	e5 d8 e5 02 	addlt	r2,r2,r8
80012028:	fb fc 50 11 	ld.wlt	r12,sp[0x44]
8001202c:	f9 d8 e5 0c 	addlt	r12,r12,r8
80012030:	fb fc 5a 11 	st.wlt	sp[0x44],r12
80012034:	f9 b8 05 00 	movlt	r8,0
80012038:	40 4b       	lddsp	r11,sp[0x10]
8001203a:	12 0b       	add	r11,r9
8001203c:	50 08       	stdsp	sp[0x0],r8
8001203e:	50 4b       	stdsp	sp[0x10],r11
80012040:	12 00       	add	r0,r9
80012042:	30 1b       	mov	r11,1
80012044:	0e 9c       	mov	r12,r7
80012046:	e0 a0 0a c9 	rcall	800135d8 <__i2b>
8001204a:	40 08       	lddsp	r8,sp[0x0]
8001204c:	18 94       	mov	r4,r12
8001204e:	40 4a       	lddsp	r10,sp[0x10]
80012050:	58 05       	cp.w	r5,0
80012052:	5f 99       	srgt	r9
80012054:	58 0a       	cp.w	r10,0
80012056:	5f 9a       	srgt	r10
80012058:	f5 e9 00 09 	and	r9,r10,r9
8001205c:	c0 80       	breq	8001206c <_dtoa_r+0x7e4>
8001205e:	40 4c       	lddsp	r12,sp[0x10]
80012060:	f8 05 0d 49 	min	r9,r12,r5
80012064:	12 1c       	sub	r12,r9
80012066:	12 10       	sub	r0,r9
80012068:	50 4c       	stdsp	sp[0x10],r12
8001206a:	12 15       	sub	r5,r9
8001206c:	58 02       	cp.w	r2,0
8001206e:	e0 8a 00 27 	brle	800120bc <_dtoa_r+0x834>
80012072:	40 db       	lddsp	r11,sp[0x34]
80012074:	58 0b       	cp.w	r11,0
80012076:	c1 d0       	breq	800120b0 <_dtoa_r+0x828>
80012078:	58 08       	cp.w	r8,0
8001207a:	e0 8a 00 17 	brle	800120a8 <_dtoa_r+0x820>
8001207e:	10 9a       	mov	r10,r8
80012080:	50 08       	stdsp	sp[0x0],r8
80012082:	08 9b       	mov	r11,r4
80012084:	0e 9c       	mov	r12,r7
80012086:	e0 a0 0a ef 	rcall	80013664 <__pow5mult>
8001208a:	06 9a       	mov	r10,r3
8001208c:	18 9b       	mov	r11,r12
8001208e:	18 94       	mov	r4,r12
80012090:	0e 9c       	mov	r12,r7
80012092:	e0 a0 0a 23 	rcall	800134d8 <__multiply>
80012096:	18 99       	mov	r9,r12
80012098:	06 9b       	mov	r11,r3
8001209a:	50 19       	stdsp	sp[0x4],r9
8001209c:	0e 9c       	mov	r12,r7
8001209e:	e0 a0 08 cf 	rcall	8001323c <_Bfree>
800120a2:	40 19       	lddsp	r9,sp[0x4]
800120a4:	40 08       	lddsp	r8,sp[0x0]
800120a6:	12 93       	mov	r3,r9
800120a8:	e4 08 01 0a 	sub	r10,r2,r8
800120ac:	c0 80       	breq	800120bc <_dtoa_r+0x834>
800120ae:	c0 28       	rjmp	800120b2 <_dtoa_r+0x82a>
800120b0:	04 9a       	mov	r10,r2
800120b2:	06 9b       	mov	r11,r3
800120b4:	0e 9c       	mov	r12,r7
800120b6:	e0 a0 0a d7 	rcall	80013664 <__pow5mult>
800120ba:	18 93       	mov	r3,r12
800120bc:	30 1b       	mov	r11,1
800120be:	0e 9c       	mov	r12,r7
800120c0:	e0 a0 0a 8c 	rcall	800135d8 <__i2b>
800120c4:	41 1a       	lddsp	r10,sp[0x44]
800120c6:	18 92       	mov	r2,r12
800120c8:	58 0a       	cp.w	r10,0
800120ca:	e0 8a 00 07 	brle	800120d8 <_dtoa_r+0x850>
800120ce:	18 9b       	mov	r11,r12
800120d0:	0e 9c       	mov	r12,r7
800120d2:	e0 a0 0a c9 	rcall	80013664 <__pow5mult>
800120d6:	18 92       	mov	r2,r12
800120d8:	40 c9       	lddsp	r9,sp[0x30]
800120da:	58 19       	cp.w	r9,1
800120dc:	e0 89 00 14 	brgt	80012104 <_dtoa_r+0x87c>
800120e0:	40 38       	lddsp	r8,sp[0xc]
800120e2:	58 08       	cp.w	r8,0
800120e4:	c1 01       	brne	80012104 <_dtoa_r+0x87c>
800120e6:	40 29       	lddsp	r9,sp[0x8]
800120e8:	f1 d9 c0 14 	bfextu	r8,r9,0x0,0x14
800120ec:	c0 c1       	brne	80012104 <_dtoa_r+0x87c>
800120ee:	12 98       	mov	r8,r9
800120f0:	e6 18 7f f0 	andh	r8,0x7ff0,COH
800120f4:	c0 80       	breq	80012104 <_dtoa_r+0x87c>
800120f6:	40 4c       	lddsp	r12,sp[0x10]
800120f8:	30 1b       	mov	r11,1
800120fa:	2f fc       	sub	r12,-1
800120fc:	2f f0       	sub	r0,-1
800120fe:	50 4c       	stdsp	sp[0x10],r12
80012100:	50 6b       	stdsp	sp[0x18],r11
80012102:	c0 38       	rjmp	80012108 <_dtoa_r+0x880>
80012104:	30 0a       	mov	r10,0
80012106:	50 6a       	stdsp	sp[0x18],r10
80012108:	41 19       	lddsp	r9,sp[0x44]
8001210a:	58 09       	cp.w	r9,0
8001210c:	c0 31       	brne	80012112 <_dtoa_r+0x88a>
8001210e:	30 1c       	mov	r12,1
80012110:	c0 98       	rjmp	80012122 <_dtoa_r+0x89a>
80012112:	64 48       	ld.w	r8,r2[0x10]
80012114:	2f c8       	sub	r8,-4
80012116:	e4 08 03 2c 	ld.w	r12,r2[r8<<0x2]
8001211a:	e0 a0 08 01 	rcall	8001311c <__hi0bits>
8001211e:	f8 0c 11 20 	rsub	r12,r12,32
80012122:	40 4b       	lddsp	r11,sp[0x10]
80012124:	f8 0b 00 08 	add	r8,r12,r11
80012128:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8001212c:	c0 c0       	breq	80012144 <_dtoa_r+0x8bc>
8001212e:	f0 08 11 20 	rsub	r8,r8,32
80012132:	58 48       	cp.w	r8,4
80012134:	e0 8a 00 06 	brle	80012140 <_dtoa_r+0x8b8>
80012138:	20 48       	sub	r8,4
8001213a:	10 0b       	add	r11,r8
8001213c:	50 4b       	stdsp	sp[0x10],r11
8001213e:	c0 78       	rjmp	8001214c <_dtoa_r+0x8c4>
80012140:	58 48       	cp.w	r8,4
80012142:	c0 70       	breq	80012150 <_dtoa_r+0x8c8>
80012144:	40 4a       	lddsp	r10,sp[0x10]
80012146:	2e 48       	sub	r8,-28
80012148:	10 0a       	add	r10,r8
8001214a:	50 4a       	stdsp	sp[0x10],r10
8001214c:	10 00       	add	r0,r8
8001214e:	10 05       	add	r5,r8
80012150:	58 00       	cp.w	r0,0
80012152:	e0 8a 00 08 	brle	80012162 <_dtoa_r+0x8da>
80012156:	06 9b       	mov	r11,r3
80012158:	00 9a       	mov	r10,r0
8001215a:	0e 9c       	mov	r12,r7
8001215c:	e0 a0 09 7a 	rcall	80013450 <__lshift>
80012160:	18 93       	mov	r3,r12
80012162:	40 49       	lddsp	r9,sp[0x10]
80012164:	58 09       	cp.w	r9,0
80012166:	e0 8a 00 08 	brle	80012176 <_dtoa_r+0x8ee>
8001216a:	04 9b       	mov	r11,r2
8001216c:	12 9a       	mov	r10,r9
8001216e:	0e 9c       	mov	r12,r7
80012170:	e0 a0 09 70 	rcall	80013450 <__lshift>
80012174:	18 92       	mov	r2,r12
80012176:	41 48       	lddsp	r8,sp[0x50]
80012178:	58 08       	cp.w	r8,0
8001217a:	c1 b0       	breq	800121b0 <_dtoa_r+0x928>
8001217c:	04 9b       	mov	r11,r2
8001217e:	06 9c       	mov	r12,r3
80012180:	e0 a0 08 45 	rcall	8001320a <__mcmp>
80012184:	c1 64       	brge	800121b0 <_dtoa_r+0x928>
80012186:	06 9b       	mov	r11,r3
80012188:	30 09       	mov	r9,0
8001218a:	30 aa       	mov	r10,10
8001218c:	0e 9c       	mov	r12,r7
8001218e:	e0 a0 0a 2d 	rcall	800135e8 <__multadd>
80012192:	20 16       	sub	r6,1
80012194:	18 93       	mov	r3,r12
80012196:	40 dc       	lddsp	r12,sp[0x34]
80012198:	58 0c       	cp.w	r12,0
8001219a:	c0 31       	brne	800121a0 <_dtoa_r+0x918>
8001219c:	40 91       	lddsp	r1,sp[0x24]
8001219e:	c0 98       	rjmp	800121b0 <_dtoa_r+0x928>
800121a0:	08 9b       	mov	r11,r4
800121a2:	40 91       	lddsp	r1,sp[0x24]
800121a4:	30 09       	mov	r9,0
800121a6:	30 aa       	mov	r10,10
800121a8:	0e 9c       	mov	r12,r7
800121aa:	e0 a0 0a 1f 	rcall	800135e8 <__multadd>
800121ae:	18 94       	mov	r4,r12
800121b0:	58 01       	cp.w	r1,0
800121b2:	5f a9       	srle	r9
800121b4:	40 cb       	lddsp	r11,sp[0x30]
800121b6:	58 2b       	cp.w	r11,2
800121b8:	5f 98       	srgt	r8
800121ba:	f3 e8 00 08 	and	r8,r9,r8
800121be:	c2 50       	breq	80012208 <_dtoa_r+0x980>
800121c0:	58 01       	cp.w	r1,0
800121c2:	c1 11       	brne	800121e4 <_dtoa_r+0x95c>
800121c4:	04 9b       	mov	r11,r2
800121c6:	02 99       	mov	r9,r1
800121c8:	30 5a       	mov	r10,5
800121ca:	0e 9c       	mov	r12,r7
800121cc:	e0 a0 0a 0e 	rcall	800135e8 <__multadd>
800121d0:	18 92       	mov	r2,r12
800121d2:	18 9b       	mov	r11,r12
800121d4:	06 9c       	mov	r12,r3
800121d6:	e0 a0 08 1a 	rcall	8001320a <__mcmp>
800121da:	e0 89 00 0f 	brgt	800121f8 <_dtoa_r+0x970>
800121de:	c0 38       	rjmp	800121e4 <_dtoa_r+0x95c>
800121e0:	30 02       	mov	r2,0
800121e2:	04 94       	mov	r4,r2
800121e4:	40 ea       	lddsp	r10,sp[0x38]
800121e6:	30 09       	mov	r9,0
800121e8:	5c da       	com	r10
800121ea:	40 85       	lddsp	r5,sp[0x20]
800121ec:	50 6a       	stdsp	sp[0x18],r10
800121ee:	50 49       	stdsp	sp[0x10],r9
800121f0:	c0 f9       	rjmp	8001240e <_dtoa_r+0xb86>
800121f2:	08 92       	mov	r2,r4
800121f4:	40 66       	lddsp	r6,sp[0x18]
800121f6:	04 94       	mov	r4,r2
800121f8:	2f f6       	sub	r6,-1
800121fa:	50 66       	stdsp	sp[0x18],r6
800121fc:	33 18       	mov	r8,49
800121fe:	40 85       	lddsp	r5,sp[0x20]
80012200:	0a c8       	st.b	r5++,r8
80012202:	30 08       	mov	r8,0
80012204:	50 48       	stdsp	sp[0x10],r8
80012206:	c0 49       	rjmp	8001240e <_dtoa_r+0xb86>
80012208:	40 dc       	lddsp	r12,sp[0x34]
8001220a:	58 0c       	cp.w	r12,0
8001220c:	e0 80 00 b5 	breq	80012376 <_dtoa_r+0xaee>
80012210:	58 05       	cp.w	r5,0
80012212:	e0 8a 00 08 	brle	80012222 <_dtoa_r+0x99a>
80012216:	08 9b       	mov	r11,r4
80012218:	0a 9a       	mov	r10,r5
8001221a:	0e 9c       	mov	r12,r7
8001221c:	e0 a0 09 1a 	rcall	80013450 <__lshift>
80012220:	18 94       	mov	r4,r12
80012222:	40 6b       	lddsp	r11,sp[0x18]
80012224:	58 0b       	cp.w	r11,0
80012226:	c0 31       	brne	8001222c <_dtoa_r+0x9a4>
80012228:	08 9c       	mov	r12,r4
8001222a:	c1 38       	rjmp	80012250 <_dtoa_r+0x9c8>
8001222c:	68 1b       	ld.w	r11,r4[0x4]
8001222e:	0e 9c       	mov	r12,r7
80012230:	e0 a0 08 20 	rcall	80013270 <_Balloc>
80012234:	68 4a       	ld.w	r10,r4[0x10]
80012236:	18 95       	mov	r5,r12
80012238:	e8 cb ff f4 	sub	r11,r4,-12
8001223c:	2f ea       	sub	r10,-2
8001223e:	2f 4c       	sub	r12,-12
80012240:	a3 6a       	lsl	r10,0x2
80012242:	fe b0 e7 ea 	rcall	8000f216 <memcpy>
80012246:	0a 9b       	mov	r11,r5
80012248:	30 1a       	mov	r10,1
8001224a:	0e 9c       	mov	r12,r7
8001224c:	e0 a0 09 02 	rcall	80013450 <__lshift>
80012250:	50 44       	stdsp	sp[0x10],r4
80012252:	40 3a       	lddsp	r10,sp[0xc]
80012254:	30 19       	mov	r9,1
80012256:	f5 da c0 01 	bfextu	r10,r10,0x0,0x1
8001225a:	18 94       	mov	r4,r12
8001225c:	50 da       	stdsp	sp[0x34],r10
8001225e:	40 85       	lddsp	r5,sp[0x20]
80012260:	50 99       	stdsp	sp[0x24],r9
80012262:	50 26       	stdsp	sp[0x8],r6
80012264:	50 e1       	stdsp	sp[0x38],r1
80012266:	04 9b       	mov	r11,r2
80012268:	06 9c       	mov	r12,r3
8001226a:	fe b0 fa 7f 	rcall	80011768 <quorem>
8001226e:	40 4b       	lddsp	r11,sp[0x10]
80012270:	f8 c0 ff d0 	sub	r0,r12,-48
80012274:	06 9c       	mov	r12,r3
80012276:	e0 a0 07 ca 	rcall	8001320a <__mcmp>
8001227a:	08 9a       	mov	r10,r4
8001227c:	50 6c       	stdsp	sp[0x18],r12
8001227e:	04 9b       	mov	r11,r2
80012280:	0e 9c       	mov	r12,r7
80012282:	e0 a0 08 7f 	rcall	80013380 <__mdiff>
80012286:	18 91       	mov	r1,r12
80012288:	78 38       	ld.w	r8,r12[0xc]
8001228a:	58 08       	cp.w	r8,0
8001228c:	c0 30       	breq	80012292 <_dtoa_r+0xa0a>
8001228e:	30 16       	mov	r6,1
80012290:	c0 68       	rjmp	8001229c <_dtoa_r+0xa14>
80012292:	18 9b       	mov	r11,r12
80012294:	06 9c       	mov	r12,r3
80012296:	e0 a0 07 ba 	rcall	8001320a <__mcmp>
8001229a:	18 96       	mov	r6,r12
8001229c:	0e 9c       	mov	r12,r7
8001229e:	02 9b       	mov	r11,r1
800122a0:	e0 a0 07 ce 	rcall	8001323c <_Bfree>
800122a4:	40 cc       	lddsp	r12,sp[0x30]
800122a6:	ed ec 10 08 	or	r8,r6,r12
800122aa:	c0 d1       	brne	800122c4 <_dtoa_r+0xa3c>
800122ac:	40 db       	lddsp	r11,sp[0x34]
800122ae:	58 0b       	cp.w	r11,0
800122b0:	c0 a1       	brne	800122c4 <_dtoa_r+0xa3c>
800122b2:	40 26       	lddsp	r6,sp[0x8]
800122b4:	e0 40 00 39 	cp.w	r0,57
800122b8:	c3 00       	breq	80012318 <_dtoa_r+0xa90>
800122ba:	40 6a       	lddsp	r10,sp[0x18]
800122bc:	58 0a       	cp.w	r10,0
800122be:	e0 89 00 24 	brgt	80012306 <_dtoa_r+0xa7e>
800122c2:	c2 f8       	rjmp	80012320 <_dtoa_r+0xa98>
800122c4:	40 69       	lddsp	r9,sp[0x18]
800122c6:	58 09       	cp.w	r9,0
800122c8:	c0 85       	brlt	800122d8 <_dtoa_r+0xa50>
800122ca:	12 98       	mov	r8,r9
800122cc:	40 cc       	lddsp	r12,sp[0x30]
800122ce:	18 48       	or	r8,r12
800122d0:	c1 d1       	brne	8001230a <_dtoa_r+0xa82>
800122d2:	40 db       	lddsp	r11,sp[0x34]
800122d4:	58 0b       	cp.w	r11,0
800122d6:	c1 a1       	brne	8001230a <_dtoa_r+0xa82>
800122d8:	0c 99       	mov	r9,r6
800122da:	40 26       	lddsp	r6,sp[0x8]
800122dc:	58 09       	cp.w	r9,0
800122de:	e0 8a 00 21 	brle	80012320 <_dtoa_r+0xa98>
800122e2:	06 9b       	mov	r11,r3
800122e4:	30 1a       	mov	r10,1
800122e6:	0e 9c       	mov	r12,r7
800122e8:	e0 a0 08 b4 	rcall	80013450 <__lshift>
800122ec:	04 9b       	mov	r11,r2
800122ee:	18 93       	mov	r3,r12
800122f0:	e0 a0 07 8d 	rcall	8001320a <__mcmp>
800122f4:	e0 89 00 06 	brgt	80012300 <_dtoa_r+0xa78>
800122f8:	c1 41       	brne	80012320 <_dtoa_r+0xa98>
800122fa:	ed b0 00 00 	bld	r0,0x0
800122fe:	c1 11       	brne	80012320 <_dtoa_r+0xa98>
80012300:	e0 40 00 39 	cp.w	r0,57
80012304:	c0 a0       	breq	80012318 <_dtoa_r+0xa90>
80012306:	2f f0       	sub	r0,-1
80012308:	c0 c8       	rjmp	80012320 <_dtoa_r+0xa98>
8001230a:	58 06       	cp.w	r6,0
8001230c:	e0 8a 00 0c 	brle	80012324 <_dtoa_r+0xa9c>
80012310:	40 26       	lddsp	r6,sp[0x8]
80012312:	e0 40 00 39 	cp.w	r0,57
80012316:	c0 41       	brne	8001231e <_dtoa_r+0xa96>
80012318:	33 98       	mov	r8,57
8001231a:	0a c8       	st.b	r5++,r8
8001231c:	c6 78       	rjmp	800123ea <_dtoa_r+0xb62>
8001231e:	2f f0       	sub	r0,-1
80012320:	0a c0       	st.b	r5++,r0
80012322:	c7 58       	rjmp	8001240c <_dtoa_r+0xb84>
80012324:	0a c0       	st.b	r5++,r0
80012326:	40 9a       	lddsp	r10,sp[0x24]
80012328:	40 e9       	lddsp	r9,sp[0x38]
8001232a:	12 3a       	cp.w	r10,r9
8001232c:	c4 30       	breq	800123b2 <_dtoa_r+0xb2a>
8001232e:	06 9b       	mov	r11,r3
80012330:	30 09       	mov	r9,0
80012332:	30 aa       	mov	r10,10
80012334:	0e 9c       	mov	r12,r7
80012336:	e0 a0 09 59 	rcall	800135e8 <__multadd>
8001233a:	40 48       	lddsp	r8,sp[0x10]
8001233c:	18 93       	mov	r3,r12
8001233e:	08 38       	cp.w	r8,r4
80012340:	c0 91       	brne	80012352 <_dtoa_r+0xaca>
80012342:	10 9b       	mov	r11,r8
80012344:	30 09       	mov	r9,0
80012346:	30 aa       	mov	r10,10
80012348:	0e 9c       	mov	r12,r7
8001234a:	e0 a0 09 4f 	rcall	800135e8 <__multadd>
8001234e:	50 4c       	stdsp	sp[0x10],r12
80012350:	c0 e8       	rjmp	8001236c <_dtoa_r+0xae4>
80012352:	40 4b       	lddsp	r11,sp[0x10]
80012354:	30 09       	mov	r9,0
80012356:	30 aa       	mov	r10,10
80012358:	0e 9c       	mov	r12,r7
8001235a:	e0 a0 09 47 	rcall	800135e8 <__multadd>
8001235e:	08 9b       	mov	r11,r4
80012360:	50 4c       	stdsp	sp[0x10],r12
80012362:	30 09       	mov	r9,0
80012364:	30 aa       	mov	r10,10
80012366:	0e 9c       	mov	r12,r7
80012368:	e0 a0 09 40 	rcall	800135e8 <__multadd>
8001236c:	18 94       	mov	r4,r12
8001236e:	40 9c       	lddsp	r12,sp[0x24]
80012370:	2f fc       	sub	r12,-1
80012372:	50 9c       	stdsp	sp[0x24],r12
80012374:	c7 9b       	rjmp	80012266 <_dtoa_r+0x9de>
80012376:	30 18       	mov	r8,1
80012378:	06 90       	mov	r0,r3
8001237a:	40 85       	lddsp	r5,sp[0x20]
8001237c:	08 93       	mov	r3,r4
8001237e:	0c 94       	mov	r4,r6
80012380:	10 96       	mov	r6,r8
80012382:	04 9b       	mov	r11,r2
80012384:	00 9c       	mov	r12,r0
80012386:	fe b0 f9 f1 	rcall	80011768 <quorem>
8001238a:	2d 0c       	sub	r12,-48
8001238c:	0a cc       	st.b	r5++,r12
8001238e:	02 36       	cp.w	r6,r1
80012390:	c0 a4       	brge	800123a4 <_dtoa_r+0xb1c>
80012392:	00 9b       	mov	r11,r0
80012394:	30 09       	mov	r9,0
80012396:	30 aa       	mov	r10,10
80012398:	0e 9c       	mov	r12,r7
8001239a:	2f f6       	sub	r6,-1
8001239c:	e0 a0 09 26 	rcall	800135e8 <__multadd>
800123a0:	18 90       	mov	r0,r12
800123a2:	cf 0b       	rjmp	80012382 <_dtoa_r+0xafa>
800123a4:	08 96       	mov	r6,r4
800123a6:	30 0b       	mov	r11,0
800123a8:	06 94       	mov	r4,r3
800123aa:	50 4b       	stdsp	sp[0x10],r11
800123ac:	00 93       	mov	r3,r0
800123ae:	18 90       	mov	r0,r12
800123b0:	c0 28       	rjmp	800123b4 <_dtoa_r+0xb2c>
800123b2:	40 26       	lddsp	r6,sp[0x8]
800123b4:	06 9b       	mov	r11,r3
800123b6:	30 1a       	mov	r10,1
800123b8:	0e 9c       	mov	r12,r7
800123ba:	e0 a0 08 4b 	rcall	80013450 <__lshift>
800123be:	04 9b       	mov	r11,r2
800123c0:	18 93       	mov	r3,r12
800123c2:	e0 a0 07 24 	rcall	8001320a <__mcmp>
800123c6:	e0 89 00 12 	brgt	800123ea <_dtoa_r+0xb62>
800123ca:	c1 b1       	brne	80012400 <_dtoa_r+0xb78>
800123cc:	e1 d0 c0 01 	bfextu	r0,r0,0x0,0x1
800123d0:	c0 d1       	brne	800123ea <_dtoa_r+0xb62>
800123d2:	c1 78       	rjmp	80012400 <_dtoa_r+0xb78>
800123d4:	40 89       	lddsp	r9,sp[0x20]
800123d6:	12 38       	cp.w	r8,r9
800123d8:	c0 30       	breq	800123de <_dtoa_r+0xb56>
800123da:	10 95       	mov	r5,r8
800123dc:	c0 88       	rjmp	800123ec <_dtoa_r+0xb64>
800123de:	2f f6       	sub	r6,-1
800123e0:	50 66       	stdsp	sp[0x18],r6
800123e2:	33 18       	mov	r8,49
800123e4:	40 8c       	lddsp	r12,sp[0x20]
800123e6:	b8 88       	st.b	r12[0x0],r8
800123e8:	c1 38       	rjmp	8001240e <_dtoa_r+0xb86>
800123ea:	33 9a       	mov	r10,57
800123ec:	0a 98       	mov	r8,r5
800123ee:	11 79       	ld.ub	r9,--r8
800123f0:	f4 09 18 00 	cp.b	r9,r10
800123f4:	cf 00       	breq	800123d4 <_dtoa_r+0xb4c>
800123f6:	2f f9       	sub	r9,-1
800123f8:	b0 89       	st.b	r8[0x0],r9
800123fa:	c0 98       	rjmp	8001240c <_dtoa_r+0xb84>
800123fc:	10 95       	mov	r5,r8
800123fe:	c0 28       	rjmp	80012402 <_dtoa_r+0xb7a>
80012400:	33 09       	mov	r9,48
80012402:	0a 98       	mov	r8,r5
80012404:	11 7a       	ld.ub	r10,--r8
80012406:	f2 0a 18 00 	cp.b	r10,r9
8001240a:	cf 90       	breq	800123fc <_dtoa_r+0xb74>
8001240c:	50 66       	stdsp	sp[0x18],r6
8001240e:	04 9b       	mov	r11,r2
80012410:	0e 9c       	mov	r12,r7
80012412:	e0 a0 07 15 	rcall	8001323c <_Bfree>
80012416:	58 04       	cp.w	r4,0
80012418:	c1 20       	breq	8001243c <_dtoa_r+0xbb4>
8001241a:	40 4b       	lddsp	r11,sp[0x10]
8001241c:	08 3b       	cp.w	r11,r4
8001241e:	5f 19       	srne	r9
80012420:	58 0b       	cp.w	r11,0
80012422:	5f 18       	srne	r8
80012424:	f3 e8 00 08 	and	r8,r9,r8
80012428:	c0 40       	breq	80012430 <_dtoa_r+0xba8>
8001242a:	0e 9c       	mov	r12,r7
8001242c:	e0 a0 07 08 	rcall	8001323c <_Bfree>
80012430:	08 9b       	mov	r11,r4
80012432:	0e 9c       	mov	r12,r7
80012434:	e0 a0 07 04 	rcall	8001323c <_Bfree>
80012438:	c0 28       	rjmp	8001243c <_dtoa_r+0xbb4>
8001243a:	50 66       	stdsp	sp[0x18],r6
8001243c:	0e 9c       	mov	r12,r7
8001243e:	06 9b       	mov	r11,r3
80012440:	e0 a0 06 fe 	rcall	8001323c <_Bfree>
80012444:	30 08       	mov	r8,0
80012446:	aa 88       	st.b	r5[0x0],r8
80012448:	40 68       	lddsp	r8,sp[0x18]
8001244a:	41 5a       	lddsp	r10,sp[0x54]
8001244c:	2f f8       	sub	r8,-1
8001244e:	41 29       	lddsp	r9,sp[0x48]
80012450:	95 08       	st.w	r10[0x0],r8
80012452:	40 8c       	lddsp	r12,sp[0x20]
80012454:	58 09       	cp.w	r9,0
80012456:	fb f8 10 12 	ld.wne	r8,sp[0x48]
8001245a:	f1 f5 1a 00 	st.wne	r8[0x0],r5
8001245e:	2e 6d       	sub	sp,-104
80012460:	d8 32       	popm	r0-r7,pc
80012462:	d7 03       	nop

80012464 <_fflush_r>:
80012464:	d4 21       	pushm	r4-r7,lr
80012466:	16 97       	mov	r7,r11
80012468:	18 96       	mov	r6,r12
8001246a:	76 48       	ld.w	r8,r11[0x10]
8001246c:	58 08       	cp.w	r8,0
8001246e:	c7 f0       	breq	8001256c <_fflush_r+0x108>
80012470:	58 0c       	cp.w	r12,0
80012472:	c0 50       	breq	8001247c <_fflush_r+0x18>
80012474:	78 68       	ld.w	r8,r12[0x18]
80012476:	58 08       	cp.w	r8,0
80012478:	c0 21       	brne	8001247c <_fflush_r+0x18>
8001247a:	cc dc       	rcall	80012614 <__sinit>
8001247c:	fe c8 d1 88 	sub	r8,pc,-11896
80012480:	10 37       	cp.w	r7,r8
80012482:	c0 31       	brne	80012488 <_fflush_r+0x24>
80012484:	6c 07       	ld.w	r7,r6[0x0]
80012486:	c0 c8       	rjmp	8001249e <_fflush_r+0x3a>
80012488:	fe c8 d1 74 	sub	r8,pc,-11916
8001248c:	10 37       	cp.w	r7,r8
8001248e:	c0 31       	brne	80012494 <_fflush_r+0x30>
80012490:	6c 17       	ld.w	r7,r6[0x4]
80012492:	c0 68       	rjmp	8001249e <_fflush_r+0x3a>
80012494:	fe c8 d1 60 	sub	r8,pc,-11936
80012498:	10 37       	cp.w	r7,r8
8001249a:	ed f7 00 02 	ld.weq	r7,r6[0x8]
8001249e:	8e 6a       	ld.sh	r10,r7[0xc]
800124a0:	14 98       	mov	r8,r10
800124a2:	ed ba 00 03 	bld	r10,0x3
800124a6:	c4 20       	breq	8001252a <_fflush_r+0xc6>
800124a8:	ab ba       	sbr	r10,0xb
800124aa:	ae 6a       	st.h	r7[0xc],r10
800124ac:	6e 18       	ld.w	r8,r7[0x4]
800124ae:	58 08       	cp.w	r8,0
800124b0:	e0 89 00 06 	brgt	800124bc <_fflush_r+0x58>
800124b4:	6f 08       	ld.w	r8,r7[0x40]
800124b6:	58 08       	cp.w	r8,0
800124b8:	e0 8a 00 5a 	brle	8001256c <_fflush_r+0x108>
800124bc:	6e b8       	ld.w	r8,r7[0x2c]
800124be:	58 08       	cp.w	r8,0
800124c0:	c5 60       	breq	8001256c <_fflush_r+0x108>
800124c2:	e2 1a 10 00 	andl	r10,0x1000,COH
800124c6:	c0 30       	breq	800124cc <_fflush_r+0x68>
800124c8:	6f 55       	ld.w	r5,r7[0x54]
800124ca:	c0 f8       	rjmp	800124e8 <_fflush_r+0x84>
800124cc:	30 19       	mov	r9,1
800124ce:	6e 8b       	ld.w	r11,r7[0x20]
800124d0:	0c 9c       	mov	r12,r6
800124d2:	5d 18       	icall	r8
800124d4:	18 95       	mov	r5,r12
800124d6:	5b fc       	cp.w	r12,-1
800124d8:	c0 81       	brne	800124e8 <_fflush_r+0x84>
800124da:	6c 38       	ld.w	r8,r6[0xc]
800124dc:	59 d8       	cp.w	r8,29
800124de:	c4 70       	breq	8001256c <_fflush_r+0x108>
800124e0:	8e 68       	ld.sh	r8,r7[0xc]
800124e2:	a7 a8       	sbr	r8,0x6
800124e4:	ae 68       	st.h	r7[0xc],r8
800124e6:	d8 22       	popm	r4-r7,pc
800124e8:	8e 68       	ld.sh	r8,r7[0xc]
800124ea:	ed b8 00 02 	bld	r8,0x2
800124ee:	c0 91       	brne	80012500 <_fflush_r+0x9c>
800124f0:	6e 18       	ld.w	r8,r7[0x4]
800124f2:	10 15       	sub	r5,r8
800124f4:	6e d8       	ld.w	r8,r7[0x34]
800124f6:	58 08       	cp.w	r8,0
800124f8:	ef f8 10 10 	ld.wne	r8,r7[0x40]
800124fc:	eb d8 e1 15 	subne	r5,r5,r8
80012500:	6e b8       	ld.w	r8,r7[0x2c]
80012502:	0c 9c       	mov	r12,r6
80012504:	30 09       	mov	r9,0
80012506:	0a 9a       	mov	r10,r5
80012508:	6e 8b       	ld.w	r11,r7[0x20]
8001250a:	5d 18       	icall	r8
8001250c:	8e 68       	ld.sh	r8,r7[0xc]
8001250e:	0a 3c       	cp.w	r12,r5
80012510:	c2 61       	brne	8001255c <_fflush_r+0xf8>
80012512:	ab d8       	cbr	r8,0xb
80012514:	30 0c       	mov	r12,0
80012516:	6e 49       	ld.w	r9,r7[0x10]
80012518:	ae 68       	st.h	r7[0xc],r8
8001251a:	8f 1c       	st.w	r7[0x4],r12
8001251c:	8f 09       	st.w	r7[0x0],r9
8001251e:	ed b8 00 0c 	bld	r8,0xc
80012522:	c2 51       	brne	8001256c <_fflush_r+0x108>
80012524:	ef 45 00 54 	st.w	r7[84],r5
80012528:	d8 22       	popm	r4-r7,pc
8001252a:	6e 45       	ld.w	r5,r7[0x10]
8001252c:	58 05       	cp.w	r5,0
8001252e:	c1 f0       	breq	8001256c <_fflush_r+0x108>
80012530:	6e 04       	ld.w	r4,r7[0x0]
80012532:	f5 da c0 02 	bfextu	r10,r10,0x0,0x2
80012536:	8f 05       	st.w	r7[0x0],r5
80012538:	f9 b8 01 00 	movne	r8,0
8001253c:	ef f8 00 05 	ld.weq	r8,r7[0x14]
80012540:	0a 14       	sub	r4,r5
80012542:	8f 28       	st.w	r7[0x8],r8
80012544:	c1 18       	rjmp	80012566 <_fflush_r+0x102>
80012546:	08 99       	mov	r9,r4
80012548:	0a 9a       	mov	r10,r5
8001254a:	6e a8       	ld.w	r8,r7[0x28]
8001254c:	6e 8b       	ld.w	r11,r7[0x20]
8001254e:	0c 9c       	mov	r12,r6
80012550:	5d 18       	icall	r8
80012552:	18 14       	sub	r4,r12
80012554:	58 0c       	cp.w	r12,0
80012556:	e0 89 00 07 	brgt	80012564 <_fflush_r+0x100>
8001255a:	8e 68       	ld.sh	r8,r7[0xc]
8001255c:	a7 a8       	sbr	r8,0x6
8001255e:	3f fc       	mov	r12,-1
80012560:	ae 68       	st.h	r7[0xc],r8
80012562:	d8 22       	popm	r4-r7,pc
80012564:	18 05       	add	r5,r12
80012566:	58 04       	cp.w	r4,0
80012568:	fe 99 ff ef 	brgt	80012546 <_fflush_r+0xe2>
8001256c:	d8 2a       	popm	r4-r7,pc,r12=0
8001256e:	d7 03       	nop

80012570 <__sfp_lock_acquire>:
80012570:	5e fc       	retal	r12

80012572 <__sfp_lock_release>:
80012572:	5e fc       	retal	r12

80012574 <_cleanup_r>:
80012574:	d4 01       	pushm	lr
80012576:	fe cb e8 7a 	sub	r11,pc,-6022
8001257a:	e0 a0 02 fd 	rcall	80012b74 <_fwalk>
8001257e:	d8 02       	popm	pc

80012580 <__sfmoreglue>:
80012580:	d4 21       	pushm	r4-r7,lr
80012582:	16 95       	mov	r5,r11
80012584:	f6 06 10 5c 	mul	r6,r11,92
80012588:	ec cb ff f4 	sub	r11,r6,-12
8001258c:	e0 a0 03 84 	rcall	80012c94 <_malloc_r>
80012590:	18 97       	mov	r7,r12
80012592:	c0 90       	breq	800125a4 <__sfmoreglue+0x24>
80012594:	99 15       	st.w	r12[0x4],r5
80012596:	30 0b       	mov	r11,0
80012598:	2f 4c       	sub	r12,-12
8001259a:	0c 9a       	mov	r10,r6
8001259c:	8f 2c       	st.w	r7[0x8],r12
8001259e:	8f 0b       	st.w	r7[0x0],r11
800125a0:	fe b0 e6 df 	rcall	8000f35e <memset>
800125a4:	0e 9c       	mov	r12,r7
800125a6:	d8 22       	popm	r4-r7,pc

800125a8 <__sfp>:
800125a8:	d4 21       	pushm	r4-r7,lr
800125aa:	fe c8 d2 52 	sub	r8,pc,-11694
800125ae:	18 96       	mov	r6,r12
800125b0:	70 07       	ld.w	r7,r8[0x0]
800125b2:	6e 68       	ld.w	r8,r7[0x18]
800125b4:	58 08       	cp.w	r8,0
800125b6:	c0 31       	brne	800125bc <__sfp+0x14>
800125b8:	0e 9c       	mov	r12,r7
800125ba:	c2 dc       	rcall	80012614 <__sinit>
800125bc:	ee c7 ff 28 	sub	r7,r7,-216
800125c0:	30 05       	mov	r5,0
800125c2:	6e 2c       	ld.w	r12,r7[0x8]
800125c4:	6e 18       	ld.w	r8,r7[0x4]
800125c6:	c0 68       	rjmp	800125d2 <__sfp+0x2a>
800125c8:	98 69       	ld.sh	r9,r12[0xc]
800125ca:	ea 09 19 00 	cp.h	r9,r5
800125ce:	c1 10       	breq	800125f0 <__sfp+0x48>
800125d0:	2a 4c       	sub	r12,-92
800125d2:	20 18       	sub	r8,1
800125d4:	cf a7       	brpl	800125c8 <__sfp+0x20>
800125d6:	6e 08       	ld.w	r8,r7[0x0]
800125d8:	58 08       	cp.w	r8,0
800125da:	c0 61       	brne	800125e6 <__sfp+0x3e>
800125dc:	30 4b       	mov	r11,4
800125de:	0c 9c       	mov	r12,r6
800125e0:	cd 0f       	rcall	80012580 <__sfmoreglue>
800125e2:	8f 0c       	st.w	r7[0x0],r12
800125e4:	c0 30       	breq	800125ea <__sfp+0x42>
800125e6:	6e 07       	ld.w	r7,r7[0x0]
800125e8:	ce db       	rjmp	800125c2 <__sfp+0x1a>
800125ea:	30 c8       	mov	r8,12
800125ec:	8d 38       	st.w	r6[0xc],r8
800125ee:	d8 22       	popm	r4-r7,pc
800125f0:	30 08       	mov	r8,0
800125f2:	f9 48 00 4c 	st.w	r12[76],r8
800125f6:	99 08       	st.w	r12[0x0],r8
800125f8:	99 28       	st.w	r12[0x8],r8
800125fa:	99 18       	st.w	r12[0x4],r8
800125fc:	99 48       	st.w	r12[0x10],r8
800125fe:	99 58       	st.w	r12[0x14],r8
80012600:	99 68       	st.w	r12[0x18],r8
80012602:	99 d8       	st.w	r12[0x34],r8
80012604:	99 e8       	st.w	r12[0x38],r8
80012606:	f9 48 00 48 	st.w	r12[72],r8
8001260a:	3f f8       	mov	r8,-1
8001260c:	b8 78       	st.h	r12[0xe],r8
8001260e:	30 18       	mov	r8,1
80012610:	b8 68       	st.h	r12[0xc],r8
80012612:	d8 22       	popm	r4-r7,pc

80012614 <__sinit>:
80012614:	d4 21       	pushm	r4-r7,lr
80012616:	18 96       	mov	r6,r12
80012618:	78 67       	ld.w	r7,r12[0x18]
8001261a:	58 07       	cp.w	r7,0
8001261c:	c4 91       	brne	800126ae <__sinit+0x9a>
8001261e:	fe c8 00 aa 	sub	r8,pc,170
80012622:	30 15       	mov	r5,1
80012624:	99 a8       	st.w	r12[0x28],r8
80012626:	f9 47 00 d8 	st.w	r12[216],r7
8001262a:	f9 47 00 dc 	st.w	r12[220],r7
8001262e:	f9 47 00 e0 	st.w	r12[224],r7
80012632:	99 65       	st.w	r12[0x18],r5
80012634:	cb af       	rcall	800125a8 <__sfp>
80012636:	8d 0c       	st.w	r6[0x0],r12
80012638:	0c 9c       	mov	r12,r6
8001263a:	cb 7f       	rcall	800125a8 <__sfp>
8001263c:	8d 1c       	st.w	r6[0x4],r12
8001263e:	0c 9c       	mov	r12,r6
80012640:	cb 4f       	rcall	800125a8 <__sfp>
80012642:	6c 09       	ld.w	r9,r6[0x0]
80012644:	30 48       	mov	r8,4
80012646:	93 07       	st.w	r9[0x0],r7
80012648:	b2 68       	st.h	r9[0xc],r8
8001264a:	93 17       	st.w	r9[0x4],r7
8001264c:	93 27       	st.w	r9[0x8],r7
8001264e:	6c 18       	ld.w	r8,r6[0x4]
80012650:	b2 77       	st.h	r9[0xe],r7
80012652:	93 47       	st.w	r9[0x10],r7
80012654:	93 57       	st.w	r9[0x14],r7
80012656:	93 67       	st.w	r9[0x18],r7
80012658:	93 89       	st.w	r9[0x20],r9
8001265a:	91 07       	st.w	r8[0x0],r7
8001265c:	91 17       	st.w	r8[0x4],r7
8001265e:	91 27       	st.w	r8[0x8],r7
80012660:	fe ce eb f4 	sub	lr,pc,-5132
80012664:	fe cb ec 24 	sub	r11,pc,-5084
80012668:	93 9e       	st.w	r9[0x24],lr
8001266a:	93 ab       	st.w	r9[0x28],r11
8001266c:	fe ca ec 4c 	sub	r10,pc,-5044
80012670:	fe c4 ec 58 	sub	r4,pc,-5032
80012674:	93 ba       	st.w	r9[0x2c],r10
80012676:	93 c4       	st.w	r9[0x30],r4
80012678:	30 99       	mov	r9,9
8001267a:	b0 69       	st.h	r8[0xc],r9
8001267c:	b0 75       	st.h	r8[0xe],r5
8001267e:	91 c4       	st.w	r8[0x30],r4
80012680:	91 47       	st.w	r8[0x10],r7
80012682:	91 57       	st.w	r8[0x14],r7
80012684:	91 67       	st.w	r8[0x18],r7
80012686:	91 88       	st.w	r8[0x20],r8
80012688:	91 9e       	st.w	r8[0x24],lr
8001268a:	91 ab       	st.w	r8[0x28],r11
8001268c:	91 ba       	st.w	r8[0x2c],r10
8001268e:	8d 2c       	st.w	r6[0x8],r12
80012690:	31 28       	mov	r8,18
80012692:	99 07       	st.w	r12[0x0],r7
80012694:	b8 68       	st.h	r12[0xc],r8
80012696:	99 17       	st.w	r12[0x4],r7
80012698:	99 27       	st.w	r12[0x8],r7
8001269a:	30 28       	mov	r8,2
8001269c:	b8 78       	st.h	r12[0xe],r8
8001269e:	99 c4       	st.w	r12[0x30],r4
800126a0:	99 67       	st.w	r12[0x18],r7
800126a2:	99 9e       	st.w	r12[0x24],lr
800126a4:	99 ab       	st.w	r12[0x28],r11
800126a6:	99 ba       	st.w	r12[0x2c],r10
800126a8:	99 47       	st.w	r12[0x10],r7
800126aa:	99 57       	st.w	r12[0x14],r7
800126ac:	99 8c       	st.w	r12[0x20],r12
800126ae:	d8 22       	popm	r4-r7,pc

800126b0 <_malloc_trim_r>:
800126b0:	d4 21       	pushm	r4-r7,lr
800126b2:	16 95       	mov	r5,r11
800126b4:	18 97       	mov	r7,r12
800126b6:	e0 a0 05 31 	rcall	80013118 <__malloc_lock>
800126ba:	e0 64 01 d4 	mov	r4,468
800126be:	68 28       	ld.w	r8,r4[0x8]
800126c0:	70 16       	ld.w	r6,r8[0x4]
800126c2:	e0 16 ff fc 	andl	r6,0xfffc
800126c6:	ec c8 ff 91 	sub	r8,r6,-111
800126ca:	f0 05 01 05 	sub	r5,r8,r5
800126ce:	e0 15 ff 80 	andl	r5,0xff80
800126d2:	ea c5 00 80 	sub	r5,r5,128
800126d6:	e0 45 00 7f 	cp.w	r5,127
800126da:	e0 8a 00 25 	brle	80012724 <_malloc_trim_r+0x74>
800126de:	30 0b       	mov	r11,0
800126e0:	0e 9c       	mov	r12,r7
800126e2:	e0 a0 09 8b 	rcall	800139f8 <_sbrk_r>
800126e6:	68 28       	ld.w	r8,r4[0x8]
800126e8:	0c 08       	add	r8,r6
800126ea:	10 3c       	cp.w	r12,r8
800126ec:	c1 c1       	brne	80012724 <_malloc_trim_r+0x74>
800126ee:	ea 0b 11 00 	rsub	r11,r5,0
800126f2:	0e 9c       	mov	r12,r7
800126f4:	e0 a0 09 82 	rcall	800139f8 <_sbrk_r>
800126f8:	5b fc       	cp.w	r12,-1
800126fa:	c1 91       	brne	8001272c <_malloc_trim_r+0x7c>
800126fc:	30 0b       	mov	r11,0
800126fe:	0e 9c       	mov	r12,r7
80012700:	e0 a0 09 7c 	rcall	800139f8 <_sbrk_r>
80012704:	68 28       	ld.w	r8,r4[0x8]
80012706:	f8 08 01 09 	sub	r9,r12,r8
8001270a:	58 f9       	cp.w	r9,15
8001270c:	e0 8a 00 0c 	brle	80012724 <_malloc_trim_r+0x74>
80012710:	a1 a9       	sbr	r9,0x0
80012712:	91 19       	st.w	r8[0x4],r9
80012714:	e0 68 05 e0 	mov	r8,1504
80012718:	70 09       	ld.w	r9,r8[0x0]
8001271a:	e0 68 08 c8 	mov	r8,2248
8001271e:	f8 09 01 09 	sub	r9,r12,r9
80012722:	91 09       	st.w	r8[0x0],r9
80012724:	0e 9c       	mov	r12,r7
80012726:	e0 a0 04 fa 	rcall	8001311a <__malloc_unlock>
8001272a:	d8 2a       	popm	r4-r7,pc,r12=0
8001272c:	68 28       	ld.w	r8,r4[0x8]
8001272e:	0a 16       	sub	r6,r5
80012730:	a1 a6       	sbr	r6,0x0
80012732:	91 16       	st.w	r8[0x4],r6
80012734:	e0 68 08 c8 	mov	r8,2248
80012738:	70 09       	ld.w	r9,r8[0x0]
8001273a:	0a 19       	sub	r9,r5
8001273c:	0e 9c       	mov	r12,r7
8001273e:	91 09       	st.w	r8[0x0],r9
80012740:	e0 a0 04 ed 	rcall	8001311a <__malloc_unlock>
80012744:	da 2a       	popm	r4-r7,pc,r12=1
80012746:	d7 03       	nop

80012748 <_free_r>:
80012748:	d4 21       	pushm	r4-r7,lr
8001274a:	16 96       	mov	r6,r11
8001274c:	18 97       	mov	r7,r12
8001274e:	58 0b       	cp.w	r11,0
80012750:	e0 80 00 c0 	breq	800128d0 <_free_r+0x188>
80012754:	e0 a0 04 e2 	rcall	80013118 <__malloc_lock>
80012758:	20 86       	sub	r6,8
8001275a:	e0 6a 01 d4 	mov	r10,468
8001275e:	6c 18       	ld.w	r8,r6[0x4]
80012760:	74 2e       	ld.w	lr,r10[0x8]
80012762:	f9 d8 c0 01 	bfextu	r12,r8,0x0,0x1
80012766:	a1 c8       	cbr	r8,0x0
80012768:	ec 08 00 09 	add	r9,r6,r8
8001276c:	72 1b       	ld.w	r11,r9[0x4]
8001276e:	e0 1b ff fc 	andl	r11,0xfffc
80012772:	1c 39       	cp.w	r9,lr
80012774:	c1 e1       	brne	800127b0 <_free_r+0x68>
80012776:	f6 08 00 08 	add	r8,r11,r8
8001277a:	58 0c       	cp.w	r12,0
8001277c:	c0 81       	brne	8001278c <_free_r+0x44>
8001277e:	6c 09       	ld.w	r9,r6[0x0]
80012780:	12 16       	sub	r6,r9
80012782:	12 08       	add	r8,r9
80012784:	6c 3b       	ld.w	r11,r6[0xc]
80012786:	6c 29       	ld.w	r9,r6[0x8]
80012788:	97 29       	st.w	r11[0x8],r9
8001278a:	93 3b       	st.w	r9[0xc],r11
8001278c:	10 99       	mov	r9,r8
8001278e:	95 26       	st.w	r10[0x8],r6
80012790:	a1 a9       	sbr	r9,0x0
80012792:	8d 19       	st.w	r6[0x4],r9
80012794:	e0 69 05 dc 	mov	r9,1500
80012798:	72 09       	ld.w	r9,r9[0x0]
8001279a:	12 38       	cp.w	r8,r9
8001279c:	c0 63       	brcs	800127a8 <_free_r+0x60>
8001279e:	e0 68 08 c4 	mov	r8,2244
800127a2:	0e 9c       	mov	r12,r7
800127a4:	70 0b       	ld.w	r11,r8[0x0]
800127a6:	c8 5f       	rcall	800126b0 <_malloc_trim_r>
800127a8:	0e 9c       	mov	r12,r7
800127aa:	e0 a0 04 b8 	rcall	8001311a <__malloc_unlock>
800127ae:	d8 22       	popm	r4-r7,pc
800127b0:	93 1b       	st.w	r9[0x4],r11
800127b2:	58 0c       	cp.w	r12,0
800127b4:	c0 30       	breq	800127ba <_free_r+0x72>
800127b6:	30 0c       	mov	r12,0
800127b8:	c1 08       	rjmp	800127d8 <_free_r+0x90>
800127ba:	6c 0e       	ld.w	lr,r6[0x0]
800127bc:	f4 c5 ff f8 	sub	r5,r10,-8
800127c0:	1c 16       	sub	r6,lr
800127c2:	1c 08       	add	r8,lr
800127c4:	6c 2e       	ld.w	lr,r6[0x8]
800127c6:	0a 3e       	cp.w	lr,r5
800127c8:	f9 bc 00 01 	moveq	r12,1
800127cc:	ed f5 10 03 	ld.wne	r5,r6[0xc]
800127d0:	eb fe 1a 02 	st.wne	r5[0x8],lr
800127d4:	fd f5 1a 03 	st.wne	lr[0xc],r5
800127d8:	f2 0b 00 0e 	add	lr,r9,r11
800127dc:	7c 1e       	ld.w	lr,lr[0x4]
800127de:	ed be 00 00 	bld	lr,0x0
800127e2:	c1 40       	breq	8001280a <_free_r+0xc2>
800127e4:	16 08       	add	r8,r11
800127e6:	58 0c       	cp.w	r12,0
800127e8:	c0 d1       	brne	80012802 <_free_r+0xba>
800127ea:	e0 6e 01 d4 	mov	lr,468
800127ee:	72 2b       	ld.w	r11,r9[0x8]
800127f0:	2f 8e       	sub	lr,-8
800127f2:	1c 3b       	cp.w	r11,lr
800127f4:	c0 71       	brne	80012802 <_free_r+0xba>
800127f6:	97 36       	st.w	r11[0xc],r6
800127f8:	97 26       	st.w	r11[0x8],r6
800127fa:	8d 2b       	st.w	r6[0x8],r11
800127fc:	8d 3b       	st.w	r6[0xc],r11
800127fe:	30 1c       	mov	r12,1
80012800:	c0 58       	rjmp	8001280a <_free_r+0xc2>
80012802:	72 2b       	ld.w	r11,r9[0x8]
80012804:	72 39       	ld.w	r9,r9[0xc]
80012806:	93 2b       	st.w	r9[0x8],r11
80012808:	97 39       	st.w	r11[0xc],r9
8001280a:	10 99       	mov	r9,r8
8001280c:	ec 08 09 08 	st.w	r6[r8],r8
80012810:	a1 a9       	sbr	r9,0x0
80012812:	8d 19       	st.w	r6[0x4],r9
80012814:	58 0c       	cp.w	r12,0
80012816:	c5 a1       	brne	800128ca <_free_r+0x182>
80012818:	e0 48 01 ff 	cp.w	r8,511
8001281c:	e0 8b 00 13 	brhi	80012842 <_free_r+0xfa>
80012820:	a3 98       	lsr	r8,0x3
80012822:	f4 08 00 39 	add	r9,r10,r8<<0x3
80012826:	72 2b       	ld.w	r11,r9[0x8]
80012828:	8d 39       	st.w	r6[0xc],r9
8001282a:	8d 2b       	st.w	r6[0x8],r11
8001282c:	97 36       	st.w	r11[0xc],r6
8001282e:	93 26       	st.w	r9[0x8],r6
80012830:	a3 48       	asr	r8,0x2
80012832:	74 19       	ld.w	r9,r10[0x4]
80012834:	30 1b       	mov	r11,1
80012836:	f6 08 09 48 	lsl	r8,r11,r8
8001283a:	f3 e8 10 08 	or	r8,r9,r8
8001283e:	95 18       	st.w	r10[0x4],r8
80012840:	c4 58       	rjmp	800128ca <_free_r+0x182>
80012842:	f0 0b 16 09 	lsr	r11,r8,0x9
80012846:	58 4b       	cp.w	r11,4
80012848:	e0 8b 00 06 	brhi	80012854 <_free_r+0x10c>
8001284c:	f0 0b 16 06 	lsr	r11,r8,0x6
80012850:	2c 8b       	sub	r11,-56
80012852:	c2 08       	rjmp	80012892 <_free_r+0x14a>
80012854:	59 4b       	cp.w	r11,20
80012856:	e0 8b 00 04 	brhi	8001285e <_free_r+0x116>
8001285a:	2a 5b       	sub	r11,-91
8001285c:	c1 b8       	rjmp	80012892 <_free_r+0x14a>
8001285e:	e0 4b 00 54 	cp.w	r11,84
80012862:	e0 8b 00 06 	brhi	8001286e <_free_r+0x126>
80012866:	f0 0b 16 0c 	lsr	r11,r8,0xc
8001286a:	29 2b       	sub	r11,-110
8001286c:	c1 38       	rjmp	80012892 <_free_r+0x14a>
8001286e:	e0 4b 01 54 	cp.w	r11,340
80012872:	e0 8b 00 06 	brhi	8001287e <_free_r+0x136>
80012876:	f0 0b 16 0f 	lsr	r11,r8,0xf
8001287a:	28 9b       	sub	r11,-119
8001287c:	c0 b8       	rjmp	80012892 <_free_r+0x14a>
8001287e:	e0 4b 05 54 	cp.w	r11,1364
80012882:	e0 88 00 05 	brls	8001288c <_free_r+0x144>
80012886:	37 eb       	mov	r11,126
80012888:	c0 58       	rjmp	80012892 <_free_r+0x14a>
8001288a:	d7 03       	nop
8001288c:	f0 0b 16 12 	lsr	r11,r8,0x12
80012890:	28 4b       	sub	r11,-124
80012892:	f4 0b 00 3c 	add	r12,r10,r11<<0x3
80012896:	78 29       	ld.w	r9,r12[0x8]
80012898:	18 39       	cp.w	r9,r12
8001289a:	c0 e1       	brne	800128b6 <_free_r+0x16e>
8001289c:	74 18       	ld.w	r8,r10[0x4]
8001289e:	a3 4b       	asr	r11,0x2
800128a0:	30 1c       	mov	r12,1
800128a2:	f8 0b 09 4b 	lsl	r11,r12,r11
800128a6:	f1 eb 10 0b 	or	r11,r8,r11
800128aa:	12 98       	mov	r8,r9
800128ac:	95 1b       	st.w	r10[0x4],r11
800128ae:	c0 a8       	rjmp	800128c2 <_free_r+0x17a>
800128b0:	72 29       	ld.w	r9,r9[0x8]
800128b2:	18 39       	cp.w	r9,r12
800128b4:	c0 60       	breq	800128c0 <_free_r+0x178>
800128b6:	72 1a       	ld.w	r10,r9[0x4]
800128b8:	e0 1a ff fc 	andl	r10,0xfffc
800128bc:	14 38       	cp.w	r8,r10
800128be:	cf 93       	brcs	800128b0 <_free_r+0x168>
800128c0:	72 38       	ld.w	r8,r9[0xc]
800128c2:	8d 38       	st.w	r6[0xc],r8
800128c4:	8d 29       	st.w	r6[0x8],r9
800128c6:	93 36       	st.w	r9[0xc],r6
800128c8:	91 26       	st.w	r8[0x8],r6
800128ca:	0e 9c       	mov	r12,r7
800128cc:	e0 a0 04 27 	rcall	8001311a <__malloc_unlock>
800128d0:	d8 22       	popm	r4-r7,pc
800128d2:	d7 03       	nop

800128d4 <__sfvwrite_r>:
800128d4:	d4 31       	pushm	r0-r7,lr
800128d6:	20 3d       	sub	sp,12
800128d8:	14 94       	mov	r4,r10
800128da:	18 95       	mov	r5,r12
800128dc:	16 97       	mov	r7,r11
800128de:	74 28       	ld.w	r8,r10[0x8]
800128e0:	58 08       	cp.w	r8,0
800128e2:	e0 80 01 45 	breq	80012b6c <__sfvwrite_r+0x298>
800128e6:	96 68       	ld.sh	r8,r11[0xc]
800128e8:	ed b8 00 03 	bld	r8,0x3
800128ec:	c0 41       	brne	800128f4 <__sfvwrite_r+0x20>
800128ee:	76 48       	ld.w	r8,r11[0x10]
800128f0:	58 08       	cp.w	r8,0
800128f2:	c0 c1       	brne	8001290a <__sfvwrite_r+0x36>
800128f4:	0e 9b       	mov	r11,r7
800128f6:	0a 9c       	mov	r12,r5
800128f8:	fe b0 f6 ca 	rcall	8001168c <__swsetup_r>
800128fc:	c0 70       	breq	8001290a <__sfvwrite_r+0x36>
800128fe:	8e 68       	ld.sh	r8,r7[0xc]
80012900:	a7 a8       	sbr	r8,0x6
80012902:	ae 68       	st.h	r7[0xc],r8
80012904:	30 98       	mov	r8,9
80012906:	8b 38       	st.w	r5[0xc],r8
80012908:	c3 09       	rjmp	80012b68 <__sfvwrite_r+0x294>
8001290a:	8e 63       	ld.sh	r3,r7[0xc]
8001290c:	68 00       	ld.w	r0,r4[0x0]
8001290e:	06 96       	mov	r6,r3
80012910:	e2 16 00 02 	andl	r6,0x2,COH
80012914:	c2 10       	breq	80012956 <__sfvwrite_r+0x82>
80012916:	30 03       	mov	r3,0
80012918:	e0 62 04 00 	mov	r2,1024
8001291c:	06 96       	mov	r6,r3
8001291e:	c0 48       	rjmp	80012926 <__sfvwrite_r+0x52>
80012920:	60 03       	ld.w	r3,r0[0x0]
80012922:	60 16       	ld.w	r6,r0[0x4]
80012924:	2f 80       	sub	r0,-8
80012926:	58 06       	cp.w	r6,0
80012928:	cf c0       	breq	80012920 <__sfvwrite_r+0x4c>
8001292a:	e0 46 04 00 	cp.w	r6,1024
8001292e:	ec 09 17 80 	movls	r9,r6
80012932:	e4 09 17 b0 	movhi	r9,r2
80012936:	06 9a       	mov	r10,r3
80012938:	6e a8       	ld.w	r8,r7[0x28]
8001293a:	6e 8b       	ld.w	r11,r7[0x20]
8001293c:	0a 9c       	mov	r12,r5
8001293e:	5d 18       	icall	r8
80012940:	18 16       	sub	r6,r12
80012942:	58 0c       	cp.w	r12,0
80012944:	e0 8a 01 0f 	brle	80012b62 <__sfvwrite_r+0x28e>
80012948:	68 28       	ld.w	r8,r4[0x8]
8001294a:	18 18       	sub	r8,r12
8001294c:	89 28       	st.w	r4[0x8],r8
8001294e:	e0 80 01 0f 	breq	80012b6c <__sfvwrite_r+0x298>
80012952:	18 03       	add	r3,r12
80012954:	ce 9b       	rjmp	80012926 <__sfvwrite_r+0x52>
80012956:	e7 d3 c0 01 	bfextu	r3,r3,0x0,0x1
8001295a:	c0 70       	breq	80012968 <__sfvwrite_r+0x94>
8001295c:	50 06       	stdsp	sp[0x0],r6
8001295e:	0c 93       	mov	r3,r6
80012960:	0c 91       	mov	r1,r6
80012962:	50 15       	stdsp	sp[0x4],r5
80012964:	08 92       	mov	r2,r4
80012966:	c9 e8       	rjmp	80012aa2 <__sfvwrite_r+0x1ce>
80012968:	06 96       	mov	r6,r3
8001296a:	08 91       	mov	r1,r4
8001296c:	c0 48       	rjmp	80012974 <__sfvwrite_r+0xa0>
8001296e:	60 03       	ld.w	r3,r0[0x0]
80012970:	60 16       	ld.w	r6,r0[0x4]
80012972:	2f 80       	sub	r0,-8
80012974:	58 06       	cp.w	r6,0
80012976:	cf c0       	breq	8001296e <__sfvwrite_r+0x9a>
80012978:	8e 68       	ld.sh	r8,r7[0xc]
8001297a:	6e 24       	ld.w	r4,r7[0x8]
8001297c:	10 99       	mov	r9,r8
8001297e:	e2 19 02 00 	andl	r9,0x200,COH
80012982:	c5 50       	breq	80012a2c <__sfvwrite_r+0x158>
80012984:	08 36       	cp.w	r6,r4
80012986:	c4 33       	brcs	80012a0c <__sfvwrite_r+0x138>
80012988:	10 99       	mov	r9,r8
8001298a:	e2 19 04 80 	andl	r9,0x480,COH
8001298e:	c3 f0       	breq	80012a0c <__sfvwrite_r+0x138>
80012990:	6e 4b       	ld.w	r11,r7[0x10]
80012992:	6e 09       	ld.w	r9,r7[0x0]
80012994:	16 19       	sub	r9,r11
80012996:	50 09       	stdsp	sp[0x0],r9
80012998:	6e 59       	ld.w	r9,r7[0x14]
8001299a:	10 9c       	mov	r12,r8
8001299c:	f2 09 00 1a 	add	r10,r9,r9<<0x1
800129a0:	30 28       	mov	r8,2
800129a2:	f4 08 0c 08 	divs	r8,r10,r8
800129a6:	fa e9 00 04 	st.d	sp[4],r8
800129aa:	10 94       	mov	r4,r8
800129ac:	40 09       	lddsp	r9,sp[0x0]
800129ae:	e2 1c 04 00 	andl	r12,0x400,COH
800129b2:	2f f9       	sub	r9,-1
800129b4:	0c 09       	add	r9,r6
800129b6:	12 38       	cp.w	r8,r9
800129b8:	f2 04 17 30 	movlo	r4,r9
800129bc:	58 0c       	cp.w	r12,0
800129be:	c1 00       	breq	800129de <__sfvwrite_r+0x10a>
800129c0:	08 9b       	mov	r11,r4
800129c2:	0a 9c       	mov	r12,r5
800129c4:	c6 8d       	rcall	80012c94 <_malloc_r>
800129c6:	18 92       	mov	r2,r12
800129c8:	c1 40       	breq	800129f0 <__sfvwrite_r+0x11c>
800129ca:	40 0a       	lddsp	r10,sp[0x0]
800129cc:	6e 4b       	ld.w	r11,r7[0x10]
800129ce:	fe b0 e4 24 	rcall	8000f216 <memcpy>
800129d2:	8e 68       	ld.sh	r8,r7[0xc]
800129d4:	e0 18 fb 7f 	andl	r8,0xfb7f
800129d8:	a7 b8       	sbr	r8,0x7
800129da:	ae 68       	st.h	r7[0xc],r8
800129dc:	c0 d8       	rjmp	800129f6 <__sfvwrite_r+0x122>
800129de:	08 9a       	mov	r10,r4
800129e0:	0a 9c       	mov	r12,r5
800129e2:	e0 a0 06 87 	rcall	800136f0 <_realloc_r>
800129e6:	18 92       	mov	r2,r12
800129e8:	c0 71       	brne	800129f6 <__sfvwrite_r+0x122>
800129ea:	6e 4b       	ld.w	r11,r7[0x10]
800129ec:	0a 9c       	mov	r12,r5
800129ee:	ca de       	rcall	80012748 <_free_r>
800129f0:	30 c8       	mov	r8,12
800129f2:	8b 38       	st.w	r5[0xc],r8
800129f4:	cb 78       	rjmp	80012b62 <__sfvwrite_r+0x28e>
800129f6:	40 0a       	lddsp	r10,sp[0x0]
800129f8:	40 09       	lddsp	r9,sp[0x0]
800129fa:	e8 0a 01 0a 	sub	r10,r4,r10
800129fe:	e4 09 00 08 	add	r8,r2,r9
80012a02:	8f 54       	st.w	r7[0x14],r4
80012a04:	8f 2a       	st.w	r7[0x8],r10
80012a06:	8f 08       	st.w	r7[0x0],r8
80012a08:	8f 42       	st.w	r7[0x10],r2
80012a0a:	0c 94       	mov	r4,r6
80012a0c:	08 36       	cp.w	r6,r4
80012a0e:	ec 04 17 30 	movlo	r4,r6
80012a12:	06 9b       	mov	r11,r3
80012a14:	08 9a       	mov	r10,r4
80012a16:	6e 0c       	ld.w	r12,r7[0x0]
80012a18:	e0 a0 03 61 	rcall	800130da <memmove>
80012a1c:	6e 08       	ld.w	r8,r7[0x0]
80012a1e:	08 08       	add	r8,r4
80012a20:	8f 08       	st.w	r7[0x0],r8
80012a22:	6e 28       	ld.w	r8,r7[0x8]
80012a24:	08 18       	sub	r8,r4
80012a26:	0c 94       	mov	r4,r6
80012a28:	8f 28       	st.w	r7[0x8],r8
80012a2a:	c3 08       	rjmp	80012a8a <__sfvwrite_r+0x1b6>
80012a2c:	08 36       	cp.w	r6,r4
80012a2e:	5f ba       	srhi	r10
80012a30:	6e 0c       	ld.w	r12,r7[0x0]
80012a32:	6e 48       	ld.w	r8,r7[0x10]
80012a34:	10 3c       	cp.w	r12,r8
80012a36:	5f b8       	srhi	r8
80012a38:	f5 e8 00 08 	and	r8,r10,r8
80012a3c:	f2 08 18 00 	cp.b	r8,r9
80012a40:	c0 e0       	breq	80012a5c <__sfvwrite_r+0x188>
80012a42:	06 9b       	mov	r11,r3
80012a44:	08 9a       	mov	r10,r4
80012a46:	e0 a0 03 4a 	rcall	800130da <memmove>
80012a4a:	6e 08       	ld.w	r8,r7[0x0]
80012a4c:	08 08       	add	r8,r4
80012a4e:	0e 9b       	mov	r11,r7
80012a50:	8f 08       	st.w	r7[0x0],r8
80012a52:	0a 9c       	mov	r12,r5
80012a54:	fe b0 fd 08 	rcall	80012464 <_fflush_r>
80012a58:	c1 90       	breq	80012a8a <__sfvwrite_r+0x1b6>
80012a5a:	c8 48       	rjmp	80012b62 <__sfvwrite_r+0x28e>
80012a5c:	6e 59       	ld.w	r9,r7[0x14]
80012a5e:	12 36       	cp.w	r6,r9
80012a60:	c0 a3       	brcs	80012a74 <__sfvwrite_r+0x1a0>
80012a62:	6e a8       	ld.w	r8,r7[0x28]
80012a64:	06 9a       	mov	r10,r3
80012a66:	6e 8b       	ld.w	r11,r7[0x20]
80012a68:	0a 9c       	mov	r12,r5
80012a6a:	5d 18       	icall	r8
80012a6c:	18 94       	mov	r4,r12
80012a6e:	e0 89 00 0e 	brgt	80012a8a <__sfvwrite_r+0x1b6>
80012a72:	c7 88       	rjmp	80012b62 <__sfvwrite_r+0x28e>
80012a74:	0c 9a       	mov	r10,r6
80012a76:	06 9b       	mov	r11,r3
80012a78:	e0 a0 03 31 	rcall	800130da <memmove>
80012a7c:	6e 08       	ld.w	r8,r7[0x0]
80012a7e:	0c 08       	add	r8,r6
80012a80:	0c 94       	mov	r4,r6
80012a82:	8f 08       	st.w	r7[0x0],r8
80012a84:	6e 28       	ld.w	r8,r7[0x8]
80012a86:	0c 18       	sub	r8,r6
80012a88:	8f 28       	st.w	r7[0x8],r8
80012a8a:	62 28       	ld.w	r8,r1[0x8]
80012a8c:	08 18       	sub	r8,r4
80012a8e:	83 28       	st.w	r1[0x8],r8
80012a90:	c6 e0       	breq	80012b6c <__sfvwrite_r+0x298>
80012a92:	08 16       	sub	r6,r4
80012a94:	08 03       	add	r3,r4
80012a96:	c6 fb       	rjmp	80012974 <__sfvwrite_r+0xa0>
80012a98:	60 03       	ld.w	r3,r0[0x0]
80012a9a:	60 11       	ld.w	r1,r0[0x4]
80012a9c:	30 08       	mov	r8,0
80012a9e:	2f 80       	sub	r0,-8
80012aa0:	50 08       	stdsp	sp[0x0],r8
80012aa2:	58 01       	cp.w	r1,0
80012aa4:	cf a0       	breq	80012a98 <__sfvwrite_r+0x1c4>
80012aa6:	40 0a       	lddsp	r10,sp[0x0]
80012aa8:	58 0a       	cp.w	r10,0
80012aaa:	c1 51       	brne	80012ad4 <__sfvwrite_r+0x200>
80012aac:	e2 c6 ff ff 	sub	r6,r1,-1
80012ab0:	02 9a       	mov	r10,r1
80012ab2:	30 ab       	mov	r11,10
80012ab4:	06 9c       	mov	r12,r3
80012ab6:	e0 a0 03 07 	rcall	800130c4 <memchr>
80012aba:	f8 c8 ff ff 	sub	r8,r12,-1
80012abe:	58 0c       	cp.w	r12,0
80012ac0:	f1 d3 e1 16 	subne	r6,r8,r3
80012ac4:	f9 b9 01 01 	movne	r9,1
80012ac8:	fb f9 1a 00 	st.wne	sp[0x0],r9
80012acc:	f9 b8 00 01 	moveq	r8,1
80012ad0:	fb f8 0a 00 	st.weq	sp[0x0],r8
80012ad4:	02 36       	cp.w	r6,r1
80012ad6:	ec 04 17 80 	movls	r4,r6
80012ada:	e2 04 17 b0 	movhi	r4,r1
80012ade:	6e 59       	ld.w	r9,r7[0x14]
80012ae0:	6e 25       	ld.w	r5,r7[0x8]
80012ae2:	f2 05 00 05 	add	r5,r9,r5
80012ae6:	0a 34       	cp.w	r4,r5
80012ae8:	5f 9a       	srgt	r10
80012aea:	6e 0c       	ld.w	r12,r7[0x0]
80012aec:	6e 48       	ld.w	r8,r7[0x10]
80012aee:	10 3c       	cp.w	r12,r8
80012af0:	5f b8       	srhi	r8
80012af2:	f5 e8 00 08 	and	r8,r10,r8
80012af6:	30 0a       	mov	r10,0
80012af8:	f4 08 18 00 	cp.b	r8,r10
80012afc:	c0 e0       	breq	80012b18 <__sfvwrite_r+0x244>
80012afe:	06 9b       	mov	r11,r3
80012b00:	0a 9a       	mov	r10,r5
80012b02:	e0 a0 02 ec 	rcall	800130da <memmove>
80012b06:	6e 08       	ld.w	r8,r7[0x0]
80012b08:	0a 08       	add	r8,r5
80012b0a:	0e 9b       	mov	r11,r7
80012b0c:	8f 08       	st.w	r7[0x0],r8
80012b0e:	40 1c       	lddsp	r12,sp[0x4]
80012b10:	fe b0 fc aa 	rcall	80012464 <_fflush_r>
80012b14:	c1 80       	breq	80012b44 <__sfvwrite_r+0x270>
80012b16:	c2 68       	rjmp	80012b62 <__sfvwrite_r+0x28e>
80012b18:	12 34       	cp.w	r4,r9
80012b1a:	c0 a5       	brlt	80012b2e <__sfvwrite_r+0x25a>
80012b1c:	6e a8       	ld.w	r8,r7[0x28]
80012b1e:	06 9a       	mov	r10,r3
80012b20:	6e 8b       	ld.w	r11,r7[0x20]
80012b22:	40 1c       	lddsp	r12,sp[0x4]
80012b24:	5d 18       	icall	r8
80012b26:	18 95       	mov	r5,r12
80012b28:	e0 89 00 0e 	brgt	80012b44 <__sfvwrite_r+0x270>
80012b2c:	c1 b8       	rjmp	80012b62 <__sfvwrite_r+0x28e>
80012b2e:	08 9a       	mov	r10,r4
80012b30:	06 9b       	mov	r11,r3
80012b32:	e0 a0 02 d4 	rcall	800130da <memmove>
80012b36:	6e 08       	ld.w	r8,r7[0x0]
80012b38:	08 08       	add	r8,r4
80012b3a:	08 95       	mov	r5,r4
80012b3c:	8f 08       	st.w	r7[0x0],r8
80012b3e:	6e 28       	ld.w	r8,r7[0x8]
80012b40:	08 18       	sub	r8,r4
80012b42:	8f 28       	st.w	r7[0x8],r8
80012b44:	0a 16       	sub	r6,r5
80012b46:	c0 71       	brne	80012b54 <__sfvwrite_r+0x280>
80012b48:	0e 9b       	mov	r11,r7
80012b4a:	40 1c       	lddsp	r12,sp[0x4]
80012b4c:	fe b0 fc 8c 	rcall	80012464 <_fflush_r>
80012b50:	c0 91       	brne	80012b62 <__sfvwrite_r+0x28e>
80012b52:	50 06       	stdsp	sp[0x0],r6
80012b54:	64 28       	ld.w	r8,r2[0x8]
80012b56:	0a 18       	sub	r8,r5
80012b58:	85 28       	st.w	r2[0x8],r8
80012b5a:	c0 90       	breq	80012b6c <__sfvwrite_r+0x298>
80012b5c:	0a 11       	sub	r1,r5
80012b5e:	0a 03       	add	r3,r5
80012b60:	ca 1b       	rjmp	80012aa2 <__sfvwrite_r+0x1ce>
80012b62:	8e 68       	ld.sh	r8,r7[0xc]
80012b64:	a7 a8       	sbr	r8,0x6
80012b66:	ae 68       	st.h	r7[0xc],r8
80012b68:	3f fc       	mov	r12,-1
80012b6a:	c0 28       	rjmp	80012b6e <__sfvwrite_r+0x29a>
80012b6c:	30 0c       	mov	r12,0
80012b6e:	2f dd       	sub	sp,-12
80012b70:	d8 32       	popm	r0-r7,pc
80012b72:	d7 03       	nop

80012b74 <_fwalk>:
80012b74:	d4 31       	pushm	r0-r7,lr
80012b76:	30 05       	mov	r5,0
80012b78:	16 91       	mov	r1,r11
80012b7a:	f8 c7 ff 28 	sub	r7,r12,-216
80012b7e:	0a 92       	mov	r2,r5
80012b80:	fe b0 fc f8 	rcall	80012570 <__sfp_lock_acquire>
80012b84:	3f f3       	mov	r3,-1
80012b86:	c1 68       	rjmp	80012bb2 <_fwalk+0x3e>
80012b88:	6e 26       	ld.w	r6,r7[0x8]
80012b8a:	6e 14       	ld.w	r4,r7[0x4]
80012b8c:	2f 46       	sub	r6,-12
80012b8e:	c0 c8       	rjmp	80012ba6 <_fwalk+0x32>
80012b90:	8c 08       	ld.sh	r8,r6[0x0]
80012b92:	e4 08 19 00 	cp.h	r8,r2
80012b96:	c0 70       	breq	80012ba4 <_fwalk+0x30>
80012b98:	8c 18       	ld.sh	r8,r6[0x2]
80012b9a:	e6 08 19 00 	cp.h	r8,r3
80012b9e:	c0 30       	breq	80012ba4 <_fwalk+0x30>
80012ba0:	5d 11       	icall	r1
80012ba2:	18 45       	or	r5,r12
80012ba4:	2a 46       	sub	r6,-92
80012ba6:	20 14       	sub	r4,1
80012ba8:	ec cc 00 0c 	sub	r12,r6,12
80012bac:	58 04       	cp.w	r4,0
80012bae:	cf 14       	brge	80012b90 <_fwalk+0x1c>
80012bb0:	6e 07       	ld.w	r7,r7[0x0]
80012bb2:	58 07       	cp.w	r7,0
80012bb4:	ce a1       	brne	80012b88 <_fwalk+0x14>
80012bb6:	fe b0 fc de 	rcall	80012572 <__sfp_lock_release>
80012bba:	0a 9c       	mov	r12,r5
80012bbc:	d8 32       	popm	r0-r7,pc
80012bbe:	d7 03       	nop

80012bc0 <_localeconv_r>:
80012bc0:	fe cc d8 64 	sub	r12,pc,-10140
80012bc4:	5e fc       	retal	r12
80012bc6:	d7 03       	nop

80012bc8 <__smakebuf_r>:
80012bc8:	d4 21       	pushm	r4-r7,lr
80012bca:	20 fd       	sub	sp,60
80012bcc:	96 68       	ld.sh	r8,r11[0xc]
80012bce:	16 97       	mov	r7,r11
80012bd0:	18 96       	mov	r6,r12
80012bd2:	e2 18 00 02 	andl	r8,0x2,COH
80012bd6:	c3 c1       	brne	80012c4e <__smakebuf_r+0x86>
80012bd8:	96 7b       	ld.sh	r11,r11[0xe]
80012bda:	f0 0b 19 00 	cp.h	r11,r8
80012bde:	c0 55       	brlt	80012be8 <__smakebuf_r+0x20>
80012be0:	1a 9a       	mov	r10,sp
80012be2:	e0 a0 08 95 	rcall	80013d0c <_fstat_r>
80012be6:	c0 f4       	brge	80012c04 <__smakebuf_r+0x3c>
80012be8:	8e 65       	ld.sh	r5,r7[0xc]
80012bea:	0a 98       	mov	r8,r5
80012bec:	ab b8       	sbr	r8,0xb
80012bee:	e2 15 00 80 	andl	r5,0x80,COH
80012bf2:	ae 68       	st.h	r7[0xc],r8
80012bf4:	30 04       	mov	r4,0
80012bf6:	e0 68 04 00 	mov	r8,1024
80012bfa:	f9 b5 01 40 	movne	r5,64
80012bfe:	f0 05 17 00 	moveq	r5,r8
80012c02:	c1 c8       	rjmp	80012c3a <__smakebuf_r+0x72>
80012c04:	40 18       	lddsp	r8,sp[0x4]
80012c06:	e2 18 f0 00 	andl	r8,0xf000,COH
80012c0a:	e0 48 20 00 	cp.w	r8,8192
80012c0e:	5f 04       	sreq	r4
80012c10:	e0 48 80 00 	cp.w	r8,32768
80012c14:	c0 e1       	brne	80012c30 <__smakebuf_r+0x68>
80012c16:	6e b9       	ld.w	r9,r7[0x2c]
80012c18:	fe c8 f1 f8 	sub	r8,pc,-3592
80012c1c:	10 39       	cp.w	r9,r8
80012c1e:	c0 91       	brne	80012c30 <__smakebuf_r+0x68>
80012c20:	8e 68       	ld.sh	r8,r7[0xc]
80012c22:	e0 65 04 00 	mov	r5,1024
80012c26:	ab a8       	sbr	r8,0xa
80012c28:	ef 45 00 50 	st.w	r7[80],r5
80012c2c:	ae 68       	st.h	r7[0xc],r8
80012c2e:	c0 68       	rjmp	80012c3a <__smakebuf_r+0x72>
80012c30:	8e 68       	ld.sh	r8,r7[0xc]
80012c32:	e0 65 04 00 	mov	r5,1024
80012c36:	ab b8       	sbr	r8,0xb
80012c38:	ae 68       	st.h	r7[0xc],r8
80012c3a:	0a 9b       	mov	r11,r5
80012c3c:	0c 9c       	mov	r12,r6
80012c3e:	c2 bc       	rcall	80012c94 <_malloc_r>
80012c40:	8e 68       	ld.sh	r8,r7[0xc]
80012c42:	c0 d1       	brne	80012c5c <__smakebuf_r+0x94>
80012c44:	ed b8 00 09 	bld	r8,0x9
80012c48:	c1 b0       	breq	80012c7e <__smakebuf_r+0xb6>
80012c4a:	a1 b8       	sbr	r8,0x1
80012c4c:	ae 68       	st.h	r7[0xc],r8
80012c4e:	ee c8 ff b9 	sub	r8,r7,-71
80012c52:	8f 48       	st.w	r7[0x10],r8
80012c54:	8f 08       	st.w	r7[0x0],r8
80012c56:	30 18       	mov	r8,1
80012c58:	8f 58       	st.w	r7[0x14],r8
80012c5a:	c1 28       	rjmp	80012c7e <__smakebuf_r+0xb6>
80012c5c:	a7 b8       	sbr	r8,0x7
80012c5e:	8f 4c       	st.w	r7[0x10],r12
80012c60:	ae 68       	st.h	r7[0xc],r8
80012c62:	8f 55       	st.w	r7[0x14],r5
80012c64:	fe c8 06 f0 	sub	r8,pc,1776
80012c68:	8f 0c       	st.w	r7[0x0],r12
80012c6a:	8d a8       	st.w	r6[0x28],r8
80012c6c:	58 04       	cp.w	r4,0
80012c6e:	c0 80       	breq	80012c7e <__smakebuf_r+0xb6>
80012c70:	8e 7c       	ld.sh	r12,r7[0xe]
80012c72:	e0 a0 07 3f 	rcall	80013af0 <isatty>
80012c76:	c0 40       	breq	80012c7e <__smakebuf_r+0xb6>
80012c78:	8e 68       	ld.sh	r8,r7[0xc]
80012c7a:	a1 a8       	sbr	r8,0x0
80012c7c:	ae 68       	st.h	r7[0xc],r8
80012c7e:	2f 1d       	sub	sp,-60
80012c80:	d8 22       	popm	r4-r7,pc
80012c82:	d7 03       	nop

80012c84 <malloc>:
80012c84:	d4 01       	pushm	lr
80012c86:	e0 68 01 d0 	mov	r8,464
80012c8a:	18 9b       	mov	r11,r12
80012c8c:	70 0c       	ld.w	r12,r8[0x0]
80012c8e:	c0 3c       	rcall	80012c94 <_malloc_r>
80012c90:	d8 02       	popm	pc
80012c92:	d7 03       	nop

80012c94 <_malloc_r>:
80012c94:	d4 31       	pushm	r0-r7,lr
80012c96:	f6 c8 ff f5 	sub	r8,r11,-11
80012c9a:	18 95       	mov	r5,r12
80012c9c:	10 97       	mov	r7,r8
80012c9e:	e0 17 ff f8 	andl	r7,0xfff8
80012ca2:	59 68       	cp.w	r8,22
80012ca4:	f9 b7 08 10 	movls	r7,16
80012ca8:	16 37       	cp.w	r7,r11
80012caa:	5f 38       	srlo	r8
80012cac:	f1 e7 13 f8 	or	r8,r8,r7>>0x1f
80012cb0:	c0 50       	breq	80012cba <_malloc_r+0x26>
80012cb2:	30 c8       	mov	r8,12
80012cb4:	99 38       	st.w	r12[0xc],r8
80012cb6:	e0 8f 01 f7 	bral	800130a4 <_malloc_r+0x410>
80012cba:	e0 a0 02 2f 	rcall	80013118 <__malloc_lock>
80012cbe:	e0 47 01 f7 	cp.w	r7,503
80012cc2:	e0 8b 00 1d 	brhi	80012cfc <_malloc_r+0x68>
80012cc6:	ee 03 16 03 	lsr	r3,r7,0x3
80012cca:	e0 68 01 d4 	mov	r8,468
80012cce:	f0 03 00 38 	add	r8,r8,r3<<0x3
80012cd2:	70 36       	ld.w	r6,r8[0xc]
80012cd4:	10 36       	cp.w	r6,r8
80012cd6:	c0 61       	brne	80012ce2 <_malloc_r+0x4e>
80012cd8:	ec c8 ff f8 	sub	r8,r6,-8
80012cdc:	70 36       	ld.w	r6,r8[0xc]
80012cde:	10 36       	cp.w	r6,r8
80012ce0:	c0 c0       	breq	80012cf8 <_malloc_r+0x64>
80012ce2:	6c 18       	ld.w	r8,r6[0x4]
80012ce4:	e0 18 ff fc 	andl	r8,0xfffc
80012ce8:	6c 3a       	ld.w	r10,r6[0xc]
80012cea:	ec 08 00 09 	add	r9,r6,r8
80012cee:	0a 9c       	mov	r12,r5
80012cf0:	6c 28       	ld.w	r8,r6[0x8]
80012cf2:	95 28       	st.w	r10[0x8],r8
80012cf4:	91 3a       	st.w	r8[0xc],r10
80012cf6:	c4 78       	rjmp	80012d84 <_malloc_r+0xf0>
80012cf8:	2f e3       	sub	r3,-2
80012cfa:	c4 d8       	rjmp	80012d94 <_malloc_r+0x100>
80012cfc:	ee 03 16 09 	lsr	r3,r7,0x9
80012d00:	c0 41       	brne	80012d08 <_malloc_r+0x74>
80012d02:	ee 03 16 03 	lsr	r3,r7,0x3
80012d06:	c2 68       	rjmp	80012d52 <_malloc_r+0xbe>
80012d08:	58 43       	cp.w	r3,4
80012d0a:	e0 8b 00 06 	brhi	80012d16 <_malloc_r+0x82>
80012d0e:	ee 03 16 06 	lsr	r3,r7,0x6
80012d12:	2c 83       	sub	r3,-56
80012d14:	c1 f8       	rjmp	80012d52 <_malloc_r+0xbe>
80012d16:	59 43       	cp.w	r3,20
80012d18:	e0 8b 00 04 	brhi	80012d20 <_malloc_r+0x8c>
80012d1c:	2a 53       	sub	r3,-91
80012d1e:	c1 a8       	rjmp	80012d52 <_malloc_r+0xbe>
80012d20:	e0 43 00 54 	cp.w	r3,84
80012d24:	e0 8b 00 06 	brhi	80012d30 <_malloc_r+0x9c>
80012d28:	ee 03 16 0c 	lsr	r3,r7,0xc
80012d2c:	29 23       	sub	r3,-110
80012d2e:	c1 28       	rjmp	80012d52 <_malloc_r+0xbe>
80012d30:	e0 43 01 54 	cp.w	r3,340
80012d34:	e0 8b 00 06 	brhi	80012d40 <_malloc_r+0xac>
80012d38:	ee 03 16 0f 	lsr	r3,r7,0xf
80012d3c:	28 93       	sub	r3,-119
80012d3e:	c0 a8       	rjmp	80012d52 <_malloc_r+0xbe>
80012d40:	e0 43 05 54 	cp.w	r3,1364
80012d44:	e0 88 00 04 	brls	80012d4c <_malloc_r+0xb8>
80012d48:	37 e3       	mov	r3,126
80012d4a:	c0 48       	rjmp	80012d52 <_malloc_r+0xbe>
80012d4c:	ee 03 16 12 	lsr	r3,r7,0x12
80012d50:	28 43       	sub	r3,-124
80012d52:	e0 6a 01 d4 	mov	r10,468
80012d56:	f4 03 00 3a 	add	r10,r10,r3<<0x3
80012d5a:	74 36       	ld.w	r6,r10[0xc]
80012d5c:	c1 98       	rjmp	80012d8e <_malloc_r+0xfa>
80012d5e:	6c 19       	ld.w	r9,r6[0x4]
80012d60:	e0 19 ff fc 	andl	r9,0xfffc
80012d64:	f2 07 01 0b 	sub	r11,r9,r7
80012d68:	58 fb       	cp.w	r11,15
80012d6a:	e0 8a 00 04 	brle	80012d72 <_malloc_r+0xde>
80012d6e:	20 13       	sub	r3,1
80012d70:	c1 18       	rjmp	80012d92 <_malloc_r+0xfe>
80012d72:	6c 38       	ld.w	r8,r6[0xc]
80012d74:	58 0b       	cp.w	r11,0
80012d76:	c0 b5       	brlt	80012d8c <_malloc_r+0xf8>
80012d78:	6c 2a       	ld.w	r10,r6[0x8]
80012d7a:	ec 09 00 09 	add	r9,r6,r9
80012d7e:	0a 9c       	mov	r12,r5
80012d80:	91 2a       	st.w	r8[0x8],r10
80012d82:	95 38       	st.w	r10[0xc],r8
80012d84:	72 18       	ld.w	r8,r9[0x4]
80012d86:	a1 a8       	sbr	r8,0x0
80012d88:	93 18       	st.w	r9[0x4],r8
80012d8a:	cb c8       	rjmp	80012f02 <_malloc_r+0x26e>
80012d8c:	10 96       	mov	r6,r8
80012d8e:	14 36       	cp.w	r6,r10
80012d90:	ce 71       	brne	80012d5e <_malloc_r+0xca>
80012d92:	2f f3       	sub	r3,-1
80012d94:	e0 6a 01 d4 	mov	r10,468
80012d98:	f4 cc ff f8 	sub	r12,r10,-8
80012d9c:	78 26       	ld.w	r6,r12[0x8]
80012d9e:	18 36       	cp.w	r6,r12
80012da0:	c6 c0       	breq	80012e78 <_malloc_r+0x1e4>
80012da2:	6c 19       	ld.w	r9,r6[0x4]
80012da4:	e0 19 ff fc 	andl	r9,0xfffc
80012da8:	f2 07 01 08 	sub	r8,r9,r7
80012dac:	58 f8       	cp.w	r8,15
80012dae:	e0 89 00 8f 	brgt	80012ecc <_malloc_r+0x238>
80012db2:	99 3c       	st.w	r12[0xc],r12
80012db4:	99 2c       	st.w	r12[0x8],r12
80012db6:	58 08       	cp.w	r8,0
80012db8:	c0 55       	brlt	80012dc2 <_malloc_r+0x12e>
80012dba:	ec 09 00 09 	add	r9,r6,r9
80012dbe:	0a 9c       	mov	r12,r5
80012dc0:	ce 2b       	rjmp	80012d84 <_malloc_r+0xf0>
80012dc2:	e0 49 01 ff 	cp.w	r9,511
80012dc6:	e0 8b 00 13 	brhi	80012dec <_malloc_r+0x158>
80012dca:	a3 99       	lsr	r9,0x3
80012dcc:	f4 09 00 38 	add	r8,r10,r9<<0x3
80012dd0:	70 2b       	ld.w	r11,r8[0x8]
80012dd2:	8d 38       	st.w	r6[0xc],r8
80012dd4:	8d 2b       	st.w	r6[0x8],r11
80012dd6:	97 36       	st.w	r11[0xc],r6
80012dd8:	91 26       	st.w	r8[0x8],r6
80012dda:	a3 49       	asr	r9,0x2
80012ddc:	74 18       	ld.w	r8,r10[0x4]
80012dde:	30 1b       	mov	r11,1
80012de0:	f6 09 09 49 	lsl	r9,r11,r9
80012de4:	f1 e9 10 09 	or	r9,r8,r9
80012de8:	95 19       	st.w	r10[0x4],r9
80012dea:	c4 78       	rjmp	80012e78 <_malloc_r+0x1e4>
80012dec:	f2 0a 16 09 	lsr	r10,r9,0x9
80012df0:	58 4a       	cp.w	r10,4
80012df2:	e0 8b 00 07 	brhi	80012e00 <_malloc_r+0x16c>
80012df6:	f2 0a 16 06 	lsr	r10,r9,0x6
80012dfa:	2c 8a       	sub	r10,-56
80012dfc:	c2 08       	rjmp	80012e3c <_malloc_r+0x1a8>
80012dfe:	d7 03       	nop
80012e00:	59 4a       	cp.w	r10,20
80012e02:	e0 8b 00 04 	brhi	80012e0a <_malloc_r+0x176>
80012e06:	2a 5a       	sub	r10,-91
80012e08:	c1 a8       	rjmp	80012e3c <_malloc_r+0x1a8>
80012e0a:	e0 4a 00 54 	cp.w	r10,84
80012e0e:	e0 8b 00 06 	brhi	80012e1a <_malloc_r+0x186>
80012e12:	f2 0a 16 0c 	lsr	r10,r9,0xc
80012e16:	29 2a       	sub	r10,-110
80012e18:	c1 28       	rjmp	80012e3c <_malloc_r+0x1a8>
80012e1a:	e0 4a 01 54 	cp.w	r10,340
80012e1e:	e0 8b 00 06 	brhi	80012e2a <_malloc_r+0x196>
80012e22:	f2 0a 16 0f 	lsr	r10,r9,0xf
80012e26:	28 9a       	sub	r10,-119
80012e28:	c0 a8       	rjmp	80012e3c <_malloc_r+0x1a8>
80012e2a:	e0 4a 05 54 	cp.w	r10,1364
80012e2e:	e0 88 00 04 	brls	80012e36 <_malloc_r+0x1a2>
80012e32:	37 ea       	mov	r10,126
80012e34:	c0 48       	rjmp	80012e3c <_malloc_r+0x1a8>
80012e36:	f2 0a 16 12 	lsr	r10,r9,0x12
80012e3a:	28 4a       	sub	r10,-124
80012e3c:	e0 6b 01 d4 	mov	r11,468
80012e40:	f6 0a 00 34 	add	r4,r11,r10<<0x3
80012e44:	68 28       	ld.w	r8,r4[0x8]
80012e46:	08 38       	cp.w	r8,r4
80012e48:	c0 e1       	brne	80012e64 <_malloc_r+0x1d0>
80012e4a:	76 19       	ld.w	r9,r11[0x4]
80012e4c:	a3 4a       	asr	r10,0x2
80012e4e:	30 1e       	mov	lr,1
80012e50:	fc 0a 09 4a 	lsl	r10,lr,r10
80012e54:	f3 ea 10 0a 	or	r10,r9,r10
80012e58:	10 99       	mov	r9,r8
80012e5a:	97 1a       	st.w	r11[0x4],r10
80012e5c:	c0 a8       	rjmp	80012e70 <_malloc_r+0x1dc>
80012e5e:	70 28       	ld.w	r8,r8[0x8]
80012e60:	08 38       	cp.w	r8,r4
80012e62:	c0 60       	breq	80012e6e <_malloc_r+0x1da>
80012e64:	70 1a       	ld.w	r10,r8[0x4]
80012e66:	e0 1a ff fc 	andl	r10,0xfffc
80012e6a:	14 39       	cp.w	r9,r10
80012e6c:	cf 93       	brcs	80012e5e <_malloc_r+0x1ca>
80012e6e:	70 39       	ld.w	r9,r8[0xc]
80012e70:	8d 39       	st.w	r6[0xc],r9
80012e72:	8d 28       	st.w	r6[0x8],r8
80012e74:	91 36       	st.w	r8[0xc],r6
80012e76:	93 26       	st.w	r9[0x8],r6
80012e78:	e6 08 14 02 	asr	r8,r3,0x2
80012e7c:	30 1b       	mov	r11,1
80012e7e:	e0 64 01 d4 	mov	r4,468
80012e82:	f6 08 09 4b 	lsl	r11,r11,r8
80012e86:	68 18       	ld.w	r8,r4[0x4]
80012e88:	10 3b       	cp.w	r11,r8
80012e8a:	e0 8b 00 69 	brhi	80012f5c <_malloc_r+0x2c8>
80012e8e:	f7 e8 00 09 	and	r9,r11,r8
80012e92:	c0 b1       	brne	80012ea8 <_malloc_r+0x214>
80012e94:	e0 13 ff fc 	andl	r3,0xfffc
80012e98:	a1 7b       	lsl	r11,0x1
80012e9a:	2f c3       	sub	r3,-4
80012e9c:	c0 38       	rjmp	80012ea2 <_malloc_r+0x20e>
80012e9e:	2f c3       	sub	r3,-4
80012ea0:	a1 7b       	lsl	r11,0x1
80012ea2:	f7 e8 00 09 	and	r9,r11,r8
80012ea6:	cf c0       	breq	80012e9e <_malloc_r+0x20a>
80012ea8:	e8 03 00 3e 	add	lr,r4,r3<<0x3
80012eac:	06 92       	mov	r2,r3
80012eae:	1c 91       	mov	r1,lr
80012eb0:	62 36       	ld.w	r6,r1[0xc]
80012eb2:	c2 d8       	rjmp	80012f0c <_malloc_r+0x278>
80012eb4:	6c 1a       	ld.w	r10,r6[0x4]
80012eb6:	e0 1a ff fc 	andl	r10,0xfffc
80012eba:	f4 07 01 08 	sub	r8,r10,r7
80012ebe:	58 f8       	cp.w	r8,15
80012ec0:	e0 8a 00 15 	brle	80012eea <_malloc_r+0x256>
80012ec4:	6c 3a       	ld.w	r10,r6[0xc]
80012ec6:	6c 29       	ld.w	r9,r6[0x8]
80012ec8:	95 29       	st.w	r10[0x8],r9
80012eca:	93 3a       	st.w	r9[0xc],r10
80012ecc:	0e 99       	mov	r9,r7
80012ece:	ec 07 00 07 	add	r7,r6,r7
80012ed2:	a1 a9       	sbr	r9,0x0
80012ed4:	99 37       	st.w	r12[0xc],r7
80012ed6:	99 27       	st.w	r12[0x8],r7
80012ed8:	8d 19       	st.w	r6[0x4],r9
80012eda:	ee 08 09 08 	st.w	r7[r8],r8
80012ede:	8f 2c       	st.w	r7[0x8],r12
80012ee0:	8f 3c       	st.w	r7[0xc],r12
80012ee2:	a1 a8       	sbr	r8,0x0
80012ee4:	0a 9c       	mov	r12,r5
80012ee6:	8f 18       	st.w	r7[0x4],r8
80012ee8:	c0 d8       	rjmp	80012f02 <_malloc_r+0x26e>
80012eea:	6c 39       	ld.w	r9,r6[0xc]
80012eec:	58 08       	cp.w	r8,0
80012eee:	c0 e5       	brlt	80012f0a <_malloc_r+0x276>
80012ef0:	ec 0a 00 0a 	add	r10,r6,r10
80012ef4:	74 18       	ld.w	r8,r10[0x4]
80012ef6:	a1 a8       	sbr	r8,0x0
80012ef8:	0a 9c       	mov	r12,r5
80012efa:	95 18       	st.w	r10[0x4],r8
80012efc:	6c 28       	ld.w	r8,r6[0x8]
80012efe:	93 28       	st.w	r9[0x8],r8
80012f00:	91 39       	st.w	r8[0xc],r9
80012f02:	c0 cd       	rcall	8001311a <__malloc_unlock>
80012f04:	ec cc ff f8 	sub	r12,r6,-8
80012f08:	d8 32       	popm	r0-r7,pc
80012f0a:	12 96       	mov	r6,r9
80012f0c:	02 36       	cp.w	r6,r1
80012f0e:	cd 31       	brne	80012eb4 <_malloc_r+0x220>
80012f10:	2f f2       	sub	r2,-1
80012f12:	f1 d2 c0 02 	bfextu	r8,r2,0x0,0x2
80012f16:	c0 30       	breq	80012f1c <_malloc_r+0x288>
80012f18:	2f 81       	sub	r1,-8
80012f1a:	cc bb       	rjmp	80012eb0 <_malloc_r+0x21c>
80012f1c:	1c 98       	mov	r8,lr
80012f1e:	f3 d3 c0 02 	bfextu	r9,r3,0x0,0x2
80012f22:	c0 81       	brne	80012f32 <_malloc_r+0x29e>
80012f24:	68 19       	ld.w	r9,r4[0x4]
80012f26:	f6 08 11 ff 	rsub	r8,r11,-1
80012f2a:	f3 e8 00 08 	and	r8,r9,r8
80012f2e:	89 18       	st.w	r4[0x4],r8
80012f30:	c0 78       	rjmp	80012f3e <_malloc_r+0x2aa>
80012f32:	f0 c9 00 08 	sub	r9,r8,8
80012f36:	20 13       	sub	r3,1
80012f38:	70 08       	ld.w	r8,r8[0x0]
80012f3a:	12 38       	cp.w	r8,r9
80012f3c:	cf 10       	breq	80012f1e <_malloc_r+0x28a>
80012f3e:	a1 7b       	lsl	r11,0x1
80012f40:	68 18       	ld.w	r8,r4[0x4]
80012f42:	10 3b       	cp.w	r11,r8
80012f44:	e0 8b 00 0c 	brhi	80012f5c <_malloc_r+0x2c8>
80012f48:	58 0b       	cp.w	r11,0
80012f4a:	c0 90       	breq	80012f5c <_malloc_r+0x2c8>
80012f4c:	04 93       	mov	r3,r2
80012f4e:	c0 38       	rjmp	80012f54 <_malloc_r+0x2c0>
80012f50:	2f c3       	sub	r3,-4
80012f52:	a1 7b       	lsl	r11,0x1
80012f54:	f7 e8 00 09 	and	r9,r11,r8
80012f58:	ca 81       	brne	80012ea8 <_malloc_r+0x214>
80012f5a:	cf bb       	rjmp	80012f50 <_malloc_r+0x2bc>
80012f5c:	68 23       	ld.w	r3,r4[0x8]
80012f5e:	66 12       	ld.w	r2,r3[0x4]
80012f60:	e0 12 ff fc 	andl	r2,0xfffc
80012f64:	0e 32       	cp.w	r2,r7
80012f66:	5f 39       	srlo	r9
80012f68:	e4 07 01 08 	sub	r8,r2,r7
80012f6c:	58 f8       	cp.w	r8,15
80012f6e:	5f aa       	srle	r10
80012f70:	f5 e9 10 09 	or	r9,r10,r9
80012f74:	e0 80 00 9a 	breq	800130a8 <_malloc_r+0x414>
80012f78:	e0 68 08 c4 	mov	r8,2244
80012f7c:	70 01       	ld.w	r1,r8[0x0]
80012f7e:	e0 68 05 e0 	mov	r8,1504
80012f82:	2f 01       	sub	r1,-16
80012f84:	70 08       	ld.w	r8,r8[0x0]
80012f86:	0e 01       	add	r1,r7
80012f88:	5b f8       	cp.w	r8,-1
80012f8a:	c0 40       	breq	80012f92 <_malloc_r+0x2fe>
80012f8c:	28 11       	sub	r1,-127
80012f8e:	e0 11 ff 80 	andl	r1,0xff80
80012f92:	02 9b       	mov	r11,r1
80012f94:	0a 9c       	mov	r12,r5
80012f96:	e0 a0 05 31 	rcall	800139f8 <_sbrk_r>
80012f9a:	18 96       	mov	r6,r12
80012f9c:	5b fc       	cp.w	r12,-1
80012f9e:	c7 50       	breq	80013088 <_malloc_r+0x3f4>
80012fa0:	e6 02 00 08 	add	r8,r3,r2
80012fa4:	10 3c       	cp.w	r12,r8
80012fa6:	c0 32       	brcc	80012fac <_malloc_r+0x318>
80012fa8:	08 33       	cp.w	r3,r4
80012faa:	c6 f1       	brne	80013088 <_malloc_r+0x3f4>
80012fac:	e0 6a 08 c8 	mov	r10,2248
80012fb0:	74 09       	ld.w	r9,r10[0x0]
80012fb2:	e2 09 00 09 	add	r9,r1,r9
80012fb6:	95 09       	st.w	r10[0x0],r9
80012fb8:	10 36       	cp.w	r6,r8
80012fba:	c0 a1       	brne	80012fce <_malloc_r+0x33a>
80012fbc:	f5 d6 c0 07 	bfextu	r10,r6,0x0,0x7
80012fc0:	c0 71       	brne	80012fce <_malloc_r+0x33a>
80012fc2:	e2 02 00 02 	add	r2,r1,r2
80012fc6:	68 28       	ld.w	r8,r4[0x8]
80012fc8:	a1 a2       	sbr	r2,0x0
80012fca:	91 12       	st.w	r8[0x4],r2
80012fcc:	c4 f8       	rjmp	8001306a <_malloc_r+0x3d6>
80012fce:	e0 6a 05 e0 	mov	r10,1504
80012fd2:	74 0b       	ld.w	r11,r10[0x0]
80012fd4:	5b fb       	cp.w	r11,-1
80012fd6:	c0 31       	brne	80012fdc <_malloc_r+0x348>
80012fd8:	95 06       	st.w	r10[0x0],r6
80012fda:	c0 78       	rjmp	80012fe8 <_malloc_r+0x354>
80012fdc:	ec 09 00 09 	add	r9,r6,r9
80012fe0:	e0 6a 08 c8 	mov	r10,2248
80012fe4:	10 19       	sub	r9,r8
80012fe6:	95 09       	st.w	r10[0x0],r9
80012fe8:	f1 d6 c0 03 	bfextu	r8,r6,0x0,0x3
80012fec:	f0 09 11 08 	rsub	r9,r8,8
80012ff0:	58 08       	cp.w	r8,0
80012ff2:	f2 08 17 10 	movne	r8,r9
80012ff6:	ed d8 e1 06 	addne	r6,r6,r8
80012ffa:	28 08       	sub	r8,-128
80012ffc:	ec 01 00 01 	add	r1,r6,r1
80013000:	0a 9c       	mov	r12,r5
80013002:	e3 d1 c0 07 	bfextu	r1,r1,0x0,0x7
80013006:	f0 01 01 01 	sub	r1,r8,r1
8001300a:	02 9b       	mov	r11,r1
8001300c:	e0 a0 04 f6 	rcall	800139f8 <_sbrk_r>
80013010:	e0 68 08 c8 	mov	r8,2248
80013014:	5b fc       	cp.w	r12,-1
80013016:	ec 0c 17 00 	moveq	r12,r6
8001301a:	f9 b1 00 00 	moveq	r1,0
8001301e:	70 09       	ld.w	r9,r8[0x0]
80013020:	0c 1c       	sub	r12,r6
80013022:	89 26       	st.w	r4[0x8],r6
80013024:	02 0c       	add	r12,r1
80013026:	12 01       	add	r1,r9
80013028:	a1 ac       	sbr	r12,0x0
8001302a:	91 01       	st.w	r8[0x0],r1
8001302c:	8d 1c       	st.w	r6[0x4],r12
8001302e:	08 33       	cp.w	r3,r4
80013030:	c1 d0       	breq	8001306a <_malloc_r+0x3d6>
80013032:	58 f2       	cp.w	r2,15
80013034:	e0 8b 00 05 	brhi	8001303e <_malloc_r+0x3aa>
80013038:	30 18       	mov	r8,1
8001303a:	8d 18       	st.w	r6[0x4],r8
8001303c:	c2 68       	rjmp	80013088 <_malloc_r+0x3f4>
8001303e:	30 59       	mov	r9,5
80013040:	20 c2       	sub	r2,12
80013042:	e0 12 ff f8 	andl	r2,0xfff8
80013046:	e6 02 00 08 	add	r8,r3,r2
8001304a:	91 29       	st.w	r8[0x8],r9
8001304c:	91 19       	st.w	r8[0x4],r9
8001304e:	66 18       	ld.w	r8,r3[0x4]
80013050:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80013054:	e5 e8 10 08 	or	r8,r2,r8
80013058:	87 18       	st.w	r3[0x4],r8
8001305a:	58 f2       	cp.w	r2,15
8001305c:	e0 88 00 07 	brls	8001306a <_malloc_r+0x3d6>
80013060:	e6 cb ff f8 	sub	r11,r3,-8
80013064:	0a 9c       	mov	r12,r5
80013066:	fe b0 fb 71 	rcall	80012748 <_free_r>
8001306a:	e0 69 08 c0 	mov	r9,2240
8001306e:	72 0a       	ld.w	r10,r9[0x0]
80013070:	e0 68 08 c8 	mov	r8,2248
80013074:	70 08       	ld.w	r8,r8[0x0]
80013076:	14 38       	cp.w	r8,r10
80013078:	f3 f8 ba 00 	st.whi	r9[0x0],r8
8001307c:	e0 69 08 bc 	mov	r9,2236
80013080:	72 0a       	ld.w	r10,r9[0x0]
80013082:	14 38       	cp.w	r8,r10
80013084:	f3 f8 ba 00 	st.whi	r9[0x0],r8
80013088:	68 28       	ld.w	r8,r4[0x8]
8001308a:	70 18       	ld.w	r8,r8[0x4]
8001308c:	e0 18 ff fc 	andl	r8,0xfffc
80013090:	0e 38       	cp.w	r8,r7
80013092:	5f 39       	srlo	r9
80013094:	0e 18       	sub	r8,r7
80013096:	58 f8       	cp.w	r8,15
80013098:	5f aa       	srle	r10
8001309a:	f5 e9 10 09 	or	r9,r10,r9
8001309e:	c0 50       	breq	800130a8 <_malloc_r+0x414>
800130a0:	0a 9c       	mov	r12,r5
800130a2:	c3 cc       	rcall	8001311a <__malloc_unlock>
800130a4:	d8 3a       	popm	r0-r7,pc,r12=0
800130a6:	d7 03       	nop
800130a8:	68 26       	ld.w	r6,r4[0x8]
800130aa:	a1 a8       	sbr	r8,0x0
800130ac:	0e 99       	mov	r9,r7
800130ae:	a1 a9       	sbr	r9,0x0
800130b0:	8d 19       	st.w	r6[0x4],r9
800130b2:	ec 07 00 07 	add	r7,r6,r7
800130b6:	0a 9c       	mov	r12,r5
800130b8:	89 27       	st.w	r4[0x8],r7
800130ba:	8f 18       	st.w	r7[0x4],r8
800130bc:	c2 fc       	rcall	8001311a <__malloc_unlock>
800130be:	ec cc ff f8 	sub	r12,r6,-8
800130c2:	d8 32       	popm	r0-r7,pc

800130c4 <memchr>:
800130c4:	f7 db c0 08 	bfextu	r11,r11,0x0,0x8
800130c8:	c0 68       	rjmp	800130d4 <memchr+0x10>
800130ca:	20 1a       	sub	r10,1
800130cc:	19 88       	ld.ub	r8,r12[0x0]
800130ce:	16 38       	cp.w	r8,r11
800130d0:	5e 0c       	reteq	r12
800130d2:	2f fc       	sub	r12,-1
800130d4:	58 0a       	cp.w	r10,0
800130d6:	cf a1       	brne	800130ca <memchr+0x6>
800130d8:	5e fa       	retal	r10

800130da <memmove>:
800130da:	d4 01       	pushm	lr
800130dc:	18 3b       	cp.w	r11,r12
800130de:	c1 92       	brcc	80013110 <memmove+0x36>
800130e0:	f6 0a 00 09 	add	r9,r11,r10
800130e4:	12 3c       	cp.w	r12,r9
800130e6:	c1 52       	brcc	80013110 <memmove+0x36>
800130e8:	f8 0a 00 0b 	add	r11,r12,r10
800130ec:	30 08       	mov	r8,0
800130ee:	c0 68       	rjmp	800130fa <memmove+0x20>
800130f0:	f2 08 07 0e 	ld.ub	lr,r9[r8]
800130f4:	20 1a       	sub	r10,1
800130f6:	f6 08 0b 0e 	st.b	r11[r8],lr
800130fa:	20 18       	sub	r8,1
800130fc:	58 0a       	cp.w	r10,0
800130fe:	cf 91       	brne	800130f0 <memmove+0x16>
80013100:	d8 02       	popm	pc
80013102:	f6 08 07 09 	ld.ub	r9,r11[r8]
80013106:	20 1a       	sub	r10,1
80013108:	f8 08 0b 09 	st.b	r12[r8],r9
8001310c:	2f f8       	sub	r8,-1
8001310e:	c0 28       	rjmp	80013112 <memmove+0x38>
80013110:	30 08       	mov	r8,0
80013112:	58 0a       	cp.w	r10,0
80013114:	cf 71       	brne	80013102 <memmove+0x28>
80013116:	d8 02       	popm	pc

80013118 <__malloc_lock>:
80013118:	5e fc       	retal	r12

8001311a <__malloc_unlock>:
8001311a:	5e fc       	retal	r12

8001311c <__hi0bits>:
8001311c:	18 98       	mov	r8,r12
8001311e:	e0 1c 00 00 	andl	r12,0x0
80013122:	f0 09 15 10 	lsl	r9,r8,0x10
80013126:	58 0c       	cp.w	r12,0
80013128:	f2 08 17 00 	moveq	r8,r9
8001312c:	f9 bc 00 10 	moveq	r12,16
80013130:	f9 bc 01 00 	movne	r12,0
80013134:	10 9a       	mov	r10,r8
80013136:	f0 09 15 08 	lsl	r9,r8,0x8
8001313a:	e6 1a ff 00 	andh	r10,0xff00,COH
8001313e:	f7 bc 00 f8 	subeq	r12,-8
80013142:	f2 08 17 00 	moveq	r8,r9
80013146:	10 9a       	mov	r10,r8
80013148:	f0 09 15 04 	lsl	r9,r8,0x4
8001314c:	e6 1a f0 00 	andh	r10,0xf000,COH
80013150:	f7 bc 00 fc 	subeq	r12,-4
80013154:	f2 08 17 00 	moveq	r8,r9
80013158:	10 9a       	mov	r10,r8
8001315a:	f0 09 15 02 	lsl	r9,r8,0x2
8001315e:	e6 1a c0 00 	andh	r10,0xc000,COH
80013162:	f7 bc 00 fe 	subeq	r12,-2
80013166:	f2 08 17 00 	moveq	r8,r9
8001316a:	58 08       	cp.w	r8,0
8001316c:	5e 5c       	retlt	r12
8001316e:	ed b8 00 1e 	bld	r8,0x1e
80013172:	f9 bc 01 20 	movne	r12,32
80013176:	f7 bc 00 ff 	subeq	r12,-1
8001317a:	5e fc       	retal	r12

8001317c <__lo0bits>:
8001317c:	18 99       	mov	r9,r12
8001317e:	78 08       	ld.w	r8,r12[0x0]
80013180:	f9 d8 c0 03 	bfextu	r12,r8,0x0,0x3
80013184:	c1 50       	breq	800131ae <__lo0bits+0x32>
80013186:	ed b8 00 00 	bld	r8,0x0
8001318a:	c0 21       	brne	8001318e <__lo0bits+0x12>
8001318c:	5e fd       	retal	0
8001318e:	10 9b       	mov	r11,r8
80013190:	f0 0a 16 01 	lsr	r10,r8,0x1
80013194:	e2 1b 00 02 	andl	r11,0x2,COH
80013198:	a3 88       	lsr	r8,0x2
8001319a:	58 0b       	cp.w	r11,0
8001319c:	f3 fa 1a 00 	st.wne	r9[0x0],r10
800131a0:	f9 bc 01 01 	movne	r12,1
800131a4:	f3 f8 0a 00 	st.weq	r9[0x0],r8
800131a8:	f9 bc 00 02 	moveq	r12,2
800131ac:	5e fc       	retal	r12
800131ae:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
800131b2:	f0 0b 16 10 	lsr	r11,r8,0x10
800131b6:	58 0a       	cp.w	r10,0
800131b8:	f6 08 17 00 	moveq	r8,r11
800131bc:	f9 bc 00 10 	moveq	r12,16
800131c0:	f7 d8 c0 08 	bfextu	r11,r8,0x0,0x8
800131c4:	f0 0a 16 08 	lsr	r10,r8,0x8
800131c8:	58 0b       	cp.w	r11,0
800131ca:	f7 bc 00 f8 	subeq	r12,-8
800131ce:	f4 08 17 00 	moveq	r8,r10
800131d2:	f7 d8 c0 04 	bfextu	r11,r8,0x0,0x4
800131d6:	f0 0a 16 04 	lsr	r10,r8,0x4
800131da:	58 0b       	cp.w	r11,0
800131dc:	f7 bc 00 fc 	subeq	r12,-4
800131e0:	f4 08 17 00 	moveq	r8,r10
800131e4:	f7 d8 c0 02 	bfextu	r11,r8,0x0,0x2
800131e8:	f0 0a 16 02 	lsr	r10,r8,0x2
800131ec:	58 0b       	cp.w	r11,0
800131ee:	f7 bc 00 fe 	subeq	r12,-2
800131f2:	f4 08 17 00 	moveq	r8,r10
800131f6:	ed b8 00 00 	bld	r8,0x0
800131fa:	c0 60       	breq	80013206 <__lo0bits+0x8a>
800131fc:	a1 98       	lsr	r8,0x1
800131fe:	c0 31       	brne	80013204 <__lo0bits+0x88>
80013200:	32 0c       	mov	r12,32
80013202:	5e fc       	retal	r12
80013204:	2f fc       	sub	r12,-1
80013206:	93 08       	st.w	r9[0x0],r8
80013208:	5e fc       	retal	r12

8001320a <__mcmp>:
8001320a:	d4 01       	pushm	lr
8001320c:	18 98       	mov	r8,r12
8001320e:	76 49       	ld.w	r9,r11[0x10]
80013210:	78 4c       	ld.w	r12,r12[0x10]
80013212:	12 1c       	sub	r12,r9
80013214:	c1 31       	brne	8001323a <__mcmp+0x30>
80013216:	2f b9       	sub	r9,-5
80013218:	a3 69       	lsl	r9,0x2
8001321a:	12 0b       	add	r11,r9
8001321c:	f0 09 00 09 	add	r9,r8,r9
80013220:	2e c8       	sub	r8,-20
80013222:	13 4e       	ld.w	lr,--r9
80013224:	17 4a       	ld.w	r10,--r11
80013226:	14 3e       	cp.w	lr,r10
80013228:	c0 60       	breq	80013234 <__mcmp+0x2a>
8001322a:	f9 bc 03 ff 	movlo	r12,-1
8001322e:	f9 bc 02 01 	movhs	r12,1
80013232:	d8 02       	popm	pc
80013234:	10 39       	cp.w	r9,r8
80013236:	fe 9b ff f6 	brhi	80013222 <__mcmp+0x18>
8001323a:	d8 02       	popm	pc

8001323c <_Bfree>:
8001323c:	d4 21       	pushm	r4-r7,lr
8001323e:	18 97       	mov	r7,r12
80013240:	16 95       	mov	r5,r11
80013242:	78 96       	ld.w	r6,r12[0x24]
80013244:	58 06       	cp.w	r6,0
80013246:	c0 91       	brne	80013258 <_Bfree+0x1c>
80013248:	31 0c       	mov	r12,16
8001324a:	fe b0 fd 1d 	rcall	80012c84 <malloc>
8001324e:	99 36       	st.w	r12[0xc],r6
80013250:	8f 9c       	st.w	r7[0x24],r12
80013252:	99 16       	st.w	r12[0x4],r6
80013254:	99 26       	st.w	r12[0x8],r6
80013256:	99 06       	st.w	r12[0x0],r6
80013258:	58 05       	cp.w	r5,0
8001325a:	c0 90       	breq	8001326c <_Bfree+0x30>
8001325c:	6a 19       	ld.w	r9,r5[0x4]
8001325e:	6e 98       	ld.w	r8,r7[0x24]
80013260:	70 38       	ld.w	r8,r8[0xc]
80013262:	f0 09 03 2a 	ld.w	r10,r8[r9<<0x2]
80013266:	8b 0a       	st.w	r5[0x0],r10
80013268:	f0 09 09 25 	st.w	r8[r9<<0x2],r5
8001326c:	d8 22       	popm	r4-r7,pc
8001326e:	d7 03       	nop

80013270 <_Balloc>:
80013270:	d4 21       	pushm	r4-r7,lr
80013272:	18 97       	mov	r7,r12
80013274:	16 96       	mov	r6,r11
80013276:	78 95       	ld.w	r5,r12[0x24]
80013278:	58 05       	cp.w	r5,0
8001327a:	c0 91       	brne	8001328c <_Balloc+0x1c>
8001327c:	31 0c       	mov	r12,16
8001327e:	fe b0 fd 03 	rcall	80012c84 <malloc>
80013282:	99 35       	st.w	r12[0xc],r5
80013284:	8f 9c       	st.w	r7[0x24],r12
80013286:	99 15       	st.w	r12[0x4],r5
80013288:	99 25       	st.w	r12[0x8],r5
8001328a:	99 05       	st.w	r12[0x0],r5
8001328c:	6e 95       	ld.w	r5,r7[0x24]
8001328e:	6a 38       	ld.w	r8,r5[0xc]
80013290:	58 08       	cp.w	r8,0
80013292:	c0 b1       	brne	800132a8 <_Balloc+0x38>
80013294:	31 0a       	mov	r10,16
80013296:	30 4b       	mov	r11,4
80013298:	0e 9c       	mov	r12,r7
8001329a:	e0 a0 04 93 	rcall	80013bc0 <_calloc_r>
8001329e:	8b 3c       	st.w	r5[0xc],r12
800132a0:	6e 98       	ld.w	r8,r7[0x24]
800132a2:	70 3c       	ld.w	r12,r8[0xc]
800132a4:	58 0c       	cp.w	r12,0
800132a6:	c1 b0       	breq	800132dc <_Balloc+0x6c>
800132a8:	6e 98       	ld.w	r8,r7[0x24]
800132aa:	70 38       	ld.w	r8,r8[0xc]
800132ac:	f0 06 00 28 	add	r8,r8,r6<<0x2
800132b0:	70 0c       	ld.w	r12,r8[0x0]
800132b2:	58 0c       	cp.w	r12,0
800132b4:	c0 40       	breq	800132bc <_Balloc+0x4c>
800132b6:	78 09       	ld.w	r9,r12[0x0]
800132b8:	91 09       	st.w	r8[0x0],r9
800132ba:	c0 e8       	rjmp	800132d6 <_Balloc+0x66>
800132bc:	0e 9c       	mov	r12,r7
800132be:	30 17       	mov	r7,1
800132c0:	0e 9b       	mov	r11,r7
800132c2:	ee 06 09 47 	lsl	r7,r7,r6
800132c6:	ee ca ff fb 	sub	r10,r7,-5
800132ca:	a3 6a       	lsl	r10,0x2
800132cc:	e0 a0 04 7a 	rcall	80013bc0 <_calloc_r>
800132d0:	c0 60       	breq	800132dc <_Balloc+0x6c>
800132d2:	99 16       	st.w	r12[0x4],r6
800132d4:	99 27       	st.w	r12[0x8],r7
800132d6:	30 08       	mov	r8,0
800132d8:	99 38       	st.w	r12[0xc],r8
800132da:	99 48       	st.w	r12[0x10],r8
800132dc:	d8 22       	popm	r4-r7,pc
800132de:	d7 03       	nop

800132e0 <__d2b>:
800132e0:	d4 31       	pushm	r0-r7,lr
800132e2:	20 2d       	sub	sp,8
800132e4:	16 93       	mov	r3,r11
800132e6:	12 96       	mov	r6,r9
800132e8:	10 95       	mov	r5,r8
800132ea:	14 92       	mov	r2,r10
800132ec:	30 1b       	mov	r11,1
800132ee:	cc 1f       	rcall	80013270 <_Balloc>
800132f0:	f3 d3 c0 14 	bfextu	r9,r3,0x0,0x14
800132f4:	50 09       	stdsp	sp[0x0],r9
800132f6:	f1 d3 c0 1f 	bfextu	r8,r3,0x0,0x1f
800132fa:	b5 a9       	sbr	r9,0x14
800132fc:	f0 01 16 14 	lsr	r1,r8,0x14
80013300:	fb f9 1a 00 	st.wne	sp[0x0],r9
80013304:	18 94       	mov	r4,r12
80013306:	58 02       	cp.w	r2,0
80013308:	c1 d0       	breq	80013342 <__d2b+0x62>
8001330a:	fa cc ff f8 	sub	r12,sp,-8
8001330e:	18 d2       	st.w	--r12,r2
80013310:	c3 6f       	rcall	8001317c <__lo0bits>
80013312:	40 18       	lddsp	r8,sp[0x4]
80013314:	c0 d0       	breq	8001332e <__d2b+0x4e>
80013316:	40 09       	lddsp	r9,sp[0x0]
80013318:	f8 0a 11 20 	rsub	r10,r12,32
8001331c:	f2 0a 09 4a 	lsl	r10,r9,r10
80013320:	f5 e8 10 08 	or	r8,r10,r8
80013324:	89 58       	st.w	r4[0x14],r8
80013326:	f2 0c 0a 49 	lsr	r9,r9,r12
8001332a:	50 09       	stdsp	sp[0x0],r9
8001332c:	c0 28       	rjmp	80013330 <__d2b+0x50>
8001332e:	89 58       	st.w	r4[0x14],r8
80013330:	40 08       	lddsp	r8,sp[0x0]
80013332:	58 08       	cp.w	r8,0
80013334:	f9 b3 01 02 	movne	r3,2
80013338:	f9 b3 00 01 	moveq	r3,1
8001333c:	89 68       	st.w	r4[0x18],r8
8001333e:	89 43       	st.w	r4[0x10],r3
80013340:	c0 88       	rjmp	80013350 <__d2b+0x70>
80013342:	1a 9c       	mov	r12,sp
80013344:	c1 cf       	rcall	8001317c <__lo0bits>
80013346:	30 13       	mov	r3,1
80013348:	40 08       	lddsp	r8,sp[0x0]
8001334a:	2e 0c       	sub	r12,-32
8001334c:	89 43       	st.w	r4[0x10],r3
8001334e:	89 58       	st.w	r4[0x14],r8
80013350:	58 01       	cp.w	r1,0
80013352:	c0 90       	breq	80013364 <__d2b+0x84>
80013354:	e2 c1 04 33 	sub	r1,r1,1075
80013358:	18 01       	add	r1,r12
8001335a:	8d 01       	st.w	r6[0x0],r1
8001335c:	f8 0c 11 35 	rsub	r12,r12,53
80013360:	8b 0c       	st.w	r5[0x0],r12
80013362:	c0 c8       	rjmp	8001337a <__d2b+0x9a>
80013364:	e6 c8 ff fc 	sub	r8,r3,-4
80013368:	f8 cc 04 32 	sub	r12,r12,1074
8001336c:	a5 73       	lsl	r3,0x5
8001336e:	8d 0c       	st.w	r6[0x0],r12
80013370:	e8 08 03 2c 	ld.w	r12,r4[r8<<0x2]
80013374:	cd 4e       	rcall	8001311c <__hi0bits>
80013376:	18 13       	sub	r3,r12
80013378:	8b 03       	st.w	r5[0x0],r3
8001337a:	08 9c       	mov	r12,r4
8001337c:	2f ed       	sub	sp,-8
8001337e:	d8 32       	popm	r0-r7,pc

80013380 <__mdiff>:
80013380:	d4 31       	pushm	r0-r7,lr
80013382:	74 48       	ld.w	r8,r10[0x10]
80013384:	76 45       	ld.w	r5,r11[0x10]
80013386:	16 97       	mov	r7,r11
80013388:	14 96       	mov	r6,r10
8001338a:	10 15       	sub	r5,r8
8001338c:	c1 31       	brne	800133b2 <__mdiff+0x32>
8001338e:	2f b8       	sub	r8,-5
80013390:	ee ce ff ec 	sub	lr,r7,-20
80013394:	a3 68       	lsl	r8,0x2
80013396:	f4 08 00 0b 	add	r11,r10,r8
8001339a:	ee 08 00 08 	add	r8,r7,r8
8001339e:	11 4a       	ld.w	r10,--r8
800133a0:	17 49       	ld.w	r9,--r11
800133a2:	12 3a       	cp.w	r10,r9
800133a4:	c0 30       	breq	800133aa <__mdiff+0x2a>
800133a6:	c0 e2       	brcc	800133c2 <__mdiff+0x42>
800133a8:	c0 78       	rjmp	800133b6 <__mdiff+0x36>
800133aa:	1c 38       	cp.w	r8,lr
800133ac:	fe 9b ff f9 	brhi	8001339e <__mdiff+0x1e>
800133b0:	c4 98       	rjmp	80013442 <__mdiff+0xc2>
800133b2:	58 05       	cp.w	r5,0
800133b4:	c0 64       	brge	800133c0 <__mdiff+0x40>
800133b6:	0e 98       	mov	r8,r7
800133b8:	30 15       	mov	r5,1
800133ba:	0c 97       	mov	r7,r6
800133bc:	10 96       	mov	r6,r8
800133be:	c0 28       	rjmp	800133c2 <__mdiff+0x42>
800133c0:	30 05       	mov	r5,0
800133c2:	6e 1b       	ld.w	r11,r7[0x4]
800133c4:	c5 6f       	rcall	80013270 <_Balloc>
800133c6:	6e 49       	ld.w	r9,r7[0x10]
800133c8:	6c 44       	ld.w	r4,r6[0x10]
800133ca:	99 35       	st.w	r12[0xc],r5
800133cc:	2f b4       	sub	r4,-5
800133ce:	f2 c5 ff fb 	sub	r5,r9,-5
800133d2:	ec 04 00 24 	add	r4,r6,r4<<0x2
800133d6:	ee 05 00 25 	add	r5,r7,r5<<0x2
800133da:	2e c6       	sub	r6,-20
800133dc:	2e c7       	sub	r7,-20
800133de:	f8 c8 ff ec 	sub	r8,r12,-20
800133e2:	30 0a       	mov	r10,0
800133e4:	0f 0e       	ld.w	lr,r7++
800133e6:	0d 0b       	ld.w	r11,r6++
800133e8:	fc 02 16 10 	lsr	r2,lr,0x10
800133ec:	f6 03 16 10 	lsr	r3,r11,0x10
800133f0:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
800133f4:	e4 03 01 03 	sub	r3,r2,r3
800133f8:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
800133fc:	fc 0b 01 0b 	sub	r11,lr,r11
80013400:	f6 0a 00 0a 	add	r10,r11,r10
80013404:	b0 1a       	st.h	r8[0x2],r10
80013406:	b1 4a       	asr	r10,0x10
80013408:	e6 0a 00 0a 	add	r10,r3,r10
8001340c:	b0 0a       	st.h	r8[0x0],r10
8001340e:	2f c8       	sub	r8,-4
80013410:	b1 4a       	asr	r10,0x10
80013412:	08 36       	cp.w	r6,r4
80013414:	ce 83       	brcs	800133e4 <__mdiff+0x64>
80013416:	c0 d8       	rjmp	80013430 <__mdiff+0xb0>
80013418:	0f 0b       	ld.w	r11,r7++
8001341a:	f6 0e 16 10 	lsr	lr,r11,0x10
8001341e:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
80013422:	16 0a       	add	r10,r11
80013424:	b0 1a       	st.h	r8[0x2],r10
80013426:	b1 4a       	asr	r10,0x10
80013428:	1c 0a       	add	r10,lr
8001342a:	b0 0a       	st.h	r8[0x0],r10
8001342c:	2f c8       	sub	r8,-4
8001342e:	b1 4a       	asr	r10,0x10
80013430:	0a 37       	cp.w	r7,r5
80013432:	cf 33       	brcs	80013418 <__mdiff+0x98>
80013434:	c0 28       	rjmp	80013438 <__mdiff+0xb8>
80013436:	20 19       	sub	r9,1
80013438:	11 4a       	ld.w	r10,--r8
8001343a:	58 0a       	cp.w	r10,0
8001343c:	cf d0       	breq	80013436 <__mdiff+0xb6>
8001343e:	99 49       	st.w	r12[0x10],r9
80013440:	d8 32       	popm	r0-r7,pc
80013442:	30 0b       	mov	r11,0
80013444:	c1 6f       	rcall	80013270 <_Balloc>
80013446:	30 18       	mov	r8,1
80013448:	99 48       	st.w	r12[0x10],r8
8001344a:	30 08       	mov	r8,0
8001344c:	99 58       	st.w	r12[0x14],r8
8001344e:	d8 32       	popm	r0-r7,pc

80013450 <__lshift>:
80013450:	d4 31       	pushm	r0-r7,lr
80013452:	16 97       	mov	r7,r11
80013454:	76 46       	ld.w	r6,r11[0x10]
80013456:	f4 02 14 05 	asr	r2,r10,0x5
8001345a:	2f f6       	sub	r6,-1
8001345c:	14 93       	mov	r3,r10
8001345e:	18 94       	mov	r4,r12
80013460:	04 06       	add	r6,r2
80013462:	76 1b       	ld.w	r11,r11[0x4]
80013464:	6e 28       	ld.w	r8,r7[0x8]
80013466:	c0 38       	rjmp	8001346c <__lshift+0x1c>
80013468:	2f fb       	sub	r11,-1
8001346a:	a1 78       	lsl	r8,0x1
8001346c:	10 36       	cp.w	r6,r8
8001346e:	fe 99 ff fd 	brgt	80013468 <__lshift+0x18>
80013472:	08 9c       	mov	r12,r4
80013474:	cf ee       	rcall	80013270 <_Balloc>
80013476:	30 09       	mov	r9,0
80013478:	18 95       	mov	r5,r12
8001347a:	f8 c8 ff ec 	sub	r8,r12,-20
8001347e:	12 9a       	mov	r10,r9
80013480:	c0 38       	rjmp	80013486 <__lshift+0x36>
80013482:	10 aa       	st.w	r8++,r10
80013484:	2f f9       	sub	r9,-1
80013486:	04 39       	cp.w	r9,r2
80013488:	cf d5       	brlt	80013482 <__lshift+0x32>
8001348a:	6e 4b       	ld.w	r11,r7[0x10]
8001348c:	e7 d3 c0 05 	bfextu	r3,r3,0x0,0x5
80013490:	2f bb       	sub	r11,-5
80013492:	ee c9 ff ec 	sub	r9,r7,-20
80013496:	ee 0b 00 2b 	add	r11,r7,r11<<0x2
8001349a:	58 03       	cp.w	r3,0
8001349c:	c1 30       	breq	800134c2 <__lshift+0x72>
8001349e:	e6 0c 11 20 	rsub	r12,r3,32
800134a2:	30 0a       	mov	r10,0
800134a4:	72 02       	ld.w	r2,r9[0x0]
800134a6:	e4 03 09 42 	lsl	r2,r2,r3
800134aa:	04 4a       	or	r10,r2
800134ac:	10 aa       	st.w	r8++,r10
800134ae:	13 0a       	ld.w	r10,r9++
800134b0:	f4 0c 0a 4a 	lsr	r10,r10,r12
800134b4:	16 39       	cp.w	r9,r11
800134b6:	cf 73       	brcs	800134a4 <__lshift+0x54>
800134b8:	91 0a       	st.w	r8[0x0],r10
800134ba:	58 0a       	cp.w	r10,0
800134bc:	c0 70       	breq	800134ca <__lshift+0x7a>
800134be:	2f f6       	sub	r6,-1
800134c0:	c0 58       	rjmp	800134ca <__lshift+0x7a>
800134c2:	13 0a       	ld.w	r10,r9++
800134c4:	10 aa       	st.w	r8++,r10
800134c6:	16 39       	cp.w	r9,r11
800134c8:	cf d3       	brcs	800134c2 <__lshift+0x72>
800134ca:	08 9c       	mov	r12,r4
800134cc:	20 16       	sub	r6,1
800134ce:	0e 9b       	mov	r11,r7
800134d0:	8b 46       	st.w	r5[0x10],r6
800134d2:	cb 5e       	rcall	8001323c <_Bfree>
800134d4:	0a 9c       	mov	r12,r5
800134d6:	d8 32       	popm	r0-r7,pc

800134d8 <__multiply>:
800134d8:	d4 31       	pushm	r0-r7,lr
800134da:	20 2d       	sub	sp,8
800134dc:	76 49       	ld.w	r9,r11[0x10]
800134de:	74 48       	ld.w	r8,r10[0x10]
800134e0:	16 96       	mov	r6,r11
800134e2:	14 95       	mov	r5,r10
800134e4:	10 39       	cp.w	r9,r8
800134e6:	ec 08 17 50 	movlt	r8,r6
800134ea:	ea 06 17 50 	movlt	r6,r5
800134ee:	f0 05 17 50 	movlt	r5,r8
800134f2:	6c 28       	ld.w	r8,r6[0x8]
800134f4:	76 43       	ld.w	r3,r11[0x10]
800134f6:	74 42       	ld.w	r2,r10[0x10]
800134f8:	76 1b       	ld.w	r11,r11[0x4]
800134fa:	e4 03 00 07 	add	r7,r2,r3
800134fe:	10 37       	cp.w	r7,r8
80013500:	f7 bb 09 ff 	subgt	r11,-1
80013504:	cb 6e       	rcall	80013270 <_Balloc>
80013506:	ee c4 ff fb 	sub	r4,r7,-5
8001350a:	f8 c9 ff ec 	sub	r9,r12,-20
8001350e:	f8 04 00 24 	add	r4,r12,r4<<0x2
80013512:	30 0a       	mov	r10,0
80013514:	12 98       	mov	r8,r9
80013516:	c0 28       	rjmp	8001351a <__multiply+0x42>
80013518:	10 aa       	st.w	r8++,r10
8001351a:	08 38       	cp.w	r8,r4
8001351c:	cf e3       	brcs	80013518 <__multiply+0x40>
8001351e:	2f b3       	sub	r3,-5
80013520:	2f b2       	sub	r2,-5
80013522:	ec 03 00 23 	add	r3,r6,r3<<0x2
80013526:	ea 02 00 22 	add	r2,r5,r2<<0x2
8001352a:	ec cb ff ec 	sub	r11,r6,-20
8001352e:	50 12       	stdsp	sp[0x4],r2
80013530:	ea ca ff ec 	sub	r10,r5,-20
80013534:	c4 48       	rjmp	800135bc <__multiply+0xe4>
80013536:	94 95       	ld.uh	r5,r10[0x2]
80013538:	58 05       	cp.w	r5,0
8001353a:	c2 00       	breq	8001357a <__multiply+0xa2>
8001353c:	12 98       	mov	r8,r9
8001353e:	16 96       	mov	r6,r11
80013540:	30 0e       	mov	lr,0
80013542:	50 09       	stdsp	sp[0x0],r9
80013544:	0d 02       	ld.w	r2,r6++
80013546:	e4 00 16 10 	lsr	r0,r2,0x10
8001354a:	70 01       	ld.w	r1,r8[0x0]
8001354c:	70 09       	ld.w	r9,r8[0x0]
8001354e:	b1 81       	lsr	r1,0x10
80013550:	e5 d2 c0 10 	bfextu	r2,r2,0x0,0x10
80013554:	e0 05 03 41 	mac	r1,r0,r5
80013558:	ab 32       	mul	r2,r5
8001355a:	e1 d9 c0 10 	bfextu	r0,r9,0x0,0x10
8001355e:	00 02       	add	r2,r0
80013560:	e4 0e 00 0e 	add	lr,r2,lr
80013564:	b0 1e       	st.h	r8[0x2],lr
80013566:	b1 8e       	lsr	lr,0x10
80013568:	1c 01       	add	r1,lr
8001356a:	b0 01       	st.h	r8[0x0],r1
8001356c:	e2 0e 16 10 	lsr	lr,r1,0x10
80013570:	2f c8       	sub	r8,-4
80013572:	06 36       	cp.w	r6,r3
80013574:	ce 83       	brcs	80013544 <__multiply+0x6c>
80013576:	40 09       	lddsp	r9,sp[0x0]
80013578:	91 0e       	st.w	r8[0x0],lr
8001357a:	94 86       	ld.uh	r6,r10[0x0]
8001357c:	58 06       	cp.w	r6,0
8001357e:	c1 d0       	breq	800135b8 <__multiply+0xe0>
80013580:	72 02       	ld.w	r2,r9[0x0]
80013582:	12 98       	mov	r8,r9
80013584:	16 9e       	mov	lr,r11
80013586:	30 05       	mov	r5,0
80013588:	b0 12       	st.h	r8[0x2],r2
8001358a:	1d 01       	ld.w	r1,lr++
8001358c:	90 82       	ld.uh	r2,r8[0x0]
8001358e:	e1 d1 c0 10 	bfextu	r0,r1,0x0,0x10
80013592:	ad 30       	mul	r0,r6
80013594:	e0 02 00 02 	add	r2,r0,r2
80013598:	e4 05 00 05 	add	r5,r2,r5
8001359c:	b0 05       	st.h	r8[0x0],r5
8001359e:	b1 85       	lsr	r5,0x10
800135a0:	b1 81       	lsr	r1,0x10
800135a2:	2f c8       	sub	r8,-4
800135a4:	ad 31       	mul	r1,r6
800135a6:	90 92       	ld.uh	r2,r8[0x2]
800135a8:	e2 02 00 02 	add	r2,r1,r2
800135ac:	0a 02       	add	r2,r5
800135ae:	e4 05 16 10 	lsr	r5,r2,0x10
800135b2:	06 3e       	cp.w	lr,r3
800135b4:	ce a3       	brcs	80013588 <__multiply+0xb0>
800135b6:	91 02       	st.w	r8[0x0],r2
800135b8:	2f ca       	sub	r10,-4
800135ba:	2f c9       	sub	r9,-4
800135bc:	40 18       	lddsp	r8,sp[0x4]
800135be:	10 3a       	cp.w	r10,r8
800135c0:	cb b3       	brcs	80013536 <__multiply+0x5e>
800135c2:	c0 28       	rjmp	800135c6 <__multiply+0xee>
800135c4:	20 17       	sub	r7,1
800135c6:	58 07       	cp.w	r7,0
800135c8:	e0 8a 00 05 	brle	800135d2 <__multiply+0xfa>
800135cc:	09 48       	ld.w	r8,--r4
800135ce:	58 08       	cp.w	r8,0
800135d0:	cf a0       	breq	800135c4 <__multiply+0xec>
800135d2:	99 47       	st.w	r12[0x10],r7
800135d4:	2f ed       	sub	sp,-8
800135d6:	d8 32       	popm	r0-r7,pc

800135d8 <__i2b>:
800135d8:	d4 21       	pushm	r4-r7,lr
800135da:	16 97       	mov	r7,r11
800135dc:	30 1b       	mov	r11,1
800135de:	c4 9e       	rcall	80013270 <_Balloc>
800135e0:	30 19       	mov	r9,1
800135e2:	99 57       	st.w	r12[0x14],r7
800135e4:	99 49       	st.w	r12[0x10],r9
800135e6:	d8 22       	popm	r4-r7,pc

800135e8 <__multadd>:
800135e8:	d4 31       	pushm	r0-r7,lr
800135ea:	30 08       	mov	r8,0
800135ec:	12 95       	mov	r5,r9
800135ee:	16 97       	mov	r7,r11
800135f0:	18 96       	mov	r6,r12
800135f2:	76 44       	ld.w	r4,r11[0x10]
800135f4:	f6 c9 ff ec 	sub	r9,r11,-20
800135f8:	72 0b       	ld.w	r11,r9[0x0]
800135fa:	f6 0c 16 10 	lsr	r12,r11,0x10
800135fe:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
80013602:	f4 0c 02 4c 	mul	r12,r10,r12
80013606:	f4 0b 03 45 	mac	r5,r10,r11
8001360a:	f7 d5 c0 10 	bfextu	r11,r5,0x0,0x10
8001360e:	b1 85       	lsr	r5,0x10
80013610:	18 05       	add	r5,r12
80013612:	ea 0c 15 10 	lsl	r12,r5,0x10
80013616:	f8 0b 00 0b 	add	r11,r12,r11
8001361a:	12 ab       	st.w	r9++,r11
8001361c:	2f f8       	sub	r8,-1
8001361e:	b1 85       	lsr	r5,0x10
80013620:	08 38       	cp.w	r8,r4
80013622:	ce b5       	brlt	800135f8 <__multadd+0x10>
80013624:	58 05       	cp.w	r5,0
80013626:	c1 c0       	breq	8001365e <__multadd+0x76>
80013628:	6e 28       	ld.w	r8,r7[0x8]
8001362a:	10 34       	cp.w	r4,r8
8001362c:	c1 35       	brlt	80013652 <__multadd+0x6a>
8001362e:	6e 1b       	ld.w	r11,r7[0x4]
80013630:	0c 9c       	mov	r12,r6
80013632:	2f fb       	sub	r11,-1
80013634:	c1 ee       	rcall	80013270 <_Balloc>
80013636:	6e 4a       	ld.w	r10,r7[0x10]
80013638:	ee cb ff f4 	sub	r11,r7,-12
8001363c:	18 93       	mov	r3,r12
8001363e:	2f ea       	sub	r10,-2
80013640:	2f 4c       	sub	r12,-12
80013642:	a3 6a       	lsl	r10,0x2
80013644:	fe b0 dd e9 	rcall	8000f216 <memcpy>
80013648:	0e 9b       	mov	r11,r7
8001364a:	0c 9c       	mov	r12,r6
8001364c:	fe b0 fd f8 	rcall	8001323c <_Bfree>
80013650:	06 97       	mov	r7,r3
80013652:	e8 c8 ff ff 	sub	r8,r4,-1
80013656:	2f b4       	sub	r4,-5
80013658:	8f 48       	st.w	r7[0x10],r8
8001365a:	ee 04 09 25 	st.w	r7[r4<<0x2],r5
8001365e:	0e 9c       	mov	r12,r7
80013660:	d8 32       	popm	r0-r7,pc
80013662:	d7 03       	nop

80013664 <__pow5mult>:
80013664:	d4 31       	pushm	r0-r7,lr
80013666:	14 96       	mov	r6,r10
80013668:	18 97       	mov	r7,r12
8001366a:	16 94       	mov	r4,r11
8001366c:	f1 da c0 02 	bfextu	r8,r10,0x0,0x2
80013670:	c0 90       	breq	80013682 <__pow5mult+0x1e>
80013672:	20 18       	sub	r8,1
80013674:	fe c9 e2 d8 	sub	r9,pc,-7464
80013678:	f2 08 03 2a 	ld.w	r10,r9[r8<<0x2]
8001367c:	30 09       	mov	r9,0
8001367e:	cb 5f       	rcall	800135e8 <__multadd>
80013680:	18 94       	mov	r4,r12
80013682:	a3 46       	asr	r6,0x2
80013684:	c3 40       	breq	800136ec <__pow5mult+0x88>
80013686:	6e 95       	ld.w	r5,r7[0x24]
80013688:	58 05       	cp.w	r5,0
8001368a:	c0 91       	brne	8001369c <__pow5mult+0x38>
8001368c:	31 0c       	mov	r12,16
8001368e:	fe b0 fa fb 	rcall	80012c84 <malloc>
80013692:	99 35       	st.w	r12[0xc],r5
80013694:	8f 9c       	st.w	r7[0x24],r12
80013696:	99 15       	st.w	r12[0x4],r5
80013698:	99 25       	st.w	r12[0x8],r5
8001369a:	99 05       	st.w	r12[0x0],r5
8001369c:	6e 93       	ld.w	r3,r7[0x24]
8001369e:	66 25       	ld.w	r5,r3[0x8]
800136a0:	58 05       	cp.w	r5,0
800136a2:	c0 c1       	brne	800136ba <__pow5mult+0x56>
800136a4:	e0 6b 02 71 	mov	r11,625
800136a8:	0e 9c       	mov	r12,r7
800136aa:	c9 7f       	rcall	800135d8 <__i2b>
800136ac:	87 2c       	st.w	r3[0x8],r12
800136ae:	30 08       	mov	r8,0
800136b0:	18 95       	mov	r5,r12
800136b2:	99 08       	st.w	r12[0x0],r8
800136b4:	c0 38       	rjmp	800136ba <__pow5mult+0x56>
800136b6:	06 9c       	mov	r12,r3
800136b8:	18 95       	mov	r5,r12
800136ba:	ed b6 00 00 	bld	r6,0x0
800136be:	c0 b1       	brne	800136d4 <__pow5mult+0x70>
800136c0:	08 9b       	mov	r11,r4
800136c2:	0a 9a       	mov	r10,r5
800136c4:	0e 9c       	mov	r12,r7
800136c6:	c0 9f       	rcall	800134d8 <__multiply>
800136c8:	08 9b       	mov	r11,r4
800136ca:	18 93       	mov	r3,r12
800136cc:	0e 9c       	mov	r12,r7
800136ce:	06 94       	mov	r4,r3
800136d0:	fe b0 fd b6 	rcall	8001323c <_Bfree>
800136d4:	a1 56       	asr	r6,0x1
800136d6:	c0 b0       	breq	800136ec <__pow5mult+0x88>
800136d8:	6a 03       	ld.w	r3,r5[0x0]
800136da:	58 03       	cp.w	r3,0
800136dc:	ce d1       	brne	800136b6 <__pow5mult+0x52>
800136de:	0a 9a       	mov	r10,r5
800136e0:	0a 9b       	mov	r11,r5
800136e2:	0e 9c       	mov	r12,r7
800136e4:	cf ae       	rcall	800134d8 <__multiply>
800136e6:	8b 0c       	st.w	r5[0x0],r12
800136e8:	99 03       	st.w	r12[0x0],r3
800136ea:	ce 7b       	rjmp	800136b8 <__pow5mult+0x54>
800136ec:	08 9c       	mov	r12,r4
800136ee:	d8 32       	popm	r0-r7,pc

800136f0 <_realloc_r>:
800136f0:	d4 31       	pushm	r0-r7,lr
800136f2:	20 1d       	sub	sp,4
800136f4:	16 94       	mov	r4,r11
800136f6:	18 92       	mov	r2,r12
800136f8:	14 9b       	mov	r11,r10
800136fa:	58 04       	cp.w	r4,0
800136fc:	c0 51       	brne	80013706 <_realloc_r+0x16>
800136fe:	fe b0 fa cb 	rcall	80012c94 <_malloc_r>
80013702:	18 95       	mov	r5,r12
80013704:	c5 39       	rjmp	800139aa <_realloc_r+0x2ba>
80013706:	50 0a       	stdsp	sp[0x0],r10
80013708:	fe b0 fd 08 	rcall	80013118 <__malloc_lock>
8001370c:	40 0b       	lddsp	r11,sp[0x0]
8001370e:	f6 c8 ff f5 	sub	r8,r11,-11
80013712:	e8 c1 00 08 	sub	r1,r4,8
80013716:	10 96       	mov	r6,r8
80013718:	62 1c       	ld.w	r12,r1[0x4]
8001371a:	e0 16 ff f8 	andl	r6,0xfff8
8001371e:	59 68       	cp.w	r8,22
80013720:	f9 b6 08 10 	movls	r6,16
80013724:	16 36       	cp.w	r6,r11
80013726:	5f 38       	srlo	r8
80013728:	f1 e6 13 f8 	or	r8,r8,r6>>0x1f
8001372c:	c0 50       	breq	80013736 <_realloc_r+0x46>
8001372e:	30 c8       	mov	r8,12
80013730:	30 05       	mov	r5,0
80013732:	85 38       	st.w	r2[0xc],r8
80013734:	c3 b9       	rjmp	800139aa <_realloc_r+0x2ba>
80013736:	18 90       	mov	r0,r12
80013738:	e0 10 ff fc 	andl	r0,0xfffc
8001373c:	0c 30       	cp.w	r0,r6
8001373e:	e0 84 01 0b 	brge	80013954 <_realloc_r+0x264>
80013742:	e0 68 01 d4 	mov	r8,468
80013746:	e2 00 00 09 	add	r9,r1,r0
8001374a:	70 25       	ld.w	r5,r8[0x8]
8001374c:	0a 39       	cp.w	r9,r5
8001374e:	c0 90       	breq	80013760 <_realloc_r+0x70>
80013750:	72 1a       	ld.w	r10,r9[0x4]
80013752:	a1 ca       	cbr	r10,0x0
80013754:	f2 0a 00 0a 	add	r10,r9,r10
80013758:	74 1a       	ld.w	r10,r10[0x4]
8001375a:	ed ba 00 00 	bld	r10,0x0
8001375e:	c2 20       	breq	800137a2 <_realloc_r+0xb2>
80013760:	72 1a       	ld.w	r10,r9[0x4]
80013762:	e0 1a ff fc 	andl	r10,0xfffc
80013766:	f4 00 00 03 	add	r3,r10,r0
8001376a:	0a 39       	cp.w	r9,r5
8001376c:	c1 31       	brne	80013792 <_realloc_r+0xa2>
8001376e:	ec c7 ff f0 	sub	r7,r6,-16
80013772:	0e 33       	cp.w	r3,r7
80013774:	c1 95       	brlt	800137a6 <_realloc_r+0xb6>
80013776:	e2 06 00 09 	add	r9,r1,r6
8001377a:	0c 13       	sub	r3,r6
8001377c:	a1 a3       	sbr	r3,0x0
8001377e:	93 13       	st.w	r9[0x4],r3
80013780:	91 29       	st.w	r8[0x8],r9
80013782:	04 9c       	mov	r12,r2
80013784:	62 18       	ld.w	r8,r1[0x4]
80013786:	08 95       	mov	r5,r4
80013788:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8001378c:	10 46       	or	r6,r8
8001378e:	83 16       	st.w	r1[0x4],r6
80013790:	c0 b9       	rjmp	800139a6 <_realloc_r+0x2b6>
80013792:	0c 33       	cp.w	r3,r6
80013794:	c0 95       	brlt	800137a6 <_realloc_r+0xb6>
80013796:	72 28       	ld.w	r8,r9[0x8]
80013798:	02 97       	mov	r7,r1
8001379a:	72 39       	ld.w	r9,r9[0xc]
8001379c:	93 28       	st.w	r9[0x8],r8
8001379e:	91 39       	st.w	r8[0xc],r9
800137a0:	cd c8       	rjmp	80013958 <_realloc_r+0x268>
800137a2:	30 0a       	mov	r10,0
800137a4:	14 99       	mov	r9,r10
800137a6:	ed bc 00 00 	bld	r12,0x0
800137aa:	e0 80 00 95 	breq	800138d4 <_realloc_r+0x1e4>
800137ae:	62 07       	ld.w	r7,r1[0x0]
800137b0:	e2 07 01 07 	sub	r7,r1,r7
800137b4:	6e 1c       	ld.w	r12,r7[0x4]
800137b6:	e0 1c ff fc 	andl	r12,0xfffc
800137ba:	58 09       	cp.w	r9,0
800137bc:	c5 60       	breq	80013868 <_realloc_r+0x178>
800137be:	f8 00 00 03 	add	r3,r12,r0
800137c2:	0a 39       	cp.w	r9,r5
800137c4:	c4 81       	brne	80013854 <_realloc_r+0x164>
800137c6:	14 03       	add	r3,r10
800137c8:	ec c9 ff f0 	sub	r9,r6,-16
800137cc:	12 33       	cp.w	r3,r9
800137ce:	c4 d5       	brlt	80013868 <_realloc_r+0x178>
800137d0:	6e 3a       	ld.w	r10,r7[0xc]
800137d2:	6e 29       	ld.w	r9,r7[0x8]
800137d4:	95 29       	st.w	r10[0x8],r9
800137d6:	93 3a       	st.w	r9[0xc],r10
800137d8:	ee c5 ff f8 	sub	r5,r7,-8
800137dc:	e0 ca 00 04 	sub	r10,r0,4
800137e0:	e0 4a 00 24 	cp.w	r10,36
800137e4:	e0 8b 00 25 	brhi	8001382e <_realloc_r+0x13e>
800137e8:	0a 99       	mov	r9,r5
800137ea:	59 3a       	cp.w	r10,19
800137ec:	e0 88 00 1a 	brls	80013820 <_realloc_r+0x130>
800137f0:	09 09       	ld.w	r9,r4++
800137f2:	8b 09       	st.w	r5[0x0],r9
800137f4:	09 09       	ld.w	r9,r4++
800137f6:	8f 39       	st.w	r7[0xc],r9
800137f8:	ee c9 ff f0 	sub	r9,r7,-16
800137fc:	59 ba       	cp.w	r10,27
800137fe:	e0 88 00 11 	brls	80013820 <_realloc_r+0x130>
80013802:	09 0b       	ld.w	r11,r4++
80013804:	93 0b       	st.w	r9[0x0],r11
80013806:	09 09       	ld.w	r9,r4++
80013808:	8f 59       	st.w	r7[0x14],r9
8001380a:	ee c9 ff e8 	sub	r9,r7,-24
8001380e:	e0 4a 00 24 	cp.w	r10,36
80013812:	c0 71       	brne	80013820 <_realloc_r+0x130>
80013814:	09 0a       	ld.w	r10,r4++
80013816:	93 0a       	st.w	r9[0x0],r10
80013818:	ee c9 ff e0 	sub	r9,r7,-32
8001381c:	09 0a       	ld.w	r10,r4++
8001381e:	8f 7a       	st.w	r7[0x1c],r10
80013820:	09 0a       	ld.w	r10,r4++
80013822:	12 aa       	st.w	r9++,r10
80013824:	68 0a       	ld.w	r10,r4[0x0]
80013826:	93 0a       	st.w	r9[0x0],r10
80013828:	68 1a       	ld.w	r10,r4[0x4]
8001382a:	93 1a       	st.w	r9[0x4],r10
8001382c:	c0 78       	rjmp	8001383a <_realloc_r+0x14a>
8001382e:	50 08       	stdsp	sp[0x0],r8
80013830:	08 9b       	mov	r11,r4
80013832:	0a 9c       	mov	r12,r5
80013834:	fe b0 fc 53 	rcall	800130da <memmove>
80013838:	40 08       	lddsp	r8,sp[0x0]
8001383a:	ee 06 00 09 	add	r9,r7,r6
8001383e:	0c 13       	sub	r3,r6
80013840:	a1 a3       	sbr	r3,0x0
80013842:	93 13       	st.w	r9[0x4],r3
80013844:	91 29       	st.w	r8[0x8],r9
80013846:	04 9c       	mov	r12,r2
80013848:	6e 18       	ld.w	r8,r7[0x4]
8001384a:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8001384e:	10 46       	or	r6,r8
80013850:	8f 16       	st.w	r7[0x4],r6
80013852:	ca a8       	rjmp	800139a6 <_realloc_r+0x2b6>
80013854:	14 03       	add	r3,r10
80013856:	0c 33       	cp.w	r3,r6
80013858:	c0 85       	brlt	80013868 <_realloc_r+0x178>
8001385a:	72 28       	ld.w	r8,r9[0x8]
8001385c:	72 39       	ld.w	r9,r9[0xc]
8001385e:	93 28       	st.w	r9[0x8],r8
80013860:	91 39       	st.w	r8[0xc],r9
80013862:	6e 28       	ld.w	r8,r7[0x8]
80013864:	6e 39       	ld.w	r9,r7[0xc]
80013866:	c0 78       	rjmp	80013874 <_realloc_r+0x184>
80013868:	f8 00 00 03 	add	r3,r12,r0
8001386c:	0c 33       	cp.w	r3,r6
8001386e:	c3 35       	brlt	800138d4 <_realloc_r+0x1e4>
80013870:	6e 39       	ld.w	r9,r7[0xc]
80013872:	6e 28       	ld.w	r8,r7[0x8]
80013874:	93 28       	st.w	r9[0x8],r8
80013876:	91 39       	st.w	r8[0xc],r9
80013878:	e0 ca 00 04 	sub	r10,r0,4
8001387c:	ee cc ff f8 	sub	r12,r7,-8
80013880:	e0 4a 00 24 	cp.w	r10,36
80013884:	e0 8b 00 24 	brhi	800138cc <_realloc_r+0x1dc>
80013888:	59 3a       	cp.w	r10,19
8001388a:	e0 88 00 1a 	brls	800138be <_realloc_r+0x1ce>
8001388e:	09 08       	ld.w	r8,r4++
80013890:	99 08       	st.w	r12[0x0],r8
80013892:	09 08       	ld.w	r8,r4++
80013894:	8f 38       	st.w	r7[0xc],r8
80013896:	ee cc ff f0 	sub	r12,r7,-16
8001389a:	59 ba       	cp.w	r10,27
8001389c:	e0 88 00 11 	brls	800138be <_realloc_r+0x1ce>
800138a0:	09 08       	ld.w	r8,r4++
800138a2:	99 08       	st.w	r12[0x0],r8
800138a4:	09 08       	ld.w	r8,r4++
800138a6:	8f 58       	st.w	r7[0x14],r8
800138a8:	ee cc ff e8 	sub	r12,r7,-24
800138ac:	e0 4a 00 24 	cp.w	r10,36
800138b0:	c0 71       	brne	800138be <_realloc_r+0x1ce>
800138b2:	09 08       	ld.w	r8,r4++
800138b4:	99 08       	st.w	r12[0x0],r8
800138b6:	ee cc ff e0 	sub	r12,r7,-32
800138ba:	09 08       	ld.w	r8,r4++
800138bc:	8f 78       	st.w	r7[0x1c],r8
800138be:	09 08       	ld.w	r8,r4++
800138c0:	18 a8       	st.w	r12++,r8
800138c2:	68 08       	ld.w	r8,r4[0x0]
800138c4:	99 08       	st.w	r12[0x0],r8
800138c6:	68 18       	ld.w	r8,r4[0x4]
800138c8:	99 18       	st.w	r12[0x4],r8
800138ca:	c4 78       	rjmp	80013958 <_realloc_r+0x268>
800138cc:	08 9b       	mov	r11,r4
800138ce:	fe b0 fc 06 	rcall	800130da <memmove>
800138d2:	c4 38       	rjmp	80013958 <_realloc_r+0x268>
800138d4:	04 9c       	mov	r12,r2
800138d6:	fe b0 f9 df 	rcall	80012c94 <_malloc_r>
800138da:	18 95       	mov	r5,r12
800138dc:	c3 a0       	breq	80013950 <_realloc_r+0x260>
800138de:	62 18       	ld.w	r8,r1[0x4]
800138e0:	f8 c9 00 08 	sub	r9,r12,8
800138e4:	a1 c8       	cbr	r8,0x0
800138e6:	e2 08 00 08 	add	r8,r1,r8
800138ea:	10 39       	cp.w	r9,r8
800138ec:	c0 71       	brne	800138fa <_realloc_r+0x20a>
800138ee:	72 13       	ld.w	r3,r9[0x4]
800138f0:	02 97       	mov	r7,r1
800138f2:	e0 13 ff fc 	andl	r3,0xfffc
800138f6:	00 03       	add	r3,r0
800138f8:	c3 08       	rjmp	80013958 <_realloc_r+0x268>
800138fa:	e0 ca 00 04 	sub	r10,r0,4
800138fe:	e0 4a 00 24 	cp.w	r10,36
80013902:	e0 8b 00 20 	brhi	80013942 <_realloc_r+0x252>
80013906:	08 99       	mov	r9,r4
80013908:	18 98       	mov	r8,r12
8001390a:	59 3a       	cp.w	r10,19
8001390c:	e0 88 00 14 	brls	80013934 <_realloc_r+0x244>
80013910:	13 0b       	ld.w	r11,r9++
80013912:	10 ab       	st.w	r8++,r11
80013914:	13 0b       	ld.w	r11,r9++
80013916:	10 ab       	st.w	r8++,r11
80013918:	59 ba       	cp.w	r10,27
8001391a:	e0 88 00 0d 	brls	80013934 <_realloc_r+0x244>
8001391e:	13 0b       	ld.w	r11,r9++
80013920:	10 ab       	st.w	r8++,r11
80013922:	13 0b       	ld.w	r11,r9++
80013924:	10 ab       	st.w	r8++,r11
80013926:	e0 4a 00 24 	cp.w	r10,36
8001392a:	c0 51       	brne	80013934 <_realloc_r+0x244>
8001392c:	13 0a       	ld.w	r10,r9++
8001392e:	10 aa       	st.w	r8++,r10
80013930:	13 0a       	ld.w	r10,r9++
80013932:	10 aa       	st.w	r8++,r10
80013934:	13 0a       	ld.w	r10,r9++
80013936:	10 aa       	st.w	r8++,r10
80013938:	72 0a       	ld.w	r10,r9[0x0]
8001393a:	91 0a       	st.w	r8[0x0],r10
8001393c:	72 19       	ld.w	r9,r9[0x4]
8001393e:	91 19       	st.w	r8[0x4],r9
80013940:	c0 48       	rjmp	80013948 <_realloc_r+0x258>
80013942:	08 9b       	mov	r11,r4
80013944:	fe b0 fb cb 	rcall	800130da <memmove>
80013948:	08 9b       	mov	r11,r4
8001394a:	04 9c       	mov	r12,r2
8001394c:	fe b0 f6 fe 	rcall	80012748 <_free_r>
80013950:	04 9c       	mov	r12,r2
80013952:	c2 a8       	rjmp	800139a6 <_realloc_r+0x2b6>
80013954:	00 93       	mov	r3,r0
80013956:	02 97       	mov	r7,r1
80013958:	e6 06 01 09 	sub	r9,r3,r6
8001395c:	6e 18       	ld.w	r8,r7[0x4]
8001395e:	58 f9       	cp.w	r9,15
80013960:	e0 88 00 16 	brls	8001398c <_realloc_r+0x29c>
80013964:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80013968:	ed e8 10 08 	or	r8,r6,r8
8001396c:	8f 18       	st.w	r7[0x4],r8
8001396e:	12 98       	mov	r8,r9
80013970:	a1 a8       	sbr	r8,0x0
80013972:	ee 06 00 0b 	add	r11,r7,r6
80013976:	f6 09 00 09 	add	r9,r11,r9
8001397a:	97 18       	st.w	r11[0x4],r8
8001397c:	72 18       	ld.w	r8,r9[0x4]
8001397e:	a1 a8       	sbr	r8,0x0
80013980:	2f 8b       	sub	r11,-8
80013982:	93 18       	st.w	r9[0x4],r8
80013984:	04 9c       	mov	r12,r2
80013986:	fe b0 f6 e1 	rcall	80012748 <_free_r>
8001398a:	c0 b8       	rjmp	800139a0 <_realloc_r+0x2b0>
8001398c:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80013990:	e7 e8 10 08 	or	r8,r3,r8
80013994:	8f 18       	st.w	r7[0x4],r8
80013996:	ee 03 00 03 	add	r3,r7,r3
8001399a:	66 18       	ld.w	r8,r3[0x4]
8001399c:	a1 a8       	sbr	r8,0x0
8001399e:	87 18       	st.w	r3[0x4],r8
800139a0:	04 9c       	mov	r12,r2
800139a2:	ee c5 ff f8 	sub	r5,r7,-8
800139a6:	fe b0 fb ba 	rcall	8001311a <__malloc_unlock>
800139aa:	0a 9c       	mov	r12,r5
800139ac:	2f fd       	sub	sp,-4
800139ae:	d8 32       	popm	r0-r7,pc

800139b0 <__isinfd>:
800139b0:	14 98       	mov	r8,r10
800139b2:	fc 19 7f f0 	movh	r9,0x7ff0
800139b6:	f5 db c0 1f 	bfextu	r10,r11,0x0,0x1f
800139ba:	f0 0b 11 00 	rsub	r11,r8,0
800139be:	f7 e8 10 08 	or	r8,r11,r8
800139c2:	f5 e8 13 f8 	or	r8,r10,r8>>0x1f
800139c6:	f2 08 01 08 	sub	r8,r9,r8
800139ca:	f0 0c 11 00 	rsub	r12,r8,0
800139ce:	f9 e8 10 08 	or	r8,r12,r8
800139d2:	f0 0c 14 1f 	asr	r12,r8,0x1f
800139d6:	2f fc       	sub	r12,-1
800139d8:	5e fc       	retal	r12

800139da <__isnand>:
800139da:	14 98       	mov	r8,r10
800139dc:	f5 db c0 1f 	bfextu	r10,r11,0x0,0x1f
800139e0:	f0 0c 11 00 	rsub	r12,r8,0
800139e4:	10 4c       	or	r12,r8
800139e6:	fc 18 7f f0 	movh	r8,0x7ff0
800139ea:	f5 ec 13 fc 	or	r12,r10,r12>>0x1f
800139ee:	f0 0c 01 0c 	sub	r12,r8,r12
800139f2:	bf 9c       	lsr	r12,0x1f
800139f4:	5e fc       	retal	r12
800139f6:	d7 03       	nop

800139f8 <_sbrk_r>:
800139f8:	d4 21       	pushm	r4-r7,lr
800139fa:	30 08       	mov	r8,0
800139fc:	18 97       	mov	r7,r12
800139fe:	e0 66 0e 70 	mov	r6,3696
80013a02:	16 9c       	mov	r12,r11
80013a04:	8d 08       	st.w	r6[0x0],r8
80013a06:	ca fc       	rcall	80013b64 <_sbrk>
80013a08:	5b fc       	cp.w	r12,-1
80013a0a:	c0 51       	brne	80013a14 <_sbrk_r+0x1c>
80013a0c:	6c 08       	ld.w	r8,r6[0x0]
80013a0e:	58 08       	cp.w	r8,0
80013a10:	ef f8 1a 03 	st.wne	r7[0xc],r8
80013a14:	d8 22       	popm	r4-r7,pc
80013a16:	d7 03       	nop

80013a18 <__sclose>:
80013a18:	d4 01       	pushm	lr
80013a1a:	96 7b       	ld.sh	r11,r11[0xe]
80013a1c:	cf ec       	rcall	80013c18 <_close_r>
80013a1e:	d8 02       	popm	pc

80013a20 <__sseek>:
80013a20:	d4 21       	pushm	r4-r7,lr
80013a22:	16 97       	mov	r7,r11
80013a24:	96 7b       	ld.sh	r11,r11[0xe]
80013a26:	c8 5d       	rcall	80013d30 <_lseek_r>
80013a28:	8e 68       	ld.sh	r8,r7[0xc]
80013a2a:	10 99       	mov	r9,r8
80013a2c:	ad c8       	cbr	r8,0xc
80013a2e:	ad a9       	sbr	r9,0xc
80013a30:	5b fc       	cp.w	r12,-1
80013a32:	ef f8 0c 06 	st.heq	r7[0xc],r8
80013a36:	ef f9 1c 06 	st.hne	r7[0xc],r9
80013a3a:	ef fc 1a 15 	st.wne	r7[0x54],r12
80013a3e:	d8 22       	popm	r4-r7,pc

80013a40 <__swrite>:
80013a40:	d4 21       	pushm	r4-r7,lr
80013a42:	96 68       	ld.sh	r8,r11[0xc]
80013a44:	16 97       	mov	r7,r11
80013a46:	14 95       	mov	r5,r10
80013a48:	12 94       	mov	r4,r9
80013a4a:	e2 18 01 00 	andl	r8,0x100,COH
80013a4e:	18 96       	mov	r6,r12
80013a50:	c0 50       	breq	80013a5a <__swrite+0x1a>
80013a52:	30 29       	mov	r9,2
80013a54:	30 0a       	mov	r10,0
80013a56:	96 7b       	ld.sh	r11,r11[0xe]
80013a58:	c6 cd       	rcall	80013d30 <_lseek_r>
80013a5a:	8e 68       	ld.sh	r8,r7[0xc]
80013a5c:	ad c8       	cbr	r8,0xc
80013a5e:	08 99       	mov	r9,r4
80013a60:	0a 9a       	mov	r10,r5
80013a62:	8e 7b       	ld.sh	r11,r7[0xe]
80013a64:	0c 9c       	mov	r12,r6
80013a66:	ae 68       	st.h	r7[0xc],r8
80013a68:	c9 ac       	rcall	80013b9c <_write_r>
80013a6a:	d8 22       	popm	r4-r7,pc

80013a6c <__sread>:
80013a6c:	d4 21       	pushm	r4-r7,lr
80013a6e:	16 97       	mov	r7,r11
80013a70:	96 7b       	ld.sh	r11,r11[0xe]
80013a72:	c7 1d       	rcall	80013d54 <_read_r>
80013a74:	c0 65       	brlt	80013a80 <__sread+0x14>
80013a76:	6f 58       	ld.w	r8,r7[0x54]
80013a78:	18 08       	add	r8,r12
80013a7a:	ef 48 00 54 	st.w	r7[84],r8
80013a7e:	d8 22       	popm	r4-r7,pc
80013a80:	8e 68       	ld.sh	r8,r7[0xc]
80013a82:	ad c8       	cbr	r8,0xc
80013a84:	ae 68       	st.h	r7[0xc],r8
80013a86:	d8 22       	popm	r4-r7,pc

80013a88 <strlen>:
80013a88:	30 09       	mov	r9,0
80013a8a:	18 98       	mov	r8,r12
80013a8c:	c0 28       	rjmp	80013a90 <strlen+0x8>
80013a8e:	2f f8       	sub	r8,-1
80013a90:	11 8a       	ld.ub	r10,r8[0x0]
80013a92:	f2 0a 18 00 	cp.b	r10,r9
80013a96:	cf c1       	brne	80013a8e <strlen+0x6>
80013a98:	f0 0c 01 0c 	sub	r12,r8,r12
80013a9c:	5e fc       	retal	r12
80013a9e:	d7 03       	nop

80013aa0 <_close>:
80013aa0:	30 28       	mov	r8,2
80013aa2:	d6 73       	breakpoint
80013aa4:	3f fc       	mov	r12,-1
80013aa6:	35 8b       	mov	r11,88
80013aa8:	58 0c       	cp.w	r12,0
80013aaa:	5e 4c       	retge	r12
80013aac:	e0 6a 0e 70 	mov	r10,3696
80013ab0:	95 0b       	st.w	r10[0x0],r11
80013ab2:	5e fc       	retal	r12

80013ab4 <_lseek>:
80013ab4:	30 58       	mov	r8,5
80013ab6:	d6 73       	breakpoint
80013ab8:	3f fc       	mov	r12,-1
80013aba:	35 8b       	mov	r11,88
80013abc:	58 0c       	cp.w	r12,0
80013abe:	5e 4c       	retge	r12
80013ac0:	e0 6a 0e 70 	mov	r10,3696
80013ac4:	95 0b       	st.w	r10[0x0],r11
80013ac6:	5e fc       	retal	r12

80013ac8 <_read>:
80013ac8:	30 38       	mov	r8,3
80013aca:	d6 73       	breakpoint
80013acc:	3f fc       	mov	r12,-1
80013ace:	35 8b       	mov	r11,88
80013ad0:	58 0c       	cp.w	r12,0
80013ad2:	5e 4c       	retge	r12
80013ad4:	e0 6a 0e 70 	mov	r10,3696
80013ad8:	95 0b       	st.w	r10[0x0],r11
80013ada:	5e fc       	retal	r12

80013adc <_write>:
80013adc:	30 48       	mov	r8,4
80013ade:	d6 73       	breakpoint
80013ae0:	3f fc       	mov	r12,-1
80013ae2:	35 8b       	mov	r11,88
80013ae4:	58 0c       	cp.w	r12,0
80013ae6:	5e 4c       	retge	r12
80013ae8:	e0 6a 0e 70 	mov	r10,3696
80013aec:	95 0b       	st.w	r10[0x0],r11
80013aee:	5e fc       	retal	r12

80013af0 <isatty>:
80013af0:	30 b8       	mov	r8,11
80013af2:	d6 73       	breakpoint
80013af4:	3f fc       	mov	r12,-1
80013af6:	35 8b       	mov	r11,88
80013af8:	58 0c       	cp.w	r12,0
80013afa:	5e 4c       	retge	r12
80013afc:	e0 6a 0e 70 	mov	r10,3696
80013b00:	95 0b       	st.w	r10[0x0],r11
80013b02:	5e fc       	retal	r12

80013b04 <_fstat_host>:
80013b04:	30 98       	mov	r8,9
80013b06:	d6 73       	breakpoint
80013b08:	3f fc       	mov	r12,-1
80013b0a:	35 8b       	mov	r11,88
80013b0c:	58 0c       	cp.w	r12,0
80013b0e:	5e 4c       	retge	r12
80013b10:	e0 6a 0e 70 	mov	r10,3696
80013b14:	95 0b       	st.w	r10[0x0],r11
80013b16:	5e fc       	retal	r12

80013b18 <_fstat>:
80013b18:	d4 21       	pushm	r4-r7,lr
80013b1a:	21 0d       	sub	sp,64
80013b1c:	16 97       	mov	r7,r11
80013b1e:	1a 9b       	mov	r11,sp
80013b20:	cf 2f       	rcall	80013b04 <_fstat_host>
80013b22:	c0 34       	brge	80013b28 <_fstat+0x10>
80013b24:	3f fc       	mov	r12,-1
80013b26:	c1 c8       	rjmp	80013b5e <_fstat+0x46>
80013b28:	40 08       	lddsp	r8,sp[0x0]
80013b2a:	ae 08       	st.h	r7[0x0],r8
80013b2c:	40 18       	lddsp	r8,sp[0x4]
80013b2e:	ae 18       	st.h	r7[0x2],r8
80013b30:	40 28       	lddsp	r8,sp[0x8]
80013b32:	8f 18       	st.w	r7[0x4],r8
80013b34:	40 38       	lddsp	r8,sp[0xc]
80013b36:	ae 48       	st.h	r7[0x8],r8
80013b38:	40 48       	lddsp	r8,sp[0x10]
80013b3a:	ae 58       	st.h	r7[0xa],r8
80013b3c:	40 58       	lddsp	r8,sp[0x14]
80013b3e:	ae 68       	st.h	r7[0xc],r8
80013b40:	40 68       	lddsp	r8,sp[0x18]
80013b42:	ae 78       	st.h	r7[0xe],r8
80013b44:	40 88       	lddsp	r8,sp[0x20]
80013b46:	8f 48       	st.w	r7[0x10],r8
80013b48:	40 a8       	lddsp	r8,sp[0x28]
80013b4a:	8f b8       	st.w	r7[0x2c],r8
80013b4c:	40 c8       	lddsp	r8,sp[0x30]
80013b4e:	8f c8       	st.w	r7[0x30],r8
80013b50:	40 d8       	lddsp	r8,sp[0x34]
80013b52:	8f 58       	st.w	r7[0x14],r8
80013b54:	40 e8       	lddsp	r8,sp[0x38]
80013b56:	30 0c       	mov	r12,0
80013b58:	8f 78       	st.w	r7[0x1c],r8
80013b5a:	40 f8       	lddsp	r8,sp[0x3c]
80013b5c:	8f 98       	st.w	r7[0x24],r8
80013b5e:	2f 0d       	sub	sp,-64
80013b60:	d8 22       	popm	r4-r7,pc
80013b62:	d7 03       	nop

80013b64 <_sbrk>:
80013b64:	d4 01       	pushm	lr
80013b66:	e0 68 08 f0 	mov	r8,2288
80013b6a:	70 09       	ld.w	r9,r8[0x0]
80013b6c:	58 09       	cp.w	r9,0
80013b6e:	c0 41       	brne	80013b76 <_sbrk+0x12>
80013b70:	e0 69 0e 78 	mov	r9,3704
80013b74:	91 09       	st.w	r8[0x0],r9
80013b76:	e0 69 08 f0 	mov	r9,2288
80013b7a:	e0 6a f0 00 	mov	r10,61440
80013b7e:	72 08       	ld.w	r8,r9[0x0]
80013b80:	f0 0c 00 0c 	add	r12,r8,r12
80013b84:	14 3c       	cp.w	r12,r10
80013b86:	e0 8b 00 04 	brhi	80013b8e <_sbrk+0x2a>
80013b8a:	93 0c       	st.w	r9[0x0],r12
80013b8c:	c0 58       	rjmp	80013b96 <_sbrk+0x32>
80013b8e:	c5 5c       	rcall	80013c38 <__errno>
80013b90:	30 c8       	mov	r8,12
80013b92:	99 08       	st.w	r12[0x0],r8
80013b94:	3f f8       	mov	r8,-1
80013b96:	10 9c       	mov	r12,r8
80013b98:	d8 02       	popm	pc
80013b9a:	d7 03       	nop

80013b9c <_write_r>:
80013b9c:	d4 21       	pushm	r4-r7,lr
80013b9e:	16 98       	mov	r8,r11
80013ba0:	18 97       	mov	r7,r12
80013ba2:	10 9c       	mov	r12,r8
80013ba4:	30 08       	mov	r8,0
80013ba6:	14 9b       	mov	r11,r10
80013ba8:	e0 66 0e 70 	mov	r6,3696
80013bac:	12 9a       	mov	r10,r9
80013bae:	8d 08       	st.w	r6[0x0],r8
80013bb0:	c9 6f       	rcall	80013adc <_write>
80013bb2:	5b fc       	cp.w	r12,-1
80013bb4:	c0 51       	brne	80013bbe <_write_r+0x22>
80013bb6:	6c 08       	ld.w	r8,r6[0x0]
80013bb8:	58 08       	cp.w	r8,0
80013bba:	ef f8 1a 03 	st.wne	r7[0xc],r8
80013bbe:	d8 22       	popm	r4-r7,pc

80013bc0 <_calloc_r>:
80013bc0:	d4 21       	pushm	r4-r7,lr
80013bc2:	f4 0b 02 4b 	mul	r11,r10,r11
80013bc6:	fe b0 f8 67 	rcall	80012c94 <_malloc_r>
80013bca:	18 97       	mov	r7,r12
80013bcc:	c2 30       	breq	80013c12 <_calloc_r+0x52>
80013bce:	f8 fa ff fc 	ld.w	r10,r12[-4]
80013bd2:	e0 1a ff fc 	andl	r10,0xfffc
80013bd6:	20 4a       	sub	r10,4
80013bd8:	e0 4a 00 24 	cp.w	r10,36
80013bdc:	e0 8b 00 18 	brhi	80013c0c <_calloc_r+0x4c>
80013be0:	18 98       	mov	r8,r12
80013be2:	59 3a       	cp.w	r10,19
80013be4:	e0 88 00 0f 	brls	80013c02 <_calloc_r+0x42>
80013be8:	30 09       	mov	r9,0
80013bea:	10 a9       	st.w	r8++,r9
80013bec:	10 a9       	st.w	r8++,r9
80013bee:	59 ba       	cp.w	r10,27
80013bf0:	e0 88 00 09 	brls	80013c02 <_calloc_r+0x42>
80013bf4:	10 a9       	st.w	r8++,r9
80013bf6:	10 a9       	st.w	r8++,r9
80013bf8:	e0 4a 00 24 	cp.w	r10,36
80013bfc:	c0 31       	brne	80013c02 <_calloc_r+0x42>
80013bfe:	10 a9       	st.w	r8++,r9
80013c00:	10 a9       	st.w	r8++,r9
80013c02:	30 09       	mov	r9,0
80013c04:	10 a9       	st.w	r8++,r9
80013c06:	91 19       	st.w	r8[0x4],r9
80013c08:	91 09       	st.w	r8[0x0],r9
80013c0a:	c0 48       	rjmp	80013c12 <_calloc_r+0x52>
80013c0c:	30 0b       	mov	r11,0
80013c0e:	fe b0 db a8 	rcall	8000f35e <memset>
80013c12:	0e 9c       	mov	r12,r7
80013c14:	d8 22       	popm	r4-r7,pc
80013c16:	d7 03       	nop

80013c18 <_close_r>:
80013c18:	d4 21       	pushm	r4-r7,lr
80013c1a:	30 08       	mov	r8,0
80013c1c:	18 97       	mov	r7,r12
80013c1e:	e0 66 0e 70 	mov	r6,3696
80013c22:	16 9c       	mov	r12,r11
80013c24:	8d 08       	st.w	r6[0x0],r8
80013c26:	c3 df       	rcall	80013aa0 <_close>
80013c28:	5b fc       	cp.w	r12,-1
80013c2a:	c0 51       	brne	80013c34 <_close_r+0x1c>
80013c2c:	6c 08       	ld.w	r8,r6[0x0]
80013c2e:	58 08       	cp.w	r8,0
80013c30:	ef f8 1a 03 	st.wne	r7[0xc],r8
80013c34:	d8 22       	popm	r4-r7,pc
80013c36:	d7 03       	nop

80013c38 <__errno>:
80013c38:	e0 68 01 d0 	mov	r8,464
80013c3c:	70 0c       	ld.w	r12,r8[0x0]
80013c3e:	2f 4c       	sub	r12,-12
80013c40:	5e fc       	retal	r12
80013c42:	d7 03       	nop

80013c44 <_fclose_r>:
80013c44:	d4 21       	pushm	r4-r7,lr
80013c46:	18 96       	mov	r6,r12
80013c48:	16 97       	mov	r7,r11
80013c4a:	58 0b       	cp.w	r11,0
80013c4c:	c0 31       	brne	80013c52 <_fclose_r+0xe>
80013c4e:	16 95       	mov	r5,r11
80013c50:	c5 38       	rjmp	80013cf6 <_fclose_r+0xb2>
80013c52:	fe b0 f4 8f 	rcall	80012570 <__sfp_lock_acquire>
80013c56:	58 06       	cp.w	r6,0
80013c58:	c0 70       	breq	80013c66 <_fclose_r+0x22>
80013c5a:	6c 68       	ld.w	r8,r6[0x18]
80013c5c:	58 08       	cp.w	r8,0
80013c5e:	c0 41       	brne	80013c66 <_fclose_r+0x22>
80013c60:	0c 9c       	mov	r12,r6
80013c62:	fe b0 f4 d9 	rcall	80012614 <__sinit>
80013c66:	fe c8 e9 72 	sub	r8,pc,-5774
80013c6a:	10 37       	cp.w	r7,r8
80013c6c:	c0 31       	brne	80013c72 <_fclose_r+0x2e>
80013c6e:	6c 07       	ld.w	r7,r6[0x0]
80013c70:	c0 c8       	rjmp	80013c88 <_fclose_r+0x44>
80013c72:	fe c8 e9 5e 	sub	r8,pc,-5794
80013c76:	10 37       	cp.w	r7,r8
80013c78:	c0 31       	brne	80013c7e <_fclose_r+0x3a>
80013c7a:	6c 17       	ld.w	r7,r6[0x4]
80013c7c:	c0 68       	rjmp	80013c88 <_fclose_r+0x44>
80013c7e:	fe c8 e9 4a 	sub	r8,pc,-5814
80013c82:	10 37       	cp.w	r7,r8
80013c84:	ed f7 00 02 	ld.weq	r7,r6[0x8]
80013c88:	8e 69       	ld.sh	r9,r7[0xc]
80013c8a:	30 08       	mov	r8,0
80013c8c:	f0 09 19 00 	cp.h	r9,r8
80013c90:	c0 51       	brne	80013c9a <_fclose_r+0x56>
80013c92:	fe b0 f4 70 	rcall	80012572 <__sfp_lock_release>
80013c96:	30 05       	mov	r5,0
80013c98:	c2 f8       	rjmp	80013cf6 <_fclose_r+0xb2>
80013c9a:	0e 9b       	mov	r11,r7
80013c9c:	0c 9c       	mov	r12,r6
80013c9e:	fe b0 f3 e3 	rcall	80012464 <_fflush_r>
80013ca2:	6e c8       	ld.w	r8,r7[0x30]
80013ca4:	18 95       	mov	r5,r12
80013ca6:	58 08       	cp.w	r8,0
80013ca8:	c0 60       	breq	80013cb4 <_fclose_r+0x70>
80013caa:	6e 8b       	ld.w	r11,r7[0x20]
80013cac:	0c 9c       	mov	r12,r6
80013cae:	5d 18       	icall	r8
80013cb0:	f9 b5 05 ff 	movlt	r5,-1
80013cb4:	8e 68       	ld.sh	r8,r7[0xc]
80013cb6:	ed b8 00 07 	bld	r8,0x7
80013cba:	c0 51       	brne	80013cc4 <_fclose_r+0x80>
80013cbc:	6e 4b       	ld.w	r11,r7[0x10]
80013cbe:	0c 9c       	mov	r12,r6
80013cc0:	fe b0 f5 44 	rcall	80012748 <_free_r>
80013cc4:	6e db       	ld.w	r11,r7[0x34]
80013cc6:	58 0b       	cp.w	r11,0
80013cc8:	c0 a0       	breq	80013cdc <_fclose_r+0x98>
80013cca:	ee c8 ff bc 	sub	r8,r7,-68
80013cce:	10 3b       	cp.w	r11,r8
80013cd0:	c0 40       	breq	80013cd8 <_fclose_r+0x94>
80013cd2:	0c 9c       	mov	r12,r6
80013cd4:	fe b0 f5 3a 	rcall	80012748 <_free_r>
80013cd8:	30 08       	mov	r8,0
80013cda:	8f d8       	st.w	r7[0x34],r8
80013cdc:	6f 2b       	ld.w	r11,r7[0x48]
80013cde:	58 0b       	cp.w	r11,0
80013ce0:	c0 70       	breq	80013cee <_fclose_r+0xaa>
80013ce2:	0c 9c       	mov	r12,r6
80013ce4:	fe b0 f5 32 	rcall	80012748 <_free_r>
80013ce8:	30 08       	mov	r8,0
80013cea:	ef 48 00 48 	st.w	r7[72],r8
80013cee:	30 08       	mov	r8,0
80013cf0:	ae 68       	st.h	r7[0xc],r8
80013cf2:	fe b0 f4 40 	rcall	80012572 <__sfp_lock_release>
80013cf6:	0a 9c       	mov	r12,r5
80013cf8:	d8 22       	popm	r4-r7,pc
80013cfa:	d7 03       	nop

80013cfc <fclose>:
80013cfc:	d4 01       	pushm	lr
80013cfe:	e0 68 01 d0 	mov	r8,464
80013d02:	18 9b       	mov	r11,r12
80013d04:	70 0c       	ld.w	r12,r8[0x0]
80013d06:	c9 ff       	rcall	80013c44 <_fclose_r>
80013d08:	d8 02       	popm	pc
80013d0a:	d7 03       	nop

80013d0c <_fstat_r>:
80013d0c:	d4 21       	pushm	r4-r7,lr
80013d0e:	16 98       	mov	r8,r11
80013d10:	18 97       	mov	r7,r12
80013d12:	10 9c       	mov	r12,r8
80013d14:	30 08       	mov	r8,0
80013d16:	e0 66 0e 70 	mov	r6,3696
80013d1a:	14 9b       	mov	r11,r10
80013d1c:	8d 08       	st.w	r6[0x0],r8
80013d1e:	cf de       	rcall	80013b18 <_fstat>
80013d20:	5b fc       	cp.w	r12,-1
80013d22:	c0 51       	brne	80013d2c <_fstat_r+0x20>
80013d24:	6c 08       	ld.w	r8,r6[0x0]
80013d26:	58 08       	cp.w	r8,0
80013d28:	ef f8 1a 03 	st.wne	r7[0xc],r8
80013d2c:	d8 22       	popm	r4-r7,pc
80013d2e:	d7 03       	nop

80013d30 <_lseek_r>:
80013d30:	d4 21       	pushm	r4-r7,lr
80013d32:	16 98       	mov	r8,r11
80013d34:	18 97       	mov	r7,r12
80013d36:	10 9c       	mov	r12,r8
80013d38:	30 08       	mov	r8,0
80013d3a:	14 9b       	mov	r11,r10
80013d3c:	e0 66 0e 70 	mov	r6,3696
80013d40:	12 9a       	mov	r10,r9
80013d42:	8d 08       	st.w	r6[0x0],r8
80013d44:	cb 8e       	rcall	80013ab4 <_lseek>
80013d46:	5b fc       	cp.w	r12,-1
80013d48:	c0 51       	brne	80013d52 <_lseek_r+0x22>
80013d4a:	6c 08       	ld.w	r8,r6[0x0]
80013d4c:	58 08       	cp.w	r8,0
80013d4e:	ef f8 1a 03 	st.wne	r7[0xc],r8
80013d52:	d8 22       	popm	r4-r7,pc

80013d54 <_read_r>:
80013d54:	d4 21       	pushm	r4-r7,lr
80013d56:	16 98       	mov	r8,r11
80013d58:	18 97       	mov	r7,r12
80013d5a:	10 9c       	mov	r12,r8
80013d5c:	30 08       	mov	r8,0
80013d5e:	14 9b       	mov	r11,r10
80013d60:	e0 66 0e 70 	mov	r6,3696
80013d64:	12 9a       	mov	r10,r9
80013d66:	8d 08       	st.w	r6[0x0],r8
80013d68:	cb 0e       	rcall	80013ac8 <_read>
80013d6a:	5b fc       	cp.w	r12,-1
80013d6c:	c0 51       	brne	80013d76 <_read_r+0x22>
80013d6e:	6c 08       	ld.w	r8,r6[0x0]
80013d70:	58 08       	cp.w	r8,0
80013d72:	ef f8 1a 03 	st.wne	r7[0xc],r8
80013d76:	d8 22       	popm	r4-r7,pc

80013d78 <__avr32_f64_mul>:
80013d78:	f5 eb 10 1c 	or	r12,r10,r11<<0x1
80013d7c:	e0 80 00 dc 	breq	80013f34 <__avr32_f64_mul_op1_zero>
80013d80:	d4 21       	pushm	r4-r7,lr
80013d82:	f7 e9 20 0e 	eor	lr,r11,r9
80013d86:	ef db c2 8b 	bfextu	r7,r11,0x14,0xb
80013d8a:	30 15       	mov	r5,1
80013d8c:	c4 30       	breq	80013e12 <__avr32_f64_mul_op1_subnormal>
80013d8e:	ab 6b       	lsl	r11,0xa
80013d90:	f7 ea 13 6b 	or	r11,r11,r10>>0x16
80013d94:	ab 6a       	lsl	r10,0xa
80013d96:	f7 d5 d3 c2 	bfins	r11,r5,0x1e,0x2
80013d9a:	ed d9 c2 8b 	bfextu	r6,r9,0x14,0xb
80013d9e:	c5 c0       	breq	80013e56 <__avr32_f64_mul_op2_subnormal>
80013da0:	a1 78       	lsl	r8,0x1
80013da2:	5c f9       	rol	r9
80013da4:	f3 d5 d2 ab 	bfins	r9,r5,0x15,0xb
80013da8:	e0 47 07 ff 	cp.w	r7,2047
80013dac:	c7 70       	breq	80013e9a <__avr32_f64_mul_op_nan_or_inf>
80013dae:	e0 46 07 ff 	cp.w	r6,2047
80013db2:	c7 40       	breq	80013e9a <__avr32_f64_mul_op_nan_or_inf>
80013db4:	ee 06 00 0c 	add	r12,r7,r6
80013db8:	e0 2c 03 fe 	sub	r12,1022
80013dbc:	f6 08 06 44 	mulu.d	r4,r11,r8
80013dc0:	f4 09 07 44 	macu.d	r4,r10,r9
80013dc4:	f4 08 06 46 	mulu.d	r6,r10,r8
80013dc8:	f6 09 06 4a 	mulu.d	r10,r11,r9
80013dcc:	08 07       	add	r7,r4
80013dce:	f4 05 00 4a 	adc	r10,r10,r5
80013dd2:	5c 0b       	acr	r11
80013dd4:	ed bb 00 14 	bld	r11,0x14
80013dd8:	c0 50       	breq	80013de2 <__avr32_f64_mul+0x6a>
80013dda:	a1 77       	lsl	r7,0x1
80013ddc:	5c fa       	rol	r10
80013dde:	5c fb       	rol	r11
80013de0:	20 1c       	sub	r12,1
80013de2:	58 0c       	cp.w	r12,0
80013de4:	e0 8a 00 6f 	brle	80013ec2 <__avr32_f64_mul_res_subnormal>
80013de8:	e0 4c 07 ff 	cp.w	r12,2047
80013dec:	e0 84 00 9c 	brge	80013f24 <__avr32_f64_mul_res_inf>
80013df0:	f7 dc d2 8b 	bfins	r11,r12,0x14,0xb
80013df4:	ed ea 11 f6 	or	r6,r6,r10<<0x1f
80013df8:	ef e6 12 17 	or	r7,r7,r6>>0x1
80013dfc:	ee 17 80 00 	eorh	r7,0x8000
80013e00:	f1 b7 04 20 	satu	r7,0x1
80013e04:	0e 0a       	add	r10,r7
80013e06:	5c 0b       	acr	r11
80013e08:	ed be 00 1f 	bld	lr,0x1f
80013e0c:	ef bb 00 1f 	bst	r11,0x1f
80013e10:	d8 22       	popm	r4-r7,pc

80013e12 <__avr32_f64_mul_op1_subnormal>:
80013e12:	e4 1b 00 0f 	andh	r11,0xf
80013e16:	f4 0c 12 00 	clz	r12,r10
80013e1a:	f6 06 12 00 	clz	r6,r11
80013e1e:	f7 bc 03 e1 	sublo	r12,-31
80013e22:	f8 06 17 30 	movlo	r6,r12
80013e26:	f7 b6 02 01 	subhs	r6,1
80013e2a:	e0 46 00 20 	cp.w	r6,32
80013e2e:	c0 d4       	brge	80013e48 <__avr32_f64_mul_op1_subnormal+0x36>
80013e30:	ec 0c 11 20 	rsub	r12,r6,32
80013e34:	f6 06 09 4b 	lsl	r11,r11,r6
80013e38:	f4 0c 0a 4c 	lsr	r12,r10,r12
80013e3c:	18 4b       	or	r11,r12
80013e3e:	f4 06 09 4a 	lsl	r10,r10,r6
80013e42:	20 b6       	sub	r6,11
80013e44:	0c 17       	sub	r7,r6
80013e46:	ca ab       	rjmp	80013d9a <__avr32_f64_mul+0x22>
80013e48:	f4 06 09 4b 	lsl	r11,r10,r6
80013e4c:	c6 40       	breq	80013f14 <__avr32_f64_mul_res_zero>
80013e4e:	30 0a       	mov	r10,0
80013e50:	20 b6       	sub	r6,11
80013e52:	0c 17       	sub	r7,r6
80013e54:	ca 3b       	rjmp	80013d9a <__avr32_f64_mul+0x22>

80013e56 <__avr32_f64_mul_op2_subnormal>:
80013e56:	e4 19 00 0f 	andh	r9,0xf
80013e5a:	f0 0c 12 00 	clz	r12,r8
80013e5e:	f2 05 12 00 	clz	r5,r9
80013e62:	f7 bc 03 ea 	sublo	r12,-22
80013e66:	f8 05 17 30 	movlo	r5,r12
80013e6a:	f7 b5 02 0a 	subhs	r5,10
80013e6e:	e0 45 00 20 	cp.w	r5,32
80013e72:	c0 d4       	brge	80013e8c <__avr32_f64_mul_op2_subnormal+0x36>
80013e74:	ea 0c 11 20 	rsub	r12,r5,32
80013e78:	f2 05 09 49 	lsl	r9,r9,r5
80013e7c:	f0 0c 0a 4c 	lsr	r12,r8,r12
80013e80:	18 49       	or	r9,r12
80013e82:	f0 05 09 48 	lsl	r8,r8,r5
80013e86:	20 25       	sub	r5,2
80013e88:	0a 16       	sub	r6,r5
80013e8a:	c8 fb       	rjmp	80013da8 <__avr32_f64_mul+0x30>
80013e8c:	f0 05 09 49 	lsl	r9,r8,r5
80013e90:	c4 20       	breq	80013f14 <__avr32_f64_mul_res_zero>
80013e92:	30 08       	mov	r8,0
80013e94:	20 25       	sub	r5,2
80013e96:	0a 16       	sub	r6,r5
80013e98:	c8 8b       	rjmp	80013da8 <__avr32_f64_mul+0x30>

80013e9a <__avr32_f64_mul_op_nan_or_inf>:
80013e9a:	e4 19 00 0f 	andh	r9,0xf
80013e9e:	e4 1b 00 0f 	andh	r11,0xf
80013ea2:	14 4b       	or	r11,r10
80013ea4:	10 49       	or	r9,r8
80013ea6:	e0 47 07 ff 	cp.w	r7,2047
80013eaa:	c0 91       	brne	80013ebc <__avr32_f64_mul_op1_not_naninf>
80013eac:	58 0b       	cp.w	r11,0
80013eae:	c3 81       	brne	80013f1e <__avr32_f64_mul_res_nan>
80013eb0:	e0 46 07 ff 	cp.w	r6,2047
80013eb4:	c3 81       	brne	80013f24 <__avr32_f64_mul_res_inf>
80013eb6:	58 09       	cp.w	r9,0
80013eb8:	c3 60       	breq	80013f24 <__avr32_f64_mul_res_inf>
80013eba:	c3 28       	rjmp	80013f1e <__avr32_f64_mul_res_nan>

80013ebc <__avr32_f64_mul_op1_not_naninf>:
80013ebc:	58 09       	cp.w	r9,0
80013ebe:	c3 30       	breq	80013f24 <__avr32_f64_mul_res_inf>
80013ec0:	c2 f8       	rjmp	80013f1e <__avr32_f64_mul_res_nan>

80013ec2 <__avr32_f64_mul_res_subnormal>:
80013ec2:	5c 3c       	neg	r12
80013ec4:	2f fc       	sub	r12,-1
80013ec6:	f1 bc 04 c0 	satu	r12,0x6
80013eca:	e0 4c 00 20 	cp.w	r12,32
80013ece:	c1 14       	brge	80013ef0 <__avr32_f64_mul_res_subnormal+0x2e>
80013ed0:	f8 08 11 20 	rsub	r8,r12,32
80013ed4:	0e 46       	or	r6,r7
80013ed6:	ee 0c 0a 47 	lsr	r7,r7,r12
80013eda:	f4 08 09 49 	lsl	r9,r10,r8
80013ede:	12 47       	or	r7,r9
80013ee0:	f4 0c 0a 4a 	lsr	r10,r10,r12
80013ee4:	f6 08 09 49 	lsl	r9,r11,r8
80013ee8:	12 4a       	or	r10,r9
80013eea:	f6 0c 0a 4b 	lsr	r11,r11,r12
80013eee:	c8 3b       	rjmp	80013df4 <__avr32_f64_mul+0x7c>
80013ef0:	f8 08 11 20 	rsub	r8,r12,32
80013ef4:	f9 b9 00 00 	moveq	r9,0
80013ef8:	c0 30       	breq	80013efe <__avr32_f64_mul_res_subnormal+0x3c>
80013efa:	f6 08 09 49 	lsl	r9,r11,r8
80013efe:	0e 46       	or	r6,r7
80013f00:	ed ea 10 16 	or	r6,r6,r10<<0x1
80013f04:	f4 0c 0a 4a 	lsr	r10,r10,r12
80013f08:	f3 ea 10 07 	or	r7,r9,r10
80013f0c:	f6 0c 0a 4a 	lsr	r10,r11,r12
80013f10:	30 0b       	mov	r11,0
80013f12:	c7 1b       	rjmp	80013df4 <__avr32_f64_mul+0x7c>

80013f14 <__avr32_f64_mul_res_zero>:
80013f14:	1c 9b       	mov	r11,lr
80013f16:	e6 1b 80 00 	andh	r11,0x8000,COH
80013f1a:	30 0a       	mov	r10,0
80013f1c:	d8 22       	popm	r4-r7,pc

80013f1e <__avr32_f64_mul_res_nan>:
80013f1e:	3f fb       	mov	r11,-1
80013f20:	3f fa       	mov	r10,-1
80013f22:	d8 22       	popm	r4-r7,pc

80013f24 <__avr32_f64_mul_res_inf>:
80013f24:	f0 6b 00 00 	mov	r11,-1048576
80013f28:	ed be 00 1f 	bld	lr,0x1f
80013f2c:	ef bb 00 1f 	bst	r11,0x1f
80013f30:	30 0a       	mov	r10,0
80013f32:	d8 22       	popm	r4-r7,pc

80013f34 <__avr32_f64_mul_op1_zero>:
80013f34:	f7 e9 20 0b 	eor	r11,r11,r9
80013f38:	e6 1b 80 00 	andh	r11,0x8000,COH
80013f3c:	f9 d9 c2 8b 	bfextu	r12,r9,0x14,0xb
80013f40:	e0 4c 07 ff 	cp.w	r12,2047
80013f44:	5e 1c       	retne	r12
80013f46:	3f fa       	mov	r10,-1
80013f48:	3f fb       	mov	r11,-1
80013f4a:	5e fc       	retal	r12

80013f4c <__avr32_f64_sub_from_add>:
80013f4c:	ee 19 80 00 	eorh	r9,0x8000

80013f50 <__avr32_f64_sub>:
80013f50:	f7 e9 20 0c 	eor	r12,r11,r9
80013f54:	e0 86 00 ca 	brmi	800140e8 <__avr32_f64_add_from_sub>
80013f58:	eb cd 40 e0 	pushm	r5-r7,lr
80013f5c:	16 9c       	mov	r12,r11
80013f5e:	e6 1c 80 00 	andh	r12,0x8000,COH
80013f62:	bf db       	cbr	r11,0x1f
80013f64:	bf d9       	cbr	r9,0x1f
80013f66:	10 3a       	cp.w	r10,r8
80013f68:	f2 0b 13 00 	cpc	r11,r9
80013f6c:	c0 92       	brcc	80013f7e <__avr32_f64_sub+0x2e>
80013f6e:	16 97       	mov	r7,r11
80013f70:	12 9b       	mov	r11,r9
80013f72:	0e 99       	mov	r9,r7
80013f74:	14 97       	mov	r7,r10
80013f76:	10 9a       	mov	r10,r8
80013f78:	0e 98       	mov	r8,r7
80013f7a:	ee 1c 80 00 	eorh	r12,0x8000
80013f7e:	f6 07 16 14 	lsr	r7,r11,0x14
80013f82:	ab 7b       	lsl	r11,0xb
80013f84:	f7 ea 13 5b 	or	r11,r11,r10>>0x15
80013f88:	ab 7a       	lsl	r10,0xb
80013f8a:	bf bb       	sbr	r11,0x1f
80013f8c:	f2 06 16 14 	lsr	r6,r9,0x14
80013f90:	c4 40       	breq	80014018 <__avr32_f64_sub_opL_subnormal>
80013f92:	ab 79       	lsl	r9,0xb
80013f94:	f3 e8 13 59 	or	r9,r9,r8>>0x15
80013f98:	ab 78       	lsl	r8,0xb
80013f9a:	bf b9       	sbr	r9,0x1f

80013f9c <__avr32_f64_sub_opL_subnormal_done>:
80013f9c:	e0 47 07 ff 	cp.w	r7,2047
80013fa0:	c4 f0       	breq	8001403e <__avr32_f64_sub_opH_nan_or_inf>
80013fa2:	0e 26       	rsub	r6,r7
80013fa4:	c1 20       	breq	80013fc8 <__avr32_f64_sub_shift_done>
80013fa6:	ec 05 11 20 	rsub	r5,r6,32
80013faa:	e0 46 00 20 	cp.w	r6,32
80013fae:	c7 c2       	brcc	800140a6 <__avr32_f64_sub_longshift>
80013fb0:	f0 05 09 4e 	lsl	lr,r8,r5
80013fb4:	f2 05 09 45 	lsl	r5,r9,r5
80013fb8:	f0 06 0a 48 	lsr	r8,r8,r6
80013fbc:	f2 06 0a 49 	lsr	r9,r9,r6
80013fc0:	0a 48       	or	r8,r5
80013fc2:	58 0e       	cp.w	lr,0
80013fc4:	5f 1e       	srne	lr
80013fc6:	1c 48       	or	r8,lr

80013fc8 <__avr32_f64_sub_shift_done>:
80013fc8:	10 1a       	sub	r10,r8
80013fca:	f6 09 01 4b 	sbc	r11,r11,r9
80013fce:	f6 06 12 00 	clz	r6,r11
80013fd2:	c0 e0       	breq	80013fee <__avr32_f64_sub_longnormalize_done>
80013fd4:	c7 83       	brcs	800140c4 <__avr32_f64_sub_longnormalize>
80013fd6:	ec 0e 11 20 	rsub	lr,r6,32
80013fda:	f6 06 09 4b 	lsl	r11,r11,r6
80013fde:	f4 0e 0a 4e 	lsr	lr,r10,lr
80013fe2:	1c 4b       	or	r11,lr
80013fe4:	f4 06 09 4a 	lsl	r10,r10,r6
80013fe8:	0c 17       	sub	r7,r6
80013fea:	e0 8a 00 39 	brle	8001405c <__avr32_f64_sub_subnormal_result>

80013fee <__avr32_f64_sub_longnormalize_done>:
80013fee:	f4 09 15 15 	lsl	r9,r10,0x15
80013ff2:	ab 9a       	lsr	r10,0xb
80013ff4:	f5 eb 11 5a 	or	r10,r10,r11<<0x15
80013ff8:	ab 9b       	lsr	r11,0xb
80013ffa:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
80013ffe:	18 4b       	or	r11,r12

80014000 <__avr32_f64_sub_round>:
80014000:	fc 17 80 00 	movh	r7,0x8000
80014004:	ed ba 00 00 	bld	r10,0x0
80014008:	f7 b7 01 ff 	subne	r7,-1
8001400c:	0e 39       	cp.w	r9,r7
8001400e:	5f 29       	srhs	r9
80014010:	12 0a       	add	r10,r9
80014012:	5c 0b       	acr	r11
80014014:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80014018 <__avr32_f64_sub_opL_subnormal>:
80014018:	ab 79       	lsl	r9,0xb
8001401a:	f3 e8 13 59 	or	r9,r9,r8>>0x15
8001401e:	ab 78       	lsl	r8,0xb
80014020:	f3 e8 10 0e 	or	lr,r9,r8
80014024:	f9 b6 01 01 	movne	r6,1
80014028:	ee 0e 11 00 	rsub	lr,r7,0
8001402c:	f9 b7 00 01 	moveq	r7,1
80014030:	ef bb 00 1f 	bst	r11,0x1f
80014034:	f7 ea 10 0e 	or	lr,r11,r10
80014038:	f9 b7 00 00 	moveq	r7,0
8001403c:	cb 0b       	rjmp	80013f9c <__avr32_f64_sub_opL_subnormal_done>

8001403e <__avr32_f64_sub_opH_nan_or_inf>:
8001403e:	bf db       	cbr	r11,0x1f
80014040:	f7 ea 10 0e 	or	lr,r11,r10
80014044:	c0 81       	brne	80014054 <__avr32_f64_sub_return_nan>
80014046:	e0 46 07 ff 	cp.w	r6,2047
8001404a:	c0 50       	breq	80014054 <__avr32_f64_sub_return_nan>
8001404c:	f9 e7 11 4b 	or	r11,r12,r7<<0x14
80014050:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80014054 <__avr32_f64_sub_return_nan>:
80014054:	3f fa       	mov	r10,-1
80014056:	3f fb       	mov	r11,-1
80014058:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8001405c <__avr32_f64_sub_subnormal_result>:
8001405c:	5c 37       	neg	r7
8001405e:	2f f7       	sub	r7,-1
80014060:	f1 b7 04 c0 	satu	r7,0x6
80014064:	e0 47 00 20 	cp.w	r7,32
80014068:	c1 14       	brge	8001408a <__avr32_f64_sub_subnormal_result+0x2e>
8001406a:	ee 08 11 20 	rsub	r8,r7,32
8001406e:	f4 08 09 49 	lsl	r9,r10,r8
80014072:	5f 16       	srne	r6
80014074:	f4 07 0a 4a 	lsr	r10,r10,r7
80014078:	0c 4a       	or	r10,r6
8001407a:	f6 08 09 49 	lsl	r9,r11,r8
8001407e:	f5 e9 10 0a 	or	r10,r10,r9
80014082:	f4 07 0a 4b 	lsr	r11,r10,r7
80014086:	30 07       	mov	r7,0
80014088:	cb 3b       	rjmp	80013fee <__avr32_f64_sub_longnormalize_done>
8001408a:	ee 08 11 40 	rsub	r8,r7,64
8001408e:	f6 08 09 49 	lsl	r9,r11,r8
80014092:	14 49       	or	r9,r10
80014094:	5f 16       	srne	r6
80014096:	f6 07 0a 4a 	lsr	r10,r11,r7
8001409a:	0c 4a       	or	r10,r6
8001409c:	30 0b       	mov	r11,0
8001409e:	30 07       	mov	r7,0
800140a0:	ca 7b       	rjmp	80013fee <__avr32_f64_sub_longnormalize_done>
800140a2:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

800140a6 <__avr32_f64_sub_longshift>:
800140a6:	f1 b6 04 c0 	satu	r6,0x6
800140aa:	f0 0e 17 00 	moveq	lr,r8
800140ae:	c0 40       	breq	800140b6 <__avr32_f64_sub_longshift+0x10>
800140b0:	f2 05 09 4e 	lsl	lr,r9,r5
800140b4:	10 4e       	or	lr,r8
800140b6:	f2 06 0a 48 	lsr	r8,r9,r6
800140ba:	30 09       	mov	r9,0
800140bc:	58 0e       	cp.w	lr,0
800140be:	5f 1e       	srne	lr
800140c0:	1c 48       	or	r8,lr
800140c2:	c8 3b       	rjmp	80013fc8 <__avr32_f64_sub_shift_done>

800140c4 <__avr32_f64_sub_longnormalize>:
800140c4:	f4 06 12 00 	clz	r6,r10
800140c8:	f9 b7 03 00 	movlo	r7,0
800140cc:	f9 b6 03 00 	movlo	r6,0
800140d0:	f9 bc 03 00 	movlo	r12,0
800140d4:	f7 b6 02 e0 	subhs	r6,-32
800140d8:	f4 06 09 4b 	lsl	r11,r10,r6
800140dc:	30 0a       	mov	r10,0
800140de:	0c 17       	sub	r7,r6
800140e0:	fe 9a ff be 	brle	8001405c <__avr32_f64_sub_subnormal_result>
800140e4:	c8 5b       	rjmp	80013fee <__avr32_f64_sub_longnormalize_done>
800140e6:	d7 03       	nop

800140e8 <__avr32_f64_add_from_sub>:
800140e8:	ee 19 80 00 	eorh	r9,0x8000

800140ec <__avr32_f64_add>:
800140ec:	f7 e9 20 0c 	eor	r12,r11,r9
800140f0:	fe 96 ff 2e 	brmi	80013f4c <__avr32_f64_sub_from_add>
800140f4:	eb cd 40 e0 	pushm	r5-r7,lr
800140f8:	16 9c       	mov	r12,r11
800140fa:	e6 1c 80 00 	andh	r12,0x8000,COH
800140fe:	bf db       	cbr	r11,0x1f
80014100:	bf d9       	cbr	r9,0x1f
80014102:	12 3b       	cp.w	r11,r9
80014104:	c0 72       	brcc	80014112 <__avr32_f64_add+0x26>
80014106:	16 97       	mov	r7,r11
80014108:	12 9b       	mov	r11,r9
8001410a:	0e 99       	mov	r9,r7
8001410c:	14 97       	mov	r7,r10
8001410e:	10 9a       	mov	r10,r8
80014110:	0e 98       	mov	r8,r7
80014112:	30 0e       	mov	lr,0
80014114:	ef db c2 8b 	bfextu	r7,r11,0x14,0xb
80014118:	f7 db c0 14 	bfextu	r11,r11,0x0,0x14
8001411c:	b5 ab       	sbr	r11,0x14
8001411e:	ed d9 c2 8b 	bfextu	r6,r9,0x14,0xb
80014122:	c6 20       	breq	800141e6 <__avr32_f64_add_op2_subnormal>
80014124:	f3 d9 c0 14 	bfextu	r9,r9,0x0,0x14
80014128:	b5 a9       	sbr	r9,0x14
8001412a:	e0 47 07 ff 	cp.w	r7,2047
8001412e:	c2 80       	breq	8001417e <__avr32_f64_add_opH_nan_or_inf>
80014130:	0e 26       	rsub	r6,r7
80014132:	c1 20       	breq	80014156 <__avr32_f64_add_shift_done>
80014134:	e0 46 00 36 	cp.w	r6,54
80014138:	c1 52       	brcc	80014162 <__avr32_f64_add_res_of_done>
8001413a:	ec 05 11 20 	rsub	r5,r6,32
8001413e:	e0 46 00 20 	cp.w	r6,32
80014142:	c3 52       	brcc	800141ac <__avr32_f64_add_longshift>
80014144:	f0 05 09 4e 	lsl	lr,r8,r5
80014148:	f2 05 09 45 	lsl	r5,r9,r5
8001414c:	f0 06 0a 48 	lsr	r8,r8,r6
80014150:	f2 06 0a 49 	lsr	r9,r9,r6
80014154:	0a 48       	or	r8,r5

80014156 <__avr32_f64_add_shift_done>:
80014156:	10 0a       	add	r10,r8
80014158:	f6 09 00 4b 	adc	r11,r11,r9
8001415c:	ed bb 00 15 	bld	r11,0x15
80014160:	c3 40       	breq	800141c8 <__avr32_f64_add_res_of>

80014162 <__avr32_f64_add_res_of_done>:
80014162:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
80014166:	18 4b       	or	r11,r12

80014168 <__avr32_f64_add_round>:
80014168:	f9 da c0 01 	bfextu	r12,r10,0x0,0x1
8001416c:	18 4e       	or	lr,r12
8001416e:	ee 1e 80 00 	eorh	lr,0x8000
80014172:	f1 be 04 20 	satu	lr,0x1
80014176:	1c 0a       	add	r10,lr
80014178:	5c 0b       	acr	r11
8001417a:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8001417e <__avr32_f64_add_opH_nan_or_inf>:
8001417e:	b5 cb       	cbr	r11,0x14
80014180:	f7 ea 10 0e 	or	lr,r11,r10
80014184:	c1 01       	brne	800141a4 <__avr32_f64_add_return_nan>
80014186:	e0 46 07 ff 	cp.w	r6,2047
8001418a:	c0 30       	breq	80014190 <__avr32_f64_add_opL_nan_or_inf>
8001418c:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80014190 <__avr32_f64_add_opL_nan_or_inf>:
80014190:	b5 c9       	cbr	r9,0x14
80014192:	f3 e8 10 0e 	or	lr,r9,r8
80014196:	c0 71       	brne	800141a4 <__avr32_f64_add_return_nan>
80014198:	30 0a       	mov	r10,0
8001419a:	fc 1b 7f f0 	movh	r11,0x7ff0
8001419e:	18 4b       	or	r11,r12
800141a0:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

800141a4 <__avr32_f64_add_return_nan>:
800141a4:	3f fa       	mov	r10,-1
800141a6:	3f fb       	mov	r11,-1
800141a8:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

800141ac <__avr32_f64_add_longshift>:
800141ac:	f1 b6 04 c0 	satu	r6,0x6
800141b0:	f0 0e 17 00 	moveq	lr,r8
800141b4:	c0 60       	breq	800141c0 <__avr32_f64_add_longshift+0x14>
800141b6:	f2 05 09 4e 	lsl	lr,r9,r5
800141ba:	58 08       	cp.w	r8,0
800141bc:	5f 18       	srne	r8
800141be:	10 4e       	or	lr,r8
800141c0:	f2 06 0a 48 	lsr	r8,r9,r6
800141c4:	30 09       	mov	r9,0
800141c6:	cc 8b       	rjmp	80014156 <__avr32_f64_add_shift_done>

800141c8 <__avr32_f64_add_res_of>:
800141c8:	fd ee 10 1e 	or	lr,lr,lr<<0x1
800141cc:	a1 9b       	lsr	r11,0x1
800141ce:	5d 0a       	ror	r10
800141d0:	5d 0e       	ror	lr
800141d2:	2f f7       	sub	r7,-1
800141d4:	e0 47 07 ff 	cp.w	r7,2047
800141d8:	f9 ba 00 00 	moveq	r10,0
800141dc:	f9 bb 00 00 	moveq	r11,0
800141e0:	f9 be 00 00 	moveq	lr,0
800141e4:	cb fb       	rjmp	80014162 <__avr32_f64_add_res_of_done>

800141e6 <__avr32_f64_add_op2_subnormal>:
800141e6:	30 16       	mov	r6,1
800141e8:	58 07       	cp.w	r7,0
800141ea:	ca 01       	brne	8001412a <__avr32_f64_add+0x3e>
800141ec:	b5 cb       	cbr	r11,0x14
800141ee:	10 0a       	add	r10,r8
800141f0:	f6 09 00 4b 	adc	r11,r11,r9
800141f4:	18 4b       	or	r11,r12
800141f6:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
800141fa:	d7 03       	nop

800141fc <__avr32_f64_to_u32>:
800141fc:	58 0b       	cp.w	r11,0
800141fe:	5e 6d       	retmi	0

80014200 <__avr32_f64_to_s32>:
80014200:	f6 0c 15 01 	lsl	r12,r11,0x1
80014204:	b5 9c       	lsr	r12,0x15
80014206:	e0 2c 03 ff 	sub	r12,1023
8001420a:	5e 3d       	retlo	0
8001420c:	f8 0c 11 1f 	rsub	r12,r12,31
80014210:	16 99       	mov	r9,r11
80014212:	ab 7b       	lsl	r11,0xb
80014214:	bf bb       	sbr	r11,0x1f
80014216:	f7 ea 13 5b 	or	r11,r11,r10>>0x15
8001421a:	f6 0c 0a 4b 	lsr	r11,r11,r12
8001421e:	a1 79       	lsl	r9,0x1
80014220:	5e 2b       	reths	r11
80014222:	5c 3b       	neg	r11
80014224:	5e fb       	retal	r11

80014226 <__avr32_u32_to_f64>:
80014226:	f8 cb 00 00 	sub	r11,r12,0
8001422a:	30 0c       	mov	r12,0
8001422c:	c0 38       	rjmp	80014232 <__avr32_s32_to_f64+0x4>

8001422e <__avr32_s32_to_f64>:
8001422e:	18 9b       	mov	r11,r12
80014230:	5c 4b       	abs	r11
80014232:	30 0a       	mov	r10,0
80014234:	5e 0b       	reteq	r11
80014236:	d4 01       	pushm	lr
80014238:	e0 69 04 1e 	mov	r9,1054
8001423c:	f6 08 12 00 	clz	r8,r11
80014240:	c1 70       	breq	8001426e <__avr32_s32_to_f64+0x40>
80014242:	c0 c3       	brcs	8001425a <__avr32_s32_to_f64+0x2c>
80014244:	f0 0e 11 20 	rsub	lr,r8,32
80014248:	f6 08 09 4b 	lsl	r11,r11,r8
8001424c:	f4 0e 0a 4e 	lsr	lr,r10,lr
80014250:	1c 4b       	or	r11,lr
80014252:	f4 08 09 4a 	lsl	r10,r10,r8
80014256:	10 19       	sub	r9,r8
80014258:	c0 b8       	rjmp	8001426e <__avr32_s32_to_f64+0x40>
8001425a:	f4 08 12 00 	clz	r8,r10
8001425e:	f9 b8 03 00 	movlo	r8,0
80014262:	f7 b8 02 e0 	subhs	r8,-32
80014266:	f4 08 09 4b 	lsl	r11,r10,r8
8001426a:	30 0a       	mov	r10,0
8001426c:	10 19       	sub	r9,r8
8001426e:	58 09       	cp.w	r9,0
80014270:	e0 89 00 30 	brgt	800142d0 <__avr32_s32_to_f64+0xa2>
80014274:	5c 39       	neg	r9
80014276:	2f f9       	sub	r9,-1
80014278:	e0 49 00 36 	cp.w	r9,54
8001427c:	c0 43       	brcs	80014284 <__avr32_s32_to_f64+0x56>
8001427e:	30 0b       	mov	r11,0
80014280:	30 0a       	mov	r10,0
80014282:	c2 68       	rjmp	800142ce <__avr32_s32_to_f64+0xa0>
80014284:	2f 69       	sub	r9,-10
80014286:	f2 08 11 20 	rsub	r8,r9,32
8001428a:	e0 49 00 20 	cp.w	r9,32
8001428e:	c0 b2       	brcc	800142a4 <__avr32_s32_to_f64+0x76>
80014290:	f4 08 09 4e 	lsl	lr,r10,r8
80014294:	f6 08 09 48 	lsl	r8,r11,r8
80014298:	f4 09 0a 4a 	lsr	r10,r10,r9
8001429c:	f6 09 0a 4b 	lsr	r11,r11,r9
800142a0:	10 4b       	or	r11,r8
800142a2:	c0 88       	rjmp	800142b2 <__avr32_s32_to_f64+0x84>
800142a4:	f6 08 09 4e 	lsl	lr,r11,r8
800142a8:	14 4e       	or	lr,r10
800142aa:	16 9a       	mov	r10,r11
800142ac:	30 0b       	mov	r11,0
800142ae:	f4 09 0a 4a 	lsr	r10,r10,r9
800142b2:	ed ba 00 00 	bld	r10,0x0
800142b6:	c0 92       	brcc	800142c8 <__avr32_s32_to_f64+0x9a>
800142b8:	1c 7e       	tst	lr,lr
800142ba:	c0 41       	brne	800142c2 <__avr32_s32_to_f64+0x94>
800142bc:	ed ba 00 01 	bld	r10,0x1
800142c0:	c0 42       	brcc	800142c8 <__avr32_s32_to_f64+0x9a>
800142c2:	2f fa       	sub	r10,-1
800142c4:	f7 bb 02 ff 	subhs	r11,-1
800142c8:	5c fc       	rol	r12
800142ca:	5d 0b       	ror	r11
800142cc:	5d 0a       	ror	r10
800142ce:	d8 02       	popm	pc
800142d0:	e0 68 03 ff 	mov	r8,1023
800142d4:	ed ba 00 0b 	bld	r10,0xb
800142d8:	f7 b8 00 ff 	subeq	r8,-1
800142dc:	10 0a       	add	r10,r8
800142de:	5c 0b       	acr	r11
800142e0:	f7 b9 03 fe 	sublo	r9,-2
800142e4:	e0 49 07 ff 	cp.w	r9,2047
800142e8:	c0 55       	brlt	800142f2 <__avr32_s32_to_f64+0xc4>
800142ea:	30 0a       	mov	r10,0
800142ec:	fc 1b ff e0 	movh	r11,0xffe0
800142f0:	c0 c8       	rjmp	80014308 <__floatsidf_return_op1>
800142f2:	ed bb 00 1f 	bld	r11,0x1f
800142f6:	f7 b9 01 01 	subne	r9,1
800142fa:	ab 9a       	lsr	r10,0xb
800142fc:	f5 eb 11 5a 	or	r10,r10,r11<<0x15
80014300:	a1 7b       	lsl	r11,0x1
80014302:	ab 9b       	lsr	r11,0xb
80014304:	f7 e9 11 5b 	or	r11,r11,r9<<0x15

80014308 <__floatsidf_return_op1>:
80014308:	a1 7c       	lsl	r12,0x1
8001430a:	5d 0b       	ror	r11
8001430c:	d8 02       	popm	pc

8001430e <__avr32_f64_cmp_eq>:
8001430e:	10 3a       	cp.w	r10,r8
80014310:	f2 0b 13 00 	cpc	r11,r9
80014314:	c0 80       	breq	80014324 <__avr32_f64_cmp_eq+0x16>
80014316:	a1 7b       	lsl	r11,0x1
80014318:	a1 79       	lsl	r9,0x1
8001431a:	14 4b       	or	r11,r10
8001431c:	12 4b       	or	r11,r9
8001431e:	10 4b       	or	r11,r8
80014320:	5e 0f       	reteq	1
80014322:	5e fd       	retal	0
80014324:	a1 7b       	lsl	r11,0x1
80014326:	fc 1c ff e0 	movh	r12,0xffe0
8001432a:	58 0a       	cp.w	r10,0
8001432c:	f8 0b 13 00 	cpc	r11,r12
80014330:	5e 8f       	retls	1
80014332:	5e fd       	retal	0

80014334 <__avr32_f64_cmp_ge>:
80014334:	1a de       	st.w	--sp,lr
80014336:	1a d7       	st.w	--sp,r7
80014338:	a1 7b       	lsl	r11,0x1
8001433a:	5f 3c       	srlo	r12
8001433c:	a1 79       	lsl	r9,0x1
8001433e:	5f 37       	srlo	r7
80014340:	5c fc       	rol	r12
80014342:	fc 1e ff e0 	movh	lr,0xffe0
80014346:	58 0a       	cp.w	r10,0
80014348:	fc 0b 13 00 	cpc	r11,lr
8001434c:	e0 8b 00 1d 	brhi	80014386 <__avr32_f64_cmp_ge+0x52>
80014350:	58 08       	cp.w	r8,0
80014352:	fc 09 13 00 	cpc	r9,lr
80014356:	e0 8b 00 18 	brhi	80014386 <__avr32_f64_cmp_ge+0x52>
8001435a:	58 0b       	cp.w	r11,0
8001435c:	f5 ba 00 00 	subfeq	r10,0
80014360:	c1 50       	breq	8001438a <__avr32_f64_cmp_ge+0x56>
80014362:	1b 07       	ld.w	r7,sp++
80014364:	1b 0e       	ld.w	lr,sp++
80014366:	58 3c       	cp.w	r12,3
80014368:	c0 a0       	breq	8001437c <__avr32_f64_cmp_ge+0x48>
8001436a:	58 1c       	cp.w	r12,1
8001436c:	c0 33       	brcs	80014372 <__avr32_f64_cmp_ge+0x3e>
8001436e:	5e 0f       	reteq	1
80014370:	5e 1d       	retne	0
80014372:	10 3a       	cp.w	r10,r8
80014374:	f2 0b 13 00 	cpc	r11,r9
80014378:	5e 2f       	reths	1
8001437a:	5e 3d       	retlo	0
8001437c:	14 38       	cp.w	r8,r10
8001437e:	f6 09 13 00 	cpc	r9,r11
80014382:	5e 2f       	reths	1
80014384:	5e 3d       	retlo	0
80014386:	1b 07       	ld.w	r7,sp++
80014388:	d8 0a       	popm	pc,r12=0
8001438a:	58 17       	cp.w	r7,1
8001438c:	5f 0c       	sreq	r12
8001438e:	58 09       	cp.w	r9,0
80014390:	f5 b8 00 00 	subfeq	r8,0
80014394:	1b 07       	ld.w	r7,sp++
80014396:	1b 0e       	ld.w	lr,sp++
80014398:	5e 0f       	reteq	1
8001439a:	5e fc       	retal	r12

8001439c <__avr32_f64_cmp_lt>:
8001439c:	1a de       	st.w	--sp,lr
8001439e:	1a d7       	st.w	--sp,r7
800143a0:	a1 7b       	lsl	r11,0x1
800143a2:	5f 3c       	srlo	r12
800143a4:	a1 79       	lsl	r9,0x1
800143a6:	5f 37       	srlo	r7
800143a8:	5c fc       	rol	r12
800143aa:	fc 1e ff e0 	movh	lr,0xffe0
800143ae:	58 0a       	cp.w	r10,0
800143b0:	fc 0b 13 00 	cpc	r11,lr
800143b4:	e0 8b 00 1d 	brhi	800143ee <__avr32_f64_cmp_lt+0x52>
800143b8:	58 08       	cp.w	r8,0
800143ba:	fc 09 13 00 	cpc	r9,lr
800143be:	e0 8b 00 18 	brhi	800143ee <__avr32_f64_cmp_lt+0x52>
800143c2:	58 0b       	cp.w	r11,0
800143c4:	f5 ba 00 00 	subfeq	r10,0
800143c8:	c1 50       	breq	800143f2 <__avr32_f64_cmp_lt+0x56>
800143ca:	1b 07       	ld.w	r7,sp++
800143cc:	1b 0e       	ld.w	lr,sp++
800143ce:	58 3c       	cp.w	r12,3
800143d0:	c0 a0       	breq	800143e4 <__avr32_f64_cmp_lt+0x48>
800143d2:	58 1c       	cp.w	r12,1
800143d4:	c0 33       	brcs	800143da <__avr32_f64_cmp_lt+0x3e>
800143d6:	5e 0d       	reteq	0
800143d8:	5e 1f       	retne	1
800143da:	10 3a       	cp.w	r10,r8
800143dc:	f2 0b 13 00 	cpc	r11,r9
800143e0:	5e 2d       	reths	0
800143e2:	5e 3f       	retlo	1
800143e4:	14 38       	cp.w	r8,r10
800143e6:	f6 09 13 00 	cpc	r9,r11
800143ea:	5e 2d       	reths	0
800143ec:	5e 3f       	retlo	1
800143ee:	1b 07       	ld.w	r7,sp++
800143f0:	d8 0a       	popm	pc,r12=0
800143f2:	58 17       	cp.w	r7,1
800143f4:	5f 1c       	srne	r12
800143f6:	58 09       	cp.w	r9,0
800143f8:	f5 b8 00 00 	subfeq	r8,0
800143fc:	1b 07       	ld.w	r7,sp++
800143fe:	1b 0e       	ld.w	lr,sp++
80014400:	5e 0d       	reteq	0
80014402:	5e fc       	retal	r12

80014404 <__avr32_f64_div>:
80014404:	eb cd 40 ff 	pushm	r0-r7,lr
80014408:	f7 e9 20 0e 	eor	lr,r11,r9
8001440c:	f6 07 16 14 	lsr	r7,r11,0x14
80014410:	a9 7b       	lsl	r11,0x9
80014412:	f7 ea 13 7b 	or	r11,r11,r10>>0x17
80014416:	a9 7a       	lsl	r10,0x9
80014418:	bd bb       	sbr	r11,0x1d
8001441a:	e4 1b 3f ff 	andh	r11,0x3fff
8001441e:	ab d7       	cbr	r7,0xb
80014420:	e0 80 00 cc 	breq	800145b8 <__avr32_f64_div_round_subnormal+0x54>
80014424:	e0 47 07 ff 	cp.w	r7,2047
80014428:	e0 84 00 b5 	brge	80014592 <__avr32_f64_div_round_subnormal+0x2e>
8001442c:	f2 06 16 14 	lsr	r6,r9,0x14
80014430:	a9 79       	lsl	r9,0x9
80014432:	f3 e8 13 79 	or	r9,r9,r8>>0x17
80014436:	a9 78       	lsl	r8,0x9
80014438:	bd b9       	sbr	r9,0x1d
8001443a:	e4 19 3f ff 	andh	r9,0x3fff
8001443e:	ab d6       	cbr	r6,0xb
80014440:	e0 80 00 e2 	breq	80014604 <__avr32_f64_div_round_subnormal+0xa0>
80014444:	e0 46 07 ff 	cp.w	r6,2047
80014448:	e0 84 00 b2 	brge	800145ac <__avr32_f64_div_round_subnormal+0x48>
8001444c:	0c 17       	sub	r7,r6
8001444e:	fe 37 fc 01 	sub	r7,-1023
80014452:	fc 1c 80 00 	movh	r12,0x8000
80014456:	f8 03 16 01 	lsr	r3,r12,0x1
8001445a:	e9 d9 c3 62 	bfextu	r4,r9,0x1b,0x2
8001445e:	5c d4       	com	r4
80014460:	e7 d4 d3 82 	bfins	r3,r4,0x1c,0x2
80014464:	e6 09 06 44 	mulu.d	r4,r3,r9
80014468:	f8 05 01 25 	sub	r5,r12,r5<<0x2
8001446c:	e6 05 06 44 	mulu.d	r4,r3,r5
80014470:	ea 03 15 02 	lsl	r3,r5,0x2
80014474:	e6 09 06 44 	mulu.d	r4,r3,r9
80014478:	f8 05 01 25 	sub	r5,r12,r5<<0x2
8001447c:	e6 05 06 44 	mulu.d	r4,r3,r5
80014480:	ea 03 15 02 	lsl	r3,r5,0x2
80014484:	e6 09 06 44 	mulu.d	r4,r3,r9
80014488:	f8 05 01 25 	sub	r5,r12,r5<<0x2
8001448c:	e6 05 06 44 	mulu.d	r4,r3,r5
80014490:	ea 03 15 02 	lsl	r3,r5,0x2
80014494:	e6 08 06 40 	mulu.d	r0,r3,r8
80014498:	e4 09 07 40 	macu.d	r0,r2,r9
8001449c:	e6 09 06 44 	mulu.d	r4,r3,r9
800144a0:	02 04       	add	r4,r1
800144a2:	5c 05       	acr	r5
800144a4:	a3 65       	lsl	r5,0x2
800144a6:	eb e4 13 e5 	or	r5,r5,r4>>0x1e
800144aa:	a3 64       	lsl	r4,0x2
800144ac:	5c 34       	neg	r4
800144ae:	f8 05 01 45 	sbc	r5,r12,r5
800144b2:	e6 04 06 40 	mulu.d	r0,r3,r4
800144b6:	e4 05 07 40 	macu.d	r0,r2,r5
800144ba:	e6 05 06 44 	mulu.d	r4,r3,r5
800144be:	02 04       	add	r4,r1
800144c0:	5c 05       	acr	r5
800144c2:	ea 03 15 02 	lsl	r3,r5,0x2
800144c6:	e7 e4 13 e3 	or	r3,r3,r4>>0x1e
800144ca:	e8 02 15 02 	lsl	r2,r4,0x2
800144ce:	e6 08 06 40 	mulu.d	r0,r3,r8
800144d2:	e4 09 07 40 	macu.d	r0,r2,r9
800144d6:	e6 09 06 44 	mulu.d	r4,r3,r9
800144da:	02 04       	add	r4,r1
800144dc:	5c 05       	acr	r5
800144de:	a3 65       	lsl	r5,0x2
800144e0:	eb e4 13 e5 	or	r5,r5,r4>>0x1e
800144e4:	a3 64       	lsl	r4,0x2
800144e6:	5c 34       	neg	r4
800144e8:	f8 05 01 45 	sbc	r5,r12,r5
800144ec:	e6 04 06 40 	mulu.d	r0,r3,r4
800144f0:	e4 05 07 40 	macu.d	r0,r2,r5
800144f4:	e6 05 06 44 	mulu.d	r4,r3,r5
800144f8:	02 04       	add	r4,r1
800144fa:	5c 05       	acr	r5
800144fc:	ea 03 15 02 	lsl	r3,r5,0x2
80014500:	e7 e4 13 e3 	or	r3,r3,r4>>0x1e
80014504:	e8 02 15 02 	lsl	r2,r4,0x2
80014508:	e6 0a 06 40 	mulu.d	r0,r3,r10
8001450c:	e4 0b 07 40 	macu.d	r0,r2,r11
80014510:	e6 0b 06 42 	mulu.d	r2,r3,r11
80014514:	02 02       	add	r2,r1
80014516:	5c 03       	acr	r3
80014518:	ed b3 00 1c 	bld	r3,0x1c
8001451c:	c0 90       	breq	8001452e <__avr32_f64_div+0x12a>
8001451e:	a1 72       	lsl	r2,0x1
80014520:	5c f3       	rol	r3
80014522:	20 17       	sub	r7,1
80014524:	a3 9a       	lsr	r10,0x3
80014526:	f5 eb 11 da 	or	r10,r10,r11<<0x1d
8001452a:	a3 9b       	lsr	r11,0x3
8001452c:	c0 58       	rjmp	80014536 <__avr32_f64_div+0x132>
8001452e:	a5 8a       	lsr	r10,0x4
80014530:	f5 eb 11 ca 	or	r10,r10,r11<<0x1c
80014534:	a5 8b       	lsr	r11,0x4
80014536:	58 07       	cp.w	r7,0
80014538:	e0 8a 00 8b 	brle	8001464e <__avr32_f64_div_res_subnormal>
8001453c:	e0 12 ff 00 	andl	r2,0xff00
80014540:	e8 12 00 80 	orl	r2,0x80
80014544:	e6 08 06 40 	mulu.d	r0,r3,r8
80014548:	e4 09 07 40 	macu.d	r0,r2,r9
8001454c:	e4 08 06 44 	mulu.d	r4,r2,r8
80014550:	e6 09 06 48 	mulu.d	r8,r3,r9
80014554:	00 05       	add	r5,r0
80014556:	f0 01 00 48 	adc	r8,r8,r1
8001455a:	5c 09       	acr	r9
8001455c:	f9 d2 c1 01 	bfextu	r12,r2,0x8,0x1
80014560:	58 04       	cp.w	r4,0
80014562:	5c 25       	cpc	r5

80014564 <__avr32_f64_div_round_subnormal>:
80014564:	f4 08 13 00 	cpc	r8,r10
80014568:	f6 09 13 00 	cpc	r9,r11
8001456c:	5f 36       	srlo	r6
8001456e:	f8 06 17 00 	moveq	r6,r12
80014572:	e4 0a 16 08 	lsr	r10,r2,0x8
80014576:	f5 e3 11 8a 	or	r10,r10,r3<<0x18
8001457a:	e6 0b 16 08 	lsr	r11,r3,0x8
8001457e:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
80014582:	ed be 00 1f 	bld	lr,0x1f
80014586:	ef bb 00 1f 	bst	r11,0x1f
8001458a:	0c 0a       	add	r10,r6
8001458c:	5c 0b       	acr	r11
8001458e:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
80014592:	e4 1b 00 0f 	andh	r11,0xf
80014596:	14 4b       	or	r11,r10
80014598:	e0 81 00 a7 	brne	800146e6 <__avr32_f64_div_res_subnormal+0x98>
8001459c:	f2 06 16 14 	lsr	r6,r9,0x14
800145a0:	ab d6       	cbr	r6,0xb
800145a2:	e0 46 07 ff 	cp.w	r6,2047
800145a6:	e0 81 00 a4 	brne	800146ee <__avr32_f64_div_res_subnormal+0xa0>
800145aa:	c9 e8       	rjmp	800146e6 <__avr32_f64_div_res_subnormal+0x98>
800145ac:	e4 19 00 0f 	andh	r9,0xf
800145b0:	10 49       	or	r9,r8
800145b2:	e0 81 00 9a 	brne	800146e6 <__avr32_f64_div_res_subnormal+0x98>
800145b6:	c9 28       	rjmp	800146da <__avr32_f64_div_res_subnormal+0x8c>
800145b8:	a3 7b       	lsl	r11,0x3
800145ba:	f7 ea 13 db 	or	r11,r11,r10>>0x1d
800145be:	a3 7a       	lsl	r10,0x3
800145c0:	f5 eb 10 04 	or	r4,r10,r11
800145c4:	e0 80 00 a0 	breq	80014704 <__avr32_f64_div_op1_zero>
800145c8:	f6 04 12 00 	clz	r4,r11
800145cc:	c1 70       	breq	800145fa <__avr32_f64_div_round_subnormal+0x96>
800145ce:	c0 c3       	brcs	800145e6 <__avr32_f64_div_round_subnormal+0x82>
800145d0:	e8 05 11 20 	rsub	r5,r4,32
800145d4:	f6 04 09 4b 	lsl	r11,r11,r4
800145d8:	f4 05 0a 45 	lsr	r5,r10,r5
800145dc:	0a 4b       	or	r11,r5
800145de:	f4 04 09 4a 	lsl	r10,r10,r4
800145e2:	08 17       	sub	r7,r4
800145e4:	c0 b8       	rjmp	800145fa <__avr32_f64_div_round_subnormal+0x96>
800145e6:	f4 04 12 00 	clz	r4,r10
800145ea:	f9 b4 03 00 	movlo	r4,0
800145ee:	f7 b4 02 e0 	subhs	r4,-32
800145f2:	f4 04 09 4b 	lsl	r11,r10,r4
800145f6:	30 0a       	mov	r10,0
800145f8:	08 17       	sub	r7,r4
800145fa:	a3 8a       	lsr	r10,0x2
800145fc:	f5 eb 11 ea 	or	r10,r10,r11<<0x1e
80014600:	a3 8b       	lsr	r11,0x2
80014602:	c1 1b       	rjmp	80014424 <__avr32_f64_div+0x20>
80014604:	a3 79       	lsl	r9,0x3
80014606:	f3 e8 13 d9 	or	r9,r9,r8>>0x1d
8001460a:	a3 78       	lsl	r8,0x3
8001460c:	f3 e8 10 04 	or	r4,r9,r8
80014610:	c6 f0       	breq	800146ee <__avr32_f64_div_res_subnormal+0xa0>
80014612:	f2 04 12 00 	clz	r4,r9
80014616:	c1 70       	breq	80014644 <__avr32_f64_div_round_subnormal+0xe0>
80014618:	c0 c3       	brcs	80014630 <__avr32_f64_div_round_subnormal+0xcc>
8001461a:	e8 05 11 20 	rsub	r5,r4,32
8001461e:	f2 04 09 49 	lsl	r9,r9,r4
80014622:	f0 05 0a 45 	lsr	r5,r8,r5
80014626:	0a 49       	or	r9,r5
80014628:	f0 04 09 48 	lsl	r8,r8,r4
8001462c:	08 16       	sub	r6,r4
8001462e:	c0 b8       	rjmp	80014644 <__avr32_f64_div_round_subnormal+0xe0>
80014630:	f0 04 12 00 	clz	r4,r8
80014634:	f9 b4 03 00 	movlo	r4,0
80014638:	f7 b4 02 e0 	subhs	r4,-32
8001463c:	f0 04 09 49 	lsl	r9,r8,r4
80014640:	30 08       	mov	r8,0
80014642:	08 16       	sub	r6,r4
80014644:	a3 88       	lsr	r8,0x2
80014646:	f1 e9 11 e8 	or	r8,r8,r9<<0x1e
8001464a:	a3 89       	lsr	r9,0x2
8001464c:	cf ca       	rjmp	80014444 <__avr32_f64_div+0x40>

8001464e <__avr32_f64_div_res_subnormal>:
8001464e:	5c 37       	neg	r7
80014650:	2f f7       	sub	r7,-1
80014652:	f1 b7 04 c0 	satu	r7,0x6
80014656:	e0 47 00 20 	cp.w	r7,32
8001465a:	c1 54       	brge	80014684 <__avr32_f64_div_res_subnormal+0x36>
8001465c:	ee 06 11 20 	rsub	r6,r7,32
80014660:	e4 07 0a 42 	lsr	r2,r2,r7
80014664:	e6 06 09 4c 	lsl	r12,r3,r6
80014668:	18 42       	or	r2,r12
8001466a:	e6 07 0a 43 	lsr	r3,r3,r7
8001466e:	f4 06 09 41 	lsl	r1,r10,r6
80014672:	f4 07 0a 4a 	lsr	r10,r10,r7
80014676:	f6 06 09 4c 	lsl	r12,r11,r6
8001467a:	18 4a       	or	r10,r12
8001467c:	f6 07 0a 4b 	lsr	r11,r11,r7
80014680:	30 00       	mov	r0,0
80014682:	c1 58       	rjmp	800146ac <__avr32_f64_div_res_subnormal+0x5e>
80014684:	ee 06 11 20 	rsub	r6,r7,32
80014688:	f9 b0 00 00 	moveq	r0,0
8001468c:	f9 bc 00 00 	moveq	r12,0
80014690:	c0 50       	breq	8001469a <__avr32_f64_div_res_subnormal+0x4c>
80014692:	f4 06 09 40 	lsl	r0,r10,r6
80014696:	f6 06 09 4c 	lsl	r12,r11,r6
8001469a:	e6 07 0a 42 	lsr	r2,r3,r7
8001469e:	30 03       	mov	r3,0
800146a0:	f4 07 0a 41 	lsr	r1,r10,r7
800146a4:	18 41       	or	r1,r12
800146a6:	f6 07 0a 4a 	lsr	r10,r11,r7
800146aa:	30 0b       	mov	r11,0
800146ac:	e0 12 ff 00 	andl	r2,0xff00
800146b0:	e8 12 00 80 	orl	r2,0x80
800146b4:	e6 08 06 46 	mulu.d	r6,r3,r8
800146b8:	e4 09 07 46 	macu.d	r6,r2,r9
800146bc:	e4 08 06 44 	mulu.d	r4,r2,r8
800146c0:	e6 09 06 48 	mulu.d	r8,r3,r9
800146c4:	0c 05       	add	r5,r6
800146c6:	f0 07 00 48 	adc	r8,r8,r7
800146ca:	5c 09       	acr	r9
800146cc:	30 07       	mov	r7,0
800146ce:	f9 d2 c1 01 	bfextu	r12,r2,0x8,0x1
800146d2:	00 34       	cp.w	r4,r0
800146d4:	e2 05 13 00 	cpc	r5,r1
800146d8:	c4 6b       	rjmp	80014564 <__avr32_f64_div_round_subnormal>
800146da:	1c 9b       	mov	r11,lr
800146dc:	e6 1b 80 00 	andh	r11,0x8000,COH
800146e0:	30 0a       	mov	r10,0
800146e2:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
800146e6:	3f fb       	mov	r11,-1
800146e8:	30 0a       	mov	r10,0
800146ea:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
800146ee:	f5 eb 10 04 	or	r4,r10,r11
800146f2:	c0 90       	breq	80014704 <__avr32_f64_div_op1_zero>
800146f4:	1c 9b       	mov	r11,lr
800146f6:	e6 1b 80 00 	andh	r11,0x8000,COH
800146fa:	ea 1b 7f f0 	orh	r11,0x7ff0
800146fe:	30 0a       	mov	r10,0
80014700:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc

80014704 <__avr32_f64_div_op1_zero>:
80014704:	f1 e9 10 15 	or	r5,r8,r9<<0x1
80014708:	ce f0       	breq	800146e6 <__avr32_f64_div_res_subnormal+0x98>
8001470a:	e9 d9 c2 8b 	bfextu	r4,r9,0x14,0xb
8001470e:	e0 44 07 ff 	cp.w	r4,2047
80014712:	ce 41       	brne	800146da <__avr32_f64_div_res_subnormal+0x8c>
80014714:	f1 e9 10 c5 	or	r5,r8,r9<<0xc
80014718:	ce 10       	breq	800146da <__avr32_f64_div_res_subnormal+0x8c>
8001471a:	ce 6b       	rjmp	800146e6 <__avr32_f64_div_res_subnormal+0x98>

8001471c <__avr32_umod64>:
8001471c:	d4 31       	pushm	r0-r7,lr
8001471e:	1a 97       	mov	r7,sp
80014720:	20 3d       	sub	sp,12
80014722:	10 9c       	mov	r12,r8
80014724:	12 95       	mov	r5,r9
80014726:	14 9e       	mov	lr,r10
80014728:	16 91       	mov	r1,r11
8001472a:	16 96       	mov	r6,r11
8001472c:	58 09       	cp.w	r9,0
8001472e:	e0 81 00 81 	brne	80014830 <__avr32_umod64+0x114>
80014732:	16 38       	cp.w	r8,r11
80014734:	e0 88 00 12 	brls	80014758 <__avr32_umod64+0x3c>
80014738:	f0 08 12 00 	clz	r8,r8
8001473c:	c4 e0       	breq	800147d8 <__avr32_umod64+0xbc>
8001473e:	f6 08 09 46 	lsl	r6,r11,r8
80014742:	f8 08 09 4c 	lsl	r12,r12,r8
80014746:	f0 0b 11 20 	rsub	r11,r8,32
8001474a:	f4 08 09 4e 	lsl	lr,r10,r8
8001474e:	f4 0b 0a 4b 	lsr	r11,r10,r11
80014752:	f7 e6 10 06 	or	r6,r11,r6
80014756:	c4 18       	rjmp	800147d8 <__avr32_umod64+0xbc>
80014758:	58 08       	cp.w	r8,0
8001475a:	c0 51       	brne	80014764 <__avr32_umod64+0x48>
8001475c:	30 19       	mov	r9,1
8001475e:	f2 08 0d 08 	divu	r8,r9,r8
80014762:	10 9c       	mov	r12,r8
80014764:	f8 08 12 00 	clz	r8,r12
80014768:	c0 31       	brne	8001476e <__avr32_umod64+0x52>
8001476a:	18 16       	sub	r6,r12
8001476c:	c3 68       	rjmp	800147d8 <__avr32_umod64+0xbc>
8001476e:	f0 03 11 20 	rsub	r3,r8,32
80014772:	f4 03 0a 4b 	lsr	r11,r10,r3
80014776:	f8 08 09 4c 	lsl	r12,r12,r8
8001477a:	ec 08 09 49 	lsl	r9,r6,r8
8001477e:	ec 03 0a 43 	lsr	r3,r6,r3
80014782:	f7 e9 10 09 	or	r9,r11,r9
80014786:	f8 05 16 10 	lsr	r5,r12,0x10
8001478a:	ed dc c0 10 	bfextu	r6,r12,0x0,0x10
8001478e:	e6 05 0d 02 	divu	r2,r3,r5
80014792:	f2 0e 16 10 	lsr	lr,r9,0x10
80014796:	ec 02 02 4b 	mul	r11,r6,r2
8001479a:	fd e3 11 0e 	or	lr,lr,r3<<0x10
8001479e:	16 3e       	cp.w	lr,r11
800147a0:	c0 72       	brcc	800147ae <__avr32_umod64+0x92>
800147a2:	18 0e       	add	lr,r12
800147a4:	18 3e       	cp.w	lr,r12
800147a6:	c0 43       	brcs	800147ae <__avr32_umod64+0x92>
800147a8:	16 3e       	cp.w	lr,r11
800147aa:	fd dc e3 0e 	addcs	lr,lr,r12
800147ae:	fc 0b 01 03 	sub	r3,lr,r11
800147b2:	f3 d9 c0 10 	bfextu	r9,r9,0x0,0x10
800147b6:	e6 05 0d 02 	divu	r2,r3,r5
800147ba:	f3 e3 11 09 	or	r9,r9,r3<<0x10
800147be:	a5 36       	mul	r6,r2
800147c0:	0c 39       	cp.w	r9,r6
800147c2:	c0 72       	brcc	800147d0 <__avr32_umod64+0xb4>
800147c4:	18 09       	add	r9,r12
800147c6:	18 39       	cp.w	r9,r12
800147c8:	c0 43       	brcs	800147d0 <__avr32_umod64+0xb4>
800147ca:	0c 39       	cp.w	r9,r6
800147cc:	f3 dc e3 09 	addcs	r9,r9,r12
800147d0:	f2 06 01 06 	sub	r6,r9,r6
800147d4:	f4 08 09 4e 	lsl	lr,r10,r8
800147d8:	f8 0a 16 10 	lsr	r10,r12,0x10
800147dc:	eb dc c0 10 	bfextu	r5,r12,0x0,0x10
800147e0:	ec 0a 0d 02 	divu	r2,r6,r10
800147e4:	fc 09 16 10 	lsr	r9,lr,0x10
800147e8:	ea 02 02 4b 	mul	r11,r5,r2
800147ec:	f3 e3 11 09 	or	r9,r9,r3<<0x10
800147f0:	16 39       	cp.w	r9,r11
800147f2:	c0 72       	brcc	80014800 <__avr32_umod64+0xe4>
800147f4:	18 09       	add	r9,r12
800147f6:	18 39       	cp.w	r9,r12
800147f8:	c0 43       	brcs	80014800 <__avr32_umod64+0xe4>
800147fa:	16 39       	cp.w	r9,r11
800147fc:	f3 dc e3 09 	addcs	r9,r9,r12
80014800:	f2 0b 01 0b 	sub	r11,r9,r11
80014804:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
80014808:	f6 0a 0d 0a 	divu	r10,r11,r10
8001480c:	fd eb 11 0e 	or	lr,lr,r11<<0x10
80014810:	ea 0a 02 4a 	mul	r10,r5,r10
80014814:	14 3e       	cp.w	lr,r10
80014816:	c0 72       	brcc	80014824 <__avr32_umod64+0x108>
80014818:	18 0e       	add	lr,r12
8001481a:	18 3e       	cp.w	lr,r12
8001481c:	c0 43       	brcs	80014824 <__avr32_umod64+0x108>
8001481e:	14 3e       	cp.w	lr,r10
80014820:	fd dc e3 0e 	addcs	lr,lr,r12
80014824:	fc 0a 01 0a 	sub	r10,lr,r10
80014828:	30 0b       	mov	r11,0
8001482a:	f4 08 0a 4a 	lsr	r10,r10,r8
8001482e:	c7 b8       	rjmp	80014924 <__avr32_umod64+0x208>
80014830:	16 39       	cp.w	r9,r11
80014832:	e0 8b 00 79 	brhi	80014924 <__avr32_umod64+0x208>
80014836:	f2 09 12 00 	clz	r9,r9
8001483a:	c1 21       	brne	8001485e <__avr32_umod64+0x142>
8001483c:	10 3a       	cp.w	r10,r8
8001483e:	5f 2b       	srhs	r11
80014840:	0a 31       	cp.w	r1,r5
80014842:	5f ba       	srhi	r10
80014844:	f7 ea 10 0a 	or	r10,r11,r10
80014848:	f2 0a 18 00 	cp.b	r10,r9
8001484c:	c0 60       	breq	80014858 <__avr32_umod64+0x13c>
8001484e:	fc 08 01 0c 	sub	r12,lr,r8
80014852:	e2 05 01 46 	sbc	r6,r1,r5
80014856:	18 9e       	mov	lr,r12
80014858:	0c 9b       	mov	r11,r6
8001485a:	1c 9a       	mov	r10,lr
8001485c:	c6 48       	rjmp	80014924 <__avr32_umod64+0x208>
8001485e:	ea 09 09 4c 	lsl	r12,r5,r9
80014862:	f2 06 11 20 	rsub	r6,r9,32
80014866:	f6 09 09 4b 	lsl	r11,r11,r9
8001486a:	f0 09 09 42 	lsl	r2,r8,r9
8001486e:	ef 46 ff f4 	st.w	r7[-12],r6
80014872:	f0 06 0a 48 	lsr	r8,r8,r6
80014876:	18 48       	or	r8,r12
80014878:	e2 06 0a 4c 	lsr	r12,r1,r6
8001487c:	f4 09 09 43 	lsl	r3,r10,r9
80014880:	fd d8 c0 10 	bfextu	lr,r8,0x0,0x10
80014884:	f4 06 0a 4a 	lsr	r10,r10,r6
80014888:	16 4a       	or	r10,r11
8001488a:	f0 0b 16 10 	lsr	r11,r8,0x10
8001488e:	f8 0b 0d 04 	divu	r4,r12,r11
80014892:	f4 0c 16 10 	lsr	r12,r10,0x10
80014896:	08 91       	mov	r1,r4
80014898:	f9 e5 11 0c 	or	r12,r12,r5<<0x10
8001489c:	e8 0e 02 46 	mul	r6,r4,lr
800148a0:	0c 3c       	cp.w	r12,r6
800148a2:	c0 a2       	brcc	800148b6 <__avr32_umod64+0x19a>
800148a4:	20 11       	sub	r1,1
800148a6:	10 0c       	add	r12,r8
800148a8:	10 3c       	cp.w	r12,r8
800148aa:	c0 63       	brcs	800148b6 <__avr32_umod64+0x19a>
800148ac:	0c 3c       	cp.w	r12,r6
800148ae:	f7 b1 03 01 	sublo	r1,1
800148b2:	f9 d8 e3 0c 	addcs	r12,r12,r8
800148b6:	0c 1c       	sub	r12,r6
800148b8:	f5 da c0 10 	bfextu	r10,r10,0x0,0x10
800148bc:	f8 0b 0d 04 	divu	r4,r12,r11
800148c0:	f5 e5 11 0b 	or	r11,r10,r5<<0x10
800148c4:	08 96       	mov	r6,r4
800148c6:	e8 0e 02 4e 	mul	lr,r4,lr
800148ca:	1c 3b       	cp.w	r11,lr
800148cc:	c0 a2       	brcc	800148e0 <__avr32_umod64+0x1c4>
800148ce:	20 16       	sub	r6,1
800148d0:	10 0b       	add	r11,r8
800148d2:	10 3b       	cp.w	r11,r8
800148d4:	c0 63       	brcs	800148e0 <__avr32_umod64+0x1c4>
800148d6:	1c 3b       	cp.w	r11,lr
800148d8:	f7 b6 03 01 	sublo	r6,1
800148dc:	f7 d8 e3 0b 	addcs	r11,r11,r8
800148e0:	ed e1 11 01 	or	r1,r6,r1<<0x10
800148e4:	1c 1b       	sub	r11,lr
800148e6:	e2 02 06 40 	mulu.d	r0,r1,r2
800148ea:	00 9e       	mov	lr,r0
800148ec:	02 9c       	mov	r12,r1
800148ee:	16 3c       	cp.w	r12,r11
800148f0:	e0 8b 00 08 	brhi	80014900 <__avr32_umod64+0x1e4>
800148f4:	5f 06       	sreq	r6
800148f6:	06 30       	cp.w	r0,r3
800148f8:	5f ba       	srhi	r10
800148fa:	ed ea 00 0a 	and	r10,r6,r10
800148fe:	c0 60       	breq	8001490a <__avr32_umod64+0x1ee>
80014900:	fc 02 01 04 	sub	r4,lr,r2
80014904:	f8 08 01 4c 	sbc	r12,r12,r8
80014908:	08 9e       	mov	lr,r4
8001490a:	e6 0e 01 0a 	sub	r10,r3,lr
8001490e:	f6 0c 01 4c 	sbc	r12,r11,r12
80014912:	ee f1 ff f4 	ld.w	r1,r7[-12]
80014916:	f8 09 0a 4b 	lsr	r11,r12,r9
8001491a:	f4 09 0a 4a 	lsr	r10,r10,r9
8001491e:	f8 01 09 4c 	lsl	r12,r12,r1
80014922:	18 4a       	or	r10,r12
80014924:	2f dd       	sub	sp,-12
80014926:	d8 32       	popm	r0-r7,pc

Disassembly of section .exception:

80014a00 <_evba>:
_evba:

	.org  0x000
	// Unrecoverable Exception.
_handle_Unrecoverable_Exception:
	rjmp $
80014a00:	c0 08       	rjmp	80014a00 <_evba>
	...

80014a04 <_handle_TLB_Multiple_Hit>:

	.org  0x004
	// TLB Multiple Hit.
_handle_TLB_Multiple_Hit:
	rjmp $
80014a04:	c0 08       	rjmp	80014a04 <_handle_TLB_Multiple_Hit>
	...

80014a08 <_handle_Bus_Error_Data_Fetch>:

	.org  0x008
	// Bus Error Data Fetch.
_handle_Bus_Error_Data_Fetch:
	rjmp $
80014a08:	c0 08       	rjmp	80014a08 <_handle_Bus_Error_Data_Fetch>
	...

80014a0c <_handle_Bus_Error_Instruction_Fetch>:

	.org  0x00C
	// Bus Error Instruction Fetch.
_handle_Bus_Error_Instruction_Fetch:
	rjmp $
80014a0c:	c0 08       	rjmp	80014a0c <_handle_Bus_Error_Instruction_Fetch>
	...

80014a10 <_handle_NMI>:

	.org  0x010
	// NMI.
_handle_NMI:
	rjmp $
80014a10:	c0 08       	rjmp	80014a10 <_handle_NMI>
	...

80014a14 <_handle_Instruction_Address>:

	.org  0x014
	// Instruction Address.
_handle_Instruction_Address:
	rjmp $
80014a14:	c0 08       	rjmp	80014a14 <_handle_Instruction_Address>
	...

80014a18 <_handle_ITLB_Protection>:

	.org  0x018
	// ITLB Protection.
_handle_ITLB_Protection:
	rjmp $
80014a18:	c0 08       	rjmp	80014a18 <_handle_ITLB_Protection>
	...

80014a1c <_handle_Breakpoint>:

	.org  0x01C
	// Breakpoint.
_handle_Breakpoint:
	rjmp $
80014a1c:	c0 08       	rjmp	80014a1c <_handle_Breakpoint>
	...

80014a20 <_handle_Illegal_Opcode>:

	.org  0x020
	// Illegal Opcode.
_handle_Illegal_Opcode:
	rjmp $
80014a20:	c0 08       	rjmp	80014a20 <_handle_Illegal_Opcode>
	...

80014a24 <_handle_Unimplemented_Instruction>:

	.org  0x024
	// Unimplemented Instruction.
_handle_Unimplemented_Instruction:
	rjmp $
80014a24:	c0 08       	rjmp	80014a24 <_handle_Unimplemented_Instruction>
	...

80014a28 <_handle_Privilege_Violation>:

	.org  0x028
	// Privilege Violation.
_handle_Privilege_Violation:
	rjmp $
80014a28:	c0 08       	rjmp	80014a28 <_handle_Privilege_Violation>
	...

80014a2c <_handle_Floating_Point>:

	.org  0x02C
	// Floating-Point: UNUSED IN AVR32UC and AVR32AP.
_handle_Floating_Point:
	rjmp $
80014a2c:	c0 08       	rjmp	80014a2c <_handle_Floating_Point>
	...

80014a30 <_handle_Coprocessor_Absent>:

	.org  0x030
	// Coprocessor Absent: UNUSED IN AVR32UC.
_handle_Coprocessor_Absent:
	rjmp $
80014a30:	c0 08       	rjmp	80014a30 <_handle_Coprocessor_Absent>
	...

80014a34 <_handle_Data_Address_Read>:

	.org  0x034
	// Data Address (Read).
_handle_Data_Address_Read:
	rjmp $
80014a34:	c0 08       	rjmp	80014a34 <_handle_Data_Address_Read>
	...

80014a38 <_handle_Data_Address_Write>:

	.org  0x038
	// Data Address (Write).
_handle_Data_Address_Write:
	rjmp $
80014a38:	c0 08       	rjmp	80014a38 <_handle_Data_Address_Write>
	...

80014a3c <_handle_DTLB_Protection_Read>:

	.org  0x03C
	// DTLB Protection (Read).
_handle_DTLB_Protection_Read:
	rjmp $
80014a3c:	c0 08       	rjmp	80014a3c <_handle_DTLB_Protection_Read>
	...

80014a40 <_handle_DTLB_Protection_Write>:

	.org  0x040
	// DTLB Protection (Write).
_handle_DTLB_Protection_Write:
	rjmp $
80014a40:	c0 08       	rjmp	80014a40 <_handle_DTLB_Protection_Write>
	...

80014a44 <_handle_DTLB_Modified>:

	.org  0x044
	// DTLB Modified: UNUSED IN AVR32UC.
_handle_DTLB_Modified:
	rjmp $
80014a44:	c0 08       	rjmp	80014a44 <_handle_DTLB_Modified>
	...

80014a50 <_handle_ITLB_Miss>:

	.org  0x050
	// ITLB Miss.
_handle_ITLB_Miss:
	rjmp $
80014a50:	c0 08       	rjmp	80014a50 <_handle_ITLB_Miss>
	...

80014a60 <_handle_DTLB_Miss_Read>:

	.org  0x060
	// DTLB Miss (Read).
_handle_DTLB_Miss_Read:
	rjmp $
80014a60:	c0 08       	rjmp	80014a60 <_handle_DTLB_Miss_Read>
	...

80014a70 <_handle_DTLB_Miss_Write>:

	.org  0x070
	// DTLB Miss (Write).
_handle_DTLB_Miss_Write:
	rjmp $
80014a70:	c0 08       	rjmp	80014a70 <_handle_DTLB_Miss_Write>
	...

80014b00 <_handle_Supervisor_Call>:

	.org  0x100
	// Supervisor Call.
_handle_Supervisor_Call:
	rjmp $
80014b00:	c0 08       	rjmp	80014b00 <_handle_Supervisor_Call>
80014b02:	d7 03       	nop

80014b04 <_int0>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80014b04:	30 0c       	mov	r12,0
80014b06:	fe b0 ca 4d 	rcall	8000dfa0 <_get_interrupt_handler>
80014b0a:	58 0c       	cp.w	r12,0
80014b0c:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
80014b10:	d6 03       	rete

80014b12 <_int1>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80014b12:	30 1c       	mov	r12,1
80014b14:	fe b0 ca 46 	rcall	8000dfa0 <_get_interrupt_handler>
80014b18:	58 0c       	cp.w	r12,0
80014b1a:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
80014b1e:	d6 03       	rete

80014b20 <_int2>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80014b20:	30 2c       	mov	r12,2
80014b22:	fe b0 ca 3f 	rcall	8000dfa0 <_get_interrupt_handler>
80014b26:	58 0c       	cp.w	r12,0
80014b28:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
80014b2c:	d6 03       	rete

80014b2e <_int3>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80014b2e:	30 3c       	mov	r12,3
80014b30:	fe b0 ca 38 	rcall	8000dfa0 <_get_interrupt_handler>
80014b34:	58 0c       	cp.w	r12,0
80014b36:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
80014b3a:	d6 03       	rete
80014b3c:	d7 03       	nop
80014b3e:	d7 03       	nop
80014b40:	d7 03       	nop
80014b42:	d7 03       	nop
80014b44:	d7 03       	nop
80014b46:	d7 03       	nop
80014b48:	d7 03       	nop
80014b4a:	d7 03       	nop
80014b4c:	d7 03       	nop
80014b4e:	d7 03       	nop
80014b50:	d7 03       	nop
80014b52:	d7 03       	nop
80014b54:	d7 03       	nop
80014b56:	d7 03       	nop
80014b58:	d7 03       	nop
80014b5a:	d7 03       	nop
80014b5c:	d7 03       	nop
80014b5e:	d7 03       	nop
80014b60:	d7 03       	nop
80014b62:	d7 03       	nop
80014b64:	d7 03       	nop
80014b66:	d7 03       	nop
80014b68:	d7 03       	nop
80014b6a:	d7 03       	nop
80014b6c:	d7 03       	nop
80014b6e:	d7 03       	nop
80014b70:	d7 03       	nop
80014b72:	d7 03       	nop
80014b74:	d7 03       	nop
80014b76:	d7 03       	nop
80014b78:	d7 03       	nop
80014b7a:	d7 03       	nop
80014b7c:	d7 03       	nop
80014b7e:	d7 03       	nop
80014b80:	d7 03       	nop
80014b82:	d7 03       	nop
80014b84:	d7 03       	nop
80014b86:	d7 03       	nop
80014b88:	d7 03       	nop
80014b8a:	d7 03       	nop
80014b8c:	d7 03       	nop
80014b8e:	d7 03       	nop
80014b90:	d7 03       	nop
80014b92:	d7 03       	nop
80014b94:	d7 03       	nop
80014b96:	d7 03       	nop
80014b98:	d7 03       	nop
80014b9a:	d7 03       	nop
80014b9c:	d7 03       	nop
80014b9e:	d7 03       	nop
80014ba0:	d7 03       	nop
80014ba2:	d7 03       	nop
80014ba4:	d7 03       	nop
80014ba6:	d7 03       	nop
80014ba8:	d7 03       	nop
80014baa:	d7 03       	nop
80014bac:	d7 03       	nop
80014bae:	d7 03       	nop
80014bb0:	d7 03       	nop
80014bb2:	d7 03       	nop
80014bb4:	d7 03       	nop
80014bb6:	d7 03       	nop
80014bb8:	d7 03       	nop
80014bba:	d7 03       	nop
80014bbc:	d7 03       	nop
80014bbe:	d7 03       	nop
80014bc0:	d7 03       	nop
80014bc2:	d7 03       	nop
80014bc4:	d7 03       	nop
80014bc6:	d7 03       	nop
80014bc8:	d7 03       	nop
80014bca:	d7 03       	nop
80014bcc:	d7 03       	nop
80014bce:	d7 03       	nop
80014bd0:	d7 03       	nop
80014bd2:	d7 03       	nop
80014bd4:	d7 03       	nop
80014bd6:	d7 03       	nop
80014bd8:	d7 03       	nop
80014bda:	d7 03       	nop
80014bdc:	d7 03       	nop
80014bde:	d7 03       	nop
80014be0:	d7 03       	nop
80014be2:	d7 03       	nop
80014be4:	d7 03       	nop
80014be6:	d7 03       	nop
80014be8:	d7 03       	nop
80014bea:	d7 03       	nop
80014bec:	d7 03       	nop
80014bee:	d7 03       	nop
80014bf0:	d7 03       	nop
80014bf2:	d7 03       	nop
80014bf4:	d7 03       	nop
80014bf6:	d7 03       	nop
80014bf8:	d7 03       	nop
80014bfa:	d7 03       	nop
80014bfc:	d7 03       	nop
80014bfe:	d7 03       	nop
