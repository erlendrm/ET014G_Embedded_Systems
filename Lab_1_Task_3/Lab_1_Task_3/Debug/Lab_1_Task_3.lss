
Lab_1_Task_3.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00002008  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80002008  80002008  00002408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00007e44  80002008  80002008  00002408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .exception    00000200  8000a000  8000a000  0000a400  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       00000698  8000a200  8000a200  0000a600  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .dalign       00000004  00000004  00000004  00000000  2**0
                  ALLOC
  6 .data         00000518  00000008  8000a898  0000b008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000150  00000520  00000520  00000000  2**2
                  ALLOC
  8 .heap         0000e990  00000670  00000670  00000000  2**0
                  ALLOC
  9 .comment      00000030  00000000  00000000  0000b520  2**0
                  CONTENTS, READONLY
 10 .debug_aranges 00000c18  00000000  00000000  0000b550  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_pubnames 0000154d  00000000  00000000  0000c168  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_info   0001c6c2  00000000  00000000  0000d6b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000049c2  00000000  00000000  00029d77  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000cd28  00000000  00000000  0002e739  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00001f70  00000000  00000000  0003b464  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00003af1  00000000  00000000  0003d3d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_loc    0000922d  00000000  00000000  00040ec5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macinfo 0076df03  00000000  00000000  0004a0f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .stack        00001000  0000f000  0000f000  00000000  2**0
                  ALLOC
 20 .debug_ranges 00000cc0  00000000  00000000  007b7ff8  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_start>:

  .global _start
  .type _start, @function
_start:
  // Jump to the C runtime startup routine.
  lda.w   pc, _stext
80000000:	fe cf c0 64 	sub	pc,pc,-16284

80000004 <_trampoline>:
80000004:	e0 8f 10 00 	bral	80002004 <program_start>
	...

80002004 <program_start>:
  rjmp    program_start

  .org  PROGRAM_START_OFFSET
program_start:
  // Jump to the C runtime startup routine.
  lda.w   pc, _stext
80002004:	fe cf e0 68 	sub	pc,pc,-8088

Disassembly of section .text:

80002008 <dip204_init>:
80002008:	eb cd 40 8f 	pushm	r0-r3,r7,lr


/****************************** global functions *****************************/

void dip204_init(backlight_options option, bool backlight_on)
{
8000200c:	1a 97       	mov	r7,sp
8000200e:	fa cd 01 ac 	sub	sp,sp,428
80002012:	ef 4c fe b8 	st.w	r7[-328],r12
80002016:	16 98       	mov	r8,r11
80002018:	ef 68 fe b4 	st.b	r7[-332],r8
  pwm_opt_t pwm_opt;  // pwm option config

  if (option == backlight_PWM)
8000201c:	ee f8 fe b8 	ld.w	r8,r7[-328]
80002020:	58 18       	cp.w	r8,1
80002022:	c6 41       	brne	800020ea <dip204_init+0xe2>
  {
    channel_id = DIP204_PWM_CHANNEL;
80002024:	fe f9 0a 94 	ld.w	r9,pc[2708]
80002028:	30 68       	mov	r8,6
8000202a:	93 08       	st.w	r9[0x0],r8
    gpio_enable_module_pin(DIP204_PWM_PIN, DIP204_PWM_FUNCTION);
8000202c:	30 2b       	mov	r11,2
8000202e:	33 2c       	mov	r12,50
80002030:	f0 1f 02 a3 	mcall	80002abc <dip204_init+0xab4>

    // PWM controller configuration
    pwm_opt.diva=0;
80002034:	30 08       	mov	r8,0
80002036:	ef 48 ff 14 	st.w	r7[-236],r8
    pwm_opt.divb=0;
8000203a:	30 08       	mov	r8,0
8000203c:	ef 48 ff 10 	st.w	r7[-240],r8
    pwm_opt.prea=0;
80002040:	30 08       	mov	r8,0
80002042:	ef 48 ff 1c 	st.w	r7[-228],r8
    pwm_opt.preb=0;
80002046:	30 08       	mov	r8,0
80002048:	ef 48 ff 18 	st.w	r7[-232],r8

    pwm_init(&pwm_opt);
8000204c:	ee c8 00 f0 	sub	r8,r7,240
80002050:	10 9c       	mov	r12,r8
80002052:	f0 1f 02 9c 	mcall	80002ac0 <dip204_init+0xab8>
    pwm_duty = (backlight_on) ? DIP204_PERIOD_MAX - 1 : 1;
80002056:	ef 39 fe b4 	ld.ub	r9,r7[-332]
8000205a:	30 08       	mov	r8,0
8000205c:	f0 09 18 00 	cp.b	r9,r8
80002060:	c0 30       	breq	80002066 <dip204_init+0x5e>
80002062:	33 18       	mov	r8,49
80002064:	c0 28       	rjmp	80002068 <dip204_init+0x60>
80002066:	30 18       	mov	r8,1
80002068:	fe f9 0a 5c 	ld.w	r9,pc[2652]
8000206c:	b2 08       	st.h	r9[0x0],r8
    pwm_channel.CMR.calg = PWM_MODE_LEFT_ALIGNED;   // channel mode
8000206e:	fe fa 0a 5a 	ld.w	r10,pc[2650]
80002072:	74 08       	ld.w	r8,r10[0x0]
80002074:	30 09       	mov	r9,0
80002076:	f1 d9 d1 01 	bfins	r8,r9,0x8,0x1
8000207a:	95 08       	st.w	r10[0x0],r8
    pwm_channel.CMR.cpol = PWM_POLARITY_LOW;   // channel polarity
8000207c:	fe fa 0a 4c 	ld.w	r10,pc[2636]
80002080:	74 08       	ld.w	r8,r10[0x0]
80002082:	30 09       	mov	r9,0
80002084:	f1 d9 d1 21 	bfins	r8,r9,0x9,0x1
80002088:	95 08       	st.w	r10[0x0],r8
    pwm_channel.CMR.cpd = PWM_UPDATE_PERIOD;   // not used the first time
8000208a:	fe fa 0a 3e 	ld.w	r10,pc[2622]
8000208e:	74 08       	ld.w	r8,r10[0x0]
80002090:	30 19       	mov	r9,1
80002092:	f1 d9 d1 41 	bfins	r8,r9,0xa,0x1
80002096:	95 08       	st.w	r10[0x0],r8
    pwm_channel.CMR.cpre = AVR32_PWM_CPRE_MCK_DIV_256;   // channel prescaler
80002098:	fe fa 0a 30 	ld.w	r10,pc[2608]
8000209c:	74 08       	ld.w	r8,r10[0x0]
8000209e:	30 89       	mov	r9,8
800020a0:	f1 d9 d0 04 	bfins	r8,r9,0x0,0x4
800020a4:	95 08       	st.w	r10[0x0],r8
    pwm_channel.cdty = pwm_duty;  // channel duty cycle, should be < CPRD
800020a6:	fe f8 0a 1e 	ld.w	r8,pc[2590]
800020aa:	90 08       	ld.sh	r8,r8[0x0]
800020ac:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
800020b0:	fe f8 0a 18 	ld.w	r8,pc[2584]
800020b4:	91 19       	st.w	r8[0x4],r9
    pwm_channel.cprd = DIP204_PERIOD_MAX;  // channel period
800020b6:	fe f9 0a 12 	ld.w	r9,pc[2578]
800020ba:	33 28       	mov	r8,50
800020bc:	93 28       	st.w	r9[0x8],r8
    pwm_channel.cupd = 0;  // channel update is not used here.
800020be:	fe f9 0a 0a 	ld.w	r9,pc[2570]
800020c2:	30 08       	mov	r8,0
800020c4:	93 48       	st.w	r9[0x10],r8

    pwm_channel_init(channel_id, &pwm_channel);
800020c6:	fe f8 09 f2 	ld.w	r8,pc[2546]
800020ca:	70 08       	ld.w	r8,r8[0x0]
800020cc:	fe fb 09 fc 	ld.w	r11,pc[2556]
800020d0:	10 9c       	mov	r12,r8
800020d2:	f0 1f 02 7f 	mcall	80002acc <dip204_init+0xac4>
    // start PWM
    pwm_start_channels(1 << channel_id);
800020d6:	fe f8 09 e2 	ld.w	r8,pc[2530]
800020da:	70 09       	ld.w	r9,r8[0x0]
800020dc:	30 18       	mov	r8,1
800020de:	f0 09 09 48 	lsl	r8,r8,r9
800020e2:	10 9c       	mov	r12,r8
800020e4:	f0 1f 02 7b 	mcall	80002ad0 <dip204_init+0xac8>
800020e8:	c0 e8       	rjmp	80002104 <dip204_init+0xfc>
  }
  else
  {
    if (backlight_on)
800020ea:	ef 39 fe b4 	ld.ub	r9,r7[-332]
800020ee:	30 08       	mov	r8,0
800020f0:	f0 09 18 00 	cp.b	r9,r8
800020f4:	c0 50       	breq	800020fe <dip204_init+0xf6>
    {
      gpio_clr_gpio_pin(DIP204_BACKLIGHT_PIN);
800020f6:	33 2c       	mov	r12,50
800020f8:	f0 1f 02 77 	mcall	80002ad4 <dip204_init+0xacc>
800020fc:	c0 48       	rjmp	80002104 <dip204_init+0xfc>
    }
    else
    {
      gpio_set_gpio_pin(DIP204_BACKLIGHT_PIN);
800020fe:	33 2c       	mov	r12,50
80002100:	f0 1f 02 76 	mcall	80002ad8 <dip204_init+0xad0>
80002104:	31 48       	mov	r8,20
80002106:	ef 48 ff 24 	st.w	r7[-220],r8
8000210a:	e0 68 1b 00 	mov	r8,6912
8000210e:	ea 18 00 b7 	orh	r8,0xb7
80002112:	ef 48 ff 20 	st.w	r7[-224],r8
80002116:	ee f8 ff 24 	ld.w	r8,r7[-220]
8000211a:	ef 48 ff 2c 	st.w	r7[-212],r8
8000211e:	ee f8 ff 20 	ld.w	r8,r7[-224]
80002122:	ef 48 ff 28 	st.w	r7[-216],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
80002126:	ee f0 ff 2c 	ld.w	r0,r7[-212]
8000212a:	30 01       	mov	r1,0
8000212c:	ee f2 ff 28 	ld.w	r2,r7[-216]
80002130:	30 03       	mov	r3,0
80002132:	e2 02 02 49 	mul	r9,r1,r2
80002136:	e6 00 02 48 	mul	r8,r3,r0
8000213a:	10 09       	add	r9,r8
8000213c:	e0 02 06 4a 	mulu.d	r10,r0,r2
80002140:	16 09       	add	r9,r11
80002142:	12 9b       	mov	r11,r9
80002144:	e0 68 03 e7 	mov	r8,999
80002148:	30 09       	mov	r9,0
8000214a:	10 0a       	add	r10,r8
8000214c:	f6 09 00 4b 	adc	r11,r11,r9
80002150:	e0 68 03 e8 	mov	r8,1000
80002154:	30 09       	mov	r9,0
80002156:	f0 1f 02 62 	mcall	80002adc <dip204_init+0xad4>
8000215a:	14 98       	mov	r8,r10
8000215c:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
8000215e:	ef 48 ff 34 	st.w	r7[-204],r8
80002162:	ee c8 01 44 	sub	r8,r7,324
80002166:	ef 48 ff 30 	st.w	r7[-208],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000216a:	e1 b8 00 42 	mfsr	r8,0x108
8000216e:	10 99       	mov	r9,r8
80002170:	ee f8 ff 30 	ld.w	r8,r7[-208]
80002174:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002176:	ee f8 ff 30 	ld.w	r8,r7[-208]
8000217a:	70 09       	ld.w	r9,r8[0x0]
8000217c:	ee f8 ff 34 	ld.w	r8,r7[-204]
80002180:	10 09       	add	r9,r8
80002182:	ee f8 ff 30 	ld.w	r8,r7[-208]
80002186:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80002188:	ee f9 ff 30 	ld.w	r9,r7[-208]
8000218c:	30 08       	mov	r8,0
8000218e:	f3 68 00 08 	st.b	r9[8],r8
80002192:	ee c8 01 44 	sub	r8,r7,324
80002196:	ef 48 ff 38 	st.w	r7[-200],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000219a:	e1 b8 00 42 	mfsr	r8,0x108
8000219e:	ef 48 ff 3c 	st.w	r7[-196],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
800021a2:	ee f8 ff 38 	ld.w	r8,r7[-200]
800021a6:	f1 39 00 08 	ld.ub	r9,r8[8]
800021aa:	30 28       	mov	r8,2
800021ac:	f0 09 18 00 	cp.b	r9,r8
800021b0:	c0 31       	brne	800021b6 <dip204_init+0x1ae>
    return false;
800021b2:	30 08       	mov	r8,0
800021b4:	c4 38       	rjmp	8000223a <dip204_init+0x232>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
800021b6:	ee f8 ff 38 	ld.w	r8,r7[-200]
800021ba:	f1 39 00 08 	ld.ub	r9,r8[8]
800021be:	30 18       	mov	r8,1
800021c0:	f0 09 18 00 	cp.b	r9,r8
800021c4:	c0 31       	brne	800021ca <dip204_init+0x1c2>
    return true;
800021c6:	30 18       	mov	r8,1
800021c8:	c3 98       	rjmp	8000223a <dip204_init+0x232>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800021ca:	ee f8 ff 38 	ld.w	r8,r7[-200]
800021ce:	70 09       	ld.w	r9,r8[0x0]
800021d0:	ee f8 ff 38 	ld.w	r8,r7[-200]
800021d4:	70 18       	ld.w	r8,r8[0x4]
800021d6:	10 39       	cp.w	r9,r8
800021d8:	e0 88 00 1a 	brls	8000220c <dip204_init+0x204>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800021dc:	ee f8 ff 38 	ld.w	r8,r7[-200]
800021e0:	70 09       	ld.w	r9,r8[0x0]
800021e2:	ee f8 ff 3c 	ld.w	r8,r7[-196]
800021e6:	12 38       	cp.w	r8,r9
800021e8:	c1 02       	brcc	80002208 <dip204_init+0x200>
800021ea:	ee f8 ff 38 	ld.w	r8,r7[-200]
800021ee:	70 19       	ld.w	r9,r8[0x4]
800021f0:	ee f8 ff 3c 	ld.w	r8,r7[-196]
800021f4:	12 38       	cp.w	r8,r9
800021f6:	e0 88 00 09 	brls	80002208 <dip204_init+0x200>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
800021fa:	ee f9 ff 38 	ld.w	r9,r7[-200]
800021fe:	30 18       	mov	r8,1
80002200:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80002204:	30 18       	mov	r8,1
80002206:	c1 a8       	rjmp	8000223a <dip204_init+0x232>
    }
    return false;
80002208:	30 08       	mov	r8,0
8000220a:	c1 88       	rjmp	8000223a <dip204_init+0x232>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000220c:	ee f8 ff 38 	ld.w	r8,r7[-200]
80002210:	70 09       	ld.w	r9,r8[0x0]
80002212:	ee f8 ff 3c 	ld.w	r8,r7[-196]
80002216:	12 38       	cp.w	r8,r9
80002218:	c0 93       	brcs	8000222a <dip204_init+0x222>
8000221a:	ee f8 ff 38 	ld.w	r8,r7[-200]
8000221e:	70 19       	ld.w	r9,r8[0x4]
80002220:	ee f8 ff 3c 	ld.w	r8,r7[-196]
80002224:	12 38       	cp.w	r8,r9
80002226:	e0 88 00 09 	brls	80002238 <dip204_init+0x230>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
8000222a:	ee f9 ff 38 	ld.w	r9,r7[-200]
8000222e:	30 18       	mov	r8,1
80002230:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80002234:	30 18       	mov	r8,1
80002236:	c0 28       	rjmp	8000223a <dip204_init+0x232>
    }
    return false;
80002238:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
8000223a:	58 08       	cp.w	r8,0
8000223c:	ca b0       	breq	80002192 <dip204_init+0x18a>
    }
  }
  // delay for power on
  delay_ms(20);
  // select the LCD chip
  dip204_select();
8000223e:	f0 1f 02 29 	mcall	80002ae0 <dip204_init+0xad8>
  // Send Command Start Byte
  dip204_write_byte(DIP204_WRITE_COMMAND);
80002242:	e0 6c 00 f8 	mov	r12,248
80002246:	f0 1f 02 28 	mcall	80002ae4 <dip204_init+0xadc>
  // Send "extended Function Set" Command  (RE=1)
  dip204_write_byte(0x34);
8000224a:	33 4c       	mov	r12,52
8000224c:	f0 1f 02 26 	mcall	80002ae4 <dip204_init+0xadc>
80002250:	30 18       	mov	r8,1
80002252:	ef 48 ff 44 	st.w	r7[-188],r8
80002256:	e0 68 1b 00 	mov	r8,6912
8000225a:	ea 18 00 b7 	orh	r8,0xb7
8000225e:	ef 48 ff 40 	st.w	r7[-192],r8
80002262:	ee f8 ff 44 	ld.w	r8,r7[-188]
80002266:	ef 48 ff 4c 	st.w	r7[-180],r8
8000226a:	ee f8 ff 40 	ld.w	r8,r7[-192]
8000226e:	ef 48 ff 48 	st.w	r7[-184],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
80002272:	ee fc ff 4c 	ld.w	r12,r7[-180]
80002276:	ef 4c fe 60 	st.w	r7[-416],r12
8000227a:	30 0b       	mov	r11,0
8000227c:	ef 4b fe 5c 	st.w	r7[-420],r11
80002280:	ee fa ff 48 	ld.w	r10,r7[-184]
80002284:	ef 4a fe 58 	st.w	r7[-424],r10
80002288:	30 09       	mov	r9,0
8000228a:	ef 49 fe 54 	st.w	r7[-428],r9
8000228e:	ee f9 fe 5c 	ld.w	r9,r7[-420]
80002292:	ee f8 fe 58 	ld.w	r8,r7[-424]
80002296:	b1 39       	mul	r9,r8
80002298:	ee f8 fe 54 	ld.w	r8,r7[-428]
8000229c:	ee fc fe 60 	ld.w	r12,r7[-416]
800022a0:	b9 38       	mul	r8,r12
800022a2:	10 09       	add	r9,r8
800022a4:	ee f8 fe 60 	ld.w	r8,r7[-416]
800022a8:	ee fc fe 58 	ld.w	r12,r7[-424]
800022ac:	f0 0c 06 4a 	mulu.d	r10,r8,r12
800022b0:	16 09       	add	r9,r11
800022b2:	12 9b       	mov	r11,r9
800022b4:	e0 68 03 e7 	mov	r8,999
800022b8:	30 09       	mov	r9,0
800022ba:	10 0a       	add	r10,r8
800022bc:	f6 09 00 4b 	adc	r11,r11,r9
800022c0:	e0 68 03 e8 	mov	r8,1000
800022c4:	30 09       	mov	r9,0
800022c6:	f0 1f 02 06 	mcall	80002adc <dip204_init+0xad4>
800022ca:	14 98       	mov	r8,r10
800022cc:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
800022ce:	ef 48 ff 54 	st.w	r7[-172],r8
800022d2:	ee c8 01 38 	sub	r8,r7,312
800022d6:	ef 48 ff 50 	st.w	r7[-176],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800022da:	e1 b8 00 42 	mfsr	r8,0x108
800022de:	10 99       	mov	r9,r8
800022e0:	ee f8 ff 50 	ld.w	r8,r7[-176]
800022e4:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800022e6:	ee f8 ff 50 	ld.w	r8,r7[-176]
800022ea:	70 09       	ld.w	r9,r8[0x0]
800022ec:	ee f8 ff 54 	ld.w	r8,r7[-172]
800022f0:	10 09       	add	r9,r8
800022f2:	ee f8 ff 50 	ld.w	r8,r7[-176]
800022f6:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
800022f8:	ee f9 ff 50 	ld.w	r9,r7[-176]
800022fc:	30 08       	mov	r8,0
800022fe:	f3 68 00 08 	st.b	r9[8],r8
80002302:	ee c8 01 38 	sub	r8,r7,312
80002306:	ef 48 ff 58 	st.w	r7[-168],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000230a:	e1 b8 00 42 	mfsr	r8,0x108
8000230e:	ef 48 ff 5c 	st.w	r7[-164],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80002312:	ee f8 ff 58 	ld.w	r8,r7[-168]
80002316:	f1 39 00 08 	ld.ub	r9,r8[8]
8000231a:	30 28       	mov	r8,2
8000231c:	f0 09 18 00 	cp.b	r9,r8
80002320:	c0 31       	brne	80002326 <dip204_init+0x31e>
    return false;
80002322:	30 08       	mov	r8,0
80002324:	c4 38       	rjmp	800023aa <dip204_init+0x3a2>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80002326:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000232a:	f1 39 00 08 	ld.ub	r9,r8[8]
8000232e:	30 18       	mov	r8,1
80002330:	f0 09 18 00 	cp.b	r9,r8
80002334:	c0 31       	brne	8000233a <dip204_init+0x332>
    return true;
80002336:	30 18       	mov	r8,1
80002338:	c3 98       	rjmp	800023aa <dip204_init+0x3a2>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000233a:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000233e:	70 09       	ld.w	r9,r8[0x0]
80002340:	ee f8 ff 58 	ld.w	r8,r7[-168]
80002344:	70 18       	ld.w	r8,r8[0x4]
80002346:	10 39       	cp.w	r9,r8
80002348:	e0 88 00 1a 	brls	8000237c <dip204_init+0x374>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000234c:	ee f8 ff 58 	ld.w	r8,r7[-168]
80002350:	70 09       	ld.w	r9,r8[0x0]
80002352:	ee f8 ff 5c 	ld.w	r8,r7[-164]
80002356:	12 38       	cp.w	r8,r9
80002358:	c1 02       	brcc	80002378 <dip204_init+0x370>
8000235a:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000235e:	70 19       	ld.w	r9,r8[0x4]
80002360:	ee f8 ff 5c 	ld.w	r8,r7[-164]
80002364:	12 38       	cp.w	r8,r9
80002366:	e0 88 00 09 	brls	80002378 <dip204_init+0x370>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
8000236a:	ee f9 ff 58 	ld.w	r9,r7[-168]
8000236e:	30 18       	mov	r8,1
80002370:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80002374:	30 18       	mov	r8,1
80002376:	c1 a8       	rjmp	800023aa <dip204_init+0x3a2>
    }
    return false;
80002378:	30 08       	mov	r8,0
8000237a:	c1 88       	rjmp	800023aa <dip204_init+0x3a2>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000237c:	ee f8 ff 58 	ld.w	r8,r7[-168]
80002380:	70 09       	ld.w	r9,r8[0x0]
80002382:	ee f8 ff 5c 	ld.w	r8,r7[-164]
80002386:	12 38       	cp.w	r8,r9
80002388:	c0 93       	brcs	8000239a <dip204_init+0x392>
8000238a:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000238e:	70 19       	ld.w	r9,r8[0x4]
80002390:	ee f8 ff 5c 	ld.w	r8,r7[-164]
80002394:	12 38       	cp.w	r8,r9
80002396:	e0 88 00 09 	brls	800023a8 <dip204_init+0x3a0>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
8000239a:	ee f9 ff 58 	ld.w	r9,r7[-168]
8000239e:	30 18       	mov	r8,1
800023a0:	f3 68 00 08 	st.b	r9[8],r8
      return true;
800023a4:	30 18       	mov	r8,1
800023a6:	c0 28       	rjmp	800023aa <dip204_init+0x3a2>
    }
    return false;
800023a8:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
800023aa:	58 08       	cp.w	r8,0
800023ac:	ca b0       	breq	80002302 <dip204_init+0x2fa>
  // Wait for command execution
  delay_ms(1);
  // Send "Enter 4-Line Mode" Command
  dip204_write_byte(0x09);
800023ae:	30 9c       	mov	r12,9
800023b0:	f0 1f 01 cd 	mcall	80002ae4 <dip204_init+0xadc>
800023b4:	30 18       	mov	r8,1
800023b6:	ef 48 ff 64 	st.w	r7[-156],r8
800023ba:	e0 68 1b 00 	mov	r8,6912
800023be:	ea 18 00 b7 	orh	r8,0xb7
800023c2:	ef 48 ff 60 	st.w	r7[-160],r8
800023c6:	ee f8 ff 64 	ld.w	r8,r7[-156]
800023ca:	ef 48 ff 6c 	st.w	r7[-148],r8
800023ce:	ee f8 ff 60 	ld.w	r8,r7[-160]
800023d2:	ef 48 ff 68 	st.w	r7[-152],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
800023d6:	ee fb ff 6c 	ld.w	r11,r7[-148]
800023da:	ef 4b fe 70 	st.w	r7[-400],r11
800023de:	30 0a       	mov	r10,0
800023e0:	ef 4a fe 6c 	st.w	r7[-404],r10
800023e4:	ee f9 ff 68 	ld.w	r9,r7[-152]
800023e8:	ef 49 fe 68 	st.w	r7[-408],r9
800023ec:	30 08       	mov	r8,0
800023ee:	ef 48 fe 64 	st.w	r7[-412],r8
800023f2:	ee f9 fe 6c 	ld.w	r9,r7[-404]
800023f6:	ee fc fe 68 	ld.w	r12,r7[-408]
800023fa:	b9 39       	mul	r9,r12
800023fc:	ee f8 fe 64 	ld.w	r8,r7[-412]
80002400:	ee fb fe 70 	ld.w	r11,r7[-400]
80002404:	b7 38       	mul	r8,r11
80002406:	10 09       	add	r9,r8
80002408:	ee f8 fe 70 	ld.w	r8,r7[-400]
8000240c:	ee fc fe 68 	ld.w	r12,r7[-408]
80002410:	f0 0c 06 4a 	mulu.d	r10,r8,r12
80002414:	16 09       	add	r9,r11
80002416:	12 9b       	mov	r11,r9
80002418:	e0 68 03 e7 	mov	r8,999
8000241c:	30 09       	mov	r9,0
8000241e:	10 0a       	add	r10,r8
80002420:	f6 09 00 4b 	adc	r11,r11,r9
80002424:	e0 68 03 e8 	mov	r8,1000
80002428:	30 09       	mov	r9,0
8000242a:	f0 1f 01 ad 	mcall	80002adc <dip204_init+0xad4>
8000242e:	14 98       	mov	r8,r10
80002430:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
80002432:	ef 48 ff 74 	st.w	r7[-140],r8
80002436:	ee c8 01 2c 	sub	r8,r7,300
8000243a:	ef 48 ff 70 	st.w	r7[-144],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000243e:	e1 b8 00 42 	mfsr	r8,0x108
80002442:	10 99       	mov	r9,r8
80002444:	ee f8 ff 70 	ld.w	r8,r7[-144]
80002448:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000244a:	ee f8 ff 70 	ld.w	r8,r7[-144]
8000244e:	70 09       	ld.w	r9,r8[0x0]
80002450:	ee f8 ff 74 	ld.w	r8,r7[-140]
80002454:	10 09       	add	r9,r8
80002456:	ee f8 ff 70 	ld.w	r8,r7[-144]
8000245a:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
8000245c:	ee f9 ff 70 	ld.w	r9,r7[-144]
80002460:	30 08       	mov	r8,0
80002462:	f3 68 00 08 	st.b	r9[8],r8
80002466:	ee c8 01 2c 	sub	r8,r7,300
8000246a:	ef 48 ff 78 	st.w	r7[-136],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000246e:	e1 b8 00 42 	mfsr	r8,0x108
80002472:	ef 48 ff 7c 	st.w	r7[-132],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80002476:	ee f8 ff 78 	ld.w	r8,r7[-136]
8000247a:	f1 39 00 08 	ld.ub	r9,r8[8]
8000247e:	30 28       	mov	r8,2
80002480:	f0 09 18 00 	cp.b	r9,r8
80002484:	c0 31       	brne	8000248a <dip204_init+0x482>
    return false;
80002486:	30 08       	mov	r8,0
80002488:	c4 38       	rjmp	8000250e <dip204_init+0x506>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
8000248a:	ee f8 ff 78 	ld.w	r8,r7[-136]
8000248e:	f1 39 00 08 	ld.ub	r9,r8[8]
80002492:	30 18       	mov	r8,1
80002494:	f0 09 18 00 	cp.b	r9,r8
80002498:	c0 31       	brne	8000249e <dip204_init+0x496>
    return true;
8000249a:	30 18       	mov	r8,1
8000249c:	c3 98       	rjmp	8000250e <dip204_init+0x506>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000249e:	ee f8 ff 78 	ld.w	r8,r7[-136]
800024a2:	70 09       	ld.w	r9,r8[0x0]
800024a4:	ee f8 ff 78 	ld.w	r8,r7[-136]
800024a8:	70 18       	ld.w	r8,r8[0x4]
800024aa:	10 39       	cp.w	r9,r8
800024ac:	e0 88 00 1a 	brls	800024e0 <dip204_init+0x4d8>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800024b0:	ee f8 ff 78 	ld.w	r8,r7[-136]
800024b4:	70 09       	ld.w	r9,r8[0x0]
800024b6:	ee f8 ff 7c 	ld.w	r8,r7[-132]
800024ba:	12 38       	cp.w	r8,r9
800024bc:	c1 02       	brcc	800024dc <dip204_init+0x4d4>
800024be:	ee f8 ff 78 	ld.w	r8,r7[-136]
800024c2:	70 19       	ld.w	r9,r8[0x4]
800024c4:	ee f8 ff 7c 	ld.w	r8,r7[-132]
800024c8:	12 38       	cp.w	r8,r9
800024ca:	e0 88 00 09 	brls	800024dc <dip204_init+0x4d4>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
800024ce:	ee f9 ff 78 	ld.w	r9,r7[-136]
800024d2:	30 18       	mov	r8,1
800024d4:	f3 68 00 08 	st.b	r9[8],r8
      return true;
800024d8:	30 18       	mov	r8,1
800024da:	c1 a8       	rjmp	8000250e <dip204_init+0x506>
    }
    return false;
800024dc:	30 08       	mov	r8,0
800024de:	c1 88       	rjmp	8000250e <dip204_init+0x506>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800024e0:	ee f8 ff 78 	ld.w	r8,r7[-136]
800024e4:	70 09       	ld.w	r9,r8[0x0]
800024e6:	ee f8 ff 7c 	ld.w	r8,r7[-132]
800024ea:	12 38       	cp.w	r8,r9
800024ec:	c0 93       	brcs	800024fe <dip204_init+0x4f6>
800024ee:	ee f8 ff 78 	ld.w	r8,r7[-136]
800024f2:	70 19       	ld.w	r9,r8[0x4]
800024f4:	ee f8 ff 7c 	ld.w	r8,r7[-132]
800024f8:	12 38       	cp.w	r8,r9
800024fa:	e0 88 00 09 	brls	8000250c <dip204_init+0x504>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
800024fe:	ee f9 ff 78 	ld.w	r9,r7[-136]
80002502:	30 18       	mov	r8,1
80002504:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80002508:	30 18       	mov	r8,1
8000250a:	c0 28       	rjmp	8000250e <dip204_init+0x506>
    }
    return false;
8000250c:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
8000250e:	58 08       	cp.w	r8,0
80002510:	ca b0       	breq	80002466 <dip204_init+0x45e>
  // Wait for command execution
  delay_ms(1);
  // Send "Function Set" Command (RE=0)
  dip204_write_byte(0x30);
80002512:	33 0c       	mov	r12,48
80002514:	f0 1f 01 74 	mcall	80002ae4 <dip204_init+0xadc>
80002518:	30 18       	mov	r8,1
8000251a:	ef 48 ff 84 	st.w	r7[-124],r8
8000251e:	e0 68 1b 00 	mov	r8,6912
80002522:	ea 18 00 b7 	orh	r8,0xb7
80002526:	ef 48 ff 80 	st.w	r7[-128],r8
8000252a:	ee f8 ff 84 	ld.w	r8,r7[-124]
8000252e:	ef 48 ff 8c 	st.w	r7[-116],r8
80002532:	ee f8 ff 80 	ld.w	r8,r7[-128]
80002536:	ef 48 ff 88 	st.w	r7[-120],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
8000253a:	ee fb ff 8c 	ld.w	r11,r7[-116]
8000253e:	ef 4b fe 80 	st.w	r7[-384],r11
80002542:	30 0a       	mov	r10,0
80002544:	ef 4a fe 7c 	st.w	r7[-388],r10
80002548:	ee f9 ff 88 	ld.w	r9,r7[-120]
8000254c:	ef 49 fe 78 	st.w	r7[-392],r9
80002550:	30 08       	mov	r8,0
80002552:	ef 48 fe 74 	st.w	r7[-396],r8
80002556:	ee f9 fe 7c 	ld.w	r9,r7[-388]
8000255a:	ee fc fe 78 	ld.w	r12,r7[-392]
8000255e:	b9 39       	mul	r9,r12
80002560:	ee f8 fe 74 	ld.w	r8,r7[-396]
80002564:	ee fb fe 80 	ld.w	r11,r7[-384]
80002568:	b7 38       	mul	r8,r11
8000256a:	10 09       	add	r9,r8
8000256c:	ee f8 fe 80 	ld.w	r8,r7[-384]
80002570:	ee fc fe 78 	ld.w	r12,r7[-392]
80002574:	f0 0c 06 4a 	mulu.d	r10,r8,r12
80002578:	16 09       	add	r9,r11
8000257a:	12 9b       	mov	r11,r9
8000257c:	e0 68 03 e7 	mov	r8,999
80002580:	30 09       	mov	r9,0
80002582:	10 0a       	add	r10,r8
80002584:	f6 09 00 4b 	adc	r11,r11,r9
80002588:	e0 68 03 e8 	mov	r8,1000
8000258c:	30 09       	mov	r9,0
8000258e:	f0 1f 01 54 	mcall	80002adc <dip204_init+0xad4>
80002592:	14 98       	mov	r8,r10
80002594:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
80002596:	ef 48 ff 94 	st.w	r7[-108],r8
8000259a:	ee c8 01 20 	sub	r8,r7,288
8000259e:	ef 48 ff 90 	st.w	r7[-112],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800025a2:	e1 b8 00 42 	mfsr	r8,0x108
800025a6:	10 99       	mov	r9,r8
800025a8:	ee f8 ff 90 	ld.w	r8,r7[-112]
800025ac:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800025ae:	ee f8 ff 90 	ld.w	r8,r7[-112]
800025b2:	70 09       	ld.w	r9,r8[0x0]
800025b4:	ee f8 ff 94 	ld.w	r8,r7[-108]
800025b8:	10 09       	add	r9,r8
800025ba:	ee f8 ff 90 	ld.w	r8,r7[-112]
800025be:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
800025c0:	ee f9 ff 90 	ld.w	r9,r7[-112]
800025c4:	30 08       	mov	r8,0
800025c6:	f3 68 00 08 	st.b	r9[8],r8
800025ca:	ee c8 01 20 	sub	r8,r7,288
800025ce:	ef 48 ff 98 	st.w	r7[-104],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800025d2:	e1 b8 00 42 	mfsr	r8,0x108
800025d6:	ef 48 ff 9c 	st.w	r7[-100],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
800025da:	ee f8 ff 98 	ld.w	r8,r7[-104]
800025de:	f1 39 00 08 	ld.ub	r9,r8[8]
800025e2:	30 28       	mov	r8,2
800025e4:	f0 09 18 00 	cp.b	r9,r8
800025e8:	c0 31       	brne	800025ee <dip204_init+0x5e6>
    return false;
800025ea:	30 08       	mov	r8,0
800025ec:	c4 38       	rjmp	80002672 <dip204_init+0x66a>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
800025ee:	ee f8 ff 98 	ld.w	r8,r7[-104]
800025f2:	f1 39 00 08 	ld.ub	r9,r8[8]
800025f6:	30 18       	mov	r8,1
800025f8:	f0 09 18 00 	cp.b	r9,r8
800025fc:	c0 31       	brne	80002602 <dip204_init+0x5fa>
    return true;
800025fe:	30 18       	mov	r8,1
80002600:	c3 98       	rjmp	80002672 <dip204_init+0x66a>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002602:	ee f8 ff 98 	ld.w	r8,r7[-104]
80002606:	70 09       	ld.w	r9,r8[0x0]
80002608:	ee f8 ff 98 	ld.w	r8,r7[-104]
8000260c:	70 18       	ld.w	r8,r8[0x4]
8000260e:	10 39       	cp.w	r9,r8
80002610:	e0 88 00 1a 	brls	80002644 <dip204_init+0x63c>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002614:	ee f8 ff 98 	ld.w	r8,r7[-104]
80002618:	70 08       	ld.w	r8,r8[0x0]
8000261a:	ee f9 ff 9c 	ld.w	r9,r7[-100]
8000261e:	10 39       	cp.w	r9,r8
80002620:	c1 02       	brcc	80002640 <dip204_init+0x638>
80002622:	ee f8 ff 98 	ld.w	r8,r7[-104]
80002626:	70 18       	ld.w	r8,r8[0x4]
80002628:	ee f9 ff 9c 	ld.w	r9,r7[-100]
8000262c:	10 39       	cp.w	r9,r8
8000262e:	e0 88 00 09 	brls	80002640 <dip204_init+0x638>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80002632:	ee f9 ff 98 	ld.w	r9,r7[-104]
80002636:	30 18       	mov	r8,1
80002638:	f3 68 00 08 	st.b	r9[8],r8
      return true;
8000263c:	30 18       	mov	r8,1
8000263e:	c1 a8       	rjmp	80002672 <dip204_init+0x66a>
    }
    return false;
80002640:	30 08       	mov	r8,0
80002642:	c1 88       	rjmp	80002672 <dip204_init+0x66a>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002644:	ee f8 ff 98 	ld.w	r8,r7[-104]
80002648:	70 08       	ld.w	r8,r8[0x0]
8000264a:	ee f9 ff 9c 	ld.w	r9,r7[-100]
8000264e:	10 39       	cp.w	r9,r8
80002650:	c0 93       	brcs	80002662 <dip204_init+0x65a>
80002652:	ee f8 ff 98 	ld.w	r8,r7[-104]
80002656:	70 18       	ld.w	r8,r8[0x4]
80002658:	ee f9 ff 9c 	ld.w	r9,r7[-100]
8000265c:	10 39       	cp.w	r9,r8
8000265e:	e0 88 00 09 	brls	80002670 <dip204_init+0x668>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80002662:	ee f9 ff 98 	ld.w	r9,r7[-104]
80002666:	30 18       	mov	r8,1
80002668:	f3 68 00 08 	st.b	r9[8],r8
      return true;
8000266c:	30 18       	mov	r8,1
8000266e:	c0 28       	rjmp	80002672 <dip204_init+0x66a>
    }
    return false;
80002670:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
80002672:	58 08       	cp.w	r8,0
80002674:	ca b0       	breq	800025ca <dip204_init+0x5c2>
  // Wait for command execution
  delay_ms(1);
  // Send "Display On Command: Display On, Cursor On, Blink On"
  dip204_write_byte(0x0F);
80002676:	30 fc       	mov	r12,15
80002678:	f0 1f 01 1b 	mcall	80002ae4 <dip204_init+0xadc>
8000267c:	30 18       	mov	r8,1
8000267e:	ef 48 ff a4 	st.w	r7[-92],r8
80002682:	e0 68 1b 00 	mov	r8,6912
80002686:	ea 18 00 b7 	orh	r8,0xb7
8000268a:	ef 48 ff a0 	st.w	r7[-96],r8
8000268e:	ee f8 ff a4 	ld.w	r8,r7[-92]
80002692:	ef 48 ff ac 	st.w	r7[-84],r8
80002696:	ee f8 ff a0 	ld.w	r8,r7[-96]
8000269a:	ef 48 ff a8 	st.w	r7[-88],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
8000269e:	ee fb ff ac 	ld.w	r11,r7[-84]
800026a2:	ef 4b fe 90 	st.w	r7[-368],r11
800026a6:	30 0a       	mov	r10,0
800026a8:	ef 4a fe 8c 	st.w	r7[-372],r10
800026ac:	ee f9 ff a8 	ld.w	r9,r7[-88]
800026b0:	ef 49 fe 88 	st.w	r7[-376],r9
800026b4:	30 08       	mov	r8,0
800026b6:	ef 48 fe 84 	st.w	r7[-380],r8
800026ba:	ee fa fe 8c 	ld.w	r10,r7[-372]
800026be:	ee fc fe 88 	ld.w	r12,r7[-376]
800026c2:	b9 3a       	mul	r10,r12
800026c4:	ee f8 fe 84 	ld.w	r8,r7[-380]
800026c8:	ee fb fe 90 	ld.w	r11,r7[-368]
800026cc:	b7 38       	mul	r8,r11
800026ce:	10 0a       	add	r10,r8
800026d0:	ee fc fe 90 	ld.w	r12,r7[-368]
800026d4:	ee fb fe 88 	ld.w	r11,r7[-376]
800026d8:	f8 0b 06 48 	mulu.d	r8,r12,r11
800026dc:	12 0a       	add	r10,r9
800026de:	14 99       	mov	r9,r10
800026e0:	e0 6a 03 e7 	mov	r10,999
800026e4:	30 0b       	mov	r11,0
800026e6:	f0 0a 00 0a 	add	r10,r8,r10
800026ea:	f2 0b 00 4b 	adc	r11,r9,r11
800026ee:	e0 68 03 e8 	mov	r8,1000
800026f2:	30 09       	mov	r9,0
800026f4:	f0 1f 00 fa 	mcall	80002adc <dip204_init+0xad4>
800026f8:	14 98       	mov	r8,r10
800026fa:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
800026fc:	ef 48 ff b4 	st.w	r7[-76],r8
80002700:	ee c8 01 14 	sub	r8,r7,276
80002704:	ef 48 ff b0 	st.w	r7[-80],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002708:	e1 b8 00 42 	mfsr	r8,0x108
8000270c:	10 99       	mov	r9,r8
8000270e:	ee f8 ff b0 	ld.w	r8,r7[-80]
80002712:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002714:	ee f8 ff b0 	ld.w	r8,r7[-80]
80002718:	70 09       	ld.w	r9,r8[0x0]
8000271a:	ee f8 ff b4 	ld.w	r8,r7[-76]
8000271e:	10 09       	add	r9,r8
80002720:	ee f8 ff b0 	ld.w	r8,r7[-80]
80002724:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80002726:	ee f9 ff b0 	ld.w	r9,r7[-80]
8000272a:	30 08       	mov	r8,0
8000272c:	f3 68 00 08 	st.b	r9[8],r8
80002730:	ee c8 01 14 	sub	r8,r7,276
80002734:	ef 48 ff b8 	st.w	r7[-72],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002738:	e1 b8 00 42 	mfsr	r8,0x108
8000273c:	ef 48 ff bc 	st.w	r7[-68],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80002740:	ee f8 ff b8 	ld.w	r8,r7[-72]
80002744:	f1 39 00 08 	ld.ub	r9,r8[8]
80002748:	30 28       	mov	r8,2
8000274a:	f0 09 18 00 	cp.b	r9,r8
8000274e:	c0 31       	brne	80002754 <dip204_init+0x74c>
    return false;
80002750:	30 08       	mov	r8,0
80002752:	c4 38       	rjmp	800027d8 <dip204_init+0x7d0>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80002754:	ee f8 ff b8 	ld.w	r8,r7[-72]
80002758:	f1 39 00 08 	ld.ub	r9,r8[8]
8000275c:	30 18       	mov	r8,1
8000275e:	f0 09 18 00 	cp.b	r9,r8
80002762:	c0 31       	brne	80002768 <dip204_init+0x760>
    return true;
80002764:	30 18       	mov	r8,1
80002766:	c3 98       	rjmp	800027d8 <dip204_init+0x7d0>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002768:	ee f8 ff b8 	ld.w	r8,r7[-72]
8000276c:	70 09       	ld.w	r9,r8[0x0]
8000276e:	ee f8 ff b8 	ld.w	r8,r7[-72]
80002772:	70 18       	ld.w	r8,r8[0x4]
80002774:	10 39       	cp.w	r9,r8
80002776:	e0 88 00 1a 	brls	800027aa <dip204_init+0x7a2>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000277a:	ee f8 ff b8 	ld.w	r8,r7[-72]
8000277e:	70 08       	ld.w	r8,r8[0x0]
80002780:	ee f9 ff bc 	ld.w	r9,r7[-68]
80002784:	10 39       	cp.w	r9,r8
80002786:	c1 02       	brcc	800027a6 <dip204_init+0x79e>
80002788:	ee f8 ff b8 	ld.w	r8,r7[-72]
8000278c:	70 18       	ld.w	r8,r8[0x4]
8000278e:	ee f9 ff bc 	ld.w	r9,r7[-68]
80002792:	10 39       	cp.w	r9,r8
80002794:	e0 88 00 09 	brls	800027a6 <dip204_init+0x79e>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80002798:	ee f9 ff b8 	ld.w	r9,r7[-72]
8000279c:	30 18       	mov	r8,1
8000279e:	f3 68 00 08 	st.b	r9[8],r8
      return true;
800027a2:	30 18       	mov	r8,1
800027a4:	c1 a8       	rjmp	800027d8 <dip204_init+0x7d0>
    }
    return false;
800027a6:	30 08       	mov	r8,0
800027a8:	c1 88       	rjmp	800027d8 <dip204_init+0x7d0>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800027aa:	ee f8 ff b8 	ld.w	r8,r7[-72]
800027ae:	70 08       	ld.w	r8,r8[0x0]
800027b0:	ee f9 ff bc 	ld.w	r9,r7[-68]
800027b4:	10 39       	cp.w	r9,r8
800027b6:	c0 93       	brcs	800027c8 <dip204_init+0x7c0>
800027b8:	ee f8 ff b8 	ld.w	r8,r7[-72]
800027bc:	70 18       	ld.w	r8,r8[0x4]
800027be:	ee f9 ff bc 	ld.w	r9,r7[-68]
800027c2:	10 39       	cp.w	r9,r8
800027c4:	e0 88 00 09 	brls	800027d6 <dip204_init+0x7ce>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
800027c8:	ee f9 ff b8 	ld.w	r9,r7[-72]
800027cc:	30 18       	mov	r8,1
800027ce:	f3 68 00 08 	st.b	r9[8],r8
      return true;
800027d2:	30 18       	mov	r8,1
800027d4:	c0 28       	rjmp	800027d8 <dip204_init+0x7d0>
    }
    return false;
800027d6:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
800027d8:	58 08       	cp.w	r8,0
800027da:	ca b0       	breq	80002730 <dip204_init+0x728>
  // Wait for command execution
  delay_ms(1);
  // Send "Display Clear" Command
  dip204_write_byte(0x01);
800027dc:	30 1c       	mov	r12,1
800027de:	f0 1f 00 c2 	mcall	80002ae4 <dip204_init+0xadc>
800027e2:	30 58       	mov	r8,5
800027e4:	ef 48 ff c4 	st.w	r7[-60],r8
800027e8:	e0 68 1b 00 	mov	r8,6912
800027ec:	ea 18 00 b7 	orh	r8,0xb7
800027f0:	ef 48 ff c0 	st.w	r7[-64],r8
800027f4:	ee f8 ff c4 	ld.w	r8,r7[-60]
800027f8:	ef 48 ff cc 	st.w	r7[-52],r8
800027fc:	ee f8 ff c0 	ld.w	r8,r7[-64]
80002800:	ef 48 ff c8 	st.w	r7[-56],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
80002804:	ee fa ff cc 	ld.w	r10,r7[-52]
80002808:	ef 4a fe a0 	st.w	r7[-352],r10
8000280c:	30 09       	mov	r9,0
8000280e:	ef 49 fe 9c 	st.w	r7[-356],r9
80002812:	ee f8 ff c8 	ld.w	r8,r7[-56]
80002816:	ef 48 fe 98 	st.w	r7[-360],r8
8000281a:	30 0c       	mov	r12,0
8000281c:	ef 4c fe 94 	st.w	r7[-364],r12
80002820:	ee fa fe 9c 	ld.w	r10,r7[-356]
80002824:	ee fb fe 98 	ld.w	r11,r7[-360]
80002828:	b7 3a       	mul	r10,r11
8000282a:	ee f8 fe 94 	ld.w	r8,r7[-364]
8000282e:	ee f9 fe a0 	ld.w	r9,r7[-352]
80002832:	b3 38       	mul	r8,r9
80002834:	10 0a       	add	r10,r8
80002836:	ee fc fe a0 	ld.w	r12,r7[-352]
8000283a:	ee fb fe 98 	ld.w	r11,r7[-360]
8000283e:	f8 0b 06 48 	mulu.d	r8,r12,r11
80002842:	12 0a       	add	r10,r9
80002844:	14 99       	mov	r9,r10
80002846:	e0 6a 03 e7 	mov	r10,999
8000284a:	30 0b       	mov	r11,0
8000284c:	f0 0a 00 0a 	add	r10,r8,r10
80002850:	f2 0b 00 4b 	adc	r11,r9,r11
80002854:	e0 68 03 e8 	mov	r8,1000
80002858:	30 09       	mov	r9,0
8000285a:	f0 1f 00 a1 	mcall	80002adc <dip204_init+0xad4>
8000285e:	14 98       	mov	r8,r10
80002860:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
80002862:	ef 48 ff d4 	st.w	r7[-44],r8
80002866:	ee c8 01 08 	sub	r8,r7,264
8000286a:	ef 48 ff d0 	st.w	r7[-48],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000286e:	e1 b8 00 42 	mfsr	r8,0x108
80002872:	10 99       	mov	r9,r8
80002874:	ee f8 ff d0 	ld.w	r8,r7[-48]
80002878:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000287a:	ee f8 ff d0 	ld.w	r8,r7[-48]
8000287e:	70 09       	ld.w	r9,r8[0x0]
80002880:	ee f8 ff d4 	ld.w	r8,r7[-44]
80002884:	10 09       	add	r9,r8
80002886:	ee f8 ff d0 	ld.w	r8,r7[-48]
8000288a:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
8000288c:	ee f9 ff d0 	ld.w	r9,r7[-48]
80002890:	30 08       	mov	r8,0
80002892:	f3 68 00 08 	st.b	r9[8],r8
80002896:	ee c8 01 08 	sub	r8,r7,264
8000289a:	ef 48 ff d8 	st.w	r7[-40],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000289e:	e1 b8 00 42 	mfsr	r8,0x108
800028a2:	ef 48 ff dc 	st.w	r7[-36],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
800028a6:	ee f8 ff d8 	ld.w	r8,r7[-40]
800028aa:	f1 39 00 08 	ld.ub	r9,r8[8]
800028ae:	30 28       	mov	r8,2
800028b0:	f0 09 18 00 	cp.b	r9,r8
800028b4:	c0 31       	brne	800028ba <dip204_init+0x8b2>
    return false;
800028b6:	30 08       	mov	r8,0
800028b8:	c4 38       	rjmp	8000293e <dip204_init+0x936>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
800028ba:	ee f8 ff d8 	ld.w	r8,r7[-40]
800028be:	f1 39 00 08 	ld.ub	r9,r8[8]
800028c2:	30 18       	mov	r8,1
800028c4:	f0 09 18 00 	cp.b	r9,r8
800028c8:	c0 31       	brne	800028ce <dip204_init+0x8c6>
    return true;
800028ca:	30 18       	mov	r8,1
800028cc:	c3 98       	rjmp	8000293e <dip204_init+0x936>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800028ce:	ee f8 ff d8 	ld.w	r8,r7[-40]
800028d2:	70 09       	ld.w	r9,r8[0x0]
800028d4:	ee f8 ff d8 	ld.w	r8,r7[-40]
800028d8:	70 18       	ld.w	r8,r8[0x4]
800028da:	10 39       	cp.w	r9,r8
800028dc:	e0 88 00 1a 	brls	80002910 <dip204_init+0x908>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800028e0:	ee f8 ff d8 	ld.w	r8,r7[-40]
800028e4:	70 08       	ld.w	r8,r8[0x0]
800028e6:	ee f9 ff dc 	ld.w	r9,r7[-36]
800028ea:	10 39       	cp.w	r9,r8
800028ec:	c1 02       	brcc	8000290c <dip204_init+0x904>
800028ee:	ee f8 ff d8 	ld.w	r8,r7[-40]
800028f2:	70 18       	ld.w	r8,r8[0x4]
800028f4:	ee f9 ff dc 	ld.w	r9,r7[-36]
800028f8:	10 39       	cp.w	r9,r8
800028fa:	e0 88 00 09 	brls	8000290c <dip204_init+0x904>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
800028fe:	ee f9 ff d8 	ld.w	r9,r7[-40]
80002902:	30 18       	mov	r8,1
80002904:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80002908:	30 18       	mov	r8,1
8000290a:	c1 a8       	rjmp	8000293e <dip204_init+0x936>
    }
    return false;
8000290c:	30 08       	mov	r8,0
8000290e:	c1 88       	rjmp	8000293e <dip204_init+0x936>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002910:	ee f8 ff d8 	ld.w	r8,r7[-40]
80002914:	70 08       	ld.w	r8,r8[0x0]
80002916:	ee f9 ff dc 	ld.w	r9,r7[-36]
8000291a:	10 39       	cp.w	r9,r8
8000291c:	c0 93       	brcs	8000292e <dip204_init+0x926>
8000291e:	ee f8 ff d8 	ld.w	r8,r7[-40]
80002922:	70 18       	ld.w	r8,r8[0x4]
80002924:	ee f9 ff dc 	ld.w	r9,r7[-36]
80002928:	10 39       	cp.w	r9,r8
8000292a:	e0 88 00 09 	brls	8000293c <dip204_init+0x934>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
8000292e:	ee f9 ff d8 	ld.w	r9,r7[-40]
80002932:	30 18       	mov	r8,1
80002934:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80002938:	30 18       	mov	r8,1
8000293a:	c0 28       	rjmp	8000293e <dip204_init+0x936>
    }
    return false;
8000293c:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
8000293e:	58 08       	cp.w	r8,0
80002940:	ca b0       	breq	80002896 <dip204_init+0x88e>
  // Wait for command execution
  delay_ms(5);
  // Send "Entry Mode Set Command: Increment Mode, Entire Shift off"
  dip204_write_byte(0x06);
80002942:	30 6c       	mov	r12,6
80002944:	f0 1f 00 68 	mcall	80002ae4 <dip204_init+0xadc>
80002948:	30 18       	mov	r8,1
8000294a:	ef 48 ff e4 	st.w	r7[-28],r8
8000294e:	e0 68 1b 00 	mov	r8,6912
80002952:	ea 18 00 b7 	orh	r8,0xb7
80002956:	ef 48 ff e0 	st.w	r7[-32],r8
8000295a:	ee f8 ff e4 	ld.w	r8,r7[-28]
8000295e:	ef 48 ff ec 	st.w	r7[-20],r8
80002962:	ee f8 ff e0 	ld.w	r8,r7[-32]
80002966:	ef 48 ff e8 	st.w	r7[-24],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
8000296a:	ee fa ff ec 	ld.w	r10,r7[-20]
8000296e:	ef 4a fe b0 	st.w	r7[-336],r10
80002972:	30 09       	mov	r9,0
80002974:	ef 49 fe ac 	st.w	r7[-340],r9
80002978:	ee f8 ff e8 	ld.w	r8,r7[-24]
8000297c:	ef 48 fe a8 	st.w	r7[-344],r8
80002980:	30 0c       	mov	r12,0
80002982:	ef 4c fe a4 	st.w	r7[-348],r12
80002986:	ee fa fe ac 	ld.w	r10,r7[-340]
8000298a:	ee fb fe a8 	ld.w	r11,r7[-344]
8000298e:	b7 3a       	mul	r10,r11
80002990:	ee f8 fe a4 	ld.w	r8,r7[-348]
80002994:	ee f9 fe b0 	ld.w	r9,r7[-336]
80002998:	b3 38       	mul	r8,r9
8000299a:	10 0a       	add	r10,r8
8000299c:	ee fc fe b0 	ld.w	r12,r7[-336]
800029a0:	ee fb fe a8 	ld.w	r11,r7[-344]
800029a4:	f8 0b 06 48 	mulu.d	r8,r12,r11
800029a8:	12 0a       	add	r10,r9
800029aa:	14 99       	mov	r9,r10
800029ac:	e0 6a 03 e7 	mov	r10,999
800029b0:	30 0b       	mov	r11,0
800029b2:	f0 0a 00 0a 	add	r10,r8,r10
800029b6:	f2 0b 00 4b 	adc	r11,r9,r11
800029ba:	e0 68 03 e8 	mov	r8,1000
800029be:	30 09       	mov	r9,0
800029c0:	f0 1f 00 47 	mcall	80002adc <dip204_init+0xad4>
800029c4:	14 98       	mov	r8,r10
800029c6:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
800029c8:	ef 48 ff f4 	st.w	r7[-12],r8
800029cc:	ee c8 00 fc 	sub	r8,r7,252
800029d0:	ef 48 ff f0 	st.w	r7[-16],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800029d4:	e1 b8 00 42 	mfsr	r8,0x108
800029d8:	10 99       	mov	r9,r8
800029da:	ee f8 ff f0 	ld.w	r8,r7[-16]
800029de:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800029e0:	ee f8 ff f0 	ld.w	r8,r7[-16]
800029e4:	70 09       	ld.w	r9,r8[0x0]
800029e6:	ee f8 ff f4 	ld.w	r8,r7[-12]
800029ea:	10 09       	add	r9,r8
800029ec:	ee f8 ff f0 	ld.w	r8,r7[-16]
800029f0:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
800029f2:	ee f9 ff f0 	ld.w	r9,r7[-16]
800029f6:	30 08       	mov	r8,0
800029f8:	f3 68 00 08 	st.b	r9[8],r8
800029fc:	ee c8 00 fc 	sub	r8,r7,252
80002a00:	ef 48 ff f8 	st.w	r7[-8],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002a04:	e1 b8 00 42 	mfsr	r8,0x108
80002a08:	ef 48 ff fc 	st.w	r7[-4],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80002a0c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002a10:	f1 39 00 08 	ld.ub	r9,r8[8]
80002a14:	30 28       	mov	r8,2
80002a16:	f0 09 18 00 	cp.b	r9,r8
80002a1a:	c0 31       	brne	80002a20 <dip204_init+0xa18>
    return false;
80002a1c:	30 08       	mov	r8,0
80002a1e:	c4 38       	rjmp	80002aa4 <dip204_init+0xa9c>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80002a20:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002a24:	f1 39 00 08 	ld.ub	r9,r8[8]
80002a28:	30 18       	mov	r8,1
80002a2a:	f0 09 18 00 	cp.b	r9,r8
80002a2e:	c0 31       	brne	80002a34 <dip204_init+0xa2c>
    return true;
80002a30:	30 18       	mov	r8,1
80002a32:	c3 98       	rjmp	80002aa4 <dip204_init+0xa9c>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002a34:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002a38:	70 09       	ld.w	r9,r8[0x0]
80002a3a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002a3e:	70 18       	ld.w	r8,r8[0x4]
80002a40:	10 39       	cp.w	r9,r8
80002a42:	e0 88 00 1a 	brls	80002a76 <dip204_init+0xa6e>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002a46:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002a4a:	70 08       	ld.w	r8,r8[0x0]
80002a4c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002a50:	10 39       	cp.w	r9,r8
80002a52:	c1 02       	brcc	80002a72 <dip204_init+0xa6a>
80002a54:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002a58:	70 18       	ld.w	r8,r8[0x4]
80002a5a:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002a5e:	10 39       	cp.w	r9,r8
80002a60:	e0 88 00 09 	brls	80002a72 <dip204_init+0xa6a>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80002a64:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002a68:	30 18       	mov	r8,1
80002a6a:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80002a6e:	30 18       	mov	r8,1
80002a70:	c1 a8       	rjmp	80002aa4 <dip204_init+0xa9c>
    }
    return false;
80002a72:	30 08       	mov	r8,0
80002a74:	c1 88       	rjmp	80002aa4 <dip204_init+0xa9c>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002a76:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002a7a:	70 08       	ld.w	r8,r8[0x0]
80002a7c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002a80:	10 39       	cp.w	r9,r8
80002a82:	c0 93       	brcs	80002a94 <dip204_init+0xa8c>
80002a84:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002a88:	70 18       	ld.w	r8,r8[0x4]
80002a8a:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002a8e:	10 39       	cp.w	r9,r8
80002a90:	e0 88 00 09 	brls	80002aa2 <dip204_init+0xa9a>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80002a94:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002a98:	30 18       	mov	r8,1
80002a9a:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80002a9e:	30 18       	mov	r8,1
80002aa0:	c0 28       	rjmp	80002aa4 <dip204_init+0xa9c>
    }
    return false;
80002aa2:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
80002aa4:	58 08       	cp.w	r8,0
80002aa6:	ca b0       	breq	800029fc <dip204_init+0x9f4>
  // Wait for command execution
  delay_ms(1);
  dip204_wait_busy();
80002aa8:	f0 1f 00 10 	mcall	80002ae8 <dip204_init+0xae0>
  // unselect chip
  dip204_unselect();
80002aac:	f0 1f 00 10 	mcall	80002aec <dip204_init+0xae4>
}
80002ab0:	29 5d       	sub	sp,-428
80002ab2:	e3 cd 80 8f 	ldm	sp++,r0-r3,r7,pc
80002ab6:	00 00       	add	r0,r0
80002ab8:	00 00       	add	r0,r0
80002aba:	00 08       	add	r8,r0
80002abc:	80 00       	ld.sh	r0,r0[0x0]
80002abe:	38 54       	mov	r4,-123
80002ac0:	80 00       	ld.sh	r0,r0[0x0]
80002ac2:	30 f4       	mov	r4,15
80002ac4:	00 00       	add	r0,r0
80002ac6:	05 20       	ld.uh	r0,r2++
80002ac8:	00 00       	add	r0,r0
80002aca:	05 24       	ld.uh	r4,r2++
80002acc:	80 00       	ld.sh	r0,r0[0x0]
80002ace:	31 88       	mov	r8,24
80002ad0:	80 00       	ld.sh	r0,r0[0x0]
80002ad2:	32 10       	mov	r0,33
80002ad4:	80 00       	ld.sh	r0,r0[0x0]
80002ad6:	3b 7a       	mov	r10,-73
80002ad8:	80 00       	ld.sh	r0,r0[0x0]
80002ada:	3b 12       	mov	r2,-79
80002adc:	80 00       	ld.sh	r0,r0[0x0]
80002ade:	45 76       	lddsp	r6,sp[0x15c]
80002ae0:	80 00       	ld.sh	r0,r0[0x0]
80002ae2:	2d 94       	sub	r4,-39
80002ae4:	80 00       	ld.sh	r0,r0[0x0]
80002ae6:	2d c4       	sub	r4,-36
80002ae8:	80 00       	ld.sh	r0,r0[0x0]
80002aea:	2e a8       	sub	r8,-22
80002aec:	80 00       	ld.sh	r0,r0[0x0]
80002aee:	2d ac       	sub	r12,-38

80002af0 <dip204_hide_cursor>:
  dip204_unselect();
}


void dip204_hide_cursor(void)
{
80002af0:	eb cd 40 80 	pushm	r7,lr
80002af4:	1a 97       	mov	r7,sp
  /* select the LCD chip */
  dip204_select();
80002af6:	f0 1f 00 08 	mcall	80002b14 <dip204_hide_cursor+0x24>
  /* Send Command Start Byte */
  dip204_write_byte(DIP204_WRITE_COMMAND);
80002afa:	e0 6c 00 f8 	mov	r12,248
80002afe:	f0 1f 00 07 	mcall	80002b18 <dip204_hide_cursor+0x28>
  /* Send "Display On Command: Display On, Cursor On, Blink On" */
  dip204_write_byte(0x0C);
80002b02:	30 cc       	mov	r12,12
80002b04:	f0 1f 00 05 	mcall	80002b18 <dip204_hide_cursor+0x28>
  dip204_wait_busy();
80002b08:	f0 1f 00 05 	mcall	80002b1c <dip204_hide_cursor+0x2c>
  /* unselect chip */
  dip204_unselect();
80002b0c:	f0 1f 00 05 	mcall	80002b20 <dip204_hide_cursor+0x30>
}
80002b10:	e3 cd 80 80 	ldm	sp++,r7,pc
80002b14:	80 00       	ld.sh	r0,r0[0x0]
80002b16:	2d 94       	sub	r4,-39
80002b18:	80 00       	ld.sh	r0,r0[0x0]
80002b1a:	2d c4       	sub	r4,-36
80002b1c:	80 00       	ld.sh	r0,r0[0x0]
80002b1e:	2e a8       	sub	r8,-22
80002b20:	80 00       	ld.sh	r0,r0[0x0]
80002b22:	2d ac       	sub	r12,-38

80002b24 <dip204_set_cursor_position>:
  dip204_set_cursor_position(column, line);
}


void dip204_set_cursor_position(unsigned char column, unsigned char line)
{
80002b24:	eb cd 40 80 	pushm	r7,lr
80002b28:	1a 97       	mov	r7,sp
80002b2a:	20 3d       	sub	sp,12
80002b2c:	18 99       	mov	r9,r12
80002b2e:	16 98       	mov	r8,r11
80002b30:	ef 69 ff f8 	st.b	r7[-8],r9
80002b34:	ef 68 ff f4 	st.b	r7[-12],r8
  unsigned char address = 0;
80002b38:	30 08       	mov	r8,0
80002b3a:	ef 68 ff ff 	st.b	r7[-1],r8

  dip204_select();
80002b3e:	f0 1f 00 18 	mcall	80002b9c <dip204_set_cursor_position+0x78>
  if ((column <= 20) && (line <= 4))
80002b42:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80002b46:	31 48       	mov	r8,20
80002b48:	f0 09 18 00 	cp.b	r9,r8
80002b4c:	e0 8b 00 17 	brhi	80002b7a <dip204_set_cursor_position+0x56>
80002b50:	ef 39 ff f4 	ld.ub	r9,r7[-12]
80002b54:	30 48       	mov	r8,4
80002b56:	f0 09 18 00 	cp.b	r9,r8
80002b5a:	e0 8b 00 10 	brhi	80002b7a <dip204_set_cursor_position+0x56>
  {
    /* Calculate DDRAM address from line and row values */
    address = ( (line-1) * 32 ) + ( column-1 ) + 128;
80002b5e:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80002b62:	20 18       	sub	r8,1
80002b64:	5c 58       	castu.b	r8
80002b66:	a5 78       	lsl	r8,0x5
80002b68:	5c 58       	castu.b	r8
80002b6a:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80002b6e:	f2 08 00 08 	add	r8,r9,r8
80002b72:	5c 58       	castu.b	r8
80002b74:	28 18       	sub	r8,-127
80002b76:	ef 68 ff ff 	st.b	r7[-1],r8
  }
  /* Send Command Start Byte */
  dip204_write_byte(DIP204_WRITE_COMMAND);
80002b7a:	e0 6c 00 f8 	mov	r12,248
80002b7e:	f0 1f 00 09 	mcall	80002ba0 <dip204_set_cursor_position+0x7c>
  /* Send Address lower Nibble */
  dip204_write_byte(address);
80002b82:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80002b86:	10 9c       	mov	r12,r8
80002b88:	f0 1f 00 06 	mcall	80002ba0 <dip204_set_cursor_position+0x7c>
  dip204_wait_busy();
80002b8c:	f0 1f 00 06 	mcall	80002ba4 <dip204_set_cursor_position+0x80>
  dip204_unselect();
80002b90:	f0 1f 00 06 	mcall	80002ba8 <dip204_set_cursor_position+0x84>
}
80002b94:	2f dd       	sub	sp,-12
80002b96:	e3 cd 80 80 	ldm	sp++,r7,pc
80002b9a:	00 00       	add	r0,r0
80002b9c:	80 00       	ld.sh	r0,r0[0x0]
80002b9e:	2d 94       	sub	r4,-39
80002ba0:	80 00       	ld.sh	r0,r0[0x0]
80002ba2:	2d c4       	sub	r4,-36
80002ba4:	80 00       	ld.sh	r0,r0[0x0]
80002ba6:	2e a8       	sub	r8,-22
80002ba8:	80 00       	ld.sh	r0,r0[0x0]
80002baa:	2d ac       	sub	r12,-38

80002bac <dip204_clear_display>:


void dip204_clear_display(void)
{
80002bac:	eb cd 40 8f 	pushm	r0-r3,r7,lr
80002bb0:	1a 97       	mov	r7,sp
80002bb2:	20 bd       	sub	sp,44
  dip204_select();
80002bb4:	f0 1f 00 57 	mcall	80002d10 <dip204_clear_display+0x164>
  /* Send Command Start Byte */
  dip204_write_byte(DIP204_WRITE_COMMAND);
80002bb8:	e0 6c 00 f8 	mov	r12,248
80002bbc:	f0 1f 00 56 	mcall	80002d14 <dip204_clear_display+0x168>
  /* Send Display Clear Command */
  dip204_write_byte(0x01);
80002bc0:	30 1c       	mov	r12,1
80002bc2:	f0 1f 00 55 	mcall	80002d14 <dip204_clear_display+0x168>
80002bc6:	30 48       	mov	r8,4
80002bc8:	ef 48 ff e4 	st.w	r7[-28],r8
80002bcc:	e0 68 1b 00 	mov	r8,6912
80002bd0:	ea 18 00 b7 	orh	r8,0xb7
80002bd4:	ef 48 ff e0 	st.w	r7[-32],r8
80002bd8:	ee f8 ff e4 	ld.w	r8,r7[-28]
80002bdc:	ef 48 ff ec 	st.w	r7[-20],r8
80002be0:	ee f8 ff e0 	ld.w	r8,r7[-32]
80002be4:	ef 48 ff e8 	st.w	r7[-24],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
80002be8:	ee f0 ff ec 	ld.w	r0,r7[-20]
80002bec:	30 01       	mov	r1,0
80002bee:	ee f2 ff e8 	ld.w	r2,r7[-24]
80002bf2:	30 03       	mov	r3,0
80002bf4:	e2 02 02 4a 	mul	r10,r1,r2
80002bf8:	e6 00 02 48 	mul	r8,r3,r0
80002bfc:	10 0a       	add	r10,r8
80002bfe:	e0 02 06 48 	mulu.d	r8,r0,r2
80002c02:	12 0a       	add	r10,r9
80002c04:	14 99       	mov	r9,r10
80002c06:	e0 6a 03 e7 	mov	r10,999
80002c0a:	30 0b       	mov	r11,0
80002c0c:	f0 0a 00 0a 	add	r10,r8,r10
80002c10:	f2 0b 00 4b 	adc	r11,r9,r11
80002c14:	e0 68 03 e8 	mov	r8,1000
80002c18:	30 09       	mov	r9,0
80002c1a:	f0 1f 00 40 	mcall	80002d18 <dip204_clear_display+0x16c>
80002c1e:	14 98       	mov	r8,r10
80002c20:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
80002c22:	ef 48 ff f4 	st.w	r7[-12],r8
80002c26:	ee c8 00 2c 	sub	r8,r7,44
80002c2a:	ef 48 ff f0 	st.w	r7[-16],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002c2e:	e1 b8 00 42 	mfsr	r8,0x108
80002c32:	10 99       	mov	r9,r8
80002c34:	ee f8 ff f0 	ld.w	r8,r7[-16]
80002c38:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002c3a:	ee f8 ff f0 	ld.w	r8,r7[-16]
80002c3e:	70 09       	ld.w	r9,r8[0x0]
80002c40:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002c44:	10 09       	add	r9,r8
80002c46:	ee f8 ff f0 	ld.w	r8,r7[-16]
80002c4a:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80002c4c:	ee f9 ff f0 	ld.w	r9,r7[-16]
80002c50:	30 08       	mov	r8,0
80002c52:	f3 68 00 08 	st.b	r9[8],r8
80002c56:	ee c8 00 2c 	sub	r8,r7,44
80002c5a:	ef 48 ff f8 	st.w	r7[-8],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002c5e:	e1 b8 00 42 	mfsr	r8,0x108
80002c62:	ef 48 ff fc 	st.w	r7[-4],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80002c66:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002c6a:	f1 39 00 08 	ld.ub	r9,r8[8]
80002c6e:	30 28       	mov	r8,2
80002c70:	f0 09 18 00 	cp.b	r9,r8
80002c74:	c0 31       	brne	80002c7a <dip204_clear_display+0xce>
    return false;
80002c76:	30 08       	mov	r8,0
80002c78:	c4 38       	rjmp	80002cfe <dip204_clear_display+0x152>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80002c7a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002c7e:	f1 39 00 08 	ld.ub	r9,r8[8]
80002c82:	30 18       	mov	r8,1
80002c84:	f0 09 18 00 	cp.b	r9,r8
80002c88:	c0 31       	brne	80002c8e <dip204_clear_display+0xe2>
    return true;
80002c8a:	30 18       	mov	r8,1
80002c8c:	c3 98       	rjmp	80002cfe <dip204_clear_display+0x152>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002c8e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002c92:	70 09       	ld.w	r9,r8[0x0]
80002c94:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002c98:	70 18       	ld.w	r8,r8[0x4]
80002c9a:	10 39       	cp.w	r9,r8
80002c9c:	e0 88 00 1a 	brls	80002cd0 <dip204_clear_display+0x124>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002ca0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002ca4:	70 08       	ld.w	r8,r8[0x0]
80002ca6:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002caa:	10 39       	cp.w	r9,r8
80002cac:	c1 02       	brcc	80002ccc <dip204_clear_display+0x120>
80002cae:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002cb2:	70 18       	ld.w	r8,r8[0x4]
80002cb4:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002cb8:	10 39       	cp.w	r9,r8
80002cba:	e0 88 00 09 	brls	80002ccc <dip204_clear_display+0x120>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80002cbe:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002cc2:	30 18       	mov	r8,1
80002cc4:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80002cc8:	30 18       	mov	r8,1
80002cca:	c1 a8       	rjmp	80002cfe <dip204_clear_display+0x152>
    }
    return false;
80002ccc:	30 08       	mov	r8,0
80002cce:	c1 88       	rjmp	80002cfe <dip204_clear_display+0x152>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002cd0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002cd4:	70 08       	ld.w	r8,r8[0x0]
80002cd6:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002cda:	10 39       	cp.w	r9,r8
80002cdc:	c0 93       	brcs	80002cee <dip204_clear_display+0x142>
80002cde:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002ce2:	70 18       	ld.w	r8,r8[0x4]
80002ce4:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002ce8:	10 39       	cp.w	r9,r8
80002cea:	e0 88 00 09 	brls	80002cfc <dip204_clear_display+0x150>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80002cee:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002cf2:	30 18       	mov	r8,1
80002cf4:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80002cf8:	30 18       	mov	r8,1
80002cfa:	c0 28       	rjmp	80002cfe <dip204_clear_display+0x152>
    }
    return false;
80002cfc:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
80002cfe:	58 08       	cp.w	r8,0
80002d00:	ca b0       	breq	80002c56 <dip204_clear_display+0xaa>
  /* Wait for command execution */
  delay_ms(4);
  dip204_wait_busy();
80002d02:	f0 1f 00 07 	mcall	80002d1c <dip204_clear_display+0x170>
  dip204_unselect();
80002d06:	f0 1f 00 07 	mcall	80002d20 <dip204_clear_display+0x174>
}
80002d0a:	2f 5d       	sub	sp,-44
80002d0c:	e3 cd 80 8f 	ldm	sp++,r0-r3,r7,pc
80002d10:	80 00       	ld.sh	r0,r0[0x0]
80002d12:	2d 94       	sub	r4,-39
80002d14:	80 00       	ld.sh	r0,r0[0x0]
80002d16:	2d c4       	sub	r4,-36
80002d18:	80 00       	ld.sh	r0,r0[0x0]
80002d1a:	45 76       	lddsp	r6,sp[0x15c]
80002d1c:	80 00       	ld.sh	r0,r0[0x0]
80002d1e:	2e a8       	sub	r8,-22
80002d20:	80 00       	ld.sh	r0,r0[0x0]
80002d22:	2d ac       	sub	r12,-38

80002d24 <dip204_write_string>:


void dip204_write_string(const char *string)
{
80002d24:	eb cd 40 80 	pushm	r7,lr
80002d28:	1a 97       	mov	r7,sp
80002d2a:	20 2d       	sub	sp,8
80002d2c:	ef 4c ff f8 	st.w	r7[-8],r12
  unsigned char i=0;
80002d30:	30 08       	mov	r8,0
80002d32:	ef 68 ff ff 	st.b	r7[-1],r8

  dip204_select();
80002d36:	f0 1f 00 14 	mcall	80002d84 <dip204_write_string+0x60>
  /* for all chars in string */
  while(string[i]!=0)
80002d3a:	c1 68       	rjmp	80002d66 <dip204_write_string+0x42>
  {
    /* Send Write Data Start Byte */
    dip204_write_byte(DIP204_WRITE_DATA);
80002d3c:	e0 6c 00 fa 	mov	r12,250
80002d40:	f0 1f 00 12 	mcall	80002d88 <dip204_write_string+0x64>
    /* Send byte */
    dip204_write_byte(string[i]);
80002d44:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80002d48:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002d4c:	f2 08 00 08 	add	r8,r9,r8
80002d50:	11 88       	ld.ub	r8,r8[0x0]
80002d52:	10 9c       	mov	r12,r8
80002d54:	f0 1f 00 0d 	mcall	80002d88 <dip204_write_string+0x64>
    /* go to next char */
    i++;
80002d58:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80002d5c:	2f f8       	sub	r8,-1
80002d5e:	ef 68 ff ff 	st.b	r7[-1],r8
    dip204_wait_busy();
80002d62:	f0 1f 00 0b 	mcall	80002d8c <dip204_write_string+0x68>
{
  unsigned char i=0;

  dip204_select();
  /* for all chars in string */
  while(string[i]!=0)
80002d66:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80002d6a:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002d6e:	f2 08 00 08 	add	r8,r9,r8
80002d72:	11 88       	ld.ub	r8,r8[0x0]
80002d74:	58 08       	cp.w	r8,0
80002d76:	ce 31       	brne	80002d3c <dip204_write_string+0x18>
    dip204_write_byte(string[i]);
    /* go to next char */
    i++;
    dip204_wait_busy();
  }
  dip204_unselect();
80002d78:	f0 1f 00 06 	mcall	80002d90 <dip204_write_string+0x6c>
}
80002d7c:	2f ed       	sub	sp,-8
80002d7e:	e3 cd 80 80 	ldm	sp++,r7,pc
80002d82:	00 00       	add	r0,r0
80002d84:	80 00       	ld.sh	r0,r0[0x0]
80002d86:	2d 94       	sub	r4,-39
80002d88:	80 00       	ld.sh	r0,r0[0x0]
80002d8a:	2d c4       	sub	r4,-36
80002d8c:	80 00       	ld.sh	r0,r0[0x0]
80002d8e:	2e a8       	sub	r8,-22
80002d90:	80 00       	ld.sh	r0,r0[0x0]
80002d92:	2d ac       	sub	r12,-38

80002d94 <dip204_select>:

/*! \brief function to select the LCD
 *
 */
static void dip204_select(void)
{
80002d94:	eb cd 40 80 	pushm	r7,lr
80002d98:	1a 97       	mov	r7,sp
  spi_selectChip(DIP204_SPI, DIP204_SPI_NPCS);
80002d9a:	30 2b       	mov	r11,2
80002d9c:	fe 7c 28 00 	mov	r12,-55296
80002da0:	f0 1f 00 02 	mcall	80002da8 <dip204_select+0x14>
}
80002da4:	e3 cd 80 80 	ldm	sp++,r7,pc
80002da8:	80 00       	ld.sh	r0,r0[0x0]
80002daa:	33 b6       	mov	r6,59

80002dac <dip204_unselect>:

/*! \brief function to unselect the LCD
 *
 */
static void dip204_unselect(void)
{
80002dac:	eb cd 40 80 	pushm	r7,lr
80002db0:	1a 97       	mov	r7,sp
#ifdef _ASSERT_ENABLE_
  spi_status =
#endif
  spi_unselectChip(DIP204_SPI, DIP204_SPI_NPCS);
80002db2:	30 2b       	mov	r11,2
80002db4:	fe 7c 28 00 	mov	r12,-55296
80002db8:	f0 1f 00 02 	mcall	80002dc0 <dip204_unselect+0x14>
  Assert( SPI_OK==spi_status );
}
80002dbc:	e3 cd 80 80 	ldm	sp++,r7,pc
80002dc0:	80 00       	ld.sh	r0,r0[0x0]
80002dc2:	34 4e       	mov	lr,68

80002dc4 <dip204_write_byte>:
 *
 *  \param  byte  Input. byte to write to the LCD (D7 .. D0)
 *
 */
static void dip204_write_byte(unsigned char byte)
{
80002dc4:	eb cd 40 80 	pushm	r7,lr
80002dc8:	1a 97       	mov	r7,sp
80002dca:	20 3d       	sub	sp,12
80002dcc:	18 98       	mov	r8,r12
80002dce:	ef 68 ff f4 	st.b	r7[-12],r8
  unsigned char reverse;

  switch (byte)
80002dd2:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80002dd6:	f0 c8 00 f8 	sub	r8,r8,248
80002dda:	58 68       	cp.w	r8,6
80002ddc:	e0 8b 00 10 	brhi	80002dfc <dip204_write_byte+0x38>
80002de0:	30 19       	mov	r9,1
80002de2:	f2 08 09 48 	lsl	r8,r9,r8
80002de6:	e2 18 00 55 	andl	r8,0x55,COH
80002dea:	c0 90       	breq	80002dfc <dip204_write_byte+0x38>
    {
      /* send D7 to D0 */
#ifdef _ASSERT_ENABLE_
      spi_status =
#endif
      spi_write(DIP204_SPI, byte);
80002dec:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80002df0:	10 9b       	mov	r11,r8
80002df2:	fe 7c 28 00 	mov	r12,-55296
80002df6:	f0 1f 00 15 	mcall	80002e48 <dip204_write_byte+0x84>
      Assert( SPI_OK==spi_status );
      break;
80002dfa:	c2 48       	rjmp	80002e42 <dip204_write_byte+0x7e>
    }
    /* LSB first for all other data */
    default:
    {
      /* reverse byte */
      reverse = bit_reverse8(byte);
80002dfc:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80002e00:	ef 48 ff fc 	st.w	r7[-4],r8
80002e04:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002e08:	5c 98       	brev	r8
80002e0a:	ef 48 ff fc 	st.w	r7[-4],r8
80002e0e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002e12:	b9 88       	lsr	r8,0x18
80002e14:	ef 68 ff fb 	st.b	r7[-5],r8
      /* send D0 to D3 */
#ifdef _ASSERT_ENABLE_
      spi_status =
#endif
      spi_write(DIP204_SPI, (reverse & 0xF0));
80002e18:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80002e1c:	e2 18 00 f0 	andl	r8,0xf0,COH
80002e20:	10 9b       	mov	r11,r8
80002e22:	fe 7c 28 00 	mov	r12,-55296
80002e26:	f0 1f 00 09 	mcall	80002e48 <dip204_write_byte+0x84>
      Assert( SPI_OK==spi_status );
      /* send D4 to D7 */
#ifdef _ASSERT_ENABLE_
      spi_status =
#endif
      spi_write(DIP204_SPI, ((reverse << 4) & 0xF0));
80002e2a:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80002e2e:	a5 68       	lsl	r8,0x4
80002e30:	5c 88       	casts.h	r8
80002e32:	5c 78       	castu.h	r8
80002e34:	f1 d8 c0 08 	bfextu	r8,r8,0x0,0x8
80002e38:	10 9b       	mov	r11,r8
80002e3a:	fe 7c 28 00 	mov	r12,-55296
80002e3e:	f0 1f 00 03 	mcall	80002e48 <dip204_write_byte+0x84>
      Assert( SPI_OK==spi_status );
      break;
    }
  }
}
80002e42:	2f dd       	sub	sp,-12
80002e44:	e3 cd 80 80 	ldm	sp++,r7,pc
80002e48:	80 00       	ld.sh	r0,r0[0x0]
80002e4a:	36 56       	mov	r6,101

80002e4c <dip204_read_byte>:
 *
 *  \param  byte  Input. byte read from the LCD (D7 .. D0)
 *
 */
static void dip204_read_byte(unsigned char *byte)
{
80002e4c:	eb cd 40 80 	pushm	r7,lr
80002e50:	1a 97       	mov	r7,sp
80002e52:	20 3d       	sub	sp,12
80002e54:	ef 4c ff f4 	st.w	r7[-12],r12
  unsigned short reverse = 0x00;
80002e58:	30 08       	mov	r8,0
80002e5a:	ef 58 ff fa 	st.h	r7[-6],r8

  /* dummy write */
#ifdef _ASSERT_ENABLE_
  spi_status =
#endif
  spi_write(DIP204_SPI, 0x00);
80002e5e:	30 0b       	mov	r11,0
80002e60:	fe 7c 28 00 	mov	r12,-55296
80002e64:	f0 1f 00 0f 	mcall	80002ea0 <dip204_read_byte+0x54>
  Assert( SPI_OK==spi_status );
  /* read RSR register */
#ifdef _ASSERT_ENABLE_
  spi_status =
#endif
  spi_read(DIP204_SPI, &reverse);
80002e68:	ee c8 00 06 	sub	r8,r7,6
80002e6c:	10 9b       	mov	r11,r8
80002e6e:	fe 7c 28 00 	mov	r12,-55296
80002e72:	f0 1f 00 0d 	mcall	80002ea4 <dip204_read_byte+0x58>
  Assert( SPI_OK==spi_status );
  /* Revert received byte (issued LSB first by the LCD) */
  *byte = bit_reverse8(reverse);
80002e76:	ef 08 ff fa 	ld.sh	r8,r7[-6]
80002e7a:	5c 58       	castu.b	r8
80002e7c:	ef 48 ff fc 	st.w	r7[-4],r8
80002e80:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002e84:	5c 98       	brev	r8
80002e86:	ef 48 ff fc 	st.w	r7[-4],r8
80002e8a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002e8e:	b9 88       	lsr	r8,0x18
80002e90:	5c 58       	castu.b	r8
80002e92:	ee f9 ff f4 	ld.w	r9,r7[-12]
80002e96:	b2 88       	st.b	r9[0x0],r8
}
80002e98:	2f dd       	sub	sp,-12
80002e9a:	e3 cd 80 80 	ldm	sp++,r7,pc
80002e9e:	00 00       	add	r0,r0
80002ea0:	80 00       	ld.sh	r0,r0[0x0]
80002ea2:	36 56       	mov	r6,101
80002ea4:	80 00       	ld.sh	r0,r0[0x0]
80002ea6:	36 ae       	mov	lr,106

80002ea8 <dip204_wait_busy>:

/*! \brief function to wait for LCD becomes not busy
 *
 */
static void dip204_wait_busy(void)
{
80002ea8:	eb cd 40 80 	pushm	r7,lr
80002eac:	1a 97       	mov	r7,sp
80002eae:	20 1d       	sub	sp,4
  unsigned char status = 0x00;
80002eb0:	30 08       	mov	r8,0
80002eb2:	ef 68 ff ff 	st.b	r7[-1],r8

  /* send read command to LCD */
  dip204_write_byte(DIP204_READ_COMMAND);
80002eb6:	e0 6c 00 fc 	mov	r12,252
80002eba:	f0 1f 00 09 	mcall	80002edc <dip204_wait_busy+0x34>
  /* read next byte */
  do {
  dip204_read_byte(&status);
80002ebe:	ee c8 00 01 	sub	r8,r7,1
80002ec2:	10 9c       	mov	r12,r8
80002ec4:	f0 1f 00 07 	mcall	80002ee0 <dip204_wait_busy+0x38>
  /* keep D7 to know status */
  }while (status & 0x80);
80002ec8:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80002ecc:	10 99       	mov	r9,r8
80002ece:	30 08       	mov	r8,0
80002ed0:	f0 09 18 00 	cp.b	r9,r8
80002ed4:	cf 55       	brlt	80002ebe <dip204_wait_busy+0x16>
}
80002ed6:	2f fd       	sub	sp,-4
80002ed8:	e3 cd 80 80 	ldm	sp++,r7,pc
80002edc:	80 00       	ld.sh	r0,r0[0x0]
80002ede:	2d c4       	sub	r4,-36
80002ee0:	80 00       	ld.sh	r0,r0[0x0]
80002ee2:	2e 4c       	sub	r12,-28

80002ee4 <pm_set_osc0_mode>:
 *
 * \param pm Base address of the Power Manager (i.e. &AVR32_PM).
 * \param mode Oscillator 0 mode (i.e. AVR32_PM_OSCCTRL0_MODE_x).
 */
static void pm_set_osc0_mode(volatile avr32_pm_t *pm, unsigned int mode)
{
80002ee4:	eb cd 40 80 	pushm	r7,lr
80002ee8:	1a 97       	mov	r7,sp
80002eea:	20 3d       	sub	sp,12
80002eec:	ef 4c ff f8 	st.w	r7[-8],r12
80002ef0:	ef 4b ff f4 	st.w	r7[-12],r11
  // Read
  u_avr32_pm_oscctrl0_t u_avr32_pm_oscctrl0 = {pm->oscctrl0};
80002ef4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002ef8:	70 a8       	ld.w	r8,r8[0x28]
80002efa:	30 09       	mov	r9,0
80002efc:	ef 49 ff fc 	st.w	r7[-4],r9
80002f00:	ef 48 ff fc 	st.w	r7[-4],r8
  // Modify
  u_avr32_pm_oscctrl0.OSCCTRL0.mode = mode;
80002f04:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002f08:	5c 58       	castu.b	r8
80002f0a:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80002f0e:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80002f12:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002f16:	f1 d9 d0 03 	bfins	r8,r9,0x0,0x3
80002f1a:	ef 48 ff fc 	st.w	r7[-4],r8
  // Write
  pm->oscctrl0 = u_avr32_pm_oscctrl0.oscctrl0;
80002f1e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002f22:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002f26:	91 a9       	st.w	r8[0x28],r9
}
80002f28:	2f dd       	sub	sp,-12
80002f2a:	e3 cd 80 80 	ldm	sp++,r7,pc
80002f2e:	d7 03       	nop

80002f30 <pm_enable_osc0_crystal>:
  pm_set_osc0_mode(pm, AVR32_PM_OSCCTRL0_MODE_EXT_CLOCK);
}


void pm_enable_osc0_crystal(volatile avr32_pm_t *pm, unsigned int fosc0)
{
80002f30:	eb cd 40 80 	pushm	r7,lr
80002f34:	1a 97       	mov	r7,sp
80002f36:	20 2d       	sub	sp,8
80002f38:	ef 4c ff fc 	st.w	r7[-4],r12
80002f3c:	ef 4b ff f8 	st.w	r7[-8],r11
  pm_set_osc0_mode(pm, (fosc0 <  900000) ? AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G0 :
80002f40:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002f44:	ec 58 bb 9f 	cp.w	r8,899999
80002f48:	e0 88 00 1a 	brls	80002f7c <pm_enable_osc0_crystal+0x4c>
80002f4c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002f50:	e0 69 c6 bf 	mov	r9,50879
80002f54:	ea 19 00 2d 	orh	r9,0x2d
80002f58:	12 38       	cp.w	r8,r9
80002f5a:	e0 88 00 0f 	brls	80002f78 <pm_enable_osc0_crystal+0x48>
80002f5e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002f62:	e0 69 11 ff 	mov	r9,4607
80002f66:	ea 19 00 7a 	orh	r9,0x7a
80002f6a:	12 38       	cp.w	r8,r9
80002f6c:	e0 8b 00 04 	brhi	80002f74 <pm_enable_osc0_crystal+0x44>
80002f70:	30 68       	mov	r8,6
80002f72:	c0 28       	rjmp	80002f76 <pm_enable_osc0_crystal+0x46>
80002f74:	30 78       	mov	r8,7
80002f76:	c0 28       	rjmp	80002f7a <pm_enable_osc0_crystal+0x4a>
80002f78:	30 58       	mov	r8,5
80002f7a:	c0 28       	rjmp	80002f7e <pm_enable_osc0_crystal+0x4e>
80002f7c:	30 48       	mov	r8,4
80002f7e:	10 9b       	mov	r11,r8
80002f80:	ee fc ff fc 	ld.w	r12,r7[-4]
80002f84:	f0 1f 00 03 	mcall	80002f90 <pm_enable_osc0_crystal+0x60>
                       (fosc0 < 3000000) ? AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G1 :
                       (fosc0 < 8000000) ? AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G2 :
                                           AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G3);
}
80002f88:	2f ed       	sub	sp,-8
80002f8a:	e3 cd 80 80 	ldm	sp++,r7,pc
80002f8e:	00 00       	add	r0,r0
80002f90:	80 00       	ld.sh	r0,r0[0x0]
80002f92:	2e e4       	sub	r4,-18

80002f94 <pm_enable_clk0>:


void pm_enable_clk0(volatile avr32_pm_t *pm, unsigned int startup)
{
80002f94:	eb cd 40 80 	pushm	r7,lr
80002f98:	1a 97       	mov	r7,sp
80002f9a:	20 2d       	sub	sp,8
80002f9c:	ef 4c ff fc 	st.w	r7[-4],r12
80002fa0:	ef 4b ff f8 	st.w	r7[-8],r11
  pm_enable_clk0_no_wait(pm, startup);
80002fa4:	ee fb ff f8 	ld.w	r11,r7[-8]
80002fa8:	ee fc ff fc 	ld.w	r12,r7[-4]
80002fac:	f0 1f 00 05 	mcall	80002fc0 <pm_enable_clk0+0x2c>
  pm_wait_for_clk0_ready(pm);
80002fb0:	ee fc ff fc 	ld.w	r12,r7[-4]
80002fb4:	f0 1f 00 04 	mcall	80002fc4 <pm_enable_clk0+0x30>
}
80002fb8:	2f ed       	sub	sp,-8
80002fba:	e3 cd 80 80 	ldm	sp++,r7,pc
80002fbe:	00 00       	add	r0,r0
80002fc0:	80 00       	ld.sh	r0,r0[0x0]
80002fc2:	2f c8       	sub	r8,-4
80002fc4:	80 00       	ld.sh	r0,r0[0x0]
80002fc6:	30 22       	mov	r2,2

80002fc8 <pm_enable_clk0_no_wait>:
  pm->mcctrl &= ~AVR32_PM_MCCTRL_OSC0EN_MASK;
}


void pm_enable_clk0_no_wait(volatile avr32_pm_t *pm, unsigned int startup)
{
80002fc8:	eb cd 40 80 	pushm	r7,lr
80002fcc:	1a 97       	mov	r7,sp
80002fce:	20 3d       	sub	sp,12
80002fd0:	ef 4c ff f8 	st.w	r7[-8],r12
80002fd4:	ef 4b ff f4 	st.w	r7[-12],r11
  // Read register
  u_avr32_pm_oscctrl0_t u_avr32_pm_oscctrl0 = {pm->oscctrl0};
80002fd8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002fdc:	70 a8       	ld.w	r8,r8[0x28]
80002fde:	30 09       	mov	r9,0
80002fe0:	ef 49 ff fc 	st.w	r7[-4],r9
80002fe4:	ef 48 ff fc 	st.w	r7[-4],r8
  // Modify
  u_avr32_pm_oscctrl0.OSCCTRL0.startup = startup;
80002fe8:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002fec:	5c 58       	castu.b	r8
80002fee:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80002ff2:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80002ff6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002ffa:	f1 d9 d1 03 	bfins	r8,r9,0x8,0x3
80002ffe:	ef 48 ff fc 	st.w	r7[-4],r8
  // Write back
  pm->oscctrl0 = u_avr32_pm_oscctrl0.oscctrl0;
80003002:	ee f9 ff fc 	ld.w	r9,r7[-4]
80003006:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000300a:	91 a9       	st.w	r8[0x28],r9

  pm->mcctrl |= AVR32_PM_MCCTRL_OSC0EN_MASK;
8000300c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003010:	70 08       	ld.w	r8,r8[0x0]
80003012:	10 99       	mov	r9,r8
80003014:	a3 a9       	sbr	r9,0x2
80003016:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000301a:	91 09       	st.w	r8[0x0],r9
}
8000301c:	2f dd       	sub	sp,-12
8000301e:	e3 cd 80 80 	ldm	sp++,r7,pc

80003022 <pm_wait_for_clk0_ready>:


void pm_wait_for_clk0_ready(volatile avr32_pm_t *pm)
{
80003022:	eb cd 40 80 	pushm	r7,lr
80003026:	1a 97       	mov	r7,sp
80003028:	20 1d       	sub	sp,4
8000302a:	ef 4c ff fc 	st.w	r7[-4],r12
  while (!(pm->poscsr & AVR32_PM_POSCSR_OSC0RDY_MASK));
8000302e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003032:	71 58       	ld.w	r8,r8[0x54]
80003034:	e2 18 00 80 	andl	r8,0x80,COH
80003038:	cf b0       	breq	8000302e <pm_wait_for_clk0_ready+0xc>
}
8000303a:	2f fd       	sub	sp,-4
8000303c:	e3 cd 80 80 	ldm	sp++,r7,pc

80003040 <pm_switch_to_clock>:
  return u_avr32_pm_mcctrl.MCCTRL.mcsel;
}


void pm_switch_to_clock(volatile avr32_pm_t *pm, unsigned long clock)
{
80003040:	eb cd 40 80 	pushm	r7,lr
80003044:	1a 97       	mov	r7,sp
80003046:	20 3d       	sub	sp,12
80003048:	ef 4c ff f8 	st.w	r7[-8],r12
8000304c:	ef 4b ff f4 	st.w	r7[-12],r11
  // Read
  u_avr32_pm_mcctrl_t u_avr32_pm_mcctrl = {pm->mcctrl};
80003050:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003054:	70 08       	ld.w	r8,r8[0x0]
80003056:	30 09       	mov	r9,0
80003058:	ef 49 ff fc 	st.w	r7[-4],r9
8000305c:	ef 48 ff fc 	st.w	r7[-4],r8
  // Modify
  u_avr32_pm_mcctrl.MCCTRL.mcsel = clock;
80003060:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003064:	5c 58       	castu.b	r8
80003066:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
8000306a:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8000306e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003072:	f1 d9 d0 02 	bfins	r8,r9,0x0,0x2
80003076:	ef 48 ff fc 	st.w	r7[-4],r8
  // Write back
  pm->mcctrl = u_avr32_pm_mcctrl.mcctrl;
8000307a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000307e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003082:	91 09       	st.w	r8[0x0],r9
}
80003084:	2f dd       	sub	sp,-12
80003086:	e3 cd 80 80 	ldm	sp++,r7,pc
8000308a:	d7 03       	nop

8000308c <pm_switch_to_osc0>:


void pm_switch_to_osc0(volatile avr32_pm_t *pm, unsigned int fosc0, unsigned int startup)
{
8000308c:	eb cd 40 80 	pushm	r7,lr
80003090:	1a 97       	mov	r7,sp
80003092:	20 3d       	sub	sp,12
80003094:	ef 4c ff fc 	st.w	r7[-4],r12
80003098:	ef 4b ff f8 	st.w	r7[-8],r11
8000309c:	ef 4a ff f4 	st.w	r7[-12],r10
  pm_enable_osc0_crystal(pm, fosc0);            // Enable the Osc0 in crystal mode
800030a0:	ee fb ff f8 	ld.w	r11,r7[-8]
800030a4:	ee fc ff fc 	ld.w	r12,r7[-4]
800030a8:	f0 1f 00 08 	mcall	800030c8 <pm_switch_to_osc0+0x3c>
  pm_enable_clk0(pm, startup);                  // Crystal startup time - This parameter is critical and depends on the characteristics of the crystal
800030ac:	ee fb ff f4 	ld.w	r11,r7[-12]
800030b0:	ee fc ff fc 	ld.w	r12,r7[-4]
800030b4:	f0 1f 00 06 	mcall	800030cc <pm_switch_to_osc0+0x40>
  pm_switch_to_clock(pm, AVR32_PM_MCSEL_OSC0);  // Then switch main clock to Osc0
800030b8:	30 1b       	mov	r11,1
800030ba:	ee fc ff fc 	ld.w	r12,r7[-4]
800030be:	f0 1f 00 05 	mcall	800030d0 <pm_switch_to_osc0+0x44>
}
800030c2:	2f dd       	sub	sp,-12
800030c4:	e3 cd 80 80 	ldm	sp++,r7,pc
800030c8:	80 00       	ld.sh	r0,r0[0x0]
800030ca:	2f 30       	sub	r0,-13
800030cc:	80 00       	ld.sh	r0,r0[0x0]
800030ce:	2f 94       	sub	r4,-7
800030d0:	80 00       	ld.sh	r0,r0[0x0]
800030d2:	30 40       	mov	r0,4

800030d4 <cpu_irq_is_enabled_flags>:

	return flags;
}

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
800030d4:	eb cd 40 80 	pushm	r7,lr
800030d8:	1a 97       	mov	r7,sp
800030da:	20 1d       	sub	sp,4
800030dc:	ef 4c ff fc 	st.w	r7[-4],r12
	return !(flags & AVR32_SR_GM_MASK);
800030e0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800030e4:	e6 18 00 01 	andh	r8,0x1,COH
800030e8:	5f 08       	sreq	r8
800030ea:	5c 58       	castu.b	r8
}
800030ec:	10 9c       	mov	r12,r8
800030ee:	2f fd       	sub	sp,-4
800030f0:	e3 cd 80 80 	ldm	sp++,r7,pc

800030f4 <pwm_init>:
#include "compiler.h"
#include "pwm.h"


int pwm_init(const pwm_opt_t *opt)
{
800030f4:	eb cd 40 80 	pushm	r7,lr
800030f8:	1a 97       	mov	r7,sp
800030fa:	20 3d       	sub	sp,12
800030fc:	ef 4c ff f4 	st.w	r7[-12],r12
  volatile avr32_pwm_t *pwm = &AVR32_PWM;
80003100:	fe 78 30 00 	mov	r8,-53248
80003104:	ef 48 ff f8 	st.w	r7[-8],r8
  bool global_interrupt_enabled = Is_global_interrupt_enabled();
80003108:	e1 b8 00 00 	mfsr	r8,0x0
8000310c:	10 9c       	mov	r12,r8
8000310e:	f0 1f 00 1e 	mcall	80003184 <pwm_init+0x90>
80003112:	18 98       	mov	r8,r12
80003114:	ef 68 ff ff 	st.b	r7[-1],r8

  if (opt == 0 ) // Null pointer.
80003118:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000311c:	58 08       	cp.w	r8,0
8000311e:	c0 31       	brne	80003124 <pwm_init+0x30>
    return PWM_INVALID_INPUT;
80003120:	30 18       	mov	r8,1
80003122:	c2 c8       	rjmp	8000317a <pwm_init+0x86>

  // Disable interrupt.
  if (global_interrupt_enabled) Disable_global_interrupt();
80003124:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80003128:	30 08       	mov	r8,0
8000312a:	f0 09 18 00 	cp.b	r9,r8
8000312e:	c0 20       	breq	80003132 <pwm_init+0x3e>
80003130:	d3 03       	ssrf	0x10
  pwm->idr = ((1 << (AVR32_PWM_LINES_MSB + 1)) - 1) << AVR32_PWM_IDR_CHID0_OFFSET;
80003132:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003136:	37 f9       	mov	r9,127
80003138:	91 59       	st.w	r8[0x14],r9
  pwm->isr;
8000313a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000313e:	70 78       	ld.w	r8,r8[0x1c]
  if (global_interrupt_enabled) Enable_global_interrupt();
80003140:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80003144:	30 08       	mov	r8,0
80003146:	f0 09 18 00 	cp.b	r9,r8
8000314a:	c0 20       	breq	8000314e <pwm_init+0x5a>
8000314c:	d5 03       	csrf	0x10

  // Set PWM mode register.
  pwm->mr =
    ((opt->diva)<<AVR32_PWM_DIVA_OFFSET) |
8000314e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003152:	70 19       	ld.w	r9,r8[0x4]
    ((opt->divb)<<AVR32_PWM_DIVB_OFFSET) |
80003154:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003158:	70 08       	ld.w	r8,r8[0x0]
8000315a:	b1 68       	lsl	r8,0x10
8000315c:	10 49       	or	r9,r8
    ((opt->prea)<<AVR32_PWM_PREA_OFFSET) |
8000315e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003162:	70 38       	ld.w	r8,r8[0xc]
80003164:	a9 68       	lsl	r8,0x8
80003166:	10 49       	or	r9,r8
    ((opt->preb)<<AVR32_PWM_PREB_OFFSET)
80003168:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000316c:	70 28       	ld.w	r8,r8[0x8]
8000316e:	b9 68       	lsl	r8,0x18
  pwm->isr;
  if (global_interrupt_enabled) Enable_global_interrupt();

  // Set PWM mode register.
  pwm->mr =
    ((opt->diva)<<AVR32_PWM_DIVA_OFFSET) |
80003170:	10 49       	or	r9,r8
  pwm->idr = ((1 << (AVR32_PWM_LINES_MSB + 1)) - 1) << AVR32_PWM_IDR_CHID0_OFFSET;
  pwm->isr;
  if (global_interrupt_enabled) Enable_global_interrupt();

  // Set PWM mode register.
  pwm->mr =
80003172:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003176:	91 09       	st.w	r8[0x0],r9
    ((opt->divb)<<AVR32_PWM_DIVB_OFFSET) |
    ((opt->prea)<<AVR32_PWM_PREA_OFFSET) |
    ((opt->preb)<<AVR32_PWM_PREB_OFFSET)
    ;

  return PWM_SUCCESS;
80003178:	30 08       	mov	r8,0
}
8000317a:	10 9c       	mov	r12,r8
8000317c:	2f dd       	sub	sp,-12
8000317e:	e3 cd 80 80 	ldm	sp++,r7,pc
80003182:	00 00       	add	r0,r0
80003184:	80 00       	ld.sh	r0,r0[0x0]
80003186:	30 d4       	mov	r4,13

80003188 <pwm_channel_init>:


int pwm_channel_init( unsigned int channel_id, const avr32_pwm_channel_t *pwm_channel)
{
80003188:	eb cd 40 80 	pushm	r7,lr
8000318c:	1a 97       	mov	r7,sp
8000318e:	20 3d       	sub	sp,12
80003190:	ef 4c ff f8 	st.w	r7[-8],r12
80003194:	ef 4b ff f4 	st.w	r7[-12],r11
  volatile avr32_pwm_t *pwm = &AVR32_PWM;
80003198:	fe 78 30 00 	mov	r8,-53248
8000319c:	ef 48 ff fc 	st.w	r7[-4],r8

  if (pwm_channel == 0) // Null pointer.
800031a0:	ee f8 ff f4 	ld.w	r8,r7[-12]
800031a4:	58 08       	cp.w	r8,0
800031a6:	c0 31       	brne	800031ac <pwm_channel_init+0x24>
    return PWM_INVALID_ARGUMENT;
800031a8:	30 18       	mov	r8,1
800031aa:	c2 f8       	rjmp	80003208 <pwm_channel_init+0x80>
  if (channel_id > AVR32_PWM_LINES_MSB) // Control input values.
800031ac:	ee f8 ff f8 	ld.w	r8,r7[-8]
800031b0:	58 68       	cp.w	r8,6
800031b2:	e0 88 00 04 	brls	800031ba <pwm_channel_init+0x32>
    return PWM_INVALID_INPUT;
800031b6:	30 18       	mov	r8,1
800031b8:	c2 88       	rjmp	80003208 <pwm_channel_init+0x80>

  pwm->channel[channel_id].cmr= pwm_channel->cmr;   // Channel mode.
800031ba:	ee f8 ff f8 	ld.w	r8,r7[-8]
800031be:	ee f9 ff f4 	ld.w	r9,r7[-12]
800031c2:	72 09       	ld.w	r9,r9[0x0]
800031c4:	ee fa ff fc 	ld.w	r10,r7[-4]
800031c8:	2f 08       	sub	r8,-16
800031ca:	a5 78       	lsl	r8,0x5
800031cc:	f4 08 00 08 	add	r8,r10,r8
800031d0:	91 09       	st.w	r8[0x0],r9
  pwm->channel[channel_id].cdty= pwm_channel->cdty; // Duty cycle, should be < CPRD.
800031d2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800031d6:	ee f9 ff f4 	ld.w	r9,r7[-12]
800031da:	72 19       	ld.w	r9,r9[0x4]
800031dc:	ee fa ff fc 	ld.w	r10,r7[-4]
800031e0:	a5 78       	lsl	r8,0x5
800031e2:	f4 08 00 08 	add	r8,r10,r8
800031e6:	f0 c8 fd fc 	sub	r8,r8,-516
800031ea:	91 09       	st.w	r8[0x0],r9
  pwm->channel[channel_id].cprd= pwm_channel->cprd; // Channel period.
800031ec:	ee f8 ff f8 	ld.w	r8,r7[-8]
800031f0:	ee f9 ff f4 	ld.w	r9,r7[-12]
800031f4:	72 29       	ld.w	r9,r9[0x8]
800031f6:	ee fa ff fc 	ld.w	r10,r7[-4]
800031fa:	a5 78       	lsl	r8,0x5
800031fc:	f4 08 00 08 	add	r8,r10,r8
80003200:	f0 c8 fd f8 	sub	r8,r8,-520
80003204:	91 09       	st.w	r8[0x0],r9

  return PWM_SUCCESS;
80003206:	30 08       	mov	r8,0
}
80003208:	10 9c       	mov	r12,r8
8000320a:	2f dd       	sub	sp,-12
8000320c:	e3 cd 80 80 	ldm	sp++,r7,pc

80003210 <pwm_start_channels>:


int pwm_start_channels(unsigned long channels_bitmask)
{
80003210:	eb cd 40 80 	pushm	r7,lr
80003214:	1a 97       	mov	r7,sp
80003216:	20 1d       	sub	sp,4
80003218:	ef 4c ff fc 	st.w	r7[-4],r12
  if (channels_bitmask & ~((1 << (AVR32_PWM_LINES_MSB + 1)) - 1))
8000321c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003220:	e0 18 ff 80 	andl	r8,0xff80
80003224:	c0 30       	breq	8000322a <pwm_start_channels+0x1a>
    return PWM_INVALID_INPUT;
80003226:	30 18       	mov	r8,1
80003228:	c0 78       	rjmp	80003236 <pwm_start_channels+0x26>

  AVR32_PWM.ena = channels_bitmask; // Enable channels.
8000322a:	fe 78 30 00 	mov	r8,-53248
8000322e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80003232:	91 19       	st.w	r8[0x4],r9

  return PWM_SUCCESS;
80003234:	30 08       	mov	r8,0
}
80003236:	10 9c       	mov	r12,r8
80003238:	2f fd       	sub	sp,-4
8000323a:	e3 cd 80 80 	ldm	sp++,r7,pc

8000323e <getBaudDiv>:
/** The SPI mutex. */
xSemaphoreHandle xSPIMutex;
#endif

int16_t getBaudDiv(const uint32_t baudrate, uint32_t pb_hz)
{
8000323e:	eb cd 40 80 	pushm	r7,lr
80003242:	1a 97       	mov	r7,sp
80003244:	20 3d       	sub	sp,12
80003246:	ef 4c ff f8 	st.w	r7[-8],r12
8000324a:	ef 4b ff f4 	st.w	r7[-12],r11
	uint32_t baudDiv = div_ceil(pb_hz, baudrate);
8000324e:	ee f9 ff f4 	ld.w	r9,r7[-12]
80003252:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003256:	f2 08 00 08 	add	r8,r9,r8
8000325a:	20 18       	sub	r8,1
8000325c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80003260:	f0 09 0d 08 	divu	r8,r8,r9
80003264:	ef 48 ff fc 	st.w	r7[-4],r8

	if (baudDiv <= 0 || baudDiv > 255) {
80003268:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000326c:	58 08       	cp.w	r8,0
8000326e:	c0 70       	breq	8000327c <getBaudDiv+0x3e>
80003270:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003274:	e0 48 00 ff 	cp.w	r8,255
80003278:	e0 88 00 04 	brls	80003280 <getBaudDiv+0x42>
		return -1;
8000327c:	3f f8       	mov	r8,-1
8000327e:	c0 48       	rjmp	80003286 <getBaudDiv+0x48>
	}

	return baudDiv;
80003280:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003284:	5c 88       	casts.h	r8
}
80003286:	10 9c       	mov	r12,r8
80003288:	2f dd       	sub	sp,-12
8000328a:	e3 cd 80 80 	ldm	sp++,r7,pc

8000328e <spi_initMaster>:
	return SPI_OK;
}

spi_status_t spi_initMaster(volatile avr32_spi_t *spi,
		const spi_options_t *options)
{
8000328e:	eb cd 40 80 	pushm	r7,lr
80003292:	1a 97       	mov	r7,sp
80003294:	20 3d       	sub	sp,12
80003296:	ef 4c ff f8 	st.w	r7[-8],r12
8000329a:	ef 4b ff f4 	st.w	r7[-12],r11
	u_avr32_spi_mr_t u_avr32_spi_mr;

	if (options->modfdis > 1) {
8000329e:	ee f8 ff f4 	ld.w	r8,r7[-12]
800032a2:	f1 39 00 0d 	ld.ub	r9,r8[13]
800032a6:	30 18       	mov	r8,1
800032a8:	f0 09 18 00 	cp.b	r9,r8
800032ac:	e0 88 00 04 	brls	800032b4 <spi_initMaster+0x26>
		return SPI_ERROR_ARGUMENT;
800032b0:	30 28       	mov	r8,2
800032b2:	c3 48       	rjmp	8000331a <spi_initMaster+0x8c>
	}

	/* Reset. */
	spi->cr = AVR32_SPI_CR_SWRST_MASK;
800032b4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800032b8:	e0 69 00 80 	mov	r9,128
800032bc:	91 09       	st.w	r8[0x0],r9

	/* Master Mode. */
	u_avr32_spi_mr.mr = spi->mr;
800032be:	ee f8 ff f8 	ld.w	r8,r7[-8]
800032c2:	70 18       	ld.w	r8,r8[0x4]
800032c4:	ef 48 ff fc 	st.w	r7[-4],r8
	u_avr32_spi_mr.MR.mstr = 1;
800032c8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800032cc:	30 19       	mov	r9,1
800032ce:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
800032d2:	ef 48 ff fc 	st.w	r7[-4],r8
	u_avr32_spi_mr.MR.modfdis = options->modfdis;
800032d6:	ee f8 ff f4 	ld.w	r8,r7[-12]
800032da:	f1 38 00 0d 	ld.ub	r8,r8[13]
800032de:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800032e2:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800032e6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800032ea:	f1 d9 d0 81 	bfins	r8,r9,0x4,0x1
800032ee:	ef 48 ff fc 	st.w	r7[-4],r8
	u_avr32_spi_mr.MR.llb = 0;
800032f2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800032f6:	30 09       	mov	r9,0
800032f8:	f1 d9 d0 e1 	bfins	r8,r9,0x7,0x1
800032fc:	ef 48 ff fc 	st.w	r7[-4],r8
	u_avr32_spi_mr.MR.pcs = (1 << AVR32_SPI_MR_PCS_SIZE) - 1;
80003300:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003304:	30 f9       	mov	r9,15
80003306:	f1 d9 d2 04 	bfins	r8,r9,0x10,0x4
8000330a:	ef 48 ff fc 	st.w	r7[-4],r8
	spi->mr = u_avr32_spi_mr.mr;
8000330e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80003312:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003316:	91 19       	st.w	r8[0x4],r9

	return SPI_OK;
80003318:	30 08       	mov	r8,0
}
8000331a:	10 9c       	mov	r12,r8
8000331c:	2f dd       	sub	sp,-12
8000331e:	e3 cd 80 80 	ldm	sp++,r7,pc

80003322 <spi_selectionMode>:

spi_status_t spi_selectionMode(volatile avr32_spi_t *spi,
		uint8_t variable_ps,
		uint8_t pcs_decode,
		uint8_t delay)
{
80003322:	eb cd 40 80 	pushm	r7,lr
80003326:	1a 97       	mov	r7,sp
80003328:	20 5d       	sub	sp,20
8000332a:	ef 4c ff f8 	st.w	r7[-8],r12
8000332e:	12 98       	mov	r8,r9
80003330:	16 99       	mov	r9,r11
80003332:	ef 69 ff f4 	st.b	r7[-12],r9
80003336:	14 99       	mov	r9,r10
80003338:	ef 69 ff f0 	st.b	r7[-16],r9
8000333c:	ef 68 ff ec 	st.b	r7[-20],r8
	u_avr32_spi_mr_t u_avr32_spi_mr;

	if (variable_ps > 1 ||
80003340:	ef 39 ff f4 	ld.ub	r9,r7[-12]
80003344:	30 18       	mov	r8,1
80003346:	f0 09 18 00 	cp.b	r9,r8
8000334a:	e0 8b 00 09 	brhi	8000335c <spi_selectionMode+0x3a>
8000334e:	ef 39 ff f0 	ld.ub	r9,r7[-16]
80003352:	30 18       	mov	r8,1
80003354:	f0 09 18 00 	cp.b	r9,r8
80003358:	e0 88 00 04 	brls	80003360 <spi_selectionMode+0x3e>
			pcs_decode > 1) {
		return SPI_ERROR_ARGUMENT;
8000335c:	30 28       	mov	r8,2
8000335e:	c2 88       	rjmp	800033ae <spi_selectionMode+0x8c>
	}

	u_avr32_spi_mr.mr = spi->mr;
80003360:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003364:	70 18       	ld.w	r8,r8[0x4]
80003366:	ef 48 ff fc 	st.w	r7[-4],r8
	u_avr32_spi_mr.MR.ps = variable_ps;
8000336a:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000336e:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80003372:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80003376:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000337a:	f1 d9 d0 21 	bfins	r8,r9,0x1,0x1
8000337e:	ef 48 ff fc 	st.w	r7[-4],r8
	u_avr32_spi_mr.MR.pcsdec = pcs_decode;
80003382:	ef 38 ff f0 	ld.ub	r8,r7[-16]
80003386:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000338a:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8000338e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003392:	f1 d9 d0 41 	bfins	r8,r9,0x2,0x1
80003396:	ef 48 ff fc 	st.w	r7[-4],r8
	u_avr32_spi_mr.MR.dlybcs = delay;
8000339a:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8000339e:	ef 68 ff fc 	st.b	r7[-4],r8
	spi->mr = u_avr32_spi_mr.mr;
800033a2:	ee f9 ff fc 	ld.w	r9,r7[-4]
800033a6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800033aa:	91 19       	st.w	r8[0x4],r9

	return SPI_OK;
800033ac:	30 08       	mov	r8,0
}
800033ae:	10 9c       	mov	r12,r8
800033b0:	2f bd       	sub	sp,-20
800033b2:	e3 cd 80 80 	ldm	sp++,r7,pc

800033b6 <spi_selectChip>:

spi_status_t spi_selectChip(volatile avr32_spi_t *spi, uint8_t chip)
{
800033b6:	eb cd 40 80 	pushm	r7,lr
800033ba:	1a 97       	mov	r7,sp
800033bc:	20 2d       	sub	sp,8
800033be:	ef 4c ff fc 	st.w	r7[-4],r12
800033c2:	16 98       	mov	r8,r11
800033c4:	ef 68 ff f8 	st.b	r7[-8],r8
	while (pdFALSE == xSemaphoreTake(xSPIMutex, 20)) {
	}
#endif

	/* Assert all lines; no peripheral is selected. */
	spi->mr |= AVR32_SPI_MR_PCS_MASK;
800033c8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800033cc:	70 18       	ld.w	r8,r8[0x4]
800033ce:	10 99       	mov	r9,r8
800033d0:	ea 19 00 0f 	orh	r9,0xf
800033d4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800033d8:	91 19       	st.w	r8[0x4],r9

	if (spi->mr & AVR32_SPI_MR_PCSDEC_MASK) {
800033da:	ee f8 ff fc 	ld.w	r8,r7[-4]
800033de:	70 18       	ld.w	r8,r8[0x4]
800033e0:	e2 18 00 04 	andl	r8,0x4,COH
800033e4:	c1 90       	breq	80003416 <spi_selectChip+0x60>
		/* The signal is decoded; allow up to 15 chips. */
		if (chip > 14) {
800033e6:	ef 39 ff f8 	ld.ub	r9,r7[-8]
800033ea:	30 e8       	mov	r8,14
800033ec:	f0 09 18 00 	cp.b	r9,r8
800033f0:	e0 88 00 04 	brls	800033f8 <spi_selectChip+0x42>
			return SPI_ERROR_ARGUMENT;
800033f4:	30 28       	mov	r8,2
800033f6:	c2 88       	rjmp	80003446 <spi_selectChip+0x90>
		}

		spi->mr &= ~AVR32_SPI_MR_PCS_MASK |
800033f8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800033fc:	70 19       	ld.w	r9,r8[0x4]
				(chip << AVR32_SPI_MR_PCS_OFFSET);
800033fe:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80003402:	b1 68       	lsl	r8,0x10
		/* The signal is decoded; allow up to 15 chips. */
		if (chip > 14) {
			return SPI_ERROR_ARGUMENT;
		}

		spi->mr &= ~AVR32_SPI_MR_PCS_MASK |
80003404:	ea 18 ff f0 	orh	r8,0xfff0
80003408:	e8 18 ff ff 	orl	r8,0xffff
8000340c:	10 69       	and	r9,r8
8000340e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003412:	91 19       	st.w	r8[0x4],r9
80003414:	c1 88       	rjmp	80003444 <spi_selectChip+0x8e>
				(chip << AVR32_SPI_MR_PCS_OFFSET);
	} else {
		if (chip > 3) {
80003416:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000341a:	30 38       	mov	r8,3
8000341c:	f0 09 18 00 	cp.b	r9,r8
80003420:	e0 88 00 04 	brls	80003428 <spi_selectChip+0x72>
			return SPI_ERROR_ARGUMENT;
80003424:	30 28       	mov	r8,2
80003426:	c1 08       	rjmp	80003446 <spi_selectChip+0x90>
		}

		spi->mr &= ~(1 << (AVR32_SPI_MR_PCS_OFFSET + chip));
80003428:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000342c:	70 19       	ld.w	r9,r8[0x4]
8000342e:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80003432:	2f 08       	sub	r8,-16
80003434:	30 1a       	mov	r10,1
80003436:	f4 08 09 48 	lsl	r8,r10,r8
8000343a:	5c d8       	com	r8
8000343c:	10 69       	and	r9,r8
8000343e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003442:	91 19       	st.w	r8[0x4],r9
	}

	return SPI_OK;
80003444:	30 08       	mov	r8,0
}
80003446:	10 9c       	mov	r12,r8
80003448:	2f ed       	sub	sp,-8
8000344a:	e3 cd 80 80 	ldm	sp++,r7,pc

8000344e <spi_unselectChip>:

spi_status_t spi_unselectChip(volatile avr32_spi_t *spi, uint8_t chip)
{
8000344e:	eb cd 40 80 	pushm	r7,lr
80003452:	1a 97       	mov	r7,sp
80003454:	20 3d       	sub	sp,12
80003456:	ef 4c ff f8 	st.w	r7[-8],r12
8000345a:	16 98       	mov	r8,r11
8000345c:	ef 68 ff f4 	st.b	r7[-12],r8
	uint32_t timeout = SPI_TIMEOUT;
80003460:	e0 68 3a 98 	mov	r8,15000
80003464:	ef 48 ff fc 	st.w	r7[-4],r8

	while (!(spi->sr & AVR32_SPI_SR_TXEMPTY_MASK)) {
80003468:	c0 f8       	rjmp	80003486 <spi_unselectChip+0x38>
		if (!timeout--) {
8000346a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000346e:	58 08       	cp.w	r8,0
80003470:	5f 08       	sreq	r8
80003472:	5c 58       	castu.b	r8
80003474:	ee f9 ff fc 	ld.w	r9,r7[-4]
80003478:	20 19       	sub	r9,1
8000347a:	ef 49 ff fc 	st.w	r7[-4],r9
8000347e:	58 08       	cp.w	r8,0
80003480:	c0 30       	breq	80003486 <spi_unselectChip+0x38>
			return SPI_ERROR_TIMEOUT;
80003482:	30 18       	mov	r8,1
80003484:	c1 68       	rjmp	800034b0 <spi_unselectChip+0x62>

spi_status_t spi_unselectChip(volatile avr32_spi_t *spi, uint8_t chip)
{
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TXEMPTY_MASK)) {
80003486:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000348a:	70 48       	ld.w	r8,r8[0x10]
8000348c:	e2 18 02 00 	andl	r8,0x200,COH
80003490:	ce d0       	breq	8000346a <spi_unselectChip+0x1c>
			return SPI_ERROR_TIMEOUT;
		}
	}

	/* Assert all lines; no peripheral is selected. */
	spi->mr |= AVR32_SPI_MR_PCS_MASK;
80003492:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003496:	70 18       	ld.w	r8,r8[0x4]
80003498:	10 99       	mov	r9,r8
8000349a:	ea 19 00 0f 	orh	r9,0xf
8000349e:	ee f8 ff f8 	ld.w	r8,r7[-8]
800034a2:	91 19       	st.w	r8[0x4],r9

	/* Last transfer, so de-assert the current NPCS if CSAAT is set. */
	spi->cr = AVR32_SPI_CR_LASTXFER_MASK;
800034a4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800034a8:	fc 19 01 00 	movh	r9,0x100
800034ac:	91 09       	st.w	r8[0x0],r9

#ifdef FREERTOS_USED
	xSemaphoreGive(xSPIMutex);
#endif

	return SPI_OK;
800034ae:	30 08       	mov	r8,0
}
800034b0:	10 9c       	mov	r12,r8
800034b2:	2f dd       	sub	sp,-12
800034b4:	e3 cd 80 80 	ldm	sp++,r7,pc

800034b8 <spi_setupChipReg>:

spi_status_t spi_setupChipReg(volatile avr32_spi_t *spi,
		const spi_options_t *options,
		uint32_t pb_hz)
{
800034b8:	eb cd 40 80 	pushm	r7,lr
800034bc:	1a 97       	mov	r7,sp
800034be:	20 5d       	sub	sp,20
800034c0:	ef 4c ff f4 	st.w	r7[-12],r12
800034c4:	ef 4b ff f0 	st.w	r7[-16],r11
800034c8:	ef 4a ff ec 	st.w	r7[-20],r10
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
800034cc:	ee f8 ff f0 	ld.w	r8,r7[-16]
800034d0:	f1 39 00 0c 	ld.ub	r9,r8[12]
800034d4:	30 38       	mov	r8,3
800034d6:	f0 09 18 00 	cp.b	r9,r8
800034da:	e0 8b 00 1d 	brhi	80003514 <spi_setupChipReg+0x5c>
			options->stay_act > 1 ||
800034de:	ee f8 ff f0 	ld.w	r8,r7[-16]
800034e2:	f1 39 00 0b 	ld.ub	r9,r8[11]
		const spi_options_t *options,
		uint32_t pb_hz)
{
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
800034e6:	30 18       	mov	r8,1
800034e8:	f0 09 18 00 	cp.b	r9,r8
800034ec:	e0 8b 00 14 	brhi	80003514 <spi_setupChipReg+0x5c>
			options->stay_act > 1 ||
			options->bits < 8 || options->bits > 16) {
800034f0:	ee f8 ff f0 	ld.w	r8,r7[-16]
800034f4:	f1 39 00 08 	ld.ub	r9,r8[8]
		const spi_options_t *options,
		uint32_t pb_hz)
{
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
800034f8:	30 78       	mov	r8,7
800034fa:	f0 09 18 00 	cp.b	r9,r8
800034fe:	e0 88 00 0b 	brls	80003514 <spi_setupChipReg+0x5c>
			options->stay_act > 1 ||
			options->bits < 8 || options->bits > 16) {
80003502:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003506:	f1 39 00 08 	ld.ub	r9,r8[8]
		const spi_options_t *options,
		uint32_t pb_hz)
{
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
8000350a:	31 08       	mov	r8,16
8000350c:	f0 09 18 00 	cp.b	r9,r8
80003510:	e0 88 00 04 	brls	80003518 <spi_setupChipReg+0x60>
			options->stay_act > 1 ||
			options->bits < 8 || options->bits > 16) {
		return SPI_ERROR_ARGUMENT;
80003514:	30 28       	mov	r8,2
80003516:	c8 d8       	rjmp	80003630 <spi_setupChipReg+0x178>
	}

	int baudDiv = getBaudDiv(options->baudrate, pb_hz);
80003518:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000351c:	70 18       	ld.w	r8,r8[0x4]
8000351e:	ee fb ff ec 	ld.w	r11,r7[-20]
80003522:	10 9c       	mov	r12,r8
80003524:	f0 1f 00 45 	mcall	80003638 <spi_setupChipReg+0x180>
80003528:	18 98       	mov	r8,r12
8000352a:	ef 48 ff fc 	st.w	r7[-4],r8

	if (baudDiv < 0) {
8000352e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003532:	58 08       	cp.w	r8,0
80003534:	c0 34       	brge	8000353a <spi_setupChipReg+0x82>
		return SPI_ERROR_ARGUMENT;
80003536:	30 28       	mov	r8,2
80003538:	c7 c8       	rjmp	80003630 <spi_setupChipReg+0x178>
	}

	/* Will use CSR0 offsets; these are the same for CSR0 to CSR3. */
	u_avr32_spi_csr.csr = 0;
8000353a:	30 08       	mov	r8,0
8000353c:	ef 48 ff f8 	st.w	r7[-8],r8
	u_avr32_spi_csr.CSR.cpol   = options->spi_mode >> 1;
80003540:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003544:	f1 38 00 0c 	ld.ub	r8,r8[12]
80003548:	a1 98       	lsr	r8,0x1
8000354a:	5c 58       	castu.b	r8
8000354c:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80003550:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80003554:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003558:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
8000355c:	ef 48 ff f8 	st.w	r7[-8],r8
	u_avr32_spi_csr.CSR.ncpha  = (options->spi_mode & 0x1) ^ 0x1;
80003560:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003564:	f1 38 00 0c 	ld.ub	r8,r8[12]
80003568:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000356c:	5f 08       	sreq	r8
8000356e:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80003572:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003576:	f1 d9 d0 21 	bfins	r8,r9,0x1,0x1
8000357a:	ef 48 ff f8 	st.w	r7[-8],r8
	u_avr32_spi_csr.CSR.csaat  = options->stay_act;
8000357e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003582:	f1 38 00 0b 	ld.ub	r8,r8[11]
80003586:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000358a:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8000358e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003592:	f1 d9 d0 61 	bfins	r8,r9,0x3,0x1
80003596:	ef 48 ff f8 	st.w	r7[-8],r8
	u_avr32_spi_csr.CSR.bits   = options->bits - 8;
8000359a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000359e:	f1 38 00 08 	ld.ub	r8,r8[8]
800035a2:	20 88       	sub	r8,8
800035a4:	5c 58       	castu.b	r8
800035a6:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
800035aa:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800035ae:	ee f8 ff f8 	ld.w	r8,r7[-8]
800035b2:	f1 d9 d0 84 	bfins	r8,r9,0x4,0x4
800035b6:	ef 48 ff f8 	st.w	r7[-8],r8
	u_avr32_spi_csr.CSR.scbr   = baudDiv;
800035ba:	ee f8 ff fc 	ld.w	r8,r7[-4]
800035be:	5c 58       	castu.b	r8
800035c0:	ef 68 ff fa 	st.b	r7[-6],r8
	u_avr32_spi_csr.CSR.dlybs  = options->spck_delay;
800035c4:	ee f8 ff f0 	ld.w	r8,r7[-16]
800035c8:	f1 38 00 09 	ld.ub	r8,r8[9]
800035cc:	ef 68 ff f9 	st.b	r7[-7],r8
	u_avr32_spi_csr.CSR.dlybct = options->trans_delay;
800035d0:	ee f8 ff f0 	ld.w	r8,r7[-16]
800035d4:	f1 38 00 0a 	ld.ub	r8,r8[10]
800035d8:	ef 68 ff f8 	st.b	r7[-8],r8

	switch (options->reg) {
800035dc:	ee f8 ff f0 	ld.w	r8,r7[-16]
800035e0:	11 88       	ld.ub	r8,r8[0x0]
800035e2:	58 18       	cp.w	r8,1
800035e4:	c1 10       	breq	80003606 <spi_setupChipReg+0x14e>
800035e6:	e0 89 00 05 	brgt	800035f0 <spi_setupChipReg+0x138>
800035ea:	58 08       	cp.w	r8,0
800035ec:	c0 70       	breq	800035fa <spi_setupChipReg+0x142>
800035ee:	c1 e8       	rjmp	8000362a <spi_setupChipReg+0x172>
800035f0:	58 28       	cp.w	r8,2
800035f2:	c1 00       	breq	80003612 <spi_setupChipReg+0x15a>
800035f4:	58 38       	cp.w	r8,3
800035f6:	c1 40       	breq	8000361e <spi_setupChipReg+0x166>
800035f8:	c1 98       	rjmp	8000362a <spi_setupChipReg+0x172>
	case 0:
		spi->csr0 = u_avr32_spi_csr.csr;
800035fa:	ee f9 ff f8 	ld.w	r9,r7[-8]
800035fe:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003602:	91 c9       	st.w	r8[0x30],r9
		break;
80003604:	c1 58       	rjmp	8000362e <spi_setupChipReg+0x176>

	case 1:
		spi->csr1 = u_avr32_spi_csr.csr;
80003606:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000360a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000360e:	91 d9       	st.w	r8[0x34],r9
		break;
80003610:	c0 f8       	rjmp	8000362e <spi_setupChipReg+0x176>

	case 2:
		spi->csr2 = u_avr32_spi_csr.csr;
80003612:	ee f9 ff f8 	ld.w	r9,r7[-8]
80003616:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000361a:	91 e9       	st.w	r8[0x38],r9
		break;
8000361c:	c0 98       	rjmp	8000362e <spi_setupChipReg+0x176>

	case 3:
		spi->csr3 = u_avr32_spi_csr.csr;
8000361e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80003622:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003626:	91 f9       	st.w	r8[0x3c],r9
		break;
80003628:	c0 38       	rjmp	8000362e <spi_setupChipReg+0x176>

	default:
		return SPI_ERROR_ARGUMENT;
8000362a:	30 28       	mov	r8,2
8000362c:	c0 28       	rjmp	80003630 <spi_setupChipReg+0x178>
			}
		}
	}
#endif

	return SPI_OK;
8000362e:	30 08       	mov	r8,0
}
80003630:	10 9c       	mov	r12,r8
80003632:	2f bd       	sub	sp,-20
80003634:	e3 cd 80 80 	ldm	sp++,r7,pc
80003638:	80 00       	ld.sh	r0,r0[0x0]
8000363a:	32 3e       	mov	lr,35

8000363c <spi_enable>:

void spi_enable(volatile avr32_spi_t *spi)
{
8000363c:	eb cd 40 80 	pushm	r7,lr
80003640:	1a 97       	mov	r7,sp
80003642:	20 1d       	sub	sp,4
80003644:	ef 4c ff fc 	st.w	r7[-4],r12
	spi->cr = AVR32_SPI_CR_SPIEN_MASK;
80003648:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000364c:	30 19       	mov	r9,1
8000364e:	91 09       	st.w	r8[0x0],r9
}
80003650:	2f fd       	sub	sp,-4
80003652:	e3 cd 80 80 	ldm	sp++,r7,pc

80003656 <spi_write>:
{
	return ((spi->sr & AVR32_SPI_SR_TDRE_MASK) != 0);
}

spi_status_t spi_write(volatile avr32_spi_t *spi, uint16_t data)
{
80003656:	eb cd 40 80 	pushm	r7,lr
8000365a:	1a 97       	mov	r7,sp
8000365c:	20 3d       	sub	sp,12
8000365e:	ef 4c ff f8 	st.w	r7[-8],r12
80003662:	16 98       	mov	r8,r11
80003664:	ef 58 ff f4 	st.h	r7[-12],r8
	uint32_t timeout = SPI_TIMEOUT;
80003668:	e0 68 3a 98 	mov	r8,15000
8000366c:	ef 48 ff fc 	st.w	r7[-4],r8

	while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK)) {
80003670:	c0 f8       	rjmp	8000368e <spi_write+0x38>
		if (!timeout--) {
80003672:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003676:	58 08       	cp.w	r8,0
80003678:	5f 08       	sreq	r8
8000367a:	5c 58       	castu.b	r8
8000367c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80003680:	20 19       	sub	r9,1
80003682:	ef 49 ff fc 	st.w	r7[-4],r9
80003686:	58 08       	cp.w	r8,0
80003688:	c0 30       	breq	8000368e <spi_write+0x38>
			return SPI_ERROR_TIMEOUT;
8000368a:	30 18       	mov	r8,1
8000368c:	c0 d8       	rjmp	800036a6 <spi_write+0x50>

spi_status_t spi_write(volatile avr32_spi_t *spi, uint16_t data)
{
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK)) {
8000368e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003692:	70 48       	ld.w	r8,r8[0x10]
80003694:	e2 18 00 02 	andl	r8,0x2,COH
80003698:	ce d0       	breq	80003672 <spi_write+0x1c>
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
		}
	}

	spi->tdr = data << AVR32_SPI_TDR_TD_OFFSET;
8000369a:	ef 19 ff f4 	ld.uh	r9,r7[-12]
8000369e:	ee f8 ff f8 	ld.w	r8,r7[-8]
800036a2:	91 39       	st.w	r8[0xc],r9

	return SPI_OK;
800036a4:	30 08       	mov	r8,0
}
800036a6:	10 9c       	mov	r12,r8
800036a8:	2f dd       	sub	sp,-12
800036aa:	e3 cd 80 80 	ldm	sp++,r7,pc

800036ae <spi_read>:
{
	return ((spi->sr & AVR32_SPI_SR_RDRF_MASK) != 0);
}

spi_status_t spi_read(volatile avr32_spi_t *spi, uint16_t *data)
{
800036ae:	eb cd 40 80 	pushm	r7,lr
800036b2:	1a 97       	mov	r7,sp
800036b4:	20 3d       	sub	sp,12
800036b6:	ef 4c ff f8 	st.w	r7[-8],r12
800036ba:	ef 4b ff f4 	st.w	r7[-12],r11
	unsigned int timeout = SPI_TIMEOUT;
800036be:	e0 68 3a 98 	mov	r8,15000
800036c2:	ef 48 ff fc 	st.w	r7[-4],r8

	while ((spi->sr &
800036c6:	c0 f8       	rjmp	800036e4 <spi_read+0x36>
			(AVR32_SPI_SR_RDRF_MASK | AVR32_SPI_SR_TXEMPTY_MASK)) !=
			(AVR32_SPI_SR_RDRF_MASK | AVR32_SPI_SR_TXEMPTY_MASK)) {
		if (!timeout--) {
800036c8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800036cc:	58 08       	cp.w	r8,0
800036ce:	5f 08       	sreq	r8
800036d0:	5c 58       	castu.b	r8
800036d2:	ee f9 ff fc 	ld.w	r9,r7[-4]
800036d6:	20 19       	sub	r9,1
800036d8:	ef 49 ff fc 	st.w	r7[-4],r9
800036dc:	58 08       	cp.w	r8,0
800036de:	c0 30       	breq	800036e4 <spi_read+0x36>
			return SPI_ERROR_TIMEOUT;
800036e0:	30 18       	mov	r8,1
800036e2:	c1 18       	rjmp	80003704 <spi_read+0x56>

spi_status_t spi_read(volatile avr32_spi_t *spi, uint16_t *data)
{
	unsigned int timeout = SPI_TIMEOUT;

	while ((spi->sr &
800036e4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800036e8:	70 48       	ld.w	r8,r8[0x10]
800036ea:	e2 18 02 01 	andl	r8,0x201,COH
800036ee:	e0 48 02 01 	cp.w	r8,513
800036f2:	ce b1       	brne	800036c8 <spi_read+0x1a>
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
		}
	}

	*data = spi->rdr >> AVR32_SPI_RDR_RD_OFFSET;
800036f4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800036f8:	70 28       	ld.w	r8,r8[0x8]
800036fa:	5c 88       	casts.h	r8
800036fc:	ee f9 ff f4 	ld.w	r9,r7[-12]
80003700:	b2 08       	st.h	r9[0x0],r8

	return SPI_OK;
80003702:	30 08       	mov	r8,0
}
80003704:	10 9c       	mov	r12,r8
80003706:	2f dd       	sub	sp,-12
80003708:	e3 cd 80 80 	ldm	sp++,r7,pc

8000370c <board_init>:
#if defined (CONF_BOARD_AT45DBX)
#  define AT45DBX_MEM_CNT  1
#endif

void board_init(void)
{
8000370c:	eb cd 40 80 	pushm	r7,lr
80003710:	1a 97       	mov	r7,sp
	gpio_configure_pin(LED0_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80003712:	30 3b       	mov	r11,3
80003714:	33 bc       	mov	r12,59
80003716:	f0 1f 00 2d 	mcall	800037c8 <board_init+0xbc>
	gpio_configure_pin(LED1_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
8000371a:	30 3b       	mov	r11,3
8000371c:	33 cc       	mov	r12,60
8000371e:	f0 1f 00 2b 	mcall	800037c8 <board_init+0xbc>
	gpio_configure_pin(LED2_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80003722:	30 3b       	mov	r11,3
80003724:	33 dc       	mov	r12,61
80003726:	f0 1f 00 29 	mcall	800037c8 <board_init+0xbc>
	gpio_configure_pin(LED3_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
8000372a:	30 3b       	mov	r11,3
8000372c:	33 ec       	mov	r12,62
8000372e:	f0 1f 00 27 	mcall	800037c8 <board_init+0xbc>
	gpio_configure_pin(LED4_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80003732:	30 3b       	mov	r11,3
80003734:	33 3c       	mov	r12,51
80003736:	f0 1f 00 25 	mcall	800037c8 <board_init+0xbc>
	gpio_configure_pin(LED5_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
8000373a:	30 3b       	mov	r11,3
8000373c:	33 4c       	mov	r12,52
8000373e:	f0 1f 00 23 	mcall	800037c8 <board_init+0xbc>
	gpio_configure_pin(LED6_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80003742:	30 3b       	mov	r11,3
80003744:	33 5c       	mov	r12,53
80003746:	f0 1f 00 21 	mcall	800037c8 <board_init+0xbc>
	gpio_configure_pin(LED7_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
8000374a:	30 3b       	mov	r11,3
8000374c:	33 6c       	mov	r12,54
8000374e:	f0 1f 00 1f 	mcall	800037c8 <board_init+0xbc>

	gpio_configure_pin(GPIO_PUSH_BUTTON_0,GPIO_DIR_INPUT);
80003752:	30 0b       	mov	r11,0
80003754:	35 8c       	mov	r12,88
80003756:	f0 1f 00 1d 	mcall	800037c8 <board_init+0xbc>
	gpio_configure_pin(GPIO_PUSH_BUTTON_1,GPIO_DIR_INPUT);
8000375a:	30 0b       	mov	r11,0
8000375c:	35 5c       	mov	r12,85
8000375e:	f0 1f 00 1b 	mcall	800037c8 <board_init+0xbc>
	gpio_configure_pin(GPIO_PUSH_BUTTON_2,GPIO_DIR_INPUT);
80003762:	30 0b       	mov	r11,0
80003764:	35 2c       	mov	r12,82
80003766:	f0 1f 00 19 	mcall	800037c8 <board_init+0xbc>
	gpio_configure_pin(GPIO_JOYSTICK_PUSH,GPIO_DIR_INPUT);
8000376a:	30 0b       	mov	r11,0
8000376c:	31 4c       	mov	r12,20
8000376e:	f0 1f 00 17 	mcall	800037c8 <board_init+0xbc>
	gpio_configure_pin(GPIO_JOYSTICK_LEFT,GPIO_DIR_INPUT);
80003772:	30 0b       	mov	r11,0
80003774:	31 9c       	mov	r12,25
80003776:	f0 1f 00 15 	mcall	800037c8 <board_init+0xbc>
	gpio_configure_pin(GPIO_JOYSTICK_UP,GPIO_DIR_INPUT);
8000377a:	30 0b       	mov	r11,0
8000377c:	31 ac       	mov	r12,26
8000377e:	f0 1f 00 13 	mcall	800037c8 <board_init+0xbc>
	gpio_configure_pin(GPIO_JOYSTICK_DOWN,GPIO_DIR_INPUT);
80003782:	30 0b       	mov	r11,0
80003784:	31 bc       	mov	r12,27
80003786:	f0 1f 00 11 	mcall	800037c8 <board_init+0xbc>
		MREPEAT(AT45DBX_MEM_CNT, AT45DBX_ENABLE_NPCS_PIN, ~)
#  undef AT45DBX_ENABLE_NPCS_PIN
	};

	// Assign I/Os to SPI.
	gpio_enable_module(AT45DBX_SPI_GPIO_MAP,
8000378a:	30 4b       	mov	r11,4
8000378c:	49 0c       	lddpc	r12,800037cc <board_init+0xc0>
8000378e:	f0 1f 00 11 	mcall	800037d0 <board_init+0xc4>
		{SD_MMC_SPI_MOSI_PIN, SD_MMC_SPI_MOSI_FUNCTION},
		{SD_MMC_SPI_NPCS_PIN, SD_MMC_SPI_NPCS_FUNCTION},
	};

	// Assign I/Os to SPI.
	gpio_enable_module(SD_MMC_SPI_GPIO_MAP,
80003792:	30 4b       	mov	r11,4
80003794:	49 0c       	lddpc	r12,800037d4 <board_init+0xc8>
80003796:	f0 1f 00 0f 	mcall	800037d0 <board_init+0xc4>

	// Configure SD/MMC card detect and write protect pins
#  define SD_MMC_CONFIGURE_CD_WP_PIN(slot, unused) \
	gpio_configure_pin(SD_MMC_##slot##_CD_GPIO,GPIO_DIR_INPUT); \
	gpio_configure_pin(SD_MMC_##slot##_WP_GPIO,GPIO_DIR_INPUT);
	MREPEAT(SD_MMC_SPI_MEM_CNT, SD_MMC_CONFIGURE_CD_WP_PIN, ~)
8000379a:	30 0b       	mov	r11,0
8000379c:	30 2c       	mov	r12,2
8000379e:	f0 1f 00 0b 	mcall	800037c8 <board_init+0xbc>
800037a2:	30 0b       	mov	r11,0
800037a4:	30 7c       	mov	r12,7
800037a6:	f0 1f 00 09 	mcall	800037c8 <board_init+0xbc>
		{AVR32_TWI_SDA_0_0_PIN, AVR32_TWI_SDA_0_0_FUNCTION},
		{AVR32_TWI_SCL_0_0_PIN, AVR32_TWI_SCL_0_0_FUNCTION},
	};

	// TWI gpio pins configuration
	gpio_enable_module(TWI_GPIO_MAP,
800037aa:	30 2b       	mov	r11,2
800037ac:	48 bc       	lddpc	r12,800037d8 <board_init+0xcc>
800037ae:	f0 1f 00 09 	mcall	800037d0 <board_init+0xc4>
	// USART GPIO pin configuration.
	static const gpio_map_t COMPORT_GPIO_MAP = {
		{USART_RXD_PIN, USART_RXD_FUNCTION },
		{USART_TXD_PIN, USART_TXD_FUNCTION },
	};
	gpio_enable_module(COMPORT_GPIO_MAP,
800037b2:	30 2b       	mov	r11,2
800037b4:	48 ac       	lddpc	r12,800037dc <board_init+0xd0>
800037b6:	f0 1f 00 07 	mcall	800037d0 <board_init+0xc4>
	// USART GPIO pin configuration.
	static const gpio_map_t COMPORT0_GPIO_MAP = {
		{USART0_RXD_PIN, USART0_RXD_FUNCTION },
		{USART0_TXD_PIN, USART0_TXD_FUNCTION },
	};
	gpio_enable_module(COMPORT0_GPIO_MAP,
800037ba:	30 2b       	mov	r11,2
800037bc:	48 9c       	lddpc	r12,800037e0 <board_init+0xd4>
800037be:	f0 1f 00 05 	mcall	800037d0 <board_init+0xc4>
			sizeof(COMPORT0_GPIO_MAP) / sizeof(COMPORT0_GPIO_MAP[0]));
#endif
}
800037c2:	e3 cd 80 80 	ldm	sp++,r7,pc
800037c6:	00 00       	add	r0,r0
800037c8:	80 00       	ld.sh	r0,r0[0x0]
800037ca:	39 64       	mov	r4,-106
800037cc:	80 00       	ld.sh	r0,r0[0x0]
800037ce:	a2 00       	st.h	r1[0x0],r0
800037d0:	80 00       	ld.sh	r0,r0[0x0]
800037d2:	37 e4       	mov	r4,126
800037d4:	80 00       	ld.sh	r0,r0[0x0]
800037d6:	a2 20       	st.h	r1[0x4],r0
800037d8:	80 00       	ld.sh	r0,r0[0x0]
800037da:	a2 40       	st.h	r1[0x8],r0
800037dc:	80 00       	ld.sh	r0,r0[0x0]
800037de:	a2 50       	st.h	r1[0xa],r0
800037e0:	80 00       	ld.sh	r0,r0[0x0]
800037e2:	a2 60       	st.h	r1[0xc],r0

800037e4 <gpio_enable_module>:
 * \param size The number of pins in \a gpiomap.
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
800037e4:	eb cd 40 80 	pushm	r7,lr
800037e8:	1a 97       	mov	r7,sp
800037ea:	20 4d       	sub	sp,16
800037ec:	ef 4c ff f4 	st.w	r7[-12],r12
800037f0:	ef 4b ff f0 	st.w	r7[-16],r11
	uint32_t status = GPIO_SUCCESS;
800037f4:	30 08       	mov	r8,0
800037f6:	ef 48 ff f8 	st.w	r7[-8],r8
	uint32_t i;

	for (i = 0; i < size; i++) {
800037fa:	30 08       	mov	r8,0
800037fc:	ef 48 ff fc 	st.w	r7[-4],r8
80003800:	c1 c8       	rjmp	80003838 <gpio_enable_module+0x54>
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
80003802:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003806:	70 19       	ld.w	r9,r8[0x4]
80003808:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000380c:	70 08       	ld.w	r8,r8[0x0]
8000380e:	12 9b       	mov	r11,r9
80003810:	10 9c       	mov	r12,r8
80003812:	f0 1f 00 10 	mcall	80003850 <gpio_enable_module+0x6c>
80003816:	18 98       	mov	r8,r12
80003818:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000381c:	f3 e8 10 08 	or	r8,r9,r8
80003820:	ef 48 ff f8 	st.w	r7[-8],r8
		gpiomap++;
80003824:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003828:	2f 88       	sub	r8,-8
8000382a:	ef 48 ff f4 	st.w	r7[-12],r8
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
8000382e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003832:	2f f8       	sub	r8,-1
80003834:	ef 48 ff fc 	st.w	r7[-4],r8
80003838:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000383c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003840:	10 39       	cp.w	r9,r8
80003842:	ce 03       	brcs	80003802 <gpio_enable_module+0x1e>
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
		gpiomap++;
	}

	return status;
80003844:	ee f8 ff f8 	ld.w	r8,r7[-8]
}
80003848:	10 9c       	mov	r12,r8
8000384a:	2f cd       	sub	sp,-16
8000384c:	e3 cd 80 80 	ldm	sp++,r7,pc
80003850:	80 00       	ld.sh	r0,r0[0x0]
80003852:	38 54       	mov	r4,-123

80003854 <gpio_enable_module_pin>:
 * \param function The pin function.
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module_pin(uint32_t pin, uint32_t function)
{
80003854:	eb cd 40 80 	pushm	r7,lr
80003858:	1a 97       	mov	r7,sp
8000385a:	20 3d       	sub	sp,12
8000385c:	ef 4c ff f8 	st.w	r7[-8],r12
80003860:	ef 4b ff f4 	st.w	r7[-12],r11
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80003864:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003868:	a5 98       	lsr	r8,0x5
8000386a:	a9 68       	lsl	r8,0x8
8000386c:	e0 28 f0 00 	sub	r8,61440
80003870:	ef 48 ff fc 	st.w	r7[-4],r8

	/* Enable the correct function. */
	switch (function) {
80003874:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003878:	58 18       	cp.w	r8,1
8000387a:	c1 e0       	breq	800038b6 <gpio_enable_module_pin+0x62>
8000387c:	c0 63       	brcs	80003888 <gpio_enable_module_pin+0x34>
8000387e:	58 28       	cp.w	r8,2
80003880:	c3 20       	breq	800038e4 <gpio_enable_module_pin+0x90>
80003882:	58 38       	cp.w	r8,3
80003884:	c4 70       	breq	80003912 <gpio_enable_module_pin+0xbe>
80003886:	c5 d8       	rjmp	80003940 <gpio_enable_module_pin+0xec>
	case 0: /* A function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
80003888:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000388c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80003890:	30 19       	mov	r9,1
80003892:	f2 08 09 48 	lsl	r8,r9,r8
80003896:	10 99       	mov	r9,r8
80003898:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000389c:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
8000389e:	ee f8 ff f8 	ld.w	r8,r7[-8]
800038a2:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800038a6:	30 19       	mov	r9,1
800038a8:	f2 08 09 48 	lsl	r8,r9,r8
800038ac:	10 99       	mov	r9,r8
800038ae:	ee f8 ff fc 	ld.w	r8,r7[-4]
800038b2:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
		break;
800038b4:	c4 88       	rjmp	80003944 <gpio_enable_module_pin+0xf0>

	case 1: /* B function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
800038b6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800038ba:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800038be:	30 19       	mov	r9,1
800038c0:	f2 08 09 48 	lsl	r8,r9,r8
800038c4:	10 99       	mov	r9,r8
800038c6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800038ca:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
800038cc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800038d0:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800038d4:	30 19       	mov	r9,1
800038d6:	f2 08 09 48 	lsl	r8,r9,r8
800038da:	10 99       	mov	r9,r8
800038dc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800038e0:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
		break;
800038e2:	c3 18       	rjmp	80003944 <gpio_enable_module_pin+0xf0>

	case 2: /* C function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
800038e4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800038e8:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800038ec:	30 19       	mov	r9,1
800038ee:	f2 08 09 48 	lsl	r8,r9,r8
800038f2:	10 99       	mov	r9,r8
800038f4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800038f8:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
800038fa:	ee f8 ff f8 	ld.w	r8,r7[-8]
800038fe:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80003902:	30 19       	mov	r9,1
80003904:	f2 08 09 48 	lsl	r8,r9,r8
80003908:	10 99       	mov	r9,r8
8000390a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000390e:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
		break;
80003910:	c1 a8       	rjmp	80003944 <gpio_enable_module_pin+0xf0>

	case 3: /* D function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
80003912:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003916:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000391a:	30 19       	mov	r9,1
8000391c:	f2 08 09 48 	lsl	r8,r9,r8
80003920:	10 99       	mov	r9,r8
80003922:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003926:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
80003928:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000392c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80003930:	30 19       	mov	r9,1
80003932:	f2 08 09 48 	lsl	r8,r9,r8
80003936:	10 99       	mov	r9,r8
80003938:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000393c:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
		break;
8000393e:	c0 38       	rjmp	80003944 <gpio_enable_module_pin+0xf0>
		gpio_port->pmr2s = 1 << (pin & 0x1F);
		break;
#endif

	default:
		return GPIO_INVALID_ARGUMENT;
80003940:	30 18       	mov	r8,1
80003942:	c0 d8       	rjmp	8000395c <gpio_enable_module_pin+0x108>
	}

	/* Disable GPIO control. */
	gpio_port->gperc = 1 << (pin & 0x1F);
80003944:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003948:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000394c:	30 19       	mov	r9,1
8000394e:	f2 08 09 48 	lsl	r8,r9,r8
80003952:	10 99       	mov	r9,r8
80003954:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003958:	91 29       	st.w	r8[0x8],r9

	return GPIO_SUCCESS;
8000395a:	30 08       	mov	r8,0
}
8000395c:	10 9c       	mov	r12,r8
8000395e:	2f dd       	sub	sp,-12
80003960:	e3 cd 80 80 	ldm	sp++,r7,pc

80003964 <gpio_configure_pin>:
 *
 * \param pin The pin number.
 * \param flags The configuration.
 */
void gpio_configure_pin(uint32_t pin, uint32_t flags)
{
80003964:	eb cd 40 80 	pushm	r7,lr
80003968:	1a 97       	mov	r7,sp
8000396a:	20 3d       	sub	sp,12
8000396c:	ef 4c ff f8 	st.w	r7[-8],r12
80003970:	ef 4b ff f4 	st.w	r7[-12],r11
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80003974:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003978:	a5 98       	lsr	r8,0x5
8000397a:	a9 68       	lsl	r8,0x8
8000397c:	e0 28 f0 00 	sub	r8,61440
80003980:	ef 48 ff fc 	st.w	r7[-4],r8
	} else {
		gpio_port->pderc = 1 << (pin & 0x1F);
	}

#endif
	if (flags & GPIO_PULL_UP) {
80003984:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003988:	e2 18 00 04 	andl	r8,0x4,COH
8000398c:	c0 e0       	breq	800039a8 <gpio_configure_pin+0x44>
		gpio_port->puers = 1 << (pin & 0x1F);
8000398e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003992:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80003996:	30 19       	mov	r9,1
80003998:	f2 08 09 48 	lsl	r8,r9,r8
8000399c:	10 99       	mov	r9,r8
8000399e:	ee f8 ff fc 	ld.w	r8,r7[-4]
800039a2:	f1 49 00 74 	st.w	r8[116],r9
800039a6:	c0 d8       	rjmp	800039c0 <gpio_configure_pin+0x5c>
	} else {
		gpio_port->puerc = 1 << (pin & 0x1F);
800039a8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800039ac:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800039b0:	30 19       	mov	r9,1
800039b2:	f2 08 09 48 	lsl	r8,r9,r8
800039b6:	10 99       	mov	r9,r8
800039b8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800039bc:	f1 49 00 78 	st.w	r8[120],r9
	}

#endif

	/* Select interrupt level for group */
	if (flags & GPIO_INTERRUPT) {
800039c0:	ee f8 ff f4 	ld.w	r8,r7[-12]
800039c4:	e2 18 00 80 	andl	r8,0x80,COH
800039c8:	c5 a0       	breq	80003a7c <gpio_configure_pin+0x118>
		if (flags & GPIO_BOTHEDGES) {
800039ca:	ee f8 ff f4 	ld.w	r8,r7[-12]
800039ce:	e2 18 01 80 	andl	r8,0x180,COH
800039d2:	c1 a0       	breq	80003a06 <gpio_configure_pin+0xa2>
			gpio_port->imr0c = 1 << (pin & 0x1F);
800039d4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800039d8:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800039dc:	30 19       	mov	r9,1
800039de:	f2 08 09 48 	lsl	r8,r9,r8
800039e2:	10 99       	mov	r9,r8
800039e4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800039e8:	f1 49 00 a8 	st.w	r8[168],r9
			gpio_port->imr1c = 1 << (pin & 0x1F);
800039ec:	ee f8 ff f8 	ld.w	r8,r7[-8]
800039f0:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800039f4:	30 19       	mov	r9,1
800039f6:	f2 08 09 48 	lsl	r8,r9,r8
800039fa:	10 99       	mov	r9,r8
800039fc:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003a00:	f1 49 00 b8 	st.w	r8[184],r9
80003a04:	c3 c8       	rjmp	80003a7c <gpio_configure_pin+0x118>
		} else if (flags & GPIO_RISING) {
80003a06:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003a0a:	e2 18 02 80 	andl	r8,0x280,COH
80003a0e:	c1 a0       	breq	80003a42 <gpio_configure_pin+0xde>
			gpio_port->imr0s = 1 << (pin & 0x1F);
80003a10:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003a14:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80003a18:	30 19       	mov	r9,1
80003a1a:	f2 08 09 48 	lsl	r8,r9,r8
80003a1e:	10 99       	mov	r9,r8
80003a20:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003a24:	f1 49 00 a4 	st.w	r8[164],r9
			gpio_port->imr1c = 1 << (pin & 0x1F);
80003a28:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003a2c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80003a30:	30 19       	mov	r9,1
80003a32:	f2 08 09 48 	lsl	r8,r9,r8
80003a36:	10 99       	mov	r9,r8
80003a38:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003a3c:	f1 49 00 b8 	st.w	r8[184],r9
80003a40:	c1 e8       	rjmp	80003a7c <gpio_configure_pin+0x118>
		} else if (flags & GPIO_FALLING) {
80003a42:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003a46:	e2 18 03 80 	andl	r8,0x380,COH
80003a4a:	c1 90       	breq	80003a7c <gpio_configure_pin+0x118>
			gpio_port->imr0c = 1 << (pin & 0x1F);
80003a4c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003a50:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80003a54:	30 19       	mov	r9,1
80003a56:	f2 08 09 48 	lsl	r8,r9,r8
80003a5a:	10 99       	mov	r9,r8
80003a5c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003a60:	f1 49 00 a8 	st.w	r8[168],r9
			gpio_port->imr1s = 1 << (pin & 0x1F);
80003a64:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003a68:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80003a6c:	30 19       	mov	r9,1
80003a6e:	f2 08 09 48 	lsl	r8,r9,r8
80003a72:	10 99       	mov	r9,r8
80003a74:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003a78:	f1 49 00 b4 	st.w	r8[180],r9
		}
	}

	/* Select direction and initial pin state */
	if (flags & GPIO_DIR_OUTPUT) {
80003a7c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003a80:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80003a84:	5c 58       	castu.b	r8
80003a86:	c2 c0       	breq	80003ade <gpio_configure_pin+0x17a>
		if (flags & GPIO_INIT_HIGH) {
80003a88:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003a8c:	e2 18 00 02 	andl	r8,0x2,COH
80003a90:	c0 e0       	breq	80003aac <gpio_configure_pin+0x148>
			gpio_port->ovrs = 1 << (pin & 0x1F);
80003a92:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003a96:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80003a9a:	30 19       	mov	r9,1
80003a9c:	f2 08 09 48 	lsl	r8,r9,r8
80003aa0:	10 99       	mov	r9,r8
80003aa2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003aa6:	f1 49 00 54 	st.w	r8[84],r9
80003aaa:	c0 d8       	rjmp	80003ac4 <gpio_configure_pin+0x160>
		} else {
			gpio_port->ovrc = 1 << (pin & 0x1F);
80003aac:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003ab0:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80003ab4:	30 19       	mov	r9,1
80003ab6:	f2 08 09 48 	lsl	r8,r9,r8
80003aba:	10 99       	mov	r9,r8
80003abc:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003ac0:	f1 49 00 58 	st.w	r8[88],r9
		}

		gpio_port->oders = 1 << (pin & 0x1F);
80003ac4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003ac8:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80003acc:	30 19       	mov	r9,1
80003ace:	f2 08 09 48 	lsl	r8,r9,r8
80003ad2:	10 99       	mov	r9,r8
80003ad4:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003ad8:	f1 49 00 44 	st.w	r8[68],r9
80003adc:	c0 d8       	rjmp	80003af6 <gpio_configure_pin+0x192>
	} else {
		gpio_port->oderc = 1 << (pin & 0x1F);
80003ade:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003ae2:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80003ae6:	30 19       	mov	r9,1
80003ae8:	f2 08 09 48 	lsl	r8,r9,r8
80003aec:	10 99       	mov	r9,r8
80003aee:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003af2:	f1 49 00 48 	st.w	r8[72],r9
	}

	/* Enable GPIO */
	gpio_port->gpers = 1 << (pin & 0x1F);
80003af6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003afa:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80003afe:	30 19       	mov	r9,1
80003b00:	f2 08 09 48 	lsl	r8,r9,r8
80003b04:	10 99       	mov	r9,r8
80003b06:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003b0a:	91 19       	st.w	r8[0x4],r9
}
80003b0c:	2f dd       	sub	sp,-12
80003b0e:	e3 cd 80 80 	ldm	sp++,r7,pc

80003b12 <gpio_set_gpio_pin>:
/** \brief Drives a GPIO pin to 1.
 *
 * \param pin The pin number.
 */
void gpio_set_gpio_pin(uint32_t pin)
{
80003b12:	eb cd 40 80 	pushm	r7,lr
80003b16:	1a 97       	mov	r7,sp
80003b18:	20 2d       	sub	sp,8
80003b1a:	ef 4c ff f8 	st.w	r7[-8],r12
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80003b1e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003b22:	a5 98       	lsr	r8,0x5
80003b24:	a9 68       	lsl	r8,0x8
80003b26:	e0 28 f0 00 	sub	r8,61440
80003b2a:	ef 48 ff fc 	st.w	r7[-4],r8
	
	/* Value to be driven on the I/O line: 1. */
	gpio_port->ovrs  = 1 << (pin & 0x1F);
80003b2e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003b32:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80003b36:	30 19       	mov	r9,1
80003b38:	f2 08 09 48 	lsl	r8,r9,r8
80003b3c:	10 99       	mov	r9,r8
80003b3e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003b42:	f1 49 00 54 	st.w	r8[84],r9
	/* The GPIO output driver is enabled for that pin. */ 
	gpio_port->oders = 1 << (pin & 0x1F);
80003b46:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003b4a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80003b4e:	30 19       	mov	r9,1
80003b50:	f2 08 09 48 	lsl	r8,r9,r8
80003b54:	10 99       	mov	r9,r8
80003b56:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003b5a:	f1 49 00 44 	st.w	r8[68],r9
	/* The GPIO module controls that pin. */
	gpio_port->gpers = 1 << (pin & 0x1F);
80003b5e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003b62:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80003b66:	30 19       	mov	r9,1
80003b68:	f2 08 09 48 	lsl	r8,r9,r8
80003b6c:	10 99       	mov	r9,r8
80003b6e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003b72:	91 19       	st.w	r8[0x4],r9
}
80003b74:	2f ed       	sub	sp,-8
80003b76:	e3 cd 80 80 	ldm	sp++,r7,pc

80003b7a <gpio_clr_gpio_pin>:
/** \brief Drives a GPIO pin to 0.
 *
 * \param pin The pin number.
 */
void gpio_clr_gpio_pin(uint32_t pin)
{
80003b7a:	eb cd 40 80 	pushm	r7,lr
80003b7e:	1a 97       	mov	r7,sp
80003b80:	20 2d       	sub	sp,8
80003b82:	ef 4c ff f8 	st.w	r7[-8],r12
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80003b86:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003b8a:	a5 98       	lsr	r8,0x5
80003b8c:	a9 68       	lsl	r8,0x8
80003b8e:	e0 28 f0 00 	sub	r8,61440
80003b92:	ef 48 ff fc 	st.w	r7[-4],r8
	
	/* Value to be driven on the I/O line: 0. */
	gpio_port->ovrc  = 1 << (pin & 0x1F);
80003b96:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003b9a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80003b9e:	30 19       	mov	r9,1
80003ba0:	f2 08 09 48 	lsl	r8,r9,r8
80003ba4:	10 99       	mov	r9,r8
80003ba6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003baa:	f1 49 00 58 	st.w	r8[88],r9
	/* The GPIO output driver is enabled for that pin. */
	gpio_port->oders = 1 << (pin & 0x1F);
80003bae:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003bb2:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80003bb6:	30 19       	mov	r9,1
80003bb8:	f2 08 09 48 	lsl	r8,r9,r8
80003bbc:	10 99       	mov	r9,r8
80003bbe:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003bc2:	f1 49 00 44 	st.w	r8[68],r9
	/* The GPIO module controls that pin. */
	gpio_port->gpers = 1 << (pin & 0x1F);
80003bc6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003bca:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80003bce:	30 19       	mov	r9,1
80003bd0:	f2 08 09 48 	lsl	r8,r9,r8
80003bd4:	10 99       	mov	r9,r8
80003bd6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003bda:	91 19       	st.w	r8[0x4],r9
}
80003bdc:	2f ed       	sub	sp,-8
80003bde:	e3 cd 80 80 	ldm	sp++,r7,pc

80003be2 <gpio_configure_edge_detector>:
 *             \ref GPIO_RISING_EDGE or \ref GPIO_FALLING_EDGE).
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
static uint32_t gpio_configure_edge_detector(uint32_t pin, uint32_t mode)
{
80003be2:	eb cd 40 80 	pushm	r7,lr
80003be6:	1a 97       	mov	r7,sp
80003be8:	20 3d       	sub	sp,12
80003bea:	ef 4c ff f8 	st.w	r7[-8],r12
80003bee:	ef 4b ff f4 	st.w	r7[-12],r11
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80003bf2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003bf6:	a5 98       	lsr	r8,0x5
80003bf8:	a9 68       	lsl	r8,0x8
80003bfa:	e0 28 f0 00 	sub	r8,61440
80003bfe:	ef 48 ff fc 	st.w	r7[-4],r8

	/* Configure the edge detector. */
	switch (mode) {
80003c02:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003c06:	58 18       	cp.w	r8,1
80003c08:	c1 e0       	breq	80003c44 <gpio_configure_edge_detector+0x62>
80003c0a:	c0 43       	brcs	80003c12 <gpio_configure_edge_detector+0x30>
80003c0c:	58 28       	cp.w	r8,2
80003c0e:	c3 40       	breq	80003c76 <gpio_configure_edge_detector+0x94>
80003c10:	c4 c8       	rjmp	80003ca8 <gpio_configure_edge_detector+0xc6>
	case GPIO_PIN_CHANGE:
		gpio_port->imr0c = 1 << (pin & 0x1F);
80003c12:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003c16:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80003c1a:	30 19       	mov	r9,1
80003c1c:	f2 08 09 48 	lsl	r8,r9,r8
80003c20:	10 99       	mov	r9,r8
80003c22:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003c26:	f1 49 00 a8 	st.w	r8[168],r9
		gpio_port->imr1c = 1 << (pin & 0x1F);
80003c2a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003c2e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80003c32:	30 19       	mov	r9,1
80003c34:	f2 08 09 48 	lsl	r8,r9,r8
80003c38:	10 99       	mov	r9,r8
80003c3a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003c3e:	f1 49 00 b8 	st.w	r8[184],r9
		break;
80003c42:	c3 58       	rjmp	80003cac <gpio_configure_edge_detector+0xca>

	case GPIO_RISING_EDGE:
		gpio_port->imr0s = 1 << (pin & 0x1F);
80003c44:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003c48:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80003c4c:	30 19       	mov	r9,1
80003c4e:	f2 08 09 48 	lsl	r8,r9,r8
80003c52:	10 99       	mov	r9,r8
80003c54:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003c58:	f1 49 00 a4 	st.w	r8[164],r9
		gpio_port->imr1c = 1 << (pin & 0x1F);
80003c5c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003c60:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80003c64:	30 19       	mov	r9,1
80003c66:	f2 08 09 48 	lsl	r8,r9,r8
80003c6a:	10 99       	mov	r9,r8
80003c6c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003c70:	f1 49 00 b8 	st.w	r8[184],r9
		break;
80003c74:	c1 c8       	rjmp	80003cac <gpio_configure_edge_detector+0xca>

	case GPIO_FALLING_EDGE:
		gpio_port->imr0c = 1 << (pin & 0x1F);
80003c76:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003c7a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80003c7e:	30 19       	mov	r9,1
80003c80:	f2 08 09 48 	lsl	r8,r9,r8
80003c84:	10 99       	mov	r9,r8
80003c86:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003c8a:	f1 49 00 a8 	st.w	r8[168],r9
		gpio_port->imr1s = 1 << (pin & 0x1F);
80003c8e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003c92:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80003c96:	30 19       	mov	r9,1
80003c98:	f2 08 09 48 	lsl	r8,r9,r8
80003c9c:	10 99       	mov	r9,r8
80003c9e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003ca2:	f1 49 00 b4 	st.w	r8[180],r9
		break;
80003ca6:	c0 38       	rjmp	80003cac <gpio_configure_edge_detector+0xca>

	default:
		return GPIO_INVALID_ARGUMENT;
80003ca8:	30 18       	mov	r8,1
80003caa:	c0 28       	rjmp	80003cae <gpio_configure_edge_detector+0xcc>
	}

	return GPIO_SUCCESS;
80003cac:	30 08       	mov	r8,0
}
80003cae:	10 9c       	mov	r12,r8
80003cb0:	2f dd       	sub	sp,-12
80003cb2:	e3 cd 80 80 	ldm	sp++,r7,pc
80003cb6:	d7 03       	nop

80003cb8 <gpio_enable_pin_interrupt>:
 *             \ref GPIO_FALLING_EDGE).
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_pin_interrupt(uint32_t pin, uint32_t mode)
{
80003cb8:	eb cd 40 80 	pushm	r7,lr
80003cbc:	1a 97       	mov	r7,sp
80003cbe:	20 3d       	sub	sp,12
80003cc0:	ef 4c ff f8 	st.w	r7[-8],r12
80003cc4:	ef 4b ff f4 	st.w	r7[-12],r11
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80003cc8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003ccc:	a5 98       	lsr	r8,0x5
80003cce:	a9 68       	lsl	r8,0x8
80003cd0:	e0 28 f0 00 	sub	r8,61440
80003cd4:	ef 48 ff fc 	st.w	r7[-4],r8

	/* Enable the glitch filter. */
	gpio_port->gfers = 1 << (pin & 0x1F);
80003cd8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003cdc:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80003ce0:	30 19       	mov	r9,1
80003ce2:	f2 08 09 48 	lsl	r8,r9,r8
80003ce6:	10 99       	mov	r9,r8
80003ce8:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003cec:	f1 49 00 c4 	st.w	r8[196],r9

	/* Configure the edge detector. */
	if (GPIO_INVALID_ARGUMENT == gpio_configure_edge_detector(pin, mode)) {
80003cf0:	ee fb ff f4 	ld.w	r11,r7[-12]
80003cf4:	ee fc ff f8 	ld.w	r12,r7[-8]
80003cf8:	f0 1f 00 0c 	mcall	80003d28 <gpio_enable_pin_interrupt+0x70>
80003cfc:	18 98       	mov	r8,r12
80003cfe:	58 18       	cp.w	r8,1
80003d00:	c0 31       	brne	80003d06 <gpio_enable_pin_interrupt+0x4e>
		return(GPIO_INVALID_ARGUMENT);
80003d02:	30 18       	mov	r8,1
80003d04:	c0 e8       	rjmp	80003d20 <gpio_enable_pin_interrupt+0x68>
	}

	/* Enable interrupt. */
	gpio_port->iers = 1 << (pin & 0x1F);
80003d06:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003d0a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80003d0e:	30 19       	mov	r9,1
80003d10:	f2 08 09 48 	lsl	r8,r9,r8
80003d14:	10 99       	mov	r9,r8
80003d16:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003d1a:	f1 49 00 94 	st.w	r8[148],r9

	return GPIO_SUCCESS;
80003d1e:	30 08       	mov	r8,0
}
80003d20:	10 9c       	mov	r12,r8
80003d22:	2f dd       	sub	sp,-12
80003d24:	e3 cd 80 80 	ldm	sp++,r7,pc
80003d28:	80 00       	ld.sh	r0,r0[0x0]
80003d2a:	3b e2       	mov	r2,-66

80003d2c <gpio_get_pin_interrupt_flag>:
 * \param pin The pin number.
 *
 * \return The pin interrupt flag.
 */
bool gpio_get_pin_interrupt_flag(uint32_t pin)
{
80003d2c:	eb cd 40 80 	pushm	r7,lr
80003d30:	1a 97       	mov	r7,sp
80003d32:	20 2d       	sub	sp,8
80003d34:	ef 4c ff f8 	st.w	r7[-8],r12
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80003d38:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003d3c:	a5 98       	lsr	r8,0x5
80003d3e:	a9 68       	lsl	r8,0x8
80003d40:	e0 28 f0 00 	sub	r8,61440
80003d44:	ef 48 ff fc 	st.w	r7[-4],r8
	
	return (gpio_port->ifr >> (pin & 0x1F)) & 1;
80003d48:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003d4c:	f0 f9 00 d0 	ld.w	r9,r8[208]
80003d50:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003d54:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80003d58:	f2 08 0a 48 	lsr	r8,r9,r8
80003d5c:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80003d60:	5c 58       	castu.b	r8
}
80003d62:	10 9c       	mov	r12,r8
80003d64:	2f ed       	sub	sp,-8
80003d66:	e3 cd 80 80 	ldm	sp++,r7,pc

80003d6a <gpio_clear_pin_interrupt_flag>:
/** \brief Clears the interrupt flag of a pin.
 *
 * \param pin The pin number.
 */
void gpio_clear_pin_interrupt_flag(uint32_t pin)
{
80003d6a:	eb cd 40 80 	pushm	r7,lr
80003d6e:	1a 97       	mov	r7,sp
80003d70:	20 2d       	sub	sp,8
80003d72:	ef 4c ff f8 	st.w	r7[-8],r12
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80003d76:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003d7a:	a5 98       	lsr	r8,0x5
80003d7c:	a9 68       	lsl	r8,0x8
80003d7e:	e0 28 f0 00 	sub	r8,61440
80003d82:	ef 48 ff fc 	st.w	r7[-4],r8
	gpio_port->ifrc = 1 << (pin & 0x1F);

	/* Restore interrupt enable register. */
	gpio_port->ier = gpio_ier;
#else
	gpio_port->ifrc = 1 << (pin & 0x1F);
80003d86:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003d8a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80003d8e:	30 19       	mov	r9,1
80003d90:	f2 08 09 48 	lsl	r8,r9,r8
80003d94:	10 99       	mov	r9,r8
80003d96:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003d9a:	f1 49 00 d8 	st.w	r8[216],r9
#endif
}
80003d9e:	2f ed       	sub	sp,-8
80003da0:	e3 cd 80 80 	ldm	sp++,r7,pc

80003da4 <_unhandled_interrupt>:
__attribute__((__interrupt__))
#elif (defined __ICCAVR32__)
__interrupt
#endif
static void _unhandled_interrupt(void)
{
80003da4:	eb cd 40 80 	pushm	r7,lr
80003da8:	1a 97       	mov	r7,sp
	// Catch unregistered interrupts.
	while (true);
80003daa:	c0 08       	rjmp	80003daa <_unhandled_interrupt+0x6>

80003dac <_get_interrupt_handler>:
 *
 * \return Interrupt handler to execute.
 */
__int_handler _get_interrupt_handler(uint32_t int_level);
__int_handler _get_interrupt_handler(uint32_t int_level)
{
80003dac:	eb cd 40 80 	pushm	r7,lr
80003db0:	1a 97       	mov	r7,sp
80003db2:	20 3d       	sub	sp,12
80003db4:	ef 4c ff f4 	st.w	r7[-12],r12
	/* ICR3 is mapped first, ICR0 last.
	Code in exception.S puts int_level in R12 which is used by the compiler
	to pass a single argument to a function. */
	uint32_t int_grp = AVR32_INTC.icr[AVR32_INTC_INT3 - int_level];
80003db8:	fe 78 08 00 	mov	r8,-63488
80003dbc:	ee f9 ff f4 	ld.w	r9,r7[-12]
80003dc0:	f2 09 11 03 	rsub	r9,r9,3
80003dc4:	28 09       	sub	r9,-128
80003dc6:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80003dca:	ef 48 ff f8 	st.w	r7[-8],r8
	uint32_t int_req = AVR32_INTC.irr[int_grp];
80003dce:	fe 78 08 00 	mov	r8,-63488
80003dd2:	ee f9 ff f8 	ld.w	r9,r7[-8]
80003dd6:	2c 09       	sub	r9,-64
80003dd8:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80003ddc:	ef 48 ff fc 	st.w	r7[-4],r8
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
80003de0:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003de4:	58 08       	cp.w	r8,0
80003de6:	c1 30       	breq	80003e0c <_get_interrupt_handler+0x60>
		? _int_handler_table[int_grp]._int_line_handler_table[32
80003de8:	ee f9 ff f8 	ld.w	r9,r7[-8]
80003dec:	48 b8       	lddpc	r8,80003e18 <_get_interrupt_handler+0x6c>
80003dee:	a1 79       	lsl	r9,0x1
80003df0:	2f f9       	sub	r9,-1
80003df2:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80003df6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003dfa:	f0 08 12 00 	clz	r8,r8
80003dfe:	f0 08 11 1f 	rsub	r8,r8,31
			- clz(int_req) - 1]
80003e02:	a3 68       	lsl	r8,0x2
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
		? _int_handler_table[int_grp]._int_line_handler_table[32
80003e04:	f2 08 00 08 	add	r8,r9,r8
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
80003e08:	70 08       	ld.w	r8,r8[0x0]
80003e0a:	c0 28       	rjmp	80003e0e <_get_interrupt_handler+0x62>
80003e0c:	30 08       	mov	r8,0
		? _int_handler_table[int_grp]._int_line_handler_table[32
			- clz(int_req) - 1]
		: NULL;
}
80003e0e:	10 9c       	mov	r12,r8
80003e10:	2f dd       	sub	sp,-12
80003e12:	e3 cd 80 80 	ldm	sp++,r7,pc
80003e16:	00 00       	add	r0,r0
80003e18:	80 00       	ld.sh	r0,r0[0x0]
80003e1a:	a2 70       	st.h	r1[0xe],r0

80003e1c <INTC_init_evba>:
 * \internal
 * \brief Init EVBA address. This operation may or may not have been done by the
 * C startup process.
 */
static __inline__ void INTC_init_evba(void)
{
80003e1c:	eb cd 40 80 	pushm	r7,lr
80003e20:	1a 97       	mov	r7,sp
  Set_system_register(AVR32_EVBA, (int32_t)&_evba );
80003e22:	48 38       	lddpc	r8,80003e2c <INTC_init_evba+0x10>
80003e24:	e3 b8 00 01 	mtsr	0x4,r8
}
80003e28:	e3 cd 80 80 	ldm	sp++,r7,pc
80003e2c:	80 00       	ld.sh	r0,r0[0x0]
80003e2e:	a0 00       	st.h	r0[0x0],r0

80003e30 <INTC_init_interrupts>:
/**
 * \brief Initializes the hardware interrupt controller driver.
 *
 */
void INTC_init_interrupts(void)
{
80003e30:	eb cd 40 80 	pushm	r7,lr
80003e34:	1a 97       	mov	r7,sp
80003e36:	20 2d       	sub	sp,8
	uint32_t int_grp, int_req;

	INTC_init_evba();
80003e38:	f0 1f 00 1f 	mcall	80003eb4 <INTC_init_interrupts+0x84>

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
80003e3c:	30 08       	mov	r8,0
80003e3e:	ef 48 ff f8 	st.w	r7[-8],r8
80003e42:	c3 18       	rjmp	80003ea4 <INTC_init_interrupts+0x74>
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
80003e44:	30 08       	mov	r8,0
80003e46:	ef 48 ff fc 	st.w	r7[-4],r8
80003e4a:	c1 48       	rjmp	80003e72 <INTC_init_interrupts+0x42>
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
				._int_line_handler_table[int_req]
80003e4c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80003e50:	49 a8       	lddpc	r8,80003eb8 <INTC_init_interrupts+0x88>
80003e52:	a1 79       	lsl	r9,0x1
80003e54:	2f f9       	sub	r9,-1
80003e56:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80003e5a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003e5e:	a3 68       	lsl	r8,0x2
80003e60:	f2 08 00 08 	add	r8,r9,r8
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
80003e64:	49 69       	lddpc	r9,80003ebc <INTC_init_interrupts+0x8c>
80003e66:	91 09       	st.w	r8[0x0],r9
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
80003e68:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003e6c:	2f f8       	sub	r8,-1
80003e6e:	ef 48 ff fc 	st.w	r7[-4],r8
	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
			int_req < _int_handler_table[int_grp].num_irqs;
80003e72:	ee f9 ff f8 	ld.w	r9,r7[-8]
80003e76:	49 18       	lddpc	r8,80003eb8 <INTC_init_interrupts+0x88>
80003e78:	f0 09 03 39 	ld.w	r9,r8[r9<<0x3]

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
80003e7c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003e80:	10 39       	cp.w	r9,r8
80003e82:	fe 9b ff e5 	brhi	80003e4c <INTC_init_interrupts+0x1c>

		/* Set the interrupt group priority register to its default
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
80003e86:	fe 78 08 00 	mov	r8,-63488
80003e8a:	ee f9 ff f8 	ld.w	r9,r7[-8]
80003e8e:	48 db       	lddpc	r11,80003ec0 <INTC_init_interrupts+0x90>
80003e90:	48 da       	lddpc	r10,80003ec4 <INTC_init_interrupts+0x94>
80003e92:	f6 0a 01 0a 	sub	r10,r11,r10
80003e96:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	uint32_t int_grp, int_req;

	INTC_init_evba();

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
80003e9a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003e9e:	2f f8       	sub	r8,-1
80003ea0:	ef 48 ff f8 	st.w	r7[-8],r8
80003ea4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003ea8:	59 38       	cp.w	r8,19
80003eaa:	fe 98 ff cd 	brls	80003e44 <INTC_init_interrupts+0x14>
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
	}
}
80003eae:	2f ed       	sub	sp,-8
80003eb0:	e3 cd 80 80 	ldm	sp++,r7,pc
80003eb4:	80 00       	ld.sh	r0,r0[0x0]
80003eb6:	3e 1c       	mov	r12,-31
80003eb8:	80 00       	ld.sh	r0,r0[0x0]
80003eba:	a2 70       	st.h	r1[0xe],r0
80003ebc:	80 00       	ld.sh	r0,r0[0x0]
80003ebe:	3d a4       	mov	r4,-38
80003ec0:	80 00       	ld.sh	r0,r0[0x0]
80003ec2:	a1 04       	ld.d	r4,r0
80003ec4:	80 00       	ld.sh	r0,r0[0x0]
80003ec6:	a0 00       	st.h	r0[0x0],r0

80003ec8 <INTC_register_interrupt>:
 *          be effective.
 *
 */
void INTC_register_interrupt(__int_handler handler, uint32_t irq,
	uint32_t int_level)
{
80003ec8:	eb cd 40 80 	pushm	r7,lr
80003ecc:	1a 97       	mov	r7,sp
80003ece:	20 4d       	sub	sp,16
80003ed0:	ef 4c ff f8 	st.w	r7[-8],r12
80003ed4:	ef 4b ff f4 	st.w	r7[-12],r11
80003ed8:	ef 4a ff f0 	st.w	r7[-16],r10
	// Determine the group of the IRQ.
	uint32_t int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;
80003edc:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003ee0:	a5 98       	lsr	r8,0x5
80003ee2:	ef 48 ff fc 	st.w	r7[-4],r8

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
		._int_line_handler_table[irq % AVR32_INTC_MAX_NUM_IRQS_PER_GRP]
80003ee6:	ee f9 ff fc 	ld.w	r9,r7[-4]
80003eea:	4a 78       	lddpc	r8,80003f84 <INTC_register_interrupt+0xbc>
80003eec:	a1 79       	lsl	r9,0x1
80003eee:	2f f9       	sub	r9,-1
80003ef0:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80003ef4:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003ef8:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80003efc:	a3 68       	lsl	r8,0x2
80003efe:	f2 08 00 08 	add	r8,r9,r8
	uint32_t int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
80003f02:	ee f9 ff f8 	ld.w	r9,r7[-8]
80003f06:	91 09       	st.w	r8[0x0],r9
	/* Program the corresponding IPRX register to set the interrupt priority
	level and the interrupt vector offset that will be fetched by the core
	interrupt system.
	NOTE: The _intx functions are intermediate assembly functions between
	the core interrupt system and the user interrupt handler. */
	if (int_level == AVR32_INTC_INT0) {
80003f08:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003f0c:	58 08       	cp.w	r8,0
80003f0e:	c0 c1       	brne	80003f26 <INTC_register_interrupt+0x5e>
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
80003f10:	fe 78 08 00 	mov	r8,-63488
80003f14:	ee f9 ff fc 	ld.w	r9,r7[-4]
80003f18:	49 cb       	lddpc	r11,80003f88 <INTC_register_interrupt+0xc0>
80003f1a:	49 da       	lddpc	r10,80003f8c <INTC_register_interrupt+0xc4>
80003f1c:	f6 0a 01 0a 	sub	r10,r11,r10
80003f20:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
80003f24:	c2 d8       	rjmp	80003f7e <INTC_register_interrupt+0xb6>
	} else if (int_level == AVR32_INTC_INT1) {
80003f26:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003f2a:	58 18       	cp.w	r8,1
80003f2c:	c0 d1       	brne	80003f46 <INTC_register_interrupt+0x7e>
		AVR32_INTC.ipr[int_grp] = IPR_INT1;
80003f2e:	fe 78 08 00 	mov	r8,-63488
80003f32:	ee f9 ff fc 	ld.w	r9,r7[-4]
80003f36:	49 7b       	lddpc	r11,80003f90 <INTC_register_interrupt+0xc8>
80003f38:	49 5a       	lddpc	r10,80003f8c <INTC_register_interrupt+0xc4>
80003f3a:	f6 0a 01 0a 	sub	r10,r11,r10
80003f3e:	bf aa       	sbr	r10,0x1e
80003f40:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
80003f44:	c1 d8       	rjmp	80003f7e <INTC_register_interrupt+0xb6>
	} else if (int_level == AVR32_INTC_INT2) {
80003f46:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003f4a:	58 28       	cp.w	r8,2
80003f4c:	c0 d1       	brne	80003f66 <INTC_register_interrupt+0x9e>
		AVR32_INTC.ipr[int_grp] = IPR_INT2;
80003f4e:	fe 78 08 00 	mov	r8,-63488
80003f52:	ee f9 ff fc 	ld.w	r9,r7[-4]
80003f56:	49 0b       	lddpc	r11,80003f94 <INTC_register_interrupt+0xcc>
80003f58:	48 da       	lddpc	r10,80003f8c <INTC_register_interrupt+0xc4>
80003f5a:	f6 0a 01 0a 	sub	r10,r11,r10
80003f5e:	bf ba       	sbr	r10,0x1f
80003f60:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
80003f64:	c0 d8       	rjmp	80003f7e <INTC_register_interrupt+0xb6>
	} else {
		AVR32_INTC.ipr[int_grp] = IPR_INT3;
80003f66:	fe 78 08 00 	mov	r8,-63488
80003f6a:	ee f9 ff fc 	ld.w	r9,r7[-4]
80003f6e:	48 bb       	lddpc	r11,80003f98 <INTC_register_interrupt+0xd0>
80003f70:	48 7a       	lddpc	r10,80003f8c <INTC_register_interrupt+0xc4>
80003f72:	f6 0a 01 0a 	sub	r10,r11,r10
80003f76:	ea 1a c0 00 	orh	r10,0xc000
80003f7a:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	}
}
80003f7e:	2f cd       	sub	sp,-16
80003f80:	e3 cd 80 80 	ldm	sp++,r7,pc
80003f84:	80 00       	ld.sh	r0,r0[0x0]
80003f86:	a2 70       	st.h	r1[0xe],r0
80003f88:	80 00       	ld.sh	r0,r0[0x0]
80003f8a:	a1 04       	ld.d	r4,r0
80003f8c:	80 00       	ld.sh	r0,r0[0x0]
80003f8e:	a0 00       	st.h	r0[0x0],r0
80003f90:	80 00       	ld.sh	r0,r0[0x0]
80003f92:	a1 12       	ld.d	r2,--r0
80003f94:	80 00       	ld.sh	r0,r0[0x0]
80003f96:	a1 20       	st.d	r0++,r0
80003f98:	80 00       	ld.sh	r0,r0[0x0]
80003f9a:	a1 2e       	st.d	r0++,lr

80003f9c <_stext>:

  .global _stext
  .type _stext, @function
_stext:
  // Set initial stack pointer.
  lda.w   sp, _estack
80003f9c:	e0 7d 00 00 	mov	sp,65536

  // Set up EVBA so interrupts can be enabled.
  lda.w   r0, _evba
  mtsr    AVR32_EVBA, r0
80003fa0:	fe c0 9f a0 	sub	r0,pc,-24672

  // Enable the exception processing.
  csrf    AVR32_SR_EM_OFFSET
80003fa4:	e3 b0 00 01 	mtsr	0x4,r0

  // Load initialized data having a global lifetime from the data LMA.
  lda.w   r0, _data
  lda.w   r1, _edata
80003fa8:	d5 53       	csrf	0x15
  cp      r0, r1
80003faa:	30 80       	mov	r0,8
  brhs    idata_load_loop_end
80003fac:	e0 61 05 20 	mov	r1,1312
  lda.w   r2, _data_lma
idata_load_loop:
  ld.d    r4, r2++
80003fb0:	02 30       	cp.w	r0,r1
  st.d    r0++, r4
80003fb2:	c0 72       	brcc	80003fc0 <idata_load_loop_end>
  cp      r0, r1
80003fb4:	fe c2 97 1c 	sub	r2,pc,-26852

80003fb8 <idata_load_loop>:
  brlo    idata_load_loop
idata_load_loop_end:

  // Clear uninitialized data having a global lifetime in the blank static storage section.
  lda.w   r0, __bss_start
80003fb8:	a5 05       	ld.d	r4,r2++
  lda.w   r1, _end
80003fba:	a1 24       	st.d	r0++,r4
  cp      r0, r1
80003fbc:	02 30       	cp.w	r0,r1
  brhs    udata_clear_loop_end
80003fbe:	cf d3       	brcs	80003fb8 <idata_load_loop>

80003fc0 <idata_load_loop_end>:
  mov     r2, 0
80003fc0:	e0 60 05 20 	mov	r0,1312
  mov     r3, 0
udata_clear_loop:
  st.d    r0++, r2
80003fc4:	e0 61 06 70 	mov	r1,1648
  cp      r0, r1
  brlo    udata_clear_loop
80003fc8:	02 30       	cp.w	r0,r1
  // Safety: Set the default "return" @ to the exit routine address.
  lda.w   lr, exit
#endif

  // Start the show.
  lda.w   pc, main
80003fca:	c0 62       	brcc	80003fd6 <udata_clear_loop_end>
80003fcc:	30 02       	mov	r2,0
80003fce:	30 03       	mov	r3,0

80003fd0 <udata_clear_loop>:
80003fd0:	a1 22       	st.d	r0++,r2
80003fd2:	02 30       	cp.w	r0,r1
80003fd4:	cf e3       	brcs	80003fd0 <udata_clear_loop>

80003fd6 <udata_clear_loop_end>:
80003fd6:	fe cf fb ce 	sub	pc,pc,-1074
80003fda:	d7 03       	nop
80003fdc:	25 6c       	sub	r12,86
80003fde:	75 00       	ld.w	r0,r10[0x40]
80003fe0:	43 61       	lddsp	r1,sp[0xd8]
80003fe2:	73 65       	ld.w	r5,r9[0x58]
80003fe4:	3a 20       	mov	r0,-94
80003fe6:	7a 20       	ld.w	r0,sp[0x8]
80003fe8:	3d 20       	mov	r0,-46
80003fea:	78 20       	ld.w	r0,r12[0x8]
80003fec:	2a 20       	sub	r0,-94
80003fee:	79 00       	ld.w	r0,r12[0x40]
80003ff0:	43 79       	lddsp	r9,sp[0xdc]
80003ff2:	63 6c       	ld.w	r12,r1[0x58]
80003ff4:	65 73       	ld.w	r3,r2[0x5c]
80003ff6:	3a 20       	mov	r0,-94
80003ff8:	00 00       	add	r0,r0
80003ffa:	00 00       	add	r0,r0
80003ffc:	49 6e       	lddpc	lr,80004054 <lcd_spi_pin_init+0x14>
80003ffe:	20 75       	sub	r5,7
80004000:	73 3a       	ld.w	r10,r9[0x4c]
80004002:	20 20       	sub	r0,2
80004004:	00 00       	add	r0,r0
80004006:	00 00       	add	r0,r0
80004008:	43 61       	lddsp	r1,sp[0xd8]
8000400a:	73 65       	ld.w	r5,r9[0x58]
8000400c:	3a 20       	mov	r0,-94
8000400e:	63 20       	ld.w	r0,r1[0x48]
80004010:	3d 20       	mov	r0,-46
80004012:	61 20       	ld.w	r0,r0[0x48]
80004014:	2a 20       	sub	r0,-94
80004016:	62 00       	ld.w	r0,r1[0x0]
80004018:	50 72       	stdsp	sp[0x1c],r2
8000401a:	65 73       	ld.w	r3,r2[0x5c]
8000401c:	73 20       	ld.w	r0,r9[0x48]
8000401e:	50 42       	stdsp	sp[0x10],r2
80004020:	30 20       	mov	r0,2
80004022:	74 6f       	ld.w	pc,r10[0x18]
80004024:	20 73       	sub	r3,7
80004026:	74 61       	ld.w	r1,r10[0x18]
80004028:	72 74       	ld.w	r4,r9[0x1c]
8000402a:	00 00       	add	r0,r0
8000402c:	55 73       	stdsp	sp[0x15c],r3
8000402e:	65 20       	ld.w	r0,r2[0x48]
80004030:	50 42       	stdsp	sp[0x10],r2
80004032:	30 20       	mov	r0,2
80004034:	74 6f       	ld.w	pc,r10[0x18]
80004036:	20 73       	sub	r3,7
80004038:	63 72       	ld.w	r2,r1[0x5c]
8000403a:	6f 6c       	ld.w	r12,r7[0x58]
8000403c:	6c 00       	ld.w	r0,r6[0x0]
	...

80004040 <lcd_spi_pin_init>:
	.spi_mode     = SPI_MODE_0,			// Select SPI mode
	.modfdis      = 1					// Disable mode fault detection
};

void lcd_spi_pin_init(void)
{
80004040:	eb cd 40 80 	pushm	r7,lr
80004044:	1a 97       	mov	r7,sp
	
	// Disabling the GPIO seems a bit counter-intuitive, but it's not to be used as
	// General Purpoise IO (GPIO) anymore, it's now supposed to be driven by the clock
	// or the SPI.
	
	AVR32_GPIO.port[0].gperc	= 1<<15;	// Disable GPIO on PA15 (LCD CLK)
80004046:	fe 78 10 00 	mov	r8,-61440
8000404a:	e0 69 80 00 	mov	r9,32768
8000404e:	91 29       	st.w	r8[0x8],r9
	AVR32_GPIO.port[0].pmr1c	= 1<<15;	// Clear PMR1
80004050:	fe 78 10 00 	mov	r8,-61440
80004054:	e0 69 80 00 	mov	r9,32768
80004058:	91 a9       	st.w	r8[0x28],r9
	AVR32_GPIO.port[0].pmr0s	= 1<<15;	// Set PMR0 = MUX mode B
8000405a:	fe 78 10 00 	mov	r8,-61440
8000405e:	e0 69 80 00 	mov	r9,32768
80004062:	91 59       	st.w	r8[0x14],r9
	
	AVR32_GPIO.port[0].gperc	= 1<<16;	// Disable GPIO on PA16 (LCD MOSI)
80004064:	fe 78 10 00 	mov	r8,-61440
80004068:	e0 79 00 00 	mov	r9,65536
8000406c:	91 29       	st.w	r8[0x8],r9
	AVR32_GPIO.port[0].pmr1c	= 1<<16;	// Clear PMR1
8000406e:	fe 78 10 00 	mov	r8,-61440
80004072:	e0 79 00 00 	mov	r9,65536
80004076:	91 a9       	st.w	r8[0x28],r9
	AVR32_GPIO.port[0].pmr0s	= 1<<16;	// Set PMR0 = MUX mode B
80004078:	fe 78 10 00 	mov	r8,-61440
8000407c:	e0 79 00 00 	mov	r9,65536
80004080:	91 59       	st.w	r8[0x14],r9
	
	AVR32_GPIO.port[0].gperc	= 1<<17;	// Disable GPIO on PA17 (LCD MISO)
80004082:	fe 78 10 00 	mov	r8,-61440
80004086:	e2 69 00 00 	mov	r9,131072
8000408a:	91 29       	st.w	r8[0x8],r9
	AVR32_GPIO.port[0].pmr1c	= 1<<17;	// Clear PMR1
8000408c:	fe 78 10 00 	mov	r8,-61440
80004090:	e2 69 00 00 	mov	r9,131072
80004094:	91 a9       	st.w	r8[0x28],r9
	AVR32_GPIO.port[0].pmr0s	= 1<<17;	// Set PMR0 = MUX mode B
80004096:	fe 78 10 00 	mov	r8,-61440
8000409a:	e2 69 00 00 	mov	r9,131072
8000409e:	91 59       	st.w	r8[0x14],r9
	
	// The DIP204B is connected to the SPI1 channel on the EVK1100 along with the SD/MMC
	// card slot, and is selected as slave by using the second chip select line PA19 (SPI1_CS2).
	// PA18 (SPI1_CS1) is used to select the SD/MMC card slot as slave.
	
	AVR32_GPIO.port[0].gperc	= 1<<19;	// Disable GPIO on PA19 (LCD CS2)
800040a0:	fe 78 10 00 	mov	r8,-61440
800040a4:	e8 69 00 00 	mov	r9,524288
800040a8:	91 29       	st.w	r8[0x8],r9
	AVR32_GPIO.port[0].pmr1c	= 1<<19;	// Clear PMR1
800040aa:	fe 78 10 00 	mov	r8,-61440
800040ae:	e8 69 00 00 	mov	r9,524288
800040b2:	91 a9       	st.w	r8[0x28],r9
	AVR32_GPIO.port[0].pmr0s	= 1<<19;	// Set PMR0 = MUX mode B
800040b4:	fe 78 10 00 	mov	r8,-61440
800040b8:	e8 69 00 00 	mov	r9,524288
800040bc:	91 59       	st.w	r8[0x14],r9
}
800040be:	e3 cd 80 80 	ldm	sp++,r7,pc
800040c2:	d7 03       	nop

800040c4 <lcd_spi_init>:

void lcd_spi_init(void)
{
800040c4:	eb cd 40 80 	pushm	r7,lr
800040c8:	1a 97       	mov	r7,sp
	spi_initMaster(DIP204_SPI, &spiOptions);			// Initialize the AVR32 as SPI MASTER
800040ca:	49 1b       	lddpc	r11,8000410c <lcd_spi_init+0x48>
800040cc:	fe 7c 28 00 	mov	r12,-55296
800040d0:	f0 1f 00 10 	mcall	80004110 <lcd_spi_init+0x4c>
	spi_selectionMode(DIP204_SPI, 0, 0, 0);				// Set selection mode: variable_ps, pcs_decode, delay
800040d4:	30 09       	mov	r9,0
800040d6:	30 0a       	mov	r10,0
800040d8:	30 0b       	mov	r11,0
800040da:	fe 7c 28 00 	mov	r12,-55296
800040de:	f0 1f 00 0e 	mcall	80004114 <lcd_spi_init+0x50>
	spi_enable(DIP204_SPI);								// Enable SPI
800040e2:	fe 7c 28 00 	mov	r12,-55296
800040e6:	f0 1f 00 0d 	mcall	80004118 <lcd_spi_init+0x54>
	spi_setupChipReg(DIP204_SPI, &spiOptions, FOSC0);	// Configure registers on MASTER
800040ea:	e0 6a 1b 00 	mov	r10,6912
800040ee:	ea 1a 00 b7 	orh	r10,0xb7
800040f2:	48 7b       	lddpc	r11,8000410c <lcd_spi_init+0x48>
800040f4:	fe 7c 28 00 	mov	r12,-55296
800040f8:	f0 1f 00 09 	mcall	8000411c <lcd_spi_init+0x58>
	dip204_init(backlight_IO, true);					// Initialize LCD
800040fc:	30 1b       	mov	r11,1
800040fe:	30 0c       	mov	r12,0
80004100:	f0 1f 00 08 	mcall	80004120 <lcd_spi_init+0x5c>
	dip204_hide_cursor();								// Hide cursor
80004104:	f0 1f 00 08 	mcall	80004124 <lcd_spi_init+0x60>
}
80004108:	e3 cd 80 80 	ldm	sp++,r7,pc
8000410c:	00 00       	add	r0,r0
8000410e:	00 0c       	add	r12,r0
80004110:	80 00       	ld.sh	r0,r0[0x0]
80004112:	32 8e       	mov	lr,40
80004114:	80 00       	ld.sh	r0,r0[0x0]
80004116:	33 22       	mov	r2,50
80004118:	80 00       	ld.sh	r0,r0[0x0]
8000411a:	36 3c       	mov	r12,99
8000411c:	80 00       	ld.sh	r0,r0[0x0]
8000411e:	34 b8       	mov	r8,75
80004120:	80 00       	ld.sh	r0,r0[0x0]
80004122:	20 08       	sub	r8,0
80004124:	80 00       	ld.sh	r0,r0[0x0]
80004126:	2a f0       	sub	r0,-81

80004128 <push_button_0_interrupt_handler>:
__attribute__((__interrupt__))
#elif __ICCAVR32__
__interrupt
#endif
static void push_button_0_interrupt_handler(void)
{
80004128:	eb cd 40 bf 	pushm	r0-r5,r7,lr
8000412c:	1a 97       	mov	r7,sp
8000412e:	21 bd       	sub	sp,108
	if (gpio_get_pin_interrupt_flag(GPIO_PUSH_BUTTON_0))
80004130:	35 8c       	mov	r12,88
80004132:	f0 1f 00 a8 	mcall	800043d0 <push_button_0_interrupt_handler+0x2a8>
80004136:	18 98       	mov	r8,r12
80004138:	58 08       	cp.w	r8,0
8000413a:	e0 80 01 46 	breq	800043c6 <push_button_0_interrupt_handler+0x29e>
	{
		float		c				= 0;
8000413e:	30 08       	mov	r8,0
80004140:	ef 48 ff cc 	st.w	r7[-52],r8
		float		a				= 1234.5678;
80004144:	e0 68 52 2b 	mov	r8,21035
80004148:	ea 18 44 9a 	orh	r8,0x449a
8000414c:	ef 48 ff d0 	st.w	r7[-48],r8
		float		b				= 8765.4321;
80004150:	e0 68 f5 ba 	mov	r8,62906
80004154:	ea 18 46 08 	orh	r8,0x4608
80004158:	ef 48 ff d4 	st.w	r7[-44],r8
		uint64_t	z				= 0;
8000415c:	30 08       	mov	r8,0
8000415e:	30 09       	mov	r9,0
80004160:	ee e9 ff d8 	st.d	r7[-40],r8
		uint32_t	x				= 12345678;
80004164:	e0 68 61 4e 	mov	r8,24910
80004168:	ea 18 00 bc 	orh	r8,0xbc
8000416c:	ef 48 ff e0 	st.w	r7[-32],r8
		uint32_t	y				= 87654321;
80004170:	e0 68 7f b1 	mov	r8,32689
80004174:	ea 18 05 39 	orh	r8,0x539
80004178:	ef 48 ff e4 	st.w	r7[-28],r8
		uint32_t	cycle_count		= 0;
8000417c:	30 08       	mov	r8,0
8000417e:	ef 48 ff e8 	st.w	r7[-24],r8
		uint32_t	cycle_in_ms		= 0;
80004182:	30 08       	mov	r8,0
80004184:	ef 48 ff ec 	st.w	r7[-20],r8
		char		cycle_count_string[9];
		char		cycle_in_ms_string[9];
		
		dip204_clear_display();											// Clear LCD
80004188:	f0 1f 00 93 	mcall	800043d4 <push_button_0_interrupt_handler+0x2ac>
		
		switch (global_counter)
8000418c:	fe f8 02 4c 	ld.w	r8,pc[588]
80004190:	11 88       	ld.ub	r8,r8[0x0]
80004192:	58 08       	cp.w	r8,0
80004194:	c0 50       	breq	8000419e <push_button_0_interrupt_handler+0x76>
80004196:	58 18       	cp.w	r8,1
80004198:	e0 80 00 8d 	breq	800042b2 <push_button_0_interrupt_handler+0x18a>
8000419c:	c1 29       	rjmp	800043c0 <push_button_0_interrupt_handler+0x298>
		{
			case 0 :
			cycle_count = Get_sys_count();								// Get the current cycle count
8000419e:	e1 b8 00 42 	mfsr	r8,0x108
800041a2:	ef 48 ff e8 	st.w	r7[-24],r8
			
			z = x * y;													// Calculate x * y
800041a6:	ee f9 ff e0 	ld.w	r9,r7[-32]
800041aa:	ee f8 ff e4 	ld.w	r8,r7[-28]
800041ae:	f2 08 02 48 	mul	r8,r9,r8
800041b2:	ef 48 ff dc 	st.w	r7[-36],r8
800041b6:	30 08       	mov	r8,0
800041b8:	ef 48 ff d8 	st.w	r7[-40],r8
			
			cycle_count = ((Get_sys_count()) - cycle_count);			// Put cycle count difference in cycle_count
800041bc:	e1 b8 00 42 	mfsr	r8,0x108
800041c0:	10 99       	mov	r9,r8
800041c2:	ee f8 ff e8 	ld.w	r8,r7[-24]
800041c6:	f2 08 01 08 	sub	r8,r9,r8
800041ca:	ef 48 ff e8 	st.w	r7[-24],r8
800041ce:	ee f8 ff e8 	ld.w	r8,r7[-24]
800041d2:	ef 48 ff f4 	st.w	r7[-12],r8
800041d6:	e0 68 1b 00 	mov	r8,6912
800041da:	ea 18 00 b7 	orh	r8,0xb7
800041de:	ef 48 ff f0 	st.w	r7[-16],r8
 *
 * \return the converted number of micro-second.
 */
__always_inline static uint32_t cpu_cy_2_us(unsigned long cy, unsigned long fcpu_hz)
{
  return ((unsigned long long)cy * 1000000 + fcpu_hz-1) / fcpu_hz;
800041e2:	ee f0 ff f4 	ld.w	r0,r7[-12]
800041e6:	30 01       	mov	r1,0
800041e8:	ee 78 42 40 	mov	r8,1000000
800041ec:	e2 08 02 4a 	mul	r10,r1,r8
800041f0:	e0 08 10 00 	mul	r8,r0,0
800041f4:	10 0a       	add	r10,r8
800041f6:	ee 78 42 40 	mov	r8,1000000
800041fa:	e0 08 06 48 	mulu.d	r8,r0,r8
800041fe:	12 0a       	add	r10,r9
80004200:	14 99       	mov	r9,r10
80004202:	ee fa ff f0 	ld.w	r10,r7[-16]
80004206:	ef 4a ff a0 	st.w	r7[-96],r10
8000420a:	30 05       	mov	r5,0
8000420c:	ef 45 ff 9c 	st.w	r7[-100],r5
80004210:	ee e4 ff 9c 	ld.d	r4,r7[-100]
80004214:	f0 04 00 0a 	add	r10,r8,r4
80004218:	f2 05 00 4b 	adc	r11,r9,r5
8000421c:	3f f8       	mov	r8,-1
8000421e:	3f f9       	mov	r9,-1
80004220:	10 0a       	add	r10,r8
80004222:	f6 09 00 4b 	adc	r11,r11,r9
80004226:	ee f4 ff f0 	ld.w	r4,r7[-16]
8000422a:	ef 44 ff 98 	st.w	r7[-104],r4
8000422e:	30 08       	mov	r8,0
80004230:	ef 48 ff 94 	st.w	r7[-108],r8
80004234:	ee e8 ff 94 	ld.d	r8,r7[-108]
80004238:	f0 1f 00 69 	mcall	800043dc <push_button_0_interrupt_handler+0x2b4>
8000423c:	14 98       	mov	r8,r10
8000423e:	16 99       	mov	r9,r11
			
			cycle_in_ms = cpu_cy_2_us(cycle_count, F_CPU);				// Convert cycle count to microseconds
80004240:	ef 48 ff ec 	st.w	r7[-20],r8
			
			sprintf(cycle_count_string, "%lu", cycle_count);			// Convert count value from int to char string
80004244:	ee c8 00 40 	sub	r8,r7,64
80004248:	ee f9 ff e8 	ld.w	r9,r7[-24]
8000424c:	1a d9       	st.w	--sp,r9
8000424e:	4e 5b       	lddpc	r11,800043e0 <push_button_0_interrupt_handler+0x2b8>
80004250:	10 9c       	mov	r12,r8
80004252:	f0 1f 00 65 	mcall	800043e4 <push_button_0_interrupt_handler+0x2bc>
80004256:	2f fd       	sub	sp,-4
			sprintf(cycle_in_ms_string, "%lu", cycle_in_ms);			// Convert millisecond value from int to char string
80004258:	ee c8 00 4c 	sub	r8,r7,76
8000425c:	ee f9 ff ec 	ld.w	r9,r7[-20]
80004260:	1a d9       	st.w	--sp,r9
80004262:	4e 0b       	lddpc	r11,800043e0 <push_button_0_interrupt_handler+0x2b8>
80004264:	10 9c       	mov	r12,r8
80004266:	f0 1f 00 60 	mcall	800043e4 <push_button_0_interrupt_handler+0x2bc>
8000426a:	2f fd       	sub	sp,-4
			
			dip204_set_cursor_position(4,1);							// Move LCD cursor
8000426c:	30 1b       	mov	r11,1
8000426e:	30 4c       	mov	r12,4
80004270:	f0 1f 00 5e 	mcall	800043e8 <push_button_0_interrupt_handler+0x2c0>
			dip204_write_string("Case: z = x * y");						// Write string to LCD
80004274:	4d ec       	lddpc	r12,800043ec <push_button_0_interrupt_handler+0x2c4>
80004276:	f0 1f 00 5f 	mcall	800043f0 <push_button_0_interrupt_handler+0x2c8>
			dip204_set_cursor_position(4,3);							// Move LCD cursor
8000427a:	30 3b       	mov	r11,3
8000427c:	30 4c       	mov	r12,4
8000427e:	f0 1f 00 5b 	mcall	800043e8 <push_button_0_interrupt_handler+0x2c0>
			dip204_write_string("Cycles: ");							// Write string to LCD
80004282:	4d dc       	lddpc	r12,800043f4 <push_button_0_interrupt_handler+0x2cc>
80004284:	f0 1f 00 5b 	mcall	800043f0 <push_button_0_interrupt_handler+0x2c8>
			dip204_write_string(cycle_count_string);					// Write string to LCD
80004288:	ee c8 00 40 	sub	r8,r7,64
8000428c:	10 9c       	mov	r12,r8
8000428e:	f0 1f 00 59 	mcall	800043f0 <push_button_0_interrupt_handler+0x2c8>
			dip204_set_cursor_position(4,4);							// Move LCD cursor
80004292:	30 4b       	mov	r11,4
80004294:	30 4c       	mov	r12,4
80004296:	f0 1f 00 55 	mcall	800043e8 <push_button_0_interrupt_handler+0x2c0>
			dip204_write_string("In us:  ");							// Write string to LCD
8000429a:	4d 8c       	lddpc	r12,800043f8 <push_button_0_interrupt_handler+0x2d0>
8000429c:	f0 1f 00 55 	mcall	800043f0 <push_button_0_interrupt_handler+0x2c8>
			dip204_write_string(cycle_in_ms_string);					// Write string to LCD
800042a0:	ee c8 00 4c 	sub	r8,r7,76
800042a4:	10 9c       	mov	r12,r8
800042a6:	f0 1f 00 53 	mcall	800043f0 <push_button_0_interrupt_handler+0x2c8>
			
			global_counter = 1;											// Increment global counter to 1
800042aa:	4c c9       	lddpc	r9,800043d8 <push_button_0_interrupt_handler+0x2b0>
800042ac:	30 18       	mov	r8,1
800042ae:	b2 88       	st.b	r9[0x0],r8
			break;
800042b0:	c8 88       	rjmp	800043c0 <push_button_0_interrupt_handler+0x298>
			
			case 1 :
			cycle_count = Get_sys_count();								// Get the current cycle count
800042b2:	e1 b8 00 42 	mfsr	r8,0x108
800042b6:	ef 48 ff e8 	st.w	r7[-24],r8
			
			c = a * b;													// Calculate a * b
800042ba:	ee fb ff d4 	ld.w	r11,r7[-44]
800042be:	ee fc ff d0 	ld.w	r12,r7[-48]
800042c2:	f0 1f 00 4f 	mcall	800043fc <push_button_0_interrupt_handler+0x2d4>
800042c6:	18 98       	mov	r8,r12
800042c8:	ef 48 ff cc 	st.w	r7[-52],r8
			
			cycle_count = ((Get_sys_count()) - cycle_count);			// Put cycle count difference in cycle_count
800042cc:	e1 b8 00 42 	mfsr	r8,0x108
800042d0:	10 99       	mov	r9,r8
800042d2:	ee f8 ff e8 	ld.w	r8,r7[-24]
800042d6:	f2 08 01 08 	sub	r8,r9,r8
800042da:	ef 48 ff e8 	st.w	r7[-24],r8
800042de:	ee f8 ff e8 	ld.w	r8,r7[-24]
800042e2:	ef 48 ff fc 	st.w	r7[-4],r8
800042e6:	e0 68 1b 00 	mov	r8,6912
800042ea:	ea 18 00 b7 	orh	r8,0xb7
800042ee:	ef 48 ff f8 	st.w	r7[-8],r8
800042f2:	ee f2 ff fc 	ld.w	r2,r7[-4]
800042f6:	30 03       	mov	r3,0
800042f8:	ee 78 42 40 	mov	r8,1000000
800042fc:	e6 08 02 4a 	mul	r10,r3,r8
80004300:	e4 08 10 00 	mul	r8,r2,0
80004304:	10 0a       	add	r10,r8
80004306:	ee 78 42 40 	mov	r8,1000000
8000430a:	e4 08 06 48 	mulu.d	r8,r2,r8
8000430e:	12 0a       	add	r10,r9
80004310:	14 99       	mov	r9,r10
80004312:	ee f5 ff f8 	ld.w	r5,r7[-8]
80004316:	ef 45 ff b0 	st.w	r7[-80],r5
8000431a:	30 04       	mov	r4,0
8000431c:	ef 44 ff ac 	st.w	r7[-84],r4
80004320:	ee e4 ff ac 	ld.d	r4,r7[-84]
80004324:	f0 04 00 0a 	add	r10,r8,r4
80004328:	f2 05 00 4b 	adc	r11,r9,r5
8000432c:	3f f8       	mov	r8,-1
8000432e:	3f f9       	mov	r9,-1
80004330:	10 0a       	add	r10,r8
80004332:	f6 09 00 4b 	adc	r11,r11,r9
80004336:	ee f4 ff f8 	ld.w	r4,r7[-8]
8000433a:	ef 44 ff a8 	st.w	r7[-88],r4
8000433e:	30 08       	mov	r8,0
80004340:	ef 48 ff a4 	st.w	r7[-92],r8
80004344:	ee e8 ff a4 	ld.d	r8,r7[-92]
80004348:	f0 1f 00 25 	mcall	800043dc <push_button_0_interrupt_handler+0x2b4>
8000434c:	14 98       	mov	r8,r10
8000434e:	16 99       	mov	r9,r11
			
			cycle_in_ms = cpu_cy_2_us(cycle_count, F_CPU);				// Convert cycle count to microseconds
80004350:	ef 48 ff ec 	st.w	r7[-20],r8
			
			sprintf(cycle_count_string, "%lu", cycle_count);			// Convert count value from int to char string
80004354:	ee c8 00 40 	sub	r8,r7,64
80004358:	ee f9 ff e8 	ld.w	r9,r7[-24]
8000435c:	1a d9       	st.w	--sp,r9
8000435e:	4a 1b       	lddpc	r11,800043e0 <push_button_0_interrupt_handler+0x2b8>
80004360:	10 9c       	mov	r12,r8
80004362:	f0 1f 00 21 	mcall	800043e4 <push_button_0_interrupt_handler+0x2bc>
80004366:	2f fd       	sub	sp,-4
			sprintf(cycle_in_ms_string, "%lu", cycle_in_ms);			// Convert millisecond value from int to char string
80004368:	ee c8 00 4c 	sub	r8,r7,76
8000436c:	ee f9 ff ec 	ld.w	r9,r7[-20]
80004370:	1a d9       	st.w	--sp,r9
80004372:	49 cb       	lddpc	r11,800043e0 <push_button_0_interrupt_handler+0x2b8>
80004374:	10 9c       	mov	r12,r8
80004376:	f0 1f 00 1c 	mcall	800043e4 <push_button_0_interrupt_handler+0x2bc>
8000437a:	2f fd       	sub	sp,-4
			
			dip204_set_cursor_position(4,1);							// Move LCD cursor
8000437c:	30 1b       	mov	r11,1
8000437e:	30 4c       	mov	r12,4
80004380:	f0 1f 00 1a 	mcall	800043e8 <push_button_0_interrupt_handler+0x2c0>
			dip204_write_string("Case: c = a * b");						// Write string to LCD
80004384:	49 fc       	lddpc	r12,80004400 <push_button_0_interrupt_handler+0x2d8>
80004386:	f0 1f 00 1b 	mcall	800043f0 <push_button_0_interrupt_handler+0x2c8>
			dip204_set_cursor_position(4,3);							// Move LCD cursor
8000438a:	30 3b       	mov	r11,3
8000438c:	30 4c       	mov	r12,4
8000438e:	f0 1f 00 17 	mcall	800043e8 <push_button_0_interrupt_handler+0x2c0>
			dip204_write_string("Cycles: ");							// Write string to LCD
80004392:	49 9c       	lddpc	r12,800043f4 <push_button_0_interrupt_handler+0x2cc>
80004394:	f0 1f 00 17 	mcall	800043f0 <push_button_0_interrupt_handler+0x2c8>
			dip204_write_string(cycle_count_string);					// Write string to LCD
80004398:	ee c8 00 40 	sub	r8,r7,64
8000439c:	10 9c       	mov	r12,r8
8000439e:	f0 1f 00 15 	mcall	800043f0 <push_button_0_interrupt_handler+0x2c8>
			dip204_set_cursor_position(4,4);							// Move LCD cursor
800043a2:	30 4b       	mov	r11,4
800043a4:	30 4c       	mov	r12,4
800043a6:	f0 1f 00 11 	mcall	800043e8 <push_button_0_interrupt_handler+0x2c0>
			dip204_write_string("In us:  ");							// Write string to LCD
800043aa:	49 4c       	lddpc	r12,800043f8 <push_button_0_interrupt_handler+0x2d0>
800043ac:	f0 1f 00 11 	mcall	800043f0 <push_button_0_interrupt_handler+0x2c8>
			dip204_write_string(cycle_in_ms_string);					// Write string to LCD
800043b0:	ee c8 00 4c 	sub	r8,r7,76
800043b4:	10 9c       	mov	r12,r8
800043b6:	f0 1f 00 0f 	mcall	800043f0 <push_button_0_interrupt_handler+0x2c8>
			
			global_counter = 0;											// Reset global counter
800043ba:	48 89       	lddpc	r9,800043d8 <push_button_0_interrupt_handler+0x2b0>
800043bc:	30 08       	mov	r8,0
800043be:	b2 88       	st.b	r9[0x0],r8
			break;
		}
		
		gpio_clear_pin_interrupt_flag(GPIO_PUSH_BUTTON_0);				// Clear interrupt flag to allow new interrupts
800043c0:	35 8c       	mov	r12,88
800043c2:	f0 1f 00 11 	mcall	80004404 <push_button_0_interrupt_handler+0x2dc>
	}
}
800043c6:	2e 5d       	sub	sp,-108
800043c8:	e3 cd 40 bf 	ldm	sp++,r0-r5,r7,lr
800043cc:	d6 03       	rete
800043ce:	00 00       	add	r0,r0
800043d0:	80 00       	ld.sh	r0,r0[0x0]
800043d2:	3d 2c       	mov	r12,-46
800043d4:	80 00       	ld.sh	r0,r0[0x0]
800043d6:	2b ac       	sub	r12,-70
800043d8:	00 00       	add	r0,r0
800043da:	06 30       	cp.w	r0,r3
800043dc:	80 00       	ld.sh	r0,r0[0x0]
800043de:	45 76       	lddsp	r6,sp[0x15c]
800043e0:	80 00       	ld.sh	r0,r0[0x0]
800043e2:	3f dc       	mov	r12,-3
800043e4:	80 00       	ld.sh	r0,r0[0x0]
800043e6:	49 24       	lddpc	r4,8000442c <main+0x24>
800043e8:	80 00       	ld.sh	r0,r0[0x0]
800043ea:	2b 24       	sub	r4,-78
800043ec:	80 00       	ld.sh	r0,r0[0x0]
800043ee:	3f e0       	mov	r0,-2
800043f0:	80 00       	ld.sh	r0,r0[0x0]
800043f2:	2d 24       	sub	r4,-46
800043f4:	80 00       	ld.sh	r0,r0[0x0]
800043f6:	3f f0       	mov	r0,-1
800043f8:	80 00       	ld.sh	r0,r0[0x0]
800043fa:	3f fc       	mov	r12,-1
800043fc:	80 00       	ld.sh	r0,r0[0x0]
800043fe:	44 94       	lddsp	r4,sp[0x124]
80004400:	80 00       	ld.sh	r0,r0[0x0]
80004402:	40 08       	lddsp	r8,sp[0x0]
80004404:	80 00       	ld.sh	r0,r0[0x0]
80004406:	3d 6a       	mov	r10,-42

80004408 <main>:



int main (void)
{
80004408:	eb cd 40 80 	pushm	r7,lr
8000440c:	1a 97       	mov	r7,sp
	pm_switch_to_osc0(&AVR32_PM, FOSC0, OSC0_STARTUP);					// Set Oscillator 0 (FOSC0 @ 12 MHz) as main CPU clock
8000440e:	30 3a       	mov	r10,3
80004410:	e0 6b 1b 00 	mov	r11,6912
80004414:	ea 1b 00 b7 	orh	r11,0xb7
80004418:	fe 7c 0c 00 	mov	r12,-62464
8000441c:	f0 1f 00 12 	mcall	80004464 <main+0x5c>
	
	board_init();														// Initialize the EVK1100 and its pin configuration
80004420:	f0 1f 00 12 	mcall	80004468 <main+0x60>
	
	lcd_spi_pin_init();													// Initialize correct pins for the SPI
80004424:	f0 1f 00 12 	mcall	8000446c <main+0x64>
	lcd_spi_init();														// Initialize SPI MASTER, enable SPI and initialize LCD
80004428:	f0 1f 00 12 	mcall	80004470 <main+0x68>
	
	Disable_global_interrupt();											// Disable all interrupts
8000442c:	d3 03       	ssrf	0x10
	
	INTC_init_interrupts();												// Initialize interrupt module
8000442e:	f0 1f 00 12 	mcall	80004474 <main+0x6c>
	
	gpio_enable_pin_interrupt(GPIO_PUSH_BUTTON_0, GPIO_FALLING_EDGE);	// Enable rising edge interrupt on Push Button 0
80004432:	30 2b       	mov	r11,2
80004434:	35 8c       	mov	r12,88
80004436:	f0 1f 00 11 	mcall	80004478 <main+0x70>
	
	INTC_register_interrupt( &push_button_0_interrupt_handler,
8000443a:	30 1a       	mov	r10,1
8000443c:	34 bb       	mov	r11,75
8000443e:	49 0c       	lddpc	r12,8000447c <main+0x74>
80004440:	f0 1f 00 10 	mcall	80004480 <main+0x78>
	AVR32_GPIO_IRQ_0 + (GPIO_PUSH_BUTTON_0/8),
	AVR32_INTC_INT1);							// Define handler and configure interrupt with INT1 priority
	
	Enable_global_interrupt();											// Enable global interrupts
80004444:	d5 03       	csrf	0x10
	
	dip204_set_cursor_position(2,2);									// Move LCD cursor
80004446:	30 2b       	mov	r11,2
80004448:	30 2c       	mov	r12,2
8000444a:	f0 1f 00 0f 	mcall	80004484 <main+0x7c>
	dip204_write_string("Press PB0 to start");							// Write string to LCD
8000444e:	48 fc       	lddpc	r12,80004488 <main+0x80>
80004450:	f0 1f 00 0f 	mcall	8000448c <main+0x84>
	dip204_set_cursor_position(2,3);									// Move LCD cursor
80004454:	30 3b       	mov	r11,3
80004456:	30 2c       	mov	r12,2
80004458:	f0 1f 00 0b 	mcall	80004484 <main+0x7c>
	dip204_write_string("Use PB0 to scroll");							// Write string to LCD
8000445c:	48 dc       	lddpc	r12,80004490 <main+0x88>
8000445e:	f0 1f 00 0c 	mcall	8000448c <main+0x84>
	
	while (1)															// Main while loop
	{
		// Do nothing
	}
80004462:	c0 08       	rjmp	80004462 <main+0x5a>
80004464:	80 00       	ld.sh	r0,r0[0x0]
80004466:	30 8c       	mov	r12,8
80004468:	80 00       	ld.sh	r0,r0[0x0]
8000446a:	37 0c       	mov	r12,112
8000446c:	80 00       	ld.sh	r0,r0[0x0]
8000446e:	40 40       	lddsp	r0,sp[0x10]
80004470:	80 00       	ld.sh	r0,r0[0x0]
80004472:	40 c4       	lddsp	r4,sp[0x30]
80004474:	80 00       	ld.sh	r0,r0[0x0]
80004476:	3e 30       	mov	r0,-29
80004478:	80 00       	ld.sh	r0,r0[0x0]
8000447a:	3c b8       	mov	r8,-53
8000447c:	80 00       	ld.sh	r0,r0[0x0]
8000447e:	41 28       	lddsp	r8,sp[0x48]
80004480:	80 00       	ld.sh	r0,r0[0x0]
80004482:	3e c8       	mov	r8,-20
80004484:	80 00       	ld.sh	r0,r0[0x0]
80004486:	2b 24       	sub	r4,-78
80004488:	80 00       	ld.sh	r0,r0[0x0]
8000448a:	40 18       	lddsp	r8,sp[0x4]
8000448c:	80 00       	ld.sh	r0,r0[0x0]
8000448e:	2d 24       	sub	r4,-46
80004490:	80 00       	ld.sh	r0,r0[0x0]
80004492:	40 2c       	lddsp	r12,sp[0x8]

80004494 <__avr32_f32_mul>:
80004494:	18 98       	mov	r8,r12
80004496:	16 5c       	eor	r12,r11
80004498:	e6 1c 80 00 	andh	r12,0x8000,COH
8000449c:	bf d8       	cbr	r8,0x1f
8000449e:	c6 60       	breq	8000456a <__avr32_f32_mul_op1_zero>
800044a0:	bf db       	cbr	r11,0x1f
800044a2:	f0 0b 0c 4a 	max	r10,r8,r11
800044a6:	f0 0b 0d 49 	min	r9,r8,r11
800044aa:	f4 08 15 08 	lsl	r8,r10,0x8
800044ae:	bf b8       	sbr	r8,0x1f
800044b0:	b7 9a       	lsr	r10,0x17
800044b2:	e0 4a 00 ff 	cp.w	r10,255
800044b6:	c3 d0       	breq	80004530 <__avr32_f32_mul_op1_nan_or_inf>
800044b8:	f2 0b 15 08 	lsl	r11,r9,0x8
800044bc:	bf bb       	sbr	r11,0x1f
800044be:	b7 99       	lsr	r9,0x17
800044c0:	c2 40       	breq	80004508 <__avr32_f32_mul_op2_subnormal>
800044c2:	14 09       	add	r9,r10
800044c4:	f0 0b 06 4a 	mulu.d	r10,r8,r11
800044c8:	f6 08 15 01 	lsl	r8,r11,0x1
800044cc:	f0 0b 17 20 	movhs	r11,r8
800044d0:	f7 b9 02 01 	subhs	r9,1
800044d4:	a9 8a       	lsr	r10,0x8
800044d6:	f5 db d3 08 	bfins	r10,r11,0x18,0x8
800044da:	27 e9       	sub	r9,126
800044dc:	e0 8a 00 39 	brle	8000454e <__avr32_f32_mul_res_subnormal>
800044e0:	e0 49 00 ff 	cp.w	r9,255
800044e4:	c0 f4       	brge	80004502 <__avr32_f32_mul_round+0x14>
800044e6:	f9 eb 12 8c 	or	r12,r12,r11>>0x8
800044ea:	f9 d9 d2 e8 	bfins	r12,r9,0x17,0x8

800044ee <__avr32_f32_mul_round>:
800044ee:	fc 18 80 00 	movh	r8,0x8000
800044f2:	ed bc 00 00 	bld	r12,0x0
800044f6:	f7 b8 01 ff 	subne	r8,-1
800044fa:	10 3a       	cp.w	r10,r8
800044fc:	f7 bc 02 ff 	subhs	r12,-1
80004500:	5e fc       	retal	r12
80004502:	ea 1c 7f 80 	orh	r12,0x7f80
80004506:	5e fc       	retal	r12

80004508 <__avr32_f32_mul_op2_subnormal>:
80004508:	bf db       	cbr	r11,0x1f
8000450a:	f6 09 12 00 	clz	r9,r11
8000450e:	5e 3d       	retlo	0
80004510:	20 89       	sub	r9,8
80004512:	f6 09 09 4b 	lsl	r11,r11,r9
80004516:	f2 09 11 01 	rsub	r9,r9,1
8000451a:	14 7a       	tst	r10,r10
8000451c:	cd 31       	brne	800044c2 <__avr32_f32_mul+0x2e>
8000451e:	bf d8       	cbr	r8,0x1f
80004520:	f6 0a 12 00 	clz	r10,r11
80004524:	5e 3d       	retlo	0
80004526:	f0 0a 09 48 	lsl	r8,r8,r10
8000452a:	f4 0a 11 01 	rsub	r10,r10,1
8000452e:	cc ab       	rjmp	800044c2 <__avr32_f32_mul+0x2e>

80004530 <__avr32_f32_mul_op1_nan_or_inf>:
80004530:	f0 0b 15 01 	lsl	r11,r8,0x1
80004534:	5e 1e       	retne	-1
80004536:	12 79       	tst	r9,r9
80004538:	5e 0e       	reteq	-1
8000453a:	f9 da d2 e8 	bfins	r12,r10,0x17,0x8
8000453e:	f2 0b 16 17 	lsr	r11,r9,0x17
80004542:	e0 4b 00 ff 	cp.w	r11,255
80004546:	5e 1c       	retne	r12
80004548:	a9 79       	lsl	r9,0x9
8000454a:	5e 0c       	reteq	r12
8000454c:	5e fe       	retal	-1

8000454e <__avr32_f32_mul_res_subnormal>:
8000454e:	f2 09 11 09 	rsub	r9,r9,9
80004552:	f2 08 11 20 	rsub	r8,r9,32
80004556:	5e 3d       	retlo	0
80004558:	f6 09 0a 49 	lsr	r9,r11,r9
8000455c:	12 4c       	or	r12,r9
8000455e:	f6 08 09 4b 	lsl	r11,r11,r8
80004562:	e4 1a 00 ff 	andh	r10,0xff
80004566:	16 4a       	or	r10,r11
80004568:	cc 3b       	rjmp	800044ee <__avr32_f32_mul_round>

8000456a <__avr32_f32_mul_op1_zero>:
8000456a:	f5 db c2 e8 	bfextu	r10,r11,0x17,0x8
8000456e:	e0 4a 00 ff 	cp.w	r10,255
80004572:	5e 1c       	retne	r12
80004574:	5e 0e       	reteq	-1

80004576 <__avr32_udiv64>:
80004576:	d4 31       	pushm	r0-r7,lr
80004578:	1a 97       	mov	r7,sp
8000457a:	20 3d       	sub	sp,12
8000457c:	10 9c       	mov	r12,r8
8000457e:	12 9e       	mov	lr,r9
80004580:	14 93       	mov	r3,r10
80004582:	58 09       	cp.w	r9,0
80004584:	e0 81 00 bd 	brne	800046fe <__avr32_udiv64+0x188>
80004588:	16 38       	cp.w	r8,r11
8000458a:	e0 88 00 40 	brls	8000460a <__avr32_udiv64+0x94>
8000458e:	f0 08 12 00 	clz	r8,r8
80004592:	c0 d0       	breq	800045ac <__avr32_udiv64+0x36>
80004594:	f6 08 09 4b 	lsl	r11,r11,r8
80004598:	f0 09 11 20 	rsub	r9,r8,32
8000459c:	f8 08 09 4c 	lsl	r12,r12,r8
800045a0:	f4 09 0a 49 	lsr	r9,r10,r9
800045a4:	f4 08 09 43 	lsl	r3,r10,r8
800045a8:	f3 eb 10 0b 	or	r11,r9,r11
800045ac:	f8 0e 16 10 	lsr	lr,r12,0x10
800045b0:	f5 dc c0 10 	bfextu	r10,r12,0x0,0x10
800045b4:	f6 0e 0d 00 	divu	r0,r11,lr
800045b8:	e6 0b 16 10 	lsr	r11,r3,0x10
800045bc:	00 99       	mov	r9,r0
800045be:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
800045c2:	e0 0a 02 48 	mul	r8,r0,r10
800045c6:	10 3b       	cp.w	r11,r8
800045c8:	c0 a2       	brcc	800045dc <__avr32_udiv64+0x66>
800045ca:	20 19       	sub	r9,1
800045cc:	18 0b       	add	r11,r12
800045ce:	18 3b       	cp.w	r11,r12
800045d0:	c0 63       	brcs	800045dc <__avr32_udiv64+0x66>
800045d2:	10 3b       	cp.w	r11,r8
800045d4:	f7 b9 03 01 	sublo	r9,1
800045d8:	f7 dc e3 0b 	addcs	r11,r11,r12
800045dc:	f6 08 01 01 	sub	r1,r11,r8
800045e0:	e7 d3 c0 10 	bfextu	r3,r3,0x0,0x10
800045e4:	e2 0e 0d 00 	divu	r0,r1,lr
800045e8:	e7 e1 11 03 	or	r3,r3,r1<<0x10
800045ec:	00 98       	mov	r8,r0
800045ee:	e0 0a 02 4a 	mul	r10,r0,r10
800045f2:	14 33       	cp.w	r3,r10
800045f4:	c0 82       	brcc	80004604 <__avr32_udiv64+0x8e>
800045f6:	20 18       	sub	r8,1
800045f8:	18 03       	add	r3,r12
800045fa:	18 33       	cp.w	r3,r12
800045fc:	c0 43       	brcs	80004604 <__avr32_udiv64+0x8e>
800045fe:	14 33       	cp.w	r3,r10
80004600:	f7 b8 03 01 	sublo	r8,1
80004604:	f1 e9 11 08 	or	r8,r8,r9<<0x10
80004608:	cd f8       	rjmp	800047c6 <__avr32_udiv64+0x250>
8000460a:	58 08       	cp.w	r8,0
8000460c:	c0 51       	brne	80004616 <__avr32_udiv64+0xa0>
8000460e:	30 19       	mov	r9,1
80004610:	f2 08 0d 08 	divu	r8,r9,r8
80004614:	10 9c       	mov	r12,r8
80004616:	f8 06 12 00 	clz	r6,r12
8000461a:	c0 41       	brne	80004622 <__avr32_udiv64+0xac>
8000461c:	18 1b       	sub	r11,r12
8000461e:	30 19       	mov	r9,1
80004620:	c4 08       	rjmp	800046a0 <__avr32_udiv64+0x12a>
80004622:	ec 01 11 20 	rsub	r1,r6,32
80004626:	f4 01 0a 49 	lsr	r9,r10,r1
8000462a:	f8 06 09 4c 	lsl	r12,r12,r6
8000462e:	f6 06 09 48 	lsl	r8,r11,r6
80004632:	f6 01 0a 41 	lsr	r1,r11,r1
80004636:	f3 e8 10 08 	or	r8,r9,r8
8000463a:	f8 03 16 10 	lsr	r3,r12,0x10
8000463e:	eb dc c0 10 	bfextu	r5,r12,0x0,0x10
80004642:	e2 03 0d 00 	divu	r0,r1,r3
80004646:	f0 0b 16 10 	lsr	r11,r8,0x10
8000464a:	00 9e       	mov	lr,r0
8000464c:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80004650:	e0 05 02 49 	mul	r9,r0,r5
80004654:	12 3b       	cp.w	r11,r9
80004656:	c0 a2       	brcc	8000466a <__avr32_udiv64+0xf4>
80004658:	20 1e       	sub	lr,1
8000465a:	18 0b       	add	r11,r12
8000465c:	18 3b       	cp.w	r11,r12
8000465e:	c0 63       	brcs	8000466a <__avr32_udiv64+0xf4>
80004660:	12 3b       	cp.w	r11,r9
80004662:	f7 be 03 01 	sublo	lr,1
80004666:	f7 dc e3 0b 	addcs	r11,r11,r12
8000466a:	12 1b       	sub	r11,r9
8000466c:	f1 d8 c0 10 	bfextu	r8,r8,0x0,0x10
80004670:	f6 03 0d 02 	divu	r2,r11,r3
80004674:	f1 e3 11 08 	or	r8,r8,r3<<0x10
80004678:	04 99       	mov	r9,r2
8000467a:	e4 05 02 4b 	mul	r11,r2,r5
8000467e:	16 38       	cp.w	r8,r11
80004680:	c0 a2       	brcc	80004694 <__avr32_udiv64+0x11e>
80004682:	20 19       	sub	r9,1
80004684:	18 08       	add	r8,r12
80004686:	18 38       	cp.w	r8,r12
80004688:	c0 63       	brcs	80004694 <__avr32_udiv64+0x11e>
8000468a:	16 38       	cp.w	r8,r11
8000468c:	f7 b9 03 01 	sublo	r9,1
80004690:	f1 dc e3 08 	addcs	r8,r8,r12
80004694:	f4 06 09 43 	lsl	r3,r10,r6
80004698:	f0 0b 01 0b 	sub	r11,r8,r11
8000469c:	f3 ee 11 09 	or	r9,r9,lr<<0x10
800046a0:	f8 06 16 10 	lsr	r6,r12,0x10
800046a4:	fd dc c0 10 	bfextu	lr,r12,0x0,0x10
800046a8:	f6 06 0d 00 	divu	r0,r11,r6
800046ac:	e6 0b 16 10 	lsr	r11,r3,0x10
800046b0:	00 9a       	mov	r10,r0
800046b2:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
800046b6:	e0 0e 02 48 	mul	r8,r0,lr
800046ba:	10 3b       	cp.w	r11,r8
800046bc:	c0 a2       	brcc	800046d0 <__avr32_udiv64+0x15a>
800046be:	20 1a       	sub	r10,1
800046c0:	18 0b       	add	r11,r12
800046c2:	18 3b       	cp.w	r11,r12
800046c4:	c0 63       	brcs	800046d0 <__avr32_udiv64+0x15a>
800046c6:	10 3b       	cp.w	r11,r8
800046c8:	f7 ba 03 01 	sublo	r10,1
800046cc:	f7 dc e3 0b 	addcs	r11,r11,r12
800046d0:	f6 08 01 01 	sub	r1,r11,r8
800046d4:	e7 d3 c0 10 	bfextu	r3,r3,0x0,0x10
800046d8:	e2 06 0d 00 	divu	r0,r1,r6
800046dc:	e7 e1 11 03 	or	r3,r3,r1<<0x10
800046e0:	00 98       	mov	r8,r0
800046e2:	e0 0e 02 4b 	mul	r11,r0,lr
800046e6:	16 33       	cp.w	r3,r11
800046e8:	c0 82       	brcc	800046f8 <__avr32_udiv64+0x182>
800046ea:	20 18       	sub	r8,1
800046ec:	18 03       	add	r3,r12
800046ee:	18 33       	cp.w	r3,r12
800046f0:	c0 43       	brcs	800046f8 <__avr32_udiv64+0x182>
800046f2:	16 33       	cp.w	r3,r11
800046f4:	f7 b8 03 01 	sublo	r8,1
800046f8:	f1 ea 11 08 	or	r8,r8,r10<<0x10
800046fc:	c6 98       	rjmp	800047ce <__avr32_udiv64+0x258>
800046fe:	16 39       	cp.w	r9,r11
80004700:	e0 8b 00 65 	brhi	800047ca <__avr32_udiv64+0x254>
80004704:	f2 09 12 00 	clz	r9,r9
80004708:	c0 b1       	brne	8000471e <__avr32_udiv64+0x1a8>
8000470a:	10 3a       	cp.w	r10,r8
8000470c:	5f 2a       	srhs	r10
8000470e:	1c 3b       	cp.w	r11,lr
80004710:	5f b8       	srhi	r8
80004712:	10 4a       	or	r10,r8
80004714:	f2 0a 18 00 	cp.b	r10,r9
80004718:	c5 90       	breq	800047ca <__avr32_udiv64+0x254>
8000471a:	30 18       	mov	r8,1
8000471c:	c5 98       	rjmp	800047ce <__avr32_udiv64+0x258>
8000471e:	f0 09 09 46 	lsl	r6,r8,r9
80004722:	f2 03 11 20 	rsub	r3,r9,32
80004726:	fc 09 09 4e 	lsl	lr,lr,r9
8000472a:	f0 03 0a 48 	lsr	r8,r8,r3
8000472e:	f6 09 09 4c 	lsl	r12,r11,r9
80004732:	f4 03 0a 42 	lsr	r2,r10,r3
80004736:	ef 46 ff f4 	st.w	r7[-12],r6
8000473a:	f6 03 0a 43 	lsr	r3,r11,r3
8000473e:	18 42       	or	r2,r12
80004740:	f1 ee 10 0c 	or	r12,r8,lr
80004744:	f8 01 16 10 	lsr	r1,r12,0x10
80004748:	ed dc c0 10 	bfextu	r6,r12,0x0,0x10
8000474c:	e6 01 0d 04 	divu	r4,r3,r1
80004750:	e4 03 16 10 	lsr	r3,r2,0x10
80004754:	08 9e       	mov	lr,r4
80004756:	e7 e5 11 03 	or	r3,r3,r5<<0x10
8000475a:	e8 06 02 48 	mul	r8,r4,r6
8000475e:	10 33       	cp.w	r3,r8
80004760:	c0 a2       	brcc	80004774 <__avr32_udiv64+0x1fe>
80004762:	20 1e       	sub	lr,1
80004764:	18 03       	add	r3,r12
80004766:	18 33       	cp.w	r3,r12
80004768:	c0 63       	brcs	80004774 <__avr32_udiv64+0x1fe>
8000476a:	10 33       	cp.w	r3,r8
8000476c:	f7 be 03 01 	sublo	lr,1
80004770:	e7 dc e3 03 	addcs	r3,r3,r12
80004774:	10 13       	sub	r3,r8
80004776:	f7 d2 c0 10 	bfextu	r11,r2,0x0,0x10
8000477a:	e6 01 0d 00 	divu	r0,r3,r1
8000477e:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80004782:	00 98       	mov	r8,r0
80004784:	e0 06 02 46 	mul	r6,r0,r6
80004788:	0c 3b       	cp.w	r11,r6
8000478a:	c0 a2       	brcc	8000479e <__avr32_udiv64+0x228>
8000478c:	20 18       	sub	r8,1
8000478e:	18 0b       	add	r11,r12
80004790:	18 3b       	cp.w	r11,r12
80004792:	c0 63       	brcs	8000479e <__avr32_udiv64+0x228>
80004794:	0c 3b       	cp.w	r11,r6
80004796:	f7 dc e3 0b 	addcs	r11,r11,r12
8000479a:	f7 b8 03 01 	sublo	r8,1
8000479e:	f1 ee 11 08 	or	r8,r8,lr<<0x10
800047a2:	ee f4 ff f4 	ld.w	r4,r7[-12]
800047a6:	0c 1b       	sub	r11,r6
800047a8:	f0 04 06 42 	mulu.d	r2,r8,r4
800047ac:	06 95       	mov	r5,r3
800047ae:	16 35       	cp.w	r5,r11
800047b0:	e0 8b 00 0a 	brhi	800047c4 <__avr32_udiv64+0x24e>
800047b4:	5f 0b       	sreq	r11
800047b6:	f4 09 09 49 	lsl	r9,r10,r9
800047ba:	12 32       	cp.w	r2,r9
800047bc:	5f b9       	srhi	r9
800047be:	f7 e9 00 09 	and	r9,r11,r9
800047c2:	c0 60       	breq	800047ce <__avr32_udiv64+0x258>
800047c4:	20 18       	sub	r8,1
800047c6:	30 09       	mov	r9,0
800047c8:	c0 38       	rjmp	800047ce <__avr32_udiv64+0x258>
800047ca:	30 09       	mov	r9,0
800047cc:	12 98       	mov	r8,r9
800047ce:	10 9a       	mov	r10,r8
800047d0:	12 93       	mov	r3,r9
800047d2:	10 92       	mov	r2,r8
800047d4:	12 9b       	mov	r11,r9
800047d6:	2f dd       	sub	sp,-12
800047d8:	d8 32       	popm	r0-r7,pc

800047da <memcpy>:
800047da:	58 8a       	cp.w	r10,8
800047dc:	c2 f5       	brlt	8000483a <memcpy+0x60>
800047de:	f9 eb 10 09 	or	r9,r12,r11
800047e2:	e2 19 00 03 	andl	r9,0x3,COH
800047e6:	e0 81 00 97 	brne	80004914 <memcpy+0x13a>
800047ea:	e0 4a 00 20 	cp.w	r10,32
800047ee:	c3 b4       	brge	80004864 <memcpy+0x8a>
800047f0:	f4 08 14 02 	asr	r8,r10,0x2
800047f4:	f0 09 11 08 	rsub	r9,r8,8
800047f8:	fe 09 00 2f 	add	pc,pc,r9<<0x2
800047fc:	76 69       	ld.w	r9,r11[0x18]
800047fe:	99 69       	st.w	r12[0x18],r9
80004800:	76 59       	ld.w	r9,r11[0x14]
80004802:	99 59       	st.w	r12[0x14],r9
80004804:	76 49       	ld.w	r9,r11[0x10]
80004806:	99 49       	st.w	r12[0x10],r9
80004808:	76 39       	ld.w	r9,r11[0xc]
8000480a:	99 39       	st.w	r12[0xc],r9
8000480c:	76 29       	ld.w	r9,r11[0x8]
8000480e:	99 29       	st.w	r12[0x8],r9
80004810:	76 19       	ld.w	r9,r11[0x4]
80004812:	99 19       	st.w	r12[0x4],r9
80004814:	76 09       	ld.w	r9,r11[0x0]
80004816:	99 09       	st.w	r12[0x0],r9
80004818:	f6 08 00 2b 	add	r11,r11,r8<<0x2
8000481c:	f8 08 00 28 	add	r8,r12,r8<<0x2
80004820:	e0 1a 00 03 	andl	r10,0x3
80004824:	f4 0a 11 04 	rsub	r10,r10,4
80004828:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
8000482c:	17 a9       	ld.ub	r9,r11[0x2]
8000482e:	b0 a9       	st.b	r8[0x2],r9
80004830:	17 99       	ld.ub	r9,r11[0x1]
80004832:	b0 99       	st.b	r8[0x1],r9
80004834:	17 89       	ld.ub	r9,r11[0x0]
80004836:	b0 89       	st.b	r8[0x0],r9
80004838:	5e fc       	retal	r12
8000483a:	f4 0a 11 09 	rsub	r10,r10,9
8000483e:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
80004842:	17 f9       	ld.ub	r9,r11[0x7]
80004844:	b8 f9       	st.b	r12[0x7],r9
80004846:	17 e9       	ld.ub	r9,r11[0x6]
80004848:	b8 e9       	st.b	r12[0x6],r9
8000484a:	17 d9       	ld.ub	r9,r11[0x5]
8000484c:	b8 d9       	st.b	r12[0x5],r9
8000484e:	17 c9       	ld.ub	r9,r11[0x4]
80004850:	b8 c9       	st.b	r12[0x4],r9
80004852:	17 b9       	ld.ub	r9,r11[0x3]
80004854:	b8 b9       	st.b	r12[0x3],r9
80004856:	17 a9       	ld.ub	r9,r11[0x2]
80004858:	b8 a9       	st.b	r12[0x2],r9
8000485a:	17 99       	ld.ub	r9,r11[0x1]
8000485c:	b8 99       	st.b	r12[0x1],r9
8000485e:	17 89       	ld.ub	r9,r11[0x0]
80004860:	b8 89       	st.b	r12[0x0],r9
80004862:	5e fc       	retal	r12
80004864:	eb cd 40 c0 	pushm	r6-r7,lr
80004868:	18 99       	mov	r9,r12
8000486a:	22 0a       	sub	r10,32
8000486c:	b7 07       	ld.d	r6,r11++
8000486e:	b3 26       	st.d	r9++,r6
80004870:	b7 07       	ld.d	r6,r11++
80004872:	b3 26       	st.d	r9++,r6
80004874:	b7 07       	ld.d	r6,r11++
80004876:	b3 26       	st.d	r9++,r6
80004878:	b7 07       	ld.d	r6,r11++
8000487a:	b3 26       	st.d	r9++,r6
8000487c:	22 0a       	sub	r10,32
8000487e:	cf 74       	brge	8000486c <memcpy+0x92>
80004880:	2f 0a       	sub	r10,-16
80004882:	c0 65       	brlt	8000488e <memcpy+0xb4>
80004884:	b7 07       	ld.d	r6,r11++
80004886:	b3 26       	st.d	r9++,r6
80004888:	b7 07       	ld.d	r6,r11++
8000488a:	b3 26       	st.d	r9++,r6
8000488c:	21 0a       	sub	r10,16
8000488e:	5c 3a       	neg	r10
80004890:	fe 0a 00 3f 	add	pc,pc,r10<<0x3
80004894:	d7 03       	nop
80004896:	d7 03       	nop
80004898:	f7 36 00 0e 	ld.ub	r6,r11[14]
8000489c:	f3 66 00 0e 	st.b	r9[14],r6
800048a0:	f7 36 00 0d 	ld.ub	r6,r11[13]
800048a4:	f3 66 00 0d 	st.b	r9[13],r6
800048a8:	f7 36 00 0c 	ld.ub	r6,r11[12]
800048ac:	f3 66 00 0c 	st.b	r9[12],r6
800048b0:	f7 36 00 0b 	ld.ub	r6,r11[11]
800048b4:	f3 66 00 0b 	st.b	r9[11],r6
800048b8:	f7 36 00 0a 	ld.ub	r6,r11[10]
800048bc:	f3 66 00 0a 	st.b	r9[10],r6
800048c0:	f7 36 00 09 	ld.ub	r6,r11[9]
800048c4:	f3 66 00 09 	st.b	r9[9],r6
800048c8:	f7 36 00 08 	ld.ub	r6,r11[8]
800048cc:	f3 66 00 08 	st.b	r9[8],r6
800048d0:	f7 36 00 07 	ld.ub	r6,r11[7]
800048d4:	f3 66 00 07 	st.b	r9[7],r6
800048d8:	f7 36 00 06 	ld.ub	r6,r11[6]
800048dc:	f3 66 00 06 	st.b	r9[6],r6
800048e0:	f7 36 00 05 	ld.ub	r6,r11[5]
800048e4:	f3 66 00 05 	st.b	r9[5],r6
800048e8:	f7 36 00 04 	ld.ub	r6,r11[4]
800048ec:	f3 66 00 04 	st.b	r9[4],r6
800048f0:	f7 36 00 03 	ld.ub	r6,r11[3]
800048f4:	f3 66 00 03 	st.b	r9[3],r6
800048f8:	f7 36 00 02 	ld.ub	r6,r11[2]
800048fc:	f3 66 00 02 	st.b	r9[2],r6
80004900:	f7 36 00 01 	ld.ub	r6,r11[1]
80004904:	f3 66 00 01 	st.b	r9[1],r6
80004908:	f7 36 00 00 	ld.ub	r6,r11[0]
8000490c:	f3 66 00 00 	st.b	r9[0],r6
80004910:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80004914:	20 1a       	sub	r10,1
80004916:	f6 0a 07 09 	ld.ub	r9,r11[r10]
8000491a:	f8 0a 0b 09 	st.b	r12[r10],r9
8000491e:	cf b1       	brne	80004914 <memcpy+0x13a>
80004920:	5e fc       	retal	r12
80004922:	d7 03       	nop

80004924 <sprintf>:
80004924:	d4 01       	pushm	lr
80004926:	21 7d       	sub	sp,92
80004928:	e0 68 ff ff 	mov	r8,65535
8000492c:	ea 18 7f ff 	orh	r8,0x7fff
80004930:	50 58       	stdsp	sp[0x14],r8
80004932:	50 28       	stdsp	sp[0x8],r8
80004934:	e0 68 02 08 	mov	r8,520
80004938:	ba 68       	st.h	sp[0xc],r8
8000493a:	3f f8       	mov	r8,-1
8000493c:	ba 78       	st.h	sp[0xe],r8
8000493e:	e0 68 01 0c 	mov	r8,268
80004942:	50 4c       	stdsp	sp[0x10],r12
80004944:	16 9a       	mov	r10,r11
80004946:	50 0c       	stdsp	sp[0x0],r12
80004948:	fa c9 ff a0 	sub	r9,sp,-96
8000494c:	70 0c       	ld.w	r12,r8[0x0]
8000494e:	1a 9b       	mov	r11,sp
80004950:	c9 ed       	rcall	80004c8c <_vfprintf_r>
80004952:	30 09       	mov	r9,0
80004954:	40 08       	lddsp	r8,sp[0x0]
80004956:	b0 89       	st.b	r8[0x0],r9
80004958:	2e 9d       	sub	sp,-92
8000495a:	d8 02       	popm	pc

8000495c <get_arg>:
8000495c:	d4 31       	pushm	r0-r7,lr
8000495e:	20 8d       	sub	sp,32
80004960:	fa c4 ff bc 	sub	r4,sp,-68
80004964:	50 4b       	stdsp	sp[0x10],r11
80004966:	68 2e       	ld.w	lr,r4[0x8]
80004968:	50 58       	stdsp	sp[0x14],r8
8000496a:	12 96       	mov	r6,r9
8000496c:	7c 0b       	ld.w	r11,lr[0x0]
8000496e:	70 05       	ld.w	r5,r8[0x0]
80004970:	50 6e       	stdsp	sp[0x18],lr
80004972:	58 0b       	cp.w	r11,0
80004974:	f4 0b 17 00 	moveq	r11,r10
80004978:	68 03       	ld.w	r3,r4[0x0]
8000497a:	68 11       	ld.w	r1,r4[0x4]
8000497c:	40 49       	lddsp	r9,sp[0x10]
8000497e:	30 08       	mov	r8,0
80004980:	c2 89       	rjmp	80004bd0 <get_arg+0x274>
80004982:	2f fb       	sub	r11,-1
80004984:	32 5c       	mov	r12,37
80004986:	17 8a       	ld.ub	r10,r11[0x0]
80004988:	f8 0a 18 00 	cp.b	r10,r12
8000498c:	5f 1e       	srne	lr
8000498e:	f0 0a 18 00 	cp.b	r10,r8
80004992:	5f 1c       	srne	r12
80004994:	fd ec 00 0c 	and	r12,lr,r12
80004998:	f0 0c 18 00 	cp.b	r12,r8
8000499c:	cf 31       	brne	80004982 <get_arg+0x26>
8000499e:	58 0a       	cp.w	r10,0
800049a0:	e0 80 01 25 	breq	80004bea <get_arg+0x28e>
800049a4:	30 0c       	mov	r12,0
800049a6:	3f fa       	mov	r10,-1
800049a8:	18 90       	mov	r0,r12
800049aa:	50 3a       	stdsp	sp[0xc],r10
800049ac:	18 94       	mov	r4,r12
800049ae:	18 92       	mov	r2,r12
800049b0:	f8 0c 00 3c 	add	r12,r12,r12<<0x3
800049b4:	16 97       	mov	r7,r11
800049b6:	50 7c       	stdsp	sp[0x1c],r12
800049b8:	fe cc a3 d4 	sub	r12,pc,-23596
800049bc:	0f 3a       	ld.ub	r10,r7++
800049be:	f8 0a 07 0e 	ld.ub	lr,r12[r10]
800049c2:	40 7c       	lddsp	r12,sp[0x1c]
800049c4:	1c 0c       	add	r12,lr
800049c6:	fe ce a4 aa 	sub	lr,pc,-23382
800049ca:	fc 0c 07 0e 	ld.ub	lr,lr[r12]
800049ce:	20 1e       	sub	lr,1
800049d0:	50 0e       	stdsp	sp[0x0],lr
800049d2:	fe ce a5 22 	sub	lr,pc,-23262
800049d6:	fc 0c 07 0c 	ld.ub	r12,lr[r12]
800049da:	50 7c       	stdsp	sp[0x1c],r12
800049dc:	40 0c       	lddsp	r12,sp[0x0]
800049de:	58 7c       	cp.w	r12,7
800049e0:	e0 8b 00 f1 	brhi	80004bc2 <get_arg+0x266>
800049e4:	fe ce a6 d4 	sub	lr,pc,-22828
800049e8:	fc 0c 03 2f 	ld.w	pc,lr[r12<<0x2]
800049ec:	36 8b       	mov	r11,104
800049ee:	f6 0a 18 00 	cp.b	r10,r11
800049f2:	e0 80 00 e8 	breq	80004bc2 <get_arg+0x266>
800049f6:	37 1b       	mov	r11,113
800049f8:	f6 0a 18 00 	cp.b	r10,r11
800049fc:	c0 70       	breq	80004a0a <get_arg+0xae>
800049fe:	34 cb       	mov	r11,76
80004a00:	f6 0a 18 00 	cp.b	r10,r11
80004a04:	c0 51       	brne	80004a0e <get_arg+0xb2>
80004a06:	a3 b4       	sbr	r4,0x3
80004a08:	cd d8       	rjmp	80004bc2 <get_arg+0x266>
80004a0a:	a5 b4       	sbr	r4,0x5
80004a0c:	cd b8       	rjmp	80004bc2 <get_arg+0x266>
80004a0e:	08 9a       	mov	r10,r4
80004a10:	0e 9b       	mov	r11,r7
80004a12:	a5 aa       	sbr	r10,0x4
80004a14:	17 3c       	ld.ub	r12,r11++
80004a16:	a5 b4       	sbr	r4,0x5
80004a18:	36 ce       	mov	lr,108
80004a1a:	fc 0c 18 00 	cp.b	r12,lr
80004a1e:	e0 80 00 d3 	breq	80004bc4 <get_arg+0x268>
80004a22:	14 94       	mov	r4,r10
80004a24:	cc f8       	rjmp	80004bc2 <get_arg+0x266>
80004a26:	eb d5 c0 05 	bfextu	r5,r5,0x0,0x5
80004a2a:	36 7c       	mov	r12,103
80004a2c:	f8 0a 18 00 	cp.b	r10,r12
80004a30:	e0 8b 00 27 	brhi	80004a7e <get_arg+0x122>
80004a34:	36 5b       	mov	r11,101
80004a36:	f6 0a 18 00 	cp.b	r10,r11
80004a3a:	c4 82       	brcc	80004aca <get_arg+0x16e>
80004a3c:	34 fb       	mov	r11,79
80004a3e:	f6 0a 18 00 	cp.b	r10,r11
80004a42:	c4 80       	breq	80004ad2 <get_arg+0x176>
80004a44:	e0 8b 00 0c 	brhi	80004a5c <get_arg+0x100>
80004a48:	34 5b       	mov	r11,69
80004a4a:	f6 0a 18 00 	cp.b	r10,r11
80004a4e:	c3 e0       	breq	80004aca <get_arg+0x16e>
80004a50:	34 7b       	mov	r11,71
80004a52:	f6 0a 18 00 	cp.b	r10,r11
80004a56:	c3 a0       	breq	80004aca <get_arg+0x16e>
80004a58:	34 4b       	mov	r11,68
80004a5a:	c0 88       	rjmp	80004a6a <get_arg+0x10e>
80004a5c:	35 8b       	mov	r11,88
80004a5e:	f6 0a 18 00 	cp.b	r10,r11
80004a62:	c2 c0       	breq	80004aba <get_arg+0x15e>
80004a64:	e0 8b 00 07 	brhi	80004a72 <get_arg+0x116>
80004a68:	35 5b       	mov	r11,85
80004a6a:	f6 0a 18 00 	cp.b	r10,r11
80004a6e:	c3 51       	brne	80004ad8 <get_arg+0x17c>
80004a70:	c3 18       	rjmp	80004ad2 <get_arg+0x176>
80004a72:	36 3b       	mov	r11,99
80004a74:	f6 0a 18 00 	cp.b	r10,r11
80004a78:	c2 f0       	breq	80004ad6 <get_arg+0x17a>
80004a7a:	36 4b       	mov	r11,100
80004a7c:	c0 e8       	rjmp	80004a98 <get_arg+0x13c>
80004a7e:	37 0b       	mov	r11,112
80004a80:	f6 0a 18 00 	cp.b	r10,r11
80004a84:	c2 50       	breq	80004ace <get_arg+0x172>
80004a86:	e0 8b 00 0d 	brhi	80004aa0 <get_arg+0x144>
80004a8a:	36 eb       	mov	r11,110
80004a8c:	f6 0a 18 00 	cp.b	r10,r11
80004a90:	c1 f0       	breq	80004ace <get_arg+0x172>
80004a92:	e0 8b 00 14 	brhi	80004aba <get_arg+0x15e>
80004a96:	36 9b       	mov	r11,105
80004a98:	f6 0a 18 00 	cp.b	r10,r11
80004a9c:	c1 e1       	brne	80004ad8 <get_arg+0x17c>
80004a9e:	c0 e8       	rjmp	80004aba <get_arg+0x15e>
80004aa0:	37 5b       	mov	r11,117
80004aa2:	f6 0a 18 00 	cp.b	r10,r11
80004aa6:	c0 a0       	breq	80004aba <get_arg+0x15e>
80004aa8:	37 8b       	mov	r11,120
80004aaa:	f6 0a 18 00 	cp.b	r10,r11
80004aae:	c0 60       	breq	80004aba <get_arg+0x15e>
80004ab0:	37 3b       	mov	r11,115
80004ab2:	f6 0a 18 00 	cp.b	r10,r11
80004ab6:	c1 11       	brne	80004ad8 <get_arg+0x17c>
80004ab8:	c0 b8       	rjmp	80004ace <get_arg+0x172>
80004aba:	ed b4 00 04 	bld	r4,0x4
80004abe:	c0 a0       	breq	80004ad2 <get_arg+0x176>
80004ac0:	ed b4 00 05 	bld	r4,0x5
80004ac4:	c0 91       	brne	80004ad6 <get_arg+0x17a>
80004ac6:	30 20       	mov	r0,2
80004ac8:	c0 88       	rjmp	80004ad8 <get_arg+0x17c>
80004aca:	30 40       	mov	r0,4
80004acc:	c0 68       	rjmp	80004ad8 <get_arg+0x17c>
80004ace:	30 30       	mov	r0,3
80004ad0:	c0 48       	rjmp	80004ad8 <get_arg+0x17c>
80004ad2:	30 10       	mov	r0,1
80004ad4:	c0 28       	rjmp	80004ad8 <get_arg+0x17c>
80004ad6:	30 00       	mov	r0,0
80004ad8:	40 3b       	lddsp	r11,sp[0xc]
80004ada:	5b fb       	cp.w	r11,-1
80004adc:	c0 40       	breq	80004ae4 <get_arg+0x188>
80004ade:	e2 0b 09 20 	st.w	r1[r11<<0x2],r0
80004ae2:	c7 08       	rjmp	80004bc2 <get_arg+0x266>
80004ae4:	58 60       	cp.w	r0,6
80004ae6:	e0 8b 00 6e 	brhi	80004bc2 <get_arg+0x266>
80004aea:	6c 0a       	ld.w	r10,r6[0x0]
80004aec:	ea cc ff ff 	sub	r12,r5,-1
80004af0:	fe ce a7 c0 	sub	lr,pc,-22592
80004af4:	fc 00 03 2f 	ld.w	pc,lr[r0<<0x2]
80004af8:	f4 cb ff f8 	sub	r11,r10,-8
80004afc:	8d 0b       	st.w	r6[0x0],r11
80004afe:	f4 ea 00 00 	ld.d	r10,r10[0]
80004b02:	e6 05 08 3a 	st.d	r3[r5<<0x3],r10
80004b06:	c0 f8       	rjmp	80004b24 <get_arg+0x1c8>
80004b08:	f4 cb ff fc 	sub	r11,r10,-4
80004b0c:	8d 0b       	st.w	r6[0x0],r11
80004b0e:	74 0a       	ld.w	r10,r10[0x0]
80004b10:	e6 05 09 3a 	st.w	r3[r5<<0x3],r10
80004b14:	c0 88       	rjmp	80004b24 <get_arg+0x1c8>
80004b16:	f4 cb ff f8 	sub	r11,r10,-8
80004b1a:	8d 0b       	st.w	r6[0x0],r11
80004b1c:	f4 ea 00 00 	ld.d	r10,r10[0]
80004b20:	e6 05 08 3a 	st.d	r3[r5<<0x3],r10
80004b24:	0e 9b       	mov	r11,r7
80004b26:	18 95       	mov	r5,r12
80004b28:	c4 e8       	rjmp	80004bc4 <get_arg+0x268>
80004b2a:	62 0a       	ld.w	r10,r1[0x0]
80004b2c:	5b fa       	cp.w	r10,-1
80004b2e:	c0 b1       	brne	80004b44 <get_arg+0x1e8>
80004b30:	50 19       	stdsp	sp[0x4],r9
80004b32:	50 28       	stdsp	sp[0x8],r8
80004b34:	e0 6a 00 80 	mov	r10,128
80004b38:	30 0b       	mov	r11,0
80004b3a:	02 9c       	mov	r12,r1
80004b3c:	e0 a0 1d 78 	rcall	8000862c <memset>
80004b40:	40 28       	lddsp	r8,sp[0x8]
80004b42:	40 19       	lddsp	r9,sp[0x4]
80004b44:	e4 cc 00 01 	sub	r12,r2,1
80004b48:	0e 9b       	mov	r11,r7
80004b4a:	50 3c       	stdsp	sp[0xc],r12
80004b4c:	f2 0c 0c 49 	max	r9,r9,r12
80004b50:	c3 a8       	rjmp	80004bc4 <get_arg+0x268>
80004b52:	62 0a       	ld.w	r10,r1[0x0]
80004b54:	5b fa       	cp.w	r10,-1
80004b56:	c0 b1       	brne	80004b6c <get_arg+0x210>
80004b58:	50 19       	stdsp	sp[0x4],r9
80004b5a:	50 28       	stdsp	sp[0x8],r8
80004b5c:	e0 6a 00 80 	mov	r10,128
80004b60:	30 0b       	mov	r11,0
80004b62:	02 9c       	mov	r12,r1
80004b64:	e0 a0 1d 64 	rcall	8000862c <memset>
80004b68:	40 28       	lddsp	r8,sp[0x8]
80004b6a:	40 19       	lddsp	r9,sp[0x4]
80004b6c:	20 12       	sub	r2,1
80004b6e:	30 0a       	mov	r10,0
80004b70:	0e 9b       	mov	r11,r7
80004b72:	e2 02 09 2a 	st.w	r1[r2<<0x2],r10
80004b76:	f2 02 0c 49 	max	r9,r9,r2
80004b7a:	c2 58       	rjmp	80004bc4 <get_arg+0x268>
80004b7c:	16 97       	mov	r7,r11
80004b7e:	6c 0a       	ld.w	r10,r6[0x0]
80004b80:	f4 cb ff fc 	sub	r11,r10,-4
80004b84:	8d 0b       	st.w	r6[0x0],r11
80004b86:	74 0a       	ld.w	r10,r10[0x0]
80004b88:	0e 9b       	mov	r11,r7
80004b8a:	e6 05 09 3a 	st.w	r3[r5<<0x3],r10
80004b8e:	2f f5       	sub	r5,-1
80004b90:	c1 a8       	rjmp	80004bc4 <get_arg+0x268>
80004b92:	f4 c2 00 30 	sub	r2,r10,48
80004b96:	c0 68       	rjmp	80004ba2 <get_arg+0x246>
80004b98:	e4 02 00 22 	add	r2,r2,r2<<0x2
80004b9c:	2f f7       	sub	r7,-1
80004b9e:	f4 02 00 12 	add	r2,r10,r2<<0x1
80004ba2:	0f 8a       	ld.ub	r10,r7[0x0]
80004ba4:	58 0a       	cp.w	r10,0
80004ba6:	c0 e0       	breq	80004bc2 <get_arg+0x266>
80004ba8:	23 0a       	sub	r10,48
80004baa:	58 9a       	cp.w	r10,9
80004bac:	fe 98 ff f6 	brls	80004b98 <get_arg+0x23c>
80004bb0:	c0 98       	rjmp	80004bc2 <get_arg+0x266>
80004bb2:	2f f7       	sub	r7,-1
80004bb4:	0f 8a       	ld.ub	r10,r7[0x0]
80004bb6:	58 0a       	cp.w	r10,0
80004bb8:	c0 50       	breq	80004bc2 <get_arg+0x266>
80004bba:	23 0a       	sub	r10,48
80004bbc:	58 9a       	cp.w	r10,9
80004bbe:	fe 98 ff fa 	brls	80004bb2 <get_arg+0x256>
80004bc2:	0e 9b       	mov	r11,r7
80004bc4:	40 7c       	lddsp	r12,sp[0x1c]
80004bc6:	30 ba       	mov	r10,11
80004bc8:	f4 0c 18 00 	cp.b	r12,r10
80004bcc:	fe 91 fe f2 	brne	800049b0 <get_arg+0x54>
80004bd0:	40 42       	lddsp	r2,sp[0x10]
80004bd2:	17 8c       	ld.ub	r12,r11[0x0]
80004bd4:	0a 32       	cp.w	r2,r5
80004bd6:	5f 4a       	srge	r10
80004bd8:	f0 0c 18 00 	cp.b	r12,r8
80004bdc:	5f 1c       	srne	r12
80004bde:	f9 ea 00 0a 	and	r10,r12,r10
80004be2:	f0 0a 18 00 	cp.b	r10,r8
80004be6:	fe 91 fe cf 	brne	80004984 <get_arg+0x28>
80004bea:	30 08       	mov	r8,0
80004bec:	40 4e       	lddsp	lr,sp[0x10]
80004bee:	17 8a       	ld.ub	r10,r11[0x0]
80004bf0:	e2 05 00 21 	add	r1,r1,r5<<0x2
80004bf4:	f0 0a 18 00 	cp.b	r10,r8
80004bf8:	fc 09 17 10 	movne	r9,lr
80004bfc:	e6 05 00 38 	add	r8,r3,r5<<0x3
80004c00:	06 9e       	mov	lr,r3
80004c02:	c2 a8       	rjmp	80004c56 <get_arg+0x2fa>
80004c04:	62 0a       	ld.w	r10,r1[0x0]
80004c06:	58 3a       	cp.w	r10,3
80004c08:	c1 e0       	breq	80004c44 <get_arg+0x2e8>
80004c0a:	e0 89 00 07 	brgt	80004c18 <get_arg+0x2bc>
80004c0e:	58 1a       	cp.w	r10,1
80004c10:	c1 a0       	breq	80004c44 <get_arg+0x2e8>
80004c12:	58 2a       	cp.w	r10,2
80004c14:	c1 81       	brne	80004c44 <get_arg+0x2e8>
80004c16:	c0 58       	rjmp	80004c20 <get_arg+0x2c4>
80004c18:	58 5a       	cp.w	r10,5
80004c1a:	c0 c0       	breq	80004c32 <get_arg+0x2d6>
80004c1c:	c0 b5       	brlt	80004c32 <get_arg+0x2d6>
80004c1e:	c1 38       	rjmp	80004c44 <get_arg+0x2e8>
80004c20:	6c 0a       	ld.w	r10,r6[0x0]
80004c22:	f4 cc ff f8 	sub	r12,r10,-8
80004c26:	8d 0c       	st.w	r6[0x0],r12
80004c28:	f4 e2 00 00 	ld.d	r2,r10[0]
80004c2c:	f0 e3 00 00 	st.d	r8[0],r2
80004c30:	c1 08       	rjmp	80004c50 <get_arg+0x2f4>
80004c32:	6c 0a       	ld.w	r10,r6[0x0]
80004c34:	f4 cc ff f8 	sub	r12,r10,-8
80004c38:	8d 0c       	st.w	r6[0x0],r12
80004c3a:	f4 e2 00 00 	ld.d	r2,r10[0]
80004c3e:	f0 e3 00 00 	st.d	r8[0],r2
80004c42:	c0 78       	rjmp	80004c50 <get_arg+0x2f4>
80004c44:	6c 0a       	ld.w	r10,r6[0x0]
80004c46:	f4 cc ff fc 	sub	r12,r10,-4
80004c4a:	8d 0c       	st.w	r6[0x0],r12
80004c4c:	74 0a       	ld.w	r10,r10[0x0]
80004c4e:	91 0a       	st.w	r8[0x0],r10
80004c50:	2f f5       	sub	r5,-1
80004c52:	2f 88       	sub	r8,-8
80004c54:	2f c1       	sub	r1,-4
80004c56:	12 35       	cp.w	r5,r9
80004c58:	fe 9a ff d6 	brle	80004c04 <get_arg+0x2a8>
80004c5c:	1c 93       	mov	r3,lr
80004c5e:	40 52       	lddsp	r2,sp[0x14]
80004c60:	40 6e       	lddsp	lr,sp[0x18]
80004c62:	85 05       	st.w	r2[0x0],r5
80004c64:	9d 0b       	st.w	lr[0x0],r11
80004c66:	40 4b       	lddsp	r11,sp[0x10]
80004c68:	e6 0b 00 3c 	add	r12,r3,r11<<0x3
80004c6c:	2f 8d       	sub	sp,-32
80004c6e:	d8 32       	popm	r0-r7,pc

80004c70 <__sprint_r>:
80004c70:	d4 21       	pushm	r4-r7,lr
80004c72:	14 97       	mov	r7,r10
80004c74:	74 28       	ld.w	r8,r10[0x8]
80004c76:	58 08       	cp.w	r8,0
80004c78:	c0 41       	brne	80004c80 <__sprint_r+0x10>
80004c7a:	95 18       	st.w	r10[0x4],r8
80004c7c:	10 9c       	mov	r12,r8
80004c7e:	d8 22       	popm	r4-r7,pc
80004c80:	e0 a0 18 b4 	rcall	80007de8 <__sfvwrite_r>
80004c84:	30 08       	mov	r8,0
80004c86:	8f 18       	st.w	r7[0x4],r8
80004c88:	8f 28       	st.w	r7[0x8],r8
80004c8a:	d8 22       	popm	r4-r7,pc

80004c8c <_vfprintf_r>:
80004c8c:	d4 31       	pushm	r0-r7,lr
80004c8e:	fa cd 06 bc 	sub	sp,sp,1724
80004c92:	51 09       	stdsp	sp[0x40],r9
80004c94:	16 91       	mov	r1,r11
80004c96:	14 97       	mov	r7,r10
80004c98:	18 95       	mov	r5,r12
80004c9a:	e0 a0 1a 1d 	rcall	800080d4 <_localeconv_r>
80004c9e:	78 0c       	ld.w	r12,r12[0x0]
80004ca0:	50 cc       	stdsp	sp[0x30],r12
80004ca2:	58 05       	cp.w	r5,0
80004ca4:	c0 70       	breq	80004cb2 <_vfprintf_r+0x26>
80004ca6:	6a 68       	ld.w	r8,r5[0x18]
80004ca8:	58 08       	cp.w	r8,0
80004caa:	c0 41       	brne	80004cb2 <_vfprintf_r+0x26>
80004cac:	0a 9c       	mov	r12,r5
80004cae:	e0 a0 17 3d 	rcall	80007b28 <__sinit>
80004cb2:	fe c8 a5 be 	sub	r8,pc,-23106
80004cb6:	10 31       	cp.w	r1,r8
80004cb8:	c0 31       	brne	80004cbe <_vfprintf_r+0x32>
80004cba:	6a 01       	ld.w	r1,r5[0x0]
80004cbc:	c0 c8       	rjmp	80004cd4 <_vfprintf_r+0x48>
80004cbe:	fe c8 a5 aa 	sub	r8,pc,-23126
80004cc2:	10 31       	cp.w	r1,r8
80004cc4:	c0 31       	brne	80004cca <_vfprintf_r+0x3e>
80004cc6:	6a 11       	ld.w	r1,r5[0x4]
80004cc8:	c0 68       	rjmp	80004cd4 <_vfprintf_r+0x48>
80004cca:	fe c8 a5 96 	sub	r8,pc,-23146
80004cce:	10 31       	cp.w	r1,r8
80004cd0:	eb f1 00 02 	ld.weq	r1,r5[0x8]
80004cd4:	82 68       	ld.sh	r8,r1[0xc]
80004cd6:	ed b8 00 03 	bld	r8,0x3
80004cda:	c0 41       	brne	80004ce2 <_vfprintf_r+0x56>
80004cdc:	62 48       	ld.w	r8,r1[0x10]
80004cde:	58 08       	cp.w	r8,0
80004ce0:	c0 71       	brne	80004cee <_vfprintf_r+0x62>
80004ce2:	02 9b       	mov	r11,r1
80004ce4:	0a 9c       	mov	r12,r5
80004ce6:	e0 a0 0f 5d 	rcall	80006ba0 <__swsetup_r>
80004cea:	e0 81 0f 54 	brne	80006b92 <_vfprintf_r+0x1f06>
80004cee:	82 68       	ld.sh	r8,r1[0xc]
80004cf0:	10 99       	mov	r9,r8
80004cf2:	e2 19 00 1a 	andl	r9,0x1a,COH
80004cf6:	58 a9       	cp.w	r9,10
80004cf8:	c3 c1       	brne	80004d70 <_vfprintf_r+0xe4>
80004cfa:	82 79       	ld.sh	r9,r1[0xe]
80004cfc:	30 0a       	mov	r10,0
80004cfe:	f4 09 19 00 	cp.h	r9,r10
80004d02:	c3 75       	brlt	80004d70 <_vfprintf_r+0xe4>
80004d04:	a1 d8       	cbr	r8,0x1
80004d06:	fb 58 05 d0 	st.h	sp[1488],r8
80004d0a:	62 88       	ld.w	r8,r1[0x20]
80004d0c:	fb 48 05 e4 	st.w	sp[1508],r8
80004d10:	62 a8       	ld.w	r8,r1[0x28]
80004d12:	fb 48 05 ec 	st.w	sp[1516],r8
80004d16:	fa c8 ff bc 	sub	r8,sp,-68
80004d1a:	fb 48 05 d4 	st.w	sp[1492],r8
80004d1e:	fb 48 05 c4 	st.w	sp[1476],r8
80004d22:	e0 68 04 00 	mov	r8,1024
80004d26:	fb 48 05 d8 	st.w	sp[1496],r8
80004d2a:	fb 48 05 cc 	st.w	sp[1484],r8
80004d2e:	30 08       	mov	r8,0
80004d30:	fb 59 05 d2 	st.h	sp[1490],r9
80004d34:	0e 9a       	mov	r10,r7
80004d36:	41 09       	lddsp	r9,sp[0x40]
80004d38:	fa c7 fa 3c 	sub	r7,sp,-1476
80004d3c:	fb 48 05 dc 	st.w	sp[1500],r8
80004d40:	0a 9c       	mov	r12,r5
80004d42:	0e 9b       	mov	r11,r7
80004d44:	ca 4f       	rcall	80004c8c <_vfprintf_r>
80004d46:	50 bc       	stdsp	sp[0x2c],r12
80004d48:	c0 95       	brlt	80004d5a <_vfprintf_r+0xce>
80004d4a:	0e 9b       	mov	r11,r7
80004d4c:	0a 9c       	mov	r12,r5
80004d4e:	e0 a0 16 15 	rcall	80007978 <_fflush_r>
80004d52:	40 be       	lddsp	lr,sp[0x2c]
80004d54:	f9 be 01 ff 	movne	lr,-1
80004d58:	50 be       	stdsp	sp[0x2c],lr
80004d5a:	fb 08 05 d0 	ld.sh	r8,sp[1488]
80004d5e:	ed b8 00 06 	bld	r8,0x6
80004d62:	e0 81 0f 1a 	brne	80006b96 <_vfprintf_r+0x1f0a>
80004d66:	82 68       	ld.sh	r8,r1[0xc]
80004d68:	a7 a8       	sbr	r8,0x6
80004d6a:	a2 68       	st.h	r1[0xc],r8
80004d6c:	e0 8f 0f 15 	bral	80006b96 <_vfprintf_r+0x1f0a>
80004d70:	30 08       	mov	r8,0
80004d72:	fb 48 06 b4 	st.w	sp[1716],r8
80004d76:	fb 48 06 90 	st.w	sp[1680],r8
80004d7a:	fb 48 06 8c 	st.w	sp[1676],r8
80004d7e:	fb 48 06 b0 	st.w	sp[1712],r8
80004d82:	30 08       	mov	r8,0
80004d84:	30 09       	mov	r9,0
80004d86:	50 a7       	stdsp	sp[0x28],r7
80004d88:	50 78       	stdsp	sp[0x1c],r8
80004d8a:	fa c3 f9 e0 	sub	r3,sp,-1568
80004d8e:	3f f8       	mov	r8,-1
80004d90:	50 59       	stdsp	sp[0x14],r9
80004d92:	fb 43 06 88 	st.w	sp[1672],r3
80004d96:	fb 48 05 44 	st.w	sp[1348],r8
80004d9a:	12 9c       	mov	r12,r9
80004d9c:	50 69       	stdsp	sp[0x18],r9
80004d9e:	50 d9       	stdsp	sp[0x34],r9
80004da0:	50 e9       	stdsp	sp[0x38],r9
80004da2:	50 b9       	stdsp	sp[0x2c],r9
80004da4:	12 97       	mov	r7,r9
80004da6:	0a 94       	mov	r4,r5
80004da8:	40 a2       	lddsp	r2,sp[0x28]
80004daa:	32 5a       	mov	r10,37
80004dac:	30 08       	mov	r8,0
80004dae:	c0 28       	rjmp	80004db2 <_vfprintf_r+0x126>
80004db0:	2f f2       	sub	r2,-1
80004db2:	05 89       	ld.ub	r9,r2[0x0]
80004db4:	f0 09 18 00 	cp.b	r9,r8
80004db8:	5f 1b       	srne	r11
80004dba:	f4 09 18 00 	cp.b	r9,r10
80004dbe:	5f 19       	srne	r9
80004dc0:	f3 eb 00 0b 	and	r11,r9,r11
80004dc4:	f0 0b 18 00 	cp.b	r11,r8
80004dc8:	cf 41       	brne	80004db0 <_vfprintf_r+0x124>
80004dca:	40 ab       	lddsp	r11,sp[0x28]
80004dcc:	e4 0b 01 06 	sub	r6,r2,r11
80004dd0:	c1 e0       	breq	80004e0c <_vfprintf_r+0x180>
80004dd2:	fa f8 06 90 	ld.w	r8,sp[1680]
80004dd6:	0c 08       	add	r8,r6
80004dd8:	87 0b       	st.w	r3[0x0],r11
80004dda:	fb 48 06 90 	st.w	sp[1680],r8
80004dde:	87 16       	st.w	r3[0x4],r6
80004de0:	fa f8 06 8c 	ld.w	r8,sp[1676]
80004de4:	2f f8       	sub	r8,-1
80004de6:	fb 48 06 8c 	st.w	sp[1676],r8
80004dea:	58 78       	cp.w	r8,7
80004dec:	e0 89 00 04 	brgt	80004df4 <_vfprintf_r+0x168>
80004df0:	2f 83       	sub	r3,-8
80004df2:	c0 a8       	rjmp	80004e06 <_vfprintf_r+0x17a>
80004df4:	fa ca f9 78 	sub	r10,sp,-1672
80004df8:	02 9b       	mov	r11,r1
80004dfa:	08 9c       	mov	r12,r4
80004dfc:	c3 af       	rcall	80004c70 <__sprint_r>
80004dfe:	e0 81 0e c6 	brne	80006b8a <_vfprintf_r+0x1efe>
80004e02:	fa c3 f9 e0 	sub	r3,sp,-1568
80004e06:	40 ba       	lddsp	r10,sp[0x2c]
80004e08:	0c 0a       	add	r10,r6
80004e0a:	50 ba       	stdsp	sp[0x2c],r10
80004e0c:	05 89       	ld.ub	r9,r2[0x0]
80004e0e:	30 08       	mov	r8,0
80004e10:	f0 09 18 00 	cp.b	r9,r8
80004e14:	e0 80 0e aa 	breq	80006b68 <_vfprintf_r+0x1edc>
80004e18:	30 09       	mov	r9,0
80004e1a:	fb 68 06 bb 	st.b	sp[1723],r8
80004e1e:	0e 96       	mov	r6,r7
80004e20:	e4 c8 ff ff 	sub	r8,r2,-1
80004e24:	3f fe       	mov	lr,-1
80004e26:	50 93       	stdsp	sp[0x24],r3
80004e28:	50 41       	stdsp	sp[0x10],r1
80004e2a:	0e 93       	mov	r3,r7
80004e2c:	04 91       	mov	r1,r2
80004e2e:	50 89       	stdsp	sp[0x20],r9
80004e30:	50 a8       	stdsp	sp[0x28],r8
80004e32:	50 2e       	stdsp	sp[0x8],lr
80004e34:	50 39       	stdsp	sp[0xc],r9
80004e36:	12 95       	mov	r5,r9
80004e38:	12 90       	mov	r0,r9
80004e3a:	10 97       	mov	r7,r8
80004e3c:	08 92       	mov	r2,r4
80004e3e:	c0 78       	rjmp	80004e4c <_vfprintf_r+0x1c0>
80004e40:	3f fc       	mov	r12,-1
80004e42:	08 97       	mov	r7,r4
80004e44:	50 2c       	stdsp	sp[0x8],r12
80004e46:	c0 38       	rjmp	80004e4c <_vfprintf_r+0x1c0>
80004e48:	30 0b       	mov	r11,0
80004e4a:	50 3b       	stdsp	sp[0xc],r11
80004e4c:	0f 38       	ld.ub	r8,r7++
80004e4e:	c0 28       	rjmp	80004e52 <_vfprintf_r+0x1c6>
80004e50:	12 90       	mov	r0,r9
80004e52:	f0 c9 00 20 	sub	r9,r8,32
80004e56:	e0 49 00 58 	cp.w	r9,88
80004e5a:	e0 8b 0a 30 	brhi	800062ba <_vfprintf_r+0x162e>
80004e5e:	fe ca ab 12 	sub	r10,pc,-21742
80004e62:	f4 09 03 2f 	ld.w	pc,r10[r9<<0x2]
80004e66:	50 a7       	stdsp	sp[0x28],r7
80004e68:	50 80       	stdsp	sp[0x20],r0
80004e6a:	0c 97       	mov	r7,r6
80004e6c:	04 94       	mov	r4,r2
80004e6e:	06 96       	mov	r6,r3
80004e70:	02 92       	mov	r2,r1
80004e72:	fe c9 a8 ea 	sub	r9,pc,-22294
80004e76:	40 93       	lddsp	r3,sp[0x24]
80004e78:	10 90       	mov	r0,r8
80004e7a:	40 41       	lddsp	r1,sp[0x10]
80004e7c:	50 d9       	stdsp	sp[0x34],r9
80004e7e:	e0 8f 08 8e 	bral	80005f9a <_vfprintf_r+0x130e>
80004e82:	30 08       	mov	r8,0
80004e84:	fb 39 06 bb 	ld.ub	r9,sp[1723]
80004e88:	f0 09 18 00 	cp.b	r9,r8
80004e8c:	ce 01       	brne	80004e4c <_vfprintf_r+0x1c0>
80004e8e:	32 08       	mov	r8,32
80004e90:	c6 e8       	rjmp	80004f6c <_vfprintf_r+0x2e0>
80004e92:	a1 a5       	sbr	r5,0x0
80004e94:	cd cb       	rjmp	80004e4c <_vfprintf_r+0x1c0>
80004e96:	0f 89       	ld.ub	r9,r7[0x0]
80004e98:	f2 c8 00 30 	sub	r8,r9,48
80004e9c:	58 98       	cp.w	r8,9
80004e9e:	e0 8b 00 1d 	brhi	80004ed8 <_vfprintf_r+0x24c>
80004ea2:	ee c8 ff ff 	sub	r8,r7,-1
80004ea6:	30 0b       	mov	r11,0
80004ea8:	23 09       	sub	r9,48
80004eaa:	f6 0b 00 2b 	add	r11,r11,r11<<0x2
80004eae:	f2 0b 00 1b 	add	r11,r9,r11<<0x1
80004eb2:	11 39       	ld.ub	r9,r8++
80004eb4:	f2 ca 00 30 	sub	r10,r9,48
80004eb8:	58 9a       	cp.w	r10,9
80004eba:	fe 98 ff f7 	brls	80004ea8 <_vfprintf_r+0x21c>
80004ebe:	e0 49 00 24 	cp.w	r9,36
80004ec2:	cc 31       	brne	80004e48 <_vfprintf_r+0x1bc>
80004ec4:	e0 4b 00 20 	cp.w	r11,32
80004ec8:	e0 89 0e 60 	brgt	80006b88 <_vfprintf_r+0x1efc>
80004ecc:	20 1b       	sub	r11,1
80004ece:	fa f9 06 b4 	ld.w	r9,sp[1716]
80004ed2:	12 3b       	cp.w	r11,r9
80004ed4:	c0 95       	brlt	80004ee6 <_vfprintf_r+0x25a>
80004ed6:	c1 08       	rjmp	80004ef6 <_vfprintf_r+0x26a>
80004ed8:	fa f9 06 b4 	ld.w	r9,sp[1716]
80004edc:	ec ca ff ff 	sub	r10,r6,-1
80004ee0:	12 36       	cp.w	r6,r9
80004ee2:	c1 f5       	brlt	80004f20 <_vfprintf_r+0x294>
80004ee4:	c2 68       	rjmp	80004f30 <_vfprintf_r+0x2a4>
80004ee6:	fa ce f9 44 	sub	lr,sp,-1724
80004eea:	10 97       	mov	r7,r8
80004eec:	fc 0b 00 3b 	add	r11,lr,r11<<0x3
80004ef0:	f6 f0 fd 88 	ld.w	r0,r11[-632]
80004ef4:	c3 58       	rjmp	80004f5e <_vfprintf_r+0x2d2>
80004ef6:	10 97       	mov	r7,r8
80004ef8:	fa c8 f9 50 	sub	r8,sp,-1712
80004efc:	1a d8       	st.w	--sp,r8
80004efe:	fa c8 fa b8 	sub	r8,sp,-1352
80004f02:	1a d8       	st.w	--sp,r8
80004f04:	fa c8 fb b4 	sub	r8,sp,-1100
80004f08:	02 9a       	mov	r10,r1
80004f0a:	1a d8       	st.w	--sp,r8
80004f0c:	04 9c       	mov	r12,r2
80004f0e:	fa c8 f9 40 	sub	r8,sp,-1728
80004f12:	fa c9 ff b4 	sub	r9,sp,-76
80004f16:	fe b0 fd 23 	rcall	8000495c <get_arg>
80004f1a:	2f dd       	sub	sp,-12
80004f1c:	78 00       	ld.w	r0,r12[0x0]
80004f1e:	c2 08       	rjmp	80004f5e <_vfprintf_r+0x2d2>
80004f20:	fa cc f9 44 	sub	r12,sp,-1724
80004f24:	14 96       	mov	r6,r10
80004f26:	f8 03 00 38 	add	r8,r12,r3<<0x3
80004f2a:	f0 f0 fd 88 	ld.w	r0,r8[-632]
80004f2e:	c1 88       	rjmp	80004f5e <_vfprintf_r+0x2d2>
80004f30:	41 08       	lddsp	r8,sp[0x40]
80004f32:	59 f9       	cp.w	r9,31
80004f34:	e0 89 00 11 	brgt	80004f56 <_vfprintf_r+0x2ca>
80004f38:	f0 cb ff fc 	sub	r11,r8,-4
80004f3c:	51 0b       	stdsp	sp[0x40],r11
80004f3e:	70 00       	ld.w	r0,r8[0x0]
80004f40:	fa cb f9 44 	sub	r11,sp,-1724
80004f44:	f6 09 00 38 	add	r8,r11,r9<<0x3
80004f48:	f1 40 fd 88 	st.w	r8[-632],r0
80004f4c:	2f f9       	sub	r9,-1
80004f4e:	14 96       	mov	r6,r10
80004f50:	fb 49 06 b4 	st.w	sp[1716],r9
80004f54:	c0 58       	rjmp	80004f5e <_vfprintf_r+0x2d2>
80004f56:	70 00       	ld.w	r0,r8[0x0]
80004f58:	14 96       	mov	r6,r10
80004f5a:	2f c8       	sub	r8,-4
80004f5c:	51 08       	stdsp	sp[0x40],r8
80004f5e:	58 00       	cp.w	r0,0
80004f60:	fe 94 ff 76 	brge	80004e4c <_vfprintf_r+0x1c0>
80004f64:	5c 30       	neg	r0
80004f66:	a3 a5       	sbr	r5,0x2
80004f68:	c7 2b       	rjmp	80004e4c <_vfprintf_r+0x1c0>
80004f6a:	32 b8       	mov	r8,43
80004f6c:	fb 68 06 bb 	st.b	sp[1723],r8
80004f70:	c6 eb       	rjmp	80004e4c <_vfprintf_r+0x1c0>
80004f72:	0f 38       	ld.ub	r8,r7++
80004f74:	e0 48 00 2a 	cp.w	r8,42
80004f78:	c0 30       	breq	80004f7e <_vfprintf_r+0x2f2>
80004f7a:	30 09       	mov	r9,0
80004f7c:	c7 98       	rjmp	8000506e <_vfprintf_r+0x3e2>
80004f7e:	0f 88       	ld.ub	r8,r7[0x0]
80004f80:	f0 c9 00 30 	sub	r9,r8,48
80004f84:	58 99       	cp.w	r9,9
80004f86:	e0 8b 00 1f 	brhi	80004fc4 <_vfprintf_r+0x338>
80004f8a:	ee c4 ff ff 	sub	r4,r7,-1
80004f8e:	30 0b       	mov	r11,0
80004f90:	23 08       	sub	r8,48
80004f92:	f6 0b 00 2b 	add	r11,r11,r11<<0x2
80004f96:	f0 0b 00 1b 	add	r11,r8,r11<<0x1
80004f9a:	09 38       	ld.ub	r8,r4++
80004f9c:	f0 c9 00 30 	sub	r9,r8,48
80004fa0:	58 99       	cp.w	r9,9
80004fa2:	fe 98 ff f7 	brls	80004f90 <_vfprintf_r+0x304>
80004fa6:	e0 48 00 24 	cp.w	r8,36
80004faa:	fe 91 ff 4f 	brne	80004e48 <_vfprintf_r+0x1bc>
80004fae:	e0 4b 00 20 	cp.w	r11,32
80004fb2:	e0 89 0d eb 	brgt	80006b88 <_vfprintf_r+0x1efc>
80004fb6:	20 1b       	sub	r11,1
80004fb8:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004fbc:	10 3b       	cp.w	r11,r8
80004fbe:	c0 a5       	brlt	80004fd2 <_vfprintf_r+0x346>
80004fc0:	c1 18       	rjmp	80004fe2 <_vfprintf_r+0x356>
80004fc2:	d7 03       	nop
80004fc4:	fa fa 06 b4 	ld.w	r10,sp[1716]
80004fc8:	ec c9 ff ff 	sub	r9,r6,-1
80004fcc:	14 36       	cp.w	r6,r10
80004fce:	c1 f5       	brlt	8000500c <_vfprintf_r+0x380>
80004fd0:	c2 88       	rjmp	80005020 <_vfprintf_r+0x394>
80004fd2:	fa ca f9 44 	sub	r10,sp,-1724
80004fd6:	f4 0b 00 3b 	add	r11,r10,r11<<0x3
80004fda:	f6 fb fd 88 	ld.w	r11,r11[-632]
80004fde:	50 2b       	stdsp	sp[0x8],r11
80004fe0:	c3 c8       	rjmp	80005058 <_vfprintf_r+0x3cc>
80004fe2:	fa c8 f9 50 	sub	r8,sp,-1712
80004fe6:	1a d8       	st.w	--sp,r8
80004fe8:	fa c8 fa b8 	sub	r8,sp,-1352
80004fec:	1a d8       	st.w	--sp,r8
80004fee:	fa c8 fb b4 	sub	r8,sp,-1100
80004ff2:	02 9a       	mov	r10,r1
80004ff4:	1a d8       	st.w	--sp,r8
80004ff6:	04 9c       	mov	r12,r2
80004ff8:	fa c8 f9 40 	sub	r8,sp,-1728
80004ffc:	fa c9 ff b4 	sub	r9,sp,-76
80005000:	fe b0 fc ae 	rcall	8000495c <get_arg>
80005004:	2f dd       	sub	sp,-12
80005006:	78 0c       	ld.w	r12,r12[0x0]
80005008:	50 2c       	stdsp	sp[0x8],r12
8000500a:	c2 78       	rjmp	80005058 <_vfprintf_r+0x3cc>
8000500c:	12 96       	mov	r6,r9
8000500e:	0e 94       	mov	r4,r7
80005010:	fa c9 f9 44 	sub	r9,sp,-1724
80005014:	f2 03 00 38 	add	r8,r9,r3<<0x3
80005018:	f0 f8 fd 88 	ld.w	r8,r8[-632]
8000501c:	50 28       	stdsp	sp[0x8],r8
8000501e:	c1 d8       	rjmp	80005058 <_vfprintf_r+0x3cc>
80005020:	41 08       	lddsp	r8,sp[0x40]
80005022:	59 fa       	cp.w	r10,31
80005024:	e0 89 00 14 	brgt	8000504c <_vfprintf_r+0x3c0>
80005028:	f0 cb ff fc 	sub	r11,r8,-4
8000502c:	70 08       	ld.w	r8,r8[0x0]
8000502e:	51 0b       	stdsp	sp[0x40],r11
80005030:	50 28       	stdsp	sp[0x8],r8
80005032:	fa c6 f9 44 	sub	r6,sp,-1724
80005036:	40 2e       	lddsp	lr,sp[0x8]
80005038:	ec 0a 00 38 	add	r8,r6,r10<<0x3
8000503c:	f1 4e fd 88 	st.w	r8[-632],lr
80005040:	2f fa       	sub	r10,-1
80005042:	0e 94       	mov	r4,r7
80005044:	fb 4a 06 b4 	st.w	sp[1716],r10
80005048:	12 96       	mov	r6,r9
8000504a:	c0 78       	rjmp	80005058 <_vfprintf_r+0x3cc>
8000504c:	70 0c       	ld.w	r12,r8[0x0]
8000504e:	0e 94       	mov	r4,r7
80005050:	2f c8       	sub	r8,-4
80005052:	50 2c       	stdsp	sp[0x8],r12
80005054:	12 96       	mov	r6,r9
80005056:	51 08       	stdsp	sp[0x40],r8
80005058:	40 2b       	lddsp	r11,sp[0x8]
8000505a:	58 0b       	cp.w	r11,0
8000505c:	fe 95 fe f2 	brlt	80004e40 <_vfprintf_r+0x1b4>
80005060:	08 97       	mov	r7,r4
80005062:	cf 5a       	rjmp	80004e4c <_vfprintf_r+0x1c0>
80005064:	f2 09 00 29 	add	r9,r9,r9<<0x2
80005068:	0f 38       	ld.ub	r8,r7++
8000506a:	f4 09 00 19 	add	r9,r10,r9<<0x1
8000506e:	f0 ca 00 30 	sub	r10,r8,48
80005072:	58 9a       	cp.w	r10,9
80005074:	fe 98 ff f8 	brls	80005064 <_vfprintf_r+0x3d8>
80005078:	3f fa       	mov	r10,-1
8000507a:	f2 0a 0c 49 	max	r9,r9,r10
8000507e:	50 29       	stdsp	sp[0x8],r9
80005080:	ce 9a       	rjmp	80004e52 <_vfprintf_r+0x1c6>
80005082:	a7 b5       	sbr	r5,0x7
80005084:	ce 4a       	rjmp	80004e4c <_vfprintf_r+0x1c0>
80005086:	30 09       	mov	r9,0
80005088:	23 08       	sub	r8,48
8000508a:	f2 09 00 29 	add	r9,r9,r9<<0x2
8000508e:	f0 09 00 19 	add	r9,r8,r9<<0x1
80005092:	0f 38       	ld.ub	r8,r7++
80005094:	f0 ca 00 30 	sub	r10,r8,48
80005098:	58 9a       	cp.w	r10,9
8000509a:	fe 98 ff f7 	brls	80005088 <_vfprintf_r+0x3fc>
8000509e:	e0 48 00 24 	cp.w	r8,36
800050a2:	fe 91 fe d7 	brne	80004e50 <_vfprintf_r+0x1c4>
800050a6:	e0 49 00 20 	cp.w	r9,32
800050aa:	e0 89 0d 6f 	brgt	80006b88 <_vfprintf_r+0x1efc>
800050ae:	f2 c3 00 01 	sub	r3,r9,1
800050b2:	30 19       	mov	r9,1
800050b4:	50 39       	stdsp	sp[0xc],r9
800050b6:	cc ba       	rjmp	80004e4c <_vfprintf_r+0x1c0>
800050b8:	a3 b5       	sbr	r5,0x3
800050ba:	cc 9a       	rjmp	80004e4c <_vfprintf_r+0x1c0>
800050bc:	a7 a5       	sbr	r5,0x6
800050be:	cc 7a       	rjmp	80004e4c <_vfprintf_r+0x1c0>
800050c0:	0a 98       	mov	r8,r5
800050c2:	a5 b5       	sbr	r5,0x5
800050c4:	a5 a8       	sbr	r8,0x4
800050c6:	0f 89       	ld.ub	r9,r7[0x0]
800050c8:	36 ce       	mov	lr,108
800050ca:	fc 09 18 00 	cp.b	r9,lr
800050ce:	f7 b7 00 ff 	subeq	r7,-1
800050d2:	f0 05 17 10 	movne	r5,r8
800050d6:	cb ba       	rjmp	80004e4c <_vfprintf_r+0x1c0>
800050d8:	a5 b5       	sbr	r5,0x5
800050da:	cb 9a       	rjmp	80004e4c <_vfprintf_r+0x1c0>
800050dc:	50 a7       	stdsp	sp[0x28],r7
800050de:	50 80       	stdsp	sp[0x20],r0
800050e0:	0c 97       	mov	r7,r6
800050e2:	10 90       	mov	r0,r8
800050e4:	06 96       	mov	r6,r3
800050e6:	04 94       	mov	r4,r2
800050e8:	40 93       	lddsp	r3,sp[0x24]
800050ea:	02 92       	mov	r2,r1
800050ec:	0e 99       	mov	r9,r7
800050ee:	40 41       	lddsp	r1,sp[0x10]
800050f0:	fa f8 06 b4 	ld.w	r8,sp[1716]
800050f4:	40 3c       	lddsp	r12,sp[0xc]
800050f6:	58 0c       	cp.w	r12,0
800050f8:	c1 d0       	breq	80005132 <_vfprintf_r+0x4a6>
800050fa:	10 36       	cp.w	r6,r8
800050fc:	c0 64       	brge	80005108 <_vfprintf_r+0x47c>
800050fe:	fa cb f9 44 	sub	r11,sp,-1724
80005102:	f6 06 00 36 	add	r6,r11,r6<<0x3
80005106:	c1 d8       	rjmp	80005140 <_vfprintf_r+0x4b4>
80005108:	fa c8 f9 50 	sub	r8,sp,-1712
8000510c:	1a d8       	st.w	--sp,r8
8000510e:	fa c8 fa b8 	sub	r8,sp,-1352
80005112:	1a d8       	st.w	--sp,r8
80005114:	fa c8 fb b4 	sub	r8,sp,-1100
80005118:	1a d8       	st.w	--sp,r8
8000511a:	fa c8 f9 40 	sub	r8,sp,-1728
8000511e:	fa c9 ff b4 	sub	r9,sp,-76
80005122:	04 9a       	mov	r10,r2
80005124:	0c 9b       	mov	r11,r6
80005126:	08 9c       	mov	r12,r4
80005128:	fe b0 fc 1a 	rcall	8000495c <get_arg>
8000512c:	2f dd       	sub	sp,-12
8000512e:	19 b8       	ld.ub	r8,r12[0x3]
80005130:	c2 28       	rjmp	80005174 <_vfprintf_r+0x4e8>
80005132:	2f f7       	sub	r7,-1
80005134:	10 39       	cp.w	r9,r8
80005136:	c0 84       	brge	80005146 <_vfprintf_r+0x4ba>
80005138:	fa ca f9 44 	sub	r10,sp,-1724
8000513c:	f4 06 00 36 	add	r6,r10,r6<<0x3
80005140:	ed 38 fd 8b 	ld.ub	r8,r6[-629]
80005144:	c1 88       	rjmp	80005174 <_vfprintf_r+0x4e8>
80005146:	41 09       	lddsp	r9,sp[0x40]
80005148:	59 f8       	cp.w	r8,31
8000514a:	e0 89 00 12 	brgt	8000516e <_vfprintf_r+0x4e2>
8000514e:	f2 ca ff fc 	sub	r10,r9,-4
80005152:	51 0a       	stdsp	sp[0x40],r10
80005154:	72 09       	ld.w	r9,r9[0x0]
80005156:	fa c6 f9 44 	sub	r6,sp,-1724
8000515a:	ec 08 00 3a 	add	r10,r6,r8<<0x3
8000515e:	2f f8       	sub	r8,-1
80005160:	f5 49 fd 88 	st.w	r10[-632],r9
80005164:	fb 48 06 b4 	st.w	sp[1716],r8
80005168:	f1 d9 c0 08 	bfextu	r8,r9,0x0,0x8
8000516c:	c0 48       	rjmp	80005174 <_vfprintf_r+0x4e8>
8000516e:	13 b8       	ld.ub	r8,r9[0x3]
80005170:	2f c9       	sub	r9,-4
80005172:	51 09       	stdsp	sp[0x40],r9
80005174:	fb 68 06 60 	st.b	sp[1632],r8
80005178:	30 0e       	mov	lr,0
8000517a:	30 08       	mov	r8,0
8000517c:	30 12       	mov	r2,1
8000517e:	fb 68 06 bb 	st.b	sp[1723],r8
80005182:	50 2e       	stdsp	sp[0x8],lr
80005184:	e0 8f 08 ad 	bral	800062de <_vfprintf_r+0x1652>
80005188:	50 a7       	stdsp	sp[0x28],r7
8000518a:	50 80       	stdsp	sp[0x20],r0
8000518c:	0c 97       	mov	r7,r6
8000518e:	04 94       	mov	r4,r2
80005190:	06 96       	mov	r6,r3
80005192:	02 92       	mov	r2,r1
80005194:	40 93       	lddsp	r3,sp[0x24]
80005196:	10 90       	mov	r0,r8
80005198:	40 41       	lddsp	r1,sp[0x10]
8000519a:	a5 a5       	sbr	r5,0x4
8000519c:	c0 a8       	rjmp	800051b0 <_vfprintf_r+0x524>
8000519e:	50 a7       	stdsp	sp[0x28],r7
800051a0:	50 80       	stdsp	sp[0x20],r0
800051a2:	0c 97       	mov	r7,r6
800051a4:	04 94       	mov	r4,r2
800051a6:	06 96       	mov	r6,r3
800051a8:	02 92       	mov	r2,r1
800051aa:	40 93       	lddsp	r3,sp[0x24]
800051ac:	10 90       	mov	r0,r8
800051ae:	40 41       	lddsp	r1,sp[0x10]
800051b0:	ed b5 00 05 	bld	r5,0x5
800051b4:	c5 11       	brne	80005256 <_vfprintf_r+0x5ca>
800051b6:	fa f8 06 b4 	ld.w	r8,sp[1716]
800051ba:	40 3c       	lddsp	r12,sp[0xc]
800051bc:	58 0c       	cp.w	r12,0
800051be:	c1 e0       	breq	800051fa <_vfprintf_r+0x56e>
800051c0:	10 36       	cp.w	r6,r8
800051c2:	c0 64       	brge	800051ce <_vfprintf_r+0x542>
800051c4:	fa cb f9 44 	sub	r11,sp,-1724
800051c8:	f6 06 00 36 	add	r6,r11,r6<<0x3
800051cc:	c2 08       	rjmp	8000520c <_vfprintf_r+0x580>
800051ce:	fa c8 f9 50 	sub	r8,sp,-1712
800051d2:	1a d8       	st.w	--sp,r8
800051d4:	fa c8 fa b8 	sub	r8,sp,-1352
800051d8:	0c 9b       	mov	r11,r6
800051da:	1a d8       	st.w	--sp,r8
800051dc:	fa c8 fb b4 	sub	r8,sp,-1100
800051e0:	1a d8       	st.w	--sp,r8
800051e2:	fa c9 ff b4 	sub	r9,sp,-76
800051e6:	fa c8 f9 40 	sub	r8,sp,-1728
800051ea:	04 9a       	mov	r10,r2
800051ec:	08 9c       	mov	r12,r4
800051ee:	fe b0 fb b7 	rcall	8000495c <get_arg>
800051f2:	2f dd       	sub	sp,-12
800051f4:	78 1b       	ld.w	r11,r12[0x4]
800051f6:	78 09       	ld.w	r9,r12[0x0]
800051f8:	c2 b8       	rjmp	8000524e <_vfprintf_r+0x5c2>
800051fa:	ee ca ff ff 	sub	r10,r7,-1
800051fe:	10 37       	cp.w	r7,r8
80005200:	c0 b4       	brge	80005216 <_vfprintf_r+0x58a>
80005202:	fa c9 f9 44 	sub	r9,sp,-1724
80005206:	14 97       	mov	r7,r10
80005208:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000520c:	ec fb fd 8c 	ld.w	r11,r6[-628]
80005210:	ec f9 fd 88 	ld.w	r9,r6[-632]
80005214:	c1 d8       	rjmp	8000524e <_vfprintf_r+0x5c2>
80005216:	41 09       	lddsp	r9,sp[0x40]
80005218:	59 f8       	cp.w	r8,31
8000521a:	e0 89 00 14 	brgt	80005242 <_vfprintf_r+0x5b6>
8000521e:	f2 cb ff f8 	sub	r11,r9,-8
80005222:	51 0b       	stdsp	sp[0x40],r11
80005224:	fa c6 f9 44 	sub	r6,sp,-1724
80005228:	72 1b       	ld.w	r11,r9[0x4]
8000522a:	ec 08 00 3c 	add	r12,r6,r8<<0x3
8000522e:	72 09       	ld.w	r9,r9[0x0]
80005230:	f9 4b fd 8c 	st.w	r12[-628],r11
80005234:	f9 49 fd 88 	st.w	r12[-632],r9
80005238:	2f f8       	sub	r8,-1
8000523a:	14 97       	mov	r7,r10
8000523c:	fb 48 06 b4 	st.w	sp[1716],r8
80005240:	c0 78       	rjmp	8000524e <_vfprintf_r+0x5c2>
80005242:	f2 c8 ff f8 	sub	r8,r9,-8
80005246:	72 1b       	ld.w	r11,r9[0x4]
80005248:	14 97       	mov	r7,r10
8000524a:	51 08       	stdsp	sp[0x40],r8
8000524c:	72 09       	ld.w	r9,r9[0x0]
8000524e:	16 98       	mov	r8,r11
80005250:	fa e9 00 00 	st.d	sp[0],r8
80005254:	ca e8       	rjmp	800053b0 <_vfprintf_r+0x724>
80005256:	ed b5 00 04 	bld	r5,0x4
8000525a:	c1 71       	brne	80005288 <_vfprintf_r+0x5fc>
8000525c:	fa f8 06 b4 	ld.w	r8,sp[1716]
80005260:	40 3e       	lddsp	lr,sp[0xc]
80005262:	58 0e       	cp.w	lr,0
80005264:	c0 80       	breq	80005274 <_vfprintf_r+0x5e8>
80005266:	10 36       	cp.w	r6,r8
80005268:	c6 94       	brge	8000533a <_vfprintf_r+0x6ae>
8000526a:	fa cc f9 44 	sub	r12,sp,-1724
8000526e:	f8 06 00 36 	add	r6,r12,r6<<0x3
80005272:	c8 28       	rjmp	80005376 <_vfprintf_r+0x6ea>
80005274:	ee ca ff ff 	sub	r10,r7,-1
80005278:	10 37       	cp.w	r7,r8
8000527a:	e0 84 00 81 	brge	8000537c <_vfprintf_r+0x6f0>
8000527e:	fa cb f9 44 	sub	r11,sp,-1724
80005282:	f6 06 00 36 	add	r6,r11,r6<<0x3
80005286:	c7 78       	rjmp	80005374 <_vfprintf_r+0x6e8>
80005288:	ed b5 00 06 	bld	r5,0x6
8000528c:	c4 b1       	brne	80005322 <_vfprintf_r+0x696>
8000528e:	fa f8 06 b4 	ld.w	r8,sp[1716]
80005292:	40 3c       	lddsp	r12,sp[0xc]
80005294:	58 0c       	cp.w	r12,0
80005296:	c1 d0       	breq	800052d0 <_vfprintf_r+0x644>
80005298:	10 36       	cp.w	r6,r8
8000529a:	c0 64       	brge	800052a6 <_vfprintf_r+0x61a>
8000529c:	fa cb f9 44 	sub	r11,sp,-1724
800052a0:	f6 06 00 36 	add	r6,r11,r6<<0x3
800052a4:	c1 f8       	rjmp	800052e2 <_vfprintf_r+0x656>
800052a6:	fa c8 f9 50 	sub	r8,sp,-1712
800052aa:	1a d8       	st.w	--sp,r8
800052ac:	fa c8 fa b8 	sub	r8,sp,-1352
800052b0:	1a d8       	st.w	--sp,r8
800052b2:	fa c8 fb b4 	sub	r8,sp,-1100
800052b6:	1a d8       	st.w	--sp,r8
800052b8:	fa c8 f9 40 	sub	r8,sp,-1728
800052bc:	fa c9 ff b4 	sub	r9,sp,-76
800052c0:	04 9a       	mov	r10,r2
800052c2:	0c 9b       	mov	r11,r6
800052c4:	08 9c       	mov	r12,r4
800052c6:	fe b0 fb 4b 	rcall	8000495c <get_arg>
800052ca:	2f dd       	sub	sp,-12
800052cc:	98 18       	ld.sh	r8,r12[0x2]
800052ce:	c2 68       	rjmp	8000531a <_vfprintf_r+0x68e>
800052d0:	ee ca ff ff 	sub	r10,r7,-1
800052d4:	10 37       	cp.w	r7,r8
800052d6:	c0 94       	brge	800052e8 <_vfprintf_r+0x65c>
800052d8:	fa c9 f9 44 	sub	r9,sp,-1724
800052dc:	14 97       	mov	r7,r10
800052de:	f2 06 00 36 	add	r6,r9,r6<<0x3
800052e2:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
800052e6:	c1 a8       	rjmp	8000531a <_vfprintf_r+0x68e>
800052e8:	41 09       	lddsp	r9,sp[0x40]
800052ea:	59 f8       	cp.w	r8,31
800052ec:	e0 89 00 13 	brgt	80005312 <_vfprintf_r+0x686>
800052f0:	f2 cb ff fc 	sub	r11,r9,-4
800052f4:	51 0b       	stdsp	sp[0x40],r11
800052f6:	72 09       	ld.w	r9,r9[0x0]
800052f8:	fa c6 f9 44 	sub	r6,sp,-1724
800052fc:	ec 08 00 3b 	add	r11,r6,r8<<0x3
80005300:	2f f8       	sub	r8,-1
80005302:	f7 49 fd 88 	st.w	r11[-632],r9
80005306:	fb 48 06 b4 	st.w	sp[1716],r8
8000530a:	14 97       	mov	r7,r10
8000530c:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
80005310:	c0 58       	rjmp	8000531a <_vfprintf_r+0x68e>
80005312:	92 18       	ld.sh	r8,r9[0x2]
80005314:	14 97       	mov	r7,r10
80005316:	2f c9       	sub	r9,-4
80005318:	51 09       	stdsp	sp[0x40],r9
8000531a:	50 18       	stdsp	sp[0x4],r8
8000531c:	bf 58       	asr	r8,0x1f
8000531e:	50 08       	stdsp	sp[0x0],r8
80005320:	c4 88       	rjmp	800053b0 <_vfprintf_r+0x724>
80005322:	fa f8 06 b4 	ld.w	r8,sp[1716]
80005326:	40 3c       	lddsp	r12,sp[0xc]
80005328:	58 0c       	cp.w	r12,0
8000532a:	c1 d0       	breq	80005364 <_vfprintf_r+0x6d8>
8000532c:	10 36       	cp.w	r6,r8
8000532e:	c0 64       	brge	8000533a <_vfprintf_r+0x6ae>
80005330:	fa cb f9 44 	sub	r11,sp,-1724
80005334:	f6 06 00 36 	add	r6,r11,r6<<0x3
80005338:	c1 f8       	rjmp	80005376 <_vfprintf_r+0x6ea>
8000533a:	fa c8 f9 50 	sub	r8,sp,-1712
8000533e:	1a d8       	st.w	--sp,r8
80005340:	fa c8 fa b8 	sub	r8,sp,-1352
80005344:	0c 9b       	mov	r11,r6
80005346:	1a d8       	st.w	--sp,r8
80005348:	fa c8 fb b4 	sub	r8,sp,-1100
8000534c:	04 9a       	mov	r10,r2
8000534e:	1a d8       	st.w	--sp,r8
80005350:	08 9c       	mov	r12,r4
80005352:	fa c8 f9 40 	sub	r8,sp,-1728
80005356:	fa c9 ff b4 	sub	r9,sp,-76
8000535a:	fe b0 fb 01 	rcall	8000495c <get_arg>
8000535e:	2f dd       	sub	sp,-12
80005360:	78 0b       	ld.w	r11,r12[0x0]
80005362:	c2 48       	rjmp	800053aa <_vfprintf_r+0x71e>
80005364:	ee ca ff ff 	sub	r10,r7,-1
80005368:	10 37       	cp.w	r7,r8
8000536a:	c0 94       	brge	8000537c <_vfprintf_r+0x6f0>
8000536c:	fa c9 f9 44 	sub	r9,sp,-1724
80005370:	f2 06 00 36 	add	r6,r9,r6<<0x3
80005374:	14 97       	mov	r7,r10
80005376:	ec fb fd 88 	ld.w	r11,r6[-632]
8000537a:	c1 88       	rjmp	800053aa <_vfprintf_r+0x71e>
8000537c:	41 09       	lddsp	r9,sp[0x40]
8000537e:	59 f8       	cp.w	r8,31
80005380:	e0 89 00 11 	brgt	800053a2 <_vfprintf_r+0x716>
80005384:	f2 cb ff fc 	sub	r11,r9,-4
80005388:	51 0b       	stdsp	sp[0x40],r11
8000538a:	fa c6 f9 44 	sub	r6,sp,-1724
8000538e:	72 0b       	ld.w	r11,r9[0x0]
80005390:	ec 08 00 39 	add	r9,r6,r8<<0x3
80005394:	f3 4b fd 88 	st.w	r9[-632],r11
80005398:	2f f8       	sub	r8,-1
8000539a:	14 97       	mov	r7,r10
8000539c:	fb 48 06 b4 	st.w	sp[1716],r8
800053a0:	c0 58       	rjmp	800053aa <_vfprintf_r+0x71e>
800053a2:	72 0b       	ld.w	r11,r9[0x0]
800053a4:	14 97       	mov	r7,r10
800053a6:	2f c9       	sub	r9,-4
800053a8:	51 09       	stdsp	sp[0x40],r9
800053aa:	50 1b       	stdsp	sp[0x4],r11
800053ac:	bf 5b       	asr	r11,0x1f
800053ae:	50 0b       	stdsp	sp[0x0],r11
800053b0:	fa ea 00 00 	ld.d	r10,sp[0]
800053b4:	58 0a       	cp.w	r10,0
800053b6:	5c 2b       	cpc	r11
800053b8:	c0 e4       	brge	800053d4 <_vfprintf_r+0x748>
800053ba:	30 08       	mov	r8,0
800053bc:	fa ea 00 00 	ld.d	r10,sp[0]
800053c0:	30 09       	mov	r9,0
800053c2:	f0 0a 01 0a 	sub	r10,r8,r10
800053c6:	f2 0b 01 4b 	sbc	r11,r9,r11
800053ca:	32 d8       	mov	r8,45
800053cc:	fa eb 00 00 	st.d	sp[0],r10
800053d0:	fb 68 06 bb 	st.b	sp[1723],r8
800053d4:	30 18       	mov	r8,1
800053d6:	e0 8f 06 fa 	bral	800061ca <_vfprintf_r+0x153e>
800053da:	50 a7       	stdsp	sp[0x28],r7
800053dc:	50 80       	stdsp	sp[0x20],r0
800053de:	0c 97       	mov	r7,r6
800053e0:	04 94       	mov	r4,r2
800053e2:	06 96       	mov	r6,r3
800053e4:	02 92       	mov	r2,r1
800053e6:	40 93       	lddsp	r3,sp[0x24]
800053e8:	10 90       	mov	r0,r8
800053ea:	40 41       	lddsp	r1,sp[0x10]
800053ec:	0e 99       	mov	r9,r7
800053ee:	ed b5 00 03 	bld	r5,0x3
800053f2:	c4 11       	brne	80005474 <_vfprintf_r+0x7e8>
800053f4:	fa f8 06 b4 	ld.w	r8,sp[1716]
800053f8:	40 3a       	lddsp	r10,sp[0xc]
800053fa:	58 0a       	cp.w	r10,0
800053fc:	c1 90       	breq	8000542e <_vfprintf_r+0x7a2>
800053fe:	10 36       	cp.w	r6,r8
80005400:	c6 45       	brlt	800054c8 <_vfprintf_r+0x83c>
80005402:	fa c8 f9 50 	sub	r8,sp,-1712
80005406:	1a d8       	st.w	--sp,r8
80005408:	fa c8 fa b8 	sub	r8,sp,-1352
8000540c:	1a d8       	st.w	--sp,r8
8000540e:	fa c8 fb b4 	sub	r8,sp,-1100
80005412:	0c 9b       	mov	r11,r6
80005414:	1a d8       	st.w	--sp,r8
80005416:	04 9a       	mov	r10,r2
80005418:	fa c8 f9 40 	sub	r8,sp,-1728
8000541c:	fa c9 ff b4 	sub	r9,sp,-76
80005420:	08 9c       	mov	r12,r4
80005422:	fe b0 fa 9d 	rcall	8000495c <get_arg>
80005426:	2f dd       	sub	sp,-12
80005428:	78 16       	ld.w	r6,r12[0x4]
8000542a:	50 76       	stdsp	sp[0x1c],r6
8000542c:	c4 88       	rjmp	800054bc <_vfprintf_r+0x830>
8000542e:	2f f7       	sub	r7,-1
80005430:	10 39       	cp.w	r9,r8
80005432:	c0 c4       	brge	8000544a <_vfprintf_r+0x7be>
80005434:	fa ce f9 44 	sub	lr,sp,-1724
80005438:	fc 06 00 36 	add	r6,lr,r6<<0x3
8000543c:	ec fc fd 8c 	ld.w	r12,r6[-628]
80005440:	50 7c       	stdsp	sp[0x1c],r12
80005442:	ec f6 fd 88 	ld.w	r6,r6[-632]
80005446:	50 56       	stdsp	sp[0x14],r6
80005448:	c6 68       	rjmp	80005514 <_vfprintf_r+0x888>
8000544a:	41 09       	lddsp	r9,sp[0x40]
8000544c:	59 f8       	cp.w	r8,31
8000544e:	e0 89 00 10 	brgt	8000546e <_vfprintf_r+0x7e2>
80005452:	f2 ca ff f8 	sub	r10,r9,-8
80005456:	72 1b       	ld.w	r11,r9[0x4]
80005458:	51 0a       	stdsp	sp[0x40],r10
8000545a:	72 09       	ld.w	r9,r9[0x0]
8000545c:	fa ca f9 44 	sub	r10,sp,-1724
80005460:	50 7b       	stdsp	sp[0x1c],r11
80005462:	50 59       	stdsp	sp[0x14],r9
80005464:	f4 08 00 39 	add	r9,r10,r8<<0x3
80005468:	40 5b       	lddsp	r11,sp[0x14]
8000546a:	40 7a       	lddsp	r10,sp[0x1c]
8000546c:	c4 78       	rjmp	800054fa <_vfprintf_r+0x86e>
8000546e:	72 18       	ld.w	r8,r9[0x4]
80005470:	50 78       	stdsp	sp[0x1c],r8
80005472:	c4 c8       	rjmp	8000550a <_vfprintf_r+0x87e>
80005474:	fa f8 06 b4 	ld.w	r8,sp[1716]
80005478:	40 3e       	lddsp	lr,sp[0xc]
8000547a:	58 0e       	cp.w	lr,0
8000547c:	c2 30       	breq	800054c2 <_vfprintf_r+0x836>
8000547e:	10 36       	cp.w	r6,r8
80005480:	c0 94       	brge	80005492 <_vfprintf_r+0x806>
80005482:	fa cc f9 44 	sub	r12,sp,-1724
80005486:	f8 06 00 36 	add	r6,r12,r6<<0x3
8000548a:	ec fb fd 8c 	ld.w	r11,r6[-628]
8000548e:	50 7b       	stdsp	sp[0x1c],r11
80005490:	cd 9b       	rjmp	80005442 <_vfprintf_r+0x7b6>
80005492:	fa c8 f9 50 	sub	r8,sp,-1712
80005496:	1a d8       	st.w	--sp,r8
80005498:	fa c8 fa b8 	sub	r8,sp,-1352
8000549c:	04 9a       	mov	r10,r2
8000549e:	1a d8       	st.w	--sp,r8
800054a0:	fa c8 fb b4 	sub	r8,sp,-1100
800054a4:	0c 9b       	mov	r11,r6
800054a6:	1a d8       	st.w	--sp,r8
800054a8:	08 9c       	mov	r12,r4
800054aa:	fa c8 f9 40 	sub	r8,sp,-1728
800054ae:	fa c9 ff b4 	sub	r9,sp,-76
800054b2:	fe b0 fa 55 	rcall	8000495c <get_arg>
800054b6:	2f dd       	sub	sp,-12
800054b8:	78 1a       	ld.w	r10,r12[0x4]
800054ba:	50 7a       	stdsp	sp[0x1c],r10
800054bc:	78 0c       	ld.w	r12,r12[0x0]
800054be:	50 5c       	stdsp	sp[0x14],r12
800054c0:	c2 a8       	rjmp	80005514 <_vfprintf_r+0x888>
800054c2:	2f f7       	sub	r7,-1
800054c4:	10 39       	cp.w	r9,r8
800054c6:	c0 94       	brge	800054d8 <_vfprintf_r+0x84c>
800054c8:	fa c9 f9 44 	sub	r9,sp,-1724
800054cc:	f2 06 00 36 	add	r6,r9,r6<<0x3
800054d0:	ec f8 fd 8c 	ld.w	r8,r6[-628]
800054d4:	50 78       	stdsp	sp[0x1c],r8
800054d6:	cb 6b       	rjmp	80005442 <_vfprintf_r+0x7b6>
800054d8:	41 09       	lddsp	r9,sp[0x40]
800054da:	59 f8       	cp.w	r8,31
800054dc:	e0 89 00 15 	brgt	80005506 <_vfprintf_r+0x87a>
800054e0:	f2 ca ff f8 	sub	r10,r9,-8
800054e4:	72 16       	ld.w	r6,r9[0x4]
800054e6:	72 09       	ld.w	r9,r9[0x0]
800054e8:	51 0a       	stdsp	sp[0x40],r10
800054ea:	50 59       	stdsp	sp[0x14],r9
800054ec:	fa ce f9 44 	sub	lr,sp,-1724
800054f0:	50 76       	stdsp	sp[0x1c],r6
800054f2:	fc 08 00 39 	add	r9,lr,r8<<0x3
800054f6:	40 5b       	lddsp	r11,sp[0x14]
800054f8:	0c 9a       	mov	r10,r6
800054fa:	f2 eb fd 88 	st.d	r9[-632],r10
800054fe:	2f f8       	sub	r8,-1
80005500:	fb 48 06 b4 	st.w	sp[1716],r8
80005504:	c0 88       	rjmp	80005514 <_vfprintf_r+0x888>
80005506:	72 1c       	ld.w	r12,r9[0x4]
80005508:	50 7c       	stdsp	sp[0x1c],r12
8000550a:	f2 c8 ff f8 	sub	r8,r9,-8
8000550e:	51 08       	stdsp	sp[0x40],r8
80005510:	72 09       	ld.w	r9,r9[0x0]
80005512:	50 59       	stdsp	sp[0x14],r9
80005514:	40 5b       	lddsp	r11,sp[0x14]
80005516:	40 7a       	lddsp	r10,sp[0x1c]
80005518:	e0 a0 1c de 	rcall	80008ed4 <__isinfd>
8000551c:	18 96       	mov	r6,r12
8000551e:	c1 70       	breq	8000554c <_vfprintf_r+0x8c0>
80005520:	30 08       	mov	r8,0
80005522:	30 09       	mov	r9,0
80005524:	40 5b       	lddsp	r11,sp[0x14]
80005526:	40 7a       	lddsp	r10,sp[0x1c]
80005528:	e0 a0 21 cc 	rcall	800098c0 <__avr32_f64_cmp_lt>
8000552c:	c0 40       	breq	80005534 <_vfprintf_r+0x8a8>
8000552e:	32 d8       	mov	r8,45
80005530:	fb 68 06 bb 	st.b	sp[1723],r8
80005534:	fe c8 af 98 	sub	r8,pc,-20584
80005538:	fe c6 af 98 	sub	r6,pc,-20584
8000553c:	a7 d5       	cbr	r5,0x7
8000553e:	e0 40 00 47 	cp.w	r0,71
80005542:	f0 06 17 a0 	movle	r6,r8
80005546:	30 32       	mov	r2,3
80005548:	e0 8f 06 ce 	bral	800062e4 <_vfprintf_r+0x1658>
8000554c:	40 5b       	lddsp	r11,sp[0x14]
8000554e:	40 7a       	lddsp	r10,sp[0x1c]
80005550:	e0 a0 1c d7 	rcall	80008efe <__isnand>
80005554:	c0 e0       	breq	80005570 <_vfprintf_r+0x8e4>
80005556:	50 26       	stdsp	sp[0x8],r6
80005558:	fe c8 af b4 	sub	r8,pc,-20556
8000555c:	fe c6 af b4 	sub	r6,pc,-20556
80005560:	a7 d5       	cbr	r5,0x7
80005562:	e0 40 00 47 	cp.w	r0,71
80005566:	f0 06 17 a0 	movle	r6,r8
8000556a:	30 32       	mov	r2,3
8000556c:	e0 8f 06 c2 	bral	800062f0 <_vfprintf_r+0x1664>
80005570:	40 2a       	lddsp	r10,sp[0x8]
80005572:	5b fa       	cp.w	r10,-1
80005574:	c0 41       	brne	8000557c <_vfprintf_r+0x8f0>
80005576:	30 69       	mov	r9,6
80005578:	50 29       	stdsp	sp[0x8],r9
8000557a:	c1 18       	rjmp	8000559c <_vfprintf_r+0x910>
8000557c:	e0 40 00 47 	cp.w	r0,71
80005580:	5f 09       	sreq	r9
80005582:	e0 40 00 67 	cp.w	r0,103
80005586:	5f 08       	sreq	r8
80005588:	f3 e8 10 08 	or	r8,r9,r8
8000558c:	f8 08 18 00 	cp.b	r8,r12
80005590:	c0 60       	breq	8000559c <_vfprintf_r+0x910>
80005592:	40 28       	lddsp	r8,sp[0x8]
80005594:	58 08       	cp.w	r8,0
80005596:	f9 b8 00 01 	moveq	r8,1
8000559a:	50 28       	stdsp	sp[0x8],r8
8000559c:	40 78       	lddsp	r8,sp[0x1c]
8000559e:	40 59       	lddsp	r9,sp[0x14]
800055a0:	fa e9 06 94 	st.d	sp[1684],r8
800055a4:	a9 a5       	sbr	r5,0x8
800055a6:	fa f8 06 94 	ld.w	r8,sp[1684]
800055aa:	58 08       	cp.w	r8,0
800055ac:	c0 65       	brlt	800055b8 <_vfprintf_r+0x92c>
800055ae:	40 5e       	lddsp	lr,sp[0x14]
800055b0:	30 0c       	mov	r12,0
800055b2:	50 6e       	stdsp	sp[0x18],lr
800055b4:	50 9c       	stdsp	sp[0x24],r12
800055b6:	c0 78       	rjmp	800055c4 <_vfprintf_r+0x938>
800055b8:	40 5b       	lddsp	r11,sp[0x14]
800055ba:	32 da       	mov	r10,45
800055bc:	ee 1b 80 00 	eorh	r11,0x8000
800055c0:	50 9a       	stdsp	sp[0x24],r10
800055c2:	50 6b       	stdsp	sp[0x18],r11
800055c4:	e0 40 00 46 	cp.w	r0,70
800055c8:	5f 09       	sreq	r9
800055ca:	e0 40 00 66 	cp.w	r0,102
800055ce:	5f 08       	sreq	r8
800055d0:	f3 e8 10 08 	or	r8,r9,r8
800055d4:	50 48       	stdsp	sp[0x10],r8
800055d6:	c0 40       	breq	800055de <_vfprintf_r+0x952>
800055d8:	40 22       	lddsp	r2,sp[0x8]
800055da:	30 39       	mov	r9,3
800055dc:	c1 08       	rjmp	800055fc <_vfprintf_r+0x970>
800055de:	e0 40 00 45 	cp.w	r0,69
800055e2:	5f 09       	sreq	r9
800055e4:	e0 40 00 65 	cp.w	r0,101
800055e8:	5f 08       	sreq	r8
800055ea:	40 22       	lddsp	r2,sp[0x8]
800055ec:	10 49       	or	r9,r8
800055ee:	2f f2       	sub	r2,-1
800055f0:	40 46       	lddsp	r6,sp[0x10]
800055f2:	ec 09 18 00 	cp.b	r9,r6
800055f6:	fb f2 00 02 	ld.weq	r2,sp[0x8]
800055fa:	30 29       	mov	r9,2
800055fc:	fa c8 f9 5c 	sub	r8,sp,-1700
80005600:	1a d8       	st.w	--sp,r8
80005602:	fa c8 f9 54 	sub	r8,sp,-1708
80005606:	1a d8       	st.w	--sp,r8
80005608:	fa c8 f9 4c 	sub	r8,sp,-1716
8000560c:	08 9c       	mov	r12,r4
8000560e:	1a d8       	st.w	--sp,r8
80005610:	04 98       	mov	r8,r2
80005612:	40 9b       	lddsp	r11,sp[0x24]
80005614:	40 aa       	lddsp	r10,sp[0x28]
80005616:	e0 a0 0b c3 	rcall	80006d9c <_dtoa_r>
8000561a:	e0 40 00 47 	cp.w	r0,71
8000561e:	5f 19       	srne	r9
80005620:	e0 40 00 67 	cp.w	r0,103
80005624:	5f 18       	srne	r8
80005626:	18 96       	mov	r6,r12
80005628:	2f dd       	sub	sp,-12
8000562a:	f3 e8 00 08 	and	r8,r9,r8
8000562e:	c0 41       	brne	80005636 <_vfprintf_r+0x9aa>
80005630:	ed b5 00 00 	bld	r5,0x0
80005634:	c3 01       	brne	80005694 <_vfprintf_r+0xa08>
80005636:	ec 02 00 0e 	add	lr,r6,r2
8000563a:	50 3e       	stdsp	sp[0xc],lr
8000563c:	40 4c       	lddsp	r12,sp[0x10]
8000563e:	58 0c       	cp.w	r12,0
80005640:	c1 50       	breq	8000566a <_vfprintf_r+0x9de>
80005642:	0d 89       	ld.ub	r9,r6[0x0]
80005644:	33 08       	mov	r8,48
80005646:	f0 09 18 00 	cp.b	r9,r8
8000564a:	c0 b1       	brne	80005660 <_vfprintf_r+0x9d4>
8000564c:	30 08       	mov	r8,0
8000564e:	30 09       	mov	r9,0
80005650:	40 6b       	lddsp	r11,sp[0x18]
80005652:	40 7a       	lddsp	r10,sp[0x1c]
80005654:	e0 a0 20 ef 	rcall	80009832 <__avr32_f64_cmp_eq>
80005658:	fb b2 00 01 	rsubeq	r2,1
8000565c:	fb f2 0b ab 	st.weq	sp[0x6ac],r2
80005660:	40 3b       	lddsp	r11,sp[0xc]
80005662:	fa f8 06 ac 	ld.w	r8,sp[1708]
80005666:	10 0b       	add	r11,r8
80005668:	50 3b       	stdsp	sp[0xc],r11
8000566a:	40 6b       	lddsp	r11,sp[0x18]
8000566c:	30 08       	mov	r8,0
8000566e:	30 09       	mov	r9,0
80005670:	40 7a       	lddsp	r10,sp[0x1c]
80005672:	e0 a0 20 e0 	rcall	80009832 <__avr32_f64_cmp_eq>
80005676:	c0 90       	breq	80005688 <_vfprintf_r+0x9fc>
80005678:	40 3a       	lddsp	r10,sp[0xc]
8000567a:	fb 4a 06 a4 	st.w	sp[1700],r10
8000567e:	c0 58       	rjmp	80005688 <_vfprintf_r+0x9fc>
80005680:	10 c9       	st.b	r8++,r9
80005682:	fb 48 06 a4 	st.w	sp[1700],r8
80005686:	c0 28       	rjmp	8000568a <_vfprintf_r+0x9fe>
80005688:	33 09       	mov	r9,48
8000568a:	fa f8 06 a4 	ld.w	r8,sp[1700]
8000568e:	40 3e       	lddsp	lr,sp[0xc]
80005690:	1c 38       	cp.w	r8,lr
80005692:	cf 73       	brcs	80005680 <_vfprintf_r+0x9f4>
80005694:	e0 40 00 47 	cp.w	r0,71
80005698:	5f 09       	sreq	r9
8000569a:	e0 40 00 67 	cp.w	r0,103
8000569e:	5f 08       	sreq	r8
800056a0:	f3 e8 10 08 	or	r8,r9,r8
800056a4:	fa f9 06 a4 	ld.w	r9,sp[1700]
800056a8:	0c 19       	sub	r9,r6
800056aa:	50 69       	stdsp	sp[0x18],r9
800056ac:	58 08       	cp.w	r8,0
800056ae:	c0 b0       	breq	800056c4 <_vfprintf_r+0xa38>
800056b0:	fa f8 06 ac 	ld.w	r8,sp[1708]
800056b4:	5b d8       	cp.w	r8,-3
800056b6:	c0 55       	brlt	800056c0 <_vfprintf_r+0xa34>
800056b8:	40 2c       	lddsp	r12,sp[0x8]
800056ba:	18 38       	cp.w	r8,r12
800056bc:	e0 8a 00 6a 	brle	80005790 <_vfprintf_r+0xb04>
800056c0:	20 20       	sub	r0,2
800056c2:	c0 58       	rjmp	800056cc <_vfprintf_r+0xa40>
800056c4:	e0 40 00 65 	cp.w	r0,101
800056c8:	e0 89 00 46 	brgt	80005754 <_vfprintf_r+0xac8>
800056cc:	fa fb 06 ac 	ld.w	r11,sp[1708]
800056d0:	fb 60 06 9c 	st.b	sp[1692],r0
800056d4:	20 1b       	sub	r11,1
800056d6:	fb 4b 06 ac 	st.w	sp[1708],r11
800056da:	c0 47       	brpl	800056e2 <_vfprintf_r+0xa56>
800056dc:	5c 3b       	neg	r11
800056de:	32 d8       	mov	r8,45
800056e0:	c0 28       	rjmp	800056e4 <_vfprintf_r+0xa58>
800056e2:	32 b8       	mov	r8,43
800056e4:	fb 68 06 9d 	st.b	sp[1693],r8
800056e8:	58 9b       	cp.w	r11,9
800056ea:	e0 8a 00 1d 	brle	80005724 <_vfprintf_r+0xa98>
800056ee:	fa c9 fa 35 	sub	r9,sp,-1483
800056f2:	30 aa       	mov	r10,10
800056f4:	12 98       	mov	r8,r9
800056f6:	0e 9c       	mov	r12,r7
800056f8:	0c 92       	mov	r2,r6
800056fa:	f6 0a 0c 06 	divs	r6,r11,r10
800056fe:	0e 9b       	mov	r11,r7
80005700:	2d 0b       	sub	r11,-48
80005702:	10 fb       	st.b	--r8,r11
80005704:	0c 9b       	mov	r11,r6
80005706:	58 96       	cp.w	r6,9
80005708:	fe 99 ff f9 	brgt	800056fa <_vfprintf_r+0xa6e>
8000570c:	2d 0b       	sub	r11,-48
8000570e:	18 97       	mov	r7,r12
80005710:	04 96       	mov	r6,r2
80005712:	10 fb       	st.b	--r8,r11
80005714:	fa ca f9 62 	sub	r10,sp,-1694
80005718:	c0 38       	rjmp	8000571e <_vfprintf_r+0xa92>
8000571a:	11 3b       	ld.ub	r11,r8++
8000571c:	14 cb       	st.b	r10++,r11
8000571e:	12 38       	cp.w	r8,r9
80005720:	cf d3       	brcs	8000571a <_vfprintf_r+0xa8e>
80005722:	c0 98       	rjmp	80005734 <_vfprintf_r+0xaa8>
80005724:	2d 0b       	sub	r11,-48
80005726:	33 08       	mov	r8,48
80005728:	fb 6b 06 9f 	st.b	sp[1695],r11
8000572c:	fb 68 06 9e 	st.b	sp[1694],r8
80005730:	fa ca f9 60 	sub	r10,sp,-1696
80005734:	fa c8 f9 64 	sub	r8,sp,-1692
80005738:	f4 08 01 08 	sub	r8,r10,r8
8000573c:	50 e8       	stdsp	sp[0x38],r8
8000573e:	10 92       	mov	r2,r8
80005740:	40 6b       	lddsp	r11,sp[0x18]
80005742:	16 02       	add	r2,r11
80005744:	58 1b       	cp.w	r11,1
80005746:	e0 89 00 05 	brgt	80005750 <_vfprintf_r+0xac4>
8000574a:	ed b5 00 00 	bld	r5,0x0
8000574e:	c3 51       	brne	800057b8 <_vfprintf_r+0xb2c>
80005750:	2f f2       	sub	r2,-1
80005752:	c3 38       	rjmp	800057b8 <_vfprintf_r+0xb2c>
80005754:	e0 40 00 66 	cp.w	r0,102
80005758:	c1 c1       	brne	80005790 <_vfprintf_r+0xb04>
8000575a:	fa f2 06 ac 	ld.w	r2,sp[1708]
8000575e:	58 02       	cp.w	r2,0
80005760:	e0 8a 00 0c 	brle	80005778 <_vfprintf_r+0xaec>
80005764:	40 2a       	lddsp	r10,sp[0x8]
80005766:	58 0a       	cp.w	r10,0
80005768:	c0 41       	brne	80005770 <_vfprintf_r+0xae4>
8000576a:	ed b5 00 00 	bld	r5,0x0
8000576e:	c2 51       	brne	800057b8 <_vfprintf_r+0xb2c>
80005770:	2f f2       	sub	r2,-1
80005772:	40 29       	lddsp	r9,sp[0x8]
80005774:	12 02       	add	r2,r9
80005776:	c0 b8       	rjmp	8000578c <_vfprintf_r+0xb00>
80005778:	40 28       	lddsp	r8,sp[0x8]
8000577a:	58 08       	cp.w	r8,0
8000577c:	c0 61       	brne	80005788 <_vfprintf_r+0xafc>
8000577e:	ed b5 00 00 	bld	r5,0x0
80005782:	c0 30       	breq	80005788 <_vfprintf_r+0xafc>
80005784:	30 12       	mov	r2,1
80005786:	c1 98       	rjmp	800057b8 <_vfprintf_r+0xb2c>
80005788:	40 22       	lddsp	r2,sp[0x8]
8000578a:	2f e2       	sub	r2,-2
8000578c:	36 60       	mov	r0,102
8000578e:	c1 58       	rjmp	800057b8 <_vfprintf_r+0xb2c>
80005790:	fa f2 06 ac 	ld.w	r2,sp[1708]
80005794:	40 6e       	lddsp	lr,sp[0x18]
80005796:	1c 32       	cp.w	r2,lr
80005798:	c0 65       	brlt	800057a4 <_vfprintf_r+0xb18>
8000579a:	ed b5 00 00 	bld	r5,0x0
8000579e:	f7 b2 00 ff 	subeq	r2,-1
800057a2:	c0 a8       	rjmp	800057b6 <_vfprintf_r+0xb2a>
800057a4:	e4 08 11 02 	rsub	r8,r2,2
800057a8:	40 6c       	lddsp	r12,sp[0x18]
800057aa:	58 02       	cp.w	r2,0
800057ac:	f0 02 17 a0 	movle	r2,r8
800057b0:	f9 b2 09 01 	movgt	r2,1
800057b4:	18 02       	add	r2,r12
800057b6:	36 70       	mov	r0,103
800057b8:	40 9b       	lddsp	r11,sp[0x24]
800057ba:	58 0b       	cp.w	r11,0
800057bc:	e0 80 05 94 	breq	800062e4 <_vfprintf_r+0x1658>
800057c0:	32 d8       	mov	r8,45
800057c2:	fb 68 06 bb 	st.b	sp[1723],r8
800057c6:	e0 8f 05 93 	bral	800062ec <_vfprintf_r+0x1660>
800057ca:	50 a7       	stdsp	sp[0x28],r7
800057cc:	04 94       	mov	r4,r2
800057ce:	0c 97       	mov	r7,r6
800057d0:	02 92       	mov	r2,r1
800057d2:	06 96       	mov	r6,r3
800057d4:	40 41       	lddsp	r1,sp[0x10]
800057d6:	40 93       	lddsp	r3,sp[0x24]
800057d8:	0e 99       	mov	r9,r7
800057da:	ed b5 00 05 	bld	r5,0x5
800057de:	c4 81       	brne	8000586e <_vfprintf_r+0xbe2>
800057e0:	fa f8 06 b4 	ld.w	r8,sp[1716]
800057e4:	40 3e       	lddsp	lr,sp[0xc]
800057e6:	58 0e       	cp.w	lr,0
800057e8:	c1 d0       	breq	80005822 <_vfprintf_r+0xb96>
800057ea:	10 36       	cp.w	r6,r8
800057ec:	c0 64       	brge	800057f8 <_vfprintf_r+0xb6c>
800057ee:	fa cc f9 44 	sub	r12,sp,-1724
800057f2:	f8 06 00 36 	add	r6,r12,r6<<0x3
800057f6:	c1 d8       	rjmp	80005830 <_vfprintf_r+0xba4>
800057f8:	fa c8 f9 50 	sub	r8,sp,-1712
800057fc:	1a d8       	st.w	--sp,r8
800057fe:	fa c8 fa b8 	sub	r8,sp,-1352
80005802:	04 9a       	mov	r10,r2
80005804:	1a d8       	st.w	--sp,r8
80005806:	fa c8 fb b4 	sub	r8,sp,-1100
8000580a:	0c 9b       	mov	r11,r6
8000580c:	1a d8       	st.w	--sp,r8
8000580e:	08 9c       	mov	r12,r4
80005810:	fa c8 f9 40 	sub	r8,sp,-1728
80005814:	fa c9 ff b4 	sub	r9,sp,-76
80005818:	fe b0 f8 a2 	rcall	8000495c <get_arg>
8000581c:	2f dd       	sub	sp,-12
8000581e:	78 0a       	ld.w	r10,r12[0x0]
80005820:	c2 08       	rjmp	80005860 <_vfprintf_r+0xbd4>
80005822:	2f f7       	sub	r7,-1
80005824:	10 39       	cp.w	r9,r8
80005826:	c0 84       	brge	80005836 <_vfprintf_r+0xbaa>
80005828:	fa cb f9 44 	sub	r11,sp,-1724
8000582c:	f6 06 00 36 	add	r6,r11,r6<<0x3
80005830:	ec fa fd 88 	ld.w	r10,r6[-632]
80005834:	c1 68       	rjmp	80005860 <_vfprintf_r+0xbd4>
80005836:	41 09       	lddsp	r9,sp[0x40]
80005838:	59 f8       	cp.w	r8,31
8000583a:	e0 89 00 10 	brgt	8000585a <_vfprintf_r+0xbce>
8000583e:	f2 ca ff fc 	sub	r10,r9,-4
80005842:	51 0a       	stdsp	sp[0x40],r10
80005844:	fa c6 f9 44 	sub	r6,sp,-1724
80005848:	72 0a       	ld.w	r10,r9[0x0]
8000584a:	ec 08 00 39 	add	r9,r6,r8<<0x3
8000584e:	f3 4a fd 88 	st.w	r9[-632],r10
80005852:	2f f8       	sub	r8,-1
80005854:	fb 48 06 b4 	st.w	sp[1716],r8
80005858:	c0 48       	rjmp	80005860 <_vfprintf_r+0xbd4>
8000585a:	72 0a       	ld.w	r10,r9[0x0]
8000585c:	2f c9       	sub	r9,-4
8000585e:	51 09       	stdsp	sp[0x40],r9
80005860:	40 be       	lddsp	lr,sp[0x2c]
80005862:	1c 98       	mov	r8,lr
80005864:	95 1e       	st.w	r10[0x4],lr
80005866:	bf 58       	asr	r8,0x1f
80005868:	95 08       	st.w	r10[0x0],r8
8000586a:	fe 9f fa 9f 	bral	80004da8 <_vfprintf_r+0x11c>
8000586e:	ed b5 00 04 	bld	r5,0x4
80005872:	c4 80       	breq	80005902 <_vfprintf_r+0xc76>
80005874:	e2 15 00 40 	andl	r5,0x40,COH
80005878:	c4 50       	breq	80005902 <_vfprintf_r+0xc76>
8000587a:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000587e:	40 3c       	lddsp	r12,sp[0xc]
80005880:	58 0c       	cp.w	r12,0
80005882:	c1 d0       	breq	800058bc <_vfprintf_r+0xc30>
80005884:	10 36       	cp.w	r6,r8
80005886:	c0 64       	brge	80005892 <_vfprintf_r+0xc06>
80005888:	fa cb f9 44 	sub	r11,sp,-1724
8000588c:	f6 06 00 36 	add	r6,r11,r6<<0x3
80005890:	c1 d8       	rjmp	800058ca <_vfprintf_r+0xc3e>
80005892:	fa c8 f9 50 	sub	r8,sp,-1712
80005896:	1a d8       	st.w	--sp,r8
80005898:	fa c8 fa b8 	sub	r8,sp,-1352
8000589c:	04 9a       	mov	r10,r2
8000589e:	1a d8       	st.w	--sp,r8
800058a0:	fa c8 fb b4 	sub	r8,sp,-1100
800058a4:	0c 9b       	mov	r11,r6
800058a6:	1a d8       	st.w	--sp,r8
800058a8:	08 9c       	mov	r12,r4
800058aa:	fa c8 f9 40 	sub	r8,sp,-1728
800058ae:	fa c9 ff b4 	sub	r9,sp,-76
800058b2:	fe b0 f8 55 	rcall	8000495c <get_arg>
800058b6:	2f dd       	sub	sp,-12
800058b8:	78 0a       	ld.w	r10,r12[0x0]
800058ba:	c2 08       	rjmp	800058fa <_vfprintf_r+0xc6e>
800058bc:	2f f7       	sub	r7,-1
800058be:	10 39       	cp.w	r9,r8
800058c0:	c0 84       	brge	800058d0 <_vfprintf_r+0xc44>
800058c2:	fa ca f9 44 	sub	r10,sp,-1724
800058c6:	f4 06 00 36 	add	r6,r10,r6<<0x3
800058ca:	ec fa fd 88 	ld.w	r10,r6[-632]
800058ce:	c1 68       	rjmp	800058fa <_vfprintf_r+0xc6e>
800058d0:	41 09       	lddsp	r9,sp[0x40]
800058d2:	59 f8       	cp.w	r8,31
800058d4:	e0 89 00 10 	brgt	800058f4 <_vfprintf_r+0xc68>
800058d8:	f2 ca ff fc 	sub	r10,r9,-4
800058dc:	51 0a       	stdsp	sp[0x40],r10
800058de:	fa c6 f9 44 	sub	r6,sp,-1724
800058e2:	72 0a       	ld.w	r10,r9[0x0]
800058e4:	ec 08 00 39 	add	r9,r6,r8<<0x3
800058e8:	f3 4a fd 88 	st.w	r9[-632],r10
800058ec:	2f f8       	sub	r8,-1
800058ee:	fb 48 06 b4 	st.w	sp[1716],r8
800058f2:	c0 48       	rjmp	800058fa <_vfprintf_r+0xc6e>
800058f4:	72 0a       	ld.w	r10,r9[0x0]
800058f6:	2f c9       	sub	r9,-4
800058f8:	51 09       	stdsp	sp[0x40],r9
800058fa:	40 be       	lddsp	lr,sp[0x2c]
800058fc:	b4 0e       	st.h	r10[0x0],lr
800058fe:	fe 9f fa 55 	bral	80004da8 <_vfprintf_r+0x11c>
80005902:	fa f8 06 b4 	ld.w	r8,sp[1716]
80005906:	40 3c       	lddsp	r12,sp[0xc]
80005908:	58 0c       	cp.w	r12,0
8000590a:	c1 d0       	breq	80005944 <_vfprintf_r+0xcb8>
8000590c:	10 36       	cp.w	r6,r8
8000590e:	c0 64       	brge	8000591a <_vfprintf_r+0xc8e>
80005910:	fa cb f9 44 	sub	r11,sp,-1724
80005914:	f6 06 00 36 	add	r6,r11,r6<<0x3
80005918:	c1 d8       	rjmp	80005952 <_vfprintf_r+0xcc6>
8000591a:	fa c8 f9 50 	sub	r8,sp,-1712
8000591e:	1a d8       	st.w	--sp,r8
80005920:	fa c8 fa b8 	sub	r8,sp,-1352
80005924:	04 9a       	mov	r10,r2
80005926:	1a d8       	st.w	--sp,r8
80005928:	fa c8 fb b4 	sub	r8,sp,-1100
8000592c:	0c 9b       	mov	r11,r6
8000592e:	1a d8       	st.w	--sp,r8
80005930:	08 9c       	mov	r12,r4
80005932:	fa c8 f9 40 	sub	r8,sp,-1728
80005936:	fa c9 ff b4 	sub	r9,sp,-76
8000593a:	fe b0 f8 11 	rcall	8000495c <get_arg>
8000593e:	2f dd       	sub	sp,-12
80005940:	78 0a       	ld.w	r10,r12[0x0]
80005942:	c2 08       	rjmp	80005982 <_vfprintf_r+0xcf6>
80005944:	2f f7       	sub	r7,-1
80005946:	10 39       	cp.w	r9,r8
80005948:	c0 84       	brge	80005958 <_vfprintf_r+0xccc>
8000594a:	fa ca f9 44 	sub	r10,sp,-1724
8000594e:	f4 06 00 36 	add	r6,r10,r6<<0x3
80005952:	ec fa fd 88 	ld.w	r10,r6[-632]
80005956:	c1 68       	rjmp	80005982 <_vfprintf_r+0xcf6>
80005958:	41 09       	lddsp	r9,sp[0x40]
8000595a:	59 f8       	cp.w	r8,31
8000595c:	e0 89 00 10 	brgt	8000597c <_vfprintf_r+0xcf0>
80005960:	f2 ca ff fc 	sub	r10,r9,-4
80005964:	51 0a       	stdsp	sp[0x40],r10
80005966:	fa c6 f9 44 	sub	r6,sp,-1724
8000596a:	72 0a       	ld.w	r10,r9[0x0]
8000596c:	ec 08 00 39 	add	r9,r6,r8<<0x3
80005970:	f3 4a fd 88 	st.w	r9[-632],r10
80005974:	2f f8       	sub	r8,-1
80005976:	fb 48 06 b4 	st.w	sp[1716],r8
8000597a:	c0 48       	rjmp	80005982 <_vfprintf_r+0xcf6>
8000597c:	72 0a       	ld.w	r10,r9[0x0]
8000597e:	2f c9       	sub	r9,-4
80005980:	51 09       	stdsp	sp[0x40],r9
80005982:	40 be       	lddsp	lr,sp[0x2c]
80005984:	95 0e       	st.w	r10[0x0],lr
80005986:	fe 9f fa 11 	bral	80004da8 <_vfprintf_r+0x11c>
8000598a:	50 a7       	stdsp	sp[0x28],r7
8000598c:	50 80       	stdsp	sp[0x20],r0
8000598e:	0c 97       	mov	r7,r6
80005990:	04 94       	mov	r4,r2
80005992:	06 96       	mov	r6,r3
80005994:	02 92       	mov	r2,r1
80005996:	40 93       	lddsp	r3,sp[0x24]
80005998:	10 90       	mov	r0,r8
8000599a:	40 41       	lddsp	r1,sp[0x10]
8000599c:	a5 a5       	sbr	r5,0x4
8000599e:	c0 a8       	rjmp	800059b2 <_vfprintf_r+0xd26>
800059a0:	50 a7       	stdsp	sp[0x28],r7
800059a2:	50 80       	stdsp	sp[0x20],r0
800059a4:	0c 97       	mov	r7,r6
800059a6:	04 94       	mov	r4,r2
800059a8:	06 96       	mov	r6,r3
800059aa:	02 92       	mov	r2,r1
800059ac:	40 93       	lddsp	r3,sp[0x24]
800059ae:	10 90       	mov	r0,r8
800059b0:	40 41       	lddsp	r1,sp[0x10]
800059b2:	ed b5 00 05 	bld	r5,0x5
800059b6:	c5 d1       	brne	80005a70 <_vfprintf_r+0xde4>
800059b8:	fa f8 06 b4 	ld.w	r8,sp[1716]
800059bc:	40 3c       	lddsp	r12,sp[0xc]
800059be:	58 0c       	cp.w	r12,0
800059c0:	c2 60       	breq	80005a0c <_vfprintf_r+0xd80>
800059c2:	10 36       	cp.w	r6,r8
800059c4:	c0 a4       	brge	800059d8 <_vfprintf_r+0xd4c>
800059c6:	fa cb f9 44 	sub	r11,sp,-1724
800059ca:	f6 06 00 36 	add	r6,r11,r6<<0x3
800059ce:	ec e8 fd 88 	ld.d	r8,r6[-632]
800059d2:	fa e9 00 00 	st.d	sp[0],r8
800059d6:	c1 88       	rjmp	80005a06 <_vfprintf_r+0xd7a>
800059d8:	fa c8 f9 50 	sub	r8,sp,-1712
800059dc:	1a d8       	st.w	--sp,r8
800059de:	fa c8 fa b8 	sub	r8,sp,-1352
800059e2:	04 9a       	mov	r10,r2
800059e4:	1a d8       	st.w	--sp,r8
800059e6:	0c 9b       	mov	r11,r6
800059e8:	fa c8 fb b4 	sub	r8,sp,-1100
800059ec:	08 9c       	mov	r12,r4
800059ee:	1a d8       	st.w	--sp,r8
800059f0:	fa c8 f9 40 	sub	r8,sp,-1728
800059f4:	fa c9 ff b4 	sub	r9,sp,-76
800059f8:	fe b0 f7 b2 	rcall	8000495c <get_arg>
800059fc:	2f dd       	sub	sp,-12
800059fe:	f8 ea 00 00 	ld.d	r10,r12[0]
80005a02:	fa eb 00 00 	st.d	sp[0],r10
80005a06:	30 08       	mov	r8,0
80005a08:	e0 8f 03 de 	bral	800061c4 <_vfprintf_r+0x1538>
80005a0c:	ee ca ff ff 	sub	r10,r7,-1
80005a10:	10 37       	cp.w	r7,r8
80005a12:	c0 b4       	brge	80005a28 <_vfprintf_r+0xd9c>
80005a14:	fa c9 f9 44 	sub	r9,sp,-1724
80005a18:	14 97       	mov	r7,r10
80005a1a:	f2 06 00 36 	add	r6,r9,r6<<0x3
80005a1e:	ec ea fd 88 	ld.d	r10,r6[-632]
80005a22:	fa eb 00 00 	st.d	sp[0],r10
80005a26:	c1 88       	rjmp	80005a56 <_vfprintf_r+0xdca>
80005a28:	41 09       	lddsp	r9,sp[0x40]
80005a2a:	59 f8       	cp.w	r8,31
80005a2c:	e0 89 00 18 	brgt	80005a5c <_vfprintf_r+0xdd0>
80005a30:	f2 e6 00 00 	ld.d	r6,r9[0]
80005a34:	f2 cb ff f8 	sub	r11,r9,-8
80005a38:	fa e7 00 00 	st.d	sp[0],r6
80005a3c:	51 0b       	stdsp	sp[0x40],r11
80005a3e:	fa c6 f9 44 	sub	r6,sp,-1724
80005a42:	ec 08 00 39 	add	r9,r6,r8<<0x3
80005a46:	fa e6 00 00 	ld.d	r6,sp[0]
80005a4a:	f2 e7 fd 88 	st.d	r9[-632],r6
80005a4e:	2f f8       	sub	r8,-1
80005a50:	14 97       	mov	r7,r10
80005a52:	fb 48 06 b4 	st.w	sp[1716],r8
80005a56:	40 38       	lddsp	r8,sp[0xc]
80005a58:	e0 8f 03 b6 	bral	800061c4 <_vfprintf_r+0x1538>
80005a5c:	f2 e6 00 00 	ld.d	r6,r9[0]
80005a60:	40 38       	lddsp	r8,sp[0xc]
80005a62:	fa e7 00 00 	st.d	sp[0],r6
80005a66:	2f 89       	sub	r9,-8
80005a68:	14 97       	mov	r7,r10
80005a6a:	51 09       	stdsp	sp[0x40],r9
80005a6c:	e0 8f 03 ac 	bral	800061c4 <_vfprintf_r+0x1538>
80005a70:	ed b5 00 04 	bld	r5,0x4
80005a74:	c1 61       	brne	80005aa0 <_vfprintf_r+0xe14>
80005a76:	fa f8 06 b4 	ld.w	r8,sp[1716]
80005a7a:	40 3e       	lddsp	lr,sp[0xc]
80005a7c:	58 0e       	cp.w	lr,0
80005a7e:	c0 80       	breq	80005a8e <_vfprintf_r+0xe02>
80005a80:	10 36       	cp.w	r6,r8
80005a82:	c6 74       	brge	80005b50 <_vfprintf_r+0xec4>
80005a84:	fa cc f9 44 	sub	r12,sp,-1724
80005a88:	f8 06 00 36 	add	r6,r12,r6<<0x3
80005a8c:	c8 08       	rjmp	80005b8c <_vfprintf_r+0xf00>
80005a8e:	ee ca ff ff 	sub	r10,r7,-1
80005a92:	10 37       	cp.w	r7,r8
80005a94:	c7 f4       	brge	80005b92 <_vfprintf_r+0xf06>
80005a96:	fa cb f9 44 	sub	r11,sp,-1724
80005a9a:	f6 06 00 36 	add	r6,r11,r6<<0x3
80005a9e:	c7 68       	rjmp	80005b8a <_vfprintf_r+0xefe>
80005aa0:	ed b5 00 06 	bld	r5,0x6
80005aa4:	c4 a1       	brne	80005b38 <_vfprintf_r+0xeac>
80005aa6:	fa f8 06 b4 	ld.w	r8,sp[1716]
80005aaa:	40 3c       	lddsp	r12,sp[0xc]
80005aac:	58 0c       	cp.w	r12,0
80005aae:	c1 d0       	breq	80005ae8 <_vfprintf_r+0xe5c>
80005ab0:	10 36       	cp.w	r6,r8
80005ab2:	c0 64       	brge	80005abe <_vfprintf_r+0xe32>
80005ab4:	fa cb f9 44 	sub	r11,sp,-1724
80005ab8:	f6 06 00 36 	add	r6,r11,r6<<0x3
80005abc:	c1 f8       	rjmp	80005afa <_vfprintf_r+0xe6e>
80005abe:	fa c8 f9 50 	sub	r8,sp,-1712
80005ac2:	1a d8       	st.w	--sp,r8
80005ac4:	fa c8 fa b8 	sub	r8,sp,-1352
80005ac8:	1a d8       	st.w	--sp,r8
80005aca:	fa c8 fb b4 	sub	r8,sp,-1100
80005ace:	1a d8       	st.w	--sp,r8
80005ad0:	fa c8 f9 40 	sub	r8,sp,-1728
80005ad4:	fa c9 ff b4 	sub	r9,sp,-76
80005ad8:	04 9a       	mov	r10,r2
80005ada:	0c 9b       	mov	r11,r6
80005adc:	08 9c       	mov	r12,r4
80005ade:	fe b0 f7 3f 	rcall	8000495c <get_arg>
80005ae2:	2f dd       	sub	sp,-12
80005ae4:	98 18       	ld.sh	r8,r12[0x2]
80005ae6:	c2 68       	rjmp	80005b32 <_vfprintf_r+0xea6>
80005ae8:	ee ca ff ff 	sub	r10,r7,-1
80005aec:	10 37       	cp.w	r7,r8
80005aee:	c0 94       	brge	80005b00 <_vfprintf_r+0xe74>
80005af0:	fa c9 f9 44 	sub	r9,sp,-1724
80005af4:	14 97       	mov	r7,r10
80005af6:	f2 06 00 36 	add	r6,r9,r6<<0x3
80005afa:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
80005afe:	c1 a8       	rjmp	80005b32 <_vfprintf_r+0xea6>
80005b00:	41 09       	lddsp	r9,sp[0x40]
80005b02:	59 f8       	cp.w	r8,31
80005b04:	e0 89 00 13 	brgt	80005b2a <_vfprintf_r+0xe9e>
80005b08:	f2 cb ff fc 	sub	r11,r9,-4
80005b0c:	51 0b       	stdsp	sp[0x40],r11
80005b0e:	72 09       	ld.w	r9,r9[0x0]
80005b10:	fa c6 f9 44 	sub	r6,sp,-1724
80005b14:	ec 08 00 3b 	add	r11,r6,r8<<0x3
80005b18:	2f f8       	sub	r8,-1
80005b1a:	f7 49 fd 88 	st.w	r11[-632],r9
80005b1e:	fb 48 06 b4 	st.w	sp[1716],r8
80005b22:	14 97       	mov	r7,r10
80005b24:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
80005b28:	c0 58       	rjmp	80005b32 <_vfprintf_r+0xea6>
80005b2a:	92 18       	ld.sh	r8,r9[0x2]
80005b2c:	14 97       	mov	r7,r10
80005b2e:	2f c9       	sub	r9,-4
80005b30:	51 09       	stdsp	sp[0x40],r9
80005b32:	5c 78       	castu.h	r8
80005b34:	50 18       	stdsp	sp[0x4],r8
80005b36:	c4 68       	rjmp	80005bc2 <_vfprintf_r+0xf36>
80005b38:	fa f8 06 b4 	ld.w	r8,sp[1716]
80005b3c:	40 3c       	lddsp	r12,sp[0xc]
80005b3e:	58 0c       	cp.w	r12,0
80005b40:	c1 d0       	breq	80005b7a <_vfprintf_r+0xeee>
80005b42:	10 36       	cp.w	r6,r8
80005b44:	c0 64       	brge	80005b50 <_vfprintf_r+0xec4>
80005b46:	fa cb f9 44 	sub	r11,sp,-1724
80005b4a:	f6 06 00 36 	add	r6,r11,r6<<0x3
80005b4e:	c1 f8       	rjmp	80005b8c <_vfprintf_r+0xf00>
80005b50:	fa c8 f9 50 	sub	r8,sp,-1712
80005b54:	1a d8       	st.w	--sp,r8
80005b56:	fa c8 fa b8 	sub	r8,sp,-1352
80005b5a:	0c 9b       	mov	r11,r6
80005b5c:	1a d8       	st.w	--sp,r8
80005b5e:	fa c8 fb b4 	sub	r8,sp,-1100
80005b62:	04 9a       	mov	r10,r2
80005b64:	1a d8       	st.w	--sp,r8
80005b66:	08 9c       	mov	r12,r4
80005b68:	fa c8 f9 40 	sub	r8,sp,-1728
80005b6c:	fa c9 ff b4 	sub	r9,sp,-76
80005b70:	fe b0 f6 f6 	rcall	8000495c <get_arg>
80005b74:	2f dd       	sub	sp,-12
80005b76:	78 0b       	ld.w	r11,r12[0x0]
80005b78:	c2 48       	rjmp	80005bc0 <_vfprintf_r+0xf34>
80005b7a:	ee ca ff ff 	sub	r10,r7,-1
80005b7e:	10 37       	cp.w	r7,r8
80005b80:	c0 94       	brge	80005b92 <_vfprintf_r+0xf06>
80005b82:	fa c9 f9 44 	sub	r9,sp,-1724
80005b86:	f2 06 00 36 	add	r6,r9,r6<<0x3
80005b8a:	14 97       	mov	r7,r10
80005b8c:	ec fb fd 88 	ld.w	r11,r6[-632]
80005b90:	c1 88       	rjmp	80005bc0 <_vfprintf_r+0xf34>
80005b92:	41 09       	lddsp	r9,sp[0x40]
80005b94:	59 f8       	cp.w	r8,31
80005b96:	e0 89 00 11 	brgt	80005bb8 <_vfprintf_r+0xf2c>
80005b9a:	f2 cb ff fc 	sub	r11,r9,-4
80005b9e:	51 0b       	stdsp	sp[0x40],r11
80005ba0:	fa c6 f9 44 	sub	r6,sp,-1724
80005ba4:	72 0b       	ld.w	r11,r9[0x0]
80005ba6:	ec 08 00 39 	add	r9,r6,r8<<0x3
80005baa:	f3 4b fd 88 	st.w	r9[-632],r11
80005bae:	2f f8       	sub	r8,-1
80005bb0:	14 97       	mov	r7,r10
80005bb2:	fb 48 06 b4 	st.w	sp[1716],r8
80005bb6:	c0 58       	rjmp	80005bc0 <_vfprintf_r+0xf34>
80005bb8:	72 0b       	ld.w	r11,r9[0x0]
80005bba:	14 97       	mov	r7,r10
80005bbc:	2f c9       	sub	r9,-4
80005bbe:	51 09       	stdsp	sp[0x40],r9
80005bc0:	50 1b       	stdsp	sp[0x4],r11
80005bc2:	30 0e       	mov	lr,0
80005bc4:	50 0e       	stdsp	sp[0x0],lr
80005bc6:	1c 98       	mov	r8,lr
80005bc8:	e0 8f 02 fe 	bral	800061c4 <_vfprintf_r+0x1538>
80005bcc:	50 a7       	stdsp	sp[0x28],r7
80005bce:	50 80       	stdsp	sp[0x20],r0
80005bd0:	0c 97       	mov	r7,r6
80005bd2:	04 94       	mov	r4,r2
80005bd4:	06 96       	mov	r6,r3
80005bd6:	02 92       	mov	r2,r1
80005bd8:	40 93       	lddsp	r3,sp[0x24]
80005bda:	40 41       	lddsp	r1,sp[0x10]
80005bdc:	0e 99       	mov	r9,r7
80005bde:	fa f8 06 b4 	ld.w	r8,sp[1716]
80005be2:	40 3c       	lddsp	r12,sp[0xc]
80005be4:	58 0c       	cp.w	r12,0
80005be6:	c1 d0       	breq	80005c20 <_vfprintf_r+0xf94>
80005be8:	10 36       	cp.w	r6,r8
80005bea:	c0 64       	brge	80005bf6 <_vfprintf_r+0xf6a>
80005bec:	fa cb f9 44 	sub	r11,sp,-1724
80005bf0:	f6 06 00 36 	add	r6,r11,r6<<0x3
80005bf4:	c1 d8       	rjmp	80005c2e <_vfprintf_r+0xfa2>
80005bf6:	fa c8 f9 50 	sub	r8,sp,-1712
80005bfa:	1a d8       	st.w	--sp,r8
80005bfc:	fa c8 fa b8 	sub	r8,sp,-1352
80005c00:	1a d8       	st.w	--sp,r8
80005c02:	fa c8 fb b4 	sub	r8,sp,-1100
80005c06:	1a d8       	st.w	--sp,r8
80005c08:	fa c9 ff b4 	sub	r9,sp,-76
80005c0c:	fa c8 f9 40 	sub	r8,sp,-1728
80005c10:	04 9a       	mov	r10,r2
80005c12:	0c 9b       	mov	r11,r6
80005c14:	08 9c       	mov	r12,r4
80005c16:	fe b0 f6 a3 	rcall	8000495c <get_arg>
80005c1a:	2f dd       	sub	sp,-12
80005c1c:	78 09       	ld.w	r9,r12[0x0]
80005c1e:	c2 18       	rjmp	80005c60 <_vfprintf_r+0xfd4>
80005c20:	2f f7       	sub	r7,-1
80005c22:	10 39       	cp.w	r9,r8
80005c24:	c0 84       	brge	80005c34 <_vfprintf_r+0xfa8>
80005c26:	fa ca f9 44 	sub	r10,sp,-1724
80005c2a:	f4 06 00 36 	add	r6,r10,r6<<0x3
80005c2e:	ec f9 fd 88 	ld.w	r9,r6[-632]
80005c32:	c1 78       	rjmp	80005c60 <_vfprintf_r+0xfd4>
80005c34:	41 09       	lddsp	r9,sp[0x40]
80005c36:	59 f8       	cp.w	r8,31
80005c38:	e0 89 00 10 	brgt	80005c58 <_vfprintf_r+0xfcc>
80005c3c:	f2 ca ff fc 	sub	r10,r9,-4
80005c40:	51 0a       	stdsp	sp[0x40],r10
80005c42:	fa c6 f9 44 	sub	r6,sp,-1724
80005c46:	72 09       	ld.w	r9,r9[0x0]
80005c48:	ec 08 00 3a 	add	r10,r6,r8<<0x3
80005c4c:	f5 49 fd 88 	st.w	r10[-632],r9
80005c50:	2f f8       	sub	r8,-1
80005c52:	fb 48 06 b4 	st.w	sp[1716],r8
80005c56:	c0 58       	rjmp	80005c60 <_vfprintf_r+0xfd4>
80005c58:	f2 c8 ff fc 	sub	r8,r9,-4
80005c5c:	51 08       	stdsp	sp[0x40],r8
80005c5e:	72 09       	ld.w	r9,r9[0x0]
80005c60:	33 08       	mov	r8,48
80005c62:	fb 68 06 b8 	st.b	sp[1720],r8
80005c66:	37 88       	mov	r8,120
80005c68:	30 0e       	mov	lr,0
80005c6a:	fb 68 06 b9 	st.b	sp[1721],r8
80005c6e:	fe cc b6 c2 	sub	r12,pc,-18750
80005c72:	50 19       	stdsp	sp[0x4],r9
80005c74:	a1 b5       	sbr	r5,0x1
80005c76:	50 0e       	stdsp	sp[0x0],lr
80005c78:	50 dc       	stdsp	sp[0x34],r12
80005c7a:	30 28       	mov	r8,2
80005c7c:	37 80       	mov	r0,120
80005c7e:	e0 8f 02 a3 	bral	800061c4 <_vfprintf_r+0x1538>
80005c82:	50 a7       	stdsp	sp[0x28],r7
80005c84:	50 80       	stdsp	sp[0x20],r0
80005c86:	10 90       	mov	r0,r8
80005c88:	30 08       	mov	r8,0
80005c8a:	fb 68 06 bb 	st.b	sp[1723],r8
80005c8e:	0c 97       	mov	r7,r6
80005c90:	04 94       	mov	r4,r2
80005c92:	06 96       	mov	r6,r3
80005c94:	02 92       	mov	r2,r1
80005c96:	40 93       	lddsp	r3,sp[0x24]
80005c98:	40 41       	lddsp	r1,sp[0x10]
80005c9a:	0e 99       	mov	r9,r7
80005c9c:	fa f8 06 b4 	ld.w	r8,sp[1716]
80005ca0:	40 3b       	lddsp	r11,sp[0xc]
80005ca2:	58 0b       	cp.w	r11,0
80005ca4:	c1 d0       	breq	80005cde <_vfprintf_r+0x1052>
80005ca6:	10 36       	cp.w	r6,r8
80005ca8:	c0 64       	brge	80005cb4 <_vfprintf_r+0x1028>
80005caa:	fa ca f9 44 	sub	r10,sp,-1724
80005cae:	f4 06 00 36 	add	r6,r10,r6<<0x3
80005cb2:	c1 d8       	rjmp	80005cec <_vfprintf_r+0x1060>
80005cb4:	fa c8 f9 50 	sub	r8,sp,-1712
80005cb8:	1a d8       	st.w	--sp,r8
80005cba:	fa c8 fa b8 	sub	r8,sp,-1352
80005cbe:	1a d8       	st.w	--sp,r8
80005cc0:	fa c8 fb b4 	sub	r8,sp,-1100
80005cc4:	0c 9b       	mov	r11,r6
80005cc6:	1a d8       	st.w	--sp,r8
80005cc8:	04 9a       	mov	r10,r2
80005cca:	fa c8 f9 40 	sub	r8,sp,-1728
80005cce:	fa c9 ff b4 	sub	r9,sp,-76
80005cd2:	08 9c       	mov	r12,r4
80005cd4:	fe b0 f6 44 	rcall	8000495c <get_arg>
80005cd8:	2f dd       	sub	sp,-12
80005cda:	78 06       	ld.w	r6,r12[0x0]
80005cdc:	c2 08       	rjmp	80005d1c <_vfprintf_r+0x1090>
80005cde:	2f f7       	sub	r7,-1
80005ce0:	10 39       	cp.w	r9,r8
80005ce2:	c0 84       	brge	80005cf2 <_vfprintf_r+0x1066>
80005ce4:	fa c9 f9 44 	sub	r9,sp,-1724
80005ce8:	f2 06 00 36 	add	r6,r9,r6<<0x3
80005cec:	ec f6 fd 88 	ld.w	r6,r6[-632]
80005cf0:	c1 68       	rjmp	80005d1c <_vfprintf_r+0x1090>
80005cf2:	41 09       	lddsp	r9,sp[0x40]
80005cf4:	59 f8       	cp.w	r8,31
80005cf6:	e0 89 00 10 	brgt	80005d16 <_vfprintf_r+0x108a>
80005cfa:	f2 ca ff fc 	sub	r10,r9,-4
80005cfe:	51 0a       	stdsp	sp[0x40],r10
80005d00:	72 06       	ld.w	r6,r9[0x0]
80005d02:	fa ce f9 44 	sub	lr,sp,-1724
80005d06:	fc 08 00 39 	add	r9,lr,r8<<0x3
80005d0a:	f3 46 fd 88 	st.w	r9[-632],r6
80005d0e:	2f f8       	sub	r8,-1
80005d10:	fb 48 06 b4 	st.w	sp[1716],r8
80005d14:	c0 48       	rjmp	80005d1c <_vfprintf_r+0x1090>
80005d16:	72 06       	ld.w	r6,r9[0x0]
80005d18:	2f c9       	sub	r9,-4
80005d1a:	51 09       	stdsp	sp[0x40],r9
80005d1c:	40 2c       	lddsp	r12,sp[0x8]
80005d1e:	58 0c       	cp.w	r12,0
80005d20:	c1 05       	brlt	80005d40 <_vfprintf_r+0x10b4>
80005d22:	18 9a       	mov	r10,r12
80005d24:	30 0b       	mov	r11,0
80005d26:	0c 9c       	mov	r12,r6
80005d28:	e0 a0 14 58 	rcall	800085d8 <memchr>
80005d2c:	e0 80 02 df 	breq	800062ea <_vfprintf_r+0x165e>
80005d30:	f8 06 01 02 	sub	r2,r12,r6
80005d34:	40 2b       	lddsp	r11,sp[0x8]
80005d36:	16 32       	cp.w	r2,r11
80005d38:	e0 89 02 d9 	brgt	800062ea <_vfprintf_r+0x165e>
80005d3c:	e0 8f 02 d4 	bral	800062e4 <_vfprintf_r+0x1658>
80005d40:	30 0a       	mov	r10,0
80005d42:	0c 9c       	mov	r12,r6
80005d44:	50 2a       	stdsp	sp[0x8],r10
80005d46:	e0 a0 19 33 	rcall	80008fac <strlen>
80005d4a:	18 92       	mov	r2,r12
80005d4c:	e0 8f 02 d2 	bral	800062f0 <_vfprintf_r+0x1664>
80005d50:	50 a7       	stdsp	sp[0x28],r7
80005d52:	50 80       	stdsp	sp[0x20],r0
80005d54:	0c 97       	mov	r7,r6
80005d56:	04 94       	mov	r4,r2
80005d58:	06 96       	mov	r6,r3
80005d5a:	02 92       	mov	r2,r1
80005d5c:	40 93       	lddsp	r3,sp[0x24]
80005d5e:	10 90       	mov	r0,r8
80005d60:	40 41       	lddsp	r1,sp[0x10]
80005d62:	a5 a5       	sbr	r5,0x4
80005d64:	c0 a8       	rjmp	80005d78 <_vfprintf_r+0x10ec>
80005d66:	50 a7       	stdsp	sp[0x28],r7
80005d68:	50 80       	stdsp	sp[0x20],r0
80005d6a:	0c 97       	mov	r7,r6
80005d6c:	04 94       	mov	r4,r2
80005d6e:	06 96       	mov	r6,r3
80005d70:	02 92       	mov	r2,r1
80005d72:	40 93       	lddsp	r3,sp[0x24]
80005d74:	10 90       	mov	r0,r8
80005d76:	40 41       	lddsp	r1,sp[0x10]
80005d78:	ed b5 00 05 	bld	r5,0x5
80005d7c:	c5 61       	brne	80005e28 <_vfprintf_r+0x119c>
80005d7e:	fa f8 06 b4 	ld.w	r8,sp[1716]
80005d82:	40 39       	lddsp	r9,sp[0xc]
80005d84:	58 09       	cp.w	r9,0
80005d86:	c2 10       	breq	80005dc8 <_vfprintf_r+0x113c>
80005d88:	10 36       	cp.w	r6,r8
80005d8a:	c0 74       	brge	80005d98 <_vfprintf_r+0x110c>
80005d8c:	fa c8 f9 44 	sub	r8,sp,-1724
80005d90:	f0 06 00 36 	add	r6,r8,r6<<0x3
80005d94:	c2 38       	rjmp	80005dda <_vfprintf_r+0x114e>
80005d96:	d7 03       	nop
80005d98:	fa c8 f9 50 	sub	r8,sp,-1712
80005d9c:	1a d8       	st.w	--sp,r8
80005d9e:	fa c8 fa b8 	sub	r8,sp,-1352
80005da2:	1a d8       	st.w	--sp,r8
80005da4:	fa c8 fb b4 	sub	r8,sp,-1100
80005da8:	1a d8       	st.w	--sp,r8
80005daa:	fa c8 f9 40 	sub	r8,sp,-1728
80005dae:	fa c9 ff b4 	sub	r9,sp,-76
80005db2:	04 9a       	mov	r10,r2
80005db4:	0c 9b       	mov	r11,r6
80005db6:	08 9c       	mov	r12,r4
80005db8:	fe b0 f5 d2 	rcall	8000495c <get_arg>
80005dbc:	2f dd       	sub	sp,-12
80005dbe:	f8 e8 00 00 	ld.d	r8,r12[0]
80005dc2:	fa e9 00 00 	st.d	sp[0],r8
80005dc6:	c2 e8       	rjmp	80005e22 <_vfprintf_r+0x1196>
80005dc8:	ee ca ff ff 	sub	r10,r7,-1
80005dcc:	10 37       	cp.w	r7,r8
80005dce:	c0 b4       	brge	80005de4 <_vfprintf_r+0x1158>
80005dd0:	fa c8 f9 44 	sub	r8,sp,-1724
80005dd4:	14 97       	mov	r7,r10
80005dd6:	f0 06 00 36 	add	r6,r8,r6<<0x3
80005dda:	ec ea fd 88 	ld.d	r10,r6[-632]
80005dde:	fa eb 00 00 	st.d	sp[0],r10
80005de2:	c2 08       	rjmp	80005e22 <_vfprintf_r+0x1196>
80005de4:	41 09       	lddsp	r9,sp[0x40]
80005de6:	59 f8       	cp.w	r8,31
80005de8:	e0 89 00 16 	brgt	80005e14 <_vfprintf_r+0x1188>
80005dec:	f2 e6 00 00 	ld.d	r6,r9[0]
80005df0:	f2 cb ff f8 	sub	r11,r9,-8
80005df4:	fa e7 00 00 	st.d	sp[0],r6
80005df8:	51 0b       	stdsp	sp[0x40],r11
80005dfa:	fa c6 f9 44 	sub	r6,sp,-1724
80005dfe:	ec 08 00 39 	add	r9,r6,r8<<0x3
80005e02:	fa e6 00 00 	ld.d	r6,sp[0]
80005e06:	f2 e7 fd 88 	st.d	r9[-632],r6
80005e0a:	2f f8       	sub	r8,-1
80005e0c:	14 97       	mov	r7,r10
80005e0e:	fb 48 06 b4 	st.w	sp[1716],r8
80005e12:	c0 88       	rjmp	80005e22 <_vfprintf_r+0x1196>
80005e14:	f2 e6 00 00 	ld.d	r6,r9[0]
80005e18:	2f 89       	sub	r9,-8
80005e1a:	fa e7 00 00 	st.d	sp[0],r6
80005e1e:	51 09       	stdsp	sp[0x40],r9
80005e20:	14 97       	mov	r7,r10
80005e22:	30 18       	mov	r8,1
80005e24:	e0 8f 01 d0 	bral	800061c4 <_vfprintf_r+0x1538>
80005e28:	ed b5 00 04 	bld	r5,0x4
80005e2c:	c1 61       	brne	80005e58 <_vfprintf_r+0x11cc>
80005e2e:	fa f8 06 b4 	ld.w	r8,sp[1716]
80005e32:	40 3e       	lddsp	lr,sp[0xc]
80005e34:	58 0e       	cp.w	lr,0
80005e36:	c0 80       	breq	80005e46 <_vfprintf_r+0x11ba>
80005e38:	10 36       	cp.w	r6,r8
80005e3a:	c6 74       	brge	80005f08 <_vfprintf_r+0x127c>
80005e3c:	fa cc f9 44 	sub	r12,sp,-1724
80005e40:	f8 06 00 36 	add	r6,r12,r6<<0x3
80005e44:	c8 08       	rjmp	80005f44 <_vfprintf_r+0x12b8>
80005e46:	ee ca ff ff 	sub	r10,r7,-1
80005e4a:	10 37       	cp.w	r7,r8
80005e4c:	c7 f4       	brge	80005f4a <_vfprintf_r+0x12be>
80005e4e:	fa cb f9 44 	sub	r11,sp,-1724
80005e52:	f6 06 00 36 	add	r6,r11,r6<<0x3
80005e56:	c7 68       	rjmp	80005f42 <_vfprintf_r+0x12b6>
80005e58:	ed b5 00 06 	bld	r5,0x6
80005e5c:	c4 a1       	brne	80005ef0 <_vfprintf_r+0x1264>
80005e5e:	fa f8 06 b4 	ld.w	r8,sp[1716]
80005e62:	40 3c       	lddsp	r12,sp[0xc]
80005e64:	58 0c       	cp.w	r12,0
80005e66:	c1 d0       	breq	80005ea0 <_vfprintf_r+0x1214>
80005e68:	10 36       	cp.w	r6,r8
80005e6a:	c0 64       	brge	80005e76 <_vfprintf_r+0x11ea>
80005e6c:	fa cb f9 44 	sub	r11,sp,-1724
80005e70:	f6 06 00 36 	add	r6,r11,r6<<0x3
80005e74:	c1 f8       	rjmp	80005eb2 <_vfprintf_r+0x1226>
80005e76:	fa c8 f9 50 	sub	r8,sp,-1712
80005e7a:	1a d8       	st.w	--sp,r8
80005e7c:	fa c8 fa b8 	sub	r8,sp,-1352
80005e80:	1a d8       	st.w	--sp,r8
80005e82:	fa c8 fb b4 	sub	r8,sp,-1100
80005e86:	1a d8       	st.w	--sp,r8
80005e88:	fa c8 f9 40 	sub	r8,sp,-1728
80005e8c:	fa c9 ff b4 	sub	r9,sp,-76
80005e90:	04 9a       	mov	r10,r2
80005e92:	0c 9b       	mov	r11,r6
80005e94:	08 9c       	mov	r12,r4
80005e96:	fe b0 f5 63 	rcall	8000495c <get_arg>
80005e9a:	2f dd       	sub	sp,-12
80005e9c:	98 18       	ld.sh	r8,r12[0x2]
80005e9e:	c2 68       	rjmp	80005eea <_vfprintf_r+0x125e>
80005ea0:	ee ca ff ff 	sub	r10,r7,-1
80005ea4:	10 37       	cp.w	r7,r8
80005ea6:	c0 94       	brge	80005eb8 <_vfprintf_r+0x122c>
80005ea8:	fa c9 f9 44 	sub	r9,sp,-1724
80005eac:	14 97       	mov	r7,r10
80005eae:	f2 06 00 36 	add	r6,r9,r6<<0x3
80005eb2:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
80005eb6:	c1 a8       	rjmp	80005eea <_vfprintf_r+0x125e>
80005eb8:	41 09       	lddsp	r9,sp[0x40]
80005eba:	59 f8       	cp.w	r8,31
80005ebc:	e0 89 00 13 	brgt	80005ee2 <_vfprintf_r+0x1256>
80005ec0:	f2 cb ff fc 	sub	r11,r9,-4
80005ec4:	51 0b       	stdsp	sp[0x40],r11
80005ec6:	72 09       	ld.w	r9,r9[0x0]
80005ec8:	fa c6 f9 44 	sub	r6,sp,-1724
80005ecc:	ec 08 00 3b 	add	r11,r6,r8<<0x3
80005ed0:	2f f8       	sub	r8,-1
80005ed2:	f7 49 fd 88 	st.w	r11[-632],r9
80005ed6:	fb 48 06 b4 	st.w	sp[1716],r8
80005eda:	14 97       	mov	r7,r10
80005edc:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
80005ee0:	c0 58       	rjmp	80005eea <_vfprintf_r+0x125e>
80005ee2:	92 18       	ld.sh	r8,r9[0x2]
80005ee4:	14 97       	mov	r7,r10
80005ee6:	2f c9       	sub	r9,-4
80005ee8:	51 09       	stdsp	sp[0x40],r9
80005eea:	5c 78       	castu.h	r8
80005eec:	50 18       	stdsp	sp[0x4],r8
80005eee:	c4 68       	rjmp	80005f7a <_vfprintf_r+0x12ee>
80005ef0:	fa f8 06 b4 	ld.w	r8,sp[1716]
80005ef4:	40 3c       	lddsp	r12,sp[0xc]
80005ef6:	58 0c       	cp.w	r12,0
80005ef8:	c1 d0       	breq	80005f32 <_vfprintf_r+0x12a6>
80005efa:	10 36       	cp.w	r6,r8
80005efc:	c0 64       	brge	80005f08 <_vfprintf_r+0x127c>
80005efe:	fa cb f9 44 	sub	r11,sp,-1724
80005f02:	f6 06 00 36 	add	r6,r11,r6<<0x3
80005f06:	c1 f8       	rjmp	80005f44 <_vfprintf_r+0x12b8>
80005f08:	fa c8 f9 50 	sub	r8,sp,-1712
80005f0c:	1a d8       	st.w	--sp,r8
80005f0e:	fa c8 fa b8 	sub	r8,sp,-1352
80005f12:	0c 9b       	mov	r11,r6
80005f14:	1a d8       	st.w	--sp,r8
80005f16:	fa c8 fb b4 	sub	r8,sp,-1100
80005f1a:	04 9a       	mov	r10,r2
80005f1c:	1a d8       	st.w	--sp,r8
80005f1e:	08 9c       	mov	r12,r4
80005f20:	fa c8 f9 40 	sub	r8,sp,-1728
80005f24:	fa c9 ff b4 	sub	r9,sp,-76
80005f28:	fe b0 f5 1a 	rcall	8000495c <get_arg>
80005f2c:	2f dd       	sub	sp,-12
80005f2e:	78 0b       	ld.w	r11,r12[0x0]
80005f30:	c2 48       	rjmp	80005f78 <_vfprintf_r+0x12ec>
80005f32:	ee ca ff ff 	sub	r10,r7,-1
80005f36:	10 37       	cp.w	r7,r8
80005f38:	c0 94       	brge	80005f4a <_vfprintf_r+0x12be>
80005f3a:	fa c9 f9 44 	sub	r9,sp,-1724
80005f3e:	f2 06 00 36 	add	r6,r9,r6<<0x3
80005f42:	14 97       	mov	r7,r10
80005f44:	ec fb fd 88 	ld.w	r11,r6[-632]
80005f48:	c1 88       	rjmp	80005f78 <_vfprintf_r+0x12ec>
80005f4a:	41 09       	lddsp	r9,sp[0x40]
80005f4c:	59 f8       	cp.w	r8,31
80005f4e:	e0 89 00 11 	brgt	80005f70 <_vfprintf_r+0x12e4>
80005f52:	f2 cb ff fc 	sub	r11,r9,-4
80005f56:	51 0b       	stdsp	sp[0x40],r11
80005f58:	fa c6 f9 44 	sub	r6,sp,-1724
80005f5c:	72 0b       	ld.w	r11,r9[0x0]
80005f5e:	ec 08 00 39 	add	r9,r6,r8<<0x3
80005f62:	f3 4b fd 88 	st.w	r9[-632],r11
80005f66:	2f f8       	sub	r8,-1
80005f68:	14 97       	mov	r7,r10
80005f6a:	fb 48 06 b4 	st.w	sp[1716],r8
80005f6e:	c0 58       	rjmp	80005f78 <_vfprintf_r+0x12ec>
80005f70:	72 0b       	ld.w	r11,r9[0x0]
80005f72:	14 97       	mov	r7,r10
80005f74:	2f c9       	sub	r9,-4
80005f76:	51 09       	stdsp	sp[0x40],r9
80005f78:	50 1b       	stdsp	sp[0x4],r11
80005f7a:	30 0e       	mov	lr,0
80005f7c:	30 18       	mov	r8,1
80005f7e:	50 0e       	stdsp	sp[0x0],lr
80005f80:	c2 29       	rjmp	800061c4 <_vfprintf_r+0x1538>
80005f82:	50 a7       	stdsp	sp[0x28],r7
80005f84:	50 80       	stdsp	sp[0x20],r0
80005f86:	0c 97       	mov	r7,r6
80005f88:	04 94       	mov	r4,r2
80005f8a:	06 96       	mov	r6,r3
80005f8c:	02 92       	mov	r2,r1
80005f8e:	fe cc b9 e2 	sub	r12,pc,-17950
80005f92:	40 93       	lddsp	r3,sp[0x24]
80005f94:	10 90       	mov	r0,r8
80005f96:	40 41       	lddsp	r1,sp[0x10]
80005f98:	50 dc       	stdsp	sp[0x34],r12
80005f9a:	ed b5 00 05 	bld	r5,0x5
80005f9e:	c5 51       	brne	80006048 <_vfprintf_r+0x13bc>
80005fa0:	fa f8 06 b4 	ld.w	r8,sp[1716]
80005fa4:	40 3b       	lddsp	r11,sp[0xc]
80005fa6:	58 0b       	cp.w	r11,0
80005fa8:	c2 20       	breq	80005fec <_vfprintf_r+0x1360>
80005faa:	10 36       	cp.w	r6,r8
80005fac:	c0 a4       	brge	80005fc0 <_vfprintf_r+0x1334>
80005fae:	fa ca f9 44 	sub	r10,sp,-1724
80005fb2:	f4 06 00 36 	add	r6,r10,r6<<0x3
80005fb6:	ec e8 fd 88 	ld.d	r8,r6[-632]
80005fba:	fa e9 00 00 	st.d	sp[0],r8
80005fbe:	cf 28       	rjmp	800061a2 <_vfprintf_r+0x1516>
80005fc0:	fa c8 f9 50 	sub	r8,sp,-1712
80005fc4:	1a d8       	st.w	--sp,r8
80005fc6:	fa c8 fa b8 	sub	r8,sp,-1352
80005fca:	04 9a       	mov	r10,r2
80005fcc:	1a d8       	st.w	--sp,r8
80005fce:	0c 9b       	mov	r11,r6
80005fd0:	fa c8 fb b4 	sub	r8,sp,-1100
80005fd4:	08 9c       	mov	r12,r4
80005fd6:	1a d8       	st.w	--sp,r8
80005fd8:	fa c8 f9 40 	sub	r8,sp,-1728
80005fdc:	fa c9 ff b4 	sub	r9,sp,-76
80005fe0:	fe b0 f4 be 	rcall	8000495c <get_arg>
80005fe4:	2f dd       	sub	sp,-12
80005fe6:	f8 ea 00 00 	ld.d	r10,r12[0]
80005fea:	c0 c8       	rjmp	80006002 <_vfprintf_r+0x1376>
80005fec:	ee ca ff ff 	sub	r10,r7,-1
80005ff0:	10 37       	cp.w	r7,r8
80005ff2:	c0 b4       	brge	80006008 <_vfprintf_r+0x137c>
80005ff4:	fa c9 f9 44 	sub	r9,sp,-1724
80005ff8:	14 97       	mov	r7,r10
80005ffa:	f2 06 00 36 	add	r6,r9,r6<<0x3
80005ffe:	ec ea fd 88 	ld.d	r10,r6[-632]
80006002:	fa eb 00 00 	st.d	sp[0],r10
80006006:	cc e8       	rjmp	800061a2 <_vfprintf_r+0x1516>
80006008:	41 09       	lddsp	r9,sp[0x40]
8000600a:	59 f8       	cp.w	r8,31
8000600c:	e0 89 00 16 	brgt	80006038 <_vfprintf_r+0x13ac>
80006010:	f2 e6 00 00 	ld.d	r6,r9[0]
80006014:	f2 cb ff f8 	sub	r11,r9,-8
80006018:	fa e7 00 00 	st.d	sp[0],r6
8000601c:	51 0b       	stdsp	sp[0x40],r11
8000601e:	fa c6 f9 44 	sub	r6,sp,-1724
80006022:	ec 08 00 39 	add	r9,r6,r8<<0x3
80006026:	fa e6 00 00 	ld.d	r6,sp[0]
8000602a:	f2 e7 fd 88 	st.d	r9[-632],r6
8000602e:	2f f8       	sub	r8,-1
80006030:	14 97       	mov	r7,r10
80006032:	fb 48 06 b4 	st.w	sp[1716],r8
80006036:	cb 68       	rjmp	800061a2 <_vfprintf_r+0x1516>
80006038:	f2 e6 00 00 	ld.d	r6,r9[0]
8000603c:	2f 89       	sub	r9,-8
8000603e:	fa e7 00 00 	st.d	sp[0],r6
80006042:	51 09       	stdsp	sp[0x40],r9
80006044:	14 97       	mov	r7,r10
80006046:	ca e8       	rjmp	800061a2 <_vfprintf_r+0x1516>
80006048:	ed b5 00 04 	bld	r5,0x4
8000604c:	c1 71       	brne	8000607a <_vfprintf_r+0x13ee>
8000604e:	fa f8 06 b4 	ld.w	r8,sp[1716]
80006052:	40 3e       	lddsp	lr,sp[0xc]
80006054:	58 0e       	cp.w	lr,0
80006056:	c0 80       	breq	80006066 <_vfprintf_r+0x13da>
80006058:	10 36       	cp.w	r6,r8
8000605a:	c6 94       	brge	8000612c <_vfprintf_r+0x14a0>
8000605c:	fa cc f9 44 	sub	r12,sp,-1724
80006060:	f8 06 00 36 	add	r6,r12,r6<<0x3
80006064:	c8 28       	rjmp	80006168 <_vfprintf_r+0x14dc>
80006066:	ee ca ff ff 	sub	r10,r7,-1
8000606a:	10 37       	cp.w	r7,r8
8000606c:	e0 84 00 81 	brge	8000616e <_vfprintf_r+0x14e2>
80006070:	fa cb f9 44 	sub	r11,sp,-1724
80006074:	f6 06 00 36 	add	r6,r11,r6<<0x3
80006078:	c7 78       	rjmp	80006166 <_vfprintf_r+0x14da>
8000607a:	ed b5 00 06 	bld	r5,0x6
8000607e:	c4 b1       	brne	80006114 <_vfprintf_r+0x1488>
80006080:	fa f8 06 b4 	ld.w	r8,sp[1716]
80006084:	40 3c       	lddsp	r12,sp[0xc]
80006086:	58 0c       	cp.w	r12,0
80006088:	c1 d0       	breq	800060c2 <_vfprintf_r+0x1436>
8000608a:	10 36       	cp.w	r6,r8
8000608c:	c0 64       	brge	80006098 <_vfprintf_r+0x140c>
8000608e:	fa cb f9 44 	sub	r11,sp,-1724
80006092:	f6 06 00 36 	add	r6,r11,r6<<0x3
80006096:	c1 f8       	rjmp	800060d4 <_vfprintf_r+0x1448>
80006098:	fa c8 f9 50 	sub	r8,sp,-1712
8000609c:	1a d8       	st.w	--sp,r8
8000609e:	fa c8 fa b8 	sub	r8,sp,-1352
800060a2:	1a d8       	st.w	--sp,r8
800060a4:	fa c8 fb b4 	sub	r8,sp,-1100
800060a8:	1a d8       	st.w	--sp,r8
800060aa:	fa c8 f9 40 	sub	r8,sp,-1728
800060ae:	fa c9 ff b4 	sub	r9,sp,-76
800060b2:	04 9a       	mov	r10,r2
800060b4:	0c 9b       	mov	r11,r6
800060b6:	08 9c       	mov	r12,r4
800060b8:	fe b0 f4 52 	rcall	8000495c <get_arg>
800060bc:	2f dd       	sub	sp,-12
800060be:	98 18       	ld.sh	r8,r12[0x2]
800060c0:	c2 78       	rjmp	8000610e <_vfprintf_r+0x1482>
800060c2:	ee ca ff ff 	sub	r10,r7,-1
800060c6:	10 37       	cp.w	r7,r8
800060c8:	c0 a4       	brge	800060dc <_vfprintf_r+0x1450>
800060ca:	fa c9 f9 44 	sub	r9,sp,-1724
800060ce:	14 97       	mov	r7,r10
800060d0:	f2 06 00 36 	add	r6,r9,r6<<0x3
800060d4:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
800060d8:	c1 b8       	rjmp	8000610e <_vfprintf_r+0x1482>
800060da:	d7 03       	nop
800060dc:	41 09       	lddsp	r9,sp[0x40]
800060de:	59 f8       	cp.w	r8,31
800060e0:	e0 89 00 13 	brgt	80006106 <_vfprintf_r+0x147a>
800060e4:	f2 cb ff fc 	sub	r11,r9,-4
800060e8:	51 0b       	stdsp	sp[0x40],r11
800060ea:	72 09       	ld.w	r9,r9[0x0]
800060ec:	fa c6 f9 44 	sub	r6,sp,-1724
800060f0:	ec 08 00 3b 	add	r11,r6,r8<<0x3
800060f4:	2f f8       	sub	r8,-1
800060f6:	f7 49 fd 88 	st.w	r11[-632],r9
800060fa:	fb 48 06 b4 	st.w	sp[1716],r8
800060fe:	14 97       	mov	r7,r10
80006100:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
80006104:	c0 58       	rjmp	8000610e <_vfprintf_r+0x1482>
80006106:	92 18       	ld.sh	r8,r9[0x2]
80006108:	14 97       	mov	r7,r10
8000610a:	2f c9       	sub	r9,-4
8000610c:	51 09       	stdsp	sp[0x40],r9
8000610e:	5c 78       	castu.h	r8
80006110:	50 18       	stdsp	sp[0x4],r8
80006112:	c4 68       	rjmp	8000619e <_vfprintf_r+0x1512>
80006114:	fa f8 06 b4 	ld.w	r8,sp[1716]
80006118:	40 3c       	lddsp	r12,sp[0xc]
8000611a:	58 0c       	cp.w	r12,0
8000611c:	c1 d0       	breq	80006156 <_vfprintf_r+0x14ca>
8000611e:	10 36       	cp.w	r6,r8
80006120:	c0 64       	brge	8000612c <_vfprintf_r+0x14a0>
80006122:	fa cb f9 44 	sub	r11,sp,-1724
80006126:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000612a:	c1 f8       	rjmp	80006168 <_vfprintf_r+0x14dc>
8000612c:	fa c8 f9 50 	sub	r8,sp,-1712
80006130:	1a d8       	st.w	--sp,r8
80006132:	fa c8 fa b8 	sub	r8,sp,-1352
80006136:	0c 9b       	mov	r11,r6
80006138:	1a d8       	st.w	--sp,r8
8000613a:	fa c8 fb b4 	sub	r8,sp,-1100
8000613e:	04 9a       	mov	r10,r2
80006140:	1a d8       	st.w	--sp,r8
80006142:	08 9c       	mov	r12,r4
80006144:	fa c8 f9 40 	sub	r8,sp,-1728
80006148:	fa c9 ff b4 	sub	r9,sp,-76
8000614c:	fe b0 f4 08 	rcall	8000495c <get_arg>
80006150:	2f dd       	sub	sp,-12
80006152:	78 0b       	ld.w	r11,r12[0x0]
80006154:	c2 48       	rjmp	8000619c <_vfprintf_r+0x1510>
80006156:	ee ca ff ff 	sub	r10,r7,-1
8000615a:	10 37       	cp.w	r7,r8
8000615c:	c0 94       	brge	8000616e <_vfprintf_r+0x14e2>
8000615e:	fa c9 f9 44 	sub	r9,sp,-1724
80006162:	f2 06 00 36 	add	r6,r9,r6<<0x3
80006166:	14 97       	mov	r7,r10
80006168:	ec fb fd 88 	ld.w	r11,r6[-632]
8000616c:	c1 88       	rjmp	8000619c <_vfprintf_r+0x1510>
8000616e:	41 09       	lddsp	r9,sp[0x40]
80006170:	59 f8       	cp.w	r8,31
80006172:	e0 89 00 11 	brgt	80006194 <_vfprintf_r+0x1508>
80006176:	f2 cb ff fc 	sub	r11,r9,-4
8000617a:	51 0b       	stdsp	sp[0x40],r11
8000617c:	fa c6 f9 44 	sub	r6,sp,-1724
80006180:	72 0b       	ld.w	r11,r9[0x0]
80006182:	ec 08 00 39 	add	r9,r6,r8<<0x3
80006186:	f3 4b fd 88 	st.w	r9[-632],r11
8000618a:	2f f8       	sub	r8,-1
8000618c:	14 97       	mov	r7,r10
8000618e:	fb 48 06 b4 	st.w	sp[1716],r8
80006192:	c0 58       	rjmp	8000619c <_vfprintf_r+0x1510>
80006194:	72 0b       	ld.w	r11,r9[0x0]
80006196:	14 97       	mov	r7,r10
80006198:	2f c9       	sub	r9,-4
8000619a:	51 09       	stdsp	sp[0x40],r9
8000619c:	50 1b       	stdsp	sp[0x4],r11
8000619e:	30 0e       	mov	lr,0
800061a0:	50 0e       	stdsp	sp[0x0],lr
800061a2:	40 08       	lddsp	r8,sp[0x0]
800061a4:	40 1c       	lddsp	r12,sp[0x4]
800061a6:	18 48       	or	r8,r12
800061a8:	5f 19       	srne	r9
800061aa:	0a 98       	mov	r8,r5
800061ac:	eb e9 00 09 	and	r9,r5,r9
800061b0:	a1 b8       	sbr	r8,0x1
800061b2:	58 09       	cp.w	r9,0
800061b4:	c0 70       	breq	800061c2 <_vfprintf_r+0x1536>
800061b6:	10 95       	mov	r5,r8
800061b8:	fb 60 06 b9 	st.b	sp[1721],r0
800061bc:	33 08       	mov	r8,48
800061be:	fb 68 06 b8 	st.b	sp[1720],r8
800061c2:	30 28       	mov	r8,2
800061c4:	30 09       	mov	r9,0
800061c6:	fb 69 06 bb 	st.b	sp[1723],r9
800061ca:	0a 99       	mov	r9,r5
800061cc:	a7 d9       	cbr	r9,0x7
800061ce:	40 2b       	lddsp	r11,sp[0x8]
800061d0:	40 16       	lddsp	r6,sp[0x4]
800061d2:	58 0b       	cp.w	r11,0
800061d4:	5f 1a       	srne	r10
800061d6:	f2 05 17 40 	movge	r5,r9
800061da:	fa c2 f9 78 	sub	r2,sp,-1672
800061de:	40 09       	lddsp	r9,sp[0x0]
800061e0:	0c 49       	or	r9,r6
800061e2:	5f 19       	srne	r9
800061e4:	f5 e9 10 09 	or	r9,r10,r9
800061e8:	c5 c0       	breq	800062a0 <_vfprintf_r+0x1614>
800061ea:	30 19       	mov	r9,1
800061ec:	f2 08 18 00 	cp.b	r8,r9
800061f0:	c0 60       	breq	800061fc <_vfprintf_r+0x1570>
800061f2:	30 29       	mov	r9,2
800061f4:	f2 08 18 00 	cp.b	r8,r9
800061f8:	c0 41       	brne	80006200 <_vfprintf_r+0x1574>
800061fa:	c3 c8       	rjmp	80006272 <_vfprintf_r+0x15e6>
800061fc:	04 96       	mov	r6,r2
800061fe:	c3 08       	rjmp	8000625e <_vfprintf_r+0x15d2>
80006200:	04 96       	mov	r6,r2
80006202:	fa e8 00 00 	ld.d	r8,sp[0]
80006206:	f5 d8 c0 03 	bfextu	r10,r8,0x0,0x3
8000620a:	2d 0a       	sub	r10,-48
8000620c:	0c fa       	st.b	--r6,r10
8000620e:	f0 0b 16 03 	lsr	r11,r8,0x3
80006212:	f2 0c 16 03 	lsr	r12,r9,0x3
80006216:	f7 e9 11 db 	or	r11,r11,r9<<0x1d
8000621a:	18 99       	mov	r9,r12
8000621c:	16 98       	mov	r8,r11
8000621e:	58 08       	cp.w	r8,0
80006220:	5c 29       	cpc	r9
80006222:	cf 21       	brne	80006206 <_vfprintf_r+0x157a>
80006224:	fa e9 00 00 	st.d	sp[0],r8
80006228:	ed b5 00 00 	bld	r5,0x0
8000622c:	c4 51       	brne	800062b6 <_vfprintf_r+0x162a>
8000622e:	33 09       	mov	r9,48
80006230:	f2 0a 18 00 	cp.b	r10,r9
80006234:	c4 10       	breq	800062b6 <_vfprintf_r+0x162a>
80006236:	0c f9       	st.b	--r6,r9
80006238:	c3 f8       	rjmp	800062b6 <_vfprintf_r+0x162a>
8000623a:	fa ea 00 00 	ld.d	r10,sp[0]
8000623e:	30 a8       	mov	r8,10
80006240:	30 09       	mov	r9,0
80006242:	e0 a0 1c ff 	rcall	80009c40 <__avr32_umod64>
80006246:	30 a8       	mov	r8,10
80006248:	2d 0a       	sub	r10,-48
8000624a:	30 09       	mov	r9,0
8000624c:	ac 8a       	st.b	r6[0x0],r10
8000624e:	fa ea 00 00 	ld.d	r10,sp[0]
80006252:	fe b0 f1 92 	rcall	80004576 <__avr32_udiv64>
80006256:	16 99       	mov	r9,r11
80006258:	14 98       	mov	r8,r10
8000625a:	fa e9 00 00 	st.d	sp[0],r8
8000625e:	20 16       	sub	r6,1
80006260:	fa ea 00 00 	ld.d	r10,sp[0]
80006264:	58 9a       	cp.w	r10,9
80006266:	5c 2b       	cpc	r11
80006268:	fe 9b ff e9 	brhi	8000623a <_vfprintf_r+0x15ae>
8000626c:	1b f8       	ld.ub	r8,sp[0x7]
8000626e:	2d 08       	sub	r8,-48
80006270:	c2 08       	rjmp	800062b0 <_vfprintf_r+0x1624>
80006272:	04 96       	mov	r6,r2
80006274:	fa e8 00 00 	ld.d	r8,sp[0]
80006278:	f5 d8 c0 04 	bfextu	r10,r8,0x0,0x4
8000627c:	40 de       	lddsp	lr,sp[0x34]
8000627e:	fc 0a 07 0a 	ld.ub	r10,lr[r10]
80006282:	0c fa       	st.b	--r6,r10
80006284:	f2 0b 16 04 	lsr	r11,r9,0x4
80006288:	f0 0a 16 04 	lsr	r10,r8,0x4
8000628c:	f5 e9 11 ca 	or	r10,r10,r9<<0x1c
80006290:	16 99       	mov	r9,r11
80006292:	14 98       	mov	r8,r10
80006294:	58 08       	cp.w	r8,0
80006296:	5c 29       	cpc	r9
80006298:	cf 01       	brne	80006278 <_vfprintf_r+0x15ec>
8000629a:	fa e9 00 00 	st.d	sp[0],r8
8000629e:	c0 c8       	rjmp	800062b6 <_vfprintf_r+0x162a>
800062a0:	58 08       	cp.w	r8,0
800062a2:	c0 91       	brne	800062b4 <_vfprintf_r+0x1628>
800062a4:	ed b5 00 00 	bld	r5,0x0
800062a8:	c0 61       	brne	800062b4 <_vfprintf_r+0x1628>
800062aa:	fa c6 f9 79 	sub	r6,sp,-1671
800062ae:	33 08       	mov	r8,48
800062b0:	ac 88       	st.b	r6[0x0],r8
800062b2:	c0 28       	rjmp	800062b6 <_vfprintf_r+0x162a>
800062b4:	04 96       	mov	r6,r2
800062b6:	0c 12       	sub	r2,r6
800062b8:	c1 c8       	rjmp	800062f0 <_vfprintf_r+0x1664>
800062ba:	50 a7       	stdsp	sp[0x28],r7
800062bc:	50 80       	stdsp	sp[0x20],r0
800062be:	40 93       	lddsp	r3,sp[0x24]
800062c0:	0c 97       	mov	r7,r6
800062c2:	10 90       	mov	r0,r8
800062c4:	04 94       	mov	r4,r2
800062c6:	40 41       	lddsp	r1,sp[0x10]
800062c8:	58 08       	cp.w	r8,0
800062ca:	e0 80 04 4f 	breq	80006b68 <_vfprintf_r+0x1edc>
800062ce:	fb 68 06 60 	st.b	sp[1632],r8
800062d2:	30 0c       	mov	r12,0
800062d4:	30 08       	mov	r8,0
800062d6:	30 12       	mov	r2,1
800062d8:	fb 68 06 bb 	st.b	sp[1723],r8
800062dc:	50 2c       	stdsp	sp[0x8],r12
800062de:	fa c6 f9 a0 	sub	r6,sp,-1632
800062e2:	c0 78       	rjmp	800062f0 <_vfprintf_r+0x1664>
800062e4:	30 0b       	mov	r11,0
800062e6:	50 2b       	stdsp	sp[0x8],r11
800062e8:	c0 48       	rjmp	800062f0 <_vfprintf_r+0x1664>
800062ea:	40 22       	lddsp	r2,sp[0x8]
800062ec:	30 0a       	mov	r10,0
800062ee:	50 2a       	stdsp	sp[0x8],r10
800062f0:	40 29       	lddsp	r9,sp[0x8]
800062f2:	e4 09 0c 49 	max	r9,r2,r9
800062f6:	fb 38 06 bb 	ld.ub	r8,sp[1723]
800062fa:	50 39       	stdsp	sp[0xc],r9
800062fc:	0a 9e       	mov	lr,r5
800062fe:	30 09       	mov	r9,0
80006300:	e2 1e 00 02 	andl	lr,0x2,COH
80006304:	f2 08 18 00 	cp.b	r8,r9
80006308:	fb f8 10 03 	ld.wne	r8,sp[0xc]
8000630c:	f7 b8 01 ff 	subne	r8,-1
80006310:	fb f8 1a 03 	st.wne	sp[0xc],r8
80006314:	0a 9b       	mov	r11,r5
80006316:	58 0e       	cp.w	lr,0
80006318:	fb fc 10 03 	ld.wne	r12,sp[0xc]
8000631c:	f7 bc 01 fe 	subne	r12,-2
80006320:	fb fc 1a 03 	st.wne	sp[0xc],r12
80006324:	e2 1b 00 84 	andl	r11,0x84,COH
80006328:	50 fe       	stdsp	sp[0x3c],lr
8000632a:	50 9b       	stdsp	sp[0x24],r11
8000632c:	c4 71       	brne	800063ba <_vfprintf_r+0x172e>
8000632e:	40 8a       	lddsp	r10,sp[0x20]
80006330:	40 39       	lddsp	r9,sp[0xc]
80006332:	12 1a       	sub	r10,r9
80006334:	50 4a       	stdsp	sp[0x10],r10
80006336:	58 0a       	cp.w	r10,0
80006338:	e0 89 00 20 	brgt	80006378 <_vfprintf_r+0x16ec>
8000633c:	c3 f8       	rjmp	800063ba <_vfprintf_r+0x172e>
8000633e:	2f 09       	sub	r9,-16
80006340:	2f f8       	sub	r8,-1
80006342:	fe ce bd 7e 	sub	lr,pc,-17026
80006346:	31 0c       	mov	r12,16
80006348:	fb 49 06 90 	st.w	sp[1680],r9
8000634c:	87 0e       	st.w	r3[0x0],lr
8000634e:	87 1c       	st.w	r3[0x4],r12
80006350:	fb 48 06 8c 	st.w	sp[1676],r8
80006354:	58 78       	cp.w	r8,7
80006356:	e0 89 00 04 	brgt	8000635e <_vfprintf_r+0x16d2>
8000635a:	2f 83       	sub	r3,-8
8000635c:	c0 b8       	rjmp	80006372 <_vfprintf_r+0x16e6>
8000635e:	fa ca f9 78 	sub	r10,sp,-1672
80006362:	02 9b       	mov	r11,r1
80006364:	08 9c       	mov	r12,r4
80006366:	fe b0 f4 85 	rcall	80004c70 <__sprint_r>
8000636a:	e0 81 04 10 	brne	80006b8a <_vfprintf_r+0x1efe>
8000636e:	fa c3 f9 e0 	sub	r3,sp,-1568
80006372:	40 4b       	lddsp	r11,sp[0x10]
80006374:	21 0b       	sub	r11,16
80006376:	50 4b       	stdsp	sp[0x10],r11
80006378:	fa f9 06 90 	ld.w	r9,sp[1680]
8000637c:	fa f8 06 8c 	ld.w	r8,sp[1676]
80006380:	fe ca bd bc 	sub	r10,pc,-16964
80006384:	40 4e       	lddsp	lr,sp[0x10]
80006386:	59 0e       	cp.w	lr,16
80006388:	fe 99 ff db 	brgt	8000633e <_vfprintf_r+0x16b2>
8000638c:	1c 09       	add	r9,lr
8000638e:	2f f8       	sub	r8,-1
80006390:	87 0a       	st.w	r3[0x0],r10
80006392:	fb 49 06 90 	st.w	sp[1680],r9
80006396:	87 1e       	st.w	r3[0x4],lr
80006398:	fb 48 06 8c 	st.w	sp[1676],r8
8000639c:	58 78       	cp.w	r8,7
8000639e:	e0 89 00 04 	brgt	800063a6 <_vfprintf_r+0x171a>
800063a2:	2f 83       	sub	r3,-8
800063a4:	c0 b8       	rjmp	800063ba <_vfprintf_r+0x172e>
800063a6:	fa ca f9 78 	sub	r10,sp,-1672
800063aa:	02 9b       	mov	r11,r1
800063ac:	08 9c       	mov	r12,r4
800063ae:	fe b0 f4 61 	rcall	80004c70 <__sprint_r>
800063b2:	e0 81 03 ec 	brne	80006b8a <_vfprintf_r+0x1efe>
800063b6:	fa c3 f9 e0 	sub	r3,sp,-1568
800063ba:	30 09       	mov	r9,0
800063bc:	fb 38 06 bb 	ld.ub	r8,sp[1723]
800063c0:	f2 08 18 00 	cp.b	r8,r9
800063c4:	c1 f0       	breq	80006402 <_vfprintf_r+0x1776>
800063c6:	fa f8 06 90 	ld.w	r8,sp[1680]
800063ca:	fa c9 f9 45 	sub	r9,sp,-1723
800063ce:	2f f8       	sub	r8,-1
800063d0:	87 09       	st.w	r3[0x0],r9
800063d2:	fb 48 06 90 	st.w	sp[1680],r8
800063d6:	30 19       	mov	r9,1
800063d8:	fa f8 06 8c 	ld.w	r8,sp[1676]
800063dc:	87 19       	st.w	r3[0x4],r9
800063de:	2f f8       	sub	r8,-1
800063e0:	fb 48 06 8c 	st.w	sp[1676],r8
800063e4:	58 78       	cp.w	r8,7
800063e6:	e0 89 00 04 	brgt	800063ee <_vfprintf_r+0x1762>
800063ea:	2f 83       	sub	r3,-8
800063ec:	c0 b8       	rjmp	80006402 <_vfprintf_r+0x1776>
800063ee:	fa ca f9 78 	sub	r10,sp,-1672
800063f2:	02 9b       	mov	r11,r1
800063f4:	08 9c       	mov	r12,r4
800063f6:	fe b0 f4 3d 	rcall	80004c70 <__sprint_r>
800063fa:	e0 81 03 c8 	brne	80006b8a <_vfprintf_r+0x1efe>
800063fe:	fa c3 f9 e0 	sub	r3,sp,-1568
80006402:	40 fc       	lddsp	r12,sp[0x3c]
80006404:	58 0c       	cp.w	r12,0
80006406:	c1 f0       	breq	80006444 <_vfprintf_r+0x17b8>
80006408:	fa f8 06 90 	ld.w	r8,sp[1680]
8000640c:	fa c9 f9 48 	sub	r9,sp,-1720
80006410:	2f e8       	sub	r8,-2
80006412:	87 09       	st.w	r3[0x0],r9
80006414:	fb 48 06 90 	st.w	sp[1680],r8
80006418:	30 29       	mov	r9,2
8000641a:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000641e:	87 19       	st.w	r3[0x4],r9
80006420:	2f f8       	sub	r8,-1
80006422:	fb 48 06 8c 	st.w	sp[1676],r8
80006426:	58 78       	cp.w	r8,7
80006428:	e0 89 00 04 	brgt	80006430 <_vfprintf_r+0x17a4>
8000642c:	2f 83       	sub	r3,-8
8000642e:	c0 b8       	rjmp	80006444 <_vfprintf_r+0x17b8>
80006430:	fa ca f9 78 	sub	r10,sp,-1672
80006434:	02 9b       	mov	r11,r1
80006436:	08 9c       	mov	r12,r4
80006438:	fe b0 f4 1c 	rcall	80004c70 <__sprint_r>
8000643c:	e0 81 03 a7 	brne	80006b8a <_vfprintf_r+0x1efe>
80006440:	fa c3 f9 e0 	sub	r3,sp,-1568
80006444:	40 9b       	lddsp	r11,sp[0x24]
80006446:	e0 4b 00 80 	cp.w	r11,128
8000644a:	c4 71       	brne	800064d8 <_vfprintf_r+0x184c>
8000644c:	40 8a       	lddsp	r10,sp[0x20]
8000644e:	40 39       	lddsp	r9,sp[0xc]
80006450:	12 1a       	sub	r10,r9
80006452:	50 4a       	stdsp	sp[0x10],r10
80006454:	58 0a       	cp.w	r10,0
80006456:	e0 89 00 20 	brgt	80006496 <_vfprintf_r+0x180a>
8000645a:	c3 f8       	rjmp	800064d8 <_vfprintf_r+0x184c>
8000645c:	2f 09       	sub	r9,-16
8000645e:	2f f8       	sub	r8,-1
80006460:	fe ce be 8c 	sub	lr,pc,-16756
80006464:	31 0c       	mov	r12,16
80006466:	fb 49 06 90 	st.w	sp[1680],r9
8000646a:	87 0e       	st.w	r3[0x0],lr
8000646c:	87 1c       	st.w	r3[0x4],r12
8000646e:	fb 48 06 8c 	st.w	sp[1676],r8
80006472:	58 78       	cp.w	r8,7
80006474:	e0 89 00 04 	brgt	8000647c <_vfprintf_r+0x17f0>
80006478:	2f 83       	sub	r3,-8
8000647a:	c0 b8       	rjmp	80006490 <_vfprintf_r+0x1804>
8000647c:	fa ca f9 78 	sub	r10,sp,-1672
80006480:	02 9b       	mov	r11,r1
80006482:	08 9c       	mov	r12,r4
80006484:	fe b0 f3 f6 	rcall	80004c70 <__sprint_r>
80006488:	e0 81 03 81 	brne	80006b8a <_vfprintf_r+0x1efe>
8000648c:	fa c3 f9 e0 	sub	r3,sp,-1568
80006490:	40 4b       	lddsp	r11,sp[0x10]
80006492:	21 0b       	sub	r11,16
80006494:	50 4b       	stdsp	sp[0x10],r11
80006496:	fa f9 06 90 	ld.w	r9,sp[1680]
8000649a:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000649e:	fe ca be ca 	sub	r10,pc,-16694
800064a2:	40 4e       	lddsp	lr,sp[0x10]
800064a4:	59 0e       	cp.w	lr,16
800064a6:	fe 99 ff db 	brgt	8000645c <_vfprintf_r+0x17d0>
800064aa:	1c 09       	add	r9,lr
800064ac:	2f f8       	sub	r8,-1
800064ae:	87 0a       	st.w	r3[0x0],r10
800064b0:	fb 49 06 90 	st.w	sp[1680],r9
800064b4:	87 1e       	st.w	r3[0x4],lr
800064b6:	fb 48 06 8c 	st.w	sp[1676],r8
800064ba:	58 78       	cp.w	r8,7
800064bc:	e0 89 00 04 	brgt	800064c4 <_vfprintf_r+0x1838>
800064c0:	2f 83       	sub	r3,-8
800064c2:	c0 b8       	rjmp	800064d8 <_vfprintf_r+0x184c>
800064c4:	fa ca f9 78 	sub	r10,sp,-1672
800064c8:	02 9b       	mov	r11,r1
800064ca:	08 9c       	mov	r12,r4
800064cc:	fe b0 f3 d2 	rcall	80004c70 <__sprint_r>
800064d0:	e0 81 03 5d 	brne	80006b8a <_vfprintf_r+0x1efe>
800064d4:	fa c3 f9 e0 	sub	r3,sp,-1568
800064d8:	40 2c       	lddsp	r12,sp[0x8]
800064da:	04 1c       	sub	r12,r2
800064dc:	50 2c       	stdsp	sp[0x8],r12
800064de:	58 0c       	cp.w	r12,0
800064e0:	e0 89 00 20 	brgt	80006520 <_vfprintf_r+0x1894>
800064e4:	c3 f8       	rjmp	80006562 <_vfprintf_r+0x18d6>
800064e6:	2f 09       	sub	r9,-16
800064e8:	2f f8       	sub	r8,-1
800064ea:	fe cb bf 16 	sub	r11,pc,-16618
800064ee:	31 0a       	mov	r10,16
800064f0:	fb 49 06 90 	st.w	sp[1680],r9
800064f4:	87 0b       	st.w	r3[0x0],r11
800064f6:	87 1a       	st.w	r3[0x4],r10
800064f8:	fb 48 06 8c 	st.w	sp[1676],r8
800064fc:	58 78       	cp.w	r8,7
800064fe:	e0 89 00 04 	brgt	80006506 <_vfprintf_r+0x187a>
80006502:	2f 83       	sub	r3,-8
80006504:	c0 b8       	rjmp	8000651a <_vfprintf_r+0x188e>
80006506:	fa ca f9 78 	sub	r10,sp,-1672
8000650a:	02 9b       	mov	r11,r1
8000650c:	08 9c       	mov	r12,r4
8000650e:	fe b0 f3 b1 	rcall	80004c70 <__sprint_r>
80006512:	e0 81 03 3c 	brne	80006b8a <_vfprintf_r+0x1efe>
80006516:	fa c3 f9 e0 	sub	r3,sp,-1568
8000651a:	40 29       	lddsp	r9,sp[0x8]
8000651c:	21 09       	sub	r9,16
8000651e:	50 29       	stdsp	sp[0x8],r9
80006520:	fa f9 06 90 	ld.w	r9,sp[1680]
80006524:	fa f8 06 8c 	ld.w	r8,sp[1676]
80006528:	fe ca bf 54 	sub	r10,pc,-16556
8000652c:	40 2e       	lddsp	lr,sp[0x8]
8000652e:	59 0e       	cp.w	lr,16
80006530:	fe 99 ff db 	brgt	800064e6 <_vfprintf_r+0x185a>
80006534:	1c 09       	add	r9,lr
80006536:	2f f8       	sub	r8,-1
80006538:	87 0a       	st.w	r3[0x0],r10
8000653a:	fb 49 06 90 	st.w	sp[1680],r9
8000653e:	87 1e       	st.w	r3[0x4],lr
80006540:	fb 48 06 8c 	st.w	sp[1676],r8
80006544:	58 78       	cp.w	r8,7
80006546:	e0 89 00 04 	brgt	8000654e <_vfprintf_r+0x18c2>
8000654a:	2f 83       	sub	r3,-8
8000654c:	c0 b8       	rjmp	80006562 <_vfprintf_r+0x18d6>
8000654e:	fa ca f9 78 	sub	r10,sp,-1672
80006552:	02 9b       	mov	r11,r1
80006554:	08 9c       	mov	r12,r4
80006556:	fe b0 f3 8d 	rcall	80004c70 <__sprint_r>
8000655a:	e0 81 03 18 	brne	80006b8a <_vfprintf_r+0x1efe>
8000655e:	fa c3 f9 e0 	sub	r3,sp,-1568
80006562:	ed b5 00 08 	bld	r5,0x8
80006566:	c0 b0       	breq	8000657c <_vfprintf_r+0x18f0>
80006568:	fa f8 06 90 	ld.w	r8,sp[1680]
8000656c:	87 12       	st.w	r3[0x4],r2
8000656e:	87 06       	st.w	r3[0x0],r6
80006570:	f0 02 00 02 	add	r2,r8,r2
80006574:	fb 42 06 90 	st.w	sp[1680],r2
80006578:	e0 8f 01 d4 	bral	80006920 <_vfprintf_r+0x1c94>
8000657c:	e0 40 00 65 	cp.w	r0,101
80006580:	e0 8a 01 d6 	brle	8000692c <_vfprintf_r+0x1ca0>
80006584:	30 08       	mov	r8,0
80006586:	30 09       	mov	r9,0
80006588:	40 5b       	lddsp	r11,sp[0x14]
8000658a:	40 7a       	lddsp	r10,sp[0x1c]
8000658c:	e0 a0 19 53 	rcall	80009832 <__avr32_f64_cmp_eq>
80006590:	c7 90       	breq	80006682 <_vfprintf_r+0x19f6>
80006592:	fa f8 06 90 	ld.w	r8,sp[1680]
80006596:	fe c9 bf d6 	sub	r9,pc,-16426
8000659a:	2f f8       	sub	r8,-1
8000659c:	87 09       	st.w	r3[0x0],r9
8000659e:	fb 48 06 90 	st.w	sp[1680],r8
800065a2:	30 19       	mov	r9,1
800065a4:	fa f8 06 8c 	ld.w	r8,sp[1676]
800065a8:	87 19       	st.w	r3[0x4],r9
800065aa:	2f f8       	sub	r8,-1
800065ac:	fb 48 06 8c 	st.w	sp[1676],r8
800065b0:	58 78       	cp.w	r8,7
800065b2:	e0 89 00 05 	brgt	800065bc <_vfprintf_r+0x1930>
800065b6:	2f 83       	sub	r3,-8
800065b8:	c0 c8       	rjmp	800065d0 <_vfprintf_r+0x1944>
800065ba:	d7 03       	nop
800065bc:	fa ca f9 78 	sub	r10,sp,-1672
800065c0:	02 9b       	mov	r11,r1
800065c2:	08 9c       	mov	r12,r4
800065c4:	fe b0 f3 56 	rcall	80004c70 <__sprint_r>
800065c8:	e0 81 02 e1 	brne	80006b8a <_vfprintf_r+0x1efe>
800065cc:	fa c3 f9 e0 	sub	r3,sp,-1568
800065d0:	fa f8 06 ac 	ld.w	r8,sp[1708]
800065d4:	40 6c       	lddsp	r12,sp[0x18]
800065d6:	18 38       	cp.w	r8,r12
800065d8:	c0 55       	brlt	800065e2 <_vfprintf_r+0x1956>
800065da:	ed b5 00 00 	bld	r5,0x0
800065de:	e0 81 02 6b 	brne	80006ab4 <_vfprintf_r+0x1e28>
800065e2:	fa f8 06 90 	ld.w	r8,sp[1680]
800065e6:	2f f8       	sub	r8,-1
800065e8:	40 cb       	lddsp	r11,sp[0x30]
800065ea:	fb 48 06 90 	st.w	sp[1680],r8
800065ee:	30 19       	mov	r9,1
800065f0:	fa f8 06 8c 	ld.w	r8,sp[1676]
800065f4:	87 0b       	st.w	r3[0x0],r11
800065f6:	2f f8       	sub	r8,-1
800065f8:	87 19       	st.w	r3[0x4],r9
800065fa:	fb 48 06 8c 	st.w	sp[1676],r8
800065fe:	58 78       	cp.w	r8,7
80006600:	e0 89 00 04 	brgt	80006608 <_vfprintf_r+0x197c>
80006604:	2f 83       	sub	r3,-8
80006606:	c0 b8       	rjmp	8000661c <_vfprintf_r+0x1990>
80006608:	fa ca f9 78 	sub	r10,sp,-1672
8000660c:	02 9b       	mov	r11,r1
8000660e:	08 9c       	mov	r12,r4
80006610:	fe b0 f3 30 	rcall	80004c70 <__sprint_r>
80006614:	e0 81 02 bb 	brne	80006b8a <_vfprintf_r+0x1efe>
80006618:	fa c3 f9 e0 	sub	r3,sp,-1568
8000661c:	40 66       	lddsp	r6,sp[0x18]
8000661e:	20 16       	sub	r6,1
80006620:	58 06       	cp.w	r6,0
80006622:	e0 89 00 1d 	brgt	8000665c <_vfprintf_r+0x19d0>
80006626:	e0 8f 02 47 	bral	80006ab4 <_vfprintf_r+0x1e28>
8000662a:	2f 09       	sub	r9,-16
8000662c:	2f f8       	sub	r8,-1
8000662e:	fb 49 06 90 	st.w	sp[1680],r9
80006632:	87 02       	st.w	r3[0x0],r2
80006634:	87 10       	st.w	r3[0x4],r0
80006636:	fb 48 06 8c 	st.w	sp[1676],r8
8000663a:	58 78       	cp.w	r8,7
8000663c:	e0 89 00 04 	brgt	80006644 <_vfprintf_r+0x19b8>
80006640:	2f 83       	sub	r3,-8
80006642:	c0 b8       	rjmp	80006658 <_vfprintf_r+0x19cc>
80006644:	fa ca f9 78 	sub	r10,sp,-1672
80006648:	02 9b       	mov	r11,r1
8000664a:	08 9c       	mov	r12,r4
8000664c:	fe b0 f3 12 	rcall	80004c70 <__sprint_r>
80006650:	e0 81 02 9d 	brne	80006b8a <_vfprintf_r+0x1efe>
80006654:	fa c3 f9 e0 	sub	r3,sp,-1568
80006658:	21 06       	sub	r6,16
8000665a:	c0 48       	rjmp	80006662 <_vfprintf_r+0x19d6>
8000665c:	fe c2 c0 88 	sub	r2,pc,-16248
80006660:	31 00       	mov	r0,16
80006662:	fa f9 06 90 	ld.w	r9,sp[1680]
80006666:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000666a:	fe ca c0 96 	sub	r10,pc,-16234
8000666e:	59 06       	cp.w	r6,16
80006670:	fe 99 ff dd 	brgt	8000662a <_vfprintf_r+0x199e>
80006674:	0c 09       	add	r9,r6
80006676:	87 0a       	st.w	r3[0x0],r10
80006678:	fb 49 06 90 	st.w	sp[1680],r9
8000667c:	2f f8       	sub	r8,-1
8000667e:	87 16       	st.w	r3[0x4],r6
80006680:	c5 39       	rjmp	80006926 <_vfprintf_r+0x1c9a>
80006682:	fa fa 06 ac 	ld.w	r10,sp[1708]
80006686:	58 0a       	cp.w	r10,0
80006688:	e0 89 00 92 	brgt	800067ac <_vfprintf_r+0x1b20>
8000668c:	fa f8 06 90 	ld.w	r8,sp[1680]
80006690:	fe c9 c0 d0 	sub	r9,pc,-16176
80006694:	2f f8       	sub	r8,-1
80006696:	87 09       	st.w	r3[0x0],r9
80006698:	fb 48 06 90 	st.w	sp[1680],r8
8000669c:	30 19       	mov	r9,1
8000669e:	fa f8 06 8c 	ld.w	r8,sp[1676]
800066a2:	87 19       	st.w	r3[0x4],r9
800066a4:	2f f8       	sub	r8,-1
800066a6:	fb 48 06 8c 	st.w	sp[1676],r8
800066aa:	58 78       	cp.w	r8,7
800066ac:	e0 89 00 04 	brgt	800066b4 <_vfprintf_r+0x1a28>
800066b0:	2f 83       	sub	r3,-8
800066b2:	c0 b8       	rjmp	800066c8 <_vfprintf_r+0x1a3c>
800066b4:	fa ca f9 78 	sub	r10,sp,-1672
800066b8:	02 9b       	mov	r11,r1
800066ba:	08 9c       	mov	r12,r4
800066bc:	fe b0 f2 da 	rcall	80004c70 <__sprint_r>
800066c0:	e0 81 02 65 	brne	80006b8a <_vfprintf_r+0x1efe>
800066c4:	fa c3 f9 e0 	sub	r3,sp,-1568
800066c8:	fa f8 06 ac 	ld.w	r8,sp[1708]
800066cc:	58 08       	cp.w	r8,0
800066ce:	c0 81       	brne	800066de <_vfprintf_r+0x1a52>
800066d0:	40 6a       	lddsp	r10,sp[0x18]
800066d2:	58 0a       	cp.w	r10,0
800066d4:	c0 51       	brne	800066de <_vfprintf_r+0x1a52>
800066d6:	ed b5 00 00 	bld	r5,0x0
800066da:	e0 81 01 ed 	brne	80006ab4 <_vfprintf_r+0x1e28>
800066de:	40 c9       	lddsp	r9,sp[0x30]
800066e0:	fa f8 06 90 	ld.w	r8,sp[1680]
800066e4:	2f f8       	sub	r8,-1
800066e6:	87 09       	st.w	r3[0x0],r9
800066e8:	fb 48 06 90 	st.w	sp[1680],r8
800066ec:	30 19       	mov	r9,1
800066ee:	fa f8 06 8c 	ld.w	r8,sp[1676]
800066f2:	87 19       	st.w	r3[0x4],r9
800066f4:	2f f8       	sub	r8,-1
800066f6:	fb 48 06 8c 	st.w	sp[1676],r8
800066fa:	58 78       	cp.w	r8,7
800066fc:	e0 89 00 04 	brgt	80006704 <_vfprintf_r+0x1a78>
80006700:	2f 83       	sub	r3,-8
80006702:	c0 b8       	rjmp	80006718 <_vfprintf_r+0x1a8c>
80006704:	fa ca f9 78 	sub	r10,sp,-1672
80006708:	02 9b       	mov	r11,r1
8000670a:	08 9c       	mov	r12,r4
8000670c:	fe b0 f2 b2 	rcall	80004c70 <__sprint_r>
80006710:	e0 81 02 3d 	brne	80006b8a <_vfprintf_r+0x1efe>
80006714:	fa c3 f9 e0 	sub	r3,sp,-1568
80006718:	fa f2 06 ac 	ld.w	r2,sp[1708]
8000671c:	5c 32       	neg	r2
8000671e:	58 02       	cp.w	r2,0
80006720:	e0 89 00 1d 	brgt	8000675a <_vfprintf_r+0x1ace>
80006724:	c3 d8       	rjmp	8000679e <_vfprintf_r+0x1b12>
80006726:	2f 09       	sub	r9,-16
80006728:	2f f8       	sub	r8,-1
8000672a:	31 0e       	mov	lr,16
8000672c:	fb 49 06 90 	st.w	sp[1680],r9
80006730:	87 00       	st.w	r3[0x0],r0
80006732:	87 1e       	st.w	r3[0x4],lr
80006734:	fb 48 06 8c 	st.w	sp[1676],r8
80006738:	58 78       	cp.w	r8,7
8000673a:	e0 89 00 04 	brgt	80006742 <_vfprintf_r+0x1ab6>
8000673e:	2f 83       	sub	r3,-8
80006740:	c0 b8       	rjmp	80006756 <_vfprintf_r+0x1aca>
80006742:	fa ca f9 78 	sub	r10,sp,-1672
80006746:	02 9b       	mov	r11,r1
80006748:	08 9c       	mov	r12,r4
8000674a:	fe b0 f2 93 	rcall	80004c70 <__sprint_r>
8000674e:	e0 81 02 1e 	brne	80006b8a <_vfprintf_r+0x1efe>
80006752:	fa c3 f9 e0 	sub	r3,sp,-1568
80006756:	21 02       	sub	r2,16
80006758:	c0 38       	rjmp	8000675e <_vfprintf_r+0x1ad2>
8000675a:	fe c0 c1 86 	sub	r0,pc,-15994
8000675e:	fa f9 06 90 	ld.w	r9,sp[1680]
80006762:	fa f8 06 8c 	ld.w	r8,sp[1676]
80006766:	fe ca c1 92 	sub	r10,pc,-15982
8000676a:	59 02       	cp.w	r2,16
8000676c:	fe 99 ff dd 	brgt	80006726 <_vfprintf_r+0x1a9a>
80006770:	04 09       	add	r9,r2
80006772:	2f f8       	sub	r8,-1
80006774:	87 0a       	st.w	r3[0x0],r10
80006776:	fb 49 06 90 	st.w	sp[1680],r9
8000677a:	87 12       	st.w	r3[0x4],r2
8000677c:	fb 48 06 8c 	st.w	sp[1676],r8
80006780:	58 78       	cp.w	r8,7
80006782:	e0 89 00 04 	brgt	8000678a <_vfprintf_r+0x1afe>
80006786:	2f 83       	sub	r3,-8
80006788:	c0 b8       	rjmp	8000679e <_vfprintf_r+0x1b12>
8000678a:	fa ca f9 78 	sub	r10,sp,-1672
8000678e:	02 9b       	mov	r11,r1
80006790:	08 9c       	mov	r12,r4
80006792:	fe b0 f2 6f 	rcall	80004c70 <__sprint_r>
80006796:	e0 81 01 fa 	brne	80006b8a <_vfprintf_r+0x1efe>
8000679a:	fa c3 f9 e0 	sub	r3,sp,-1568
8000679e:	40 6c       	lddsp	r12,sp[0x18]
800067a0:	fa f8 06 90 	ld.w	r8,sp[1680]
800067a4:	87 06       	st.w	r3[0x0],r6
800067a6:	87 1c       	st.w	r3[0x4],r12
800067a8:	18 08       	add	r8,r12
800067aa:	cb 98       	rjmp	8000691c <_vfprintf_r+0x1c90>
800067ac:	fa f9 06 90 	ld.w	r9,sp[1680]
800067b0:	fa f8 06 8c 	ld.w	r8,sp[1676]
800067b4:	40 6b       	lddsp	r11,sp[0x18]
800067b6:	16 3a       	cp.w	r10,r11
800067b8:	c6 f5       	brlt	80006896 <_vfprintf_r+0x1c0a>
800067ba:	16 09       	add	r9,r11
800067bc:	2f f8       	sub	r8,-1
800067be:	87 06       	st.w	r3[0x0],r6
800067c0:	fb 49 06 90 	st.w	sp[1680],r9
800067c4:	87 1b       	st.w	r3[0x4],r11
800067c6:	fb 48 06 8c 	st.w	sp[1676],r8
800067ca:	58 78       	cp.w	r8,7
800067cc:	e0 89 00 04 	brgt	800067d4 <_vfprintf_r+0x1b48>
800067d0:	2f 83       	sub	r3,-8
800067d2:	c0 b8       	rjmp	800067e8 <_vfprintf_r+0x1b5c>
800067d4:	fa ca f9 78 	sub	r10,sp,-1672
800067d8:	02 9b       	mov	r11,r1
800067da:	08 9c       	mov	r12,r4
800067dc:	fe b0 f2 4a 	rcall	80004c70 <__sprint_r>
800067e0:	e0 81 01 d5 	brne	80006b8a <_vfprintf_r+0x1efe>
800067e4:	fa c3 f9 e0 	sub	r3,sp,-1568
800067e8:	fa f6 06 ac 	ld.w	r6,sp[1708]
800067ec:	40 6a       	lddsp	r10,sp[0x18]
800067ee:	14 16       	sub	r6,r10
800067f0:	58 06       	cp.w	r6,0
800067f2:	e0 89 00 1c 	brgt	8000682a <_vfprintf_r+0x1b9e>
800067f6:	c3 d8       	rjmp	80006870 <_vfprintf_r+0x1be4>
800067f8:	2f 09       	sub	r9,-16
800067fa:	2f f8       	sub	r8,-1
800067fc:	fb 49 06 90 	st.w	sp[1680],r9
80006800:	87 02       	st.w	r3[0x0],r2
80006802:	87 10       	st.w	r3[0x4],r0
80006804:	fb 48 06 8c 	st.w	sp[1676],r8
80006808:	58 78       	cp.w	r8,7
8000680a:	e0 89 00 04 	brgt	80006812 <_vfprintf_r+0x1b86>
8000680e:	2f 83       	sub	r3,-8
80006810:	c0 b8       	rjmp	80006826 <_vfprintf_r+0x1b9a>
80006812:	fa ca f9 78 	sub	r10,sp,-1672
80006816:	02 9b       	mov	r11,r1
80006818:	08 9c       	mov	r12,r4
8000681a:	fe b0 f2 2b 	rcall	80004c70 <__sprint_r>
8000681e:	e0 81 01 b6 	brne	80006b8a <_vfprintf_r+0x1efe>
80006822:	fa c3 f9 e0 	sub	r3,sp,-1568
80006826:	21 06       	sub	r6,16
80006828:	c0 48       	rjmp	80006830 <_vfprintf_r+0x1ba4>
8000682a:	fe c2 c2 56 	sub	r2,pc,-15786
8000682e:	31 00       	mov	r0,16
80006830:	fa f9 06 90 	ld.w	r9,sp[1680]
80006834:	fa f8 06 8c 	ld.w	r8,sp[1676]
80006838:	fe ca c2 64 	sub	r10,pc,-15772
8000683c:	59 06       	cp.w	r6,16
8000683e:	fe 99 ff dd 	brgt	800067f8 <_vfprintf_r+0x1b6c>
80006842:	0c 09       	add	r9,r6
80006844:	2f f8       	sub	r8,-1
80006846:	87 0a       	st.w	r3[0x0],r10
80006848:	fb 49 06 90 	st.w	sp[1680],r9
8000684c:	87 16       	st.w	r3[0x4],r6
8000684e:	fb 48 06 8c 	st.w	sp[1676],r8
80006852:	58 78       	cp.w	r8,7
80006854:	e0 89 00 04 	brgt	8000685c <_vfprintf_r+0x1bd0>
80006858:	2f 83       	sub	r3,-8
8000685a:	c0 b8       	rjmp	80006870 <_vfprintf_r+0x1be4>
8000685c:	fa ca f9 78 	sub	r10,sp,-1672
80006860:	02 9b       	mov	r11,r1
80006862:	08 9c       	mov	r12,r4
80006864:	fe b0 f2 06 	rcall	80004c70 <__sprint_r>
80006868:	e0 81 01 91 	brne	80006b8a <_vfprintf_r+0x1efe>
8000686c:	fa c3 f9 e0 	sub	r3,sp,-1568
80006870:	ed b5 00 00 	bld	r5,0x0
80006874:	e0 81 01 20 	brne	80006ab4 <_vfprintf_r+0x1e28>
80006878:	40 c9       	lddsp	r9,sp[0x30]
8000687a:	fa f8 06 90 	ld.w	r8,sp[1680]
8000687e:	2f f8       	sub	r8,-1
80006880:	87 09       	st.w	r3[0x0],r9
80006882:	fb 48 06 90 	st.w	sp[1680],r8
80006886:	30 19       	mov	r9,1
80006888:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000688c:	87 19       	st.w	r3[0x4],r9
8000688e:	2f f8       	sub	r8,-1
80006890:	fb 48 06 8c 	st.w	sp[1676],r8
80006894:	c0 29       	rjmp	80006a98 <_vfprintf_r+0x1e0c>
80006896:	14 09       	add	r9,r10
80006898:	2f f8       	sub	r8,-1
8000689a:	fb 49 06 90 	st.w	sp[1680],r9
8000689e:	87 06       	st.w	r3[0x0],r6
800068a0:	87 1a       	st.w	r3[0x4],r10
800068a2:	fb 48 06 8c 	st.w	sp[1676],r8
800068a6:	58 78       	cp.w	r8,7
800068a8:	e0 89 00 04 	brgt	800068b0 <_vfprintf_r+0x1c24>
800068ac:	2f 83       	sub	r3,-8
800068ae:	c0 b8       	rjmp	800068c4 <_vfprintf_r+0x1c38>
800068b0:	fa ca f9 78 	sub	r10,sp,-1672
800068b4:	02 9b       	mov	r11,r1
800068b6:	08 9c       	mov	r12,r4
800068b8:	fe b0 f1 dc 	rcall	80004c70 <__sprint_r>
800068bc:	e0 81 01 67 	brne	80006b8a <_vfprintf_r+0x1efe>
800068c0:	fa c3 f9 e0 	sub	r3,sp,-1568
800068c4:	40 c8       	lddsp	r8,sp[0x30]
800068c6:	87 08       	st.w	r3[0x0],r8
800068c8:	fa f8 06 90 	ld.w	r8,sp[1680]
800068cc:	2f f8       	sub	r8,-1
800068ce:	30 19       	mov	r9,1
800068d0:	fb 48 06 90 	st.w	sp[1680],r8
800068d4:	87 19       	st.w	r3[0x4],r9
800068d6:	fa f8 06 8c 	ld.w	r8,sp[1676]
800068da:	2f f8       	sub	r8,-1
800068dc:	fb 48 06 8c 	st.w	sp[1676],r8
800068e0:	fa f2 06 ac 	ld.w	r2,sp[1708]
800068e4:	58 78       	cp.w	r8,7
800068e6:	e0 89 00 04 	brgt	800068ee <_vfprintf_r+0x1c62>
800068ea:	2f 83       	sub	r3,-8
800068ec:	c0 b8       	rjmp	80006902 <_vfprintf_r+0x1c76>
800068ee:	fa ca f9 78 	sub	r10,sp,-1672
800068f2:	02 9b       	mov	r11,r1
800068f4:	08 9c       	mov	r12,r4
800068f6:	fe b0 f1 bd 	rcall	80004c70 <__sprint_r>
800068fa:	e0 81 01 48 	brne	80006b8a <_vfprintf_r+0x1efe>
800068fe:	fa c3 f9 e0 	sub	r3,sp,-1568
80006902:	04 06       	add	r6,r2
80006904:	fa f8 06 ac 	ld.w	r8,sp[1708]
80006908:	87 06       	st.w	r3[0x0],r6
8000690a:	fa f9 06 90 	ld.w	r9,sp[1680]
8000690e:	40 66       	lddsp	r6,sp[0x18]
80006910:	40 6e       	lddsp	lr,sp[0x18]
80006912:	10 16       	sub	r6,r8
80006914:	f2 08 01 08 	sub	r8,r9,r8
80006918:	87 16       	st.w	r3[0x4],r6
8000691a:	1c 08       	add	r8,lr
8000691c:	fb 48 06 90 	st.w	sp[1680],r8
80006920:	fa f8 06 8c 	ld.w	r8,sp[1676]
80006924:	2f f8       	sub	r8,-1
80006926:	fb 48 06 8c 	st.w	sp[1676],r8
8000692a:	cb 78       	rjmp	80006a98 <_vfprintf_r+0x1e0c>
8000692c:	40 6c       	lddsp	r12,sp[0x18]
8000692e:	58 1c       	cp.w	r12,1
80006930:	e0 89 00 06 	brgt	8000693c <_vfprintf_r+0x1cb0>
80006934:	ed b5 00 00 	bld	r5,0x0
80006938:	e0 81 00 85 	brne	80006a42 <_vfprintf_r+0x1db6>
8000693c:	fa f8 06 90 	ld.w	r8,sp[1680]
80006940:	2f f8       	sub	r8,-1
80006942:	30 19       	mov	r9,1
80006944:	fb 48 06 90 	st.w	sp[1680],r8
80006948:	87 06       	st.w	r3[0x0],r6
8000694a:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000694e:	87 19       	st.w	r3[0x4],r9
80006950:	2f f8       	sub	r8,-1
80006952:	fb 48 06 8c 	st.w	sp[1676],r8
80006956:	58 78       	cp.w	r8,7
80006958:	e0 89 00 04 	brgt	80006960 <_vfprintf_r+0x1cd4>
8000695c:	2f 83       	sub	r3,-8
8000695e:	c0 b8       	rjmp	80006974 <_vfprintf_r+0x1ce8>
80006960:	fa ca f9 78 	sub	r10,sp,-1672
80006964:	02 9b       	mov	r11,r1
80006966:	08 9c       	mov	r12,r4
80006968:	fe b0 f1 84 	rcall	80004c70 <__sprint_r>
8000696c:	e0 81 01 0f 	brne	80006b8a <_vfprintf_r+0x1efe>
80006970:	fa c3 f9 e0 	sub	r3,sp,-1568
80006974:	fa f8 06 90 	ld.w	r8,sp[1680]
80006978:	2f f8       	sub	r8,-1
8000697a:	40 cb       	lddsp	r11,sp[0x30]
8000697c:	fb 48 06 90 	st.w	sp[1680],r8
80006980:	30 19       	mov	r9,1
80006982:	fa f8 06 8c 	ld.w	r8,sp[1676]
80006986:	87 0b       	st.w	r3[0x0],r11
80006988:	2f f8       	sub	r8,-1
8000698a:	87 19       	st.w	r3[0x4],r9
8000698c:	fb 48 06 8c 	st.w	sp[1676],r8
80006990:	58 78       	cp.w	r8,7
80006992:	e0 89 00 05 	brgt	8000699c <_vfprintf_r+0x1d10>
80006996:	2f 83       	sub	r3,-8
80006998:	c0 c8       	rjmp	800069b0 <_vfprintf_r+0x1d24>
8000699a:	d7 03       	nop
8000699c:	fa ca f9 78 	sub	r10,sp,-1672
800069a0:	02 9b       	mov	r11,r1
800069a2:	08 9c       	mov	r12,r4
800069a4:	fe b0 f1 66 	rcall	80004c70 <__sprint_r>
800069a8:	e0 81 00 f1 	brne	80006b8a <_vfprintf_r+0x1efe>
800069ac:	fa c3 f9 e0 	sub	r3,sp,-1568
800069b0:	30 08       	mov	r8,0
800069b2:	30 09       	mov	r9,0
800069b4:	40 5b       	lddsp	r11,sp[0x14]
800069b6:	40 7a       	lddsp	r10,sp[0x1c]
800069b8:	e0 a0 17 3d 	rcall	80009832 <__avr32_f64_cmp_eq>
800069bc:	40 68       	lddsp	r8,sp[0x18]
800069be:	20 18       	sub	r8,1
800069c0:	58 0c       	cp.w	r12,0
800069c2:	c0 d1       	brne	800069dc <_vfprintf_r+0x1d50>
800069c4:	2f f6       	sub	r6,-1
800069c6:	87 18       	st.w	r3[0x4],r8
800069c8:	87 06       	st.w	r3[0x0],r6
800069ca:	fa f6 06 90 	ld.w	r6,sp[1680]
800069ce:	10 06       	add	r6,r8
800069d0:	fa f8 06 8c 	ld.w	r8,sp[1676]
800069d4:	fb 46 06 90 	st.w	sp[1680],r6
800069d8:	2f f8       	sub	r8,-1
800069da:	c3 18       	rjmp	80006a3c <_vfprintf_r+0x1db0>
800069dc:	10 96       	mov	r6,r8
800069de:	58 08       	cp.w	r8,0
800069e0:	e0 89 00 1c 	brgt	80006a18 <_vfprintf_r+0x1d8c>
800069e4:	c4 b8       	rjmp	80006a7a <_vfprintf_r+0x1dee>
800069e6:	2f 09       	sub	r9,-16
800069e8:	2f f8       	sub	r8,-1
800069ea:	fb 49 06 90 	st.w	sp[1680],r9
800069ee:	87 02       	st.w	r3[0x0],r2
800069f0:	87 10       	st.w	r3[0x4],r0
800069f2:	fb 48 06 8c 	st.w	sp[1676],r8
800069f6:	58 78       	cp.w	r8,7
800069f8:	e0 89 00 04 	brgt	80006a00 <_vfprintf_r+0x1d74>
800069fc:	2f 83       	sub	r3,-8
800069fe:	c0 b8       	rjmp	80006a14 <_vfprintf_r+0x1d88>
80006a00:	fa ca f9 78 	sub	r10,sp,-1672
80006a04:	02 9b       	mov	r11,r1
80006a06:	08 9c       	mov	r12,r4
80006a08:	fe b0 f1 34 	rcall	80004c70 <__sprint_r>
80006a0c:	e0 81 00 bf 	brne	80006b8a <_vfprintf_r+0x1efe>
80006a10:	fa c3 f9 e0 	sub	r3,sp,-1568
80006a14:	21 06       	sub	r6,16
80006a16:	c0 48       	rjmp	80006a1e <_vfprintf_r+0x1d92>
80006a18:	fe c2 c4 44 	sub	r2,pc,-15292
80006a1c:	31 00       	mov	r0,16
80006a1e:	fa f9 06 90 	ld.w	r9,sp[1680]
80006a22:	fa f8 06 8c 	ld.w	r8,sp[1676]
80006a26:	fe ca c4 52 	sub	r10,pc,-15278
80006a2a:	59 06       	cp.w	r6,16
80006a2c:	fe 99 ff dd 	brgt	800069e6 <_vfprintf_r+0x1d5a>
80006a30:	0c 09       	add	r9,r6
80006a32:	87 0a       	st.w	r3[0x0],r10
80006a34:	fb 49 06 90 	st.w	sp[1680],r9
80006a38:	2f f8       	sub	r8,-1
80006a3a:	87 16       	st.w	r3[0x4],r6
80006a3c:	fb 48 06 8c 	st.w	sp[1676],r8
80006a40:	c0 e8       	rjmp	80006a5c <_vfprintf_r+0x1dd0>
80006a42:	fa f8 06 90 	ld.w	r8,sp[1680]
80006a46:	2f f8       	sub	r8,-1
80006a48:	30 19       	mov	r9,1
80006a4a:	fb 48 06 90 	st.w	sp[1680],r8
80006a4e:	87 06       	st.w	r3[0x0],r6
80006a50:	fa f8 06 8c 	ld.w	r8,sp[1676]
80006a54:	87 19       	st.w	r3[0x4],r9
80006a56:	2f f8       	sub	r8,-1
80006a58:	fb 48 06 8c 	st.w	sp[1676],r8
80006a5c:	58 78       	cp.w	r8,7
80006a5e:	e0 89 00 04 	brgt	80006a66 <_vfprintf_r+0x1dda>
80006a62:	2f 83       	sub	r3,-8
80006a64:	c0 b8       	rjmp	80006a7a <_vfprintf_r+0x1dee>
80006a66:	fa ca f9 78 	sub	r10,sp,-1672
80006a6a:	02 9b       	mov	r11,r1
80006a6c:	08 9c       	mov	r12,r4
80006a6e:	fe b0 f1 01 	rcall	80004c70 <__sprint_r>
80006a72:	e0 81 00 8c 	brne	80006b8a <_vfprintf_r+0x1efe>
80006a76:	fa c3 f9 e0 	sub	r3,sp,-1568
80006a7a:	40 ea       	lddsp	r10,sp[0x38]
80006a7c:	fa f8 06 90 	ld.w	r8,sp[1680]
80006a80:	14 08       	add	r8,r10
80006a82:	fa c9 f9 64 	sub	r9,sp,-1692
80006a86:	fb 48 06 90 	st.w	sp[1680],r8
80006a8a:	87 1a       	st.w	r3[0x4],r10
80006a8c:	fa f8 06 8c 	ld.w	r8,sp[1676]
80006a90:	87 09       	st.w	r3[0x0],r9
80006a92:	2f f8       	sub	r8,-1
80006a94:	fb 48 06 8c 	st.w	sp[1676],r8
80006a98:	58 78       	cp.w	r8,7
80006a9a:	e0 89 00 04 	brgt	80006aa2 <_vfprintf_r+0x1e16>
80006a9e:	2f 83       	sub	r3,-8
80006aa0:	c0 a8       	rjmp	80006ab4 <_vfprintf_r+0x1e28>
80006aa2:	fa ca f9 78 	sub	r10,sp,-1672
80006aa6:	02 9b       	mov	r11,r1
80006aa8:	08 9c       	mov	r12,r4
80006aaa:	fe b0 f0 e3 	rcall	80004c70 <__sprint_r>
80006aae:	c6 e1       	brne	80006b8a <_vfprintf_r+0x1efe>
80006ab0:	fa c3 f9 e0 	sub	r3,sp,-1568
80006ab4:	e2 15 00 04 	andl	r5,0x4,COH
80006ab8:	c3 f0       	breq	80006b36 <_vfprintf_r+0x1eaa>
80006aba:	40 86       	lddsp	r6,sp[0x20]
80006abc:	40 39       	lddsp	r9,sp[0xc]
80006abe:	12 16       	sub	r6,r9
80006ac0:	58 06       	cp.w	r6,0
80006ac2:	e0 89 00 1a 	brgt	80006af6 <_vfprintf_r+0x1e6a>
80006ac6:	c3 88       	rjmp	80006b36 <_vfprintf_r+0x1eaa>
80006ac8:	2f 09       	sub	r9,-16
80006aca:	2f f8       	sub	r8,-1
80006acc:	fb 49 06 90 	st.w	sp[1680],r9
80006ad0:	87 05       	st.w	r3[0x0],r5
80006ad2:	87 12       	st.w	r3[0x4],r2
80006ad4:	fb 48 06 8c 	st.w	sp[1676],r8
80006ad8:	58 78       	cp.w	r8,7
80006ada:	e0 89 00 04 	brgt	80006ae2 <_vfprintf_r+0x1e56>
80006ade:	2f 83       	sub	r3,-8
80006ae0:	c0 98       	rjmp	80006af2 <_vfprintf_r+0x1e66>
80006ae2:	00 9a       	mov	r10,r0
80006ae4:	02 9b       	mov	r11,r1
80006ae6:	08 9c       	mov	r12,r4
80006ae8:	fe b0 f0 c4 	rcall	80004c70 <__sprint_r>
80006aec:	c4 f1       	brne	80006b8a <_vfprintf_r+0x1efe>
80006aee:	fa c3 f9 e0 	sub	r3,sp,-1568
80006af2:	21 06       	sub	r6,16
80006af4:	c0 68       	rjmp	80006b00 <_vfprintf_r+0x1e74>
80006af6:	fe c5 c5 32 	sub	r5,pc,-15054
80006afa:	31 02       	mov	r2,16
80006afc:	fa c0 f9 78 	sub	r0,sp,-1672
80006b00:	fa f9 06 90 	ld.w	r9,sp[1680]
80006b04:	fa f8 06 8c 	ld.w	r8,sp[1676]
80006b08:	fe ca c5 44 	sub	r10,pc,-15036
80006b0c:	59 06       	cp.w	r6,16
80006b0e:	fe 99 ff dd 	brgt	80006ac8 <_vfprintf_r+0x1e3c>
80006b12:	0c 09       	add	r9,r6
80006b14:	2f f8       	sub	r8,-1
80006b16:	87 0a       	st.w	r3[0x0],r10
80006b18:	87 16       	st.w	r3[0x4],r6
80006b1a:	fb 49 06 90 	st.w	sp[1680],r9
80006b1e:	fb 48 06 8c 	st.w	sp[1676],r8
80006b22:	58 78       	cp.w	r8,7
80006b24:	e0 8a 00 09 	brle	80006b36 <_vfprintf_r+0x1eaa>
80006b28:	fa ca f9 78 	sub	r10,sp,-1672
80006b2c:	02 9b       	mov	r11,r1
80006b2e:	08 9c       	mov	r12,r4
80006b30:	fe b0 f0 a0 	rcall	80004c70 <__sprint_r>
80006b34:	c2 b1       	brne	80006b8a <_vfprintf_r+0x1efe>
80006b36:	40 bc       	lddsp	r12,sp[0x2c]
80006b38:	40 36       	lddsp	r6,sp[0xc]
80006b3a:	40 8e       	lddsp	lr,sp[0x20]
80006b3c:	ec 0e 0c 48 	max	r8,r6,lr
80006b40:	10 0c       	add	r12,r8
80006b42:	50 bc       	stdsp	sp[0x2c],r12
80006b44:	fa f8 06 90 	ld.w	r8,sp[1680]
80006b48:	58 08       	cp.w	r8,0
80006b4a:	c0 80       	breq	80006b5a <_vfprintf_r+0x1ece>
80006b4c:	fa ca f9 78 	sub	r10,sp,-1672
80006b50:	02 9b       	mov	r11,r1
80006b52:	08 9c       	mov	r12,r4
80006b54:	fe b0 f0 8e 	rcall	80004c70 <__sprint_r>
80006b58:	c1 91       	brne	80006b8a <_vfprintf_r+0x1efe>
80006b5a:	30 0b       	mov	r11,0
80006b5c:	fa c3 f9 e0 	sub	r3,sp,-1568
80006b60:	fb 4b 06 8c 	st.w	sp[1676],r11
80006b64:	fe 9f f1 22 	bral	80004da8 <_vfprintf_r+0x11c>
80006b68:	08 95       	mov	r5,r4
80006b6a:	fa f8 06 90 	ld.w	r8,sp[1680]
80006b6e:	58 08       	cp.w	r8,0
80006b70:	c0 80       	breq	80006b80 <_vfprintf_r+0x1ef4>
80006b72:	08 9c       	mov	r12,r4
80006b74:	fa ca f9 78 	sub	r10,sp,-1672
80006b78:	02 9b       	mov	r11,r1
80006b7a:	fe b0 f0 7b 	rcall	80004c70 <__sprint_r>
80006b7e:	c0 61       	brne	80006b8a <_vfprintf_r+0x1efe>
80006b80:	30 08       	mov	r8,0
80006b82:	fb 48 06 8c 	st.w	sp[1676],r8
80006b86:	c0 28       	rjmp	80006b8a <_vfprintf_r+0x1efe>
80006b88:	40 41       	lddsp	r1,sp[0x10]
80006b8a:	82 68       	ld.sh	r8,r1[0xc]
80006b8c:	ed b8 00 06 	bld	r8,0x6
80006b90:	c0 31       	brne	80006b96 <_vfprintf_r+0x1f0a>
80006b92:	3f fa       	mov	r10,-1
80006b94:	50 ba       	stdsp	sp[0x2c],r10
80006b96:	40 bc       	lddsp	r12,sp[0x2c]
80006b98:	fe 3d f9 44 	sub	sp,-1724
80006b9c:	d8 32       	popm	r0-r7,pc
80006b9e:	d7 03       	nop

80006ba0 <__swsetup_r>:
80006ba0:	d4 21       	pushm	r4-r7,lr
80006ba2:	e0 68 01 0c 	mov	r8,268
80006ba6:	18 96       	mov	r6,r12
80006ba8:	16 97       	mov	r7,r11
80006baa:	70 0c       	ld.w	r12,r8[0x0]
80006bac:	58 0c       	cp.w	r12,0
80006bae:	c0 60       	breq	80006bba <__swsetup_r+0x1a>
80006bb0:	78 68       	ld.w	r8,r12[0x18]
80006bb2:	58 08       	cp.w	r8,0
80006bb4:	c0 31       	brne	80006bba <__swsetup_r+0x1a>
80006bb6:	e0 a0 07 b9 	rcall	80007b28 <__sinit>
80006bba:	fe c8 c4 c6 	sub	r8,pc,-15162
80006bbe:	10 37       	cp.w	r7,r8
80006bc0:	c0 61       	brne	80006bcc <__swsetup_r+0x2c>
80006bc2:	e0 68 01 0c 	mov	r8,268
80006bc6:	70 08       	ld.w	r8,r8[0x0]
80006bc8:	70 07       	ld.w	r7,r8[0x0]
80006bca:	c1 28       	rjmp	80006bee <__swsetup_r+0x4e>
80006bcc:	fe c8 c4 b8 	sub	r8,pc,-15176
80006bd0:	10 37       	cp.w	r7,r8
80006bd2:	c0 61       	brne	80006bde <__swsetup_r+0x3e>
80006bd4:	e0 68 01 0c 	mov	r8,268
80006bd8:	70 08       	ld.w	r8,r8[0x0]
80006bda:	70 17       	ld.w	r7,r8[0x4]
80006bdc:	c0 98       	rjmp	80006bee <__swsetup_r+0x4e>
80006bde:	fe c8 c4 aa 	sub	r8,pc,-15190
80006be2:	10 37       	cp.w	r7,r8
80006be4:	c0 51       	brne	80006bee <__swsetup_r+0x4e>
80006be6:	e0 68 01 0c 	mov	r8,268
80006bea:	70 08       	ld.w	r8,r8[0x0]
80006bec:	70 27       	ld.w	r7,r8[0x8]
80006bee:	8e 68       	ld.sh	r8,r7[0xc]
80006bf0:	ed b8 00 03 	bld	r8,0x3
80006bf4:	c1 e0       	breq	80006c30 <__swsetup_r+0x90>
80006bf6:	ed b8 00 04 	bld	r8,0x4
80006bfa:	c3 e1       	brne	80006c76 <__swsetup_r+0xd6>
80006bfc:	ed b8 00 02 	bld	r8,0x2
80006c00:	c1 51       	brne	80006c2a <__swsetup_r+0x8a>
80006c02:	6e db       	ld.w	r11,r7[0x34]
80006c04:	58 0b       	cp.w	r11,0
80006c06:	c0 a0       	breq	80006c1a <__swsetup_r+0x7a>
80006c08:	ee c8 ff bc 	sub	r8,r7,-68
80006c0c:	10 3b       	cp.w	r11,r8
80006c0e:	c0 40       	breq	80006c16 <__swsetup_r+0x76>
80006c10:	0c 9c       	mov	r12,r6
80006c12:	e0 a0 08 25 	rcall	80007c5c <_free_r>
80006c16:	30 08       	mov	r8,0
80006c18:	8f d8       	st.w	r7[0x34],r8
80006c1a:	8e 68       	ld.sh	r8,r7[0xc]
80006c1c:	e0 18 ff db 	andl	r8,0xffdb
80006c20:	ae 68       	st.h	r7[0xc],r8
80006c22:	30 08       	mov	r8,0
80006c24:	8f 18       	st.w	r7[0x4],r8
80006c26:	6e 48       	ld.w	r8,r7[0x10]
80006c28:	8f 08       	st.w	r7[0x0],r8
80006c2a:	8e 68       	ld.sh	r8,r7[0xc]
80006c2c:	a3 b8       	sbr	r8,0x3
80006c2e:	ae 68       	st.h	r7[0xc],r8
80006c30:	6e 48       	ld.w	r8,r7[0x10]
80006c32:	58 08       	cp.w	r8,0
80006c34:	c0 b1       	brne	80006c4a <__swsetup_r+0xaa>
80006c36:	8e 68       	ld.sh	r8,r7[0xc]
80006c38:	e2 18 02 80 	andl	r8,0x280,COH
80006c3c:	e0 48 02 00 	cp.w	r8,512
80006c40:	c0 50       	breq	80006c4a <__swsetup_r+0xaa>
80006c42:	0c 9c       	mov	r12,r6
80006c44:	0e 9b       	mov	r11,r7
80006c46:	e0 a0 0a 4b 	rcall	800080dc <__smakebuf_r>
80006c4a:	8e 69       	ld.sh	r9,r7[0xc]
80006c4c:	f1 d9 c0 01 	bfextu	r8,r9,0x0,0x1
80006c50:	c0 70       	breq	80006c5e <__swsetup_r+0xbe>
80006c52:	30 08       	mov	r8,0
80006c54:	8f 28       	st.w	r7[0x8],r8
80006c56:	6e 58       	ld.w	r8,r7[0x14]
80006c58:	5c 38       	neg	r8
80006c5a:	8f 68       	st.w	r7[0x18],r8
80006c5c:	c0 68       	rjmp	80006c68 <__swsetup_r+0xc8>
80006c5e:	ed b9 00 01 	bld	r9,0x1
80006c62:	ef f8 10 05 	ld.wne	r8,r7[0x14]
80006c66:	8f 28       	st.w	r7[0x8],r8
80006c68:	6e 48       	ld.w	r8,r7[0x10]
80006c6a:	58 08       	cp.w	r8,0
80006c6c:	c0 61       	brne	80006c78 <__swsetup_r+0xd8>
80006c6e:	8e 68       	ld.sh	r8,r7[0xc]
80006c70:	ed b8 00 07 	bld	r8,0x7
80006c74:	c0 21       	brne	80006c78 <__swsetup_r+0xd8>
80006c76:	dc 2a       	popm	r4-r7,pc,r12=-1
80006c78:	d8 2a       	popm	r4-r7,pc,r12=0
80006c7a:	d7 03       	nop

80006c7c <quorem>:
80006c7c:	d4 31       	pushm	r0-r7,lr
80006c7e:	20 2d       	sub	sp,8
80006c80:	18 97       	mov	r7,r12
80006c82:	78 48       	ld.w	r8,r12[0x10]
80006c84:	76 46       	ld.w	r6,r11[0x10]
80006c86:	0c 38       	cp.w	r8,r6
80006c88:	c0 34       	brge	80006c8e <quorem+0x12>
80006c8a:	30 0c       	mov	r12,0
80006c8c:	c8 58       	rjmp	80006d96 <quorem+0x11a>
80006c8e:	ec c2 ff fc 	sub	r2,r6,-4
80006c92:	f6 c3 ff ec 	sub	r3,r11,-20
80006c96:	f6 02 03 29 	ld.w	r9,r11[r2<<0x2]
80006c9a:	f8 02 03 2c 	ld.w	r12,r12[r2<<0x2]
80006c9e:	2f f9       	sub	r9,-1
80006ca0:	20 16       	sub	r6,1
80006ca2:	f8 09 0d 08 	divu	r8,r12,r9
80006ca6:	f6 02 00 22 	add	r2,r11,r2<<0x2
80006caa:	ee c4 ff ec 	sub	r4,r7,-20
80006cae:	10 95       	mov	r5,r8
80006cb0:	58 08       	cp.w	r8,0
80006cb2:	c4 10       	breq	80006d34 <quorem+0xb8>
80006cb4:	30 09       	mov	r9,0
80006cb6:	06 9a       	mov	r10,r3
80006cb8:	08 98       	mov	r8,r4
80006cba:	12 91       	mov	r1,r9
80006cbc:	50 0b       	stdsp	sp[0x0],r11
80006cbe:	70 0e       	ld.w	lr,r8[0x0]
80006cc0:	b1 8e       	lsr	lr,0x10
80006cc2:	50 1e       	stdsp	sp[0x4],lr
80006cc4:	15 0e       	ld.w	lr,r10++
80006cc6:	fc 00 16 10 	lsr	r0,lr,0x10
80006cca:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
80006cce:	ea 0e 03 41 	mac	r1,r5,lr
80006cd2:	fd d1 c0 10 	bfextu	lr,r1,0x0,0x10
80006cd6:	b1 81       	lsr	r1,0x10
80006cd8:	40 1b       	lddsp	r11,sp[0x4]
80006cda:	ea 00 02 40 	mul	r0,r5,r0
80006cde:	e2 00 00 00 	add	r0,r1,r0
80006ce2:	e3 d0 c0 10 	bfextu	r1,r0,0x0,0x10
80006ce6:	02 1b       	sub	r11,r1
80006ce8:	50 1b       	stdsp	sp[0x4],r11
80006cea:	70 0b       	ld.w	r11,r8[0x0]
80006cec:	e3 db c0 10 	bfextu	r1,r11,0x0,0x10
80006cf0:	02 09       	add	r9,r1
80006cf2:	f2 0e 01 0e 	sub	lr,r9,lr
80006cf6:	b0 1e       	st.h	r8[0x2],lr
80006cf8:	fc 09 14 10 	asr	r9,lr,0x10
80006cfc:	40 1e       	lddsp	lr,sp[0x4]
80006cfe:	fc 09 00 09 	add	r9,lr,r9
80006d02:	b0 09       	st.h	r8[0x0],r9
80006d04:	e0 01 16 10 	lsr	r1,r0,0x10
80006d08:	2f c8       	sub	r8,-4
80006d0a:	b1 49       	asr	r9,0x10
80006d0c:	04 3a       	cp.w	r10,r2
80006d0e:	fe 98 ff d8 	brls	80006cbe <quorem+0x42>
80006d12:	40 0b       	lddsp	r11,sp[0x0]
80006d14:	58 0c       	cp.w	r12,0
80006d16:	c0 f1       	brne	80006d34 <quorem+0xb8>
80006d18:	ec c8 ff fb 	sub	r8,r6,-5
80006d1c:	ee 08 00 28 	add	r8,r7,r8<<0x2
80006d20:	c0 28       	rjmp	80006d24 <quorem+0xa8>
80006d22:	20 16       	sub	r6,1
80006d24:	20 48       	sub	r8,4
80006d26:	08 38       	cp.w	r8,r4
80006d28:	e0 88 00 05 	brls	80006d32 <quorem+0xb6>
80006d2c:	70 09       	ld.w	r9,r8[0x0]
80006d2e:	58 09       	cp.w	r9,0
80006d30:	cf 90       	breq	80006d22 <quorem+0xa6>
80006d32:	8f 46       	st.w	r7[0x10],r6
80006d34:	0e 9c       	mov	r12,r7
80006d36:	e0 a0 0c fb 	rcall	8000872c <__mcmp>
80006d3a:	c2 d5       	brlt	80006d94 <quorem+0x118>
80006d3c:	2f f5       	sub	r5,-1
80006d3e:	08 98       	mov	r8,r4
80006d40:	30 09       	mov	r9,0
80006d42:	07 0b       	ld.w	r11,r3++
80006d44:	f6 0a 16 10 	lsr	r10,r11,0x10
80006d48:	70 0c       	ld.w	r12,r8[0x0]
80006d4a:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
80006d4e:	f8 0e 16 10 	lsr	lr,r12,0x10
80006d52:	14 1e       	sub	lr,r10
80006d54:	f5 dc c0 10 	bfextu	r10,r12,0x0,0x10
80006d58:	16 1a       	sub	r10,r11
80006d5a:	12 0a       	add	r10,r9
80006d5c:	b0 1a       	st.h	r8[0x2],r10
80006d5e:	b1 4a       	asr	r10,0x10
80006d60:	fc 0a 00 09 	add	r9,lr,r10
80006d64:	b0 09       	st.h	r8[0x0],r9
80006d66:	2f c8       	sub	r8,-4
80006d68:	b1 49       	asr	r9,0x10
80006d6a:	04 33       	cp.w	r3,r2
80006d6c:	fe 98 ff eb 	brls	80006d42 <quorem+0xc6>
80006d70:	ec c8 ff fb 	sub	r8,r6,-5
80006d74:	ee 08 03 29 	ld.w	r9,r7[r8<<0x2]
80006d78:	58 09       	cp.w	r9,0
80006d7a:	c0 d1       	brne	80006d94 <quorem+0x118>
80006d7c:	ee 08 00 28 	add	r8,r7,r8<<0x2
80006d80:	c0 28       	rjmp	80006d84 <quorem+0x108>
80006d82:	20 16       	sub	r6,1
80006d84:	20 48       	sub	r8,4
80006d86:	08 38       	cp.w	r8,r4
80006d88:	e0 88 00 05 	brls	80006d92 <quorem+0x116>
80006d8c:	70 09       	ld.w	r9,r8[0x0]
80006d8e:	58 09       	cp.w	r9,0
80006d90:	cf 90       	breq	80006d82 <quorem+0x106>
80006d92:	8f 46       	st.w	r7[0x10],r6
80006d94:	0a 9c       	mov	r12,r5
80006d96:	2f ed       	sub	sp,-8
80006d98:	d8 32       	popm	r0-r7,pc
80006d9a:	d7 03       	nop

80006d9c <_dtoa_r>:
80006d9c:	d4 31       	pushm	r0-r7,lr
80006d9e:	21 ad       	sub	sp,104
80006da0:	fa c4 ff 74 	sub	r4,sp,-140
80006da4:	18 97       	mov	r7,r12
80006da6:	16 95       	mov	r5,r11
80006da8:	68 2c       	ld.w	r12,r4[0x8]
80006daa:	50 c9       	stdsp	sp[0x30],r9
80006dac:	68 16       	ld.w	r6,r4[0x4]
80006dae:	68 09       	ld.w	r9,r4[0x0]
80006db0:	50 e8       	stdsp	sp[0x38],r8
80006db2:	14 94       	mov	r4,r10
80006db4:	51 2c       	stdsp	sp[0x48],r12
80006db6:	fa e5 00 08 	st.d	sp[8],r4
80006dba:	51 59       	stdsp	sp[0x54],r9
80006dbc:	6e 95       	ld.w	r5,r7[0x24]
80006dbe:	58 05       	cp.w	r5,0
80006dc0:	c0 91       	brne	80006dd2 <_dtoa_r+0x36>
80006dc2:	31 0c       	mov	r12,16
80006dc4:	e0 a0 09 ea 	rcall	80008198 <malloc>
80006dc8:	99 35       	st.w	r12[0xc],r5
80006dca:	8f 9c       	st.w	r7[0x24],r12
80006dcc:	99 15       	st.w	r12[0x4],r5
80006dce:	99 25       	st.w	r12[0x8],r5
80006dd0:	99 05       	st.w	r12[0x0],r5
80006dd2:	6e 99       	ld.w	r9,r7[0x24]
80006dd4:	72 08       	ld.w	r8,r9[0x0]
80006dd6:	58 08       	cp.w	r8,0
80006dd8:	c0 f0       	breq	80006df6 <_dtoa_r+0x5a>
80006dda:	72 1a       	ld.w	r10,r9[0x4]
80006ddc:	91 1a       	st.w	r8[0x4],r10
80006dde:	30 1a       	mov	r10,1
80006de0:	72 19       	ld.w	r9,r9[0x4]
80006de2:	f4 09 09 49 	lsl	r9,r10,r9
80006de6:	10 9b       	mov	r11,r8
80006de8:	91 29       	st.w	r8[0x8],r9
80006dea:	0e 9c       	mov	r12,r7
80006dec:	e0 a0 0c ba 	rcall	80008760 <_Bfree>
80006df0:	6e 98       	ld.w	r8,r7[0x24]
80006df2:	30 09       	mov	r9,0
80006df4:	91 09       	st.w	r8[0x0],r9
80006df6:	40 28       	lddsp	r8,sp[0x8]
80006df8:	10 94       	mov	r4,r8
80006dfa:	58 08       	cp.w	r8,0
80006dfc:	c0 64       	brge	80006e08 <_dtoa_r+0x6c>
80006dfe:	f1 d8 c0 1f 	bfextu	r8,r8,0x0,0x1f
80006e02:	50 28       	stdsp	sp[0x8],r8
80006e04:	30 18       	mov	r8,1
80006e06:	c0 28       	rjmp	80006e0a <_dtoa_r+0x6e>
80006e08:	30 08       	mov	r8,0
80006e0a:	8d 08       	st.w	r6[0x0],r8
80006e0c:	fc 1c 7f f0 	movh	r12,0x7ff0
80006e10:	40 26       	lddsp	r6,sp[0x8]
80006e12:	0c 98       	mov	r8,r6
80006e14:	e6 18 7f f0 	andh	r8,0x7ff0,COH
80006e18:	18 38       	cp.w	r8,r12
80006e1a:	c2 01       	brne	80006e5a <_dtoa_r+0xbe>
80006e1c:	e0 68 27 0f 	mov	r8,9999
80006e20:	41 5b       	lddsp	r11,sp[0x54]
80006e22:	97 08       	st.w	r11[0x0],r8
80006e24:	40 3a       	lddsp	r10,sp[0xc]
80006e26:	58 0a       	cp.w	r10,0
80006e28:	c0 71       	brne	80006e36 <_dtoa_r+0x9a>
80006e2a:	ed d6 c0 14 	bfextu	r6,r6,0x0,0x14
80006e2e:	c0 41       	brne	80006e36 <_dtoa_r+0x9a>
80006e30:	fe cc c7 4c 	sub	r12,pc,-14516
80006e34:	c0 38       	rjmp	80006e3a <_dtoa_r+0x9e>
80006e36:	fe cc c7 46 	sub	r12,pc,-14522
80006e3a:	41 29       	lddsp	r9,sp[0x48]
80006e3c:	58 09       	cp.w	r9,0
80006e3e:	e0 80 05 9a 	breq	80007972 <_dtoa_r+0xbd6>
80006e42:	f8 c8 ff fd 	sub	r8,r12,-3
80006e46:	f8 c9 ff f8 	sub	r9,r12,-8
80006e4a:	11 8b       	ld.ub	r11,r8[0x0]
80006e4c:	30 0a       	mov	r10,0
80006e4e:	41 25       	lddsp	r5,sp[0x48]
80006e50:	f4 0b 18 00 	cp.b	r11,r10
80006e54:	f2 08 17 10 	movne	r8,r9
80006e58:	c1 68       	rjmp	80006e84 <_dtoa_r+0xe8>
80006e5a:	fa ea 00 08 	ld.d	r10,sp[8]
80006e5e:	30 08       	mov	r8,0
80006e60:	fa eb 00 3c 	st.d	sp[60],r10
80006e64:	30 09       	mov	r9,0
80006e66:	e0 a0 14 e6 	rcall	80009832 <__avr32_f64_cmp_eq>
80006e6a:	c1 00       	breq	80006e8a <_dtoa_r+0xee>
80006e6c:	30 18       	mov	r8,1
80006e6e:	41 5a       	lddsp	r10,sp[0x54]
80006e70:	95 08       	st.w	r10[0x0],r8
80006e72:	fe cc c8 b2 	sub	r12,pc,-14158
80006e76:	41 29       	lddsp	r9,sp[0x48]
80006e78:	f8 08 00 08 	add	r8,r12,r8
80006e7c:	58 09       	cp.w	r9,0
80006e7e:	e0 80 05 7a 	breq	80007972 <_dtoa_r+0xbd6>
80006e82:	12 95       	mov	r5,r9
80006e84:	8b 08       	st.w	r5[0x0],r8
80006e86:	e0 8f 05 76 	bral	80007972 <_dtoa_r+0xbd6>
80006e8a:	fa c8 ff 9c 	sub	r8,sp,-100
80006e8e:	fa c9 ff a0 	sub	r9,sp,-96
80006e92:	fa ea 00 3c 	ld.d	r10,sp[60]
80006e96:	0e 9c       	mov	r12,r7
80006e98:	eb d6 c2 8b 	bfextu	r5,r6,0x14,0xb
80006e9c:	e0 a0 0c b4 	rcall	80008804 <__d2b>
80006ea0:	18 93       	mov	r3,r12
80006ea2:	58 05       	cp.w	r5,0
80006ea4:	c0 d0       	breq	80006ebe <_dtoa_r+0x122>
80006ea6:	fa ea 00 3c 	ld.d	r10,sp[60]
80006eaa:	30 04       	mov	r4,0
80006eac:	f1 db c0 14 	bfextu	r8,r11,0x0,0x14
80006eb0:	ea c5 03 ff 	sub	r5,r5,1023
80006eb4:	10 9b       	mov	r11,r8
80006eb6:	51 74       	stdsp	sp[0x5c],r4
80006eb8:	ea 1b 3f f0 	orh	r11,0x3ff0
80006ebc:	c2 58       	rjmp	80006f06 <_dtoa_r+0x16a>
80006ebe:	41 88       	lddsp	r8,sp[0x60]
80006ec0:	41 9c       	lddsp	r12,sp[0x64]
80006ec2:	10 0c       	add	r12,r8
80006ec4:	f8 c5 fb ce 	sub	r5,r12,-1074
80006ec8:	e0 45 00 20 	cp.w	r5,32
80006ecc:	e0 8a 00 0e 	brle	80006ee8 <_dtoa_r+0x14c>
80006ed0:	f8 cc fb ee 	sub	r12,r12,-1042
80006ed4:	40 3b       	lddsp	r11,sp[0xc]
80006ed6:	ea 08 11 40 	rsub	r8,r5,64
80006eda:	f6 0c 0a 4c 	lsr	r12,r11,r12
80006ede:	ec 08 09 46 	lsl	r6,r6,r8
80006ee2:	0c 4c       	or	r12,r6
80006ee4:	c0 78       	rjmp	80006ef2 <_dtoa_r+0x156>
80006ee6:	d7 03       	nop
80006ee8:	ea 0c 11 20 	rsub	r12,r5,32
80006eec:	40 3a       	lddsp	r10,sp[0xc]
80006eee:	f4 0c 09 4c 	lsl	r12,r10,r12
80006ef2:	e0 a0 14 2c 	rcall	8000974a <__avr32_u32_to_f64>
80006ef6:	fc 18 fe 10 	movh	r8,0xfe10
80006efa:	30 19       	mov	r9,1
80006efc:	ea c5 04 33 	sub	r5,r5,1075
80006f00:	f0 0b 00 0b 	add	r11,r8,r11
80006f04:	51 79       	stdsp	sp[0x5c],r9
80006f06:	30 08       	mov	r8,0
80006f08:	fc 19 3f f8 	movh	r9,0x3ff8
80006f0c:	e0 a0 12 b4 	rcall	80009474 <__avr32_f64_sub>
80006f10:	e0 68 43 61 	mov	r8,17249
80006f14:	ea 18 63 6f 	orh	r8,0x636f
80006f18:	e0 69 87 a7 	mov	r9,34727
80006f1c:	ea 19 3f d2 	orh	r9,0x3fd2
80006f20:	e0 a0 11 be 	rcall	8000929c <__avr32_f64_mul>
80006f24:	e0 68 c8 b3 	mov	r8,51379
80006f28:	ea 18 8b 60 	orh	r8,0x8b60
80006f2c:	e0 69 8a 28 	mov	r9,35368
80006f30:	ea 19 3f c6 	orh	r9,0x3fc6
80006f34:	e0 a0 13 6e 	rcall	80009610 <__avr32_f64_add>
80006f38:	0a 9c       	mov	r12,r5
80006f3a:	14 90       	mov	r0,r10
80006f3c:	16 91       	mov	r1,r11
80006f3e:	e0 a0 14 0a 	rcall	80009752 <__avr32_s32_to_f64>
80006f42:	e0 68 79 fb 	mov	r8,31227
80006f46:	ea 18 50 9f 	orh	r8,0x509f
80006f4a:	e0 69 44 13 	mov	r9,17427
80006f4e:	ea 19 3f d3 	orh	r9,0x3fd3
80006f52:	e0 a0 11 a5 	rcall	8000929c <__avr32_f64_mul>
80006f56:	14 98       	mov	r8,r10
80006f58:	16 99       	mov	r9,r11
80006f5a:	00 9a       	mov	r10,r0
80006f5c:	02 9b       	mov	r11,r1
80006f5e:	e0 a0 13 59 	rcall	80009610 <__avr32_f64_add>
80006f62:	14 90       	mov	r0,r10
80006f64:	16 91       	mov	r1,r11
80006f66:	e0 a0 13 df 	rcall	80009724 <__avr32_f64_to_s32>
80006f6a:	30 08       	mov	r8,0
80006f6c:	18 96       	mov	r6,r12
80006f6e:	30 09       	mov	r9,0
80006f70:	00 9a       	mov	r10,r0
80006f72:	02 9b       	mov	r11,r1
80006f74:	e0 a0 14 a6 	rcall	800098c0 <__avr32_f64_cmp_lt>
80006f78:	c0 c0       	breq	80006f90 <_dtoa_r+0x1f4>
80006f7a:	0c 9c       	mov	r12,r6
80006f7c:	e0 a0 13 eb 	rcall	80009752 <__avr32_s32_to_f64>
80006f80:	14 98       	mov	r8,r10
80006f82:	16 99       	mov	r9,r11
80006f84:	00 9a       	mov	r10,r0
80006f86:	02 9b       	mov	r11,r1
80006f88:	e0 a0 14 55 	rcall	80009832 <__avr32_f64_cmp_eq>
80006f8c:	f7 b6 00 01 	subeq	r6,1
80006f90:	59 66       	cp.w	r6,22
80006f92:	e0 88 00 05 	brls	80006f9c <_dtoa_r+0x200>
80006f96:	30 18       	mov	r8,1
80006f98:	51 48       	stdsp	sp[0x50],r8
80006f9a:	c1 38       	rjmp	80006fc0 <_dtoa_r+0x224>
80006f9c:	fe c8 c7 f4 	sub	r8,pc,-14348
80006fa0:	fa ea 00 3c 	ld.d	r10,sp[60]
80006fa4:	f0 06 02 38 	ld.d	r8,r8[r6<<0x3]
80006fa8:	e0 a0 14 8c 	rcall	800098c0 <__avr32_f64_cmp_lt>
80006fac:	f9 b4 00 00 	moveq	r4,0
80006fb0:	fb f4 0a 14 	st.weq	sp[0x50],r4
80006fb4:	f7 b6 01 01 	subne	r6,1
80006fb8:	f9 bc 01 00 	movne	r12,0
80006fbc:	fb fc 1a 14 	st.wne	sp[0x50],r12
80006fc0:	41 90       	lddsp	r0,sp[0x64]
80006fc2:	20 10       	sub	r0,1
80006fc4:	0a 10       	sub	r0,r5
80006fc6:	c0 46       	brmi	80006fce <_dtoa_r+0x232>
80006fc8:	50 40       	stdsp	sp[0x10],r0
80006fca:	30 00       	mov	r0,0
80006fcc:	c0 48       	rjmp	80006fd4 <_dtoa_r+0x238>
80006fce:	30 0b       	mov	r11,0
80006fd0:	5c 30       	neg	r0
80006fd2:	50 4b       	stdsp	sp[0x10],r11
80006fd4:	ec 02 11 00 	rsub	r2,r6,0
80006fd8:	58 06       	cp.w	r6,0
80006fda:	fb fa 40 04 	ld.wge	r10,sp[0x10]
80006fde:	f5 d6 e4 0a 	addge	r10,r10,r6
80006fe2:	fb fa 4a 04 	st.wge	sp[0x10],r10
80006fe6:	fb f6 4a 11 	st.wge	sp[0x44],r6
80006fea:	f9 b2 04 00 	movge	r2,0
80006fee:	e1 d6 e5 10 	sublt	r0,r0,r6
80006ff2:	f9 b9 05 00 	movlt	r9,0
80006ff6:	fb f9 5a 11 	st.wlt	sp[0x44],r9
80006ffa:	40 c8       	lddsp	r8,sp[0x30]
80006ffc:	58 98       	cp.w	r8,9
80006ffe:	e0 8b 00 20 	brhi	8000703e <_dtoa_r+0x2a2>
80007002:	58 58       	cp.w	r8,5
80007004:	f9 b4 0a 01 	movle	r4,1
80007008:	fb f5 90 0c 	ld.wgt	r5,sp[0x30]
8000700c:	f7 b5 09 04 	subgt	r5,4
80007010:	fb f5 9a 0c 	st.wgt	sp[0x30],r5
80007014:	f9 b4 09 00 	movgt	r4,0
80007018:	40 cc       	lddsp	r12,sp[0x30]
8000701a:	58 3c       	cp.w	r12,3
8000701c:	c2 d0       	breq	80007076 <_dtoa_r+0x2da>
8000701e:	e0 89 00 05 	brgt	80007028 <_dtoa_r+0x28c>
80007022:	58 2c       	cp.w	r12,2
80007024:	c1 01       	brne	80007044 <_dtoa_r+0x2a8>
80007026:	c1 88       	rjmp	80007056 <_dtoa_r+0x2ba>
80007028:	40 cb       	lddsp	r11,sp[0x30]
8000702a:	58 4b       	cp.w	r11,4
8000702c:	c0 60       	breq	80007038 <_dtoa_r+0x29c>
8000702e:	58 5b       	cp.w	r11,5
80007030:	c0 a1       	brne	80007044 <_dtoa_r+0x2a8>
80007032:	30 1a       	mov	r10,1
80007034:	50 da       	stdsp	sp[0x34],r10
80007036:	c2 28       	rjmp	8000707a <_dtoa_r+0x2de>
80007038:	30 19       	mov	r9,1
8000703a:	50 d9       	stdsp	sp[0x34],r9
8000703c:	c0 f8       	rjmp	8000705a <_dtoa_r+0x2be>
8000703e:	30 08       	mov	r8,0
80007040:	30 14       	mov	r4,1
80007042:	50 c8       	stdsp	sp[0x30],r8
80007044:	3f f5       	mov	r5,-1
80007046:	30 1c       	mov	r12,1
80007048:	30 0b       	mov	r11,0
8000704a:	50 95       	stdsp	sp[0x24],r5
8000704c:	50 dc       	stdsp	sp[0x34],r12
8000704e:	0a 91       	mov	r1,r5
80007050:	31 28       	mov	r8,18
80007052:	50 eb       	stdsp	sp[0x38],r11
80007054:	c2 08       	rjmp	80007094 <_dtoa_r+0x2f8>
80007056:	30 0a       	mov	r10,0
80007058:	50 da       	stdsp	sp[0x34],r10
8000705a:	40 e9       	lddsp	r9,sp[0x38]
8000705c:	58 09       	cp.w	r9,0
8000705e:	e0 89 00 07 	brgt	8000706c <_dtoa_r+0x2d0>
80007062:	30 18       	mov	r8,1
80007064:	50 98       	stdsp	sp[0x24],r8
80007066:	10 91       	mov	r1,r8
80007068:	50 e8       	stdsp	sp[0x38],r8
8000706a:	c1 58       	rjmp	80007094 <_dtoa_r+0x2f8>
8000706c:	40 e5       	lddsp	r5,sp[0x38]
8000706e:	50 95       	stdsp	sp[0x24],r5
80007070:	0a 91       	mov	r1,r5
80007072:	0a 98       	mov	r8,r5
80007074:	c1 08       	rjmp	80007094 <_dtoa_r+0x2f8>
80007076:	30 0c       	mov	r12,0
80007078:	50 dc       	stdsp	sp[0x34],r12
8000707a:	40 eb       	lddsp	r11,sp[0x38]
8000707c:	ec 0b 00 0b 	add	r11,r6,r11
80007080:	50 9b       	stdsp	sp[0x24],r11
80007082:	16 98       	mov	r8,r11
80007084:	2f f8       	sub	r8,-1
80007086:	58 08       	cp.w	r8,0
80007088:	e0 89 00 05 	brgt	80007092 <_dtoa_r+0x2f6>
8000708c:	10 91       	mov	r1,r8
8000708e:	30 18       	mov	r8,1
80007090:	c0 28       	rjmp	80007094 <_dtoa_r+0x2f8>
80007092:	10 91       	mov	r1,r8
80007094:	30 09       	mov	r9,0
80007096:	6e 9a       	ld.w	r10,r7[0x24]
80007098:	95 19       	st.w	r10[0x4],r9
8000709a:	30 49       	mov	r9,4
8000709c:	c0 68       	rjmp	800070a8 <_dtoa_r+0x30c>
8000709e:	d7 03       	nop
800070a0:	6a 1a       	ld.w	r10,r5[0x4]
800070a2:	a1 79       	lsl	r9,0x1
800070a4:	2f fa       	sub	r10,-1
800070a6:	8b 1a       	st.w	r5[0x4],r10
800070a8:	6e 95       	ld.w	r5,r7[0x24]
800070aa:	f2 ca ff ec 	sub	r10,r9,-20
800070ae:	10 3a       	cp.w	r10,r8
800070b0:	fe 98 ff f8 	brls	800070a0 <_dtoa_r+0x304>
800070b4:	6a 1b       	ld.w	r11,r5[0x4]
800070b6:	0e 9c       	mov	r12,r7
800070b8:	e0 a0 0b 6e 	rcall	80008794 <_Balloc>
800070bc:	58 e1       	cp.w	r1,14
800070be:	5f 88       	srls	r8
800070c0:	8b 0c       	st.w	r5[0x0],r12
800070c2:	f1 e4 00 04 	and	r4,r8,r4
800070c6:	6e 98       	ld.w	r8,r7[0x24]
800070c8:	70 08       	ld.w	r8,r8[0x0]
800070ca:	50 88       	stdsp	sp[0x20],r8
800070cc:	e0 80 01 82 	breq	800073d0 <_dtoa_r+0x634>
800070d0:	58 06       	cp.w	r6,0
800070d2:	e0 8a 00 43 	brle	80007158 <_dtoa_r+0x3bc>
800070d6:	f3 d6 c0 04 	bfextu	r9,r6,0x0,0x4
800070da:	fe c8 c9 32 	sub	r8,pc,-14030
800070de:	f0 09 02 34 	ld.d	r4,r8[r9<<0x3]
800070e2:	fa e5 00 18 	st.d	sp[24],r4
800070e6:	ec 04 14 04 	asr	r4,r6,0x4
800070ea:	ed b4 00 04 	bld	r4,0x4
800070ee:	c0 30       	breq	800070f4 <_dtoa_r+0x358>
800070f0:	30 25       	mov	r5,2
800070f2:	c1 08       	rjmp	80007112 <_dtoa_r+0x376>
800070f4:	fe c8 c8 84 	sub	r8,pc,-14204
800070f8:	f0 e8 00 20 	ld.d	r8,r8[32]
800070fc:	fa ea 00 3c 	ld.d	r10,sp[60]
80007100:	e9 d4 c0 04 	bfextu	r4,r4,0x0,0x4
80007104:	e0 a0 14 12 	rcall	80009928 <__avr32_f64_div>
80007108:	30 35       	mov	r5,3
8000710a:	14 98       	mov	r8,r10
8000710c:	16 99       	mov	r9,r11
8000710e:	fa e9 00 08 	st.d	sp[8],r8
80007112:	fe cc c8 a2 	sub	r12,pc,-14174
80007116:	50 a3       	stdsp	sp[0x28],r3
80007118:	0c 93       	mov	r3,r6
8000711a:	18 96       	mov	r6,r12
8000711c:	c0 f8       	rjmp	8000713a <_dtoa_r+0x39e>
8000711e:	fa ea 00 18 	ld.d	r10,sp[24]
80007122:	ed b4 00 00 	bld	r4,0x0
80007126:	c0 81       	brne	80007136 <_dtoa_r+0x39a>
80007128:	ec e8 00 00 	ld.d	r8,r6[0]
8000712c:	2f f5       	sub	r5,-1
8000712e:	e0 a0 10 b7 	rcall	8000929c <__avr32_f64_mul>
80007132:	fa eb 00 18 	st.d	sp[24],r10
80007136:	a1 54       	asr	r4,0x1
80007138:	2f 86       	sub	r6,-8
8000713a:	58 04       	cp.w	r4,0
8000713c:	cf 11       	brne	8000711e <_dtoa_r+0x382>
8000713e:	fa e8 00 18 	ld.d	r8,sp[24]
80007142:	fa ea 00 08 	ld.d	r10,sp[8]
80007146:	06 96       	mov	r6,r3
80007148:	e0 a0 13 f0 	rcall	80009928 <__avr32_f64_div>
8000714c:	40 a3       	lddsp	r3,sp[0x28]
8000714e:	14 98       	mov	r8,r10
80007150:	16 99       	mov	r9,r11
80007152:	fa e9 00 08 	st.d	sp[8],r8
80007156:	c2 f8       	rjmp	800071b4 <_dtoa_r+0x418>
80007158:	ec 08 11 00 	rsub	r8,r6,0
8000715c:	c0 31       	brne	80007162 <_dtoa_r+0x3c6>
8000715e:	30 25       	mov	r5,2
80007160:	c2 a8       	rjmp	800071b4 <_dtoa_r+0x418>
80007162:	fe cc c8 f2 	sub	r12,pc,-14094
80007166:	f0 04 14 04 	asr	r4,r8,0x4
8000716a:	50 1c       	stdsp	sp[0x4],r12
8000716c:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80007170:	fe c9 c9 c8 	sub	r9,pc,-13880
80007174:	fa ea 00 3c 	ld.d	r10,sp[60]
80007178:	f2 08 02 38 	ld.d	r8,r9[r8<<0x3]
8000717c:	e0 a0 10 90 	rcall	8000929c <__avr32_f64_mul>
80007180:	40 1c       	lddsp	r12,sp[0x4]
80007182:	50 63       	stdsp	sp[0x18],r3
80007184:	30 25       	mov	r5,2
80007186:	0c 93       	mov	r3,r6
80007188:	fa eb 00 08 	st.d	sp[8],r10
8000718c:	18 96       	mov	r6,r12
8000718e:	c0 f8       	rjmp	800071ac <_dtoa_r+0x410>
80007190:	fa ea 00 08 	ld.d	r10,sp[8]
80007194:	ed b4 00 00 	bld	r4,0x0
80007198:	c0 81       	brne	800071a8 <_dtoa_r+0x40c>
8000719a:	ec e8 00 00 	ld.d	r8,r6[0]
8000719e:	2f f5       	sub	r5,-1
800071a0:	e0 a0 10 7e 	rcall	8000929c <__avr32_f64_mul>
800071a4:	fa eb 00 08 	st.d	sp[8],r10
800071a8:	a1 54       	asr	r4,0x1
800071aa:	2f 86       	sub	r6,-8
800071ac:	58 04       	cp.w	r4,0
800071ae:	cf 11       	brne	80007190 <_dtoa_r+0x3f4>
800071b0:	06 96       	mov	r6,r3
800071b2:	40 63       	lddsp	r3,sp[0x18]
800071b4:	41 4a       	lddsp	r10,sp[0x50]
800071b6:	58 0a       	cp.w	r10,0
800071b8:	c2 a0       	breq	8000720c <_dtoa_r+0x470>
800071ba:	fa e8 00 08 	ld.d	r8,sp[8]
800071be:	58 01       	cp.w	r1,0
800071c0:	5f 94       	srgt	r4
800071c2:	fa e9 00 18 	st.d	sp[24],r8
800071c6:	30 08       	mov	r8,0
800071c8:	fc 19 3f f0 	movh	r9,0x3ff0
800071cc:	fa ea 00 18 	ld.d	r10,sp[24]
800071d0:	e0 a0 13 78 	rcall	800098c0 <__avr32_f64_cmp_lt>
800071d4:	f9 bc 00 00 	moveq	r12,0
800071d8:	f9 bc 01 01 	movne	r12,1
800071dc:	e9 ec 00 0c 	and	r12,r4,r12
800071e0:	c1 60       	breq	8000720c <_dtoa_r+0x470>
800071e2:	40 98       	lddsp	r8,sp[0x24]
800071e4:	58 08       	cp.w	r8,0
800071e6:	e0 8a 00 f1 	brle	800073c8 <_dtoa_r+0x62c>
800071ea:	30 08       	mov	r8,0
800071ec:	fc 19 40 24 	movh	r9,0x4024
800071f0:	ec c4 00 01 	sub	r4,r6,1
800071f4:	fa ea 00 18 	ld.d	r10,sp[24]
800071f8:	2f f5       	sub	r5,-1
800071fa:	50 64       	stdsp	sp[0x18],r4
800071fc:	e0 a0 10 50 	rcall	8000929c <__avr32_f64_mul>
80007200:	40 94       	lddsp	r4,sp[0x24]
80007202:	14 98       	mov	r8,r10
80007204:	16 99       	mov	r9,r11
80007206:	fa e9 00 08 	st.d	sp[8],r8
8000720a:	c0 38       	rjmp	80007210 <_dtoa_r+0x474>
8000720c:	50 66       	stdsp	sp[0x18],r6
8000720e:	02 94       	mov	r4,r1
80007210:	0a 9c       	mov	r12,r5
80007212:	e0 a0 12 a0 	rcall	80009752 <__avr32_s32_to_f64>
80007216:	fa e8 00 08 	ld.d	r8,sp[8]
8000721a:	e0 a0 10 41 	rcall	8000929c <__avr32_f64_mul>
8000721e:	30 08       	mov	r8,0
80007220:	fc 19 40 1c 	movh	r9,0x401c
80007224:	e0 a0 11 f6 	rcall	80009610 <__avr32_f64_add>
80007228:	14 98       	mov	r8,r10
8000722a:	16 99       	mov	r9,r11
8000722c:	fa e9 00 28 	st.d	sp[40],r8
80007230:	fc 18 fc c0 	movh	r8,0xfcc0
80007234:	40 a5       	lddsp	r5,sp[0x28]
80007236:	10 05       	add	r5,r8
80007238:	50 a5       	stdsp	sp[0x28],r5
8000723a:	58 04       	cp.w	r4,0
8000723c:	c2 11       	brne	8000727e <_dtoa_r+0x4e2>
8000723e:	fa ea 00 08 	ld.d	r10,sp[8]
80007242:	30 08       	mov	r8,0
80007244:	fc 19 40 14 	movh	r9,0x4014
80007248:	e0 a0 11 16 	rcall	80009474 <__avr32_f64_sub>
8000724c:	40 bc       	lddsp	r12,sp[0x2c]
8000724e:	fa eb 00 08 	st.d	sp[8],r10
80007252:	14 98       	mov	r8,r10
80007254:	16 99       	mov	r9,r11
80007256:	18 9a       	mov	r10,r12
80007258:	0a 9b       	mov	r11,r5
8000725a:	e0 a0 13 33 	rcall	800098c0 <__avr32_f64_cmp_lt>
8000725e:	e0 81 02 54 	brne	80007706 <_dtoa_r+0x96a>
80007262:	0a 98       	mov	r8,r5
80007264:	40 b9       	lddsp	r9,sp[0x2c]
80007266:	ee 18 80 00 	eorh	r8,0x8000
8000726a:	fa ea 00 08 	ld.d	r10,sp[8]
8000726e:	10 95       	mov	r5,r8
80007270:	12 98       	mov	r8,r9
80007272:	0a 99       	mov	r9,r5
80007274:	e0 a0 13 26 	rcall	800098c0 <__avr32_f64_cmp_lt>
80007278:	e0 81 02 3e 	brne	800076f4 <_dtoa_r+0x958>
8000727c:	ca 68       	rjmp	800073c8 <_dtoa_r+0x62c>
8000727e:	fe c9 ca d6 	sub	r9,pc,-13610
80007282:	e8 c8 00 01 	sub	r8,r4,1
80007286:	40 d5       	lddsp	r5,sp[0x34]
80007288:	58 05       	cp.w	r5,0
8000728a:	c4 f0       	breq	80007328 <_dtoa_r+0x58c>
8000728c:	30 0c       	mov	r12,0
8000728e:	f2 08 02 38 	ld.d	r8,r9[r8<<0x3]
80007292:	51 3c       	stdsp	sp[0x4c],r12
80007294:	30 0a       	mov	r10,0
80007296:	fc 1b 3f e0 	movh	r11,0x3fe0
8000729a:	e0 a0 13 47 	rcall	80009928 <__avr32_f64_div>
8000729e:	fa e8 00 28 	ld.d	r8,sp[40]
800072a2:	40 85       	lddsp	r5,sp[0x20]
800072a4:	e0 a0 10 e8 	rcall	80009474 <__avr32_f64_sub>
800072a8:	fa eb 00 28 	st.d	sp[40],r10
800072ac:	fa ea 00 08 	ld.d	r10,sp[8]
800072b0:	e0 a0 12 3a 	rcall	80009724 <__avr32_f64_to_s32>
800072b4:	51 6c       	stdsp	sp[0x58],r12
800072b6:	e0 a0 12 4e 	rcall	80009752 <__avr32_s32_to_f64>
800072ba:	14 98       	mov	r8,r10
800072bc:	16 99       	mov	r9,r11
800072be:	fa ea 00 08 	ld.d	r10,sp[8]
800072c2:	e0 a0 10 d9 	rcall	80009474 <__avr32_f64_sub>
800072c6:	fa eb 00 08 	st.d	sp[8],r10
800072ca:	41 68       	lddsp	r8,sp[0x58]
800072cc:	2d 08       	sub	r8,-48
800072ce:	0a c8       	st.b	r5++,r8
800072d0:	41 39       	lddsp	r9,sp[0x4c]
800072d2:	2f f9       	sub	r9,-1
800072d4:	51 39       	stdsp	sp[0x4c],r9
800072d6:	fa e8 00 28 	ld.d	r8,sp[40]
800072da:	e0 a0 12 f3 	rcall	800098c0 <__avr32_f64_cmp_lt>
800072de:	e0 81 03 39 	brne	80007950 <_dtoa_r+0xbb4>
800072e2:	fa e8 00 08 	ld.d	r8,sp[8]
800072e6:	30 0a       	mov	r10,0
800072e8:	fc 1b 3f f0 	movh	r11,0x3ff0
800072ec:	e0 a0 10 c4 	rcall	80009474 <__avr32_f64_sub>
800072f0:	fa e8 00 28 	ld.d	r8,sp[40]
800072f4:	e0 a0 12 e6 	rcall	800098c0 <__avr32_f64_cmp_lt>
800072f8:	fa ea 00 28 	ld.d	r10,sp[40]
800072fc:	30 08       	mov	r8,0
800072fe:	fc 19 40 24 	movh	r9,0x4024
80007302:	e0 81 00 da 	brne	800074b6 <_dtoa_r+0x71a>
80007306:	41 3c       	lddsp	r12,sp[0x4c]
80007308:	08 3c       	cp.w	r12,r4
8000730a:	c5 f4       	brge	800073c8 <_dtoa_r+0x62c>
8000730c:	e0 a0 0f c8 	rcall	8000929c <__avr32_f64_mul>
80007310:	30 08       	mov	r8,0
80007312:	fa eb 00 28 	st.d	sp[40],r10
80007316:	fc 19 40 24 	movh	r9,0x4024
8000731a:	fa ea 00 08 	ld.d	r10,sp[8]
8000731e:	e0 a0 0f bf 	rcall	8000929c <__avr32_f64_mul>
80007322:	fa eb 00 08 	st.d	sp[8],r10
80007326:	cc 3b       	rjmp	800072ac <_dtoa_r+0x510>
80007328:	40 85       	lddsp	r5,sp[0x20]
8000732a:	08 05       	add	r5,r4
8000732c:	f2 08 02 3a 	ld.d	r10,r9[r8<<0x3]
80007330:	51 35       	stdsp	sp[0x4c],r5
80007332:	fa e8 00 28 	ld.d	r8,sp[40]
80007336:	40 85       	lddsp	r5,sp[0x20]
80007338:	e0 a0 0f b2 	rcall	8000929c <__avr32_f64_mul>
8000733c:	fa eb 00 28 	st.d	sp[40],r10
80007340:	fa ea 00 08 	ld.d	r10,sp[8]
80007344:	e0 a0 11 f0 	rcall	80009724 <__avr32_f64_to_s32>
80007348:	51 6c       	stdsp	sp[0x58],r12
8000734a:	e0 a0 12 04 	rcall	80009752 <__avr32_s32_to_f64>
8000734e:	14 98       	mov	r8,r10
80007350:	16 99       	mov	r9,r11
80007352:	fa ea 00 08 	ld.d	r10,sp[8]
80007356:	e0 a0 10 8f 	rcall	80009474 <__avr32_f64_sub>
8000735a:	fa eb 00 08 	st.d	sp[8],r10
8000735e:	41 68       	lddsp	r8,sp[0x58]
80007360:	2d 08       	sub	r8,-48
80007362:	0a c8       	st.b	r5++,r8
80007364:	41 3c       	lddsp	r12,sp[0x4c]
80007366:	18 35       	cp.w	r5,r12
80007368:	c2 81       	brne	800073b8 <_dtoa_r+0x61c>
8000736a:	30 08       	mov	r8,0
8000736c:	fc 19 3f e0 	movh	r9,0x3fe0
80007370:	fa ea 00 28 	ld.d	r10,sp[40]
80007374:	e0 a0 11 4e 	rcall	80009610 <__avr32_f64_add>
80007378:	40 85       	lddsp	r5,sp[0x20]
8000737a:	fa e8 00 08 	ld.d	r8,sp[8]
8000737e:	08 05       	add	r5,r4
80007380:	e0 a0 12 a0 	rcall	800098c0 <__avr32_f64_cmp_lt>
80007384:	e0 81 00 99 	brne	800074b6 <_dtoa_r+0x71a>
80007388:	fa e8 00 28 	ld.d	r8,sp[40]
8000738c:	30 0a       	mov	r10,0
8000738e:	fc 1b 3f e0 	movh	r11,0x3fe0
80007392:	e0 a0 10 71 	rcall	80009474 <__avr32_f64_sub>
80007396:	14 98       	mov	r8,r10
80007398:	16 99       	mov	r9,r11
8000739a:	fa ea 00 08 	ld.d	r10,sp[8]
8000739e:	e0 a0 12 91 	rcall	800098c0 <__avr32_f64_cmp_lt>
800073a2:	c1 30       	breq	800073c8 <_dtoa_r+0x62c>
800073a4:	33 09       	mov	r9,48
800073a6:	0a 98       	mov	r8,r5
800073a8:	11 7a       	ld.ub	r10,--r8
800073aa:	f2 0a 18 00 	cp.b	r10,r9
800073ae:	e0 81 02 d1 	brne	80007950 <_dtoa_r+0xbb4>
800073b2:	10 95       	mov	r5,r8
800073b4:	cf 9b       	rjmp	800073a6 <_dtoa_r+0x60a>
800073b6:	d7 03       	nop
800073b8:	30 08       	mov	r8,0
800073ba:	fc 19 40 24 	movh	r9,0x4024
800073be:	e0 a0 0f 6f 	rcall	8000929c <__avr32_f64_mul>
800073c2:	fa eb 00 08 	st.d	sp[8],r10
800073c6:	cb db       	rjmp	80007340 <_dtoa_r+0x5a4>
800073c8:	fa ea 00 3c 	ld.d	r10,sp[60]
800073cc:	fa eb 00 08 	st.d	sp[8],r10
800073d0:	58 e6       	cp.w	r6,14
800073d2:	5f ab       	srle	r11
800073d4:	41 8a       	lddsp	r10,sp[0x60]
800073d6:	30 08       	mov	r8,0
800073d8:	f4 09 11 ff 	rsub	r9,r10,-1
800073dc:	f7 e9 03 f9 	and	r9,r11,r9>>0x1f
800073e0:	f0 09 18 00 	cp.b	r9,r8
800073e4:	e0 80 00 82 	breq	800074e8 <_dtoa_r+0x74c>
800073e8:	40 ea       	lddsp	r10,sp[0x38]
800073ea:	58 01       	cp.w	r1,0
800073ec:	5f a9       	srle	r9
800073ee:	f3 ea 03 f9 	and	r9,r9,r10>>0x1f
800073f2:	fe ca cc 4a 	sub	r10,pc,-13238
800073f6:	f4 06 02 34 	ld.d	r4,r10[r6<<0x3]
800073fa:	fa e5 00 10 	st.d	sp[16],r4
800073fe:	f0 09 18 00 	cp.b	r9,r8
80007402:	c1 40       	breq	8000742a <_dtoa_r+0x68e>
80007404:	58 01       	cp.w	r1,0
80007406:	e0 81 01 77 	brne	800076f4 <_dtoa_r+0x958>
8000740a:	30 08       	mov	r8,0
8000740c:	fc 19 40 14 	movh	r9,0x4014
80007410:	08 9a       	mov	r10,r4
80007412:	0a 9b       	mov	r11,r5
80007414:	e0 a0 0f 44 	rcall	8000929c <__avr32_f64_mul>
80007418:	fa e8 00 08 	ld.d	r8,sp[8]
8000741c:	e0 a0 12 1e 	rcall	80009858 <__avr32_f64_cmp_ge>
80007420:	e0 81 01 6a 	brne	800076f4 <_dtoa_r+0x958>
80007424:	02 92       	mov	r2,r1
80007426:	e0 8f 01 72 	bral	8000770a <_dtoa_r+0x96e>
8000742a:	40 85       	lddsp	r5,sp[0x20]
8000742c:	30 14       	mov	r4,1
8000742e:	fa e8 00 10 	ld.d	r8,sp[16]
80007432:	fa ea 00 08 	ld.d	r10,sp[8]
80007436:	e0 a0 12 79 	rcall	80009928 <__avr32_f64_div>
8000743a:	e0 a0 11 75 	rcall	80009724 <__avr32_f64_to_s32>
8000743e:	18 92       	mov	r2,r12
80007440:	e0 a0 11 89 	rcall	80009752 <__avr32_s32_to_f64>
80007444:	fa e8 00 10 	ld.d	r8,sp[16]
80007448:	e0 a0 0f 2a 	rcall	8000929c <__avr32_f64_mul>
8000744c:	14 98       	mov	r8,r10
8000744e:	16 99       	mov	r9,r11
80007450:	fa ea 00 08 	ld.d	r10,sp[8]
80007454:	e0 a0 10 10 	rcall	80009474 <__avr32_f64_sub>
80007458:	fa eb 00 08 	st.d	sp[8],r10
8000745c:	e4 c8 ff d0 	sub	r8,r2,-48
80007460:	0a c8       	st.b	r5++,r8
80007462:	fc 19 40 24 	movh	r9,0x4024
80007466:	30 08       	mov	r8,0
80007468:	02 34       	cp.w	r4,r1
8000746a:	c3 31       	brne	800074d0 <_dtoa_r+0x734>
8000746c:	fa e8 00 08 	ld.d	r8,sp[8]
80007470:	e0 a0 10 d0 	rcall	80009610 <__avr32_f64_add>
80007474:	16 91       	mov	r1,r11
80007476:	14 90       	mov	r0,r10
80007478:	14 98       	mov	r8,r10
8000747a:	02 99       	mov	r9,r1
8000747c:	fa ea 00 10 	ld.d	r10,sp[16]
80007480:	e0 a0 12 20 	rcall	800098c0 <__avr32_f64_cmp_lt>
80007484:	c1 a1       	brne	800074b8 <_dtoa_r+0x71c>
80007486:	fa e8 00 10 	ld.d	r8,sp[16]
8000748a:	00 9a       	mov	r10,r0
8000748c:	02 9b       	mov	r11,r1
8000748e:	e0 a0 11 d2 	rcall	80009832 <__avr32_f64_cmp_eq>
80007492:	e0 80 02 5e 	breq	8000794e <_dtoa_r+0xbb2>
80007496:	e5 d2 c0 01 	bfextu	r2,r2,0x0,0x1
8000749a:	c0 f1       	brne	800074b8 <_dtoa_r+0x71c>
8000749c:	e0 8f 02 59 	bral	8000794e <_dtoa_r+0xbb2>
800074a0:	40 8a       	lddsp	r10,sp[0x20]
800074a2:	14 38       	cp.w	r8,r10
800074a4:	c0 30       	breq	800074aa <_dtoa_r+0x70e>
800074a6:	10 95       	mov	r5,r8
800074a8:	c0 98       	rjmp	800074ba <_dtoa_r+0x71e>
800074aa:	33 08       	mov	r8,48
800074ac:	40 89       	lddsp	r9,sp[0x20]
800074ae:	2f f6       	sub	r6,-1
800074b0:	b2 88       	st.b	r9[0x0],r8
800074b2:	40 88       	lddsp	r8,sp[0x20]
800074b4:	c0 88       	rjmp	800074c4 <_dtoa_r+0x728>
800074b6:	40 66       	lddsp	r6,sp[0x18]
800074b8:	33 99       	mov	r9,57
800074ba:	0a 98       	mov	r8,r5
800074bc:	11 7a       	ld.ub	r10,--r8
800074be:	f2 0a 18 00 	cp.b	r10,r9
800074c2:	ce f0       	breq	800074a0 <_dtoa_r+0x704>
800074c4:	50 66       	stdsp	sp[0x18],r6
800074c6:	11 89       	ld.ub	r9,r8[0x0]
800074c8:	2f f9       	sub	r9,-1
800074ca:	b0 89       	st.b	r8[0x0],r9
800074cc:	e0 8f 02 42 	bral	80007950 <_dtoa_r+0xbb4>
800074d0:	e0 a0 0e e6 	rcall	8000929c <__avr32_f64_mul>
800074d4:	2f f4       	sub	r4,-1
800074d6:	fa eb 00 08 	st.d	sp[8],r10
800074da:	30 08       	mov	r8,0
800074dc:	30 09       	mov	r9,0
800074de:	e0 a0 11 aa 	rcall	80009832 <__avr32_f64_cmp_eq>
800074e2:	ca 60       	breq	8000742e <_dtoa_r+0x692>
800074e4:	e0 8f 02 35 	bral	8000794e <_dtoa_r+0xbb2>
800074e8:	40 d8       	lddsp	r8,sp[0x34]
800074ea:	58 08       	cp.w	r8,0
800074ec:	c0 51       	brne	800074f6 <_dtoa_r+0x75a>
800074ee:	04 98       	mov	r8,r2
800074f0:	00 95       	mov	r5,r0
800074f2:	40 d4       	lddsp	r4,sp[0x34]
800074f4:	c3 78       	rjmp	80007562 <_dtoa_r+0x7c6>
800074f6:	40 c5       	lddsp	r5,sp[0x30]
800074f8:	58 15       	cp.w	r5,1
800074fa:	e0 89 00 0f 	brgt	80007518 <_dtoa_r+0x77c>
800074fe:	41 74       	lddsp	r4,sp[0x5c]
80007500:	58 04       	cp.w	r4,0
80007502:	c0 40       	breq	8000750a <_dtoa_r+0x76e>
80007504:	f4 c9 fb cd 	sub	r9,r10,-1075
80007508:	c0 48       	rjmp	80007510 <_dtoa_r+0x774>
8000750a:	41 99       	lddsp	r9,sp[0x64]
8000750c:	f2 09 11 36 	rsub	r9,r9,54
80007510:	04 98       	mov	r8,r2
80007512:	00 95       	mov	r5,r0
80007514:	c1 c8       	rjmp	8000754c <_dtoa_r+0x7b0>
80007516:	d7 03       	nop
80007518:	e2 c8 00 01 	sub	r8,r1,1
8000751c:	58 01       	cp.w	r1,0
8000751e:	e0 05 17 40 	movge	r5,r0
80007522:	e2 09 17 40 	movge	r9,r1
80007526:	e1 d1 e5 15 	sublt	r5,r0,r1
8000752a:	f9 b9 05 00 	movlt	r9,0
8000752e:	10 32       	cp.w	r2,r8
80007530:	e5 d8 e4 18 	subge	r8,r2,r8
80007534:	f1 d2 e5 18 	sublt	r8,r8,r2
80007538:	e5 d8 e5 02 	addlt	r2,r2,r8
8000753c:	fb fc 50 11 	ld.wlt	r12,sp[0x44]
80007540:	f9 d8 e5 0c 	addlt	r12,r12,r8
80007544:	fb fc 5a 11 	st.wlt	sp[0x44],r12
80007548:	f9 b8 05 00 	movlt	r8,0
8000754c:	40 4b       	lddsp	r11,sp[0x10]
8000754e:	12 0b       	add	r11,r9
80007550:	50 08       	stdsp	sp[0x0],r8
80007552:	50 4b       	stdsp	sp[0x10],r11
80007554:	12 00       	add	r0,r9
80007556:	30 1b       	mov	r11,1
80007558:	0e 9c       	mov	r12,r7
8000755a:	e0 a0 0a d1 	rcall	80008afc <__i2b>
8000755e:	40 08       	lddsp	r8,sp[0x0]
80007560:	18 94       	mov	r4,r12
80007562:	40 4a       	lddsp	r10,sp[0x10]
80007564:	58 05       	cp.w	r5,0
80007566:	5f 99       	srgt	r9
80007568:	58 0a       	cp.w	r10,0
8000756a:	5f 9a       	srgt	r10
8000756c:	f5 e9 00 09 	and	r9,r10,r9
80007570:	c0 80       	breq	80007580 <_dtoa_r+0x7e4>
80007572:	40 4c       	lddsp	r12,sp[0x10]
80007574:	f8 05 0d 49 	min	r9,r12,r5
80007578:	12 1c       	sub	r12,r9
8000757a:	12 10       	sub	r0,r9
8000757c:	50 4c       	stdsp	sp[0x10],r12
8000757e:	12 15       	sub	r5,r9
80007580:	58 02       	cp.w	r2,0
80007582:	e0 8a 00 27 	brle	800075d0 <_dtoa_r+0x834>
80007586:	40 db       	lddsp	r11,sp[0x34]
80007588:	58 0b       	cp.w	r11,0
8000758a:	c1 d0       	breq	800075c4 <_dtoa_r+0x828>
8000758c:	58 08       	cp.w	r8,0
8000758e:	e0 8a 00 17 	brle	800075bc <_dtoa_r+0x820>
80007592:	10 9a       	mov	r10,r8
80007594:	50 08       	stdsp	sp[0x0],r8
80007596:	08 9b       	mov	r11,r4
80007598:	0e 9c       	mov	r12,r7
8000759a:	e0 a0 0a f7 	rcall	80008b88 <__pow5mult>
8000759e:	06 9a       	mov	r10,r3
800075a0:	18 9b       	mov	r11,r12
800075a2:	18 94       	mov	r4,r12
800075a4:	0e 9c       	mov	r12,r7
800075a6:	e0 a0 0a 2b 	rcall	800089fc <__multiply>
800075aa:	18 99       	mov	r9,r12
800075ac:	06 9b       	mov	r11,r3
800075ae:	50 19       	stdsp	sp[0x4],r9
800075b0:	0e 9c       	mov	r12,r7
800075b2:	e0 a0 08 d7 	rcall	80008760 <_Bfree>
800075b6:	40 19       	lddsp	r9,sp[0x4]
800075b8:	40 08       	lddsp	r8,sp[0x0]
800075ba:	12 93       	mov	r3,r9
800075bc:	e4 08 01 0a 	sub	r10,r2,r8
800075c0:	c0 80       	breq	800075d0 <_dtoa_r+0x834>
800075c2:	c0 28       	rjmp	800075c6 <_dtoa_r+0x82a>
800075c4:	04 9a       	mov	r10,r2
800075c6:	06 9b       	mov	r11,r3
800075c8:	0e 9c       	mov	r12,r7
800075ca:	e0 a0 0a df 	rcall	80008b88 <__pow5mult>
800075ce:	18 93       	mov	r3,r12
800075d0:	30 1b       	mov	r11,1
800075d2:	0e 9c       	mov	r12,r7
800075d4:	e0 a0 0a 94 	rcall	80008afc <__i2b>
800075d8:	41 1a       	lddsp	r10,sp[0x44]
800075da:	18 92       	mov	r2,r12
800075dc:	58 0a       	cp.w	r10,0
800075de:	e0 8a 00 07 	brle	800075ec <_dtoa_r+0x850>
800075e2:	18 9b       	mov	r11,r12
800075e4:	0e 9c       	mov	r12,r7
800075e6:	e0 a0 0a d1 	rcall	80008b88 <__pow5mult>
800075ea:	18 92       	mov	r2,r12
800075ec:	40 c9       	lddsp	r9,sp[0x30]
800075ee:	58 19       	cp.w	r9,1
800075f0:	e0 89 00 14 	brgt	80007618 <_dtoa_r+0x87c>
800075f4:	40 38       	lddsp	r8,sp[0xc]
800075f6:	58 08       	cp.w	r8,0
800075f8:	c1 01       	brne	80007618 <_dtoa_r+0x87c>
800075fa:	40 29       	lddsp	r9,sp[0x8]
800075fc:	f1 d9 c0 14 	bfextu	r8,r9,0x0,0x14
80007600:	c0 c1       	brne	80007618 <_dtoa_r+0x87c>
80007602:	12 98       	mov	r8,r9
80007604:	e6 18 7f f0 	andh	r8,0x7ff0,COH
80007608:	c0 80       	breq	80007618 <_dtoa_r+0x87c>
8000760a:	40 4c       	lddsp	r12,sp[0x10]
8000760c:	30 1b       	mov	r11,1
8000760e:	2f fc       	sub	r12,-1
80007610:	2f f0       	sub	r0,-1
80007612:	50 4c       	stdsp	sp[0x10],r12
80007614:	50 6b       	stdsp	sp[0x18],r11
80007616:	c0 38       	rjmp	8000761c <_dtoa_r+0x880>
80007618:	30 0a       	mov	r10,0
8000761a:	50 6a       	stdsp	sp[0x18],r10
8000761c:	41 19       	lddsp	r9,sp[0x44]
8000761e:	58 09       	cp.w	r9,0
80007620:	c0 31       	brne	80007626 <_dtoa_r+0x88a>
80007622:	30 1c       	mov	r12,1
80007624:	c0 98       	rjmp	80007636 <_dtoa_r+0x89a>
80007626:	64 48       	ld.w	r8,r2[0x10]
80007628:	2f c8       	sub	r8,-4
8000762a:	e4 08 03 2c 	ld.w	r12,r2[r8<<0x2]
8000762e:	e0 a0 08 08 	rcall	8000863e <__hi0bits>
80007632:	f8 0c 11 20 	rsub	r12,r12,32
80007636:	40 4b       	lddsp	r11,sp[0x10]
80007638:	f8 0b 00 08 	add	r8,r12,r11
8000763c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80007640:	c0 c0       	breq	80007658 <_dtoa_r+0x8bc>
80007642:	f0 08 11 20 	rsub	r8,r8,32
80007646:	58 48       	cp.w	r8,4
80007648:	e0 8a 00 06 	brle	80007654 <_dtoa_r+0x8b8>
8000764c:	20 48       	sub	r8,4
8000764e:	10 0b       	add	r11,r8
80007650:	50 4b       	stdsp	sp[0x10],r11
80007652:	c0 78       	rjmp	80007660 <_dtoa_r+0x8c4>
80007654:	58 48       	cp.w	r8,4
80007656:	c0 70       	breq	80007664 <_dtoa_r+0x8c8>
80007658:	40 4a       	lddsp	r10,sp[0x10]
8000765a:	2e 48       	sub	r8,-28
8000765c:	10 0a       	add	r10,r8
8000765e:	50 4a       	stdsp	sp[0x10],r10
80007660:	10 00       	add	r0,r8
80007662:	10 05       	add	r5,r8
80007664:	58 00       	cp.w	r0,0
80007666:	e0 8a 00 08 	brle	80007676 <_dtoa_r+0x8da>
8000766a:	06 9b       	mov	r11,r3
8000766c:	00 9a       	mov	r10,r0
8000766e:	0e 9c       	mov	r12,r7
80007670:	e0 a0 09 82 	rcall	80008974 <__lshift>
80007674:	18 93       	mov	r3,r12
80007676:	40 49       	lddsp	r9,sp[0x10]
80007678:	58 09       	cp.w	r9,0
8000767a:	e0 8a 00 08 	brle	8000768a <_dtoa_r+0x8ee>
8000767e:	04 9b       	mov	r11,r2
80007680:	12 9a       	mov	r10,r9
80007682:	0e 9c       	mov	r12,r7
80007684:	e0 a0 09 78 	rcall	80008974 <__lshift>
80007688:	18 92       	mov	r2,r12
8000768a:	41 48       	lddsp	r8,sp[0x50]
8000768c:	58 08       	cp.w	r8,0
8000768e:	c1 b0       	breq	800076c4 <_dtoa_r+0x928>
80007690:	04 9b       	mov	r11,r2
80007692:	06 9c       	mov	r12,r3
80007694:	e0 a0 08 4c 	rcall	8000872c <__mcmp>
80007698:	c1 64       	brge	800076c4 <_dtoa_r+0x928>
8000769a:	06 9b       	mov	r11,r3
8000769c:	30 09       	mov	r9,0
8000769e:	30 aa       	mov	r10,10
800076a0:	0e 9c       	mov	r12,r7
800076a2:	e0 a0 0a 35 	rcall	80008b0c <__multadd>
800076a6:	20 16       	sub	r6,1
800076a8:	18 93       	mov	r3,r12
800076aa:	40 dc       	lddsp	r12,sp[0x34]
800076ac:	58 0c       	cp.w	r12,0
800076ae:	c0 31       	brne	800076b4 <_dtoa_r+0x918>
800076b0:	40 91       	lddsp	r1,sp[0x24]
800076b2:	c0 98       	rjmp	800076c4 <_dtoa_r+0x928>
800076b4:	08 9b       	mov	r11,r4
800076b6:	40 91       	lddsp	r1,sp[0x24]
800076b8:	30 09       	mov	r9,0
800076ba:	30 aa       	mov	r10,10
800076bc:	0e 9c       	mov	r12,r7
800076be:	e0 a0 0a 27 	rcall	80008b0c <__multadd>
800076c2:	18 94       	mov	r4,r12
800076c4:	58 01       	cp.w	r1,0
800076c6:	5f a9       	srle	r9
800076c8:	40 cb       	lddsp	r11,sp[0x30]
800076ca:	58 2b       	cp.w	r11,2
800076cc:	5f 98       	srgt	r8
800076ce:	f3 e8 00 08 	and	r8,r9,r8
800076d2:	c2 50       	breq	8000771c <_dtoa_r+0x980>
800076d4:	58 01       	cp.w	r1,0
800076d6:	c1 11       	brne	800076f8 <_dtoa_r+0x95c>
800076d8:	04 9b       	mov	r11,r2
800076da:	02 99       	mov	r9,r1
800076dc:	30 5a       	mov	r10,5
800076de:	0e 9c       	mov	r12,r7
800076e0:	e0 a0 0a 16 	rcall	80008b0c <__multadd>
800076e4:	18 92       	mov	r2,r12
800076e6:	18 9b       	mov	r11,r12
800076e8:	06 9c       	mov	r12,r3
800076ea:	e0 a0 08 21 	rcall	8000872c <__mcmp>
800076ee:	e0 89 00 0f 	brgt	8000770c <_dtoa_r+0x970>
800076f2:	c0 38       	rjmp	800076f8 <_dtoa_r+0x95c>
800076f4:	30 02       	mov	r2,0
800076f6:	04 94       	mov	r4,r2
800076f8:	40 ea       	lddsp	r10,sp[0x38]
800076fa:	30 09       	mov	r9,0
800076fc:	5c da       	com	r10
800076fe:	40 85       	lddsp	r5,sp[0x20]
80007700:	50 6a       	stdsp	sp[0x18],r10
80007702:	50 49       	stdsp	sp[0x10],r9
80007704:	c0 f9       	rjmp	80007922 <_dtoa_r+0xb86>
80007706:	08 92       	mov	r2,r4
80007708:	40 66       	lddsp	r6,sp[0x18]
8000770a:	04 94       	mov	r4,r2
8000770c:	2f f6       	sub	r6,-1
8000770e:	50 66       	stdsp	sp[0x18],r6
80007710:	33 18       	mov	r8,49
80007712:	40 85       	lddsp	r5,sp[0x20]
80007714:	0a c8       	st.b	r5++,r8
80007716:	30 08       	mov	r8,0
80007718:	50 48       	stdsp	sp[0x10],r8
8000771a:	c0 49       	rjmp	80007922 <_dtoa_r+0xb86>
8000771c:	40 dc       	lddsp	r12,sp[0x34]
8000771e:	58 0c       	cp.w	r12,0
80007720:	e0 80 00 b5 	breq	8000788a <_dtoa_r+0xaee>
80007724:	58 05       	cp.w	r5,0
80007726:	e0 8a 00 08 	brle	80007736 <_dtoa_r+0x99a>
8000772a:	08 9b       	mov	r11,r4
8000772c:	0a 9a       	mov	r10,r5
8000772e:	0e 9c       	mov	r12,r7
80007730:	e0 a0 09 22 	rcall	80008974 <__lshift>
80007734:	18 94       	mov	r4,r12
80007736:	40 6b       	lddsp	r11,sp[0x18]
80007738:	58 0b       	cp.w	r11,0
8000773a:	c0 31       	brne	80007740 <_dtoa_r+0x9a4>
8000773c:	08 9c       	mov	r12,r4
8000773e:	c1 38       	rjmp	80007764 <_dtoa_r+0x9c8>
80007740:	68 1b       	ld.w	r11,r4[0x4]
80007742:	0e 9c       	mov	r12,r7
80007744:	e0 a0 08 28 	rcall	80008794 <_Balloc>
80007748:	68 4a       	ld.w	r10,r4[0x10]
8000774a:	18 95       	mov	r5,r12
8000774c:	e8 cb ff f4 	sub	r11,r4,-12
80007750:	2f ea       	sub	r10,-2
80007752:	2f 4c       	sub	r12,-12
80007754:	a3 6a       	lsl	r10,0x2
80007756:	fe b0 e8 42 	rcall	800047da <memcpy>
8000775a:	0a 9b       	mov	r11,r5
8000775c:	30 1a       	mov	r10,1
8000775e:	0e 9c       	mov	r12,r7
80007760:	e0 a0 09 0a 	rcall	80008974 <__lshift>
80007764:	50 44       	stdsp	sp[0x10],r4
80007766:	40 3a       	lddsp	r10,sp[0xc]
80007768:	30 19       	mov	r9,1
8000776a:	f5 da c0 01 	bfextu	r10,r10,0x0,0x1
8000776e:	18 94       	mov	r4,r12
80007770:	50 da       	stdsp	sp[0x34],r10
80007772:	40 85       	lddsp	r5,sp[0x20]
80007774:	50 99       	stdsp	sp[0x24],r9
80007776:	50 26       	stdsp	sp[0x8],r6
80007778:	50 e1       	stdsp	sp[0x38],r1
8000777a:	04 9b       	mov	r11,r2
8000777c:	06 9c       	mov	r12,r3
8000777e:	fe b0 fa 7f 	rcall	80006c7c <quorem>
80007782:	40 4b       	lddsp	r11,sp[0x10]
80007784:	f8 c0 ff d0 	sub	r0,r12,-48
80007788:	06 9c       	mov	r12,r3
8000778a:	e0 a0 07 d1 	rcall	8000872c <__mcmp>
8000778e:	08 9a       	mov	r10,r4
80007790:	50 6c       	stdsp	sp[0x18],r12
80007792:	04 9b       	mov	r11,r2
80007794:	0e 9c       	mov	r12,r7
80007796:	e0 a0 08 87 	rcall	800088a4 <__mdiff>
8000779a:	18 91       	mov	r1,r12
8000779c:	78 38       	ld.w	r8,r12[0xc]
8000779e:	58 08       	cp.w	r8,0
800077a0:	c0 30       	breq	800077a6 <_dtoa_r+0xa0a>
800077a2:	30 16       	mov	r6,1
800077a4:	c0 68       	rjmp	800077b0 <_dtoa_r+0xa14>
800077a6:	18 9b       	mov	r11,r12
800077a8:	06 9c       	mov	r12,r3
800077aa:	e0 a0 07 c1 	rcall	8000872c <__mcmp>
800077ae:	18 96       	mov	r6,r12
800077b0:	0e 9c       	mov	r12,r7
800077b2:	02 9b       	mov	r11,r1
800077b4:	e0 a0 07 d6 	rcall	80008760 <_Bfree>
800077b8:	40 cc       	lddsp	r12,sp[0x30]
800077ba:	ed ec 10 08 	or	r8,r6,r12
800077be:	c0 d1       	brne	800077d8 <_dtoa_r+0xa3c>
800077c0:	40 db       	lddsp	r11,sp[0x34]
800077c2:	58 0b       	cp.w	r11,0
800077c4:	c0 a1       	brne	800077d8 <_dtoa_r+0xa3c>
800077c6:	40 26       	lddsp	r6,sp[0x8]
800077c8:	e0 40 00 39 	cp.w	r0,57
800077cc:	c3 00       	breq	8000782c <_dtoa_r+0xa90>
800077ce:	40 6a       	lddsp	r10,sp[0x18]
800077d0:	58 0a       	cp.w	r10,0
800077d2:	e0 89 00 24 	brgt	8000781a <_dtoa_r+0xa7e>
800077d6:	c2 f8       	rjmp	80007834 <_dtoa_r+0xa98>
800077d8:	40 69       	lddsp	r9,sp[0x18]
800077da:	58 09       	cp.w	r9,0
800077dc:	c0 85       	brlt	800077ec <_dtoa_r+0xa50>
800077de:	12 98       	mov	r8,r9
800077e0:	40 cc       	lddsp	r12,sp[0x30]
800077e2:	18 48       	or	r8,r12
800077e4:	c1 d1       	brne	8000781e <_dtoa_r+0xa82>
800077e6:	40 db       	lddsp	r11,sp[0x34]
800077e8:	58 0b       	cp.w	r11,0
800077ea:	c1 a1       	brne	8000781e <_dtoa_r+0xa82>
800077ec:	0c 99       	mov	r9,r6
800077ee:	40 26       	lddsp	r6,sp[0x8]
800077f0:	58 09       	cp.w	r9,0
800077f2:	e0 8a 00 21 	brle	80007834 <_dtoa_r+0xa98>
800077f6:	06 9b       	mov	r11,r3
800077f8:	30 1a       	mov	r10,1
800077fa:	0e 9c       	mov	r12,r7
800077fc:	e0 a0 08 bc 	rcall	80008974 <__lshift>
80007800:	04 9b       	mov	r11,r2
80007802:	18 93       	mov	r3,r12
80007804:	e0 a0 07 94 	rcall	8000872c <__mcmp>
80007808:	e0 89 00 06 	brgt	80007814 <_dtoa_r+0xa78>
8000780c:	c1 41       	brne	80007834 <_dtoa_r+0xa98>
8000780e:	ed b0 00 00 	bld	r0,0x0
80007812:	c1 11       	brne	80007834 <_dtoa_r+0xa98>
80007814:	e0 40 00 39 	cp.w	r0,57
80007818:	c0 a0       	breq	8000782c <_dtoa_r+0xa90>
8000781a:	2f f0       	sub	r0,-1
8000781c:	c0 c8       	rjmp	80007834 <_dtoa_r+0xa98>
8000781e:	58 06       	cp.w	r6,0
80007820:	e0 8a 00 0c 	brle	80007838 <_dtoa_r+0xa9c>
80007824:	40 26       	lddsp	r6,sp[0x8]
80007826:	e0 40 00 39 	cp.w	r0,57
8000782a:	c0 41       	brne	80007832 <_dtoa_r+0xa96>
8000782c:	33 98       	mov	r8,57
8000782e:	0a c8       	st.b	r5++,r8
80007830:	c6 78       	rjmp	800078fe <_dtoa_r+0xb62>
80007832:	2f f0       	sub	r0,-1
80007834:	0a c0       	st.b	r5++,r0
80007836:	c7 58       	rjmp	80007920 <_dtoa_r+0xb84>
80007838:	0a c0       	st.b	r5++,r0
8000783a:	40 9a       	lddsp	r10,sp[0x24]
8000783c:	40 e9       	lddsp	r9,sp[0x38]
8000783e:	12 3a       	cp.w	r10,r9
80007840:	c4 30       	breq	800078c6 <_dtoa_r+0xb2a>
80007842:	06 9b       	mov	r11,r3
80007844:	30 09       	mov	r9,0
80007846:	30 aa       	mov	r10,10
80007848:	0e 9c       	mov	r12,r7
8000784a:	e0 a0 09 61 	rcall	80008b0c <__multadd>
8000784e:	40 48       	lddsp	r8,sp[0x10]
80007850:	18 93       	mov	r3,r12
80007852:	08 38       	cp.w	r8,r4
80007854:	c0 91       	brne	80007866 <_dtoa_r+0xaca>
80007856:	10 9b       	mov	r11,r8
80007858:	30 09       	mov	r9,0
8000785a:	30 aa       	mov	r10,10
8000785c:	0e 9c       	mov	r12,r7
8000785e:	e0 a0 09 57 	rcall	80008b0c <__multadd>
80007862:	50 4c       	stdsp	sp[0x10],r12
80007864:	c0 e8       	rjmp	80007880 <_dtoa_r+0xae4>
80007866:	40 4b       	lddsp	r11,sp[0x10]
80007868:	30 09       	mov	r9,0
8000786a:	30 aa       	mov	r10,10
8000786c:	0e 9c       	mov	r12,r7
8000786e:	e0 a0 09 4f 	rcall	80008b0c <__multadd>
80007872:	08 9b       	mov	r11,r4
80007874:	50 4c       	stdsp	sp[0x10],r12
80007876:	30 09       	mov	r9,0
80007878:	30 aa       	mov	r10,10
8000787a:	0e 9c       	mov	r12,r7
8000787c:	e0 a0 09 48 	rcall	80008b0c <__multadd>
80007880:	18 94       	mov	r4,r12
80007882:	40 9c       	lddsp	r12,sp[0x24]
80007884:	2f fc       	sub	r12,-1
80007886:	50 9c       	stdsp	sp[0x24],r12
80007888:	c7 9b       	rjmp	8000777a <_dtoa_r+0x9de>
8000788a:	30 18       	mov	r8,1
8000788c:	06 90       	mov	r0,r3
8000788e:	40 85       	lddsp	r5,sp[0x20]
80007890:	08 93       	mov	r3,r4
80007892:	0c 94       	mov	r4,r6
80007894:	10 96       	mov	r6,r8
80007896:	04 9b       	mov	r11,r2
80007898:	00 9c       	mov	r12,r0
8000789a:	fe b0 f9 f1 	rcall	80006c7c <quorem>
8000789e:	2d 0c       	sub	r12,-48
800078a0:	0a cc       	st.b	r5++,r12
800078a2:	02 36       	cp.w	r6,r1
800078a4:	c0 a4       	brge	800078b8 <_dtoa_r+0xb1c>
800078a6:	00 9b       	mov	r11,r0
800078a8:	30 09       	mov	r9,0
800078aa:	30 aa       	mov	r10,10
800078ac:	0e 9c       	mov	r12,r7
800078ae:	2f f6       	sub	r6,-1
800078b0:	e0 a0 09 2e 	rcall	80008b0c <__multadd>
800078b4:	18 90       	mov	r0,r12
800078b6:	cf 0b       	rjmp	80007896 <_dtoa_r+0xafa>
800078b8:	08 96       	mov	r6,r4
800078ba:	30 0b       	mov	r11,0
800078bc:	06 94       	mov	r4,r3
800078be:	50 4b       	stdsp	sp[0x10],r11
800078c0:	00 93       	mov	r3,r0
800078c2:	18 90       	mov	r0,r12
800078c4:	c0 28       	rjmp	800078c8 <_dtoa_r+0xb2c>
800078c6:	40 26       	lddsp	r6,sp[0x8]
800078c8:	06 9b       	mov	r11,r3
800078ca:	30 1a       	mov	r10,1
800078cc:	0e 9c       	mov	r12,r7
800078ce:	e0 a0 08 53 	rcall	80008974 <__lshift>
800078d2:	04 9b       	mov	r11,r2
800078d4:	18 93       	mov	r3,r12
800078d6:	e0 a0 07 2b 	rcall	8000872c <__mcmp>
800078da:	e0 89 00 12 	brgt	800078fe <_dtoa_r+0xb62>
800078de:	c1 b1       	brne	80007914 <_dtoa_r+0xb78>
800078e0:	e1 d0 c0 01 	bfextu	r0,r0,0x0,0x1
800078e4:	c0 d1       	brne	800078fe <_dtoa_r+0xb62>
800078e6:	c1 78       	rjmp	80007914 <_dtoa_r+0xb78>
800078e8:	40 89       	lddsp	r9,sp[0x20]
800078ea:	12 38       	cp.w	r8,r9
800078ec:	c0 30       	breq	800078f2 <_dtoa_r+0xb56>
800078ee:	10 95       	mov	r5,r8
800078f0:	c0 88       	rjmp	80007900 <_dtoa_r+0xb64>
800078f2:	2f f6       	sub	r6,-1
800078f4:	50 66       	stdsp	sp[0x18],r6
800078f6:	33 18       	mov	r8,49
800078f8:	40 8c       	lddsp	r12,sp[0x20]
800078fa:	b8 88       	st.b	r12[0x0],r8
800078fc:	c1 38       	rjmp	80007922 <_dtoa_r+0xb86>
800078fe:	33 9a       	mov	r10,57
80007900:	0a 98       	mov	r8,r5
80007902:	11 79       	ld.ub	r9,--r8
80007904:	f4 09 18 00 	cp.b	r9,r10
80007908:	cf 00       	breq	800078e8 <_dtoa_r+0xb4c>
8000790a:	2f f9       	sub	r9,-1
8000790c:	b0 89       	st.b	r8[0x0],r9
8000790e:	c0 98       	rjmp	80007920 <_dtoa_r+0xb84>
80007910:	10 95       	mov	r5,r8
80007912:	c0 28       	rjmp	80007916 <_dtoa_r+0xb7a>
80007914:	33 09       	mov	r9,48
80007916:	0a 98       	mov	r8,r5
80007918:	11 7a       	ld.ub	r10,--r8
8000791a:	f2 0a 18 00 	cp.b	r10,r9
8000791e:	cf 90       	breq	80007910 <_dtoa_r+0xb74>
80007920:	50 66       	stdsp	sp[0x18],r6
80007922:	04 9b       	mov	r11,r2
80007924:	0e 9c       	mov	r12,r7
80007926:	e0 a0 07 1d 	rcall	80008760 <_Bfree>
8000792a:	58 04       	cp.w	r4,0
8000792c:	c1 20       	breq	80007950 <_dtoa_r+0xbb4>
8000792e:	40 4b       	lddsp	r11,sp[0x10]
80007930:	08 3b       	cp.w	r11,r4
80007932:	5f 19       	srne	r9
80007934:	58 0b       	cp.w	r11,0
80007936:	5f 18       	srne	r8
80007938:	f3 e8 00 08 	and	r8,r9,r8
8000793c:	c0 40       	breq	80007944 <_dtoa_r+0xba8>
8000793e:	0e 9c       	mov	r12,r7
80007940:	e0 a0 07 10 	rcall	80008760 <_Bfree>
80007944:	08 9b       	mov	r11,r4
80007946:	0e 9c       	mov	r12,r7
80007948:	e0 a0 07 0c 	rcall	80008760 <_Bfree>
8000794c:	c0 28       	rjmp	80007950 <_dtoa_r+0xbb4>
8000794e:	50 66       	stdsp	sp[0x18],r6
80007950:	0e 9c       	mov	r12,r7
80007952:	06 9b       	mov	r11,r3
80007954:	e0 a0 07 06 	rcall	80008760 <_Bfree>
80007958:	30 08       	mov	r8,0
8000795a:	aa 88       	st.b	r5[0x0],r8
8000795c:	40 68       	lddsp	r8,sp[0x18]
8000795e:	41 5a       	lddsp	r10,sp[0x54]
80007960:	2f f8       	sub	r8,-1
80007962:	41 29       	lddsp	r9,sp[0x48]
80007964:	95 08       	st.w	r10[0x0],r8
80007966:	40 8c       	lddsp	r12,sp[0x20]
80007968:	58 09       	cp.w	r9,0
8000796a:	fb f8 10 12 	ld.wne	r8,sp[0x48]
8000796e:	f1 f5 1a 00 	st.wne	r8[0x0],r5
80007972:	2e 6d       	sub	sp,-104
80007974:	d8 32       	popm	r0-r7,pc
80007976:	d7 03       	nop

80007978 <_fflush_r>:
80007978:	d4 21       	pushm	r4-r7,lr
8000797a:	16 97       	mov	r7,r11
8000797c:	18 96       	mov	r6,r12
8000797e:	76 48       	ld.w	r8,r11[0x10]
80007980:	58 08       	cp.w	r8,0
80007982:	c7 f0       	breq	80007a80 <_fflush_r+0x108>
80007984:	58 0c       	cp.w	r12,0
80007986:	c0 50       	breq	80007990 <_fflush_r+0x18>
80007988:	78 68       	ld.w	r8,r12[0x18]
8000798a:	58 08       	cp.w	r8,0
8000798c:	c0 21       	brne	80007990 <_fflush_r+0x18>
8000798e:	cc dc       	rcall	80007b28 <__sinit>
80007990:	fe c8 d2 9c 	sub	r8,pc,-11620
80007994:	10 37       	cp.w	r7,r8
80007996:	c0 31       	brne	8000799c <_fflush_r+0x24>
80007998:	6c 07       	ld.w	r7,r6[0x0]
8000799a:	c0 c8       	rjmp	800079b2 <_fflush_r+0x3a>
8000799c:	fe c8 d2 88 	sub	r8,pc,-11640
800079a0:	10 37       	cp.w	r7,r8
800079a2:	c0 31       	brne	800079a8 <_fflush_r+0x30>
800079a4:	6c 17       	ld.w	r7,r6[0x4]
800079a6:	c0 68       	rjmp	800079b2 <_fflush_r+0x3a>
800079a8:	fe c8 d2 74 	sub	r8,pc,-11660
800079ac:	10 37       	cp.w	r7,r8
800079ae:	ed f7 00 02 	ld.weq	r7,r6[0x8]
800079b2:	8e 6a       	ld.sh	r10,r7[0xc]
800079b4:	14 98       	mov	r8,r10
800079b6:	ed ba 00 03 	bld	r10,0x3
800079ba:	c4 20       	breq	80007a3e <_fflush_r+0xc6>
800079bc:	ab ba       	sbr	r10,0xb
800079be:	ae 6a       	st.h	r7[0xc],r10
800079c0:	6e 18       	ld.w	r8,r7[0x4]
800079c2:	58 08       	cp.w	r8,0
800079c4:	e0 89 00 06 	brgt	800079d0 <_fflush_r+0x58>
800079c8:	6f 08       	ld.w	r8,r7[0x40]
800079ca:	58 08       	cp.w	r8,0
800079cc:	e0 8a 00 5a 	brle	80007a80 <_fflush_r+0x108>
800079d0:	6e b8       	ld.w	r8,r7[0x2c]
800079d2:	58 08       	cp.w	r8,0
800079d4:	c5 60       	breq	80007a80 <_fflush_r+0x108>
800079d6:	e2 1a 10 00 	andl	r10,0x1000,COH
800079da:	c0 30       	breq	800079e0 <_fflush_r+0x68>
800079dc:	6f 55       	ld.w	r5,r7[0x54]
800079de:	c0 f8       	rjmp	800079fc <_fflush_r+0x84>
800079e0:	30 19       	mov	r9,1
800079e2:	6e 8b       	ld.w	r11,r7[0x20]
800079e4:	0c 9c       	mov	r12,r6
800079e6:	5d 18       	icall	r8
800079e8:	18 95       	mov	r5,r12
800079ea:	5b fc       	cp.w	r12,-1
800079ec:	c0 81       	brne	800079fc <_fflush_r+0x84>
800079ee:	6c 38       	ld.w	r8,r6[0xc]
800079f0:	59 d8       	cp.w	r8,29
800079f2:	c4 70       	breq	80007a80 <_fflush_r+0x108>
800079f4:	8e 68       	ld.sh	r8,r7[0xc]
800079f6:	a7 a8       	sbr	r8,0x6
800079f8:	ae 68       	st.h	r7[0xc],r8
800079fa:	d8 22       	popm	r4-r7,pc
800079fc:	8e 68       	ld.sh	r8,r7[0xc]
800079fe:	ed b8 00 02 	bld	r8,0x2
80007a02:	c0 91       	brne	80007a14 <_fflush_r+0x9c>
80007a04:	6e 18       	ld.w	r8,r7[0x4]
80007a06:	10 15       	sub	r5,r8
80007a08:	6e d8       	ld.w	r8,r7[0x34]
80007a0a:	58 08       	cp.w	r8,0
80007a0c:	ef f8 10 10 	ld.wne	r8,r7[0x40]
80007a10:	eb d8 e1 15 	subne	r5,r5,r8
80007a14:	6e b8       	ld.w	r8,r7[0x2c]
80007a16:	0c 9c       	mov	r12,r6
80007a18:	30 09       	mov	r9,0
80007a1a:	0a 9a       	mov	r10,r5
80007a1c:	6e 8b       	ld.w	r11,r7[0x20]
80007a1e:	5d 18       	icall	r8
80007a20:	8e 68       	ld.sh	r8,r7[0xc]
80007a22:	0a 3c       	cp.w	r12,r5
80007a24:	c2 61       	brne	80007a70 <_fflush_r+0xf8>
80007a26:	ab d8       	cbr	r8,0xb
80007a28:	30 0c       	mov	r12,0
80007a2a:	6e 49       	ld.w	r9,r7[0x10]
80007a2c:	ae 68       	st.h	r7[0xc],r8
80007a2e:	8f 1c       	st.w	r7[0x4],r12
80007a30:	8f 09       	st.w	r7[0x0],r9
80007a32:	ed b8 00 0c 	bld	r8,0xc
80007a36:	c2 51       	brne	80007a80 <_fflush_r+0x108>
80007a38:	ef 45 00 54 	st.w	r7[84],r5
80007a3c:	d8 22       	popm	r4-r7,pc
80007a3e:	6e 45       	ld.w	r5,r7[0x10]
80007a40:	58 05       	cp.w	r5,0
80007a42:	c1 f0       	breq	80007a80 <_fflush_r+0x108>
80007a44:	6e 04       	ld.w	r4,r7[0x0]
80007a46:	f5 da c0 02 	bfextu	r10,r10,0x0,0x2
80007a4a:	8f 05       	st.w	r7[0x0],r5
80007a4c:	f9 b8 01 00 	movne	r8,0
80007a50:	ef f8 00 05 	ld.weq	r8,r7[0x14]
80007a54:	0a 14       	sub	r4,r5
80007a56:	8f 28       	st.w	r7[0x8],r8
80007a58:	c1 18       	rjmp	80007a7a <_fflush_r+0x102>
80007a5a:	08 99       	mov	r9,r4
80007a5c:	0a 9a       	mov	r10,r5
80007a5e:	6e a8       	ld.w	r8,r7[0x28]
80007a60:	6e 8b       	ld.w	r11,r7[0x20]
80007a62:	0c 9c       	mov	r12,r6
80007a64:	5d 18       	icall	r8
80007a66:	18 14       	sub	r4,r12
80007a68:	58 0c       	cp.w	r12,0
80007a6a:	e0 89 00 07 	brgt	80007a78 <_fflush_r+0x100>
80007a6e:	8e 68       	ld.sh	r8,r7[0xc]
80007a70:	a7 a8       	sbr	r8,0x6
80007a72:	3f fc       	mov	r12,-1
80007a74:	ae 68       	st.h	r7[0xc],r8
80007a76:	d8 22       	popm	r4-r7,pc
80007a78:	18 05       	add	r5,r12
80007a7a:	58 04       	cp.w	r4,0
80007a7c:	fe 99 ff ef 	brgt	80007a5a <_fflush_r+0xe2>
80007a80:	d8 2a       	popm	r4-r7,pc,r12=0
80007a82:	d7 03       	nop

80007a84 <__sfp_lock_acquire>:
80007a84:	5e fc       	retal	r12

80007a86 <__sfp_lock_release>:
80007a86:	5e fc       	retal	r12

80007a88 <_cleanup_r>:
80007a88:	d4 01       	pushm	lr
80007a8a:	fe cb e8 6a 	sub	r11,pc,-6038
80007a8e:	e0 a0 02 fd 	rcall	80008088 <_fwalk>
80007a92:	d8 02       	popm	pc

80007a94 <__sfmoreglue>:
80007a94:	d4 21       	pushm	r4-r7,lr
80007a96:	16 95       	mov	r5,r11
80007a98:	f6 06 10 5c 	mul	r6,r11,92
80007a9c:	ec cb ff f4 	sub	r11,r6,-12
80007aa0:	e0 a0 03 84 	rcall	800081a8 <_malloc_r>
80007aa4:	18 97       	mov	r7,r12
80007aa6:	c0 90       	breq	80007ab8 <__sfmoreglue+0x24>
80007aa8:	99 15       	st.w	r12[0x4],r5
80007aaa:	30 0b       	mov	r11,0
80007aac:	2f 4c       	sub	r12,-12
80007aae:	0c 9a       	mov	r10,r6
80007ab0:	8f 2c       	st.w	r7[0x8],r12
80007ab2:	8f 0b       	st.w	r7[0x0],r11
80007ab4:	e0 a0 05 bc 	rcall	8000862c <memset>
80007ab8:	0e 9c       	mov	r12,r7
80007aba:	d8 22       	popm	r4-r7,pc

80007abc <__sfp>:
80007abc:	d4 21       	pushm	r4-r7,lr
80007abe:	fe c8 d3 66 	sub	r8,pc,-11418
80007ac2:	18 96       	mov	r6,r12
80007ac4:	70 07       	ld.w	r7,r8[0x0]
80007ac6:	6e 68       	ld.w	r8,r7[0x18]
80007ac8:	58 08       	cp.w	r8,0
80007aca:	c0 31       	brne	80007ad0 <__sfp+0x14>
80007acc:	0e 9c       	mov	r12,r7
80007ace:	c2 dc       	rcall	80007b28 <__sinit>
80007ad0:	ee c7 ff 28 	sub	r7,r7,-216
80007ad4:	30 05       	mov	r5,0
80007ad6:	6e 2c       	ld.w	r12,r7[0x8]
80007ad8:	6e 18       	ld.w	r8,r7[0x4]
80007ada:	c0 68       	rjmp	80007ae6 <__sfp+0x2a>
80007adc:	98 69       	ld.sh	r9,r12[0xc]
80007ade:	ea 09 19 00 	cp.h	r9,r5
80007ae2:	c1 10       	breq	80007b04 <__sfp+0x48>
80007ae4:	2a 4c       	sub	r12,-92
80007ae6:	20 18       	sub	r8,1
80007ae8:	cf a7       	brpl	80007adc <__sfp+0x20>
80007aea:	6e 08       	ld.w	r8,r7[0x0]
80007aec:	58 08       	cp.w	r8,0
80007aee:	c0 61       	brne	80007afa <__sfp+0x3e>
80007af0:	30 4b       	mov	r11,4
80007af2:	0c 9c       	mov	r12,r6
80007af4:	cd 0f       	rcall	80007a94 <__sfmoreglue>
80007af6:	8f 0c       	st.w	r7[0x0],r12
80007af8:	c0 30       	breq	80007afe <__sfp+0x42>
80007afa:	6e 07       	ld.w	r7,r7[0x0]
80007afc:	ce db       	rjmp	80007ad6 <__sfp+0x1a>
80007afe:	30 c8       	mov	r8,12
80007b00:	8d 38       	st.w	r6[0xc],r8
80007b02:	d8 22       	popm	r4-r7,pc
80007b04:	30 08       	mov	r8,0
80007b06:	f9 48 00 4c 	st.w	r12[76],r8
80007b0a:	99 08       	st.w	r12[0x0],r8
80007b0c:	99 28       	st.w	r12[0x8],r8
80007b0e:	99 18       	st.w	r12[0x4],r8
80007b10:	99 48       	st.w	r12[0x10],r8
80007b12:	99 58       	st.w	r12[0x14],r8
80007b14:	99 68       	st.w	r12[0x18],r8
80007b16:	99 d8       	st.w	r12[0x34],r8
80007b18:	99 e8       	st.w	r12[0x38],r8
80007b1a:	f9 48 00 48 	st.w	r12[72],r8
80007b1e:	3f f8       	mov	r8,-1
80007b20:	b8 78       	st.h	r12[0xe],r8
80007b22:	30 18       	mov	r8,1
80007b24:	b8 68       	st.h	r12[0xc],r8
80007b26:	d8 22       	popm	r4-r7,pc

80007b28 <__sinit>:
80007b28:	d4 21       	pushm	r4-r7,lr
80007b2a:	18 96       	mov	r6,r12
80007b2c:	78 67       	ld.w	r7,r12[0x18]
80007b2e:	58 07       	cp.w	r7,0
80007b30:	c4 91       	brne	80007bc2 <__sinit+0x9a>
80007b32:	fe c8 00 aa 	sub	r8,pc,170
80007b36:	30 15       	mov	r5,1
80007b38:	99 a8       	st.w	r12[0x28],r8
80007b3a:	f9 47 00 d8 	st.w	r12[216],r7
80007b3e:	f9 47 00 dc 	st.w	r12[220],r7
80007b42:	f9 47 00 e0 	st.w	r12[224],r7
80007b46:	99 65       	st.w	r12[0x18],r5
80007b48:	cb af       	rcall	80007abc <__sfp>
80007b4a:	8d 0c       	st.w	r6[0x0],r12
80007b4c:	0c 9c       	mov	r12,r6
80007b4e:	cb 7f       	rcall	80007abc <__sfp>
80007b50:	8d 1c       	st.w	r6[0x4],r12
80007b52:	0c 9c       	mov	r12,r6
80007b54:	cb 4f       	rcall	80007abc <__sfp>
80007b56:	6c 09       	ld.w	r9,r6[0x0]
80007b58:	30 48       	mov	r8,4
80007b5a:	93 07       	st.w	r9[0x0],r7
80007b5c:	b2 68       	st.h	r9[0xc],r8
80007b5e:	93 17       	st.w	r9[0x4],r7
80007b60:	93 27       	st.w	r9[0x8],r7
80007b62:	6c 18       	ld.w	r8,r6[0x4]
80007b64:	b2 77       	st.h	r9[0xe],r7
80007b66:	93 47       	st.w	r9[0x10],r7
80007b68:	93 57       	st.w	r9[0x14],r7
80007b6a:	93 67       	st.w	r9[0x18],r7
80007b6c:	93 89       	st.w	r9[0x20],r9
80007b6e:	91 07       	st.w	r8[0x0],r7
80007b70:	91 17       	st.w	r8[0x4],r7
80007b72:	91 27       	st.w	r8[0x8],r7
80007b74:	fe ce eb e4 	sub	lr,pc,-5148
80007b78:	fe cb ec 14 	sub	r11,pc,-5100
80007b7c:	93 9e       	st.w	r9[0x24],lr
80007b7e:	93 ab       	st.w	r9[0x28],r11
80007b80:	fe ca ec 3c 	sub	r10,pc,-5060
80007b84:	fe c4 ec 48 	sub	r4,pc,-5048
80007b88:	93 ba       	st.w	r9[0x2c],r10
80007b8a:	93 c4       	st.w	r9[0x30],r4
80007b8c:	30 99       	mov	r9,9
80007b8e:	b0 69       	st.h	r8[0xc],r9
80007b90:	b0 75       	st.h	r8[0xe],r5
80007b92:	91 c4       	st.w	r8[0x30],r4
80007b94:	91 47       	st.w	r8[0x10],r7
80007b96:	91 57       	st.w	r8[0x14],r7
80007b98:	91 67       	st.w	r8[0x18],r7
80007b9a:	91 88       	st.w	r8[0x20],r8
80007b9c:	91 9e       	st.w	r8[0x24],lr
80007b9e:	91 ab       	st.w	r8[0x28],r11
80007ba0:	91 ba       	st.w	r8[0x2c],r10
80007ba2:	8d 2c       	st.w	r6[0x8],r12
80007ba4:	31 28       	mov	r8,18
80007ba6:	99 07       	st.w	r12[0x0],r7
80007ba8:	b8 68       	st.h	r12[0xc],r8
80007baa:	99 17       	st.w	r12[0x4],r7
80007bac:	99 27       	st.w	r12[0x8],r7
80007bae:	30 28       	mov	r8,2
80007bb0:	b8 78       	st.h	r12[0xe],r8
80007bb2:	99 c4       	st.w	r12[0x30],r4
80007bb4:	99 67       	st.w	r12[0x18],r7
80007bb6:	99 9e       	st.w	r12[0x24],lr
80007bb8:	99 ab       	st.w	r12[0x28],r11
80007bba:	99 ba       	st.w	r12[0x2c],r10
80007bbc:	99 47       	st.w	r12[0x10],r7
80007bbe:	99 57       	st.w	r12[0x14],r7
80007bc0:	99 8c       	st.w	r12[0x20],r12
80007bc2:	d8 22       	popm	r4-r7,pc

80007bc4 <_malloc_trim_r>:
80007bc4:	d4 21       	pushm	r4-r7,lr
80007bc6:	16 95       	mov	r5,r11
80007bc8:	18 97       	mov	r7,r12
80007bca:	e0 a0 05 38 	rcall	8000863a <__malloc_lock>
80007bce:	e0 64 01 10 	mov	r4,272
80007bd2:	68 28       	ld.w	r8,r4[0x8]
80007bd4:	70 16       	ld.w	r6,r8[0x4]
80007bd6:	e0 16 ff fc 	andl	r6,0xfffc
80007bda:	ec c8 ff 91 	sub	r8,r6,-111
80007bde:	f0 05 01 05 	sub	r5,r8,r5
80007be2:	e0 15 ff 80 	andl	r5,0xff80
80007be6:	ea c5 00 80 	sub	r5,r5,128
80007bea:	e0 45 00 7f 	cp.w	r5,127
80007bee:	e0 8a 00 25 	brle	80007c38 <_malloc_trim_r+0x74>
80007bf2:	30 0b       	mov	r11,0
80007bf4:	0e 9c       	mov	r12,r7
80007bf6:	e0 a0 09 93 	rcall	80008f1c <_sbrk_r>
80007bfa:	68 28       	ld.w	r8,r4[0x8]
80007bfc:	0c 08       	add	r8,r6
80007bfe:	10 3c       	cp.w	r12,r8
80007c00:	c1 c1       	brne	80007c38 <_malloc_trim_r+0x74>
80007c02:	ea 0b 11 00 	rsub	r11,r5,0
80007c06:	0e 9c       	mov	r12,r7
80007c08:	e0 a0 09 8a 	rcall	80008f1c <_sbrk_r>
80007c0c:	5b fc       	cp.w	r12,-1
80007c0e:	c1 91       	brne	80007c40 <_malloc_trim_r+0x7c>
80007c10:	30 0b       	mov	r11,0
80007c12:	0e 9c       	mov	r12,r7
80007c14:	e0 a0 09 84 	rcall	80008f1c <_sbrk_r>
80007c18:	68 28       	ld.w	r8,r4[0x8]
80007c1a:	f8 08 01 09 	sub	r9,r12,r8
80007c1e:	58 f9       	cp.w	r9,15
80007c20:	e0 8a 00 0c 	brle	80007c38 <_malloc_trim_r+0x74>
80007c24:	a1 a9       	sbr	r9,0x0
80007c26:	91 19       	st.w	r8[0x4],r9
80007c28:	e0 68 05 1c 	mov	r8,1308
80007c2c:	70 09       	ld.w	r9,r8[0x0]
80007c2e:	e0 68 06 40 	mov	r8,1600
80007c32:	f8 09 01 09 	sub	r9,r12,r9
80007c36:	91 09       	st.w	r8[0x0],r9
80007c38:	0e 9c       	mov	r12,r7
80007c3a:	e0 a0 05 01 	rcall	8000863c <__malloc_unlock>
80007c3e:	d8 2a       	popm	r4-r7,pc,r12=0
80007c40:	68 28       	ld.w	r8,r4[0x8]
80007c42:	0a 16       	sub	r6,r5
80007c44:	a1 a6       	sbr	r6,0x0
80007c46:	91 16       	st.w	r8[0x4],r6
80007c48:	e0 68 06 40 	mov	r8,1600
80007c4c:	70 09       	ld.w	r9,r8[0x0]
80007c4e:	0a 19       	sub	r9,r5
80007c50:	0e 9c       	mov	r12,r7
80007c52:	91 09       	st.w	r8[0x0],r9
80007c54:	e0 a0 04 f4 	rcall	8000863c <__malloc_unlock>
80007c58:	da 2a       	popm	r4-r7,pc,r12=1
80007c5a:	d7 03       	nop

80007c5c <_free_r>:
80007c5c:	d4 21       	pushm	r4-r7,lr
80007c5e:	16 96       	mov	r6,r11
80007c60:	18 97       	mov	r7,r12
80007c62:	58 0b       	cp.w	r11,0
80007c64:	e0 80 00 c0 	breq	80007de4 <_free_r+0x188>
80007c68:	e0 a0 04 e9 	rcall	8000863a <__malloc_lock>
80007c6c:	20 86       	sub	r6,8
80007c6e:	e0 6a 01 10 	mov	r10,272
80007c72:	6c 18       	ld.w	r8,r6[0x4]
80007c74:	74 2e       	ld.w	lr,r10[0x8]
80007c76:	f9 d8 c0 01 	bfextu	r12,r8,0x0,0x1
80007c7a:	a1 c8       	cbr	r8,0x0
80007c7c:	ec 08 00 09 	add	r9,r6,r8
80007c80:	72 1b       	ld.w	r11,r9[0x4]
80007c82:	e0 1b ff fc 	andl	r11,0xfffc
80007c86:	1c 39       	cp.w	r9,lr
80007c88:	c1 e1       	brne	80007cc4 <_free_r+0x68>
80007c8a:	f6 08 00 08 	add	r8,r11,r8
80007c8e:	58 0c       	cp.w	r12,0
80007c90:	c0 81       	brne	80007ca0 <_free_r+0x44>
80007c92:	6c 09       	ld.w	r9,r6[0x0]
80007c94:	12 16       	sub	r6,r9
80007c96:	12 08       	add	r8,r9
80007c98:	6c 3b       	ld.w	r11,r6[0xc]
80007c9a:	6c 29       	ld.w	r9,r6[0x8]
80007c9c:	97 29       	st.w	r11[0x8],r9
80007c9e:	93 3b       	st.w	r9[0xc],r11
80007ca0:	10 99       	mov	r9,r8
80007ca2:	95 26       	st.w	r10[0x8],r6
80007ca4:	a1 a9       	sbr	r9,0x0
80007ca6:	8d 19       	st.w	r6[0x4],r9
80007ca8:	e0 69 05 18 	mov	r9,1304
80007cac:	72 09       	ld.w	r9,r9[0x0]
80007cae:	12 38       	cp.w	r8,r9
80007cb0:	c0 63       	brcs	80007cbc <_free_r+0x60>
80007cb2:	e0 68 06 3c 	mov	r8,1596
80007cb6:	0e 9c       	mov	r12,r7
80007cb8:	70 0b       	ld.w	r11,r8[0x0]
80007cba:	c8 5f       	rcall	80007bc4 <_malloc_trim_r>
80007cbc:	0e 9c       	mov	r12,r7
80007cbe:	e0 a0 04 bf 	rcall	8000863c <__malloc_unlock>
80007cc2:	d8 22       	popm	r4-r7,pc
80007cc4:	93 1b       	st.w	r9[0x4],r11
80007cc6:	58 0c       	cp.w	r12,0
80007cc8:	c0 30       	breq	80007cce <_free_r+0x72>
80007cca:	30 0c       	mov	r12,0
80007ccc:	c1 08       	rjmp	80007cec <_free_r+0x90>
80007cce:	6c 0e       	ld.w	lr,r6[0x0]
80007cd0:	f4 c5 ff f8 	sub	r5,r10,-8
80007cd4:	1c 16       	sub	r6,lr
80007cd6:	1c 08       	add	r8,lr
80007cd8:	6c 2e       	ld.w	lr,r6[0x8]
80007cda:	0a 3e       	cp.w	lr,r5
80007cdc:	f9 bc 00 01 	moveq	r12,1
80007ce0:	ed f5 10 03 	ld.wne	r5,r6[0xc]
80007ce4:	eb fe 1a 02 	st.wne	r5[0x8],lr
80007ce8:	fd f5 1a 03 	st.wne	lr[0xc],r5
80007cec:	f2 0b 00 0e 	add	lr,r9,r11
80007cf0:	7c 1e       	ld.w	lr,lr[0x4]
80007cf2:	ed be 00 00 	bld	lr,0x0
80007cf6:	c1 40       	breq	80007d1e <_free_r+0xc2>
80007cf8:	16 08       	add	r8,r11
80007cfa:	58 0c       	cp.w	r12,0
80007cfc:	c0 d1       	brne	80007d16 <_free_r+0xba>
80007cfe:	e0 6e 01 10 	mov	lr,272
80007d02:	72 2b       	ld.w	r11,r9[0x8]
80007d04:	2f 8e       	sub	lr,-8
80007d06:	1c 3b       	cp.w	r11,lr
80007d08:	c0 71       	brne	80007d16 <_free_r+0xba>
80007d0a:	97 36       	st.w	r11[0xc],r6
80007d0c:	97 26       	st.w	r11[0x8],r6
80007d0e:	8d 2b       	st.w	r6[0x8],r11
80007d10:	8d 3b       	st.w	r6[0xc],r11
80007d12:	30 1c       	mov	r12,1
80007d14:	c0 58       	rjmp	80007d1e <_free_r+0xc2>
80007d16:	72 2b       	ld.w	r11,r9[0x8]
80007d18:	72 39       	ld.w	r9,r9[0xc]
80007d1a:	93 2b       	st.w	r9[0x8],r11
80007d1c:	97 39       	st.w	r11[0xc],r9
80007d1e:	10 99       	mov	r9,r8
80007d20:	ec 08 09 08 	st.w	r6[r8],r8
80007d24:	a1 a9       	sbr	r9,0x0
80007d26:	8d 19       	st.w	r6[0x4],r9
80007d28:	58 0c       	cp.w	r12,0
80007d2a:	c5 a1       	brne	80007dde <_free_r+0x182>
80007d2c:	e0 48 01 ff 	cp.w	r8,511
80007d30:	e0 8b 00 13 	brhi	80007d56 <_free_r+0xfa>
80007d34:	a3 98       	lsr	r8,0x3
80007d36:	f4 08 00 39 	add	r9,r10,r8<<0x3
80007d3a:	72 2b       	ld.w	r11,r9[0x8]
80007d3c:	8d 39       	st.w	r6[0xc],r9
80007d3e:	8d 2b       	st.w	r6[0x8],r11
80007d40:	97 36       	st.w	r11[0xc],r6
80007d42:	93 26       	st.w	r9[0x8],r6
80007d44:	a3 48       	asr	r8,0x2
80007d46:	74 19       	ld.w	r9,r10[0x4]
80007d48:	30 1b       	mov	r11,1
80007d4a:	f6 08 09 48 	lsl	r8,r11,r8
80007d4e:	f3 e8 10 08 	or	r8,r9,r8
80007d52:	95 18       	st.w	r10[0x4],r8
80007d54:	c4 58       	rjmp	80007dde <_free_r+0x182>
80007d56:	f0 0b 16 09 	lsr	r11,r8,0x9
80007d5a:	58 4b       	cp.w	r11,4
80007d5c:	e0 8b 00 06 	brhi	80007d68 <_free_r+0x10c>
80007d60:	f0 0b 16 06 	lsr	r11,r8,0x6
80007d64:	2c 8b       	sub	r11,-56
80007d66:	c2 08       	rjmp	80007da6 <_free_r+0x14a>
80007d68:	59 4b       	cp.w	r11,20
80007d6a:	e0 8b 00 04 	brhi	80007d72 <_free_r+0x116>
80007d6e:	2a 5b       	sub	r11,-91
80007d70:	c1 b8       	rjmp	80007da6 <_free_r+0x14a>
80007d72:	e0 4b 00 54 	cp.w	r11,84
80007d76:	e0 8b 00 06 	brhi	80007d82 <_free_r+0x126>
80007d7a:	f0 0b 16 0c 	lsr	r11,r8,0xc
80007d7e:	29 2b       	sub	r11,-110
80007d80:	c1 38       	rjmp	80007da6 <_free_r+0x14a>
80007d82:	e0 4b 01 54 	cp.w	r11,340
80007d86:	e0 8b 00 06 	brhi	80007d92 <_free_r+0x136>
80007d8a:	f0 0b 16 0f 	lsr	r11,r8,0xf
80007d8e:	28 9b       	sub	r11,-119
80007d90:	c0 b8       	rjmp	80007da6 <_free_r+0x14a>
80007d92:	e0 4b 05 54 	cp.w	r11,1364
80007d96:	e0 88 00 05 	brls	80007da0 <_free_r+0x144>
80007d9a:	37 eb       	mov	r11,126
80007d9c:	c0 58       	rjmp	80007da6 <_free_r+0x14a>
80007d9e:	d7 03       	nop
80007da0:	f0 0b 16 12 	lsr	r11,r8,0x12
80007da4:	28 4b       	sub	r11,-124
80007da6:	f4 0b 00 3c 	add	r12,r10,r11<<0x3
80007daa:	78 29       	ld.w	r9,r12[0x8]
80007dac:	18 39       	cp.w	r9,r12
80007dae:	c0 e1       	brne	80007dca <_free_r+0x16e>
80007db0:	74 18       	ld.w	r8,r10[0x4]
80007db2:	a3 4b       	asr	r11,0x2
80007db4:	30 1c       	mov	r12,1
80007db6:	f8 0b 09 4b 	lsl	r11,r12,r11
80007dba:	f1 eb 10 0b 	or	r11,r8,r11
80007dbe:	12 98       	mov	r8,r9
80007dc0:	95 1b       	st.w	r10[0x4],r11
80007dc2:	c0 a8       	rjmp	80007dd6 <_free_r+0x17a>
80007dc4:	72 29       	ld.w	r9,r9[0x8]
80007dc6:	18 39       	cp.w	r9,r12
80007dc8:	c0 60       	breq	80007dd4 <_free_r+0x178>
80007dca:	72 1a       	ld.w	r10,r9[0x4]
80007dcc:	e0 1a ff fc 	andl	r10,0xfffc
80007dd0:	14 38       	cp.w	r8,r10
80007dd2:	cf 93       	brcs	80007dc4 <_free_r+0x168>
80007dd4:	72 38       	ld.w	r8,r9[0xc]
80007dd6:	8d 38       	st.w	r6[0xc],r8
80007dd8:	8d 29       	st.w	r6[0x8],r9
80007dda:	93 36       	st.w	r9[0xc],r6
80007ddc:	91 26       	st.w	r8[0x8],r6
80007dde:	0e 9c       	mov	r12,r7
80007de0:	e0 a0 04 2e 	rcall	8000863c <__malloc_unlock>
80007de4:	d8 22       	popm	r4-r7,pc
80007de6:	d7 03       	nop

80007de8 <__sfvwrite_r>:
80007de8:	d4 31       	pushm	r0-r7,lr
80007dea:	20 3d       	sub	sp,12
80007dec:	14 94       	mov	r4,r10
80007dee:	18 95       	mov	r5,r12
80007df0:	16 97       	mov	r7,r11
80007df2:	74 28       	ld.w	r8,r10[0x8]
80007df4:	58 08       	cp.w	r8,0
80007df6:	e0 80 01 45 	breq	80008080 <__sfvwrite_r+0x298>
80007dfa:	96 68       	ld.sh	r8,r11[0xc]
80007dfc:	ed b8 00 03 	bld	r8,0x3
80007e00:	c0 41       	brne	80007e08 <__sfvwrite_r+0x20>
80007e02:	76 48       	ld.w	r8,r11[0x10]
80007e04:	58 08       	cp.w	r8,0
80007e06:	c0 c1       	brne	80007e1e <__sfvwrite_r+0x36>
80007e08:	0e 9b       	mov	r11,r7
80007e0a:	0a 9c       	mov	r12,r5
80007e0c:	fe b0 f6 ca 	rcall	80006ba0 <__swsetup_r>
80007e10:	c0 70       	breq	80007e1e <__sfvwrite_r+0x36>
80007e12:	8e 68       	ld.sh	r8,r7[0xc]
80007e14:	a7 a8       	sbr	r8,0x6
80007e16:	ae 68       	st.h	r7[0xc],r8
80007e18:	30 98       	mov	r8,9
80007e1a:	8b 38       	st.w	r5[0xc],r8
80007e1c:	c3 09       	rjmp	8000807c <__sfvwrite_r+0x294>
80007e1e:	8e 63       	ld.sh	r3,r7[0xc]
80007e20:	68 00       	ld.w	r0,r4[0x0]
80007e22:	06 96       	mov	r6,r3
80007e24:	e2 16 00 02 	andl	r6,0x2,COH
80007e28:	c2 10       	breq	80007e6a <__sfvwrite_r+0x82>
80007e2a:	30 03       	mov	r3,0
80007e2c:	e0 62 04 00 	mov	r2,1024
80007e30:	06 96       	mov	r6,r3
80007e32:	c0 48       	rjmp	80007e3a <__sfvwrite_r+0x52>
80007e34:	60 03       	ld.w	r3,r0[0x0]
80007e36:	60 16       	ld.w	r6,r0[0x4]
80007e38:	2f 80       	sub	r0,-8
80007e3a:	58 06       	cp.w	r6,0
80007e3c:	cf c0       	breq	80007e34 <__sfvwrite_r+0x4c>
80007e3e:	e0 46 04 00 	cp.w	r6,1024
80007e42:	ec 09 17 80 	movls	r9,r6
80007e46:	e4 09 17 b0 	movhi	r9,r2
80007e4a:	06 9a       	mov	r10,r3
80007e4c:	6e a8       	ld.w	r8,r7[0x28]
80007e4e:	6e 8b       	ld.w	r11,r7[0x20]
80007e50:	0a 9c       	mov	r12,r5
80007e52:	5d 18       	icall	r8
80007e54:	18 16       	sub	r6,r12
80007e56:	58 0c       	cp.w	r12,0
80007e58:	e0 8a 01 0f 	brle	80008076 <__sfvwrite_r+0x28e>
80007e5c:	68 28       	ld.w	r8,r4[0x8]
80007e5e:	18 18       	sub	r8,r12
80007e60:	89 28       	st.w	r4[0x8],r8
80007e62:	e0 80 01 0f 	breq	80008080 <__sfvwrite_r+0x298>
80007e66:	18 03       	add	r3,r12
80007e68:	ce 9b       	rjmp	80007e3a <__sfvwrite_r+0x52>
80007e6a:	e7 d3 c0 01 	bfextu	r3,r3,0x0,0x1
80007e6e:	c0 70       	breq	80007e7c <__sfvwrite_r+0x94>
80007e70:	50 06       	stdsp	sp[0x0],r6
80007e72:	0c 93       	mov	r3,r6
80007e74:	0c 91       	mov	r1,r6
80007e76:	50 15       	stdsp	sp[0x4],r5
80007e78:	08 92       	mov	r2,r4
80007e7a:	c9 e8       	rjmp	80007fb6 <__sfvwrite_r+0x1ce>
80007e7c:	06 96       	mov	r6,r3
80007e7e:	08 91       	mov	r1,r4
80007e80:	c0 48       	rjmp	80007e88 <__sfvwrite_r+0xa0>
80007e82:	60 03       	ld.w	r3,r0[0x0]
80007e84:	60 16       	ld.w	r6,r0[0x4]
80007e86:	2f 80       	sub	r0,-8
80007e88:	58 06       	cp.w	r6,0
80007e8a:	cf c0       	breq	80007e82 <__sfvwrite_r+0x9a>
80007e8c:	8e 68       	ld.sh	r8,r7[0xc]
80007e8e:	6e 24       	ld.w	r4,r7[0x8]
80007e90:	10 99       	mov	r9,r8
80007e92:	e2 19 02 00 	andl	r9,0x200,COH
80007e96:	c5 50       	breq	80007f40 <__sfvwrite_r+0x158>
80007e98:	08 36       	cp.w	r6,r4
80007e9a:	c4 33       	brcs	80007f20 <__sfvwrite_r+0x138>
80007e9c:	10 99       	mov	r9,r8
80007e9e:	e2 19 04 80 	andl	r9,0x480,COH
80007ea2:	c3 f0       	breq	80007f20 <__sfvwrite_r+0x138>
80007ea4:	6e 4b       	ld.w	r11,r7[0x10]
80007ea6:	6e 09       	ld.w	r9,r7[0x0]
80007ea8:	16 19       	sub	r9,r11
80007eaa:	50 09       	stdsp	sp[0x0],r9
80007eac:	6e 59       	ld.w	r9,r7[0x14]
80007eae:	10 9c       	mov	r12,r8
80007eb0:	f2 09 00 1a 	add	r10,r9,r9<<0x1
80007eb4:	30 28       	mov	r8,2
80007eb6:	f4 08 0c 08 	divs	r8,r10,r8
80007eba:	fa e9 00 04 	st.d	sp[4],r8
80007ebe:	10 94       	mov	r4,r8
80007ec0:	40 09       	lddsp	r9,sp[0x0]
80007ec2:	e2 1c 04 00 	andl	r12,0x400,COH
80007ec6:	2f f9       	sub	r9,-1
80007ec8:	0c 09       	add	r9,r6
80007eca:	12 38       	cp.w	r8,r9
80007ecc:	f2 04 17 30 	movlo	r4,r9
80007ed0:	58 0c       	cp.w	r12,0
80007ed2:	c1 00       	breq	80007ef2 <__sfvwrite_r+0x10a>
80007ed4:	08 9b       	mov	r11,r4
80007ed6:	0a 9c       	mov	r12,r5
80007ed8:	c6 8d       	rcall	800081a8 <_malloc_r>
80007eda:	18 92       	mov	r2,r12
80007edc:	c1 40       	breq	80007f04 <__sfvwrite_r+0x11c>
80007ede:	40 0a       	lddsp	r10,sp[0x0]
80007ee0:	6e 4b       	ld.w	r11,r7[0x10]
80007ee2:	fe b0 e4 7c 	rcall	800047da <memcpy>
80007ee6:	8e 68       	ld.sh	r8,r7[0xc]
80007ee8:	e0 18 fb 7f 	andl	r8,0xfb7f
80007eec:	a7 b8       	sbr	r8,0x7
80007eee:	ae 68       	st.h	r7[0xc],r8
80007ef0:	c0 d8       	rjmp	80007f0a <__sfvwrite_r+0x122>
80007ef2:	08 9a       	mov	r10,r4
80007ef4:	0a 9c       	mov	r12,r5
80007ef6:	e0 a0 06 8f 	rcall	80008c14 <_realloc_r>
80007efa:	18 92       	mov	r2,r12
80007efc:	c0 71       	brne	80007f0a <__sfvwrite_r+0x122>
80007efe:	6e 4b       	ld.w	r11,r7[0x10]
80007f00:	0a 9c       	mov	r12,r5
80007f02:	ca de       	rcall	80007c5c <_free_r>
80007f04:	30 c8       	mov	r8,12
80007f06:	8b 38       	st.w	r5[0xc],r8
80007f08:	cb 78       	rjmp	80008076 <__sfvwrite_r+0x28e>
80007f0a:	40 0a       	lddsp	r10,sp[0x0]
80007f0c:	40 09       	lddsp	r9,sp[0x0]
80007f0e:	e8 0a 01 0a 	sub	r10,r4,r10
80007f12:	e4 09 00 08 	add	r8,r2,r9
80007f16:	8f 54       	st.w	r7[0x14],r4
80007f18:	8f 2a       	st.w	r7[0x8],r10
80007f1a:	8f 08       	st.w	r7[0x0],r8
80007f1c:	8f 42       	st.w	r7[0x10],r2
80007f1e:	0c 94       	mov	r4,r6
80007f20:	08 36       	cp.w	r6,r4
80007f22:	ec 04 17 30 	movlo	r4,r6
80007f26:	06 9b       	mov	r11,r3
80007f28:	08 9a       	mov	r10,r4
80007f2a:	6e 0c       	ld.w	r12,r7[0x0]
80007f2c:	e0 a0 03 61 	rcall	800085ee <memmove>
80007f30:	6e 08       	ld.w	r8,r7[0x0]
80007f32:	08 08       	add	r8,r4
80007f34:	8f 08       	st.w	r7[0x0],r8
80007f36:	6e 28       	ld.w	r8,r7[0x8]
80007f38:	08 18       	sub	r8,r4
80007f3a:	0c 94       	mov	r4,r6
80007f3c:	8f 28       	st.w	r7[0x8],r8
80007f3e:	c3 08       	rjmp	80007f9e <__sfvwrite_r+0x1b6>
80007f40:	08 36       	cp.w	r6,r4
80007f42:	5f ba       	srhi	r10
80007f44:	6e 0c       	ld.w	r12,r7[0x0]
80007f46:	6e 48       	ld.w	r8,r7[0x10]
80007f48:	10 3c       	cp.w	r12,r8
80007f4a:	5f b8       	srhi	r8
80007f4c:	f5 e8 00 08 	and	r8,r10,r8
80007f50:	f2 08 18 00 	cp.b	r8,r9
80007f54:	c0 e0       	breq	80007f70 <__sfvwrite_r+0x188>
80007f56:	06 9b       	mov	r11,r3
80007f58:	08 9a       	mov	r10,r4
80007f5a:	e0 a0 03 4a 	rcall	800085ee <memmove>
80007f5e:	6e 08       	ld.w	r8,r7[0x0]
80007f60:	08 08       	add	r8,r4
80007f62:	0e 9b       	mov	r11,r7
80007f64:	8f 08       	st.w	r7[0x0],r8
80007f66:	0a 9c       	mov	r12,r5
80007f68:	fe b0 fd 08 	rcall	80007978 <_fflush_r>
80007f6c:	c1 90       	breq	80007f9e <__sfvwrite_r+0x1b6>
80007f6e:	c8 48       	rjmp	80008076 <__sfvwrite_r+0x28e>
80007f70:	6e 59       	ld.w	r9,r7[0x14]
80007f72:	12 36       	cp.w	r6,r9
80007f74:	c0 a3       	brcs	80007f88 <__sfvwrite_r+0x1a0>
80007f76:	6e a8       	ld.w	r8,r7[0x28]
80007f78:	06 9a       	mov	r10,r3
80007f7a:	6e 8b       	ld.w	r11,r7[0x20]
80007f7c:	0a 9c       	mov	r12,r5
80007f7e:	5d 18       	icall	r8
80007f80:	18 94       	mov	r4,r12
80007f82:	e0 89 00 0e 	brgt	80007f9e <__sfvwrite_r+0x1b6>
80007f86:	c7 88       	rjmp	80008076 <__sfvwrite_r+0x28e>
80007f88:	0c 9a       	mov	r10,r6
80007f8a:	06 9b       	mov	r11,r3
80007f8c:	e0 a0 03 31 	rcall	800085ee <memmove>
80007f90:	6e 08       	ld.w	r8,r7[0x0]
80007f92:	0c 08       	add	r8,r6
80007f94:	0c 94       	mov	r4,r6
80007f96:	8f 08       	st.w	r7[0x0],r8
80007f98:	6e 28       	ld.w	r8,r7[0x8]
80007f9a:	0c 18       	sub	r8,r6
80007f9c:	8f 28       	st.w	r7[0x8],r8
80007f9e:	62 28       	ld.w	r8,r1[0x8]
80007fa0:	08 18       	sub	r8,r4
80007fa2:	83 28       	st.w	r1[0x8],r8
80007fa4:	c6 e0       	breq	80008080 <__sfvwrite_r+0x298>
80007fa6:	08 16       	sub	r6,r4
80007fa8:	08 03       	add	r3,r4
80007faa:	c6 fb       	rjmp	80007e88 <__sfvwrite_r+0xa0>
80007fac:	60 03       	ld.w	r3,r0[0x0]
80007fae:	60 11       	ld.w	r1,r0[0x4]
80007fb0:	30 08       	mov	r8,0
80007fb2:	2f 80       	sub	r0,-8
80007fb4:	50 08       	stdsp	sp[0x0],r8
80007fb6:	58 01       	cp.w	r1,0
80007fb8:	cf a0       	breq	80007fac <__sfvwrite_r+0x1c4>
80007fba:	40 0a       	lddsp	r10,sp[0x0]
80007fbc:	58 0a       	cp.w	r10,0
80007fbe:	c1 51       	brne	80007fe8 <__sfvwrite_r+0x200>
80007fc0:	e2 c6 ff ff 	sub	r6,r1,-1
80007fc4:	02 9a       	mov	r10,r1
80007fc6:	30 ab       	mov	r11,10
80007fc8:	06 9c       	mov	r12,r3
80007fca:	e0 a0 03 07 	rcall	800085d8 <memchr>
80007fce:	f8 c8 ff ff 	sub	r8,r12,-1
80007fd2:	58 0c       	cp.w	r12,0
80007fd4:	f1 d3 e1 16 	subne	r6,r8,r3
80007fd8:	f9 b9 01 01 	movne	r9,1
80007fdc:	fb f9 1a 00 	st.wne	sp[0x0],r9
80007fe0:	f9 b8 00 01 	moveq	r8,1
80007fe4:	fb f8 0a 00 	st.weq	sp[0x0],r8
80007fe8:	02 36       	cp.w	r6,r1
80007fea:	ec 04 17 80 	movls	r4,r6
80007fee:	e2 04 17 b0 	movhi	r4,r1
80007ff2:	6e 59       	ld.w	r9,r7[0x14]
80007ff4:	6e 25       	ld.w	r5,r7[0x8]
80007ff6:	f2 05 00 05 	add	r5,r9,r5
80007ffa:	0a 34       	cp.w	r4,r5
80007ffc:	5f 9a       	srgt	r10
80007ffe:	6e 0c       	ld.w	r12,r7[0x0]
80008000:	6e 48       	ld.w	r8,r7[0x10]
80008002:	10 3c       	cp.w	r12,r8
80008004:	5f b8       	srhi	r8
80008006:	f5 e8 00 08 	and	r8,r10,r8
8000800a:	30 0a       	mov	r10,0
8000800c:	f4 08 18 00 	cp.b	r8,r10
80008010:	c0 e0       	breq	8000802c <__sfvwrite_r+0x244>
80008012:	06 9b       	mov	r11,r3
80008014:	0a 9a       	mov	r10,r5
80008016:	e0 a0 02 ec 	rcall	800085ee <memmove>
8000801a:	6e 08       	ld.w	r8,r7[0x0]
8000801c:	0a 08       	add	r8,r5
8000801e:	0e 9b       	mov	r11,r7
80008020:	8f 08       	st.w	r7[0x0],r8
80008022:	40 1c       	lddsp	r12,sp[0x4]
80008024:	fe b0 fc aa 	rcall	80007978 <_fflush_r>
80008028:	c1 80       	breq	80008058 <__sfvwrite_r+0x270>
8000802a:	c2 68       	rjmp	80008076 <__sfvwrite_r+0x28e>
8000802c:	12 34       	cp.w	r4,r9
8000802e:	c0 a5       	brlt	80008042 <__sfvwrite_r+0x25a>
80008030:	6e a8       	ld.w	r8,r7[0x28]
80008032:	06 9a       	mov	r10,r3
80008034:	6e 8b       	ld.w	r11,r7[0x20]
80008036:	40 1c       	lddsp	r12,sp[0x4]
80008038:	5d 18       	icall	r8
8000803a:	18 95       	mov	r5,r12
8000803c:	e0 89 00 0e 	brgt	80008058 <__sfvwrite_r+0x270>
80008040:	c1 b8       	rjmp	80008076 <__sfvwrite_r+0x28e>
80008042:	08 9a       	mov	r10,r4
80008044:	06 9b       	mov	r11,r3
80008046:	e0 a0 02 d4 	rcall	800085ee <memmove>
8000804a:	6e 08       	ld.w	r8,r7[0x0]
8000804c:	08 08       	add	r8,r4
8000804e:	08 95       	mov	r5,r4
80008050:	8f 08       	st.w	r7[0x0],r8
80008052:	6e 28       	ld.w	r8,r7[0x8]
80008054:	08 18       	sub	r8,r4
80008056:	8f 28       	st.w	r7[0x8],r8
80008058:	0a 16       	sub	r6,r5
8000805a:	c0 71       	brne	80008068 <__sfvwrite_r+0x280>
8000805c:	0e 9b       	mov	r11,r7
8000805e:	40 1c       	lddsp	r12,sp[0x4]
80008060:	fe b0 fc 8c 	rcall	80007978 <_fflush_r>
80008064:	c0 91       	brne	80008076 <__sfvwrite_r+0x28e>
80008066:	50 06       	stdsp	sp[0x0],r6
80008068:	64 28       	ld.w	r8,r2[0x8]
8000806a:	0a 18       	sub	r8,r5
8000806c:	85 28       	st.w	r2[0x8],r8
8000806e:	c0 90       	breq	80008080 <__sfvwrite_r+0x298>
80008070:	0a 11       	sub	r1,r5
80008072:	0a 03       	add	r3,r5
80008074:	ca 1b       	rjmp	80007fb6 <__sfvwrite_r+0x1ce>
80008076:	8e 68       	ld.sh	r8,r7[0xc]
80008078:	a7 a8       	sbr	r8,0x6
8000807a:	ae 68       	st.h	r7[0xc],r8
8000807c:	3f fc       	mov	r12,-1
8000807e:	c0 28       	rjmp	80008082 <__sfvwrite_r+0x29a>
80008080:	30 0c       	mov	r12,0
80008082:	2f dd       	sub	sp,-12
80008084:	d8 32       	popm	r0-r7,pc
80008086:	d7 03       	nop

80008088 <_fwalk>:
80008088:	d4 31       	pushm	r0-r7,lr
8000808a:	30 05       	mov	r5,0
8000808c:	16 91       	mov	r1,r11
8000808e:	f8 c7 ff 28 	sub	r7,r12,-216
80008092:	0a 92       	mov	r2,r5
80008094:	fe b0 fc f8 	rcall	80007a84 <__sfp_lock_acquire>
80008098:	3f f3       	mov	r3,-1
8000809a:	c1 68       	rjmp	800080c6 <_fwalk+0x3e>
8000809c:	6e 26       	ld.w	r6,r7[0x8]
8000809e:	6e 14       	ld.w	r4,r7[0x4]
800080a0:	2f 46       	sub	r6,-12
800080a2:	c0 c8       	rjmp	800080ba <_fwalk+0x32>
800080a4:	8c 08       	ld.sh	r8,r6[0x0]
800080a6:	e4 08 19 00 	cp.h	r8,r2
800080aa:	c0 70       	breq	800080b8 <_fwalk+0x30>
800080ac:	8c 18       	ld.sh	r8,r6[0x2]
800080ae:	e6 08 19 00 	cp.h	r8,r3
800080b2:	c0 30       	breq	800080b8 <_fwalk+0x30>
800080b4:	5d 11       	icall	r1
800080b6:	18 45       	or	r5,r12
800080b8:	2a 46       	sub	r6,-92
800080ba:	20 14       	sub	r4,1
800080bc:	ec cc 00 0c 	sub	r12,r6,12
800080c0:	58 04       	cp.w	r4,0
800080c2:	cf 14       	brge	800080a4 <_fwalk+0x1c>
800080c4:	6e 07       	ld.w	r7,r7[0x0]
800080c6:	58 07       	cp.w	r7,0
800080c8:	ce a1       	brne	8000809c <_fwalk+0x14>
800080ca:	fe b0 fc de 	rcall	80007a86 <__sfp_lock_release>
800080ce:	0a 9c       	mov	r12,r5
800080d0:	d8 32       	popm	r0-r7,pc
800080d2:	d7 03       	nop

800080d4 <_localeconv_r>:
800080d4:	fe cc d9 78 	sub	r12,pc,-9864
800080d8:	5e fc       	retal	r12
800080da:	d7 03       	nop

800080dc <__smakebuf_r>:
800080dc:	d4 21       	pushm	r4-r7,lr
800080de:	20 fd       	sub	sp,60
800080e0:	96 68       	ld.sh	r8,r11[0xc]
800080e2:	16 97       	mov	r7,r11
800080e4:	18 96       	mov	r6,r12
800080e6:	e2 18 00 02 	andl	r8,0x2,COH
800080ea:	c3 c1       	brne	80008162 <__smakebuf_r+0x86>
800080ec:	96 7b       	ld.sh	r11,r11[0xe]
800080ee:	f0 0b 19 00 	cp.h	r11,r8
800080f2:	c0 55       	brlt	800080fc <__smakebuf_r+0x20>
800080f4:	1a 9a       	mov	r10,sp
800080f6:	e0 a0 08 9d 	rcall	80009230 <_fstat_r>
800080fa:	c0 f4       	brge	80008118 <__smakebuf_r+0x3c>
800080fc:	8e 65       	ld.sh	r5,r7[0xc]
800080fe:	0a 98       	mov	r8,r5
80008100:	ab b8       	sbr	r8,0xb
80008102:	e2 15 00 80 	andl	r5,0x80,COH
80008106:	ae 68       	st.h	r7[0xc],r8
80008108:	30 04       	mov	r4,0
8000810a:	e0 68 04 00 	mov	r8,1024
8000810e:	f9 b5 01 40 	movne	r5,64
80008112:	f0 05 17 00 	moveq	r5,r8
80008116:	c1 c8       	rjmp	8000814e <__smakebuf_r+0x72>
80008118:	40 18       	lddsp	r8,sp[0x4]
8000811a:	e2 18 f0 00 	andl	r8,0xf000,COH
8000811e:	e0 48 20 00 	cp.w	r8,8192
80008122:	5f 04       	sreq	r4
80008124:	e0 48 80 00 	cp.w	r8,32768
80008128:	c0 e1       	brne	80008144 <__smakebuf_r+0x68>
8000812a:	6e b9       	ld.w	r9,r7[0x2c]
8000812c:	fe c8 f1 e8 	sub	r8,pc,-3608
80008130:	10 39       	cp.w	r9,r8
80008132:	c0 91       	brne	80008144 <__smakebuf_r+0x68>
80008134:	8e 68       	ld.sh	r8,r7[0xc]
80008136:	e0 65 04 00 	mov	r5,1024
8000813a:	ab a8       	sbr	r8,0xa
8000813c:	ef 45 00 50 	st.w	r7[80],r5
80008140:	ae 68       	st.h	r7[0xc],r8
80008142:	c0 68       	rjmp	8000814e <__smakebuf_r+0x72>
80008144:	8e 68       	ld.sh	r8,r7[0xc]
80008146:	e0 65 04 00 	mov	r5,1024
8000814a:	ab b8       	sbr	r8,0xb
8000814c:	ae 68       	st.h	r7[0xc],r8
8000814e:	0a 9b       	mov	r11,r5
80008150:	0c 9c       	mov	r12,r6
80008152:	c2 bc       	rcall	800081a8 <_malloc_r>
80008154:	8e 68       	ld.sh	r8,r7[0xc]
80008156:	c0 d1       	brne	80008170 <__smakebuf_r+0x94>
80008158:	ed b8 00 09 	bld	r8,0x9
8000815c:	c1 b0       	breq	80008192 <__smakebuf_r+0xb6>
8000815e:	a1 b8       	sbr	r8,0x1
80008160:	ae 68       	st.h	r7[0xc],r8
80008162:	ee c8 ff b9 	sub	r8,r7,-71
80008166:	8f 48       	st.w	r7[0x10],r8
80008168:	8f 08       	st.w	r7[0x0],r8
8000816a:	30 18       	mov	r8,1
8000816c:	8f 58       	st.w	r7[0x14],r8
8000816e:	c1 28       	rjmp	80008192 <__smakebuf_r+0xb6>
80008170:	a7 b8       	sbr	r8,0x7
80008172:	8f 4c       	st.w	r7[0x10],r12
80008174:	ae 68       	st.h	r7[0xc],r8
80008176:	8f 55       	st.w	r7[0x14],r5
80008178:	fe c8 06 f0 	sub	r8,pc,1776
8000817c:	8f 0c       	st.w	r7[0x0],r12
8000817e:	8d a8       	st.w	r6[0x28],r8
80008180:	58 04       	cp.w	r4,0
80008182:	c0 80       	breq	80008192 <__smakebuf_r+0xb6>
80008184:	8e 7c       	ld.sh	r12,r7[0xe]
80008186:	e0 a0 07 47 	rcall	80009014 <isatty>
8000818a:	c0 40       	breq	80008192 <__smakebuf_r+0xb6>
8000818c:	8e 68       	ld.sh	r8,r7[0xc]
8000818e:	a1 a8       	sbr	r8,0x0
80008190:	ae 68       	st.h	r7[0xc],r8
80008192:	2f 1d       	sub	sp,-60
80008194:	d8 22       	popm	r4-r7,pc
80008196:	d7 03       	nop

80008198 <malloc>:
80008198:	d4 01       	pushm	lr
8000819a:	e0 68 01 0c 	mov	r8,268
8000819e:	18 9b       	mov	r11,r12
800081a0:	70 0c       	ld.w	r12,r8[0x0]
800081a2:	c0 3c       	rcall	800081a8 <_malloc_r>
800081a4:	d8 02       	popm	pc
800081a6:	d7 03       	nop

800081a8 <_malloc_r>:
800081a8:	d4 31       	pushm	r0-r7,lr
800081aa:	f6 c8 ff f5 	sub	r8,r11,-11
800081ae:	18 95       	mov	r5,r12
800081b0:	10 97       	mov	r7,r8
800081b2:	e0 17 ff f8 	andl	r7,0xfff8
800081b6:	59 68       	cp.w	r8,22
800081b8:	f9 b7 08 10 	movls	r7,16
800081bc:	16 37       	cp.w	r7,r11
800081be:	5f 38       	srlo	r8
800081c0:	f1 e7 13 f8 	or	r8,r8,r7>>0x1f
800081c4:	c0 50       	breq	800081ce <_malloc_r+0x26>
800081c6:	30 c8       	mov	r8,12
800081c8:	99 38       	st.w	r12[0xc],r8
800081ca:	e0 8f 01 f7 	bral	800085b8 <_malloc_r+0x410>
800081ce:	e0 a0 02 36 	rcall	8000863a <__malloc_lock>
800081d2:	e0 47 01 f7 	cp.w	r7,503
800081d6:	e0 8b 00 1d 	brhi	80008210 <_malloc_r+0x68>
800081da:	ee 03 16 03 	lsr	r3,r7,0x3
800081de:	e0 68 01 10 	mov	r8,272
800081e2:	f0 03 00 38 	add	r8,r8,r3<<0x3
800081e6:	70 36       	ld.w	r6,r8[0xc]
800081e8:	10 36       	cp.w	r6,r8
800081ea:	c0 61       	brne	800081f6 <_malloc_r+0x4e>
800081ec:	ec c8 ff f8 	sub	r8,r6,-8
800081f0:	70 36       	ld.w	r6,r8[0xc]
800081f2:	10 36       	cp.w	r6,r8
800081f4:	c0 c0       	breq	8000820c <_malloc_r+0x64>
800081f6:	6c 18       	ld.w	r8,r6[0x4]
800081f8:	e0 18 ff fc 	andl	r8,0xfffc
800081fc:	6c 3a       	ld.w	r10,r6[0xc]
800081fe:	ec 08 00 09 	add	r9,r6,r8
80008202:	0a 9c       	mov	r12,r5
80008204:	6c 28       	ld.w	r8,r6[0x8]
80008206:	95 28       	st.w	r10[0x8],r8
80008208:	91 3a       	st.w	r8[0xc],r10
8000820a:	c4 78       	rjmp	80008298 <_malloc_r+0xf0>
8000820c:	2f e3       	sub	r3,-2
8000820e:	c4 d8       	rjmp	800082a8 <_malloc_r+0x100>
80008210:	ee 03 16 09 	lsr	r3,r7,0x9
80008214:	c0 41       	brne	8000821c <_malloc_r+0x74>
80008216:	ee 03 16 03 	lsr	r3,r7,0x3
8000821a:	c2 68       	rjmp	80008266 <_malloc_r+0xbe>
8000821c:	58 43       	cp.w	r3,4
8000821e:	e0 8b 00 06 	brhi	8000822a <_malloc_r+0x82>
80008222:	ee 03 16 06 	lsr	r3,r7,0x6
80008226:	2c 83       	sub	r3,-56
80008228:	c1 f8       	rjmp	80008266 <_malloc_r+0xbe>
8000822a:	59 43       	cp.w	r3,20
8000822c:	e0 8b 00 04 	brhi	80008234 <_malloc_r+0x8c>
80008230:	2a 53       	sub	r3,-91
80008232:	c1 a8       	rjmp	80008266 <_malloc_r+0xbe>
80008234:	e0 43 00 54 	cp.w	r3,84
80008238:	e0 8b 00 06 	brhi	80008244 <_malloc_r+0x9c>
8000823c:	ee 03 16 0c 	lsr	r3,r7,0xc
80008240:	29 23       	sub	r3,-110
80008242:	c1 28       	rjmp	80008266 <_malloc_r+0xbe>
80008244:	e0 43 01 54 	cp.w	r3,340
80008248:	e0 8b 00 06 	brhi	80008254 <_malloc_r+0xac>
8000824c:	ee 03 16 0f 	lsr	r3,r7,0xf
80008250:	28 93       	sub	r3,-119
80008252:	c0 a8       	rjmp	80008266 <_malloc_r+0xbe>
80008254:	e0 43 05 54 	cp.w	r3,1364
80008258:	e0 88 00 04 	brls	80008260 <_malloc_r+0xb8>
8000825c:	37 e3       	mov	r3,126
8000825e:	c0 48       	rjmp	80008266 <_malloc_r+0xbe>
80008260:	ee 03 16 12 	lsr	r3,r7,0x12
80008264:	28 43       	sub	r3,-124
80008266:	e0 6a 01 10 	mov	r10,272
8000826a:	f4 03 00 3a 	add	r10,r10,r3<<0x3
8000826e:	74 36       	ld.w	r6,r10[0xc]
80008270:	c1 98       	rjmp	800082a2 <_malloc_r+0xfa>
80008272:	6c 19       	ld.w	r9,r6[0x4]
80008274:	e0 19 ff fc 	andl	r9,0xfffc
80008278:	f2 07 01 0b 	sub	r11,r9,r7
8000827c:	58 fb       	cp.w	r11,15
8000827e:	e0 8a 00 04 	brle	80008286 <_malloc_r+0xde>
80008282:	20 13       	sub	r3,1
80008284:	c1 18       	rjmp	800082a6 <_malloc_r+0xfe>
80008286:	6c 38       	ld.w	r8,r6[0xc]
80008288:	58 0b       	cp.w	r11,0
8000828a:	c0 b5       	brlt	800082a0 <_malloc_r+0xf8>
8000828c:	6c 2a       	ld.w	r10,r6[0x8]
8000828e:	ec 09 00 09 	add	r9,r6,r9
80008292:	0a 9c       	mov	r12,r5
80008294:	91 2a       	st.w	r8[0x8],r10
80008296:	95 38       	st.w	r10[0xc],r8
80008298:	72 18       	ld.w	r8,r9[0x4]
8000829a:	a1 a8       	sbr	r8,0x0
8000829c:	93 18       	st.w	r9[0x4],r8
8000829e:	cb c8       	rjmp	80008416 <_malloc_r+0x26e>
800082a0:	10 96       	mov	r6,r8
800082a2:	14 36       	cp.w	r6,r10
800082a4:	ce 71       	brne	80008272 <_malloc_r+0xca>
800082a6:	2f f3       	sub	r3,-1
800082a8:	e0 6a 01 10 	mov	r10,272
800082ac:	f4 cc ff f8 	sub	r12,r10,-8
800082b0:	78 26       	ld.w	r6,r12[0x8]
800082b2:	18 36       	cp.w	r6,r12
800082b4:	c6 c0       	breq	8000838c <_malloc_r+0x1e4>
800082b6:	6c 19       	ld.w	r9,r6[0x4]
800082b8:	e0 19 ff fc 	andl	r9,0xfffc
800082bc:	f2 07 01 08 	sub	r8,r9,r7
800082c0:	58 f8       	cp.w	r8,15
800082c2:	e0 89 00 8f 	brgt	800083e0 <_malloc_r+0x238>
800082c6:	99 3c       	st.w	r12[0xc],r12
800082c8:	99 2c       	st.w	r12[0x8],r12
800082ca:	58 08       	cp.w	r8,0
800082cc:	c0 55       	brlt	800082d6 <_malloc_r+0x12e>
800082ce:	ec 09 00 09 	add	r9,r6,r9
800082d2:	0a 9c       	mov	r12,r5
800082d4:	ce 2b       	rjmp	80008298 <_malloc_r+0xf0>
800082d6:	e0 49 01 ff 	cp.w	r9,511
800082da:	e0 8b 00 13 	brhi	80008300 <_malloc_r+0x158>
800082de:	a3 99       	lsr	r9,0x3
800082e0:	f4 09 00 38 	add	r8,r10,r9<<0x3
800082e4:	70 2b       	ld.w	r11,r8[0x8]
800082e6:	8d 38       	st.w	r6[0xc],r8
800082e8:	8d 2b       	st.w	r6[0x8],r11
800082ea:	97 36       	st.w	r11[0xc],r6
800082ec:	91 26       	st.w	r8[0x8],r6
800082ee:	a3 49       	asr	r9,0x2
800082f0:	74 18       	ld.w	r8,r10[0x4]
800082f2:	30 1b       	mov	r11,1
800082f4:	f6 09 09 49 	lsl	r9,r11,r9
800082f8:	f1 e9 10 09 	or	r9,r8,r9
800082fc:	95 19       	st.w	r10[0x4],r9
800082fe:	c4 78       	rjmp	8000838c <_malloc_r+0x1e4>
80008300:	f2 0a 16 09 	lsr	r10,r9,0x9
80008304:	58 4a       	cp.w	r10,4
80008306:	e0 8b 00 07 	brhi	80008314 <_malloc_r+0x16c>
8000830a:	f2 0a 16 06 	lsr	r10,r9,0x6
8000830e:	2c 8a       	sub	r10,-56
80008310:	c2 08       	rjmp	80008350 <_malloc_r+0x1a8>
80008312:	d7 03       	nop
80008314:	59 4a       	cp.w	r10,20
80008316:	e0 8b 00 04 	brhi	8000831e <_malloc_r+0x176>
8000831a:	2a 5a       	sub	r10,-91
8000831c:	c1 a8       	rjmp	80008350 <_malloc_r+0x1a8>
8000831e:	e0 4a 00 54 	cp.w	r10,84
80008322:	e0 8b 00 06 	brhi	8000832e <_malloc_r+0x186>
80008326:	f2 0a 16 0c 	lsr	r10,r9,0xc
8000832a:	29 2a       	sub	r10,-110
8000832c:	c1 28       	rjmp	80008350 <_malloc_r+0x1a8>
8000832e:	e0 4a 01 54 	cp.w	r10,340
80008332:	e0 8b 00 06 	brhi	8000833e <_malloc_r+0x196>
80008336:	f2 0a 16 0f 	lsr	r10,r9,0xf
8000833a:	28 9a       	sub	r10,-119
8000833c:	c0 a8       	rjmp	80008350 <_malloc_r+0x1a8>
8000833e:	e0 4a 05 54 	cp.w	r10,1364
80008342:	e0 88 00 04 	brls	8000834a <_malloc_r+0x1a2>
80008346:	37 ea       	mov	r10,126
80008348:	c0 48       	rjmp	80008350 <_malloc_r+0x1a8>
8000834a:	f2 0a 16 12 	lsr	r10,r9,0x12
8000834e:	28 4a       	sub	r10,-124
80008350:	e0 6b 01 10 	mov	r11,272
80008354:	f6 0a 00 34 	add	r4,r11,r10<<0x3
80008358:	68 28       	ld.w	r8,r4[0x8]
8000835a:	08 38       	cp.w	r8,r4
8000835c:	c0 e1       	brne	80008378 <_malloc_r+0x1d0>
8000835e:	76 19       	ld.w	r9,r11[0x4]
80008360:	a3 4a       	asr	r10,0x2
80008362:	30 1e       	mov	lr,1
80008364:	fc 0a 09 4a 	lsl	r10,lr,r10
80008368:	f3 ea 10 0a 	or	r10,r9,r10
8000836c:	10 99       	mov	r9,r8
8000836e:	97 1a       	st.w	r11[0x4],r10
80008370:	c0 a8       	rjmp	80008384 <_malloc_r+0x1dc>
80008372:	70 28       	ld.w	r8,r8[0x8]
80008374:	08 38       	cp.w	r8,r4
80008376:	c0 60       	breq	80008382 <_malloc_r+0x1da>
80008378:	70 1a       	ld.w	r10,r8[0x4]
8000837a:	e0 1a ff fc 	andl	r10,0xfffc
8000837e:	14 39       	cp.w	r9,r10
80008380:	cf 93       	brcs	80008372 <_malloc_r+0x1ca>
80008382:	70 39       	ld.w	r9,r8[0xc]
80008384:	8d 39       	st.w	r6[0xc],r9
80008386:	8d 28       	st.w	r6[0x8],r8
80008388:	91 36       	st.w	r8[0xc],r6
8000838a:	93 26       	st.w	r9[0x8],r6
8000838c:	e6 08 14 02 	asr	r8,r3,0x2
80008390:	30 1b       	mov	r11,1
80008392:	e0 64 01 10 	mov	r4,272
80008396:	f6 08 09 4b 	lsl	r11,r11,r8
8000839a:	68 18       	ld.w	r8,r4[0x4]
8000839c:	10 3b       	cp.w	r11,r8
8000839e:	e0 8b 00 69 	brhi	80008470 <_malloc_r+0x2c8>
800083a2:	f7 e8 00 09 	and	r9,r11,r8
800083a6:	c0 b1       	brne	800083bc <_malloc_r+0x214>
800083a8:	e0 13 ff fc 	andl	r3,0xfffc
800083ac:	a1 7b       	lsl	r11,0x1
800083ae:	2f c3       	sub	r3,-4
800083b0:	c0 38       	rjmp	800083b6 <_malloc_r+0x20e>
800083b2:	2f c3       	sub	r3,-4
800083b4:	a1 7b       	lsl	r11,0x1
800083b6:	f7 e8 00 09 	and	r9,r11,r8
800083ba:	cf c0       	breq	800083b2 <_malloc_r+0x20a>
800083bc:	e8 03 00 3e 	add	lr,r4,r3<<0x3
800083c0:	06 92       	mov	r2,r3
800083c2:	1c 91       	mov	r1,lr
800083c4:	62 36       	ld.w	r6,r1[0xc]
800083c6:	c2 d8       	rjmp	80008420 <_malloc_r+0x278>
800083c8:	6c 1a       	ld.w	r10,r6[0x4]
800083ca:	e0 1a ff fc 	andl	r10,0xfffc
800083ce:	f4 07 01 08 	sub	r8,r10,r7
800083d2:	58 f8       	cp.w	r8,15
800083d4:	e0 8a 00 15 	brle	800083fe <_malloc_r+0x256>
800083d8:	6c 3a       	ld.w	r10,r6[0xc]
800083da:	6c 29       	ld.w	r9,r6[0x8]
800083dc:	95 29       	st.w	r10[0x8],r9
800083de:	93 3a       	st.w	r9[0xc],r10
800083e0:	0e 99       	mov	r9,r7
800083e2:	ec 07 00 07 	add	r7,r6,r7
800083e6:	a1 a9       	sbr	r9,0x0
800083e8:	99 37       	st.w	r12[0xc],r7
800083ea:	99 27       	st.w	r12[0x8],r7
800083ec:	8d 19       	st.w	r6[0x4],r9
800083ee:	ee 08 09 08 	st.w	r7[r8],r8
800083f2:	8f 2c       	st.w	r7[0x8],r12
800083f4:	8f 3c       	st.w	r7[0xc],r12
800083f6:	a1 a8       	sbr	r8,0x0
800083f8:	0a 9c       	mov	r12,r5
800083fa:	8f 18       	st.w	r7[0x4],r8
800083fc:	c0 d8       	rjmp	80008416 <_malloc_r+0x26e>
800083fe:	6c 39       	ld.w	r9,r6[0xc]
80008400:	58 08       	cp.w	r8,0
80008402:	c0 e5       	brlt	8000841e <_malloc_r+0x276>
80008404:	ec 0a 00 0a 	add	r10,r6,r10
80008408:	74 18       	ld.w	r8,r10[0x4]
8000840a:	a1 a8       	sbr	r8,0x0
8000840c:	0a 9c       	mov	r12,r5
8000840e:	95 18       	st.w	r10[0x4],r8
80008410:	6c 28       	ld.w	r8,r6[0x8]
80008412:	93 28       	st.w	r9[0x8],r8
80008414:	91 39       	st.w	r8[0xc],r9
80008416:	c1 3d       	rcall	8000863c <__malloc_unlock>
80008418:	ec cc ff f8 	sub	r12,r6,-8
8000841c:	d8 32       	popm	r0-r7,pc
8000841e:	12 96       	mov	r6,r9
80008420:	02 36       	cp.w	r6,r1
80008422:	cd 31       	brne	800083c8 <_malloc_r+0x220>
80008424:	2f f2       	sub	r2,-1
80008426:	f1 d2 c0 02 	bfextu	r8,r2,0x0,0x2
8000842a:	c0 30       	breq	80008430 <_malloc_r+0x288>
8000842c:	2f 81       	sub	r1,-8
8000842e:	cc bb       	rjmp	800083c4 <_malloc_r+0x21c>
80008430:	1c 98       	mov	r8,lr
80008432:	f3 d3 c0 02 	bfextu	r9,r3,0x0,0x2
80008436:	c0 81       	brne	80008446 <_malloc_r+0x29e>
80008438:	68 19       	ld.w	r9,r4[0x4]
8000843a:	f6 08 11 ff 	rsub	r8,r11,-1
8000843e:	f3 e8 00 08 	and	r8,r9,r8
80008442:	89 18       	st.w	r4[0x4],r8
80008444:	c0 78       	rjmp	80008452 <_malloc_r+0x2aa>
80008446:	f0 c9 00 08 	sub	r9,r8,8
8000844a:	20 13       	sub	r3,1
8000844c:	70 08       	ld.w	r8,r8[0x0]
8000844e:	12 38       	cp.w	r8,r9
80008450:	cf 10       	breq	80008432 <_malloc_r+0x28a>
80008452:	a1 7b       	lsl	r11,0x1
80008454:	68 18       	ld.w	r8,r4[0x4]
80008456:	10 3b       	cp.w	r11,r8
80008458:	e0 8b 00 0c 	brhi	80008470 <_malloc_r+0x2c8>
8000845c:	58 0b       	cp.w	r11,0
8000845e:	c0 90       	breq	80008470 <_malloc_r+0x2c8>
80008460:	04 93       	mov	r3,r2
80008462:	c0 38       	rjmp	80008468 <_malloc_r+0x2c0>
80008464:	2f c3       	sub	r3,-4
80008466:	a1 7b       	lsl	r11,0x1
80008468:	f7 e8 00 09 	and	r9,r11,r8
8000846c:	ca 81       	brne	800083bc <_malloc_r+0x214>
8000846e:	cf bb       	rjmp	80008464 <_malloc_r+0x2bc>
80008470:	68 23       	ld.w	r3,r4[0x8]
80008472:	66 12       	ld.w	r2,r3[0x4]
80008474:	e0 12 ff fc 	andl	r2,0xfffc
80008478:	0e 32       	cp.w	r2,r7
8000847a:	5f 39       	srlo	r9
8000847c:	e4 07 01 08 	sub	r8,r2,r7
80008480:	58 f8       	cp.w	r8,15
80008482:	5f aa       	srle	r10
80008484:	f5 e9 10 09 	or	r9,r10,r9
80008488:	e0 80 00 9a 	breq	800085bc <_malloc_r+0x414>
8000848c:	e0 68 06 3c 	mov	r8,1596
80008490:	70 01       	ld.w	r1,r8[0x0]
80008492:	e0 68 05 1c 	mov	r8,1308
80008496:	2f 01       	sub	r1,-16
80008498:	70 08       	ld.w	r8,r8[0x0]
8000849a:	0e 01       	add	r1,r7
8000849c:	5b f8       	cp.w	r8,-1
8000849e:	c0 40       	breq	800084a6 <_malloc_r+0x2fe>
800084a0:	28 11       	sub	r1,-127
800084a2:	e0 11 ff 80 	andl	r1,0xff80
800084a6:	02 9b       	mov	r11,r1
800084a8:	0a 9c       	mov	r12,r5
800084aa:	e0 a0 05 39 	rcall	80008f1c <_sbrk_r>
800084ae:	18 96       	mov	r6,r12
800084b0:	5b fc       	cp.w	r12,-1
800084b2:	c7 50       	breq	8000859c <_malloc_r+0x3f4>
800084b4:	e6 02 00 08 	add	r8,r3,r2
800084b8:	10 3c       	cp.w	r12,r8
800084ba:	c0 32       	brcc	800084c0 <_malloc_r+0x318>
800084bc:	08 33       	cp.w	r3,r4
800084be:	c6 f1       	brne	8000859c <_malloc_r+0x3f4>
800084c0:	e0 6a 06 40 	mov	r10,1600
800084c4:	74 09       	ld.w	r9,r10[0x0]
800084c6:	e2 09 00 09 	add	r9,r1,r9
800084ca:	95 09       	st.w	r10[0x0],r9
800084cc:	10 36       	cp.w	r6,r8
800084ce:	c0 a1       	brne	800084e2 <_malloc_r+0x33a>
800084d0:	f5 d6 c0 07 	bfextu	r10,r6,0x0,0x7
800084d4:	c0 71       	brne	800084e2 <_malloc_r+0x33a>
800084d6:	e2 02 00 02 	add	r2,r1,r2
800084da:	68 28       	ld.w	r8,r4[0x8]
800084dc:	a1 a2       	sbr	r2,0x0
800084de:	91 12       	st.w	r8[0x4],r2
800084e0:	c4 f8       	rjmp	8000857e <_malloc_r+0x3d6>
800084e2:	e0 6a 05 1c 	mov	r10,1308
800084e6:	74 0b       	ld.w	r11,r10[0x0]
800084e8:	5b fb       	cp.w	r11,-1
800084ea:	c0 31       	brne	800084f0 <_malloc_r+0x348>
800084ec:	95 06       	st.w	r10[0x0],r6
800084ee:	c0 78       	rjmp	800084fc <_malloc_r+0x354>
800084f0:	ec 09 00 09 	add	r9,r6,r9
800084f4:	e0 6a 06 40 	mov	r10,1600
800084f8:	10 19       	sub	r9,r8
800084fa:	95 09       	st.w	r10[0x0],r9
800084fc:	f1 d6 c0 03 	bfextu	r8,r6,0x0,0x3
80008500:	f0 09 11 08 	rsub	r9,r8,8
80008504:	58 08       	cp.w	r8,0
80008506:	f2 08 17 10 	movne	r8,r9
8000850a:	ed d8 e1 06 	addne	r6,r6,r8
8000850e:	28 08       	sub	r8,-128
80008510:	ec 01 00 01 	add	r1,r6,r1
80008514:	0a 9c       	mov	r12,r5
80008516:	e3 d1 c0 07 	bfextu	r1,r1,0x0,0x7
8000851a:	f0 01 01 01 	sub	r1,r8,r1
8000851e:	02 9b       	mov	r11,r1
80008520:	e0 a0 04 fe 	rcall	80008f1c <_sbrk_r>
80008524:	e0 68 06 40 	mov	r8,1600
80008528:	5b fc       	cp.w	r12,-1
8000852a:	ec 0c 17 00 	moveq	r12,r6
8000852e:	f9 b1 00 00 	moveq	r1,0
80008532:	70 09       	ld.w	r9,r8[0x0]
80008534:	0c 1c       	sub	r12,r6
80008536:	89 26       	st.w	r4[0x8],r6
80008538:	02 0c       	add	r12,r1
8000853a:	12 01       	add	r1,r9
8000853c:	a1 ac       	sbr	r12,0x0
8000853e:	91 01       	st.w	r8[0x0],r1
80008540:	8d 1c       	st.w	r6[0x4],r12
80008542:	08 33       	cp.w	r3,r4
80008544:	c1 d0       	breq	8000857e <_malloc_r+0x3d6>
80008546:	58 f2       	cp.w	r2,15
80008548:	e0 8b 00 05 	brhi	80008552 <_malloc_r+0x3aa>
8000854c:	30 18       	mov	r8,1
8000854e:	8d 18       	st.w	r6[0x4],r8
80008550:	c2 68       	rjmp	8000859c <_malloc_r+0x3f4>
80008552:	30 59       	mov	r9,5
80008554:	20 c2       	sub	r2,12
80008556:	e0 12 ff f8 	andl	r2,0xfff8
8000855a:	e6 02 00 08 	add	r8,r3,r2
8000855e:	91 29       	st.w	r8[0x8],r9
80008560:	91 19       	st.w	r8[0x4],r9
80008562:	66 18       	ld.w	r8,r3[0x4]
80008564:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80008568:	e5 e8 10 08 	or	r8,r2,r8
8000856c:	87 18       	st.w	r3[0x4],r8
8000856e:	58 f2       	cp.w	r2,15
80008570:	e0 88 00 07 	brls	8000857e <_malloc_r+0x3d6>
80008574:	e6 cb ff f8 	sub	r11,r3,-8
80008578:	0a 9c       	mov	r12,r5
8000857a:	fe b0 fb 71 	rcall	80007c5c <_free_r>
8000857e:	e0 69 06 38 	mov	r9,1592
80008582:	72 0a       	ld.w	r10,r9[0x0]
80008584:	e0 68 06 40 	mov	r8,1600
80008588:	70 08       	ld.w	r8,r8[0x0]
8000858a:	14 38       	cp.w	r8,r10
8000858c:	f3 f8 ba 00 	st.whi	r9[0x0],r8
80008590:	e0 69 06 34 	mov	r9,1588
80008594:	72 0a       	ld.w	r10,r9[0x0]
80008596:	14 38       	cp.w	r8,r10
80008598:	f3 f8 ba 00 	st.whi	r9[0x0],r8
8000859c:	68 28       	ld.w	r8,r4[0x8]
8000859e:	70 18       	ld.w	r8,r8[0x4]
800085a0:	e0 18 ff fc 	andl	r8,0xfffc
800085a4:	0e 38       	cp.w	r8,r7
800085a6:	5f 39       	srlo	r9
800085a8:	0e 18       	sub	r8,r7
800085aa:	58 f8       	cp.w	r8,15
800085ac:	5f aa       	srle	r10
800085ae:	f5 e9 10 09 	or	r9,r10,r9
800085b2:	c0 50       	breq	800085bc <_malloc_r+0x414>
800085b4:	0a 9c       	mov	r12,r5
800085b6:	c4 3c       	rcall	8000863c <__malloc_unlock>
800085b8:	d8 3a       	popm	r0-r7,pc,r12=0
800085ba:	d7 03       	nop
800085bc:	68 26       	ld.w	r6,r4[0x8]
800085be:	a1 a8       	sbr	r8,0x0
800085c0:	0e 99       	mov	r9,r7
800085c2:	a1 a9       	sbr	r9,0x0
800085c4:	8d 19       	st.w	r6[0x4],r9
800085c6:	ec 07 00 07 	add	r7,r6,r7
800085ca:	0a 9c       	mov	r12,r5
800085cc:	89 27       	st.w	r4[0x8],r7
800085ce:	8f 18       	st.w	r7[0x4],r8
800085d0:	c3 6c       	rcall	8000863c <__malloc_unlock>
800085d2:	ec cc ff f8 	sub	r12,r6,-8
800085d6:	d8 32       	popm	r0-r7,pc

800085d8 <memchr>:
800085d8:	f7 db c0 08 	bfextu	r11,r11,0x0,0x8
800085dc:	c0 68       	rjmp	800085e8 <memchr+0x10>
800085de:	20 1a       	sub	r10,1
800085e0:	19 88       	ld.ub	r8,r12[0x0]
800085e2:	16 38       	cp.w	r8,r11
800085e4:	5e 0c       	reteq	r12
800085e6:	2f fc       	sub	r12,-1
800085e8:	58 0a       	cp.w	r10,0
800085ea:	cf a1       	brne	800085de <memchr+0x6>
800085ec:	5e fa       	retal	r10

800085ee <memmove>:
800085ee:	d4 01       	pushm	lr
800085f0:	18 3b       	cp.w	r11,r12
800085f2:	c1 92       	brcc	80008624 <memmove+0x36>
800085f4:	f6 0a 00 09 	add	r9,r11,r10
800085f8:	12 3c       	cp.w	r12,r9
800085fa:	c1 52       	brcc	80008624 <memmove+0x36>
800085fc:	f8 0a 00 0b 	add	r11,r12,r10
80008600:	30 08       	mov	r8,0
80008602:	c0 68       	rjmp	8000860e <memmove+0x20>
80008604:	f2 08 07 0e 	ld.ub	lr,r9[r8]
80008608:	20 1a       	sub	r10,1
8000860a:	f6 08 0b 0e 	st.b	r11[r8],lr
8000860e:	20 18       	sub	r8,1
80008610:	58 0a       	cp.w	r10,0
80008612:	cf 91       	brne	80008604 <memmove+0x16>
80008614:	d8 02       	popm	pc
80008616:	f6 08 07 09 	ld.ub	r9,r11[r8]
8000861a:	20 1a       	sub	r10,1
8000861c:	f8 08 0b 09 	st.b	r12[r8],r9
80008620:	2f f8       	sub	r8,-1
80008622:	c0 28       	rjmp	80008626 <memmove+0x38>
80008624:	30 08       	mov	r8,0
80008626:	58 0a       	cp.w	r10,0
80008628:	cf 71       	brne	80008616 <memmove+0x28>
8000862a:	d8 02       	popm	pc

8000862c <memset>:
8000862c:	18 98       	mov	r8,r12
8000862e:	c0 38       	rjmp	80008634 <memset+0x8>
80008630:	10 cb       	st.b	r8++,r11
80008632:	20 1a       	sub	r10,1
80008634:	58 0a       	cp.w	r10,0
80008636:	cf d1       	brne	80008630 <memset+0x4>
80008638:	5e fc       	retal	r12

8000863a <__malloc_lock>:
8000863a:	5e fc       	retal	r12

8000863c <__malloc_unlock>:
8000863c:	5e fc       	retal	r12

8000863e <__hi0bits>:
8000863e:	18 98       	mov	r8,r12
80008640:	e0 1c 00 00 	andl	r12,0x0
80008644:	f0 09 15 10 	lsl	r9,r8,0x10
80008648:	58 0c       	cp.w	r12,0
8000864a:	f2 08 17 00 	moveq	r8,r9
8000864e:	f9 bc 00 10 	moveq	r12,16
80008652:	f9 bc 01 00 	movne	r12,0
80008656:	10 9a       	mov	r10,r8
80008658:	f0 09 15 08 	lsl	r9,r8,0x8
8000865c:	e6 1a ff 00 	andh	r10,0xff00,COH
80008660:	f7 bc 00 f8 	subeq	r12,-8
80008664:	f2 08 17 00 	moveq	r8,r9
80008668:	10 9a       	mov	r10,r8
8000866a:	f0 09 15 04 	lsl	r9,r8,0x4
8000866e:	e6 1a f0 00 	andh	r10,0xf000,COH
80008672:	f7 bc 00 fc 	subeq	r12,-4
80008676:	f2 08 17 00 	moveq	r8,r9
8000867a:	10 9a       	mov	r10,r8
8000867c:	f0 09 15 02 	lsl	r9,r8,0x2
80008680:	e6 1a c0 00 	andh	r10,0xc000,COH
80008684:	f7 bc 00 fe 	subeq	r12,-2
80008688:	f2 08 17 00 	moveq	r8,r9
8000868c:	58 08       	cp.w	r8,0
8000868e:	5e 5c       	retlt	r12
80008690:	ed b8 00 1e 	bld	r8,0x1e
80008694:	f9 bc 01 20 	movne	r12,32
80008698:	f7 bc 00 ff 	subeq	r12,-1
8000869c:	5e fc       	retal	r12

8000869e <__lo0bits>:
8000869e:	18 99       	mov	r9,r12
800086a0:	78 08       	ld.w	r8,r12[0x0]
800086a2:	f9 d8 c0 03 	bfextu	r12,r8,0x0,0x3
800086a6:	c1 50       	breq	800086d0 <__lo0bits+0x32>
800086a8:	ed b8 00 00 	bld	r8,0x0
800086ac:	c0 21       	brne	800086b0 <__lo0bits+0x12>
800086ae:	5e fd       	retal	0
800086b0:	10 9b       	mov	r11,r8
800086b2:	f0 0a 16 01 	lsr	r10,r8,0x1
800086b6:	e2 1b 00 02 	andl	r11,0x2,COH
800086ba:	a3 88       	lsr	r8,0x2
800086bc:	58 0b       	cp.w	r11,0
800086be:	f3 fa 1a 00 	st.wne	r9[0x0],r10
800086c2:	f9 bc 01 01 	movne	r12,1
800086c6:	f3 f8 0a 00 	st.weq	r9[0x0],r8
800086ca:	f9 bc 00 02 	moveq	r12,2
800086ce:	5e fc       	retal	r12
800086d0:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
800086d4:	f0 0b 16 10 	lsr	r11,r8,0x10
800086d8:	58 0a       	cp.w	r10,0
800086da:	f6 08 17 00 	moveq	r8,r11
800086de:	f9 bc 00 10 	moveq	r12,16
800086e2:	f7 d8 c0 08 	bfextu	r11,r8,0x0,0x8
800086e6:	f0 0a 16 08 	lsr	r10,r8,0x8
800086ea:	58 0b       	cp.w	r11,0
800086ec:	f7 bc 00 f8 	subeq	r12,-8
800086f0:	f4 08 17 00 	moveq	r8,r10
800086f4:	f7 d8 c0 04 	bfextu	r11,r8,0x0,0x4
800086f8:	f0 0a 16 04 	lsr	r10,r8,0x4
800086fc:	58 0b       	cp.w	r11,0
800086fe:	f7 bc 00 fc 	subeq	r12,-4
80008702:	f4 08 17 00 	moveq	r8,r10
80008706:	f7 d8 c0 02 	bfextu	r11,r8,0x0,0x2
8000870a:	f0 0a 16 02 	lsr	r10,r8,0x2
8000870e:	58 0b       	cp.w	r11,0
80008710:	f7 bc 00 fe 	subeq	r12,-2
80008714:	f4 08 17 00 	moveq	r8,r10
80008718:	ed b8 00 00 	bld	r8,0x0
8000871c:	c0 60       	breq	80008728 <__lo0bits+0x8a>
8000871e:	a1 98       	lsr	r8,0x1
80008720:	c0 31       	brne	80008726 <__lo0bits+0x88>
80008722:	32 0c       	mov	r12,32
80008724:	5e fc       	retal	r12
80008726:	2f fc       	sub	r12,-1
80008728:	93 08       	st.w	r9[0x0],r8
8000872a:	5e fc       	retal	r12

8000872c <__mcmp>:
8000872c:	d4 01       	pushm	lr
8000872e:	18 98       	mov	r8,r12
80008730:	76 49       	ld.w	r9,r11[0x10]
80008732:	78 4c       	ld.w	r12,r12[0x10]
80008734:	12 1c       	sub	r12,r9
80008736:	c1 31       	brne	8000875c <__mcmp+0x30>
80008738:	2f b9       	sub	r9,-5
8000873a:	a3 69       	lsl	r9,0x2
8000873c:	12 0b       	add	r11,r9
8000873e:	f0 09 00 09 	add	r9,r8,r9
80008742:	2e c8       	sub	r8,-20
80008744:	13 4e       	ld.w	lr,--r9
80008746:	17 4a       	ld.w	r10,--r11
80008748:	14 3e       	cp.w	lr,r10
8000874a:	c0 60       	breq	80008756 <__mcmp+0x2a>
8000874c:	f9 bc 03 ff 	movlo	r12,-1
80008750:	f9 bc 02 01 	movhs	r12,1
80008754:	d8 02       	popm	pc
80008756:	10 39       	cp.w	r9,r8
80008758:	fe 9b ff f6 	brhi	80008744 <__mcmp+0x18>
8000875c:	d8 02       	popm	pc
8000875e:	d7 03       	nop

80008760 <_Bfree>:
80008760:	d4 21       	pushm	r4-r7,lr
80008762:	18 97       	mov	r7,r12
80008764:	16 95       	mov	r5,r11
80008766:	78 96       	ld.w	r6,r12[0x24]
80008768:	58 06       	cp.w	r6,0
8000876a:	c0 91       	brne	8000877c <_Bfree+0x1c>
8000876c:	31 0c       	mov	r12,16
8000876e:	fe b0 fd 15 	rcall	80008198 <malloc>
80008772:	99 36       	st.w	r12[0xc],r6
80008774:	8f 9c       	st.w	r7[0x24],r12
80008776:	99 16       	st.w	r12[0x4],r6
80008778:	99 26       	st.w	r12[0x8],r6
8000877a:	99 06       	st.w	r12[0x0],r6
8000877c:	58 05       	cp.w	r5,0
8000877e:	c0 90       	breq	80008790 <_Bfree+0x30>
80008780:	6a 19       	ld.w	r9,r5[0x4]
80008782:	6e 98       	ld.w	r8,r7[0x24]
80008784:	70 38       	ld.w	r8,r8[0xc]
80008786:	f0 09 03 2a 	ld.w	r10,r8[r9<<0x2]
8000878a:	8b 0a       	st.w	r5[0x0],r10
8000878c:	f0 09 09 25 	st.w	r8[r9<<0x2],r5
80008790:	d8 22       	popm	r4-r7,pc
80008792:	d7 03       	nop

80008794 <_Balloc>:
80008794:	d4 21       	pushm	r4-r7,lr
80008796:	18 97       	mov	r7,r12
80008798:	16 96       	mov	r6,r11
8000879a:	78 95       	ld.w	r5,r12[0x24]
8000879c:	58 05       	cp.w	r5,0
8000879e:	c0 91       	brne	800087b0 <_Balloc+0x1c>
800087a0:	31 0c       	mov	r12,16
800087a2:	fe b0 fc fb 	rcall	80008198 <malloc>
800087a6:	99 35       	st.w	r12[0xc],r5
800087a8:	8f 9c       	st.w	r7[0x24],r12
800087aa:	99 15       	st.w	r12[0x4],r5
800087ac:	99 25       	st.w	r12[0x8],r5
800087ae:	99 05       	st.w	r12[0x0],r5
800087b0:	6e 95       	ld.w	r5,r7[0x24]
800087b2:	6a 38       	ld.w	r8,r5[0xc]
800087b4:	58 08       	cp.w	r8,0
800087b6:	c0 b1       	brne	800087cc <_Balloc+0x38>
800087b8:	31 0a       	mov	r10,16
800087ba:	30 4b       	mov	r11,4
800087bc:	0e 9c       	mov	r12,r7
800087be:	e0 a0 04 93 	rcall	800090e4 <_calloc_r>
800087c2:	8b 3c       	st.w	r5[0xc],r12
800087c4:	6e 98       	ld.w	r8,r7[0x24]
800087c6:	70 3c       	ld.w	r12,r8[0xc]
800087c8:	58 0c       	cp.w	r12,0
800087ca:	c1 b0       	breq	80008800 <_Balloc+0x6c>
800087cc:	6e 98       	ld.w	r8,r7[0x24]
800087ce:	70 38       	ld.w	r8,r8[0xc]
800087d0:	f0 06 00 28 	add	r8,r8,r6<<0x2
800087d4:	70 0c       	ld.w	r12,r8[0x0]
800087d6:	58 0c       	cp.w	r12,0
800087d8:	c0 40       	breq	800087e0 <_Balloc+0x4c>
800087da:	78 09       	ld.w	r9,r12[0x0]
800087dc:	91 09       	st.w	r8[0x0],r9
800087de:	c0 e8       	rjmp	800087fa <_Balloc+0x66>
800087e0:	0e 9c       	mov	r12,r7
800087e2:	30 17       	mov	r7,1
800087e4:	0e 9b       	mov	r11,r7
800087e6:	ee 06 09 47 	lsl	r7,r7,r6
800087ea:	ee ca ff fb 	sub	r10,r7,-5
800087ee:	a3 6a       	lsl	r10,0x2
800087f0:	e0 a0 04 7a 	rcall	800090e4 <_calloc_r>
800087f4:	c0 60       	breq	80008800 <_Balloc+0x6c>
800087f6:	99 16       	st.w	r12[0x4],r6
800087f8:	99 27       	st.w	r12[0x8],r7
800087fa:	30 08       	mov	r8,0
800087fc:	99 38       	st.w	r12[0xc],r8
800087fe:	99 48       	st.w	r12[0x10],r8
80008800:	d8 22       	popm	r4-r7,pc
80008802:	d7 03       	nop

80008804 <__d2b>:
80008804:	d4 31       	pushm	r0-r7,lr
80008806:	20 2d       	sub	sp,8
80008808:	16 93       	mov	r3,r11
8000880a:	12 96       	mov	r6,r9
8000880c:	10 95       	mov	r5,r8
8000880e:	14 92       	mov	r2,r10
80008810:	30 1b       	mov	r11,1
80008812:	cc 1f       	rcall	80008794 <_Balloc>
80008814:	f3 d3 c0 14 	bfextu	r9,r3,0x0,0x14
80008818:	50 09       	stdsp	sp[0x0],r9
8000881a:	f1 d3 c0 1f 	bfextu	r8,r3,0x0,0x1f
8000881e:	b5 a9       	sbr	r9,0x14
80008820:	f0 01 16 14 	lsr	r1,r8,0x14
80008824:	fb f9 1a 00 	st.wne	sp[0x0],r9
80008828:	18 94       	mov	r4,r12
8000882a:	58 02       	cp.w	r2,0
8000882c:	c1 d0       	breq	80008866 <__d2b+0x62>
8000882e:	fa cc ff f8 	sub	r12,sp,-8
80008832:	18 d2       	st.w	--r12,r2
80008834:	c3 5f       	rcall	8000869e <__lo0bits>
80008836:	40 18       	lddsp	r8,sp[0x4]
80008838:	c0 d0       	breq	80008852 <__d2b+0x4e>
8000883a:	40 09       	lddsp	r9,sp[0x0]
8000883c:	f8 0a 11 20 	rsub	r10,r12,32
80008840:	f2 0a 09 4a 	lsl	r10,r9,r10
80008844:	f5 e8 10 08 	or	r8,r10,r8
80008848:	89 58       	st.w	r4[0x14],r8
8000884a:	f2 0c 0a 49 	lsr	r9,r9,r12
8000884e:	50 09       	stdsp	sp[0x0],r9
80008850:	c0 28       	rjmp	80008854 <__d2b+0x50>
80008852:	89 58       	st.w	r4[0x14],r8
80008854:	40 08       	lddsp	r8,sp[0x0]
80008856:	58 08       	cp.w	r8,0
80008858:	f9 b3 01 02 	movne	r3,2
8000885c:	f9 b3 00 01 	moveq	r3,1
80008860:	89 68       	st.w	r4[0x18],r8
80008862:	89 43       	st.w	r4[0x10],r3
80008864:	c0 88       	rjmp	80008874 <__d2b+0x70>
80008866:	1a 9c       	mov	r12,sp
80008868:	c1 bf       	rcall	8000869e <__lo0bits>
8000886a:	30 13       	mov	r3,1
8000886c:	40 08       	lddsp	r8,sp[0x0]
8000886e:	2e 0c       	sub	r12,-32
80008870:	89 43       	st.w	r4[0x10],r3
80008872:	89 58       	st.w	r4[0x14],r8
80008874:	58 01       	cp.w	r1,0
80008876:	c0 90       	breq	80008888 <__d2b+0x84>
80008878:	e2 c1 04 33 	sub	r1,r1,1075
8000887c:	18 01       	add	r1,r12
8000887e:	8d 01       	st.w	r6[0x0],r1
80008880:	f8 0c 11 35 	rsub	r12,r12,53
80008884:	8b 0c       	st.w	r5[0x0],r12
80008886:	c0 c8       	rjmp	8000889e <__d2b+0x9a>
80008888:	e6 c8 ff fc 	sub	r8,r3,-4
8000888c:	f8 cc 04 32 	sub	r12,r12,1074
80008890:	a5 73       	lsl	r3,0x5
80008892:	8d 0c       	st.w	r6[0x0],r12
80008894:	e8 08 03 2c 	ld.w	r12,r4[r8<<0x2]
80008898:	cd 3e       	rcall	8000863e <__hi0bits>
8000889a:	18 13       	sub	r3,r12
8000889c:	8b 03       	st.w	r5[0x0],r3
8000889e:	08 9c       	mov	r12,r4
800088a0:	2f ed       	sub	sp,-8
800088a2:	d8 32       	popm	r0-r7,pc

800088a4 <__mdiff>:
800088a4:	d4 31       	pushm	r0-r7,lr
800088a6:	74 48       	ld.w	r8,r10[0x10]
800088a8:	76 45       	ld.w	r5,r11[0x10]
800088aa:	16 97       	mov	r7,r11
800088ac:	14 96       	mov	r6,r10
800088ae:	10 15       	sub	r5,r8
800088b0:	c1 31       	brne	800088d6 <__mdiff+0x32>
800088b2:	2f b8       	sub	r8,-5
800088b4:	ee ce ff ec 	sub	lr,r7,-20
800088b8:	a3 68       	lsl	r8,0x2
800088ba:	f4 08 00 0b 	add	r11,r10,r8
800088be:	ee 08 00 08 	add	r8,r7,r8
800088c2:	11 4a       	ld.w	r10,--r8
800088c4:	17 49       	ld.w	r9,--r11
800088c6:	12 3a       	cp.w	r10,r9
800088c8:	c0 30       	breq	800088ce <__mdiff+0x2a>
800088ca:	c0 e2       	brcc	800088e6 <__mdiff+0x42>
800088cc:	c0 78       	rjmp	800088da <__mdiff+0x36>
800088ce:	1c 38       	cp.w	r8,lr
800088d0:	fe 9b ff f9 	brhi	800088c2 <__mdiff+0x1e>
800088d4:	c4 98       	rjmp	80008966 <__mdiff+0xc2>
800088d6:	58 05       	cp.w	r5,0
800088d8:	c0 64       	brge	800088e4 <__mdiff+0x40>
800088da:	0e 98       	mov	r8,r7
800088dc:	30 15       	mov	r5,1
800088de:	0c 97       	mov	r7,r6
800088e0:	10 96       	mov	r6,r8
800088e2:	c0 28       	rjmp	800088e6 <__mdiff+0x42>
800088e4:	30 05       	mov	r5,0
800088e6:	6e 1b       	ld.w	r11,r7[0x4]
800088e8:	c5 6f       	rcall	80008794 <_Balloc>
800088ea:	6e 49       	ld.w	r9,r7[0x10]
800088ec:	6c 44       	ld.w	r4,r6[0x10]
800088ee:	99 35       	st.w	r12[0xc],r5
800088f0:	2f b4       	sub	r4,-5
800088f2:	f2 c5 ff fb 	sub	r5,r9,-5
800088f6:	ec 04 00 24 	add	r4,r6,r4<<0x2
800088fa:	ee 05 00 25 	add	r5,r7,r5<<0x2
800088fe:	2e c6       	sub	r6,-20
80008900:	2e c7       	sub	r7,-20
80008902:	f8 c8 ff ec 	sub	r8,r12,-20
80008906:	30 0a       	mov	r10,0
80008908:	0f 0e       	ld.w	lr,r7++
8000890a:	0d 0b       	ld.w	r11,r6++
8000890c:	fc 02 16 10 	lsr	r2,lr,0x10
80008910:	f6 03 16 10 	lsr	r3,r11,0x10
80008914:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
80008918:	e4 03 01 03 	sub	r3,r2,r3
8000891c:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
80008920:	fc 0b 01 0b 	sub	r11,lr,r11
80008924:	f6 0a 00 0a 	add	r10,r11,r10
80008928:	b0 1a       	st.h	r8[0x2],r10
8000892a:	b1 4a       	asr	r10,0x10
8000892c:	e6 0a 00 0a 	add	r10,r3,r10
80008930:	b0 0a       	st.h	r8[0x0],r10
80008932:	2f c8       	sub	r8,-4
80008934:	b1 4a       	asr	r10,0x10
80008936:	08 36       	cp.w	r6,r4
80008938:	ce 83       	brcs	80008908 <__mdiff+0x64>
8000893a:	c0 d8       	rjmp	80008954 <__mdiff+0xb0>
8000893c:	0f 0b       	ld.w	r11,r7++
8000893e:	f6 0e 16 10 	lsr	lr,r11,0x10
80008942:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
80008946:	16 0a       	add	r10,r11
80008948:	b0 1a       	st.h	r8[0x2],r10
8000894a:	b1 4a       	asr	r10,0x10
8000894c:	1c 0a       	add	r10,lr
8000894e:	b0 0a       	st.h	r8[0x0],r10
80008950:	2f c8       	sub	r8,-4
80008952:	b1 4a       	asr	r10,0x10
80008954:	0a 37       	cp.w	r7,r5
80008956:	cf 33       	brcs	8000893c <__mdiff+0x98>
80008958:	c0 28       	rjmp	8000895c <__mdiff+0xb8>
8000895a:	20 19       	sub	r9,1
8000895c:	11 4a       	ld.w	r10,--r8
8000895e:	58 0a       	cp.w	r10,0
80008960:	cf d0       	breq	8000895a <__mdiff+0xb6>
80008962:	99 49       	st.w	r12[0x10],r9
80008964:	d8 32       	popm	r0-r7,pc
80008966:	30 0b       	mov	r11,0
80008968:	c1 6f       	rcall	80008794 <_Balloc>
8000896a:	30 18       	mov	r8,1
8000896c:	99 48       	st.w	r12[0x10],r8
8000896e:	30 08       	mov	r8,0
80008970:	99 58       	st.w	r12[0x14],r8
80008972:	d8 32       	popm	r0-r7,pc

80008974 <__lshift>:
80008974:	d4 31       	pushm	r0-r7,lr
80008976:	16 97       	mov	r7,r11
80008978:	76 46       	ld.w	r6,r11[0x10]
8000897a:	f4 02 14 05 	asr	r2,r10,0x5
8000897e:	2f f6       	sub	r6,-1
80008980:	14 93       	mov	r3,r10
80008982:	18 94       	mov	r4,r12
80008984:	04 06       	add	r6,r2
80008986:	76 1b       	ld.w	r11,r11[0x4]
80008988:	6e 28       	ld.w	r8,r7[0x8]
8000898a:	c0 38       	rjmp	80008990 <__lshift+0x1c>
8000898c:	2f fb       	sub	r11,-1
8000898e:	a1 78       	lsl	r8,0x1
80008990:	10 36       	cp.w	r6,r8
80008992:	fe 99 ff fd 	brgt	8000898c <__lshift+0x18>
80008996:	08 9c       	mov	r12,r4
80008998:	cf ee       	rcall	80008794 <_Balloc>
8000899a:	30 09       	mov	r9,0
8000899c:	18 95       	mov	r5,r12
8000899e:	f8 c8 ff ec 	sub	r8,r12,-20
800089a2:	12 9a       	mov	r10,r9
800089a4:	c0 38       	rjmp	800089aa <__lshift+0x36>
800089a6:	10 aa       	st.w	r8++,r10
800089a8:	2f f9       	sub	r9,-1
800089aa:	04 39       	cp.w	r9,r2
800089ac:	cf d5       	brlt	800089a6 <__lshift+0x32>
800089ae:	6e 4b       	ld.w	r11,r7[0x10]
800089b0:	e7 d3 c0 05 	bfextu	r3,r3,0x0,0x5
800089b4:	2f bb       	sub	r11,-5
800089b6:	ee c9 ff ec 	sub	r9,r7,-20
800089ba:	ee 0b 00 2b 	add	r11,r7,r11<<0x2
800089be:	58 03       	cp.w	r3,0
800089c0:	c1 30       	breq	800089e6 <__lshift+0x72>
800089c2:	e6 0c 11 20 	rsub	r12,r3,32
800089c6:	30 0a       	mov	r10,0
800089c8:	72 02       	ld.w	r2,r9[0x0]
800089ca:	e4 03 09 42 	lsl	r2,r2,r3
800089ce:	04 4a       	or	r10,r2
800089d0:	10 aa       	st.w	r8++,r10
800089d2:	13 0a       	ld.w	r10,r9++
800089d4:	f4 0c 0a 4a 	lsr	r10,r10,r12
800089d8:	16 39       	cp.w	r9,r11
800089da:	cf 73       	brcs	800089c8 <__lshift+0x54>
800089dc:	91 0a       	st.w	r8[0x0],r10
800089de:	58 0a       	cp.w	r10,0
800089e0:	c0 70       	breq	800089ee <__lshift+0x7a>
800089e2:	2f f6       	sub	r6,-1
800089e4:	c0 58       	rjmp	800089ee <__lshift+0x7a>
800089e6:	13 0a       	ld.w	r10,r9++
800089e8:	10 aa       	st.w	r8++,r10
800089ea:	16 39       	cp.w	r9,r11
800089ec:	cf d3       	brcs	800089e6 <__lshift+0x72>
800089ee:	08 9c       	mov	r12,r4
800089f0:	20 16       	sub	r6,1
800089f2:	0e 9b       	mov	r11,r7
800089f4:	8b 46       	st.w	r5[0x10],r6
800089f6:	cb 5e       	rcall	80008760 <_Bfree>
800089f8:	0a 9c       	mov	r12,r5
800089fa:	d8 32       	popm	r0-r7,pc

800089fc <__multiply>:
800089fc:	d4 31       	pushm	r0-r7,lr
800089fe:	20 2d       	sub	sp,8
80008a00:	76 49       	ld.w	r9,r11[0x10]
80008a02:	74 48       	ld.w	r8,r10[0x10]
80008a04:	16 96       	mov	r6,r11
80008a06:	14 95       	mov	r5,r10
80008a08:	10 39       	cp.w	r9,r8
80008a0a:	ec 08 17 50 	movlt	r8,r6
80008a0e:	ea 06 17 50 	movlt	r6,r5
80008a12:	f0 05 17 50 	movlt	r5,r8
80008a16:	6c 28       	ld.w	r8,r6[0x8]
80008a18:	76 43       	ld.w	r3,r11[0x10]
80008a1a:	74 42       	ld.w	r2,r10[0x10]
80008a1c:	76 1b       	ld.w	r11,r11[0x4]
80008a1e:	e4 03 00 07 	add	r7,r2,r3
80008a22:	10 37       	cp.w	r7,r8
80008a24:	f7 bb 09 ff 	subgt	r11,-1
80008a28:	cb 6e       	rcall	80008794 <_Balloc>
80008a2a:	ee c4 ff fb 	sub	r4,r7,-5
80008a2e:	f8 c9 ff ec 	sub	r9,r12,-20
80008a32:	f8 04 00 24 	add	r4,r12,r4<<0x2
80008a36:	30 0a       	mov	r10,0
80008a38:	12 98       	mov	r8,r9
80008a3a:	c0 28       	rjmp	80008a3e <__multiply+0x42>
80008a3c:	10 aa       	st.w	r8++,r10
80008a3e:	08 38       	cp.w	r8,r4
80008a40:	cf e3       	brcs	80008a3c <__multiply+0x40>
80008a42:	2f b3       	sub	r3,-5
80008a44:	2f b2       	sub	r2,-5
80008a46:	ec 03 00 23 	add	r3,r6,r3<<0x2
80008a4a:	ea 02 00 22 	add	r2,r5,r2<<0x2
80008a4e:	ec cb ff ec 	sub	r11,r6,-20
80008a52:	50 12       	stdsp	sp[0x4],r2
80008a54:	ea ca ff ec 	sub	r10,r5,-20
80008a58:	c4 48       	rjmp	80008ae0 <__multiply+0xe4>
80008a5a:	94 95       	ld.uh	r5,r10[0x2]
80008a5c:	58 05       	cp.w	r5,0
80008a5e:	c2 00       	breq	80008a9e <__multiply+0xa2>
80008a60:	12 98       	mov	r8,r9
80008a62:	16 96       	mov	r6,r11
80008a64:	30 0e       	mov	lr,0
80008a66:	50 09       	stdsp	sp[0x0],r9
80008a68:	0d 02       	ld.w	r2,r6++
80008a6a:	e4 00 16 10 	lsr	r0,r2,0x10
80008a6e:	70 01       	ld.w	r1,r8[0x0]
80008a70:	70 09       	ld.w	r9,r8[0x0]
80008a72:	b1 81       	lsr	r1,0x10
80008a74:	e5 d2 c0 10 	bfextu	r2,r2,0x0,0x10
80008a78:	e0 05 03 41 	mac	r1,r0,r5
80008a7c:	ab 32       	mul	r2,r5
80008a7e:	e1 d9 c0 10 	bfextu	r0,r9,0x0,0x10
80008a82:	00 02       	add	r2,r0
80008a84:	e4 0e 00 0e 	add	lr,r2,lr
80008a88:	b0 1e       	st.h	r8[0x2],lr
80008a8a:	b1 8e       	lsr	lr,0x10
80008a8c:	1c 01       	add	r1,lr
80008a8e:	b0 01       	st.h	r8[0x0],r1
80008a90:	e2 0e 16 10 	lsr	lr,r1,0x10
80008a94:	2f c8       	sub	r8,-4
80008a96:	06 36       	cp.w	r6,r3
80008a98:	ce 83       	brcs	80008a68 <__multiply+0x6c>
80008a9a:	40 09       	lddsp	r9,sp[0x0]
80008a9c:	91 0e       	st.w	r8[0x0],lr
80008a9e:	94 86       	ld.uh	r6,r10[0x0]
80008aa0:	58 06       	cp.w	r6,0
80008aa2:	c1 d0       	breq	80008adc <__multiply+0xe0>
80008aa4:	72 02       	ld.w	r2,r9[0x0]
80008aa6:	12 98       	mov	r8,r9
80008aa8:	16 9e       	mov	lr,r11
80008aaa:	30 05       	mov	r5,0
80008aac:	b0 12       	st.h	r8[0x2],r2
80008aae:	1d 01       	ld.w	r1,lr++
80008ab0:	90 82       	ld.uh	r2,r8[0x0]
80008ab2:	e1 d1 c0 10 	bfextu	r0,r1,0x0,0x10
80008ab6:	ad 30       	mul	r0,r6
80008ab8:	e0 02 00 02 	add	r2,r0,r2
80008abc:	e4 05 00 05 	add	r5,r2,r5
80008ac0:	b0 05       	st.h	r8[0x0],r5
80008ac2:	b1 85       	lsr	r5,0x10
80008ac4:	b1 81       	lsr	r1,0x10
80008ac6:	2f c8       	sub	r8,-4
80008ac8:	ad 31       	mul	r1,r6
80008aca:	90 92       	ld.uh	r2,r8[0x2]
80008acc:	e2 02 00 02 	add	r2,r1,r2
80008ad0:	0a 02       	add	r2,r5
80008ad2:	e4 05 16 10 	lsr	r5,r2,0x10
80008ad6:	06 3e       	cp.w	lr,r3
80008ad8:	ce a3       	brcs	80008aac <__multiply+0xb0>
80008ada:	91 02       	st.w	r8[0x0],r2
80008adc:	2f ca       	sub	r10,-4
80008ade:	2f c9       	sub	r9,-4
80008ae0:	40 18       	lddsp	r8,sp[0x4]
80008ae2:	10 3a       	cp.w	r10,r8
80008ae4:	cb b3       	brcs	80008a5a <__multiply+0x5e>
80008ae6:	c0 28       	rjmp	80008aea <__multiply+0xee>
80008ae8:	20 17       	sub	r7,1
80008aea:	58 07       	cp.w	r7,0
80008aec:	e0 8a 00 05 	brle	80008af6 <__multiply+0xfa>
80008af0:	09 48       	ld.w	r8,--r4
80008af2:	58 08       	cp.w	r8,0
80008af4:	cf a0       	breq	80008ae8 <__multiply+0xec>
80008af6:	99 47       	st.w	r12[0x10],r7
80008af8:	2f ed       	sub	sp,-8
80008afa:	d8 32       	popm	r0-r7,pc

80008afc <__i2b>:
80008afc:	d4 21       	pushm	r4-r7,lr
80008afe:	16 97       	mov	r7,r11
80008b00:	30 1b       	mov	r11,1
80008b02:	c4 9e       	rcall	80008794 <_Balloc>
80008b04:	30 19       	mov	r9,1
80008b06:	99 57       	st.w	r12[0x14],r7
80008b08:	99 49       	st.w	r12[0x10],r9
80008b0a:	d8 22       	popm	r4-r7,pc

80008b0c <__multadd>:
80008b0c:	d4 31       	pushm	r0-r7,lr
80008b0e:	30 08       	mov	r8,0
80008b10:	12 95       	mov	r5,r9
80008b12:	16 97       	mov	r7,r11
80008b14:	18 96       	mov	r6,r12
80008b16:	76 44       	ld.w	r4,r11[0x10]
80008b18:	f6 c9 ff ec 	sub	r9,r11,-20
80008b1c:	72 0b       	ld.w	r11,r9[0x0]
80008b1e:	f6 0c 16 10 	lsr	r12,r11,0x10
80008b22:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
80008b26:	f4 0c 02 4c 	mul	r12,r10,r12
80008b2a:	f4 0b 03 45 	mac	r5,r10,r11
80008b2e:	f7 d5 c0 10 	bfextu	r11,r5,0x0,0x10
80008b32:	b1 85       	lsr	r5,0x10
80008b34:	18 05       	add	r5,r12
80008b36:	ea 0c 15 10 	lsl	r12,r5,0x10
80008b3a:	f8 0b 00 0b 	add	r11,r12,r11
80008b3e:	12 ab       	st.w	r9++,r11
80008b40:	2f f8       	sub	r8,-1
80008b42:	b1 85       	lsr	r5,0x10
80008b44:	08 38       	cp.w	r8,r4
80008b46:	ce b5       	brlt	80008b1c <__multadd+0x10>
80008b48:	58 05       	cp.w	r5,0
80008b4a:	c1 c0       	breq	80008b82 <__multadd+0x76>
80008b4c:	6e 28       	ld.w	r8,r7[0x8]
80008b4e:	10 34       	cp.w	r4,r8
80008b50:	c1 35       	brlt	80008b76 <__multadd+0x6a>
80008b52:	6e 1b       	ld.w	r11,r7[0x4]
80008b54:	0c 9c       	mov	r12,r6
80008b56:	2f fb       	sub	r11,-1
80008b58:	c1 ee       	rcall	80008794 <_Balloc>
80008b5a:	6e 4a       	ld.w	r10,r7[0x10]
80008b5c:	ee cb ff f4 	sub	r11,r7,-12
80008b60:	18 93       	mov	r3,r12
80008b62:	2f ea       	sub	r10,-2
80008b64:	2f 4c       	sub	r12,-12
80008b66:	a3 6a       	lsl	r10,0x2
80008b68:	fe b0 de 39 	rcall	800047da <memcpy>
80008b6c:	0e 9b       	mov	r11,r7
80008b6e:	0c 9c       	mov	r12,r6
80008b70:	fe b0 fd f8 	rcall	80008760 <_Bfree>
80008b74:	06 97       	mov	r7,r3
80008b76:	e8 c8 ff ff 	sub	r8,r4,-1
80008b7a:	2f b4       	sub	r4,-5
80008b7c:	8f 48       	st.w	r7[0x10],r8
80008b7e:	ee 04 09 25 	st.w	r7[r4<<0x2],r5
80008b82:	0e 9c       	mov	r12,r7
80008b84:	d8 32       	popm	r0-r7,pc
80008b86:	d7 03       	nop

80008b88 <__pow5mult>:
80008b88:	d4 31       	pushm	r0-r7,lr
80008b8a:	14 96       	mov	r6,r10
80008b8c:	18 97       	mov	r7,r12
80008b8e:	16 94       	mov	r4,r11
80008b90:	f1 da c0 02 	bfextu	r8,r10,0x0,0x2
80008b94:	c0 90       	breq	80008ba6 <__pow5mult+0x1e>
80008b96:	20 18       	sub	r8,1
80008b98:	fe c9 e3 fc 	sub	r9,pc,-7172
80008b9c:	f2 08 03 2a 	ld.w	r10,r9[r8<<0x2]
80008ba0:	30 09       	mov	r9,0
80008ba2:	cb 5f       	rcall	80008b0c <__multadd>
80008ba4:	18 94       	mov	r4,r12
80008ba6:	a3 46       	asr	r6,0x2
80008ba8:	c3 40       	breq	80008c10 <__pow5mult+0x88>
80008baa:	6e 95       	ld.w	r5,r7[0x24]
80008bac:	58 05       	cp.w	r5,0
80008bae:	c0 91       	brne	80008bc0 <__pow5mult+0x38>
80008bb0:	31 0c       	mov	r12,16
80008bb2:	fe b0 fa f3 	rcall	80008198 <malloc>
80008bb6:	99 35       	st.w	r12[0xc],r5
80008bb8:	8f 9c       	st.w	r7[0x24],r12
80008bba:	99 15       	st.w	r12[0x4],r5
80008bbc:	99 25       	st.w	r12[0x8],r5
80008bbe:	99 05       	st.w	r12[0x0],r5
80008bc0:	6e 93       	ld.w	r3,r7[0x24]
80008bc2:	66 25       	ld.w	r5,r3[0x8]
80008bc4:	58 05       	cp.w	r5,0
80008bc6:	c0 c1       	brne	80008bde <__pow5mult+0x56>
80008bc8:	e0 6b 02 71 	mov	r11,625
80008bcc:	0e 9c       	mov	r12,r7
80008bce:	c9 7f       	rcall	80008afc <__i2b>
80008bd0:	87 2c       	st.w	r3[0x8],r12
80008bd2:	30 08       	mov	r8,0
80008bd4:	18 95       	mov	r5,r12
80008bd6:	99 08       	st.w	r12[0x0],r8
80008bd8:	c0 38       	rjmp	80008bde <__pow5mult+0x56>
80008bda:	06 9c       	mov	r12,r3
80008bdc:	18 95       	mov	r5,r12
80008bde:	ed b6 00 00 	bld	r6,0x0
80008be2:	c0 b1       	brne	80008bf8 <__pow5mult+0x70>
80008be4:	08 9b       	mov	r11,r4
80008be6:	0a 9a       	mov	r10,r5
80008be8:	0e 9c       	mov	r12,r7
80008bea:	c0 9f       	rcall	800089fc <__multiply>
80008bec:	08 9b       	mov	r11,r4
80008bee:	18 93       	mov	r3,r12
80008bf0:	0e 9c       	mov	r12,r7
80008bf2:	06 94       	mov	r4,r3
80008bf4:	fe b0 fd b6 	rcall	80008760 <_Bfree>
80008bf8:	a1 56       	asr	r6,0x1
80008bfa:	c0 b0       	breq	80008c10 <__pow5mult+0x88>
80008bfc:	6a 03       	ld.w	r3,r5[0x0]
80008bfe:	58 03       	cp.w	r3,0
80008c00:	ce d1       	brne	80008bda <__pow5mult+0x52>
80008c02:	0a 9a       	mov	r10,r5
80008c04:	0a 9b       	mov	r11,r5
80008c06:	0e 9c       	mov	r12,r7
80008c08:	cf ae       	rcall	800089fc <__multiply>
80008c0a:	8b 0c       	st.w	r5[0x0],r12
80008c0c:	99 03       	st.w	r12[0x0],r3
80008c0e:	ce 7b       	rjmp	80008bdc <__pow5mult+0x54>
80008c10:	08 9c       	mov	r12,r4
80008c12:	d8 32       	popm	r0-r7,pc

80008c14 <_realloc_r>:
80008c14:	d4 31       	pushm	r0-r7,lr
80008c16:	20 1d       	sub	sp,4
80008c18:	16 94       	mov	r4,r11
80008c1a:	18 92       	mov	r2,r12
80008c1c:	14 9b       	mov	r11,r10
80008c1e:	58 04       	cp.w	r4,0
80008c20:	c0 51       	brne	80008c2a <_realloc_r+0x16>
80008c22:	fe b0 fa c3 	rcall	800081a8 <_malloc_r>
80008c26:	18 95       	mov	r5,r12
80008c28:	c5 39       	rjmp	80008ece <_realloc_r+0x2ba>
80008c2a:	50 0a       	stdsp	sp[0x0],r10
80008c2c:	fe b0 fd 07 	rcall	8000863a <__malloc_lock>
80008c30:	40 0b       	lddsp	r11,sp[0x0]
80008c32:	f6 c8 ff f5 	sub	r8,r11,-11
80008c36:	e8 c1 00 08 	sub	r1,r4,8
80008c3a:	10 96       	mov	r6,r8
80008c3c:	62 1c       	ld.w	r12,r1[0x4]
80008c3e:	e0 16 ff f8 	andl	r6,0xfff8
80008c42:	59 68       	cp.w	r8,22
80008c44:	f9 b6 08 10 	movls	r6,16
80008c48:	16 36       	cp.w	r6,r11
80008c4a:	5f 38       	srlo	r8
80008c4c:	f1 e6 13 f8 	or	r8,r8,r6>>0x1f
80008c50:	c0 50       	breq	80008c5a <_realloc_r+0x46>
80008c52:	30 c8       	mov	r8,12
80008c54:	30 05       	mov	r5,0
80008c56:	85 38       	st.w	r2[0xc],r8
80008c58:	c3 b9       	rjmp	80008ece <_realloc_r+0x2ba>
80008c5a:	18 90       	mov	r0,r12
80008c5c:	e0 10 ff fc 	andl	r0,0xfffc
80008c60:	0c 30       	cp.w	r0,r6
80008c62:	e0 84 01 0b 	brge	80008e78 <_realloc_r+0x264>
80008c66:	e0 68 01 10 	mov	r8,272
80008c6a:	e2 00 00 09 	add	r9,r1,r0
80008c6e:	70 25       	ld.w	r5,r8[0x8]
80008c70:	0a 39       	cp.w	r9,r5
80008c72:	c0 90       	breq	80008c84 <_realloc_r+0x70>
80008c74:	72 1a       	ld.w	r10,r9[0x4]
80008c76:	a1 ca       	cbr	r10,0x0
80008c78:	f2 0a 00 0a 	add	r10,r9,r10
80008c7c:	74 1a       	ld.w	r10,r10[0x4]
80008c7e:	ed ba 00 00 	bld	r10,0x0
80008c82:	c2 20       	breq	80008cc6 <_realloc_r+0xb2>
80008c84:	72 1a       	ld.w	r10,r9[0x4]
80008c86:	e0 1a ff fc 	andl	r10,0xfffc
80008c8a:	f4 00 00 03 	add	r3,r10,r0
80008c8e:	0a 39       	cp.w	r9,r5
80008c90:	c1 31       	brne	80008cb6 <_realloc_r+0xa2>
80008c92:	ec c7 ff f0 	sub	r7,r6,-16
80008c96:	0e 33       	cp.w	r3,r7
80008c98:	c1 95       	brlt	80008cca <_realloc_r+0xb6>
80008c9a:	e2 06 00 09 	add	r9,r1,r6
80008c9e:	0c 13       	sub	r3,r6
80008ca0:	a1 a3       	sbr	r3,0x0
80008ca2:	93 13       	st.w	r9[0x4],r3
80008ca4:	91 29       	st.w	r8[0x8],r9
80008ca6:	04 9c       	mov	r12,r2
80008ca8:	62 18       	ld.w	r8,r1[0x4]
80008caa:	08 95       	mov	r5,r4
80008cac:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80008cb0:	10 46       	or	r6,r8
80008cb2:	83 16       	st.w	r1[0x4],r6
80008cb4:	c0 b9       	rjmp	80008eca <_realloc_r+0x2b6>
80008cb6:	0c 33       	cp.w	r3,r6
80008cb8:	c0 95       	brlt	80008cca <_realloc_r+0xb6>
80008cba:	72 28       	ld.w	r8,r9[0x8]
80008cbc:	02 97       	mov	r7,r1
80008cbe:	72 39       	ld.w	r9,r9[0xc]
80008cc0:	93 28       	st.w	r9[0x8],r8
80008cc2:	91 39       	st.w	r8[0xc],r9
80008cc4:	cd c8       	rjmp	80008e7c <_realloc_r+0x268>
80008cc6:	30 0a       	mov	r10,0
80008cc8:	14 99       	mov	r9,r10
80008cca:	ed bc 00 00 	bld	r12,0x0
80008cce:	e0 80 00 95 	breq	80008df8 <_realloc_r+0x1e4>
80008cd2:	62 07       	ld.w	r7,r1[0x0]
80008cd4:	e2 07 01 07 	sub	r7,r1,r7
80008cd8:	6e 1c       	ld.w	r12,r7[0x4]
80008cda:	e0 1c ff fc 	andl	r12,0xfffc
80008cde:	58 09       	cp.w	r9,0
80008ce0:	c5 60       	breq	80008d8c <_realloc_r+0x178>
80008ce2:	f8 00 00 03 	add	r3,r12,r0
80008ce6:	0a 39       	cp.w	r9,r5
80008ce8:	c4 81       	brne	80008d78 <_realloc_r+0x164>
80008cea:	14 03       	add	r3,r10
80008cec:	ec c9 ff f0 	sub	r9,r6,-16
80008cf0:	12 33       	cp.w	r3,r9
80008cf2:	c4 d5       	brlt	80008d8c <_realloc_r+0x178>
80008cf4:	6e 3a       	ld.w	r10,r7[0xc]
80008cf6:	6e 29       	ld.w	r9,r7[0x8]
80008cf8:	95 29       	st.w	r10[0x8],r9
80008cfa:	93 3a       	st.w	r9[0xc],r10
80008cfc:	ee c5 ff f8 	sub	r5,r7,-8
80008d00:	e0 ca 00 04 	sub	r10,r0,4
80008d04:	e0 4a 00 24 	cp.w	r10,36
80008d08:	e0 8b 00 25 	brhi	80008d52 <_realloc_r+0x13e>
80008d0c:	0a 99       	mov	r9,r5
80008d0e:	59 3a       	cp.w	r10,19
80008d10:	e0 88 00 1a 	brls	80008d44 <_realloc_r+0x130>
80008d14:	09 09       	ld.w	r9,r4++
80008d16:	8b 09       	st.w	r5[0x0],r9
80008d18:	09 09       	ld.w	r9,r4++
80008d1a:	8f 39       	st.w	r7[0xc],r9
80008d1c:	ee c9 ff f0 	sub	r9,r7,-16
80008d20:	59 ba       	cp.w	r10,27
80008d22:	e0 88 00 11 	brls	80008d44 <_realloc_r+0x130>
80008d26:	09 0b       	ld.w	r11,r4++
80008d28:	93 0b       	st.w	r9[0x0],r11
80008d2a:	09 09       	ld.w	r9,r4++
80008d2c:	8f 59       	st.w	r7[0x14],r9
80008d2e:	ee c9 ff e8 	sub	r9,r7,-24
80008d32:	e0 4a 00 24 	cp.w	r10,36
80008d36:	c0 71       	brne	80008d44 <_realloc_r+0x130>
80008d38:	09 0a       	ld.w	r10,r4++
80008d3a:	93 0a       	st.w	r9[0x0],r10
80008d3c:	ee c9 ff e0 	sub	r9,r7,-32
80008d40:	09 0a       	ld.w	r10,r4++
80008d42:	8f 7a       	st.w	r7[0x1c],r10
80008d44:	09 0a       	ld.w	r10,r4++
80008d46:	12 aa       	st.w	r9++,r10
80008d48:	68 0a       	ld.w	r10,r4[0x0]
80008d4a:	93 0a       	st.w	r9[0x0],r10
80008d4c:	68 1a       	ld.w	r10,r4[0x4]
80008d4e:	93 1a       	st.w	r9[0x4],r10
80008d50:	c0 78       	rjmp	80008d5e <_realloc_r+0x14a>
80008d52:	50 08       	stdsp	sp[0x0],r8
80008d54:	08 9b       	mov	r11,r4
80008d56:	0a 9c       	mov	r12,r5
80008d58:	fe b0 fc 4b 	rcall	800085ee <memmove>
80008d5c:	40 08       	lddsp	r8,sp[0x0]
80008d5e:	ee 06 00 09 	add	r9,r7,r6
80008d62:	0c 13       	sub	r3,r6
80008d64:	a1 a3       	sbr	r3,0x0
80008d66:	93 13       	st.w	r9[0x4],r3
80008d68:	91 29       	st.w	r8[0x8],r9
80008d6a:	04 9c       	mov	r12,r2
80008d6c:	6e 18       	ld.w	r8,r7[0x4]
80008d6e:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80008d72:	10 46       	or	r6,r8
80008d74:	8f 16       	st.w	r7[0x4],r6
80008d76:	ca a8       	rjmp	80008eca <_realloc_r+0x2b6>
80008d78:	14 03       	add	r3,r10
80008d7a:	0c 33       	cp.w	r3,r6
80008d7c:	c0 85       	brlt	80008d8c <_realloc_r+0x178>
80008d7e:	72 28       	ld.w	r8,r9[0x8]
80008d80:	72 39       	ld.w	r9,r9[0xc]
80008d82:	93 28       	st.w	r9[0x8],r8
80008d84:	91 39       	st.w	r8[0xc],r9
80008d86:	6e 28       	ld.w	r8,r7[0x8]
80008d88:	6e 39       	ld.w	r9,r7[0xc]
80008d8a:	c0 78       	rjmp	80008d98 <_realloc_r+0x184>
80008d8c:	f8 00 00 03 	add	r3,r12,r0
80008d90:	0c 33       	cp.w	r3,r6
80008d92:	c3 35       	brlt	80008df8 <_realloc_r+0x1e4>
80008d94:	6e 39       	ld.w	r9,r7[0xc]
80008d96:	6e 28       	ld.w	r8,r7[0x8]
80008d98:	93 28       	st.w	r9[0x8],r8
80008d9a:	91 39       	st.w	r8[0xc],r9
80008d9c:	e0 ca 00 04 	sub	r10,r0,4
80008da0:	ee cc ff f8 	sub	r12,r7,-8
80008da4:	e0 4a 00 24 	cp.w	r10,36
80008da8:	e0 8b 00 24 	brhi	80008df0 <_realloc_r+0x1dc>
80008dac:	59 3a       	cp.w	r10,19
80008dae:	e0 88 00 1a 	brls	80008de2 <_realloc_r+0x1ce>
80008db2:	09 08       	ld.w	r8,r4++
80008db4:	99 08       	st.w	r12[0x0],r8
80008db6:	09 08       	ld.w	r8,r4++
80008db8:	8f 38       	st.w	r7[0xc],r8
80008dba:	ee cc ff f0 	sub	r12,r7,-16
80008dbe:	59 ba       	cp.w	r10,27
80008dc0:	e0 88 00 11 	brls	80008de2 <_realloc_r+0x1ce>
80008dc4:	09 08       	ld.w	r8,r4++
80008dc6:	99 08       	st.w	r12[0x0],r8
80008dc8:	09 08       	ld.w	r8,r4++
80008dca:	8f 58       	st.w	r7[0x14],r8
80008dcc:	ee cc ff e8 	sub	r12,r7,-24
80008dd0:	e0 4a 00 24 	cp.w	r10,36
80008dd4:	c0 71       	brne	80008de2 <_realloc_r+0x1ce>
80008dd6:	09 08       	ld.w	r8,r4++
80008dd8:	99 08       	st.w	r12[0x0],r8
80008dda:	ee cc ff e0 	sub	r12,r7,-32
80008dde:	09 08       	ld.w	r8,r4++
80008de0:	8f 78       	st.w	r7[0x1c],r8
80008de2:	09 08       	ld.w	r8,r4++
80008de4:	18 a8       	st.w	r12++,r8
80008de6:	68 08       	ld.w	r8,r4[0x0]
80008de8:	99 08       	st.w	r12[0x0],r8
80008dea:	68 18       	ld.w	r8,r4[0x4]
80008dec:	99 18       	st.w	r12[0x4],r8
80008dee:	c4 78       	rjmp	80008e7c <_realloc_r+0x268>
80008df0:	08 9b       	mov	r11,r4
80008df2:	fe b0 fb fe 	rcall	800085ee <memmove>
80008df6:	c4 38       	rjmp	80008e7c <_realloc_r+0x268>
80008df8:	04 9c       	mov	r12,r2
80008dfa:	fe b0 f9 d7 	rcall	800081a8 <_malloc_r>
80008dfe:	18 95       	mov	r5,r12
80008e00:	c3 a0       	breq	80008e74 <_realloc_r+0x260>
80008e02:	62 18       	ld.w	r8,r1[0x4]
80008e04:	f8 c9 00 08 	sub	r9,r12,8
80008e08:	a1 c8       	cbr	r8,0x0
80008e0a:	e2 08 00 08 	add	r8,r1,r8
80008e0e:	10 39       	cp.w	r9,r8
80008e10:	c0 71       	brne	80008e1e <_realloc_r+0x20a>
80008e12:	72 13       	ld.w	r3,r9[0x4]
80008e14:	02 97       	mov	r7,r1
80008e16:	e0 13 ff fc 	andl	r3,0xfffc
80008e1a:	00 03       	add	r3,r0
80008e1c:	c3 08       	rjmp	80008e7c <_realloc_r+0x268>
80008e1e:	e0 ca 00 04 	sub	r10,r0,4
80008e22:	e0 4a 00 24 	cp.w	r10,36
80008e26:	e0 8b 00 20 	brhi	80008e66 <_realloc_r+0x252>
80008e2a:	08 99       	mov	r9,r4
80008e2c:	18 98       	mov	r8,r12
80008e2e:	59 3a       	cp.w	r10,19
80008e30:	e0 88 00 14 	brls	80008e58 <_realloc_r+0x244>
80008e34:	13 0b       	ld.w	r11,r9++
80008e36:	10 ab       	st.w	r8++,r11
80008e38:	13 0b       	ld.w	r11,r9++
80008e3a:	10 ab       	st.w	r8++,r11
80008e3c:	59 ba       	cp.w	r10,27
80008e3e:	e0 88 00 0d 	brls	80008e58 <_realloc_r+0x244>
80008e42:	13 0b       	ld.w	r11,r9++
80008e44:	10 ab       	st.w	r8++,r11
80008e46:	13 0b       	ld.w	r11,r9++
80008e48:	10 ab       	st.w	r8++,r11
80008e4a:	e0 4a 00 24 	cp.w	r10,36
80008e4e:	c0 51       	brne	80008e58 <_realloc_r+0x244>
80008e50:	13 0a       	ld.w	r10,r9++
80008e52:	10 aa       	st.w	r8++,r10
80008e54:	13 0a       	ld.w	r10,r9++
80008e56:	10 aa       	st.w	r8++,r10
80008e58:	13 0a       	ld.w	r10,r9++
80008e5a:	10 aa       	st.w	r8++,r10
80008e5c:	72 0a       	ld.w	r10,r9[0x0]
80008e5e:	91 0a       	st.w	r8[0x0],r10
80008e60:	72 19       	ld.w	r9,r9[0x4]
80008e62:	91 19       	st.w	r8[0x4],r9
80008e64:	c0 48       	rjmp	80008e6c <_realloc_r+0x258>
80008e66:	08 9b       	mov	r11,r4
80008e68:	fe b0 fb c3 	rcall	800085ee <memmove>
80008e6c:	08 9b       	mov	r11,r4
80008e6e:	04 9c       	mov	r12,r2
80008e70:	fe b0 f6 f6 	rcall	80007c5c <_free_r>
80008e74:	04 9c       	mov	r12,r2
80008e76:	c2 a8       	rjmp	80008eca <_realloc_r+0x2b6>
80008e78:	00 93       	mov	r3,r0
80008e7a:	02 97       	mov	r7,r1
80008e7c:	e6 06 01 09 	sub	r9,r3,r6
80008e80:	6e 18       	ld.w	r8,r7[0x4]
80008e82:	58 f9       	cp.w	r9,15
80008e84:	e0 88 00 16 	brls	80008eb0 <_realloc_r+0x29c>
80008e88:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80008e8c:	ed e8 10 08 	or	r8,r6,r8
80008e90:	8f 18       	st.w	r7[0x4],r8
80008e92:	12 98       	mov	r8,r9
80008e94:	a1 a8       	sbr	r8,0x0
80008e96:	ee 06 00 0b 	add	r11,r7,r6
80008e9a:	f6 09 00 09 	add	r9,r11,r9
80008e9e:	97 18       	st.w	r11[0x4],r8
80008ea0:	72 18       	ld.w	r8,r9[0x4]
80008ea2:	a1 a8       	sbr	r8,0x0
80008ea4:	2f 8b       	sub	r11,-8
80008ea6:	93 18       	st.w	r9[0x4],r8
80008ea8:	04 9c       	mov	r12,r2
80008eaa:	fe b0 f6 d9 	rcall	80007c5c <_free_r>
80008eae:	c0 b8       	rjmp	80008ec4 <_realloc_r+0x2b0>
80008eb0:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80008eb4:	e7 e8 10 08 	or	r8,r3,r8
80008eb8:	8f 18       	st.w	r7[0x4],r8
80008eba:	ee 03 00 03 	add	r3,r7,r3
80008ebe:	66 18       	ld.w	r8,r3[0x4]
80008ec0:	a1 a8       	sbr	r8,0x0
80008ec2:	87 18       	st.w	r3[0x4],r8
80008ec4:	04 9c       	mov	r12,r2
80008ec6:	ee c5 ff f8 	sub	r5,r7,-8
80008eca:	fe b0 fb b9 	rcall	8000863c <__malloc_unlock>
80008ece:	0a 9c       	mov	r12,r5
80008ed0:	2f fd       	sub	sp,-4
80008ed2:	d8 32       	popm	r0-r7,pc

80008ed4 <__isinfd>:
80008ed4:	14 98       	mov	r8,r10
80008ed6:	fc 19 7f f0 	movh	r9,0x7ff0
80008eda:	f5 db c0 1f 	bfextu	r10,r11,0x0,0x1f
80008ede:	f0 0b 11 00 	rsub	r11,r8,0
80008ee2:	f7 e8 10 08 	or	r8,r11,r8
80008ee6:	f5 e8 13 f8 	or	r8,r10,r8>>0x1f
80008eea:	f2 08 01 08 	sub	r8,r9,r8
80008eee:	f0 0c 11 00 	rsub	r12,r8,0
80008ef2:	f9 e8 10 08 	or	r8,r12,r8
80008ef6:	f0 0c 14 1f 	asr	r12,r8,0x1f
80008efa:	2f fc       	sub	r12,-1
80008efc:	5e fc       	retal	r12

80008efe <__isnand>:
80008efe:	14 98       	mov	r8,r10
80008f00:	f5 db c0 1f 	bfextu	r10,r11,0x0,0x1f
80008f04:	f0 0c 11 00 	rsub	r12,r8,0
80008f08:	10 4c       	or	r12,r8
80008f0a:	fc 18 7f f0 	movh	r8,0x7ff0
80008f0e:	f5 ec 13 fc 	or	r12,r10,r12>>0x1f
80008f12:	f0 0c 01 0c 	sub	r12,r8,r12
80008f16:	bf 9c       	lsr	r12,0x1f
80008f18:	5e fc       	retal	r12
80008f1a:	d7 03       	nop

80008f1c <_sbrk_r>:
80008f1c:	d4 21       	pushm	r4-r7,lr
80008f1e:	30 08       	mov	r8,0
80008f20:	18 97       	mov	r7,r12
80008f22:	e0 66 06 6c 	mov	r6,1644
80008f26:	16 9c       	mov	r12,r11
80008f28:	8d 08       	st.w	r6[0x0],r8
80008f2a:	ca fc       	rcall	80009088 <_sbrk>
80008f2c:	5b fc       	cp.w	r12,-1
80008f2e:	c0 51       	brne	80008f38 <_sbrk_r+0x1c>
80008f30:	6c 08       	ld.w	r8,r6[0x0]
80008f32:	58 08       	cp.w	r8,0
80008f34:	ef f8 1a 03 	st.wne	r7[0xc],r8
80008f38:	d8 22       	popm	r4-r7,pc
80008f3a:	d7 03       	nop

80008f3c <__sclose>:
80008f3c:	d4 01       	pushm	lr
80008f3e:	96 7b       	ld.sh	r11,r11[0xe]
80008f40:	cf ec       	rcall	8000913c <_close_r>
80008f42:	d8 02       	popm	pc

80008f44 <__sseek>:
80008f44:	d4 21       	pushm	r4-r7,lr
80008f46:	16 97       	mov	r7,r11
80008f48:	96 7b       	ld.sh	r11,r11[0xe]
80008f4a:	c8 5d       	rcall	80009254 <_lseek_r>
80008f4c:	8e 68       	ld.sh	r8,r7[0xc]
80008f4e:	10 99       	mov	r9,r8
80008f50:	ad c8       	cbr	r8,0xc
80008f52:	ad a9       	sbr	r9,0xc
80008f54:	5b fc       	cp.w	r12,-1
80008f56:	ef f8 0c 06 	st.heq	r7[0xc],r8
80008f5a:	ef f9 1c 06 	st.hne	r7[0xc],r9
80008f5e:	ef fc 1a 15 	st.wne	r7[0x54],r12
80008f62:	d8 22       	popm	r4-r7,pc

80008f64 <__swrite>:
80008f64:	d4 21       	pushm	r4-r7,lr
80008f66:	96 68       	ld.sh	r8,r11[0xc]
80008f68:	16 97       	mov	r7,r11
80008f6a:	14 95       	mov	r5,r10
80008f6c:	12 94       	mov	r4,r9
80008f6e:	e2 18 01 00 	andl	r8,0x100,COH
80008f72:	18 96       	mov	r6,r12
80008f74:	c0 50       	breq	80008f7e <__swrite+0x1a>
80008f76:	30 29       	mov	r9,2
80008f78:	30 0a       	mov	r10,0
80008f7a:	96 7b       	ld.sh	r11,r11[0xe]
80008f7c:	c6 cd       	rcall	80009254 <_lseek_r>
80008f7e:	8e 68       	ld.sh	r8,r7[0xc]
80008f80:	ad c8       	cbr	r8,0xc
80008f82:	08 99       	mov	r9,r4
80008f84:	0a 9a       	mov	r10,r5
80008f86:	8e 7b       	ld.sh	r11,r7[0xe]
80008f88:	0c 9c       	mov	r12,r6
80008f8a:	ae 68       	st.h	r7[0xc],r8
80008f8c:	c9 ac       	rcall	800090c0 <_write_r>
80008f8e:	d8 22       	popm	r4-r7,pc

80008f90 <__sread>:
80008f90:	d4 21       	pushm	r4-r7,lr
80008f92:	16 97       	mov	r7,r11
80008f94:	96 7b       	ld.sh	r11,r11[0xe]
80008f96:	c7 1d       	rcall	80009278 <_read_r>
80008f98:	c0 65       	brlt	80008fa4 <__sread+0x14>
80008f9a:	6f 58       	ld.w	r8,r7[0x54]
80008f9c:	18 08       	add	r8,r12
80008f9e:	ef 48 00 54 	st.w	r7[84],r8
80008fa2:	d8 22       	popm	r4-r7,pc
80008fa4:	8e 68       	ld.sh	r8,r7[0xc]
80008fa6:	ad c8       	cbr	r8,0xc
80008fa8:	ae 68       	st.h	r7[0xc],r8
80008faa:	d8 22       	popm	r4-r7,pc

80008fac <strlen>:
80008fac:	30 09       	mov	r9,0
80008fae:	18 98       	mov	r8,r12
80008fb0:	c0 28       	rjmp	80008fb4 <strlen+0x8>
80008fb2:	2f f8       	sub	r8,-1
80008fb4:	11 8a       	ld.ub	r10,r8[0x0]
80008fb6:	f2 0a 18 00 	cp.b	r10,r9
80008fba:	cf c1       	brne	80008fb2 <strlen+0x6>
80008fbc:	f0 0c 01 0c 	sub	r12,r8,r12
80008fc0:	5e fc       	retal	r12
80008fc2:	d7 03       	nop

80008fc4 <_close>:
80008fc4:	30 28       	mov	r8,2
80008fc6:	d6 73       	breakpoint
80008fc8:	3f fc       	mov	r12,-1
80008fca:	35 8b       	mov	r11,88
80008fcc:	58 0c       	cp.w	r12,0
80008fce:	5e 4c       	retge	r12
80008fd0:	e0 6a 06 6c 	mov	r10,1644
80008fd4:	95 0b       	st.w	r10[0x0],r11
80008fd6:	5e fc       	retal	r12

80008fd8 <_lseek>:
80008fd8:	30 58       	mov	r8,5
80008fda:	d6 73       	breakpoint
80008fdc:	3f fc       	mov	r12,-1
80008fde:	35 8b       	mov	r11,88
80008fe0:	58 0c       	cp.w	r12,0
80008fe2:	5e 4c       	retge	r12
80008fe4:	e0 6a 06 6c 	mov	r10,1644
80008fe8:	95 0b       	st.w	r10[0x0],r11
80008fea:	5e fc       	retal	r12

80008fec <_read>:
80008fec:	30 38       	mov	r8,3
80008fee:	d6 73       	breakpoint
80008ff0:	3f fc       	mov	r12,-1
80008ff2:	35 8b       	mov	r11,88
80008ff4:	58 0c       	cp.w	r12,0
80008ff6:	5e 4c       	retge	r12
80008ff8:	e0 6a 06 6c 	mov	r10,1644
80008ffc:	95 0b       	st.w	r10[0x0],r11
80008ffe:	5e fc       	retal	r12

80009000 <_write>:
80009000:	30 48       	mov	r8,4
80009002:	d6 73       	breakpoint
80009004:	3f fc       	mov	r12,-1
80009006:	35 8b       	mov	r11,88
80009008:	58 0c       	cp.w	r12,0
8000900a:	5e 4c       	retge	r12
8000900c:	e0 6a 06 6c 	mov	r10,1644
80009010:	95 0b       	st.w	r10[0x0],r11
80009012:	5e fc       	retal	r12

80009014 <isatty>:
80009014:	30 b8       	mov	r8,11
80009016:	d6 73       	breakpoint
80009018:	3f fc       	mov	r12,-1
8000901a:	35 8b       	mov	r11,88
8000901c:	58 0c       	cp.w	r12,0
8000901e:	5e 4c       	retge	r12
80009020:	e0 6a 06 6c 	mov	r10,1644
80009024:	95 0b       	st.w	r10[0x0],r11
80009026:	5e fc       	retal	r12

80009028 <_fstat_host>:
80009028:	30 98       	mov	r8,9
8000902a:	d6 73       	breakpoint
8000902c:	3f fc       	mov	r12,-1
8000902e:	35 8b       	mov	r11,88
80009030:	58 0c       	cp.w	r12,0
80009032:	5e 4c       	retge	r12
80009034:	e0 6a 06 6c 	mov	r10,1644
80009038:	95 0b       	st.w	r10[0x0],r11
8000903a:	5e fc       	retal	r12

8000903c <_fstat>:
8000903c:	d4 21       	pushm	r4-r7,lr
8000903e:	21 0d       	sub	sp,64
80009040:	16 97       	mov	r7,r11
80009042:	1a 9b       	mov	r11,sp
80009044:	cf 2f       	rcall	80009028 <_fstat_host>
80009046:	c0 34       	brge	8000904c <_fstat+0x10>
80009048:	3f fc       	mov	r12,-1
8000904a:	c1 c8       	rjmp	80009082 <_fstat+0x46>
8000904c:	40 08       	lddsp	r8,sp[0x0]
8000904e:	ae 08       	st.h	r7[0x0],r8
80009050:	40 18       	lddsp	r8,sp[0x4]
80009052:	ae 18       	st.h	r7[0x2],r8
80009054:	40 28       	lddsp	r8,sp[0x8]
80009056:	8f 18       	st.w	r7[0x4],r8
80009058:	40 38       	lddsp	r8,sp[0xc]
8000905a:	ae 48       	st.h	r7[0x8],r8
8000905c:	40 48       	lddsp	r8,sp[0x10]
8000905e:	ae 58       	st.h	r7[0xa],r8
80009060:	40 58       	lddsp	r8,sp[0x14]
80009062:	ae 68       	st.h	r7[0xc],r8
80009064:	40 68       	lddsp	r8,sp[0x18]
80009066:	ae 78       	st.h	r7[0xe],r8
80009068:	40 88       	lddsp	r8,sp[0x20]
8000906a:	8f 48       	st.w	r7[0x10],r8
8000906c:	40 a8       	lddsp	r8,sp[0x28]
8000906e:	8f b8       	st.w	r7[0x2c],r8
80009070:	40 c8       	lddsp	r8,sp[0x30]
80009072:	8f c8       	st.w	r7[0x30],r8
80009074:	40 d8       	lddsp	r8,sp[0x34]
80009076:	8f 58       	st.w	r7[0x14],r8
80009078:	40 e8       	lddsp	r8,sp[0x38]
8000907a:	30 0c       	mov	r12,0
8000907c:	8f 78       	st.w	r7[0x1c],r8
8000907e:	40 f8       	lddsp	r8,sp[0x3c]
80009080:	8f 98       	st.w	r7[0x24],r8
80009082:	2f 0d       	sub	sp,-64
80009084:	d8 22       	popm	r4-r7,pc
80009086:	d7 03       	nop

80009088 <_sbrk>:
80009088:	d4 01       	pushm	lr
8000908a:	e0 68 06 68 	mov	r8,1640
8000908e:	70 09       	ld.w	r9,r8[0x0]
80009090:	58 09       	cp.w	r9,0
80009092:	c0 41       	brne	8000909a <_sbrk+0x12>
80009094:	e0 69 06 70 	mov	r9,1648
80009098:	91 09       	st.w	r8[0x0],r9
8000909a:	e0 69 06 68 	mov	r9,1640
8000909e:	e0 6a f0 00 	mov	r10,61440
800090a2:	72 08       	ld.w	r8,r9[0x0]
800090a4:	f0 0c 00 0c 	add	r12,r8,r12
800090a8:	14 3c       	cp.w	r12,r10
800090aa:	e0 8b 00 04 	brhi	800090b2 <_sbrk+0x2a>
800090ae:	93 0c       	st.w	r9[0x0],r12
800090b0:	c0 58       	rjmp	800090ba <_sbrk+0x32>
800090b2:	c5 5c       	rcall	8000915c <__errno>
800090b4:	30 c8       	mov	r8,12
800090b6:	99 08       	st.w	r12[0x0],r8
800090b8:	3f f8       	mov	r8,-1
800090ba:	10 9c       	mov	r12,r8
800090bc:	d8 02       	popm	pc
800090be:	d7 03       	nop

800090c0 <_write_r>:
800090c0:	d4 21       	pushm	r4-r7,lr
800090c2:	16 98       	mov	r8,r11
800090c4:	18 97       	mov	r7,r12
800090c6:	10 9c       	mov	r12,r8
800090c8:	30 08       	mov	r8,0
800090ca:	14 9b       	mov	r11,r10
800090cc:	e0 66 06 6c 	mov	r6,1644
800090d0:	12 9a       	mov	r10,r9
800090d2:	8d 08       	st.w	r6[0x0],r8
800090d4:	c9 6f       	rcall	80009000 <_write>
800090d6:	5b fc       	cp.w	r12,-1
800090d8:	c0 51       	brne	800090e2 <_write_r+0x22>
800090da:	6c 08       	ld.w	r8,r6[0x0]
800090dc:	58 08       	cp.w	r8,0
800090de:	ef f8 1a 03 	st.wne	r7[0xc],r8
800090e2:	d8 22       	popm	r4-r7,pc

800090e4 <_calloc_r>:
800090e4:	d4 21       	pushm	r4-r7,lr
800090e6:	f4 0b 02 4b 	mul	r11,r10,r11
800090ea:	fe b0 f8 5f 	rcall	800081a8 <_malloc_r>
800090ee:	18 97       	mov	r7,r12
800090f0:	c2 30       	breq	80009136 <_calloc_r+0x52>
800090f2:	f8 fa ff fc 	ld.w	r10,r12[-4]
800090f6:	e0 1a ff fc 	andl	r10,0xfffc
800090fa:	20 4a       	sub	r10,4
800090fc:	e0 4a 00 24 	cp.w	r10,36
80009100:	e0 8b 00 18 	brhi	80009130 <_calloc_r+0x4c>
80009104:	18 98       	mov	r8,r12
80009106:	59 3a       	cp.w	r10,19
80009108:	e0 88 00 0f 	brls	80009126 <_calloc_r+0x42>
8000910c:	30 09       	mov	r9,0
8000910e:	10 a9       	st.w	r8++,r9
80009110:	10 a9       	st.w	r8++,r9
80009112:	59 ba       	cp.w	r10,27
80009114:	e0 88 00 09 	brls	80009126 <_calloc_r+0x42>
80009118:	10 a9       	st.w	r8++,r9
8000911a:	10 a9       	st.w	r8++,r9
8000911c:	e0 4a 00 24 	cp.w	r10,36
80009120:	c0 31       	brne	80009126 <_calloc_r+0x42>
80009122:	10 a9       	st.w	r8++,r9
80009124:	10 a9       	st.w	r8++,r9
80009126:	30 09       	mov	r9,0
80009128:	10 a9       	st.w	r8++,r9
8000912a:	91 19       	st.w	r8[0x4],r9
8000912c:	91 09       	st.w	r8[0x0],r9
8000912e:	c0 48       	rjmp	80009136 <_calloc_r+0x52>
80009130:	30 0b       	mov	r11,0
80009132:	fe b0 fa 7d 	rcall	8000862c <memset>
80009136:	0e 9c       	mov	r12,r7
80009138:	d8 22       	popm	r4-r7,pc
8000913a:	d7 03       	nop

8000913c <_close_r>:
8000913c:	d4 21       	pushm	r4-r7,lr
8000913e:	30 08       	mov	r8,0
80009140:	18 97       	mov	r7,r12
80009142:	e0 66 06 6c 	mov	r6,1644
80009146:	16 9c       	mov	r12,r11
80009148:	8d 08       	st.w	r6[0x0],r8
8000914a:	c3 df       	rcall	80008fc4 <_close>
8000914c:	5b fc       	cp.w	r12,-1
8000914e:	c0 51       	brne	80009158 <_close_r+0x1c>
80009150:	6c 08       	ld.w	r8,r6[0x0]
80009152:	58 08       	cp.w	r8,0
80009154:	ef f8 1a 03 	st.wne	r7[0xc],r8
80009158:	d8 22       	popm	r4-r7,pc
8000915a:	d7 03       	nop

8000915c <__errno>:
8000915c:	e0 68 01 0c 	mov	r8,268
80009160:	70 0c       	ld.w	r12,r8[0x0]
80009162:	2f 4c       	sub	r12,-12
80009164:	5e fc       	retal	r12
80009166:	d7 03       	nop

80009168 <_fclose_r>:
80009168:	d4 21       	pushm	r4-r7,lr
8000916a:	18 96       	mov	r6,r12
8000916c:	16 97       	mov	r7,r11
8000916e:	58 0b       	cp.w	r11,0
80009170:	c0 31       	brne	80009176 <_fclose_r+0xe>
80009172:	16 95       	mov	r5,r11
80009174:	c5 38       	rjmp	8000921a <_fclose_r+0xb2>
80009176:	fe b0 f4 87 	rcall	80007a84 <__sfp_lock_acquire>
8000917a:	58 06       	cp.w	r6,0
8000917c:	c0 70       	breq	8000918a <_fclose_r+0x22>
8000917e:	6c 68       	ld.w	r8,r6[0x18]
80009180:	58 08       	cp.w	r8,0
80009182:	c0 41       	brne	8000918a <_fclose_r+0x22>
80009184:	0c 9c       	mov	r12,r6
80009186:	fe b0 f4 d1 	rcall	80007b28 <__sinit>
8000918a:	fe c8 ea 96 	sub	r8,pc,-5482
8000918e:	10 37       	cp.w	r7,r8
80009190:	c0 31       	brne	80009196 <_fclose_r+0x2e>
80009192:	6c 07       	ld.w	r7,r6[0x0]
80009194:	c0 c8       	rjmp	800091ac <_fclose_r+0x44>
80009196:	fe c8 ea 82 	sub	r8,pc,-5502
8000919a:	10 37       	cp.w	r7,r8
8000919c:	c0 31       	brne	800091a2 <_fclose_r+0x3a>
8000919e:	6c 17       	ld.w	r7,r6[0x4]
800091a0:	c0 68       	rjmp	800091ac <_fclose_r+0x44>
800091a2:	fe c8 ea 6e 	sub	r8,pc,-5522
800091a6:	10 37       	cp.w	r7,r8
800091a8:	ed f7 00 02 	ld.weq	r7,r6[0x8]
800091ac:	8e 69       	ld.sh	r9,r7[0xc]
800091ae:	30 08       	mov	r8,0
800091b0:	f0 09 19 00 	cp.h	r9,r8
800091b4:	c0 51       	brne	800091be <_fclose_r+0x56>
800091b6:	fe b0 f4 68 	rcall	80007a86 <__sfp_lock_release>
800091ba:	30 05       	mov	r5,0
800091bc:	c2 f8       	rjmp	8000921a <_fclose_r+0xb2>
800091be:	0e 9b       	mov	r11,r7
800091c0:	0c 9c       	mov	r12,r6
800091c2:	fe b0 f3 db 	rcall	80007978 <_fflush_r>
800091c6:	6e c8       	ld.w	r8,r7[0x30]
800091c8:	18 95       	mov	r5,r12
800091ca:	58 08       	cp.w	r8,0
800091cc:	c0 60       	breq	800091d8 <_fclose_r+0x70>
800091ce:	6e 8b       	ld.w	r11,r7[0x20]
800091d0:	0c 9c       	mov	r12,r6
800091d2:	5d 18       	icall	r8
800091d4:	f9 b5 05 ff 	movlt	r5,-1
800091d8:	8e 68       	ld.sh	r8,r7[0xc]
800091da:	ed b8 00 07 	bld	r8,0x7
800091de:	c0 51       	brne	800091e8 <_fclose_r+0x80>
800091e0:	6e 4b       	ld.w	r11,r7[0x10]
800091e2:	0c 9c       	mov	r12,r6
800091e4:	fe b0 f5 3c 	rcall	80007c5c <_free_r>
800091e8:	6e db       	ld.w	r11,r7[0x34]
800091ea:	58 0b       	cp.w	r11,0
800091ec:	c0 a0       	breq	80009200 <_fclose_r+0x98>
800091ee:	ee c8 ff bc 	sub	r8,r7,-68
800091f2:	10 3b       	cp.w	r11,r8
800091f4:	c0 40       	breq	800091fc <_fclose_r+0x94>
800091f6:	0c 9c       	mov	r12,r6
800091f8:	fe b0 f5 32 	rcall	80007c5c <_free_r>
800091fc:	30 08       	mov	r8,0
800091fe:	8f d8       	st.w	r7[0x34],r8
80009200:	6f 2b       	ld.w	r11,r7[0x48]
80009202:	58 0b       	cp.w	r11,0
80009204:	c0 70       	breq	80009212 <_fclose_r+0xaa>
80009206:	0c 9c       	mov	r12,r6
80009208:	fe b0 f5 2a 	rcall	80007c5c <_free_r>
8000920c:	30 08       	mov	r8,0
8000920e:	ef 48 00 48 	st.w	r7[72],r8
80009212:	30 08       	mov	r8,0
80009214:	ae 68       	st.h	r7[0xc],r8
80009216:	fe b0 f4 38 	rcall	80007a86 <__sfp_lock_release>
8000921a:	0a 9c       	mov	r12,r5
8000921c:	d8 22       	popm	r4-r7,pc
8000921e:	d7 03       	nop

80009220 <fclose>:
80009220:	d4 01       	pushm	lr
80009222:	e0 68 01 0c 	mov	r8,268
80009226:	18 9b       	mov	r11,r12
80009228:	70 0c       	ld.w	r12,r8[0x0]
8000922a:	c9 ff       	rcall	80009168 <_fclose_r>
8000922c:	d8 02       	popm	pc
8000922e:	d7 03       	nop

80009230 <_fstat_r>:
80009230:	d4 21       	pushm	r4-r7,lr
80009232:	16 98       	mov	r8,r11
80009234:	18 97       	mov	r7,r12
80009236:	10 9c       	mov	r12,r8
80009238:	30 08       	mov	r8,0
8000923a:	e0 66 06 6c 	mov	r6,1644
8000923e:	14 9b       	mov	r11,r10
80009240:	8d 08       	st.w	r6[0x0],r8
80009242:	cf de       	rcall	8000903c <_fstat>
80009244:	5b fc       	cp.w	r12,-1
80009246:	c0 51       	brne	80009250 <_fstat_r+0x20>
80009248:	6c 08       	ld.w	r8,r6[0x0]
8000924a:	58 08       	cp.w	r8,0
8000924c:	ef f8 1a 03 	st.wne	r7[0xc],r8
80009250:	d8 22       	popm	r4-r7,pc
80009252:	d7 03       	nop

80009254 <_lseek_r>:
80009254:	d4 21       	pushm	r4-r7,lr
80009256:	16 98       	mov	r8,r11
80009258:	18 97       	mov	r7,r12
8000925a:	10 9c       	mov	r12,r8
8000925c:	30 08       	mov	r8,0
8000925e:	14 9b       	mov	r11,r10
80009260:	e0 66 06 6c 	mov	r6,1644
80009264:	12 9a       	mov	r10,r9
80009266:	8d 08       	st.w	r6[0x0],r8
80009268:	cb 8e       	rcall	80008fd8 <_lseek>
8000926a:	5b fc       	cp.w	r12,-1
8000926c:	c0 51       	brne	80009276 <_lseek_r+0x22>
8000926e:	6c 08       	ld.w	r8,r6[0x0]
80009270:	58 08       	cp.w	r8,0
80009272:	ef f8 1a 03 	st.wne	r7[0xc],r8
80009276:	d8 22       	popm	r4-r7,pc

80009278 <_read_r>:
80009278:	d4 21       	pushm	r4-r7,lr
8000927a:	16 98       	mov	r8,r11
8000927c:	18 97       	mov	r7,r12
8000927e:	10 9c       	mov	r12,r8
80009280:	30 08       	mov	r8,0
80009282:	14 9b       	mov	r11,r10
80009284:	e0 66 06 6c 	mov	r6,1644
80009288:	12 9a       	mov	r10,r9
8000928a:	8d 08       	st.w	r6[0x0],r8
8000928c:	cb 0e       	rcall	80008fec <_read>
8000928e:	5b fc       	cp.w	r12,-1
80009290:	c0 51       	brne	8000929a <_read_r+0x22>
80009292:	6c 08       	ld.w	r8,r6[0x0]
80009294:	58 08       	cp.w	r8,0
80009296:	ef f8 1a 03 	st.wne	r7[0xc],r8
8000929a:	d8 22       	popm	r4-r7,pc

8000929c <__avr32_f64_mul>:
8000929c:	f5 eb 10 1c 	or	r12,r10,r11<<0x1
800092a0:	e0 80 00 dc 	breq	80009458 <__avr32_f64_mul_op1_zero>
800092a4:	d4 21       	pushm	r4-r7,lr
800092a6:	f7 e9 20 0e 	eor	lr,r11,r9
800092aa:	ef db c2 8b 	bfextu	r7,r11,0x14,0xb
800092ae:	30 15       	mov	r5,1
800092b0:	c4 30       	breq	80009336 <__avr32_f64_mul_op1_subnormal>
800092b2:	ab 6b       	lsl	r11,0xa
800092b4:	f7 ea 13 6b 	or	r11,r11,r10>>0x16
800092b8:	ab 6a       	lsl	r10,0xa
800092ba:	f7 d5 d3 c2 	bfins	r11,r5,0x1e,0x2
800092be:	ed d9 c2 8b 	bfextu	r6,r9,0x14,0xb
800092c2:	c5 c0       	breq	8000937a <__avr32_f64_mul_op2_subnormal>
800092c4:	a1 78       	lsl	r8,0x1
800092c6:	5c f9       	rol	r9
800092c8:	f3 d5 d2 ab 	bfins	r9,r5,0x15,0xb
800092cc:	e0 47 07 ff 	cp.w	r7,2047
800092d0:	c7 70       	breq	800093be <__avr32_f64_mul_op_nan_or_inf>
800092d2:	e0 46 07 ff 	cp.w	r6,2047
800092d6:	c7 40       	breq	800093be <__avr32_f64_mul_op_nan_or_inf>
800092d8:	ee 06 00 0c 	add	r12,r7,r6
800092dc:	e0 2c 03 fe 	sub	r12,1022
800092e0:	f6 08 06 44 	mulu.d	r4,r11,r8
800092e4:	f4 09 07 44 	macu.d	r4,r10,r9
800092e8:	f4 08 06 46 	mulu.d	r6,r10,r8
800092ec:	f6 09 06 4a 	mulu.d	r10,r11,r9
800092f0:	08 07       	add	r7,r4
800092f2:	f4 05 00 4a 	adc	r10,r10,r5
800092f6:	5c 0b       	acr	r11
800092f8:	ed bb 00 14 	bld	r11,0x14
800092fc:	c0 50       	breq	80009306 <__avr32_f64_mul+0x6a>
800092fe:	a1 77       	lsl	r7,0x1
80009300:	5c fa       	rol	r10
80009302:	5c fb       	rol	r11
80009304:	20 1c       	sub	r12,1
80009306:	58 0c       	cp.w	r12,0
80009308:	e0 8a 00 6f 	brle	800093e6 <__avr32_f64_mul_res_subnormal>
8000930c:	e0 4c 07 ff 	cp.w	r12,2047
80009310:	e0 84 00 9c 	brge	80009448 <__avr32_f64_mul_res_inf>
80009314:	f7 dc d2 8b 	bfins	r11,r12,0x14,0xb
80009318:	ed ea 11 f6 	or	r6,r6,r10<<0x1f
8000931c:	ef e6 12 17 	or	r7,r7,r6>>0x1
80009320:	ee 17 80 00 	eorh	r7,0x8000
80009324:	f1 b7 04 20 	satu	r7,0x1
80009328:	0e 0a       	add	r10,r7
8000932a:	5c 0b       	acr	r11
8000932c:	ed be 00 1f 	bld	lr,0x1f
80009330:	ef bb 00 1f 	bst	r11,0x1f
80009334:	d8 22       	popm	r4-r7,pc

80009336 <__avr32_f64_mul_op1_subnormal>:
80009336:	e4 1b 00 0f 	andh	r11,0xf
8000933a:	f4 0c 12 00 	clz	r12,r10
8000933e:	f6 06 12 00 	clz	r6,r11
80009342:	f7 bc 03 e1 	sublo	r12,-31
80009346:	f8 06 17 30 	movlo	r6,r12
8000934a:	f7 b6 02 01 	subhs	r6,1
8000934e:	e0 46 00 20 	cp.w	r6,32
80009352:	c0 d4       	brge	8000936c <__avr32_f64_mul_op1_subnormal+0x36>
80009354:	ec 0c 11 20 	rsub	r12,r6,32
80009358:	f6 06 09 4b 	lsl	r11,r11,r6
8000935c:	f4 0c 0a 4c 	lsr	r12,r10,r12
80009360:	18 4b       	or	r11,r12
80009362:	f4 06 09 4a 	lsl	r10,r10,r6
80009366:	20 b6       	sub	r6,11
80009368:	0c 17       	sub	r7,r6
8000936a:	ca ab       	rjmp	800092be <__avr32_f64_mul+0x22>
8000936c:	f4 06 09 4b 	lsl	r11,r10,r6
80009370:	c6 40       	breq	80009438 <__avr32_f64_mul_res_zero>
80009372:	30 0a       	mov	r10,0
80009374:	20 b6       	sub	r6,11
80009376:	0c 17       	sub	r7,r6
80009378:	ca 3b       	rjmp	800092be <__avr32_f64_mul+0x22>

8000937a <__avr32_f64_mul_op2_subnormal>:
8000937a:	e4 19 00 0f 	andh	r9,0xf
8000937e:	f0 0c 12 00 	clz	r12,r8
80009382:	f2 05 12 00 	clz	r5,r9
80009386:	f7 bc 03 ea 	sublo	r12,-22
8000938a:	f8 05 17 30 	movlo	r5,r12
8000938e:	f7 b5 02 0a 	subhs	r5,10
80009392:	e0 45 00 20 	cp.w	r5,32
80009396:	c0 d4       	brge	800093b0 <__avr32_f64_mul_op2_subnormal+0x36>
80009398:	ea 0c 11 20 	rsub	r12,r5,32
8000939c:	f2 05 09 49 	lsl	r9,r9,r5
800093a0:	f0 0c 0a 4c 	lsr	r12,r8,r12
800093a4:	18 49       	or	r9,r12
800093a6:	f0 05 09 48 	lsl	r8,r8,r5
800093aa:	20 25       	sub	r5,2
800093ac:	0a 16       	sub	r6,r5
800093ae:	c8 fb       	rjmp	800092cc <__avr32_f64_mul+0x30>
800093b0:	f0 05 09 49 	lsl	r9,r8,r5
800093b4:	c4 20       	breq	80009438 <__avr32_f64_mul_res_zero>
800093b6:	30 08       	mov	r8,0
800093b8:	20 25       	sub	r5,2
800093ba:	0a 16       	sub	r6,r5
800093bc:	c8 8b       	rjmp	800092cc <__avr32_f64_mul+0x30>

800093be <__avr32_f64_mul_op_nan_or_inf>:
800093be:	e4 19 00 0f 	andh	r9,0xf
800093c2:	e4 1b 00 0f 	andh	r11,0xf
800093c6:	14 4b       	or	r11,r10
800093c8:	10 49       	or	r9,r8
800093ca:	e0 47 07 ff 	cp.w	r7,2047
800093ce:	c0 91       	brne	800093e0 <__avr32_f64_mul_op1_not_naninf>
800093d0:	58 0b       	cp.w	r11,0
800093d2:	c3 81       	brne	80009442 <__avr32_f64_mul_res_nan>
800093d4:	e0 46 07 ff 	cp.w	r6,2047
800093d8:	c3 81       	brne	80009448 <__avr32_f64_mul_res_inf>
800093da:	58 09       	cp.w	r9,0
800093dc:	c3 60       	breq	80009448 <__avr32_f64_mul_res_inf>
800093de:	c3 28       	rjmp	80009442 <__avr32_f64_mul_res_nan>

800093e0 <__avr32_f64_mul_op1_not_naninf>:
800093e0:	58 09       	cp.w	r9,0
800093e2:	c3 30       	breq	80009448 <__avr32_f64_mul_res_inf>
800093e4:	c2 f8       	rjmp	80009442 <__avr32_f64_mul_res_nan>

800093e6 <__avr32_f64_mul_res_subnormal>:
800093e6:	5c 3c       	neg	r12
800093e8:	2f fc       	sub	r12,-1
800093ea:	f1 bc 04 c0 	satu	r12,0x6
800093ee:	e0 4c 00 20 	cp.w	r12,32
800093f2:	c1 14       	brge	80009414 <__avr32_f64_mul_res_subnormal+0x2e>
800093f4:	f8 08 11 20 	rsub	r8,r12,32
800093f8:	0e 46       	or	r6,r7
800093fa:	ee 0c 0a 47 	lsr	r7,r7,r12
800093fe:	f4 08 09 49 	lsl	r9,r10,r8
80009402:	12 47       	or	r7,r9
80009404:	f4 0c 0a 4a 	lsr	r10,r10,r12
80009408:	f6 08 09 49 	lsl	r9,r11,r8
8000940c:	12 4a       	or	r10,r9
8000940e:	f6 0c 0a 4b 	lsr	r11,r11,r12
80009412:	c8 3b       	rjmp	80009318 <__avr32_f64_mul+0x7c>
80009414:	f8 08 11 20 	rsub	r8,r12,32
80009418:	f9 b9 00 00 	moveq	r9,0
8000941c:	c0 30       	breq	80009422 <__avr32_f64_mul_res_subnormal+0x3c>
8000941e:	f6 08 09 49 	lsl	r9,r11,r8
80009422:	0e 46       	or	r6,r7
80009424:	ed ea 10 16 	or	r6,r6,r10<<0x1
80009428:	f4 0c 0a 4a 	lsr	r10,r10,r12
8000942c:	f3 ea 10 07 	or	r7,r9,r10
80009430:	f6 0c 0a 4a 	lsr	r10,r11,r12
80009434:	30 0b       	mov	r11,0
80009436:	c7 1b       	rjmp	80009318 <__avr32_f64_mul+0x7c>

80009438 <__avr32_f64_mul_res_zero>:
80009438:	1c 9b       	mov	r11,lr
8000943a:	e6 1b 80 00 	andh	r11,0x8000,COH
8000943e:	30 0a       	mov	r10,0
80009440:	d8 22       	popm	r4-r7,pc

80009442 <__avr32_f64_mul_res_nan>:
80009442:	3f fb       	mov	r11,-1
80009444:	3f fa       	mov	r10,-1
80009446:	d8 22       	popm	r4-r7,pc

80009448 <__avr32_f64_mul_res_inf>:
80009448:	f0 6b 00 00 	mov	r11,-1048576
8000944c:	ed be 00 1f 	bld	lr,0x1f
80009450:	ef bb 00 1f 	bst	r11,0x1f
80009454:	30 0a       	mov	r10,0
80009456:	d8 22       	popm	r4-r7,pc

80009458 <__avr32_f64_mul_op1_zero>:
80009458:	f7 e9 20 0b 	eor	r11,r11,r9
8000945c:	e6 1b 80 00 	andh	r11,0x8000,COH
80009460:	f9 d9 c2 8b 	bfextu	r12,r9,0x14,0xb
80009464:	e0 4c 07 ff 	cp.w	r12,2047
80009468:	5e 1c       	retne	r12
8000946a:	3f fa       	mov	r10,-1
8000946c:	3f fb       	mov	r11,-1
8000946e:	5e fc       	retal	r12

80009470 <__avr32_f64_sub_from_add>:
80009470:	ee 19 80 00 	eorh	r9,0x8000

80009474 <__avr32_f64_sub>:
80009474:	f7 e9 20 0c 	eor	r12,r11,r9
80009478:	e0 86 00 ca 	brmi	8000960c <__avr32_f64_add_from_sub>
8000947c:	eb cd 40 e0 	pushm	r5-r7,lr
80009480:	16 9c       	mov	r12,r11
80009482:	e6 1c 80 00 	andh	r12,0x8000,COH
80009486:	bf db       	cbr	r11,0x1f
80009488:	bf d9       	cbr	r9,0x1f
8000948a:	10 3a       	cp.w	r10,r8
8000948c:	f2 0b 13 00 	cpc	r11,r9
80009490:	c0 92       	brcc	800094a2 <__avr32_f64_sub+0x2e>
80009492:	16 97       	mov	r7,r11
80009494:	12 9b       	mov	r11,r9
80009496:	0e 99       	mov	r9,r7
80009498:	14 97       	mov	r7,r10
8000949a:	10 9a       	mov	r10,r8
8000949c:	0e 98       	mov	r8,r7
8000949e:	ee 1c 80 00 	eorh	r12,0x8000
800094a2:	f6 07 16 14 	lsr	r7,r11,0x14
800094a6:	ab 7b       	lsl	r11,0xb
800094a8:	f7 ea 13 5b 	or	r11,r11,r10>>0x15
800094ac:	ab 7a       	lsl	r10,0xb
800094ae:	bf bb       	sbr	r11,0x1f
800094b0:	f2 06 16 14 	lsr	r6,r9,0x14
800094b4:	c4 40       	breq	8000953c <__avr32_f64_sub_opL_subnormal>
800094b6:	ab 79       	lsl	r9,0xb
800094b8:	f3 e8 13 59 	or	r9,r9,r8>>0x15
800094bc:	ab 78       	lsl	r8,0xb
800094be:	bf b9       	sbr	r9,0x1f

800094c0 <__avr32_f64_sub_opL_subnormal_done>:
800094c0:	e0 47 07 ff 	cp.w	r7,2047
800094c4:	c4 f0       	breq	80009562 <__avr32_f64_sub_opH_nan_or_inf>
800094c6:	0e 26       	rsub	r6,r7
800094c8:	c1 20       	breq	800094ec <__avr32_f64_sub_shift_done>
800094ca:	ec 05 11 20 	rsub	r5,r6,32
800094ce:	e0 46 00 20 	cp.w	r6,32
800094d2:	c7 c2       	brcc	800095ca <__avr32_f64_sub_longshift>
800094d4:	f0 05 09 4e 	lsl	lr,r8,r5
800094d8:	f2 05 09 45 	lsl	r5,r9,r5
800094dc:	f0 06 0a 48 	lsr	r8,r8,r6
800094e0:	f2 06 0a 49 	lsr	r9,r9,r6
800094e4:	0a 48       	or	r8,r5
800094e6:	58 0e       	cp.w	lr,0
800094e8:	5f 1e       	srne	lr
800094ea:	1c 48       	or	r8,lr

800094ec <__avr32_f64_sub_shift_done>:
800094ec:	10 1a       	sub	r10,r8
800094ee:	f6 09 01 4b 	sbc	r11,r11,r9
800094f2:	f6 06 12 00 	clz	r6,r11
800094f6:	c0 e0       	breq	80009512 <__avr32_f64_sub_longnormalize_done>
800094f8:	c7 83       	brcs	800095e8 <__avr32_f64_sub_longnormalize>
800094fa:	ec 0e 11 20 	rsub	lr,r6,32
800094fe:	f6 06 09 4b 	lsl	r11,r11,r6
80009502:	f4 0e 0a 4e 	lsr	lr,r10,lr
80009506:	1c 4b       	or	r11,lr
80009508:	f4 06 09 4a 	lsl	r10,r10,r6
8000950c:	0c 17       	sub	r7,r6
8000950e:	e0 8a 00 39 	brle	80009580 <__avr32_f64_sub_subnormal_result>

80009512 <__avr32_f64_sub_longnormalize_done>:
80009512:	f4 09 15 15 	lsl	r9,r10,0x15
80009516:	ab 9a       	lsr	r10,0xb
80009518:	f5 eb 11 5a 	or	r10,r10,r11<<0x15
8000951c:	ab 9b       	lsr	r11,0xb
8000951e:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
80009522:	18 4b       	or	r11,r12

80009524 <__avr32_f64_sub_round>:
80009524:	fc 17 80 00 	movh	r7,0x8000
80009528:	ed ba 00 00 	bld	r10,0x0
8000952c:	f7 b7 01 ff 	subne	r7,-1
80009530:	0e 39       	cp.w	r9,r7
80009532:	5f 29       	srhs	r9
80009534:	12 0a       	add	r10,r9
80009536:	5c 0b       	acr	r11
80009538:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000953c <__avr32_f64_sub_opL_subnormal>:
8000953c:	ab 79       	lsl	r9,0xb
8000953e:	f3 e8 13 59 	or	r9,r9,r8>>0x15
80009542:	ab 78       	lsl	r8,0xb
80009544:	f3 e8 10 0e 	or	lr,r9,r8
80009548:	f9 b6 01 01 	movne	r6,1
8000954c:	ee 0e 11 00 	rsub	lr,r7,0
80009550:	f9 b7 00 01 	moveq	r7,1
80009554:	ef bb 00 1f 	bst	r11,0x1f
80009558:	f7 ea 10 0e 	or	lr,r11,r10
8000955c:	f9 b7 00 00 	moveq	r7,0
80009560:	cb 0b       	rjmp	800094c0 <__avr32_f64_sub_opL_subnormal_done>

80009562 <__avr32_f64_sub_opH_nan_or_inf>:
80009562:	bf db       	cbr	r11,0x1f
80009564:	f7 ea 10 0e 	or	lr,r11,r10
80009568:	c0 81       	brne	80009578 <__avr32_f64_sub_return_nan>
8000956a:	e0 46 07 ff 	cp.w	r6,2047
8000956e:	c0 50       	breq	80009578 <__avr32_f64_sub_return_nan>
80009570:	f9 e7 11 4b 	or	r11,r12,r7<<0x14
80009574:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80009578 <__avr32_f64_sub_return_nan>:
80009578:	3f fa       	mov	r10,-1
8000957a:	3f fb       	mov	r11,-1
8000957c:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80009580 <__avr32_f64_sub_subnormal_result>:
80009580:	5c 37       	neg	r7
80009582:	2f f7       	sub	r7,-1
80009584:	f1 b7 04 c0 	satu	r7,0x6
80009588:	e0 47 00 20 	cp.w	r7,32
8000958c:	c1 14       	brge	800095ae <__avr32_f64_sub_subnormal_result+0x2e>
8000958e:	ee 08 11 20 	rsub	r8,r7,32
80009592:	f4 08 09 49 	lsl	r9,r10,r8
80009596:	5f 16       	srne	r6
80009598:	f4 07 0a 4a 	lsr	r10,r10,r7
8000959c:	0c 4a       	or	r10,r6
8000959e:	f6 08 09 49 	lsl	r9,r11,r8
800095a2:	f5 e9 10 0a 	or	r10,r10,r9
800095a6:	f4 07 0a 4b 	lsr	r11,r10,r7
800095aa:	30 07       	mov	r7,0
800095ac:	cb 3b       	rjmp	80009512 <__avr32_f64_sub_longnormalize_done>
800095ae:	ee 08 11 40 	rsub	r8,r7,64
800095b2:	f6 08 09 49 	lsl	r9,r11,r8
800095b6:	14 49       	or	r9,r10
800095b8:	5f 16       	srne	r6
800095ba:	f6 07 0a 4a 	lsr	r10,r11,r7
800095be:	0c 4a       	or	r10,r6
800095c0:	30 0b       	mov	r11,0
800095c2:	30 07       	mov	r7,0
800095c4:	ca 7b       	rjmp	80009512 <__avr32_f64_sub_longnormalize_done>
800095c6:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

800095ca <__avr32_f64_sub_longshift>:
800095ca:	f1 b6 04 c0 	satu	r6,0x6
800095ce:	f0 0e 17 00 	moveq	lr,r8
800095d2:	c0 40       	breq	800095da <__avr32_f64_sub_longshift+0x10>
800095d4:	f2 05 09 4e 	lsl	lr,r9,r5
800095d8:	10 4e       	or	lr,r8
800095da:	f2 06 0a 48 	lsr	r8,r9,r6
800095de:	30 09       	mov	r9,0
800095e0:	58 0e       	cp.w	lr,0
800095e2:	5f 1e       	srne	lr
800095e4:	1c 48       	or	r8,lr
800095e6:	c8 3b       	rjmp	800094ec <__avr32_f64_sub_shift_done>

800095e8 <__avr32_f64_sub_longnormalize>:
800095e8:	f4 06 12 00 	clz	r6,r10
800095ec:	f9 b7 03 00 	movlo	r7,0
800095f0:	f9 b6 03 00 	movlo	r6,0
800095f4:	f9 bc 03 00 	movlo	r12,0
800095f8:	f7 b6 02 e0 	subhs	r6,-32
800095fc:	f4 06 09 4b 	lsl	r11,r10,r6
80009600:	30 0a       	mov	r10,0
80009602:	0c 17       	sub	r7,r6
80009604:	fe 9a ff be 	brle	80009580 <__avr32_f64_sub_subnormal_result>
80009608:	c8 5b       	rjmp	80009512 <__avr32_f64_sub_longnormalize_done>
8000960a:	d7 03       	nop

8000960c <__avr32_f64_add_from_sub>:
8000960c:	ee 19 80 00 	eorh	r9,0x8000

80009610 <__avr32_f64_add>:
80009610:	f7 e9 20 0c 	eor	r12,r11,r9
80009614:	fe 96 ff 2e 	brmi	80009470 <__avr32_f64_sub_from_add>
80009618:	eb cd 40 e0 	pushm	r5-r7,lr
8000961c:	16 9c       	mov	r12,r11
8000961e:	e6 1c 80 00 	andh	r12,0x8000,COH
80009622:	bf db       	cbr	r11,0x1f
80009624:	bf d9       	cbr	r9,0x1f
80009626:	12 3b       	cp.w	r11,r9
80009628:	c0 72       	brcc	80009636 <__avr32_f64_add+0x26>
8000962a:	16 97       	mov	r7,r11
8000962c:	12 9b       	mov	r11,r9
8000962e:	0e 99       	mov	r9,r7
80009630:	14 97       	mov	r7,r10
80009632:	10 9a       	mov	r10,r8
80009634:	0e 98       	mov	r8,r7
80009636:	30 0e       	mov	lr,0
80009638:	ef db c2 8b 	bfextu	r7,r11,0x14,0xb
8000963c:	f7 db c0 14 	bfextu	r11,r11,0x0,0x14
80009640:	b5 ab       	sbr	r11,0x14
80009642:	ed d9 c2 8b 	bfextu	r6,r9,0x14,0xb
80009646:	c6 20       	breq	8000970a <__avr32_f64_add_op2_subnormal>
80009648:	f3 d9 c0 14 	bfextu	r9,r9,0x0,0x14
8000964c:	b5 a9       	sbr	r9,0x14
8000964e:	e0 47 07 ff 	cp.w	r7,2047
80009652:	c2 80       	breq	800096a2 <__avr32_f64_add_opH_nan_or_inf>
80009654:	0e 26       	rsub	r6,r7
80009656:	c1 20       	breq	8000967a <__avr32_f64_add_shift_done>
80009658:	e0 46 00 36 	cp.w	r6,54
8000965c:	c1 52       	brcc	80009686 <__avr32_f64_add_res_of_done>
8000965e:	ec 05 11 20 	rsub	r5,r6,32
80009662:	e0 46 00 20 	cp.w	r6,32
80009666:	c3 52       	brcc	800096d0 <__avr32_f64_add_longshift>
80009668:	f0 05 09 4e 	lsl	lr,r8,r5
8000966c:	f2 05 09 45 	lsl	r5,r9,r5
80009670:	f0 06 0a 48 	lsr	r8,r8,r6
80009674:	f2 06 0a 49 	lsr	r9,r9,r6
80009678:	0a 48       	or	r8,r5

8000967a <__avr32_f64_add_shift_done>:
8000967a:	10 0a       	add	r10,r8
8000967c:	f6 09 00 4b 	adc	r11,r11,r9
80009680:	ed bb 00 15 	bld	r11,0x15
80009684:	c3 40       	breq	800096ec <__avr32_f64_add_res_of>

80009686 <__avr32_f64_add_res_of_done>:
80009686:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
8000968a:	18 4b       	or	r11,r12

8000968c <__avr32_f64_add_round>:
8000968c:	f9 da c0 01 	bfextu	r12,r10,0x0,0x1
80009690:	18 4e       	or	lr,r12
80009692:	ee 1e 80 00 	eorh	lr,0x8000
80009696:	f1 be 04 20 	satu	lr,0x1
8000969a:	1c 0a       	add	r10,lr
8000969c:	5c 0b       	acr	r11
8000969e:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

800096a2 <__avr32_f64_add_opH_nan_or_inf>:
800096a2:	b5 cb       	cbr	r11,0x14
800096a4:	f7 ea 10 0e 	or	lr,r11,r10
800096a8:	c1 01       	brne	800096c8 <__avr32_f64_add_return_nan>
800096aa:	e0 46 07 ff 	cp.w	r6,2047
800096ae:	c0 30       	breq	800096b4 <__avr32_f64_add_opL_nan_or_inf>
800096b0:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

800096b4 <__avr32_f64_add_opL_nan_or_inf>:
800096b4:	b5 c9       	cbr	r9,0x14
800096b6:	f3 e8 10 0e 	or	lr,r9,r8
800096ba:	c0 71       	brne	800096c8 <__avr32_f64_add_return_nan>
800096bc:	30 0a       	mov	r10,0
800096be:	fc 1b 7f f0 	movh	r11,0x7ff0
800096c2:	18 4b       	or	r11,r12
800096c4:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

800096c8 <__avr32_f64_add_return_nan>:
800096c8:	3f fa       	mov	r10,-1
800096ca:	3f fb       	mov	r11,-1
800096cc:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

800096d0 <__avr32_f64_add_longshift>:
800096d0:	f1 b6 04 c0 	satu	r6,0x6
800096d4:	f0 0e 17 00 	moveq	lr,r8
800096d8:	c0 60       	breq	800096e4 <__avr32_f64_add_longshift+0x14>
800096da:	f2 05 09 4e 	lsl	lr,r9,r5
800096de:	58 08       	cp.w	r8,0
800096e0:	5f 18       	srne	r8
800096e2:	10 4e       	or	lr,r8
800096e4:	f2 06 0a 48 	lsr	r8,r9,r6
800096e8:	30 09       	mov	r9,0
800096ea:	cc 8b       	rjmp	8000967a <__avr32_f64_add_shift_done>

800096ec <__avr32_f64_add_res_of>:
800096ec:	fd ee 10 1e 	or	lr,lr,lr<<0x1
800096f0:	a1 9b       	lsr	r11,0x1
800096f2:	5d 0a       	ror	r10
800096f4:	5d 0e       	ror	lr
800096f6:	2f f7       	sub	r7,-1
800096f8:	e0 47 07 ff 	cp.w	r7,2047
800096fc:	f9 ba 00 00 	moveq	r10,0
80009700:	f9 bb 00 00 	moveq	r11,0
80009704:	f9 be 00 00 	moveq	lr,0
80009708:	cb fb       	rjmp	80009686 <__avr32_f64_add_res_of_done>

8000970a <__avr32_f64_add_op2_subnormal>:
8000970a:	30 16       	mov	r6,1
8000970c:	58 07       	cp.w	r7,0
8000970e:	ca 01       	brne	8000964e <__avr32_f64_add+0x3e>
80009710:	b5 cb       	cbr	r11,0x14
80009712:	10 0a       	add	r10,r8
80009714:	f6 09 00 4b 	adc	r11,r11,r9
80009718:	18 4b       	or	r11,r12
8000971a:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000971e:	d7 03       	nop

80009720 <__avr32_f64_to_u32>:
80009720:	58 0b       	cp.w	r11,0
80009722:	5e 6d       	retmi	0

80009724 <__avr32_f64_to_s32>:
80009724:	f6 0c 15 01 	lsl	r12,r11,0x1
80009728:	b5 9c       	lsr	r12,0x15
8000972a:	e0 2c 03 ff 	sub	r12,1023
8000972e:	5e 3d       	retlo	0
80009730:	f8 0c 11 1f 	rsub	r12,r12,31
80009734:	16 99       	mov	r9,r11
80009736:	ab 7b       	lsl	r11,0xb
80009738:	bf bb       	sbr	r11,0x1f
8000973a:	f7 ea 13 5b 	or	r11,r11,r10>>0x15
8000973e:	f6 0c 0a 4b 	lsr	r11,r11,r12
80009742:	a1 79       	lsl	r9,0x1
80009744:	5e 2b       	reths	r11
80009746:	5c 3b       	neg	r11
80009748:	5e fb       	retal	r11

8000974a <__avr32_u32_to_f64>:
8000974a:	f8 cb 00 00 	sub	r11,r12,0
8000974e:	30 0c       	mov	r12,0
80009750:	c0 38       	rjmp	80009756 <__avr32_s32_to_f64+0x4>

80009752 <__avr32_s32_to_f64>:
80009752:	18 9b       	mov	r11,r12
80009754:	5c 4b       	abs	r11
80009756:	30 0a       	mov	r10,0
80009758:	5e 0b       	reteq	r11
8000975a:	d4 01       	pushm	lr
8000975c:	e0 69 04 1e 	mov	r9,1054
80009760:	f6 08 12 00 	clz	r8,r11
80009764:	c1 70       	breq	80009792 <__avr32_s32_to_f64+0x40>
80009766:	c0 c3       	brcs	8000977e <__avr32_s32_to_f64+0x2c>
80009768:	f0 0e 11 20 	rsub	lr,r8,32
8000976c:	f6 08 09 4b 	lsl	r11,r11,r8
80009770:	f4 0e 0a 4e 	lsr	lr,r10,lr
80009774:	1c 4b       	or	r11,lr
80009776:	f4 08 09 4a 	lsl	r10,r10,r8
8000977a:	10 19       	sub	r9,r8
8000977c:	c0 b8       	rjmp	80009792 <__avr32_s32_to_f64+0x40>
8000977e:	f4 08 12 00 	clz	r8,r10
80009782:	f9 b8 03 00 	movlo	r8,0
80009786:	f7 b8 02 e0 	subhs	r8,-32
8000978a:	f4 08 09 4b 	lsl	r11,r10,r8
8000978e:	30 0a       	mov	r10,0
80009790:	10 19       	sub	r9,r8
80009792:	58 09       	cp.w	r9,0
80009794:	e0 89 00 30 	brgt	800097f4 <__avr32_s32_to_f64+0xa2>
80009798:	5c 39       	neg	r9
8000979a:	2f f9       	sub	r9,-1
8000979c:	e0 49 00 36 	cp.w	r9,54
800097a0:	c0 43       	brcs	800097a8 <__avr32_s32_to_f64+0x56>
800097a2:	30 0b       	mov	r11,0
800097a4:	30 0a       	mov	r10,0
800097a6:	c2 68       	rjmp	800097f2 <__avr32_s32_to_f64+0xa0>
800097a8:	2f 69       	sub	r9,-10
800097aa:	f2 08 11 20 	rsub	r8,r9,32
800097ae:	e0 49 00 20 	cp.w	r9,32
800097b2:	c0 b2       	brcc	800097c8 <__avr32_s32_to_f64+0x76>
800097b4:	f4 08 09 4e 	lsl	lr,r10,r8
800097b8:	f6 08 09 48 	lsl	r8,r11,r8
800097bc:	f4 09 0a 4a 	lsr	r10,r10,r9
800097c0:	f6 09 0a 4b 	lsr	r11,r11,r9
800097c4:	10 4b       	or	r11,r8
800097c6:	c0 88       	rjmp	800097d6 <__avr32_s32_to_f64+0x84>
800097c8:	f6 08 09 4e 	lsl	lr,r11,r8
800097cc:	14 4e       	or	lr,r10
800097ce:	16 9a       	mov	r10,r11
800097d0:	30 0b       	mov	r11,0
800097d2:	f4 09 0a 4a 	lsr	r10,r10,r9
800097d6:	ed ba 00 00 	bld	r10,0x0
800097da:	c0 92       	brcc	800097ec <__avr32_s32_to_f64+0x9a>
800097dc:	1c 7e       	tst	lr,lr
800097de:	c0 41       	brne	800097e6 <__avr32_s32_to_f64+0x94>
800097e0:	ed ba 00 01 	bld	r10,0x1
800097e4:	c0 42       	brcc	800097ec <__avr32_s32_to_f64+0x9a>
800097e6:	2f fa       	sub	r10,-1
800097e8:	f7 bb 02 ff 	subhs	r11,-1
800097ec:	5c fc       	rol	r12
800097ee:	5d 0b       	ror	r11
800097f0:	5d 0a       	ror	r10
800097f2:	d8 02       	popm	pc
800097f4:	e0 68 03 ff 	mov	r8,1023
800097f8:	ed ba 00 0b 	bld	r10,0xb
800097fc:	f7 b8 00 ff 	subeq	r8,-1
80009800:	10 0a       	add	r10,r8
80009802:	5c 0b       	acr	r11
80009804:	f7 b9 03 fe 	sublo	r9,-2
80009808:	e0 49 07 ff 	cp.w	r9,2047
8000980c:	c0 55       	brlt	80009816 <__avr32_s32_to_f64+0xc4>
8000980e:	30 0a       	mov	r10,0
80009810:	fc 1b ff e0 	movh	r11,0xffe0
80009814:	c0 c8       	rjmp	8000982c <__floatsidf_return_op1>
80009816:	ed bb 00 1f 	bld	r11,0x1f
8000981a:	f7 b9 01 01 	subne	r9,1
8000981e:	ab 9a       	lsr	r10,0xb
80009820:	f5 eb 11 5a 	or	r10,r10,r11<<0x15
80009824:	a1 7b       	lsl	r11,0x1
80009826:	ab 9b       	lsr	r11,0xb
80009828:	f7 e9 11 5b 	or	r11,r11,r9<<0x15

8000982c <__floatsidf_return_op1>:
8000982c:	a1 7c       	lsl	r12,0x1
8000982e:	5d 0b       	ror	r11
80009830:	d8 02       	popm	pc

80009832 <__avr32_f64_cmp_eq>:
80009832:	10 3a       	cp.w	r10,r8
80009834:	f2 0b 13 00 	cpc	r11,r9
80009838:	c0 80       	breq	80009848 <__avr32_f64_cmp_eq+0x16>
8000983a:	a1 7b       	lsl	r11,0x1
8000983c:	a1 79       	lsl	r9,0x1
8000983e:	14 4b       	or	r11,r10
80009840:	12 4b       	or	r11,r9
80009842:	10 4b       	or	r11,r8
80009844:	5e 0f       	reteq	1
80009846:	5e fd       	retal	0
80009848:	a1 7b       	lsl	r11,0x1
8000984a:	fc 1c ff e0 	movh	r12,0xffe0
8000984e:	58 0a       	cp.w	r10,0
80009850:	f8 0b 13 00 	cpc	r11,r12
80009854:	5e 8f       	retls	1
80009856:	5e fd       	retal	0

80009858 <__avr32_f64_cmp_ge>:
80009858:	1a de       	st.w	--sp,lr
8000985a:	1a d7       	st.w	--sp,r7
8000985c:	a1 7b       	lsl	r11,0x1
8000985e:	5f 3c       	srlo	r12
80009860:	a1 79       	lsl	r9,0x1
80009862:	5f 37       	srlo	r7
80009864:	5c fc       	rol	r12
80009866:	fc 1e ff e0 	movh	lr,0xffe0
8000986a:	58 0a       	cp.w	r10,0
8000986c:	fc 0b 13 00 	cpc	r11,lr
80009870:	e0 8b 00 1d 	brhi	800098aa <__avr32_f64_cmp_ge+0x52>
80009874:	58 08       	cp.w	r8,0
80009876:	fc 09 13 00 	cpc	r9,lr
8000987a:	e0 8b 00 18 	brhi	800098aa <__avr32_f64_cmp_ge+0x52>
8000987e:	58 0b       	cp.w	r11,0
80009880:	f5 ba 00 00 	subfeq	r10,0
80009884:	c1 50       	breq	800098ae <__avr32_f64_cmp_ge+0x56>
80009886:	1b 07       	ld.w	r7,sp++
80009888:	1b 0e       	ld.w	lr,sp++
8000988a:	58 3c       	cp.w	r12,3
8000988c:	c0 a0       	breq	800098a0 <__avr32_f64_cmp_ge+0x48>
8000988e:	58 1c       	cp.w	r12,1
80009890:	c0 33       	brcs	80009896 <__avr32_f64_cmp_ge+0x3e>
80009892:	5e 0f       	reteq	1
80009894:	5e 1d       	retne	0
80009896:	10 3a       	cp.w	r10,r8
80009898:	f2 0b 13 00 	cpc	r11,r9
8000989c:	5e 2f       	reths	1
8000989e:	5e 3d       	retlo	0
800098a0:	14 38       	cp.w	r8,r10
800098a2:	f6 09 13 00 	cpc	r9,r11
800098a6:	5e 2f       	reths	1
800098a8:	5e 3d       	retlo	0
800098aa:	1b 07       	ld.w	r7,sp++
800098ac:	d8 0a       	popm	pc,r12=0
800098ae:	58 17       	cp.w	r7,1
800098b0:	5f 0c       	sreq	r12
800098b2:	58 09       	cp.w	r9,0
800098b4:	f5 b8 00 00 	subfeq	r8,0
800098b8:	1b 07       	ld.w	r7,sp++
800098ba:	1b 0e       	ld.w	lr,sp++
800098bc:	5e 0f       	reteq	1
800098be:	5e fc       	retal	r12

800098c0 <__avr32_f64_cmp_lt>:
800098c0:	1a de       	st.w	--sp,lr
800098c2:	1a d7       	st.w	--sp,r7
800098c4:	a1 7b       	lsl	r11,0x1
800098c6:	5f 3c       	srlo	r12
800098c8:	a1 79       	lsl	r9,0x1
800098ca:	5f 37       	srlo	r7
800098cc:	5c fc       	rol	r12
800098ce:	fc 1e ff e0 	movh	lr,0xffe0
800098d2:	58 0a       	cp.w	r10,0
800098d4:	fc 0b 13 00 	cpc	r11,lr
800098d8:	e0 8b 00 1d 	brhi	80009912 <__avr32_f64_cmp_lt+0x52>
800098dc:	58 08       	cp.w	r8,0
800098de:	fc 09 13 00 	cpc	r9,lr
800098e2:	e0 8b 00 18 	brhi	80009912 <__avr32_f64_cmp_lt+0x52>
800098e6:	58 0b       	cp.w	r11,0
800098e8:	f5 ba 00 00 	subfeq	r10,0
800098ec:	c1 50       	breq	80009916 <__avr32_f64_cmp_lt+0x56>
800098ee:	1b 07       	ld.w	r7,sp++
800098f0:	1b 0e       	ld.w	lr,sp++
800098f2:	58 3c       	cp.w	r12,3
800098f4:	c0 a0       	breq	80009908 <__avr32_f64_cmp_lt+0x48>
800098f6:	58 1c       	cp.w	r12,1
800098f8:	c0 33       	brcs	800098fe <__avr32_f64_cmp_lt+0x3e>
800098fa:	5e 0d       	reteq	0
800098fc:	5e 1f       	retne	1
800098fe:	10 3a       	cp.w	r10,r8
80009900:	f2 0b 13 00 	cpc	r11,r9
80009904:	5e 2d       	reths	0
80009906:	5e 3f       	retlo	1
80009908:	14 38       	cp.w	r8,r10
8000990a:	f6 09 13 00 	cpc	r9,r11
8000990e:	5e 2d       	reths	0
80009910:	5e 3f       	retlo	1
80009912:	1b 07       	ld.w	r7,sp++
80009914:	d8 0a       	popm	pc,r12=0
80009916:	58 17       	cp.w	r7,1
80009918:	5f 1c       	srne	r12
8000991a:	58 09       	cp.w	r9,0
8000991c:	f5 b8 00 00 	subfeq	r8,0
80009920:	1b 07       	ld.w	r7,sp++
80009922:	1b 0e       	ld.w	lr,sp++
80009924:	5e 0d       	reteq	0
80009926:	5e fc       	retal	r12

80009928 <__avr32_f64_div>:
80009928:	eb cd 40 ff 	pushm	r0-r7,lr
8000992c:	f7 e9 20 0e 	eor	lr,r11,r9
80009930:	f6 07 16 14 	lsr	r7,r11,0x14
80009934:	a9 7b       	lsl	r11,0x9
80009936:	f7 ea 13 7b 	or	r11,r11,r10>>0x17
8000993a:	a9 7a       	lsl	r10,0x9
8000993c:	bd bb       	sbr	r11,0x1d
8000993e:	e4 1b 3f ff 	andh	r11,0x3fff
80009942:	ab d7       	cbr	r7,0xb
80009944:	e0 80 00 cc 	breq	80009adc <__avr32_f64_div_round_subnormal+0x54>
80009948:	e0 47 07 ff 	cp.w	r7,2047
8000994c:	e0 84 00 b5 	brge	80009ab6 <__avr32_f64_div_round_subnormal+0x2e>
80009950:	f2 06 16 14 	lsr	r6,r9,0x14
80009954:	a9 79       	lsl	r9,0x9
80009956:	f3 e8 13 79 	or	r9,r9,r8>>0x17
8000995a:	a9 78       	lsl	r8,0x9
8000995c:	bd b9       	sbr	r9,0x1d
8000995e:	e4 19 3f ff 	andh	r9,0x3fff
80009962:	ab d6       	cbr	r6,0xb
80009964:	e0 80 00 e2 	breq	80009b28 <__avr32_f64_div_round_subnormal+0xa0>
80009968:	e0 46 07 ff 	cp.w	r6,2047
8000996c:	e0 84 00 b2 	brge	80009ad0 <__avr32_f64_div_round_subnormal+0x48>
80009970:	0c 17       	sub	r7,r6
80009972:	fe 37 fc 01 	sub	r7,-1023
80009976:	fc 1c 80 00 	movh	r12,0x8000
8000997a:	f8 03 16 01 	lsr	r3,r12,0x1
8000997e:	e9 d9 c3 62 	bfextu	r4,r9,0x1b,0x2
80009982:	5c d4       	com	r4
80009984:	e7 d4 d3 82 	bfins	r3,r4,0x1c,0x2
80009988:	e6 09 06 44 	mulu.d	r4,r3,r9
8000998c:	f8 05 01 25 	sub	r5,r12,r5<<0x2
80009990:	e6 05 06 44 	mulu.d	r4,r3,r5
80009994:	ea 03 15 02 	lsl	r3,r5,0x2
80009998:	e6 09 06 44 	mulu.d	r4,r3,r9
8000999c:	f8 05 01 25 	sub	r5,r12,r5<<0x2
800099a0:	e6 05 06 44 	mulu.d	r4,r3,r5
800099a4:	ea 03 15 02 	lsl	r3,r5,0x2
800099a8:	e6 09 06 44 	mulu.d	r4,r3,r9
800099ac:	f8 05 01 25 	sub	r5,r12,r5<<0x2
800099b0:	e6 05 06 44 	mulu.d	r4,r3,r5
800099b4:	ea 03 15 02 	lsl	r3,r5,0x2
800099b8:	e6 08 06 40 	mulu.d	r0,r3,r8
800099bc:	e4 09 07 40 	macu.d	r0,r2,r9
800099c0:	e6 09 06 44 	mulu.d	r4,r3,r9
800099c4:	02 04       	add	r4,r1
800099c6:	5c 05       	acr	r5
800099c8:	a3 65       	lsl	r5,0x2
800099ca:	eb e4 13 e5 	or	r5,r5,r4>>0x1e
800099ce:	a3 64       	lsl	r4,0x2
800099d0:	5c 34       	neg	r4
800099d2:	f8 05 01 45 	sbc	r5,r12,r5
800099d6:	e6 04 06 40 	mulu.d	r0,r3,r4
800099da:	e4 05 07 40 	macu.d	r0,r2,r5
800099de:	e6 05 06 44 	mulu.d	r4,r3,r5
800099e2:	02 04       	add	r4,r1
800099e4:	5c 05       	acr	r5
800099e6:	ea 03 15 02 	lsl	r3,r5,0x2
800099ea:	e7 e4 13 e3 	or	r3,r3,r4>>0x1e
800099ee:	e8 02 15 02 	lsl	r2,r4,0x2
800099f2:	e6 08 06 40 	mulu.d	r0,r3,r8
800099f6:	e4 09 07 40 	macu.d	r0,r2,r9
800099fa:	e6 09 06 44 	mulu.d	r4,r3,r9
800099fe:	02 04       	add	r4,r1
80009a00:	5c 05       	acr	r5
80009a02:	a3 65       	lsl	r5,0x2
80009a04:	eb e4 13 e5 	or	r5,r5,r4>>0x1e
80009a08:	a3 64       	lsl	r4,0x2
80009a0a:	5c 34       	neg	r4
80009a0c:	f8 05 01 45 	sbc	r5,r12,r5
80009a10:	e6 04 06 40 	mulu.d	r0,r3,r4
80009a14:	e4 05 07 40 	macu.d	r0,r2,r5
80009a18:	e6 05 06 44 	mulu.d	r4,r3,r5
80009a1c:	02 04       	add	r4,r1
80009a1e:	5c 05       	acr	r5
80009a20:	ea 03 15 02 	lsl	r3,r5,0x2
80009a24:	e7 e4 13 e3 	or	r3,r3,r4>>0x1e
80009a28:	e8 02 15 02 	lsl	r2,r4,0x2
80009a2c:	e6 0a 06 40 	mulu.d	r0,r3,r10
80009a30:	e4 0b 07 40 	macu.d	r0,r2,r11
80009a34:	e6 0b 06 42 	mulu.d	r2,r3,r11
80009a38:	02 02       	add	r2,r1
80009a3a:	5c 03       	acr	r3
80009a3c:	ed b3 00 1c 	bld	r3,0x1c
80009a40:	c0 90       	breq	80009a52 <__avr32_f64_div+0x12a>
80009a42:	a1 72       	lsl	r2,0x1
80009a44:	5c f3       	rol	r3
80009a46:	20 17       	sub	r7,1
80009a48:	a3 9a       	lsr	r10,0x3
80009a4a:	f5 eb 11 da 	or	r10,r10,r11<<0x1d
80009a4e:	a3 9b       	lsr	r11,0x3
80009a50:	c0 58       	rjmp	80009a5a <__avr32_f64_div+0x132>
80009a52:	a5 8a       	lsr	r10,0x4
80009a54:	f5 eb 11 ca 	or	r10,r10,r11<<0x1c
80009a58:	a5 8b       	lsr	r11,0x4
80009a5a:	58 07       	cp.w	r7,0
80009a5c:	e0 8a 00 8b 	brle	80009b72 <__avr32_f64_div_res_subnormal>
80009a60:	e0 12 ff 00 	andl	r2,0xff00
80009a64:	e8 12 00 80 	orl	r2,0x80
80009a68:	e6 08 06 40 	mulu.d	r0,r3,r8
80009a6c:	e4 09 07 40 	macu.d	r0,r2,r9
80009a70:	e4 08 06 44 	mulu.d	r4,r2,r8
80009a74:	e6 09 06 48 	mulu.d	r8,r3,r9
80009a78:	00 05       	add	r5,r0
80009a7a:	f0 01 00 48 	adc	r8,r8,r1
80009a7e:	5c 09       	acr	r9
80009a80:	f9 d2 c1 01 	bfextu	r12,r2,0x8,0x1
80009a84:	58 04       	cp.w	r4,0
80009a86:	5c 25       	cpc	r5

80009a88 <__avr32_f64_div_round_subnormal>:
80009a88:	f4 08 13 00 	cpc	r8,r10
80009a8c:	f6 09 13 00 	cpc	r9,r11
80009a90:	5f 36       	srlo	r6
80009a92:	f8 06 17 00 	moveq	r6,r12
80009a96:	e4 0a 16 08 	lsr	r10,r2,0x8
80009a9a:	f5 e3 11 8a 	or	r10,r10,r3<<0x18
80009a9e:	e6 0b 16 08 	lsr	r11,r3,0x8
80009aa2:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
80009aa6:	ed be 00 1f 	bld	lr,0x1f
80009aaa:	ef bb 00 1f 	bst	r11,0x1f
80009aae:	0c 0a       	add	r10,r6
80009ab0:	5c 0b       	acr	r11
80009ab2:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
80009ab6:	e4 1b 00 0f 	andh	r11,0xf
80009aba:	14 4b       	or	r11,r10
80009abc:	e0 81 00 a7 	brne	80009c0a <__avr32_f64_div_res_subnormal+0x98>
80009ac0:	f2 06 16 14 	lsr	r6,r9,0x14
80009ac4:	ab d6       	cbr	r6,0xb
80009ac6:	e0 46 07 ff 	cp.w	r6,2047
80009aca:	e0 81 00 a4 	brne	80009c12 <__avr32_f64_div_res_subnormal+0xa0>
80009ace:	c9 e8       	rjmp	80009c0a <__avr32_f64_div_res_subnormal+0x98>
80009ad0:	e4 19 00 0f 	andh	r9,0xf
80009ad4:	10 49       	or	r9,r8
80009ad6:	e0 81 00 9a 	brne	80009c0a <__avr32_f64_div_res_subnormal+0x98>
80009ada:	c9 28       	rjmp	80009bfe <__avr32_f64_div_res_subnormal+0x8c>
80009adc:	a3 7b       	lsl	r11,0x3
80009ade:	f7 ea 13 db 	or	r11,r11,r10>>0x1d
80009ae2:	a3 7a       	lsl	r10,0x3
80009ae4:	f5 eb 10 04 	or	r4,r10,r11
80009ae8:	e0 80 00 a0 	breq	80009c28 <__avr32_f64_div_op1_zero>
80009aec:	f6 04 12 00 	clz	r4,r11
80009af0:	c1 70       	breq	80009b1e <__avr32_f64_div_round_subnormal+0x96>
80009af2:	c0 c3       	brcs	80009b0a <__avr32_f64_div_round_subnormal+0x82>
80009af4:	e8 05 11 20 	rsub	r5,r4,32
80009af8:	f6 04 09 4b 	lsl	r11,r11,r4
80009afc:	f4 05 0a 45 	lsr	r5,r10,r5
80009b00:	0a 4b       	or	r11,r5
80009b02:	f4 04 09 4a 	lsl	r10,r10,r4
80009b06:	08 17       	sub	r7,r4
80009b08:	c0 b8       	rjmp	80009b1e <__avr32_f64_div_round_subnormal+0x96>
80009b0a:	f4 04 12 00 	clz	r4,r10
80009b0e:	f9 b4 03 00 	movlo	r4,0
80009b12:	f7 b4 02 e0 	subhs	r4,-32
80009b16:	f4 04 09 4b 	lsl	r11,r10,r4
80009b1a:	30 0a       	mov	r10,0
80009b1c:	08 17       	sub	r7,r4
80009b1e:	a3 8a       	lsr	r10,0x2
80009b20:	f5 eb 11 ea 	or	r10,r10,r11<<0x1e
80009b24:	a3 8b       	lsr	r11,0x2
80009b26:	c1 1b       	rjmp	80009948 <__avr32_f64_div+0x20>
80009b28:	a3 79       	lsl	r9,0x3
80009b2a:	f3 e8 13 d9 	or	r9,r9,r8>>0x1d
80009b2e:	a3 78       	lsl	r8,0x3
80009b30:	f3 e8 10 04 	or	r4,r9,r8
80009b34:	c6 f0       	breq	80009c12 <__avr32_f64_div_res_subnormal+0xa0>
80009b36:	f2 04 12 00 	clz	r4,r9
80009b3a:	c1 70       	breq	80009b68 <__avr32_f64_div_round_subnormal+0xe0>
80009b3c:	c0 c3       	brcs	80009b54 <__avr32_f64_div_round_subnormal+0xcc>
80009b3e:	e8 05 11 20 	rsub	r5,r4,32
80009b42:	f2 04 09 49 	lsl	r9,r9,r4
80009b46:	f0 05 0a 45 	lsr	r5,r8,r5
80009b4a:	0a 49       	or	r9,r5
80009b4c:	f0 04 09 48 	lsl	r8,r8,r4
80009b50:	08 16       	sub	r6,r4
80009b52:	c0 b8       	rjmp	80009b68 <__avr32_f64_div_round_subnormal+0xe0>
80009b54:	f0 04 12 00 	clz	r4,r8
80009b58:	f9 b4 03 00 	movlo	r4,0
80009b5c:	f7 b4 02 e0 	subhs	r4,-32
80009b60:	f0 04 09 49 	lsl	r9,r8,r4
80009b64:	30 08       	mov	r8,0
80009b66:	08 16       	sub	r6,r4
80009b68:	a3 88       	lsr	r8,0x2
80009b6a:	f1 e9 11 e8 	or	r8,r8,r9<<0x1e
80009b6e:	a3 89       	lsr	r9,0x2
80009b70:	cf ca       	rjmp	80009968 <__avr32_f64_div+0x40>

80009b72 <__avr32_f64_div_res_subnormal>:
80009b72:	5c 37       	neg	r7
80009b74:	2f f7       	sub	r7,-1
80009b76:	f1 b7 04 c0 	satu	r7,0x6
80009b7a:	e0 47 00 20 	cp.w	r7,32
80009b7e:	c1 54       	brge	80009ba8 <__avr32_f64_div_res_subnormal+0x36>
80009b80:	ee 06 11 20 	rsub	r6,r7,32
80009b84:	e4 07 0a 42 	lsr	r2,r2,r7
80009b88:	e6 06 09 4c 	lsl	r12,r3,r6
80009b8c:	18 42       	or	r2,r12
80009b8e:	e6 07 0a 43 	lsr	r3,r3,r7
80009b92:	f4 06 09 41 	lsl	r1,r10,r6
80009b96:	f4 07 0a 4a 	lsr	r10,r10,r7
80009b9a:	f6 06 09 4c 	lsl	r12,r11,r6
80009b9e:	18 4a       	or	r10,r12
80009ba0:	f6 07 0a 4b 	lsr	r11,r11,r7
80009ba4:	30 00       	mov	r0,0
80009ba6:	c1 58       	rjmp	80009bd0 <__avr32_f64_div_res_subnormal+0x5e>
80009ba8:	ee 06 11 20 	rsub	r6,r7,32
80009bac:	f9 b0 00 00 	moveq	r0,0
80009bb0:	f9 bc 00 00 	moveq	r12,0
80009bb4:	c0 50       	breq	80009bbe <__avr32_f64_div_res_subnormal+0x4c>
80009bb6:	f4 06 09 40 	lsl	r0,r10,r6
80009bba:	f6 06 09 4c 	lsl	r12,r11,r6
80009bbe:	e6 07 0a 42 	lsr	r2,r3,r7
80009bc2:	30 03       	mov	r3,0
80009bc4:	f4 07 0a 41 	lsr	r1,r10,r7
80009bc8:	18 41       	or	r1,r12
80009bca:	f6 07 0a 4a 	lsr	r10,r11,r7
80009bce:	30 0b       	mov	r11,0
80009bd0:	e0 12 ff 00 	andl	r2,0xff00
80009bd4:	e8 12 00 80 	orl	r2,0x80
80009bd8:	e6 08 06 46 	mulu.d	r6,r3,r8
80009bdc:	e4 09 07 46 	macu.d	r6,r2,r9
80009be0:	e4 08 06 44 	mulu.d	r4,r2,r8
80009be4:	e6 09 06 48 	mulu.d	r8,r3,r9
80009be8:	0c 05       	add	r5,r6
80009bea:	f0 07 00 48 	adc	r8,r8,r7
80009bee:	5c 09       	acr	r9
80009bf0:	30 07       	mov	r7,0
80009bf2:	f9 d2 c1 01 	bfextu	r12,r2,0x8,0x1
80009bf6:	00 34       	cp.w	r4,r0
80009bf8:	e2 05 13 00 	cpc	r5,r1
80009bfc:	c4 6b       	rjmp	80009a88 <__avr32_f64_div_round_subnormal>
80009bfe:	1c 9b       	mov	r11,lr
80009c00:	e6 1b 80 00 	andh	r11,0x8000,COH
80009c04:	30 0a       	mov	r10,0
80009c06:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
80009c0a:	3f fb       	mov	r11,-1
80009c0c:	30 0a       	mov	r10,0
80009c0e:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
80009c12:	f5 eb 10 04 	or	r4,r10,r11
80009c16:	c0 90       	breq	80009c28 <__avr32_f64_div_op1_zero>
80009c18:	1c 9b       	mov	r11,lr
80009c1a:	e6 1b 80 00 	andh	r11,0x8000,COH
80009c1e:	ea 1b 7f f0 	orh	r11,0x7ff0
80009c22:	30 0a       	mov	r10,0
80009c24:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc

80009c28 <__avr32_f64_div_op1_zero>:
80009c28:	f1 e9 10 15 	or	r5,r8,r9<<0x1
80009c2c:	ce f0       	breq	80009c0a <__avr32_f64_div_res_subnormal+0x98>
80009c2e:	e9 d9 c2 8b 	bfextu	r4,r9,0x14,0xb
80009c32:	e0 44 07 ff 	cp.w	r4,2047
80009c36:	ce 41       	brne	80009bfe <__avr32_f64_div_res_subnormal+0x8c>
80009c38:	f1 e9 10 c5 	or	r5,r8,r9<<0xc
80009c3c:	ce 10       	breq	80009bfe <__avr32_f64_div_res_subnormal+0x8c>
80009c3e:	ce 6b       	rjmp	80009c0a <__avr32_f64_div_res_subnormal+0x98>

80009c40 <__avr32_umod64>:
80009c40:	d4 31       	pushm	r0-r7,lr
80009c42:	1a 97       	mov	r7,sp
80009c44:	20 3d       	sub	sp,12
80009c46:	10 9c       	mov	r12,r8
80009c48:	12 95       	mov	r5,r9
80009c4a:	14 9e       	mov	lr,r10
80009c4c:	16 91       	mov	r1,r11
80009c4e:	16 96       	mov	r6,r11
80009c50:	58 09       	cp.w	r9,0
80009c52:	e0 81 00 81 	brne	80009d54 <__avr32_umod64+0x114>
80009c56:	16 38       	cp.w	r8,r11
80009c58:	e0 88 00 12 	brls	80009c7c <__avr32_umod64+0x3c>
80009c5c:	f0 08 12 00 	clz	r8,r8
80009c60:	c4 e0       	breq	80009cfc <__avr32_umod64+0xbc>
80009c62:	f6 08 09 46 	lsl	r6,r11,r8
80009c66:	f8 08 09 4c 	lsl	r12,r12,r8
80009c6a:	f0 0b 11 20 	rsub	r11,r8,32
80009c6e:	f4 08 09 4e 	lsl	lr,r10,r8
80009c72:	f4 0b 0a 4b 	lsr	r11,r10,r11
80009c76:	f7 e6 10 06 	or	r6,r11,r6
80009c7a:	c4 18       	rjmp	80009cfc <__avr32_umod64+0xbc>
80009c7c:	58 08       	cp.w	r8,0
80009c7e:	c0 51       	brne	80009c88 <__avr32_umod64+0x48>
80009c80:	30 19       	mov	r9,1
80009c82:	f2 08 0d 08 	divu	r8,r9,r8
80009c86:	10 9c       	mov	r12,r8
80009c88:	f8 08 12 00 	clz	r8,r12
80009c8c:	c0 31       	brne	80009c92 <__avr32_umod64+0x52>
80009c8e:	18 16       	sub	r6,r12
80009c90:	c3 68       	rjmp	80009cfc <__avr32_umod64+0xbc>
80009c92:	f0 03 11 20 	rsub	r3,r8,32
80009c96:	f4 03 0a 4b 	lsr	r11,r10,r3
80009c9a:	f8 08 09 4c 	lsl	r12,r12,r8
80009c9e:	ec 08 09 49 	lsl	r9,r6,r8
80009ca2:	ec 03 0a 43 	lsr	r3,r6,r3
80009ca6:	f7 e9 10 09 	or	r9,r11,r9
80009caa:	f8 05 16 10 	lsr	r5,r12,0x10
80009cae:	ed dc c0 10 	bfextu	r6,r12,0x0,0x10
80009cb2:	e6 05 0d 02 	divu	r2,r3,r5
80009cb6:	f2 0e 16 10 	lsr	lr,r9,0x10
80009cba:	ec 02 02 4b 	mul	r11,r6,r2
80009cbe:	fd e3 11 0e 	or	lr,lr,r3<<0x10
80009cc2:	16 3e       	cp.w	lr,r11
80009cc4:	c0 72       	brcc	80009cd2 <__avr32_umod64+0x92>
80009cc6:	18 0e       	add	lr,r12
80009cc8:	18 3e       	cp.w	lr,r12
80009cca:	c0 43       	brcs	80009cd2 <__avr32_umod64+0x92>
80009ccc:	16 3e       	cp.w	lr,r11
80009cce:	fd dc e3 0e 	addcs	lr,lr,r12
80009cd2:	fc 0b 01 03 	sub	r3,lr,r11
80009cd6:	f3 d9 c0 10 	bfextu	r9,r9,0x0,0x10
80009cda:	e6 05 0d 02 	divu	r2,r3,r5
80009cde:	f3 e3 11 09 	or	r9,r9,r3<<0x10
80009ce2:	a5 36       	mul	r6,r2
80009ce4:	0c 39       	cp.w	r9,r6
80009ce6:	c0 72       	brcc	80009cf4 <__avr32_umod64+0xb4>
80009ce8:	18 09       	add	r9,r12
80009cea:	18 39       	cp.w	r9,r12
80009cec:	c0 43       	brcs	80009cf4 <__avr32_umod64+0xb4>
80009cee:	0c 39       	cp.w	r9,r6
80009cf0:	f3 dc e3 09 	addcs	r9,r9,r12
80009cf4:	f2 06 01 06 	sub	r6,r9,r6
80009cf8:	f4 08 09 4e 	lsl	lr,r10,r8
80009cfc:	f8 0a 16 10 	lsr	r10,r12,0x10
80009d00:	eb dc c0 10 	bfextu	r5,r12,0x0,0x10
80009d04:	ec 0a 0d 02 	divu	r2,r6,r10
80009d08:	fc 09 16 10 	lsr	r9,lr,0x10
80009d0c:	ea 02 02 4b 	mul	r11,r5,r2
80009d10:	f3 e3 11 09 	or	r9,r9,r3<<0x10
80009d14:	16 39       	cp.w	r9,r11
80009d16:	c0 72       	brcc	80009d24 <__avr32_umod64+0xe4>
80009d18:	18 09       	add	r9,r12
80009d1a:	18 39       	cp.w	r9,r12
80009d1c:	c0 43       	brcs	80009d24 <__avr32_umod64+0xe4>
80009d1e:	16 39       	cp.w	r9,r11
80009d20:	f3 dc e3 09 	addcs	r9,r9,r12
80009d24:	f2 0b 01 0b 	sub	r11,r9,r11
80009d28:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
80009d2c:	f6 0a 0d 0a 	divu	r10,r11,r10
80009d30:	fd eb 11 0e 	or	lr,lr,r11<<0x10
80009d34:	ea 0a 02 4a 	mul	r10,r5,r10
80009d38:	14 3e       	cp.w	lr,r10
80009d3a:	c0 72       	brcc	80009d48 <__avr32_umod64+0x108>
80009d3c:	18 0e       	add	lr,r12
80009d3e:	18 3e       	cp.w	lr,r12
80009d40:	c0 43       	brcs	80009d48 <__avr32_umod64+0x108>
80009d42:	14 3e       	cp.w	lr,r10
80009d44:	fd dc e3 0e 	addcs	lr,lr,r12
80009d48:	fc 0a 01 0a 	sub	r10,lr,r10
80009d4c:	30 0b       	mov	r11,0
80009d4e:	f4 08 0a 4a 	lsr	r10,r10,r8
80009d52:	c7 b8       	rjmp	80009e48 <__avr32_umod64+0x208>
80009d54:	16 39       	cp.w	r9,r11
80009d56:	e0 8b 00 79 	brhi	80009e48 <__avr32_umod64+0x208>
80009d5a:	f2 09 12 00 	clz	r9,r9
80009d5e:	c1 21       	brne	80009d82 <__avr32_umod64+0x142>
80009d60:	10 3a       	cp.w	r10,r8
80009d62:	5f 2b       	srhs	r11
80009d64:	0a 31       	cp.w	r1,r5
80009d66:	5f ba       	srhi	r10
80009d68:	f7 ea 10 0a 	or	r10,r11,r10
80009d6c:	f2 0a 18 00 	cp.b	r10,r9
80009d70:	c0 60       	breq	80009d7c <__avr32_umod64+0x13c>
80009d72:	fc 08 01 0c 	sub	r12,lr,r8
80009d76:	e2 05 01 46 	sbc	r6,r1,r5
80009d7a:	18 9e       	mov	lr,r12
80009d7c:	0c 9b       	mov	r11,r6
80009d7e:	1c 9a       	mov	r10,lr
80009d80:	c6 48       	rjmp	80009e48 <__avr32_umod64+0x208>
80009d82:	ea 09 09 4c 	lsl	r12,r5,r9
80009d86:	f2 06 11 20 	rsub	r6,r9,32
80009d8a:	f6 09 09 4b 	lsl	r11,r11,r9
80009d8e:	f0 09 09 42 	lsl	r2,r8,r9
80009d92:	ef 46 ff f4 	st.w	r7[-12],r6
80009d96:	f0 06 0a 48 	lsr	r8,r8,r6
80009d9a:	18 48       	or	r8,r12
80009d9c:	e2 06 0a 4c 	lsr	r12,r1,r6
80009da0:	f4 09 09 43 	lsl	r3,r10,r9
80009da4:	fd d8 c0 10 	bfextu	lr,r8,0x0,0x10
80009da8:	f4 06 0a 4a 	lsr	r10,r10,r6
80009dac:	16 4a       	or	r10,r11
80009dae:	f0 0b 16 10 	lsr	r11,r8,0x10
80009db2:	f8 0b 0d 04 	divu	r4,r12,r11
80009db6:	f4 0c 16 10 	lsr	r12,r10,0x10
80009dba:	08 91       	mov	r1,r4
80009dbc:	f9 e5 11 0c 	or	r12,r12,r5<<0x10
80009dc0:	e8 0e 02 46 	mul	r6,r4,lr
80009dc4:	0c 3c       	cp.w	r12,r6
80009dc6:	c0 a2       	brcc	80009dda <__avr32_umod64+0x19a>
80009dc8:	20 11       	sub	r1,1
80009dca:	10 0c       	add	r12,r8
80009dcc:	10 3c       	cp.w	r12,r8
80009dce:	c0 63       	brcs	80009dda <__avr32_umod64+0x19a>
80009dd0:	0c 3c       	cp.w	r12,r6
80009dd2:	f7 b1 03 01 	sublo	r1,1
80009dd6:	f9 d8 e3 0c 	addcs	r12,r12,r8
80009dda:	0c 1c       	sub	r12,r6
80009ddc:	f5 da c0 10 	bfextu	r10,r10,0x0,0x10
80009de0:	f8 0b 0d 04 	divu	r4,r12,r11
80009de4:	f5 e5 11 0b 	or	r11,r10,r5<<0x10
80009de8:	08 96       	mov	r6,r4
80009dea:	e8 0e 02 4e 	mul	lr,r4,lr
80009dee:	1c 3b       	cp.w	r11,lr
80009df0:	c0 a2       	brcc	80009e04 <__avr32_umod64+0x1c4>
80009df2:	20 16       	sub	r6,1
80009df4:	10 0b       	add	r11,r8
80009df6:	10 3b       	cp.w	r11,r8
80009df8:	c0 63       	brcs	80009e04 <__avr32_umod64+0x1c4>
80009dfa:	1c 3b       	cp.w	r11,lr
80009dfc:	f7 b6 03 01 	sublo	r6,1
80009e00:	f7 d8 e3 0b 	addcs	r11,r11,r8
80009e04:	ed e1 11 01 	or	r1,r6,r1<<0x10
80009e08:	1c 1b       	sub	r11,lr
80009e0a:	e2 02 06 40 	mulu.d	r0,r1,r2
80009e0e:	00 9e       	mov	lr,r0
80009e10:	02 9c       	mov	r12,r1
80009e12:	16 3c       	cp.w	r12,r11
80009e14:	e0 8b 00 08 	brhi	80009e24 <__avr32_umod64+0x1e4>
80009e18:	5f 06       	sreq	r6
80009e1a:	06 30       	cp.w	r0,r3
80009e1c:	5f ba       	srhi	r10
80009e1e:	ed ea 00 0a 	and	r10,r6,r10
80009e22:	c0 60       	breq	80009e2e <__avr32_umod64+0x1ee>
80009e24:	fc 02 01 04 	sub	r4,lr,r2
80009e28:	f8 08 01 4c 	sbc	r12,r12,r8
80009e2c:	08 9e       	mov	lr,r4
80009e2e:	e6 0e 01 0a 	sub	r10,r3,lr
80009e32:	f6 0c 01 4c 	sbc	r12,r11,r12
80009e36:	ee f1 ff f4 	ld.w	r1,r7[-12]
80009e3a:	f8 09 0a 4b 	lsr	r11,r12,r9
80009e3e:	f4 09 0a 4a 	lsr	r10,r10,r9
80009e42:	f8 01 09 4c 	lsl	r12,r12,r1
80009e46:	18 4a       	or	r10,r12
80009e48:	2f dd       	sub	sp,-12
80009e4a:	d8 32       	popm	r0-r7,pc

Disassembly of section .exception:

8000a000 <_evba>:
_evba:

	.org  0x000
	// Unrecoverable Exception.
_handle_Unrecoverable_Exception:
	rjmp $
8000a000:	c0 08       	rjmp	8000a000 <_evba>
	...

8000a004 <_handle_TLB_Multiple_Hit>:

	.org  0x004
	// TLB Multiple Hit.
_handle_TLB_Multiple_Hit:
	rjmp $
8000a004:	c0 08       	rjmp	8000a004 <_handle_TLB_Multiple_Hit>
	...

8000a008 <_handle_Bus_Error_Data_Fetch>:

	.org  0x008
	// Bus Error Data Fetch.
_handle_Bus_Error_Data_Fetch:
	rjmp $
8000a008:	c0 08       	rjmp	8000a008 <_handle_Bus_Error_Data_Fetch>
	...

8000a00c <_handle_Bus_Error_Instruction_Fetch>:

	.org  0x00C
	// Bus Error Instruction Fetch.
_handle_Bus_Error_Instruction_Fetch:
	rjmp $
8000a00c:	c0 08       	rjmp	8000a00c <_handle_Bus_Error_Instruction_Fetch>
	...

8000a010 <_handle_NMI>:

	.org  0x010
	// NMI.
_handle_NMI:
	rjmp $
8000a010:	c0 08       	rjmp	8000a010 <_handle_NMI>
	...

8000a014 <_handle_Instruction_Address>:

	.org  0x014
	// Instruction Address.
_handle_Instruction_Address:
	rjmp $
8000a014:	c0 08       	rjmp	8000a014 <_handle_Instruction_Address>
	...

8000a018 <_handle_ITLB_Protection>:

	.org  0x018
	// ITLB Protection.
_handle_ITLB_Protection:
	rjmp $
8000a018:	c0 08       	rjmp	8000a018 <_handle_ITLB_Protection>
	...

8000a01c <_handle_Breakpoint>:

	.org  0x01C
	// Breakpoint.
_handle_Breakpoint:
	rjmp $
8000a01c:	c0 08       	rjmp	8000a01c <_handle_Breakpoint>
	...

8000a020 <_handle_Illegal_Opcode>:

	.org  0x020
	// Illegal Opcode.
_handle_Illegal_Opcode:
	rjmp $
8000a020:	c0 08       	rjmp	8000a020 <_handle_Illegal_Opcode>
	...

8000a024 <_handle_Unimplemented_Instruction>:

	.org  0x024
	// Unimplemented Instruction.
_handle_Unimplemented_Instruction:
	rjmp $
8000a024:	c0 08       	rjmp	8000a024 <_handle_Unimplemented_Instruction>
	...

8000a028 <_handle_Privilege_Violation>:

	.org  0x028
	// Privilege Violation.
_handle_Privilege_Violation:
	rjmp $
8000a028:	c0 08       	rjmp	8000a028 <_handle_Privilege_Violation>
	...

8000a02c <_handle_Floating_Point>:

	.org  0x02C
	// Floating-Point: UNUSED IN AVR32UC and AVR32AP.
_handle_Floating_Point:
	rjmp $
8000a02c:	c0 08       	rjmp	8000a02c <_handle_Floating_Point>
	...

8000a030 <_handle_Coprocessor_Absent>:

	.org  0x030
	// Coprocessor Absent: UNUSED IN AVR32UC.
_handle_Coprocessor_Absent:
	rjmp $
8000a030:	c0 08       	rjmp	8000a030 <_handle_Coprocessor_Absent>
	...

8000a034 <_handle_Data_Address_Read>:

	.org  0x034
	// Data Address (Read).
_handle_Data_Address_Read:
	rjmp $
8000a034:	c0 08       	rjmp	8000a034 <_handle_Data_Address_Read>
	...

8000a038 <_handle_Data_Address_Write>:

	.org  0x038
	// Data Address (Write).
_handle_Data_Address_Write:
	rjmp $
8000a038:	c0 08       	rjmp	8000a038 <_handle_Data_Address_Write>
	...

8000a03c <_handle_DTLB_Protection_Read>:

	.org  0x03C
	// DTLB Protection (Read).
_handle_DTLB_Protection_Read:
	rjmp $
8000a03c:	c0 08       	rjmp	8000a03c <_handle_DTLB_Protection_Read>
	...

8000a040 <_handle_DTLB_Protection_Write>:

	.org  0x040
	// DTLB Protection (Write).
_handle_DTLB_Protection_Write:
	rjmp $
8000a040:	c0 08       	rjmp	8000a040 <_handle_DTLB_Protection_Write>
	...

8000a044 <_handle_DTLB_Modified>:

	.org  0x044
	// DTLB Modified: UNUSED IN AVR32UC.
_handle_DTLB_Modified:
	rjmp $
8000a044:	c0 08       	rjmp	8000a044 <_handle_DTLB_Modified>
	...

8000a050 <_handle_ITLB_Miss>:

	.org  0x050
	// ITLB Miss.
_handle_ITLB_Miss:
	rjmp $
8000a050:	c0 08       	rjmp	8000a050 <_handle_ITLB_Miss>
	...

8000a060 <_handle_DTLB_Miss_Read>:

	.org  0x060
	// DTLB Miss (Read).
_handle_DTLB_Miss_Read:
	rjmp $
8000a060:	c0 08       	rjmp	8000a060 <_handle_DTLB_Miss_Read>
	...

8000a070 <_handle_DTLB_Miss_Write>:

	.org  0x070
	// DTLB Miss (Write).
_handle_DTLB_Miss_Write:
	rjmp $
8000a070:	c0 08       	rjmp	8000a070 <_handle_DTLB_Miss_Write>
	...

8000a100 <_handle_Supervisor_Call>:

	.org  0x100
	// Supervisor Call.
_handle_Supervisor_Call:
	rjmp $
8000a100:	c0 08       	rjmp	8000a100 <_handle_Supervisor_Call>
8000a102:	d7 03       	nop

8000a104 <_int0>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
8000a104:	30 0c       	mov	r12,0
8000a106:	fe b0 ce 53 	rcall	80003dac <_get_interrupt_handler>
8000a10a:	58 0c       	cp.w	r12,0
8000a10c:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000a110:	d6 03       	rete

8000a112 <_int1>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
8000a112:	30 1c       	mov	r12,1
8000a114:	fe b0 ce 4c 	rcall	80003dac <_get_interrupt_handler>
8000a118:	58 0c       	cp.w	r12,0
8000a11a:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000a11e:	d6 03       	rete

8000a120 <_int2>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
8000a120:	30 2c       	mov	r12,2
8000a122:	fe b0 ce 45 	rcall	80003dac <_get_interrupt_handler>
8000a126:	58 0c       	cp.w	r12,0
8000a128:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000a12c:	d6 03       	rete

8000a12e <_int3>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
8000a12e:	30 3c       	mov	r12,3
8000a130:	fe b0 ce 3e 	rcall	80003dac <_get_interrupt_handler>
8000a134:	58 0c       	cp.w	r12,0
8000a136:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000a13a:	d6 03       	rete
8000a13c:	d7 03       	nop
8000a13e:	d7 03       	nop
8000a140:	d7 03       	nop
8000a142:	d7 03       	nop
8000a144:	d7 03       	nop
8000a146:	d7 03       	nop
8000a148:	d7 03       	nop
8000a14a:	d7 03       	nop
8000a14c:	d7 03       	nop
8000a14e:	d7 03       	nop
8000a150:	d7 03       	nop
8000a152:	d7 03       	nop
8000a154:	d7 03       	nop
8000a156:	d7 03       	nop
8000a158:	d7 03       	nop
8000a15a:	d7 03       	nop
8000a15c:	d7 03       	nop
8000a15e:	d7 03       	nop
8000a160:	d7 03       	nop
8000a162:	d7 03       	nop
8000a164:	d7 03       	nop
8000a166:	d7 03       	nop
8000a168:	d7 03       	nop
8000a16a:	d7 03       	nop
8000a16c:	d7 03       	nop
8000a16e:	d7 03       	nop
8000a170:	d7 03       	nop
8000a172:	d7 03       	nop
8000a174:	d7 03       	nop
8000a176:	d7 03       	nop
8000a178:	d7 03       	nop
8000a17a:	d7 03       	nop
8000a17c:	d7 03       	nop
8000a17e:	d7 03       	nop
8000a180:	d7 03       	nop
8000a182:	d7 03       	nop
8000a184:	d7 03       	nop
8000a186:	d7 03       	nop
8000a188:	d7 03       	nop
8000a18a:	d7 03       	nop
8000a18c:	d7 03       	nop
8000a18e:	d7 03       	nop
8000a190:	d7 03       	nop
8000a192:	d7 03       	nop
8000a194:	d7 03       	nop
8000a196:	d7 03       	nop
8000a198:	d7 03       	nop
8000a19a:	d7 03       	nop
8000a19c:	d7 03       	nop
8000a19e:	d7 03       	nop
8000a1a0:	d7 03       	nop
8000a1a2:	d7 03       	nop
8000a1a4:	d7 03       	nop
8000a1a6:	d7 03       	nop
8000a1a8:	d7 03       	nop
8000a1aa:	d7 03       	nop
8000a1ac:	d7 03       	nop
8000a1ae:	d7 03       	nop
8000a1b0:	d7 03       	nop
8000a1b2:	d7 03       	nop
8000a1b4:	d7 03       	nop
8000a1b6:	d7 03       	nop
8000a1b8:	d7 03       	nop
8000a1ba:	d7 03       	nop
8000a1bc:	d7 03       	nop
8000a1be:	d7 03       	nop
8000a1c0:	d7 03       	nop
8000a1c2:	d7 03       	nop
8000a1c4:	d7 03       	nop
8000a1c6:	d7 03       	nop
8000a1c8:	d7 03       	nop
8000a1ca:	d7 03       	nop
8000a1cc:	d7 03       	nop
8000a1ce:	d7 03       	nop
8000a1d0:	d7 03       	nop
8000a1d2:	d7 03       	nop
8000a1d4:	d7 03       	nop
8000a1d6:	d7 03       	nop
8000a1d8:	d7 03       	nop
8000a1da:	d7 03       	nop
8000a1dc:	d7 03       	nop
8000a1de:	d7 03       	nop
8000a1e0:	d7 03       	nop
8000a1e2:	d7 03       	nop
8000a1e4:	d7 03       	nop
8000a1e6:	d7 03       	nop
8000a1e8:	d7 03       	nop
8000a1ea:	d7 03       	nop
8000a1ec:	d7 03       	nop
8000a1ee:	d7 03       	nop
8000a1f0:	d7 03       	nop
8000a1f2:	d7 03       	nop
8000a1f4:	d7 03       	nop
8000a1f6:	d7 03       	nop
8000a1f8:	d7 03       	nop
8000a1fa:	d7 03       	nop
8000a1fc:	d7 03       	nop
8000a1fe:	d7 03       	nop
