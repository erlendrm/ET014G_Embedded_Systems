
Lab_3_Task.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00002008  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80002008  80002008  00002408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00009348  80002008  80002008  00002408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .exception    00000200  8000b400  8000b400  0000b800  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       00000804  8000b600  8000b600  0000ba00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .lalign       00000004  8000be04  8000be04  0000c204  2**0
                  ALLOC
  6 .dalign       00000004  00000004  00000004  00000000  2**0
                  ALLOC
  7 .data         00000520  00000008  8000be08  0000c408  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          00000180  00000528  00000528  00000000  2**2
                  ALLOC
  9 .heap         0000e958  000006a8  000006a8  00000000  2**0
                  ALLOC
 10 .comment      00000030  00000000  00000000  0000c928  2**0
                  CONTENTS, READONLY
 11 .debug_aranges 00001000  00000000  00000000  0000c958  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubnames 00001fbf  00000000  00000000  0000d958  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_info   00022cfd  00000000  00000000  0000f917  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 000052e7  00000000  00000000  00032614  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000fbd6  00000000  00000000  000378fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00002c4c  00000000  00000000  000474d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000050c9  00000000  00000000  0004a120  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_loc    0000a4a7  00000000  00000000  0004f1e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_macinfo 00c0f81a  00000000  00000000  00059690  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .stack        00001000  0000f000  0000f000  00000000  2**0
                  ALLOC
 21 .debug_ranges 00001080  00000000  00000000  00c68eb0  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_start>:

  .global _start
  .type _start, @function
_start:
  // Jump to the C runtime startup routine.
  lda.w   pc, _stext
80000000:	fe cf b3 00 	sub	pc,pc,-19712

80000004 <_trampoline>:
80000004:	e0 8f 10 00 	bral	80002004 <program_start>
	...

80002004 <program_start>:
  rjmp    program_start

  .org  PROGRAM_START_OFFSET
program_start:
  // Jump to the C runtime startup routine.
  lda.w   pc, _stext
80002004:	fe cf d3 04 	sub	pc,pc,-11516

Disassembly of section .text:

80002008 <sdramc_ck_delay>:
80002008:	eb cd 40 80 	pushm	r7,lr
/*! \brief Waits during at least the specified delay before returning.
 *
 * \param ck Number of HSB clock cycles to wait.
 */
static void sdramc_ck_delay(unsigned long ck)
{
8000200c:	1a 97       	mov	r7,sp
8000200e:	20 3d       	sub	sp,12
80002010:	ef 4c ff f4 	st.w	r7[-12],r12
  // Use the CPU cycle counter (CPU and HSB clocks are the same).
  unsigned long delay_start_cycle = Get_system_register(AVR32_COUNT);
80002014:	e1 b8 00 42 	mfsr	r8,0x108
80002018:	ef 48 ff f8 	st.w	r7[-8],r8
  unsigned long delay_end_cycle = delay_start_cycle + ck;
8000201c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002020:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002024:	f2 08 00 08 	add	r8,r9,r8
80002028:	ef 48 ff fc 	st.w	r7[-4],r8

  // To be safer, the end of wait is based on an inequality test, so CPU cycle
  // counter wrap around is checked.
  if (delay_start_cycle > delay_end_cycle)
8000202c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002030:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002034:	10 39       	cp.w	r9,r8
80002036:	e0 88 00 0a 	brls	8000204a <sdramc_ck_delay+0x42>
  {
    while ((unsigned long)Get_system_register(AVR32_COUNT) > delay_end_cycle);
8000203a:	e1 b8 00 42 	mfsr	r8,0x108
8000203e:	10 99       	mov	r9,r8
80002040:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002044:	10 39       	cp.w	r9,r8
80002046:	fe 9b ff fa 	brhi	8000203a <sdramc_ck_delay+0x32>
  }
  while ((unsigned long)Get_system_register(AVR32_COUNT) < delay_end_cycle);
8000204a:	e1 b8 00 42 	mfsr	r8,0x108
8000204e:	10 99       	mov	r9,r8
80002050:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002054:	10 39       	cp.w	r9,r8
80002056:	cf a3       	brcs	8000204a <sdramc_ck_delay+0x42>
}
80002058:	2f dd       	sub	sp,-12
8000205a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000205e:	d7 03       	nop

80002060 <sdramc_enable_muxed_pins>:
/*! \brief Puts the multiplexed MCU pins used for the SDRAM under control of the
 *         SDRAMC.
 */
#if ( UC3A0 || UC3A3)
static void sdramc_enable_muxed_pins(void)
{
80002060:	eb cd 40 80 	pushm	r7,lr
80002064:	1a 97       	mov	r7,sp
    // Enable clock-related pins.
    {AVR32_EBI_SDCK_0_PIN,            AVR32_EBI_SDCK_0_FUNCTION           },
    {AVR32_EBI_SDCKE_0_PIN,           AVR32_EBI_SDCKE_0_FUNCTION          }
  };

  gpio_enable_module(SDRAMC_EBI_GPIO_MAP, sizeof(SDRAMC_EBI_GPIO_MAP) / sizeof(SDRAMC_EBI_GPIO_MAP[0]));
80002066:	32 7b       	mov	r11,39
80002068:	48 3c       	lddpc	r12,80002074 <sdramc_enable_muxed_pins+0x14>
8000206a:	f0 1f 00 04 	mcall	80002078 <sdramc_enable_muxed_pins+0x18>
}
8000206e:	e3 cd 80 80 	ldm	sp++,r7,pc
80002072:	00 00       	add	r0,r0
80002074:	80 00       	ld.sh	r0,r0[0x0]
80002076:	b6 00       	st.h	r11[0x0],r0
80002078:	80 00       	ld.sh	r0,r0[0x0]
8000207a:	44 c0       	lddsp	r0,sp[0x130]

8000207c <sdramc_init>:
{
}
#endif

void sdramc_init(unsigned long hsb_hz)
{
8000207c:	eb cd 40 80 	pushm	r7,lr
80002080:	1a 97       	mov	r7,sp
80002082:	20 5d       	sub	sp,20
80002084:	ef 4c ff ec 	st.w	r7[-20],r12
  unsigned long hsb_mhz_dn = hsb_hz / 1000000;
80002088:	ee f9 ff ec 	ld.w	r9,r7[-20]
8000208c:	e0 68 de 83 	mov	r8,56963
80002090:	ea 18 43 1b 	orh	r8,0x431b
80002094:	f2 08 06 48 	mulu.d	r8,r9,r8
80002098:	f2 08 16 12 	lsr	r8,r9,0x12
8000209c:	ef 48 ff f0 	st.w	r7[-16],r8
  unsigned long hsb_mhz_up = (hsb_hz + 999999) / 1000000;
800020a0:	ee f8 ff ec 	ld.w	r8,r7[-20]
800020a4:	ee 7a 42 3f 	mov	r10,999999
800020a8:	f0 0a 00 09 	add	r9,r8,r10
800020ac:	e0 68 de 83 	mov	r8,56963
800020b0:	ea 18 43 1b 	orh	r8,0x431b
800020b4:	f2 08 06 48 	mulu.d	r8,r9,r8
800020b8:	f2 08 16 12 	lsr	r8,r9,0x12
800020bc:	ef 48 ff f4 	st.w	r7[-12],r8
  volatile ATPASTE2(U, SDRAM_DBW) *sdram = SDRAM;
800020c0:	fc 18 d0 00 	movh	r8,0xd000
800020c4:	ef 48 ff f8 	st.w	r7[-8],r8
  unsigned int i;

  // Put the multiplexed MCU pins used for the SDRAM under control of the SDRAMC.
  sdramc_enable_muxed_pins();
800020c8:	f0 1f 00 90 	mcall	80002308 <sdramc_init+0x28c>

  // Enable SDRAM mode for CS1.
#if (defined AVR32_HMATRIX)
  AVR32_HMATRIX.sfr[AVR32_EBI_HMATRIX_NR] |= 1 << AVR32_EBI_SDRAM_CS;
800020cc:	fe 68 10 00 	mov	r8,-126976
800020d0:	fe 69 10 00 	mov	r9,-126976
800020d4:	f2 f9 01 24 	ld.w	r9,r9[292]
800020d8:	a1 b9       	sbr	r9,0x1
800020da:	f1 49 01 24 	st.w	r8[292],r9
  AVR32_HMATRIX.sfr[AVR32_EBI_HMATRIX_NR];
800020de:	fe 68 10 00 	mov	r8,-126976
800020e2:	f0 f8 01 24 	ld.w	r8,r8[292]
  AVR32_HMATRIXB.sfr[AVR32_EBI_HMATRIX_NR];
#endif

  // Configure the SDRAM Controller with SDRAM setup and timing information.
  // All timings below are rounded up because they are minimal values.
  AVR32_SDRAMC.cr =
800020e6:	fe 6a 20 00 	mov	r10,-122880
      ((( SDRAM_COL_BITS                 -    8) << AVR32_SDRAMC_CR_NC_OFFSET  ) & AVR32_SDRAMC_CR_NC_MASK  ) |
      ((( SDRAM_ROW_BITS                 -   11) << AVR32_SDRAMC_CR_NR_OFFSET  ) & AVR32_SDRAMC_CR_NR_MASK  ) |
      ((( SDRAM_BANK_BITS                -    1) << AVR32_SDRAMC_CR_NB_OFFSET  ) & AVR32_SDRAMC_CR_NB_MASK  ) |
      ((  SDRAM_CAS                              << AVR32_SDRAMC_CR_CAS_OFFSET ) & AVR32_SDRAMC_CR_CAS_MASK ) |
      ((( SDRAM_DBW                      >>   4) << AVR32_SDRAMC_CR_DBW_OFFSET ) & AVR32_SDRAMC_CR_DBW_MASK ) |
      ((((SDRAM_TWR  * hsb_mhz_up + 999) / 1000) << AVR32_SDRAMC_CR_TWR_OFFSET ) & AVR32_SDRAMC_CR_TWR_MASK ) |
800020ea:	ee f9 ff f4 	ld.w	r9,r7[-12]
800020ee:	12 98       	mov	r8,r9
800020f0:	a3 78       	lsl	r8,0x3
800020f2:	12 18       	sub	r8,r9
800020f4:	a1 78       	lsl	r8,0x1
800020f6:	f0 c9 fc 19 	sub	r9,r8,-999
800020fa:	e0 68 4d d3 	mov	r8,19923
800020fe:	ea 18 10 62 	orh	r8,0x1062
80002102:	f2 08 06 48 	mulu.d	r8,r9,r8
80002106:	f2 08 16 06 	lsr	r8,r9,0x6
8000210a:	a9 68       	lsl	r8,0x8
8000210c:	10 9b       	mov	r11,r8
8000210e:	e2 1b 0f 00 	andl	r11,0xf00,COH
      ((((SDRAM_TRC  * hsb_mhz_up + 999) / 1000) << AVR32_SDRAMC_CR_TRC_OFFSET ) & AVR32_SDRAMC_CR_TRC_MASK ) |
80002112:	ee f9 ff f4 	ld.w	r9,r7[-12]
80002116:	12 98       	mov	r8,r9
80002118:	a5 68       	lsl	r8,0x4
8000211a:	12 18       	sub	r8,r9
8000211c:	a3 68       	lsl	r8,0x2
8000211e:	f0 c9 fc 19 	sub	r9,r8,-999
80002122:	e0 68 4d d3 	mov	r8,19923
80002126:	ea 18 10 62 	orh	r8,0x1062
8000212a:	f2 08 06 48 	mulu.d	r8,r9,r8
8000212e:	f2 08 16 06 	lsr	r8,r9,0x6
80002132:	ad 68       	lsl	r8,0xc
80002134:	f1 d8 c0 10 	bfextu	r8,r8,0x0,0x10
#endif

  // Configure the SDRAM Controller with SDRAM setup and timing information.
  // All timings below are rounded up because they are minimal values.
  AVR32_SDRAMC.cr =
      ((( SDRAM_COL_BITS                 -    8) << AVR32_SDRAMC_CR_NC_OFFSET  ) & AVR32_SDRAMC_CR_NC_MASK  ) |
80002138:	10 4b       	or	r11,r8
      ((( SDRAM_BANK_BITS                -    1) << AVR32_SDRAMC_CR_NB_OFFSET  ) & AVR32_SDRAMC_CR_NB_MASK  ) |
      ((  SDRAM_CAS                              << AVR32_SDRAMC_CR_CAS_OFFSET ) & AVR32_SDRAMC_CR_CAS_MASK ) |
      ((( SDRAM_DBW                      >>   4) << AVR32_SDRAMC_CR_DBW_OFFSET ) & AVR32_SDRAMC_CR_DBW_MASK ) |
      ((((SDRAM_TWR  * hsb_mhz_up + 999) / 1000) << AVR32_SDRAMC_CR_TWR_OFFSET ) & AVR32_SDRAMC_CR_TWR_MASK ) |
      ((((SDRAM_TRC  * hsb_mhz_up + 999) / 1000) << AVR32_SDRAMC_CR_TRC_OFFSET ) & AVR32_SDRAMC_CR_TRC_MASK ) |
      ((((SDRAM_TRP  * hsb_mhz_up + 999) / 1000) << AVR32_SDRAMC_CR_TRP_OFFSET ) & AVR32_SDRAMC_CR_TRP_MASK ) |
8000213a:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000213e:	12 98       	mov	r8,r9
80002140:	a5 68       	lsl	r8,0x4
80002142:	12 18       	sub	r8,r9
80002144:	f0 c9 fc 19 	sub	r9,r8,-999
80002148:	e0 68 4d d3 	mov	r8,19923
8000214c:	ea 18 10 62 	orh	r8,0x1062
80002150:	f2 08 06 48 	mulu.d	r8,r9,r8
80002154:	f2 08 16 06 	lsr	r8,r9,0x6
80002158:	b1 68       	lsl	r8,0x10
8000215a:	e6 18 00 0f 	andh	r8,0xf,COH
#endif

  // Configure the SDRAM Controller with SDRAM setup and timing information.
  // All timings below are rounded up because they are minimal values.
  AVR32_SDRAMC.cr =
      ((( SDRAM_COL_BITS                 -    8) << AVR32_SDRAMC_CR_NC_OFFSET  ) & AVR32_SDRAMC_CR_NC_MASK  ) |
8000215e:	10 4b       	or	r11,r8
      ((  SDRAM_CAS                              << AVR32_SDRAMC_CR_CAS_OFFSET ) & AVR32_SDRAMC_CR_CAS_MASK ) |
      ((( SDRAM_DBW                      >>   4) << AVR32_SDRAMC_CR_DBW_OFFSET ) & AVR32_SDRAMC_CR_DBW_MASK ) |
      ((((SDRAM_TWR  * hsb_mhz_up + 999) / 1000) << AVR32_SDRAMC_CR_TWR_OFFSET ) & AVR32_SDRAMC_CR_TWR_MASK ) |
      ((((SDRAM_TRC  * hsb_mhz_up + 999) / 1000) << AVR32_SDRAMC_CR_TRC_OFFSET ) & AVR32_SDRAMC_CR_TRC_MASK ) |
      ((((SDRAM_TRP  * hsb_mhz_up + 999) / 1000) << AVR32_SDRAMC_CR_TRP_OFFSET ) & AVR32_SDRAMC_CR_TRP_MASK ) |
      ((((SDRAM_TRCD * hsb_mhz_up + 999) / 1000) << AVR32_SDRAMC_CR_TRCD_OFFSET) & AVR32_SDRAMC_CR_TRCD_MASK) |
80002160:	ee f9 ff f4 	ld.w	r9,r7[-12]
80002164:	12 98       	mov	r8,r9
80002166:	a5 68       	lsl	r8,0x4
80002168:	12 18       	sub	r8,r9
8000216a:	f0 c9 fc 19 	sub	r9,r8,-999
8000216e:	e0 68 4d d3 	mov	r8,19923
80002172:	ea 18 10 62 	orh	r8,0x1062
80002176:	f2 08 06 48 	mulu.d	r8,r9,r8
8000217a:	f2 08 16 06 	lsr	r8,r9,0x6
8000217e:	b5 68       	lsl	r8,0x14
80002180:	e6 18 00 f0 	andh	r8,0xf0,COH
#endif

  // Configure the SDRAM Controller with SDRAM setup and timing information.
  // All timings below are rounded up because they are minimal values.
  AVR32_SDRAMC.cr =
      ((( SDRAM_COL_BITS                 -    8) << AVR32_SDRAMC_CR_NC_OFFSET  ) & AVR32_SDRAMC_CR_NC_MASK  ) |
80002184:	10 4b       	or	r11,r8
      ((( SDRAM_DBW                      >>   4) << AVR32_SDRAMC_CR_DBW_OFFSET ) & AVR32_SDRAMC_CR_DBW_MASK ) |
      ((((SDRAM_TWR  * hsb_mhz_up + 999) / 1000) << AVR32_SDRAMC_CR_TWR_OFFSET ) & AVR32_SDRAMC_CR_TWR_MASK ) |
      ((((SDRAM_TRC  * hsb_mhz_up + 999) / 1000) << AVR32_SDRAMC_CR_TRC_OFFSET ) & AVR32_SDRAMC_CR_TRC_MASK ) |
      ((((SDRAM_TRP  * hsb_mhz_up + 999) / 1000) << AVR32_SDRAMC_CR_TRP_OFFSET ) & AVR32_SDRAMC_CR_TRP_MASK ) |
      ((((SDRAM_TRCD * hsb_mhz_up + 999) / 1000) << AVR32_SDRAMC_CR_TRCD_OFFSET) & AVR32_SDRAMC_CR_TRCD_MASK) |
      ((((SDRAM_TRAS * hsb_mhz_up + 999) / 1000) << AVR32_SDRAMC_CR_TRAS_OFFSET) & AVR32_SDRAMC_CR_TRAS_MASK) |
80002186:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000218a:	12 98       	mov	r8,r9
8000218c:	a3 78       	lsl	r8,0x3
8000218e:	12 08       	add	r8,r9
80002190:	a3 68       	lsl	r8,0x2
80002192:	12 08       	add	r8,r9
80002194:	f0 c9 fc 19 	sub	r9,r8,-999
80002198:	e0 68 4d d3 	mov	r8,19923
8000219c:	ea 18 10 62 	orh	r8,0x1062
800021a0:	f2 08 06 48 	mulu.d	r8,r9,r8
800021a4:	f2 08 16 06 	lsr	r8,r9,0x6
800021a8:	b9 68       	lsl	r8,0x18
800021aa:	e6 18 0f 00 	andh	r8,0xf00,COH
#endif

  // Configure the SDRAM Controller with SDRAM setup and timing information.
  // All timings below are rounded up because they are minimal values.
  AVR32_SDRAMC.cr =
      ((( SDRAM_COL_BITS                 -    8) << AVR32_SDRAMC_CR_NC_OFFSET  ) & AVR32_SDRAMC_CR_NC_MASK  ) |
800021ae:	10 4b       	or	r11,r8
      ((((SDRAM_TWR  * hsb_mhz_up + 999) / 1000) << AVR32_SDRAMC_CR_TWR_OFFSET ) & AVR32_SDRAMC_CR_TWR_MASK ) |
      ((((SDRAM_TRC  * hsb_mhz_up + 999) / 1000) << AVR32_SDRAMC_CR_TRC_OFFSET ) & AVR32_SDRAMC_CR_TRC_MASK ) |
      ((((SDRAM_TRP  * hsb_mhz_up + 999) / 1000) << AVR32_SDRAMC_CR_TRP_OFFSET ) & AVR32_SDRAMC_CR_TRP_MASK ) |
      ((((SDRAM_TRCD * hsb_mhz_up + 999) / 1000) << AVR32_SDRAMC_CR_TRCD_OFFSET) & AVR32_SDRAMC_CR_TRCD_MASK) |
      ((((SDRAM_TRAS * hsb_mhz_up + 999) / 1000) << AVR32_SDRAMC_CR_TRAS_OFFSET) & AVR32_SDRAMC_CR_TRAS_MASK) |
      ((((SDRAM_TXSR * hsb_mhz_up + 999) / 1000) << AVR32_SDRAMC_CR_TXSR_OFFSET) & AVR32_SDRAMC_CR_TXSR_MASK);
800021b0:	ee f9 ff f4 	ld.w	r9,r7[-12]
800021b4:	12 98       	mov	r8,r9
800021b6:	a5 78       	lsl	r8,0x5
800021b8:	12 08       	add	r8,r9
800021ba:	a1 78       	lsl	r8,0x1
800021bc:	12 08       	add	r8,r9
800021be:	f0 c9 fc 19 	sub	r9,r8,-999
800021c2:	e0 68 4d d3 	mov	r8,19923
800021c6:	ea 18 10 62 	orh	r8,0x1062
800021ca:	f2 08 06 48 	mulu.d	r8,r9,r8
800021ce:	f2 08 16 06 	lsr	r8,r9,0x6
800021d2:	bd 68       	lsl	r8,0x1c
#endif

  // Configure the SDRAM Controller with SDRAM setup and timing information.
  // All timings below are rounded up because they are minimal values.
  AVR32_SDRAMC.cr =
      ((( SDRAM_COL_BITS                 -    8) << AVR32_SDRAMC_CR_NC_OFFSET  ) & AVR32_SDRAMC_CR_NC_MASK  ) |
800021d4:	f7 e8 10 08 	or	r8,r11,r8
800021d8:	e8 18 00 d9 	orl	r8,0xd9
  AVR32_HMATRIXB.sfr[AVR32_EBI_HMATRIX_NR];
#endif

  // Configure the SDRAM Controller with SDRAM setup and timing information.
  // All timings below are rounded up because they are minimal values.
  AVR32_SDRAMC.cr =
800021dc:	95 28       	st.w	r10[0x8],r8
      ((((SDRAM_TRC  * hsb_mhz_up + 999) / 1000) << AVR32_SDRAMC_CR_TRC_OFFSET ) & AVR32_SDRAMC_CR_TRC_MASK ) |
      ((((SDRAM_TRP  * hsb_mhz_up + 999) / 1000) << AVR32_SDRAMC_CR_TRP_OFFSET ) & AVR32_SDRAMC_CR_TRP_MASK ) |
      ((((SDRAM_TRCD * hsb_mhz_up + 999) / 1000) << AVR32_SDRAMC_CR_TRCD_OFFSET) & AVR32_SDRAMC_CR_TRCD_MASK) |
      ((((SDRAM_TRAS * hsb_mhz_up + 999) / 1000) << AVR32_SDRAMC_CR_TRAS_OFFSET) & AVR32_SDRAMC_CR_TRAS_MASK) |
      ((((SDRAM_TXSR * hsb_mhz_up + 999) / 1000) << AVR32_SDRAMC_CR_TXSR_OFFSET) & AVR32_SDRAMC_CR_TXSR_MASK);
  AVR32_SDRAMC.cr;
800021de:	fe 68 20 00 	mov	r8,-122880
800021e2:	70 28       	ld.w	r8,r8[0x8]

  // Issue a NOP command to the SDRAM in order to start the generation of SDRAMC signals.
  AVR32_SDRAMC.mr = AVR32_SDRAMC_MR_MODE_NOP;
800021e4:	fe 68 20 00 	mov	r8,-122880
800021e8:	30 19       	mov	r9,1
800021ea:	91 09       	st.w	r8[0x0],r9
  AVR32_SDRAMC.mr;
800021ec:	fe 68 20 00 	mov	r8,-122880
800021f0:	70 08       	ld.w	r8,r8[0x0]
  sdram[0];
800021f2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800021f6:	90 08       	ld.sh	r8,r8[0x0]

  // Wait during the SDRAM stable-clock initialization delay.
  sdramc_us_delay(SDRAM_STABLE_CLOCK_INIT_DELAY, hsb_mhz_up);
800021f8:	ee f8 ff f4 	ld.w	r8,r7[-12]
800021fc:	f0 08 10 64 	mul	r8,r8,100
80002200:	10 9c       	mov	r12,r8
80002202:	f0 1f 00 43 	mcall	8000230c <sdramc_init+0x290>

  // Issue a PRECHARGE ALL command to the SDRAM.
  AVR32_SDRAMC.mr = AVR32_SDRAMC_MR_MODE_BANKS_PRECHARGE;
80002206:	fe 68 20 00 	mov	r8,-122880
8000220a:	30 29       	mov	r9,2
8000220c:	91 09       	st.w	r8[0x0],r9
  AVR32_SDRAMC.mr;
8000220e:	fe 68 20 00 	mov	r8,-122880
80002212:	70 08       	ld.w	r8,r8[0x0]
  sdram[0];
80002214:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002218:	90 08       	ld.sh	r8,r8[0x0]
  sdramc_ns_delay(SDRAM_TRP, hsb_mhz_up);
8000221a:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000221e:	12 98       	mov	r8,r9
80002220:	a5 68       	lsl	r8,0x4
80002222:	12 18       	sub	r8,r9
80002224:	f0 c9 fc 19 	sub	r9,r8,-999
80002228:	e0 68 4d d3 	mov	r8,19923
8000222c:	ea 18 10 62 	orh	r8,0x1062
80002230:	f2 08 06 48 	mulu.d	r8,r9,r8
80002234:	f2 08 16 06 	lsr	r8,r9,0x6
80002238:	10 9c       	mov	r12,r8
8000223a:	f0 1f 00 35 	mcall	8000230c <sdramc_init+0x290>

  // Issue initialization AUTO REFRESH commands to the SDRAM.
  AVR32_SDRAMC.mr = AVR32_SDRAMC_MR_MODE_AUTO_REFRESH;
8000223e:	fe 68 20 00 	mov	r8,-122880
80002242:	30 49       	mov	r9,4
80002244:	91 09       	st.w	r8[0x0],r9
  AVR32_SDRAMC.mr;
80002246:	fe 68 20 00 	mov	r8,-122880
8000224a:	70 08       	ld.w	r8,r8[0x0]
  for (i = 0; i < SDRAM_INIT_AUTO_REFRESH_COUNT; i++)
8000224c:	30 08       	mov	r8,0
8000224e:	ef 48 ff fc 	st.w	r7[-4],r8
80002252:	c1 c8       	rjmp	8000228a <sdramc_init+0x20e>
  {
    sdram[0];
80002254:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002258:	90 08       	ld.sh	r8,r8[0x0]
    sdramc_ns_delay(SDRAM_TRFC, hsb_mhz_up);
8000225a:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000225e:	12 98       	mov	r8,r9
80002260:	a5 78       	lsl	r8,0x5
80002262:	12 08       	add	r8,r9
80002264:	a1 78       	lsl	r8,0x1
80002266:	f0 c9 fc 19 	sub	r9,r8,-999
8000226a:	e0 68 4d d3 	mov	r8,19923
8000226e:	ea 18 10 62 	orh	r8,0x1062
80002272:	f2 08 06 48 	mulu.d	r8,r9,r8
80002276:	f2 08 16 06 	lsr	r8,r9,0x6
8000227a:	10 9c       	mov	r12,r8
8000227c:	f0 1f 00 24 	mcall	8000230c <sdramc_init+0x290>
  sdramc_ns_delay(SDRAM_TRP, hsb_mhz_up);

  // Issue initialization AUTO REFRESH commands to the SDRAM.
  AVR32_SDRAMC.mr = AVR32_SDRAMC_MR_MODE_AUTO_REFRESH;
  AVR32_SDRAMC.mr;
  for (i = 0; i < SDRAM_INIT_AUTO_REFRESH_COUNT; i++)
80002280:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002284:	2f f8       	sub	r8,-1
80002286:	ef 48 ff fc 	st.w	r7[-4],r8
8000228a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000228e:	58 18       	cp.w	r8,1
80002290:	fe 98 ff e2 	brls	80002254 <sdramc_init+0x1d8>
  //  - bit 3: burst type: sequential (0b);
  //  - bits 4 to 6: CAS latency: AVR32_SDRAMC.CR.cas;
  //  - bits 7 to 8: operating mode: standard operation (00b);
  //  - bit 9: write burst mode: programmed burst length (0b);
  //  - all other bits: reserved: 0b.
  AVR32_SDRAMC.mr = AVR32_SDRAMC_MR_MODE_LOAD_MODE;
80002294:	fe 68 20 00 	mov	r8,-122880
80002298:	30 39       	mov	r9,3
8000229a:	91 09       	st.w	r8[0x0],r9
  AVR32_SDRAMC.mr;
8000229c:	fe 68 20 00 	mov	r8,-122880
800022a0:	70 08       	ld.w	r8,r8[0x0]
  sdram[0];
800022a2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800022a6:	90 08       	ld.sh	r8,r8[0x0]
  sdramc_ns_delay(SDRAM_TMRD, hsb_mhz_up);
800022a8:	ee f8 ff f4 	ld.w	r8,r7[-12]
800022ac:	a1 78       	lsl	r8,0x1
800022ae:	f0 c9 fc 19 	sub	r9,r8,-999
800022b2:	e0 68 4d d3 	mov	r8,19923
800022b6:	ea 18 10 62 	orh	r8,0x1062
800022ba:	f2 08 06 48 	mulu.d	r8,r9,r8
800022be:	f2 08 16 06 	lsr	r8,r9,0x6
800022c2:	10 9c       	mov	r12,r8
800022c4:	f0 1f 00 12 	mcall	8000230c <sdramc_init+0x290>

  // Switch the SDRAM Controller to normal mode.
  AVR32_SDRAMC.mr = AVR32_SDRAMC_MR_MODE_NORMAL;
800022c8:	fe 68 20 00 	mov	r8,-122880
800022cc:	30 09       	mov	r9,0
800022ce:	91 09       	st.w	r8[0x0],r9
  AVR32_SDRAMC.mr;
800022d0:	fe 68 20 00 	mov	r8,-122880
800022d4:	70 08       	ld.w	r8,r8[0x0]
  sdram[0];
800022d6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800022da:	90 08       	ld.sh	r8,r8[0x0]

  // Write the refresh period into the SDRAMC Refresh Timer Register.
  // tR is rounded down because it is a maximal value.
  AVR32_SDRAMC.tr = (SDRAM_TR * hsb_mhz_dn) / 1000;
800022dc:	fe 6a 20 00 	mov	r10,-122880
800022e0:	ee f9 ff f0 	ld.w	r9,r7[-16]
800022e4:	e0 68 1e 84 	mov	r8,7812
800022e8:	b1 39       	mul	r9,r8
800022ea:	e0 68 4d d3 	mov	r8,19923
800022ee:	ea 18 10 62 	orh	r8,0x1062
800022f2:	f2 08 06 48 	mulu.d	r8,r9,r8
800022f6:	f2 08 16 06 	lsr	r8,r9,0x6
800022fa:	95 18       	st.w	r10[0x4],r8
  AVR32_SDRAMC.tr;
800022fc:	fe 68 20 00 	mov	r8,-122880
80002300:	70 18       	ld.w	r8,r8[0x4]
}
80002302:	2f bd       	sub	sp,-20
80002304:	e3 cd 80 80 	ldm	sp++,r7,pc
80002308:	80 00       	ld.sh	r0,r0[0x0]
8000230a:	20 60       	sub	r0,6
8000230c:	80 00       	ld.sh	r0,r0[0x0]
8000230e:	20 08       	sub	r8,0

80002310 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern bool sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
80002310:	eb cd 40 80 	pushm	r7,lr
80002314:	1a 97       	mov	r7,sp
	}
#endif

	switch (CONFIG_SYSCLK_SOURCE) {
	case SYSCLK_SRC_RCSYS:
		return OSC_SLOW_NOMINAL_HZ;
80002316:	e0 78 c2 00 	mov	r8,115200

	default:
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
8000231a:	10 9c       	mov	r12,r8
8000231c:	e3 cd 80 80 	ldm	sp++,r7,pc

80002320 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
80002320:	eb cd 40 80 	pushm	r7,lr
80002324:	1a 97       	mov	r7,sp
	return sysclk_get_main_hz() >> CONFIG_SYSCLK_CPU_DIV;
80002326:	f0 1f 00 04 	mcall	80002334 <sysclk_get_cpu_hz+0x14>
8000232a:	18 98       	mov	r8,r12
}
8000232c:	10 9c       	mov	r12,r8
8000232e:	e3 cd 80 80 	ldm	sp++,r7,pc
80002332:	00 00       	add	r0,r0
80002334:	80 00       	ld.sh	r0,r0[0x0]
80002336:	23 10       	sub	r0,49

80002338 <dip204_init>:


/****************************** global functions *****************************/

void dip204_init(backlight_options option, bool backlight_on)
{
80002338:	eb cd 40 8f 	pushm	r0-r3,r7,lr
8000233c:	1a 97       	mov	r7,sp
8000233e:	fa cd 01 ac 	sub	sp,sp,428
80002342:	ef 4c fe b8 	st.w	r7[-328],r12
80002346:	16 98       	mov	r8,r11
80002348:	ef 68 fe b4 	st.b	r7[-332],r8
  pwm_opt_t pwm_opt;  // pwm option config

  if (option == backlight_PWM)
8000234c:	ee f8 fe b8 	ld.w	r8,r7[-328]
80002350:	58 18       	cp.w	r8,1
80002352:	c6 41       	brne	8000241a <dip204_init+0xe2>
  {
    channel_id = DIP204_PWM_CHANNEL;
80002354:	fe f9 0a 84 	ld.w	r9,pc[2692]
80002358:	30 68       	mov	r8,6
8000235a:	93 08       	st.w	r9[0x0],r8
    gpio_enable_module_pin(DIP204_PWM_PIN, DIP204_PWM_FUNCTION);
8000235c:	30 2b       	mov	r11,2
8000235e:	33 2c       	mov	r12,50
80002360:	f0 1f 02 9f 	mcall	80002ddc <dip204_init+0xaa4>

    // PWM controller configuration
    pwm_opt.diva=0;
80002364:	30 08       	mov	r8,0
80002366:	ef 48 ff 14 	st.w	r7[-236],r8
    pwm_opt.divb=0;
8000236a:	30 08       	mov	r8,0
8000236c:	ef 48 ff 10 	st.w	r7[-240],r8
    pwm_opt.prea=0;
80002370:	30 08       	mov	r8,0
80002372:	ef 48 ff 1c 	st.w	r7[-228],r8
    pwm_opt.preb=0;
80002376:	30 08       	mov	r8,0
80002378:	ef 48 ff 18 	st.w	r7[-232],r8

    pwm_init(&pwm_opt);
8000237c:	ee c8 00 f0 	sub	r8,r7,240
80002380:	10 9c       	mov	r12,r8
80002382:	f0 1f 02 98 	mcall	80002de0 <dip204_init+0xaa8>
    pwm_duty = (backlight_on) ? DIP204_PERIOD_MAX - 1 : 1;
80002386:	ef 39 fe b4 	ld.ub	r9,r7[-332]
8000238a:	30 08       	mov	r8,0
8000238c:	f0 09 18 00 	cp.b	r9,r8
80002390:	c0 30       	breq	80002396 <dip204_init+0x5e>
80002392:	33 18       	mov	r8,49
80002394:	c0 28       	rjmp	80002398 <dip204_init+0x60>
80002396:	30 18       	mov	r8,1
80002398:	fe f9 0a 4c 	ld.w	r9,pc[2636]
8000239c:	b2 08       	st.h	r9[0x0],r8
    pwm_channel.CMR.calg = PWM_MODE_LEFT_ALIGNED;   // channel mode
8000239e:	fe fa 0a 4a 	ld.w	r10,pc[2634]
800023a2:	74 08       	ld.w	r8,r10[0x0]
800023a4:	30 09       	mov	r9,0
800023a6:	f1 d9 d1 01 	bfins	r8,r9,0x8,0x1
800023aa:	95 08       	st.w	r10[0x0],r8
    pwm_channel.CMR.cpol = PWM_POLARITY_LOW;   // channel polarity
800023ac:	fe fa 0a 3c 	ld.w	r10,pc[2620]
800023b0:	74 08       	ld.w	r8,r10[0x0]
800023b2:	30 09       	mov	r9,0
800023b4:	f1 d9 d1 21 	bfins	r8,r9,0x9,0x1
800023b8:	95 08       	st.w	r10[0x0],r8
    pwm_channel.CMR.cpd = PWM_UPDATE_PERIOD;   // not used the first time
800023ba:	fe fa 0a 2e 	ld.w	r10,pc[2606]
800023be:	74 08       	ld.w	r8,r10[0x0]
800023c0:	30 19       	mov	r9,1
800023c2:	f1 d9 d1 41 	bfins	r8,r9,0xa,0x1
800023c6:	95 08       	st.w	r10[0x0],r8
    pwm_channel.CMR.cpre = AVR32_PWM_CPRE_MCK_DIV_256;   // channel prescaler
800023c8:	fe fa 0a 20 	ld.w	r10,pc[2592]
800023cc:	74 08       	ld.w	r8,r10[0x0]
800023ce:	30 89       	mov	r9,8
800023d0:	f1 d9 d0 04 	bfins	r8,r9,0x0,0x4
800023d4:	95 08       	st.w	r10[0x0],r8
    pwm_channel.cdty = pwm_duty;  // channel duty cycle, should be < CPRD
800023d6:	fe f8 0a 0e 	ld.w	r8,pc[2574]
800023da:	90 08       	ld.sh	r8,r8[0x0]
800023dc:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
800023e0:	fe f8 0a 08 	ld.w	r8,pc[2568]
800023e4:	91 19       	st.w	r8[0x4],r9
    pwm_channel.cprd = DIP204_PERIOD_MAX;  // channel period
800023e6:	fe f9 0a 02 	ld.w	r9,pc[2562]
800023ea:	33 28       	mov	r8,50
800023ec:	93 28       	st.w	r9[0x8],r8
    pwm_channel.cupd = 0;  // channel update is not used here.
800023ee:	fe f9 09 fa 	ld.w	r9,pc[2554]
800023f2:	30 08       	mov	r8,0
800023f4:	93 48       	st.w	r9[0x10],r8

    pwm_channel_init(channel_id, &pwm_channel);
800023f6:	fe f8 09 e2 	ld.w	r8,pc[2530]
800023fa:	70 08       	ld.w	r8,r8[0x0]
800023fc:	fe fb 09 ec 	ld.w	r11,pc[2540]
80002400:	10 9c       	mov	r12,r8
80002402:	f0 1f 02 7b 	mcall	80002dec <dip204_init+0xab4>
    // start PWM
    pwm_start_channels(1 << channel_id);
80002406:	fe f8 09 d2 	ld.w	r8,pc[2514]
8000240a:	70 09       	ld.w	r9,r8[0x0]
8000240c:	30 18       	mov	r8,1
8000240e:	f0 09 09 48 	lsl	r8,r8,r9
80002412:	10 9c       	mov	r12,r8
80002414:	f0 1f 02 77 	mcall	80002df0 <dip204_init+0xab8>
80002418:	c0 e8       	rjmp	80002434 <dip204_init+0xfc>
  }
  else
  {
    if (backlight_on)
8000241a:	ef 39 fe b4 	ld.ub	r9,r7[-332]
8000241e:	30 08       	mov	r8,0
80002420:	f0 09 18 00 	cp.b	r9,r8
80002424:	c0 50       	breq	8000242e <dip204_init+0xf6>
    {
      gpio_clr_gpio_pin(DIP204_BACKLIGHT_PIN);
80002426:	33 2c       	mov	r12,50
80002428:	f0 1f 02 73 	mcall	80002df4 <dip204_init+0xabc>
8000242c:	c0 48       	rjmp	80002434 <dip204_init+0xfc>
    }
    else
    {
      gpio_set_gpio_pin(DIP204_BACKLIGHT_PIN);
8000242e:	33 2c       	mov	r12,50
80002430:	f0 1f 02 72 	mcall	80002df8 <dip204_init+0xac0>
    }
  }
  // delay for power on
  delay_ms(20);
80002434:	f0 1f 02 72 	mcall	80002dfc <dip204_init+0xac4>
80002438:	18 99       	mov	r9,r12
8000243a:	31 48       	mov	r8,20
8000243c:	ef 48 ff 24 	st.w	r7[-220],r8
80002440:	ef 49 ff 20 	st.w	r7[-224],r9
80002444:	ee f8 ff 24 	ld.w	r8,r7[-220]
80002448:	ef 48 ff 2c 	st.w	r7[-212],r8
8000244c:	ee f8 ff 20 	ld.w	r8,r7[-224]
80002450:	ef 48 ff 28 	st.w	r7[-216],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
80002454:	ee f0 ff 2c 	ld.w	r0,r7[-212]
80002458:	30 01       	mov	r1,0
8000245a:	ee f2 ff 28 	ld.w	r2,r7[-216]
8000245e:	30 03       	mov	r3,0
80002460:	e2 02 02 49 	mul	r9,r1,r2
80002464:	e6 00 02 48 	mul	r8,r3,r0
80002468:	10 09       	add	r9,r8
8000246a:	e0 02 06 4a 	mulu.d	r10,r0,r2
8000246e:	16 09       	add	r9,r11
80002470:	12 9b       	mov	r11,r9
80002472:	e0 68 03 e7 	mov	r8,999
80002476:	30 09       	mov	r9,0
80002478:	10 0a       	add	r10,r8
8000247a:	f6 09 00 4b 	adc	r11,r11,r9
8000247e:	e0 68 03 e8 	mov	r8,1000
80002482:	30 09       	mov	r9,0
80002484:	f0 1f 02 5f 	mcall	80002e00 <dip204_init+0xac8>
80002488:	14 98       	mov	r8,r10
8000248a:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
8000248c:	ef 48 ff 34 	st.w	r7[-204],r8
80002490:	ee c8 01 44 	sub	r8,r7,324
80002494:	ef 48 ff 30 	st.w	r7[-208],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002498:	e1 b8 00 42 	mfsr	r8,0x108
8000249c:	10 99       	mov	r9,r8
8000249e:	ee f8 ff 30 	ld.w	r8,r7[-208]
800024a2:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800024a4:	ee f8 ff 30 	ld.w	r8,r7[-208]
800024a8:	70 09       	ld.w	r9,r8[0x0]
800024aa:	ee f8 ff 34 	ld.w	r8,r7[-204]
800024ae:	10 09       	add	r9,r8
800024b0:	ee f8 ff 30 	ld.w	r8,r7[-208]
800024b4:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
800024b6:	ee f9 ff 30 	ld.w	r9,r7[-208]
800024ba:	30 08       	mov	r8,0
800024bc:	f3 68 00 08 	st.b	r9[8],r8
800024c0:	ee c8 01 44 	sub	r8,r7,324
800024c4:	ef 48 ff 38 	st.w	r7[-200],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800024c8:	e1 b8 00 42 	mfsr	r8,0x108
800024cc:	ef 48 ff 3c 	st.w	r7[-196],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
800024d0:	ee f8 ff 38 	ld.w	r8,r7[-200]
800024d4:	f1 39 00 08 	ld.ub	r9,r8[8]
800024d8:	30 28       	mov	r8,2
800024da:	f0 09 18 00 	cp.b	r9,r8
800024de:	c0 31       	brne	800024e4 <dip204_init+0x1ac>
    return false;
800024e0:	30 08       	mov	r8,0
800024e2:	c4 38       	rjmp	80002568 <dip204_init+0x230>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
800024e4:	ee f8 ff 38 	ld.w	r8,r7[-200]
800024e8:	f1 39 00 08 	ld.ub	r9,r8[8]
800024ec:	30 18       	mov	r8,1
800024ee:	f0 09 18 00 	cp.b	r9,r8
800024f2:	c0 31       	brne	800024f8 <dip204_init+0x1c0>
    return true;
800024f4:	30 18       	mov	r8,1
800024f6:	c3 98       	rjmp	80002568 <dip204_init+0x230>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800024f8:	ee f8 ff 38 	ld.w	r8,r7[-200]
800024fc:	70 09       	ld.w	r9,r8[0x0]
800024fe:	ee f8 ff 38 	ld.w	r8,r7[-200]
80002502:	70 18       	ld.w	r8,r8[0x4]
80002504:	10 39       	cp.w	r9,r8
80002506:	e0 88 00 1a 	brls	8000253a <dip204_init+0x202>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000250a:	ee f8 ff 38 	ld.w	r8,r7[-200]
8000250e:	70 09       	ld.w	r9,r8[0x0]
80002510:	ee f8 ff 3c 	ld.w	r8,r7[-196]
80002514:	12 38       	cp.w	r8,r9
80002516:	c1 02       	brcc	80002536 <dip204_init+0x1fe>
80002518:	ee f8 ff 38 	ld.w	r8,r7[-200]
8000251c:	70 19       	ld.w	r9,r8[0x4]
8000251e:	ee f8 ff 3c 	ld.w	r8,r7[-196]
80002522:	12 38       	cp.w	r8,r9
80002524:	e0 88 00 09 	brls	80002536 <dip204_init+0x1fe>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80002528:	ee f9 ff 38 	ld.w	r9,r7[-200]
8000252c:	30 18       	mov	r8,1
8000252e:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80002532:	30 18       	mov	r8,1
80002534:	c1 a8       	rjmp	80002568 <dip204_init+0x230>
    }
    return false;
80002536:	30 08       	mov	r8,0
80002538:	c1 88       	rjmp	80002568 <dip204_init+0x230>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000253a:	ee f8 ff 38 	ld.w	r8,r7[-200]
8000253e:	70 09       	ld.w	r9,r8[0x0]
80002540:	ee f8 ff 3c 	ld.w	r8,r7[-196]
80002544:	12 38       	cp.w	r8,r9
80002546:	c0 93       	brcs	80002558 <dip204_init+0x220>
80002548:	ee f8 ff 38 	ld.w	r8,r7[-200]
8000254c:	70 19       	ld.w	r9,r8[0x4]
8000254e:	ee f8 ff 3c 	ld.w	r8,r7[-196]
80002552:	12 38       	cp.w	r8,r9
80002554:	e0 88 00 09 	brls	80002566 <dip204_init+0x22e>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80002558:	ee f9 ff 38 	ld.w	r9,r7[-200]
8000255c:	30 18       	mov	r8,1
8000255e:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80002562:	30 18       	mov	r8,1
80002564:	c0 28       	rjmp	80002568 <dip204_init+0x230>
    }
    return false;
80002566:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
80002568:	58 08       	cp.w	r8,0
8000256a:	ca b0       	breq	800024c0 <dip204_init+0x188>
  // select the LCD chip
  dip204_select();
8000256c:	f0 1f 02 26 	mcall	80002e04 <dip204_init+0xacc>
  // Send Command Start Byte
  dip204_write_byte(DIP204_WRITE_COMMAND);
80002570:	e0 6c 00 f8 	mov	r12,248
80002574:	f0 1f 02 25 	mcall	80002e08 <dip204_init+0xad0>
  // Send "extended Function Set" Command  (RE=1)
  dip204_write_byte(0x34);
80002578:	33 4c       	mov	r12,52
8000257a:	f0 1f 02 24 	mcall	80002e08 <dip204_init+0xad0>
  // Wait for command execution
  delay_ms(1);
8000257e:	f0 1f 02 20 	mcall	80002dfc <dip204_init+0xac4>
80002582:	18 99       	mov	r9,r12
80002584:	30 18       	mov	r8,1
80002586:	ef 48 ff 44 	st.w	r7[-188],r8
8000258a:	ef 49 ff 40 	st.w	r7[-192],r9
8000258e:	ee f8 ff 44 	ld.w	r8,r7[-188]
80002592:	ef 48 ff 4c 	st.w	r7[-180],r8
80002596:	ee f8 ff 40 	ld.w	r8,r7[-192]
8000259a:	ef 48 ff 48 	st.w	r7[-184],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
8000259e:	ee fc ff 4c 	ld.w	r12,r7[-180]
800025a2:	ef 4c fe 60 	st.w	r7[-416],r12
800025a6:	30 0b       	mov	r11,0
800025a8:	ef 4b fe 5c 	st.w	r7[-420],r11
800025ac:	ee fa ff 48 	ld.w	r10,r7[-184]
800025b0:	ef 4a fe 58 	st.w	r7[-424],r10
800025b4:	30 09       	mov	r9,0
800025b6:	ef 49 fe 54 	st.w	r7[-428],r9
800025ba:	ee f9 fe 5c 	ld.w	r9,r7[-420]
800025be:	ee f8 fe 58 	ld.w	r8,r7[-424]
800025c2:	b1 39       	mul	r9,r8
800025c4:	ee f8 fe 54 	ld.w	r8,r7[-428]
800025c8:	ee fc fe 60 	ld.w	r12,r7[-416]
800025cc:	b9 38       	mul	r8,r12
800025ce:	10 09       	add	r9,r8
800025d0:	ee f8 fe 60 	ld.w	r8,r7[-416]
800025d4:	ee fc fe 58 	ld.w	r12,r7[-424]
800025d8:	f0 0c 06 4a 	mulu.d	r10,r8,r12
800025dc:	16 09       	add	r9,r11
800025de:	12 9b       	mov	r11,r9
800025e0:	e0 68 03 e7 	mov	r8,999
800025e4:	30 09       	mov	r9,0
800025e6:	10 0a       	add	r10,r8
800025e8:	f6 09 00 4b 	adc	r11,r11,r9
800025ec:	e0 68 03 e8 	mov	r8,1000
800025f0:	30 09       	mov	r9,0
800025f2:	f0 1f 02 04 	mcall	80002e00 <dip204_init+0xac8>
800025f6:	14 98       	mov	r8,r10
800025f8:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
800025fa:	ef 48 ff 54 	st.w	r7[-172],r8
800025fe:	ee c8 01 38 	sub	r8,r7,312
80002602:	ef 48 ff 50 	st.w	r7[-176],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002606:	e1 b8 00 42 	mfsr	r8,0x108
8000260a:	10 99       	mov	r9,r8
8000260c:	ee f8 ff 50 	ld.w	r8,r7[-176]
80002610:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002612:	ee f8 ff 50 	ld.w	r8,r7[-176]
80002616:	70 09       	ld.w	r9,r8[0x0]
80002618:	ee f8 ff 54 	ld.w	r8,r7[-172]
8000261c:	10 09       	add	r9,r8
8000261e:	ee f8 ff 50 	ld.w	r8,r7[-176]
80002622:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80002624:	ee f9 ff 50 	ld.w	r9,r7[-176]
80002628:	30 08       	mov	r8,0
8000262a:	f3 68 00 08 	st.b	r9[8],r8
8000262e:	ee c8 01 38 	sub	r8,r7,312
80002632:	ef 48 ff 58 	st.w	r7[-168],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002636:	e1 b8 00 42 	mfsr	r8,0x108
8000263a:	ef 48 ff 5c 	st.w	r7[-164],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
8000263e:	ee f8 ff 58 	ld.w	r8,r7[-168]
80002642:	f1 39 00 08 	ld.ub	r9,r8[8]
80002646:	30 28       	mov	r8,2
80002648:	f0 09 18 00 	cp.b	r9,r8
8000264c:	c0 31       	brne	80002652 <dip204_init+0x31a>
    return false;
8000264e:	30 08       	mov	r8,0
80002650:	c4 38       	rjmp	800026d6 <dip204_init+0x39e>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80002652:	ee f8 ff 58 	ld.w	r8,r7[-168]
80002656:	f1 39 00 08 	ld.ub	r9,r8[8]
8000265a:	30 18       	mov	r8,1
8000265c:	f0 09 18 00 	cp.b	r9,r8
80002660:	c0 31       	brne	80002666 <dip204_init+0x32e>
    return true;
80002662:	30 18       	mov	r8,1
80002664:	c3 98       	rjmp	800026d6 <dip204_init+0x39e>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002666:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000266a:	70 09       	ld.w	r9,r8[0x0]
8000266c:	ee f8 ff 58 	ld.w	r8,r7[-168]
80002670:	70 18       	ld.w	r8,r8[0x4]
80002672:	10 39       	cp.w	r9,r8
80002674:	e0 88 00 1a 	brls	800026a8 <dip204_init+0x370>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002678:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000267c:	70 09       	ld.w	r9,r8[0x0]
8000267e:	ee f8 ff 5c 	ld.w	r8,r7[-164]
80002682:	12 38       	cp.w	r8,r9
80002684:	c1 02       	brcc	800026a4 <dip204_init+0x36c>
80002686:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000268a:	70 19       	ld.w	r9,r8[0x4]
8000268c:	ee f8 ff 5c 	ld.w	r8,r7[-164]
80002690:	12 38       	cp.w	r8,r9
80002692:	e0 88 00 09 	brls	800026a4 <dip204_init+0x36c>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80002696:	ee f9 ff 58 	ld.w	r9,r7[-168]
8000269a:	30 18       	mov	r8,1
8000269c:	f3 68 00 08 	st.b	r9[8],r8
      return true;
800026a0:	30 18       	mov	r8,1
800026a2:	c1 a8       	rjmp	800026d6 <dip204_init+0x39e>
    }
    return false;
800026a4:	30 08       	mov	r8,0
800026a6:	c1 88       	rjmp	800026d6 <dip204_init+0x39e>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800026a8:	ee f8 ff 58 	ld.w	r8,r7[-168]
800026ac:	70 09       	ld.w	r9,r8[0x0]
800026ae:	ee f8 ff 5c 	ld.w	r8,r7[-164]
800026b2:	12 38       	cp.w	r8,r9
800026b4:	c0 93       	brcs	800026c6 <dip204_init+0x38e>
800026b6:	ee f8 ff 58 	ld.w	r8,r7[-168]
800026ba:	70 19       	ld.w	r9,r8[0x4]
800026bc:	ee f8 ff 5c 	ld.w	r8,r7[-164]
800026c0:	12 38       	cp.w	r8,r9
800026c2:	e0 88 00 09 	brls	800026d4 <dip204_init+0x39c>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
800026c6:	ee f9 ff 58 	ld.w	r9,r7[-168]
800026ca:	30 18       	mov	r8,1
800026cc:	f3 68 00 08 	st.b	r9[8],r8
      return true;
800026d0:	30 18       	mov	r8,1
800026d2:	c0 28       	rjmp	800026d6 <dip204_init+0x39e>
    }
    return false;
800026d4:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
800026d6:	58 08       	cp.w	r8,0
800026d8:	ca b0       	breq	8000262e <dip204_init+0x2f6>
  // Send "Enter 4-Line Mode" Command
  dip204_write_byte(0x09);
800026da:	30 9c       	mov	r12,9
800026dc:	f0 1f 01 cb 	mcall	80002e08 <dip204_init+0xad0>
  // Wait for command execution
  delay_ms(1);
800026e0:	f0 1f 01 c7 	mcall	80002dfc <dip204_init+0xac4>
800026e4:	18 99       	mov	r9,r12
800026e6:	30 18       	mov	r8,1
800026e8:	ef 48 ff 64 	st.w	r7[-156],r8
800026ec:	ef 49 ff 60 	st.w	r7[-160],r9
800026f0:	ee f8 ff 64 	ld.w	r8,r7[-156]
800026f4:	ef 48 ff 6c 	st.w	r7[-148],r8
800026f8:	ee f8 ff 60 	ld.w	r8,r7[-160]
800026fc:	ef 48 ff 68 	st.w	r7[-152],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
80002700:	ee fb ff 6c 	ld.w	r11,r7[-148]
80002704:	ef 4b fe 70 	st.w	r7[-400],r11
80002708:	30 0a       	mov	r10,0
8000270a:	ef 4a fe 6c 	st.w	r7[-404],r10
8000270e:	ee f9 ff 68 	ld.w	r9,r7[-152]
80002712:	ef 49 fe 68 	st.w	r7[-408],r9
80002716:	30 08       	mov	r8,0
80002718:	ef 48 fe 64 	st.w	r7[-412],r8
8000271c:	ee f9 fe 6c 	ld.w	r9,r7[-404]
80002720:	ee fc fe 68 	ld.w	r12,r7[-408]
80002724:	b9 39       	mul	r9,r12
80002726:	ee f8 fe 64 	ld.w	r8,r7[-412]
8000272a:	ee fb fe 70 	ld.w	r11,r7[-400]
8000272e:	b7 38       	mul	r8,r11
80002730:	10 09       	add	r9,r8
80002732:	ee f8 fe 70 	ld.w	r8,r7[-400]
80002736:	ee fc fe 68 	ld.w	r12,r7[-408]
8000273a:	f0 0c 06 4a 	mulu.d	r10,r8,r12
8000273e:	16 09       	add	r9,r11
80002740:	12 9b       	mov	r11,r9
80002742:	e0 68 03 e7 	mov	r8,999
80002746:	30 09       	mov	r9,0
80002748:	10 0a       	add	r10,r8
8000274a:	f6 09 00 4b 	adc	r11,r11,r9
8000274e:	e0 68 03 e8 	mov	r8,1000
80002752:	30 09       	mov	r9,0
80002754:	f0 1f 01 ab 	mcall	80002e00 <dip204_init+0xac8>
80002758:	14 98       	mov	r8,r10
8000275a:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
8000275c:	ef 48 ff 74 	st.w	r7[-140],r8
80002760:	ee c8 01 2c 	sub	r8,r7,300
80002764:	ef 48 ff 70 	st.w	r7[-144],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002768:	e1 b8 00 42 	mfsr	r8,0x108
8000276c:	10 99       	mov	r9,r8
8000276e:	ee f8 ff 70 	ld.w	r8,r7[-144]
80002772:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002774:	ee f8 ff 70 	ld.w	r8,r7[-144]
80002778:	70 09       	ld.w	r9,r8[0x0]
8000277a:	ee f8 ff 74 	ld.w	r8,r7[-140]
8000277e:	10 09       	add	r9,r8
80002780:	ee f8 ff 70 	ld.w	r8,r7[-144]
80002784:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80002786:	ee f9 ff 70 	ld.w	r9,r7[-144]
8000278a:	30 08       	mov	r8,0
8000278c:	f3 68 00 08 	st.b	r9[8],r8
80002790:	ee c8 01 2c 	sub	r8,r7,300
80002794:	ef 48 ff 78 	st.w	r7[-136],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002798:	e1 b8 00 42 	mfsr	r8,0x108
8000279c:	ef 48 ff 7c 	st.w	r7[-132],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
800027a0:	ee f8 ff 78 	ld.w	r8,r7[-136]
800027a4:	f1 39 00 08 	ld.ub	r9,r8[8]
800027a8:	30 28       	mov	r8,2
800027aa:	f0 09 18 00 	cp.b	r9,r8
800027ae:	c0 31       	brne	800027b4 <dip204_init+0x47c>
    return false;
800027b0:	30 08       	mov	r8,0
800027b2:	c4 38       	rjmp	80002838 <dip204_init+0x500>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
800027b4:	ee f8 ff 78 	ld.w	r8,r7[-136]
800027b8:	f1 39 00 08 	ld.ub	r9,r8[8]
800027bc:	30 18       	mov	r8,1
800027be:	f0 09 18 00 	cp.b	r9,r8
800027c2:	c0 31       	brne	800027c8 <dip204_init+0x490>
    return true;
800027c4:	30 18       	mov	r8,1
800027c6:	c3 98       	rjmp	80002838 <dip204_init+0x500>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800027c8:	ee f8 ff 78 	ld.w	r8,r7[-136]
800027cc:	70 09       	ld.w	r9,r8[0x0]
800027ce:	ee f8 ff 78 	ld.w	r8,r7[-136]
800027d2:	70 18       	ld.w	r8,r8[0x4]
800027d4:	10 39       	cp.w	r9,r8
800027d6:	e0 88 00 1a 	brls	8000280a <dip204_init+0x4d2>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800027da:	ee f8 ff 78 	ld.w	r8,r7[-136]
800027de:	70 09       	ld.w	r9,r8[0x0]
800027e0:	ee f8 ff 7c 	ld.w	r8,r7[-132]
800027e4:	12 38       	cp.w	r8,r9
800027e6:	c1 02       	brcc	80002806 <dip204_init+0x4ce>
800027e8:	ee f8 ff 78 	ld.w	r8,r7[-136]
800027ec:	70 19       	ld.w	r9,r8[0x4]
800027ee:	ee f8 ff 7c 	ld.w	r8,r7[-132]
800027f2:	12 38       	cp.w	r8,r9
800027f4:	e0 88 00 09 	brls	80002806 <dip204_init+0x4ce>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
800027f8:	ee f9 ff 78 	ld.w	r9,r7[-136]
800027fc:	30 18       	mov	r8,1
800027fe:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80002802:	30 18       	mov	r8,1
80002804:	c1 a8       	rjmp	80002838 <dip204_init+0x500>
    }
    return false;
80002806:	30 08       	mov	r8,0
80002808:	c1 88       	rjmp	80002838 <dip204_init+0x500>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000280a:	ee f8 ff 78 	ld.w	r8,r7[-136]
8000280e:	70 09       	ld.w	r9,r8[0x0]
80002810:	ee f8 ff 7c 	ld.w	r8,r7[-132]
80002814:	12 38       	cp.w	r8,r9
80002816:	c0 93       	brcs	80002828 <dip204_init+0x4f0>
80002818:	ee f8 ff 78 	ld.w	r8,r7[-136]
8000281c:	70 19       	ld.w	r9,r8[0x4]
8000281e:	ee f8 ff 7c 	ld.w	r8,r7[-132]
80002822:	12 38       	cp.w	r8,r9
80002824:	e0 88 00 09 	brls	80002836 <dip204_init+0x4fe>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80002828:	ee f9 ff 78 	ld.w	r9,r7[-136]
8000282c:	30 18       	mov	r8,1
8000282e:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80002832:	30 18       	mov	r8,1
80002834:	c0 28       	rjmp	80002838 <dip204_init+0x500>
    }
    return false;
80002836:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
80002838:	58 08       	cp.w	r8,0
8000283a:	ca b0       	breq	80002790 <dip204_init+0x458>
  // Send "Function Set" Command (RE=0)
  dip204_write_byte(0x30);
8000283c:	33 0c       	mov	r12,48
8000283e:	f0 1f 01 73 	mcall	80002e08 <dip204_init+0xad0>
  // Wait for command execution
  delay_ms(1);
80002842:	f0 1f 01 6f 	mcall	80002dfc <dip204_init+0xac4>
80002846:	18 99       	mov	r9,r12
80002848:	30 18       	mov	r8,1
8000284a:	ef 48 ff 84 	st.w	r7[-124],r8
8000284e:	ef 49 ff 80 	st.w	r7[-128],r9
80002852:	ee f8 ff 84 	ld.w	r8,r7[-124]
80002856:	ef 48 ff 8c 	st.w	r7[-116],r8
8000285a:	ee f8 ff 80 	ld.w	r8,r7[-128]
8000285e:	ef 48 ff 88 	st.w	r7[-120],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
80002862:	ee fb ff 8c 	ld.w	r11,r7[-116]
80002866:	ef 4b fe 80 	st.w	r7[-384],r11
8000286a:	30 0a       	mov	r10,0
8000286c:	ef 4a fe 7c 	st.w	r7[-388],r10
80002870:	ee f9 ff 88 	ld.w	r9,r7[-120]
80002874:	ef 49 fe 78 	st.w	r7[-392],r9
80002878:	30 08       	mov	r8,0
8000287a:	ef 48 fe 74 	st.w	r7[-396],r8
8000287e:	ee f9 fe 7c 	ld.w	r9,r7[-388]
80002882:	ee fc fe 78 	ld.w	r12,r7[-392]
80002886:	b9 39       	mul	r9,r12
80002888:	ee f8 fe 74 	ld.w	r8,r7[-396]
8000288c:	ee fb fe 80 	ld.w	r11,r7[-384]
80002890:	b7 38       	mul	r8,r11
80002892:	10 09       	add	r9,r8
80002894:	ee f8 fe 80 	ld.w	r8,r7[-384]
80002898:	ee fc fe 78 	ld.w	r12,r7[-392]
8000289c:	f0 0c 06 4a 	mulu.d	r10,r8,r12
800028a0:	16 09       	add	r9,r11
800028a2:	12 9b       	mov	r11,r9
800028a4:	e0 68 03 e7 	mov	r8,999
800028a8:	30 09       	mov	r9,0
800028aa:	10 0a       	add	r10,r8
800028ac:	f6 09 00 4b 	adc	r11,r11,r9
800028b0:	e0 68 03 e8 	mov	r8,1000
800028b4:	30 09       	mov	r9,0
800028b6:	f0 1f 01 53 	mcall	80002e00 <dip204_init+0xac8>
800028ba:	14 98       	mov	r8,r10
800028bc:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
800028be:	ef 48 ff 94 	st.w	r7[-108],r8
800028c2:	ee c8 01 20 	sub	r8,r7,288
800028c6:	ef 48 ff 90 	st.w	r7[-112],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800028ca:	e1 b8 00 42 	mfsr	r8,0x108
800028ce:	10 99       	mov	r9,r8
800028d0:	ee f8 ff 90 	ld.w	r8,r7[-112]
800028d4:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800028d6:	ee f8 ff 90 	ld.w	r8,r7[-112]
800028da:	70 09       	ld.w	r9,r8[0x0]
800028dc:	ee f8 ff 94 	ld.w	r8,r7[-108]
800028e0:	10 09       	add	r9,r8
800028e2:	ee f8 ff 90 	ld.w	r8,r7[-112]
800028e6:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
800028e8:	ee f9 ff 90 	ld.w	r9,r7[-112]
800028ec:	30 08       	mov	r8,0
800028ee:	f3 68 00 08 	st.b	r9[8],r8
800028f2:	ee c8 01 20 	sub	r8,r7,288
800028f6:	ef 48 ff 98 	st.w	r7[-104],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800028fa:	e1 b8 00 42 	mfsr	r8,0x108
800028fe:	ef 48 ff 9c 	st.w	r7[-100],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80002902:	ee f8 ff 98 	ld.w	r8,r7[-104]
80002906:	f1 39 00 08 	ld.ub	r9,r8[8]
8000290a:	30 28       	mov	r8,2
8000290c:	f0 09 18 00 	cp.b	r9,r8
80002910:	c0 31       	brne	80002916 <dip204_init+0x5de>
    return false;
80002912:	30 08       	mov	r8,0
80002914:	c4 38       	rjmp	8000299a <dip204_init+0x662>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80002916:	ee f8 ff 98 	ld.w	r8,r7[-104]
8000291a:	f1 39 00 08 	ld.ub	r9,r8[8]
8000291e:	30 18       	mov	r8,1
80002920:	f0 09 18 00 	cp.b	r9,r8
80002924:	c0 31       	brne	8000292a <dip204_init+0x5f2>
    return true;
80002926:	30 18       	mov	r8,1
80002928:	c3 98       	rjmp	8000299a <dip204_init+0x662>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000292a:	ee f8 ff 98 	ld.w	r8,r7[-104]
8000292e:	70 09       	ld.w	r9,r8[0x0]
80002930:	ee f8 ff 98 	ld.w	r8,r7[-104]
80002934:	70 18       	ld.w	r8,r8[0x4]
80002936:	10 39       	cp.w	r9,r8
80002938:	e0 88 00 1a 	brls	8000296c <dip204_init+0x634>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000293c:	ee f8 ff 98 	ld.w	r8,r7[-104]
80002940:	70 08       	ld.w	r8,r8[0x0]
80002942:	ee f9 ff 9c 	ld.w	r9,r7[-100]
80002946:	10 39       	cp.w	r9,r8
80002948:	c1 02       	brcc	80002968 <dip204_init+0x630>
8000294a:	ee f8 ff 98 	ld.w	r8,r7[-104]
8000294e:	70 18       	ld.w	r8,r8[0x4]
80002950:	ee f9 ff 9c 	ld.w	r9,r7[-100]
80002954:	10 39       	cp.w	r9,r8
80002956:	e0 88 00 09 	brls	80002968 <dip204_init+0x630>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
8000295a:	ee f9 ff 98 	ld.w	r9,r7[-104]
8000295e:	30 18       	mov	r8,1
80002960:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80002964:	30 18       	mov	r8,1
80002966:	c1 a8       	rjmp	8000299a <dip204_init+0x662>
    }
    return false;
80002968:	30 08       	mov	r8,0
8000296a:	c1 88       	rjmp	8000299a <dip204_init+0x662>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000296c:	ee f8 ff 98 	ld.w	r8,r7[-104]
80002970:	70 08       	ld.w	r8,r8[0x0]
80002972:	ee f9 ff 9c 	ld.w	r9,r7[-100]
80002976:	10 39       	cp.w	r9,r8
80002978:	c0 93       	brcs	8000298a <dip204_init+0x652>
8000297a:	ee f8 ff 98 	ld.w	r8,r7[-104]
8000297e:	70 18       	ld.w	r8,r8[0x4]
80002980:	ee f9 ff 9c 	ld.w	r9,r7[-100]
80002984:	10 39       	cp.w	r9,r8
80002986:	e0 88 00 09 	brls	80002998 <dip204_init+0x660>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
8000298a:	ee f9 ff 98 	ld.w	r9,r7[-104]
8000298e:	30 18       	mov	r8,1
80002990:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80002994:	30 18       	mov	r8,1
80002996:	c0 28       	rjmp	8000299a <dip204_init+0x662>
    }
    return false;
80002998:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
8000299a:	58 08       	cp.w	r8,0
8000299c:	ca b0       	breq	800028f2 <dip204_init+0x5ba>
  // Send "Display On Command: Display On, Cursor On, Blink On"
  dip204_write_byte(0x0F);
8000299e:	30 fc       	mov	r12,15
800029a0:	f0 1f 01 1a 	mcall	80002e08 <dip204_init+0xad0>
  // Wait for command execution
  delay_ms(1);
800029a4:	f0 1f 01 16 	mcall	80002dfc <dip204_init+0xac4>
800029a8:	18 98       	mov	r8,r12
800029aa:	30 19       	mov	r9,1
800029ac:	ef 49 ff a4 	st.w	r7[-92],r9
800029b0:	ef 48 ff a0 	st.w	r7[-96],r8
800029b4:	ee f8 ff a4 	ld.w	r8,r7[-92]
800029b8:	ef 48 ff ac 	st.w	r7[-84],r8
800029bc:	ee f8 ff a0 	ld.w	r8,r7[-96]
800029c0:	ef 48 ff a8 	st.w	r7[-88],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
800029c4:	ee fb ff ac 	ld.w	r11,r7[-84]
800029c8:	ef 4b fe 90 	st.w	r7[-368],r11
800029cc:	30 0a       	mov	r10,0
800029ce:	ef 4a fe 8c 	st.w	r7[-372],r10
800029d2:	ee f9 ff a8 	ld.w	r9,r7[-88]
800029d6:	ef 49 fe 88 	st.w	r7[-376],r9
800029da:	30 08       	mov	r8,0
800029dc:	ef 48 fe 84 	st.w	r7[-380],r8
800029e0:	ee fa fe 8c 	ld.w	r10,r7[-372]
800029e4:	ee fc fe 88 	ld.w	r12,r7[-376]
800029e8:	b9 3a       	mul	r10,r12
800029ea:	ee f8 fe 84 	ld.w	r8,r7[-380]
800029ee:	ee fb fe 90 	ld.w	r11,r7[-368]
800029f2:	b7 38       	mul	r8,r11
800029f4:	10 0a       	add	r10,r8
800029f6:	ee fc fe 90 	ld.w	r12,r7[-368]
800029fa:	ee fb fe 88 	ld.w	r11,r7[-376]
800029fe:	f8 0b 06 48 	mulu.d	r8,r12,r11
80002a02:	12 0a       	add	r10,r9
80002a04:	14 99       	mov	r9,r10
80002a06:	e0 6a 03 e7 	mov	r10,999
80002a0a:	30 0b       	mov	r11,0
80002a0c:	f0 0a 00 0a 	add	r10,r8,r10
80002a10:	f2 0b 00 4b 	adc	r11,r9,r11
80002a14:	e0 68 03 e8 	mov	r8,1000
80002a18:	30 09       	mov	r9,0
80002a1a:	f0 1f 00 fa 	mcall	80002e00 <dip204_init+0xac8>
80002a1e:	14 98       	mov	r8,r10
80002a20:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
80002a22:	ef 48 ff b4 	st.w	r7[-76],r8
80002a26:	ee c8 01 14 	sub	r8,r7,276
80002a2a:	ef 48 ff b0 	st.w	r7[-80],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002a2e:	e1 b8 00 42 	mfsr	r8,0x108
80002a32:	10 99       	mov	r9,r8
80002a34:	ee f8 ff b0 	ld.w	r8,r7[-80]
80002a38:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002a3a:	ee f8 ff b0 	ld.w	r8,r7[-80]
80002a3e:	70 09       	ld.w	r9,r8[0x0]
80002a40:	ee f8 ff b4 	ld.w	r8,r7[-76]
80002a44:	10 09       	add	r9,r8
80002a46:	ee f8 ff b0 	ld.w	r8,r7[-80]
80002a4a:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80002a4c:	ee f9 ff b0 	ld.w	r9,r7[-80]
80002a50:	30 08       	mov	r8,0
80002a52:	f3 68 00 08 	st.b	r9[8],r8
80002a56:	ee c8 01 14 	sub	r8,r7,276
80002a5a:	ef 48 ff b8 	st.w	r7[-72],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002a5e:	e1 b8 00 42 	mfsr	r8,0x108
80002a62:	ef 48 ff bc 	st.w	r7[-68],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80002a66:	ee f8 ff b8 	ld.w	r8,r7[-72]
80002a6a:	f1 39 00 08 	ld.ub	r9,r8[8]
80002a6e:	30 28       	mov	r8,2
80002a70:	f0 09 18 00 	cp.b	r9,r8
80002a74:	c0 31       	brne	80002a7a <dip204_init+0x742>
    return false;
80002a76:	30 08       	mov	r8,0
80002a78:	c4 38       	rjmp	80002afe <dip204_init+0x7c6>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80002a7a:	ee f8 ff b8 	ld.w	r8,r7[-72]
80002a7e:	f1 39 00 08 	ld.ub	r9,r8[8]
80002a82:	30 18       	mov	r8,1
80002a84:	f0 09 18 00 	cp.b	r9,r8
80002a88:	c0 31       	brne	80002a8e <dip204_init+0x756>
    return true;
80002a8a:	30 18       	mov	r8,1
80002a8c:	c3 98       	rjmp	80002afe <dip204_init+0x7c6>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002a8e:	ee f8 ff b8 	ld.w	r8,r7[-72]
80002a92:	70 09       	ld.w	r9,r8[0x0]
80002a94:	ee f8 ff b8 	ld.w	r8,r7[-72]
80002a98:	70 18       	ld.w	r8,r8[0x4]
80002a9a:	10 39       	cp.w	r9,r8
80002a9c:	e0 88 00 1a 	brls	80002ad0 <dip204_init+0x798>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002aa0:	ee f8 ff b8 	ld.w	r8,r7[-72]
80002aa4:	70 08       	ld.w	r8,r8[0x0]
80002aa6:	ee f9 ff bc 	ld.w	r9,r7[-68]
80002aaa:	10 39       	cp.w	r9,r8
80002aac:	c1 02       	brcc	80002acc <dip204_init+0x794>
80002aae:	ee f8 ff b8 	ld.w	r8,r7[-72]
80002ab2:	70 18       	ld.w	r8,r8[0x4]
80002ab4:	ee f9 ff bc 	ld.w	r9,r7[-68]
80002ab8:	10 39       	cp.w	r9,r8
80002aba:	e0 88 00 09 	brls	80002acc <dip204_init+0x794>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80002abe:	ee f9 ff b8 	ld.w	r9,r7[-72]
80002ac2:	30 18       	mov	r8,1
80002ac4:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80002ac8:	30 18       	mov	r8,1
80002aca:	c1 a8       	rjmp	80002afe <dip204_init+0x7c6>
    }
    return false;
80002acc:	30 08       	mov	r8,0
80002ace:	c1 88       	rjmp	80002afe <dip204_init+0x7c6>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002ad0:	ee f8 ff b8 	ld.w	r8,r7[-72]
80002ad4:	70 08       	ld.w	r8,r8[0x0]
80002ad6:	ee f9 ff bc 	ld.w	r9,r7[-68]
80002ada:	10 39       	cp.w	r9,r8
80002adc:	c0 93       	brcs	80002aee <dip204_init+0x7b6>
80002ade:	ee f8 ff b8 	ld.w	r8,r7[-72]
80002ae2:	70 18       	ld.w	r8,r8[0x4]
80002ae4:	ee f9 ff bc 	ld.w	r9,r7[-68]
80002ae8:	10 39       	cp.w	r9,r8
80002aea:	e0 88 00 09 	brls	80002afc <dip204_init+0x7c4>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80002aee:	ee f9 ff b8 	ld.w	r9,r7[-72]
80002af2:	30 18       	mov	r8,1
80002af4:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80002af8:	30 18       	mov	r8,1
80002afa:	c0 28       	rjmp	80002afe <dip204_init+0x7c6>
    }
    return false;
80002afc:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
80002afe:	58 08       	cp.w	r8,0
80002b00:	ca b0       	breq	80002a56 <dip204_init+0x71e>
  // Send "Display Clear" Command
  dip204_write_byte(0x01);
80002b02:	30 1c       	mov	r12,1
80002b04:	f0 1f 00 c1 	mcall	80002e08 <dip204_init+0xad0>
  // Wait for command execution
  delay_ms(5);
80002b08:	f0 1f 00 bd 	mcall	80002dfc <dip204_init+0xac4>
80002b0c:	18 98       	mov	r8,r12
80002b0e:	30 59       	mov	r9,5
80002b10:	ef 49 ff c4 	st.w	r7[-60],r9
80002b14:	ef 48 ff c0 	st.w	r7[-64],r8
80002b18:	ee f8 ff c4 	ld.w	r8,r7[-60]
80002b1c:	ef 48 ff cc 	st.w	r7[-52],r8
80002b20:	ee f8 ff c0 	ld.w	r8,r7[-64]
80002b24:	ef 48 ff c8 	st.w	r7[-56],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
80002b28:	ee fa ff cc 	ld.w	r10,r7[-52]
80002b2c:	ef 4a fe a0 	st.w	r7[-352],r10
80002b30:	30 09       	mov	r9,0
80002b32:	ef 49 fe 9c 	st.w	r7[-356],r9
80002b36:	ee f8 ff c8 	ld.w	r8,r7[-56]
80002b3a:	ef 48 fe 98 	st.w	r7[-360],r8
80002b3e:	30 0c       	mov	r12,0
80002b40:	ef 4c fe 94 	st.w	r7[-364],r12
80002b44:	ee fa fe 9c 	ld.w	r10,r7[-356]
80002b48:	ee fb fe 98 	ld.w	r11,r7[-360]
80002b4c:	b7 3a       	mul	r10,r11
80002b4e:	ee f8 fe 94 	ld.w	r8,r7[-364]
80002b52:	ee f9 fe a0 	ld.w	r9,r7[-352]
80002b56:	b3 38       	mul	r8,r9
80002b58:	10 0a       	add	r10,r8
80002b5a:	ee fc fe a0 	ld.w	r12,r7[-352]
80002b5e:	ee fb fe 98 	ld.w	r11,r7[-360]
80002b62:	f8 0b 06 48 	mulu.d	r8,r12,r11
80002b66:	12 0a       	add	r10,r9
80002b68:	14 99       	mov	r9,r10
80002b6a:	e0 6a 03 e7 	mov	r10,999
80002b6e:	30 0b       	mov	r11,0
80002b70:	f0 0a 00 0a 	add	r10,r8,r10
80002b74:	f2 0b 00 4b 	adc	r11,r9,r11
80002b78:	e0 68 03 e8 	mov	r8,1000
80002b7c:	30 09       	mov	r9,0
80002b7e:	f0 1f 00 a1 	mcall	80002e00 <dip204_init+0xac8>
80002b82:	14 98       	mov	r8,r10
80002b84:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
80002b86:	ef 48 ff d4 	st.w	r7[-44],r8
80002b8a:	ee c8 01 08 	sub	r8,r7,264
80002b8e:	ef 48 ff d0 	st.w	r7[-48],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002b92:	e1 b8 00 42 	mfsr	r8,0x108
80002b96:	10 99       	mov	r9,r8
80002b98:	ee f8 ff d0 	ld.w	r8,r7[-48]
80002b9c:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002b9e:	ee f8 ff d0 	ld.w	r8,r7[-48]
80002ba2:	70 09       	ld.w	r9,r8[0x0]
80002ba4:	ee f8 ff d4 	ld.w	r8,r7[-44]
80002ba8:	10 09       	add	r9,r8
80002baa:	ee f8 ff d0 	ld.w	r8,r7[-48]
80002bae:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80002bb0:	ee f9 ff d0 	ld.w	r9,r7[-48]
80002bb4:	30 08       	mov	r8,0
80002bb6:	f3 68 00 08 	st.b	r9[8],r8
80002bba:	ee c8 01 08 	sub	r8,r7,264
80002bbe:	ef 48 ff d8 	st.w	r7[-40],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002bc2:	e1 b8 00 42 	mfsr	r8,0x108
80002bc6:	ef 48 ff dc 	st.w	r7[-36],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80002bca:	ee f8 ff d8 	ld.w	r8,r7[-40]
80002bce:	f1 39 00 08 	ld.ub	r9,r8[8]
80002bd2:	30 28       	mov	r8,2
80002bd4:	f0 09 18 00 	cp.b	r9,r8
80002bd8:	c0 31       	brne	80002bde <dip204_init+0x8a6>
    return false;
80002bda:	30 08       	mov	r8,0
80002bdc:	c4 38       	rjmp	80002c62 <dip204_init+0x92a>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80002bde:	ee f8 ff d8 	ld.w	r8,r7[-40]
80002be2:	f1 39 00 08 	ld.ub	r9,r8[8]
80002be6:	30 18       	mov	r8,1
80002be8:	f0 09 18 00 	cp.b	r9,r8
80002bec:	c0 31       	brne	80002bf2 <dip204_init+0x8ba>
    return true;
80002bee:	30 18       	mov	r8,1
80002bf0:	c3 98       	rjmp	80002c62 <dip204_init+0x92a>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002bf2:	ee f8 ff d8 	ld.w	r8,r7[-40]
80002bf6:	70 09       	ld.w	r9,r8[0x0]
80002bf8:	ee f8 ff d8 	ld.w	r8,r7[-40]
80002bfc:	70 18       	ld.w	r8,r8[0x4]
80002bfe:	10 39       	cp.w	r9,r8
80002c00:	e0 88 00 1a 	brls	80002c34 <dip204_init+0x8fc>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002c04:	ee f8 ff d8 	ld.w	r8,r7[-40]
80002c08:	70 08       	ld.w	r8,r8[0x0]
80002c0a:	ee f9 ff dc 	ld.w	r9,r7[-36]
80002c0e:	10 39       	cp.w	r9,r8
80002c10:	c1 02       	brcc	80002c30 <dip204_init+0x8f8>
80002c12:	ee f8 ff d8 	ld.w	r8,r7[-40]
80002c16:	70 18       	ld.w	r8,r8[0x4]
80002c18:	ee f9 ff dc 	ld.w	r9,r7[-36]
80002c1c:	10 39       	cp.w	r9,r8
80002c1e:	e0 88 00 09 	brls	80002c30 <dip204_init+0x8f8>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80002c22:	ee f9 ff d8 	ld.w	r9,r7[-40]
80002c26:	30 18       	mov	r8,1
80002c28:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80002c2c:	30 18       	mov	r8,1
80002c2e:	c1 a8       	rjmp	80002c62 <dip204_init+0x92a>
    }
    return false;
80002c30:	30 08       	mov	r8,0
80002c32:	c1 88       	rjmp	80002c62 <dip204_init+0x92a>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002c34:	ee f8 ff d8 	ld.w	r8,r7[-40]
80002c38:	70 08       	ld.w	r8,r8[0x0]
80002c3a:	ee f9 ff dc 	ld.w	r9,r7[-36]
80002c3e:	10 39       	cp.w	r9,r8
80002c40:	c0 93       	brcs	80002c52 <dip204_init+0x91a>
80002c42:	ee f8 ff d8 	ld.w	r8,r7[-40]
80002c46:	70 18       	ld.w	r8,r8[0x4]
80002c48:	ee f9 ff dc 	ld.w	r9,r7[-36]
80002c4c:	10 39       	cp.w	r9,r8
80002c4e:	e0 88 00 09 	brls	80002c60 <dip204_init+0x928>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80002c52:	ee f9 ff d8 	ld.w	r9,r7[-40]
80002c56:	30 18       	mov	r8,1
80002c58:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80002c5c:	30 18       	mov	r8,1
80002c5e:	c0 28       	rjmp	80002c62 <dip204_init+0x92a>
    }
    return false;
80002c60:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
80002c62:	58 08       	cp.w	r8,0
80002c64:	ca b0       	breq	80002bba <dip204_init+0x882>
  // Send "Entry Mode Set Command: Increment Mode, Entire Shift off"
  dip204_write_byte(0x06);
80002c66:	30 6c       	mov	r12,6
80002c68:	f0 1f 00 68 	mcall	80002e08 <dip204_init+0xad0>
  // Wait for command execution
  delay_ms(1);
80002c6c:	f0 1f 00 64 	mcall	80002dfc <dip204_init+0xac4>
80002c70:	18 98       	mov	r8,r12
80002c72:	30 19       	mov	r9,1
80002c74:	ef 49 ff e4 	st.w	r7[-28],r9
80002c78:	ef 48 ff e0 	st.w	r7[-32],r8
80002c7c:	ee f8 ff e4 	ld.w	r8,r7[-28]
80002c80:	ef 48 ff ec 	st.w	r7[-20],r8
80002c84:	ee f8 ff e0 	ld.w	r8,r7[-32]
80002c88:	ef 48 ff e8 	st.w	r7[-24],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
80002c8c:	ee fa ff ec 	ld.w	r10,r7[-20]
80002c90:	ef 4a fe b0 	st.w	r7[-336],r10
80002c94:	30 09       	mov	r9,0
80002c96:	ef 49 fe ac 	st.w	r7[-340],r9
80002c9a:	ee f8 ff e8 	ld.w	r8,r7[-24]
80002c9e:	ef 48 fe a8 	st.w	r7[-344],r8
80002ca2:	30 0c       	mov	r12,0
80002ca4:	ef 4c fe a4 	st.w	r7[-348],r12
80002ca8:	ee fa fe ac 	ld.w	r10,r7[-340]
80002cac:	ee fb fe a8 	ld.w	r11,r7[-344]
80002cb0:	b7 3a       	mul	r10,r11
80002cb2:	ee f8 fe a4 	ld.w	r8,r7[-348]
80002cb6:	ee f9 fe b0 	ld.w	r9,r7[-336]
80002cba:	b3 38       	mul	r8,r9
80002cbc:	10 0a       	add	r10,r8
80002cbe:	ee fc fe b0 	ld.w	r12,r7[-336]
80002cc2:	ee fb fe a8 	ld.w	r11,r7[-344]
80002cc6:	f8 0b 06 48 	mulu.d	r8,r12,r11
80002cca:	12 0a       	add	r10,r9
80002ccc:	14 99       	mov	r9,r10
80002cce:	e0 6a 03 e7 	mov	r10,999
80002cd2:	30 0b       	mov	r11,0
80002cd4:	f0 0a 00 0a 	add	r10,r8,r10
80002cd8:	f2 0b 00 4b 	adc	r11,r9,r11
80002cdc:	e0 68 03 e8 	mov	r8,1000
80002ce0:	30 09       	mov	r9,0
80002ce2:	f0 1f 00 48 	mcall	80002e00 <dip204_init+0xac8>
80002ce6:	14 98       	mov	r8,r10
80002ce8:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
80002cea:	ef 48 ff f4 	st.w	r7[-12],r8
80002cee:	ee c8 00 fc 	sub	r8,r7,252
80002cf2:	ef 48 ff f0 	st.w	r7[-16],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002cf6:	e1 b8 00 42 	mfsr	r8,0x108
80002cfa:	10 99       	mov	r9,r8
80002cfc:	ee f8 ff f0 	ld.w	r8,r7[-16]
80002d00:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002d02:	ee f8 ff f0 	ld.w	r8,r7[-16]
80002d06:	70 09       	ld.w	r9,r8[0x0]
80002d08:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002d0c:	10 09       	add	r9,r8
80002d0e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80002d12:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80002d14:	ee f9 ff f0 	ld.w	r9,r7[-16]
80002d18:	30 08       	mov	r8,0
80002d1a:	f3 68 00 08 	st.b	r9[8],r8
80002d1e:	ee c8 00 fc 	sub	r8,r7,252
80002d22:	ef 48 ff f8 	st.w	r7[-8],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002d26:	e1 b8 00 42 	mfsr	r8,0x108
80002d2a:	ef 48 ff fc 	st.w	r7[-4],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80002d2e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002d32:	f1 39 00 08 	ld.ub	r9,r8[8]
80002d36:	30 28       	mov	r8,2
80002d38:	f0 09 18 00 	cp.b	r9,r8
80002d3c:	c0 31       	brne	80002d42 <dip204_init+0xa0a>
    return false;
80002d3e:	30 08       	mov	r8,0
80002d40:	c4 38       	rjmp	80002dc6 <dip204_init+0xa8e>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80002d42:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002d46:	f1 39 00 08 	ld.ub	r9,r8[8]
80002d4a:	30 18       	mov	r8,1
80002d4c:	f0 09 18 00 	cp.b	r9,r8
80002d50:	c0 31       	brne	80002d56 <dip204_init+0xa1e>
    return true;
80002d52:	30 18       	mov	r8,1
80002d54:	c3 98       	rjmp	80002dc6 <dip204_init+0xa8e>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002d56:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002d5a:	70 09       	ld.w	r9,r8[0x0]
80002d5c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002d60:	70 18       	ld.w	r8,r8[0x4]
80002d62:	10 39       	cp.w	r9,r8
80002d64:	e0 88 00 1a 	brls	80002d98 <dip204_init+0xa60>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002d68:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002d6c:	70 08       	ld.w	r8,r8[0x0]
80002d6e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002d72:	10 39       	cp.w	r9,r8
80002d74:	c1 02       	brcc	80002d94 <dip204_init+0xa5c>
80002d76:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002d7a:	70 18       	ld.w	r8,r8[0x4]
80002d7c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002d80:	10 39       	cp.w	r9,r8
80002d82:	e0 88 00 09 	brls	80002d94 <dip204_init+0xa5c>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80002d86:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002d8a:	30 18       	mov	r8,1
80002d8c:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80002d90:	30 18       	mov	r8,1
80002d92:	c1 a8       	rjmp	80002dc6 <dip204_init+0xa8e>
    }
    return false;
80002d94:	30 08       	mov	r8,0
80002d96:	c1 88       	rjmp	80002dc6 <dip204_init+0xa8e>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002d98:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002d9c:	70 08       	ld.w	r8,r8[0x0]
80002d9e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002da2:	10 39       	cp.w	r9,r8
80002da4:	c0 93       	brcs	80002db6 <dip204_init+0xa7e>
80002da6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002daa:	70 18       	ld.w	r8,r8[0x4]
80002dac:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002db0:	10 39       	cp.w	r9,r8
80002db2:	e0 88 00 09 	brls	80002dc4 <dip204_init+0xa8c>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80002db6:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002dba:	30 18       	mov	r8,1
80002dbc:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80002dc0:	30 18       	mov	r8,1
80002dc2:	c0 28       	rjmp	80002dc6 <dip204_init+0xa8e>
    }
    return false;
80002dc4:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
80002dc6:	58 08       	cp.w	r8,0
80002dc8:	ca b0       	breq	80002d1e <dip204_init+0x9e6>
  dip204_wait_busy();
80002dca:	f0 1f 00 11 	mcall	80002e0c <dip204_init+0xad4>
  // unselect chip
  dip204_unselect();
80002dce:	f0 1f 00 11 	mcall	80002e10 <dip204_init+0xad8>
}
80002dd2:	29 5d       	sub	sp,-428
80002dd4:	e3 cd 80 8f 	ldm	sp++,r0-r3,r7,pc
80002dd8:	00 00       	add	r0,r0
80002dda:	00 08       	add	r8,r0
80002ddc:	80 00       	ld.sh	r0,r0[0x0]
80002dde:	45 30       	lddsp	r0,sp[0x14c]
80002de0:	80 00       	ld.sh	r0,r0[0x0]
80002de2:	36 68       	mov	r8,102
80002de4:	00 00       	add	r0,r0
80002de6:	05 28       	ld.uh	r8,r2++
80002de8:	00 00       	add	r0,r0
80002dea:	05 2c       	ld.uh	r12,r2++
80002dec:	80 00       	ld.sh	r0,r0[0x0]
80002dee:	36 fc       	mov	r12,111
80002df0:	80 00       	ld.sh	r0,r0[0x0]
80002df2:	37 84       	mov	r4,120
80002df4:	80 00       	ld.sh	r0,r0[0x0]
80002df6:	48 a6       	lddpc	r6,80002e1c <dip204_hide_cursor+0x8>
80002df8:	80 00       	ld.sh	r0,r0[0x0]
80002dfa:	48 3e       	lddpc	lr,80002e04 <dip204_init+0xacc>
80002dfc:	80 00       	ld.sh	r0,r0[0x0]
80002dfe:	23 20       	sub	r0,50
80002e00:	80 00       	ld.sh	r0,r0[0x0]
80002e02:	60 42       	ld.w	r2,r0[0x10]
80002e04:	80 00       	ld.sh	r0,r0[0x0]
80002e06:	2f 40       	sub	r0,-12
80002e08:	80 00       	ld.sh	r0,r0[0x0]
80002e0a:	2f 70       	sub	r0,-9
80002e0c:	80 00       	ld.sh	r0,r0[0x0]
80002e0e:	30 54       	mov	r4,5
80002e10:	80 00       	ld.sh	r0,r0[0x0]
80002e12:	2f 58       	sub	r8,-11

80002e14 <dip204_hide_cursor>:
  dip204_unselect();
}


void dip204_hide_cursor(void)
{
80002e14:	eb cd 40 80 	pushm	r7,lr
80002e18:	1a 97       	mov	r7,sp
  /* select the LCD chip */
  dip204_select();
80002e1a:	f0 1f 00 08 	mcall	80002e38 <dip204_hide_cursor+0x24>
  /* Send Command Start Byte */
  dip204_write_byte(DIP204_WRITE_COMMAND);
80002e1e:	e0 6c 00 f8 	mov	r12,248
80002e22:	f0 1f 00 07 	mcall	80002e3c <dip204_hide_cursor+0x28>
  /* Send "Display On Command: Display On, Cursor On, Blink On" */
  dip204_write_byte(0x0C);
80002e26:	30 cc       	mov	r12,12
80002e28:	f0 1f 00 05 	mcall	80002e3c <dip204_hide_cursor+0x28>
  dip204_wait_busy();
80002e2c:	f0 1f 00 05 	mcall	80002e40 <dip204_hide_cursor+0x2c>
  /* unselect chip */
  dip204_unselect();
80002e30:	f0 1f 00 05 	mcall	80002e44 <dip204_hide_cursor+0x30>
}
80002e34:	e3 cd 80 80 	ldm	sp++,r7,pc
80002e38:	80 00       	ld.sh	r0,r0[0x0]
80002e3a:	2f 40       	sub	r0,-12
80002e3c:	80 00       	ld.sh	r0,r0[0x0]
80002e3e:	2f 70       	sub	r0,-9
80002e40:	80 00       	ld.sh	r0,r0[0x0]
80002e42:	30 54       	mov	r4,5
80002e44:	80 00       	ld.sh	r0,r0[0x0]
80002e46:	2f 58       	sub	r8,-11

80002e48 <dip204_set_cursor_position>:
  dip204_set_cursor_position(column, line);
}


void dip204_set_cursor_position(unsigned char column, unsigned char line)
{
80002e48:	eb cd 40 80 	pushm	r7,lr
80002e4c:	1a 97       	mov	r7,sp
80002e4e:	20 3d       	sub	sp,12
80002e50:	18 99       	mov	r9,r12
80002e52:	16 98       	mov	r8,r11
80002e54:	ef 69 ff f8 	st.b	r7[-8],r9
80002e58:	ef 68 ff f4 	st.b	r7[-12],r8
  unsigned char address = 0;
80002e5c:	30 08       	mov	r8,0
80002e5e:	ef 68 ff ff 	st.b	r7[-1],r8

  dip204_select();
80002e62:	f0 1f 00 18 	mcall	80002ec0 <dip204_set_cursor_position+0x78>
  if ((column <= 20) && (line <= 4))
80002e66:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80002e6a:	31 48       	mov	r8,20
80002e6c:	f0 09 18 00 	cp.b	r9,r8
80002e70:	e0 8b 00 17 	brhi	80002e9e <dip204_set_cursor_position+0x56>
80002e74:	ef 39 ff f4 	ld.ub	r9,r7[-12]
80002e78:	30 48       	mov	r8,4
80002e7a:	f0 09 18 00 	cp.b	r9,r8
80002e7e:	e0 8b 00 10 	brhi	80002e9e <dip204_set_cursor_position+0x56>
  {
    /* Calculate DDRAM address from line and row values */
    address = ( (line-1) * 32 ) + ( column-1 ) + 128;
80002e82:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80002e86:	20 18       	sub	r8,1
80002e88:	5c 58       	castu.b	r8
80002e8a:	a5 78       	lsl	r8,0x5
80002e8c:	5c 58       	castu.b	r8
80002e8e:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80002e92:	f2 08 00 08 	add	r8,r9,r8
80002e96:	5c 58       	castu.b	r8
80002e98:	28 18       	sub	r8,-127
80002e9a:	ef 68 ff ff 	st.b	r7[-1],r8
  }
  /* Send Command Start Byte */
  dip204_write_byte(DIP204_WRITE_COMMAND);
80002e9e:	e0 6c 00 f8 	mov	r12,248
80002ea2:	f0 1f 00 09 	mcall	80002ec4 <dip204_set_cursor_position+0x7c>
  /* Send Address lower Nibble */
  dip204_write_byte(address);
80002ea6:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80002eaa:	10 9c       	mov	r12,r8
80002eac:	f0 1f 00 06 	mcall	80002ec4 <dip204_set_cursor_position+0x7c>
  dip204_wait_busy();
80002eb0:	f0 1f 00 06 	mcall	80002ec8 <dip204_set_cursor_position+0x80>
  dip204_unselect();
80002eb4:	f0 1f 00 06 	mcall	80002ecc <dip204_set_cursor_position+0x84>
}
80002eb8:	2f dd       	sub	sp,-12
80002eba:	e3 cd 80 80 	ldm	sp++,r7,pc
80002ebe:	00 00       	add	r0,r0
80002ec0:	80 00       	ld.sh	r0,r0[0x0]
80002ec2:	2f 40       	sub	r0,-12
80002ec4:	80 00       	ld.sh	r0,r0[0x0]
80002ec6:	2f 70       	sub	r0,-9
80002ec8:	80 00       	ld.sh	r0,r0[0x0]
80002eca:	30 54       	mov	r4,5
80002ecc:	80 00       	ld.sh	r0,r0[0x0]
80002ece:	2f 58       	sub	r8,-11

80002ed0 <dip204_write_string>:
  dip204_unselect();
}


void dip204_write_string(const char *string)
{
80002ed0:	eb cd 40 80 	pushm	r7,lr
80002ed4:	1a 97       	mov	r7,sp
80002ed6:	20 2d       	sub	sp,8
80002ed8:	ef 4c ff f8 	st.w	r7[-8],r12
  unsigned char i=0;
80002edc:	30 08       	mov	r8,0
80002ede:	ef 68 ff ff 	st.b	r7[-1],r8

  dip204_select();
80002ee2:	f0 1f 00 14 	mcall	80002f30 <dip204_write_string+0x60>
  /* for all chars in string */
  while(string[i]!=0)
80002ee6:	c1 68       	rjmp	80002f12 <dip204_write_string+0x42>
  {
    /* Send Write Data Start Byte */
    dip204_write_byte(DIP204_WRITE_DATA);
80002ee8:	e0 6c 00 fa 	mov	r12,250
80002eec:	f0 1f 00 12 	mcall	80002f34 <dip204_write_string+0x64>
    /* Send byte */
    dip204_write_byte(string[i]);
80002ef0:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80002ef4:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002ef8:	f2 08 00 08 	add	r8,r9,r8
80002efc:	11 88       	ld.ub	r8,r8[0x0]
80002efe:	10 9c       	mov	r12,r8
80002f00:	f0 1f 00 0d 	mcall	80002f34 <dip204_write_string+0x64>
    /* go to next char */
    i++;
80002f04:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80002f08:	2f f8       	sub	r8,-1
80002f0a:	ef 68 ff ff 	st.b	r7[-1],r8
    dip204_wait_busy();
80002f0e:	f0 1f 00 0b 	mcall	80002f38 <dip204_write_string+0x68>
{
  unsigned char i=0;

  dip204_select();
  /* for all chars in string */
  while(string[i]!=0)
80002f12:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80002f16:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002f1a:	f2 08 00 08 	add	r8,r9,r8
80002f1e:	11 88       	ld.ub	r8,r8[0x0]
80002f20:	58 08       	cp.w	r8,0
80002f22:	ce 31       	brne	80002ee8 <dip204_write_string+0x18>
    dip204_write_byte(string[i]);
    /* go to next char */
    i++;
    dip204_wait_busy();
  }
  dip204_unselect();
80002f24:	f0 1f 00 06 	mcall	80002f3c <dip204_write_string+0x6c>
}
80002f28:	2f ed       	sub	sp,-8
80002f2a:	e3 cd 80 80 	ldm	sp++,r7,pc
80002f2e:	00 00       	add	r0,r0
80002f30:	80 00       	ld.sh	r0,r0[0x0]
80002f32:	2f 40       	sub	r0,-12
80002f34:	80 00       	ld.sh	r0,r0[0x0]
80002f36:	2f 70       	sub	r0,-9
80002f38:	80 00       	ld.sh	r0,r0[0x0]
80002f3a:	30 54       	mov	r4,5
80002f3c:	80 00       	ld.sh	r0,r0[0x0]
80002f3e:	2f 58       	sub	r8,-11

80002f40 <dip204_select>:

/*! \brief function to select the LCD
 *
 */
static void dip204_select(void)
{
80002f40:	eb cd 40 80 	pushm	r7,lr
80002f44:	1a 97       	mov	r7,sp
  spi_selectChip(DIP204_SPI, DIP204_SPI_NPCS);
80002f46:	30 2b       	mov	r11,2
80002f48:	fe 7c 28 00 	mov	r12,-55296
80002f4c:	f0 1f 00 02 	mcall	80002f54 <dip204_select+0x14>
}
80002f50:	e3 cd 80 80 	ldm	sp++,r7,pc
80002f54:	80 00       	ld.sh	r0,r0[0x0]
80002f56:	40 90       	lddsp	r0,sp[0x24]

80002f58 <dip204_unselect>:

/*! \brief function to unselect the LCD
 *
 */
static void dip204_unselect(void)
{
80002f58:	eb cd 40 80 	pushm	r7,lr
80002f5c:	1a 97       	mov	r7,sp
#ifdef _ASSERT_ENABLE_
  spi_status =
#endif
  spi_unselectChip(DIP204_SPI, DIP204_SPI_NPCS);
80002f5e:	30 2b       	mov	r11,2
80002f60:	fe 7c 28 00 	mov	r12,-55296
80002f64:	f0 1f 00 02 	mcall	80002f6c <dip204_unselect+0x14>
  Assert( SPI_OK==spi_status );
}
80002f68:	e3 cd 80 80 	ldm	sp++,r7,pc
80002f6c:	80 00       	ld.sh	r0,r0[0x0]
80002f6e:	41 28       	lddsp	r8,sp[0x48]

80002f70 <dip204_write_byte>:
 *
 *  \param  byte  Input. byte to write to the LCD (D7 .. D0)
 *
 */
static void dip204_write_byte(unsigned char byte)
{
80002f70:	eb cd 40 80 	pushm	r7,lr
80002f74:	1a 97       	mov	r7,sp
80002f76:	20 3d       	sub	sp,12
80002f78:	18 98       	mov	r8,r12
80002f7a:	ef 68 ff f4 	st.b	r7[-12],r8
  unsigned char reverse;

  switch (byte)
80002f7e:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80002f82:	f0 c8 00 f8 	sub	r8,r8,248
80002f86:	58 68       	cp.w	r8,6
80002f88:	e0 8b 00 10 	brhi	80002fa8 <dip204_write_byte+0x38>
80002f8c:	30 19       	mov	r9,1
80002f8e:	f2 08 09 48 	lsl	r8,r9,r8
80002f92:	e2 18 00 55 	andl	r8,0x55,COH
80002f96:	c0 90       	breq	80002fa8 <dip204_write_byte+0x38>
    {
      /* send D7 to D0 */
#ifdef _ASSERT_ENABLE_
      spi_status =
#endif
      spi_write(DIP204_SPI, byte);
80002f98:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80002f9c:	10 9b       	mov	r11,r8
80002f9e:	fe 7c 28 00 	mov	r12,-55296
80002fa2:	f0 1f 00 15 	mcall	80002ff4 <dip204_write_byte+0x84>
      Assert( SPI_OK==spi_status );
      break;
80002fa6:	c2 48       	rjmp	80002fee <dip204_write_byte+0x7e>
    }
    /* LSB first for all other data */
    default:
    {
      /* reverse byte */
      reverse = bit_reverse8(byte);
80002fa8:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80002fac:	ef 48 ff fc 	st.w	r7[-4],r8
80002fb0:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002fb4:	5c 98       	brev	r8
80002fb6:	ef 48 ff fc 	st.w	r7[-4],r8
80002fba:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002fbe:	b9 88       	lsr	r8,0x18
80002fc0:	ef 68 ff fb 	st.b	r7[-5],r8
      /* send D0 to D3 */
#ifdef _ASSERT_ENABLE_
      spi_status =
#endif
      spi_write(DIP204_SPI, (reverse & 0xF0));
80002fc4:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80002fc8:	e2 18 00 f0 	andl	r8,0xf0,COH
80002fcc:	10 9b       	mov	r11,r8
80002fce:	fe 7c 28 00 	mov	r12,-55296
80002fd2:	f0 1f 00 09 	mcall	80002ff4 <dip204_write_byte+0x84>
      Assert( SPI_OK==spi_status );
      /* send D4 to D7 */
#ifdef _ASSERT_ENABLE_
      spi_status =
#endif
      spi_write(DIP204_SPI, ((reverse << 4) & 0xF0));
80002fd6:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80002fda:	a5 68       	lsl	r8,0x4
80002fdc:	5c 88       	casts.h	r8
80002fde:	5c 78       	castu.h	r8
80002fe0:	f1 d8 c0 08 	bfextu	r8,r8,0x0,0x8
80002fe4:	10 9b       	mov	r11,r8
80002fe6:	fe 7c 28 00 	mov	r12,-55296
80002fea:	f0 1f 00 03 	mcall	80002ff4 <dip204_write_byte+0x84>
      Assert( SPI_OK==spi_status );
      break;
    }
  }
}
80002fee:	2f dd       	sub	sp,-12
80002ff0:	e3 cd 80 80 	ldm	sp++,r7,pc
80002ff4:	80 00       	ld.sh	r0,r0[0x0]
80002ff6:	43 32       	lddsp	r2,sp[0xcc]

80002ff8 <dip204_read_byte>:
 *
 *  \param  byte  Input. byte read from the LCD (D7 .. D0)
 *
 */
static void dip204_read_byte(unsigned char *byte)
{
80002ff8:	eb cd 40 80 	pushm	r7,lr
80002ffc:	1a 97       	mov	r7,sp
80002ffe:	20 3d       	sub	sp,12
80003000:	ef 4c ff f4 	st.w	r7[-12],r12
  unsigned short reverse = 0x00;
80003004:	30 08       	mov	r8,0
80003006:	ef 58 ff fa 	st.h	r7[-6],r8

  /* dummy write */
#ifdef _ASSERT_ENABLE_
  spi_status =
#endif
  spi_write(DIP204_SPI, 0x00);
8000300a:	30 0b       	mov	r11,0
8000300c:	fe 7c 28 00 	mov	r12,-55296
80003010:	f0 1f 00 0f 	mcall	8000304c <dip204_read_byte+0x54>
  Assert( SPI_OK==spi_status );
  /* read RSR register */
#ifdef _ASSERT_ENABLE_
  spi_status =
#endif
  spi_read(DIP204_SPI, &reverse);
80003014:	ee c8 00 06 	sub	r8,r7,6
80003018:	10 9b       	mov	r11,r8
8000301a:	fe 7c 28 00 	mov	r12,-55296
8000301e:	f0 1f 00 0d 	mcall	80003050 <dip204_read_byte+0x58>
  Assert( SPI_OK==spi_status );
  /* Revert received byte (issued LSB first by the LCD) */
  *byte = bit_reverse8(reverse);
80003022:	ef 08 ff fa 	ld.sh	r8,r7[-6]
80003026:	5c 58       	castu.b	r8
80003028:	ef 48 ff fc 	st.w	r7[-4],r8
8000302c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003030:	5c 98       	brev	r8
80003032:	ef 48 ff fc 	st.w	r7[-4],r8
80003036:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000303a:	b9 88       	lsr	r8,0x18
8000303c:	5c 58       	castu.b	r8
8000303e:	ee f9 ff f4 	ld.w	r9,r7[-12]
80003042:	b2 88       	st.b	r9[0x0],r8
}
80003044:	2f dd       	sub	sp,-12
80003046:	e3 cd 80 80 	ldm	sp++,r7,pc
8000304a:	00 00       	add	r0,r0
8000304c:	80 00       	ld.sh	r0,r0[0x0]
8000304e:	43 32       	lddsp	r2,sp[0xcc]
80003050:	80 00       	ld.sh	r0,r0[0x0]
80003052:	43 8a       	lddsp	r10,sp[0xe0]

80003054 <dip204_wait_busy>:

/*! \brief function to wait for LCD becomes not busy
 *
 */
static void dip204_wait_busy(void)
{
80003054:	eb cd 40 80 	pushm	r7,lr
80003058:	1a 97       	mov	r7,sp
8000305a:	20 1d       	sub	sp,4
  unsigned char status = 0x00;
8000305c:	30 08       	mov	r8,0
8000305e:	ef 68 ff ff 	st.b	r7[-1],r8

  /* send read command to LCD */
  dip204_write_byte(DIP204_READ_COMMAND);
80003062:	e0 6c 00 fc 	mov	r12,252
80003066:	f0 1f 00 09 	mcall	80003088 <dip204_wait_busy+0x34>
  /* read next byte */
  do {
  dip204_read_byte(&status);
8000306a:	ee c8 00 01 	sub	r8,r7,1
8000306e:	10 9c       	mov	r12,r8
80003070:	f0 1f 00 07 	mcall	8000308c <dip204_wait_busy+0x38>
  /* keep D7 to know status */
  }while (status & 0x80);
80003074:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80003078:	10 99       	mov	r9,r8
8000307a:	30 08       	mov	r8,0
8000307c:	f0 09 18 00 	cp.b	r9,r8
80003080:	cf 55       	brlt	8000306a <dip204_wait_busy+0x16>
}
80003082:	2f fd       	sub	sp,-4
80003084:	e3 cd 80 80 	ldm	sp++,r7,pc
80003088:	80 00       	ld.sh	r0,r0[0x0]
8000308a:	2f 70       	sub	r0,-9
8000308c:	80 00       	ld.sh	r0,r0[0x0]
8000308e:	2f f8       	sub	r8,-1

80003090 <adc_configure>:
 * If not called, ADC channels will have side effects
 *
 * \param *adc Base address of the ADC
 */
void adc_configure(volatile avr32_adc_t *adc)
{
80003090:	eb cd 40 80 	pushm	r7,lr
80003094:	1a 97       	mov	r7,sp
80003096:	20 1d       	sub	sp,4
80003098:	ef 4c ff fc 	st.w	r7[-4],r12
	adc->mr |= 1 << AVR32_ADC_LOWRES_OFFSET;
#endif

	/* Set Sample/Hold time to max so that the ADC capacitor should be
	 * loaded entirely */
	adc->mr |= 0xF << AVR32_ADC_SHTIM_OFFSET;
8000309c:	ee f8 ff fc 	ld.w	r8,r7[-4]
800030a0:	70 18       	ld.w	r8,r8[0x4]
800030a2:	10 99       	mov	r9,r8
800030a4:	ea 19 0f 00 	orh	r9,0xf00
800030a8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800030ac:	91 19       	st.w	r8[0x4],r9

	/* Set Startup to max so that the ADC capacitor should be loaded
	 * entirely */
	adc->mr |= 0x1F << AVR32_ADC_STARTUP_OFFSET;
800030ae:	ee f8 ff fc 	ld.w	r8,r7[-4]
800030b2:	70 18       	ld.w	r8,r8[0x4]
800030b4:	10 99       	mov	r9,r8
800030b6:	ea 19 00 1f 	orh	r9,0x1f
800030ba:	ee f8 ff fc 	ld.w	r8,r7[-4]
800030be:	91 19       	st.w	r8[0x4],r9
}
800030c0:	2f fd       	sub	sp,-4
800030c2:	e3 cd 80 80 	ldm	sp++,r7,pc

800030c6 <adc_start>:

/** \brief Start analog to digital conversion
 * \param *adc Base address of the ADC
 */
void adc_start(volatile avr32_adc_t *adc)
{
800030c6:	eb cd 40 80 	pushm	r7,lr
800030ca:	1a 97       	mov	r7,sp
800030cc:	20 1d       	sub	sp,4
800030ce:	ef 4c ff fc 	st.w	r7[-4],r12
	Assert( adc != NULL );

	/* start conversion */
	adc->cr = AVR32_ADC_START_MASK;
800030d2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800030d6:	30 29       	mov	r9,2
800030d8:	91 09       	st.w	r8[0x0],r9
}
800030da:	2f fd       	sub	sp,-4
800030dc:	e3 cd 80 80 	ldm	sp++,r7,pc

800030e0 <adc_enable>:
 *
 * \param *adc Base address of the ADC
 * \param  channel   channel to enable (0 to 7)
 */
void adc_enable(volatile avr32_adc_t *adc, uint16_t channel)
{
800030e0:	eb cd 40 80 	pushm	r7,lr
800030e4:	1a 97       	mov	r7,sp
800030e6:	20 2d       	sub	sp,8
800030e8:	ef 4c ff fc 	st.w	r7[-4],r12
800030ec:	16 98       	mov	r8,r11
800030ee:	ef 58 ff f8 	st.h	r7[-8],r8
	Assert( adc != NULL );
	Assert( channel <= AVR32_ADC_CHANNELS_MSB ); /* check if channel exist
	                                              **/

	/* enable channel */
	adc->cher = (1 << channel);
800030f2:	ef 18 ff f8 	ld.uh	r8,r7[-8]
800030f6:	30 19       	mov	r9,1
800030f8:	f2 08 09 48 	lsl	r8,r9,r8
800030fc:	10 99       	mov	r9,r8
800030fe:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003102:	91 49       	st.w	r8[0x10],r9
}
80003104:	2f ed       	sub	sp,-8
80003106:	e3 cd 80 80 	ldm	sp++,r7,pc

8000310a <adc_check_eoc>:
 * \param  channel   channel to check (0 to 7)
 * \return bool      true if conversion not running
 *                   false if conversion running
 */
bool adc_check_eoc(volatile avr32_adc_t *adc, uint16_t channel)
{
8000310a:	eb cd 40 80 	pushm	r7,lr
8000310e:	1a 97       	mov	r7,sp
80003110:	20 2d       	sub	sp,8
80003112:	ef 4c ff fc 	st.w	r7[-4],r12
80003116:	16 98       	mov	r8,r11
80003118:	ef 58 ff f8 	st.h	r7[-8],r8
	Assert( adc != NULL );
	Assert( channel <= AVR32_ADC_CHANNELS_MSB ); /* check if channel exist
	                                              **/

	/* get SR register : EOC bit for channel */
	return ((adc->sr & (1 << channel)) ? true : false);
8000311c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003120:	70 79       	ld.w	r9,r8[0x1c]
80003122:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80003126:	30 1a       	mov	r10,1
80003128:	f4 08 09 48 	lsl	r8,r10,r8
8000312c:	f3 e8 00 08 	and	r8,r9,r8
80003130:	5f 18       	srne	r8
80003132:	5c 58       	castu.b	r8
}
80003134:	10 9c       	mov	r12,r8
80003136:	2f ed       	sub	sp,-8
80003138:	e3 cd 80 80 	ldm	sp++,r7,pc

8000313c <adc_get_value>:
 * \param *adc Base address of the ADC
 * \param  channel   channel to handle (0 to 7)
 * \return The value acquired (unsigned long)
 */
uint32_t adc_get_value(volatile avr32_adc_t *adc, uint16_t channel)
{
8000313c:	eb cd 40 80 	pushm	r7,lr
80003140:	1a 97       	mov	r7,sp
80003142:	20 2d       	sub	sp,8
80003144:	ef 4c ff fc 	st.w	r7[-4],r12
80003148:	16 98       	mov	r8,r11
8000314a:	ef 58 ff f8 	st.h	r7[-8],r8
	Assert( adc != NULL );
	Assert( channel <= AVR32_ADC_CHANNELS_MSB );

	/* wait for end of conversion */
	while (adc_check_eoc(adc, channel) != true) {
8000314e:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80003152:	10 9b       	mov	r11,r8
80003154:	ee fc ff fc 	ld.w	r12,r7[-4]
80003158:	f0 1f 00 0b 	mcall	80003184 <adc_get_value+0x48>
8000315c:	18 98       	mov	r8,r12
8000315e:	ec 18 00 01 	eorl	r8,0x1
80003162:	5c 58       	castu.b	r8
80003164:	cf 51       	brne	8000314e <adc_get_value+0x12>
	}

	return *((uint32_t *)((&(adc->cdr0)) + channel));
80003166:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000316a:	f0 c9 ff d0 	sub	r9,r8,-48
8000316e:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80003172:	a3 68       	lsl	r8,0x2
80003174:	f2 08 00 08 	add	r8,r9,r8
80003178:	70 08       	ld.w	r8,r8[0x0]
}
8000317a:	10 9c       	mov	r12,r8
8000317c:	2f ed       	sub	sp,-8
8000317e:	e3 cd 80 80 	ldm	sp++,r7,pc
80003182:	00 00       	add	r0,r0
80003184:	80 00       	ld.sh	r0,r0[0x0]
80003186:	31 0a       	mov	r10,16

80003188 <flashc_set_wait_state>:
	return (AVR32_FLASHC.fcr & AVR32_FLASHC_FCR_FWS_MASK) >> AVR32_FLASHC_FCR_FWS_OFFSET;
}


void flashc_set_wait_state(unsigned int wait_state)
{
80003188:	eb cd 40 80 	pushm	r7,lr
8000318c:	1a 97       	mov	r7,sp
8000318e:	20 2d       	sub	sp,8
80003190:	ef 4c ff f8 	st.w	r7[-8],r12
	u_avr32_flashc_fcr_t u_avr32_flashc_fcr = {AVR32_FLASHC.fcr};
80003194:	fe 68 14 00 	mov	r8,-125952
80003198:	70 08       	ld.w	r8,r8[0x0]
8000319a:	30 09       	mov	r9,0
8000319c:	ef 49 ff fc 	st.w	r7[-4],r9
800031a0:	ef 48 ff fc 	st.w	r7[-4],r8
	u_avr32_flashc_fcr.FCR.fws = wait_state;
800031a4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800031a8:	5c 58       	castu.b	r8
800031aa:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800031ae:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800031b2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800031b6:	f1 d9 d0 c1 	bfins	r8,r9,0x6,0x1
800031ba:	ef 48 ff fc 	st.w	r7[-4],r8
	AVR32_FLASHC.fcr = u_avr32_flashc_fcr.fcr;
800031be:	fe 68 14 00 	mov	r8,-125952
800031c2:	ee f9 ff fc 	ld.w	r9,r7[-4]
800031c6:	91 09       	st.w	r8[0x0],r9
}
800031c8:	2f ed       	sub	sp,-8
800031ca:	e3 cd 80 80 	ldm	sp++,r7,pc

800031ce <pm_set_osc0_mode>:
 *
 * \param pm Base address of the Power Manager (i.e. &AVR32_PM).
 * \param mode Oscillator 0 mode (i.e. AVR32_PM_OSCCTRL0_MODE_x).
 */
static void pm_set_osc0_mode(volatile avr32_pm_t *pm, unsigned int mode)
{
800031ce:	eb cd 40 80 	pushm	r7,lr
800031d2:	1a 97       	mov	r7,sp
800031d4:	20 3d       	sub	sp,12
800031d6:	ef 4c ff f8 	st.w	r7[-8],r12
800031da:	ef 4b ff f4 	st.w	r7[-12],r11
  // Read
  u_avr32_pm_oscctrl0_t u_avr32_pm_oscctrl0 = {pm->oscctrl0};
800031de:	ee f8 ff f8 	ld.w	r8,r7[-8]
800031e2:	70 a8       	ld.w	r8,r8[0x28]
800031e4:	30 09       	mov	r9,0
800031e6:	ef 49 ff fc 	st.w	r7[-4],r9
800031ea:	ef 48 ff fc 	st.w	r7[-4],r8
  // Modify
  u_avr32_pm_oscctrl0.OSCCTRL0.mode = mode;
800031ee:	ee f8 ff f4 	ld.w	r8,r7[-12]
800031f2:	5c 58       	castu.b	r8
800031f4:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
800031f8:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800031fc:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003200:	f1 d9 d0 03 	bfins	r8,r9,0x0,0x3
80003204:	ef 48 ff fc 	st.w	r7[-4],r8
  // Write
  pm->oscctrl0 = u_avr32_pm_oscctrl0.oscctrl0;
80003208:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000320c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003210:	91 a9       	st.w	r8[0x28],r9
}
80003212:	2f dd       	sub	sp,-12
80003214:	e3 cd 80 80 	ldm	sp++,r7,pc

80003218 <pm_enable_osc0_crystal>:
  pm_set_osc0_mode(pm, AVR32_PM_OSCCTRL0_MODE_EXT_CLOCK);
}


void pm_enable_osc0_crystal(volatile avr32_pm_t *pm, unsigned int fosc0)
{
80003218:	eb cd 40 80 	pushm	r7,lr
8000321c:	1a 97       	mov	r7,sp
8000321e:	20 2d       	sub	sp,8
80003220:	ef 4c ff fc 	st.w	r7[-4],r12
80003224:	ef 4b ff f8 	st.w	r7[-8],r11
  pm_set_osc0_mode(pm, (fosc0 <  900000) ? AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G0 :
80003228:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000322c:	ec 58 bb 9f 	cp.w	r8,899999
80003230:	e0 88 00 1a 	brls	80003264 <pm_enable_osc0_crystal+0x4c>
80003234:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003238:	e0 69 c6 bf 	mov	r9,50879
8000323c:	ea 19 00 2d 	orh	r9,0x2d
80003240:	12 38       	cp.w	r8,r9
80003242:	e0 88 00 0f 	brls	80003260 <pm_enable_osc0_crystal+0x48>
80003246:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000324a:	e0 69 11 ff 	mov	r9,4607
8000324e:	ea 19 00 7a 	orh	r9,0x7a
80003252:	12 38       	cp.w	r8,r9
80003254:	e0 8b 00 04 	brhi	8000325c <pm_enable_osc0_crystal+0x44>
80003258:	30 68       	mov	r8,6
8000325a:	c0 28       	rjmp	8000325e <pm_enable_osc0_crystal+0x46>
8000325c:	30 78       	mov	r8,7
8000325e:	c0 28       	rjmp	80003262 <pm_enable_osc0_crystal+0x4a>
80003260:	30 58       	mov	r8,5
80003262:	c0 28       	rjmp	80003266 <pm_enable_osc0_crystal+0x4e>
80003264:	30 48       	mov	r8,4
80003266:	10 9b       	mov	r11,r8
80003268:	ee fc ff fc 	ld.w	r12,r7[-4]
8000326c:	f0 1f 00 03 	mcall	80003278 <pm_enable_osc0_crystal+0x60>
                       (fosc0 < 3000000) ? AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G1 :
                       (fosc0 < 8000000) ? AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G2 :
                                           AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G3);
}
80003270:	2f ed       	sub	sp,-8
80003272:	e3 cd 80 80 	ldm	sp++,r7,pc
80003276:	00 00       	add	r0,r0
80003278:	80 00       	ld.sh	r0,r0[0x0]
8000327a:	31 ce       	mov	lr,28

8000327c <pm_enable_clk0>:


void pm_enable_clk0(volatile avr32_pm_t *pm, unsigned int startup)
{
8000327c:	eb cd 40 80 	pushm	r7,lr
80003280:	1a 97       	mov	r7,sp
80003282:	20 2d       	sub	sp,8
80003284:	ef 4c ff fc 	st.w	r7[-4],r12
80003288:	ef 4b ff f8 	st.w	r7[-8],r11
  pm_enable_clk0_no_wait(pm, startup);
8000328c:	ee fb ff f8 	ld.w	r11,r7[-8]
80003290:	ee fc ff fc 	ld.w	r12,r7[-4]
80003294:	f0 1f 00 05 	mcall	800032a8 <pm_enable_clk0+0x2c>
  pm_wait_for_clk0_ready(pm);
80003298:	ee fc ff fc 	ld.w	r12,r7[-4]
8000329c:	f0 1f 00 04 	mcall	800032ac <pm_enable_clk0+0x30>
}
800032a0:	2f ed       	sub	sp,-8
800032a2:	e3 cd 80 80 	ldm	sp++,r7,pc
800032a6:	00 00       	add	r0,r0
800032a8:	80 00       	ld.sh	r0,r0[0x0]
800032aa:	32 b0       	mov	r0,43
800032ac:	80 00       	ld.sh	r0,r0[0x0]
800032ae:	33 0a       	mov	r10,48

800032b0 <pm_enable_clk0_no_wait>:
  pm->mcctrl &= ~AVR32_PM_MCCTRL_OSC0EN_MASK;
}


void pm_enable_clk0_no_wait(volatile avr32_pm_t *pm, unsigned int startup)
{
800032b0:	eb cd 40 80 	pushm	r7,lr
800032b4:	1a 97       	mov	r7,sp
800032b6:	20 3d       	sub	sp,12
800032b8:	ef 4c ff f8 	st.w	r7[-8],r12
800032bc:	ef 4b ff f4 	st.w	r7[-12],r11
  // Read register
  u_avr32_pm_oscctrl0_t u_avr32_pm_oscctrl0 = {pm->oscctrl0};
800032c0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800032c4:	70 a8       	ld.w	r8,r8[0x28]
800032c6:	30 09       	mov	r9,0
800032c8:	ef 49 ff fc 	st.w	r7[-4],r9
800032cc:	ef 48 ff fc 	st.w	r7[-4],r8
  // Modify
  u_avr32_pm_oscctrl0.OSCCTRL0.startup = startup;
800032d0:	ee f8 ff f4 	ld.w	r8,r7[-12]
800032d4:	5c 58       	castu.b	r8
800032d6:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
800032da:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800032de:	ee f8 ff fc 	ld.w	r8,r7[-4]
800032e2:	f1 d9 d1 03 	bfins	r8,r9,0x8,0x3
800032e6:	ef 48 ff fc 	st.w	r7[-4],r8
  // Write back
  pm->oscctrl0 = u_avr32_pm_oscctrl0.oscctrl0;
800032ea:	ee f9 ff fc 	ld.w	r9,r7[-4]
800032ee:	ee f8 ff f8 	ld.w	r8,r7[-8]
800032f2:	91 a9       	st.w	r8[0x28],r9

  pm->mcctrl |= AVR32_PM_MCCTRL_OSC0EN_MASK;
800032f4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800032f8:	70 08       	ld.w	r8,r8[0x0]
800032fa:	10 99       	mov	r9,r8
800032fc:	a3 a9       	sbr	r9,0x2
800032fe:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003302:	91 09       	st.w	r8[0x0],r9
}
80003304:	2f dd       	sub	sp,-12
80003306:	e3 cd 80 80 	ldm	sp++,r7,pc

8000330a <pm_wait_for_clk0_ready>:


void pm_wait_for_clk0_ready(volatile avr32_pm_t *pm)
{
8000330a:	eb cd 40 80 	pushm	r7,lr
8000330e:	1a 97       	mov	r7,sp
80003310:	20 1d       	sub	sp,4
80003312:	ef 4c ff fc 	st.w	r7[-4],r12
  while (!(pm->poscsr & AVR32_PM_POSCSR_OSC0RDY_MASK));
80003316:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000331a:	71 58       	ld.w	r8,r8[0x54]
8000331c:	e2 18 00 80 	andl	r8,0x80,COH
80003320:	cf b0       	breq	80003316 <pm_wait_for_clk0_ready+0xc>
}
80003322:	2f fd       	sub	sp,-4
80003324:	e3 cd 80 80 	ldm	sp++,r7,pc

80003328 <pm_cksel>:
              unsigned int pbasel,
              unsigned int pbbdiv,
              unsigned int pbbsel,
              unsigned int hsbdiv,
              unsigned int hsbsel)
{
80003328:	eb cd 40 80 	pushm	r7,lr
8000332c:	1a 97       	mov	r7,sp
8000332e:	20 6d       	sub	sp,24
80003330:	ee ce ff f8 	sub	lr,r7,-8
80003334:	ef 4c ff f8 	st.w	r7[-8],r12
80003338:	ef 4b ff f4 	st.w	r7[-12],r11
8000333c:	ef 4a ff f0 	st.w	r7[-16],r10
80003340:	ef 49 ff ec 	st.w	r7[-20],r9
80003344:	ef 48 ff e8 	st.w	r7[-24],r8
  u_avr32_pm_cksel_t u_avr32_pm_cksel = {0};
80003348:	30 08       	mov	r8,0
8000334a:	ef 48 ff fc 	st.w	r7[-4],r8

  u_avr32_pm_cksel.CKSEL.cpusel = hsbsel;
8000334e:	7c 18       	ld.w	r8,lr[0x4]
80003350:	5c 58       	castu.b	r8
80003352:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80003356:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8000335a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000335e:	f1 d9 d0 03 	bfins	r8,r9,0x0,0x3
80003362:	ef 48 ff fc 	st.w	r7[-4],r8
  u_avr32_pm_cksel.CKSEL.cpudiv = hsbdiv;
80003366:	7c 08       	ld.w	r8,lr[0x0]
80003368:	5c 58       	castu.b	r8
8000336a:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000336e:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80003372:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003376:	f1 d9 d0 e1 	bfins	r8,r9,0x7,0x1
8000337a:	ef 48 ff fc 	st.w	r7[-4],r8
  u_avr32_pm_cksel.CKSEL.hsbsel = hsbsel;
8000337e:	7c 18       	ld.w	r8,lr[0x4]
80003380:	5c 58       	castu.b	r8
80003382:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80003386:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8000338a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000338e:	f1 d9 d1 03 	bfins	r8,r9,0x8,0x3
80003392:	ef 48 ff fc 	st.w	r7[-4],r8
  u_avr32_pm_cksel.CKSEL.hsbdiv = hsbdiv;
80003396:	7c 08       	ld.w	r8,lr[0x0]
80003398:	5c 58       	castu.b	r8
8000339a:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000339e:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800033a2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800033a6:	f1 d9 d1 e1 	bfins	r8,r9,0xf,0x1
800033aa:	ef 48 ff fc 	st.w	r7[-4],r8
  u_avr32_pm_cksel.CKSEL.pbasel = pbasel;
800033ae:	ee f8 ff f0 	ld.w	r8,r7[-16]
800033b2:	5c 58       	castu.b	r8
800033b4:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
800033b8:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800033bc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800033c0:	f1 d9 d2 03 	bfins	r8,r9,0x10,0x3
800033c4:	ef 48 ff fc 	st.w	r7[-4],r8
  u_avr32_pm_cksel.CKSEL.pbadiv = pbadiv;
800033c8:	ee f8 ff f4 	ld.w	r8,r7[-12]
800033cc:	5c 58       	castu.b	r8
800033ce:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800033d2:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800033d6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800033da:	f1 d9 d2 e1 	bfins	r8,r9,0x17,0x1
800033de:	ef 48 ff fc 	st.w	r7[-4],r8
  u_avr32_pm_cksel.CKSEL.pbbsel = pbbsel;
800033e2:	ee f8 ff e8 	ld.w	r8,r7[-24]
800033e6:	5c 58       	castu.b	r8
800033e8:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
800033ec:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800033f0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800033f4:	f1 d9 d3 03 	bfins	r8,r9,0x18,0x3
800033f8:	ef 48 ff fc 	st.w	r7[-4],r8
  u_avr32_pm_cksel.CKSEL.pbbdiv = pbbdiv;
800033fc:	ee f8 ff ec 	ld.w	r8,r7[-20]
80003400:	5c 58       	castu.b	r8
80003402:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80003406:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8000340a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000340e:	f1 d9 d3 e1 	bfins	r8,r9,0x1f,0x1
80003412:	ef 48 ff fc 	st.w	r7[-4],r8

  pm->cksel = u_avr32_pm_cksel.cksel;
80003416:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000341a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000341e:	91 19       	st.w	r8[0x4],r9

  // Wait for ckrdy bit and then clear it
  while (!(pm->poscsr & AVR32_PM_POSCSR_CKRDY_MASK));
80003420:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003424:	71 58       	ld.w	r8,r8[0x54]
80003426:	e2 18 00 20 	andl	r8,0x20,COH
8000342a:	cf b0       	breq	80003420 <pm_cksel+0xf8>
}
8000342c:	2f ad       	sub	sp,-24
8000342e:	e3 cd 80 80 	ldm	sp++,r7,pc

80003432 <pm_pll_setup>:
                  unsigned int pll,
                  unsigned int mul,
                  unsigned int div,
                  unsigned int osc,
                  unsigned int lockcount)
{
80003432:	eb cd 40 80 	pushm	r7,lr
80003436:	1a 97       	mov	r7,sp
80003438:	20 6d       	sub	sp,24
8000343a:	ee ce ff f8 	sub	lr,r7,-8
8000343e:	ef 4c ff f8 	st.w	r7[-8],r12
80003442:	ef 4b ff f4 	st.w	r7[-12],r11
80003446:	ef 4a ff f0 	st.w	r7[-16],r10
8000344a:	ef 49 ff ec 	st.w	r7[-20],r9
8000344e:	ef 48 ff e8 	st.w	r7[-24],r8
  u_avr32_pm_pll_t u_avr32_pm_pll = {0};
80003452:	30 08       	mov	r8,0
80003454:	ef 48 ff fc 	st.w	r7[-4],r8

  u_avr32_pm_pll.PLL.pllosc   = osc;
80003458:	ee f8 ff e8 	ld.w	r8,r7[-24]
8000345c:	5c 58       	castu.b	r8
8000345e:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80003462:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80003466:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000346a:	f1 d9 d0 21 	bfins	r8,r9,0x1,0x1
8000346e:	ef 48 ff fc 	st.w	r7[-4],r8
  u_avr32_pm_pll.PLL.plldiv   = div;
80003472:	ee f8 ff ec 	ld.w	r8,r7[-20]
80003476:	5c 58       	castu.b	r8
80003478:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
8000347c:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80003480:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003484:	f1 d9 d1 04 	bfins	r8,r9,0x8,0x4
80003488:	ef 48 ff fc 	st.w	r7[-4],r8
  u_avr32_pm_pll.PLL.pllmul   = mul;
8000348c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003490:	5c 58       	castu.b	r8
80003492:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80003496:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8000349a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000349e:	f1 d9 d2 04 	bfins	r8,r9,0x10,0x4
800034a2:	ef 48 ff fc 	st.w	r7[-4],r8
  u_avr32_pm_pll.PLL.pllcount = lockcount;
800034a6:	7c 08       	ld.w	r8,lr[0x0]
800034a8:	5c 58       	castu.b	r8
800034aa:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6
800034ae:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800034b2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800034b6:	f1 d9 d3 06 	bfins	r8,r9,0x18,0x6
800034ba:	ef 48 ff fc 	st.w	r7[-4],r8

  pm->pll[pll] = u_avr32_pm_pll.pll;
800034be:	ee f9 ff f4 	ld.w	r9,r7[-12]
800034c2:	ee fa ff fc 	ld.w	r10,r7[-4]
800034c6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800034ca:	2f 89       	sub	r9,-8
800034cc:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
}
800034d0:	2f ad       	sub	sp,-24
800034d2:	e3 cd 80 80 	ldm	sp++,r7,pc

800034d6 <pm_pll_set_option>:
void pm_pll_set_option(volatile avr32_pm_t *pm,
                       unsigned int pll,
                       unsigned int pll_freq,
                       unsigned int pll_div2,
                       unsigned int pll_wbwdisable)
{
800034d6:	eb cd 40 80 	pushm	r7,lr
800034da:	1a 97       	mov	r7,sp
800034dc:	20 6d       	sub	sp,24
800034de:	ef 4c ff f8 	st.w	r7[-8],r12
800034e2:	ef 4b ff f4 	st.w	r7[-12],r11
800034e6:	ef 4a ff f0 	st.w	r7[-16],r10
800034ea:	ef 49 ff ec 	st.w	r7[-20],r9
800034ee:	ef 48 ff e8 	st.w	r7[-24],r8
  u_avr32_pm_pll_t u_avr32_pm_pll = {pm->pll[pll]};
800034f2:	ee f9 ff f4 	ld.w	r9,r7[-12]
800034f6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800034fa:	2f 89       	sub	r9,-8
800034fc:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80003500:	30 09       	mov	r9,0
80003502:	ef 49 ff fc 	st.w	r7[-4],r9
80003506:	ef 48 ff fc 	st.w	r7[-4],r8
  u_avr32_pm_pll.PLL.pllopt = pll_freq | (pll_div2 << 1) | (pll_wbwdisable << 2);
8000350a:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000350e:	5c 58       	castu.b	r8
80003510:	a1 78       	lsl	r8,0x1
80003512:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80003516:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000351a:	5c 58       	castu.b	r8
8000351c:	f3 e8 10 08 	or	r8,r9,r8
80003520:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80003524:	ee f8 ff e8 	ld.w	r8,r7[-24]
80003528:	5c 58       	castu.b	r8
8000352a:	a3 68       	lsl	r8,0x2
8000352c:	5c 58       	castu.b	r8
8000352e:	f3 e8 10 08 	or	r8,r9,r8
80003532:	5c 58       	castu.b	r8
80003534:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80003538:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8000353c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003540:	f1 d9 d0 43 	bfins	r8,r9,0x2,0x3
80003544:	ef 48 ff fc 	st.w	r7[-4],r8
  pm->pll[pll] = u_avr32_pm_pll.pll;
80003548:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000354c:	ee fa ff fc 	ld.w	r10,r7[-4]
80003550:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003554:	2f 89       	sub	r9,-8
80003556:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
}
8000355a:	2f ad       	sub	sp,-24
8000355c:	e3 cd 80 80 	ldm	sp++,r7,pc

80003560 <pm_pll_enable>:
}


void pm_pll_enable(volatile avr32_pm_t *pm,
                  unsigned int pll)
{
80003560:	eb cd 40 80 	pushm	r7,lr
80003564:	1a 97       	mov	r7,sp
80003566:	20 2d       	sub	sp,8
80003568:	ef 4c ff fc 	st.w	r7[-4],r12
8000356c:	ef 4b ff f8 	st.w	r7[-8],r11
  pm->pll[pll] |= AVR32_PM_PLLEN_MASK;
80003570:	ee f9 ff f8 	ld.w	r9,r7[-8]
80003574:	ee fa ff f8 	ld.w	r10,r7[-8]
80003578:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000357c:	2f 8a       	sub	r10,-8
8000357e:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
80003582:	10 9a       	mov	r10,r8
80003584:	a1 aa       	sbr	r10,0x0
80003586:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000358a:	2f 89       	sub	r9,-8
8000358c:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
}
80003590:	2f ed       	sub	sp,-8
80003592:	e3 cd 80 80 	ldm	sp++,r7,pc

80003596 <pm_wait_for_pll0_locked>:
  pm->pll[pll] &= ~AVR32_PM_PLLEN_MASK;
}


void pm_wait_for_pll0_locked(volatile avr32_pm_t *pm)
{
80003596:	eb cd 40 80 	pushm	r7,lr
8000359a:	1a 97       	mov	r7,sp
8000359c:	20 1d       	sub	sp,4
8000359e:	ef 4c ff fc 	st.w	r7[-4],r12
  while (!(pm->poscsr & AVR32_PM_POSCSR_LOCK0_MASK));
800035a2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800035a6:	71 58       	ld.w	r8,r8[0x54]
800035a8:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800035ac:	cf b0       	breq	800035a2 <pm_wait_for_pll0_locked+0xc>
}
800035ae:	2f fd       	sub	sp,-4
800035b0:	e3 cd 80 80 	ldm	sp++,r7,pc

800035b4 <pm_switch_to_clock>:
  return u_avr32_pm_mcctrl.MCCTRL.mcsel;
}


void pm_switch_to_clock(volatile avr32_pm_t *pm, unsigned long clock)
{
800035b4:	eb cd 40 80 	pushm	r7,lr
800035b8:	1a 97       	mov	r7,sp
800035ba:	20 3d       	sub	sp,12
800035bc:	ef 4c ff f8 	st.w	r7[-8],r12
800035c0:	ef 4b ff f4 	st.w	r7[-12],r11
  // Read
  u_avr32_pm_mcctrl_t u_avr32_pm_mcctrl = {pm->mcctrl};
800035c4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800035c8:	70 08       	ld.w	r8,r8[0x0]
800035ca:	30 09       	mov	r9,0
800035cc:	ef 49 ff fc 	st.w	r7[-4],r9
800035d0:	ef 48 ff fc 	st.w	r7[-4],r8
  // Modify
  u_avr32_pm_mcctrl.MCCTRL.mcsel = clock;
800035d4:	ee f8 ff f4 	ld.w	r8,r7[-12]
800035d8:	5c 58       	castu.b	r8
800035da:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
800035de:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800035e2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800035e6:	f1 d9 d0 02 	bfins	r8,r9,0x0,0x2
800035ea:	ef 48 ff fc 	st.w	r7[-4],r8
  // Write back
  pm->mcctrl = u_avr32_pm_mcctrl.mcctrl;
800035ee:	ee f9 ff fc 	ld.w	r9,r7[-4]
800035f2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800035f6:	91 09       	st.w	r8[0x0],r9
}
800035f8:	2f dd       	sub	sp,-12
800035fa:	e3 cd 80 80 	ldm	sp++,r7,pc
800035fe:	d7 03       	nop

80003600 <pm_switch_to_osc0>:


void pm_switch_to_osc0(volatile avr32_pm_t *pm, unsigned int fosc0, unsigned int startup)
{
80003600:	eb cd 40 80 	pushm	r7,lr
80003604:	1a 97       	mov	r7,sp
80003606:	20 3d       	sub	sp,12
80003608:	ef 4c ff fc 	st.w	r7[-4],r12
8000360c:	ef 4b ff f8 	st.w	r7[-8],r11
80003610:	ef 4a ff f4 	st.w	r7[-12],r10
  pm_enable_osc0_crystal(pm, fosc0);            // Enable the Osc0 in crystal mode
80003614:	ee fb ff f8 	ld.w	r11,r7[-8]
80003618:	ee fc ff fc 	ld.w	r12,r7[-4]
8000361c:	f0 1f 00 08 	mcall	8000363c <pm_switch_to_osc0+0x3c>
  pm_enable_clk0(pm, startup);                  // Crystal startup time - This parameter is critical and depends on the characteristics of the crystal
80003620:	ee fb ff f4 	ld.w	r11,r7[-12]
80003624:	ee fc ff fc 	ld.w	r12,r7[-4]
80003628:	f0 1f 00 06 	mcall	80003640 <pm_switch_to_osc0+0x40>
  pm_switch_to_clock(pm, AVR32_PM_MCSEL_OSC0);  // Then switch main clock to Osc0
8000362c:	30 1b       	mov	r11,1
8000362e:	ee fc ff fc 	ld.w	r12,r7[-4]
80003632:	f0 1f 00 05 	mcall	80003644 <pm_switch_to_osc0+0x44>
}
80003636:	2f dd       	sub	sp,-12
80003638:	e3 cd 80 80 	ldm	sp++,r7,pc
8000363c:	80 00       	ld.sh	r0,r0[0x0]
8000363e:	32 18       	mov	r8,33
80003640:	80 00       	ld.sh	r0,r0[0x0]
80003642:	32 7c       	mov	r12,39
80003644:	80 00       	ld.sh	r0,r0[0x0]
80003646:	35 b4       	mov	r4,91

80003648 <cpu_irq_is_enabled_flags>:

	return flags;
}

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
80003648:	eb cd 40 80 	pushm	r7,lr
8000364c:	1a 97       	mov	r7,sp
8000364e:	20 1d       	sub	sp,4
80003650:	ef 4c ff fc 	st.w	r7[-4],r12
	return !(flags & AVR32_SR_GM_MASK);
80003654:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003658:	e6 18 00 01 	andh	r8,0x1,COH
8000365c:	5f 08       	sreq	r8
8000365e:	5c 58       	castu.b	r8
}
80003660:	10 9c       	mov	r12,r8
80003662:	2f fd       	sub	sp,-4
80003664:	e3 cd 80 80 	ldm	sp++,r7,pc

80003668 <pwm_init>:
#include "compiler.h"
#include "pwm.h"


int pwm_init(const pwm_opt_t *opt)
{
80003668:	eb cd 40 80 	pushm	r7,lr
8000366c:	1a 97       	mov	r7,sp
8000366e:	20 3d       	sub	sp,12
80003670:	ef 4c ff f4 	st.w	r7[-12],r12
  volatile avr32_pwm_t *pwm = &AVR32_PWM;
80003674:	fe 78 30 00 	mov	r8,-53248
80003678:	ef 48 ff f8 	st.w	r7[-8],r8
  bool global_interrupt_enabled = Is_global_interrupt_enabled();
8000367c:	e1 b8 00 00 	mfsr	r8,0x0
80003680:	10 9c       	mov	r12,r8
80003682:	f0 1f 00 1e 	mcall	800036f8 <pwm_init+0x90>
80003686:	18 98       	mov	r8,r12
80003688:	ef 68 ff ff 	st.b	r7[-1],r8

  if (opt == 0 ) // Null pointer.
8000368c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003690:	58 08       	cp.w	r8,0
80003692:	c0 31       	brne	80003698 <pwm_init+0x30>
    return PWM_INVALID_INPUT;
80003694:	30 18       	mov	r8,1
80003696:	c2 c8       	rjmp	800036ee <pwm_init+0x86>

  // Disable interrupt.
  if (global_interrupt_enabled) Disable_global_interrupt();
80003698:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000369c:	30 08       	mov	r8,0
8000369e:	f0 09 18 00 	cp.b	r9,r8
800036a2:	c0 20       	breq	800036a6 <pwm_init+0x3e>
800036a4:	d3 03       	ssrf	0x10
  pwm->idr = ((1 << (AVR32_PWM_LINES_MSB + 1)) - 1) << AVR32_PWM_IDR_CHID0_OFFSET;
800036a6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800036aa:	37 f9       	mov	r9,127
800036ac:	91 59       	st.w	r8[0x14],r9
  pwm->isr;
800036ae:	ee f8 ff f8 	ld.w	r8,r7[-8]
800036b2:	70 78       	ld.w	r8,r8[0x1c]
  if (global_interrupt_enabled) Enable_global_interrupt();
800036b4:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800036b8:	30 08       	mov	r8,0
800036ba:	f0 09 18 00 	cp.b	r9,r8
800036be:	c0 20       	breq	800036c2 <pwm_init+0x5a>
800036c0:	d5 03       	csrf	0x10

  // Set PWM mode register.
  pwm->mr =
    ((opt->diva)<<AVR32_PWM_DIVA_OFFSET) |
800036c2:	ee f8 ff f4 	ld.w	r8,r7[-12]
800036c6:	70 19       	ld.w	r9,r8[0x4]
    ((opt->divb)<<AVR32_PWM_DIVB_OFFSET) |
800036c8:	ee f8 ff f4 	ld.w	r8,r7[-12]
800036cc:	70 08       	ld.w	r8,r8[0x0]
800036ce:	b1 68       	lsl	r8,0x10
800036d0:	10 49       	or	r9,r8
    ((opt->prea)<<AVR32_PWM_PREA_OFFSET) |
800036d2:	ee f8 ff f4 	ld.w	r8,r7[-12]
800036d6:	70 38       	ld.w	r8,r8[0xc]
800036d8:	a9 68       	lsl	r8,0x8
800036da:	10 49       	or	r9,r8
    ((opt->preb)<<AVR32_PWM_PREB_OFFSET)
800036dc:	ee f8 ff f4 	ld.w	r8,r7[-12]
800036e0:	70 28       	ld.w	r8,r8[0x8]
800036e2:	b9 68       	lsl	r8,0x18
  pwm->isr;
  if (global_interrupt_enabled) Enable_global_interrupt();

  // Set PWM mode register.
  pwm->mr =
    ((opt->diva)<<AVR32_PWM_DIVA_OFFSET) |
800036e4:	10 49       	or	r9,r8
  pwm->idr = ((1 << (AVR32_PWM_LINES_MSB + 1)) - 1) << AVR32_PWM_IDR_CHID0_OFFSET;
  pwm->isr;
  if (global_interrupt_enabled) Enable_global_interrupt();

  // Set PWM mode register.
  pwm->mr =
800036e6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800036ea:	91 09       	st.w	r8[0x0],r9
    ((opt->divb)<<AVR32_PWM_DIVB_OFFSET) |
    ((opt->prea)<<AVR32_PWM_PREA_OFFSET) |
    ((opt->preb)<<AVR32_PWM_PREB_OFFSET)
    ;

  return PWM_SUCCESS;
800036ec:	30 08       	mov	r8,0
}
800036ee:	10 9c       	mov	r12,r8
800036f0:	2f dd       	sub	sp,-12
800036f2:	e3 cd 80 80 	ldm	sp++,r7,pc
800036f6:	00 00       	add	r0,r0
800036f8:	80 00       	ld.sh	r0,r0[0x0]
800036fa:	36 48       	mov	r8,100

800036fc <pwm_channel_init>:


int pwm_channel_init( unsigned int channel_id, const avr32_pwm_channel_t *pwm_channel)
{
800036fc:	eb cd 40 80 	pushm	r7,lr
80003700:	1a 97       	mov	r7,sp
80003702:	20 3d       	sub	sp,12
80003704:	ef 4c ff f8 	st.w	r7[-8],r12
80003708:	ef 4b ff f4 	st.w	r7[-12],r11
  volatile avr32_pwm_t *pwm = &AVR32_PWM;
8000370c:	fe 78 30 00 	mov	r8,-53248
80003710:	ef 48 ff fc 	st.w	r7[-4],r8

  if (pwm_channel == 0) // Null pointer.
80003714:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003718:	58 08       	cp.w	r8,0
8000371a:	c0 31       	brne	80003720 <pwm_channel_init+0x24>
    return PWM_INVALID_ARGUMENT;
8000371c:	30 18       	mov	r8,1
8000371e:	c2 f8       	rjmp	8000377c <pwm_channel_init+0x80>
  if (channel_id > AVR32_PWM_LINES_MSB) // Control input values.
80003720:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003724:	58 68       	cp.w	r8,6
80003726:	e0 88 00 04 	brls	8000372e <pwm_channel_init+0x32>
    return PWM_INVALID_INPUT;
8000372a:	30 18       	mov	r8,1
8000372c:	c2 88       	rjmp	8000377c <pwm_channel_init+0x80>

  pwm->channel[channel_id].cmr= pwm_channel->cmr;   // Channel mode.
8000372e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003732:	ee f9 ff f4 	ld.w	r9,r7[-12]
80003736:	72 09       	ld.w	r9,r9[0x0]
80003738:	ee fa ff fc 	ld.w	r10,r7[-4]
8000373c:	2f 08       	sub	r8,-16
8000373e:	a5 78       	lsl	r8,0x5
80003740:	f4 08 00 08 	add	r8,r10,r8
80003744:	91 09       	st.w	r8[0x0],r9
  pwm->channel[channel_id].cdty= pwm_channel->cdty; // Duty cycle, should be < CPRD.
80003746:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000374a:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000374e:	72 19       	ld.w	r9,r9[0x4]
80003750:	ee fa ff fc 	ld.w	r10,r7[-4]
80003754:	a5 78       	lsl	r8,0x5
80003756:	f4 08 00 08 	add	r8,r10,r8
8000375a:	f0 c8 fd fc 	sub	r8,r8,-516
8000375e:	91 09       	st.w	r8[0x0],r9
  pwm->channel[channel_id].cprd= pwm_channel->cprd; // Channel period.
80003760:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003764:	ee f9 ff f4 	ld.w	r9,r7[-12]
80003768:	72 29       	ld.w	r9,r9[0x8]
8000376a:	ee fa ff fc 	ld.w	r10,r7[-4]
8000376e:	a5 78       	lsl	r8,0x5
80003770:	f4 08 00 08 	add	r8,r10,r8
80003774:	f0 c8 fd f8 	sub	r8,r8,-520
80003778:	91 09       	st.w	r8[0x0],r9

  return PWM_SUCCESS;
8000377a:	30 08       	mov	r8,0
}
8000377c:	10 9c       	mov	r12,r8
8000377e:	2f dd       	sub	sp,-12
80003780:	e3 cd 80 80 	ldm	sp++,r7,pc

80003784 <pwm_start_channels>:


int pwm_start_channels(unsigned long channels_bitmask)
{
80003784:	eb cd 40 80 	pushm	r7,lr
80003788:	1a 97       	mov	r7,sp
8000378a:	20 1d       	sub	sp,4
8000378c:	ef 4c ff fc 	st.w	r7[-4],r12
  if (channels_bitmask & ~((1 << (AVR32_PWM_LINES_MSB + 1)) - 1))
80003790:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003794:	e0 18 ff 80 	andl	r8,0xff80
80003798:	c0 30       	breq	8000379e <pwm_start_channels+0x1a>
    return PWM_INVALID_INPUT;
8000379a:	30 18       	mov	r8,1
8000379c:	c0 78       	rjmp	800037aa <pwm_start_channels+0x26>

  AVR32_PWM.ena = channels_bitmask; // Enable channels.
8000379e:	fe 78 30 00 	mov	r8,-53248
800037a2:	ee f9 ff fc 	ld.w	r9,r7[-4]
800037a6:	91 19       	st.w	r8[0x4],r9

  return PWM_SUCCESS;
800037a8:	30 08       	mov	r8,0
}
800037aa:	10 9c       	mov	r12,r8
800037ac:	2f fd       	sub	sp,-4
800037ae:	e3 cd 80 80 	ldm	sp++,r7,pc

800037b2 <cpu_irq_is_enabled_flags>:

	return flags;
}

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
800037b2:	eb cd 40 80 	pushm	r7,lr
800037b6:	1a 97       	mov	r7,sp
800037b8:	20 1d       	sub	sp,4
800037ba:	ef 4c ff fc 	st.w	r7[-4],r12
	return !(flags & AVR32_SR_GM_MASK);
800037be:	ee f8 ff fc 	ld.w	r8,r7[-4]
800037c2:	e6 18 00 01 	andh	r8,0x1,COH
800037c6:	5f 08       	sreq	r8
800037c8:	5c 58       	castu.b	r8
}
800037ca:	10 9c       	mov	r12,r8
800037cc:	2f fd       	sub	sp,-4
800037ce:	e3 cd 80 80 	ldm	sp++,r7,pc
800037d2:	d7 03       	nop

800037d4 <tc_configure_interrupts>:
  return tc->channel[channel].imr;
}


int tc_configure_interrupts(volatile avr32_tc_t *tc, unsigned int channel, const tc_interrupt_t *bitfield)
{
800037d4:	eb cd 40 80 	pushm	r7,lr
800037d8:	1a 97       	mov	r7,sp
800037da:	20 4d       	sub	sp,16
800037dc:	ef 4c ff f8 	st.w	r7[-8],r12
800037e0:	ef 4b ff f4 	st.w	r7[-12],r11
800037e4:	ef 4a ff f0 	st.w	r7[-16],r10
  bool global_interrupt_enabled = Is_global_interrupt_enabled();
800037e8:	e1 b8 00 00 	mfsr	r8,0x0
800037ec:	10 9c       	mov	r12,r8
800037ee:	f0 1f 00 73 	mcall	800039b8 <tc_configure_interrupts+0x1e4>
800037f2:	18 98       	mov	r8,r12
800037f4:	ef 68 ff ff 	st.b	r7[-1],r8

  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
800037f8:	ee f8 ff f4 	ld.w	r8,r7[-12]
800037fc:	58 28       	cp.w	r8,2
800037fe:	e0 88 00 04 	brls	80003806 <tc_configure_interrupts+0x32>
    return TC_INVALID_ARGUMENT;
80003802:	3f f8       	mov	r8,-1
80003804:	cd 68       	rjmp	800039b0 <tc_configure_interrupts+0x1dc>

  // Enable the appropriate interrupts.
  tc->channel[channel].ier = bitfield->etrgs << AVR32_TC_ETRGS_OFFSET |
80003806:	ee fb ff f4 	ld.w	r11,r7[-12]
8000380a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000380e:	70 08       	ld.w	r8,r8[0x0]
80003810:	f1 d8 c0 e1 	bfextu	r8,r8,0x7,0x1
80003814:	5c 58       	castu.b	r8
80003816:	f0 09 15 07 	lsl	r9,r8,0x7
                             bitfield->ldrbs << AVR32_TC_LDRBS_OFFSET |
8000381a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000381e:	70 08       	ld.w	r8,r8[0x0]
80003820:	f1 d8 c0 c1 	bfextu	r8,r8,0x6,0x1
80003824:	5c 58       	castu.b	r8
80003826:	a7 68       	lsl	r8,0x6
80003828:	10 49       	or	r9,r8
                             bitfield->ldras << AVR32_TC_LDRAS_OFFSET |
8000382a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000382e:	70 08       	ld.w	r8,r8[0x0]
80003830:	f1 d8 c0 a1 	bfextu	r8,r8,0x5,0x1
80003834:	5c 58       	castu.b	r8
80003836:	a5 78       	lsl	r8,0x5
80003838:	10 49       	or	r9,r8
                             bitfield->cpcs << AVR32_TC_CPCS_OFFSET |
8000383a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000383e:	70 08       	ld.w	r8,r8[0x0]
80003840:	f1 d8 c0 81 	bfextu	r8,r8,0x4,0x1
80003844:	5c 58       	castu.b	r8
80003846:	a5 68       	lsl	r8,0x4
80003848:	10 49       	or	r9,r8
                             bitfield->cpbs << AVR32_TC_CPBS_OFFSET |
8000384a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000384e:	70 08       	ld.w	r8,r8[0x0]
80003850:	f1 d8 c0 61 	bfextu	r8,r8,0x3,0x1
80003854:	5c 58       	castu.b	r8
80003856:	a3 78       	lsl	r8,0x3
80003858:	10 49       	or	r9,r8
                             bitfield->cpas << AVR32_TC_CPAS_OFFSET |
8000385a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000385e:	70 08       	ld.w	r8,r8[0x0]
80003860:	f1 d8 c0 41 	bfextu	r8,r8,0x2,0x1
80003864:	5c 58       	castu.b	r8
80003866:	a3 68       	lsl	r8,0x2
80003868:	10 49       	or	r9,r8
                             bitfield->lovrs << AVR32_TC_LOVRS_OFFSET |
8000386a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000386e:	70 08       	ld.w	r8,r8[0x0]
80003870:	f1 d8 c0 21 	bfextu	r8,r8,0x1,0x1
80003874:	5c 58       	castu.b	r8
80003876:	a1 78       	lsl	r8,0x1
80003878:	10 49       	or	r9,r8
                             bitfield->covfs << AVR32_TC_COVFS_OFFSET;
8000387a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000387e:	70 08       	ld.w	r8,r8[0x0]
80003880:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80003884:	5c 58       	castu.b	r8
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
    return TC_INVALID_ARGUMENT;

  // Enable the appropriate interrupts.
  tc->channel[channel].ier = bitfield->etrgs << AVR32_TC_ETRGS_OFFSET |
80003886:	f3 e8 10 08 	or	r8,r9,r8
8000388a:	10 99       	mov	r9,r8
8000388c:	ee fa ff f8 	ld.w	r10,r7[-8]
80003890:	f6 08 15 06 	lsl	r8,r11,0x6
80003894:	f4 08 00 08 	add	r8,r10,r8
80003898:	2d c8       	sub	r8,-36
8000389a:	91 09       	st.w	r8[0x0],r9
                             bitfield->cpas << AVR32_TC_CPAS_OFFSET |
                             bitfield->lovrs << AVR32_TC_LOVRS_OFFSET |
                             bitfield->covfs << AVR32_TC_COVFS_OFFSET;

  // Disable the appropriate interrupts.
  if (global_interrupt_enabled) Disable_global_interrupt();
8000389c:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800038a0:	30 08       	mov	r8,0
800038a2:	f0 09 18 00 	cp.b	r9,r8
800038a6:	c0 20       	breq	800038aa <tc_configure_interrupts+0xd6>
800038a8:	d3 03       	ssrf	0x10
  tc->channel[channel].idr = (~bitfield->etrgs & 1) << AVR32_TC_ETRGS_OFFSET |
800038aa:	ee fb ff f4 	ld.w	r11,r7[-12]
800038ae:	ee f8 ff f0 	ld.w	r8,r7[-16]
800038b2:	70 08       	ld.w	r8,r8[0x0]
800038b4:	f1 d8 c0 e1 	bfextu	r8,r8,0x7,0x1
800038b8:	5c 58       	castu.b	r8
800038ba:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800038be:	c0 41       	brne	800038c6 <tc_configure_interrupts+0xf2>
800038c0:	e0 69 00 80 	mov	r9,128
800038c4:	c0 28       	rjmp	800038c8 <tc_configure_interrupts+0xf4>
800038c6:	30 09       	mov	r9,0
                             (~bitfield->ldrbs & 1) << AVR32_TC_LDRBS_OFFSET |
800038c8:	ee f8 ff f0 	ld.w	r8,r7[-16]
800038cc:	70 08       	ld.w	r8,r8[0x0]
800038ce:	f1 d8 c0 c1 	bfextu	r8,r8,0x6,0x1
800038d2:	5c 58       	castu.b	r8
800038d4:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800038d8:	c0 31       	brne	800038de <tc_configure_interrupts+0x10a>
800038da:	34 08       	mov	r8,64
800038dc:	c0 28       	rjmp	800038e0 <tc_configure_interrupts+0x10c>
800038de:	30 08       	mov	r8,0
800038e0:	10 49       	or	r9,r8
                             (~bitfield->ldras & 1) << AVR32_TC_LDRAS_OFFSET |
800038e2:	ee f8 ff f0 	ld.w	r8,r7[-16]
800038e6:	70 08       	ld.w	r8,r8[0x0]
800038e8:	f1 d8 c0 a1 	bfextu	r8,r8,0x5,0x1
800038ec:	5c 58       	castu.b	r8
800038ee:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800038f2:	c0 31       	brne	800038f8 <tc_configure_interrupts+0x124>
800038f4:	32 08       	mov	r8,32
800038f6:	c0 28       	rjmp	800038fa <tc_configure_interrupts+0x126>
800038f8:	30 08       	mov	r8,0
800038fa:	10 49       	or	r9,r8
                             (~bitfield->cpcs & 1) << AVR32_TC_CPCS_OFFSET |
800038fc:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003900:	70 08       	ld.w	r8,r8[0x0]
80003902:	f1 d8 c0 81 	bfextu	r8,r8,0x4,0x1
80003906:	5c 58       	castu.b	r8
80003908:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000390c:	c0 31       	brne	80003912 <tc_configure_interrupts+0x13e>
8000390e:	31 08       	mov	r8,16
80003910:	c0 28       	rjmp	80003914 <tc_configure_interrupts+0x140>
80003912:	30 08       	mov	r8,0
80003914:	10 49       	or	r9,r8
                             (~bitfield->cpbs & 1) << AVR32_TC_CPBS_OFFSET |
80003916:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000391a:	70 08       	ld.w	r8,r8[0x0]
8000391c:	f1 d8 c0 61 	bfextu	r8,r8,0x3,0x1
80003920:	5c 58       	castu.b	r8
80003922:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80003926:	c0 31       	brne	8000392c <tc_configure_interrupts+0x158>
80003928:	30 88       	mov	r8,8
8000392a:	c0 28       	rjmp	8000392e <tc_configure_interrupts+0x15a>
8000392c:	30 08       	mov	r8,0
8000392e:	10 49       	or	r9,r8
                             (~bitfield->cpas & 1) << AVR32_TC_CPAS_OFFSET |
80003930:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003934:	70 08       	ld.w	r8,r8[0x0]
80003936:	f1 d8 c0 41 	bfextu	r8,r8,0x2,0x1
8000393a:	5c 58       	castu.b	r8
8000393c:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80003940:	c0 31       	brne	80003946 <tc_configure_interrupts+0x172>
80003942:	30 48       	mov	r8,4
80003944:	c0 28       	rjmp	80003948 <tc_configure_interrupts+0x174>
80003946:	30 08       	mov	r8,0
80003948:	10 49       	or	r9,r8
                             (~bitfield->lovrs & 1) << AVR32_TC_LOVRS_OFFSET |
8000394a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000394e:	70 08       	ld.w	r8,r8[0x0]
80003950:	f1 d8 c0 21 	bfextu	r8,r8,0x1,0x1
80003954:	5c 58       	castu.b	r8
80003956:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000395a:	c0 31       	brne	80003960 <tc_configure_interrupts+0x18c>
8000395c:	30 28       	mov	r8,2
8000395e:	c0 28       	rjmp	80003962 <tc_configure_interrupts+0x18e>
80003960:	30 08       	mov	r8,0
80003962:	10 49       	or	r9,r8
                             (~bitfield->covfs & 1) << AVR32_TC_COVFS_OFFSET;
80003964:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003968:	70 08       	ld.w	r8,r8[0x0]
8000396a:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000396e:	5c 58       	castu.b	r8
80003970:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80003974:	5f 08       	sreq	r8
                             bitfield->lovrs << AVR32_TC_LOVRS_OFFSET |
                             bitfield->covfs << AVR32_TC_COVFS_OFFSET;

  // Disable the appropriate interrupts.
  if (global_interrupt_enabled) Disable_global_interrupt();
  tc->channel[channel].idr = (~bitfield->etrgs & 1) << AVR32_TC_ETRGS_OFFSET |
80003976:	f3 e8 10 08 	or	r8,r9,r8
8000397a:	10 99       	mov	r9,r8
8000397c:	ee fa ff f8 	ld.w	r10,r7[-8]
80003980:	f6 08 15 06 	lsl	r8,r11,0x6
80003984:	f4 08 00 08 	add	r8,r10,r8
80003988:	2d 88       	sub	r8,-40
8000398a:	91 09       	st.w	r8[0x0],r9
                             (~bitfield->cpcs & 1) << AVR32_TC_CPCS_OFFSET |
                             (~bitfield->cpbs & 1) << AVR32_TC_CPBS_OFFSET |
                             (~bitfield->cpas & 1) << AVR32_TC_CPAS_OFFSET |
                             (~bitfield->lovrs & 1) << AVR32_TC_LOVRS_OFFSET |
                             (~bitfield->covfs & 1) << AVR32_TC_COVFS_OFFSET;
  tc->channel[channel].sr;
8000398c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003990:	ee f9 ff f8 	ld.w	r9,r7[-8]
80003994:	a1 78       	lsl	r8,0x1
80003996:	2f f8       	sub	r8,-1
80003998:	a5 78       	lsl	r8,0x5
8000399a:	f2 08 00 08 	add	r8,r9,r8
8000399e:	70 08       	ld.w	r8,r8[0x0]
  if (global_interrupt_enabled) Enable_global_interrupt();
800039a0:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800039a4:	30 08       	mov	r8,0
800039a6:	f0 09 18 00 	cp.b	r9,r8
800039aa:	c0 20       	breq	800039ae <tc_configure_interrupts+0x1da>
800039ac:	d5 03       	csrf	0x10

  return 0;
800039ae:	30 08       	mov	r8,0
}
800039b0:	10 9c       	mov	r12,r8
800039b2:	2f cd       	sub	sp,-16
800039b4:	e3 cd 80 80 	ldm	sp++,r7,pc
800039b8:	80 00       	ld.sh	r0,r0[0x0]
800039ba:	37 b2       	mov	r2,123

800039bc <tc_init_waveform>:
  return 0;
}


int tc_init_waveform(volatile avr32_tc_t *tc, const tc_waveform_opt_t *opt)
{
800039bc:	eb cd 40 80 	pushm	r7,lr
800039c0:	1a 97       	mov	r7,sp
800039c2:	20 2d       	sub	sp,8
800039c4:	ef 4c ff fc 	st.w	r7[-4],r12
800039c8:	ef 4b ff f8 	st.w	r7[-8],r11
  // Check for valid input.
  if (opt->channel >= TC_NUMBER_OF_CHANNELS)
800039cc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800039d0:	70 08       	ld.w	r8,r8[0x0]
800039d2:	58 28       	cp.w	r8,2
800039d4:	e0 88 00 04 	brls	800039dc <tc_init_waveform+0x20>
    return TC_INVALID_ARGUMENT;
800039d8:	3f f8       	mov	r8,-1
800039da:	c9 78       	rjmp	80003b08 <tc_init_waveform+0x14c>

  // GENERATE SIGNALS: Waveform operating mode.
  tc->channel[opt->channel].cmr = opt->bswtrg << AVR32_TC_BSWTRG_OFFSET |
800039dc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800039e0:	70 09       	ld.w	r9,r8[0x0]
800039e2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800039e6:	70 18       	ld.w	r8,r8[0x4]
800039e8:	f1 d8 c3 c2 	bfextu	r8,r8,0x1e,0x2
800039ec:	5c 58       	castu.b	r8
800039ee:	f0 0a 15 1e 	lsl	r10,r8,0x1e
                                  opt->beevt << AVR32_TC_BEEVT_OFFSET |
800039f2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800039f6:	70 18       	ld.w	r8,r8[0x4]
800039f8:	f1 d8 c3 82 	bfextu	r8,r8,0x1c,0x2
800039fc:	5c 58       	castu.b	r8
800039fe:	bd 68       	lsl	r8,0x1c
80003a00:	10 4a       	or	r10,r8
                                  opt->bcpc << AVR32_TC_BCPC_OFFSET |
80003a02:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003a06:	70 18       	ld.w	r8,r8[0x4]
80003a08:	f1 d8 c3 42 	bfextu	r8,r8,0x1a,0x2
80003a0c:	5c 58       	castu.b	r8
80003a0e:	bb 68       	lsl	r8,0x1a
80003a10:	10 4a       	or	r10,r8
                                  opt->bcpb << AVR32_TC_BCPB_OFFSET |
80003a12:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003a16:	70 18       	ld.w	r8,r8[0x4]
80003a18:	f1 d8 c3 02 	bfextu	r8,r8,0x18,0x2
80003a1c:	5c 58       	castu.b	r8
80003a1e:	b9 68       	lsl	r8,0x18
80003a20:	10 4a       	or	r10,r8
                                  opt->aswtrg << AVR32_TC_ASWTRG_OFFSET |
80003a22:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003a26:	70 18       	ld.w	r8,r8[0x4]
80003a28:	f1 d8 c2 c2 	bfextu	r8,r8,0x16,0x2
80003a2c:	5c 58       	castu.b	r8
80003a2e:	b7 68       	lsl	r8,0x16
80003a30:	10 4a       	or	r10,r8
                                  opt->aeevt << AVR32_TC_AEEVT_OFFSET |
80003a32:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003a36:	70 18       	ld.w	r8,r8[0x4]
80003a38:	f1 d8 c2 82 	bfextu	r8,r8,0x14,0x2
80003a3c:	5c 58       	castu.b	r8
80003a3e:	b5 68       	lsl	r8,0x14
80003a40:	10 4a       	or	r10,r8
                                  opt->acpc << AVR32_TC_ACPC_OFFSET |
80003a42:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003a46:	70 18       	ld.w	r8,r8[0x4]
80003a48:	f1 d8 c2 42 	bfextu	r8,r8,0x12,0x2
80003a4c:	5c 58       	castu.b	r8
80003a4e:	b3 68       	lsl	r8,0x12
80003a50:	10 4a       	or	r10,r8
                                  opt->acpa << AVR32_TC_ACPA_OFFSET |
80003a52:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003a56:	70 18       	ld.w	r8,r8[0x4]
80003a58:	f1 d8 c2 02 	bfextu	r8,r8,0x10,0x2
80003a5c:	5c 58       	castu.b	r8
80003a5e:	b1 68       	lsl	r8,0x10
80003a60:	f5 e8 10 08 	or	r8,r10,r8
                                  1 << AVR32_TC_WAVE_OFFSET |
80003a64:	10 9a       	mov	r10,r8
80003a66:	af ba       	sbr	r10,0xf
                                  opt->wavsel << AVR32_TC_WAVSEL_OFFSET |
80003a68:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003a6c:	70 18       	ld.w	r8,r8[0x4]
80003a6e:	f1 d8 c1 a2 	bfextu	r8,r8,0xd,0x2
80003a72:	5c 58       	castu.b	r8
80003a74:	ad 78       	lsl	r8,0xd
80003a76:	10 4a       	or	r10,r8
                                  opt->enetrg << AVR32_TC_ENETRG_OFFSET |
80003a78:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003a7c:	70 18       	ld.w	r8,r8[0x4]
80003a7e:	f1 d8 c1 81 	bfextu	r8,r8,0xc,0x1
80003a82:	5c 58       	castu.b	r8
80003a84:	ad 68       	lsl	r8,0xc
80003a86:	10 4a       	or	r10,r8
                                  opt->eevt << AVR32_TC_EEVT_OFFSET |
80003a88:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003a8c:	70 18       	ld.w	r8,r8[0x4]
80003a8e:	f1 d8 c1 42 	bfextu	r8,r8,0xa,0x2
80003a92:	5c 58       	castu.b	r8
80003a94:	ab 68       	lsl	r8,0xa
80003a96:	10 4a       	or	r10,r8
                                  opt->eevtedg << AVR32_TC_EEVTEDG_OFFSET |
80003a98:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003a9c:	70 18       	ld.w	r8,r8[0x4]
80003a9e:	f1 d8 c1 02 	bfextu	r8,r8,0x8,0x2
80003aa2:	5c 58       	castu.b	r8
80003aa4:	a9 68       	lsl	r8,0x8
80003aa6:	10 4a       	or	r10,r8
                                  opt->cpcdis << AVR32_TC_CPCDIS_OFFSET |
80003aa8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003aac:	70 18       	ld.w	r8,r8[0x4]
80003aae:	f1 d8 c0 e1 	bfextu	r8,r8,0x7,0x1
80003ab2:	5c 58       	castu.b	r8
80003ab4:	a7 78       	lsl	r8,0x7
80003ab6:	10 4a       	or	r10,r8
                                  opt->cpcstop << AVR32_TC_CPCSTOP_OFFSET |
80003ab8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003abc:	70 18       	ld.w	r8,r8[0x4]
80003abe:	f1 d8 c0 c1 	bfextu	r8,r8,0x6,0x1
80003ac2:	5c 58       	castu.b	r8
80003ac4:	a7 68       	lsl	r8,0x6
80003ac6:	10 4a       	or	r10,r8
                                  opt->burst << AVR32_TC_BURST_OFFSET |
80003ac8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003acc:	70 18       	ld.w	r8,r8[0x4]
80003ace:	f1 d8 c0 82 	bfextu	r8,r8,0x4,0x2
80003ad2:	5c 58       	castu.b	r8
80003ad4:	a5 68       	lsl	r8,0x4
80003ad6:	10 4a       	or	r10,r8
                                  opt->clki << AVR32_TC_CLKI_OFFSET |
80003ad8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003adc:	70 18       	ld.w	r8,r8[0x4]
80003ade:	f1 d8 c0 61 	bfextu	r8,r8,0x3,0x1
80003ae2:	5c 58       	castu.b	r8
80003ae4:	a3 78       	lsl	r8,0x3
80003ae6:	10 4a       	or	r10,r8
                                  opt->tcclks << AVR32_TC_TCCLKS_OFFSET;
80003ae8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003aec:	70 18       	ld.w	r8,r8[0x4]
80003aee:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80003af2:	5c 58       	castu.b	r8
  // Check for valid input.
  if (opt->channel >= TC_NUMBER_OF_CHANNELS)
    return TC_INVALID_ARGUMENT;

  // GENERATE SIGNALS: Waveform operating mode.
  tc->channel[opt->channel].cmr = opt->bswtrg << AVR32_TC_BSWTRG_OFFSET |
80003af4:	f5 e8 10 08 	or	r8,r10,r8
80003af8:	10 9a       	mov	r10,r8
80003afa:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003afe:	a5 69       	lsl	r9,0x4
80003b00:	2f f9       	sub	r9,-1
80003b02:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
                                  opt->cpcstop << AVR32_TC_CPCSTOP_OFFSET |
                                  opt->burst << AVR32_TC_BURST_OFFSET |
                                  opt->clki << AVR32_TC_CLKI_OFFSET |
                                  opt->tcclks << AVR32_TC_TCCLKS_OFFSET;

  return 0;
80003b06:	30 08       	mov	r8,0
}
80003b08:	10 9c       	mov	r12,r8
80003b0a:	2f ed       	sub	sp,-8
80003b0c:	e3 cd 80 80 	ldm	sp++,r7,pc

80003b10 <tc_start>:


int tc_start(volatile avr32_tc_t *tc, unsigned int channel)
{
80003b10:	eb cd 40 80 	pushm	r7,lr
80003b14:	1a 97       	mov	r7,sp
80003b16:	20 2d       	sub	sp,8
80003b18:	ef 4c ff fc 	st.w	r7[-4],r12
80003b1c:	ef 4b ff f8 	st.w	r7[-8],r11
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
80003b20:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003b24:	58 28       	cp.w	r8,2
80003b26:	e0 88 00 04 	brls	80003b2e <tc_start+0x1e>
    return TC_INVALID_ARGUMENT;
80003b2a:	3f f8       	mov	r8,-1
80003b2c:	c0 b8       	rjmp	80003b42 <tc_start+0x32>

  // Enable, reset and start the selected timer/counter channel.
  tc->channel[channel].ccr = AVR32_TC_SWTRG_MASK | AVR32_TC_CLKEN_MASK;
80003b2e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003b32:	ee f9 ff fc 	ld.w	r9,r7[-4]
80003b36:	a7 68       	lsl	r8,0x6
80003b38:	f2 08 00 08 	add	r8,r9,r8
80003b3c:	30 59       	mov	r9,5
80003b3e:	91 09       	st.w	r8[0x0],r9

  return 0;
80003b40:	30 08       	mov	r8,0
}
80003b42:	10 9c       	mov	r12,r8
80003b44:	2f ed       	sub	sp,-8
80003b46:	e3 cd 80 80 	ldm	sp++,r7,pc

80003b4a <tc_read_sr>:
  tc->bcr = AVR32_TC_BCR_SYNC_MASK;
}


int tc_read_sr(volatile avr32_tc_t *tc, unsigned int channel)
{
80003b4a:	eb cd 40 80 	pushm	r7,lr
80003b4e:	1a 97       	mov	r7,sp
80003b50:	20 2d       	sub	sp,8
80003b52:	ef 4c ff fc 	st.w	r7[-4],r12
80003b56:	ef 4b ff f8 	st.w	r7[-8],r11
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
80003b5a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003b5e:	58 28       	cp.w	r8,2
80003b60:	e0 88 00 04 	brls	80003b68 <tc_read_sr+0x1e>
    return TC_INVALID_ARGUMENT;
80003b64:	3f f8       	mov	r8,-1
80003b66:	c0 b8       	rjmp	80003b7c <tc_read_sr+0x32>

  return tc->channel[channel].sr;
80003b68:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003b6c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80003b70:	a1 78       	lsl	r8,0x1
80003b72:	2f f8       	sub	r8,-1
80003b74:	a5 78       	lsl	r8,0x5
80003b76:	f2 08 00 08 	add	r8,r9,r8
80003b7a:	70 08       	ld.w	r8,r8[0x0]
}
80003b7c:	10 9c       	mov	r12,r8
80003b7e:	2f ed       	sub	sp,-8
80003b80:	e3 cd 80 80 	ldm	sp++,r7,pc

80003b84 <tc_write_rc>:
  return value;
}


int tc_write_rc(volatile avr32_tc_t *tc, unsigned int channel, unsigned short value)
{
80003b84:	eb cd 40 80 	pushm	r7,lr
80003b88:	1a 97       	mov	r7,sp
80003b8a:	20 3d       	sub	sp,12
80003b8c:	ef 4c ff fc 	st.w	r7[-4],r12
80003b90:	ef 4b ff f8 	st.w	r7[-8],r11
80003b94:	14 98       	mov	r8,r10
80003b96:	ef 58 ff f4 	st.h	r7[-12],r8
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
80003b9a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003b9e:	58 28       	cp.w	r8,2
80003ba0:	e0 88 00 04 	brls	80003ba8 <tc_write_rc+0x24>
    return TC_INVALID_ARGUMENT;
80003ba4:	3f f8       	mov	r8,-1
80003ba6:	c2 78       	rjmp	80003bf4 <tc_write_rc+0x70>

  // This function is only available in WAVEFORM mode.
  if (Tst_bits(tc->channel[channel].cmr, AVR32_TC_WAVE_MASK))
80003ba8:	ee f9 ff f8 	ld.w	r9,r7[-8]
80003bac:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003bb0:	a5 69       	lsl	r9,0x4
80003bb2:	2f f9       	sub	r9,-1
80003bb4:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80003bb8:	e2 18 80 00 	andl	r8,0x8000,COH
80003bbc:	c1 a0       	breq	80003bf0 <tc_write_rc+0x6c>
    Wr_bitfield(tc->channel[channel].rc, AVR32_TC_RC_MASK, value);
80003bbe:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003bc2:	ee f9 ff f8 	ld.w	r9,r7[-8]
80003bc6:	ee fa ff fc 	ld.w	r10,r7[-4]
80003bca:	a7 69       	lsl	r9,0x6
80003bcc:	f4 09 00 09 	add	r9,r10,r9
80003bd0:	2e 49       	sub	r9,-28
80003bd2:	72 09       	ld.w	r9,r9[0x0]
80003bd4:	12 9a       	mov	r10,r9
80003bd6:	e0 1a 00 00 	andl	r10,0x0
80003bda:	ef 19 ff f4 	ld.uh	r9,r7[-12]
80003bde:	f5 e9 10 09 	or	r9,r10,r9
80003be2:	ee fa ff fc 	ld.w	r10,r7[-4]
80003be6:	a7 68       	lsl	r8,0x6
80003be8:	f4 08 00 08 	add	r8,r10,r8
80003bec:	2e 48       	sub	r8,-28
80003bee:	91 09       	st.w	r8[0x0],r9

  return value;
80003bf0:	ef 18 ff f4 	ld.uh	r8,r7[-12]
}
80003bf4:	10 9c       	mov	r12,r8
80003bf6:	2f dd       	sub	sp,-12
80003bf8:	e3 cd 80 80 	ldm	sp++,r7,pc

80003bfc <pm_configure_clocks>:

#define PM_MAX_MUL                ((1 << AVR32_PM_PLL0_PLLMUL_SIZE) - 1)


int pm_configure_clocks(pm_freq_param_t *param)
{
80003bfc:	eb cd 40 80 	pushm	r7,lr
80003c00:	1a 97       	mov	r7,sp
80003c02:	20 bd       	sub	sp,44
80003c04:	ef 4c ff d4 	st.w	r7[-44],r12
  //  12    8   1  108     1     54    27
  //  12    9   1  120     1     60    15
  //  12    9   1  120     1     60    30
  //  12   10   1  132     1     66    16.5
  //
  unsigned long in_cpu_f  = param->cpu_f;
80003c08:	ee f8 ff d4 	ld.w	r8,r7[-44]
80003c0c:	70 08       	ld.w	r8,r8[0x0]
80003c0e:	ef 48 ff d8 	st.w	r7[-40],r8
  unsigned long in_osc0_f = param->osc0_f;
80003c12:	ee f8 ff d4 	ld.w	r8,r7[-44]
80003c16:	70 28       	ld.w	r8,r8[0x8]
80003c18:	ef 48 ff dc 	st.w	r7[-36],r8
  unsigned long mul, div, div2_en = 0, div2_cpu = 0, div2_pba = 0;
80003c1c:	30 08       	mov	r8,0
80003c1e:	ef 48 ff e8 	st.w	r7[-24],r8
80003c22:	30 08       	mov	r8,0
80003c24:	ef 48 ff ec 	st.w	r7[-20],r8
80003c28:	30 08       	mov	r8,0
80003c2a:	ef 48 ff f0 	st.w	r7[-16],r8
  unsigned long pll_freq, rest;
  bool b_div2_pba, b_div2_cpu;

  // Switch to external Oscillator 0
  pm_switch_to_osc0(&AVR32_PM, in_osc0_f, param->osc0_startup);
80003c2e:	ee f8 ff d4 	ld.w	r8,r7[-44]
80003c32:	70 38       	ld.w	r8,r8[0xc]
80003c34:	10 9a       	mov	r10,r8
80003c36:	ee fb ff dc 	ld.w	r11,r7[-36]
80003c3a:	fe 7c 0c 00 	mov	r12,-62464
80003c3e:	f0 1f 00 af 	mcall	80003ef8 <pm_configure_clocks+0x2fc>

  // Start with CPU freq config
  if (in_cpu_f == in_osc0_f)
80003c42:	ee f9 ff d8 	ld.w	r9,r7[-40]
80003c46:	ee f8 ff dc 	ld.w	r8,r7[-36]
80003c4a:	10 39       	cp.w	r9,r8
80003c4c:	c0 d1       	brne	80003c66 <pm_configure_clocks+0x6a>
  {
    param->cpu_f = in_osc0_f;
80003c4e:	ee f8 ff d4 	ld.w	r8,r7[-44]
80003c52:	ee f9 ff dc 	ld.w	r9,r7[-36]
80003c56:	91 09       	st.w	r8[0x0],r9
    param->pba_f = in_osc0_f;
80003c58:	ee f8 ff d4 	ld.w	r8,r7[-44]
80003c5c:	ee f9 ff dc 	ld.w	r9,r7[-36]
80003c60:	91 19       	st.w	r8[0x4],r9
    return PM_FREQ_STATUS_OK;
80003c62:	30 08       	mov	r8,0
80003c64:	c4 69       	rjmp	80003ef0 <pm_configure_clocks+0x2f4>
  else if (in_cpu_f < in_osc0_f)
  {
    // TBD
  }

  rest = in_cpu_f % in_osc0_f;
80003c66:	ee f8 ff d8 	ld.w	r8,r7[-40]
80003c6a:	ee f9 ff dc 	ld.w	r9,r7[-36]
80003c6e:	f0 09 0d 08 	divu	r8,r8,r9
80003c72:	12 98       	mov	r8,r9
80003c74:	ef 48 ff f8 	st.w	r7[-8],r8

  for (div = 1; div < 32; div++)
80003c78:	30 18       	mov	r8,1
80003c7a:	ef 48 ff e4 	st.w	r7[-28],r8
80003c7e:	c1 38       	rjmp	80003ca4 <pm_configure_clocks+0xa8>
  {
    if ((div * rest) % in_osc0_f == 0)
80003c80:	ee f9 ff e4 	ld.w	r9,r7[-28]
80003c84:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003c88:	f2 08 02 48 	mul	r8,r9,r8
80003c8c:	ee f9 ff dc 	ld.w	r9,r7[-36]
80003c90:	f0 09 0d 08 	divu	r8,r8,r9
80003c94:	12 98       	mov	r8,r9
80003c96:	58 08       	cp.w	r8,0
80003c98:	c0 c0       	breq	80003cb0 <pm_configure_clocks+0xb4>
    // TBD
  }

  rest = in_cpu_f % in_osc0_f;

  for (div = 1; div < 32; div++)
80003c9a:	ee f8 ff e4 	ld.w	r8,r7[-28]
80003c9e:	2f f8       	sub	r8,-1
80003ca0:	ef 48 ff e4 	st.w	r7[-28],r8
80003ca4:	ee f8 ff e4 	ld.w	r8,r7[-28]
80003ca8:	59 f8       	cp.w	r8,31
80003caa:	fe 98 ff eb 	brls	80003c80 <pm_configure_clocks+0x84>
80003cae:	c0 28       	rjmp	80003cb2 <pm_configure_clocks+0xb6>
  {
    if ((div * rest) % in_osc0_f == 0)
      break;
80003cb0:	d7 03       	nop
  }
  if (div == 32)
80003cb2:	ee f8 ff e4 	ld.w	r8,r7[-28]
80003cb6:	e0 48 00 20 	cp.w	r8,32
80003cba:	c0 31       	brne	80003cc0 <pm_configure_clocks+0xc4>
    return PM_FREQ_STATUS_FAIL;
80003cbc:	3f f8       	mov	r8,-1
80003cbe:	c1 99       	rjmp	80003ef0 <pm_configure_clocks+0x2f4>

  mul = (in_cpu_f * div) / in_osc0_f;
80003cc0:	ee f9 ff d8 	ld.w	r9,r7[-40]
80003cc4:	ee f8 ff e4 	ld.w	r8,r7[-28]
80003cc8:	f2 08 02 48 	mul	r8,r9,r8
80003ccc:	ee f9 ff dc 	ld.w	r9,r7[-36]
80003cd0:	f0 09 0d 08 	divu	r8,r8,r9
80003cd4:	ef 48 ff e0 	st.w	r7[-32],r8

  if (mul > PM_MAX_MUL)
80003cd8:	ee f8 ff e0 	ld.w	r8,r7[-32]
80003cdc:	58 f8       	cp.w	r8,15
80003cde:	e0 88 00 0f 	brls	80003cfc <pm_configure_clocks+0x100>
    return PM_FREQ_STATUS_FAIL;
80003ce2:	3f f8       	mov	r8,-1
80003ce4:	c0 69       	rjmp	80003ef0 <pm_configure_clocks+0x2f4>

  // export 2power from PLL div to div2_cpu
  while (!(div % 2))
  {
    div /= 2;
80003ce6:	ee f8 ff e4 	ld.w	r8,r7[-28]
80003cea:	a1 98       	lsr	r8,0x1
80003cec:	ef 48 ff e4 	st.w	r7[-28],r8
    div2_cpu++;
80003cf0:	ee f8 ff ec 	ld.w	r8,r7[-20]
80003cf4:	2f f8       	sub	r8,-1
80003cf6:	ef 48 ff ec 	st.w	r7[-20],r8
80003cfa:	c0 28       	rjmp	80003cfe <pm_configure_clocks+0x102>

  if (mul > PM_MAX_MUL)
    return PM_FREQ_STATUS_FAIL;

  // export 2power from PLL div to div2_cpu
  while (!(div % 2))
80003cfc:	d7 03       	nop
80003cfe:	ee f8 ff e4 	ld.w	r8,r7[-28]
80003d02:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80003d06:	cf 00       	breq	80003ce6 <pm_configure_clocks+0xea>

  // Here we know the mul and div parameter of the PLL config.
  // . Check out if the PLL has a valid in_cpu_f.
  // . Try to have for the PLL frequency (VCO output) the highest possible value
  //   to reduce jitter.
  while (in_osc0_f * 2 * mul / div < AVR32_PM_PLL_VCO_RANGE0_MAX_FREQ)
80003d08:	c1 18       	rjmp	80003d2a <pm_configure_clocks+0x12e>
  {
    if (2 * mul > PM_MAX_MUL)
80003d0a:	ee f8 ff e0 	ld.w	r8,r7[-32]
80003d0e:	a1 78       	lsl	r8,0x1
80003d10:	58 f8       	cp.w	r8,15
80003d12:	e0 8b 00 1f 	brhi	80003d50 <pm_configure_clocks+0x154>
      break;
    mul *= 2;
80003d16:	ee f8 ff e0 	ld.w	r8,r7[-32]
80003d1a:	a1 78       	lsl	r8,0x1
80003d1c:	ef 48 ff e0 	st.w	r7[-32],r8
    div2_cpu++;
80003d20:	ee f8 ff ec 	ld.w	r8,r7[-20]
80003d24:	2f f8       	sub	r8,-1
80003d26:	ef 48 ff ec 	st.w	r7[-20],r8

  // Here we know the mul and div parameter of the PLL config.
  // . Check out if the PLL has a valid in_cpu_f.
  // . Try to have for the PLL frequency (VCO output) the highest possible value
  //   to reduce jitter.
  while (in_osc0_f * 2 * mul / div < AVR32_PM_PLL_VCO_RANGE0_MAX_FREQ)
80003d2a:	ee f9 ff dc 	ld.w	r9,r7[-36]
80003d2e:	ee f8 ff e0 	ld.w	r8,r7[-32]
80003d32:	f2 08 02 48 	mul	r8,r9,r8
80003d36:	a1 78       	lsl	r8,0x1
80003d38:	ee f9 ff e4 	ld.w	r9,r7[-28]
80003d3c:	f0 09 0d 08 	divu	r8,r8,r9
80003d40:	e0 69 1b ff 	mov	r9,7167
80003d44:	ea 19 0e 4e 	orh	r9,0xe4e
80003d48:	12 38       	cp.w	r8,r9
80003d4a:	fe 98 ff e0 	brls	80003d0a <pm_configure_clocks+0x10e>
80003d4e:	c0 28       	rjmp	80003d52 <pm_configure_clocks+0x156>
  {
    if (2 * mul > PM_MAX_MUL)
      break;
80003d50:	d7 03       	nop
    mul *= 2;
    div2_cpu++;
  }

  if (div2_cpu != 0)
80003d52:	ee f8 ff ec 	ld.w	r8,r7[-20]
80003d56:	58 08       	cp.w	r8,0
80003d58:	c0 90       	breq	80003d6a <pm_configure_clocks+0x16e>
  {
    div2_cpu--;
80003d5a:	ee f8 ff ec 	ld.w	r8,r7[-20]
80003d5e:	20 18       	sub	r8,1
80003d60:	ef 48 ff ec 	st.w	r7[-20],r8
    div2_en = 1;
80003d64:	30 18       	mov	r8,1
80003d66:	ef 48 ff e8 	st.w	r7[-24],r8
  }

  pll_freq = in_osc0_f * mul / (div * (1 << div2_en));
80003d6a:	ee f9 ff dc 	ld.w	r9,r7[-36]
80003d6e:	ee f8 ff e0 	ld.w	r8,r7[-32]
80003d72:	f2 08 02 48 	mul	r8,r9,r8
80003d76:	ee f9 ff e8 	ld.w	r9,r7[-24]
80003d7a:	ee fa ff e4 	ld.w	r10,r7[-28]
80003d7e:	f4 09 09 49 	lsl	r9,r10,r9
80003d82:	f0 09 0d 08 	divu	r8,r8,r9
80003d86:	ef 48 ff f4 	st.w	r7[-12],r8

  // Update real CPU Frequency
  param->cpu_f = pll_freq / (1 << div2_cpu);
80003d8a:	ee f8 ff ec 	ld.w	r8,r7[-20]
80003d8e:	ee f9 ff f4 	ld.w	r9,r7[-12]
80003d92:	f2 08 0a 49 	lsr	r9,r9,r8
80003d96:	ee f8 ff d4 	ld.w	r8,r7[-44]
80003d9a:	91 09       	st.w	r8[0x0],r9
  mul--;
80003d9c:	ee f8 ff e0 	ld.w	r8,r7[-32]
80003da0:	20 18       	sub	r8,1
80003da2:	ef 48 ff e0 	st.w	r7[-32],r8

  pm_pll_setup(&AVR32_PM
80003da6:	31 08       	mov	r8,16
80003da8:	1a d8       	st.w	--sp,r8
80003daa:	30 08       	mov	r8,0
80003dac:	ee f9 ff e4 	ld.w	r9,r7[-28]
80003db0:	ee fa ff e0 	ld.w	r10,r7[-32]
80003db4:	30 0b       	mov	r11,0
80003db6:	fe 7c 0c 00 	mov	r12,-62464
80003dba:	f0 1f 00 51 	mcall	80003efc <pm_configure_clocks+0x300>
80003dbe:	2f fd       	sub	sp,-4
  , div // div
  , 0   // osc
  , 16  // lockcount
  );

  pm_pll_set_option(&AVR32_PM
80003dc0:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003dc4:	e0 69 67 ff 	mov	r9,26623
80003dc8:	ea 19 09 89 	orh	r9,0x989
80003dcc:	12 38       	cp.w	r8,r9
80003dce:	5f 8a       	srls	r10
80003dd0:	30 08       	mov	r8,0
80003dd2:	ee f9 ff e8 	ld.w	r9,r7[-24]
80003dd6:	30 0b       	mov	r11,0
80003dd8:	fe 7c 0c 00 	mov	r12,-62464
80003ddc:	f0 1f 00 49 	mcall	80003f00 <pm_configure_clocks+0x304>
  , (pll_freq < AVR32_PM_PLL_VCO_RANGE0_MIN_FREQ) ? 1 : 0 // pll_freq
  , div2_en // pll_div2
  , 0 // pll_wbwdisable
  );

  rest = pll_freq;
80003de0:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003de4:	ef 48 ff f8 	st.w	r7[-8],r8
  while (rest > AVR32_PM_PBA_MAX_FREQ ||
80003de8:	c1 68       	rjmp	80003e14 <pm_configure_clocks+0x218>
         rest != param->pba_f)
  {
    div2_pba++;
80003dea:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003dee:	2f f8       	sub	r8,-1
80003df0:	ef 48 ff f0 	st.w	r7[-16],r8
    rest = pll_freq / (1 << div2_pba);
80003df4:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003df8:	ee f9 ff f4 	ld.w	r9,r7[-12]
80003dfc:	f2 08 0a 48 	lsr	r8,r9,r8
80003e00:	ef 48 ff f8 	st.w	r7[-8],r8
    if (rest < param->pba_f)
80003e04:	ee f8 ff d4 	ld.w	r8,r7[-44]
80003e08:	70 19       	ld.w	r9,r8[0x4]
80003e0a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003e0e:	10 39       	cp.w	r9,r8
80003e10:	e0 8b 00 13 	brhi	80003e36 <pm_configure_clocks+0x23a>
  , div2_en // pll_div2
  , 0 // pll_wbwdisable
  );

  rest = pll_freq;
  while (rest > AVR32_PM_PBA_MAX_FREQ ||
80003e14:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003e18:	e0 69 14 80 	mov	r9,5248
80003e1c:	ea 19 03 ef 	orh	r9,0x3ef
80003e20:	12 38       	cp.w	r8,r9
80003e22:	fe 9b ff e4 	brhi	80003dea <pm_configure_clocks+0x1ee>
         rest != param->pba_f)
80003e26:	ee f8 ff d4 	ld.w	r8,r7[-44]
80003e2a:	70 19       	ld.w	r9,r8[0x4]
  , div2_en // pll_div2
  , 0 // pll_wbwdisable
  );

  rest = pll_freq;
  while (rest > AVR32_PM_PBA_MAX_FREQ ||
80003e2c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003e30:	10 39       	cp.w	r9,r8
80003e32:	cd c1       	brne	80003dea <pm_configure_clocks+0x1ee>
80003e34:	c0 28       	rjmp	80003e38 <pm_configure_clocks+0x23c>
         rest != param->pba_f)
  {
    div2_pba++;
    rest = pll_freq / (1 << div2_pba);
    if (rest < param->pba_f)
      break;
80003e36:	d7 03       	nop
  }

  // Update real PBA Frequency
  param->pba_f = pll_freq / (1 << div2_pba);
80003e38:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003e3c:	ee f9 ff f4 	ld.w	r9,r7[-12]
80003e40:	f2 08 0a 49 	lsr	r9,r9,r8
80003e44:	ee f8 ff d4 	ld.w	r8,r7[-44]
80003e48:	91 19       	st.w	r8[0x4],r9

  // Enable PLL0
  pm_pll_enable(&AVR32_PM, 0);
80003e4a:	30 0b       	mov	r11,0
80003e4c:	fe 7c 0c 00 	mov	r12,-62464
80003e50:	f0 1f 00 2d 	mcall	80003f04 <pm_configure_clocks+0x308>

  // Wait for PLL0 locked
  pm_wait_for_pll0_locked(&AVR32_PM);
80003e54:	fe 7c 0c 00 	mov	r12,-62464
80003e58:	f0 1f 00 2c 	mcall	80003f08 <pm_configure_clocks+0x30c>

  if (div2_cpu)
80003e5c:	ee f8 ff ec 	ld.w	r8,r7[-20]
80003e60:	58 08       	cp.w	r8,0
80003e62:	c0 a0       	breq	80003e76 <pm_configure_clocks+0x27a>
  {
    b_div2_cpu = true;
80003e64:	30 18       	mov	r8,1
80003e66:	ef 68 ff ff 	st.b	r7[-1],r8
    div2_cpu--;
80003e6a:	ee f8 ff ec 	ld.w	r8,r7[-20]
80003e6e:	20 18       	sub	r8,1
80003e70:	ef 48 ff ec 	st.w	r7[-20],r8
80003e74:	c0 48       	rjmp	80003e7c <pm_configure_clocks+0x280>
  }
  else
    b_div2_cpu = false;
80003e76:	30 08       	mov	r8,0
80003e78:	ef 68 ff ff 	st.b	r7[-1],r8

  if (div2_pba)
80003e7c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003e80:	58 08       	cp.w	r8,0
80003e82:	c0 a0       	breq	80003e96 <pm_configure_clocks+0x29a>
  {
    b_div2_pba = true;
80003e84:	30 18       	mov	r8,1
80003e86:	ef 68 ff fe 	st.b	r7[-2],r8
    div2_pba--;
80003e8a:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003e8e:	20 18       	sub	r8,1
80003e90:	ef 48 ff f0 	st.w	r7[-16],r8
80003e94:	c0 48       	rjmp	80003e9c <pm_configure_clocks+0x2a0>
  }
  else
    b_div2_pba = false;
80003e96:	30 08       	mov	r8,0
80003e98:	ef 68 ff fe 	st.b	r7[-2],r8

  pm_cksel(&AVR32_PM
80003e9c:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80003ea0:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80003ea4:	ef 3b ff fe 	ld.ub	r11,r7[-2]
80003ea8:	ee fa ff ec 	ld.w	r10,r7[-20]
80003eac:	1a da       	st.w	--sp,r10
80003eae:	1a d8       	st.w	--sp,r8
80003eb0:	ee f8 ff ec 	ld.w	r8,r7[-20]
80003eb4:	ee fa ff f0 	ld.w	r10,r7[-16]
80003eb8:	fe 7c 0c 00 	mov	r12,-62464
80003ebc:	f0 1f 00 14 	mcall	80003f0c <pm_configure_clocks+0x310>
80003ec0:	2f ed       	sub	sp,-8
  , b_div2_pba, div2_pba // PBA
  , b_div2_cpu, div2_cpu // PBB
  , b_div2_cpu, div2_cpu // HSB
  );

  if (param->cpu_f > AVR32_FLASHC_FWS_0_MAX_FREQ)
80003ec2:	ee f8 ff d4 	ld.w	r8,r7[-44]
80003ec6:	70 08       	ld.w	r8,r8[0x0]
80003ec8:	e0 69 8a 40 	mov	r9,35392
80003ecc:	ea 19 01 f7 	orh	r9,0x1f7
80003ed0:	12 38       	cp.w	r8,r9
80003ed2:	e0 88 00 06 	brls	80003ede <pm_configure_clocks+0x2e2>
  {
    flashc_set_wait_state(1);
80003ed6:	30 1c       	mov	r12,1
80003ed8:	f0 1f 00 0e 	mcall	80003f10 <pm_configure_clocks+0x314>
80003edc:	c0 48       	rjmp	80003ee4 <pm_configure_clocks+0x2e8>
      flashc_issue_command(AVR32_FLASHC_FCMD_CMD_HSDIS, -1);
#endif
  }
  else
  {
    flashc_set_wait_state(0);
80003ede:	30 0c       	mov	r12,0
80003ee0:	f0 1f 00 0c 	mcall	80003f10 <pm_configure_clocks+0x314>
    else
      flashc_issue_command(AVR32_FLASHC_FCMD_CMD_HSDIS, -1);
#endif
  }

  pm_switch_to_clock(&AVR32_PM, AVR32_PM_MCCTRL_MCSEL_PLL0);
80003ee4:	30 2b       	mov	r11,2
80003ee6:	fe 7c 0c 00 	mov	r12,-62464
80003eea:	f0 1f 00 0b 	mcall	80003f14 <pm_configure_clocks+0x318>

  return PM_FREQ_STATUS_OK;
80003eee:	30 08       	mov	r8,0
}
80003ef0:	10 9c       	mov	r12,r8
80003ef2:	2f 5d       	sub	sp,-44
80003ef4:	e3 cd 80 80 	ldm	sp++,r7,pc
80003ef8:	80 00       	ld.sh	r0,r0[0x0]
80003efa:	36 00       	mov	r0,96
80003efc:	80 00       	ld.sh	r0,r0[0x0]
80003efe:	34 32       	mov	r2,67
80003f00:	80 00       	ld.sh	r0,r0[0x0]
80003f02:	34 d6       	mov	r6,77
80003f04:	80 00       	ld.sh	r0,r0[0x0]
80003f06:	35 60       	mov	r0,86
80003f08:	80 00       	ld.sh	r0,r0[0x0]
80003f0a:	35 96       	mov	r6,89
80003f0c:	80 00       	ld.sh	r0,r0[0x0]
80003f0e:	33 28       	mov	r8,50
80003f10:	80 00       	ld.sh	r0,r0[0x0]
80003f12:	31 88       	mov	r8,24
80003f14:	80 00       	ld.sh	r0,r0[0x0]
80003f16:	35 b4       	mov	r4,91

80003f18 <getBaudDiv>:
/** The SPI mutex. */
xSemaphoreHandle xSPIMutex;
#endif

int16_t getBaudDiv(const uint32_t baudrate, uint32_t pb_hz)
{
80003f18:	eb cd 40 80 	pushm	r7,lr
80003f1c:	1a 97       	mov	r7,sp
80003f1e:	20 3d       	sub	sp,12
80003f20:	ef 4c ff f8 	st.w	r7[-8],r12
80003f24:	ef 4b ff f4 	st.w	r7[-12],r11
	uint32_t baudDiv = div_ceil(pb_hz, baudrate);
80003f28:	ee f9 ff f4 	ld.w	r9,r7[-12]
80003f2c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003f30:	f2 08 00 08 	add	r8,r9,r8
80003f34:	20 18       	sub	r8,1
80003f36:	ee f9 ff f8 	ld.w	r9,r7[-8]
80003f3a:	f0 09 0d 08 	divu	r8,r8,r9
80003f3e:	ef 48 ff fc 	st.w	r7[-4],r8

	if (baudDiv <= 0 || baudDiv > 255) {
80003f42:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003f46:	58 08       	cp.w	r8,0
80003f48:	c0 70       	breq	80003f56 <getBaudDiv+0x3e>
80003f4a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003f4e:	e0 48 00 ff 	cp.w	r8,255
80003f52:	e0 88 00 04 	brls	80003f5a <getBaudDiv+0x42>
		return -1;
80003f56:	3f f8       	mov	r8,-1
80003f58:	c0 48       	rjmp	80003f60 <getBaudDiv+0x48>
	}

	return baudDiv;
80003f5a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003f5e:	5c 88       	casts.h	r8
}
80003f60:	10 9c       	mov	r12,r8
80003f62:	2f dd       	sub	sp,-12
80003f64:	e3 cd 80 80 	ldm	sp++,r7,pc

80003f68 <spi_initMaster>:
	return SPI_OK;
}

spi_status_t spi_initMaster(volatile avr32_spi_t *spi,
		const spi_options_t *options)
{
80003f68:	eb cd 40 80 	pushm	r7,lr
80003f6c:	1a 97       	mov	r7,sp
80003f6e:	20 3d       	sub	sp,12
80003f70:	ef 4c ff f8 	st.w	r7[-8],r12
80003f74:	ef 4b ff f4 	st.w	r7[-12],r11
	u_avr32_spi_mr_t u_avr32_spi_mr;

	if (options->modfdis > 1) {
80003f78:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003f7c:	f1 39 00 0d 	ld.ub	r9,r8[13]
80003f80:	30 18       	mov	r8,1
80003f82:	f0 09 18 00 	cp.b	r9,r8
80003f86:	e0 88 00 04 	brls	80003f8e <spi_initMaster+0x26>
		return SPI_ERROR_ARGUMENT;
80003f8a:	30 28       	mov	r8,2
80003f8c:	c3 48       	rjmp	80003ff4 <spi_initMaster+0x8c>
	}

	/* Reset. */
	spi->cr = AVR32_SPI_CR_SWRST_MASK;
80003f8e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003f92:	e0 69 00 80 	mov	r9,128
80003f96:	91 09       	st.w	r8[0x0],r9

	/* Master Mode. */
	u_avr32_spi_mr.mr = spi->mr;
80003f98:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003f9c:	70 18       	ld.w	r8,r8[0x4]
80003f9e:	ef 48 ff fc 	st.w	r7[-4],r8
	u_avr32_spi_mr.MR.mstr = 1;
80003fa2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003fa6:	30 19       	mov	r9,1
80003fa8:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
80003fac:	ef 48 ff fc 	st.w	r7[-4],r8
	u_avr32_spi_mr.MR.modfdis = options->modfdis;
80003fb0:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003fb4:	f1 38 00 0d 	ld.ub	r8,r8[13]
80003fb8:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80003fbc:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80003fc0:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003fc4:	f1 d9 d0 81 	bfins	r8,r9,0x4,0x1
80003fc8:	ef 48 ff fc 	st.w	r7[-4],r8
	u_avr32_spi_mr.MR.llb = 0;
80003fcc:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003fd0:	30 09       	mov	r9,0
80003fd2:	f1 d9 d0 e1 	bfins	r8,r9,0x7,0x1
80003fd6:	ef 48 ff fc 	st.w	r7[-4],r8
	u_avr32_spi_mr.MR.pcs = (1 << AVR32_SPI_MR_PCS_SIZE) - 1;
80003fda:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003fde:	30 f9       	mov	r9,15
80003fe0:	f1 d9 d2 04 	bfins	r8,r9,0x10,0x4
80003fe4:	ef 48 ff fc 	st.w	r7[-4],r8
	spi->mr = u_avr32_spi_mr.mr;
80003fe8:	ee f9 ff fc 	ld.w	r9,r7[-4]
80003fec:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003ff0:	91 19       	st.w	r8[0x4],r9

	return SPI_OK;
80003ff2:	30 08       	mov	r8,0
}
80003ff4:	10 9c       	mov	r12,r8
80003ff6:	2f dd       	sub	sp,-12
80003ff8:	e3 cd 80 80 	ldm	sp++,r7,pc

80003ffc <spi_selectionMode>:

spi_status_t spi_selectionMode(volatile avr32_spi_t *spi,
		uint8_t variable_ps,
		uint8_t pcs_decode,
		uint8_t delay)
{
80003ffc:	eb cd 40 80 	pushm	r7,lr
80004000:	1a 97       	mov	r7,sp
80004002:	20 5d       	sub	sp,20
80004004:	ef 4c ff f8 	st.w	r7[-8],r12
80004008:	12 98       	mov	r8,r9
8000400a:	16 99       	mov	r9,r11
8000400c:	ef 69 ff f4 	st.b	r7[-12],r9
80004010:	14 99       	mov	r9,r10
80004012:	ef 69 ff f0 	st.b	r7[-16],r9
80004016:	ef 68 ff ec 	st.b	r7[-20],r8
	u_avr32_spi_mr_t u_avr32_spi_mr;

	if (variable_ps > 1 ||
8000401a:	ef 39 ff f4 	ld.ub	r9,r7[-12]
8000401e:	30 18       	mov	r8,1
80004020:	f0 09 18 00 	cp.b	r9,r8
80004024:	e0 8b 00 09 	brhi	80004036 <spi_selectionMode+0x3a>
80004028:	ef 39 ff f0 	ld.ub	r9,r7[-16]
8000402c:	30 18       	mov	r8,1
8000402e:	f0 09 18 00 	cp.b	r9,r8
80004032:	e0 88 00 04 	brls	8000403a <spi_selectionMode+0x3e>
			pcs_decode > 1) {
		return SPI_ERROR_ARGUMENT;
80004036:	30 28       	mov	r8,2
80004038:	c2 88       	rjmp	80004088 <spi_selectionMode+0x8c>
	}

	u_avr32_spi_mr.mr = spi->mr;
8000403a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000403e:	70 18       	ld.w	r8,r8[0x4]
80004040:	ef 48 ff fc 	st.w	r7[-4],r8
	u_avr32_spi_mr.MR.ps = variable_ps;
80004044:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80004048:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000404c:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80004050:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004054:	f1 d9 d0 21 	bfins	r8,r9,0x1,0x1
80004058:	ef 48 ff fc 	st.w	r7[-4],r8
	u_avr32_spi_mr.MR.pcsdec = pcs_decode;
8000405c:	ef 38 ff f0 	ld.ub	r8,r7[-16]
80004060:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80004064:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80004068:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000406c:	f1 d9 d0 41 	bfins	r8,r9,0x2,0x1
80004070:	ef 48 ff fc 	st.w	r7[-4],r8
	u_avr32_spi_mr.MR.dlybcs = delay;
80004074:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80004078:	ef 68 ff fc 	st.b	r7[-4],r8
	spi->mr = u_avr32_spi_mr.mr;
8000407c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80004080:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004084:	91 19       	st.w	r8[0x4],r9

	return SPI_OK;
80004086:	30 08       	mov	r8,0
}
80004088:	10 9c       	mov	r12,r8
8000408a:	2f bd       	sub	sp,-20
8000408c:	e3 cd 80 80 	ldm	sp++,r7,pc

80004090 <spi_selectChip>:

spi_status_t spi_selectChip(volatile avr32_spi_t *spi, uint8_t chip)
{
80004090:	eb cd 40 80 	pushm	r7,lr
80004094:	1a 97       	mov	r7,sp
80004096:	20 2d       	sub	sp,8
80004098:	ef 4c ff fc 	st.w	r7[-4],r12
8000409c:	16 98       	mov	r8,r11
8000409e:	ef 68 ff f8 	st.b	r7[-8],r8
	while (pdFALSE == xSemaphoreTake(xSPIMutex, 20)) {
	}
#endif

	/* Assert all lines; no peripheral is selected. */
	spi->mr |= AVR32_SPI_MR_PCS_MASK;
800040a2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800040a6:	70 18       	ld.w	r8,r8[0x4]
800040a8:	10 99       	mov	r9,r8
800040aa:	ea 19 00 0f 	orh	r9,0xf
800040ae:	ee f8 ff fc 	ld.w	r8,r7[-4]
800040b2:	91 19       	st.w	r8[0x4],r9

	if (spi->mr & AVR32_SPI_MR_PCSDEC_MASK) {
800040b4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800040b8:	70 18       	ld.w	r8,r8[0x4]
800040ba:	e2 18 00 04 	andl	r8,0x4,COH
800040be:	c1 90       	breq	800040f0 <spi_selectChip+0x60>
		/* The signal is decoded; allow up to 15 chips. */
		if (chip > 14) {
800040c0:	ef 39 ff f8 	ld.ub	r9,r7[-8]
800040c4:	30 e8       	mov	r8,14
800040c6:	f0 09 18 00 	cp.b	r9,r8
800040ca:	e0 88 00 04 	brls	800040d2 <spi_selectChip+0x42>
			return SPI_ERROR_ARGUMENT;
800040ce:	30 28       	mov	r8,2
800040d0:	c2 88       	rjmp	80004120 <spi_selectChip+0x90>
		}

		spi->mr &= ~AVR32_SPI_MR_PCS_MASK |
800040d2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800040d6:	70 19       	ld.w	r9,r8[0x4]
				(chip << AVR32_SPI_MR_PCS_OFFSET);
800040d8:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800040dc:	b1 68       	lsl	r8,0x10
		/* The signal is decoded; allow up to 15 chips. */
		if (chip > 14) {
			return SPI_ERROR_ARGUMENT;
		}

		spi->mr &= ~AVR32_SPI_MR_PCS_MASK |
800040de:	ea 18 ff f0 	orh	r8,0xfff0
800040e2:	e8 18 ff ff 	orl	r8,0xffff
800040e6:	10 69       	and	r9,r8
800040e8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800040ec:	91 19       	st.w	r8[0x4],r9
800040ee:	c1 88       	rjmp	8000411e <spi_selectChip+0x8e>
				(chip << AVR32_SPI_MR_PCS_OFFSET);
	} else {
		if (chip > 3) {
800040f0:	ef 39 ff f8 	ld.ub	r9,r7[-8]
800040f4:	30 38       	mov	r8,3
800040f6:	f0 09 18 00 	cp.b	r9,r8
800040fa:	e0 88 00 04 	brls	80004102 <spi_selectChip+0x72>
			return SPI_ERROR_ARGUMENT;
800040fe:	30 28       	mov	r8,2
80004100:	c1 08       	rjmp	80004120 <spi_selectChip+0x90>
		}

		spi->mr &= ~(1 << (AVR32_SPI_MR_PCS_OFFSET + chip));
80004102:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004106:	70 19       	ld.w	r9,r8[0x4]
80004108:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000410c:	2f 08       	sub	r8,-16
8000410e:	30 1a       	mov	r10,1
80004110:	f4 08 09 48 	lsl	r8,r10,r8
80004114:	5c d8       	com	r8
80004116:	10 69       	and	r9,r8
80004118:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000411c:	91 19       	st.w	r8[0x4],r9
	}

	return SPI_OK;
8000411e:	30 08       	mov	r8,0
}
80004120:	10 9c       	mov	r12,r8
80004122:	2f ed       	sub	sp,-8
80004124:	e3 cd 80 80 	ldm	sp++,r7,pc

80004128 <spi_unselectChip>:

spi_status_t spi_unselectChip(volatile avr32_spi_t *spi, uint8_t chip)
{
80004128:	eb cd 40 80 	pushm	r7,lr
8000412c:	1a 97       	mov	r7,sp
8000412e:	20 3d       	sub	sp,12
80004130:	ef 4c ff f8 	st.w	r7[-8],r12
80004134:	16 98       	mov	r8,r11
80004136:	ef 68 ff f4 	st.b	r7[-12],r8
	uint32_t timeout = SPI_TIMEOUT;
8000413a:	e0 68 3a 98 	mov	r8,15000
8000413e:	ef 48 ff fc 	st.w	r7[-4],r8

	while (!(spi->sr & AVR32_SPI_SR_TXEMPTY_MASK)) {
80004142:	c0 f8       	rjmp	80004160 <spi_unselectChip+0x38>
		if (!timeout--) {
80004144:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004148:	58 08       	cp.w	r8,0
8000414a:	5f 08       	sreq	r8
8000414c:	5c 58       	castu.b	r8
8000414e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80004152:	20 19       	sub	r9,1
80004154:	ef 49 ff fc 	st.w	r7[-4],r9
80004158:	58 08       	cp.w	r8,0
8000415a:	c0 30       	breq	80004160 <spi_unselectChip+0x38>
			return SPI_ERROR_TIMEOUT;
8000415c:	30 18       	mov	r8,1
8000415e:	c1 68       	rjmp	8000418a <spi_unselectChip+0x62>

spi_status_t spi_unselectChip(volatile avr32_spi_t *spi, uint8_t chip)
{
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TXEMPTY_MASK)) {
80004160:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004164:	70 48       	ld.w	r8,r8[0x10]
80004166:	e2 18 02 00 	andl	r8,0x200,COH
8000416a:	ce d0       	breq	80004144 <spi_unselectChip+0x1c>
			return SPI_ERROR_TIMEOUT;
		}
	}

	/* Assert all lines; no peripheral is selected. */
	spi->mr |= AVR32_SPI_MR_PCS_MASK;
8000416c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004170:	70 18       	ld.w	r8,r8[0x4]
80004172:	10 99       	mov	r9,r8
80004174:	ea 19 00 0f 	orh	r9,0xf
80004178:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000417c:	91 19       	st.w	r8[0x4],r9

	/* Last transfer, so de-assert the current NPCS if CSAAT is set. */
	spi->cr = AVR32_SPI_CR_LASTXFER_MASK;
8000417e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004182:	fc 19 01 00 	movh	r9,0x100
80004186:	91 09       	st.w	r8[0x0],r9

#ifdef FREERTOS_USED
	xSemaphoreGive(xSPIMutex);
#endif

	return SPI_OK;
80004188:	30 08       	mov	r8,0
}
8000418a:	10 9c       	mov	r12,r8
8000418c:	2f dd       	sub	sp,-12
8000418e:	e3 cd 80 80 	ldm	sp++,r7,pc
80004192:	d7 03       	nop

80004194 <spi_setupChipReg>:

spi_status_t spi_setupChipReg(volatile avr32_spi_t *spi,
		const spi_options_t *options,
		uint32_t pb_hz)
{
80004194:	eb cd 40 80 	pushm	r7,lr
80004198:	1a 97       	mov	r7,sp
8000419a:	20 5d       	sub	sp,20
8000419c:	ef 4c ff f4 	st.w	r7[-12],r12
800041a0:	ef 4b ff f0 	st.w	r7[-16],r11
800041a4:	ef 4a ff ec 	st.w	r7[-20],r10
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
800041a8:	ee f8 ff f0 	ld.w	r8,r7[-16]
800041ac:	f1 39 00 0c 	ld.ub	r9,r8[12]
800041b0:	30 38       	mov	r8,3
800041b2:	f0 09 18 00 	cp.b	r9,r8
800041b6:	e0 8b 00 1d 	brhi	800041f0 <spi_setupChipReg+0x5c>
			options->stay_act > 1 ||
800041ba:	ee f8 ff f0 	ld.w	r8,r7[-16]
800041be:	f1 39 00 0b 	ld.ub	r9,r8[11]
		const spi_options_t *options,
		uint32_t pb_hz)
{
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
800041c2:	30 18       	mov	r8,1
800041c4:	f0 09 18 00 	cp.b	r9,r8
800041c8:	e0 8b 00 14 	brhi	800041f0 <spi_setupChipReg+0x5c>
			options->stay_act > 1 ||
			options->bits < 8 || options->bits > 16) {
800041cc:	ee f8 ff f0 	ld.w	r8,r7[-16]
800041d0:	f1 39 00 08 	ld.ub	r9,r8[8]
		const spi_options_t *options,
		uint32_t pb_hz)
{
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
800041d4:	30 78       	mov	r8,7
800041d6:	f0 09 18 00 	cp.b	r9,r8
800041da:	e0 88 00 0b 	brls	800041f0 <spi_setupChipReg+0x5c>
			options->stay_act > 1 ||
			options->bits < 8 || options->bits > 16) {
800041de:	ee f8 ff f0 	ld.w	r8,r7[-16]
800041e2:	f1 39 00 08 	ld.ub	r9,r8[8]
		const spi_options_t *options,
		uint32_t pb_hz)
{
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
800041e6:	31 08       	mov	r8,16
800041e8:	f0 09 18 00 	cp.b	r9,r8
800041ec:	e0 88 00 04 	brls	800041f4 <spi_setupChipReg+0x60>
			options->stay_act > 1 ||
			options->bits < 8 || options->bits > 16) {
		return SPI_ERROR_ARGUMENT;
800041f0:	30 28       	mov	r8,2
800041f2:	c8 d8       	rjmp	8000430c <spi_setupChipReg+0x178>
	}

	int baudDiv = getBaudDiv(options->baudrate, pb_hz);
800041f4:	ee f8 ff f0 	ld.w	r8,r7[-16]
800041f8:	70 18       	ld.w	r8,r8[0x4]
800041fa:	ee fb ff ec 	ld.w	r11,r7[-20]
800041fe:	10 9c       	mov	r12,r8
80004200:	f0 1f 00 45 	mcall	80004314 <spi_setupChipReg+0x180>
80004204:	18 98       	mov	r8,r12
80004206:	ef 48 ff fc 	st.w	r7[-4],r8

	if (baudDiv < 0) {
8000420a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000420e:	58 08       	cp.w	r8,0
80004210:	c0 34       	brge	80004216 <spi_setupChipReg+0x82>
		return SPI_ERROR_ARGUMENT;
80004212:	30 28       	mov	r8,2
80004214:	c7 c8       	rjmp	8000430c <spi_setupChipReg+0x178>
	}

	/* Will use CSR0 offsets; these are the same for CSR0 to CSR3. */
	u_avr32_spi_csr.csr = 0;
80004216:	30 08       	mov	r8,0
80004218:	ef 48 ff f8 	st.w	r7[-8],r8
	u_avr32_spi_csr.CSR.cpol   = options->spi_mode >> 1;
8000421c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004220:	f1 38 00 0c 	ld.ub	r8,r8[12]
80004224:	a1 98       	lsr	r8,0x1
80004226:	5c 58       	castu.b	r8
80004228:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000422c:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80004230:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004234:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
80004238:	ef 48 ff f8 	st.w	r7[-8],r8
	u_avr32_spi_csr.CSR.ncpha  = (options->spi_mode & 0x1) ^ 0x1;
8000423c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004240:	f1 38 00 0c 	ld.ub	r8,r8[12]
80004244:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80004248:	5f 08       	sreq	r8
8000424a:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8000424e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004252:	f1 d9 d0 21 	bfins	r8,r9,0x1,0x1
80004256:	ef 48 ff f8 	st.w	r7[-8],r8
	u_avr32_spi_csr.CSR.csaat  = options->stay_act;
8000425a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000425e:	f1 38 00 0b 	ld.ub	r8,r8[11]
80004262:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80004266:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8000426a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000426e:	f1 d9 d0 61 	bfins	r8,r9,0x3,0x1
80004272:	ef 48 ff f8 	st.w	r7[-8],r8
	u_avr32_spi_csr.CSR.bits   = options->bits - 8;
80004276:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000427a:	f1 38 00 08 	ld.ub	r8,r8[8]
8000427e:	20 88       	sub	r8,8
80004280:	5c 58       	castu.b	r8
80004282:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80004286:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8000428a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000428e:	f1 d9 d0 84 	bfins	r8,r9,0x4,0x4
80004292:	ef 48 ff f8 	st.w	r7[-8],r8
	u_avr32_spi_csr.CSR.scbr   = baudDiv;
80004296:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000429a:	5c 58       	castu.b	r8
8000429c:	ef 68 ff fa 	st.b	r7[-6],r8
	u_avr32_spi_csr.CSR.dlybs  = options->spck_delay;
800042a0:	ee f8 ff f0 	ld.w	r8,r7[-16]
800042a4:	f1 38 00 09 	ld.ub	r8,r8[9]
800042a8:	ef 68 ff f9 	st.b	r7[-7],r8
	u_avr32_spi_csr.CSR.dlybct = options->trans_delay;
800042ac:	ee f8 ff f0 	ld.w	r8,r7[-16]
800042b0:	f1 38 00 0a 	ld.ub	r8,r8[10]
800042b4:	ef 68 ff f8 	st.b	r7[-8],r8

	switch (options->reg) {
800042b8:	ee f8 ff f0 	ld.w	r8,r7[-16]
800042bc:	11 88       	ld.ub	r8,r8[0x0]
800042be:	58 18       	cp.w	r8,1
800042c0:	c1 10       	breq	800042e2 <spi_setupChipReg+0x14e>
800042c2:	e0 89 00 05 	brgt	800042cc <spi_setupChipReg+0x138>
800042c6:	58 08       	cp.w	r8,0
800042c8:	c0 70       	breq	800042d6 <spi_setupChipReg+0x142>
800042ca:	c1 e8       	rjmp	80004306 <spi_setupChipReg+0x172>
800042cc:	58 28       	cp.w	r8,2
800042ce:	c1 00       	breq	800042ee <spi_setupChipReg+0x15a>
800042d0:	58 38       	cp.w	r8,3
800042d2:	c1 40       	breq	800042fa <spi_setupChipReg+0x166>
800042d4:	c1 98       	rjmp	80004306 <spi_setupChipReg+0x172>
	case 0:
		spi->csr0 = u_avr32_spi_csr.csr;
800042d6:	ee f9 ff f8 	ld.w	r9,r7[-8]
800042da:	ee f8 ff f4 	ld.w	r8,r7[-12]
800042de:	91 c9       	st.w	r8[0x30],r9
		break;
800042e0:	c1 58       	rjmp	8000430a <spi_setupChipReg+0x176>

	case 1:
		spi->csr1 = u_avr32_spi_csr.csr;
800042e2:	ee f9 ff f8 	ld.w	r9,r7[-8]
800042e6:	ee f8 ff f4 	ld.w	r8,r7[-12]
800042ea:	91 d9       	st.w	r8[0x34],r9
		break;
800042ec:	c0 f8       	rjmp	8000430a <spi_setupChipReg+0x176>

	case 2:
		spi->csr2 = u_avr32_spi_csr.csr;
800042ee:	ee f9 ff f8 	ld.w	r9,r7[-8]
800042f2:	ee f8 ff f4 	ld.w	r8,r7[-12]
800042f6:	91 e9       	st.w	r8[0x38],r9
		break;
800042f8:	c0 98       	rjmp	8000430a <spi_setupChipReg+0x176>

	case 3:
		spi->csr3 = u_avr32_spi_csr.csr;
800042fa:	ee f9 ff f8 	ld.w	r9,r7[-8]
800042fe:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004302:	91 f9       	st.w	r8[0x3c],r9
		break;
80004304:	c0 38       	rjmp	8000430a <spi_setupChipReg+0x176>

	default:
		return SPI_ERROR_ARGUMENT;
80004306:	30 28       	mov	r8,2
80004308:	c0 28       	rjmp	8000430c <spi_setupChipReg+0x178>
			}
		}
	}
#endif

	return SPI_OK;
8000430a:	30 08       	mov	r8,0
}
8000430c:	10 9c       	mov	r12,r8
8000430e:	2f bd       	sub	sp,-20
80004310:	e3 cd 80 80 	ldm	sp++,r7,pc
80004314:	80 00       	ld.sh	r0,r0[0x0]
80004316:	3f 18       	mov	r8,-15

80004318 <spi_enable>:

void spi_enable(volatile avr32_spi_t *spi)
{
80004318:	eb cd 40 80 	pushm	r7,lr
8000431c:	1a 97       	mov	r7,sp
8000431e:	20 1d       	sub	sp,4
80004320:	ef 4c ff fc 	st.w	r7[-4],r12
	spi->cr = AVR32_SPI_CR_SPIEN_MASK;
80004324:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004328:	30 19       	mov	r9,1
8000432a:	91 09       	st.w	r8[0x0],r9
}
8000432c:	2f fd       	sub	sp,-4
8000432e:	e3 cd 80 80 	ldm	sp++,r7,pc

80004332 <spi_write>:
{
	return ((spi->sr & AVR32_SPI_SR_TDRE_MASK) != 0);
}

spi_status_t spi_write(volatile avr32_spi_t *spi, uint16_t data)
{
80004332:	eb cd 40 80 	pushm	r7,lr
80004336:	1a 97       	mov	r7,sp
80004338:	20 3d       	sub	sp,12
8000433a:	ef 4c ff f8 	st.w	r7[-8],r12
8000433e:	16 98       	mov	r8,r11
80004340:	ef 58 ff f4 	st.h	r7[-12],r8
	uint32_t timeout = SPI_TIMEOUT;
80004344:	e0 68 3a 98 	mov	r8,15000
80004348:	ef 48 ff fc 	st.w	r7[-4],r8

	while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK)) {
8000434c:	c0 f8       	rjmp	8000436a <spi_write+0x38>
		if (!timeout--) {
8000434e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004352:	58 08       	cp.w	r8,0
80004354:	5f 08       	sreq	r8
80004356:	5c 58       	castu.b	r8
80004358:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000435c:	20 19       	sub	r9,1
8000435e:	ef 49 ff fc 	st.w	r7[-4],r9
80004362:	58 08       	cp.w	r8,0
80004364:	c0 30       	breq	8000436a <spi_write+0x38>
			return SPI_ERROR_TIMEOUT;
80004366:	30 18       	mov	r8,1
80004368:	c0 d8       	rjmp	80004382 <spi_write+0x50>

spi_status_t spi_write(volatile avr32_spi_t *spi, uint16_t data)
{
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK)) {
8000436a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000436e:	70 48       	ld.w	r8,r8[0x10]
80004370:	e2 18 00 02 	andl	r8,0x2,COH
80004374:	ce d0       	breq	8000434e <spi_write+0x1c>
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
		}
	}

	spi->tdr = data << AVR32_SPI_TDR_TD_OFFSET;
80004376:	ef 19 ff f4 	ld.uh	r9,r7[-12]
8000437a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000437e:	91 39       	st.w	r8[0xc],r9

	return SPI_OK;
80004380:	30 08       	mov	r8,0
}
80004382:	10 9c       	mov	r12,r8
80004384:	2f dd       	sub	sp,-12
80004386:	e3 cd 80 80 	ldm	sp++,r7,pc

8000438a <spi_read>:
{
	return ((spi->sr & AVR32_SPI_SR_RDRF_MASK) != 0);
}

spi_status_t spi_read(volatile avr32_spi_t *spi, uint16_t *data)
{
8000438a:	eb cd 40 80 	pushm	r7,lr
8000438e:	1a 97       	mov	r7,sp
80004390:	20 3d       	sub	sp,12
80004392:	ef 4c ff f8 	st.w	r7[-8],r12
80004396:	ef 4b ff f4 	st.w	r7[-12],r11
	unsigned int timeout = SPI_TIMEOUT;
8000439a:	e0 68 3a 98 	mov	r8,15000
8000439e:	ef 48 ff fc 	st.w	r7[-4],r8

	while ((spi->sr &
800043a2:	c0 f8       	rjmp	800043c0 <spi_read+0x36>
			(AVR32_SPI_SR_RDRF_MASK | AVR32_SPI_SR_TXEMPTY_MASK)) !=
			(AVR32_SPI_SR_RDRF_MASK | AVR32_SPI_SR_TXEMPTY_MASK)) {
		if (!timeout--) {
800043a4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800043a8:	58 08       	cp.w	r8,0
800043aa:	5f 08       	sreq	r8
800043ac:	5c 58       	castu.b	r8
800043ae:	ee f9 ff fc 	ld.w	r9,r7[-4]
800043b2:	20 19       	sub	r9,1
800043b4:	ef 49 ff fc 	st.w	r7[-4],r9
800043b8:	58 08       	cp.w	r8,0
800043ba:	c0 30       	breq	800043c0 <spi_read+0x36>
			return SPI_ERROR_TIMEOUT;
800043bc:	30 18       	mov	r8,1
800043be:	c1 18       	rjmp	800043e0 <spi_read+0x56>

spi_status_t spi_read(volatile avr32_spi_t *spi, uint16_t *data)
{
	unsigned int timeout = SPI_TIMEOUT;

	while ((spi->sr &
800043c0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800043c4:	70 48       	ld.w	r8,r8[0x10]
800043c6:	e2 18 02 01 	andl	r8,0x201,COH
800043ca:	e0 48 02 01 	cp.w	r8,513
800043ce:	ce b1       	brne	800043a4 <spi_read+0x1a>
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
		}
	}

	*data = spi->rdr >> AVR32_SPI_RDR_RD_OFFSET;
800043d0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800043d4:	70 28       	ld.w	r8,r8[0x8]
800043d6:	5c 88       	casts.h	r8
800043d8:	ee f9 ff f4 	ld.w	r9,r7[-12]
800043dc:	b2 08       	st.h	r9[0x0],r8

	return SPI_OK;
800043de:	30 08       	mov	r8,0
}
800043e0:	10 9c       	mov	r12,r8
800043e2:	2f dd       	sub	sp,-12
800043e4:	e3 cd 80 80 	ldm	sp++,r7,pc

800043e8 <board_init>:
#if defined (CONF_BOARD_AT45DBX)
#  define AT45DBX_MEM_CNT  1
#endif

void board_init(void)
{
800043e8:	eb cd 40 80 	pushm	r7,lr
800043ec:	1a 97       	mov	r7,sp
	gpio_configure_pin(LED0_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
800043ee:	30 3b       	mov	r11,3
800043f0:	33 bc       	mov	r12,59
800043f2:	f0 1f 00 2d 	mcall	800044a4 <board_init+0xbc>
	gpio_configure_pin(LED1_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
800043f6:	30 3b       	mov	r11,3
800043f8:	33 cc       	mov	r12,60
800043fa:	f0 1f 00 2b 	mcall	800044a4 <board_init+0xbc>
	gpio_configure_pin(LED2_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
800043fe:	30 3b       	mov	r11,3
80004400:	33 dc       	mov	r12,61
80004402:	f0 1f 00 29 	mcall	800044a4 <board_init+0xbc>
	gpio_configure_pin(LED3_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80004406:	30 3b       	mov	r11,3
80004408:	33 ec       	mov	r12,62
8000440a:	f0 1f 00 27 	mcall	800044a4 <board_init+0xbc>
	gpio_configure_pin(LED4_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
8000440e:	30 3b       	mov	r11,3
80004410:	33 3c       	mov	r12,51
80004412:	f0 1f 00 25 	mcall	800044a4 <board_init+0xbc>
	gpio_configure_pin(LED5_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80004416:	30 3b       	mov	r11,3
80004418:	33 4c       	mov	r12,52
8000441a:	f0 1f 00 23 	mcall	800044a4 <board_init+0xbc>
	gpio_configure_pin(LED6_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
8000441e:	30 3b       	mov	r11,3
80004420:	33 5c       	mov	r12,53
80004422:	f0 1f 00 21 	mcall	800044a4 <board_init+0xbc>
	gpio_configure_pin(LED7_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80004426:	30 3b       	mov	r11,3
80004428:	33 6c       	mov	r12,54
8000442a:	f0 1f 00 1f 	mcall	800044a4 <board_init+0xbc>

	gpio_configure_pin(GPIO_PUSH_BUTTON_0,GPIO_DIR_INPUT);
8000442e:	30 0b       	mov	r11,0
80004430:	35 8c       	mov	r12,88
80004432:	f0 1f 00 1d 	mcall	800044a4 <board_init+0xbc>
	gpio_configure_pin(GPIO_PUSH_BUTTON_1,GPIO_DIR_INPUT);
80004436:	30 0b       	mov	r11,0
80004438:	35 5c       	mov	r12,85
8000443a:	f0 1f 00 1b 	mcall	800044a4 <board_init+0xbc>
	gpio_configure_pin(GPIO_PUSH_BUTTON_2,GPIO_DIR_INPUT);
8000443e:	30 0b       	mov	r11,0
80004440:	35 2c       	mov	r12,82
80004442:	f0 1f 00 19 	mcall	800044a4 <board_init+0xbc>
	gpio_configure_pin(GPIO_JOYSTICK_PUSH,GPIO_DIR_INPUT);
80004446:	30 0b       	mov	r11,0
80004448:	31 4c       	mov	r12,20
8000444a:	f0 1f 00 17 	mcall	800044a4 <board_init+0xbc>
	gpio_configure_pin(GPIO_JOYSTICK_LEFT,GPIO_DIR_INPUT);
8000444e:	30 0b       	mov	r11,0
80004450:	31 9c       	mov	r12,25
80004452:	f0 1f 00 15 	mcall	800044a4 <board_init+0xbc>
	gpio_configure_pin(GPIO_JOYSTICK_UP,GPIO_DIR_INPUT);
80004456:	30 0b       	mov	r11,0
80004458:	31 ac       	mov	r12,26
8000445a:	f0 1f 00 13 	mcall	800044a4 <board_init+0xbc>
	gpio_configure_pin(GPIO_JOYSTICK_DOWN,GPIO_DIR_INPUT);
8000445e:	30 0b       	mov	r11,0
80004460:	31 bc       	mov	r12,27
80004462:	f0 1f 00 11 	mcall	800044a4 <board_init+0xbc>
		MREPEAT(AT45DBX_MEM_CNT, AT45DBX_ENABLE_NPCS_PIN, ~)
#  undef AT45DBX_ENABLE_NPCS_PIN
	};

	// Assign I/Os to SPI.
	gpio_enable_module(AT45DBX_SPI_GPIO_MAP,
80004466:	30 4b       	mov	r11,4
80004468:	49 0c       	lddpc	r12,800044a8 <board_init+0xc0>
8000446a:	f0 1f 00 11 	mcall	800044ac <board_init+0xc4>
		{SD_MMC_SPI_MOSI_PIN, SD_MMC_SPI_MOSI_FUNCTION},
		{SD_MMC_SPI_NPCS_PIN, SD_MMC_SPI_NPCS_FUNCTION},
	};

	// Assign I/Os to SPI.
	gpio_enable_module(SD_MMC_SPI_GPIO_MAP,
8000446e:	30 4b       	mov	r11,4
80004470:	49 0c       	lddpc	r12,800044b0 <board_init+0xc8>
80004472:	f0 1f 00 0f 	mcall	800044ac <board_init+0xc4>

	// Configure SD/MMC card detect and write protect pins
#  define SD_MMC_CONFIGURE_CD_WP_PIN(slot, unused) \
	gpio_configure_pin(SD_MMC_##slot##_CD_GPIO,GPIO_DIR_INPUT); \
	gpio_configure_pin(SD_MMC_##slot##_WP_GPIO,GPIO_DIR_INPUT);
	MREPEAT(SD_MMC_SPI_MEM_CNT, SD_MMC_CONFIGURE_CD_WP_PIN, ~)
80004476:	30 0b       	mov	r11,0
80004478:	30 2c       	mov	r12,2
8000447a:	f0 1f 00 0b 	mcall	800044a4 <board_init+0xbc>
8000447e:	30 0b       	mov	r11,0
80004480:	30 7c       	mov	r12,7
80004482:	f0 1f 00 09 	mcall	800044a4 <board_init+0xbc>
		{AVR32_TWI_SDA_0_0_PIN, AVR32_TWI_SDA_0_0_FUNCTION},
		{AVR32_TWI_SCL_0_0_PIN, AVR32_TWI_SCL_0_0_FUNCTION},
	};

	// TWI gpio pins configuration
	gpio_enable_module(TWI_GPIO_MAP,
80004486:	30 2b       	mov	r11,2
80004488:	48 bc       	lddpc	r12,800044b4 <board_init+0xcc>
8000448a:	f0 1f 00 09 	mcall	800044ac <board_init+0xc4>
	// USART GPIO pin configuration.
	static const gpio_map_t COMPORT_GPIO_MAP = {
		{USART_RXD_PIN, USART_RXD_FUNCTION },
		{USART_TXD_PIN, USART_TXD_FUNCTION },
	};
	gpio_enable_module(COMPORT_GPIO_MAP,
8000448e:	30 2b       	mov	r11,2
80004490:	48 ac       	lddpc	r12,800044b8 <board_init+0xd0>
80004492:	f0 1f 00 07 	mcall	800044ac <board_init+0xc4>
	// USART GPIO pin configuration.
	static const gpio_map_t COMPORT0_GPIO_MAP = {
		{USART0_RXD_PIN, USART0_RXD_FUNCTION },
		{USART0_TXD_PIN, USART0_TXD_FUNCTION },
	};
	gpio_enable_module(COMPORT0_GPIO_MAP,
80004496:	30 2b       	mov	r11,2
80004498:	48 9c       	lddpc	r12,800044bc <board_init+0xd4>
8000449a:	f0 1f 00 05 	mcall	800044ac <board_init+0xc4>
			sizeof(COMPORT0_GPIO_MAP) / sizeof(COMPORT0_GPIO_MAP[0]));
#endif
}
8000449e:	e3 cd 80 80 	ldm	sp++,r7,pc
800044a2:	00 00       	add	r0,r0
800044a4:	80 00       	ld.sh	r0,r0[0x0]
800044a6:	46 90       	lddsp	r0,sp[0x1a4]
800044a8:	80 00       	ld.sh	r0,r0[0x0]
800044aa:	b7 38       	mul	r8,r11
800044ac:	80 00       	ld.sh	r0,r0[0x0]
800044ae:	44 c0       	lddsp	r0,sp[0x130]
800044b0:	80 00       	ld.sh	r0,r0[0x0]
800044b2:	b7 58       	asr	r8,0x17
800044b4:	80 00       	ld.sh	r0,r0[0x0]
800044b6:	b7 78       	lsl	r8,0x17
800044b8:	80 00       	ld.sh	r0,r0[0x0]
800044ba:	b7 88       	lsr	r8,0x16
800044bc:	80 00       	ld.sh	r0,r0[0x0]
800044be:	b7 98       	lsr	r8,0x17

800044c0 <gpio_enable_module>:
 * \param size The number of pins in \a gpiomap.
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
800044c0:	eb cd 40 80 	pushm	r7,lr
800044c4:	1a 97       	mov	r7,sp
800044c6:	20 4d       	sub	sp,16
800044c8:	ef 4c ff f4 	st.w	r7[-12],r12
800044cc:	ef 4b ff f0 	st.w	r7[-16],r11
	uint32_t status = GPIO_SUCCESS;
800044d0:	30 08       	mov	r8,0
800044d2:	ef 48 ff f8 	st.w	r7[-8],r8
	uint32_t i;

	for (i = 0; i < size; i++) {
800044d6:	30 08       	mov	r8,0
800044d8:	ef 48 ff fc 	st.w	r7[-4],r8
800044dc:	c1 c8       	rjmp	80004514 <gpio_enable_module+0x54>
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
800044de:	ee f8 ff f4 	ld.w	r8,r7[-12]
800044e2:	70 19       	ld.w	r9,r8[0x4]
800044e4:	ee f8 ff f4 	ld.w	r8,r7[-12]
800044e8:	70 08       	ld.w	r8,r8[0x0]
800044ea:	12 9b       	mov	r11,r9
800044ec:	10 9c       	mov	r12,r8
800044ee:	f0 1f 00 10 	mcall	8000452c <gpio_enable_module+0x6c>
800044f2:	18 98       	mov	r8,r12
800044f4:	ee f9 ff f8 	ld.w	r9,r7[-8]
800044f8:	f3 e8 10 08 	or	r8,r9,r8
800044fc:	ef 48 ff f8 	st.w	r7[-8],r8
		gpiomap++;
80004500:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004504:	2f 88       	sub	r8,-8
80004506:	ef 48 ff f4 	st.w	r7[-12],r8
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
8000450a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000450e:	2f f8       	sub	r8,-1
80004510:	ef 48 ff fc 	st.w	r7[-4],r8
80004514:	ee f9 ff fc 	ld.w	r9,r7[-4]
80004518:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000451c:	10 39       	cp.w	r9,r8
8000451e:	ce 03       	brcs	800044de <gpio_enable_module+0x1e>
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
		gpiomap++;
	}

	return status;
80004520:	ee f8 ff f8 	ld.w	r8,r7[-8]
}
80004524:	10 9c       	mov	r12,r8
80004526:	2f cd       	sub	sp,-16
80004528:	e3 cd 80 80 	ldm	sp++,r7,pc
8000452c:	80 00       	ld.sh	r0,r0[0x0]
8000452e:	45 30       	lddsp	r0,sp[0x14c]

80004530 <gpio_enable_module_pin>:
 * \param function The pin function.
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module_pin(uint32_t pin, uint32_t function)
{
80004530:	eb cd 40 80 	pushm	r7,lr
80004534:	1a 97       	mov	r7,sp
80004536:	20 3d       	sub	sp,12
80004538:	ef 4c ff f8 	st.w	r7[-8],r12
8000453c:	ef 4b ff f4 	st.w	r7[-12],r11
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80004540:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004544:	a5 98       	lsr	r8,0x5
80004546:	a9 68       	lsl	r8,0x8
80004548:	e0 28 f0 00 	sub	r8,61440
8000454c:	ef 48 ff fc 	st.w	r7[-4],r8

	/* Enable the correct function. */
	switch (function) {
80004550:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004554:	58 18       	cp.w	r8,1
80004556:	c1 e0       	breq	80004592 <gpio_enable_module_pin+0x62>
80004558:	c0 63       	brcs	80004564 <gpio_enable_module_pin+0x34>
8000455a:	58 28       	cp.w	r8,2
8000455c:	c3 20       	breq	800045c0 <gpio_enable_module_pin+0x90>
8000455e:	58 38       	cp.w	r8,3
80004560:	c4 70       	breq	800045ee <gpio_enable_module_pin+0xbe>
80004562:	c5 d8       	rjmp	8000461c <gpio_enable_module_pin+0xec>
	case 0: /* A function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
80004564:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004568:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000456c:	30 19       	mov	r9,1
8000456e:	f2 08 09 48 	lsl	r8,r9,r8
80004572:	10 99       	mov	r9,r8
80004574:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004578:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
8000457a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000457e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004582:	30 19       	mov	r9,1
80004584:	f2 08 09 48 	lsl	r8,r9,r8
80004588:	10 99       	mov	r9,r8
8000458a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000458e:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
		break;
80004590:	c4 88       	rjmp	80004620 <gpio_enable_module_pin+0xf0>

	case 1: /* B function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
80004592:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004596:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000459a:	30 19       	mov	r9,1
8000459c:	f2 08 09 48 	lsl	r8,r9,r8
800045a0:	10 99       	mov	r9,r8
800045a2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800045a6:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
800045a8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800045ac:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800045b0:	30 19       	mov	r9,1
800045b2:	f2 08 09 48 	lsl	r8,r9,r8
800045b6:	10 99       	mov	r9,r8
800045b8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800045bc:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
		break;
800045be:	c3 18       	rjmp	80004620 <gpio_enable_module_pin+0xf0>

	case 2: /* C function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
800045c0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800045c4:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800045c8:	30 19       	mov	r9,1
800045ca:	f2 08 09 48 	lsl	r8,r9,r8
800045ce:	10 99       	mov	r9,r8
800045d0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800045d4:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
800045d6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800045da:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800045de:	30 19       	mov	r9,1
800045e0:	f2 08 09 48 	lsl	r8,r9,r8
800045e4:	10 99       	mov	r9,r8
800045e6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800045ea:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
		break;
800045ec:	c1 a8       	rjmp	80004620 <gpio_enable_module_pin+0xf0>

	case 3: /* D function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
800045ee:	ee f8 ff f8 	ld.w	r8,r7[-8]
800045f2:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800045f6:	30 19       	mov	r9,1
800045f8:	f2 08 09 48 	lsl	r8,r9,r8
800045fc:	10 99       	mov	r9,r8
800045fe:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004602:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
80004604:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004608:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000460c:	30 19       	mov	r9,1
8000460e:	f2 08 09 48 	lsl	r8,r9,r8
80004612:	10 99       	mov	r9,r8
80004614:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004618:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
		break;
8000461a:	c0 38       	rjmp	80004620 <gpio_enable_module_pin+0xf0>
		gpio_port->pmr2s = 1 << (pin & 0x1F);
		break;
#endif

	default:
		return GPIO_INVALID_ARGUMENT;
8000461c:	30 18       	mov	r8,1
8000461e:	c0 d8       	rjmp	80004638 <gpio_enable_module_pin+0x108>
	}

	/* Disable GPIO control. */
	gpio_port->gperc = 1 << (pin & 0x1F);
80004620:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004624:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004628:	30 19       	mov	r9,1
8000462a:	f2 08 09 48 	lsl	r8,r9,r8
8000462e:	10 99       	mov	r9,r8
80004630:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004634:	91 29       	st.w	r8[0x8],r9

	return GPIO_SUCCESS;
80004636:	30 08       	mov	r8,0
}
80004638:	10 9c       	mov	r12,r8
8000463a:	2f dd       	sub	sp,-12
8000463c:	e3 cd 80 80 	ldm	sp++,r7,pc

80004640 <gpio_enable_gpio_pin>:
 *            GPIO mode of PX21, AVR32_PIN_PX21 can be used. Module pins such as
 *            AVR32_PWM_3_PIN for PWM channel 3 can also be used to release
 *            module pins for GPIO.
 */
void gpio_enable_gpio_pin(uint32_t pin)
{
80004640:	eb cd 40 80 	pushm	r7,lr
80004644:	1a 97       	mov	r7,sp
80004646:	20 2d       	sub	sp,8
80004648:	ef 4c ff f8 	st.w	r7[-8],r12
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
8000464c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004650:	a5 98       	lsr	r8,0x5
80004652:	a9 68       	lsl	r8,0x8
80004654:	e0 28 f0 00 	sub	r8,61440
80004658:	ef 48 ff fc 	st.w	r7[-4],r8
	
	gpio_port->oderc = 1 << (pin & 0x1F);
8000465c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004660:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004664:	30 19       	mov	r9,1
80004666:	f2 08 09 48 	lsl	r8,r9,r8
8000466a:	10 99       	mov	r9,r8
8000466c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004670:	f1 49 00 48 	st.w	r8[72],r9
	gpio_port->gpers = 1 << (pin & 0x1F);
80004674:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004678:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000467c:	30 19       	mov	r9,1
8000467e:	f2 08 09 48 	lsl	r8,r9,r8
80004682:	10 99       	mov	r9,r8
80004684:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004688:	91 19       	st.w	r8[0x4],r9
}
8000468a:	2f ed       	sub	sp,-8
8000468c:	e3 cd 80 80 	ldm	sp++,r7,pc

80004690 <gpio_configure_pin>:
 *
 * \param pin The pin number.
 * \param flags The configuration.
 */
void gpio_configure_pin(uint32_t pin, uint32_t flags)
{
80004690:	eb cd 40 80 	pushm	r7,lr
80004694:	1a 97       	mov	r7,sp
80004696:	20 3d       	sub	sp,12
80004698:	ef 4c ff f8 	st.w	r7[-8],r12
8000469c:	ef 4b ff f4 	st.w	r7[-12],r11
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
800046a0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800046a4:	a5 98       	lsr	r8,0x5
800046a6:	a9 68       	lsl	r8,0x8
800046a8:	e0 28 f0 00 	sub	r8,61440
800046ac:	ef 48 ff fc 	st.w	r7[-4],r8
	} else {
		gpio_port->pderc = 1 << (pin & 0x1F);
	}

#endif
	if (flags & GPIO_PULL_UP) {
800046b0:	ee f8 ff f4 	ld.w	r8,r7[-12]
800046b4:	e2 18 00 04 	andl	r8,0x4,COH
800046b8:	c0 e0       	breq	800046d4 <gpio_configure_pin+0x44>
		gpio_port->puers = 1 << (pin & 0x1F);
800046ba:	ee f8 ff f8 	ld.w	r8,r7[-8]
800046be:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800046c2:	30 19       	mov	r9,1
800046c4:	f2 08 09 48 	lsl	r8,r9,r8
800046c8:	10 99       	mov	r9,r8
800046ca:	ee f8 ff fc 	ld.w	r8,r7[-4]
800046ce:	f1 49 00 74 	st.w	r8[116],r9
800046d2:	c0 d8       	rjmp	800046ec <gpio_configure_pin+0x5c>
	} else {
		gpio_port->puerc = 1 << (pin & 0x1F);
800046d4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800046d8:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800046dc:	30 19       	mov	r9,1
800046de:	f2 08 09 48 	lsl	r8,r9,r8
800046e2:	10 99       	mov	r9,r8
800046e4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800046e8:	f1 49 00 78 	st.w	r8[120],r9
	}

#endif

	/* Select interrupt level for group */
	if (flags & GPIO_INTERRUPT) {
800046ec:	ee f8 ff f4 	ld.w	r8,r7[-12]
800046f0:	e2 18 00 80 	andl	r8,0x80,COH
800046f4:	c5 a0       	breq	800047a8 <gpio_configure_pin+0x118>
		if (flags & GPIO_BOTHEDGES) {
800046f6:	ee f8 ff f4 	ld.w	r8,r7[-12]
800046fa:	e2 18 01 80 	andl	r8,0x180,COH
800046fe:	c1 a0       	breq	80004732 <gpio_configure_pin+0xa2>
			gpio_port->imr0c = 1 << (pin & 0x1F);
80004700:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004704:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004708:	30 19       	mov	r9,1
8000470a:	f2 08 09 48 	lsl	r8,r9,r8
8000470e:	10 99       	mov	r9,r8
80004710:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004714:	f1 49 00 a8 	st.w	r8[168],r9
			gpio_port->imr1c = 1 << (pin & 0x1F);
80004718:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000471c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004720:	30 19       	mov	r9,1
80004722:	f2 08 09 48 	lsl	r8,r9,r8
80004726:	10 99       	mov	r9,r8
80004728:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000472c:	f1 49 00 b8 	st.w	r8[184],r9
80004730:	c3 c8       	rjmp	800047a8 <gpio_configure_pin+0x118>
		} else if (flags & GPIO_RISING) {
80004732:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004736:	e2 18 02 80 	andl	r8,0x280,COH
8000473a:	c1 a0       	breq	8000476e <gpio_configure_pin+0xde>
			gpio_port->imr0s = 1 << (pin & 0x1F);
8000473c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004740:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004744:	30 19       	mov	r9,1
80004746:	f2 08 09 48 	lsl	r8,r9,r8
8000474a:	10 99       	mov	r9,r8
8000474c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004750:	f1 49 00 a4 	st.w	r8[164],r9
			gpio_port->imr1c = 1 << (pin & 0x1F);
80004754:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004758:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000475c:	30 19       	mov	r9,1
8000475e:	f2 08 09 48 	lsl	r8,r9,r8
80004762:	10 99       	mov	r9,r8
80004764:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004768:	f1 49 00 b8 	st.w	r8[184],r9
8000476c:	c1 e8       	rjmp	800047a8 <gpio_configure_pin+0x118>
		} else if (flags & GPIO_FALLING) {
8000476e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004772:	e2 18 03 80 	andl	r8,0x380,COH
80004776:	c1 90       	breq	800047a8 <gpio_configure_pin+0x118>
			gpio_port->imr0c = 1 << (pin & 0x1F);
80004778:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000477c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004780:	30 19       	mov	r9,1
80004782:	f2 08 09 48 	lsl	r8,r9,r8
80004786:	10 99       	mov	r9,r8
80004788:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000478c:	f1 49 00 a8 	st.w	r8[168],r9
			gpio_port->imr1s = 1 << (pin & 0x1F);
80004790:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004794:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004798:	30 19       	mov	r9,1
8000479a:	f2 08 09 48 	lsl	r8,r9,r8
8000479e:	10 99       	mov	r9,r8
800047a0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800047a4:	f1 49 00 b4 	st.w	r8[180],r9
		}
	}

	/* Select direction and initial pin state */
	if (flags & GPIO_DIR_OUTPUT) {
800047a8:	ee f8 ff f4 	ld.w	r8,r7[-12]
800047ac:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800047b0:	5c 58       	castu.b	r8
800047b2:	c2 c0       	breq	8000480a <gpio_configure_pin+0x17a>
		if (flags & GPIO_INIT_HIGH) {
800047b4:	ee f8 ff f4 	ld.w	r8,r7[-12]
800047b8:	e2 18 00 02 	andl	r8,0x2,COH
800047bc:	c0 e0       	breq	800047d8 <gpio_configure_pin+0x148>
			gpio_port->ovrs = 1 << (pin & 0x1F);
800047be:	ee f8 ff f8 	ld.w	r8,r7[-8]
800047c2:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800047c6:	30 19       	mov	r9,1
800047c8:	f2 08 09 48 	lsl	r8,r9,r8
800047cc:	10 99       	mov	r9,r8
800047ce:	ee f8 ff fc 	ld.w	r8,r7[-4]
800047d2:	f1 49 00 54 	st.w	r8[84],r9
800047d6:	c0 d8       	rjmp	800047f0 <gpio_configure_pin+0x160>
		} else {
			gpio_port->ovrc = 1 << (pin & 0x1F);
800047d8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800047dc:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800047e0:	30 19       	mov	r9,1
800047e2:	f2 08 09 48 	lsl	r8,r9,r8
800047e6:	10 99       	mov	r9,r8
800047e8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800047ec:	f1 49 00 58 	st.w	r8[88],r9
		}

		gpio_port->oders = 1 << (pin & 0x1F);
800047f0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800047f4:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800047f8:	30 19       	mov	r9,1
800047fa:	f2 08 09 48 	lsl	r8,r9,r8
800047fe:	10 99       	mov	r9,r8
80004800:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004804:	f1 49 00 44 	st.w	r8[68],r9
80004808:	c0 d8       	rjmp	80004822 <gpio_configure_pin+0x192>
	} else {
		gpio_port->oderc = 1 << (pin & 0x1F);
8000480a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000480e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004812:	30 19       	mov	r9,1
80004814:	f2 08 09 48 	lsl	r8,r9,r8
80004818:	10 99       	mov	r9,r8
8000481a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000481e:	f1 49 00 48 	st.w	r8[72],r9
	}

	/* Enable GPIO */
	gpio_port->gpers = 1 << (pin & 0x1F);
80004822:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004826:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000482a:	30 19       	mov	r9,1
8000482c:	f2 08 09 48 	lsl	r8,r9,r8
80004830:	10 99       	mov	r9,r8
80004832:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004836:	91 19       	st.w	r8[0x4],r9
}
80004838:	2f dd       	sub	sp,-12
8000483a:	e3 cd 80 80 	ldm	sp++,r7,pc

8000483e <gpio_set_gpio_pin>:
/** \brief Drives a GPIO pin to 1.
 *
 * \param pin The pin number.
 */
void gpio_set_gpio_pin(uint32_t pin)
{
8000483e:	eb cd 40 80 	pushm	r7,lr
80004842:	1a 97       	mov	r7,sp
80004844:	20 2d       	sub	sp,8
80004846:	ef 4c ff f8 	st.w	r7[-8],r12
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
8000484a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000484e:	a5 98       	lsr	r8,0x5
80004850:	a9 68       	lsl	r8,0x8
80004852:	e0 28 f0 00 	sub	r8,61440
80004856:	ef 48 ff fc 	st.w	r7[-4],r8
	
	/* Value to be driven on the I/O line: 1. */
	gpio_port->ovrs  = 1 << (pin & 0x1F);
8000485a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000485e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004862:	30 19       	mov	r9,1
80004864:	f2 08 09 48 	lsl	r8,r9,r8
80004868:	10 99       	mov	r9,r8
8000486a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000486e:	f1 49 00 54 	st.w	r8[84],r9
	/* The GPIO output driver is enabled for that pin. */ 
	gpio_port->oders = 1 << (pin & 0x1F);
80004872:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004876:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000487a:	30 19       	mov	r9,1
8000487c:	f2 08 09 48 	lsl	r8,r9,r8
80004880:	10 99       	mov	r9,r8
80004882:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004886:	f1 49 00 44 	st.w	r8[68],r9
	/* The GPIO module controls that pin. */
	gpio_port->gpers = 1 << (pin & 0x1F);
8000488a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000488e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004892:	30 19       	mov	r9,1
80004894:	f2 08 09 48 	lsl	r8,r9,r8
80004898:	10 99       	mov	r9,r8
8000489a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000489e:	91 19       	st.w	r8[0x4],r9
}
800048a0:	2f ed       	sub	sp,-8
800048a2:	e3 cd 80 80 	ldm	sp++,r7,pc

800048a6 <gpio_clr_gpio_pin>:
/** \brief Drives a GPIO pin to 0.
 *
 * \param pin The pin number.
 */
void gpio_clr_gpio_pin(uint32_t pin)
{
800048a6:	eb cd 40 80 	pushm	r7,lr
800048aa:	1a 97       	mov	r7,sp
800048ac:	20 2d       	sub	sp,8
800048ae:	ef 4c ff f8 	st.w	r7[-8],r12
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
800048b2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800048b6:	a5 98       	lsr	r8,0x5
800048b8:	a9 68       	lsl	r8,0x8
800048ba:	e0 28 f0 00 	sub	r8,61440
800048be:	ef 48 ff fc 	st.w	r7[-4],r8
	
	/* Value to be driven on the I/O line: 0. */
	gpio_port->ovrc  = 1 << (pin & 0x1F);
800048c2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800048c6:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800048ca:	30 19       	mov	r9,1
800048cc:	f2 08 09 48 	lsl	r8,r9,r8
800048d0:	10 99       	mov	r9,r8
800048d2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800048d6:	f1 49 00 58 	st.w	r8[88],r9
	/* The GPIO output driver is enabled for that pin. */
	gpio_port->oders = 1 << (pin & 0x1F);
800048da:	ee f8 ff f8 	ld.w	r8,r7[-8]
800048de:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800048e2:	30 19       	mov	r9,1
800048e4:	f2 08 09 48 	lsl	r8,r9,r8
800048e8:	10 99       	mov	r9,r8
800048ea:	ee f8 ff fc 	ld.w	r8,r7[-4]
800048ee:	f1 49 00 44 	st.w	r8[68],r9
	/* The GPIO module controls that pin. */
	gpio_port->gpers = 1 << (pin & 0x1F);
800048f2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800048f6:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800048fa:	30 19       	mov	r9,1
800048fc:	f2 08 09 48 	lsl	r8,r9,r8
80004900:	10 99       	mov	r9,r8
80004902:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004906:	91 19       	st.w	r8[0x4],r9
}
80004908:	2f ed       	sub	sp,-8
8000490a:	e3 cd 80 80 	ldm	sp++,r7,pc

8000490e <gpio_toggle_pin>:
 * \param pin The pin number.
 *
 * \note The function \ref gpio_configure_pin must be called before.
 */
void gpio_toggle_pin(uint32_t pin)
{
8000490e:	eb cd 40 80 	pushm	r7,lr
80004912:	1a 97       	mov	r7,sp
80004914:	20 2d       	sub	sp,8
80004916:	ef 4c ff f8 	st.w	r7[-8],r12
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
8000491a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000491e:	a5 98       	lsr	r8,0x5
80004920:	a9 68       	lsl	r8,0x8
80004922:	e0 28 f0 00 	sub	r8,61440
80004926:	ef 48 ff fc 	st.w	r7[-4],r8
	
	/* Toggle the I/O line. */
	gpio_port->ovrt  = 1 << (pin & 0x1F);
8000492a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000492e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004932:	30 19       	mov	r9,1
80004934:	f2 08 09 48 	lsl	r8,r9,r8
80004938:	10 99       	mov	r9,r8
8000493a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000493e:	f1 49 00 5c 	st.w	r8[92],r9
}
80004942:	2f ed       	sub	sp,-8
80004944:	e3 cd 80 80 	ldm	sp++,r7,pc

80004948 <gpio_configure_edge_detector>:
 *             \ref GPIO_RISING_EDGE or \ref GPIO_FALLING_EDGE).
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
static uint32_t gpio_configure_edge_detector(uint32_t pin, uint32_t mode)
{
80004948:	eb cd 40 80 	pushm	r7,lr
8000494c:	1a 97       	mov	r7,sp
8000494e:	20 3d       	sub	sp,12
80004950:	ef 4c ff f8 	st.w	r7[-8],r12
80004954:	ef 4b ff f4 	st.w	r7[-12],r11
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80004958:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000495c:	a5 98       	lsr	r8,0x5
8000495e:	a9 68       	lsl	r8,0x8
80004960:	e0 28 f0 00 	sub	r8,61440
80004964:	ef 48 ff fc 	st.w	r7[-4],r8

	/* Configure the edge detector. */
	switch (mode) {
80004968:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000496c:	58 18       	cp.w	r8,1
8000496e:	c1 e0       	breq	800049aa <gpio_configure_edge_detector+0x62>
80004970:	c0 43       	brcs	80004978 <gpio_configure_edge_detector+0x30>
80004972:	58 28       	cp.w	r8,2
80004974:	c3 40       	breq	800049dc <gpio_configure_edge_detector+0x94>
80004976:	c4 c8       	rjmp	80004a0e <gpio_configure_edge_detector+0xc6>
	case GPIO_PIN_CHANGE:
		gpio_port->imr0c = 1 << (pin & 0x1F);
80004978:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000497c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004980:	30 19       	mov	r9,1
80004982:	f2 08 09 48 	lsl	r8,r9,r8
80004986:	10 99       	mov	r9,r8
80004988:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000498c:	f1 49 00 a8 	st.w	r8[168],r9
		gpio_port->imr1c = 1 << (pin & 0x1F);
80004990:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004994:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004998:	30 19       	mov	r9,1
8000499a:	f2 08 09 48 	lsl	r8,r9,r8
8000499e:	10 99       	mov	r9,r8
800049a0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800049a4:	f1 49 00 b8 	st.w	r8[184],r9
		break;
800049a8:	c3 58       	rjmp	80004a12 <gpio_configure_edge_detector+0xca>

	case GPIO_RISING_EDGE:
		gpio_port->imr0s = 1 << (pin & 0x1F);
800049aa:	ee f8 ff f8 	ld.w	r8,r7[-8]
800049ae:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800049b2:	30 19       	mov	r9,1
800049b4:	f2 08 09 48 	lsl	r8,r9,r8
800049b8:	10 99       	mov	r9,r8
800049ba:	ee f8 ff fc 	ld.w	r8,r7[-4]
800049be:	f1 49 00 a4 	st.w	r8[164],r9
		gpio_port->imr1c = 1 << (pin & 0x1F);
800049c2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800049c6:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800049ca:	30 19       	mov	r9,1
800049cc:	f2 08 09 48 	lsl	r8,r9,r8
800049d0:	10 99       	mov	r9,r8
800049d2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800049d6:	f1 49 00 b8 	st.w	r8[184],r9
		break;
800049da:	c1 c8       	rjmp	80004a12 <gpio_configure_edge_detector+0xca>

	case GPIO_FALLING_EDGE:
		gpio_port->imr0c = 1 << (pin & 0x1F);
800049dc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800049e0:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800049e4:	30 19       	mov	r9,1
800049e6:	f2 08 09 48 	lsl	r8,r9,r8
800049ea:	10 99       	mov	r9,r8
800049ec:	ee f8 ff fc 	ld.w	r8,r7[-4]
800049f0:	f1 49 00 a8 	st.w	r8[168],r9
		gpio_port->imr1s = 1 << (pin & 0x1F);
800049f4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800049f8:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800049fc:	30 19       	mov	r9,1
800049fe:	f2 08 09 48 	lsl	r8,r9,r8
80004a02:	10 99       	mov	r9,r8
80004a04:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004a08:	f1 49 00 b4 	st.w	r8[180],r9
		break;
80004a0c:	c0 38       	rjmp	80004a12 <gpio_configure_edge_detector+0xca>

	default:
		return GPIO_INVALID_ARGUMENT;
80004a0e:	30 18       	mov	r8,1
80004a10:	c0 28       	rjmp	80004a14 <gpio_configure_edge_detector+0xcc>
	}

	return GPIO_SUCCESS;
80004a12:	30 08       	mov	r8,0
}
80004a14:	10 9c       	mov	r12,r8
80004a16:	2f dd       	sub	sp,-12
80004a18:	e3 cd 80 80 	ldm	sp++,r7,pc

80004a1c <gpio_enable_pin_interrupt>:
 *             \ref GPIO_FALLING_EDGE).
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_pin_interrupt(uint32_t pin, uint32_t mode)
{
80004a1c:	eb cd 40 80 	pushm	r7,lr
80004a20:	1a 97       	mov	r7,sp
80004a22:	20 3d       	sub	sp,12
80004a24:	ef 4c ff f8 	st.w	r7[-8],r12
80004a28:	ef 4b ff f4 	st.w	r7[-12],r11
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80004a2c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004a30:	a5 98       	lsr	r8,0x5
80004a32:	a9 68       	lsl	r8,0x8
80004a34:	e0 28 f0 00 	sub	r8,61440
80004a38:	ef 48 ff fc 	st.w	r7[-4],r8

	/* Enable the glitch filter. */
	gpio_port->gfers = 1 << (pin & 0x1F);
80004a3c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004a40:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004a44:	30 19       	mov	r9,1
80004a46:	f2 08 09 48 	lsl	r8,r9,r8
80004a4a:	10 99       	mov	r9,r8
80004a4c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004a50:	f1 49 00 c4 	st.w	r8[196],r9

	/* Configure the edge detector. */
	if (GPIO_INVALID_ARGUMENT == gpio_configure_edge_detector(pin, mode)) {
80004a54:	ee fb ff f4 	ld.w	r11,r7[-12]
80004a58:	ee fc ff f8 	ld.w	r12,r7[-8]
80004a5c:	f0 1f 00 0c 	mcall	80004a8c <gpio_enable_pin_interrupt+0x70>
80004a60:	18 98       	mov	r8,r12
80004a62:	58 18       	cp.w	r8,1
80004a64:	c0 31       	brne	80004a6a <gpio_enable_pin_interrupt+0x4e>
		return(GPIO_INVALID_ARGUMENT);
80004a66:	30 18       	mov	r8,1
80004a68:	c0 e8       	rjmp	80004a84 <gpio_enable_pin_interrupt+0x68>
	}

	/* Enable interrupt. */
	gpio_port->iers = 1 << (pin & 0x1F);
80004a6a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004a6e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004a72:	30 19       	mov	r9,1
80004a74:	f2 08 09 48 	lsl	r8,r9,r8
80004a78:	10 99       	mov	r9,r8
80004a7a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004a7e:	f1 49 00 94 	st.w	r8[148],r9

	return GPIO_SUCCESS;
80004a82:	30 08       	mov	r8,0
}
80004a84:	10 9c       	mov	r12,r8
80004a86:	2f dd       	sub	sp,-12
80004a88:	e3 cd 80 80 	ldm	sp++,r7,pc
80004a8c:	80 00       	ld.sh	r0,r0[0x0]
80004a8e:	49 48       	lddpc	r8,80004adc <gpio_clear_pin_interrupt_flag+0xe>

80004a90 <gpio_get_pin_interrupt_flag>:
 * \param pin The pin number.
 *
 * \return The pin interrupt flag.
 */
bool gpio_get_pin_interrupt_flag(uint32_t pin)
{
80004a90:	eb cd 40 80 	pushm	r7,lr
80004a94:	1a 97       	mov	r7,sp
80004a96:	20 2d       	sub	sp,8
80004a98:	ef 4c ff f8 	st.w	r7[-8],r12
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80004a9c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004aa0:	a5 98       	lsr	r8,0x5
80004aa2:	a9 68       	lsl	r8,0x8
80004aa4:	e0 28 f0 00 	sub	r8,61440
80004aa8:	ef 48 ff fc 	st.w	r7[-4],r8
	
	return (gpio_port->ifr >> (pin & 0x1F)) & 1;
80004aac:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004ab0:	f0 f9 00 d0 	ld.w	r9,r8[208]
80004ab4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004ab8:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004abc:	f2 08 0a 48 	lsr	r8,r9,r8
80004ac0:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80004ac4:	5c 58       	castu.b	r8
}
80004ac6:	10 9c       	mov	r12,r8
80004ac8:	2f ed       	sub	sp,-8
80004aca:	e3 cd 80 80 	ldm	sp++,r7,pc

80004ace <gpio_clear_pin_interrupt_flag>:
/** \brief Clears the interrupt flag of a pin.
 *
 * \param pin The pin number.
 */
void gpio_clear_pin_interrupt_flag(uint32_t pin)
{
80004ace:	eb cd 40 80 	pushm	r7,lr
80004ad2:	1a 97       	mov	r7,sp
80004ad4:	20 2d       	sub	sp,8
80004ad6:	ef 4c ff f8 	st.w	r7[-8],r12
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80004ada:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004ade:	a5 98       	lsr	r8,0x5
80004ae0:	a9 68       	lsl	r8,0x8
80004ae2:	e0 28 f0 00 	sub	r8,61440
80004ae6:	ef 48 ff fc 	st.w	r7[-4],r8
	gpio_port->ifrc = 1 << (pin & 0x1F);

	/* Restore interrupt enable register. */
	gpio_port->ier = gpio_ier;
#else
	gpio_port->ifrc = 1 << (pin & 0x1F);
80004aea:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004aee:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004af2:	30 19       	mov	r9,1
80004af4:	f2 08 09 48 	lsl	r8,r9,r8
80004af8:	10 99       	mov	r9,r8
80004afa:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004afe:	f1 49 00 d8 	st.w	r8[216],r9
#endif
}
80004b02:	2f ed       	sub	sp,-8
80004b04:	e3 cd 80 80 	ldm	sp++,r7,pc

80004b08 <_unhandled_interrupt>:
__attribute__((__interrupt__))
#elif (defined __ICCAVR32__)
__interrupt
#endif
static void _unhandled_interrupt(void)
{
80004b08:	eb cd 40 80 	pushm	r7,lr
80004b0c:	1a 97       	mov	r7,sp
	// Catch unregistered interrupts.
	while (true);
80004b0e:	c0 08       	rjmp	80004b0e <_unhandled_interrupt+0x6>

80004b10 <_get_interrupt_handler>:
 *
 * \return Interrupt handler to execute.
 */
__int_handler _get_interrupt_handler(uint32_t int_level);
__int_handler _get_interrupt_handler(uint32_t int_level)
{
80004b10:	eb cd 40 80 	pushm	r7,lr
80004b14:	1a 97       	mov	r7,sp
80004b16:	20 3d       	sub	sp,12
80004b18:	ef 4c ff f4 	st.w	r7[-12],r12
	/* ICR3 is mapped first, ICR0 last.
	Code in exception.S puts int_level in R12 which is used by the compiler
	to pass a single argument to a function. */
	uint32_t int_grp = AVR32_INTC.icr[AVR32_INTC_INT3 - int_level];
80004b1c:	fe 78 08 00 	mov	r8,-63488
80004b20:	ee f9 ff f4 	ld.w	r9,r7[-12]
80004b24:	f2 09 11 03 	rsub	r9,r9,3
80004b28:	28 09       	sub	r9,-128
80004b2a:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80004b2e:	ef 48 ff f8 	st.w	r7[-8],r8
	uint32_t int_req = AVR32_INTC.irr[int_grp];
80004b32:	fe 78 08 00 	mov	r8,-63488
80004b36:	ee f9 ff f8 	ld.w	r9,r7[-8]
80004b3a:	2c 09       	sub	r9,-64
80004b3c:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80004b40:	ef 48 ff fc 	st.w	r7[-4],r8
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
80004b44:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004b48:	58 08       	cp.w	r8,0
80004b4a:	c1 30       	breq	80004b70 <_get_interrupt_handler+0x60>
		? _int_handler_table[int_grp]._int_line_handler_table[32
80004b4c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80004b50:	48 b8       	lddpc	r8,80004b7c <_get_interrupt_handler+0x6c>
80004b52:	a1 79       	lsl	r9,0x1
80004b54:	2f f9       	sub	r9,-1
80004b56:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80004b5a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004b5e:	f0 08 12 00 	clz	r8,r8
80004b62:	f0 08 11 1f 	rsub	r8,r8,31
			- clz(int_req) - 1]
80004b66:	a3 68       	lsl	r8,0x2
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
		? _int_handler_table[int_grp]._int_line_handler_table[32
80004b68:	f2 08 00 08 	add	r8,r9,r8
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
80004b6c:	70 08       	ld.w	r8,r8[0x0]
80004b6e:	c0 28       	rjmp	80004b72 <_get_interrupt_handler+0x62>
80004b70:	30 08       	mov	r8,0
		? _int_handler_table[int_grp]._int_line_handler_table[32
			- clz(int_req) - 1]
		: NULL;
}
80004b72:	10 9c       	mov	r12,r8
80004b74:	2f dd       	sub	sp,-12
80004b76:	e3 cd 80 80 	ldm	sp++,r7,pc
80004b7a:	00 00       	add	r0,r0
80004b7c:	80 00       	ld.sh	r0,r0[0x0]
80004b7e:	b7 a8       	sbr	r8,0x16

80004b80 <INTC_init_evba>:
 * \internal
 * \brief Init EVBA address. This operation may or may not have been done by the
 * C startup process.
 */
static __inline__ void INTC_init_evba(void)
{
80004b80:	eb cd 40 80 	pushm	r7,lr
80004b84:	1a 97       	mov	r7,sp
  Set_system_register(AVR32_EVBA, (int32_t)&_evba );
80004b86:	48 38       	lddpc	r8,80004b90 <INTC_init_evba+0x10>
80004b88:	e3 b8 00 01 	mtsr	0x4,r8
}
80004b8c:	e3 cd 80 80 	ldm	sp++,r7,pc
80004b90:	80 00       	ld.sh	r0,r0[0x0]
80004b92:	b4 00       	st.h	r10[0x0],r0

80004b94 <INTC_init_interrupts>:
/**
 * \brief Initializes the hardware interrupt controller driver.
 *
 */
void INTC_init_interrupts(void)
{
80004b94:	eb cd 40 80 	pushm	r7,lr
80004b98:	1a 97       	mov	r7,sp
80004b9a:	20 2d       	sub	sp,8
	uint32_t int_grp, int_req;

	INTC_init_evba();
80004b9c:	f0 1f 00 1f 	mcall	80004c18 <INTC_init_interrupts+0x84>

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
80004ba0:	30 08       	mov	r8,0
80004ba2:	ef 48 ff f8 	st.w	r7[-8],r8
80004ba6:	c3 18       	rjmp	80004c08 <INTC_init_interrupts+0x74>
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
80004ba8:	30 08       	mov	r8,0
80004baa:	ef 48 ff fc 	st.w	r7[-4],r8
80004bae:	c1 48       	rjmp	80004bd6 <INTC_init_interrupts+0x42>
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
				._int_line_handler_table[int_req]
80004bb0:	ee f9 ff f8 	ld.w	r9,r7[-8]
80004bb4:	49 a8       	lddpc	r8,80004c1c <INTC_init_interrupts+0x88>
80004bb6:	a1 79       	lsl	r9,0x1
80004bb8:	2f f9       	sub	r9,-1
80004bba:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80004bbe:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004bc2:	a3 68       	lsl	r8,0x2
80004bc4:	f2 08 00 08 	add	r8,r9,r8
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
80004bc8:	49 69       	lddpc	r9,80004c20 <INTC_init_interrupts+0x8c>
80004bca:	91 09       	st.w	r8[0x0],r9
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
80004bcc:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004bd0:	2f f8       	sub	r8,-1
80004bd2:	ef 48 ff fc 	st.w	r7[-4],r8
	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
			int_req < _int_handler_table[int_grp].num_irqs;
80004bd6:	ee f9 ff f8 	ld.w	r9,r7[-8]
80004bda:	49 18       	lddpc	r8,80004c1c <INTC_init_interrupts+0x88>
80004bdc:	f0 09 03 39 	ld.w	r9,r8[r9<<0x3]

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
80004be0:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004be4:	10 39       	cp.w	r9,r8
80004be6:	fe 9b ff e5 	brhi	80004bb0 <INTC_init_interrupts+0x1c>

		/* Set the interrupt group priority register to its default
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
80004bea:	fe 78 08 00 	mov	r8,-63488
80004bee:	ee f9 ff f8 	ld.w	r9,r7[-8]
80004bf2:	48 db       	lddpc	r11,80004c24 <INTC_init_interrupts+0x90>
80004bf4:	48 da       	lddpc	r10,80004c28 <INTC_init_interrupts+0x94>
80004bf6:	f6 0a 01 0a 	sub	r10,r11,r10
80004bfa:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	uint32_t int_grp, int_req;

	INTC_init_evba();

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
80004bfe:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004c02:	2f f8       	sub	r8,-1
80004c04:	ef 48 ff f8 	st.w	r7[-8],r8
80004c08:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004c0c:	59 38       	cp.w	r8,19
80004c0e:	fe 98 ff cd 	brls	80004ba8 <INTC_init_interrupts+0x14>
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
	}
}
80004c12:	2f ed       	sub	sp,-8
80004c14:	e3 cd 80 80 	ldm	sp++,r7,pc
80004c18:	80 00       	ld.sh	r0,r0[0x0]
80004c1a:	4b 80       	lddpc	r0,80004cf8 <INTC_register_interrupt+0xcc>
80004c1c:	80 00       	ld.sh	r0,r0[0x0]
80004c1e:	b7 a8       	sbr	r8,0x16
80004c20:	80 00       	ld.sh	r0,r0[0x0]
80004c22:	4b 08       	lddpc	r8,80004ce0 <INTC_register_interrupt+0xb4>
80004c24:	80 00       	ld.sh	r0,r0[0x0]
80004c26:	b5 04       	ld.d	r4,r10
80004c28:	80 00       	ld.sh	r0,r0[0x0]
80004c2a:	b4 00       	st.h	r10[0x0],r0

80004c2c <INTC_register_interrupt>:
 *          be effective.
 *
 */
void INTC_register_interrupt(__int_handler handler, uint32_t irq,
	uint32_t int_level)
{
80004c2c:	eb cd 40 80 	pushm	r7,lr
80004c30:	1a 97       	mov	r7,sp
80004c32:	20 4d       	sub	sp,16
80004c34:	ef 4c ff f8 	st.w	r7[-8],r12
80004c38:	ef 4b ff f4 	st.w	r7[-12],r11
80004c3c:	ef 4a ff f0 	st.w	r7[-16],r10
	// Determine the group of the IRQ.
	uint32_t int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;
80004c40:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004c44:	a5 98       	lsr	r8,0x5
80004c46:	ef 48 ff fc 	st.w	r7[-4],r8

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
		._int_line_handler_table[irq % AVR32_INTC_MAX_NUM_IRQS_PER_GRP]
80004c4a:	ee f9 ff fc 	ld.w	r9,r7[-4]
80004c4e:	4a 78       	lddpc	r8,80004ce8 <INTC_register_interrupt+0xbc>
80004c50:	a1 79       	lsl	r9,0x1
80004c52:	2f f9       	sub	r9,-1
80004c54:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80004c58:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004c5c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004c60:	a3 68       	lsl	r8,0x2
80004c62:	f2 08 00 08 	add	r8,r9,r8
	uint32_t int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
80004c66:	ee f9 ff f8 	ld.w	r9,r7[-8]
80004c6a:	91 09       	st.w	r8[0x0],r9
	/* Program the corresponding IPRX register to set the interrupt priority
	level and the interrupt vector offset that will be fetched by the core
	interrupt system.
	NOTE: The _intx functions are intermediate assembly functions between
	the core interrupt system and the user interrupt handler. */
	if (int_level == AVR32_INTC_INT0) {
80004c6c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004c70:	58 08       	cp.w	r8,0
80004c72:	c0 c1       	brne	80004c8a <INTC_register_interrupt+0x5e>
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
80004c74:	fe 78 08 00 	mov	r8,-63488
80004c78:	ee f9 ff fc 	ld.w	r9,r7[-4]
80004c7c:	49 cb       	lddpc	r11,80004cec <INTC_register_interrupt+0xc0>
80004c7e:	49 da       	lddpc	r10,80004cf0 <INTC_register_interrupt+0xc4>
80004c80:	f6 0a 01 0a 	sub	r10,r11,r10
80004c84:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
80004c88:	c2 d8       	rjmp	80004ce2 <INTC_register_interrupt+0xb6>
	} else if (int_level == AVR32_INTC_INT1) {
80004c8a:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004c8e:	58 18       	cp.w	r8,1
80004c90:	c0 d1       	brne	80004caa <INTC_register_interrupt+0x7e>
		AVR32_INTC.ipr[int_grp] = IPR_INT1;
80004c92:	fe 78 08 00 	mov	r8,-63488
80004c96:	ee f9 ff fc 	ld.w	r9,r7[-4]
80004c9a:	49 7b       	lddpc	r11,80004cf4 <INTC_register_interrupt+0xc8>
80004c9c:	49 5a       	lddpc	r10,80004cf0 <INTC_register_interrupt+0xc4>
80004c9e:	f6 0a 01 0a 	sub	r10,r11,r10
80004ca2:	bf aa       	sbr	r10,0x1e
80004ca4:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
80004ca8:	c1 d8       	rjmp	80004ce2 <INTC_register_interrupt+0xb6>
	} else if (int_level == AVR32_INTC_INT2) {
80004caa:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004cae:	58 28       	cp.w	r8,2
80004cb0:	c0 d1       	brne	80004cca <INTC_register_interrupt+0x9e>
		AVR32_INTC.ipr[int_grp] = IPR_INT2;
80004cb2:	fe 78 08 00 	mov	r8,-63488
80004cb6:	ee f9 ff fc 	ld.w	r9,r7[-4]
80004cba:	49 0b       	lddpc	r11,80004cf8 <INTC_register_interrupt+0xcc>
80004cbc:	48 da       	lddpc	r10,80004cf0 <INTC_register_interrupt+0xc4>
80004cbe:	f6 0a 01 0a 	sub	r10,r11,r10
80004cc2:	bf ba       	sbr	r10,0x1f
80004cc4:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
80004cc8:	c0 d8       	rjmp	80004ce2 <INTC_register_interrupt+0xb6>
	} else {
		AVR32_INTC.ipr[int_grp] = IPR_INT3;
80004cca:	fe 78 08 00 	mov	r8,-63488
80004cce:	ee f9 ff fc 	ld.w	r9,r7[-4]
80004cd2:	48 bb       	lddpc	r11,80004cfc <INTC_register_interrupt+0xd0>
80004cd4:	48 7a       	lddpc	r10,80004cf0 <INTC_register_interrupt+0xc4>
80004cd6:	f6 0a 01 0a 	sub	r10,r11,r10
80004cda:	ea 1a c0 00 	orh	r10,0xc000
80004cde:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	}
}
80004ce2:	2f cd       	sub	sp,-16
80004ce4:	e3 cd 80 80 	ldm	sp++,r7,pc
80004ce8:	80 00       	ld.sh	r0,r0[0x0]
80004cea:	b7 a8       	sbr	r8,0x16
80004cec:	80 00       	ld.sh	r0,r0[0x0]
80004cee:	b5 04       	ld.d	r4,r10
80004cf0:	80 00       	ld.sh	r0,r0[0x0]
80004cf2:	b4 00       	st.h	r10[0x0],r0
80004cf4:	80 00       	ld.sh	r0,r0[0x0]
80004cf6:	b5 12       	ld.d	r2,--r10
80004cf8:	80 00       	ld.sh	r0,r0[0x0]
80004cfa:	b5 20       	st.d	r10++,r0
80004cfc:	80 00       	ld.sh	r0,r0[0x0]
80004cfe:	b5 2e       	st.d	r10++,lr

80004d00 <_stext>:

  .global _stext
  .type _stext, @function
_stext:
  // Set initial stack pointer.
  lda.w   sp, _estack
80004d00:	e0 7d 00 00 	mov	sp,65536

  // Set up EVBA so interrupts can be enabled.
  lda.w   r0, _evba
  mtsr    AVR32_EVBA, r0
80004d04:	fe c0 99 04 	sub	r0,pc,-26364

  // Enable the exception processing.
  csrf    AVR32_SR_EM_OFFSET
80004d08:	e3 b0 00 01 	mtsr	0x4,r0

  // Load initialized data having a global lifetime from the data LMA.
  lda.w   r0, _data
  lda.w   r1, _edata
80004d0c:	d5 53       	csrf	0x15
  cp      r0, r1
80004d0e:	30 80       	mov	r0,8
  brhs    idata_load_loop_end
80004d10:	e0 61 05 28 	mov	r1,1320
  lda.w   r2, _data_lma
idata_load_loop:
  ld.d    r4, r2++
80004d14:	02 30       	cp.w	r0,r1
  st.d    r0++, r4
80004d16:	c0 72       	brcc	80004d24 <idata_load_loop_end>
  cp      r0, r1
80004d18:	fe c2 8f 10 	sub	r2,pc,-28912

80004d1c <idata_load_loop>:
  brlo    idata_load_loop
idata_load_loop_end:

  // Clear uninitialized data having a global lifetime in the blank static storage section.
  lda.w   r0, __bss_start
80004d1c:	a5 05       	ld.d	r4,r2++
  lda.w   r1, _end
80004d1e:	a1 24       	st.d	r0++,r4
  cp      r0, r1
80004d20:	02 30       	cp.w	r0,r1
  brhs    udata_clear_loop_end
80004d22:	cf d3       	brcs	80004d1c <idata_load_loop>

80004d24 <idata_load_loop_end>:
  mov     r2, 0
80004d24:	e0 60 05 28 	mov	r0,1320
  mov     r3, 0
udata_clear_loop:
  st.d    r0++, r2
80004d28:	e0 61 06 a8 	mov	r1,1704
  cp      r0, r1
  brlo    udata_clear_loop
80004d2c:	02 30       	cp.w	r0,r1
  // Safety: Set the default "return" @ to the exit routine address.
  lda.w   lr, exit
#endif

  // Start the show.
  lda.w   pc, main
80004d2e:	c0 62       	brcc	80004d3a <udata_clear_loop_end>
80004d30:	30 02       	mov	r2,0
80004d32:	30 03       	mov	r3,0

80004d34 <udata_clear_loop>:
80004d34:	a1 22       	st.d	r0++,r2
80004d36:	02 30       	cp.w	r0,r1
80004d38:	cf e3       	brcs	80004d34 <udata_clear_loop>

80004d3a <udata_clear_loop_end>:
80004d3a:	fe cf fa 6a 	sub	pc,pc,-1430
80004d3e:	d7 03       	nop
80004d40:	46 52       	lddsp	r2,sp[0x194]
80004d42:	45 51       	lddsp	r1,sp[0x154]
80004d44:	3a 20       	mov	r0,-94
80004d46:	00 00       	add	r0,r0
80004d48:	25 6c       	sub	r12,86
80004d4a:	75 00       	ld.w	r0,r10[0x40]
80004d4c:	48 7a       	lddpc	r10,80004d68 <udata_clear_loop_end+0x2e>
80004d4e:	00 00       	add	r0,r0
80004d50:	44 55       	lddsp	r5,sp[0x114]
80004d52:	54 59       	stdsp	sp[0x114],r9
80004d54:	3a 20       	mov	r0,-94
80004d56:	00 00       	add	r0,r0
80004d58:	25 00       	sub	r0,80
80004d5a:	00 00       	add	r0,r0
80004d5c:	25 6c       	sub	r12,86
80004d5e:	75 20       	ld.w	r0,r10[0x48]
80004d60:	20 20       	sub	r0,2
80004d62:	00 00       	add	r0,r0
80004d64:	48 7a       	lddpc	r10,80004d80 <udata_clear_loop_end+0x46>
80004d66:	20 2a       	sub	r10,2
80004d68:	00 00       	add	r0,r0
80004d6a:	00 00       	add	r0,r0
80004d6c:	25 20       	sub	r0,82
80004d6e:	20 20       	sub	r0,2
80004d70:	00 00       	add	r0,r0
80004d72:	00 00       	add	r0,r0
80004d74:	48 7a       	lddpc	r10,80004d90 <lcd_spi_pin_init+0xc>
80004d76:	20 20       	sub	r0,2
80004d78:	00 00       	add	r0,r0
80004d7a:	00 00       	add	r0,r0
80004d7c:	25 20       	sub	r0,82
80004d7e:	20 2a       	sub	r10,2
80004d80:	00 00       	add	r0,r0
	...

80004d84 <lcd_spi_pin_init>:
	.spi_mode     = SPI_MODE_0,			// Select SPI mode
	.modfdis      = 1					// Disable mode fault detection
};

void lcd_spi_pin_init(void)
{
80004d84:	eb cd 40 80 	pushm	r7,lr
80004d88:	1a 97       	mov	r7,sp
		{DIP204_SPI_MOSI_PIN, DIP204_SPI_MOSI_FUNCTION},  // MOSI.
		{DIP204_SPI_NPCS_PIN, DIP204_SPI_NPCS_FUNCTION}   // Chip Select NPCS.
	};
	
	// Assign I/Os to SPI
	gpio_enable_module(DIP204_SPI_GPIO_MAP,
80004d8a:	30 4b       	mov	r11,4
80004d8c:	48 3c       	lddpc	r12,80004d98 <lcd_spi_pin_init+0x14>
80004d8e:	f0 1f 00 04 	mcall	80004d9c <lcd_spi_pin_init+0x18>
	sizeof(DIP204_SPI_GPIO_MAP) / sizeof(DIP204_SPI_GPIO_MAP[0]));
}
80004d92:	e3 cd 80 80 	ldm	sp++,r7,pc
80004d96:	00 00       	add	r0,r0
80004d98:	80 00       	ld.sh	r0,r0[0x0]
80004d9a:	b8 5c       	st.h	r12[0xa],r12
80004d9c:	80 00       	ld.sh	r0,r0[0x0]
80004d9e:	44 c0       	lddsp	r0,sp[0x130]

80004da0 <lcd_spi_init>:

void lcd_spi_init(uint32_t pba_freq)
{
80004da0:	eb cd 40 80 	pushm	r7,lr
80004da4:	1a 97       	mov	r7,sp
80004da6:	20 1d       	sub	sp,4
80004da8:	ef 4c ff fc 	st.w	r7[-4],r12
	spi_initMaster(DIP204_SPI, &spiOptions);			// Initialize the AVR32 as SPI MASTER
80004dac:	49 0b       	lddpc	r11,80004dec <lcd_spi_init+0x4c>
80004dae:	fe 7c 28 00 	mov	r12,-55296
80004db2:	f0 1f 00 10 	mcall	80004df0 <lcd_spi_init+0x50>
	spi_selectionMode(DIP204_SPI, 0, 0, 0);				// Set selection mode: variable_ps, pcs_decode, delay
80004db6:	30 09       	mov	r9,0
80004db8:	30 0a       	mov	r10,0
80004dba:	30 0b       	mov	r11,0
80004dbc:	fe 7c 28 00 	mov	r12,-55296
80004dc0:	f0 1f 00 0d 	mcall	80004df4 <lcd_spi_init+0x54>
	spi_enable(DIP204_SPI);								// Enable SPI
80004dc4:	fe 7c 28 00 	mov	r12,-55296
80004dc8:	f0 1f 00 0c 	mcall	80004df8 <lcd_spi_init+0x58>
	spi_setupChipReg(DIP204_SPI, &spiOptions, pba_freq);	// Configure registers on MASTER
80004dcc:	ee fa ff fc 	ld.w	r10,r7[-4]
80004dd0:	48 7b       	lddpc	r11,80004dec <lcd_spi_init+0x4c>
80004dd2:	fe 7c 28 00 	mov	r12,-55296
80004dd6:	f0 1f 00 0a 	mcall	80004dfc <lcd_spi_init+0x5c>
	dip204_init(backlight_IO, true);					// Initialize LCD
80004dda:	30 1b       	mov	r11,1
80004ddc:	30 0c       	mov	r12,0
80004dde:	f0 1f 00 09 	mcall	80004e00 <lcd_spi_init+0x60>
	dip204_hide_cursor();								// Hide cursor
80004de2:	f0 1f 00 09 	mcall	80004e04 <lcd_spi_init+0x64>
}
80004de6:	2f fd       	sub	sp,-4
80004de8:	e3 cd 80 80 	ldm	sp++,r7,pc
80004dec:	00 00       	add	r0,r0
80004dee:	00 0c       	add	r12,r0
80004df0:	80 00       	ld.sh	r0,r0[0x0]
80004df2:	3f 68       	mov	r8,-10
80004df4:	80 00       	ld.sh	r0,r0[0x0]
80004df6:	3f fc       	mov	r12,-1
80004df8:	80 00       	ld.sh	r0,r0[0x0]
80004dfa:	43 18       	lddsp	r8,sp[0xc4]
80004dfc:	80 00       	ld.sh	r0,r0[0x0]
80004dfe:	41 94       	lddsp	r4,sp[0x64]
80004e00:	80 00       	ld.sh	r0,r0[0x0]
80004e02:	23 38       	sub	r8,51
80004e04:	80 00       	ld.sh	r0,r0[0x0]
80004e06:	2e 14       	sub	r4,-31

80004e08 <push_button_0_interrupt_init>:

#ifndef INTERRUPTS_INIT_H_
#define INTERRUPTS_INIT_H_

static void push_button_0_interrupt_init(__int_handler handler, uint32_t priority)
{
80004e08:	eb cd 40 80 	pushm	r7,lr
80004e0c:	1a 97       	mov	r7,sp
80004e0e:	20 2d       	sub	sp,8
80004e10:	ef 4c ff fc 	st.w	r7[-4],r12
80004e14:	ef 4b ff f8 	st.w	r7[-8],r11
	// Define handler and configure interrupt with correct priority
	INTC_register_interrupt(handler,
80004e18:	ee fa ff f8 	ld.w	r10,r7[-8]
80004e1c:	34 bb       	mov	r11,75
80004e1e:	ee fc ff fc 	ld.w	r12,r7[-4]
80004e22:	f0 1f 00 05 	mcall	80004e34 <push_button_0_interrupt_init+0x2c>
							AVR32_GPIO_IRQ_0 + (GPIO_PUSH_BUTTON_0/8),
							priority);
	
	// Enable falling edge interrupt on Push Button 1
	gpio_enable_pin_interrupt(GPIO_PUSH_BUTTON_0, GPIO_FALLING_EDGE);
80004e26:	30 2b       	mov	r11,2
80004e28:	35 8c       	mov	r12,88
80004e2a:	f0 1f 00 04 	mcall	80004e38 <push_button_0_interrupt_init+0x30>
}
80004e2e:	2f ed       	sub	sp,-8
80004e30:	e3 cd 80 80 	ldm	sp++,r7,pc
80004e34:	80 00       	ld.sh	r0,r0[0x0]
80004e36:	4c 2c       	lddpc	r12,80004f3c <adc_pot_init>
80004e38:	80 00       	ld.sh	r0,r0[0x0]
80004e3a:	4a 1c       	lddpc	r12,80004ebc <erm_tc_init+0x54>

80004e3c <erm_tc_interrupt_init>:

static void erm_tc_interrupt_init(__int_handler handler, uint32_t priority)
{
80004e3c:	eb cd 40 80 	pushm	r7,lr
80004e40:	1a 97       	mov	r7,sp
80004e42:	20 2d       	sub	sp,8
80004e44:	ef 4c ff fc 	st.w	r7[-4],r12
80004e48:	ef 4b ff f8 	st.w	r7[-8],r11
	// Define handler and configure interrupt with correct priority
	INTC_register_interrupt(handler, AVR32_TC_IRQ0, priority);
80004e4c:	ee fa ff f8 	ld.w	r10,r7[-8]
80004e50:	e0 6b 01 c0 	mov	r11,448
80004e54:	ee fc ff fc 	ld.w	r12,r7[-4]
80004e58:	f0 1f 00 03 	mcall	80004e64 <erm_tc_interrupt_init+0x28>
}
80004e5c:	2f ed       	sub	sp,-8
80004e5e:	e3 cd 80 80 	ldm	sp++,r7,pc
80004e62:	00 00       	add	r0,r0
80004e64:	80 00       	ld.sh	r0,r0[0x0]
80004e66:	4c 2c       	lddpc	r12,80004f6c <adc_pot_init+0x30>

80004e68 <erm_tc_init>:
#define ERM_TC_CHANNEL_ID			0
#define ERM_TC_CHANNEL_PIN			AVR32_TC_A0_0_0_PIN
#define ERM_TC_CHANNEL_FUNCTION		AVR32_TC_A0_0_0_FUNCTION

static void erm_tc_init(volatile avr32_tc_t *tc, uint32_t tick_ms, uint32_t pba_clk)
{
80004e68:	eb cd 40 c0 	pushm	r6-r7,lr
80004e6c:	1a 97       	mov	r7,sp
80004e6e:	20 7d       	sub	sp,28
80004e70:	ef 4c ff ec 	st.w	r7[-20],r12
80004e74:	ef 4b ff e8 	st.w	r7[-24],r11
80004e78:	ef 4a ff e4 	st.w	r7[-28],r10
		.cpcstop  = false,								// Counter clock stopped with RC compare.

		.burst    = false,								// Burst signal selection.
		.clki     = false,								// Clock inversion.
		.tcclks   = TC_CLOCK_SOURCE_TC4					// Internal source clock 3, connected to fPBA / 32.
	};
80004e7c:	30 08       	mov	r8,0
80004e7e:	30 09       	mov	r9,0
80004e80:	ee e9 ff f0 	st.d	r7[-16],r8
80004e84:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004e88:	30 29       	mov	r9,2
80004e8a:	f1 d9 d1 a2 	bfins	r8,r9,0xd,0x2
80004e8e:	ef 48 ff f4 	st.w	r7[-12],r8
80004e92:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004e96:	30 39       	mov	r9,3
80004e98:	f1 d9 d0 03 	bfins	r8,r9,0x0,0x3
80004e9c:	ef 48 ff f4 	st.w	r7[-12],r8
		.lovrs = 0,
		.covfs = 0
	};
	
	// Initialize the timer/counter.
	tc_init_waveform(tc, &waveform_opt);
80004ea0:	ee c8 00 10 	sub	r8,r7,16
80004ea4:	10 9b       	mov	r11,r8
80004ea6:	ee fc ff ec 	ld.w	r12,r7[-20]
80004eaa:	f0 1f 00 1c 	mcall	80004f18 <erm_tc_init+0xb0>
	
	// Internal clock source 4 is active, hence tc_clk = pba_clk / 32
	// Determine value of RC based on desired tick_time_ms
	temp = ( ((float) pba_clk) * ((float) tick_ms) ) / 32000.0;
80004eae:	ee fc ff e4 	ld.w	r12,r7[-28]
80004eb2:	f0 1f 00 1b 	mcall	80004f1c <erm_tc_init+0xb4>
80004eb6:	18 96       	mov	r6,r12
80004eb8:	ee fc ff e8 	ld.w	r12,r7[-24]
80004ebc:	f0 1f 00 18 	mcall	80004f1c <erm_tc_init+0xb4>
80004ec0:	18 98       	mov	r8,r12
80004ec2:	10 9b       	mov	r11,r8
80004ec4:	0c 9c       	mov	r12,r6
80004ec6:	f0 1f 00 17 	mcall	80004f20 <erm_tc_init+0xb8>
80004eca:	18 98       	mov	r8,r12
80004ecc:	fc 1b 46 fa 	movh	r11,0x46fa
80004ed0:	10 9c       	mov	r12,r8
80004ed2:	f0 1f 00 15 	mcall	80004f24 <erm_tc_init+0xbc>
80004ed6:	18 98       	mov	r8,r12
80004ed8:	ef 48 ff f8 	st.w	r7[-8],r8
	RC = (uint16_t) temp;
80004edc:	ee fc ff f8 	ld.w	r12,r7[-8]
80004ee0:	f0 1f 00 12 	mcall	80004f28 <erm_tc_init+0xc0>
80004ee4:	18 98       	mov	r8,r12
80004ee6:	ef 58 ff fe 	st.h	r7[-2],r8
	
	// Set RC value
	tc_write_rc(tc, ERM_TC_CHANNEL_ID, RC);
80004eea:	ef 18 ff fe 	ld.uh	r8,r7[-2]
80004eee:	10 9a       	mov	r10,r8
80004ef0:	30 0b       	mov	r11,0
80004ef2:	ee fc ff ec 	ld.w	r12,r7[-20]
80004ef6:	f0 1f 00 0e 	mcall	80004f2c <erm_tc_init+0xc4>
	
	// Configure the timer interrupt
	tc_configure_interrupts(tc, ERM_TC_CHANNEL_ID, &tc_interrupt);
80004efa:	48 ea       	lddpc	r10,80004f30 <erm_tc_init+0xc8>
80004efc:	30 0b       	mov	r11,0
80004efe:	ee fc ff ec 	ld.w	r12,r7[-20]
80004f02:	f0 1f 00 0d 	mcall	80004f34 <erm_tc_init+0xcc>
	
	// Start the timer/counter.
	tc_start(tc, ERM_TC_CHANNEL_ID);
80004f06:	30 0b       	mov	r11,0
80004f08:	ee fc ff ec 	ld.w	r12,r7[-20]
80004f0c:	f0 1f 00 0b 	mcall	80004f38 <erm_tc_init+0xd0>
}
80004f10:	2f 9d       	sub	sp,-28
80004f12:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80004f16:	00 00       	add	r0,r0
80004f18:	80 00       	ld.sh	r0,r0[0x0]
80004f1a:	39 bc       	mov	r12,-101
80004f1c:	80 00       	ld.sh	r0,r0[0x0]
80004f1e:	5e ce       	retvs	-1
80004f20:	80 00       	ld.sh	r0,r0[0x0]
80004f22:	5d ec       	*unknown*
80004f24:	80 00       	ld.sh	r0,r0[0x0]
80004f26:	5c 8c       	casts.h	r12
80004f28:	80 00       	ld.sh	r0,r0[0x0]
80004f2a:	5f 3e       	srlo	lr
80004f2c:	80 00       	ld.sh	r0,r0[0x0]
80004f2e:	3b 84       	mov	r4,-72
80004f30:	80 00       	ld.sh	r0,r0[0x0]
80004f32:	b8 58       	st.h	r12[0xa],r8
80004f34:	80 00       	ld.sh	r0,r0[0x0]
80004f36:	37 d4       	mov	r4,125
80004f38:	80 00       	ld.sh	r0,r0[0x0]
80004f3a:	3b 10       	mov	r0,-79

80004f3c <adc_pot_init>:

#ifndef ADC_POT_H_
#define ADC_POT_H_

static void adc_pot_init(void)
{
80004f3c:	eb cd 40 80 	pushm	r7,lr
80004f40:	1a 97       	mov	r7,sp
80004f42:	20 2d       	sub	sp,8
	// Define Potentiometer GIPO options
	const gpio_map_t ADC_GPIO_MAP ={
		{ADC_POTENTIOMETER_PIN, ADC_POTENTIOMETER_FUNCTION}
	};
80004f44:	31 68       	mov	r8,22
80004f46:	ef 48 ff f8 	st.w	r7[-8],r8
80004f4a:	30 08       	mov	r8,0
80004f4c:	ef 48 ff fc 	st.w	r7[-4],r8
	
	// Assign I/O
	gpio_enable_module(ADC_GPIO_MAP, 
80004f50:	ee c8 00 08 	sub	r8,r7,8
80004f54:	30 1b       	mov	r11,1
80004f56:	10 9c       	mov	r12,r8
80004f58:	f0 1f 00 0b 	mcall	80004f84 <adc_pot_init+0x48>
	
	// Configure the ADC peripheral module.
	// Lower the ADC clock to match the ADC characteristics (because we
	// configured the CPU clock to 12MHz, and the ADC clock characteristics are
	// usually lower; cf. the ADC Characteristic section in the datasheet).
	AVR32_ADC.mr |= 0x1 << AVR32_ADC_MR_PRESCAL_OFFSET;
80004f5c:	fe 78 3c 00 	mov	r8,-50176
80004f60:	fe 79 3c 00 	mov	r9,-50176
80004f64:	72 19       	ld.w	r9,r9[0x4]
80004f66:	a9 a9       	sbr	r9,0x8
80004f68:	91 19       	st.w	r8[0x4],r9
	adc_configure(&AVR32_ADC);
80004f6a:	fe 7c 3c 00 	mov	r12,-50176
80004f6e:	f0 1f 00 07 	mcall	80004f88 <adc_pot_init+0x4c>
	
	// Enable ADC
	adc_enable(&AVR32_ADC, ADC_POTENTIOMETER_CHANNEL);
80004f72:	30 1b       	mov	r11,1
80004f74:	fe 7c 3c 00 	mov	r12,-50176
80004f78:	f0 1f 00 05 	mcall	80004f8c <adc_pot_init+0x50>
}
80004f7c:	2f ed       	sub	sp,-8
80004f7e:	e3 cd 80 80 	ldm	sp++,r7,pc
80004f82:	00 00       	add	r0,r0
80004f84:	80 00       	ld.sh	r0,r0[0x0]
80004f86:	44 c0       	lddsp	r0,sp[0x130]
80004f88:	80 00       	ld.sh	r0,r0[0x0]
80004f8a:	30 90       	mov	r0,9
80004f8c:	80 00       	ld.sh	r0,r0[0x0]
80004f8e:	30 e0       	mov	r0,14

80004f90 <erm_pwm_init>:
pwm_opt_t			erm_pwm_opt;
avr32_pwm_channel_t erm_pwm_channel;


static void erm_pwm_init(uint32_t duty_cycle, uint32_t freq, uint32_t pba_clk)
{
80004f90:	eb cd 40 cc 	pushm	r2-r3,r6-r7,lr
80004f94:	1a 97       	mov	r7,sp
80004f96:	20 6d       	sub	sp,24
80004f98:	ef 4c ff f0 	st.w	r7[-16],r12
80004f9c:	ef 4b ff ec 	st.w	r7[-20],r11
80004fa0:	ef 4a ff e8 	st.w	r7[-24],r10
	float		temp;
	uint32_t	period;
	uint32_t	cycle;
	
	temp	= ((float) pba_clk) / ((float)freq);
80004fa4:	ee fc ff e8 	ld.w	r12,r7[-24]
80004fa8:	f0 1f 00 4f 	mcall	800050e4 <erm_pwm_init+0x154>
80004fac:	18 96       	mov	r6,r12
80004fae:	ee fc ff ec 	ld.w	r12,r7[-20]
80004fb2:	f0 1f 00 4d 	mcall	800050e4 <erm_pwm_init+0x154>
80004fb6:	18 98       	mov	r8,r12
80004fb8:	10 9b       	mov	r11,r8
80004fba:	0c 9c       	mov	r12,r6
80004fbc:	f0 1f 00 4b 	mcall	800050e8 <erm_pwm_init+0x158>
80004fc0:	18 98       	mov	r8,r12
80004fc2:	ef 48 ff f4 	st.w	r7[-12],r8
	period	= (uint32_t) temp;
80004fc6:	ee fc ff f4 	ld.w	r12,r7[-12]
80004fca:	f0 1f 00 49 	mcall	800050ec <erm_pwm_init+0x15c>
80004fce:	18 98       	mov	r8,r12
80004fd0:	ef 48 ff f8 	st.w	r7[-8],r8
	
	switch (duty_cycle)
80004fd4:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004fd8:	58 08       	cp.w	r8,0
80004fda:	c0 50       	breq	80004fe4 <erm_pwm_init+0x54>
80004fdc:	e0 48 00 64 	cp.w	r8,100
80004fe0:	c0 80       	breq	80004ff0 <erm_pwm_init+0x60>
80004fe2:	c0 b8       	rjmp	80004ff8 <erm_pwm_init+0x68>
	{
		case 0:
		cycle	= period - 1;
80004fe4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004fe8:	20 18       	sub	r8,1
80004fea:	ef 48 ff fc 	st.w	r7[-4],r8
		break;
80004fee:	c3 b8       	rjmp	80005064 <erm_pwm_init+0xd4>
		
		case 100:
		cycle	= 1;
80004ff0:	30 18       	mov	r8,1
80004ff2:	ef 48 ff fc 	st.w	r7[-4],r8
		break;
80004ff6:	c3 78       	rjmp	80005064 <erm_pwm_init+0xd4>
		
		default:
		temp	= ((float) period) / (100.0 / (100.0 - ((float)duty_cycle)));
80004ff8:	ee fc ff f8 	ld.w	r12,r7[-8]
80004ffc:	f0 1f 00 3a 	mcall	800050e4 <erm_pwm_init+0x154>
80005000:	18 98       	mov	r8,r12
80005002:	10 9c       	mov	r12,r8
80005004:	f0 1f 00 3b 	mcall	800050f0 <erm_pwm_init+0x160>
80005008:	14 92       	mov	r2,r10
8000500a:	16 93       	mov	r3,r11
8000500c:	ee fc ff f0 	ld.w	r12,r7[-16]
80005010:	f0 1f 00 35 	mcall	800050e4 <erm_pwm_init+0x154>
80005014:	18 98       	mov	r8,r12
80005016:	10 9c       	mov	r12,r8
80005018:	f0 1f 00 36 	mcall	800050f0 <erm_pwm_init+0x160>
8000501c:	14 98       	mov	r8,r10
8000501e:	16 99       	mov	r9,r11
80005020:	30 0a       	mov	r10,0
80005022:	fc 1b 40 59 	movh	r11,0x4059
80005026:	f0 1f 00 34 	mcall	800050f4 <erm_pwm_init+0x164>
8000502a:	14 98       	mov	r8,r10
8000502c:	16 99       	mov	r9,r11
8000502e:	30 0a       	mov	r10,0
80005030:	fc 1b 40 59 	movh	r11,0x4059
80005034:	f0 1f 00 31 	mcall	800050f8 <erm_pwm_init+0x168>
80005038:	14 98       	mov	r8,r10
8000503a:	16 99       	mov	r9,r11
8000503c:	04 9a       	mov	r10,r2
8000503e:	06 9b       	mov	r11,r3
80005040:	f0 1f 00 2e 	mcall	800050f8 <erm_pwm_init+0x168>
80005044:	14 98       	mov	r8,r10
80005046:	16 99       	mov	r9,r11
80005048:	10 9a       	mov	r10,r8
8000504a:	12 9b       	mov	r11,r9
8000504c:	f0 1f 00 2c 	mcall	800050fc <erm_pwm_init+0x16c>
80005050:	18 98       	mov	r8,r12
80005052:	ef 48 ff f4 	st.w	r7[-12],r8
		cycle	= (uint32_t) temp;
80005056:	ee fc ff f4 	ld.w	r12,r7[-12]
8000505a:	f0 1f 00 25 	mcall	800050ec <erm_pwm_init+0x15c>
8000505e:	18 98       	mov	r8,r12
80005060:	ef 48 ff fc 	st.w	r7[-4],r8
		break;
	}
	
	// Define the PWM controller options
	erm_pwm_opt.diva = AVR32_PWM_DIVA_CLK_OFF;
80005064:	4a 78       	lddpc	r8,80005100 <erm_pwm_init+0x170>
80005066:	30 09       	mov	r9,0
80005068:	91 19       	st.w	r8[0x4],r9
	erm_pwm_opt.divb = AVR32_PWM_DIVB_CLK_OFF;
8000506a:	4a 68       	lddpc	r8,80005100 <erm_pwm_init+0x170>
8000506c:	30 09       	mov	r9,0
8000506e:	91 09       	st.w	r8[0x0],r9
	erm_pwm_opt.prea = AVR32_PWM_PREA_MCK;
80005070:	4a 48       	lddpc	r8,80005100 <erm_pwm_init+0x170>
80005072:	30 09       	mov	r9,0
80005074:	91 39       	st.w	r8[0xc],r9
	erm_pwm_opt.preb = AVR32_PWM_PREB_MCK;
80005076:	4a 38       	lddpc	r8,80005100 <erm_pwm_init+0x170>
80005078:	30 09       	mov	r9,0
8000507a:	91 29       	st.w	r8[0x8],r9
	
	// Define the PWM channel options
	erm_pwm_channel.cdty		= cycle;						// Channel duty cycle
8000507c:	4a 28       	lddpc	r8,80005104 <erm_pwm_init+0x174>
8000507e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80005082:	91 19       	st.w	r8[0x4],r9
	erm_pwm_channel.cprd		= period;						// Channel period
80005084:	4a 08       	lddpc	r8,80005104 <erm_pwm_init+0x174>
80005086:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000508a:	91 29       	st.w	r8[0x8],r9
	erm_pwm_channel.cupd		= 0;							// Channel update
8000508c:	49 e8       	lddpc	r8,80005104 <erm_pwm_init+0x174>
8000508e:	30 09       	mov	r9,0
80005090:	91 49       	st.w	r8[0x10],r9
	erm_pwm_channel.CMR.calg	= PWM_MODE_LEFT_ALIGNED;		// CMR mode
80005092:	49 d9       	lddpc	r9,80005104 <erm_pwm_init+0x174>
80005094:	72 08       	ld.w	r8,r9[0x0]
80005096:	30 0a       	mov	r10,0
80005098:	f1 da d1 01 	bfins	r8,r10,0x8,0x1
8000509c:	93 08       	st.w	r9[0x0],r8
	erm_pwm_channel.CMR.cpol	= PWM_POLARITY_LOW;				// CMR polarity
8000509e:	49 a9       	lddpc	r9,80005104 <erm_pwm_init+0x174>
800050a0:	72 08       	ld.w	r8,r9[0x0]
800050a2:	30 0a       	mov	r10,0
800050a4:	f1 da d1 21 	bfins	r8,r10,0x9,0x1
800050a8:	93 08       	st.w	r9[0x0],r8
	erm_pwm_channel.CMR.cpd		= PWM_UPDATE_DUTY;				// CMR update
800050aa:	49 79       	lddpc	r9,80005104 <erm_pwm_init+0x174>
800050ac:	72 08       	ld.w	r8,r9[0x0]
800050ae:	30 0a       	mov	r10,0
800050b0:	f1 da d1 41 	bfins	r8,r10,0xa,0x1
800050b4:	93 08       	st.w	r9[0x0],r8
	erm_pwm_channel.CMR.cpre	= AVR32_PWM_CPRE_MCK;			// CMR prescaler
800050b6:	49 49       	lddpc	r9,80005104 <erm_pwm_init+0x174>
800050b8:	72 08       	ld.w	r8,r9[0x0]
800050ba:	30 0a       	mov	r10,0
800050bc:	f1 da d0 04 	bfins	r8,r10,0x0,0x4
800050c0:	93 08       	st.w	r9[0x0],r8
	
	// Enable GPIO with output on pin PB22
	gpio_enable_module_pin(ERM_PWM_PIN, ERM_PWM_FUNCTION);
800050c2:	30 0b       	mov	r11,0
800050c4:	33 6c       	mov	r12,54
800050c6:	f0 1f 00 11 	mcall	80005108 <erm_pwm_init+0x178>

	// Initialize the PWM module
	pwm_init(&erm_pwm_opt);
800050ca:	48 ec       	lddpc	r12,80005100 <erm_pwm_init+0x170>
800050cc:	f0 1f 00 10 	mcall	8000510c <erm_pwm_init+0x17c>

	// Configure the PWM channel
	pwm_channel_init(ERM_PWM_CHANNEL_ID, &erm_pwm_channel);
800050d0:	48 db       	lddpc	r11,80005104 <erm_pwm_init+0x174>
800050d2:	30 3c       	mov	r12,3
800050d4:	f0 1f 00 0f 	mcall	80005110 <erm_pwm_init+0x180>

	// Start the PWM
	pwm_start_channels(1 << ERM_PWM_CHANNEL_ID);
800050d8:	30 8c       	mov	r12,8
800050da:	f0 1f 00 0f 	mcall	80005114 <erm_pwm_init+0x184>
}
800050de:	2f ad       	sub	sp,-24
800050e0:	e3 cd 80 cc 	ldm	sp++,r2-r3,r6-r7,pc
800050e4:	80 00       	ld.sh	r0,r0[0x0]
800050e6:	5e ce       	retvs	-1
800050e8:	80 00       	ld.sh	r0,r0[0x0]
800050ea:	5c 8c       	casts.h	r12
800050ec:	80 00       	ld.sh	r0,r0[0x0]
800050ee:	5f 3e       	srlo	lr
800050f0:	80 00       	ld.sh	r0,r0[0x0]
800050f2:	5f 58       	srlt	r8
800050f4:	80 00       	ld.sh	r0,r0[0x0]
800050f6:	56 c8       	stdsp	sp[0x1b0],r8
800050f8:	80 00       	ld.sh	r0,r0[0x0]
800050fa:	59 74       	cp.w	r4,23
800050fc:	80 00       	ld.sh	r0,r0[0x0]
800050fe:	5f b8       	srhi	r8
80005100:	00 00       	add	r0,r0
80005102:	06 94       	mov	r4,r3
80005104:	00 00       	add	r0,r0
80005106:	06 74       	tst	r4,r3
80005108:	80 00       	ld.sh	r0,r0[0x0]
8000510a:	45 30       	lddsp	r0,sp[0x14c]
8000510c:	80 00       	ld.sh	r0,r0[0x0]
8000510e:	36 68       	mov	r8,102
80005110:	80 00       	ld.sh	r0,r0[0x0]
80005112:	36 fc       	mov	r12,111
80005114:	80 00       	ld.sh	r0,r0[0x0]
80005116:	37 84       	mov	r4,120

80005118 <erm_pwm_update_config>:

static void erm_pwm_update_config(uint32_t duty_cycle, uint32_t freq, uint32_t pba_clk, uint32_t duty_or_freq)
{
80005118:	eb cd 40 cc 	pushm	r2-r3,r6-r7,lr
8000511c:	1a 97       	mov	r7,sp
8000511e:	20 7d       	sub	sp,28
80005120:	ef 4c ff f0 	st.w	r7[-16],r12
80005124:	ef 4b ff ec 	st.w	r7[-20],r11
80005128:	ef 4a ff e8 	st.w	r7[-24],r10
8000512c:	ef 49 ff e4 	st.w	r7[-28],r9
	float		temp;
	uint32_t	period;
	uint32_t	cycle;
	
	temp	= ((float) pba_clk) / ((float)freq);
80005130:	ee fc ff e8 	ld.w	r12,r7[-24]
80005134:	f0 1f 00 35 	mcall	80005208 <erm_pwm_update_config+0xf0>
80005138:	18 96       	mov	r6,r12
8000513a:	ee fc ff ec 	ld.w	r12,r7[-20]
8000513e:	f0 1f 00 33 	mcall	80005208 <erm_pwm_update_config+0xf0>
80005142:	18 98       	mov	r8,r12
80005144:	10 9b       	mov	r11,r8
80005146:	0c 9c       	mov	r12,r6
80005148:	f0 1f 00 31 	mcall	8000520c <erm_pwm_update_config+0xf4>
8000514c:	18 98       	mov	r8,r12
8000514e:	ef 48 ff f4 	st.w	r7[-12],r8
	period	= (uint32_t) temp;
80005152:	ee fc ff f4 	ld.w	r12,r7[-12]
80005156:	f0 1f 00 2f 	mcall	80005210 <erm_pwm_update_config+0xf8>
8000515a:	18 98       	mov	r8,r12
8000515c:	ef 48 ff f8 	st.w	r7[-8],r8
	
	switch (duty_cycle)
80005160:	ee f8 ff f0 	ld.w	r8,r7[-16]
80005164:	58 08       	cp.w	r8,0
80005166:	c0 50       	breq	80005170 <erm_pwm_update_config+0x58>
80005168:	e0 48 00 64 	cp.w	r8,100
8000516c:	c0 80       	breq	8000517c <erm_pwm_update_config+0x64>
8000516e:	c0 b8       	rjmp	80005184 <erm_pwm_update_config+0x6c>
	{
		case 0:
		cycle	= period - 1;
80005170:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005174:	20 18       	sub	r8,1
80005176:	ef 48 ff fc 	st.w	r7[-4],r8
		break;
8000517a:	c3 b8       	rjmp	800051f0 <erm_pwm_update_config+0xd8>
		
		case 100:
		cycle	= 1;
8000517c:	30 18       	mov	r8,1
8000517e:	ef 48 ff fc 	st.w	r7[-4],r8
		break;
80005182:	c3 78       	rjmp	800051f0 <erm_pwm_update_config+0xd8>
		
		default:
		temp	= ((float) period) / (100.0 / (100.0 - ((float)duty_cycle)));
80005184:	ee fc ff f8 	ld.w	r12,r7[-8]
80005188:	f0 1f 00 20 	mcall	80005208 <erm_pwm_update_config+0xf0>
8000518c:	18 98       	mov	r8,r12
8000518e:	10 9c       	mov	r12,r8
80005190:	f0 1f 00 21 	mcall	80005214 <erm_pwm_update_config+0xfc>
80005194:	14 92       	mov	r2,r10
80005196:	16 93       	mov	r3,r11
80005198:	ee fc ff f0 	ld.w	r12,r7[-16]
8000519c:	f0 1f 00 1b 	mcall	80005208 <erm_pwm_update_config+0xf0>
800051a0:	18 98       	mov	r8,r12
800051a2:	10 9c       	mov	r12,r8
800051a4:	f0 1f 00 1c 	mcall	80005214 <erm_pwm_update_config+0xfc>
800051a8:	14 98       	mov	r8,r10
800051aa:	16 99       	mov	r9,r11
800051ac:	30 0a       	mov	r10,0
800051ae:	fc 1b 40 59 	movh	r11,0x4059
800051b2:	f0 1f 00 1a 	mcall	80005218 <erm_pwm_update_config+0x100>
800051b6:	14 98       	mov	r8,r10
800051b8:	16 99       	mov	r9,r11
800051ba:	30 0a       	mov	r10,0
800051bc:	fc 1b 40 59 	movh	r11,0x4059
800051c0:	f0 1f 00 17 	mcall	8000521c <erm_pwm_update_config+0x104>
800051c4:	14 98       	mov	r8,r10
800051c6:	16 99       	mov	r9,r11
800051c8:	04 9a       	mov	r10,r2
800051ca:	06 9b       	mov	r11,r3
800051cc:	f0 1f 00 14 	mcall	8000521c <erm_pwm_update_config+0x104>
800051d0:	14 98       	mov	r8,r10
800051d2:	16 99       	mov	r9,r11
800051d4:	10 9a       	mov	r10,r8
800051d6:	12 9b       	mov	r11,r9
800051d8:	f0 1f 00 12 	mcall	80005220 <erm_pwm_update_config+0x108>
800051dc:	18 98       	mov	r8,r12
800051de:	ef 48 ff f4 	st.w	r7[-12],r8
		cycle	= (uint32_t) temp;
800051e2:	ee fc ff f4 	ld.w	r12,r7[-12]
800051e6:	f0 1f 00 0b 	mcall	80005210 <erm_pwm_update_config+0xf8>
800051ea:	18 98       	mov	r8,r12
800051ec:	ef 48 ff fc 	st.w	r7[-4],r8
		break;
	}
	
	erm_pwm_channel.cprd	= period;
800051f0:	48 d8       	lddpc	r8,80005224 <erm_pwm_update_config+0x10c>
800051f2:	ee f9 ff f8 	ld.w	r9,r7[-8]
800051f6:	91 29       	st.w	r8[0x8],r9
	erm_pwm_channel.cdty	= cycle;
800051f8:	48 b8       	lddpc	r8,80005224 <erm_pwm_update_config+0x10c>
800051fa:	ee f9 ff fc 	ld.w	r9,r7[-4]
800051fe:	91 19       	st.w	r8[0x4],r9
		erm_pwm_channel.CMR.cpd		= PWM_UPDATE_DUTY;			// Define CPUD to be loaded into CDTYx
	}
	*/
	
	
}
80005200:	2f 9d       	sub	sp,-28
80005202:	e3 cd 80 cc 	ldm	sp++,r2-r3,r6-r7,pc
80005206:	00 00       	add	r0,r0
80005208:	80 00       	ld.sh	r0,r0[0x0]
8000520a:	5e ce       	retvs	-1
8000520c:	80 00       	ld.sh	r0,r0[0x0]
8000520e:	5c 8c       	casts.h	r12
80005210:	80 00       	ld.sh	r0,r0[0x0]
80005212:	5f 3e       	srlo	lr
80005214:	80 00       	ld.sh	r0,r0[0x0]
80005216:	5f 58       	srlt	r8
80005218:	80 00       	ld.sh	r0,r0[0x0]
8000521a:	56 c8       	stdsp	sp[0x1b0],r8
8000521c:	80 00       	ld.sh	r0,r0[0x0]
8000521e:	59 74       	cp.w	r4,23
80005220:	80 00       	ld.sh	r0,r0[0x0]
80005222:	5f b8       	srhi	r8
80005224:	00 00       	add	r0,r0
80005226:	06 74       	tst	r4,r3

80005228 <erm_pwm_update_channel>:

static void erm_pwm_update_channel(void)
{
80005228:	eb cd 40 80 	pushm	r7,lr
8000522c:	1a 97       	mov	r7,sp
	// Configure the PWM channel
	pwm_channel_init(ERM_PWM_CHANNEL_ID, &erm_pwm_channel);
8000522e:	48 4b       	lddpc	r11,8000523c <erm_pwm_update_channel+0x14>
80005230:	30 3c       	mov	r12,3
80005232:	f0 1f 00 04 	mcall	80005240 <erm_pwm_update_channel+0x18>
	// As mentioned, I have left it in because I want it for future reference.
	
	pwm_async_update_channel(ERM_PWM_CHANNEL_ID, &erm_pwm_channel);
	
	*/
}
80005236:	e3 cd 80 80 	ldm	sp++,r7,pc
8000523a:	00 00       	add	r0,r0
8000523c:	00 00       	add	r0,r0
8000523e:	06 74       	tst	r4,r3
80005240:	80 00       	ld.sh	r0,r0[0x0]
80005242:	36 fc       	mov	r12,111

80005244 <erm_tc_handler>:
__attribute__((__interrupt__))
#elif __ICCAVR32__
__interrupt
#endif
static void erm_tc_handler(void)
{
80005244:	eb cd 40 80 	pushm	r7,lr
80005248:	1a 97       	mov	r7,sp
	gpio_toggle_pin(LED0_GPIO);
8000524a:	33 bc       	mov	r12,59
8000524c:	f0 1f 00 07 	mcall	80005268 <erm_tc_handler+0x24>
	
	// Set interrupt identifier
	interrupt_identifier = INT_TC;		
80005250:	48 78       	lddpc	r8,8000526c <erm_tc_handler+0x28>
80005252:	30 19       	mov	r9,1
80005254:	91 09       	st.w	r8[0x0],r9
	
	// Clear TC interrupt flag
	tc_read_sr((&AVR32_TC), 0);
80005256:	30 0b       	mov	r11,0
80005258:	fe 7c 38 00 	mov	r12,-51200
8000525c:	f0 1f 00 05 	mcall	80005270 <erm_tc_handler+0x2c>
}
80005260:	e3 cd 40 80 	ldm	sp++,r7,lr
80005264:	d6 03       	rete
80005266:	00 00       	add	r0,r0
80005268:	80 00       	ld.sh	r0,r0[0x0]
8000526a:	49 0e       	lddpc	lr,800052a8 <push_button_handler+0x34>
8000526c:	00 00       	add	r0,r0
8000526e:	06 38       	cp.w	r8,r3
80005270:	80 00       	ld.sh	r0,r0[0x0]
80005272:	3b 4a       	mov	r10,-76

80005274 <push_button_handler>:
__attribute__((__interrupt__))
#elif __ICCAVR32__
__interrupt
#endif
static void push_button_handler(void)
{
80005274:	eb cd 40 80 	pushm	r7,lr
80005278:	1a 97       	mov	r7,sp
	if (gpio_get_pin_interrupt_flag(GPIO_PUSH_BUTTON_0))
8000527a:	35 8c       	mov	r12,88
8000527c:	f0 1f 00 10 	mcall	800052bc <push_button_handler+0x48>
80005280:	18 98       	mov	r8,r12
80005282:	58 08       	cp.w	r8,0
80005284:	c1 80       	breq	800052b4 <push_button_handler+0x40>
	{
		gpio_toggle_pin(LED1_GPIO);
80005286:	33 cc       	mov	r12,60
80005288:	f0 1f 00 0e 	mcall	800052c0 <push_button_handler+0x4c>
		
		// Switch change_identifier to the next value
		switch (change_identifier)
8000528c:	48 e8       	lddpc	r8,800052c4 <push_button_handler+0x50>
8000528e:	70 08       	ld.w	r8,r8[0x0]
80005290:	58 18       	cp.w	r8,1
80005292:	c0 40       	breq	8000529a <push_button_handler+0x26>
80005294:	58 28       	cp.w	r8,2
80005296:	c0 60       	breq	800052a2 <push_button_handler+0x2e>
80005298:	c0 88       	rjmp	800052a8 <push_button_handler+0x34>
		{
			case CHANGE_PWM_FREQUENCY:
			change_identifier = CHANGE_PWM_DUTY_CYCLE;
8000529a:	48 b8       	lddpc	r8,800052c4 <push_button_handler+0x50>
8000529c:	30 29       	mov	r9,2
8000529e:	91 09       	st.w	r8[0x0],r9
			break;
800052a0:	c0 48       	rjmp	800052a8 <push_button_handler+0x34>
			
			case CHANGE_PWM_DUTY_CYCLE:
			change_identifier = CHANGE_PWM_FREQUENCY;
800052a2:	48 98       	lddpc	r8,800052c4 <push_button_handler+0x50>
800052a4:	30 19       	mov	r9,1
800052a6:	91 09       	st.w	r8[0x0],r9
			break;
		}
		
		// Set interrupt identifier
		interrupt_identifier = INT_PB0;
800052a8:	48 88       	lddpc	r8,800052c8 <push_button_handler+0x54>
800052aa:	30 29       	mov	r9,2
800052ac:	91 09       	st.w	r8[0x0],r9
		
		// Clear interrupt flag to allow new interrupts
		gpio_clear_pin_interrupt_flag(GPIO_PUSH_BUTTON_0);
800052ae:	35 8c       	mov	r12,88
800052b0:	f0 1f 00 07 	mcall	800052cc <push_button_handler+0x58>
	}
}
800052b4:	e3 cd 40 80 	ldm	sp++,r7,lr
800052b8:	d6 03       	rete
800052ba:	00 00       	add	r0,r0
800052bc:	80 00       	ld.sh	r0,r0[0x0]
800052be:	4a 90       	lddpc	r0,80005360 <main+0x90>
800052c0:	80 00       	ld.sh	r0,r0[0x0]
800052c2:	49 0e       	lddpc	lr,80005300 <main+0x30>
800052c4:	00 00       	add	r0,r0
800052c6:	00 20       	rsub	r0,r0
800052c8:	00 00       	add	r0,r0
800052ca:	06 38       	cp.w	r8,r3
800052cc:	80 00       	ld.sh	r0,r0[0x0]
800052ce:	4a ce       	lddpc	lr,8000537c <main+0xac>

800052d0 <main>:


int main (void)
{
800052d0:	eb cd 40 80 	pushm	r7,lr
800052d4:	1a 97       	mov	r7,sp
800052d6:	20 cd       	sub	sp,48
	// Declare variables
	char temp_string[9];
	uint32_t i, j;
	uint32_t pot_value;
	uint32_t pwm_frequency	= 100;	// Initial value 100 Hz
800052d8:	36 48       	mov	r8,100
800052da:	ef 48 ff f8 	st.w	r7[-8],r8
	uint32_t pwm_duty_cycle = 50;	// Initial value 50 % duty cycle
800052de:	33 28       	mov	r8,50
800052e0:	ef 48 ff fc 	st.w	r7[-4],r8
	pm_freq_param_t System_Clock = {
		.cpu_f = CPU_HZ,
		.pba_f = PBA_HZ,
		.osc0_f = FOSC0,
		.osc0_startup = OSC0_STARTUP
	};
800052e4:	fe f8 03 50 	ld.w	r8,pc[848]
800052e8:	ee ca 00 30 	sub	r10,r7,48
800052ec:	10 9b       	mov	r11,r8
800052ee:	f6 e8 00 00 	ld.d	r8,r11[0]
800052f2:	f4 e9 00 00 	st.d	r10[0],r8
800052f6:	f6 e8 00 08 	ld.d	r8,r11[8]
800052fa:	f4 e9 00 08 	st.d	r10[8],r8
	pm_configure_clocks(&System_Clock);
800052fe:	ee c8 00 30 	sub	r8,r7,48
80005302:	10 9c       	mov	r12,r8
80005304:	f0 1f 00 cd 	mcall	80005638 <main+0x368>
		
	// Initialize the EVK1100 and its PIN config
	board_init();
80005308:	f0 1f 00 cd 	mcall	8000563c <main+0x36c>
	
	// Enable LED1 and LED2 as GPIO output
	gpio_enable_gpio_pin(LED0_GPIO);
8000530c:	33 bc       	mov	r12,59
8000530e:	f0 1f 00 cd 	mcall	80005640 <main+0x370>
	gpio_enable_gpio_pin(LED1_GPIO);
80005312:	33 cc       	mov	r12,60
80005314:	f0 1f 00 cb 	mcall	80005640 <main+0x370>
	gpio_configure_pin(LED0_GPIO, GPIO_DIR_OUTPUT);
80005318:	30 1b       	mov	r11,1
8000531a:	33 bc       	mov	r12,59
8000531c:	f0 1f 00 ca 	mcall	80005644 <main+0x374>
	gpio_configure_pin(LED1_GPIO, GPIO_DIR_OUTPUT);
80005320:	30 1b       	mov	r11,1
80005322:	33 cc       	mov	r12,60
80005324:	f0 1f 00 c8 	mcall	80005644 <main+0x374>
	
	// Initialize the LCD display
	lcd_spi_pin_init();
80005328:	f0 1f 00 c8 	mcall	80005648 <main+0x378>
	lcd_spi_init(PBA_HZ);
8000532c:	e0 6c 1b 00 	mov	r12,6912
80005330:	ea 1c 00 b7 	orh	r12,0xb7
80005334:	f0 1f 00 c6 	mcall	8000564c <main+0x37c>
	
	// Write start string to LCD display
	dip204_set_cursor_position(2,2);
80005338:	30 2b       	mov	r11,2
8000533a:	30 2c       	mov	r12,2
8000533c:	f0 1f 00 c5 	mcall	80005650 <main+0x380>
	dip204_write_string("FREQ: ");
80005340:	fe fc 03 14 	ld.w	r12,pc[788]
80005344:	f0 1f 00 c5 	mcall	80005658 <main+0x388>
	sprintf(temp_string, "%lu",pwm_frequency);
80005348:	ee c8 00 20 	sub	r8,r7,32
8000534c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005350:	1a d9       	st.w	--sp,r9
80005352:	fe fb 03 0a 	ld.w	r11,pc[778]
80005356:	10 9c       	mov	r12,r8
80005358:	f0 1f 00 c2 	mcall	80005660 <main+0x390>
8000535c:	2f fd       	sub	sp,-4
	dip204_write_string(temp_string);
8000535e:	ee c8 00 20 	sub	r8,r7,32
80005362:	10 9c       	mov	r12,r8
80005364:	f0 1f 00 bd 	mcall	80005658 <main+0x388>
	dip204_set_cursor_position(15,2);
80005368:	30 2b       	mov	r11,2
8000536a:	30 fc       	mov	r12,15
8000536c:	f0 1f 00 b9 	mcall	80005650 <main+0x380>
	dip204_write_string("Hz");
80005370:	fe fc 02 f4 	ld.w	r12,pc[756]
80005374:	f0 1f 00 b9 	mcall	80005658 <main+0x388>
	dip204_set_cursor_position(2,3);
80005378:	30 3b       	mov	r11,3
8000537a:	30 2c       	mov	r12,2
8000537c:	f0 1f 00 b5 	mcall	80005650 <main+0x380>
	dip204_write_string("DUTY: ");
80005380:	fe fc 02 e8 	ld.w	r12,pc[744]
80005384:	f0 1f 00 b5 	mcall	80005658 <main+0x388>
	sprintf(temp_string, "%lu",pwm_duty_cycle);
80005388:	ee c8 00 20 	sub	r8,r7,32
8000538c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80005390:	1a d9       	st.w	--sp,r9
80005392:	fe fb 02 ca 	ld.w	r11,pc[714]
80005396:	10 9c       	mov	r12,r8
80005398:	f0 1f 00 b2 	mcall	80005660 <main+0x390>
8000539c:	2f fd       	sub	sp,-4
	dip204_write_string(temp_string);
8000539e:	ee c8 00 20 	sub	r8,r7,32
800053a2:	10 9c       	mov	r12,r8
800053a4:	f0 1f 00 ad 	mcall	80005658 <main+0x388>
	dip204_set_cursor_position(15,3);
800053a8:	30 3b       	mov	r11,3
800053aa:	30 fc       	mov	r12,15
800053ac:	f0 1f 00 a9 	mcall	80005650 <main+0x380>
	dip204_write_string("%");
800053b0:	fe fc 02 bc 	ld.w	r12,pc[700]
800053b4:	f0 1f 00 a9 	mcall	80005658 <main+0x388>
	
	// Initialize the external SDRAM chip.
	sdramc_init(CPU_HZ);
800053b8:	e0 6c 6c 00 	mov	r12,27648
800053bc:	ea 1c 02 dc 	orh	r12,0x2dc
800053c0:	f0 1f 00 ac 	mcall	80005670 <main+0x3a0>
	
	// Add a lookup table for PWM frequency in SDRAM
	for (i = 0; i < POT_ADC_RESOLUTION; i++)
800053c4:	30 08       	mov	r8,0
800053c6:	ef 48 ff ec 	st.w	r7[-20],r8
800053ca:	c3 a8       	rjmp	8000543e <main+0x16e>
	{
		if (i == 0)
800053cc:	ee f8 ff ec 	ld.w	r8,r7[-20]
800053d0:	58 08       	cp.w	r8,0
800053d2:	c0 c1       	brne	800053ea <main+0x11a>
		{
			sdram[i] = 100;
800053d4:	fe f8 02 a0 	ld.w	r8,pc[672]
800053d8:	70 09       	ld.w	r9,r8[0x0]
800053da:	ee f8 ff ec 	ld.w	r8,r7[-20]
800053de:	a3 68       	lsl	r8,0x2
800053e0:	f2 08 00 08 	add	r8,r9,r8
800053e4:	36 49       	mov	r9,100
800053e6:	91 09       	st.w	r8[0x0],r9
800053e8:	c2 68       	rjmp	80005434 <main+0x164>
		}
		else if (i == POT_ADC_MAX_VALUE)
800053ea:	ee f8 ff ec 	ld.w	r8,r7[-20]
800053ee:	e0 48 03 ff 	cp.w	r8,1023
800053f2:	c0 d1       	brne	8000540c <main+0x13c>
		{
			sdram[i] = 100000;
800053f4:	fe f8 02 80 	ld.w	r8,pc[640]
800053f8:	70 09       	ld.w	r9,r8[0x0]
800053fa:	ee f8 ff ec 	ld.w	r8,r7[-20]
800053fe:	a3 68       	lsl	r8,0x2
80005400:	f2 08 00 08 	add	r8,r9,r8
80005404:	e0 79 86 a0 	mov	r9,100000
80005408:	91 09       	st.w	r8[0x0],r9
8000540a:	c1 58       	rjmp	80005434 <main+0x164>
		}
		else
		{
			sdram[i] = sdram[i-1] + 100;
8000540c:	fe f8 02 68 	ld.w	r8,pc[616]
80005410:	70 09       	ld.w	r9,r8[0x0]
80005412:	ee f8 ff ec 	ld.w	r8,r7[-20]
80005416:	a3 68       	lsl	r8,0x2
80005418:	f2 08 00 08 	add	r8,r9,r8
8000541c:	fe f9 02 58 	ld.w	r9,pc[600]
80005420:	72 0a       	ld.w	r10,r9[0x0]
80005422:	ee f9 ff ec 	ld.w	r9,r7[-20]
80005426:	20 19       	sub	r9,1
80005428:	a3 69       	lsl	r9,0x2
8000542a:	f4 09 00 09 	add	r9,r10,r9
8000542e:	72 09       	ld.w	r9,r9[0x0]
80005430:	29 c9       	sub	r9,-100
80005432:	91 09       	st.w	r8[0x0],r9
	
	// Initialize the external SDRAM chip.
	sdramc_init(CPU_HZ);
	
	// Add a lookup table for PWM frequency in SDRAM
	for (i = 0; i < POT_ADC_RESOLUTION; i++)
80005434:	ee f8 ff ec 	ld.w	r8,r7[-20]
80005438:	2f f8       	sub	r8,-1
8000543a:	ef 48 ff ec 	st.w	r7[-20],r8
8000543e:	ee f8 ff ec 	ld.w	r8,r7[-20]
80005442:	e0 48 03 ff 	cp.w	r8,1023
80005446:	fe 98 ff c3 	brls	800053cc <main+0xfc>
			sdram[i] = sdram[i-1] + 100;
		}	
	}
	
	// Add a lookup table for PWM duty cycle in SDRAM
	for (i = 0, j = 0; i < POT_ADC_RESOLUTION; i++)
8000544a:	30 08       	mov	r8,0
8000544c:	ef 48 ff ec 	st.w	r7[-20],r8
80005450:	30 08       	mov	r8,0
80005452:	ef 48 ff f0 	st.w	r7[-16],r8
80005456:	c2 e8       	rjmp	800054b2 <main+0x1e2>
	{
		sdram[i + POT_ADC_RESOLUTION]= j;
80005458:	fe f8 02 1c 	ld.w	r8,pc[540]
8000545c:	70 09       	ld.w	r9,r8[0x0]
8000545e:	ee f8 ff ec 	ld.w	r8,r7[-20]
80005462:	f0 c8 fc 00 	sub	r8,r8,-1024
80005466:	a3 68       	lsl	r8,0x2
80005468:	f2 08 00 08 	add	r8,r9,r8
8000546c:	ee f9 ff f0 	ld.w	r9,r7[-16]
80005470:	91 09       	st.w	r8[0x0],r9
		
		if ( (!(i % 10)) && (j<100))
80005472:	ee fa ff ec 	ld.w	r10,r7[-20]
80005476:	e0 68 cc cd 	mov	r8,52429
8000547a:	ea 18 cc cc 	orh	r8,0xcccc
8000547e:	f4 08 06 48 	mulu.d	r8,r10,r8
80005482:	a3 99       	lsr	r9,0x3
80005484:	12 98       	mov	r8,r9
80005486:	a3 68       	lsl	r8,0x2
80005488:	12 08       	add	r8,r9
8000548a:	a1 78       	lsl	r8,0x1
8000548c:	f4 08 01 09 	sub	r9,r10,r8
80005490:	c0 c1       	brne	800054a8 <main+0x1d8>
80005492:	ee f8 ff f0 	ld.w	r8,r7[-16]
80005496:	e0 48 00 63 	cp.w	r8,99
8000549a:	e0 8b 00 07 	brhi	800054a8 <main+0x1d8>
		{
			j++;
8000549e:	ee f8 ff f0 	ld.w	r8,r7[-16]
800054a2:	2f f8       	sub	r8,-1
800054a4:	ef 48 ff f0 	st.w	r7[-16],r8
			sdram[i] = sdram[i-1] + 100;
		}	
	}
	
	// Add a lookup table for PWM duty cycle in SDRAM
	for (i = 0, j = 0; i < POT_ADC_RESOLUTION; i++)
800054a8:	ee f8 ff ec 	ld.w	r8,r7[-20]
800054ac:	2f f8       	sub	r8,-1
800054ae:	ef 48 ff ec 	st.w	r7[-20],r8
800054b2:	ee f8 ff ec 	ld.w	r8,r7[-20]
800054b6:	e0 48 03 ff 	cp.w	r8,1023
800054ba:	fe 98 ff cf 	brls	80005458 <main+0x188>
			j++;
		}
	}
	
	// Disable all interrupts
	Disable_global_interrupt();
800054be:	d3 03       	ssrf	0x10
	
	// Initialize interrupt module
	INTC_init_interrupts();
800054c0:	f0 1f 00 6e 	mcall	80005678 <main+0x3a8>
	// Interrupt priority for this program should be:
	// INT3 (highest):	TC event (ADC measurement)
	// INT0 (lowest):	Push button event
	
	// Initialize TC interrupt with INT3 priority
	erm_tc_interrupt_init(&erm_tc_handler, AVR32_INTC_INT3);
800054c4:	30 3b       	mov	r11,3
800054c6:	4e ec       	lddpc	r12,8000567c <main+0x3ac>
800054c8:	f0 1f 00 6e 	mcall	80005680 <main+0x3b0>
	
	// Initialize Push Button 0 (PB0) interrupt with INT0 priority
	push_button_0_interrupt_init(&push_button_handler, AVR32_INTC_INT0);
800054cc:	30 0b       	mov	r11,0
800054ce:	4e ec       	lddpc	r12,80005684 <main+0x3b4>
800054d0:	f0 1f 00 6e 	mcall	80005688 <main+0x3b8>
	
	// Enable global interrupts
	Enable_global_interrupt();
800054d4:	d5 03       	csrf	0x10
	
	// Initialize and enable ADC for the Potentiometer
	adc_pot_init();
800054d6:	f0 1f 00 6e 	mcall	8000568c <main+0x3bc>
	
	// Initialize and start the PWM with initial values (output on pin PB22)
	erm_pwm_init(pwm_duty_cycle, pwm_frequency, PBA_HZ);
800054da:	e0 6a 1b 00 	mov	r10,6912
800054de:	ea 1a 00 b7 	orh	r10,0xb7
800054e2:	ee fb ff f8 	ld.w	r11,r7[-8]
800054e6:	ee fc ff fc 	ld.w	r12,r7[-4]
800054ea:	f0 1f 00 6a 	mcall	80005690 <main+0x3c0>
	
	// Initialize and start the TC with interrupts every SAMPLING_TIME
	erm_tc_init((&AVR32_TC), SAMPLING_TIME, PBA_HZ);
800054ee:	e0 6a 1b 00 	mov	r10,6912
800054f2:	ea 1a 00 b7 	orh	r10,0xb7
800054f6:	31 4b       	mov	r11,20
800054f8:	fe 7c 38 00 	mov	r12,-51200
800054fc:	f0 1f 00 66 	mcall	80005694 <main+0x3c4>
	
	// Start ADC
	adc_start(&AVR32_ADC);
80005500:	fe 7c 3c 00 	mov	r12,-50176
80005504:	f0 1f 00 65 	mcall	80005698 <main+0x3c8>
80005508:	c0 28       	rjmp	8000550c <main+0x23c>
			// Reset interrupt identifier
			interrupt_identifier = INT_NONE;
		}
		
		// Otherwise, do nothing
	}
8000550a:	d7 03       	nop
	adc_start(&AVR32_ADC);
	
	while (1)
	{
		// Check if an interrupt has occurred
		if (interrupt_identifier != INT_NONE)
8000550c:	4e 48       	lddpc	r8,8000569c <main+0x3cc>
8000550e:	70 08       	ld.w	r8,r8[0x0]
80005510:	58 08       	cp.w	r8,0
80005512:	cf c0       	breq	8000550a <main+0x23a>
		{ 
			if (interrupt_identifier == INT_TC)
80005514:	4e 28       	lddpc	r8,8000569c <main+0x3cc>
80005516:	70 08       	ld.w	r8,r8[0x0]
80005518:	58 18       	cp.w	r8,1
8000551a:	e0 81 00 88 	brne	8000562a <main+0x35a>
			{
				// Read Potentiometer value and convert it to duty cycle in %
				pot_value = adc_get_value(&AVR32_ADC, ADC_POTENTIOMETER_CHANNEL); 
8000551e:	30 1b       	mov	r11,1
80005520:	fe 7c 3c 00 	mov	r12,-50176
80005524:	f0 1f 00 5f 	mcall	800056a0 <main+0x3d0>
80005528:	18 98       	mov	r8,r12
8000552a:	ef 48 ff f4 	st.w	r7[-12],r8
				
				// Restart ADC
				adc_start(&AVR32_ADC);
8000552e:	fe 7c 3c 00 	mov	r12,-50176
80005532:	f0 1f 00 5a 	mcall	80005698 <main+0x3c8>
				
				switch (change_identifier)
80005536:	4d c8       	lddpc	r8,800056a4 <main+0x3d4>
80005538:	70 08       	ld.w	r8,r8[0x0]
8000553a:	58 18       	cp.w	r8,1
8000553c:	c0 40       	breq	80005544 <main+0x274>
8000553e:	58 28       	cp.w	r8,2
80005540:	c3 b0       	breq	800055b6 <main+0x2e6>
80005542:	c7 48       	rjmp	8000562a <main+0x35a>
				{
					case CHANGE_PWM_FREQUENCY:
					// Look up corresponding PWM frequency based on pot_value
					pwm_frequency	= sdram[pot_value];
80005544:	4c c8       	lddpc	r8,80005674 <main+0x3a4>
80005546:	70 09       	ld.w	r9,r8[0x0]
80005548:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000554c:	a3 68       	lsl	r8,0x2
8000554e:	f2 08 00 08 	add	r8,r9,r8
80005552:	70 08       	ld.w	r8,r8[0x0]
80005554:	ef 48 ff f8 	st.w	r7[-8],r8
					// Reset the PWM config and enable PWM update on the next period
					erm_pwm_update_config(pwm_duty_cycle, pwm_frequency, PBA_HZ, PWM_UPDATE_PERIOD);
80005558:	30 19       	mov	r9,1
8000555a:	e0 6a 1b 00 	mov	r10,6912
8000555e:	ea 1a 00 b7 	orh	r10,0xb7
80005562:	ee fb ff f8 	ld.w	r11,r7[-8]
80005566:	ee fc ff fc 	ld.w	r12,r7[-4]
8000556a:	f0 1f 00 50 	mcall	800056a8 <main+0x3d8>
					erm_pwm_update_channel();
8000556e:	f0 1f 00 50 	mcall	800056ac <main+0x3dc>
					// Update the LCD display
					dip204_set_cursor_position(8,2);
80005572:	30 2b       	mov	r11,2
80005574:	30 8c       	mov	r12,8
80005576:	f0 1f 00 37 	mcall	80005650 <main+0x380>
					sprintf(temp_string, "%lu   ", pwm_frequency);
8000557a:	ee c8 00 20 	sub	r8,r7,32
8000557e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005582:	1a d9       	st.w	--sp,r9
80005584:	4c bb       	lddpc	r11,800056b0 <main+0x3e0>
80005586:	10 9c       	mov	r12,r8
80005588:	f0 1f 00 36 	mcall	80005660 <main+0x390>
8000558c:	2f fd       	sub	sp,-4
					dip204_write_string(temp_string);
8000558e:	ee c8 00 20 	sub	r8,r7,32
80005592:	10 9c       	mov	r12,r8
80005594:	f0 1f 00 31 	mcall	80005658 <main+0x388>
					dip204_set_cursor_position(15,2);
80005598:	30 2b       	mov	r11,2
8000559a:	30 fc       	mov	r12,15
8000559c:	f0 1f 00 2d 	mcall	80005650 <main+0x380>
					dip204_write_string("Hz *");
800055a0:	4c 5c       	lddpc	r12,800056b4 <main+0x3e4>
800055a2:	f0 1f 00 2e 	mcall	80005658 <main+0x388>
					dip204_set_cursor_position(15,3);
800055a6:	30 3b       	mov	r11,3
800055a8:	30 fc       	mov	r12,15
800055aa:	f0 1f 00 2a 	mcall	80005650 <main+0x380>
					dip204_write_string("%   ");
800055ae:	4c 3c       	lddpc	r12,800056b8 <main+0x3e8>
800055b0:	f0 1f 00 2a 	mcall	80005658 <main+0x388>
					break;
800055b4:	c3 b8       	rjmp	8000562a <main+0x35a>
					
					case CHANGE_PWM_DUTY_CYCLE:
					// Look up corresponding PWM duty cycle based on pot_value
					pwm_duty_cycle	= sdram[pot_value + POT_ADC_RESOLUTION];
800055b6:	4b 08       	lddpc	r8,80005674 <main+0x3a4>
800055b8:	70 09       	ld.w	r9,r8[0x0]
800055ba:	ee f8 ff f4 	ld.w	r8,r7[-12]
800055be:	f0 c8 fc 00 	sub	r8,r8,-1024
800055c2:	a3 68       	lsl	r8,0x2
800055c4:	f2 08 00 08 	add	r8,r9,r8
800055c8:	70 08       	ld.w	r8,r8[0x0]
800055ca:	ef 48 ff fc 	st.w	r7[-4],r8
					// Reset the PWM config and enable PWM update on the next period
					erm_pwm_update_config(pwm_duty_cycle, pwm_frequency, PBA_HZ, PWM_UPDATE_DUTY);
800055ce:	30 09       	mov	r9,0
800055d0:	e0 6a 1b 00 	mov	r10,6912
800055d4:	ea 1a 00 b7 	orh	r10,0xb7
800055d8:	ee fb ff f8 	ld.w	r11,r7[-8]
800055dc:	ee fc ff fc 	ld.w	r12,r7[-4]
800055e0:	f0 1f 00 32 	mcall	800056a8 <main+0x3d8>
					erm_pwm_update_channel();
800055e4:	f0 1f 00 32 	mcall	800056ac <main+0x3dc>
					// Update the LCD display
					dip204_set_cursor_position(8,3);
800055e8:	30 3b       	mov	r11,3
800055ea:	30 8c       	mov	r12,8
800055ec:	f0 1f 00 19 	mcall	80005650 <main+0x380>
					sprintf(temp_string, "%lu   ", pwm_duty_cycle);
800055f0:	ee c8 00 20 	sub	r8,r7,32
800055f4:	ee f9 ff fc 	ld.w	r9,r7[-4]
800055f8:	1a d9       	st.w	--sp,r9
800055fa:	4a eb       	lddpc	r11,800056b0 <main+0x3e0>
800055fc:	10 9c       	mov	r12,r8
800055fe:	f0 1f 00 19 	mcall	80005660 <main+0x390>
80005602:	2f fd       	sub	sp,-4
					dip204_write_string(temp_string);
80005604:	ee c8 00 20 	sub	r8,r7,32
80005608:	10 9c       	mov	r12,r8
8000560a:	f0 1f 00 14 	mcall	80005658 <main+0x388>
					dip204_set_cursor_position(15,2);
8000560e:	30 2b       	mov	r11,2
80005610:	30 fc       	mov	r12,15
80005612:	f0 1f 00 10 	mcall	80005650 <main+0x380>
					dip204_write_string("Hz  ");
80005616:	4a ac       	lddpc	r12,800056bc <main+0x3ec>
80005618:	f0 1f 00 10 	mcall	80005658 <main+0x388>
					dip204_set_cursor_position(15,3);
8000561c:	30 3b       	mov	r11,3
8000561e:	30 fc       	mov	r12,15
80005620:	f0 1f 00 0c 	mcall	80005650 <main+0x380>
					dip204_write_string("%  *");
80005624:	4a 7c       	lddpc	r12,800056c0 <main+0x3f0>
80005626:	f0 1f 00 0d 	mcall	80005658 <main+0x388>
					break;
				}
			}
			
			// Reset interrupt identifier
			interrupt_identifier = INT_NONE;
8000562a:	49 d8       	lddpc	r8,8000569c <main+0x3cc>
8000562c:	30 09       	mov	r9,0
8000562e:	91 09       	st.w	r8[0x0],r9
		}
		
		// Otherwise, do nothing
	}
80005630:	c6 eb       	rjmp	8000550c <main+0x23c>
80005632:	00 00       	add	r0,r0
80005634:	80 00       	ld.sh	r0,r0[0x0]
80005636:	b8 48       	st.h	r12[0x8],r8
80005638:	80 00       	ld.sh	r0,r0[0x0]
8000563a:	3b fc       	mov	r12,-65
8000563c:	80 00       	ld.sh	r0,r0[0x0]
8000563e:	43 e8       	lddsp	r8,sp[0xf8]
80005640:	80 00       	ld.sh	r0,r0[0x0]
80005642:	46 40       	lddsp	r0,sp[0x190]
80005644:	80 00       	ld.sh	r0,r0[0x0]
80005646:	46 90       	lddsp	r0,sp[0x1a4]
80005648:	80 00       	ld.sh	r0,r0[0x0]
8000564a:	4d 84       	lddpc	r4,800057a8 <__avr32_f64_sub_opL_subnormal+0x18>
8000564c:	80 00       	ld.sh	r0,r0[0x0]
8000564e:	4d a0       	lddpc	r0,800057b4 <__avr32_f64_sub_opL_subnormal+0x24>
80005650:	80 00       	ld.sh	r0,r0[0x0]
80005652:	2e 48       	sub	r8,-28
80005654:	80 00       	ld.sh	r0,r0[0x0]
80005656:	4d 40       	lddpc	r0,800057a4 <__avr32_f64_sub_opL_subnormal+0x14>
80005658:	80 00       	ld.sh	r0,r0[0x0]
8000565a:	2e d0       	sub	r0,-19
8000565c:	80 00       	ld.sh	r0,r0[0x0]
8000565e:	4d 48       	lddpc	r8,800057ac <__avr32_f64_sub_opL_subnormal+0x1c>
80005660:	80 00       	ld.sh	r0,r0[0x0]
80005662:	63 f0       	ld.w	r0,r1[0x7c]
80005664:	80 00       	ld.sh	r0,r0[0x0]
80005666:	4d 4c       	lddpc	r12,800057b4 <__avr32_f64_sub_opL_subnormal+0x24>
80005668:	80 00       	ld.sh	r0,r0[0x0]
8000566a:	4d 50       	lddpc	r0,800057bc <__avr32_f64_sub_opH_nan_or_inf+0x6>
8000566c:	80 00       	ld.sh	r0,r0[0x0]
8000566e:	4d 58       	lddpc	r8,800057c0 <__avr32_f64_sub_opH_nan_or_inf+0xa>
80005670:	80 00       	ld.sh	r0,r0[0x0]
80005672:	20 7c       	sub	r12,7
80005674:	00 00       	add	r0,r0
80005676:	00 1c       	sub	r12,r0
80005678:	80 00       	ld.sh	r0,r0[0x0]
8000567a:	4b 94       	lddpc	r4,8000575c <__avr32_f64_sub_shift_done+0x1c>
8000567c:	80 00       	ld.sh	r0,r0[0x0]
8000567e:	52 44       	stdsp	sp[0x90],r4
80005680:	80 00       	ld.sh	r0,r0[0x0]
80005682:	4e 3c       	lddpc	r12,8000580c <__avr32_f64_sub_subnormal_result+0x38>
80005684:	80 00       	ld.sh	r0,r0[0x0]
80005686:	52 74       	stdsp	sp[0x9c],r4
80005688:	80 00       	ld.sh	r0,r0[0x0]
8000568a:	4e 08       	lddpc	r8,80005808 <__avr32_f64_sub_subnormal_result+0x34>
8000568c:	80 00       	ld.sh	r0,r0[0x0]
8000568e:	4f 3c       	lddpc	r12,80005858 <__avr32_f64_sub_longnormalize+0x1c>
80005690:	80 00       	ld.sh	r0,r0[0x0]
80005692:	4f 90       	lddpc	r0,80005874 <__avr32_f64_add+0x10>
80005694:	80 00       	ld.sh	r0,r0[0x0]
80005696:	4e 68       	lddpc	r8,8000582c <__avr32_f64_sub_longshift+0xe>
80005698:	80 00       	ld.sh	r0,r0[0x0]
8000569a:	30 c6       	mov	r6,12
8000569c:	00 00       	add	r0,r0
8000569e:	06 38       	cp.w	r8,r3
800056a0:	80 00       	ld.sh	r0,r0[0x0]
800056a2:	31 3c       	mov	r12,19
800056a4:	00 00       	add	r0,r0
800056a6:	00 20       	rsub	r0,r0
800056a8:	80 00       	ld.sh	r0,r0[0x0]
800056aa:	51 18       	stdsp	sp[0x44],r8
800056ac:	80 00       	ld.sh	r0,r0[0x0]
800056ae:	52 28       	stdsp	sp[0x88],r8
800056b0:	80 00       	ld.sh	r0,r0[0x0]
800056b2:	4d 5c       	lddpc	r12,80005804 <__avr32_f64_sub_subnormal_result+0x30>
800056b4:	80 00       	ld.sh	r0,r0[0x0]
800056b6:	4d 64       	lddpc	r4,8000580c <__avr32_f64_sub_subnormal_result+0x38>
800056b8:	80 00       	ld.sh	r0,r0[0x0]
800056ba:	4d 6c       	lddpc	r12,80005810 <__avr32_f64_sub_subnormal_result+0x3c>
800056bc:	80 00       	ld.sh	r0,r0[0x0]
800056be:	4d 74       	lddpc	r4,80005818 <__avr32_f64_sub_subnormal_result+0x44>
800056c0:	80 00       	ld.sh	r0,r0[0x0]
800056c2:	4d 7c       	lddpc	r12,8000581c <__avr32_f64_sub_subnormal_result+0x48>

800056c4 <__avr32_f64_sub_from_add>:
800056c4:	ee 19 80 00 	eorh	r9,0x8000

800056c8 <__avr32_f64_sub>:
800056c8:	f7 e9 20 0c 	eor	r12,r11,r9
800056cc:	e0 86 00 ca 	brmi	80005860 <__avr32_f64_add_from_sub>
800056d0:	eb cd 40 e0 	pushm	r5-r7,lr
800056d4:	16 9c       	mov	r12,r11
800056d6:	e6 1c 80 00 	andh	r12,0x8000,COH
800056da:	bf db       	cbr	r11,0x1f
800056dc:	bf d9       	cbr	r9,0x1f
800056de:	10 3a       	cp.w	r10,r8
800056e0:	f2 0b 13 00 	cpc	r11,r9
800056e4:	c0 92       	brcc	800056f6 <__avr32_f64_sub+0x2e>
800056e6:	16 97       	mov	r7,r11
800056e8:	12 9b       	mov	r11,r9
800056ea:	0e 99       	mov	r9,r7
800056ec:	14 97       	mov	r7,r10
800056ee:	10 9a       	mov	r10,r8
800056f0:	0e 98       	mov	r8,r7
800056f2:	ee 1c 80 00 	eorh	r12,0x8000
800056f6:	f6 07 16 14 	lsr	r7,r11,0x14
800056fa:	ab 7b       	lsl	r11,0xb
800056fc:	f7 ea 13 5b 	or	r11,r11,r10>>0x15
80005700:	ab 7a       	lsl	r10,0xb
80005702:	bf bb       	sbr	r11,0x1f
80005704:	f2 06 16 14 	lsr	r6,r9,0x14
80005708:	c4 40       	breq	80005790 <__avr32_f64_sub_opL_subnormal>
8000570a:	ab 79       	lsl	r9,0xb
8000570c:	f3 e8 13 59 	or	r9,r9,r8>>0x15
80005710:	ab 78       	lsl	r8,0xb
80005712:	bf b9       	sbr	r9,0x1f

80005714 <__avr32_f64_sub_opL_subnormal_done>:
80005714:	e0 47 07 ff 	cp.w	r7,2047
80005718:	c4 f0       	breq	800057b6 <__avr32_f64_sub_opH_nan_or_inf>
8000571a:	0e 26       	rsub	r6,r7
8000571c:	c1 20       	breq	80005740 <__avr32_f64_sub_shift_done>
8000571e:	ec 05 11 20 	rsub	r5,r6,32
80005722:	e0 46 00 20 	cp.w	r6,32
80005726:	c7 c2       	brcc	8000581e <__avr32_f64_sub_longshift>
80005728:	f0 05 09 4e 	lsl	lr,r8,r5
8000572c:	f2 05 09 45 	lsl	r5,r9,r5
80005730:	f0 06 0a 48 	lsr	r8,r8,r6
80005734:	f2 06 0a 49 	lsr	r9,r9,r6
80005738:	0a 48       	or	r8,r5
8000573a:	58 0e       	cp.w	lr,0
8000573c:	5f 1e       	srne	lr
8000573e:	1c 48       	or	r8,lr

80005740 <__avr32_f64_sub_shift_done>:
80005740:	10 1a       	sub	r10,r8
80005742:	f6 09 01 4b 	sbc	r11,r11,r9
80005746:	f6 06 12 00 	clz	r6,r11
8000574a:	c0 e0       	breq	80005766 <__avr32_f64_sub_longnormalize_done>
8000574c:	c7 83       	brcs	8000583c <__avr32_f64_sub_longnormalize>
8000574e:	ec 0e 11 20 	rsub	lr,r6,32
80005752:	f6 06 09 4b 	lsl	r11,r11,r6
80005756:	f4 0e 0a 4e 	lsr	lr,r10,lr
8000575a:	1c 4b       	or	r11,lr
8000575c:	f4 06 09 4a 	lsl	r10,r10,r6
80005760:	0c 17       	sub	r7,r6
80005762:	e0 8a 00 39 	brle	800057d4 <__avr32_f64_sub_subnormal_result>

80005766 <__avr32_f64_sub_longnormalize_done>:
80005766:	f4 09 15 15 	lsl	r9,r10,0x15
8000576a:	ab 9a       	lsr	r10,0xb
8000576c:	f5 eb 11 5a 	or	r10,r10,r11<<0x15
80005770:	ab 9b       	lsr	r11,0xb
80005772:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
80005776:	18 4b       	or	r11,r12

80005778 <__avr32_f64_sub_round>:
80005778:	fc 17 80 00 	movh	r7,0x8000
8000577c:	ed ba 00 00 	bld	r10,0x0
80005780:	f7 b7 01 ff 	subne	r7,-1
80005784:	0e 39       	cp.w	r9,r7
80005786:	5f 29       	srhs	r9
80005788:	12 0a       	add	r10,r9
8000578a:	5c 0b       	acr	r11
8000578c:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80005790 <__avr32_f64_sub_opL_subnormal>:
80005790:	ab 79       	lsl	r9,0xb
80005792:	f3 e8 13 59 	or	r9,r9,r8>>0x15
80005796:	ab 78       	lsl	r8,0xb
80005798:	f3 e8 10 0e 	or	lr,r9,r8
8000579c:	f9 b6 01 01 	movne	r6,1
800057a0:	ee 0e 11 00 	rsub	lr,r7,0
800057a4:	f9 b7 00 01 	moveq	r7,1
800057a8:	ef bb 00 1f 	bst	r11,0x1f
800057ac:	f7 ea 10 0e 	or	lr,r11,r10
800057b0:	f9 b7 00 00 	moveq	r7,0
800057b4:	cb 0b       	rjmp	80005714 <__avr32_f64_sub_opL_subnormal_done>

800057b6 <__avr32_f64_sub_opH_nan_or_inf>:
800057b6:	bf db       	cbr	r11,0x1f
800057b8:	f7 ea 10 0e 	or	lr,r11,r10
800057bc:	c0 81       	brne	800057cc <__avr32_f64_sub_return_nan>
800057be:	e0 46 07 ff 	cp.w	r6,2047
800057c2:	c0 50       	breq	800057cc <__avr32_f64_sub_return_nan>
800057c4:	f9 e7 11 4b 	or	r11,r12,r7<<0x14
800057c8:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

800057cc <__avr32_f64_sub_return_nan>:
800057cc:	3f fa       	mov	r10,-1
800057ce:	3f fb       	mov	r11,-1
800057d0:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

800057d4 <__avr32_f64_sub_subnormal_result>:
800057d4:	5c 37       	neg	r7
800057d6:	2f f7       	sub	r7,-1
800057d8:	f1 b7 04 c0 	satu	r7,0x6
800057dc:	e0 47 00 20 	cp.w	r7,32
800057e0:	c1 14       	brge	80005802 <__avr32_f64_sub_subnormal_result+0x2e>
800057e2:	ee 08 11 20 	rsub	r8,r7,32
800057e6:	f4 08 09 49 	lsl	r9,r10,r8
800057ea:	5f 16       	srne	r6
800057ec:	f4 07 0a 4a 	lsr	r10,r10,r7
800057f0:	0c 4a       	or	r10,r6
800057f2:	f6 08 09 49 	lsl	r9,r11,r8
800057f6:	f5 e9 10 0a 	or	r10,r10,r9
800057fa:	f4 07 0a 4b 	lsr	r11,r10,r7
800057fe:	30 07       	mov	r7,0
80005800:	cb 3b       	rjmp	80005766 <__avr32_f64_sub_longnormalize_done>
80005802:	ee 08 11 40 	rsub	r8,r7,64
80005806:	f6 08 09 49 	lsl	r9,r11,r8
8000580a:	14 49       	or	r9,r10
8000580c:	5f 16       	srne	r6
8000580e:	f6 07 0a 4a 	lsr	r10,r11,r7
80005812:	0c 4a       	or	r10,r6
80005814:	30 0b       	mov	r11,0
80005816:	30 07       	mov	r7,0
80005818:	ca 7b       	rjmp	80005766 <__avr32_f64_sub_longnormalize_done>
8000581a:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000581e <__avr32_f64_sub_longshift>:
8000581e:	f1 b6 04 c0 	satu	r6,0x6
80005822:	f0 0e 17 00 	moveq	lr,r8
80005826:	c0 40       	breq	8000582e <__avr32_f64_sub_longshift+0x10>
80005828:	f2 05 09 4e 	lsl	lr,r9,r5
8000582c:	10 4e       	or	lr,r8
8000582e:	f2 06 0a 48 	lsr	r8,r9,r6
80005832:	30 09       	mov	r9,0
80005834:	58 0e       	cp.w	lr,0
80005836:	5f 1e       	srne	lr
80005838:	1c 48       	or	r8,lr
8000583a:	c8 3b       	rjmp	80005740 <__avr32_f64_sub_shift_done>

8000583c <__avr32_f64_sub_longnormalize>:
8000583c:	f4 06 12 00 	clz	r6,r10
80005840:	f9 b7 03 00 	movlo	r7,0
80005844:	f9 b6 03 00 	movlo	r6,0
80005848:	f9 bc 03 00 	movlo	r12,0
8000584c:	f7 b6 02 e0 	subhs	r6,-32
80005850:	f4 06 09 4b 	lsl	r11,r10,r6
80005854:	30 0a       	mov	r10,0
80005856:	0c 17       	sub	r7,r6
80005858:	fe 9a ff be 	brle	800057d4 <__avr32_f64_sub_subnormal_result>
8000585c:	c8 5b       	rjmp	80005766 <__avr32_f64_sub_longnormalize_done>
8000585e:	d7 03       	nop

80005860 <__avr32_f64_add_from_sub>:
80005860:	ee 19 80 00 	eorh	r9,0x8000

80005864 <__avr32_f64_add>:
80005864:	f7 e9 20 0c 	eor	r12,r11,r9
80005868:	fe 96 ff 2e 	brmi	800056c4 <__avr32_f64_sub_from_add>
8000586c:	eb cd 40 e0 	pushm	r5-r7,lr
80005870:	16 9c       	mov	r12,r11
80005872:	e6 1c 80 00 	andh	r12,0x8000,COH
80005876:	bf db       	cbr	r11,0x1f
80005878:	bf d9       	cbr	r9,0x1f
8000587a:	12 3b       	cp.w	r11,r9
8000587c:	c0 72       	brcc	8000588a <__avr32_f64_add+0x26>
8000587e:	16 97       	mov	r7,r11
80005880:	12 9b       	mov	r11,r9
80005882:	0e 99       	mov	r9,r7
80005884:	14 97       	mov	r7,r10
80005886:	10 9a       	mov	r10,r8
80005888:	0e 98       	mov	r8,r7
8000588a:	30 0e       	mov	lr,0
8000588c:	ef db c2 8b 	bfextu	r7,r11,0x14,0xb
80005890:	f7 db c0 14 	bfextu	r11,r11,0x0,0x14
80005894:	b5 ab       	sbr	r11,0x14
80005896:	ed d9 c2 8b 	bfextu	r6,r9,0x14,0xb
8000589a:	c6 20       	breq	8000595e <__avr32_f64_add_op2_subnormal>
8000589c:	f3 d9 c0 14 	bfextu	r9,r9,0x0,0x14
800058a0:	b5 a9       	sbr	r9,0x14
800058a2:	e0 47 07 ff 	cp.w	r7,2047
800058a6:	c2 80       	breq	800058f6 <__avr32_f64_add_opH_nan_or_inf>
800058a8:	0e 26       	rsub	r6,r7
800058aa:	c1 20       	breq	800058ce <__avr32_f64_add_shift_done>
800058ac:	e0 46 00 36 	cp.w	r6,54
800058b0:	c1 52       	brcc	800058da <__avr32_f64_add_res_of_done>
800058b2:	ec 05 11 20 	rsub	r5,r6,32
800058b6:	e0 46 00 20 	cp.w	r6,32
800058ba:	c3 52       	brcc	80005924 <__avr32_f64_add_longshift>
800058bc:	f0 05 09 4e 	lsl	lr,r8,r5
800058c0:	f2 05 09 45 	lsl	r5,r9,r5
800058c4:	f0 06 0a 48 	lsr	r8,r8,r6
800058c8:	f2 06 0a 49 	lsr	r9,r9,r6
800058cc:	0a 48       	or	r8,r5

800058ce <__avr32_f64_add_shift_done>:
800058ce:	10 0a       	add	r10,r8
800058d0:	f6 09 00 4b 	adc	r11,r11,r9
800058d4:	ed bb 00 15 	bld	r11,0x15
800058d8:	c3 40       	breq	80005940 <__avr32_f64_add_res_of>

800058da <__avr32_f64_add_res_of_done>:
800058da:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
800058de:	18 4b       	or	r11,r12

800058e0 <__avr32_f64_add_round>:
800058e0:	f9 da c0 01 	bfextu	r12,r10,0x0,0x1
800058e4:	18 4e       	or	lr,r12
800058e6:	ee 1e 80 00 	eorh	lr,0x8000
800058ea:	f1 be 04 20 	satu	lr,0x1
800058ee:	1c 0a       	add	r10,lr
800058f0:	5c 0b       	acr	r11
800058f2:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

800058f6 <__avr32_f64_add_opH_nan_or_inf>:
800058f6:	b5 cb       	cbr	r11,0x14
800058f8:	f7 ea 10 0e 	or	lr,r11,r10
800058fc:	c1 01       	brne	8000591c <__avr32_f64_add_return_nan>
800058fe:	e0 46 07 ff 	cp.w	r6,2047
80005902:	c0 30       	breq	80005908 <__avr32_f64_add_opL_nan_or_inf>
80005904:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80005908 <__avr32_f64_add_opL_nan_or_inf>:
80005908:	b5 c9       	cbr	r9,0x14
8000590a:	f3 e8 10 0e 	or	lr,r9,r8
8000590e:	c0 71       	brne	8000591c <__avr32_f64_add_return_nan>
80005910:	30 0a       	mov	r10,0
80005912:	fc 1b 7f f0 	movh	r11,0x7ff0
80005916:	18 4b       	or	r11,r12
80005918:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000591c <__avr32_f64_add_return_nan>:
8000591c:	3f fa       	mov	r10,-1
8000591e:	3f fb       	mov	r11,-1
80005920:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80005924 <__avr32_f64_add_longshift>:
80005924:	f1 b6 04 c0 	satu	r6,0x6
80005928:	f0 0e 17 00 	moveq	lr,r8
8000592c:	c0 60       	breq	80005938 <__avr32_f64_add_longshift+0x14>
8000592e:	f2 05 09 4e 	lsl	lr,r9,r5
80005932:	58 08       	cp.w	r8,0
80005934:	5f 18       	srne	r8
80005936:	10 4e       	or	lr,r8
80005938:	f2 06 0a 48 	lsr	r8,r9,r6
8000593c:	30 09       	mov	r9,0
8000593e:	cc 8b       	rjmp	800058ce <__avr32_f64_add_shift_done>

80005940 <__avr32_f64_add_res_of>:
80005940:	fd ee 10 1e 	or	lr,lr,lr<<0x1
80005944:	a1 9b       	lsr	r11,0x1
80005946:	5d 0a       	ror	r10
80005948:	5d 0e       	ror	lr
8000594a:	2f f7       	sub	r7,-1
8000594c:	e0 47 07 ff 	cp.w	r7,2047
80005950:	f9 ba 00 00 	moveq	r10,0
80005954:	f9 bb 00 00 	moveq	r11,0
80005958:	f9 be 00 00 	moveq	lr,0
8000595c:	cb fb       	rjmp	800058da <__avr32_f64_add_res_of_done>

8000595e <__avr32_f64_add_op2_subnormal>:
8000595e:	30 16       	mov	r6,1
80005960:	58 07       	cp.w	r7,0
80005962:	ca 01       	brne	800058a2 <__avr32_f64_add+0x3e>
80005964:	b5 cb       	cbr	r11,0x14
80005966:	10 0a       	add	r10,r8
80005968:	f6 09 00 4b 	adc	r11,r11,r9
8000596c:	18 4b       	or	r11,r12
8000596e:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80005972:	d7 03       	nop

80005974 <__avr32_f64_div>:
80005974:	eb cd 40 ff 	pushm	r0-r7,lr
80005978:	f7 e9 20 0e 	eor	lr,r11,r9
8000597c:	f6 07 16 14 	lsr	r7,r11,0x14
80005980:	a9 7b       	lsl	r11,0x9
80005982:	f7 ea 13 7b 	or	r11,r11,r10>>0x17
80005986:	a9 7a       	lsl	r10,0x9
80005988:	bd bb       	sbr	r11,0x1d
8000598a:	e4 1b 3f ff 	andh	r11,0x3fff
8000598e:	ab d7       	cbr	r7,0xb
80005990:	e0 80 00 cc 	breq	80005b28 <__avr32_f64_div_round_subnormal+0x54>
80005994:	e0 47 07 ff 	cp.w	r7,2047
80005998:	e0 84 00 b5 	brge	80005b02 <__avr32_f64_div_round_subnormal+0x2e>
8000599c:	f2 06 16 14 	lsr	r6,r9,0x14
800059a0:	a9 79       	lsl	r9,0x9
800059a2:	f3 e8 13 79 	or	r9,r9,r8>>0x17
800059a6:	a9 78       	lsl	r8,0x9
800059a8:	bd b9       	sbr	r9,0x1d
800059aa:	e4 19 3f ff 	andh	r9,0x3fff
800059ae:	ab d6       	cbr	r6,0xb
800059b0:	e0 80 00 e2 	breq	80005b74 <__avr32_f64_div_round_subnormal+0xa0>
800059b4:	e0 46 07 ff 	cp.w	r6,2047
800059b8:	e0 84 00 b2 	brge	80005b1c <__avr32_f64_div_round_subnormal+0x48>
800059bc:	0c 17       	sub	r7,r6
800059be:	fe 37 fc 01 	sub	r7,-1023
800059c2:	fc 1c 80 00 	movh	r12,0x8000
800059c6:	f8 03 16 01 	lsr	r3,r12,0x1
800059ca:	e9 d9 c3 62 	bfextu	r4,r9,0x1b,0x2
800059ce:	5c d4       	com	r4
800059d0:	e7 d4 d3 82 	bfins	r3,r4,0x1c,0x2
800059d4:	e6 09 06 44 	mulu.d	r4,r3,r9
800059d8:	f8 05 01 25 	sub	r5,r12,r5<<0x2
800059dc:	e6 05 06 44 	mulu.d	r4,r3,r5
800059e0:	ea 03 15 02 	lsl	r3,r5,0x2
800059e4:	e6 09 06 44 	mulu.d	r4,r3,r9
800059e8:	f8 05 01 25 	sub	r5,r12,r5<<0x2
800059ec:	e6 05 06 44 	mulu.d	r4,r3,r5
800059f0:	ea 03 15 02 	lsl	r3,r5,0x2
800059f4:	e6 09 06 44 	mulu.d	r4,r3,r9
800059f8:	f8 05 01 25 	sub	r5,r12,r5<<0x2
800059fc:	e6 05 06 44 	mulu.d	r4,r3,r5
80005a00:	ea 03 15 02 	lsl	r3,r5,0x2
80005a04:	e6 08 06 40 	mulu.d	r0,r3,r8
80005a08:	e4 09 07 40 	macu.d	r0,r2,r9
80005a0c:	e6 09 06 44 	mulu.d	r4,r3,r9
80005a10:	02 04       	add	r4,r1
80005a12:	5c 05       	acr	r5
80005a14:	a3 65       	lsl	r5,0x2
80005a16:	eb e4 13 e5 	or	r5,r5,r4>>0x1e
80005a1a:	a3 64       	lsl	r4,0x2
80005a1c:	5c 34       	neg	r4
80005a1e:	f8 05 01 45 	sbc	r5,r12,r5
80005a22:	e6 04 06 40 	mulu.d	r0,r3,r4
80005a26:	e4 05 07 40 	macu.d	r0,r2,r5
80005a2a:	e6 05 06 44 	mulu.d	r4,r3,r5
80005a2e:	02 04       	add	r4,r1
80005a30:	5c 05       	acr	r5
80005a32:	ea 03 15 02 	lsl	r3,r5,0x2
80005a36:	e7 e4 13 e3 	or	r3,r3,r4>>0x1e
80005a3a:	e8 02 15 02 	lsl	r2,r4,0x2
80005a3e:	e6 08 06 40 	mulu.d	r0,r3,r8
80005a42:	e4 09 07 40 	macu.d	r0,r2,r9
80005a46:	e6 09 06 44 	mulu.d	r4,r3,r9
80005a4a:	02 04       	add	r4,r1
80005a4c:	5c 05       	acr	r5
80005a4e:	a3 65       	lsl	r5,0x2
80005a50:	eb e4 13 e5 	or	r5,r5,r4>>0x1e
80005a54:	a3 64       	lsl	r4,0x2
80005a56:	5c 34       	neg	r4
80005a58:	f8 05 01 45 	sbc	r5,r12,r5
80005a5c:	e6 04 06 40 	mulu.d	r0,r3,r4
80005a60:	e4 05 07 40 	macu.d	r0,r2,r5
80005a64:	e6 05 06 44 	mulu.d	r4,r3,r5
80005a68:	02 04       	add	r4,r1
80005a6a:	5c 05       	acr	r5
80005a6c:	ea 03 15 02 	lsl	r3,r5,0x2
80005a70:	e7 e4 13 e3 	or	r3,r3,r4>>0x1e
80005a74:	e8 02 15 02 	lsl	r2,r4,0x2
80005a78:	e6 0a 06 40 	mulu.d	r0,r3,r10
80005a7c:	e4 0b 07 40 	macu.d	r0,r2,r11
80005a80:	e6 0b 06 42 	mulu.d	r2,r3,r11
80005a84:	02 02       	add	r2,r1
80005a86:	5c 03       	acr	r3
80005a88:	ed b3 00 1c 	bld	r3,0x1c
80005a8c:	c0 90       	breq	80005a9e <__avr32_f64_div+0x12a>
80005a8e:	a1 72       	lsl	r2,0x1
80005a90:	5c f3       	rol	r3
80005a92:	20 17       	sub	r7,1
80005a94:	a3 9a       	lsr	r10,0x3
80005a96:	f5 eb 11 da 	or	r10,r10,r11<<0x1d
80005a9a:	a3 9b       	lsr	r11,0x3
80005a9c:	c0 58       	rjmp	80005aa6 <__avr32_f64_div+0x132>
80005a9e:	a5 8a       	lsr	r10,0x4
80005aa0:	f5 eb 11 ca 	or	r10,r10,r11<<0x1c
80005aa4:	a5 8b       	lsr	r11,0x4
80005aa6:	58 07       	cp.w	r7,0
80005aa8:	e0 8a 00 8b 	brle	80005bbe <__avr32_f64_div_res_subnormal>
80005aac:	e0 12 ff 00 	andl	r2,0xff00
80005ab0:	e8 12 00 80 	orl	r2,0x80
80005ab4:	e6 08 06 40 	mulu.d	r0,r3,r8
80005ab8:	e4 09 07 40 	macu.d	r0,r2,r9
80005abc:	e4 08 06 44 	mulu.d	r4,r2,r8
80005ac0:	e6 09 06 48 	mulu.d	r8,r3,r9
80005ac4:	00 05       	add	r5,r0
80005ac6:	f0 01 00 48 	adc	r8,r8,r1
80005aca:	5c 09       	acr	r9
80005acc:	f9 d2 c1 01 	bfextu	r12,r2,0x8,0x1
80005ad0:	58 04       	cp.w	r4,0
80005ad2:	5c 25       	cpc	r5

80005ad4 <__avr32_f64_div_round_subnormal>:
80005ad4:	f4 08 13 00 	cpc	r8,r10
80005ad8:	f6 09 13 00 	cpc	r9,r11
80005adc:	5f 36       	srlo	r6
80005ade:	f8 06 17 00 	moveq	r6,r12
80005ae2:	e4 0a 16 08 	lsr	r10,r2,0x8
80005ae6:	f5 e3 11 8a 	or	r10,r10,r3<<0x18
80005aea:	e6 0b 16 08 	lsr	r11,r3,0x8
80005aee:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
80005af2:	ed be 00 1f 	bld	lr,0x1f
80005af6:	ef bb 00 1f 	bst	r11,0x1f
80005afa:	0c 0a       	add	r10,r6
80005afc:	5c 0b       	acr	r11
80005afe:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
80005b02:	e4 1b 00 0f 	andh	r11,0xf
80005b06:	14 4b       	or	r11,r10
80005b08:	e0 81 00 a7 	brne	80005c56 <__avr32_f64_div_res_subnormal+0x98>
80005b0c:	f2 06 16 14 	lsr	r6,r9,0x14
80005b10:	ab d6       	cbr	r6,0xb
80005b12:	e0 46 07 ff 	cp.w	r6,2047
80005b16:	e0 81 00 a4 	brne	80005c5e <__avr32_f64_div_res_subnormal+0xa0>
80005b1a:	c9 e8       	rjmp	80005c56 <__avr32_f64_div_res_subnormal+0x98>
80005b1c:	e4 19 00 0f 	andh	r9,0xf
80005b20:	10 49       	or	r9,r8
80005b22:	e0 81 00 9a 	brne	80005c56 <__avr32_f64_div_res_subnormal+0x98>
80005b26:	c9 28       	rjmp	80005c4a <__avr32_f64_div_res_subnormal+0x8c>
80005b28:	a3 7b       	lsl	r11,0x3
80005b2a:	f7 ea 13 db 	or	r11,r11,r10>>0x1d
80005b2e:	a3 7a       	lsl	r10,0x3
80005b30:	f5 eb 10 04 	or	r4,r10,r11
80005b34:	e0 80 00 a0 	breq	80005c74 <__avr32_f64_div_op1_zero>
80005b38:	f6 04 12 00 	clz	r4,r11
80005b3c:	c1 70       	breq	80005b6a <__avr32_f64_div_round_subnormal+0x96>
80005b3e:	c0 c3       	brcs	80005b56 <__avr32_f64_div_round_subnormal+0x82>
80005b40:	e8 05 11 20 	rsub	r5,r4,32
80005b44:	f6 04 09 4b 	lsl	r11,r11,r4
80005b48:	f4 05 0a 45 	lsr	r5,r10,r5
80005b4c:	0a 4b       	or	r11,r5
80005b4e:	f4 04 09 4a 	lsl	r10,r10,r4
80005b52:	08 17       	sub	r7,r4
80005b54:	c0 b8       	rjmp	80005b6a <__avr32_f64_div_round_subnormal+0x96>
80005b56:	f4 04 12 00 	clz	r4,r10
80005b5a:	f9 b4 03 00 	movlo	r4,0
80005b5e:	f7 b4 02 e0 	subhs	r4,-32
80005b62:	f4 04 09 4b 	lsl	r11,r10,r4
80005b66:	30 0a       	mov	r10,0
80005b68:	08 17       	sub	r7,r4
80005b6a:	a3 8a       	lsr	r10,0x2
80005b6c:	f5 eb 11 ea 	or	r10,r10,r11<<0x1e
80005b70:	a3 8b       	lsr	r11,0x2
80005b72:	c1 1b       	rjmp	80005994 <__avr32_f64_div+0x20>
80005b74:	a3 79       	lsl	r9,0x3
80005b76:	f3 e8 13 d9 	or	r9,r9,r8>>0x1d
80005b7a:	a3 78       	lsl	r8,0x3
80005b7c:	f3 e8 10 04 	or	r4,r9,r8
80005b80:	c6 f0       	breq	80005c5e <__avr32_f64_div_res_subnormal+0xa0>
80005b82:	f2 04 12 00 	clz	r4,r9
80005b86:	c1 70       	breq	80005bb4 <__avr32_f64_div_round_subnormal+0xe0>
80005b88:	c0 c3       	brcs	80005ba0 <__avr32_f64_div_round_subnormal+0xcc>
80005b8a:	e8 05 11 20 	rsub	r5,r4,32
80005b8e:	f2 04 09 49 	lsl	r9,r9,r4
80005b92:	f0 05 0a 45 	lsr	r5,r8,r5
80005b96:	0a 49       	or	r9,r5
80005b98:	f0 04 09 48 	lsl	r8,r8,r4
80005b9c:	08 16       	sub	r6,r4
80005b9e:	c0 b8       	rjmp	80005bb4 <__avr32_f64_div_round_subnormal+0xe0>
80005ba0:	f0 04 12 00 	clz	r4,r8
80005ba4:	f9 b4 03 00 	movlo	r4,0
80005ba8:	f7 b4 02 e0 	subhs	r4,-32
80005bac:	f0 04 09 49 	lsl	r9,r8,r4
80005bb0:	30 08       	mov	r8,0
80005bb2:	08 16       	sub	r6,r4
80005bb4:	a3 88       	lsr	r8,0x2
80005bb6:	f1 e9 11 e8 	or	r8,r8,r9<<0x1e
80005bba:	a3 89       	lsr	r9,0x2
80005bbc:	cf ca       	rjmp	800059b4 <__avr32_f64_div+0x40>

80005bbe <__avr32_f64_div_res_subnormal>:
80005bbe:	5c 37       	neg	r7
80005bc0:	2f f7       	sub	r7,-1
80005bc2:	f1 b7 04 c0 	satu	r7,0x6
80005bc6:	e0 47 00 20 	cp.w	r7,32
80005bca:	c1 54       	brge	80005bf4 <__avr32_f64_div_res_subnormal+0x36>
80005bcc:	ee 06 11 20 	rsub	r6,r7,32
80005bd0:	e4 07 0a 42 	lsr	r2,r2,r7
80005bd4:	e6 06 09 4c 	lsl	r12,r3,r6
80005bd8:	18 42       	or	r2,r12
80005bda:	e6 07 0a 43 	lsr	r3,r3,r7
80005bde:	f4 06 09 41 	lsl	r1,r10,r6
80005be2:	f4 07 0a 4a 	lsr	r10,r10,r7
80005be6:	f6 06 09 4c 	lsl	r12,r11,r6
80005bea:	18 4a       	or	r10,r12
80005bec:	f6 07 0a 4b 	lsr	r11,r11,r7
80005bf0:	30 00       	mov	r0,0
80005bf2:	c1 58       	rjmp	80005c1c <__avr32_f64_div_res_subnormal+0x5e>
80005bf4:	ee 06 11 20 	rsub	r6,r7,32
80005bf8:	f9 b0 00 00 	moveq	r0,0
80005bfc:	f9 bc 00 00 	moveq	r12,0
80005c00:	c0 50       	breq	80005c0a <__avr32_f64_div_res_subnormal+0x4c>
80005c02:	f4 06 09 40 	lsl	r0,r10,r6
80005c06:	f6 06 09 4c 	lsl	r12,r11,r6
80005c0a:	e6 07 0a 42 	lsr	r2,r3,r7
80005c0e:	30 03       	mov	r3,0
80005c10:	f4 07 0a 41 	lsr	r1,r10,r7
80005c14:	18 41       	or	r1,r12
80005c16:	f6 07 0a 4a 	lsr	r10,r11,r7
80005c1a:	30 0b       	mov	r11,0
80005c1c:	e0 12 ff 00 	andl	r2,0xff00
80005c20:	e8 12 00 80 	orl	r2,0x80
80005c24:	e6 08 06 46 	mulu.d	r6,r3,r8
80005c28:	e4 09 07 46 	macu.d	r6,r2,r9
80005c2c:	e4 08 06 44 	mulu.d	r4,r2,r8
80005c30:	e6 09 06 48 	mulu.d	r8,r3,r9
80005c34:	0c 05       	add	r5,r6
80005c36:	f0 07 00 48 	adc	r8,r8,r7
80005c3a:	5c 09       	acr	r9
80005c3c:	30 07       	mov	r7,0
80005c3e:	f9 d2 c1 01 	bfextu	r12,r2,0x8,0x1
80005c42:	00 34       	cp.w	r4,r0
80005c44:	e2 05 13 00 	cpc	r5,r1
80005c48:	c4 6b       	rjmp	80005ad4 <__avr32_f64_div_round_subnormal>
80005c4a:	1c 9b       	mov	r11,lr
80005c4c:	e6 1b 80 00 	andh	r11,0x8000,COH
80005c50:	30 0a       	mov	r10,0
80005c52:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
80005c56:	3f fb       	mov	r11,-1
80005c58:	30 0a       	mov	r10,0
80005c5a:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
80005c5e:	f5 eb 10 04 	or	r4,r10,r11
80005c62:	c0 90       	breq	80005c74 <__avr32_f64_div_op1_zero>
80005c64:	1c 9b       	mov	r11,lr
80005c66:	e6 1b 80 00 	andh	r11,0x8000,COH
80005c6a:	ea 1b 7f f0 	orh	r11,0x7ff0
80005c6e:	30 0a       	mov	r10,0
80005c70:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc

80005c74 <__avr32_f64_div_op1_zero>:
80005c74:	f1 e9 10 15 	or	r5,r8,r9<<0x1
80005c78:	ce f0       	breq	80005c56 <__avr32_f64_div_res_subnormal+0x98>
80005c7a:	e9 d9 c2 8b 	bfextu	r4,r9,0x14,0xb
80005c7e:	e0 44 07 ff 	cp.w	r4,2047
80005c82:	ce 41       	brne	80005c4a <__avr32_f64_div_res_subnormal+0x8c>
80005c84:	f1 e9 10 c5 	or	r5,r8,r9<<0xc
80005c88:	ce 10       	breq	80005c4a <__avr32_f64_div_res_subnormal+0x8c>
80005c8a:	ce 6b       	rjmp	80005c56 <__avr32_f64_div_res_subnormal+0x98>

80005c8c <__avr32_f32_div>:
80005c8c:	f7 ec 20 08 	eor	r8,r11,r12
80005c90:	a1 7c       	lsl	r12,0x1
80005c92:	a1 7b       	lsl	r11,0x1
80005c94:	c7 a0       	breq	80005d88 <__divsf_return_op1+0x16>
80005c96:	18 7c       	tst	r12,r12
80005c98:	f9 b9 00 00 	moveq	r9,0
80005c9c:	c0 90       	breq	80005cae <__avr32_f32_div+0x22>
80005c9e:	f8 09 16 18 	lsr	r9,r12,0x18
80005ca2:	c7 e0       	breq	80005d9e <__divsf_return_op1+0x2c>
80005ca4:	e0 49 00 ff 	cp.w	r9,255
80005ca8:	c6 82       	brcc	80005d78 <__divsf_return_op1+0x6>
80005caa:	a7 7c       	lsl	r12,0x7
80005cac:	bf bc       	sbr	r12,0x1f
80005cae:	f6 0a 16 18 	lsr	r10,r11,0x18
80005cb2:	c7 e0       	breq	80005dae <__divsf_return_op1+0x3c>
80005cb4:	e0 4a 00 ff 	cp.w	r10,255
80005cb8:	c6 62       	brcc	80005d84 <__divsf_return_op1+0x12>
80005cba:	a7 7b       	lsl	r11,0x7
80005cbc:	bf bb       	sbr	r11,0x1f
80005cbe:	58 09       	cp.w	r9,0
80005cc0:	f5 bc 00 00 	subfeq	r12,0
80005cc4:	5e 0d       	reteq	0
80005cc6:	1a d5       	st.w	--sp,r5
80005cc8:	bb 27       	st.d	--sp,r6
80005cca:	14 19       	sub	r9,r10
80005ccc:	28 19       	sub	r9,-127
80005cce:	fc 1a 80 00 	movh	r10,0x8000
80005cd2:	a3 8c       	lsr	r12,0x2
80005cd4:	f6 05 16 02 	lsr	r5,r11,0x2
80005cd8:	f4 0b 16 01 	lsr	r11,r10,0x1
80005cdc:	ed d5 c3 62 	bfextu	r6,r5,0x1b,0x2
80005ce0:	5c d6       	com	r6
80005ce2:	f7 d6 d3 82 	bfins	r11,r6,0x1c,0x2
80005ce6:	f6 05 06 46 	mulu.d	r6,r11,r5
80005cea:	f4 07 01 27 	sub	r7,r10,r7<<0x2
80005cee:	f6 07 06 46 	mulu.d	r6,r11,r7
80005cf2:	ee 0b 15 02 	lsl	r11,r7,0x2
80005cf6:	f6 05 06 46 	mulu.d	r6,r11,r5
80005cfa:	f4 07 01 27 	sub	r7,r10,r7<<0x2
80005cfe:	f6 07 06 46 	mulu.d	r6,r11,r7
80005d02:	ee 0b 15 02 	lsl	r11,r7,0x2
80005d06:	f6 05 06 46 	mulu.d	r6,r11,r5
80005d0a:	f4 07 01 27 	sub	r7,r10,r7<<0x2
80005d0e:	f6 07 06 46 	mulu.d	r6,r11,r7
80005d12:	ee 0b 15 02 	lsl	r11,r7,0x2
80005d16:	f6 05 06 46 	mulu.d	r6,r11,r5
80005d1a:	f4 07 01 27 	sub	r7,r10,r7<<0x2
80005d1e:	f6 07 06 46 	mulu.d	r6,r11,r7
80005d22:	ee 0b 15 02 	lsl	r11,r7,0x2
80005d26:	f6 0c 06 46 	mulu.d	r6,r11,r12
80005d2a:	a5 8c       	lsr	r12,0x4
80005d2c:	ed b7 00 1c 	bld	r7,0x1c
80005d30:	c0 40       	breq	80005d38 <__avr32_f32_div+0xac>
80005d32:	a1 77       	lsl	r7,0x1
80005d34:	20 19       	sub	r9,1
80005d36:	a1 7c       	lsl	r12,0x1
80005d38:	58 09       	cp.w	r9,0
80005d3a:	e0 8a 00 42 	brle	80005dbe <__avr32_f32_div_res_subnormal>
80005d3e:	e0 17 ff e0 	andl	r7,0xffe0
80005d42:	e8 17 00 10 	orl	r7,0x10
80005d46:	ea 07 06 4a 	mulu.d	r10,r5,r7
80005d4a:	eb d7 c0 a1 	bfextu	r5,r7,0x5,0x1
80005d4e:	58 0a       	cp.w	r10,0

80005d50 <__avr32_f32_div_round_subnormal>:
80005d50:	f8 0b 13 00 	cpc	r11,r12
80005d54:	5f 3b       	srlo	r11
80005d56:	ea 0b 17 00 	moveq	r11,r5
80005d5a:	ee 0c 16 05 	lsr	r12,r7,0x5
80005d5e:	f9 d9 d2 e8 	bfins	r12,r9,0x17,0x8
80005d62:	bb 07       	ld.d	r6,sp++
80005d64:	1b 05       	ld.w	r5,sp++
80005d66:	ed b8 00 1f 	bld	r8,0x1f
80005d6a:	ef bc 00 1f 	bst	r12,0x1f
80005d6e:	16 0c       	add	r12,r11
80005d70:	5e fc       	retal	r12

80005d72 <__divsf_return_op1>:
80005d72:	a1 78       	lsl	r8,0x1
80005d74:	5d 0c       	ror	r12
80005d76:	5e fc       	retal	r12
80005d78:	5e 1e       	retne	-1
80005d7a:	fc 19 ff 00 	movh	r9,0xff00
80005d7e:	12 3b       	cp.w	r11,r9
80005d80:	cf 93       	brcs	80005d72 <__divsf_return_op1>
80005d82:	5e fe       	retal	-1
80005d84:	5e 0d       	reteq	0
80005d86:	5e fe       	retal	-1
80005d88:	18 7c       	tst	r12,r12
80005d8a:	5e 0e       	reteq	-1
80005d8c:	f8 09 16 18 	lsr	r9,r12,0x18
80005d90:	c0 70       	breq	80005d9e <__divsf_return_op1+0x2c>
80005d92:	e0 49 00 ff 	cp.w	r9,255
80005d96:	cf 12       	brcc	80005d78 <__divsf_return_op1+0x6>
80005d98:	fc 1c ff 00 	movh	r12,0xff00
80005d9c:	ce bb       	rjmp	80005d72 <__divsf_return_op1>
80005d9e:	a7 7c       	lsl	r12,0x7
80005da0:	f8 09 12 00 	clz	r9,r12
80005da4:	f8 09 09 4c 	lsl	r12,r12,r9
80005da8:	f2 09 11 01 	rsub	r9,r9,1
80005dac:	c8 1b       	rjmp	80005cae <__avr32_f32_div+0x22>
80005dae:	a7 7b       	lsl	r11,0x7
80005db0:	f6 0a 12 00 	clz	r10,r11
80005db4:	f6 0a 09 4b 	lsl	r11,r11,r10
80005db8:	f4 0a 11 01 	rsub	r10,r10,1
80005dbc:	c8 5b       	rjmp	80005cc6 <__avr32_f32_div+0x3a>

80005dbe <__avr32_f32_div_res_subnormal>:
80005dbe:	5c 39       	neg	r9
80005dc0:	2f f9       	sub	r9,-1
80005dc2:	f1 b9 04 a0 	satu	r9,0x5
80005dc6:	f2 0a 11 20 	rsub	r10,r9,32
80005dca:	ee 09 0a 47 	lsr	r7,r7,r9
80005dce:	f8 0a 09 46 	lsl	r6,r12,r10
80005dd2:	f8 09 0a 4c 	lsr	r12,r12,r9
80005dd6:	e0 17 ff e0 	andl	r7,0xffe0
80005dda:	e8 17 00 10 	orl	r7,0x10
80005dde:	ea 07 06 4a 	mulu.d	r10,r5,r7
80005de2:	30 09       	mov	r9,0
80005de4:	eb d7 c0 a1 	bfextu	r5,r7,0x5,0x1
80005de8:	0c 3a       	cp.w	r10,r6
80005dea:	cb 3b       	rjmp	80005d50 <__avr32_f32_div_round_subnormal>

80005dec <__avr32_f32_mul>:
80005dec:	18 98       	mov	r8,r12
80005dee:	16 5c       	eor	r12,r11
80005df0:	e6 1c 80 00 	andh	r12,0x8000,COH
80005df4:	bf d8       	cbr	r8,0x1f
80005df6:	c6 60       	breq	80005ec2 <__avr32_f32_mul_op1_zero>
80005df8:	bf db       	cbr	r11,0x1f
80005dfa:	f0 0b 0c 4a 	max	r10,r8,r11
80005dfe:	f0 0b 0d 49 	min	r9,r8,r11
80005e02:	f4 08 15 08 	lsl	r8,r10,0x8
80005e06:	bf b8       	sbr	r8,0x1f
80005e08:	b7 9a       	lsr	r10,0x17
80005e0a:	e0 4a 00 ff 	cp.w	r10,255
80005e0e:	c3 d0       	breq	80005e88 <__avr32_f32_mul_op1_nan_or_inf>
80005e10:	f2 0b 15 08 	lsl	r11,r9,0x8
80005e14:	bf bb       	sbr	r11,0x1f
80005e16:	b7 99       	lsr	r9,0x17
80005e18:	c2 40       	breq	80005e60 <__avr32_f32_mul_op2_subnormal>
80005e1a:	14 09       	add	r9,r10
80005e1c:	f0 0b 06 4a 	mulu.d	r10,r8,r11
80005e20:	f6 08 15 01 	lsl	r8,r11,0x1
80005e24:	f0 0b 17 20 	movhs	r11,r8
80005e28:	f7 b9 02 01 	subhs	r9,1
80005e2c:	a9 8a       	lsr	r10,0x8
80005e2e:	f5 db d3 08 	bfins	r10,r11,0x18,0x8
80005e32:	27 e9       	sub	r9,126
80005e34:	e0 8a 00 39 	brle	80005ea6 <__avr32_f32_mul_res_subnormal>
80005e38:	e0 49 00 ff 	cp.w	r9,255
80005e3c:	c0 f4       	brge	80005e5a <__avr32_f32_mul_round+0x14>
80005e3e:	f9 eb 12 8c 	or	r12,r12,r11>>0x8
80005e42:	f9 d9 d2 e8 	bfins	r12,r9,0x17,0x8

80005e46 <__avr32_f32_mul_round>:
80005e46:	fc 18 80 00 	movh	r8,0x8000
80005e4a:	ed bc 00 00 	bld	r12,0x0
80005e4e:	f7 b8 01 ff 	subne	r8,-1
80005e52:	10 3a       	cp.w	r10,r8
80005e54:	f7 bc 02 ff 	subhs	r12,-1
80005e58:	5e fc       	retal	r12
80005e5a:	ea 1c 7f 80 	orh	r12,0x7f80
80005e5e:	5e fc       	retal	r12

80005e60 <__avr32_f32_mul_op2_subnormal>:
80005e60:	bf db       	cbr	r11,0x1f
80005e62:	f6 09 12 00 	clz	r9,r11
80005e66:	5e 3d       	retlo	0
80005e68:	20 89       	sub	r9,8
80005e6a:	f6 09 09 4b 	lsl	r11,r11,r9
80005e6e:	f2 09 11 01 	rsub	r9,r9,1
80005e72:	14 7a       	tst	r10,r10
80005e74:	cd 31       	brne	80005e1a <__avr32_f32_mul+0x2e>
80005e76:	bf d8       	cbr	r8,0x1f
80005e78:	f6 0a 12 00 	clz	r10,r11
80005e7c:	5e 3d       	retlo	0
80005e7e:	f0 0a 09 48 	lsl	r8,r8,r10
80005e82:	f4 0a 11 01 	rsub	r10,r10,1
80005e86:	cc ab       	rjmp	80005e1a <__avr32_f32_mul+0x2e>

80005e88 <__avr32_f32_mul_op1_nan_or_inf>:
80005e88:	f0 0b 15 01 	lsl	r11,r8,0x1
80005e8c:	5e 1e       	retne	-1
80005e8e:	12 79       	tst	r9,r9
80005e90:	5e 0e       	reteq	-1
80005e92:	f9 da d2 e8 	bfins	r12,r10,0x17,0x8
80005e96:	f2 0b 16 17 	lsr	r11,r9,0x17
80005e9a:	e0 4b 00 ff 	cp.w	r11,255
80005e9e:	5e 1c       	retne	r12
80005ea0:	a9 79       	lsl	r9,0x9
80005ea2:	5e 0c       	reteq	r12
80005ea4:	5e fe       	retal	-1

80005ea6 <__avr32_f32_mul_res_subnormal>:
80005ea6:	f2 09 11 09 	rsub	r9,r9,9
80005eaa:	f2 08 11 20 	rsub	r8,r9,32
80005eae:	5e 3d       	retlo	0
80005eb0:	f6 09 0a 49 	lsr	r9,r11,r9
80005eb4:	12 4c       	or	r12,r9
80005eb6:	f6 08 09 4b 	lsl	r11,r11,r8
80005eba:	e4 1a 00 ff 	andh	r10,0xff
80005ebe:	16 4a       	or	r10,r11
80005ec0:	cc 3b       	rjmp	80005e46 <__avr32_f32_mul_round>

80005ec2 <__avr32_f32_mul_op1_zero>:
80005ec2:	f5 db c2 e8 	bfextu	r10,r11,0x17,0x8
80005ec6:	e0 4a 00 ff 	cp.w	r10,255
80005eca:	5e 1c       	retne	r12
80005ecc:	5e 0e       	reteq	-1

80005ece <__avr32_u32_to_f32>:
80005ece:	58 0c       	cp.w	r12,0
80005ed0:	5e 0c       	reteq	r12
80005ed2:	e0 6a 00 9e 	mov	r10,158
80005ed6:	f8 09 12 00 	clz	r9,r12
80005eda:	12 1a       	sub	r10,r9
80005edc:	f8 09 09 4c 	lsl	r12,r12,r9
80005ee0:	58 0a       	cp.w	r10,0
80005ee2:	e0 8a 00 14 	brle	80005f0a <__avr32_u32_to_f32_subnormal>
80005ee6:	37 f9       	mov	r9,127
80005ee8:	ed bc 00 08 	bld	r12,0x8
80005eec:	f7 b9 00 ff 	subeq	r9,-1
80005ef0:	12 0c       	add	r12,r9
80005ef2:	f7 ba 03 fe 	sublo	r10,-2
80005ef6:	ed bc 00 1f 	bld	r12,0x1f
80005efa:	f7 ba 01 01 	subne	r10,1
80005efe:	f8 0c 16 07 	lsr	r12,r12,0x7
80005f02:	f9 da d3 08 	bfins	r12,r10,0x18,0x8
80005f06:	a1 9c       	lsr	r12,0x1
80005f08:	5e fc       	retal	r12

80005f0a <__avr32_u32_to_f32_subnormal>:
80005f0a:	30 08       	mov	r8,0
80005f0c:	f4 0a 11 01 	rsub	r10,r10,1
80005f10:	59 9a       	cp.w	r10,25
80005f12:	f9 bc 02 00 	movhs	r12,0
80005f16:	c1 32       	brcc	80005f3c <__avr32_u32_to_f32_subnormal+0x32>
80005f18:	f4 09 11 20 	rsub	r9,r10,32
80005f1c:	f8 09 09 49 	lsl	r9,r12,r9
80005f20:	5f 19       	srne	r9
80005f22:	f8 0a 0a 4c 	lsr	r12,r12,r10
80005f26:	12 4c       	or	r12,r9
80005f28:	37 f9       	mov	r9,127
80005f2a:	ed bc 00 08 	bld	r12,0x8
80005f2e:	f7 b9 00 ff 	subeq	r9,-1
80005f32:	12 0c       	add	r12,r9
80005f34:	f8 0c 16 07 	lsr	r12,r12,0x7
80005f38:	a1 78       	lsl	r8,0x1
80005f3a:	5d 0c       	ror	r12
80005f3c:	5e fc       	retal	r12

80005f3e <__avr32_f32_to_u32>:
80005f3e:	58 0c       	cp.w	r12,0
80005f40:	5e 6d       	retmi	0
80005f42:	f7 dc c2 e8 	bfextu	r11,r12,0x17,0x8
80005f46:	27 fb       	sub	r11,127
80005f48:	5e 3d       	retlo	0
80005f4a:	f6 0b 11 1f 	rsub	r11,r11,31
80005f4e:	a9 6c       	lsl	r12,0x8
80005f50:	bf bc       	sbr	r12,0x1f
80005f52:	f8 0b 0a 4c 	lsr	r12,r12,r11
80005f56:	5e fc       	retal	r12

80005f58 <__avr32_f32_to_f64>:
80005f58:	f8 0b 15 01 	lsl	r11,r12,0x1
80005f5c:	f9 ba 00 00 	moveq	r10,0
80005f60:	5e 0b       	reteq	r11
80005f62:	f3 db c3 08 	bfextu	r9,r11,0x18,0x8
80005f66:	e0 49 00 ff 	cp.w	r9,255
80005f6a:	c1 e0       	breq	80005fa6 <__extendsfdf_return_op1+0x6>
80005f6c:	a7 7b       	lsl	r11,0x7
80005f6e:	30 0a       	mov	r10,0
80005f70:	58 09       	cp.w	r9,0
80005f72:	f7 b9 00 ff 	subeq	r9,-1
80005f76:	5f 18       	srne	r8
80005f78:	f7 e8 11 fb 	or	r11,r11,r8<<0x1f
80005f7c:	fe 39 fc 80 	sub	r9,-896
80005f80:	f6 08 12 00 	clz	r8,r11
80005f84:	10 19       	sub	r9,r8
80005f86:	f6 08 09 4b 	lsl	r11,r11,r8
80005f8a:	ed bb 00 1f 	bld	r11,0x1f
80005f8e:	f7 b9 01 01 	subne	r9,1
80005f92:	ab 9a       	lsr	r10,0xb
80005f94:	f5 eb 11 5a 	or	r10,r10,r11<<0x15
80005f98:	a1 7b       	lsl	r11,0x1
80005f9a:	ab 9b       	lsr	r11,0xb
80005f9c:	f7 e9 11 5b 	or	r11,r11,r9<<0x15

80005fa0 <__extendsfdf_return_op1>:
80005fa0:	a1 7c       	lsl	r12,0x1
80005fa2:	5d 0b       	ror	r11
80005fa4:	5e fb       	retal	r11
80005fa6:	fc 1a ff e0 	movh	r10,0xffe0
80005faa:	a9 6b       	lsl	r11,0x8
80005fac:	f9 bb 01 ff 	movne	r11,-1
80005fb0:	f4 0b 17 00 	moveq	r11,r10
80005fb4:	30 0a       	mov	r10,0
80005fb6:	cf 5b       	rjmp	80005fa0 <__extendsfdf_return_op1>

80005fb8 <__avr32_f64_to_f32>:
80005fb8:	f6 09 15 01 	lsl	r9,r11,0x1
80005fbc:	b5 99       	lsr	r9,0x15
80005fbe:	5e 0d       	reteq	0
80005fc0:	f6 08 15 0a 	lsl	r8,r11,0xa
80005fc4:	f1 ea 13 6c 	or	r12,r8,r10>>0x16
80005fc8:	ab 6a       	lsl	r10,0xa
80005fca:	5c 3a       	neg	r10
80005fcc:	5c fc       	rol	r12
80005fce:	e0 49 07 ff 	cp.w	r9,2047
80005fd2:	c1 a0       	breq	80006006 <__truncdfsf_return_op1+0x6>
80005fd4:	e0 29 03 80 	sub	r9,896
80005fd8:	bf bc       	sbr	r12,0x1f
80005fda:	58 09       	cp.w	r9,0
80005fdc:	e0 8a 00 1a 	brle	80006010 <__truncdfsf_return_op1+0x10>
80005fe0:	37 fa       	mov	r10,127
80005fe2:	ed bc 00 08 	bld	r12,0x8
80005fe6:	f7 ba 00 ff 	subeq	r10,-1
80005fea:	14 0c       	add	r12,r10
80005fec:	f7 b9 03 fe 	sublo	r9,-2
80005ff0:	ed bc 00 1f 	bld	r12,0x1f
80005ff4:	f7 b9 01 01 	subne	r9,1
80005ff8:	f8 0c 16 07 	lsr	r12,r12,0x7
80005ffc:	f9 d9 d3 08 	bfins	r12,r9,0x18,0x8

80006000 <__truncdfsf_return_op1>:
80006000:	a1 7b       	lsl	r11,0x1
80006002:	5d 0c       	ror	r12
80006004:	5e fc       	retal	r12
80006006:	bf dc       	cbr	r12,0x1f
80006008:	5e 1e       	retne	-1
8000600a:	fc 1c 7f 80 	movh	r12,0x7f80
8000600e:	5e fc       	retal	r12
80006010:	f2 09 11 01 	rsub	r9,r9,1
80006014:	59 99       	cp.w	r9,25
80006016:	f9 bc 02 00 	movhs	r12,0
8000601a:	c1 32       	brcc	80006040 <__truncdfsf_return_op1+0x40>
8000601c:	f2 0a 11 20 	rsub	r10,r9,32
80006020:	f8 0a 09 4a 	lsl	r10,r12,r10
80006024:	5f 1a       	srne	r10
80006026:	f8 09 0a 4c 	lsr	r12,r12,r9
8000602a:	14 4c       	or	r12,r10
8000602c:	37 fa       	mov	r10,127
8000602e:	ed bc 00 08 	bld	r12,0x8
80006032:	f7 ba 00 ff 	subeq	r10,-1
80006036:	14 0c       	add	r12,r10
80006038:	f8 0c 16 07 	lsr	r12,r12,0x7
8000603c:	a1 7b       	lsl	r11,0x1
8000603e:	5d 0c       	ror	r12
80006040:	5e fc       	retal	r12

80006042 <__avr32_udiv64>:
80006042:	d4 31       	pushm	r0-r7,lr
80006044:	1a 97       	mov	r7,sp
80006046:	20 3d       	sub	sp,12
80006048:	10 9c       	mov	r12,r8
8000604a:	12 9e       	mov	lr,r9
8000604c:	14 93       	mov	r3,r10
8000604e:	58 09       	cp.w	r9,0
80006050:	e0 81 00 bd 	brne	800061ca <__avr32_udiv64+0x188>
80006054:	16 38       	cp.w	r8,r11
80006056:	e0 88 00 40 	brls	800060d6 <__avr32_udiv64+0x94>
8000605a:	f0 08 12 00 	clz	r8,r8
8000605e:	c0 d0       	breq	80006078 <__avr32_udiv64+0x36>
80006060:	f6 08 09 4b 	lsl	r11,r11,r8
80006064:	f0 09 11 20 	rsub	r9,r8,32
80006068:	f8 08 09 4c 	lsl	r12,r12,r8
8000606c:	f4 09 0a 49 	lsr	r9,r10,r9
80006070:	f4 08 09 43 	lsl	r3,r10,r8
80006074:	f3 eb 10 0b 	or	r11,r9,r11
80006078:	f8 0e 16 10 	lsr	lr,r12,0x10
8000607c:	f5 dc c0 10 	bfextu	r10,r12,0x0,0x10
80006080:	f6 0e 0d 00 	divu	r0,r11,lr
80006084:	e6 0b 16 10 	lsr	r11,r3,0x10
80006088:	00 99       	mov	r9,r0
8000608a:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
8000608e:	e0 0a 02 48 	mul	r8,r0,r10
80006092:	10 3b       	cp.w	r11,r8
80006094:	c0 a2       	brcc	800060a8 <__avr32_udiv64+0x66>
80006096:	20 19       	sub	r9,1
80006098:	18 0b       	add	r11,r12
8000609a:	18 3b       	cp.w	r11,r12
8000609c:	c0 63       	brcs	800060a8 <__avr32_udiv64+0x66>
8000609e:	10 3b       	cp.w	r11,r8
800060a0:	f7 b9 03 01 	sublo	r9,1
800060a4:	f7 dc e3 0b 	addcs	r11,r11,r12
800060a8:	f6 08 01 01 	sub	r1,r11,r8
800060ac:	e7 d3 c0 10 	bfextu	r3,r3,0x0,0x10
800060b0:	e2 0e 0d 00 	divu	r0,r1,lr
800060b4:	e7 e1 11 03 	or	r3,r3,r1<<0x10
800060b8:	00 98       	mov	r8,r0
800060ba:	e0 0a 02 4a 	mul	r10,r0,r10
800060be:	14 33       	cp.w	r3,r10
800060c0:	c0 82       	brcc	800060d0 <__avr32_udiv64+0x8e>
800060c2:	20 18       	sub	r8,1
800060c4:	18 03       	add	r3,r12
800060c6:	18 33       	cp.w	r3,r12
800060c8:	c0 43       	brcs	800060d0 <__avr32_udiv64+0x8e>
800060ca:	14 33       	cp.w	r3,r10
800060cc:	f7 b8 03 01 	sublo	r8,1
800060d0:	f1 e9 11 08 	or	r8,r8,r9<<0x10
800060d4:	cd f8       	rjmp	80006292 <__avr32_udiv64+0x250>
800060d6:	58 08       	cp.w	r8,0
800060d8:	c0 51       	brne	800060e2 <__avr32_udiv64+0xa0>
800060da:	30 19       	mov	r9,1
800060dc:	f2 08 0d 08 	divu	r8,r9,r8
800060e0:	10 9c       	mov	r12,r8
800060e2:	f8 06 12 00 	clz	r6,r12
800060e6:	c0 41       	brne	800060ee <__avr32_udiv64+0xac>
800060e8:	18 1b       	sub	r11,r12
800060ea:	30 19       	mov	r9,1
800060ec:	c4 08       	rjmp	8000616c <__avr32_udiv64+0x12a>
800060ee:	ec 01 11 20 	rsub	r1,r6,32
800060f2:	f4 01 0a 49 	lsr	r9,r10,r1
800060f6:	f8 06 09 4c 	lsl	r12,r12,r6
800060fa:	f6 06 09 48 	lsl	r8,r11,r6
800060fe:	f6 01 0a 41 	lsr	r1,r11,r1
80006102:	f3 e8 10 08 	or	r8,r9,r8
80006106:	f8 03 16 10 	lsr	r3,r12,0x10
8000610a:	eb dc c0 10 	bfextu	r5,r12,0x0,0x10
8000610e:	e2 03 0d 00 	divu	r0,r1,r3
80006112:	f0 0b 16 10 	lsr	r11,r8,0x10
80006116:	00 9e       	mov	lr,r0
80006118:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
8000611c:	e0 05 02 49 	mul	r9,r0,r5
80006120:	12 3b       	cp.w	r11,r9
80006122:	c0 a2       	brcc	80006136 <__avr32_udiv64+0xf4>
80006124:	20 1e       	sub	lr,1
80006126:	18 0b       	add	r11,r12
80006128:	18 3b       	cp.w	r11,r12
8000612a:	c0 63       	brcs	80006136 <__avr32_udiv64+0xf4>
8000612c:	12 3b       	cp.w	r11,r9
8000612e:	f7 be 03 01 	sublo	lr,1
80006132:	f7 dc e3 0b 	addcs	r11,r11,r12
80006136:	12 1b       	sub	r11,r9
80006138:	f1 d8 c0 10 	bfextu	r8,r8,0x0,0x10
8000613c:	f6 03 0d 02 	divu	r2,r11,r3
80006140:	f1 e3 11 08 	or	r8,r8,r3<<0x10
80006144:	04 99       	mov	r9,r2
80006146:	e4 05 02 4b 	mul	r11,r2,r5
8000614a:	16 38       	cp.w	r8,r11
8000614c:	c0 a2       	brcc	80006160 <__avr32_udiv64+0x11e>
8000614e:	20 19       	sub	r9,1
80006150:	18 08       	add	r8,r12
80006152:	18 38       	cp.w	r8,r12
80006154:	c0 63       	brcs	80006160 <__avr32_udiv64+0x11e>
80006156:	16 38       	cp.w	r8,r11
80006158:	f7 b9 03 01 	sublo	r9,1
8000615c:	f1 dc e3 08 	addcs	r8,r8,r12
80006160:	f4 06 09 43 	lsl	r3,r10,r6
80006164:	f0 0b 01 0b 	sub	r11,r8,r11
80006168:	f3 ee 11 09 	or	r9,r9,lr<<0x10
8000616c:	f8 06 16 10 	lsr	r6,r12,0x10
80006170:	fd dc c0 10 	bfextu	lr,r12,0x0,0x10
80006174:	f6 06 0d 00 	divu	r0,r11,r6
80006178:	e6 0b 16 10 	lsr	r11,r3,0x10
8000617c:	00 9a       	mov	r10,r0
8000617e:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80006182:	e0 0e 02 48 	mul	r8,r0,lr
80006186:	10 3b       	cp.w	r11,r8
80006188:	c0 a2       	brcc	8000619c <__avr32_udiv64+0x15a>
8000618a:	20 1a       	sub	r10,1
8000618c:	18 0b       	add	r11,r12
8000618e:	18 3b       	cp.w	r11,r12
80006190:	c0 63       	brcs	8000619c <__avr32_udiv64+0x15a>
80006192:	10 3b       	cp.w	r11,r8
80006194:	f7 ba 03 01 	sublo	r10,1
80006198:	f7 dc e3 0b 	addcs	r11,r11,r12
8000619c:	f6 08 01 01 	sub	r1,r11,r8
800061a0:	e7 d3 c0 10 	bfextu	r3,r3,0x0,0x10
800061a4:	e2 06 0d 00 	divu	r0,r1,r6
800061a8:	e7 e1 11 03 	or	r3,r3,r1<<0x10
800061ac:	00 98       	mov	r8,r0
800061ae:	e0 0e 02 4b 	mul	r11,r0,lr
800061b2:	16 33       	cp.w	r3,r11
800061b4:	c0 82       	brcc	800061c4 <__avr32_udiv64+0x182>
800061b6:	20 18       	sub	r8,1
800061b8:	18 03       	add	r3,r12
800061ba:	18 33       	cp.w	r3,r12
800061bc:	c0 43       	brcs	800061c4 <__avr32_udiv64+0x182>
800061be:	16 33       	cp.w	r3,r11
800061c0:	f7 b8 03 01 	sublo	r8,1
800061c4:	f1 ea 11 08 	or	r8,r8,r10<<0x10
800061c8:	c6 98       	rjmp	8000629a <__avr32_udiv64+0x258>
800061ca:	16 39       	cp.w	r9,r11
800061cc:	e0 8b 00 65 	brhi	80006296 <__avr32_udiv64+0x254>
800061d0:	f2 09 12 00 	clz	r9,r9
800061d4:	c0 b1       	brne	800061ea <__avr32_udiv64+0x1a8>
800061d6:	10 3a       	cp.w	r10,r8
800061d8:	5f 2a       	srhs	r10
800061da:	1c 3b       	cp.w	r11,lr
800061dc:	5f b8       	srhi	r8
800061de:	10 4a       	or	r10,r8
800061e0:	f2 0a 18 00 	cp.b	r10,r9
800061e4:	c5 90       	breq	80006296 <__avr32_udiv64+0x254>
800061e6:	30 18       	mov	r8,1
800061e8:	c5 98       	rjmp	8000629a <__avr32_udiv64+0x258>
800061ea:	f0 09 09 46 	lsl	r6,r8,r9
800061ee:	f2 03 11 20 	rsub	r3,r9,32
800061f2:	fc 09 09 4e 	lsl	lr,lr,r9
800061f6:	f0 03 0a 48 	lsr	r8,r8,r3
800061fa:	f6 09 09 4c 	lsl	r12,r11,r9
800061fe:	f4 03 0a 42 	lsr	r2,r10,r3
80006202:	ef 46 ff f4 	st.w	r7[-12],r6
80006206:	f6 03 0a 43 	lsr	r3,r11,r3
8000620a:	18 42       	or	r2,r12
8000620c:	f1 ee 10 0c 	or	r12,r8,lr
80006210:	f8 01 16 10 	lsr	r1,r12,0x10
80006214:	ed dc c0 10 	bfextu	r6,r12,0x0,0x10
80006218:	e6 01 0d 04 	divu	r4,r3,r1
8000621c:	e4 03 16 10 	lsr	r3,r2,0x10
80006220:	08 9e       	mov	lr,r4
80006222:	e7 e5 11 03 	or	r3,r3,r5<<0x10
80006226:	e8 06 02 48 	mul	r8,r4,r6
8000622a:	10 33       	cp.w	r3,r8
8000622c:	c0 a2       	brcc	80006240 <__avr32_udiv64+0x1fe>
8000622e:	20 1e       	sub	lr,1
80006230:	18 03       	add	r3,r12
80006232:	18 33       	cp.w	r3,r12
80006234:	c0 63       	brcs	80006240 <__avr32_udiv64+0x1fe>
80006236:	10 33       	cp.w	r3,r8
80006238:	f7 be 03 01 	sublo	lr,1
8000623c:	e7 dc e3 03 	addcs	r3,r3,r12
80006240:	10 13       	sub	r3,r8
80006242:	f7 d2 c0 10 	bfextu	r11,r2,0x0,0x10
80006246:	e6 01 0d 00 	divu	r0,r3,r1
8000624a:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
8000624e:	00 98       	mov	r8,r0
80006250:	e0 06 02 46 	mul	r6,r0,r6
80006254:	0c 3b       	cp.w	r11,r6
80006256:	c0 a2       	brcc	8000626a <__avr32_udiv64+0x228>
80006258:	20 18       	sub	r8,1
8000625a:	18 0b       	add	r11,r12
8000625c:	18 3b       	cp.w	r11,r12
8000625e:	c0 63       	brcs	8000626a <__avr32_udiv64+0x228>
80006260:	0c 3b       	cp.w	r11,r6
80006262:	f7 dc e3 0b 	addcs	r11,r11,r12
80006266:	f7 b8 03 01 	sublo	r8,1
8000626a:	f1 ee 11 08 	or	r8,r8,lr<<0x10
8000626e:	ee f4 ff f4 	ld.w	r4,r7[-12]
80006272:	0c 1b       	sub	r11,r6
80006274:	f0 04 06 42 	mulu.d	r2,r8,r4
80006278:	06 95       	mov	r5,r3
8000627a:	16 35       	cp.w	r5,r11
8000627c:	e0 8b 00 0a 	brhi	80006290 <__avr32_udiv64+0x24e>
80006280:	5f 0b       	sreq	r11
80006282:	f4 09 09 49 	lsl	r9,r10,r9
80006286:	12 32       	cp.w	r2,r9
80006288:	5f b9       	srhi	r9
8000628a:	f7 e9 00 09 	and	r9,r11,r9
8000628e:	c0 60       	breq	8000629a <__avr32_udiv64+0x258>
80006290:	20 18       	sub	r8,1
80006292:	30 09       	mov	r9,0
80006294:	c0 38       	rjmp	8000629a <__avr32_udiv64+0x258>
80006296:	30 09       	mov	r9,0
80006298:	12 98       	mov	r8,r9
8000629a:	10 9a       	mov	r10,r8
8000629c:	12 93       	mov	r3,r9
8000629e:	10 92       	mov	r2,r8
800062a0:	12 9b       	mov	r11,r9
800062a2:	2f dd       	sub	sp,-12
800062a4:	d8 32       	popm	r0-r7,pc

800062a6 <memcpy>:
800062a6:	58 8a       	cp.w	r10,8
800062a8:	c2 f5       	brlt	80006306 <memcpy+0x60>
800062aa:	f9 eb 10 09 	or	r9,r12,r11
800062ae:	e2 19 00 03 	andl	r9,0x3,COH
800062b2:	e0 81 00 97 	brne	800063e0 <memcpy+0x13a>
800062b6:	e0 4a 00 20 	cp.w	r10,32
800062ba:	c3 b4       	brge	80006330 <memcpy+0x8a>
800062bc:	f4 08 14 02 	asr	r8,r10,0x2
800062c0:	f0 09 11 08 	rsub	r9,r8,8
800062c4:	fe 09 00 2f 	add	pc,pc,r9<<0x2
800062c8:	76 69       	ld.w	r9,r11[0x18]
800062ca:	99 69       	st.w	r12[0x18],r9
800062cc:	76 59       	ld.w	r9,r11[0x14]
800062ce:	99 59       	st.w	r12[0x14],r9
800062d0:	76 49       	ld.w	r9,r11[0x10]
800062d2:	99 49       	st.w	r12[0x10],r9
800062d4:	76 39       	ld.w	r9,r11[0xc]
800062d6:	99 39       	st.w	r12[0xc],r9
800062d8:	76 29       	ld.w	r9,r11[0x8]
800062da:	99 29       	st.w	r12[0x8],r9
800062dc:	76 19       	ld.w	r9,r11[0x4]
800062de:	99 19       	st.w	r12[0x4],r9
800062e0:	76 09       	ld.w	r9,r11[0x0]
800062e2:	99 09       	st.w	r12[0x0],r9
800062e4:	f6 08 00 2b 	add	r11,r11,r8<<0x2
800062e8:	f8 08 00 28 	add	r8,r12,r8<<0x2
800062ec:	e0 1a 00 03 	andl	r10,0x3
800062f0:	f4 0a 11 04 	rsub	r10,r10,4
800062f4:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
800062f8:	17 a9       	ld.ub	r9,r11[0x2]
800062fa:	b0 a9       	st.b	r8[0x2],r9
800062fc:	17 99       	ld.ub	r9,r11[0x1]
800062fe:	b0 99       	st.b	r8[0x1],r9
80006300:	17 89       	ld.ub	r9,r11[0x0]
80006302:	b0 89       	st.b	r8[0x0],r9
80006304:	5e fc       	retal	r12
80006306:	f4 0a 11 09 	rsub	r10,r10,9
8000630a:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
8000630e:	17 f9       	ld.ub	r9,r11[0x7]
80006310:	b8 f9       	st.b	r12[0x7],r9
80006312:	17 e9       	ld.ub	r9,r11[0x6]
80006314:	b8 e9       	st.b	r12[0x6],r9
80006316:	17 d9       	ld.ub	r9,r11[0x5]
80006318:	b8 d9       	st.b	r12[0x5],r9
8000631a:	17 c9       	ld.ub	r9,r11[0x4]
8000631c:	b8 c9       	st.b	r12[0x4],r9
8000631e:	17 b9       	ld.ub	r9,r11[0x3]
80006320:	b8 b9       	st.b	r12[0x3],r9
80006322:	17 a9       	ld.ub	r9,r11[0x2]
80006324:	b8 a9       	st.b	r12[0x2],r9
80006326:	17 99       	ld.ub	r9,r11[0x1]
80006328:	b8 99       	st.b	r12[0x1],r9
8000632a:	17 89       	ld.ub	r9,r11[0x0]
8000632c:	b8 89       	st.b	r12[0x0],r9
8000632e:	5e fc       	retal	r12
80006330:	eb cd 40 c0 	pushm	r6-r7,lr
80006334:	18 99       	mov	r9,r12
80006336:	22 0a       	sub	r10,32
80006338:	b7 07       	ld.d	r6,r11++
8000633a:	b3 26       	st.d	r9++,r6
8000633c:	b7 07       	ld.d	r6,r11++
8000633e:	b3 26       	st.d	r9++,r6
80006340:	b7 07       	ld.d	r6,r11++
80006342:	b3 26       	st.d	r9++,r6
80006344:	b7 07       	ld.d	r6,r11++
80006346:	b3 26       	st.d	r9++,r6
80006348:	22 0a       	sub	r10,32
8000634a:	cf 74       	brge	80006338 <memcpy+0x92>
8000634c:	2f 0a       	sub	r10,-16
8000634e:	c0 65       	brlt	8000635a <memcpy+0xb4>
80006350:	b7 07       	ld.d	r6,r11++
80006352:	b3 26       	st.d	r9++,r6
80006354:	b7 07       	ld.d	r6,r11++
80006356:	b3 26       	st.d	r9++,r6
80006358:	21 0a       	sub	r10,16
8000635a:	5c 3a       	neg	r10
8000635c:	fe 0a 00 3f 	add	pc,pc,r10<<0x3
80006360:	d7 03       	nop
80006362:	d7 03       	nop
80006364:	f7 36 00 0e 	ld.ub	r6,r11[14]
80006368:	f3 66 00 0e 	st.b	r9[14],r6
8000636c:	f7 36 00 0d 	ld.ub	r6,r11[13]
80006370:	f3 66 00 0d 	st.b	r9[13],r6
80006374:	f7 36 00 0c 	ld.ub	r6,r11[12]
80006378:	f3 66 00 0c 	st.b	r9[12],r6
8000637c:	f7 36 00 0b 	ld.ub	r6,r11[11]
80006380:	f3 66 00 0b 	st.b	r9[11],r6
80006384:	f7 36 00 0a 	ld.ub	r6,r11[10]
80006388:	f3 66 00 0a 	st.b	r9[10],r6
8000638c:	f7 36 00 09 	ld.ub	r6,r11[9]
80006390:	f3 66 00 09 	st.b	r9[9],r6
80006394:	f7 36 00 08 	ld.ub	r6,r11[8]
80006398:	f3 66 00 08 	st.b	r9[8],r6
8000639c:	f7 36 00 07 	ld.ub	r6,r11[7]
800063a0:	f3 66 00 07 	st.b	r9[7],r6
800063a4:	f7 36 00 06 	ld.ub	r6,r11[6]
800063a8:	f3 66 00 06 	st.b	r9[6],r6
800063ac:	f7 36 00 05 	ld.ub	r6,r11[5]
800063b0:	f3 66 00 05 	st.b	r9[5],r6
800063b4:	f7 36 00 04 	ld.ub	r6,r11[4]
800063b8:	f3 66 00 04 	st.b	r9[4],r6
800063bc:	f7 36 00 03 	ld.ub	r6,r11[3]
800063c0:	f3 66 00 03 	st.b	r9[3],r6
800063c4:	f7 36 00 02 	ld.ub	r6,r11[2]
800063c8:	f3 66 00 02 	st.b	r9[2],r6
800063cc:	f7 36 00 01 	ld.ub	r6,r11[1]
800063d0:	f3 66 00 01 	st.b	r9[1],r6
800063d4:	f7 36 00 00 	ld.ub	r6,r11[0]
800063d8:	f3 66 00 00 	st.b	r9[0],r6
800063dc:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800063e0:	20 1a       	sub	r10,1
800063e2:	f6 0a 07 09 	ld.ub	r9,r11[r10]
800063e6:	f8 0a 0b 09 	st.b	r12[r10],r9
800063ea:	cf b1       	brne	800063e0 <memcpy+0x13a>
800063ec:	5e fc       	retal	r12
800063ee:	d7 03       	nop

800063f0 <sprintf>:
800063f0:	d4 01       	pushm	lr
800063f2:	21 7d       	sub	sp,92
800063f4:	e0 68 ff ff 	mov	r8,65535
800063f8:	ea 18 7f ff 	orh	r8,0x7fff
800063fc:	50 58       	stdsp	sp[0x14],r8
800063fe:	50 28       	stdsp	sp[0x8],r8
80006400:	e0 68 02 08 	mov	r8,520
80006404:	ba 68       	st.h	sp[0xc],r8
80006406:	3f f8       	mov	r8,-1
80006408:	ba 78       	st.h	sp[0xe],r8
8000640a:	e0 68 01 14 	mov	r8,276
8000640e:	50 4c       	stdsp	sp[0x10],r12
80006410:	16 9a       	mov	r10,r11
80006412:	50 0c       	stdsp	sp[0x0],r12
80006414:	fa c9 ff a0 	sub	r9,sp,-96
80006418:	70 0c       	ld.w	r12,r8[0x0]
8000641a:	1a 9b       	mov	r11,sp
8000641c:	c9 ed       	rcall	80006758 <_vfprintf_r>
8000641e:	30 09       	mov	r9,0
80006420:	40 08       	lddsp	r8,sp[0x0]
80006422:	b0 89       	st.b	r8[0x0],r9
80006424:	2e 9d       	sub	sp,-92
80006426:	d8 02       	popm	pc

80006428 <get_arg>:
80006428:	d4 31       	pushm	r0-r7,lr
8000642a:	20 8d       	sub	sp,32
8000642c:	fa c4 ff bc 	sub	r4,sp,-68
80006430:	50 4b       	stdsp	sp[0x10],r11
80006432:	68 2e       	ld.w	lr,r4[0x8]
80006434:	50 58       	stdsp	sp[0x14],r8
80006436:	12 96       	mov	r6,r9
80006438:	7c 0b       	ld.w	r11,lr[0x0]
8000643a:	70 05       	ld.w	r5,r8[0x0]
8000643c:	50 6e       	stdsp	sp[0x18],lr
8000643e:	58 0b       	cp.w	r11,0
80006440:	f4 0b 17 00 	moveq	r11,r10
80006444:	68 03       	ld.w	r3,r4[0x0]
80006446:	68 11       	ld.w	r1,r4[0x4]
80006448:	40 49       	lddsp	r9,sp[0x10]
8000644a:	30 08       	mov	r8,0
8000644c:	c2 89       	rjmp	8000669c <get_arg+0x274>
8000644e:	2f fb       	sub	r11,-1
80006450:	32 5c       	mov	r12,37
80006452:	17 8a       	ld.ub	r10,r11[0x0]
80006454:	f8 0a 18 00 	cp.b	r10,r12
80006458:	5f 1e       	srne	lr
8000645a:	f0 0a 18 00 	cp.b	r10,r8
8000645e:	5f 1c       	srne	r12
80006460:	fd ec 00 0c 	and	r12,lr,r12
80006464:	f0 0c 18 00 	cp.b	r12,r8
80006468:	cf 31       	brne	8000644e <get_arg+0x26>
8000646a:	58 0a       	cp.w	r10,0
8000646c:	e0 80 01 25 	breq	800066b6 <get_arg+0x28e>
80006470:	30 0c       	mov	r12,0
80006472:	3f fa       	mov	r10,-1
80006474:	18 90       	mov	r0,r12
80006476:	50 3a       	stdsp	sp[0xc],r10
80006478:	18 94       	mov	r4,r12
8000647a:	18 92       	mov	r2,r12
8000647c:	f8 0c 00 3c 	add	r12,r12,r12<<0x3
80006480:	16 97       	mov	r7,r11
80006482:	50 7c       	stdsp	sp[0x1c],r12
80006484:	fe cc a9 34 	sub	r12,pc,-22220
80006488:	0f 3a       	ld.ub	r10,r7++
8000648a:	f8 0a 07 0e 	ld.ub	lr,r12[r10]
8000648e:	40 7c       	lddsp	r12,sp[0x1c]
80006490:	1c 0c       	add	r12,lr
80006492:	fe ce aa 0a 	sub	lr,pc,-22006
80006496:	fc 0c 07 0e 	ld.ub	lr,lr[r12]
8000649a:	20 1e       	sub	lr,1
8000649c:	50 0e       	stdsp	sp[0x0],lr
8000649e:	fe ce aa 82 	sub	lr,pc,-21886
800064a2:	fc 0c 07 0c 	ld.ub	r12,lr[r12]
800064a6:	50 7c       	stdsp	sp[0x1c],r12
800064a8:	40 0c       	lddsp	r12,sp[0x0]
800064aa:	58 7c       	cp.w	r12,7
800064ac:	e0 8b 00 f1 	brhi	8000668e <get_arg+0x266>
800064b0:	fe ce ac 34 	sub	lr,pc,-21452
800064b4:	fc 0c 03 2f 	ld.w	pc,lr[r12<<0x2]
800064b8:	36 8b       	mov	r11,104
800064ba:	f6 0a 18 00 	cp.b	r10,r11
800064be:	e0 80 00 e8 	breq	8000668e <get_arg+0x266>
800064c2:	37 1b       	mov	r11,113
800064c4:	f6 0a 18 00 	cp.b	r10,r11
800064c8:	c0 70       	breq	800064d6 <get_arg+0xae>
800064ca:	34 cb       	mov	r11,76
800064cc:	f6 0a 18 00 	cp.b	r10,r11
800064d0:	c0 51       	brne	800064da <get_arg+0xb2>
800064d2:	a3 b4       	sbr	r4,0x3
800064d4:	cd d8       	rjmp	8000668e <get_arg+0x266>
800064d6:	a5 b4       	sbr	r4,0x5
800064d8:	cd b8       	rjmp	8000668e <get_arg+0x266>
800064da:	08 9a       	mov	r10,r4
800064dc:	0e 9b       	mov	r11,r7
800064de:	a5 aa       	sbr	r10,0x4
800064e0:	17 3c       	ld.ub	r12,r11++
800064e2:	a5 b4       	sbr	r4,0x5
800064e4:	36 ce       	mov	lr,108
800064e6:	fc 0c 18 00 	cp.b	r12,lr
800064ea:	e0 80 00 d3 	breq	80006690 <get_arg+0x268>
800064ee:	14 94       	mov	r4,r10
800064f0:	cc f8       	rjmp	8000668e <get_arg+0x266>
800064f2:	eb d5 c0 05 	bfextu	r5,r5,0x0,0x5
800064f6:	36 7c       	mov	r12,103
800064f8:	f8 0a 18 00 	cp.b	r10,r12
800064fc:	e0 8b 00 27 	brhi	8000654a <get_arg+0x122>
80006500:	36 5b       	mov	r11,101
80006502:	f6 0a 18 00 	cp.b	r10,r11
80006506:	c4 82       	brcc	80006596 <get_arg+0x16e>
80006508:	34 fb       	mov	r11,79
8000650a:	f6 0a 18 00 	cp.b	r10,r11
8000650e:	c4 80       	breq	8000659e <get_arg+0x176>
80006510:	e0 8b 00 0c 	brhi	80006528 <get_arg+0x100>
80006514:	34 5b       	mov	r11,69
80006516:	f6 0a 18 00 	cp.b	r10,r11
8000651a:	c3 e0       	breq	80006596 <get_arg+0x16e>
8000651c:	34 7b       	mov	r11,71
8000651e:	f6 0a 18 00 	cp.b	r10,r11
80006522:	c3 a0       	breq	80006596 <get_arg+0x16e>
80006524:	34 4b       	mov	r11,68
80006526:	c0 88       	rjmp	80006536 <get_arg+0x10e>
80006528:	35 8b       	mov	r11,88
8000652a:	f6 0a 18 00 	cp.b	r10,r11
8000652e:	c2 c0       	breq	80006586 <get_arg+0x15e>
80006530:	e0 8b 00 07 	brhi	8000653e <get_arg+0x116>
80006534:	35 5b       	mov	r11,85
80006536:	f6 0a 18 00 	cp.b	r10,r11
8000653a:	c3 51       	brne	800065a4 <get_arg+0x17c>
8000653c:	c3 18       	rjmp	8000659e <get_arg+0x176>
8000653e:	36 3b       	mov	r11,99
80006540:	f6 0a 18 00 	cp.b	r10,r11
80006544:	c2 f0       	breq	800065a2 <get_arg+0x17a>
80006546:	36 4b       	mov	r11,100
80006548:	c0 e8       	rjmp	80006564 <get_arg+0x13c>
8000654a:	37 0b       	mov	r11,112
8000654c:	f6 0a 18 00 	cp.b	r10,r11
80006550:	c2 50       	breq	8000659a <get_arg+0x172>
80006552:	e0 8b 00 0d 	brhi	8000656c <get_arg+0x144>
80006556:	36 eb       	mov	r11,110
80006558:	f6 0a 18 00 	cp.b	r10,r11
8000655c:	c1 f0       	breq	8000659a <get_arg+0x172>
8000655e:	e0 8b 00 14 	brhi	80006586 <get_arg+0x15e>
80006562:	36 9b       	mov	r11,105
80006564:	f6 0a 18 00 	cp.b	r10,r11
80006568:	c1 e1       	brne	800065a4 <get_arg+0x17c>
8000656a:	c0 e8       	rjmp	80006586 <get_arg+0x15e>
8000656c:	37 5b       	mov	r11,117
8000656e:	f6 0a 18 00 	cp.b	r10,r11
80006572:	c0 a0       	breq	80006586 <get_arg+0x15e>
80006574:	37 8b       	mov	r11,120
80006576:	f6 0a 18 00 	cp.b	r10,r11
8000657a:	c0 60       	breq	80006586 <get_arg+0x15e>
8000657c:	37 3b       	mov	r11,115
8000657e:	f6 0a 18 00 	cp.b	r10,r11
80006582:	c1 11       	brne	800065a4 <get_arg+0x17c>
80006584:	c0 b8       	rjmp	8000659a <get_arg+0x172>
80006586:	ed b4 00 04 	bld	r4,0x4
8000658a:	c0 a0       	breq	8000659e <get_arg+0x176>
8000658c:	ed b4 00 05 	bld	r4,0x5
80006590:	c0 91       	brne	800065a2 <get_arg+0x17a>
80006592:	30 20       	mov	r0,2
80006594:	c0 88       	rjmp	800065a4 <get_arg+0x17c>
80006596:	30 40       	mov	r0,4
80006598:	c0 68       	rjmp	800065a4 <get_arg+0x17c>
8000659a:	30 30       	mov	r0,3
8000659c:	c0 48       	rjmp	800065a4 <get_arg+0x17c>
8000659e:	30 10       	mov	r0,1
800065a0:	c0 28       	rjmp	800065a4 <get_arg+0x17c>
800065a2:	30 00       	mov	r0,0
800065a4:	40 3b       	lddsp	r11,sp[0xc]
800065a6:	5b fb       	cp.w	r11,-1
800065a8:	c0 40       	breq	800065b0 <get_arg+0x188>
800065aa:	e2 0b 09 20 	st.w	r1[r11<<0x2],r0
800065ae:	c7 08       	rjmp	8000668e <get_arg+0x266>
800065b0:	58 60       	cp.w	r0,6
800065b2:	e0 8b 00 6e 	brhi	8000668e <get_arg+0x266>
800065b6:	6c 0a       	ld.w	r10,r6[0x0]
800065b8:	ea cc ff ff 	sub	r12,r5,-1
800065bc:	fe ce ad 20 	sub	lr,pc,-21216
800065c0:	fc 00 03 2f 	ld.w	pc,lr[r0<<0x2]
800065c4:	f4 cb ff f8 	sub	r11,r10,-8
800065c8:	8d 0b       	st.w	r6[0x0],r11
800065ca:	f4 ea 00 00 	ld.d	r10,r10[0]
800065ce:	e6 05 08 3a 	st.d	r3[r5<<0x3],r10
800065d2:	c0 f8       	rjmp	800065f0 <get_arg+0x1c8>
800065d4:	f4 cb ff fc 	sub	r11,r10,-4
800065d8:	8d 0b       	st.w	r6[0x0],r11
800065da:	74 0a       	ld.w	r10,r10[0x0]
800065dc:	e6 05 09 3a 	st.w	r3[r5<<0x3],r10
800065e0:	c0 88       	rjmp	800065f0 <get_arg+0x1c8>
800065e2:	f4 cb ff f8 	sub	r11,r10,-8
800065e6:	8d 0b       	st.w	r6[0x0],r11
800065e8:	f4 ea 00 00 	ld.d	r10,r10[0]
800065ec:	e6 05 08 3a 	st.d	r3[r5<<0x3],r10
800065f0:	0e 9b       	mov	r11,r7
800065f2:	18 95       	mov	r5,r12
800065f4:	c4 e8       	rjmp	80006690 <get_arg+0x268>
800065f6:	62 0a       	ld.w	r10,r1[0x0]
800065f8:	5b fa       	cp.w	r10,-1
800065fa:	c0 b1       	brne	80006610 <get_arg+0x1e8>
800065fc:	50 19       	stdsp	sp[0x4],r9
800065fe:	50 28       	stdsp	sp[0x8],r8
80006600:	e0 6a 00 80 	mov	r10,128
80006604:	30 0b       	mov	r11,0
80006606:	02 9c       	mov	r12,r1
80006608:	e0 a0 1d 78 	rcall	8000a0f8 <memset>
8000660c:	40 28       	lddsp	r8,sp[0x8]
8000660e:	40 19       	lddsp	r9,sp[0x4]
80006610:	e4 cc 00 01 	sub	r12,r2,1
80006614:	0e 9b       	mov	r11,r7
80006616:	50 3c       	stdsp	sp[0xc],r12
80006618:	f2 0c 0c 49 	max	r9,r9,r12
8000661c:	c3 a8       	rjmp	80006690 <get_arg+0x268>
8000661e:	62 0a       	ld.w	r10,r1[0x0]
80006620:	5b fa       	cp.w	r10,-1
80006622:	c0 b1       	brne	80006638 <get_arg+0x210>
80006624:	50 19       	stdsp	sp[0x4],r9
80006626:	50 28       	stdsp	sp[0x8],r8
80006628:	e0 6a 00 80 	mov	r10,128
8000662c:	30 0b       	mov	r11,0
8000662e:	02 9c       	mov	r12,r1
80006630:	e0 a0 1d 64 	rcall	8000a0f8 <memset>
80006634:	40 28       	lddsp	r8,sp[0x8]
80006636:	40 19       	lddsp	r9,sp[0x4]
80006638:	20 12       	sub	r2,1
8000663a:	30 0a       	mov	r10,0
8000663c:	0e 9b       	mov	r11,r7
8000663e:	e2 02 09 2a 	st.w	r1[r2<<0x2],r10
80006642:	f2 02 0c 49 	max	r9,r9,r2
80006646:	c2 58       	rjmp	80006690 <get_arg+0x268>
80006648:	16 97       	mov	r7,r11
8000664a:	6c 0a       	ld.w	r10,r6[0x0]
8000664c:	f4 cb ff fc 	sub	r11,r10,-4
80006650:	8d 0b       	st.w	r6[0x0],r11
80006652:	74 0a       	ld.w	r10,r10[0x0]
80006654:	0e 9b       	mov	r11,r7
80006656:	e6 05 09 3a 	st.w	r3[r5<<0x3],r10
8000665a:	2f f5       	sub	r5,-1
8000665c:	c1 a8       	rjmp	80006690 <get_arg+0x268>
8000665e:	f4 c2 00 30 	sub	r2,r10,48
80006662:	c0 68       	rjmp	8000666e <get_arg+0x246>
80006664:	e4 02 00 22 	add	r2,r2,r2<<0x2
80006668:	2f f7       	sub	r7,-1
8000666a:	f4 02 00 12 	add	r2,r10,r2<<0x1
8000666e:	0f 8a       	ld.ub	r10,r7[0x0]
80006670:	58 0a       	cp.w	r10,0
80006672:	c0 e0       	breq	8000668e <get_arg+0x266>
80006674:	23 0a       	sub	r10,48
80006676:	58 9a       	cp.w	r10,9
80006678:	fe 98 ff f6 	brls	80006664 <get_arg+0x23c>
8000667c:	c0 98       	rjmp	8000668e <get_arg+0x266>
8000667e:	2f f7       	sub	r7,-1
80006680:	0f 8a       	ld.ub	r10,r7[0x0]
80006682:	58 0a       	cp.w	r10,0
80006684:	c0 50       	breq	8000668e <get_arg+0x266>
80006686:	23 0a       	sub	r10,48
80006688:	58 9a       	cp.w	r10,9
8000668a:	fe 98 ff fa 	brls	8000667e <get_arg+0x256>
8000668e:	0e 9b       	mov	r11,r7
80006690:	40 7c       	lddsp	r12,sp[0x1c]
80006692:	30 ba       	mov	r10,11
80006694:	f4 0c 18 00 	cp.b	r12,r10
80006698:	fe 91 fe f2 	brne	8000647c <get_arg+0x54>
8000669c:	40 42       	lddsp	r2,sp[0x10]
8000669e:	17 8c       	ld.ub	r12,r11[0x0]
800066a0:	0a 32       	cp.w	r2,r5
800066a2:	5f 4a       	srge	r10
800066a4:	f0 0c 18 00 	cp.b	r12,r8
800066a8:	5f 1c       	srne	r12
800066aa:	f9 ea 00 0a 	and	r10,r12,r10
800066ae:	f0 0a 18 00 	cp.b	r10,r8
800066b2:	fe 91 fe cf 	brne	80006450 <get_arg+0x28>
800066b6:	30 08       	mov	r8,0
800066b8:	40 4e       	lddsp	lr,sp[0x10]
800066ba:	17 8a       	ld.ub	r10,r11[0x0]
800066bc:	e2 05 00 21 	add	r1,r1,r5<<0x2
800066c0:	f0 0a 18 00 	cp.b	r10,r8
800066c4:	fc 09 17 10 	movne	r9,lr
800066c8:	e6 05 00 38 	add	r8,r3,r5<<0x3
800066cc:	06 9e       	mov	lr,r3
800066ce:	c2 a8       	rjmp	80006722 <get_arg+0x2fa>
800066d0:	62 0a       	ld.w	r10,r1[0x0]
800066d2:	58 3a       	cp.w	r10,3
800066d4:	c1 e0       	breq	80006710 <get_arg+0x2e8>
800066d6:	e0 89 00 07 	brgt	800066e4 <get_arg+0x2bc>
800066da:	58 1a       	cp.w	r10,1
800066dc:	c1 a0       	breq	80006710 <get_arg+0x2e8>
800066de:	58 2a       	cp.w	r10,2
800066e0:	c1 81       	brne	80006710 <get_arg+0x2e8>
800066e2:	c0 58       	rjmp	800066ec <get_arg+0x2c4>
800066e4:	58 5a       	cp.w	r10,5
800066e6:	c0 c0       	breq	800066fe <get_arg+0x2d6>
800066e8:	c0 b5       	brlt	800066fe <get_arg+0x2d6>
800066ea:	c1 38       	rjmp	80006710 <get_arg+0x2e8>
800066ec:	6c 0a       	ld.w	r10,r6[0x0]
800066ee:	f4 cc ff f8 	sub	r12,r10,-8
800066f2:	8d 0c       	st.w	r6[0x0],r12
800066f4:	f4 e2 00 00 	ld.d	r2,r10[0]
800066f8:	f0 e3 00 00 	st.d	r8[0],r2
800066fc:	c1 08       	rjmp	8000671c <get_arg+0x2f4>
800066fe:	6c 0a       	ld.w	r10,r6[0x0]
80006700:	f4 cc ff f8 	sub	r12,r10,-8
80006704:	8d 0c       	st.w	r6[0x0],r12
80006706:	f4 e2 00 00 	ld.d	r2,r10[0]
8000670a:	f0 e3 00 00 	st.d	r8[0],r2
8000670e:	c0 78       	rjmp	8000671c <get_arg+0x2f4>
80006710:	6c 0a       	ld.w	r10,r6[0x0]
80006712:	f4 cc ff fc 	sub	r12,r10,-4
80006716:	8d 0c       	st.w	r6[0x0],r12
80006718:	74 0a       	ld.w	r10,r10[0x0]
8000671a:	91 0a       	st.w	r8[0x0],r10
8000671c:	2f f5       	sub	r5,-1
8000671e:	2f 88       	sub	r8,-8
80006720:	2f c1       	sub	r1,-4
80006722:	12 35       	cp.w	r5,r9
80006724:	fe 9a ff d6 	brle	800066d0 <get_arg+0x2a8>
80006728:	1c 93       	mov	r3,lr
8000672a:	40 52       	lddsp	r2,sp[0x14]
8000672c:	40 6e       	lddsp	lr,sp[0x18]
8000672e:	85 05       	st.w	r2[0x0],r5
80006730:	9d 0b       	st.w	lr[0x0],r11
80006732:	40 4b       	lddsp	r11,sp[0x10]
80006734:	e6 0b 00 3c 	add	r12,r3,r11<<0x3
80006738:	2f 8d       	sub	sp,-32
8000673a:	d8 32       	popm	r0-r7,pc

8000673c <__sprint_r>:
8000673c:	d4 21       	pushm	r4-r7,lr
8000673e:	14 97       	mov	r7,r10
80006740:	74 28       	ld.w	r8,r10[0x8]
80006742:	58 08       	cp.w	r8,0
80006744:	c0 41       	brne	8000674c <__sprint_r+0x10>
80006746:	95 18       	st.w	r10[0x4],r8
80006748:	10 9c       	mov	r12,r8
8000674a:	d8 22       	popm	r4-r7,pc
8000674c:	e0 a0 18 b4 	rcall	800098b4 <__sfvwrite_r>
80006750:	30 08       	mov	r8,0
80006752:	8f 18       	st.w	r7[0x4],r8
80006754:	8f 28       	st.w	r7[0x8],r8
80006756:	d8 22       	popm	r4-r7,pc

80006758 <_vfprintf_r>:
80006758:	d4 31       	pushm	r0-r7,lr
8000675a:	fa cd 06 bc 	sub	sp,sp,1724
8000675e:	51 09       	stdsp	sp[0x40],r9
80006760:	16 91       	mov	r1,r11
80006762:	14 97       	mov	r7,r10
80006764:	18 95       	mov	r5,r12
80006766:	e0 a0 1a 1d 	rcall	80009ba0 <_localeconv_r>
8000676a:	78 0c       	ld.w	r12,r12[0x0]
8000676c:	50 cc       	stdsp	sp[0x30],r12
8000676e:	58 05       	cp.w	r5,0
80006770:	c0 70       	breq	8000677e <_vfprintf_r+0x26>
80006772:	6a 68       	ld.w	r8,r5[0x18]
80006774:	58 08       	cp.w	r8,0
80006776:	c0 41       	brne	8000677e <_vfprintf_r+0x26>
80006778:	0a 9c       	mov	r12,r5
8000677a:	e0 a0 17 3d 	rcall	800095f4 <__sinit>
8000677e:	fe c8 ab 1e 	sub	r8,pc,-21730
80006782:	10 31       	cp.w	r1,r8
80006784:	c0 31       	brne	8000678a <_vfprintf_r+0x32>
80006786:	6a 01       	ld.w	r1,r5[0x0]
80006788:	c0 c8       	rjmp	800067a0 <_vfprintf_r+0x48>
8000678a:	fe c8 ab 0a 	sub	r8,pc,-21750
8000678e:	10 31       	cp.w	r1,r8
80006790:	c0 31       	brne	80006796 <_vfprintf_r+0x3e>
80006792:	6a 11       	ld.w	r1,r5[0x4]
80006794:	c0 68       	rjmp	800067a0 <_vfprintf_r+0x48>
80006796:	fe c8 aa f6 	sub	r8,pc,-21770
8000679a:	10 31       	cp.w	r1,r8
8000679c:	eb f1 00 02 	ld.weq	r1,r5[0x8]
800067a0:	82 68       	ld.sh	r8,r1[0xc]
800067a2:	ed b8 00 03 	bld	r8,0x3
800067a6:	c0 41       	brne	800067ae <_vfprintf_r+0x56>
800067a8:	62 48       	ld.w	r8,r1[0x10]
800067aa:	58 08       	cp.w	r8,0
800067ac:	c0 71       	brne	800067ba <_vfprintf_r+0x62>
800067ae:	02 9b       	mov	r11,r1
800067b0:	0a 9c       	mov	r12,r5
800067b2:	e0 a0 0f 5d 	rcall	8000866c <__swsetup_r>
800067b6:	e0 81 0f 54 	brne	8000865e <_vfprintf_r+0x1f06>
800067ba:	82 68       	ld.sh	r8,r1[0xc]
800067bc:	10 99       	mov	r9,r8
800067be:	e2 19 00 1a 	andl	r9,0x1a,COH
800067c2:	58 a9       	cp.w	r9,10
800067c4:	c3 c1       	brne	8000683c <_vfprintf_r+0xe4>
800067c6:	82 79       	ld.sh	r9,r1[0xe]
800067c8:	30 0a       	mov	r10,0
800067ca:	f4 09 19 00 	cp.h	r9,r10
800067ce:	c3 75       	brlt	8000683c <_vfprintf_r+0xe4>
800067d0:	a1 d8       	cbr	r8,0x1
800067d2:	fb 58 05 d0 	st.h	sp[1488],r8
800067d6:	62 88       	ld.w	r8,r1[0x20]
800067d8:	fb 48 05 e4 	st.w	sp[1508],r8
800067dc:	62 a8       	ld.w	r8,r1[0x28]
800067de:	fb 48 05 ec 	st.w	sp[1516],r8
800067e2:	fa c8 ff bc 	sub	r8,sp,-68
800067e6:	fb 48 05 d4 	st.w	sp[1492],r8
800067ea:	fb 48 05 c4 	st.w	sp[1476],r8
800067ee:	e0 68 04 00 	mov	r8,1024
800067f2:	fb 48 05 d8 	st.w	sp[1496],r8
800067f6:	fb 48 05 cc 	st.w	sp[1484],r8
800067fa:	30 08       	mov	r8,0
800067fc:	fb 59 05 d2 	st.h	sp[1490],r9
80006800:	0e 9a       	mov	r10,r7
80006802:	41 09       	lddsp	r9,sp[0x40]
80006804:	fa c7 fa 3c 	sub	r7,sp,-1476
80006808:	fb 48 05 dc 	st.w	sp[1500],r8
8000680c:	0a 9c       	mov	r12,r5
8000680e:	0e 9b       	mov	r11,r7
80006810:	ca 4f       	rcall	80006758 <_vfprintf_r>
80006812:	50 bc       	stdsp	sp[0x2c],r12
80006814:	c0 95       	brlt	80006826 <_vfprintf_r+0xce>
80006816:	0e 9b       	mov	r11,r7
80006818:	0a 9c       	mov	r12,r5
8000681a:	e0 a0 16 15 	rcall	80009444 <_fflush_r>
8000681e:	40 be       	lddsp	lr,sp[0x2c]
80006820:	f9 be 01 ff 	movne	lr,-1
80006824:	50 be       	stdsp	sp[0x2c],lr
80006826:	fb 08 05 d0 	ld.sh	r8,sp[1488]
8000682a:	ed b8 00 06 	bld	r8,0x6
8000682e:	e0 81 0f 1a 	brne	80008662 <_vfprintf_r+0x1f0a>
80006832:	82 68       	ld.sh	r8,r1[0xc]
80006834:	a7 a8       	sbr	r8,0x6
80006836:	a2 68       	st.h	r1[0xc],r8
80006838:	e0 8f 0f 15 	bral	80008662 <_vfprintf_r+0x1f0a>
8000683c:	30 08       	mov	r8,0
8000683e:	fb 48 06 b4 	st.w	sp[1716],r8
80006842:	fb 48 06 90 	st.w	sp[1680],r8
80006846:	fb 48 06 8c 	st.w	sp[1676],r8
8000684a:	fb 48 06 b0 	st.w	sp[1712],r8
8000684e:	30 08       	mov	r8,0
80006850:	30 09       	mov	r9,0
80006852:	50 a7       	stdsp	sp[0x28],r7
80006854:	50 78       	stdsp	sp[0x1c],r8
80006856:	fa c3 f9 e0 	sub	r3,sp,-1568
8000685a:	3f f8       	mov	r8,-1
8000685c:	50 59       	stdsp	sp[0x14],r9
8000685e:	fb 43 06 88 	st.w	sp[1672],r3
80006862:	fb 48 05 44 	st.w	sp[1348],r8
80006866:	12 9c       	mov	r12,r9
80006868:	50 69       	stdsp	sp[0x18],r9
8000686a:	50 d9       	stdsp	sp[0x34],r9
8000686c:	50 e9       	stdsp	sp[0x38],r9
8000686e:	50 b9       	stdsp	sp[0x2c],r9
80006870:	12 97       	mov	r7,r9
80006872:	0a 94       	mov	r4,r5
80006874:	40 a2       	lddsp	r2,sp[0x28]
80006876:	32 5a       	mov	r10,37
80006878:	30 08       	mov	r8,0
8000687a:	c0 28       	rjmp	8000687e <_vfprintf_r+0x126>
8000687c:	2f f2       	sub	r2,-1
8000687e:	05 89       	ld.ub	r9,r2[0x0]
80006880:	f0 09 18 00 	cp.b	r9,r8
80006884:	5f 1b       	srne	r11
80006886:	f4 09 18 00 	cp.b	r9,r10
8000688a:	5f 19       	srne	r9
8000688c:	f3 eb 00 0b 	and	r11,r9,r11
80006890:	f0 0b 18 00 	cp.b	r11,r8
80006894:	cf 41       	brne	8000687c <_vfprintf_r+0x124>
80006896:	40 ab       	lddsp	r11,sp[0x28]
80006898:	e4 0b 01 06 	sub	r6,r2,r11
8000689c:	c1 e0       	breq	800068d8 <_vfprintf_r+0x180>
8000689e:	fa f8 06 90 	ld.w	r8,sp[1680]
800068a2:	0c 08       	add	r8,r6
800068a4:	87 0b       	st.w	r3[0x0],r11
800068a6:	fb 48 06 90 	st.w	sp[1680],r8
800068aa:	87 16       	st.w	r3[0x4],r6
800068ac:	fa f8 06 8c 	ld.w	r8,sp[1676]
800068b0:	2f f8       	sub	r8,-1
800068b2:	fb 48 06 8c 	st.w	sp[1676],r8
800068b6:	58 78       	cp.w	r8,7
800068b8:	e0 89 00 04 	brgt	800068c0 <_vfprintf_r+0x168>
800068bc:	2f 83       	sub	r3,-8
800068be:	c0 a8       	rjmp	800068d2 <_vfprintf_r+0x17a>
800068c0:	fa ca f9 78 	sub	r10,sp,-1672
800068c4:	02 9b       	mov	r11,r1
800068c6:	08 9c       	mov	r12,r4
800068c8:	c3 af       	rcall	8000673c <__sprint_r>
800068ca:	e0 81 0e c6 	brne	80008656 <_vfprintf_r+0x1efe>
800068ce:	fa c3 f9 e0 	sub	r3,sp,-1568
800068d2:	40 ba       	lddsp	r10,sp[0x2c]
800068d4:	0c 0a       	add	r10,r6
800068d6:	50 ba       	stdsp	sp[0x2c],r10
800068d8:	05 89       	ld.ub	r9,r2[0x0]
800068da:	30 08       	mov	r8,0
800068dc:	f0 09 18 00 	cp.b	r9,r8
800068e0:	e0 80 0e aa 	breq	80008634 <_vfprintf_r+0x1edc>
800068e4:	30 09       	mov	r9,0
800068e6:	fb 68 06 bb 	st.b	sp[1723],r8
800068ea:	0e 96       	mov	r6,r7
800068ec:	e4 c8 ff ff 	sub	r8,r2,-1
800068f0:	3f fe       	mov	lr,-1
800068f2:	50 93       	stdsp	sp[0x24],r3
800068f4:	50 41       	stdsp	sp[0x10],r1
800068f6:	0e 93       	mov	r3,r7
800068f8:	04 91       	mov	r1,r2
800068fa:	50 89       	stdsp	sp[0x20],r9
800068fc:	50 a8       	stdsp	sp[0x28],r8
800068fe:	50 2e       	stdsp	sp[0x8],lr
80006900:	50 39       	stdsp	sp[0xc],r9
80006902:	12 95       	mov	r5,r9
80006904:	12 90       	mov	r0,r9
80006906:	10 97       	mov	r7,r8
80006908:	08 92       	mov	r2,r4
8000690a:	c0 78       	rjmp	80006918 <_vfprintf_r+0x1c0>
8000690c:	3f fc       	mov	r12,-1
8000690e:	08 97       	mov	r7,r4
80006910:	50 2c       	stdsp	sp[0x8],r12
80006912:	c0 38       	rjmp	80006918 <_vfprintf_r+0x1c0>
80006914:	30 0b       	mov	r11,0
80006916:	50 3b       	stdsp	sp[0xc],r11
80006918:	0f 38       	ld.ub	r8,r7++
8000691a:	c0 28       	rjmp	8000691e <_vfprintf_r+0x1c6>
8000691c:	12 90       	mov	r0,r9
8000691e:	f0 c9 00 20 	sub	r9,r8,32
80006922:	e0 49 00 58 	cp.w	r9,88
80006926:	e0 8b 0a 30 	brhi	80007d86 <_vfprintf_r+0x162e>
8000692a:	fe ca b0 72 	sub	r10,pc,-20366
8000692e:	f4 09 03 2f 	ld.w	pc,r10[r9<<0x2]
80006932:	50 a7       	stdsp	sp[0x28],r7
80006934:	50 80       	stdsp	sp[0x20],r0
80006936:	0c 97       	mov	r7,r6
80006938:	04 94       	mov	r4,r2
8000693a:	06 96       	mov	r6,r3
8000693c:	02 92       	mov	r2,r1
8000693e:	fe c9 ae 4a 	sub	r9,pc,-20918
80006942:	40 93       	lddsp	r3,sp[0x24]
80006944:	10 90       	mov	r0,r8
80006946:	40 41       	lddsp	r1,sp[0x10]
80006948:	50 d9       	stdsp	sp[0x34],r9
8000694a:	e0 8f 08 8e 	bral	80007a66 <_vfprintf_r+0x130e>
8000694e:	30 08       	mov	r8,0
80006950:	fb 39 06 bb 	ld.ub	r9,sp[1723]
80006954:	f0 09 18 00 	cp.b	r9,r8
80006958:	ce 01       	brne	80006918 <_vfprintf_r+0x1c0>
8000695a:	32 08       	mov	r8,32
8000695c:	c6 e8       	rjmp	80006a38 <_vfprintf_r+0x2e0>
8000695e:	a1 a5       	sbr	r5,0x0
80006960:	cd cb       	rjmp	80006918 <_vfprintf_r+0x1c0>
80006962:	0f 89       	ld.ub	r9,r7[0x0]
80006964:	f2 c8 00 30 	sub	r8,r9,48
80006968:	58 98       	cp.w	r8,9
8000696a:	e0 8b 00 1d 	brhi	800069a4 <_vfprintf_r+0x24c>
8000696e:	ee c8 ff ff 	sub	r8,r7,-1
80006972:	30 0b       	mov	r11,0
80006974:	23 09       	sub	r9,48
80006976:	f6 0b 00 2b 	add	r11,r11,r11<<0x2
8000697a:	f2 0b 00 1b 	add	r11,r9,r11<<0x1
8000697e:	11 39       	ld.ub	r9,r8++
80006980:	f2 ca 00 30 	sub	r10,r9,48
80006984:	58 9a       	cp.w	r10,9
80006986:	fe 98 ff f7 	brls	80006974 <_vfprintf_r+0x21c>
8000698a:	e0 49 00 24 	cp.w	r9,36
8000698e:	cc 31       	brne	80006914 <_vfprintf_r+0x1bc>
80006990:	e0 4b 00 20 	cp.w	r11,32
80006994:	e0 89 0e 60 	brgt	80008654 <_vfprintf_r+0x1efc>
80006998:	20 1b       	sub	r11,1
8000699a:	fa f9 06 b4 	ld.w	r9,sp[1716]
8000699e:	12 3b       	cp.w	r11,r9
800069a0:	c0 95       	brlt	800069b2 <_vfprintf_r+0x25a>
800069a2:	c1 08       	rjmp	800069c2 <_vfprintf_r+0x26a>
800069a4:	fa f9 06 b4 	ld.w	r9,sp[1716]
800069a8:	ec ca ff ff 	sub	r10,r6,-1
800069ac:	12 36       	cp.w	r6,r9
800069ae:	c1 f5       	brlt	800069ec <_vfprintf_r+0x294>
800069b0:	c2 68       	rjmp	800069fc <_vfprintf_r+0x2a4>
800069b2:	fa ce f9 44 	sub	lr,sp,-1724
800069b6:	10 97       	mov	r7,r8
800069b8:	fc 0b 00 3b 	add	r11,lr,r11<<0x3
800069bc:	f6 f0 fd 88 	ld.w	r0,r11[-632]
800069c0:	c3 58       	rjmp	80006a2a <_vfprintf_r+0x2d2>
800069c2:	10 97       	mov	r7,r8
800069c4:	fa c8 f9 50 	sub	r8,sp,-1712
800069c8:	1a d8       	st.w	--sp,r8
800069ca:	fa c8 fa b8 	sub	r8,sp,-1352
800069ce:	1a d8       	st.w	--sp,r8
800069d0:	fa c8 fb b4 	sub	r8,sp,-1100
800069d4:	02 9a       	mov	r10,r1
800069d6:	1a d8       	st.w	--sp,r8
800069d8:	04 9c       	mov	r12,r2
800069da:	fa c8 f9 40 	sub	r8,sp,-1728
800069de:	fa c9 ff b4 	sub	r9,sp,-76
800069e2:	fe b0 fd 23 	rcall	80006428 <get_arg>
800069e6:	2f dd       	sub	sp,-12
800069e8:	78 00       	ld.w	r0,r12[0x0]
800069ea:	c2 08       	rjmp	80006a2a <_vfprintf_r+0x2d2>
800069ec:	fa cc f9 44 	sub	r12,sp,-1724
800069f0:	14 96       	mov	r6,r10
800069f2:	f8 03 00 38 	add	r8,r12,r3<<0x3
800069f6:	f0 f0 fd 88 	ld.w	r0,r8[-632]
800069fa:	c1 88       	rjmp	80006a2a <_vfprintf_r+0x2d2>
800069fc:	41 08       	lddsp	r8,sp[0x40]
800069fe:	59 f9       	cp.w	r9,31
80006a00:	e0 89 00 11 	brgt	80006a22 <_vfprintf_r+0x2ca>
80006a04:	f0 cb ff fc 	sub	r11,r8,-4
80006a08:	51 0b       	stdsp	sp[0x40],r11
80006a0a:	70 00       	ld.w	r0,r8[0x0]
80006a0c:	fa cb f9 44 	sub	r11,sp,-1724
80006a10:	f6 09 00 38 	add	r8,r11,r9<<0x3
80006a14:	f1 40 fd 88 	st.w	r8[-632],r0
80006a18:	2f f9       	sub	r9,-1
80006a1a:	14 96       	mov	r6,r10
80006a1c:	fb 49 06 b4 	st.w	sp[1716],r9
80006a20:	c0 58       	rjmp	80006a2a <_vfprintf_r+0x2d2>
80006a22:	70 00       	ld.w	r0,r8[0x0]
80006a24:	14 96       	mov	r6,r10
80006a26:	2f c8       	sub	r8,-4
80006a28:	51 08       	stdsp	sp[0x40],r8
80006a2a:	58 00       	cp.w	r0,0
80006a2c:	fe 94 ff 76 	brge	80006918 <_vfprintf_r+0x1c0>
80006a30:	5c 30       	neg	r0
80006a32:	a3 a5       	sbr	r5,0x2
80006a34:	c7 2b       	rjmp	80006918 <_vfprintf_r+0x1c0>
80006a36:	32 b8       	mov	r8,43
80006a38:	fb 68 06 bb 	st.b	sp[1723],r8
80006a3c:	c6 eb       	rjmp	80006918 <_vfprintf_r+0x1c0>
80006a3e:	0f 38       	ld.ub	r8,r7++
80006a40:	e0 48 00 2a 	cp.w	r8,42
80006a44:	c0 30       	breq	80006a4a <_vfprintf_r+0x2f2>
80006a46:	30 09       	mov	r9,0
80006a48:	c7 98       	rjmp	80006b3a <_vfprintf_r+0x3e2>
80006a4a:	0f 88       	ld.ub	r8,r7[0x0]
80006a4c:	f0 c9 00 30 	sub	r9,r8,48
80006a50:	58 99       	cp.w	r9,9
80006a52:	e0 8b 00 1f 	brhi	80006a90 <_vfprintf_r+0x338>
80006a56:	ee c4 ff ff 	sub	r4,r7,-1
80006a5a:	30 0b       	mov	r11,0
80006a5c:	23 08       	sub	r8,48
80006a5e:	f6 0b 00 2b 	add	r11,r11,r11<<0x2
80006a62:	f0 0b 00 1b 	add	r11,r8,r11<<0x1
80006a66:	09 38       	ld.ub	r8,r4++
80006a68:	f0 c9 00 30 	sub	r9,r8,48
80006a6c:	58 99       	cp.w	r9,9
80006a6e:	fe 98 ff f7 	brls	80006a5c <_vfprintf_r+0x304>
80006a72:	e0 48 00 24 	cp.w	r8,36
80006a76:	fe 91 ff 4f 	brne	80006914 <_vfprintf_r+0x1bc>
80006a7a:	e0 4b 00 20 	cp.w	r11,32
80006a7e:	e0 89 0d eb 	brgt	80008654 <_vfprintf_r+0x1efc>
80006a82:	20 1b       	sub	r11,1
80006a84:	fa f8 06 b4 	ld.w	r8,sp[1716]
80006a88:	10 3b       	cp.w	r11,r8
80006a8a:	c0 a5       	brlt	80006a9e <_vfprintf_r+0x346>
80006a8c:	c1 18       	rjmp	80006aae <_vfprintf_r+0x356>
80006a8e:	d7 03       	nop
80006a90:	fa fa 06 b4 	ld.w	r10,sp[1716]
80006a94:	ec c9 ff ff 	sub	r9,r6,-1
80006a98:	14 36       	cp.w	r6,r10
80006a9a:	c1 f5       	brlt	80006ad8 <_vfprintf_r+0x380>
80006a9c:	c2 88       	rjmp	80006aec <_vfprintf_r+0x394>
80006a9e:	fa ca f9 44 	sub	r10,sp,-1724
80006aa2:	f4 0b 00 3b 	add	r11,r10,r11<<0x3
80006aa6:	f6 fb fd 88 	ld.w	r11,r11[-632]
80006aaa:	50 2b       	stdsp	sp[0x8],r11
80006aac:	c3 c8       	rjmp	80006b24 <_vfprintf_r+0x3cc>
80006aae:	fa c8 f9 50 	sub	r8,sp,-1712
80006ab2:	1a d8       	st.w	--sp,r8
80006ab4:	fa c8 fa b8 	sub	r8,sp,-1352
80006ab8:	1a d8       	st.w	--sp,r8
80006aba:	fa c8 fb b4 	sub	r8,sp,-1100
80006abe:	02 9a       	mov	r10,r1
80006ac0:	1a d8       	st.w	--sp,r8
80006ac2:	04 9c       	mov	r12,r2
80006ac4:	fa c8 f9 40 	sub	r8,sp,-1728
80006ac8:	fa c9 ff b4 	sub	r9,sp,-76
80006acc:	fe b0 fc ae 	rcall	80006428 <get_arg>
80006ad0:	2f dd       	sub	sp,-12
80006ad2:	78 0c       	ld.w	r12,r12[0x0]
80006ad4:	50 2c       	stdsp	sp[0x8],r12
80006ad6:	c2 78       	rjmp	80006b24 <_vfprintf_r+0x3cc>
80006ad8:	12 96       	mov	r6,r9
80006ada:	0e 94       	mov	r4,r7
80006adc:	fa c9 f9 44 	sub	r9,sp,-1724
80006ae0:	f2 03 00 38 	add	r8,r9,r3<<0x3
80006ae4:	f0 f8 fd 88 	ld.w	r8,r8[-632]
80006ae8:	50 28       	stdsp	sp[0x8],r8
80006aea:	c1 d8       	rjmp	80006b24 <_vfprintf_r+0x3cc>
80006aec:	41 08       	lddsp	r8,sp[0x40]
80006aee:	59 fa       	cp.w	r10,31
80006af0:	e0 89 00 14 	brgt	80006b18 <_vfprintf_r+0x3c0>
80006af4:	f0 cb ff fc 	sub	r11,r8,-4
80006af8:	70 08       	ld.w	r8,r8[0x0]
80006afa:	51 0b       	stdsp	sp[0x40],r11
80006afc:	50 28       	stdsp	sp[0x8],r8
80006afe:	fa c6 f9 44 	sub	r6,sp,-1724
80006b02:	40 2e       	lddsp	lr,sp[0x8]
80006b04:	ec 0a 00 38 	add	r8,r6,r10<<0x3
80006b08:	f1 4e fd 88 	st.w	r8[-632],lr
80006b0c:	2f fa       	sub	r10,-1
80006b0e:	0e 94       	mov	r4,r7
80006b10:	fb 4a 06 b4 	st.w	sp[1716],r10
80006b14:	12 96       	mov	r6,r9
80006b16:	c0 78       	rjmp	80006b24 <_vfprintf_r+0x3cc>
80006b18:	70 0c       	ld.w	r12,r8[0x0]
80006b1a:	0e 94       	mov	r4,r7
80006b1c:	2f c8       	sub	r8,-4
80006b1e:	50 2c       	stdsp	sp[0x8],r12
80006b20:	12 96       	mov	r6,r9
80006b22:	51 08       	stdsp	sp[0x40],r8
80006b24:	40 2b       	lddsp	r11,sp[0x8]
80006b26:	58 0b       	cp.w	r11,0
80006b28:	fe 95 fe f2 	brlt	8000690c <_vfprintf_r+0x1b4>
80006b2c:	08 97       	mov	r7,r4
80006b2e:	cf 5a       	rjmp	80006918 <_vfprintf_r+0x1c0>
80006b30:	f2 09 00 29 	add	r9,r9,r9<<0x2
80006b34:	0f 38       	ld.ub	r8,r7++
80006b36:	f4 09 00 19 	add	r9,r10,r9<<0x1
80006b3a:	f0 ca 00 30 	sub	r10,r8,48
80006b3e:	58 9a       	cp.w	r10,9
80006b40:	fe 98 ff f8 	brls	80006b30 <_vfprintf_r+0x3d8>
80006b44:	3f fa       	mov	r10,-1
80006b46:	f2 0a 0c 49 	max	r9,r9,r10
80006b4a:	50 29       	stdsp	sp[0x8],r9
80006b4c:	ce 9a       	rjmp	8000691e <_vfprintf_r+0x1c6>
80006b4e:	a7 b5       	sbr	r5,0x7
80006b50:	ce 4a       	rjmp	80006918 <_vfprintf_r+0x1c0>
80006b52:	30 09       	mov	r9,0
80006b54:	23 08       	sub	r8,48
80006b56:	f2 09 00 29 	add	r9,r9,r9<<0x2
80006b5a:	f0 09 00 19 	add	r9,r8,r9<<0x1
80006b5e:	0f 38       	ld.ub	r8,r7++
80006b60:	f0 ca 00 30 	sub	r10,r8,48
80006b64:	58 9a       	cp.w	r10,9
80006b66:	fe 98 ff f7 	brls	80006b54 <_vfprintf_r+0x3fc>
80006b6a:	e0 48 00 24 	cp.w	r8,36
80006b6e:	fe 91 fe d7 	brne	8000691c <_vfprintf_r+0x1c4>
80006b72:	e0 49 00 20 	cp.w	r9,32
80006b76:	e0 89 0d 6f 	brgt	80008654 <_vfprintf_r+0x1efc>
80006b7a:	f2 c3 00 01 	sub	r3,r9,1
80006b7e:	30 19       	mov	r9,1
80006b80:	50 39       	stdsp	sp[0xc],r9
80006b82:	cc ba       	rjmp	80006918 <_vfprintf_r+0x1c0>
80006b84:	a3 b5       	sbr	r5,0x3
80006b86:	cc 9a       	rjmp	80006918 <_vfprintf_r+0x1c0>
80006b88:	a7 a5       	sbr	r5,0x6
80006b8a:	cc 7a       	rjmp	80006918 <_vfprintf_r+0x1c0>
80006b8c:	0a 98       	mov	r8,r5
80006b8e:	a5 b5       	sbr	r5,0x5
80006b90:	a5 a8       	sbr	r8,0x4
80006b92:	0f 89       	ld.ub	r9,r7[0x0]
80006b94:	36 ce       	mov	lr,108
80006b96:	fc 09 18 00 	cp.b	r9,lr
80006b9a:	f7 b7 00 ff 	subeq	r7,-1
80006b9e:	f0 05 17 10 	movne	r5,r8
80006ba2:	cb ba       	rjmp	80006918 <_vfprintf_r+0x1c0>
80006ba4:	a5 b5       	sbr	r5,0x5
80006ba6:	cb 9a       	rjmp	80006918 <_vfprintf_r+0x1c0>
80006ba8:	50 a7       	stdsp	sp[0x28],r7
80006baa:	50 80       	stdsp	sp[0x20],r0
80006bac:	0c 97       	mov	r7,r6
80006bae:	10 90       	mov	r0,r8
80006bb0:	06 96       	mov	r6,r3
80006bb2:	04 94       	mov	r4,r2
80006bb4:	40 93       	lddsp	r3,sp[0x24]
80006bb6:	02 92       	mov	r2,r1
80006bb8:	0e 99       	mov	r9,r7
80006bba:	40 41       	lddsp	r1,sp[0x10]
80006bbc:	fa f8 06 b4 	ld.w	r8,sp[1716]
80006bc0:	40 3c       	lddsp	r12,sp[0xc]
80006bc2:	58 0c       	cp.w	r12,0
80006bc4:	c1 d0       	breq	80006bfe <_vfprintf_r+0x4a6>
80006bc6:	10 36       	cp.w	r6,r8
80006bc8:	c0 64       	brge	80006bd4 <_vfprintf_r+0x47c>
80006bca:	fa cb f9 44 	sub	r11,sp,-1724
80006bce:	f6 06 00 36 	add	r6,r11,r6<<0x3
80006bd2:	c1 d8       	rjmp	80006c0c <_vfprintf_r+0x4b4>
80006bd4:	fa c8 f9 50 	sub	r8,sp,-1712
80006bd8:	1a d8       	st.w	--sp,r8
80006bda:	fa c8 fa b8 	sub	r8,sp,-1352
80006bde:	1a d8       	st.w	--sp,r8
80006be0:	fa c8 fb b4 	sub	r8,sp,-1100
80006be4:	1a d8       	st.w	--sp,r8
80006be6:	fa c8 f9 40 	sub	r8,sp,-1728
80006bea:	fa c9 ff b4 	sub	r9,sp,-76
80006bee:	04 9a       	mov	r10,r2
80006bf0:	0c 9b       	mov	r11,r6
80006bf2:	08 9c       	mov	r12,r4
80006bf4:	fe b0 fc 1a 	rcall	80006428 <get_arg>
80006bf8:	2f dd       	sub	sp,-12
80006bfa:	19 b8       	ld.ub	r8,r12[0x3]
80006bfc:	c2 28       	rjmp	80006c40 <_vfprintf_r+0x4e8>
80006bfe:	2f f7       	sub	r7,-1
80006c00:	10 39       	cp.w	r9,r8
80006c02:	c0 84       	brge	80006c12 <_vfprintf_r+0x4ba>
80006c04:	fa ca f9 44 	sub	r10,sp,-1724
80006c08:	f4 06 00 36 	add	r6,r10,r6<<0x3
80006c0c:	ed 38 fd 8b 	ld.ub	r8,r6[-629]
80006c10:	c1 88       	rjmp	80006c40 <_vfprintf_r+0x4e8>
80006c12:	41 09       	lddsp	r9,sp[0x40]
80006c14:	59 f8       	cp.w	r8,31
80006c16:	e0 89 00 12 	brgt	80006c3a <_vfprintf_r+0x4e2>
80006c1a:	f2 ca ff fc 	sub	r10,r9,-4
80006c1e:	51 0a       	stdsp	sp[0x40],r10
80006c20:	72 09       	ld.w	r9,r9[0x0]
80006c22:	fa c6 f9 44 	sub	r6,sp,-1724
80006c26:	ec 08 00 3a 	add	r10,r6,r8<<0x3
80006c2a:	2f f8       	sub	r8,-1
80006c2c:	f5 49 fd 88 	st.w	r10[-632],r9
80006c30:	fb 48 06 b4 	st.w	sp[1716],r8
80006c34:	f1 d9 c0 08 	bfextu	r8,r9,0x0,0x8
80006c38:	c0 48       	rjmp	80006c40 <_vfprintf_r+0x4e8>
80006c3a:	13 b8       	ld.ub	r8,r9[0x3]
80006c3c:	2f c9       	sub	r9,-4
80006c3e:	51 09       	stdsp	sp[0x40],r9
80006c40:	fb 68 06 60 	st.b	sp[1632],r8
80006c44:	30 0e       	mov	lr,0
80006c46:	30 08       	mov	r8,0
80006c48:	30 12       	mov	r2,1
80006c4a:	fb 68 06 bb 	st.b	sp[1723],r8
80006c4e:	50 2e       	stdsp	sp[0x8],lr
80006c50:	e0 8f 08 ad 	bral	80007daa <_vfprintf_r+0x1652>
80006c54:	50 a7       	stdsp	sp[0x28],r7
80006c56:	50 80       	stdsp	sp[0x20],r0
80006c58:	0c 97       	mov	r7,r6
80006c5a:	04 94       	mov	r4,r2
80006c5c:	06 96       	mov	r6,r3
80006c5e:	02 92       	mov	r2,r1
80006c60:	40 93       	lddsp	r3,sp[0x24]
80006c62:	10 90       	mov	r0,r8
80006c64:	40 41       	lddsp	r1,sp[0x10]
80006c66:	a5 a5       	sbr	r5,0x4
80006c68:	c0 a8       	rjmp	80006c7c <_vfprintf_r+0x524>
80006c6a:	50 a7       	stdsp	sp[0x28],r7
80006c6c:	50 80       	stdsp	sp[0x20],r0
80006c6e:	0c 97       	mov	r7,r6
80006c70:	04 94       	mov	r4,r2
80006c72:	06 96       	mov	r6,r3
80006c74:	02 92       	mov	r2,r1
80006c76:	40 93       	lddsp	r3,sp[0x24]
80006c78:	10 90       	mov	r0,r8
80006c7a:	40 41       	lddsp	r1,sp[0x10]
80006c7c:	ed b5 00 05 	bld	r5,0x5
80006c80:	c5 11       	brne	80006d22 <_vfprintf_r+0x5ca>
80006c82:	fa f8 06 b4 	ld.w	r8,sp[1716]
80006c86:	40 3c       	lddsp	r12,sp[0xc]
80006c88:	58 0c       	cp.w	r12,0
80006c8a:	c1 e0       	breq	80006cc6 <_vfprintf_r+0x56e>
80006c8c:	10 36       	cp.w	r6,r8
80006c8e:	c0 64       	brge	80006c9a <_vfprintf_r+0x542>
80006c90:	fa cb f9 44 	sub	r11,sp,-1724
80006c94:	f6 06 00 36 	add	r6,r11,r6<<0x3
80006c98:	c2 08       	rjmp	80006cd8 <_vfprintf_r+0x580>
80006c9a:	fa c8 f9 50 	sub	r8,sp,-1712
80006c9e:	1a d8       	st.w	--sp,r8
80006ca0:	fa c8 fa b8 	sub	r8,sp,-1352
80006ca4:	0c 9b       	mov	r11,r6
80006ca6:	1a d8       	st.w	--sp,r8
80006ca8:	fa c8 fb b4 	sub	r8,sp,-1100
80006cac:	1a d8       	st.w	--sp,r8
80006cae:	fa c9 ff b4 	sub	r9,sp,-76
80006cb2:	fa c8 f9 40 	sub	r8,sp,-1728
80006cb6:	04 9a       	mov	r10,r2
80006cb8:	08 9c       	mov	r12,r4
80006cba:	fe b0 fb b7 	rcall	80006428 <get_arg>
80006cbe:	2f dd       	sub	sp,-12
80006cc0:	78 1b       	ld.w	r11,r12[0x4]
80006cc2:	78 09       	ld.w	r9,r12[0x0]
80006cc4:	c2 b8       	rjmp	80006d1a <_vfprintf_r+0x5c2>
80006cc6:	ee ca ff ff 	sub	r10,r7,-1
80006cca:	10 37       	cp.w	r7,r8
80006ccc:	c0 b4       	brge	80006ce2 <_vfprintf_r+0x58a>
80006cce:	fa c9 f9 44 	sub	r9,sp,-1724
80006cd2:	14 97       	mov	r7,r10
80006cd4:	f2 06 00 36 	add	r6,r9,r6<<0x3
80006cd8:	ec fb fd 8c 	ld.w	r11,r6[-628]
80006cdc:	ec f9 fd 88 	ld.w	r9,r6[-632]
80006ce0:	c1 d8       	rjmp	80006d1a <_vfprintf_r+0x5c2>
80006ce2:	41 09       	lddsp	r9,sp[0x40]
80006ce4:	59 f8       	cp.w	r8,31
80006ce6:	e0 89 00 14 	brgt	80006d0e <_vfprintf_r+0x5b6>
80006cea:	f2 cb ff f8 	sub	r11,r9,-8
80006cee:	51 0b       	stdsp	sp[0x40],r11
80006cf0:	fa c6 f9 44 	sub	r6,sp,-1724
80006cf4:	72 1b       	ld.w	r11,r9[0x4]
80006cf6:	ec 08 00 3c 	add	r12,r6,r8<<0x3
80006cfa:	72 09       	ld.w	r9,r9[0x0]
80006cfc:	f9 4b fd 8c 	st.w	r12[-628],r11
80006d00:	f9 49 fd 88 	st.w	r12[-632],r9
80006d04:	2f f8       	sub	r8,-1
80006d06:	14 97       	mov	r7,r10
80006d08:	fb 48 06 b4 	st.w	sp[1716],r8
80006d0c:	c0 78       	rjmp	80006d1a <_vfprintf_r+0x5c2>
80006d0e:	f2 c8 ff f8 	sub	r8,r9,-8
80006d12:	72 1b       	ld.w	r11,r9[0x4]
80006d14:	14 97       	mov	r7,r10
80006d16:	51 08       	stdsp	sp[0x40],r8
80006d18:	72 09       	ld.w	r9,r9[0x0]
80006d1a:	16 98       	mov	r8,r11
80006d1c:	fa e9 00 00 	st.d	sp[0],r8
80006d20:	ca e8       	rjmp	80006e7c <_vfprintf_r+0x724>
80006d22:	ed b5 00 04 	bld	r5,0x4
80006d26:	c1 71       	brne	80006d54 <_vfprintf_r+0x5fc>
80006d28:	fa f8 06 b4 	ld.w	r8,sp[1716]
80006d2c:	40 3e       	lddsp	lr,sp[0xc]
80006d2e:	58 0e       	cp.w	lr,0
80006d30:	c0 80       	breq	80006d40 <_vfprintf_r+0x5e8>
80006d32:	10 36       	cp.w	r6,r8
80006d34:	c6 94       	brge	80006e06 <_vfprintf_r+0x6ae>
80006d36:	fa cc f9 44 	sub	r12,sp,-1724
80006d3a:	f8 06 00 36 	add	r6,r12,r6<<0x3
80006d3e:	c8 28       	rjmp	80006e42 <_vfprintf_r+0x6ea>
80006d40:	ee ca ff ff 	sub	r10,r7,-1
80006d44:	10 37       	cp.w	r7,r8
80006d46:	e0 84 00 81 	brge	80006e48 <_vfprintf_r+0x6f0>
80006d4a:	fa cb f9 44 	sub	r11,sp,-1724
80006d4e:	f6 06 00 36 	add	r6,r11,r6<<0x3
80006d52:	c7 78       	rjmp	80006e40 <_vfprintf_r+0x6e8>
80006d54:	ed b5 00 06 	bld	r5,0x6
80006d58:	c4 b1       	brne	80006dee <_vfprintf_r+0x696>
80006d5a:	fa f8 06 b4 	ld.w	r8,sp[1716]
80006d5e:	40 3c       	lddsp	r12,sp[0xc]
80006d60:	58 0c       	cp.w	r12,0
80006d62:	c1 d0       	breq	80006d9c <_vfprintf_r+0x644>
80006d64:	10 36       	cp.w	r6,r8
80006d66:	c0 64       	brge	80006d72 <_vfprintf_r+0x61a>
80006d68:	fa cb f9 44 	sub	r11,sp,-1724
80006d6c:	f6 06 00 36 	add	r6,r11,r6<<0x3
80006d70:	c1 f8       	rjmp	80006dae <_vfprintf_r+0x656>
80006d72:	fa c8 f9 50 	sub	r8,sp,-1712
80006d76:	1a d8       	st.w	--sp,r8
80006d78:	fa c8 fa b8 	sub	r8,sp,-1352
80006d7c:	1a d8       	st.w	--sp,r8
80006d7e:	fa c8 fb b4 	sub	r8,sp,-1100
80006d82:	1a d8       	st.w	--sp,r8
80006d84:	fa c8 f9 40 	sub	r8,sp,-1728
80006d88:	fa c9 ff b4 	sub	r9,sp,-76
80006d8c:	04 9a       	mov	r10,r2
80006d8e:	0c 9b       	mov	r11,r6
80006d90:	08 9c       	mov	r12,r4
80006d92:	fe b0 fb 4b 	rcall	80006428 <get_arg>
80006d96:	2f dd       	sub	sp,-12
80006d98:	98 18       	ld.sh	r8,r12[0x2]
80006d9a:	c2 68       	rjmp	80006de6 <_vfprintf_r+0x68e>
80006d9c:	ee ca ff ff 	sub	r10,r7,-1
80006da0:	10 37       	cp.w	r7,r8
80006da2:	c0 94       	brge	80006db4 <_vfprintf_r+0x65c>
80006da4:	fa c9 f9 44 	sub	r9,sp,-1724
80006da8:	14 97       	mov	r7,r10
80006daa:	f2 06 00 36 	add	r6,r9,r6<<0x3
80006dae:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
80006db2:	c1 a8       	rjmp	80006de6 <_vfprintf_r+0x68e>
80006db4:	41 09       	lddsp	r9,sp[0x40]
80006db6:	59 f8       	cp.w	r8,31
80006db8:	e0 89 00 13 	brgt	80006dde <_vfprintf_r+0x686>
80006dbc:	f2 cb ff fc 	sub	r11,r9,-4
80006dc0:	51 0b       	stdsp	sp[0x40],r11
80006dc2:	72 09       	ld.w	r9,r9[0x0]
80006dc4:	fa c6 f9 44 	sub	r6,sp,-1724
80006dc8:	ec 08 00 3b 	add	r11,r6,r8<<0x3
80006dcc:	2f f8       	sub	r8,-1
80006dce:	f7 49 fd 88 	st.w	r11[-632],r9
80006dd2:	fb 48 06 b4 	st.w	sp[1716],r8
80006dd6:	14 97       	mov	r7,r10
80006dd8:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
80006ddc:	c0 58       	rjmp	80006de6 <_vfprintf_r+0x68e>
80006dde:	92 18       	ld.sh	r8,r9[0x2]
80006de0:	14 97       	mov	r7,r10
80006de2:	2f c9       	sub	r9,-4
80006de4:	51 09       	stdsp	sp[0x40],r9
80006de6:	50 18       	stdsp	sp[0x4],r8
80006de8:	bf 58       	asr	r8,0x1f
80006dea:	50 08       	stdsp	sp[0x0],r8
80006dec:	c4 88       	rjmp	80006e7c <_vfprintf_r+0x724>
80006dee:	fa f8 06 b4 	ld.w	r8,sp[1716]
80006df2:	40 3c       	lddsp	r12,sp[0xc]
80006df4:	58 0c       	cp.w	r12,0
80006df6:	c1 d0       	breq	80006e30 <_vfprintf_r+0x6d8>
80006df8:	10 36       	cp.w	r6,r8
80006dfa:	c0 64       	brge	80006e06 <_vfprintf_r+0x6ae>
80006dfc:	fa cb f9 44 	sub	r11,sp,-1724
80006e00:	f6 06 00 36 	add	r6,r11,r6<<0x3
80006e04:	c1 f8       	rjmp	80006e42 <_vfprintf_r+0x6ea>
80006e06:	fa c8 f9 50 	sub	r8,sp,-1712
80006e0a:	1a d8       	st.w	--sp,r8
80006e0c:	fa c8 fa b8 	sub	r8,sp,-1352
80006e10:	0c 9b       	mov	r11,r6
80006e12:	1a d8       	st.w	--sp,r8
80006e14:	fa c8 fb b4 	sub	r8,sp,-1100
80006e18:	04 9a       	mov	r10,r2
80006e1a:	1a d8       	st.w	--sp,r8
80006e1c:	08 9c       	mov	r12,r4
80006e1e:	fa c8 f9 40 	sub	r8,sp,-1728
80006e22:	fa c9 ff b4 	sub	r9,sp,-76
80006e26:	fe b0 fb 01 	rcall	80006428 <get_arg>
80006e2a:	2f dd       	sub	sp,-12
80006e2c:	78 0b       	ld.w	r11,r12[0x0]
80006e2e:	c2 48       	rjmp	80006e76 <_vfprintf_r+0x71e>
80006e30:	ee ca ff ff 	sub	r10,r7,-1
80006e34:	10 37       	cp.w	r7,r8
80006e36:	c0 94       	brge	80006e48 <_vfprintf_r+0x6f0>
80006e38:	fa c9 f9 44 	sub	r9,sp,-1724
80006e3c:	f2 06 00 36 	add	r6,r9,r6<<0x3
80006e40:	14 97       	mov	r7,r10
80006e42:	ec fb fd 88 	ld.w	r11,r6[-632]
80006e46:	c1 88       	rjmp	80006e76 <_vfprintf_r+0x71e>
80006e48:	41 09       	lddsp	r9,sp[0x40]
80006e4a:	59 f8       	cp.w	r8,31
80006e4c:	e0 89 00 11 	brgt	80006e6e <_vfprintf_r+0x716>
80006e50:	f2 cb ff fc 	sub	r11,r9,-4
80006e54:	51 0b       	stdsp	sp[0x40],r11
80006e56:	fa c6 f9 44 	sub	r6,sp,-1724
80006e5a:	72 0b       	ld.w	r11,r9[0x0]
80006e5c:	ec 08 00 39 	add	r9,r6,r8<<0x3
80006e60:	f3 4b fd 88 	st.w	r9[-632],r11
80006e64:	2f f8       	sub	r8,-1
80006e66:	14 97       	mov	r7,r10
80006e68:	fb 48 06 b4 	st.w	sp[1716],r8
80006e6c:	c0 58       	rjmp	80006e76 <_vfprintf_r+0x71e>
80006e6e:	72 0b       	ld.w	r11,r9[0x0]
80006e70:	14 97       	mov	r7,r10
80006e72:	2f c9       	sub	r9,-4
80006e74:	51 09       	stdsp	sp[0x40],r9
80006e76:	50 1b       	stdsp	sp[0x4],r11
80006e78:	bf 5b       	asr	r11,0x1f
80006e7a:	50 0b       	stdsp	sp[0x0],r11
80006e7c:	fa ea 00 00 	ld.d	r10,sp[0]
80006e80:	58 0a       	cp.w	r10,0
80006e82:	5c 2b       	cpc	r11
80006e84:	c0 e4       	brge	80006ea0 <_vfprintf_r+0x748>
80006e86:	30 08       	mov	r8,0
80006e88:	fa ea 00 00 	ld.d	r10,sp[0]
80006e8c:	30 09       	mov	r9,0
80006e8e:	f0 0a 01 0a 	sub	r10,r8,r10
80006e92:	f2 0b 01 4b 	sbc	r11,r9,r11
80006e96:	32 d8       	mov	r8,45
80006e98:	fa eb 00 00 	st.d	sp[0],r10
80006e9c:	fb 68 06 bb 	st.b	sp[1723],r8
80006ea0:	30 18       	mov	r8,1
80006ea2:	e0 8f 06 fa 	bral	80007c96 <_vfprintf_r+0x153e>
80006ea6:	50 a7       	stdsp	sp[0x28],r7
80006ea8:	50 80       	stdsp	sp[0x20],r0
80006eaa:	0c 97       	mov	r7,r6
80006eac:	04 94       	mov	r4,r2
80006eae:	06 96       	mov	r6,r3
80006eb0:	02 92       	mov	r2,r1
80006eb2:	40 93       	lddsp	r3,sp[0x24]
80006eb4:	10 90       	mov	r0,r8
80006eb6:	40 41       	lddsp	r1,sp[0x10]
80006eb8:	0e 99       	mov	r9,r7
80006eba:	ed b5 00 03 	bld	r5,0x3
80006ebe:	c4 11       	brne	80006f40 <_vfprintf_r+0x7e8>
80006ec0:	fa f8 06 b4 	ld.w	r8,sp[1716]
80006ec4:	40 3a       	lddsp	r10,sp[0xc]
80006ec6:	58 0a       	cp.w	r10,0
80006ec8:	c1 90       	breq	80006efa <_vfprintf_r+0x7a2>
80006eca:	10 36       	cp.w	r6,r8
80006ecc:	c6 45       	brlt	80006f94 <_vfprintf_r+0x83c>
80006ece:	fa c8 f9 50 	sub	r8,sp,-1712
80006ed2:	1a d8       	st.w	--sp,r8
80006ed4:	fa c8 fa b8 	sub	r8,sp,-1352
80006ed8:	1a d8       	st.w	--sp,r8
80006eda:	fa c8 fb b4 	sub	r8,sp,-1100
80006ede:	0c 9b       	mov	r11,r6
80006ee0:	1a d8       	st.w	--sp,r8
80006ee2:	04 9a       	mov	r10,r2
80006ee4:	fa c8 f9 40 	sub	r8,sp,-1728
80006ee8:	fa c9 ff b4 	sub	r9,sp,-76
80006eec:	08 9c       	mov	r12,r4
80006eee:	fe b0 fa 9d 	rcall	80006428 <get_arg>
80006ef2:	2f dd       	sub	sp,-12
80006ef4:	78 16       	ld.w	r6,r12[0x4]
80006ef6:	50 76       	stdsp	sp[0x1c],r6
80006ef8:	c4 88       	rjmp	80006f88 <_vfprintf_r+0x830>
80006efa:	2f f7       	sub	r7,-1
80006efc:	10 39       	cp.w	r9,r8
80006efe:	c0 c4       	brge	80006f16 <_vfprintf_r+0x7be>
80006f00:	fa ce f9 44 	sub	lr,sp,-1724
80006f04:	fc 06 00 36 	add	r6,lr,r6<<0x3
80006f08:	ec fc fd 8c 	ld.w	r12,r6[-628]
80006f0c:	50 7c       	stdsp	sp[0x1c],r12
80006f0e:	ec f6 fd 88 	ld.w	r6,r6[-632]
80006f12:	50 56       	stdsp	sp[0x14],r6
80006f14:	c6 68       	rjmp	80006fe0 <_vfprintf_r+0x888>
80006f16:	41 09       	lddsp	r9,sp[0x40]
80006f18:	59 f8       	cp.w	r8,31
80006f1a:	e0 89 00 10 	brgt	80006f3a <_vfprintf_r+0x7e2>
80006f1e:	f2 ca ff f8 	sub	r10,r9,-8
80006f22:	72 1b       	ld.w	r11,r9[0x4]
80006f24:	51 0a       	stdsp	sp[0x40],r10
80006f26:	72 09       	ld.w	r9,r9[0x0]
80006f28:	fa ca f9 44 	sub	r10,sp,-1724
80006f2c:	50 7b       	stdsp	sp[0x1c],r11
80006f2e:	50 59       	stdsp	sp[0x14],r9
80006f30:	f4 08 00 39 	add	r9,r10,r8<<0x3
80006f34:	40 5b       	lddsp	r11,sp[0x14]
80006f36:	40 7a       	lddsp	r10,sp[0x1c]
80006f38:	c4 78       	rjmp	80006fc6 <_vfprintf_r+0x86e>
80006f3a:	72 18       	ld.w	r8,r9[0x4]
80006f3c:	50 78       	stdsp	sp[0x1c],r8
80006f3e:	c4 c8       	rjmp	80006fd6 <_vfprintf_r+0x87e>
80006f40:	fa f8 06 b4 	ld.w	r8,sp[1716]
80006f44:	40 3e       	lddsp	lr,sp[0xc]
80006f46:	58 0e       	cp.w	lr,0
80006f48:	c2 30       	breq	80006f8e <_vfprintf_r+0x836>
80006f4a:	10 36       	cp.w	r6,r8
80006f4c:	c0 94       	brge	80006f5e <_vfprintf_r+0x806>
80006f4e:	fa cc f9 44 	sub	r12,sp,-1724
80006f52:	f8 06 00 36 	add	r6,r12,r6<<0x3
80006f56:	ec fb fd 8c 	ld.w	r11,r6[-628]
80006f5a:	50 7b       	stdsp	sp[0x1c],r11
80006f5c:	cd 9b       	rjmp	80006f0e <_vfprintf_r+0x7b6>
80006f5e:	fa c8 f9 50 	sub	r8,sp,-1712
80006f62:	1a d8       	st.w	--sp,r8
80006f64:	fa c8 fa b8 	sub	r8,sp,-1352
80006f68:	04 9a       	mov	r10,r2
80006f6a:	1a d8       	st.w	--sp,r8
80006f6c:	fa c8 fb b4 	sub	r8,sp,-1100
80006f70:	0c 9b       	mov	r11,r6
80006f72:	1a d8       	st.w	--sp,r8
80006f74:	08 9c       	mov	r12,r4
80006f76:	fa c8 f9 40 	sub	r8,sp,-1728
80006f7a:	fa c9 ff b4 	sub	r9,sp,-76
80006f7e:	fe b0 fa 55 	rcall	80006428 <get_arg>
80006f82:	2f dd       	sub	sp,-12
80006f84:	78 1a       	ld.w	r10,r12[0x4]
80006f86:	50 7a       	stdsp	sp[0x1c],r10
80006f88:	78 0c       	ld.w	r12,r12[0x0]
80006f8a:	50 5c       	stdsp	sp[0x14],r12
80006f8c:	c2 a8       	rjmp	80006fe0 <_vfprintf_r+0x888>
80006f8e:	2f f7       	sub	r7,-1
80006f90:	10 39       	cp.w	r9,r8
80006f92:	c0 94       	brge	80006fa4 <_vfprintf_r+0x84c>
80006f94:	fa c9 f9 44 	sub	r9,sp,-1724
80006f98:	f2 06 00 36 	add	r6,r9,r6<<0x3
80006f9c:	ec f8 fd 8c 	ld.w	r8,r6[-628]
80006fa0:	50 78       	stdsp	sp[0x1c],r8
80006fa2:	cb 6b       	rjmp	80006f0e <_vfprintf_r+0x7b6>
80006fa4:	41 09       	lddsp	r9,sp[0x40]
80006fa6:	59 f8       	cp.w	r8,31
80006fa8:	e0 89 00 15 	brgt	80006fd2 <_vfprintf_r+0x87a>
80006fac:	f2 ca ff f8 	sub	r10,r9,-8
80006fb0:	72 16       	ld.w	r6,r9[0x4]
80006fb2:	72 09       	ld.w	r9,r9[0x0]
80006fb4:	51 0a       	stdsp	sp[0x40],r10
80006fb6:	50 59       	stdsp	sp[0x14],r9
80006fb8:	fa ce f9 44 	sub	lr,sp,-1724
80006fbc:	50 76       	stdsp	sp[0x1c],r6
80006fbe:	fc 08 00 39 	add	r9,lr,r8<<0x3
80006fc2:	40 5b       	lddsp	r11,sp[0x14]
80006fc4:	0c 9a       	mov	r10,r6
80006fc6:	f2 eb fd 88 	st.d	r9[-632],r10
80006fca:	2f f8       	sub	r8,-1
80006fcc:	fb 48 06 b4 	st.w	sp[1716],r8
80006fd0:	c0 88       	rjmp	80006fe0 <_vfprintf_r+0x888>
80006fd2:	72 1c       	ld.w	r12,r9[0x4]
80006fd4:	50 7c       	stdsp	sp[0x1c],r12
80006fd6:	f2 c8 ff f8 	sub	r8,r9,-8
80006fda:	51 08       	stdsp	sp[0x40],r8
80006fdc:	72 09       	ld.w	r9,r9[0x0]
80006fde:	50 59       	stdsp	sp[0x14],r9
80006fe0:	40 5b       	lddsp	r11,sp[0x14]
80006fe2:	40 7a       	lddsp	r10,sp[0x1c]
80006fe4:	e0 a0 1c de 	rcall	8000a9a0 <__isinfd>
80006fe8:	18 96       	mov	r6,r12
80006fea:	c1 70       	breq	80007018 <_vfprintf_r+0x8c0>
80006fec:	30 08       	mov	r8,0
80006fee:	30 09       	mov	r9,0
80006ff0:	40 5b       	lddsp	r11,sp[0x14]
80006ff2:	40 7a       	lddsp	r10,sp[0x1c]
80006ff4:	e0 a0 20 74 	rcall	8000b0dc <__avr32_f64_cmp_lt>
80006ff8:	c0 40       	breq	80007000 <_vfprintf_r+0x8a8>
80006ffa:	32 d8       	mov	r8,45
80006ffc:	fb 68 06 bb 	st.b	sp[1723],r8
80007000:	fe c8 b4 f8 	sub	r8,pc,-19208
80007004:	fe c6 b4 f8 	sub	r6,pc,-19208
80007008:	a7 d5       	cbr	r5,0x7
8000700a:	e0 40 00 47 	cp.w	r0,71
8000700e:	f0 06 17 a0 	movle	r6,r8
80007012:	30 32       	mov	r2,3
80007014:	e0 8f 06 ce 	bral	80007db0 <_vfprintf_r+0x1658>
80007018:	40 5b       	lddsp	r11,sp[0x14]
8000701a:	40 7a       	lddsp	r10,sp[0x1c]
8000701c:	e0 a0 1c d7 	rcall	8000a9ca <__isnand>
80007020:	c0 e0       	breq	8000703c <_vfprintf_r+0x8e4>
80007022:	50 26       	stdsp	sp[0x8],r6
80007024:	fe c8 b5 14 	sub	r8,pc,-19180
80007028:	fe c6 b5 14 	sub	r6,pc,-19180
8000702c:	a7 d5       	cbr	r5,0x7
8000702e:	e0 40 00 47 	cp.w	r0,71
80007032:	f0 06 17 a0 	movle	r6,r8
80007036:	30 32       	mov	r2,3
80007038:	e0 8f 06 c2 	bral	80007dbc <_vfprintf_r+0x1664>
8000703c:	40 2a       	lddsp	r10,sp[0x8]
8000703e:	5b fa       	cp.w	r10,-1
80007040:	c0 41       	brne	80007048 <_vfprintf_r+0x8f0>
80007042:	30 69       	mov	r9,6
80007044:	50 29       	stdsp	sp[0x8],r9
80007046:	c1 18       	rjmp	80007068 <_vfprintf_r+0x910>
80007048:	e0 40 00 47 	cp.w	r0,71
8000704c:	5f 09       	sreq	r9
8000704e:	e0 40 00 67 	cp.w	r0,103
80007052:	5f 08       	sreq	r8
80007054:	f3 e8 10 08 	or	r8,r9,r8
80007058:	f8 08 18 00 	cp.b	r8,r12
8000705c:	c0 60       	breq	80007068 <_vfprintf_r+0x910>
8000705e:	40 28       	lddsp	r8,sp[0x8]
80007060:	58 08       	cp.w	r8,0
80007062:	f9 b8 00 01 	moveq	r8,1
80007066:	50 28       	stdsp	sp[0x8],r8
80007068:	40 78       	lddsp	r8,sp[0x1c]
8000706a:	40 59       	lddsp	r9,sp[0x14]
8000706c:	fa e9 06 94 	st.d	sp[1684],r8
80007070:	a9 a5       	sbr	r5,0x8
80007072:	fa f8 06 94 	ld.w	r8,sp[1684]
80007076:	58 08       	cp.w	r8,0
80007078:	c0 65       	brlt	80007084 <_vfprintf_r+0x92c>
8000707a:	40 5e       	lddsp	lr,sp[0x14]
8000707c:	30 0c       	mov	r12,0
8000707e:	50 6e       	stdsp	sp[0x18],lr
80007080:	50 9c       	stdsp	sp[0x24],r12
80007082:	c0 78       	rjmp	80007090 <_vfprintf_r+0x938>
80007084:	40 5b       	lddsp	r11,sp[0x14]
80007086:	32 da       	mov	r10,45
80007088:	ee 1b 80 00 	eorh	r11,0x8000
8000708c:	50 9a       	stdsp	sp[0x24],r10
8000708e:	50 6b       	stdsp	sp[0x18],r11
80007090:	e0 40 00 46 	cp.w	r0,70
80007094:	5f 09       	sreq	r9
80007096:	e0 40 00 66 	cp.w	r0,102
8000709a:	5f 08       	sreq	r8
8000709c:	f3 e8 10 08 	or	r8,r9,r8
800070a0:	50 48       	stdsp	sp[0x10],r8
800070a2:	c0 40       	breq	800070aa <_vfprintf_r+0x952>
800070a4:	40 22       	lddsp	r2,sp[0x8]
800070a6:	30 39       	mov	r9,3
800070a8:	c1 08       	rjmp	800070c8 <_vfprintf_r+0x970>
800070aa:	e0 40 00 45 	cp.w	r0,69
800070ae:	5f 09       	sreq	r9
800070b0:	e0 40 00 65 	cp.w	r0,101
800070b4:	5f 08       	sreq	r8
800070b6:	40 22       	lddsp	r2,sp[0x8]
800070b8:	10 49       	or	r9,r8
800070ba:	2f f2       	sub	r2,-1
800070bc:	40 46       	lddsp	r6,sp[0x10]
800070be:	ec 09 18 00 	cp.b	r9,r6
800070c2:	fb f2 00 02 	ld.weq	r2,sp[0x8]
800070c6:	30 29       	mov	r9,2
800070c8:	fa c8 f9 5c 	sub	r8,sp,-1700
800070cc:	1a d8       	st.w	--sp,r8
800070ce:	fa c8 f9 54 	sub	r8,sp,-1708
800070d2:	1a d8       	st.w	--sp,r8
800070d4:	fa c8 f9 4c 	sub	r8,sp,-1716
800070d8:	08 9c       	mov	r12,r4
800070da:	1a d8       	st.w	--sp,r8
800070dc:	04 98       	mov	r8,r2
800070de:	40 9b       	lddsp	r11,sp[0x24]
800070e0:	40 aa       	lddsp	r10,sp[0x28]
800070e2:	e0 a0 0b c3 	rcall	80008868 <_dtoa_r>
800070e6:	e0 40 00 47 	cp.w	r0,71
800070ea:	5f 19       	srne	r9
800070ec:	e0 40 00 67 	cp.w	r0,103
800070f0:	5f 18       	srne	r8
800070f2:	18 96       	mov	r6,r12
800070f4:	2f dd       	sub	sp,-12
800070f6:	f3 e8 00 08 	and	r8,r9,r8
800070fa:	c0 41       	brne	80007102 <_vfprintf_r+0x9aa>
800070fc:	ed b5 00 00 	bld	r5,0x0
80007100:	c3 01       	brne	80007160 <_vfprintf_r+0xa08>
80007102:	ec 02 00 0e 	add	lr,r6,r2
80007106:	50 3e       	stdsp	sp[0xc],lr
80007108:	40 4c       	lddsp	r12,sp[0x10]
8000710a:	58 0c       	cp.w	r12,0
8000710c:	c1 50       	breq	80007136 <_vfprintf_r+0x9de>
8000710e:	0d 89       	ld.ub	r9,r6[0x0]
80007110:	33 08       	mov	r8,48
80007112:	f0 09 18 00 	cp.b	r9,r8
80007116:	c0 b1       	brne	8000712c <_vfprintf_r+0x9d4>
80007118:	30 08       	mov	r8,0
8000711a:	30 09       	mov	r9,0
8000711c:	40 6b       	lddsp	r11,sp[0x18]
8000711e:	40 7a       	lddsp	r10,sp[0x1c]
80007120:	e0 a0 1f 97 	rcall	8000b04e <__avr32_f64_cmp_eq>
80007124:	fb b2 00 01 	rsubeq	r2,1
80007128:	fb f2 0b ab 	st.weq	sp[0x6ac],r2
8000712c:	40 3b       	lddsp	r11,sp[0xc]
8000712e:	fa f8 06 ac 	ld.w	r8,sp[1708]
80007132:	10 0b       	add	r11,r8
80007134:	50 3b       	stdsp	sp[0xc],r11
80007136:	40 6b       	lddsp	r11,sp[0x18]
80007138:	30 08       	mov	r8,0
8000713a:	30 09       	mov	r9,0
8000713c:	40 7a       	lddsp	r10,sp[0x1c]
8000713e:	e0 a0 1f 88 	rcall	8000b04e <__avr32_f64_cmp_eq>
80007142:	c0 90       	breq	80007154 <_vfprintf_r+0x9fc>
80007144:	40 3a       	lddsp	r10,sp[0xc]
80007146:	fb 4a 06 a4 	st.w	sp[1700],r10
8000714a:	c0 58       	rjmp	80007154 <_vfprintf_r+0x9fc>
8000714c:	10 c9       	st.b	r8++,r9
8000714e:	fb 48 06 a4 	st.w	sp[1700],r8
80007152:	c0 28       	rjmp	80007156 <_vfprintf_r+0x9fe>
80007154:	33 09       	mov	r9,48
80007156:	fa f8 06 a4 	ld.w	r8,sp[1700]
8000715a:	40 3e       	lddsp	lr,sp[0xc]
8000715c:	1c 38       	cp.w	r8,lr
8000715e:	cf 73       	brcs	8000714c <_vfprintf_r+0x9f4>
80007160:	e0 40 00 47 	cp.w	r0,71
80007164:	5f 09       	sreq	r9
80007166:	e0 40 00 67 	cp.w	r0,103
8000716a:	5f 08       	sreq	r8
8000716c:	f3 e8 10 08 	or	r8,r9,r8
80007170:	fa f9 06 a4 	ld.w	r9,sp[1700]
80007174:	0c 19       	sub	r9,r6
80007176:	50 69       	stdsp	sp[0x18],r9
80007178:	58 08       	cp.w	r8,0
8000717a:	c0 b0       	breq	80007190 <_vfprintf_r+0xa38>
8000717c:	fa f8 06 ac 	ld.w	r8,sp[1708]
80007180:	5b d8       	cp.w	r8,-3
80007182:	c0 55       	brlt	8000718c <_vfprintf_r+0xa34>
80007184:	40 2c       	lddsp	r12,sp[0x8]
80007186:	18 38       	cp.w	r8,r12
80007188:	e0 8a 00 6a 	brle	8000725c <_vfprintf_r+0xb04>
8000718c:	20 20       	sub	r0,2
8000718e:	c0 58       	rjmp	80007198 <_vfprintf_r+0xa40>
80007190:	e0 40 00 65 	cp.w	r0,101
80007194:	e0 89 00 46 	brgt	80007220 <_vfprintf_r+0xac8>
80007198:	fa fb 06 ac 	ld.w	r11,sp[1708]
8000719c:	fb 60 06 9c 	st.b	sp[1692],r0
800071a0:	20 1b       	sub	r11,1
800071a2:	fb 4b 06 ac 	st.w	sp[1708],r11
800071a6:	c0 47       	brpl	800071ae <_vfprintf_r+0xa56>
800071a8:	5c 3b       	neg	r11
800071aa:	32 d8       	mov	r8,45
800071ac:	c0 28       	rjmp	800071b0 <_vfprintf_r+0xa58>
800071ae:	32 b8       	mov	r8,43
800071b0:	fb 68 06 9d 	st.b	sp[1693],r8
800071b4:	58 9b       	cp.w	r11,9
800071b6:	e0 8a 00 1d 	brle	800071f0 <_vfprintf_r+0xa98>
800071ba:	fa c9 fa 35 	sub	r9,sp,-1483
800071be:	30 aa       	mov	r10,10
800071c0:	12 98       	mov	r8,r9
800071c2:	0e 9c       	mov	r12,r7
800071c4:	0c 92       	mov	r2,r6
800071c6:	f6 0a 0c 06 	divs	r6,r11,r10
800071ca:	0e 9b       	mov	r11,r7
800071cc:	2d 0b       	sub	r11,-48
800071ce:	10 fb       	st.b	--r8,r11
800071d0:	0c 9b       	mov	r11,r6
800071d2:	58 96       	cp.w	r6,9
800071d4:	fe 99 ff f9 	brgt	800071c6 <_vfprintf_r+0xa6e>
800071d8:	2d 0b       	sub	r11,-48
800071da:	18 97       	mov	r7,r12
800071dc:	04 96       	mov	r6,r2
800071de:	10 fb       	st.b	--r8,r11
800071e0:	fa ca f9 62 	sub	r10,sp,-1694
800071e4:	c0 38       	rjmp	800071ea <_vfprintf_r+0xa92>
800071e6:	11 3b       	ld.ub	r11,r8++
800071e8:	14 cb       	st.b	r10++,r11
800071ea:	12 38       	cp.w	r8,r9
800071ec:	cf d3       	brcs	800071e6 <_vfprintf_r+0xa8e>
800071ee:	c0 98       	rjmp	80007200 <_vfprintf_r+0xaa8>
800071f0:	2d 0b       	sub	r11,-48
800071f2:	33 08       	mov	r8,48
800071f4:	fb 6b 06 9f 	st.b	sp[1695],r11
800071f8:	fb 68 06 9e 	st.b	sp[1694],r8
800071fc:	fa ca f9 60 	sub	r10,sp,-1696
80007200:	fa c8 f9 64 	sub	r8,sp,-1692
80007204:	f4 08 01 08 	sub	r8,r10,r8
80007208:	50 e8       	stdsp	sp[0x38],r8
8000720a:	10 92       	mov	r2,r8
8000720c:	40 6b       	lddsp	r11,sp[0x18]
8000720e:	16 02       	add	r2,r11
80007210:	58 1b       	cp.w	r11,1
80007212:	e0 89 00 05 	brgt	8000721c <_vfprintf_r+0xac4>
80007216:	ed b5 00 00 	bld	r5,0x0
8000721a:	c3 51       	brne	80007284 <_vfprintf_r+0xb2c>
8000721c:	2f f2       	sub	r2,-1
8000721e:	c3 38       	rjmp	80007284 <_vfprintf_r+0xb2c>
80007220:	e0 40 00 66 	cp.w	r0,102
80007224:	c1 c1       	brne	8000725c <_vfprintf_r+0xb04>
80007226:	fa f2 06 ac 	ld.w	r2,sp[1708]
8000722a:	58 02       	cp.w	r2,0
8000722c:	e0 8a 00 0c 	brle	80007244 <_vfprintf_r+0xaec>
80007230:	40 2a       	lddsp	r10,sp[0x8]
80007232:	58 0a       	cp.w	r10,0
80007234:	c0 41       	brne	8000723c <_vfprintf_r+0xae4>
80007236:	ed b5 00 00 	bld	r5,0x0
8000723a:	c2 51       	brne	80007284 <_vfprintf_r+0xb2c>
8000723c:	2f f2       	sub	r2,-1
8000723e:	40 29       	lddsp	r9,sp[0x8]
80007240:	12 02       	add	r2,r9
80007242:	c0 b8       	rjmp	80007258 <_vfprintf_r+0xb00>
80007244:	40 28       	lddsp	r8,sp[0x8]
80007246:	58 08       	cp.w	r8,0
80007248:	c0 61       	brne	80007254 <_vfprintf_r+0xafc>
8000724a:	ed b5 00 00 	bld	r5,0x0
8000724e:	c0 30       	breq	80007254 <_vfprintf_r+0xafc>
80007250:	30 12       	mov	r2,1
80007252:	c1 98       	rjmp	80007284 <_vfprintf_r+0xb2c>
80007254:	40 22       	lddsp	r2,sp[0x8]
80007256:	2f e2       	sub	r2,-2
80007258:	36 60       	mov	r0,102
8000725a:	c1 58       	rjmp	80007284 <_vfprintf_r+0xb2c>
8000725c:	fa f2 06 ac 	ld.w	r2,sp[1708]
80007260:	40 6e       	lddsp	lr,sp[0x18]
80007262:	1c 32       	cp.w	r2,lr
80007264:	c0 65       	brlt	80007270 <_vfprintf_r+0xb18>
80007266:	ed b5 00 00 	bld	r5,0x0
8000726a:	f7 b2 00 ff 	subeq	r2,-1
8000726e:	c0 a8       	rjmp	80007282 <_vfprintf_r+0xb2a>
80007270:	e4 08 11 02 	rsub	r8,r2,2
80007274:	40 6c       	lddsp	r12,sp[0x18]
80007276:	58 02       	cp.w	r2,0
80007278:	f0 02 17 a0 	movle	r2,r8
8000727c:	f9 b2 09 01 	movgt	r2,1
80007280:	18 02       	add	r2,r12
80007282:	36 70       	mov	r0,103
80007284:	40 9b       	lddsp	r11,sp[0x24]
80007286:	58 0b       	cp.w	r11,0
80007288:	e0 80 05 94 	breq	80007db0 <_vfprintf_r+0x1658>
8000728c:	32 d8       	mov	r8,45
8000728e:	fb 68 06 bb 	st.b	sp[1723],r8
80007292:	e0 8f 05 93 	bral	80007db8 <_vfprintf_r+0x1660>
80007296:	50 a7       	stdsp	sp[0x28],r7
80007298:	04 94       	mov	r4,r2
8000729a:	0c 97       	mov	r7,r6
8000729c:	02 92       	mov	r2,r1
8000729e:	06 96       	mov	r6,r3
800072a0:	40 41       	lddsp	r1,sp[0x10]
800072a2:	40 93       	lddsp	r3,sp[0x24]
800072a4:	0e 99       	mov	r9,r7
800072a6:	ed b5 00 05 	bld	r5,0x5
800072aa:	c4 81       	brne	8000733a <_vfprintf_r+0xbe2>
800072ac:	fa f8 06 b4 	ld.w	r8,sp[1716]
800072b0:	40 3e       	lddsp	lr,sp[0xc]
800072b2:	58 0e       	cp.w	lr,0
800072b4:	c1 d0       	breq	800072ee <_vfprintf_r+0xb96>
800072b6:	10 36       	cp.w	r6,r8
800072b8:	c0 64       	brge	800072c4 <_vfprintf_r+0xb6c>
800072ba:	fa cc f9 44 	sub	r12,sp,-1724
800072be:	f8 06 00 36 	add	r6,r12,r6<<0x3
800072c2:	c1 d8       	rjmp	800072fc <_vfprintf_r+0xba4>
800072c4:	fa c8 f9 50 	sub	r8,sp,-1712
800072c8:	1a d8       	st.w	--sp,r8
800072ca:	fa c8 fa b8 	sub	r8,sp,-1352
800072ce:	04 9a       	mov	r10,r2
800072d0:	1a d8       	st.w	--sp,r8
800072d2:	fa c8 fb b4 	sub	r8,sp,-1100
800072d6:	0c 9b       	mov	r11,r6
800072d8:	1a d8       	st.w	--sp,r8
800072da:	08 9c       	mov	r12,r4
800072dc:	fa c8 f9 40 	sub	r8,sp,-1728
800072e0:	fa c9 ff b4 	sub	r9,sp,-76
800072e4:	fe b0 f8 a2 	rcall	80006428 <get_arg>
800072e8:	2f dd       	sub	sp,-12
800072ea:	78 0a       	ld.w	r10,r12[0x0]
800072ec:	c2 08       	rjmp	8000732c <_vfprintf_r+0xbd4>
800072ee:	2f f7       	sub	r7,-1
800072f0:	10 39       	cp.w	r9,r8
800072f2:	c0 84       	brge	80007302 <_vfprintf_r+0xbaa>
800072f4:	fa cb f9 44 	sub	r11,sp,-1724
800072f8:	f6 06 00 36 	add	r6,r11,r6<<0x3
800072fc:	ec fa fd 88 	ld.w	r10,r6[-632]
80007300:	c1 68       	rjmp	8000732c <_vfprintf_r+0xbd4>
80007302:	41 09       	lddsp	r9,sp[0x40]
80007304:	59 f8       	cp.w	r8,31
80007306:	e0 89 00 10 	brgt	80007326 <_vfprintf_r+0xbce>
8000730a:	f2 ca ff fc 	sub	r10,r9,-4
8000730e:	51 0a       	stdsp	sp[0x40],r10
80007310:	fa c6 f9 44 	sub	r6,sp,-1724
80007314:	72 0a       	ld.w	r10,r9[0x0]
80007316:	ec 08 00 39 	add	r9,r6,r8<<0x3
8000731a:	f3 4a fd 88 	st.w	r9[-632],r10
8000731e:	2f f8       	sub	r8,-1
80007320:	fb 48 06 b4 	st.w	sp[1716],r8
80007324:	c0 48       	rjmp	8000732c <_vfprintf_r+0xbd4>
80007326:	72 0a       	ld.w	r10,r9[0x0]
80007328:	2f c9       	sub	r9,-4
8000732a:	51 09       	stdsp	sp[0x40],r9
8000732c:	40 be       	lddsp	lr,sp[0x2c]
8000732e:	1c 98       	mov	r8,lr
80007330:	95 1e       	st.w	r10[0x4],lr
80007332:	bf 58       	asr	r8,0x1f
80007334:	95 08       	st.w	r10[0x0],r8
80007336:	fe 9f fa 9f 	bral	80006874 <_vfprintf_r+0x11c>
8000733a:	ed b5 00 04 	bld	r5,0x4
8000733e:	c4 80       	breq	800073ce <_vfprintf_r+0xc76>
80007340:	e2 15 00 40 	andl	r5,0x40,COH
80007344:	c4 50       	breq	800073ce <_vfprintf_r+0xc76>
80007346:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000734a:	40 3c       	lddsp	r12,sp[0xc]
8000734c:	58 0c       	cp.w	r12,0
8000734e:	c1 d0       	breq	80007388 <_vfprintf_r+0xc30>
80007350:	10 36       	cp.w	r6,r8
80007352:	c0 64       	brge	8000735e <_vfprintf_r+0xc06>
80007354:	fa cb f9 44 	sub	r11,sp,-1724
80007358:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000735c:	c1 d8       	rjmp	80007396 <_vfprintf_r+0xc3e>
8000735e:	fa c8 f9 50 	sub	r8,sp,-1712
80007362:	1a d8       	st.w	--sp,r8
80007364:	fa c8 fa b8 	sub	r8,sp,-1352
80007368:	04 9a       	mov	r10,r2
8000736a:	1a d8       	st.w	--sp,r8
8000736c:	fa c8 fb b4 	sub	r8,sp,-1100
80007370:	0c 9b       	mov	r11,r6
80007372:	1a d8       	st.w	--sp,r8
80007374:	08 9c       	mov	r12,r4
80007376:	fa c8 f9 40 	sub	r8,sp,-1728
8000737a:	fa c9 ff b4 	sub	r9,sp,-76
8000737e:	fe b0 f8 55 	rcall	80006428 <get_arg>
80007382:	2f dd       	sub	sp,-12
80007384:	78 0a       	ld.w	r10,r12[0x0]
80007386:	c2 08       	rjmp	800073c6 <_vfprintf_r+0xc6e>
80007388:	2f f7       	sub	r7,-1
8000738a:	10 39       	cp.w	r9,r8
8000738c:	c0 84       	brge	8000739c <_vfprintf_r+0xc44>
8000738e:	fa ca f9 44 	sub	r10,sp,-1724
80007392:	f4 06 00 36 	add	r6,r10,r6<<0x3
80007396:	ec fa fd 88 	ld.w	r10,r6[-632]
8000739a:	c1 68       	rjmp	800073c6 <_vfprintf_r+0xc6e>
8000739c:	41 09       	lddsp	r9,sp[0x40]
8000739e:	59 f8       	cp.w	r8,31
800073a0:	e0 89 00 10 	brgt	800073c0 <_vfprintf_r+0xc68>
800073a4:	f2 ca ff fc 	sub	r10,r9,-4
800073a8:	51 0a       	stdsp	sp[0x40],r10
800073aa:	fa c6 f9 44 	sub	r6,sp,-1724
800073ae:	72 0a       	ld.w	r10,r9[0x0]
800073b0:	ec 08 00 39 	add	r9,r6,r8<<0x3
800073b4:	f3 4a fd 88 	st.w	r9[-632],r10
800073b8:	2f f8       	sub	r8,-1
800073ba:	fb 48 06 b4 	st.w	sp[1716],r8
800073be:	c0 48       	rjmp	800073c6 <_vfprintf_r+0xc6e>
800073c0:	72 0a       	ld.w	r10,r9[0x0]
800073c2:	2f c9       	sub	r9,-4
800073c4:	51 09       	stdsp	sp[0x40],r9
800073c6:	40 be       	lddsp	lr,sp[0x2c]
800073c8:	b4 0e       	st.h	r10[0x0],lr
800073ca:	fe 9f fa 55 	bral	80006874 <_vfprintf_r+0x11c>
800073ce:	fa f8 06 b4 	ld.w	r8,sp[1716]
800073d2:	40 3c       	lddsp	r12,sp[0xc]
800073d4:	58 0c       	cp.w	r12,0
800073d6:	c1 d0       	breq	80007410 <_vfprintf_r+0xcb8>
800073d8:	10 36       	cp.w	r6,r8
800073da:	c0 64       	brge	800073e6 <_vfprintf_r+0xc8e>
800073dc:	fa cb f9 44 	sub	r11,sp,-1724
800073e0:	f6 06 00 36 	add	r6,r11,r6<<0x3
800073e4:	c1 d8       	rjmp	8000741e <_vfprintf_r+0xcc6>
800073e6:	fa c8 f9 50 	sub	r8,sp,-1712
800073ea:	1a d8       	st.w	--sp,r8
800073ec:	fa c8 fa b8 	sub	r8,sp,-1352
800073f0:	04 9a       	mov	r10,r2
800073f2:	1a d8       	st.w	--sp,r8
800073f4:	fa c8 fb b4 	sub	r8,sp,-1100
800073f8:	0c 9b       	mov	r11,r6
800073fa:	1a d8       	st.w	--sp,r8
800073fc:	08 9c       	mov	r12,r4
800073fe:	fa c8 f9 40 	sub	r8,sp,-1728
80007402:	fa c9 ff b4 	sub	r9,sp,-76
80007406:	fe b0 f8 11 	rcall	80006428 <get_arg>
8000740a:	2f dd       	sub	sp,-12
8000740c:	78 0a       	ld.w	r10,r12[0x0]
8000740e:	c2 08       	rjmp	8000744e <_vfprintf_r+0xcf6>
80007410:	2f f7       	sub	r7,-1
80007412:	10 39       	cp.w	r9,r8
80007414:	c0 84       	brge	80007424 <_vfprintf_r+0xccc>
80007416:	fa ca f9 44 	sub	r10,sp,-1724
8000741a:	f4 06 00 36 	add	r6,r10,r6<<0x3
8000741e:	ec fa fd 88 	ld.w	r10,r6[-632]
80007422:	c1 68       	rjmp	8000744e <_vfprintf_r+0xcf6>
80007424:	41 09       	lddsp	r9,sp[0x40]
80007426:	59 f8       	cp.w	r8,31
80007428:	e0 89 00 10 	brgt	80007448 <_vfprintf_r+0xcf0>
8000742c:	f2 ca ff fc 	sub	r10,r9,-4
80007430:	51 0a       	stdsp	sp[0x40],r10
80007432:	fa c6 f9 44 	sub	r6,sp,-1724
80007436:	72 0a       	ld.w	r10,r9[0x0]
80007438:	ec 08 00 39 	add	r9,r6,r8<<0x3
8000743c:	f3 4a fd 88 	st.w	r9[-632],r10
80007440:	2f f8       	sub	r8,-1
80007442:	fb 48 06 b4 	st.w	sp[1716],r8
80007446:	c0 48       	rjmp	8000744e <_vfprintf_r+0xcf6>
80007448:	72 0a       	ld.w	r10,r9[0x0]
8000744a:	2f c9       	sub	r9,-4
8000744c:	51 09       	stdsp	sp[0x40],r9
8000744e:	40 be       	lddsp	lr,sp[0x2c]
80007450:	95 0e       	st.w	r10[0x0],lr
80007452:	fe 9f fa 11 	bral	80006874 <_vfprintf_r+0x11c>
80007456:	50 a7       	stdsp	sp[0x28],r7
80007458:	50 80       	stdsp	sp[0x20],r0
8000745a:	0c 97       	mov	r7,r6
8000745c:	04 94       	mov	r4,r2
8000745e:	06 96       	mov	r6,r3
80007460:	02 92       	mov	r2,r1
80007462:	40 93       	lddsp	r3,sp[0x24]
80007464:	10 90       	mov	r0,r8
80007466:	40 41       	lddsp	r1,sp[0x10]
80007468:	a5 a5       	sbr	r5,0x4
8000746a:	c0 a8       	rjmp	8000747e <_vfprintf_r+0xd26>
8000746c:	50 a7       	stdsp	sp[0x28],r7
8000746e:	50 80       	stdsp	sp[0x20],r0
80007470:	0c 97       	mov	r7,r6
80007472:	04 94       	mov	r4,r2
80007474:	06 96       	mov	r6,r3
80007476:	02 92       	mov	r2,r1
80007478:	40 93       	lddsp	r3,sp[0x24]
8000747a:	10 90       	mov	r0,r8
8000747c:	40 41       	lddsp	r1,sp[0x10]
8000747e:	ed b5 00 05 	bld	r5,0x5
80007482:	c5 d1       	brne	8000753c <_vfprintf_r+0xde4>
80007484:	fa f8 06 b4 	ld.w	r8,sp[1716]
80007488:	40 3c       	lddsp	r12,sp[0xc]
8000748a:	58 0c       	cp.w	r12,0
8000748c:	c2 60       	breq	800074d8 <_vfprintf_r+0xd80>
8000748e:	10 36       	cp.w	r6,r8
80007490:	c0 a4       	brge	800074a4 <_vfprintf_r+0xd4c>
80007492:	fa cb f9 44 	sub	r11,sp,-1724
80007496:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000749a:	ec e8 fd 88 	ld.d	r8,r6[-632]
8000749e:	fa e9 00 00 	st.d	sp[0],r8
800074a2:	c1 88       	rjmp	800074d2 <_vfprintf_r+0xd7a>
800074a4:	fa c8 f9 50 	sub	r8,sp,-1712
800074a8:	1a d8       	st.w	--sp,r8
800074aa:	fa c8 fa b8 	sub	r8,sp,-1352
800074ae:	04 9a       	mov	r10,r2
800074b0:	1a d8       	st.w	--sp,r8
800074b2:	0c 9b       	mov	r11,r6
800074b4:	fa c8 fb b4 	sub	r8,sp,-1100
800074b8:	08 9c       	mov	r12,r4
800074ba:	1a d8       	st.w	--sp,r8
800074bc:	fa c8 f9 40 	sub	r8,sp,-1728
800074c0:	fa c9 ff b4 	sub	r9,sp,-76
800074c4:	fe b0 f7 b2 	rcall	80006428 <get_arg>
800074c8:	2f dd       	sub	sp,-12
800074ca:	f8 ea 00 00 	ld.d	r10,r12[0]
800074ce:	fa eb 00 00 	st.d	sp[0],r10
800074d2:	30 08       	mov	r8,0
800074d4:	e0 8f 03 de 	bral	80007c90 <_vfprintf_r+0x1538>
800074d8:	ee ca ff ff 	sub	r10,r7,-1
800074dc:	10 37       	cp.w	r7,r8
800074de:	c0 b4       	brge	800074f4 <_vfprintf_r+0xd9c>
800074e0:	fa c9 f9 44 	sub	r9,sp,-1724
800074e4:	14 97       	mov	r7,r10
800074e6:	f2 06 00 36 	add	r6,r9,r6<<0x3
800074ea:	ec ea fd 88 	ld.d	r10,r6[-632]
800074ee:	fa eb 00 00 	st.d	sp[0],r10
800074f2:	c1 88       	rjmp	80007522 <_vfprintf_r+0xdca>
800074f4:	41 09       	lddsp	r9,sp[0x40]
800074f6:	59 f8       	cp.w	r8,31
800074f8:	e0 89 00 18 	brgt	80007528 <_vfprintf_r+0xdd0>
800074fc:	f2 e6 00 00 	ld.d	r6,r9[0]
80007500:	f2 cb ff f8 	sub	r11,r9,-8
80007504:	fa e7 00 00 	st.d	sp[0],r6
80007508:	51 0b       	stdsp	sp[0x40],r11
8000750a:	fa c6 f9 44 	sub	r6,sp,-1724
8000750e:	ec 08 00 39 	add	r9,r6,r8<<0x3
80007512:	fa e6 00 00 	ld.d	r6,sp[0]
80007516:	f2 e7 fd 88 	st.d	r9[-632],r6
8000751a:	2f f8       	sub	r8,-1
8000751c:	14 97       	mov	r7,r10
8000751e:	fb 48 06 b4 	st.w	sp[1716],r8
80007522:	40 38       	lddsp	r8,sp[0xc]
80007524:	e0 8f 03 b6 	bral	80007c90 <_vfprintf_r+0x1538>
80007528:	f2 e6 00 00 	ld.d	r6,r9[0]
8000752c:	40 38       	lddsp	r8,sp[0xc]
8000752e:	fa e7 00 00 	st.d	sp[0],r6
80007532:	2f 89       	sub	r9,-8
80007534:	14 97       	mov	r7,r10
80007536:	51 09       	stdsp	sp[0x40],r9
80007538:	e0 8f 03 ac 	bral	80007c90 <_vfprintf_r+0x1538>
8000753c:	ed b5 00 04 	bld	r5,0x4
80007540:	c1 61       	brne	8000756c <_vfprintf_r+0xe14>
80007542:	fa f8 06 b4 	ld.w	r8,sp[1716]
80007546:	40 3e       	lddsp	lr,sp[0xc]
80007548:	58 0e       	cp.w	lr,0
8000754a:	c0 80       	breq	8000755a <_vfprintf_r+0xe02>
8000754c:	10 36       	cp.w	r6,r8
8000754e:	c6 74       	brge	8000761c <_vfprintf_r+0xec4>
80007550:	fa cc f9 44 	sub	r12,sp,-1724
80007554:	f8 06 00 36 	add	r6,r12,r6<<0x3
80007558:	c8 08       	rjmp	80007658 <_vfprintf_r+0xf00>
8000755a:	ee ca ff ff 	sub	r10,r7,-1
8000755e:	10 37       	cp.w	r7,r8
80007560:	c7 f4       	brge	8000765e <_vfprintf_r+0xf06>
80007562:	fa cb f9 44 	sub	r11,sp,-1724
80007566:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000756a:	c7 68       	rjmp	80007656 <_vfprintf_r+0xefe>
8000756c:	ed b5 00 06 	bld	r5,0x6
80007570:	c4 a1       	brne	80007604 <_vfprintf_r+0xeac>
80007572:	fa f8 06 b4 	ld.w	r8,sp[1716]
80007576:	40 3c       	lddsp	r12,sp[0xc]
80007578:	58 0c       	cp.w	r12,0
8000757a:	c1 d0       	breq	800075b4 <_vfprintf_r+0xe5c>
8000757c:	10 36       	cp.w	r6,r8
8000757e:	c0 64       	brge	8000758a <_vfprintf_r+0xe32>
80007580:	fa cb f9 44 	sub	r11,sp,-1724
80007584:	f6 06 00 36 	add	r6,r11,r6<<0x3
80007588:	c1 f8       	rjmp	800075c6 <_vfprintf_r+0xe6e>
8000758a:	fa c8 f9 50 	sub	r8,sp,-1712
8000758e:	1a d8       	st.w	--sp,r8
80007590:	fa c8 fa b8 	sub	r8,sp,-1352
80007594:	1a d8       	st.w	--sp,r8
80007596:	fa c8 fb b4 	sub	r8,sp,-1100
8000759a:	1a d8       	st.w	--sp,r8
8000759c:	fa c8 f9 40 	sub	r8,sp,-1728
800075a0:	fa c9 ff b4 	sub	r9,sp,-76
800075a4:	04 9a       	mov	r10,r2
800075a6:	0c 9b       	mov	r11,r6
800075a8:	08 9c       	mov	r12,r4
800075aa:	fe b0 f7 3f 	rcall	80006428 <get_arg>
800075ae:	2f dd       	sub	sp,-12
800075b0:	98 18       	ld.sh	r8,r12[0x2]
800075b2:	c2 68       	rjmp	800075fe <_vfprintf_r+0xea6>
800075b4:	ee ca ff ff 	sub	r10,r7,-1
800075b8:	10 37       	cp.w	r7,r8
800075ba:	c0 94       	brge	800075cc <_vfprintf_r+0xe74>
800075bc:	fa c9 f9 44 	sub	r9,sp,-1724
800075c0:	14 97       	mov	r7,r10
800075c2:	f2 06 00 36 	add	r6,r9,r6<<0x3
800075c6:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
800075ca:	c1 a8       	rjmp	800075fe <_vfprintf_r+0xea6>
800075cc:	41 09       	lddsp	r9,sp[0x40]
800075ce:	59 f8       	cp.w	r8,31
800075d0:	e0 89 00 13 	brgt	800075f6 <_vfprintf_r+0xe9e>
800075d4:	f2 cb ff fc 	sub	r11,r9,-4
800075d8:	51 0b       	stdsp	sp[0x40],r11
800075da:	72 09       	ld.w	r9,r9[0x0]
800075dc:	fa c6 f9 44 	sub	r6,sp,-1724
800075e0:	ec 08 00 3b 	add	r11,r6,r8<<0x3
800075e4:	2f f8       	sub	r8,-1
800075e6:	f7 49 fd 88 	st.w	r11[-632],r9
800075ea:	fb 48 06 b4 	st.w	sp[1716],r8
800075ee:	14 97       	mov	r7,r10
800075f0:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
800075f4:	c0 58       	rjmp	800075fe <_vfprintf_r+0xea6>
800075f6:	92 18       	ld.sh	r8,r9[0x2]
800075f8:	14 97       	mov	r7,r10
800075fa:	2f c9       	sub	r9,-4
800075fc:	51 09       	stdsp	sp[0x40],r9
800075fe:	5c 78       	castu.h	r8
80007600:	50 18       	stdsp	sp[0x4],r8
80007602:	c4 68       	rjmp	8000768e <_vfprintf_r+0xf36>
80007604:	fa f8 06 b4 	ld.w	r8,sp[1716]
80007608:	40 3c       	lddsp	r12,sp[0xc]
8000760a:	58 0c       	cp.w	r12,0
8000760c:	c1 d0       	breq	80007646 <_vfprintf_r+0xeee>
8000760e:	10 36       	cp.w	r6,r8
80007610:	c0 64       	brge	8000761c <_vfprintf_r+0xec4>
80007612:	fa cb f9 44 	sub	r11,sp,-1724
80007616:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000761a:	c1 f8       	rjmp	80007658 <_vfprintf_r+0xf00>
8000761c:	fa c8 f9 50 	sub	r8,sp,-1712
80007620:	1a d8       	st.w	--sp,r8
80007622:	fa c8 fa b8 	sub	r8,sp,-1352
80007626:	0c 9b       	mov	r11,r6
80007628:	1a d8       	st.w	--sp,r8
8000762a:	fa c8 fb b4 	sub	r8,sp,-1100
8000762e:	04 9a       	mov	r10,r2
80007630:	1a d8       	st.w	--sp,r8
80007632:	08 9c       	mov	r12,r4
80007634:	fa c8 f9 40 	sub	r8,sp,-1728
80007638:	fa c9 ff b4 	sub	r9,sp,-76
8000763c:	fe b0 f6 f6 	rcall	80006428 <get_arg>
80007640:	2f dd       	sub	sp,-12
80007642:	78 0b       	ld.w	r11,r12[0x0]
80007644:	c2 48       	rjmp	8000768c <_vfprintf_r+0xf34>
80007646:	ee ca ff ff 	sub	r10,r7,-1
8000764a:	10 37       	cp.w	r7,r8
8000764c:	c0 94       	brge	8000765e <_vfprintf_r+0xf06>
8000764e:	fa c9 f9 44 	sub	r9,sp,-1724
80007652:	f2 06 00 36 	add	r6,r9,r6<<0x3
80007656:	14 97       	mov	r7,r10
80007658:	ec fb fd 88 	ld.w	r11,r6[-632]
8000765c:	c1 88       	rjmp	8000768c <_vfprintf_r+0xf34>
8000765e:	41 09       	lddsp	r9,sp[0x40]
80007660:	59 f8       	cp.w	r8,31
80007662:	e0 89 00 11 	brgt	80007684 <_vfprintf_r+0xf2c>
80007666:	f2 cb ff fc 	sub	r11,r9,-4
8000766a:	51 0b       	stdsp	sp[0x40],r11
8000766c:	fa c6 f9 44 	sub	r6,sp,-1724
80007670:	72 0b       	ld.w	r11,r9[0x0]
80007672:	ec 08 00 39 	add	r9,r6,r8<<0x3
80007676:	f3 4b fd 88 	st.w	r9[-632],r11
8000767a:	2f f8       	sub	r8,-1
8000767c:	14 97       	mov	r7,r10
8000767e:	fb 48 06 b4 	st.w	sp[1716],r8
80007682:	c0 58       	rjmp	8000768c <_vfprintf_r+0xf34>
80007684:	72 0b       	ld.w	r11,r9[0x0]
80007686:	14 97       	mov	r7,r10
80007688:	2f c9       	sub	r9,-4
8000768a:	51 09       	stdsp	sp[0x40],r9
8000768c:	50 1b       	stdsp	sp[0x4],r11
8000768e:	30 0e       	mov	lr,0
80007690:	50 0e       	stdsp	sp[0x0],lr
80007692:	1c 98       	mov	r8,lr
80007694:	e0 8f 02 fe 	bral	80007c90 <_vfprintf_r+0x1538>
80007698:	50 a7       	stdsp	sp[0x28],r7
8000769a:	50 80       	stdsp	sp[0x20],r0
8000769c:	0c 97       	mov	r7,r6
8000769e:	04 94       	mov	r4,r2
800076a0:	06 96       	mov	r6,r3
800076a2:	02 92       	mov	r2,r1
800076a4:	40 93       	lddsp	r3,sp[0x24]
800076a6:	40 41       	lddsp	r1,sp[0x10]
800076a8:	0e 99       	mov	r9,r7
800076aa:	fa f8 06 b4 	ld.w	r8,sp[1716]
800076ae:	40 3c       	lddsp	r12,sp[0xc]
800076b0:	58 0c       	cp.w	r12,0
800076b2:	c1 d0       	breq	800076ec <_vfprintf_r+0xf94>
800076b4:	10 36       	cp.w	r6,r8
800076b6:	c0 64       	brge	800076c2 <_vfprintf_r+0xf6a>
800076b8:	fa cb f9 44 	sub	r11,sp,-1724
800076bc:	f6 06 00 36 	add	r6,r11,r6<<0x3
800076c0:	c1 d8       	rjmp	800076fa <_vfprintf_r+0xfa2>
800076c2:	fa c8 f9 50 	sub	r8,sp,-1712
800076c6:	1a d8       	st.w	--sp,r8
800076c8:	fa c8 fa b8 	sub	r8,sp,-1352
800076cc:	1a d8       	st.w	--sp,r8
800076ce:	fa c8 fb b4 	sub	r8,sp,-1100
800076d2:	1a d8       	st.w	--sp,r8
800076d4:	fa c9 ff b4 	sub	r9,sp,-76
800076d8:	fa c8 f9 40 	sub	r8,sp,-1728
800076dc:	04 9a       	mov	r10,r2
800076de:	0c 9b       	mov	r11,r6
800076e0:	08 9c       	mov	r12,r4
800076e2:	fe b0 f6 a3 	rcall	80006428 <get_arg>
800076e6:	2f dd       	sub	sp,-12
800076e8:	78 09       	ld.w	r9,r12[0x0]
800076ea:	c2 18       	rjmp	8000772c <_vfprintf_r+0xfd4>
800076ec:	2f f7       	sub	r7,-1
800076ee:	10 39       	cp.w	r9,r8
800076f0:	c0 84       	brge	80007700 <_vfprintf_r+0xfa8>
800076f2:	fa ca f9 44 	sub	r10,sp,-1724
800076f6:	f4 06 00 36 	add	r6,r10,r6<<0x3
800076fa:	ec f9 fd 88 	ld.w	r9,r6[-632]
800076fe:	c1 78       	rjmp	8000772c <_vfprintf_r+0xfd4>
80007700:	41 09       	lddsp	r9,sp[0x40]
80007702:	59 f8       	cp.w	r8,31
80007704:	e0 89 00 10 	brgt	80007724 <_vfprintf_r+0xfcc>
80007708:	f2 ca ff fc 	sub	r10,r9,-4
8000770c:	51 0a       	stdsp	sp[0x40],r10
8000770e:	fa c6 f9 44 	sub	r6,sp,-1724
80007712:	72 09       	ld.w	r9,r9[0x0]
80007714:	ec 08 00 3a 	add	r10,r6,r8<<0x3
80007718:	f5 49 fd 88 	st.w	r10[-632],r9
8000771c:	2f f8       	sub	r8,-1
8000771e:	fb 48 06 b4 	st.w	sp[1716],r8
80007722:	c0 58       	rjmp	8000772c <_vfprintf_r+0xfd4>
80007724:	f2 c8 ff fc 	sub	r8,r9,-4
80007728:	51 08       	stdsp	sp[0x40],r8
8000772a:	72 09       	ld.w	r9,r9[0x0]
8000772c:	33 08       	mov	r8,48
8000772e:	fb 68 06 b8 	st.b	sp[1720],r8
80007732:	37 88       	mov	r8,120
80007734:	30 0e       	mov	lr,0
80007736:	fb 68 06 b9 	st.b	sp[1721],r8
8000773a:	fe cc bc 22 	sub	r12,pc,-17374
8000773e:	50 19       	stdsp	sp[0x4],r9
80007740:	a1 b5       	sbr	r5,0x1
80007742:	50 0e       	stdsp	sp[0x0],lr
80007744:	50 dc       	stdsp	sp[0x34],r12
80007746:	30 28       	mov	r8,2
80007748:	37 80       	mov	r0,120
8000774a:	e0 8f 02 a3 	bral	80007c90 <_vfprintf_r+0x1538>
8000774e:	50 a7       	stdsp	sp[0x28],r7
80007750:	50 80       	stdsp	sp[0x20],r0
80007752:	10 90       	mov	r0,r8
80007754:	30 08       	mov	r8,0
80007756:	fb 68 06 bb 	st.b	sp[1723],r8
8000775a:	0c 97       	mov	r7,r6
8000775c:	04 94       	mov	r4,r2
8000775e:	06 96       	mov	r6,r3
80007760:	02 92       	mov	r2,r1
80007762:	40 93       	lddsp	r3,sp[0x24]
80007764:	40 41       	lddsp	r1,sp[0x10]
80007766:	0e 99       	mov	r9,r7
80007768:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000776c:	40 3b       	lddsp	r11,sp[0xc]
8000776e:	58 0b       	cp.w	r11,0
80007770:	c1 d0       	breq	800077aa <_vfprintf_r+0x1052>
80007772:	10 36       	cp.w	r6,r8
80007774:	c0 64       	brge	80007780 <_vfprintf_r+0x1028>
80007776:	fa ca f9 44 	sub	r10,sp,-1724
8000777a:	f4 06 00 36 	add	r6,r10,r6<<0x3
8000777e:	c1 d8       	rjmp	800077b8 <_vfprintf_r+0x1060>
80007780:	fa c8 f9 50 	sub	r8,sp,-1712
80007784:	1a d8       	st.w	--sp,r8
80007786:	fa c8 fa b8 	sub	r8,sp,-1352
8000778a:	1a d8       	st.w	--sp,r8
8000778c:	fa c8 fb b4 	sub	r8,sp,-1100
80007790:	0c 9b       	mov	r11,r6
80007792:	1a d8       	st.w	--sp,r8
80007794:	04 9a       	mov	r10,r2
80007796:	fa c8 f9 40 	sub	r8,sp,-1728
8000779a:	fa c9 ff b4 	sub	r9,sp,-76
8000779e:	08 9c       	mov	r12,r4
800077a0:	fe b0 f6 44 	rcall	80006428 <get_arg>
800077a4:	2f dd       	sub	sp,-12
800077a6:	78 06       	ld.w	r6,r12[0x0]
800077a8:	c2 08       	rjmp	800077e8 <_vfprintf_r+0x1090>
800077aa:	2f f7       	sub	r7,-1
800077ac:	10 39       	cp.w	r9,r8
800077ae:	c0 84       	brge	800077be <_vfprintf_r+0x1066>
800077b0:	fa c9 f9 44 	sub	r9,sp,-1724
800077b4:	f2 06 00 36 	add	r6,r9,r6<<0x3
800077b8:	ec f6 fd 88 	ld.w	r6,r6[-632]
800077bc:	c1 68       	rjmp	800077e8 <_vfprintf_r+0x1090>
800077be:	41 09       	lddsp	r9,sp[0x40]
800077c0:	59 f8       	cp.w	r8,31
800077c2:	e0 89 00 10 	brgt	800077e2 <_vfprintf_r+0x108a>
800077c6:	f2 ca ff fc 	sub	r10,r9,-4
800077ca:	51 0a       	stdsp	sp[0x40],r10
800077cc:	72 06       	ld.w	r6,r9[0x0]
800077ce:	fa ce f9 44 	sub	lr,sp,-1724
800077d2:	fc 08 00 39 	add	r9,lr,r8<<0x3
800077d6:	f3 46 fd 88 	st.w	r9[-632],r6
800077da:	2f f8       	sub	r8,-1
800077dc:	fb 48 06 b4 	st.w	sp[1716],r8
800077e0:	c0 48       	rjmp	800077e8 <_vfprintf_r+0x1090>
800077e2:	72 06       	ld.w	r6,r9[0x0]
800077e4:	2f c9       	sub	r9,-4
800077e6:	51 09       	stdsp	sp[0x40],r9
800077e8:	40 2c       	lddsp	r12,sp[0x8]
800077ea:	58 0c       	cp.w	r12,0
800077ec:	c1 05       	brlt	8000780c <_vfprintf_r+0x10b4>
800077ee:	18 9a       	mov	r10,r12
800077f0:	30 0b       	mov	r11,0
800077f2:	0c 9c       	mov	r12,r6
800077f4:	e0 a0 14 58 	rcall	8000a0a4 <memchr>
800077f8:	e0 80 02 df 	breq	80007db6 <_vfprintf_r+0x165e>
800077fc:	f8 06 01 02 	sub	r2,r12,r6
80007800:	40 2b       	lddsp	r11,sp[0x8]
80007802:	16 32       	cp.w	r2,r11
80007804:	e0 89 02 d9 	brgt	80007db6 <_vfprintf_r+0x165e>
80007808:	e0 8f 02 d4 	bral	80007db0 <_vfprintf_r+0x1658>
8000780c:	30 0a       	mov	r10,0
8000780e:	0c 9c       	mov	r12,r6
80007810:	50 2a       	stdsp	sp[0x8],r10
80007812:	e0 a0 19 33 	rcall	8000aa78 <strlen>
80007816:	18 92       	mov	r2,r12
80007818:	e0 8f 02 d2 	bral	80007dbc <_vfprintf_r+0x1664>
8000781c:	50 a7       	stdsp	sp[0x28],r7
8000781e:	50 80       	stdsp	sp[0x20],r0
80007820:	0c 97       	mov	r7,r6
80007822:	04 94       	mov	r4,r2
80007824:	06 96       	mov	r6,r3
80007826:	02 92       	mov	r2,r1
80007828:	40 93       	lddsp	r3,sp[0x24]
8000782a:	10 90       	mov	r0,r8
8000782c:	40 41       	lddsp	r1,sp[0x10]
8000782e:	a5 a5       	sbr	r5,0x4
80007830:	c0 a8       	rjmp	80007844 <_vfprintf_r+0x10ec>
80007832:	50 a7       	stdsp	sp[0x28],r7
80007834:	50 80       	stdsp	sp[0x20],r0
80007836:	0c 97       	mov	r7,r6
80007838:	04 94       	mov	r4,r2
8000783a:	06 96       	mov	r6,r3
8000783c:	02 92       	mov	r2,r1
8000783e:	40 93       	lddsp	r3,sp[0x24]
80007840:	10 90       	mov	r0,r8
80007842:	40 41       	lddsp	r1,sp[0x10]
80007844:	ed b5 00 05 	bld	r5,0x5
80007848:	c5 61       	brne	800078f4 <_vfprintf_r+0x119c>
8000784a:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000784e:	40 39       	lddsp	r9,sp[0xc]
80007850:	58 09       	cp.w	r9,0
80007852:	c2 10       	breq	80007894 <_vfprintf_r+0x113c>
80007854:	10 36       	cp.w	r6,r8
80007856:	c0 74       	brge	80007864 <_vfprintf_r+0x110c>
80007858:	fa c8 f9 44 	sub	r8,sp,-1724
8000785c:	f0 06 00 36 	add	r6,r8,r6<<0x3
80007860:	c2 38       	rjmp	800078a6 <_vfprintf_r+0x114e>
80007862:	d7 03       	nop
80007864:	fa c8 f9 50 	sub	r8,sp,-1712
80007868:	1a d8       	st.w	--sp,r8
8000786a:	fa c8 fa b8 	sub	r8,sp,-1352
8000786e:	1a d8       	st.w	--sp,r8
80007870:	fa c8 fb b4 	sub	r8,sp,-1100
80007874:	1a d8       	st.w	--sp,r8
80007876:	fa c8 f9 40 	sub	r8,sp,-1728
8000787a:	fa c9 ff b4 	sub	r9,sp,-76
8000787e:	04 9a       	mov	r10,r2
80007880:	0c 9b       	mov	r11,r6
80007882:	08 9c       	mov	r12,r4
80007884:	fe b0 f5 d2 	rcall	80006428 <get_arg>
80007888:	2f dd       	sub	sp,-12
8000788a:	f8 e8 00 00 	ld.d	r8,r12[0]
8000788e:	fa e9 00 00 	st.d	sp[0],r8
80007892:	c2 e8       	rjmp	800078ee <_vfprintf_r+0x1196>
80007894:	ee ca ff ff 	sub	r10,r7,-1
80007898:	10 37       	cp.w	r7,r8
8000789a:	c0 b4       	brge	800078b0 <_vfprintf_r+0x1158>
8000789c:	fa c8 f9 44 	sub	r8,sp,-1724
800078a0:	14 97       	mov	r7,r10
800078a2:	f0 06 00 36 	add	r6,r8,r6<<0x3
800078a6:	ec ea fd 88 	ld.d	r10,r6[-632]
800078aa:	fa eb 00 00 	st.d	sp[0],r10
800078ae:	c2 08       	rjmp	800078ee <_vfprintf_r+0x1196>
800078b0:	41 09       	lddsp	r9,sp[0x40]
800078b2:	59 f8       	cp.w	r8,31
800078b4:	e0 89 00 16 	brgt	800078e0 <_vfprintf_r+0x1188>
800078b8:	f2 e6 00 00 	ld.d	r6,r9[0]
800078bc:	f2 cb ff f8 	sub	r11,r9,-8
800078c0:	fa e7 00 00 	st.d	sp[0],r6
800078c4:	51 0b       	stdsp	sp[0x40],r11
800078c6:	fa c6 f9 44 	sub	r6,sp,-1724
800078ca:	ec 08 00 39 	add	r9,r6,r8<<0x3
800078ce:	fa e6 00 00 	ld.d	r6,sp[0]
800078d2:	f2 e7 fd 88 	st.d	r9[-632],r6
800078d6:	2f f8       	sub	r8,-1
800078d8:	14 97       	mov	r7,r10
800078da:	fb 48 06 b4 	st.w	sp[1716],r8
800078de:	c0 88       	rjmp	800078ee <_vfprintf_r+0x1196>
800078e0:	f2 e6 00 00 	ld.d	r6,r9[0]
800078e4:	2f 89       	sub	r9,-8
800078e6:	fa e7 00 00 	st.d	sp[0],r6
800078ea:	51 09       	stdsp	sp[0x40],r9
800078ec:	14 97       	mov	r7,r10
800078ee:	30 18       	mov	r8,1
800078f0:	e0 8f 01 d0 	bral	80007c90 <_vfprintf_r+0x1538>
800078f4:	ed b5 00 04 	bld	r5,0x4
800078f8:	c1 61       	brne	80007924 <_vfprintf_r+0x11cc>
800078fa:	fa f8 06 b4 	ld.w	r8,sp[1716]
800078fe:	40 3e       	lddsp	lr,sp[0xc]
80007900:	58 0e       	cp.w	lr,0
80007902:	c0 80       	breq	80007912 <_vfprintf_r+0x11ba>
80007904:	10 36       	cp.w	r6,r8
80007906:	c6 74       	brge	800079d4 <_vfprintf_r+0x127c>
80007908:	fa cc f9 44 	sub	r12,sp,-1724
8000790c:	f8 06 00 36 	add	r6,r12,r6<<0x3
80007910:	c8 08       	rjmp	80007a10 <_vfprintf_r+0x12b8>
80007912:	ee ca ff ff 	sub	r10,r7,-1
80007916:	10 37       	cp.w	r7,r8
80007918:	c7 f4       	brge	80007a16 <_vfprintf_r+0x12be>
8000791a:	fa cb f9 44 	sub	r11,sp,-1724
8000791e:	f6 06 00 36 	add	r6,r11,r6<<0x3
80007922:	c7 68       	rjmp	80007a0e <_vfprintf_r+0x12b6>
80007924:	ed b5 00 06 	bld	r5,0x6
80007928:	c4 a1       	brne	800079bc <_vfprintf_r+0x1264>
8000792a:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000792e:	40 3c       	lddsp	r12,sp[0xc]
80007930:	58 0c       	cp.w	r12,0
80007932:	c1 d0       	breq	8000796c <_vfprintf_r+0x1214>
80007934:	10 36       	cp.w	r6,r8
80007936:	c0 64       	brge	80007942 <_vfprintf_r+0x11ea>
80007938:	fa cb f9 44 	sub	r11,sp,-1724
8000793c:	f6 06 00 36 	add	r6,r11,r6<<0x3
80007940:	c1 f8       	rjmp	8000797e <_vfprintf_r+0x1226>
80007942:	fa c8 f9 50 	sub	r8,sp,-1712
80007946:	1a d8       	st.w	--sp,r8
80007948:	fa c8 fa b8 	sub	r8,sp,-1352
8000794c:	1a d8       	st.w	--sp,r8
8000794e:	fa c8 fb b4 	sub	r8,sp,-1100
80007952:	1a d8       	st.w	--sp,r8
80007954:	fa c8 f9 40 	sub	r8,sp,-1728
80007958:	fa c9 ff b4 	sub	r9,sp,-76
8000795c:	04 9a       	mov	r10,r2
8000795e:	0c 9b       	mov	r11,r6
80007960:	08 9c       	mov	r12,r4
80007962:	fe b0 f5 63 	rcall	80006428 <get_arg>
80007966:	2f dd       	sub	sp,-12
80007968:	98 18       	ld.sh	r8,r12[0x2]
8000796a:	c2 68       	rjmp	800079b6 <_vfprintf_r+0x125e>
8000796c:	ee ca ff ff 	sub	r10,r7,-1
80007970:	10 37       	cp.w	r7,r8
80007972:	c0 94       	brge	80007984 <_vfprintf_r+0x122c>
80007974:	fa c9 f9 44 	sub	r9,sp,-1724
80007978:	14 97       	mov	r7,r10
8000797a:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000797e:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
80007982:	c1 a8       	rjmp	800079b6 <_vfprintf_r+0x125e>
80007984:	41 09       	lddsp	r9,sp[0x40]
80007986:	59 f8       	cp.w	r8,31
80007988:	e0 89 00 13 	brgt	800079ae <_vfprintf_r+0x1256>
8000798c:	f2 cb ff fc 	sub	r11,r9,-4
80007990:	51 0b       	stdsp	sp[0x40],r11
80007992:	72 09       	ld.w	r9,r9[0x0]
80007994:	fa c6 f9 44 	sub	r6,sp,-1724
80007998:	ec 08 00 3b 	add	r11,r6,r8<<0x3
8000799c:	2f f8       	sub	r8,-1
8000799e:	f7 49 fd 88 	st.w	r11[-632],r9
800079a2:	fb 48 06 b4 	st.w	sp[1716],r8
800079a6:	14 97       	mov	r7,r10
800079a8:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
800079ac:	c0 58       	rjmp	800079b6 <_vfprintf_r+0x125e>
800079ae:	92 18       	ld.sh	r8,r9[0x2]
800079b0:	14 97       	mov	r7,r10
800079b2:	2f c9       	sub	r9,-4
800079b4:	51 09       	stdsp	sp[0x40],r9
800079b6:	5c 78       	castu.h	r8
800079b8:	50 18       	stdsp	sp[0x4],r8
800079ba:	c4 68       	rjmp	80007a46 <_vfprintf_r+0x12ee>
800079bc:	fa f8 06 b4 	ld.w	r8,sp[1716]
800079c0:	40 3c       	lddsp	r12,sp[0xc]
800079c2:	58 0c       	cp.w	r12,0
800079c4:	c1 d0       	breq	800079fe <_vfprintf_r+0x12a6>
800079c6:	10 36       	cp.w	r6,r8
800079c8:	c0 64       	brge	800079d4 <_vfprintf_r+0x127c>
800079ca:	fa cb f9 44 	sub	r11,sp,-1724
800079ce:	f6 06 00 36 	add	r6,r11,r6<<0x3
800079d2:	c1 f8       	rjmp	80007a10 <_vfprintf_r+0x12b8>
800079d4:	fa c8 f9 50 	sub	r8,sp,-1712
800079d8:	1a d8       	st.w	--sp,r8
800079da:	fa c8 fa b8 	sub	r8,sp,-1352
800079de:	0c 9b       	mov	r11,r6
800079e0:	1a d8       	st.w	--sp,r8
800079e2:	fa c8 fb b4 	sub	r8,sp,-1100
800079e6:	04 9a       	mov	r10,r2
800079e8:	1a d8       	st.w	--sp,r8
800079ea:	08 9c       	mov	r12,r4
800079ec:	fa c8 f9 40 	sub	r8,sp,-1728
800079f0:	fa c9 ff b4 	sub	r9,sp,-76
800079f4:	fe b0 f5 1a 	rcall	80006428 <get_arg>
800079f8:	2f dd       	sub	sp,-12
800079fa:	78 0b       	ld.w	r11,r12[0x0]
800079fc:	c2 48       	rjmp	80007a44 <_vfprintf_r+0x12ec>
800079fe:	ee ca ff ff 	sub	r10,r7,-1
80007a02:	10 37       	cp.w	r7,r8
80007a04:	c0 94       	brge	80007a16 <_vfprintf_r+0x12be>
80007a06:	fa c9 f9 44 	sub	r9,sp,-1724
80007a0a:	f2 06 00 36 	add	r6,r9,r6<<0x3
80007a0e:	14 97       	mov	r7,r10
80007a10:	ec fb fd 88 	ld.w	r11,r6[-632]
80007a14:	c1 88       	rjmp	80007a44 <_vfprintf_r+0x12ec>
80007a16:	41 09       	lddsp	r9,sp[0x40]
80007a18:	59 f8       	cp.w	r8,31
80007a1a:	e0 89 00 11 	brgt	80007a3c <_vfprintf_r+0x12e4>
80007a1e:	f2 cb ff fc 	sub	r11,r9,-4
80007a22:	51 0b       	stdsp	sp[0x40],r11
80007a24:	fa c6 f9 44 	sub	r6,sp,-1724
80007a28:	72 0b       	ld.w	r11,r9[0x0]
80007a2a:	ec 08 00 39 	add	r9,r6,r8<<0x3
80007a2e:	f3 4b fd 88 	st.w	r9[-632],r11
80007a32:	2f f8       	sub	r8,-1
80007a34:	14 97       	mov	r7,r10
80007a36:	fb 48 06 b4 	st.w	sp[1716],r8
80007a3a:	c0 58       	rjmp	80007a44 <_vfprintf_r+0x12ec>
80007a3c:	72 0b       	ld.w	r11,r9[0x0]
80007a3e:	14 97       	mov	r7,r10
80007a40:	2f c9       	sub	r9,-4
80007a42:	51 09       	stdsp	sp[0x40],r9
80007a44:	50 1b       	stdsp	sp[0x4],r11
80007a46:	30 0e       	mov	lr,0
80007a48:	30 18       	mov	r8,1
80007a4a:	50 0e       	stdsp	sp[0x0],lr
80007a4c:	c2 29       	rjmp	80007c90 <_vfprintf_r+0x1538>
80007a4e:	50 a7       	stdsp	sp[0x28],r7
80007a50:	50 80       	stdsp	sp[0x20],r0
80007a52:	0c 97       	mov	r7,r6
80007a54:	04 94       	mov	r4,r2
80007a56:	06 96       	mov	r6,r3
80007a58:	02 92       	mov	r2,r1
80007a5a:	fe cc bf 42 	sub	r12,pc,-16574
80007a5e:	40 93       	lddsp	r3,sp[0x24]
80007a60:	10 90       	mov	r0,r8
80007a62:	40 41       	lddsp	r1,sp[0x10]
80007a64:	50 dc       	stdsp	sp[0x34],r12
80007a66:	ed b5 00 05 	bld	r5,0x5
80007a6a:	c5 51       	brne	80007b14 <_vfprintf_r+0x13bc>
80007a6c:	fa f8 06 b4 	ld.w	r8,sp[1716]
80007a70:	40 3b       	lddsp	r11,sp[0xc]
80007a72:	58 0b       	cp.w	r11,0
80007a74:	c2 20       	breq	80007ab8 <_vfprintf_r+0x1360>
80007a76:	10 36       	cp.w	r6,r8
80007a78:	c0 a4       	brge	80007a8c <_vfprintf_r+0x1334>
80007a7a:	fa ca f9 44 	sub	r10,sp,-1724
80007a7e:	f4 06 00 36 	add	r6,r10,r6<<0x3
80007a82:	ec e8 fd 88 	ld.d	r8,r6[-632]
80007a86:	fa e9 00 00 	st.d	sp[0],r8
80007a8a:	cf 28       	rjmp	80007c6e <_vfprintf_r+0x1516>
80007a8c:	fa c8 f9 50 	sub	r8,sp,-1712
80007a90:	1a d8       	st.w	--sp,r8
80007a92:	fa c8 fa b8 	sub	r8,sp,-1352
80007a96:	04 9a       	mov	r10,r2
80007a98:	1a d8       	st.w	--sp,r8
80007a9a:	0c 9b       	mov	r11,r6
80007a9c:	fa c8 fb b4 	sub	r8,sp,-1100
80007aa0:	08 9c       	mov	r12,r4
80007aa2:	1a d8       	st.w	--sp,r8
80007aa4:	fa c8 f9 40 	sub	r8,sp,-1728
80007aa8:	fa c9 ff b4 	sub	r9,sp,-76
80007aac:	fe b0 f4 be 	rcall	80006428 <get_arg>
80007ab0:	2f dd       	sub	sp,-12
80007ab2:	f8 ea 00 00 	ld.d	r10,r12[0]
80007ab6:	c0 c8       	rjmp	80007ace <_vfprintf_r+0x1376>
80007ab8:	ee ca ff ff 	sub	r10,r7,-1
80007abc:	10 37       	cp.w	r7,r8
80007abe:	c0 b4       	brge	80007ad4 <_vfprintf_r+0x137c>
80007ac0:	fa c9 f9 44 	sub	r9,sp,-1724
80007ac4:	14 97       	mov	r7,r10
80007ac6:	f2 06 00 36 	add	r6,r9,r6<<0x3
80007aca:	ec ea fd 88 	ld.d	r10,r6[-632]
80007ace:	fa eb 00 00 	st.d	sp[0],r10
80007ad2:	cc e8       	rjmp	80007c6e <_vfprintf_r+0x1516>
80007ad4:	41 09       	lddsp	r9,sp[0x40]
80007ad6:	59 f8       	cp.w	r8,31
80007ad8:	e0 89 00 16 	brgt	80007b04 <_vfprintf_r+0x13ac>
80007adc:	f2 e6 00 00 	ld.d	r6,r9[0]
80007ae0:	f2 cb ff f8 	sub	r11,r9,-8
80007ae4:	fa e7 00 00 	st.d	sp[0],r6
80007ae8:	51 0b       	stdsp	sp[0x40],r11
80007aea:	fa c6 f9 44 	sub	r6,sp,-1724
80007aee:	ec 08 00 39 	add	r9,r6,r8<<0x3
80007af2:	fa e6 00 00 	ld.d	r6,sp[0]
80007af6:	f2 e7 fd 88 	st.d	r9[-632],r6
80007afa:	2f f8       	sub	r8,-1
80007afc:	14 97       	mov	r7,r10
80007afe:	fb 48 06 b4 	st.w	sp[1716],r8
80007b02:	cb 68       	rjmp	80007c6e <_vfprintf_r+0x1516>
80007b04:	f2 e6 00 00 	ld.d	r6,r9[0]
80007b08:	2f 89       	sub	r9,-8
80007b0a:	fa e7 00 00 	st.d	sp[0],r6
80007b0e:	51 09       	stdsp	sp[0x40],r9
80007b10:	14 97       	mov	r7,r10
80007b12:	ca e8       	rjmp	80007c6e <_vfprintf_r+0x1516>
80007b14:	ed b5 00 04 	bld	r5,0x4
80007b18:	c1 71       	brne	80007b46 <_vfprintf_r+0x13ee>
80007b1a:	fa f8 06 b4 	ld.w	r8,sp[1716]
80007b1e:	40 3e       	lddsp	lr,sp[0xc]
80007b20:	58 0e       	cp.w	lr,0
80007b22:	c0 80       	breq	80007b32 <_vfprintf_r+0x13da>
80007b24:	10 36       	cp.w	r6,r8
80007b26:	c6 94       	brge	80007bf8 <_vfprintf_r+0x14a0>
80007b28:	fa cc f9 44 	sub	r12,sp,-1724
80007b2c:	f8 06 00 36 	add	r6,r12,r6<<0x3
80007b30:	c8 28       	rjmp	80007c34 <_vfprintf_r+0x14dc>
80007b32:	ee ca ff ff 	sub	r10,r7,-1
80007b36:	10 37       	cp.w	r7,r8
80007b38:	e0 84 00 81 	brge	80007c3a <_vfprintf_r+0x14e2>
80007b3c:	fa cb f9 44 	sub	r11,sp,-1724
80007b40:	f6 06 00 36 	add	r6,r11,r6<<0x3
80007b44:	c7 78       	rjmp	80007c32 <_vfprintf_r+0x14da>
80007b46:	ed b5 00 06 	bld	r5,0x6
80007b4a:	c4 b1       	brne	80007be0 <_vfprintf_r+0x1488>
80007b4c:	fa f8 06 b4 	ld.w	r8,sp[1716]
80007b50:	40 3c       	lddsp	r12,sp[0xc]
80007b52:	58 0c       	cp.w	r12,0
80007b54:	c1 d0       	breq	80007b8e <_vfprintf_r+0x1436>
80007b56:	10 36       	cp.w	r6,r8
80007b58:	c0 64       	brge	80007b64 <_vfprintf_r+0x140c>
80007b5a:	fa cb f9 44 	sub	r11,sp,-1724
80007b5e:	f6 06 00 36 	add	r6,r11,r6<<0x3
80007b62:	c1 f8       	rjmp	80007ba0 <_vfprintf_r+0x1448>
80007b64:	fa c8 f9 50 	sub	r8,sp,-1712
80007b68:	1a d8       	st.w	--sp,r8
80007b6a:	fa c8 fa b8 	sub	r8,sp,-1352
80007b6e:	1a d8       	st.w	--sp,r8
80007b70:	fa c8 fb b4 	sub	r8,sp,-1100
80007b74:	1a d8       	st.w	--sp,r8
80007b76:	fa c8 f9 40 	sub	r8,sp,-1728
80007b7a:	fa c9 ff b4 	sub	r9,sp,-76
80007b7e:	04 9a       	mov	r10,r2
80007b80:	0c 9b       	mov	r11,r6
80007b82:	08 9c       	mov	r12,r4
80007b84:	fe b0 f4 52 	rcall	80006428 <get_arg>
80007b88:	2f dd       	sub	sp,-12
80007b8a:	98 18       	ld.sh	r8,r12[0x2]
80007b8c:	c2 78       	rjmp	80007bda <_vfprintf_r+0x1482>
80007b8e:	ee ca ff ff 	sub	r10,r7,-1
80007b92:	10 37       	cp.w	r7,r8
80007b94:	c0 a4       	brge	80007ba8 <_vfprintf_r+0x1450>
80007b96:	fa c9 f9 44 	sub	r9,sp,-1724
80007b9a:	14 97       	mov	r7,r10
80007b9c:	f2 06 00 36 	add	r6,r9,r6<<0x3
80007ba0:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
80007ba4:	c1 b8       	rjmp	80007bda <_vfprintf_r+0x1482>
80007ba6:	d7 03       	nop
80007ba8:	41 09       	lddsp	r9,sp[0x40]
80007baa:	59 f8       	cp.w	r8,31
80007bac:	e0 89 00 13 	brgt	80007bd2 <_vfprintf_r+0x147a>
80007bb0:	f2 cb ff fc 	sub	r11,r9,-4
80007bb4:	51 0b       	stdsp	sp[0x40],r11
80007bb6:	72 09       	ld.w	r9,r9[0x0]
80007bb8:	fa c6 f9 44 	sub	r6,sp,-1724
80007bbc:	ec 08 00 3b 	add	r11,r6,r8<<0x3
80007bc0:	2f f8       	sub	r8,-1
80007bc2:	f7 49 fd 88 	st.w	r11[-632],r9
80007bc6:	fb 48 06 b4 	st.w	sp[1716],r8
80007bca:	14 97       	mov	r7,r10
80007bcc:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
80007bd0:	c0 58       	rjmp	80007bda <_vfprintf_r+0x1482>
80007bd2:	92 18       	ld.sh	r8,r9[0x2]
80007bd4:	14 97       	mov	r7,r10
80007bd6:	2f c9       	sub	r9,-4
80007bd8:	51 09       	stdsp	sp[0x40],r9
80007bda:	5c 78       	castu.h	r8
80007bdc:	50 18       	stdsp	sp[0x4],r8
80007bde:	c4 68       	rjmp	80007c6a <_vfprintf_r+0x1512>
80007be0:	fa f8 06 b4 	ld.w	r8,sp[1716]
80007be4:	40 3c       	lddsp	r12,sp[0xc]
80007be6:	58 0c       	cp.w	r12,0
80007be8:	c1 d0       	breq	80007c22 <_vfprintf_r+0x14ca>
80007bea:	10 36       	cp.w	r6,r8
80007bec:	c0 64       	brge	80007bf8 <_vfprintf_r+0x14a0>
80007bee:	fa cb f9 44 	sub	r11,sp,-1724
80007bf2:	f6 06 00 36 	add	r6,r11,r6<<0x3
80007bf6:	c1 f8       	rjmp	80007c34 <_vfprintf_r+0x14dc>
80007bf8:	fa c8 f9 50 	sub	r8,sp,-1712
80007bfc:	1a d8       	st.w	--sp,r8
80007bfe:	fa c8 fa b8 	sub	r8,sp,-1352
80007c02:	0c 9b       	mov	r11,r6
80007c04:	1a d8       	st.w	--sp,r8
80007c06:	fa c8 fb b4 	sub	r8,sp,-1100
80007c0a:	04 9a       	mov	r10,r2
80007c0c:	1a d8       	st.w	--sp,r8
80007c0e:	08 9c       	mov	r12,r4
80007c10:	fa c8 f9 40 	sub	r8,sp,-1728
80007c14:	fa c9 ff b4 	sub	r9,sp,-76
80007c18:	fe b0 f4 08 	rcall	80006428 <get_arg>
80007c1c:	2f dd       	sub	sp,-12
80007c1e:	78 0b       	ld.w	r11,r12[0x0]
80007c20:	c2 48       	rjmp	80007c68 <_vfprintf_r+0x1510>
80007c22:	ee ca ff ff 	sub	r10,r7,-1
80007c26:	10 37       	cp.w	r7,r8
80007c28:	c0 94       	brge	80007c3a <_vfprintf_r+0x14e2>
80007c2a:	fa c9 f9 44 	sub	r9,sp,-1724
80007c2e:	f2 06 00 36 	add	r6,r9,r6<<0x3
80007c32:	14 97       	mov	r7,r10
80007c34:	ec fb fd 88 	ld.w	r11,r6[-632]
80007c38:	c1 88       	rjmp	80007c68 <_vfprintf_r+0x1510>
80007c3a:	41 09       	lddsp	r9,sp[0x40]
80007c3c:	59 f8       	cp.w	r8,31
80007c3e:	e0 89 00 11 	brgt	80007c60 <_vfprintf_r+0x1508>
80007c42:	f2 cb ff fc 	sub	r11,r9,-4
80007c46:	51 0b       	stdsp	sp[0x40],r11
80007c48:	fa c6 f9 44 	sub	r6,sp,-1724
80007c4c:	72 0b       	ld.w	r11,r9[0x0]
80007c4e:	ec 08 00 39 	add	r9,r6,r8<<0x3
80007c52:	f3 4b fd 88 	st.w	r9[-632],r11
80007c56:	2f f8       	sub	r8,-1
80007c58:	14 97       	mov	r7,r10
80007c5a:	fb 48 06 b4 	st.w	sp[1716],r8
80007c5e:	c0 58       	rjmp	80007c68 <_vfprintf_r+0x1510>
80007c60:	72 0b       	ld.w	r11,r9[0x0]
80007c62:	14 97       	mov	r7,r10
80007c64:	2f c9       	sub	r9,-4
80007c66:	51 09       	stdsp	sp[0x40],r9
80007c68:	50 1b       	stdsp	sp[0x4],r11
80007c6a:	30 0e       	mov	lr,0
80007c6c:	50 0e       	stdsp	sp[0x0],lr
80007c6e:	40 08       	lddsp	r8,sp[0x0]
80007c70:	40 1c       	lddsp	r12,sp[0x4]
80007c72:	18 48       	or	r8,r12
80007c74:	5f 19       	srne	r9
80007c76:	0a 98       	mov	r8,r5
80007c78:	eb e9 00 09 	and	r9,r5,r9
80007c7c:	a1 b8       	sbr	r8,0x1
80007c7e:	58 09       	cp.w	r9,0
80007c80:	c0 70       	breq	80007c8e <_vfprintf_r+0x1536>
80007c82:	10 95       	mov	r5,r8
80007c84:	fb 60 06 b9 	st.b	sp[1721],r0
80007c88:	33 08       	mov	r8,48
80007c8a:	fb 68 06 b8 	st.b	sp[1720],r8
80007c8e:	30 28       	mov	r8,2
80007c90:	30 09       	mov	r9,0
80007c92:	fb 69 06 bb 	st.b	sp[1723],r9
80007c96:	0a 99       	mov	r9,r5
80007c98:	a7 d9       	cbr	r9,0x7
80007c9a:	40 2b       	lddsp	r11,sp[0x8]
80007c9c:	40 16       	lddsp	r6,sp[0x4]
80007c9e:	58 0b       	cp.w	r11,0
80007ca0:	5f 1a       	srne	r10
80007ca2:	f2 05 17 40 	movge	r5,r9
80007ca6:	fa c2 f9 78 	sub	r2,sp,-1672
80007caa:	40 09       	lddsp	r9,sp[0x0]
80007cac:	0c 49       	or	r9,r6
80007cae:	5f 19       	srne	r9
80007cb0:	f5 e9 10 09 	or	r9,r10,r9
80007cb4:	c5 c0       	breq	80007d6c <_vfprintf_r+0x1614>
80007cb6:	30 19       	mov	r9,1
80007cb8:	f2 08 18 00 	cp.b	r8,r9
80007cbc:	c0 60       	breq	80007cc8 <_vfprintf_r+0x1570>
80007cbe:	30 29       	mov	r9,2
80007cc0:	f2 08 18 00 	cp.b	r8,r9
80007cc4:	c0 41       	brne	80007ccc <_vfprintf_r+0x1574>
80007cc6:	c3 c8       	rjmp	80007d3e <_vfprintf_r+0x15e6>
80007cc8:	04 96       	mov	r6,r2
80007cca:	c3 08       	rjmp	80007d2a <_vfprintf_r+0x15d2>
80007ccc:	04 96       	mov	r6,r2
80007cce:	fa e8 00 00 	ld.d	r8,sp[0]
80007cd2:	f5 d8 c0 03 	bfextu	r10,r8,0x0,0x3
80007cd6:	2d 0a       	sub	r10,-48
80007cd8:	0c fa       	st.b	--r6,r10
80007cda:	f0 0b 16 03 	lsr	r11,r8,0x3
80007cde:	f2 0c 16 03 	lsr	r12,r9,0x3
80007ce2:	f7 e9 11 db 	or	r11,r11,r9<<0x1d
80007ce6:	18 99       	mov	r9,r12
80007ce8:	16 98       	mov	r8,r11
80007cea:	58 08       	cp.w	r8,0
80007cec:	5c 29       	cpc	r9
80007cee:	cf 21       	brne	80007cd2 <_vfprintf_r+0x157a>
80007cf0:	fa e9 00 00 	st.d	sp[0],r8
80007cf4:	ed b5 00 00 	bld	r5,0x0
80007cf8:	c4 51       	brne	80007d82 <_vfprintf_r+0x162a>
80007cfa:	33 09       	mov	r9,48
80007cfc:	f2 0a 18 00 	cp.b	r10,r9
80007d00:	c4 10       	breq	80007d82 <_vfprintf_r+0x162a>
80007d02:	0c f9       	st.b	--r6,r9
80007d04:	c3 f8       	rjmp	80007d82 <_vfprintf_r+0x162a>
80007d06:	fa ea 00 00 	ld.d	r10,sp[0]
80007d0a:	30 a8       	mov	r8,10
80007d0c:	30 09       	mov	r9,0
80007d0e:	e0 a0 1a 1b 	rcall	8000b144 <__avr32_umod64>
80007d12:	30 a8       	mov	r8,10
80007d14:	2d 0a       	sub	r10,-48
80007d16:	30 09       	mov	r9,0
80007d18:	ac 8a       	st.b	r6[0x0],r10
80007d1a:	fa ea 00 00 	ld.d	r10,sp[0]
80007d1e:	fe b0 f1 92 	rcall	80006042 <__avr32_udiv64>
80007d22:	16 99       	mov	r9,r11
80007d24:	14 98       	mov	r8,r10
80007d26:	fa e9 00 00 	st.d	sp[0],r8
80007d2a:	20 16       	sub	r6,1
80007d2c:	fa ea 00 00 	ld.d	r10,sp[0]
80007d30:	58 9a       	cp.w	r10,9
80007d32:	5c 2b       	cpc	r11
80007d34:	fe 9b ff e9 	brhi	80007d06 <_vfprintf_r+0x15ae>
80007d38:	1b f8       	ld.ub	r8,sp[0x7]
80007d3a:	2d 08       	sub	r8,-48
80007d3c:	c2 08       	rjmp	80007d7c <_vfprintf_r+0x1624>
80007d3e:	04 96       	mov	r6,r2
80007d40:	fa e8 00 00 	ld.d	r8,sp[0]
80007d44:	f5 d8 c0 04 	bfextu	r10,r8,0x0,0x4
80007d48:	40 de       	lddsp	lr,sp[0x34]
80007d4a:	fc 0a 07 0a 	ld.ub	r10,lr[r10]
80007d4e:	0c fa       	st.b	--r6,r10
80007d50:	f2 0b 16 04 	lsr	r11,r9,0x4
80007d54:	f0 0a 16 04 	lsr	r10,r8,0x4
80007d58:	f5 e9 11 ca 	or	r10,r10,r9<<0x1c
80007d5c:	16 99       	mov	r9,r11
80007d5e:	14 98       	mov	r8,r10
80007d60:	58 08       	cp.w	r8,0
80007d62:	5c 29       	cpc	r9
80007d64:	cf 01       	brne	80007d44 <_vfprintf_r+0x15ec>
80007d66:	fa e9 00 00 	st.d	sp[0],r8
80007d6a:	c0 c8       	rjmp	80007d82 <_vfprintf_r+0x162a>
80007d6c:	58 08       	cp.w	r8,0
80007d6e:	c0 91       	brne	80007d80 <_vfprintf_r+0x1628>
80007d70:	ed b5 00 00 	bld	r5,0x0
80007d74:	c0 61       	brne	80007d80 <_vfprintf_r+0x1628>
80007d76:	fa c6 f9 79 	sub	r6,sp,-1671
80007d7a:	33 08       	mov	r8,48
80007d7c:	ac 88       	st.b	r6[0x0],r8
80007d7e:	c0 28       	rjmp	80007d82 <_vfprintf_r+0x162a>
80007d80:	04 96       	mov	r6,r2
80007d82:	0c 12       	sub	r2,r6
80007d84:	c1 c8       	rjmp	80007dbc <_vfprintf_r+0x1664>
80007d86:	50 a7       	stdsp	sp[0x28],r7
80007d88:	50 80       	stdsp	sp[0x20],r0
80007d8a:	40 93       	lddsp	r3,sp[0x24]
80007d8c:	0c 97       	mov	r7,r6
80007d8e:	10 90       	mov	r0,r8
80007d90:	04 94       	mov	r4,r2
80007d92:	40 41       	lddsp	r1,sp[0x10]
80007d94:	58 08       	cp.w	r8,0
80007d96:	e0 80 04 4f 	breq	80008634 <_vfprintf_r+0x1edc>
80007d9a:	fb 68 06 60 	st.b	sp[1632],r8
80007d9e:	30 0c       	mov	r12,0
80007da0:	30 08       	mov	r8,0
80007da2:	30 12       	mov	r2,1
80007da4:	fb 68 06 bb 	st.b	sp[1723],r8
80007da8:	50 2c       	stdsp	sp[0x8],r12
80007daa:	fa c6 f9 a0 	sub	r6,sp,-1632
80007dae:	c0 78       	rjmp	80007dbc <_vfprintf_r+0x1664>
80007db0:	30 0b       	mov	r11,0
80007db2:	50 2b       	stdsp	sp[0x8],r11
80007db4:	c0 48       	rjmp	80007dbc <_vfprintf_r+0x1664>
80007db6:	40 22       	lddsp	r2,sp[0x8]
80007db8:	30 0a       	mov	r10,0
80007dba:	50 2a       	stdsp	sp[0x8],r10
80007dbc:	40 29       	lddsp	r9,sp[0x8]
80007dbe:	e4 09 0c 49 	max	r9,r2,r9
80007dc2:	fb 38 06 bb 	ld.ub	r8,sp[1723]
80007dc6:	50 39       	stdsp	sp[0xc],r9
80007dc8:	0a 9e       	mov	lr,r5
80007dca:	30 09       	mov	r9,0
80007dcc:	e2 1e 00 02 	andl	lr,0x2,COH
80007dd0:	f2 08 18 00 	cp.b	r8,r9
80007dd4:	fb f8 10 03 	ld.wne	r8,sp[0xc]
80007dd8:	f7 b8 01 ff 	subne	r8,-1
80007ddc:	fb f8 1a 03 	st.wne	sp[0xc],r8
80007de0:	0a 9b       	mov	r11,r5
80007de2:	58 0e       	cp.w	lr,0
80007de4:	fb fc 10 03 	ld.wne	r12,sp[0xc]
80007de8:	f7 bc 01 fe 	subne	r12,-2
80007dec:	fb fc 1a 03 	st.wne	sp[0xc],r12
80007df0:	e2 1b 00 84 	andl	r11,0x84,COH
80007df4:	50 fe       	stdsp	sp[0x3c],lr
80007df6:	50 9b       	stdsp	sp[0x24],r11
80007df8:	c4 71       	brne	80007e86 <_vfprintf_r+0x172e>
80007dfa:	40 8a       	lddsp	r10,sp[0x20]
80007dfc:	40 39       	lddsp	r9,sp[0xc]
80007dfe:	12 1a       	sub	r10,r9
80007e00:	50 4a       	stdsp	sp[0x10],r10
80007e02:	58 0a       	cp.w	r10,0
80007e04:	e0 89 00 20 	brgt	80007e44 <_vfprintf_r+0x16ec>
80007e08:	c3 f8       	rjmp	80007e86 <_vfprintf_r+0x172e>
80007e0a:	2f 09       	sub	r9,-16
80007e0c:	2f f8       	sub	r8,-1
80007e0e:	fe ce c2 de 	sub	lr,pc,-15650
80007e12:	31 0c       	mov	r12,16
80007e14:	fb 49 06 90 	st.w	sp[1680],r9
80007e18:	87 0e       	st.w	r3[0x0],lr
80007e1a:	87 1c       	st.w	r3[0x4],r12
80007e1c:	fb 48 06 8c 	st.w	sp[1676],r8
80007e20:	58 78       	cp.w	r8,7
80007e22:	e0 89 00 04 	brgt	80007e2a <_vfprintf_r+0x16d2>
80007e26:	2f 83       	sub	r3,-8
80007e28:	c0 b8       	rjmp	80007e3e <_vfprintf_r+0x16e6>
80007e2a:	fa ca f9 78 	sub	r10,sp,-1672
80007e2e:	02 9b       	mov	r11,r1
80007e30:	08 9c       	mov	r12,r4
80007e32:	fe b0 f4 85 	rcall	8000673c <__sprint_r>
80007e36:	e0 81 04 10 	brne	80008656 <_vfprintf_r+0x1efe>
80007e3a:	fa c3 f9 e0 	sub	r3,sp,-1568
80007e3e:	40 4b       	lddsp	r11,sp[0x10]
80007e40:	21 0b       	sub	r11,16
80007e42:	50 4b       	stdsp	sp[0x10],r11
80007e44:	fa f9 06 90 	ld.w	r9,sp[1680]
80007e48:	fa f8 06 8c 	ld.w	r8,sp[1676]
80007e4c:	fe ca c3 1c 	sub	r10,pc,-15588
80007e50:	40 4e       	lddsp	lr,sp[0x10]
80007e52:	59 0e       	cp.w	lr,16
80007e54:	fe 99 ff db 	brgt	80007e0a <_vfprintf_r+0x16b2>
80007e58:	1c 09       	add	r9,lr
80007e5a:	2f f8       	sub	r8,-1
80007e5c:	87 0a       	st.w	r3[0x0],r10
80007e5e:	fb 49 06 90 	st.w	sp[1680],r9
80007e62:	87 1e       	st.w	r3[0x4],lr
80007e64:	fb 48 06 8c 	st.w	sp[1676],r8
80007e68:	58 78       	cp.w	r8,7
80007e6a:	e0 89 00 04 	brgt	80007e72 <_vfprintf_r+0x171a>
80007e6e:	2f 83       	sub	r3,-8
80007e70:	c0 b8       	rjmp	80007e86 <_vfprintf_r+0x172e>
80007e72:	fa ca f9 78 	sub	r10,sp,-1672
80007e76:	02 9b       	mov	r11,r1
80007e78:	08 9c       	mov	r12,r4
80007e7a:	fe b0 f4 61 	rcall	8000673c <__sprint_r>
80007e7e:	e0 81 03 ec 	brne	80008656 <_vfprintf_r+0x1efe>
80007e82:	fa c3 f9 e0 	sub	r3,sp,-1568
80007e86:	30 09       	mov	r9,0
80007e88:	fb 38 06 bb 	ld.ub	r8,sp[1723]
80007e8c:	f2 08 18 00 	cp.b	r8,r9
80007e90:	c1 f0       	breq	80007ece <_vfprintf_r+0x1776>
80007e92:	fa f8 06 90 	ld.w	r8,sp[1680]
80007e96:	fa c9 f9 45 	sub	r9,sp,-1723
80007e9a:	2f f8       	sub	r8,-1
80007e9c:	87 09       	st.w	r3[0x0],r9
80007e9e:	fb 48 06 90 	st.w	sp[1680],r8
80007ea2:	30 19       	mov	r9,1
80007ea4:	fa f8 06 8c 	ld.w	r8,sp[1676]
80007ea8:	87 19       	st.w	r3[0x4],r9
80007eaa:	2f f8       	sub	r8,-1
80007eac:	fb 48 06 8c 	st.w	sp[1676],r8
80007eb0:	58 78       	cp.w	r8,7
80007eb2:	e0 89 00 04 	brgt	80007eba <_vfprintf_r+0x1762>
80007eb6:	2f 83       	sub	r3,-8
80007eb8:	c0 b8       	rjmp	80007ece <_vfprintf_r+0x1776>
80007eba:	fa ca f9 78 	sub	r10,sp,-1672
80007ebe:	02 9b       	mov	r11,r1
80007ec0:	08 9c       	mov	r12,r4
80007ec2:	fe b0 f4 3d 	rcall	8000673c <__sprint_r>
80007ec6:	e0 81 03 c8 	brne	80008656 <_vfprintf_r+0x1efe>
80007eca:	fa c3 f9 e0 	sub	r3,sp,-1568
80007ece:	40 fc       	lddsp	r12,sp[0x3c]
80007ed0:	58 0c       	cp.w	r12,0
80007ed2:	c1 f0       	breq	80007f10 <_vfprintf_r+0x17b8>
80007ed4:	fa f8 06 90 	ld.w	r8,sp[1680]
80007ed8:	fa c9 f9 48 	sub	r9,sp,-1720
80007edc:	2f e8       	sub	r8,-2
80007ede:	87 09       	st.w	r3[0x0],r9
80007ee0:	fb 48 06 90 	st.w	sp[1680],r8
80007ee4:	30 29       	mov	r9,2
80007ee6:	fa f8 06 8c 	ld.w	r8,sp[1676]
80007eea:	87 19       	st.w	r3[0x4],r9
80007eec:	2f f8       	sub	r8,-1
80007eee:	fb 48 06 8c 	st.w	sp[1676],r8
80007ef2:	58 78       	cp.w	r8,7
80007ef4:	e0 89 00 04 	brgt	80007efc <_vfprintf_r+0x17a4>
80007ef8:	2f 83       	sub	r3,-8
80007efa:	c0 b8       	rjmp	80007f10 <_vfprintf_r+0x17b8>
80007efc:	fa ca f9 78 	sub	r10,sp,-1672
80007f00:	02 9b       	mov	r11,r1
80007f02:	08 9c       	mov	r12,r4
80007f04:	fe b0 f4 1c 	rcall	8000673c <__sprint_r>
80007f08:	e0 81 03 a7 	brne	80008656 <_vfprintf_r+0x1efe>
80007f0c:	fa c3 f9 e0 	sub	r3,sp,-1568
80007f10:	40 9b       	lddsp	r11,sp[0x24]
80007f12:	e0 4b 00 80 	cp.w	r11,128
80007f16:	c4 71       	brne	80007fa4 <_vfprintf_r+0x184c>
80007f18:	40 8a       	lddsp	r10,sp[0x20]
80007f1a:	40 39       	lddsp	r9,sp[0xc]
80007f1c:	12 1a       	sub	r10,r9
80007f1e:	50 4a       	stdsp	sp[0x10],r10
80007f20:	58 0a       	cp.w	r10,0
80007f22:	e0 89 00 20 	brgt	80007f62 <_vfprintf_r+0x180a>
80007f26:	c3 f8       	rjmp	80007fa4 <_vfprintf_r+0x184c>
80007f28:	2f 09       	sub	r9,-16
80007f2a:	2f f8       	sub	r8,-1
80007f2c:	fe ce c3 ec 	sub	lr,pc,-15380
80007f30:	31 0c       	mov	r12,16
80007f32:	fb 49 06 90 	st.w	sp[1680],r9
80007f36:	87 0e       	st.w	r3[0x0],lr
80007f38:	87 1c       	st.w	r3[0x4],r12
80007f3a:	fb 48 06 8c 	st.w	sp[1676],r8
80007f3e:	58 78       	cp.w	r8,7
80007f40:	e0 89 00 04 	brgt	80007f48 <_vfprintf_r+0x17f0>
80007f44:	2f 83       	sub	r3,-8
80007f46:	c0 b8       	rjmp	80007f5c <_vfprintf_r+0x1804>
80007f48:	fa ca f9 78 	sub	r10,sp,-1672
80007f4c:	02 9b       	mov	r11,r1
80007f4e:	08 9c       	mov	r12,r4
80007f50:	fe b0 f3 f6 	rcall	8000673c <__sprint_r>
80007f54:	e0 81 03 81 	brne	80008656 <_vfprintf_r+0x1efe>
80007f58:	fa c3 f9 e0 	sub	r3,sp,-1568
80007f5c:	40 4b       	lddsp	r11,sp[0x10]
80007f5e:	21 0b       	sub	r11,16
80007f60:	50 4b       	stdsp	sp[0x10],r11
80007f62:	fa f9 06 90 	ld.w	r9,sp[1680]
80007f66:	fa f8 06 8c 	ld.w	r8,sp[1676]
80007f6a:	fe ca c4 2a 	sub	r10,pc,-15318
80007f6e:	40 4e       	lddsp	lr,sp[0x10]
80007f70:	59 0e       	cp.w	lr,16
80007f72:	fe 99 ff db 	brgt	80007f28 <_vfprintf_r+0x17d0>
80007f76:	1c 09       	add	r9,lr
80007f78:	2f f8       	sub	r8,-1
80007f7a:	87 0a       	st.w	r3[0x0],r10
80007f7c:	fb 49 06 90 	st.w	sp[1680],r9
80007f80:	87 1e       	st.w	r3[0x4],lr
80007f82:	fb 48 06 8c 	st.w	sp[1676],r8
80007f86:	58 78       	cp.w	r8,7
80007f88:	e0 89 00 04 	brgt	80007f90 <_vfprintf_r+0x1838>
80007f8c:	2f 83       	sub	r3,-8
80007f8e:	c0 b8       	rjmp	80007fa4 <_vfprintf_r+0x184c>
80007f90:	fa ca f9 78 	sub	r10,sp,-1672
80007f94:	02 9b       	mov	r11,r1
80007f96:	08 9c       	mov	r12,r4
80007f98:	fe b0 f3 d2 	rcall	8000673c <__sprint_r>
80007f9c:	e0 81 03 5d 	brne	80008656 <_vfprintf_r+0x1efe>
80007fa0:	fa c3 f9 e0 	sub	r3,sp,-1568
80007fa4:	40 2c       	lddsp	r12,sp[0x8]
80007fa6:	04 1c       	sub	r12,r2
80007fa8:	50 2c       	stdsp	sp[0x8],r12
80007faa:	58 0c       	cp.w	r12,0
80007fac:	e0 89 00 20 	brgt	80007fec <_vfprintf_r+0x1894>
80007fb0:	c3 f8       	rjmp	8000802e <_vfprintf_r+0x18d6>
80007fb2:	2f 09       	sub	r9,-16
80007fb4:	2f f8       	sub	r8,-1
80007fb6:	fe cb c4 76 	sub	r11,pc,-15242
80007fba:	31 0a       	mov	r10,16
80007fbc:	fb 49 06 90 	st.w	sp[1680],r9
80007fc0:	87 0b       	st.w	r3[0x0],r11
80007fc2:	87 1a       	st.w	r3[0x4],r10
80007fc4:	fb 48 06 8c 	st.w	sp[1676],r8
80007fc8:	58 78       	cp.w	r8,7
80007fca:	e0 89 00 04 	brgt	80007fd2 <_vfprintf_r+0x187a>
80007fce:	2f 83       	sub	r3,-8
80007fd0:	c0 b8       	rjmp	80007fe6 <_vfprintf_r+0x188e>
80007fd2:	fa ca f9 78 	sub	r10,sp,-1672
80007fd6:	02 9b       	mov	r11,r1
80007fd8:	08 9c       	mov	r12,r4
80007fda:	fe b0 f3 b1 	rcall	8000673c <__sprint_r>
80007fde:	e0 81 03 3c 	brne	80008656 <_vfprintf_r+0x1efe>
80007fe2:	fa c3 f9 e0 	sub	r3,sp,-1568
80007fe6:	40 29       	lddsp	r9,sp[0x8]
80007fe8:	21 09       	sub	r9,16
80007fea:	50 29       	stdsp	sp[0x8],r9
80007fec:	fa f9 06 90 	ld.w	r9,sp[1680]
80007ff0:	fa f8 06 8c 	ld.w	r8,sp[1676]
80007ff4:	fe ca c4 b4 	sub	r10,pc,-15180
80007ff8:	40 2e       	lddsp	lr,sp[0x8]
80007ffa:	59 0e       	cp.w	lr,16
80007ffc:	fe 99 ff db 	brgt	80007fb2 <_vfprintf_r+0x185a>
80008000:	1c 09       	add	r9,lr
80008002:	2f f8       	sub	r8,-1
80008004:	87 0a       	st.w	r3[0x0],r10
80008006:	fb 49 06 90 	st.w	sp[1680],r9
8000800a:	87 1e       	st.w	r3[0x4],lr
8000800c:	fb 48 06 8c 	st.w	sp[1676],r8
80008010:	58 78       	cp.w	r8,7
80008012:	e0 89 00 04 	brgt	8000801a <_vfprintf_r+0x18c2>
80008016:	2f 83       	sub	r3,-8
80008018:	c0 b8       	rjmp	8000802e <_vfprintf_r+0x18d6>
8000801a:	fa ca f9 78 	sub	r10,sp,-1672
8000801e:	02 9b       	mov	r11,r1
80008020:	08 9c       	mov	r12,r4
80008022:	fe b0 f3 8d 	rcall	8000673c <__sprint_r>
80008026:	e0 81 03 18 	brne	80008656 <_vfprintf_r+0x1efe>
8000802a:	fa c3 f9 e0 	sub	r3,sp,-1568
8000802e:	ed b5 00 08 	bld	r5,0x8
80008032:	c0 b0       	breq	80008048 <_vfprintf_r+0x18f0>
80008034:	fa f8 06 90 	ld.w	r8,sp[1680]
80008038:	87 12       	st.w	r3[0x4],r2
8000803a:	87 06       	st.w	r3[0x0],r6
8000803c:	f0 02 00 02 	add	r2,r8,r2
80008040:	fb 42 06 90 	st.w	sp[1680],r2
80008044:	e0 8f 01 d4 	bral	800083ec <_vfprintf_r+0x1c94>
80008048:	e0 40 00 65 	cp.w	r0,101
8000804c:	e0 8a 01 d6 	brle	800083f8 <_vfprintf_r+0x1ca0>
80008050:	30 08       	mov	r8,0
80008052:	30 09       	mov	r9,0
80008054:	40 5b       	lddsp	r11,sp[0x14]
80008056:	40 7a       	lddsp	r10,sp[0x1c]
80008058:	e0 a0 17 fb 	rcall	8000b04e <__avr32_f64_cmp_eq>
8000805c:	c7 90       	breq	8000814e <_vfprintf_r+0x19f6>
8000805e:	fa f8 06 90 	ld.w	r8,sp[1680]
80008062:	fe c9 c5 36 	sub	r9,pc,-15050
80008066:	2f f8       	sub	r8,-1
80008068:	87 09       	st.w	r3[0x0],r9
8000806a:	fb 48 06 90 	st.w	sp[1680],r8
8000806e:	30 19       	mov	r9,1
80008070:	fa f8 06 8c 	ld.w	r8,sp[1676]
80008074:	87 19       	st.w	r3[0x4],r9
80008076:	2f f8       	sub	r8,-1
80008078:	fb 48 06 8c 	st.w	sp[1676],r8
8000807c:	58 78       	cp.w	r8,7
8000807e:	e0 89 00 05 	brgt	80008088 <_vfprintf_r+0x1930>
80008082:	2f 83       	sub	r3,-8
80008084:	c0 c8       	rjmp	8000809c <_vfprintf_r+0x1944>
80008086:	d7 03       	nop
80008088:	fa ca f9 78 	sub	r10,sp,-1672
8000808c:	02 9b       	mov	r11,r1
8000808e:	08 9c       	mov	r12,r4
80008090:	fe b0 f3 56 	rcall	8000673c <__sprint_r>
80008094:	e0 81 02 e1 	brne	80008656 <_vfprintf_r+0x1efe>
80008098:	fa c3 f9 e0 	sub	r3,sp,-1568
8000809c:	fa f8 06 ac 	ld.w	r8,sp[1708]
800080a0:	40 6c       	lddsp	r12,sp[0x18]
800080a2:	18 38       	cp.w	r8,r12
800080a4:	c0 55       	brlt	800080ae <_vfprintf_r+0x1956>
800080a6:	ed b5 00 00 	bld	r5,0x0
800080aa:	e0 81 02 6b 	brne	80008580 <_vfprintf_r+0x1e28>
800080ae:	fa f8 06 90 	ld.w	r8,sp[1680]
800080b2:	2f f8       	sub	r8,-1
800080b4:	40 cb       	lddsp	r11,sp[0x30]
800080b6:	fb 48 06 90 	st.w	sp[1680],r8
800080ba:	30 19       	mov	r9,1
800080bc:	fa f8 06 8c 	ld.w	r8,sp[1676]
800080c0:	87 0b       	st.w	r3[0x0],r11
800080c2:	2f f8       	sub	r8,-1
800080c4:	87 19       	st.w	r3[0x4],r9
800080c6:	fb 48 06 8c 	st.w	sp[1676],r8
800080ca:	58 78       	cp.w	r8,7
800080cc:	e0 89 00 04 	brgt	800080d4 <_vfprintf_r+0x197c>
800080d0:	2f 83       	sub	r3,-8
800080d2:	c0 b8       	rjmp	800080e8 <_vfprintf_r+0x1990>
800080d4:	fa ca f9 78 	sub	r10,sp,-1672
800080d8:	02 9b       	mov	r11,r1
800080da:	08 9c       	mov	r12,r4
800080dc:	fe b0 f3 30 	rcall	8000673c <__sprint_r>
800080e0:	e0 81 02 bb 	brne	80008656 <_vfprintf_r+0x1efe>
800080e4:	fa c3 f9 e0 	sub	r3,sp,-1568
800080e8:	40 66       	lddsp	r6,sp[0x18]
800080ea:	20 16       	sub	r6,1
800080ec:	58 06       	cp.w	r6,0
800080ee:	e0 89 00 1d 	brgt	80008128 <_vfprintf_r+0x19d0>
800080f2:	e0 8f 02 47 	bral	80008580 <_vfprintf_r+0x1e28>
800080f6:	2f 09       	sub	r9,-16
800080f8:	2f f8       	sub	r8,-1
800080fa:	fb 49 06 90 	st.w	sp[1680],r9
800080fe:	87 02       	st.w	r3[0x0],r2
80008100:	87 10       	st.w	r3[0x4],r0
80008102:	fb 48 06 8c 	st.w	sp[1676],r8
80008106:	58 78       	cp.w	r8,7
80008108:	e0 89 00 04 	brgt	80008110 <_vfprintf_r+0x19b8>
8000810c:	2f 83       	sub	r3,-8
8000810e:	c0 b8       	rjmp	80008124 <_vfprintf_r+0x19cc>
80008110:	fa ca f9 78 	sub	r10,sp,-1672
80008114:	02 9b       	mov	r11,r1
80008116:	08 9c       	mov	r12,r4
80008118:	fe b0 f3 12 	rcall	8000673c <__sprint_r>
8000811c:	e0 81 02 9d 	brne	80008656 <_vfprintf_r+0x1efe>
80008120:	fa c3 f9 e0 	sub	r3,sp,-1568
80008124:	21 06       	sub	r6,16
80008126:	c0 48       	rjmp	8000812e <_vfprintf_r+0x19d6>
80008128:	fe c2 c5 e8 	sub	r2,pc,-14872
8000812c:	31 00       	mov	r0,16
8000812e:	fa f9 06 90 	ld.w	r9,sp[1680]
80008132:	fa f8 06 8c 	ld.w	r8,sp[1676]
80008136:	fe ca c5 f6 	sub	r10,pc,-14858
8000813a:	59 06       	cp.w	r6,16
8000813c:	fe 99 ff dd 	brgt	800080f6 <_vfprintf_r+0x199e>
80008140:	0c 09       	add	r9,r6
80008142:	87 0a       	st.w	r3[0x0],r10
80008144:	fb 49 06 90 	st.w	sp[1680],r9
80008148:	2f f8       	sub	r8,-1
8000814a:	87 16       	st.w	r3[0x4],r6
8000814c:	c5 39       	rjmp	800083f2 <_vfprintf_r+0x1c9a>
8000814e:	fa fa 06 ac 	ld.w	r10,sp[1708]
80008152:	58 0a       	cp.w	r10,0
80008154:	e0 89 00 92 	brgt	80008278 <_vfprintf_r+0x1b20>
80008158:	fa f8 06 90 	ld.w	r8,sp[1680]
8000815c:	fe c9 c6 30 	sub	r9,pc,-14800
80008160:	2f f8       	sub	r8,-1
80008162:	87 09       	st.w	r3[0x0],r9
80008164:	fb 48 06 90 	st.w	sp[1680],r8
80008168:	30 19       	mov	r9,1
8000816a:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000816e:	87 19       	st.w	r3[0x4],r9
80008170:	2f f8       	sub	r8,-1
80008172:	fb 48 06 8c 	st.w	sp[1676],r8
80008176:	58 78       	cp.w	r8,7
80008178:	e0 89 00 04 	brgt	80008180 <_vfprintf_r+0x1a28>
8000817c:	2f 83       	sub	r3,-8
8000817e:	c0 b8       	rjmp	80008194 <_vfprintf_r+0x1a3c>
80008180:	fa ca f9 78 	sub	r10,sp,-1672
80008184:	02 9b       	mov	r11,r1
80008186:	08 9c       	mov	r12,r4
80008188:	fe b0 f2 da 	rcall	8000673c <__sprint_r>
8000818c:	e0 81 02 65 	brne	80008656 <_vfprintf_r+0x1efe>
80008190:	fa c3 f9 e0 	sub	r3,sp,-1568
80008194:	fa f8 06 ac 	ld.w	r8,sp[1708]
80008198:	58 08       	cp.w	r8,0
8000819a:	c0 81       	brne	800081aa <_vfprintf_r+0x1a52>
8000819c:	40 6a       	lddsp	r10,sp[0x18]
8000819e:	58 0a       	cp.w	r10,0
800081a0:	c0 51       	brne	800081aa <_vfprintf_r+0x1a52>
800081a2:	ed b5 00 00 	bld	r5,0x0
800081a6:	e0 81 01 ed 	brne	80008580 <_vfprintf_r+0x1e28>
800081aa:	40 c9       	lddsp	r9,sp[0x30]
800081ac:	fa f8 06 90 	ld.w	r8,sp[1680]
800081b0:	2f f8       	sub	r8,-1
800081b2:	87 09       	st.w	r3[0x0],r9
800081b4:	fb 48 06 90 	st.w	sp[1680],r8
800081b8:	30 19       	mov	r9,1
800081ba:	fa f8 06 8c 	ld.w	r8,sp[1676]
800081be:	87 19       	st.w	r3[0x4],r9
800081c0:	2f f8       	sub	r8,-1
800081c2:	fb 48 06 8c 	st.w	sp[1676],r8
800081c6:	58 78       	cp.w	r8,7
800081c8:	e0 89 00 04 	brgt	800081d0 <_vfprintf_r+0x1a78>
800081cc:	2f 83       	sub	r3,-8
800081ce:	c0 b8       	rjmp	800081e4 <_vfprintf_r+0x1a8c>
800081d0:	fa ca f9 78 	sub	r10,sp,-1672
800081d4:	02 9b       	mov	r11,r1
800081d6:	08 9c       	mov	r12,r4
800081d8:	fe b0 f2 b2 	rcall	8000673c <__sprint_r>
800081dc:	e0 81 02 3d 	brne	80008656 <_vfprintf_r+0x1efe>
800081e0:	fa c3 f9 e0 	sub	r3,sp,-1568
800081e4:	fa f2 06 ac 	ld.w	r2,sp[1708]
800081e8:	5c 32       	neg	r2
800081ea:	58 02       	cp.w	r2,0
800081ec:	e0 89 00 1d 	brgt	80008226 <_vfprintf_r+0x1ace>
800081f0:	c3 d8       	rjmp	8000826a <_vfprintf_r+0x1b12>
800081f2:	2f 09       	sub	r9,-16
800081f4:	2f f8       	sub	r8,-1
800081f6:	31 0e       	mov	lr,16
800081f8:	fb 49 06 90 	st.w	sp[1680],r9
800081fc:	87 00       	st.w	r3[0x0],r0
800081fe:	87 1e       	st.w	r3[0x4],lr
80008200:	fb 48 06 8c 	st.w	sp[1676],r8
80008204:	58 78       	cp.w	r8,7
80008206:	e0 89 00 04 	brgt	8000820e <_vfprintf_r+0x1ab6>
8000820a:	2f 83       	sub	r3,-8
8000820c:	c0 b8       	rjmp	80008222 <_vfprintf_r+0x1aca>
8000820e:	fa ca f9 78 	sub	r10,sp,-1672
80008212:	02 9b       	mov	r11,r1
80008214:	08 9c       	mov	r12,r4
80008216:	fe b0 f2 93 	rcall	8000673c <__sprint_r>
8000821a:	e0 81 02 1e 	brne	80008656 <_vfprintf_r+0x1efe>
8000821e:	fa c3 f9 e0 	sub	r3,sp,-1568
80008222:	21 02       	sub	r2,16
80008224:	c0 38       	rjmp	8000822a <_vfprintf_r+0x1ad2>
80008226:	fe c0 c6 e6 	sub	r0,pc,-14618
8000822a:	fa f9 06 90 	ld.w	r9,sp[1680]
8000822e:	fa f8 06 8c 	ld.w	r8,sp[1676]
80008232:	fe ca c6 f2 	sub	r10,pc,-14606
80008236:	59 02       	cp.w	r2,16
80008238:	fe 99 ff dd 	brgt	800081f2 <_vfprintf_r+0x1a9a>
8000823c:	04 09       	add	r9,r2
8000823e:	2f f8       	sub	r8,-1
80008240:	87 0a       	st.w	r3[0x0],r10
80008242:	fb 49 06 90 	st.w	sp[1680],r9
80008246:	87 12       	st.w	r3[0x4],r2
80008248:	fb 48 06 8c 	st.w	sp[1676],r8
8000824c:	58 78       	cp.w	r8,7
8000824e:	e0 89 00 04 	brgt	80008256 <_vfprintf_r+0x1afe>
80008252:	2f 83       	sub	r3,-8
80008254:	c0 b8       	rjmp	8000826a <_vfprintf_r+0x1b12>
80008256:	fa ca f9 78 	sub	r10,sp,-1672
8000825a:	02 9b       	mov	r11,r1
8000825c:	08 9c       	mov	r12,r4
8000825e:	fe b0 f2 6f 	rcall	8000673c <__sprint_r>
80008262:	e0 81 01 fa 	brne	80008656 <_vfprintf_r+0x1efe>
80008266:	fa c3 f9 e0 	sub	r3,sp,-1568
8000826a:	40 6c       	lddsp	r12,sp[0x18]
8000826c:	fa f8 06 90 	ld.w	r8,sp[1680]
80008270:	87 06       	st.w	r3[0x0],r6
80008272:	87 1c       	st.w	r3[0x4],r12
80008274:	18 08       	add	r8,r12
80008276:	cb 98       	rjmp	800083e8 <_vfprintf_r+0x1c90>
80008278:	fa f9 06 90 	ld.w	r9,sp[1680]
8000827c:	fa f8 06 8c 	ld.w	r8,sp[1676]
80008280:	40 6b       	lddsp	r11,sp[0x18]
80008282:	16 3a       	cp.w	r10,r11
80008284:	c6 f5       	brlt	80008362 <_vfprintf_r+0x1c0a>
80008286:	16 09       	add	r9,r11
80008288:	2f f8       	sub	r8,-1
8000828a:	87 06       	st.w	r3[0x0],r6
8000828c:	fb 49 06 90 	st.w	sp[1680],r9
80008290:	87 1b       	st.w	r3[0x4],r11
80008292:	fb 48 06 8c 	st.w	sp[1676],r8
80008296:	58 78       	cp.w	r8,7
80008298:	e0 89 00 04 	brgt	800082a0 <_vfprintf_r+0x1b48>
8000829c:	2f 83       	sub	r3,-8
8000829e:	c0 b8       	rjmp	800082b4 <_vfprintf_r+0x1b5c>
800082a0:	fa ca f9 78 	sub	r10,sp,-1672
800082a4:	02 9b       	mov	r11,r1
800082a6:	08 9c       	mov	r12,r4
800082a8:	fe b0 f2 4a 	rcall	8000673c <__sprint_r>
800082ac:	e0 81 01 d5 	brne	80008656 <_vfprintf_r+0x1efe>
800082b0:	fa c3 f9 e0 	sub	r3,sp,-1568
800082b4:	fa f6 06 ac 	ld.w	r6,sp[1708]
800082b8:	40 6a       	lddsp	r10,sp[0x18]
800082ba:	14 16       	sub	r6,r10
800082bc:	58 06       	cp.w	r6,0
800082be:	e0 89 00 1c 	brgt	800082f6 <_vfprintf_r+0x1b9e>
800082c2:	c3 d8       	rjmp	8000833c <_vfprintf_r+0x1be4>
800082c4:	2f 09       	sub	r9,-16
800082c6:	2f f8       	sub	r8,-1
800082c8:	fb 49 06 90 	st.w	sp[1680],r9
800082cc:	87 02       	st.w	r3[0x0],r2
800082ce:	87 10       	st.w	r3[0x4],r0
800082d0:	fb 48 06 8c 	st.w	sp[1676],r8
800082d4:	58 78       	cp.w	r8,7
800082d6:	e0 89 00 04 	brgt	800082de <_vfprintf_r+0x1b86>
800082da:	2f 83       	sub	r3,-8
800082dc:	c0 b8       	rjmp	800082f2 <_vfprintf_r+0x1b9a>
800082de:	fa ca f9 78 	sub	r10,sp,-1672
800082e2:	02 9b       	mov	r11,r1
800082e4:	08 9c       	mov	r12,r4
800082e6:	fe b0 f2 2b 	rcall	8000673c <__sprint_r>
800082ea:	e0 81 01 b6 	brne	80008656 <_vfprintf_r+0x1efe>
800082ee:	fa c3 f9 e0 	sub	r3,sp,-1568
800082f2:	21 06       	sub	r6,16
800082f4:	c0 48       	rjmp	800082fc <_vfprintf_r+0x1ba4>
800082f6:	fe c2 c7 b6 	sub	r2,pc,-14410
800082fa:	31 00       	mov	r0,16
800082fc:	fa f9 06 90 	ld.w	r9,sp[1680]
80008300:	fa f8 06 8c 	ld.w	r8,sp[1676]
80008304:	fe ca c7 c4 	sub	r10,pc,-14396
80008308:	59 06       	cp.w	r6,16
8000830a:	fe 99 ff dd 	brgt	800082c4 <_vfprintf_r+0x1b6c>
8000830e:	0c 09       	add	r9,r6
80008310:	2f f8       	sub	r8,-1
80008312:	87 0a       	st.w	r3[0x0],r10
80008314:	fb 49 06 90 	st.w	sp[1680],r9
80008318:	87 16       	st.w	r3[0x4],r6
8000831a:	fb 48 06 8c 	st.w	sp[1676],r8
8000831e:	58 78       	cp.w	r8,7
80008320:	e0 89 00 04 	brgt	80008328 <_vfprintf_r+0x1bd0>
80008324:	2f 83       	sub	r3,-8
80008326:	c0 b8       	rjmp	8000833c <_vfprintf_r+0x1be4>
80008328:	fa ca f9 78 	sub	r10,sp,-1672
8000832c:	02 9b       	mov	r11,r1
8000832e:	08 9c       	mov	r12,r4
80008330:	fe b0 f2 06 	rcall	8000673c <__sprint_r>
80008334:	e0 81 01 91 	brne	80008656 <_vfprintf_r+0x1efe>
80008338:	fa c3 f9 e0 	sub	r3,sp,-1568
8000833c:	ed b5 00 00 	bld	r5,0x0
80008340:	e0 81 01 20 	brne	80008580 <_vfprintf_r+0x1e28>
80008344:	40 c9       	lddsp	r9,sp[0x30]
80008346:	fa f8 06 90 	ld.w	r8,sp[1680]
8000834a:	2f f8       	sub	r8,-1
8000834c:	87 09       	st.w	r3[0x0],r9
8000834e:	fb 48 06 90 	st.w	sp[1680],r8
80008352:	30 19       	mov	r9,1
80008354:	fa f8 06 8c 	ld.w	r8,sp[1676]
80008358:	87 19       	st.w	r3[0x4],r9
8000835a:	2f f8       	sub	r8,-1
8000835c:	fb 48 06 8c 	st.w	sp[1676],r8
80008360:	c0 29       	rjmp	80008564 <_vfprintf_r+0x1e0c>
80008362:	14 09       	add	r9,r10
80008364:	2f f8       	sub	r8,-1
80008366:	fb 49 06 90 	st.w	sp[1680],r9
8000836a:	87 06       	st.w	r3[0x0],r6
8000836c:	87 1a       	st.w	r3[0x4],r10
8000836e:	fb 48 06 8c 	st.w	sp[1676],r8
80008372:	58 78       	cp.w	r8,7
80008374:	e0 89 00 04 	brgt	8000837c <_vfprintf_r+0x1c24>
80008378:	2f 83       	sub	r3,-8
8000837a:	c0 b8       	rjmp	80008390 <_vfprintf_r+0x1c38>
8000837c:	fa ca f9 78 	sub	r10,sp,-1672
80008380:	02 9b       	mov	r11,r1
80008382:	08 9c       	mov	r12,r4
80008384:	fe b0 f1 dc 	rcall	8000673c <__sprint_r>
80008388:	e0 81 01 67 	brne	80008656 <_vfprintf_r+0x1efe>
8000838c:	fa c3 f9 e0 	sub	r3,sp,-1568
80008390:	40 c8       	lddsp	r8,sp[0x30]
80008392:	87 08       	st.w	r3[0x0],r8
80008394:	fa f8 06 90 	ld.w	r8,sp[1680]
80008398:	2f f8       	sub	r8,-1
8000839a:	30 19       	mov	r9,1
8000839c:	fb 48 06 90 	st.w	sp[1680],r8
800083a0:	87 19       	st.w	r3[0x4],r9
800083a2:	fa f8 06 8c 	ld.w	r8,sp[1676]
800083a6:	2f f8       	sub	r8,-1
800083a8:	fb 48 06 8c 	st.w	sp[1676],r8
800083ac:	fa f2 06 ac 	ld.w	r2,sp[1708]
800083b0:	58 78       	cp.w	r8,7
800083b2:	e0 89 00 04 	brgt	800083ba <_vfprintf_r+0x1c62>
800083b6:	2f 83       	sub	r3,-8
800083b8:	c0 b8       	rjmp	800083ce <_vfprintf_r+0x1c76>
800083ba:	fa ca f9 78 	sub	r10,sp,-1672
800083be:	02 9b       	mov	r11,r1
800083c0:	08 9c       	mov	r12,r4
800083c2:	fe b0 f1 bd 	rcall	8000673c <__sprint_r>
800083c6:	e0 81 01 48 	brne	80008656 <_vfprintf_r+0x1efe>
800083ca:	fa c3 f9 e0 	sub	r3,sp,-1568
800083ce:	04 06       	add	r6,r2
800083d0:	fa f8 06 ac 	ld.w	r8,sp[1708]
800083d4:	87 06       	st.w	r3[0x0],r6
800083d6:	fa f9 06 90 	ld.w	r9,sp[1680]
800083da:	40 66       	lddsp	r6,sp[0x18]
800083dc:	40 6e       	lddsp	lr,sp[0x18]
800083de:	10 16       	sub	r6,r8
800083e0:	f2 08 01 08 	sub	r8,r9,r8
800083e4:	87 16       	st.w	r3[0x4],r6
800083e6:	1c 08       	add	r8,lr
800083e8:	fb 48 06 90 	st.w	sp[1680],r8
800083ec:	fa f8 06 8c 	ld.w	r8,sp[1676]
800083f0:	2f f8       	sub	r8,-1
800083f2:	fb 48 06 8c 	st.w	sp[1676],r8
800083f6:	cb 78       	rjmp	80008564 <_vfprintf_r+0x1e0c>
800083f8:	40 6c       	lddsp	r12,sp[0x18]
800083fa:	58 1c       	cp.w	r12,1
800083fc:	e0 89 00 06 	brgt	80008408 <_vfprintf_r+0x1cb0>
80008400:	ed b5 00 00 	bld	r5,0x0
80008404:	e0 81 00 85 	brne	8000850e <_vfprintf_r+0x1db6>
80008408:	fa f8 06 90 	ld.w	r8,sp[1680]
8000840c:	2f f8       	sub	r8,-1
8000840e:	30 19       	mov	r9,1
80008410:	fb 48 06 90 	st.w	sp[1680],r8
80008414:	87 06       	st.w	r3[0x0],r6
80008416:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000841a:	87 19       	st.w	r3[0x4],r9
8000841c:	2f f8       	sub	r8,-1
8000841e:	fb 48 06 8c 	st.w	sp[1676],r8
80008422:	58 78       	cp.w	r8,7
80008424:	e0 89 00 04 	brgt	8000842c <_vfprintf_r+0x1cd4>
80008428:	2f 83       	sub	r3,-8
8000842a:	c0 b8       	rjmp	80008440 <_vfprintf_r+0x1ce8>
8000842c:	fa ca f9 78 	sub	r10,sp,-1672
80008430:	02 9b       	mov	r11,r1
80008432:	08 9c       	mov	r12,r4
80008434:	fe b0 f1 84 	rcall	8000673c <__sprint_r>
80008438:	e0 81 01 0f 	brne	80008656 <_vfprintf_r+0x1efe>
8000843c:	fa c3 f9 e0 	sub	r3,sp,-1568
80008440:	fa f8 06 90 	ld.w	r8,sp[1680]
80008444:	2f f8       	sub	r8,-1
80008446:	40 cb       	lddsp	r11,sp[0x30]
80008448:	fb 48 06 90 	st.w	sp[1680],r8
8000844c:	30 19       	mov	r9,1
8000844e:	fa f8 06 8c 	ld.w	r8,sp[1676]
80008452:	87 0b       	st.w	r3[0x0],r11
80008454:	2f f8       	sub	r8,-1
80008456:	87 19       	st.w	r3[0x4],r9
80008458:	fb 48 06 8c 	st.w	sp[1676],r8
8000845c:	58 78       	cp.w	r8,7
8000845e:	e0 89 00 05 	brgt	80008468 <_vfprintf_r+0x1d10>
80008462:	2f 83       	sub	r3,-8
80008464:	c0 c8       	rjmp	8000847c <_vfprintf_r+0x1d24>
80008466:	d7 03       	nop
80008468:	fa ca f9 78 	sub	r10,sp,-1672
8000846c:	02 9b       	mov	r11,r1
8000846e:	08 9c       	mov	r12,r4
80008470:	fe b0 f1 66 	rcall	8000673c <__sprint_r>
80008474:	e0 81 00 f1 	brne	80008656 <_vfprintf_r+0x1efe>
80008478:	fa c3 f9 e0 	sub	r3,sp,-1568
8000847c:	30 08       	mov	r8,0
8000847e:	30 09       	mov	r9,0
80008480:	40 5b       	lddsp	r11,sp[0x14]
80008482:	40 7a       	lddsp	r10,sp[0x1c]
80008484:	e0 a0 15 e5 	rcall	8000b04e <__avr32_f64_cmp_eq>
80008488:	40 68       	lddsp	r8,sp[0x18]
8000848a:	20 18       	sub	r8,1
8000848c:	58 0c       	cp.w	r12,0
8000848e:	c0 d1       	brne	800084a8 <_vfprintf_r+0x1d50>
80008490:	2f f6       	sub	r6,-1
80008492:	87 18       	st.w	r3[0x4],r8
80008494:	87 06       	st.w	r3[0x0],r6
80008496:	fa f6 06 90 	ld.w	r6,sp[1680]
8000849a:	10 06       	add	r6,r8
8000849c:	fa f8 06 8c 	ld.w	r8,sp[1676]
800084a0:	fb 46 06 90 	st.w	sp[1680],r6
800084a4:	2f f8       	sub	r8,-1
800084a6:	c3 18       	rjmp	80008508 <_vfprintf_r+0x1db0>
800084a8:	10 96       	mov	r6,r8
800084aa:	58 08       	cp.w	r8,0
800084ac:	e0 89 00 1c 	brgt	800084e4 <_vfprintf_r+0x1d8c>
800084b0:	c4 b8       	rjmp	80008546 <_vfprintf_r+0x1dee>
800084b2:	2f 09       	sub	r9,-16
800084b4:	2f f8       	sub	r8,-1
800084b6:	fb 49 06 90 	st.w	sp[1680],r9
800084ba:	87 02       	st.w	r3[0x0],r2
800084bc:	87 10       	st.w	r3[0x4],r0
800084be:	fb 48 06 8c 	st.w	sp[1676],r8
800084c2:	58 78       	cp.w	r8,7
800084c4:	e0 89 00 04 	brgt	800084cc <_vfprintf_r+0x1d74>
800084c8:	2f 83       	sub	r3,-8
800084ca:	c0 b8       	rjmp	800084e0 <_vfprintf_r+0x1d88>
800084cc:	fa ca f9 78 	sub	r10,sp,-1672
800084d0:	02 9b       	mov	r11,r1
800084d2:	08 9c       	mov	r12,r4
800084d4:	fe b0 f1 34 	rcall	8000673c <__sprint_r>
800084d8:	e0 81 00 bf 	brne	80008656 <_vfprintf_r+0x1efe>
800084dc:	fa c3 f9 e0 	sub	r3,sp,-1568
800084e0:	21 06       	sub	r6,16
800084e2:	c0 48       	rjmp	800084ea <_vfprintf_r+0x1d92>
800084e4:	fe c2 c9 a4 	sub	r2,pc,-13916
800084e8:	31 00       	mov	r0,16
800084ea:	fa f9 06 90 	ld.w	r9,sp[1680]
800084ee:	fa f8 06 8c 	ld.w	r8,sp[1676]
800084f2:	fe ca c9 b2 	sub	r10,pc,-13902
800084f6:	59 06       	cp.w	r6,16
800084f8:	fe 99 ff dd 	brgt	800084b2 <_vfprintf_r+0x1d5a>
800084fc:	0c 09       	add	r9,r6
800084fe:	87 0a       	st.w	r3[0x0],r10
80008500:	fb 49 06 90 	st.w	sp[1680],r9
80008504:	2f f8       	sub	r8,-1
80008506:	87 16       	st.w	r3[0x4],r6
80008508:	fb 48 06 8c 	st.w	sp[1676],r8
8000850c:	c0 e8       	rjmp	80008528 <_vfprintf_r+0x1dd0>
8000850e:	fa f8 06 90 	ld.w	r8,sp[1680]
80008512:	2f f8       	sub	r8,-1
80008514:	30 19       	mov	r9,1
80008516:	fb 48 06 90 	st.w	sp[1680],r8
8000851a:	87 06       	st.w	r3[0x0],r6
8000851c:	fa f8 06 8c 	ld.w	r8,sp[1676]
80008520:	87 19       	st.w	r3[0x4],r9
80008522:	2f f8       	sub	r8,-1
80008524:	fb 48 06 8c 	st.w	sp[1676],r8
80008528:	58 78       	cp.w	r8,7
8000852a:	e0 89 00 04 	brgt	80008532 <_vfprintf_r+0x1dda>
8000852e:	2f 83       	sub	r3,-8
80008530:	c0 b8       	rjmp	80008546 <_vfprintf_r+0x1dee>
80008532:	fa ca f9 78 	sub	r10,sp,-1672
80008536:	02 9b       	mov	r11,r1
80008538:	08 9c       	mov	r12,r4
8000853a:	fe b0 f1 01 	rcall	8000673c <__sprint_r>
8000853e:	e0 81 00 8c 	brne	80008656 <_vfprintf_r+0x1efe>
80008542:	fa c3 f9 e0 	sub	r3,sp,-1568
80008546:	40 ea       	lddsp	r10,sp[0x38]
80008548:	fa f8 06 90 	ld.w	r8,sp[1680]
8000854c:	14 08       	add	r8,r10
8000854e:	fa c9 f9 64 	sub	r9,sp,-1692
80008552:	fb 48 06 90 	st.w	sp[1680],r8
80008556:	87 1a       	st.w	r3[0x4],r10
80008558:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000855c:	87 09       	st.w	r3[0x0],r9
8000855e:	2f f8       	sub	r8,-1
80008560:	fb 48 06 8c 	st.w	sp[1676],r8
80008564:	58 78       	cp.w	r8,7
80008566:	e0 89 00 04 	brgt	8000856e <_vfprintf_r+0x1e16>
8000856a:	2f 83       	sub	r3,-8
8000856c:	c0 a8       	rjmp	80008580 <_vfprintf_r+0x1e28>
8000856e:	fa ca f9 78 	sub	r10,sp,-1672
80008572:	02 9b       	mov	r11,r1
80008574:	08 9c       	mov	r12,r4
80008576:	fe b0 f0 e3 	rcall	8000673c <__sprint_r>
8000857a:	c6 e1       	brne	80008656 <_vfprintf_r+0x1efe>
8000857c:	fa c3 f9 e0 	sub	r3,sp,-1568
80008580:	e2 15 00 04 	andl	r5,0x4,COH
80008584:	c3 f0       	breq	80008602 <_vfprintf_r+0x1eaa>
80008586:	40 86       	lddsp	r6,sp[0x20]
80008588:	40 39       	lddsp	r9,sp[0xc]
8000858a:	12 16       	sub	r6,r9
8000858c:	58 06       	cp.w	r6,0
8000858e:	e0 89 00 1a 	brgt	800085c2 <_vfprintf_r+0x1e6a>
80008592:	c3 88       	rjmp	80008602 <_vfprintf_r+0x1eaa>
80008594:	2f 09       	sub	r9,-16
80008596:	2f f8       	sub	r8,-1
80008598:	fb 49 06 90 	st.w	sp[1680],r9
8000859c:	87 05       	st.w	r3[0x0],r5
8000859e:	87 12       	st.w	r3[0x4],r2
800085a0:	fb 48 06 8c 	st.w	sp[1676],r8
800085a4:	58 78       	cp.w	r8,7
800085a6:	e0 89 00 04 	brgt	800085ae <_vfprintf_r+0x1e56>
800085aa:	2f 83       	sub	r3,-8
800085ac:	c0 98       	rjmp	800085be <_vfprintf_r+0x1e66>
800085ae:	00 9a       	mov	r10,r0
800085b0:	02 9b       	mov	r11,r1
800085b2:	08 9c       	mov	r12,r4
800085b4:	fe b0 f0 c4 	rcall	8000673c <__sprint_r>
800085b8:	c4 f1       	brne	80008656 <_vfprintf_r+0x1efe>
800085ba:	fa c3 f9 e0 	sub	r3,sp,-1568
800085be:	21 06       	sub	r6,16
800085c0:	c0 68       	rjmp	800085cc <_vfprintf_r+0x1e74>
800085c2:	fe c5 ca 92 	sub	r5,pc,-13678
800085c6:	31 02       	mov	r2,16
800085c8:	fa c0 f9 78 	sub	r0,sp,-1672
800085cc:	fa f9 06 90 	ld.w	r9,sp[1680]
800085d0:	fa f8 06 8c 	ld.w	r8,sp[1676]
800085d4:	fe ca ca a4 	sub	r10,pc,-13660
800085d8:	59 06       	cp.w	r6,16
800085da:	fe 99 ff dd 	brgt	80008594 <_vfprintf_r+0x1e3c>
800085de:	0c 09       	add	r9,r6
800085e0:	2f f8       	sub	r8,-1
800085e2:	87 0a       	st.w	r3[0x0],r10
800085e4:	87 16       	st.w	r3[0x4],r6
800085e6:	fb 49 06 90 	st.w	sp[1680],r9
800085ea:	fb 48 06 8c 	st.w	sp[1676],r8
800085ee:	58 78       	cp.w	r8,7
800085f0:	e0 8a 00 09 	brle	80008602 <_vfprintf_r+0x1eaa>
800085f4:	fa ca f9 78 	sub	r10,sp,-1672
800085f8:	02 9b       	mov	r11,r1
800085fa:	08 9c       	mov	r12,r4
800085fc:	fe b0 f0 a0 	rcall	8000673c <__sprint_r>
80008600:	c2 b1       	brne	80008656 <_vfprintf_r+0x1efe>
80008602:	40 bc       	lddsp	r12,sp[0x2c]
80008604:	40 36       	lddsp	r6,sp[0xc]
80008606:	40 8e       	lddsp	lr,sp[0x20]
80008608:	ec 0e 0c 48 	max	r8,r6,lr
8000860c:	10 0c       	add	r12,r8
8000860e:	50 bc       	stdsp	sp[0x2c],r12
80008610:	fa f8 06 90 	ld.w	r8,sp[1680]
80008614:	58 08       	cp.w	r8,0
80008616:	c0 80       	breq	80008626 <_vfprintf_r+0x1ece>
80008618:	fa ca f9 78 	sub	r10,sp,-1672
8000861c:	02 9b       	mov	r11,r1
8000861e:	08 9c       	mov	r12,r4
80008620:	fe b0 f0 8e 	rcall	8000673c <__sprint_r>
80008624:	c1 91       	brne	80008656 <_vfprintf_r+0x1efe>
80008626:	30 0b       	mov	r11,0
80008628:	fa c3 f9 e0 	sub	r3,sp,-1568
8000862c:	fb 4b 06 8c 	st.w	sp[1676],r11
80008630:	fe 9f f1 22 	bral	80006874 <_vfprintf_r+0x11c>
80008634:	08 95       	mov	r5,r4
80008636:	fa f8 06 90 	ld.w	r8,sp[1680]
8000863a:	58 08       	cp.w	r8,0
8000863c:	c0 80       	breq	8000864c <_vfprintf_r+0x1ef4>
8000863e:	08 9c       	mov	r12,r4
80008640:	fa ca f9 78 	sub	r10,sp,-1672
80008644:	02 9b       	mov	r11,r1
80008646:	fe b0 f0 7b 	rcall	8000673c <__sprint_r>
8000864a:	c0 61       	brne	80008656 <_vfprintf_r+0x1efe>
8000864c:	30 08       	mov	r8,0
8000864e:	fb 48 06 8c 	st.w	sp[1676],r8
80008652:	c0 28       	rjmp	80008656 <_vfprintf_r+0x1efe>
80008654:	40 41       	lddsp	r1,sp[0x10]
80008656:	82 68       	ld.sh	r8,r1[0xc]
80008658:	ed b8 00 06 	bld	r8,0x6
8000865c:	c0 31       	brne	80008662 <_vfprintf_r+0x1f0a>
8000865e:	3f fa       	mov	r10,-1
80008660:	50 ba       	stdsp	sp[0x2c],r10
80008662:	40 bc       	lddsp	r12,sp[0x2c]
80008664:	fe 3d f9 44 	sub	sp,-1724
80008668:	d8 32       	popm	r0-r7,pc
8000866a:	d7 03       	nop

8000866c <__swsetup_r>:
8000866c:	d4 21       	pushm	r4-r7,lr
8000866e:	e0 68 01 14 	mov	r8,276
80008672:	18 96       	mov	r6,r12
80008674:	16 97       	mov	r7,r11
80008676:	70 0c       	ld.w	r12,r8[0x0]
80008678:	58 0c       	cp.w	r12,0
8000867a:	c0 60       	breq	80008686 <__swsetup_r+0x1a>
8000867c:	78 68       	ld.w	r8,r12[0x18]
8000867e:	58 08       	cp.w	r8,0
80008680:	c0 31       	brne	80008686 <__swsetup_r+0x1a>
80008682:	e0 a0 07 b9 	rcall	800095f4 <__sinit>
80008686:	fe c8 ca 26 	sub	r8,pc,-13786
8000868a:	10 37       	cp.w	r7,r8
8000868c:	c0 61       	brne	80008698 <__swsetup_r+0x2c>
8000868e:	e0 68 01 14 	mov	r8,276
80008692:	70 08       	ld.w	r8,r8[0x0]
80008694:	70 07       	ld.w	r7,r8[0x0]
80008696:	c1 28       	rjmp	800086ba <__swsetup_r+0x4e>
80008698:	fe c8 ca 18 	sub	r8,pc,-13800
8000869c:	10 37       	cp.w	r7,r8
8000869e:	c0 61       	brne	800086aa <__swsetup_r+0x3e>
800086a0:	e0 68 01 14 	mov	r8,276
800086a4:	70 08       	ld.w	r8,r8[0x0]
800086a6:	70 17       	ld.w	r7,r8[0x4]
800086a8:	c0 98       	rjmp	800086ba <__swsetup_r+0x4e>
800086aa:	fe c8 ca 0a 	sub	r8,pc,-13814
800086ae:	10 37       	cp.w	r7,r8
800086b0:	c0 51       	brne	800086ba <__swsetup_r+0x4e>
800086b2:	e0 68 01 14 	mov	r8,276
800086b6:	70 08       	ld.w	r8,r8[0x0]
800086b8:	70 27       	ld.w	r7,r8[0x8]
800086ba:	8e 68       	ld.sh	r8,r7[0xc]
800086bc:	ed b8 00 03 	bld	r8,0x3
800086c0:	c1 e0       	breq	800086fc <__swsetup_r+0x90>
800086c2:	ed b8 00 04 	bld	r8,0x4
800086c6:	c3 e1       	brne	80008742 <__swsetup_r+0xd6>
800086c8:	ed b8 00 02 	bld	r8,0x2
800086cc:	c1 51       	brne	800086f6 <__swsetup_r+0x8a>
800086ce:	6e db       	ld.w	r11,r7[0x34]
800086d0:	58 0b       	cp.w	r11,0
800086d2:	c0 a0       	breq	800086e6 <__swsetup_r+0x7a>
800086d4:	ee c8 ff bc 	sub	r8,r7,-68
800086d8:	10 3b       	cp.w	r11,r8
800086da:	c0 40       	breq	800086e2 <__swsetup_r+0x76>
800086dc:	0c 9c       	mov	r12,r6
800086de:	e0 a0 08 25 	rcall	80009728 <_free_r>
800086e2:	30 08       	mov	r8,0
800086e4:	8f d8       	st.w	r7[0x34],r8
800086e6:	8e 68       	ld.sh	r8,r7[0xc]
800086e8:	e0 18 ff db 	andl	r8,0xffdb
800086ec:	ae 68       	st.h	r7[0xc],r8
800086ee:	30 08       	mov	r8,0
800086f0:	8f 18       	st.w	r7[0x4],r8
800086f2:	6e 48       	ld.w	r8,r7[0x10]
800086f4:	8f 08       	st.w	r7[0x0],r8
800086f6:	8e 68       	ld.sh	r8,r7[0xc]
800086f8:	a3 b8       	sbr	r8,0x3
800086fa:	ae 68       	st.h	r7[0xc],r8
800086fc:	6e 48       	ld.w	r8,r7[0x10]
800086fe:	58 08       	cp.w	r8,0
80008700:	c0 b1       	brne	80008716 <__swsetup_r+0xaa>
80008702:	8e 68       	ld.sh	r8,r7[0xc]
80008704:	e2 18 02 80 	andl	r8,0x280,COH
80008708:	e0 48 02 00 	cp.w	r8,512
8000870c:	c0 50       	breq	80008716 <__swsetup_r+0xaa>
8000870e:	0c 9c       	mov	r12,r6
80008710:	0e 9b       	mov	r11,r7
80008712:	e0 a0 0a 4b 	rcall	80009ba8 <__smakebuf_r>
80008716:	8e 69       	ld.sh	r9,r7[0xc]
80008718:	f1 d9 c0 01 	bfextu	r8,r9,0x0,0x1
8000871c:	c0 70       	breq	8000872a <__swsetup_r+0xbe>
8000871e:	30 08       	mov	r8,0
80008720:	8f 28       	st.w	r7[0x8],r8
80008722:	6e 58       	ld.w	r8,r7[0x14]
80008724:	5c 38       	neg	r8
80008726:	8f 68       	st.w	r7[0x18],r8
80008728:	c0 68       	rjmp	80008734 <__swsetup_r+0xc8>
8000872a:	ed b9 00 01 	bld	r9,0x1
8000872e:	ef f8 10 05 	ld.wne	r8,r7[0x14]
80008732:	8f 28       	st.w	r7[0x8],r8
80008734:	6e 48       	ld.w	r8,r7[0x10]
80008736:	58 08       	cp.w	r8,0
80008738:	c0 61       	brne	80008744 <__swsetup_r+0xd8>
8000873a:	8e 68       	ld.sh	r8,r7[0xc]
8000873c:	ed b8 00 07 	bld	r8,0x7
80008740:	c0 21       	brne	80008744 <__swsetup_r+0xd8>
80008742:	dc 2a       	popm	r4-r7,pc,r12=-1
80008744:	d8 2a       	popm	r4-r7,pc,r12=0
80008746:	d7 03       	nop

80008748 <quorem>:
80008748:	d4 31       	pushm	r0-r7,lr
8000874a:	20 2d       	sub	sp,8
8000874c:	18 97       	mov	r7,r12
8000874e:	78 48       	ld.w	r8,r12[0x10]
80008750:	76 46       	ld.w	r6,r11[0x10]
80008752:	0c 38       	cp.w	r8,r6
80008754:	c0 34       	brge	8000875a <quorem+0x12>
80008756:	30 0c       	mov	r12,0
80008758:	c8 58       	rjmp	80008862 <quorem+0x11a>
8000875a:	ec c2 ff fc 	sub	r2,r6,-4
8000875e:	f6 c3 ff ec 	sub	r3,r11,-20
80008762:	f6 02 03 29 	ld.w	r9,r11[r2<<0x2]
80008766:	f8 02 03 2c 	ld.w	r12,r12[r2<<0x2]
8000876a:	2f f9       	sub	r9,-1
8000876c:	20 16       	sub	r6,1
8000876e:	f8 09 0d 08 	divu	r8,r12,r9
80008772:	f6 02 00 22 	add	r2,r11,r2<<0x2
80008776:	ee c4 ff ec 	sub	r4,r7,-20
8000877a:	10 95       	mov	r5,r8
8000877c:	58 08       	cp.w	r8,0
8000877e:	c4 10       	breq	80008800 <quorem+0xb8>
80008780:	30 09       	mov	r9,0
80008782:	06 9a       	mov	r10,r3
80008784:	08 98       	mov	r8,r4
80008786:	12 91       	mov	r1,r9
80008788:	50 0b       	stdsp	sp[0x0],r11
8000878a:	70 0e       	ld.w	lr,r8[0x0]
8000878c:	b1 8e       	lsr	lr,0x10
8000878e:	50 1e       	stdsp	sp[0x4],lr
80008790:	15 0e       	ld.w	lr,r10++
80008792:	fc 00 16 10 	lsr	r0,lr,0x10
80008796:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
8000879a:	ea 0e 03 41 	mac	r1,r5,lr
8000879e:	fd d1 c0 10 	bfextu	lr,r1,0x0,0x10
800087a2:	b1 81       	lsr	r1,0x10
800087a4:	40 1b       	lddsp	r11,sp[0x4]
800087a6:	ea 00 02 40 	mul	r0,r5,r0
800087aa:	e2 00 00 00 	add	r0,r1,r0
800087ae:	e3 d0 c0 10 	bfextu	r1,r0,0x0,0x10
800087b2:	02 1b       	sub	r11,r1
800087b4:	50 1b       	stdsp	sp[0x4],r11
800087b6:	70 0b       	ld.w	r11,r8[0x0]
800087b8:	e3 db c0 10 	bfextu	r1,r11,0x0,0x10
800087bc:	02 09       	add	r9,r1
800087be:	f2 0e 01 0e 	sub	lr,r9,lr
800087c2:	b0 1e       	st.h	r8[0x2],lr
800087c4:	fc 09 14 10 	asr	r9,lr,0x10
800087c8:	40 1e       	lddsp	lr,sp[0x4]
800087ca:	fc 09 00 09 	add	r9,lr,r9
800087ce:	b0 09       	st.h	r8[0x0],r9
800087d0:	e0 01 16 10 	lsr	r1,r0,0x10
800087d4:	2f c8       	sub	r8,-4
800087d6:	b1 49       	asr	r9,0x10
800087d8:	04 3a       	cp.w	r10,r2
800087da:	fe 98 ff d8 	brls	8000878a <quorem+0x42>
800087de:	40 0b       	lddsp	r11,sp[0x0]
800087e0:	58 0c       	cp.w	r12,0
800087e2:	c0 f1       	brne	80008800 <quorem+0xb8>
800087e4:	ec c8 ff fb 	sub	r8,r6,-5
800087e8:	ee 08 00 28 	add	r8,r7,r8<<0x2
800087ec:	c0 28       	rjmp	800087f0 <quorem+0xa8>
800087ee:	20 16       	sub	r6,1
800087f0:	20 48       	sub	r8,4
800087f2:	08 38       	cp.w	r8,r4
800087f4:	e0 88 00 05 	brls	800087fe <quorem+0xb6>
800087f8:	70 09       	ld.w	r9,r8[0x0]
800087fa:	58 09       	cp.w	r9,0
800087fc:	cf 90       	breq	800087ee <quorem+0xa6>
800087fe:	8f 46       	st.w	r7[0x10],r6
80008800:	0e 9c       	mov	r12,r7
80008802:	e0 a0 0c fb 	rcall	8000a1f8 <__mcmp>
80008806:	c2 d5       	brlt	80008860 <quorem+0x118>
80008808:	2f f5       	sub	r5,-1
8000880a:	08 98       	mov	r8,r4
8000880c:	30 09       	mov	r9,0
8000880e:	07 0b       	ld.w	r11,r3++
80008810:	f6 0a 16 10 	lsr	r10,r11,0x10
80008814:	70 0c       	ld.w	r12,r8[0x0]
80008816:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
8000881a:	f8 0e 16 10 	lsr	lr,r12,0x10
8000881e:	14 1e       	sub	lr,r10
80008820:	f5 dc c0 10 	bfextu	r10,r12,0x0,0x10
80008824:	16 1a       	sub	r10,r11
80008826:	12 0a       	add	r10,r9
80008828:	b0 1a       	st.h	r8[0x2],r10
8000882a:	b1 4a       	asr	r10,0x10
8000882c:	fc 0a 00 09 	add	r9,lr,r10
80008830:	b0 09       	st.h	r8[0x0],r9
80008832:	2f c8       	sub	r8,-4
80008834:	b1 49       	asr	r9,0x10
80008836:	04 33       	cp.w	r3,r2
80008838:	fe 98 ff eb 	brls	8000880e <quorem+0xc6>
8000883c:	ec c8 ff fb 	sub	r8,r6,-5
80008840:	ee 08 03 29 	ld.w	r9,r7[r8<<0x2]
80008844:	58 09       	cp.w	r9,0
80008846:	c0 d1       	brne	80008860 <quorem+0x118>
80008848:	ee 08 00 28 	add	r8,r7,r8<<0x2
8000884c:	c0 28       	rjmp	80008850 <quorem+0x108>
8000884e:	20 16       	sub	r6,1
80008850:	20 48       	sub	r8,4
80008852:	08 38       	cp.w	r8,r4
80008854:	e0 88 00 05 	brls	8000885e <quorem+0x116>
80008858:	70 09       	ld.w	r9,r8[0x0]
8000885a:	58 09       	cp.w	r9,0
8000885c:	cf 90       	breq	8000884e <quorem+0x106>
8000885e:	8f 46       	st.w	r7[0x10],r6
80008860:	0a 9c       	mov	r12,r5
80008862:	2f ed       	sub	sp,-8
80008864:	d8 32       	popm	r0-r7,pc
80008866:	d7 03       	nop

80008868 <_dtoa_r>:
80008868:	d4 31       	pushm	r0-r7,lr
8000886a:	21 ad       	sub	sp,104
8000886c:	fa c4 ff 74 	sub	r4,sp,-140
80008870:	18 97       	mov	r7,r12
80008872:	16 95       	mov	r5,r11
80008874:	68 2c       	ld.w	r12,r4[0x8]
80008876:	50 c9       	stdsp	sp[0x30],r9
80008878:	68 16       	ld.w	r6,r4[0x4]
8000887a:	68 09       	ld.w	r9,r4[0x0]
8000887c:	50 e8       	stdsp	sp[0x38],r8
8000887e:	14 94       	mov	r4,r10
80008880:	51 2c       	stdsp	sp[0x48],r12
80008882:	fa e5 00 08 	st.d	sp[8],r4
80008886:	51 59       	stdsp	sp[0x54],r9
80008888:	6e 95       	ld.w	r5,r7[0x24]
8000888a:	58 05       	cp.w	r5,0
8000888c:	c0 91       	brne	8000889e <_dtoa_r+0x36>
8000888e:	31 0c       	mov	r12,16
80008890:	e0 a0 09 ea 	rcall	80009c64 <malloc>
80008894:	99 35       	st.w	r12[0xc],r5
80008896:	8f 9c       	st.w	r7[0x24],r12
80008898:	99 15       	st.w	r12[0x4],r5
8000889a:	99 25       	st.w	r12[0x8],r5
8000889c:	99 05       	st.w	r12[0x0],r5
8000889e:	6e 99       	ld.w	r9,r7[0x24]
800088a0:	72 08       	ld.w	r8,r9[0x0]
800088a2:	58 08       	cp.w	r8,0
800088a4:	c0 f0       	breq	800088c2 <_dtoa_r+0x5a>
800088a6:	72 1a       	ld.w	r10,r9[0x4]
800088a8:	91 1a       	st.w	r8[0x4],r10
800088aa:	30 1a       	mov	r10,1
800088ac:	72 19       	ld.w	r9,r9[0x4]
800088ae:	f4 09 09 49 	lsl	r9,r10,r9
800088b2:	10 9b       	mov	r11,r8
800088b4:	91 29       	st.w	r8[0x8],r9
800088b6:	0e 9c       	mov	r12,r7
800088b8:	e0 a0 0c ba 	rcall	8000a22c <_Bfree>
800088bc:	6e 98       	ld.w	r8,r7[0x24]
800088be:	30 09       	mov	r9,0
800088c0:	91 09       	st.w	r8[0x0],r9
800088c2:	40 28       	lddsp	r8,sp[0x8]
800088c4:	10 94       	mov	r4,r8
800088c6:	58 08       	cp.w	r8,0
800088c8:	c0 64       	brge	800088d4 <_dtoa_r+0x6c>
800088ca:	f1 d8 c0 1f 	bfextu	r8,r8,0x0,0x1f
800088ce:	50 28       	stdsp	sp[0x8],r8
800088d0:	30 18       	mov	r8,1
800088d2:	c0 28       	rjmp	800088d6 <_dtoa_r+0x6e>
800088d4:	30 08       	mov	r8,0
800088d6:	8d 08       	st.w	r6[0x0],r8
800088d8:	fc 1c 7f f0 	movh	r12,0x7ff0
800088dc:	40 26       	lddsp	r6,sp[0x8]
800088de:	0c 98       	mov	r8,r6
800088e0:	e6 18 7f f0 	andh	r8,0x7ff0,COH
800088e4:	18 38       	cp.w	r8,r12
800088e6:	c2 01       	brne	80008926 <_dtoa_r+0xbe>
800088e8:	e0 68 27 0f 	mov	r8,9999
800088ec:	41 5b       	lddsp	r11,sp[0x54]
800088ee:	97 08       	st.w	r11[0x0],r8
800088f0:	40 3a       	lddsp	r10,sp[0xc]
800088f2:	58 0a       	cp.w	r10,0
800088f4:	c0 71       	brne	80008902 <_dtoa_r+0x9a>
800088f6:	ed d6 c0 14 	bfextu	r6,r6,0x0,0x14
800088fa:	c0 41       	brne	80008902 <_dtoa_r+0x9a>
800088fc:	fe cc cc ac 	sub	r12,pc,-13140
80008900:	c0 38       	rjmp	80008906 <_dtoa_r+0x9e>
80008902:	fe cc cc a6 	sub	r12,pc,-13146
80008906:	41 29       	lddsp	r9,sp[0x48]
80008908:	58 09       	cp.w	r9,0
8000890a:	e0 80 05 9a 	breq	8000943e <_dtoa_r+0xbd6>
8000890e:	f8 c8 ff fd 	sub	r8,r12,-3
80008912:	f8 c9 ff f8 	sub	r9,r12,-8
80008916:	11 8b       	ld.ub	r11,r8[0x0]
80008918:	30 0a       	mov	r10,0
8000891a:	41 25       	lddsp	r5,sp[0x48]
8000891c:	f4 0b 18 00 	cp.b	r11,r10
80008920:	f2 08 17 10 	movne	r8,r9
80008924:	c1 68       	rjmp	80008950 <_dtoa_r+0xe8>
80008926:	fa ea 00 08 	ld.d	r10,sp[8]
8000892a:	30 08       	mov	r8,0
8000892c:	fa eb 00 3c 	st.d	sp[60],r10
80008930:	30 09       	mov	r9,0
80008932:	e0 a0 13 8e 	rcall	8000b04e <__avr32_f64_cmp_eq>
80008936:	c1 00       	breq	80008956 <_dtoa_r+0xee>
80008938:	30 18       	mov	r8,1
8000893a:	41 5a       	lddsp	r10,sp[0x54]
8000893c:	95 08       	st.w	r10[0x0],r8
8000893e:	fe cc ce 12 	sub	r12,pc,-12782
80008942:	41 29       	lddsp	r9,sp[0x48]
80008944:	f8 08 00 08 	add	r8,r12,r8
80008948:	58 09       	cp.w	r9,0
8000894a:	e0 80 05 7a 	breq	8000943e <_dtoa_r+0xbd6>
8000894e:	12 95       	mov	r5,r9
80008950:	8b 08       	st.w	r5[0x0],r8
80008952:	e0 8f 05 76 	bral	8000943e <_dtoa_r+0xbd6>
80008956:	fa c8 ff 9c 	sub	r8,sp,-100
8000895a:	fa c9 ff a0 	sub	r9,sp,-96
8000895e:	fa ea 00 3c 	ld.d	r10,sp[60]
80008962:	0e 9c       	mov	r12,r7
80008964:	eb d6 c2 8b 	bfextu	r5,r6,0x14,0xb
80008968:	e0 a0 0c b4 	rcall	8000a2d0 <__d2b>
8000896c:	18 93       	mov	r3,r12
8000896e:	58 05       	cp.w	r5,0
80008970:	c0 d0       	breq	8000898a <_dtoa_r+0x122>
80008972:	fa ea 00 3c 	ld.d	r10,sp[60]
80008976:	30 04       	mov	r4,0
80008978:	f1 db c0 14 	bfextu	r8,r11,0x0,0x14
8000897c:	ea c5 03 ff 	sub	r5,r5,1023
80008980:	10 9b       	mov	r11,r8
80008982:	51 74       	stdsp	sp[0x5c],r4
80008984:	ea 1b 3f f0 	orh	r11,0x3ff0
80008988:	c2 58       	rjmp	800089d2 <_dtoa_r+0x16a>
8000898a:	41 88       	lddsp	r8,sp[0x60]
8000898c:	41 9c       	lddsp	r12,sp[0x64]
8000898e:	10 0c       	add	r12,r8
80008990:	f8 c5 fb ce 	sub	r5,r12,-1074
80008994:	e0 45 00 20 	cp.w	r5,32
80008998:	e0 8a 00 0e 	brle	800089b4 <_dtoa_r+0x14c>
8000899c:	f8 cc fb ee 	sub	r12,r12,-1042
800089a0:	40 3b       	lddsp	r11,sp[0xc]
800089a2:	ea 08 11 40 	rsub	r8,r5,64
800089a6:	f6 0c 0a 4c 	lsr	r12,r11,r12
800089aa:	ec 08 09 46 	lsl	r6,r6,r8
800089ae:	0c 4c       	or	r12,r6
800089b0:	c0 78       	rjmp	800089be <_dtoa_r+0x156>
800089b2:	d7 03       	nop
800089b4:	ea 0c 11 20 	rsub	r12,r5,32
800089b8:	40 3a       	lddsp	r10,sp[0xc]
800089ba:	f4 0c 09 4c 	lsl	r12,r10,r12
800089be:	e0 a0 12 d4 	rcall	8000af66 <__avr32_u32_to_f64>
800089c2:	fc 18 fe 10 	movh	r8,0xfe10
800089c6:	30 19       	mov	r9,1
800089c8:	ea c5 04 33 	sub	r5,r5,1075
800089cc:	f0 0b 00 0b 	add	r11,r8,r11
800089d0:	51 79       	stdsp	sp[0x5c],r9
800089d2:	30 08       	mov	r8,0
800089d4:	fc 19 3f f8 	movh	r9,0x3ff8
800089d8:	fe b0 e6 78 	rcall	800056c8 <__avr32_f64_sub>
800089dc:	e0 68 43 61 	mov	r8,17249
800089e0:	ea 18 63 6f 	orh	r8,0x636f
800089e4:	e0 69 87 a7 	mov	r9,34727
800089e8:	ea 19 3f d2 	orh	r9,0x3fd2
800089ec:	e0 a0 11 be 	rcall	8000ad68 <__avr32_f64_mul>
800089f0:	e0 68 c8 b3 	mov	r8,51379
800089f4:	ea 18 8b 60 	orh	r8,0x8b60
800089f8:	e0 69 8a 28 	mov	r9,35368
800089fc:	ea 19 3f c6 	orh	r9,0x3fc6
80008a00:	fe b0 e7 32 	rcall	80005864 <__avr32_f64_add>
80008a04:	0a 9c       	mov	r12,r5
80008a06:	14 90       	mov	r0,r10
80008a08:	16 91       	mov	r1,r11
80008a0a:	e0 a0 12 b2 	rcall	8000af6e <__avr32_s32_to_f64>
80008a0e:	e0 68 79 fb 	mov	r8,31227
80008a12:	ea 18 50 9f 	orh	r8,0x509f
80008a16:	e0 69 44 13 	mov	r9,17427
80008a1a:	ea 19 3f d3 	orh	r9,0x3fd3
80008a1e:	e0 a0 11 a5 	rcall	8000ad68 <__avr32_f64_mul>
80008a22:	14 98       	mov	r8,r10
80008a24:	16 99       	mov	r9,r11
80008a26:	00 9a       	mov	r10,r0
80008a28:	02 9b       	mov	r11,r1
80008a2a:	fe b0 e7 1d 	rcall	80005864 <__avr32_f64_add>
80008a2e:	14 90       	mov	r0,r10
80008a30:	16 91       	mov	r1,r11
80008a32:	e0 a0 12 87 	rcall	8000af40 <__avr32_f64_to_s32>
80008a36:	30 08       	mov	r8,0
80008a38:	18 96       	mov	r6,r12
80008a3a:	30 09       	mov	r9,0
80008a3c:	00 9a       	mov	r10,r0
80008a3e:	02 9b       	mov	r11,r1
80008a40:	e0 a0 13 4e 	rcall	8000b0dc <__avr32_f64_cmp_lt>
80008a44:	c0 c0       	breq	80008a5c <_dtoa_r+0x1f4>
80008a46:	0c 9c       	mov	r12,r6
80008a48:	e0 a0 12 93 	rcall	8000af6e <__avr32_s32_to_f64>
80008a4c:	14 98       	mov	r8,r10
80008a4e:	16 99       	mov	r9,r11
80008a50:	00 9a       	mov	r10,r0
80008a52:	02 9b       	mov	r11,r1
80008a54:	e0 a0 12 fd 	rcall	8000b04e <__avr32_f64_cmp_eq>
80008a58:	f7 b6 00 01 	subeq	r6,1
80008a5c:	59 66       	cp.w	r6,22
80008a5e:	e0 88 00 05 	brls	80008a68 <_dtoa_r+0x200>
80008a62:	30 18       	mov	r8,1
80008a64:	51 48       	stdsp	sp[0x50],r8
80008a66:	c1 38       	rjmp	80008a8c <_dtoa_r+0x224>
80008a68:	fe c8 cd 54 	sub	r8,pc,-12972
80008a6c:	fa ea 00 3c 	ld.d	r10,sp[60]
80008a70:	f0 06 02 38 	ld.d	r8,r8[r6<<0x3]
80008a74:	e0 a0 13 34 	rcall	8000b0dc <__avr32_f64_cmp_lt>
80008a78:	f9 b4 00 00 	moveq	r4,0
80008a7c:	fb f4 0a 14 	st.weq	sp[0x50],r4
80008a80:	f7 b6 01 01 	subne	r6,1
80008a84:	f9 bc 01 00 	movne	r12,0
80008a88:	fb fc 1a 14 	st.wne	sp[0x50],r12
80008a8c:	41 90       	lddsp	r0,sp[0x64]
80008a8e:	20 10       	sub	r0,1
80008a90:	0a 10       	sub	r0,r5
80008a92:	c0 46       	brmi	80008a9a <_dtoa_r+0x232>
80008a94:	50 40       	stdsp	sp[0x10],r0
80008a96:	30 00       	mov	r0,0
80008a98:	c0 48       	rjmp	80008aa0 <_dtoa_r+0x238>
80008a9a:	30 0b       	mov	r11,0
80008a9c:	5c 30       	neg	r0
80008a9e:	50 4b       	stdsp	sp[0x10],r11
80008aa0:	ec 02 11 00 	rsub	r2,r6,0
80008aa4:	58 06       	cp.w	r6,0
80008aa6:	fb fa 40 04 	ld.wge	r10,sp[0x10]
80008aaa:	f5 d6 e4 0a 	addge	r10,r10,r6
80008aae:	fb fa 4a 04 	st.wge	sp[0x10],r10
80008ab2:	fb f6 4a 11 	st.wge	sp[0x44],r6
80008ab6:	f9 b2 04 00 	movge	r2,0
80008aba:	e1 d6 e5 10 	sublt	r0,r0,r6
80008abe:	f9 b9 05 00 	movlt	r9,0
80008ac2:	fb f9 5a 11 	st.wlt	sp[0x44],r9
80008ac6:	40 c8       	lddsp	r8,sp[0x30]
80008ac8:	58 98       	cp.w	r8,9
80008aca:	e0 8b 00 20 	brhi	80008b0a <_dtoa_r+0x2a2>
80008ace:	58 58       	cp.w	r8,5
80008ad0:	f9 b4 0a 01 	movle	r4,1
80008ad4:	fb f5 90 0c 	ld.wgt	r5,sp[0x30]
80008ad8:	f7 b5 09 04 	subgt	r5,4
80008adc:	fb f5 9a 0c 	st.wgt	sp[0x30],r5
80008ae0:	f9 b4 09 00 	movgt	r4,0
80008ae4:	40 cc       	lddsp	r12,sp[0x30]
80008ae6:	58 3c       	cp.w	r12,3
80008ae8:	c2 d0       	breq	80008b42 <_dtoa_r+0x2da>
80008aea:	e0 89 00 05 	brgt	80008af4 <_dtoa_r+0x28c>
80008aee:	58 2c       	cp.w	r12,2
80008af0:	c1 01       	brne	80008b10 <_dtoa_r+0x2a8>
80008af2:	c1 88       	rjmp	80008b22 <_dtoa_r+0x2ba>
80008af4:	40 cb       	lddsp	r11,sp[0x30]
80008af6:	58 4b       	cp.w	r11,4
80008af8:	c0 60       	breq	80008b04 <_dtoa_r+0x29c>
80008afa:	58 5b       	cp.w	r11,5
80008afc:	c0 a1       	brne	80008b10 <_dtoa_r+0x2a8>
80008afe:	30 1a       	mov	r10,1
80008b00:	50 da       	stdsp	sp[0x34],r10
80008b02:	c2 28       	rjmp	80008b46 <_dtoa_r+0x2de>
80008b04:	30 19       	mov	r9,1
80008b06:	50 d9       	stdsp	sp[0x34],r9
80008b08:	c0 f8       	rjmp	80008b26 <_dtoa_r+0x2be>
80008b0a:	30 08       	mov	r8,0
80008b0c:	30 14       	mov	r4,1
80008b0e:	50 c8       	stdsp	sp[0x30],r8
80008b10:	3f f5       	mov	r5,-1
80008b12:	30 1c       	mov	r12,1
80008b14:	30 0b       	mov	r11,0
80008b16:	50 95       	stdsp	sp[0x24],r5
80008b18:	50 dc       	stdsp	sp[0x34],r12
80008b1a:	0a 91       	mov	r1,r5
80008b1c:	31 28       	mov	r8,18
80008b1e:	50 eb       	stdsp	sp[0x38],r11
80008b20:	c2 08       	rjmp	80008b60 <_dtoa_r+0x2f8>
80008b22:	30 0a       	mov	r10,0
80008b24:	50 da       	stdsp	sp[0x34],r10
80008b26:	40 e9       	lddsp	r9,sp[0x38]
80008b28:	58 09       	cp.w	r9,0
80008b2a:	e0 89 00 07 	brgt	80008b38 <_dtoa_r+0x2d0>
80008b2e:	30 18       	mov	r8,1
80008b30:	50 98       	stdsp	sp[0x24],r8
80008b32:	10 91       	mov	r1,r8
80008b34:	50 e8       	stdsp	sp[0x38],r8
80008b36:	c1 58       	rjmp	80008b60 <_dtoa_r+0x2f8>
80008b38:	40 e5       	lddsp	r5,sp[0x38]
80008b3a:	50 95       	stdsp	sp[0x24],r5
80008b3c:	0a 91       	mov	r1,r5
80008b3e:	0a 98       	mov	r8,r5
80008b40:	c1 08       	rjmp	80008b60 <_dtoa_r+0x2f8>
80008b42:	30 0c       	mov	r12,0
80008b44:	50 dc       	stdsp	sp[0x34],r12
80008b46:	40 eb       	lddsp	r11,sp[0x38]
80008b48:	ec 0b 00 0b 	add	r11,r6,r11
80008b4c:	50 9b       	stdsp	sp[0x24],r11
80008b4e:	16 98       	mov	r8,r11
80008b50:	2f f8       	sub	r8,-1
80008b52:	58 08       	cp.w	r8,0
80008b54:	e0 89 00 05 	brgt	80008b5e <_dtoa_r+0x2f6>
80008b58:	10 91       	mov	r1,r8
80008b5a:	30 18       	mov	r8,1
80008b5c:	c0 28       	rjmp	80008b60 <_dtoa_r+0x2f8>
80008b5e:	10 91       	mov	r1,r8
80008b60:	30 09       	mov	r9,0
80008b62:	6e 9a       	ld.w	r10,r7[0x24]
80008b64:	95 19       	st.w	r10[0x4],r9
80008b66:	30 49       	mov	r9,4
80008b68:	c0 68       	rjmp	80008b74 <_dtoa_r+0x30c>
80008b6a:	d7 03       	nop
80008b6c:	6a 1a       	ld.w	r10,r5[0x4]
80008b6e:	a1 79       	lsl	r9,0x1
80008b70:	2f fa       	sub	r10,-1
80008b72:	8b 1a       	st.w	r5[0x4],r10
80008b74:	6e 95       	ld.w	r5,r7[0x24]
80008b76:	f2 ca ff ec 	sub	r10,r9,-20
80008b7a:	10 3a       	cp.w	r10,r8
80008b7c:	fe 98 ff f8 	brls	80008b6c <_dtoa_r+0x304>
80008b80:	6a 1b       	ld.w	r11,r5[0x4]
80008b82:	0e 9c       	mov	r12,r7
80008b84:	e0 a0 0b 6e 	rcall	8000a260 <_Balloc>
80008b88:	58 e1       	cp.w	r1,14
80008b8a:	5f 88       	srls	r8
80008b8c:	8b 0c       	st.w	r5[0x0],r12
80008b8e:	f1 e4 00 04 	and	r4,r8,r4
80008b92:	6e 98       	ld.w	r8,r7[0x24]
80008b94:	70 08       	ld.w	r8,r8[0x0]
80008b96:	50 88       	stdsp	sp[0x20],r8
80008b98:	e0 80 01 82 	breq	80008e9c <_dtoa_r+0x634>
80008b9c:	58 06       	cp.w	r6,0
80008b9e:	e0 8a 00 43 	brle	80008c24 <_dtoa_r+0x3bc>
80008ba2:	f3 d6 c0 04 	bfextu	r9,r6,0x0,0x4
80008ba6:	fe c8 ce 92 	sub	r8,pc,-12654
80008baa:	f0 09 02 34 	ld.d	r4,r8[r9<<0x3]
80008bae:	fa e5 00 18 	st.d	sp[24],r4
80008bb2:	ec 04 14 04 	asr	r4,r6,0x4
80008bb6:	ed b4 00 04 	bld	r4,0x4
80008bba:	c0 30       	breq	80008bc0 <_dtoa_r+0x358>
80008bbc:	30 25       	mov	r5,2
80008bbe:	c1 08       	rjmp	80008bde <_dtoa_r+0x376>
80008bc0:	fe c8 cd e4 	sub	r8,pc,-12828
80008bc4:	f0 e8 00 20 	ld.d	r8,r8[32]
80008bc8:	fa ea 00 3c 	ld.d	r10,sp[60]
80008bcc:	e9 d4 c0 04 	bfextu	r4,r4,0x0,0x4
80008bd0:	fe b0 e6 d2 	rcall	80005974 <__avr32_f64_div>
80008bd4:	30 35       	mov	r5,3
80008bd6:	14 98       	mov	r8,r10
80008bd8:	16 99       	mov	r9,r11
80008bda:	fa e9 00 08 	st.d	sp[8],r8
80008bde:	fe cc ce 02 	sub	r12,pc,-12798
80008be2:	50 a3       	stdsp	sp[0x28],r3
80008be4:	0c 93       	mov	r3,r6
80008be6:	18 96       	mov	r6,r12
80008be8:	c0 f8       	rjmp	80008c06 <_dtoa_r+0x39e>
80008bea:	fa ea 00 18 	ld.d	r10,sp[24]
80008bee:	ed b4 00 00 	bld	r4,0x0
80008bf2:	c0 81       	brne	80008c02 <_dtoa_r+0x39a>
80008bf4:	ec e8 00 00 	ld.d	r8,r6[0]
80008bf8:	2f f5       	sub	r5,-1
80008bfa:	e0 a0 10 b7 	rcall	8000ad68 <__avr32_f64_mul>
80008bfe:	fa eb 00 18 	st.d	sp[24],r10
80008c02:	a1 54       	asr	r4,0x1
80008c04:	2f 86       	sub	r6,-8
80008c06:	58 04       	cp.w	r4,0
80008c08:	cf 11       	brne	80008bea <_dtoa_r+0x382>
80008c0a:	fa e8 00 18 	ld.d	r8,sp[24]
80008c0e:	fa ea 00 08 	ld.d	r10,sp[8]
80008c12:	06 96       	mov	r6,r3
80008c14:	fe b0 e6 b0 	rcall	80005974 <__avr32_f64_div>
80008c18:	40 a3       	lddsp	r3,sp[0x28]
80008c1a:	14 98       	mov	r8,r10
80008c1c:	16 99       	mov	r9,r11
80008c1e:	fa e9 00 08 	st.d	sp[8],r8
80008c22:	c2 f8       	rjmp	80008c80 <_dtoa_r+0x418>
80008c24:	ec 08 11 00 	rsub	r8,r6,0
80008c28:	c0 31       	brne	80008c2e <_dtoa_r+0x3c6>
80008c2a:	30 25       	mov	r5,2
80008c2c:	c2 a8       	rjmp	80008c80 <_dtoa_r+0x418>
80008c2e:	fe cc ce 52 	sub	r12,pc,-12718
80008c32:	f0 04 14 04 	asr	r4,r8,0x4
80008c36:	50 1c       	stdsp	sp[0x4],r12
80008c38:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80008c3c:	fe c9 cf 28 	sub	r9,pc,-12504
80008c40:	fa ea 00 3c 	ld.d	r10,sp[60]
80008c44:	f2 08 02 38 	ld.d	r8,r9[r8<<0x3]
80008c48:	e0 a0 10 90 	rcall	8000ad68 <__avr32_f64_mul>
80008c4c:	40 1c       	lddsp	r12,sp[0x4]
80008c4e:	50 63       	stdsp	sp[0x18],r3
80008c50:	30 25       	mov	r5,2
80008c52:	0c 93       	mov	r3,r6
80008c54:	fa eb 00 08 	st.d	sp[8],r10
80008c58:	18 96       	mov	r6,r12
80008c5a:	c0 f8       	rjmp	80008c78 <_dtoa_r+0x410>
80008c5c:	fa ea 00 08 	ld.d	r10,sp[8]
80008c60:	ed b4 00 00 	bld	r4,0x0
80008c64:	c0 81       	brne	80008c74 <_dtoa_r+0x40c>
80008c66:	ec e8 00 00 	ld.d	r8,r6[0]
80008c6a:	2f f5       	sub	r5,-1
80008c6c:	e0 a0 10 7e 	rcall	8000ad68 <__avr32_f64_mul>
80008c70:	fa eb 00 08 	st.d	sp[8],r10
80008c74:	a1 54       	asr	r4,0x1
80008c76:	2f 86       	sub	r6,-8
80008c78:	58 04       	cp.w	r4,0
80008c7a:	cf 11       	brne	80008c5c <_dtoa_r+0x3f4>
80008c7c:	06 96       	mov	r6,r3
80008c7e:	40 63       	lddsp	r3,sp[0x18]
80008c80:	41 4a       	lddsp	r10,sp[0x50]
80008c82:	58 0a       	cp.w	r10,0
80008c84:	c2 a0       	breq	80008cd8 <_dtoa_r+0x470>
80008c86:	fa e8 00 08 	ld.d	r8,sp[8]
80008c8a:	58 01       	cp.w	r1,0
80008c8c:	5f 94       	srgt	r4
80008c8e:	fa e9 00 18 	st.d	sp[24],r8
80008c92:	30 08       	mov	r8,0
80008c94:	fc 19 3f f0 	movh	r9,0x3ff0
80008c98:	fa ea 00 18 	ld.d	r10,sp[24]
80008c9c:	e0 a0 12 20 	rcall	8000b0dc <__avr32_f64_cmp_lt>
80008ca0:	f9 bc 00 00 	moveq	r12,0
80008ca4:	f9 bc 01 01 	movne	r12,1
80008ca8:	e9 ec 00 0c 	and	r12,r4,r12
80008cac:	c1 60       	breq	80008cd8 <_dtoa_r+0x470>
80008cae:	40 98       	lddsp	r8,sp[0x24]
80008cb0:	58 08       	cp.w	r8,0
80008cb2:	e0 8a 00 f1 	brle	80008e94 <_dtoa_r+0x62c>
80008cb6:	30 08       	mov	r8,0
80008cb8:	fc 19 40 24 	movh	r9,0x4024
80008cbc:	ec c4 00 01 	sub	r4,r6,1
80008cc0:	fa ea 00 18 	ld.d	r10,sp[24]
80008cc4:	2f f5       	sub	r5,-1
80008cc6:	50 64       	stdsp	sp[0x18],r4
80008cc8:	e0 a0 10 50 	rcall	8000ad68 <__avr32_f64_mul>
80008ccc:	40 94       	lddsp	r4,sp[0x24]
80008cce:	14 98       	mov	r8,r10
80008cd0:	16 99       	mov	r9,r11
80008cd2:	fa e9 00 08 	st.d	sp[8],r8
80008cd6:	c0 38       	rjmp	80008cdc <_dtoa_r+0x474>
80008cd8:	50 66       	stdsp	sp[0x18],r6
80008cda:	02 94       	mov	r4,r1
80008cdc:	0a 9c       	mov	r12,r5
80008cde:	e0 a0 11 48 	rcall	8000af6e <__avr32_s32_to_f64>
80008ce2:	fa e8 00 08 	ld.d	r8,sp[8]
80008ce6:	e0 a0 10 41 	rcall	8000ad68 <__avr32_f64_mul>
80008cea:	30 08       	mov	r8,0
80008cec:	fc 19 40 1c 	movh	r9,0x401c
80008cf0:	fe b0 e5 ba 	rcall	80005864 <__avr32_f64_add>
80008cf4:	14 98       	mov	r8,r10
80008cf6:	16 99       	mov	r9,r11
80008cf8:	fa e9 00 28 	st.d	sp[40],r8
80008cfc:	fc 18 fc c0 	movh	r8,0xfcc0
80008d00:	40 a5       	lddsp	r5,sp[0x28]
80008d02:	10 05       	add	r5,r8
80008d04:	50 a5       	stdsp	sp[0x28],r5
80008d06:	58 04       	cp.w	r4,0
80008d08:	c2 11       	brne	80008d4a <_dtoa_r+0x4e2>
80008d0a:	fa ea 00 08 	ld.d	r10,sp[8]
80008d0e:	30 08       	mov	r8,0
80008d10:	fc 19 40 14 	movh	r9,0x4014
80008d14:	fe b0 e4 da 	rcall	800056c8 <__avr32_f64_sub>
80008d18:	40 bc       	lddsp	r12,sp[0x2c]
80008d1a:	fa eb 00 08 	st.d	sp[8],r10
80008d1e:	14 98       	mov	r8,r10
80008d20:	16 99       	mov	r9,r11
80008d22:	18 9a       	mov	r10,r12
80008d24:	0a 9b       	mov	r11,r5
80008d26:	e0 a0 11 db 	rcall	8000b0dc <__avr32_f64_cmp_lt>
80008d2a:	e0 81 02 54 	brne	800091d2 <_dtoa_r+0x96a>
80008d2e:	0a 98       	mov	r8,r5
80008d30:	40 b9       	lddsp	r9,sp[0x2c]
80008d32:	ee 18 80 00 	eorh	r8,0x8000
80008d36:	fa ea 00 08 	ld.d	r10,sp[8]
80008d3a:	10 95       	mov	r5,r8
80008d3c:	12 98       	mov	r8,r9
80008d3e:	0a 99       	mov	r9,r5
80008d40:	e0 a0 11 ce 	rcall	8000b0dc <__avr32_f64_cmp_lt>
80008d44:	e0 81 02 3e 	brne	800091c0 <_dtoa_r+0x958>
80008d48:	ca 68       	rjmp	80008e94 <_dtoa_r+0x62c>
80008d4a:	fe c9 d0 36 	sub	r9,pc,-12234
80008d4e:	e8 c8 00 01 	sub	r8,r4,1
80008d52:	40 d5       	lddsp	r5,sp[0x34]
80008d54:	58 05       	cp.w	r5,0
80008d56:	c4 f0       	breq	80008df4 <_dtoa_r+0x58c>
80008d58:	30 0c       	mov	r12,0
80008d5a:	f2 08 02 38 	ld.d	r8,r9[r8<<0x3]
80008d5e:	51 3c       	stdsp	sp[0x4c],r12
80008d60:	30 0a       	mov	r10,0
80008d62:	fc 1b 3f e0 	movh	r11,0x3fe0
80008d66:	fe b0 e6 07 	rcall	80005974 <__avr32_f64_div>
80008d6a:	fa e8 00 28 	ld.d	r8,sp[40]
80008d6e:	40 85       	lddsp	r5,sp[0x20]
80008d70:	fe b0 e4 ac 	rcall	800056c8 <__avr32_f64_sub>
80008d74:	fa eb 00 28 	st.d	sp[40],r10
80008d78:	fa ea 00 08 	ld.d	r10,sp[8]
80008d7c:	e0 a0 10 e2 	rcall	8000af40 <__avr32_f64_to_s32>
80008d80:	51 6c       	stdsp	sp[0x58],r12
80008d82:	e0 a0 10 f6 	rcall	8000af6e <__avr32_s32_to_f64>
80008d86:	14 98       	mov	r8,r10
80008d88:	16 99       	mov	r9,r11
80008d8a:	fa ea 00 08 	ld.d	r10,sp[8]
80008d8e:	fe b0 e4 9d 	rcall	800056c8 <__avr32_f64_sub>
80008d92:	fa eb 00 08 	st.d	sp[8],r10
80008d96:	41 68       	lddsp	r8,sp[0x58]
80008d98:	2d 08       	sub	r8,-48
80008d9a:	0a c8       	st.b	r5++,r8
80008d9c:	41 39       	lddsp	r9,sp[0x4c]
80008d9e:	2f f9       	sub	r9,-1
80008da0:	51 39       	stdsp	sp[0x4c],r9
80008da2:	fa e8 00 28 	ld.d	r8,sp[40]
80008da6:	e0 a0 11 9b 	rcall	8000b0dc <__avr32_f64_cmp_lt>
80008daa:	e0 81 03 39 	brne	8000941c <_dtoa_r+0xbb4>
80008dae:	fa e8 00 08 	ld.d	r8,sp[8]
80008db2:	30 0a       	mov	r10,0
80008db4:	fc 1b 3f f0 	movh	r11,0x3ff0
80008db8:	fe b0 e4 88 	rcall	800056c8 <__avr32_f64_sub>
80008dbc:	fa e8 00 28 	ld.d	r8,sp[40]
80008dc0:	e0 a0 11 8e 	rcall	8000b0dc <__avr32_f64_cmp_lt>
80008dc4:	fa ea 00 28 	ld.d	r10,sp[40]
80008dc8:	30 08       	mov	r8,0
80008dca:	fc 19 40 24 	movh	r9,0x4024
80008dce:	e0 81 00 da 	brne	80008f82 <_dtoa_r+0x71a>
80008dd2:	41 3c       	lddsp	r12,sp[0x4c]
80008dd4:	08 3c       	cp.w	r12,r4
80008dd6:	c5 f4       	brge	80008e94 <_dtoa_r+0x62c>
80008dd8:	e0 a0 0f c8 	rcall	8000ad68 <__avr32_f64_mul>
80008ddc:	30 08       	mov	r8,0
80008dde:	fa eb 00 28 	st.d	sp[40],r10
80008de2:	fc 19 40 24 	movh	r9,0x4024
80008de6:	fa ea 00 08 	ld.d	r10,sp[8]
80008dea:	e0 a0 0f bf 	rcall	8000ad68 <__avr32_f64_mul>
80008dee:	fa eb 00 08 	st.d	sp[8],r10
80008df2:	cc 3b       	rjmp	80008d78 <_dtoa_r+0x510>
80008df4:	40 85       	lddsp	r5,sp[0x20]
80008df6:	08 05       	add	r5,r4
80008df8:	f2 08 02 3a 	ld.d	r10,r9[r8<<0x3]
80008dfc:	51 35       	stdsp	sp[0x4c],r5
80008dfe:	fa e8 00 28 	ld.d	r8,sp[40]
80008e02:	40 85       	lddsp	r5,sp[0x20]
80008e04:	e0 a0 0f b2 	rcall	8000ad68 <__avr32_f64_mul>
80008e08:	fa eb 00 28 	st.d	sp[40],r10
80008e0c:	fa ea 00 08 	ld.d	r10,sp[8]
80008e10:	e0 a0 10 98 	rcall	8000af40 <__avr32_f64_to_s32>
80008e14:	51 6c       	stdsp	sp[0x58],r12
80008e16:	e0 a0 10 ac 	rcall	8000af6e <__avr32_s32_to_f64>
80008e1a:	14 98       	mov	r8,r10
80008e1c:	16 99       	mov	r9,r11
80008e1e:	fa ea 00 08 	ld.d	r10,sp[8]
80008e22:	fe b0 e4 53 	rcall	800056c8 <__avr32_f64_sub>
80008e26:	fa eb 00 08 	st.d	sp[8],r10
80008e2a:	41 68       	lddsp	r8,sp[0x58]
80008e2c:	2d 08       	sub	r8,-48
80008e2e:	0a c8       	st.b	r5++,r8
80008e30:	41 3c       	lddsp	r12,sp[0x4c]
80008e32:	18 35       	cp.w	r5,r12
80008e34:	c2 81       	brne	80008e84 <_dtoa_r+0x61c>
80008e36:	30 08       	mov	r8,0
80008e38:	fc 19 3f e0 	movh	r9,0x3fe0
80008e3c:	fa ea 00 28 	ld.d	r10,sp[40]
80008e40:	fe b0 e5 12 	rcall	80005864 <__avr32_f64_add>
80008e44:	40 85       	lddsp	r5,sp[0x20]
80008e46:	fa e8 00 08 	ld.d	r8,sp[8]
80008e4a:	08 05       	add	r5,r4
80008e4c:	e0 a0 11 48 	rcall	8000b0dc <__avr32_f64_cmp_lt>
80008e50:	e0 81 00 99 	brne	80008f82 <_dtoa_r+0x71a>
80008e54:	fa e8 00 28 	ld.d	r8,sp[40]
80008e58:	30 0a       	mov	r10,0
80008e5a:	fc 1b 3f e0 	movh	r11,0x3fe0
80008e5e:	fe b0 e4 35 	rcall	800056c8 <__avr32_f64_sub>
80008e62:	14 98       	mov	r8,r10
80008e64:	16 99       	mov	r9,r11
80008e66:	fa ea 00 08 	ld.d	r10,sp[8]
80008e6a:	e0 a0 11 39 	rcall	8000b0dc <__avr32_f64_cmp_lt>
80008e6e:	c1 30       	breq	80008e94 <_dtoa_r+0x62c>
80008e70:	33 09       	mov	r9,48
80008e72:	0a 98       	mov	r8,r5
80008e74:	11 7a       	ld.ub	r10,--r8
80008e76:	f2 0a 18 00 	cp.b	r10,r9
80008e7a:	e0 81 02 d1 	brne	8000941c <_dtoa_r+0xbb4>
80008e7e:	10 95       	mov	r5,r8
80008e80:	cf 9b       	rjmp	80008e72 <_dtoa_r+0x60a>
80008e82:	d7 03       	nop
80008e84:	30 08       	mov	r8,0
80008e86:	fc 19 40 24 	movh	r9,0x4024
80008e8a:	e0 a0 0f 6f 	rcall	8000ad68 <__avr32_f64_mul>
80008e8e:	fa eb 00 08 	st.d	sp[8],r10
80008e92:	cb db       	rjmp	80008e0c <_dtoa_r+0x5a4>
80008e94:	fa ea 00 3c 	ld.d	r10,sp[60]
80008e98:	fa eb 00 08 	st.d	sp[8],r10
80008e9c:	58 e6       	cp.w	r6,14
80008e9e:	5f ab       	srle	r11
80008ea0:	41 8a       	lddsp	r10,sp[0x60]
80008ea2:	30 08       	mov	r8,0
80008ea4:	f4 09 11 ff 	rsub	r9,r10,-1
80008ea8:	f7 e9 03 f9 	and	r9,r11,r9>>0x1f
80008eac:	f0 09 18 00 	cp.b	r9,r8
80008eb0:	e0 80 00 82 	breq	80008fb4 <_dtoa_r+0x74c>
80008eb4:	40 ea       	lddsp	r10,sp[0x38]
80008eb6:	58 01       	cp.w	r1,0
80008eb8:	5f a9       	srle	r9
80008eba:	f3 ea 03 f9 	and	r9,r9,r10>>0x1f
80008ebe:	fe ca d1 aa 	sub	r10,pc,-11862
80008ec2:	f4 06 02 34 	ld.d	r4,r10[r6<<0x3]
80008ec6:	fa e5 00 10 	st.d	sp[16],r4
80008eca:	f0 09 18 00 	cp.b	r9,r8
80008ece:	c1 40       	breq	80008ef6 <_dtoa_r+0x68e>
80008ed0:	58 01       	cp.w	r1,0
80008ed2:	e0 81 01 77 	brne	800091c0 <_dtoa_r+0x958>
80008ed6:	30 08       	mov	r8,0
80008ed8:	fc 19 40 14 	movh	r9,0x4014
80008edc:	08 9a       	mov	r10,r4
80008ede:	0a 9b       	mov	r11,r5
80008ee0:	e0 a0 0f 44 	rcall	8000ad68 <__avr32_f64_mul>
80008ee4:	fa e8 00 08 	ld.d	r8,sp[8]
80008ee8:	e0 a0 10 c6 	rcall	8000b074 <__avr32_f64_cmp_ge>
80008eec:	e0 81 01 6a 	brne	800091c0 <_dtoa_r+0x958>
80008ef0:	02 92       	mov	r2,r1
80008ef2:	e0 8f 01 72 	bral	800091d6 <_dtoa_r+0x96e>
80008ef6:	40 85       	lddsp	r5,sp[0x20]
80008ef8:	30 14       	mov	r4,1
80008efa:	fa e8 00 10 	ld.d	r8,sp[16]
80008efe:	fa ea 00 08 	ld.d	r10,sp[8]
80008f02:	fe b0 e5 39 	rcall	80005974 <__avr32_f64_div>
80008f06:	e0 a0 10 1d 	rcall	8000af40 <__avr32_f64_to_s32>
80008f0a:	18 92       	mov	r2,r12
80008f0c:	e0 a0 10 31 	rcall	8000af6e <__avr32_s32_to_f64>
80008f10:	fa e8 00 10 	ld.d	r8,sp[16]
80008f14:	e0 a0 0f 2a 	rcall	8000ad68 <__avr32_f64_mul>
80008f18:	14 98       	mov	r8,r10
80008f1a:	16 99       	mov	r9,r11
80008f1c:	fa ea 00 08 	ld.d	r10,sp[8]
80008f20:	fe b0 e3 d4 	rcall	800056c8 <__avr32_f64_sub>
80008f24:	fa eb 00 08 	st.d	sp[8],r10
80008f28:	e4 c8 ff d0 	sub	r8,r2,-48
80008f2c:	0a c8       	st.b	r5++,r8
80008f2e:	fc 19 40 24 	movh	r9,0x4024
80008f32:	30 08       	mov	r8,0
80008f34:	02 34       	cp.w	r4,r1
80008f36:	c3 31       	brne	80008f9c <_dtoa_r+0x734>
80008f38:	fa e8 00 08 	ld.d	r8,sp[8]
80008f3c:	fe b0 e4 94 	rcall	80005864 <__avr32_f64_add>
80008f40:	16 91       	mov	r1,r11
80008f42:	14 90       	mov	r0,r10
80008f44:	14 98       	mov	r8,r10
80008f46:	02 99       	mov	r9,r1
80008f48:	fa ea 00 10 	ld.d	r10,sp[16]
80008f4c:	e0 a0 10 c8 	rcall	8000b0dc <__avr32_f64_cmp_lt>
80008f50:	c1 a1       	brne	80008f84 <_dtoa_r+0x71c>
80008f52:	fa e8 00 10 	ld.d	r8,sp[16]
80008f56:	00 9a       	mov	r10,r0
80008f58:	02 9b       	mov	r11,r1
80008f5a:	e0 a0 10 7a 	rcall	8000b04e <__avr32_f64_cmp_eq>
80008f5e:	e0 80 02 5e 	breq	8000941a <_dtoa_r+0xbb2>
80008f62:	e5 d2 c0 01 	bfextu	r2,r2,0x0,0x1
80008f66:	c0 f1       	brne	80008f84 <_dtoa_r+0x71c>
80008f68:	e0 8f 02 59 	bral	8000941a <_dtoa_r+0xbb2>
80008f6c:	40 8a       	lddsp	r10,sp[0x20]
80008f6e:	14 38       	cp.w	r8,r10
80008f70:	c0 30       	breq	80008f76 <_dtoa_r+0x70e>
80008f72:	10 95       	mov	r5,r8
80008f74:	c0 98       	rjmp	80008f86 <_dtoa_r+0x71e>
80008f76:	33 08       	mov	r8,48
80008f78:	40 89       	lddsp	r9,sp[0x20]
80008f7a:	2f f6       	sub	r6,-1
80008f7c:	b2 88       	st.b	r9[0x0],r8
80008f7e:	40 88       	lddsp	r8,sp[0x20]
80008f80:	c0 88       	rjmp	80008f90 <_dtoa_r+0x728>
80008f82:	40 66       	lddsp	r6,sp[0x18]
80008f84:	33 99       	mov	r9,57
80008f86:	0a 98       	mov	r8,r5
80008f88:	11 7a       	ld.ub	r10,--r8
80008f8a:	f2 0a 18 00 	cp.b	r10,r9
80008f8e:	ce f0       	breq	80008f6c <_dtoa_r+0x704>
80008f90:	50 66       	stdsp	sp[0x18],r6
80008f92:	11 89       	ld.ub	r9,r8[0x0]
80008f94:	2f f9       	sub	r9,-1
80008f96:	b0 89       	st.b	r8[0x0],r9
80008f98:	e0 8f 02 42 	bral	8000941c <_dtoa_r+0xbb4>
80008f9c:	e0 a0 0e e6 	rcall	8000ad68 <__avr32_f64_mul>
80008fa0:	2f f4       	sub	r4,-1
80008fa2:	fa eb 00 08 	st.d	sp[8],r10
80008fa6:	30 08       	mov	r8,0
80008fa8:	30 09       	mov	r9,0
80008faa:	e0 a0 10 52 	rcall	8000b04e <__avr32_f64_cmp_eq>
80008fae:	ca 60       	breq	80008efa <_dtoa_r+0x692>
80008fb0:	e0 8f 02 35 	bral	8000941a <_dtoa_r+0xbb2>
80008fb4:	40 d8       	lddsp	r8,sp[0x34]
80008fb6:	58 08       	cp.w	r8,0
80008fb8:	c0 51       	brne	80008fc2 <_dtoa_r+0x75a>
80008fba:	04 98       	mov	r8,r2
80008fbc:	00 95       	mov	r5,r0
80008fbe:	40 d4       	lddsp	r4,sp[0x34]
80008fc0:	c3 78       	rjmp	8000902e <_dtoa_r+0x7c6>
80008fc2:	40 c5       	lddsp	r5,sp[0x30]
80008fc4:	58 15       	cp.w	r5,1
80008fc6:	e0 89 00 0f 	brgt	80008fe4 <_dtoa_r+0x77c>
80008fca:	41 74       	lddsp	r4,sp[0x5c]
80008fcc:	58 04       	cp.w	r4,0
80008fce:	c0 40       	breq	80008fd6 <_dtoa_r+0x76e>
80008fd0:	f4 c9 fb cd 	sub	r9,r10,-1075
80008fd4:	c0 48       	rjmp	80008fdc <_dtoa_r+0x774>
80008fd6:	41 99       	lddsp	r9,sp[0x64]
80008fd8:	f2 09 11 36 	rsub	r9,r9,54
80008fdc:	04 98       	mov	r8,r2
80008fde:	00 95       	mov	r5,r0
80008fe0:	c1 c8       	rjmp	80009018 <_dtoa_r+0x7b0>
80008fe2:	d7 03       	nop
80008fe4:	e2 c8 00 01 	sub	r8,r1,1
80008fe8:	58 01       	cp.w	r1,0
80008fea:	e0 05 17 40 	movge	r5,r0
80008fee:	e2 09 17 40 	movge	r9,r1
80008ff2:	e1 d1 e5 15 	sublt	r5,r0,r1
80008ff6:	f9 b9 05 00 	movlt	r9,0
80008ffa:	10 32       	cp.w	r2,r8
80008ffc:	e5 d8 e4 18 	subge	r8,r2,r8
80009000:	f1 d2 e5 18 	sublt	r8,r8,r2
80009004:	e5 d8 e5 02 	addlt	r2,r2,r8
80009008:	fb fc 50 11 	ld.wlt	r12,sp[0x44]
8000900c:	f9 d8 e5 0c 	addlt	r12,r12,r8
80009010:	fb fc 5a 11 	st.wlt	sp[0x44],r12
80009014:	f9 b8 05 00 	movlt	r8,0
80009018:	40 4b       	lddsp	r11,sp[0x10]
8000901a:	12 0b       	add	r11,r9
8000901c:	50 08       	stdsp	sp[0x0],r8
8000901e:	50 4b       	stdsp	sp[0x10],r11
80009020:	12 00       	add	r0,r9
80009022:	30 1b       	mov	r11,1
80009024:	0e 9c       	mov	r12,r7
80009026:	e0 a0 0a d1 	rcall	8000a5c8 <__i2b>
8000902a:	40 08       	lddsp	r8,sp[0x0]
8000902c:	18 94       	mov	r4,r12
8000902e:	40 4a       	lddsp	r10,sp[0x10]
80009030:	58 05       	cp.w	r5,0
80009032:	5f 99       	srgt	r9
80009034:	58 0a       	cp.w	r10,0
80009036:	5f 9a       	srgt	r10
80009038:	f5 e9 00 09 	and	r9,r10,r9
8000903c:	c0 80       	breq	8000904c <_dtoa_r+0x7e4>
8000903e:	40 4c       	lddsp	r12,sp[0x10]
80009040:	f8 05 0d 49 	min	r9,r12,r5
80009044:	12 1c       	sub	r12,r9
80009046:	12 10       	sub	r0,r9
80009048:	50 4c       	stdsp	sp[0x10],r12
8000904a:	12 15       	sub	r5,r9
8000904c:	58 02       	cp.w	r2,0
8000904e:	e0 8a 00 27 	brle	8000909c <_dtoa_r+0x834>
80009052:	40 db       	lddsp	r11,sp[0x34]
80009054:	58 0b       	cp.w	r11,0
80009056:	c1 d0       	breq	80009090 <_dtoa_r+0x828>
80009058:	58 08       	cp.w	r8,0
8000905a:	e0 8a 00 17 	brle	80009088 <_dtoa_r+0x820>
8000905e:	10 9a       	mov	r10,r8
80009060:	50 08       	stdsp	sp[0x0],r8
80009062:	08 9b       	mov	r11,r4
80009064:	0e 9c       	mov	r12,r7
80009066:	e0 a0 0a f7 	rcall	8000a654 <__pow5mult>
8000906a:	06 9a       	mov	r10,r3
8000906c:	18 9b       	mov	r11,r12
8000906e:	18 94       	mov	r4,r12
80009070:	0e 9c       	mov	r12,r7
80009072:	e0 a0 0a 2b 	rcall	8000a4c8 <__multiply>
80009076:	18 99       	mov	r9,r12
80009078:	06 9b       	mov	r11,r3
8000907a:	50 19       	stdsp	sp[0x4],r9
8000907c:	0e 9c       	mov	r12,r7
8000907e:	e0 a0 08 d7 	rcall	8000a22c <_Bfree>
80009082:	40 19       	lddsp	r9,sp[0x4]
80009084:	40 08       	lddsp	r8,sp[0x0]
80009086:	12 93       	mov	r3,r9
80009088:	e4 08 01 0a 	sub	r10,r2,r8
8000908c:	c0 80       	breq	8000909c <_dtoa_r+0x834>
8000908e:	c0 28       	rjmp	80009092 <_dtoa_r+0x82a>
80009090:	04 9a       	mov	r10,r2
80009092:	06 9b       	mov	r11,r3
80009094:	0e 9c       	mov	r12,r7
80009096:	e0 a0 0a df 	rcall	8000a654 <__pow5mult>
8000909a:	18 93       	mov	r3,r12
8000909c:	30 1b       	mov	r11,1
8000909e:	0e 9c       	mov	r12,r7
800090a0:	e0 a0 0a 94 	rcall	8000a5c8 <__i2b>
800090a4:	41 1a       	lddsp	r10,sp[0x44]
800090a6:	18 92       	mov	r2,r12
800090a8:	58 0a       	cp.w	r10,0
800090aa:	e0 8a 00 07 	brle	800090b8 <_dtoa_r+0x850>
800090ae:	18 9b       	mov	r11,r12
800090b0:	0e 9c       	mov	r12,r7
800090b2:	e0 a0 0a d1 	rcall	8000a654 <__pow5mult>
800090b6:	18 92       	mov	r2,r12
800090b8:	40 c9       	lddsp	r9,sp[0x30]
800090ba:	58 19       	cp.w	r9,1
800090bc:	e0 89 00 14 	brgt	800090e4 <_dtoa_r+0x87c>
800090c0:	40 38       	lddsp	r8,sp[0xc]
800090c2:	58 08       	cp.w	r8,0
800090c4:	c1 01       	brne	800090e4 <_dtoa_r+0x87c>
800090c6:	40 29       	lddsp	r9,sp[0x8]
800090c8:	f1 d9 c0 14 	bfextu	r8,r9,0x0,0x14
800090cc:	c0 c1       	brne	800090e4 <_dtoa_r+0x87c>
800090ce:	12 98       	mov	r8,r9
800090d0:	e6 18 7f f0 	andh	r8,0x7ff0,COH
800090d4:	c0 80       	breq	800090e4 <_dtoa_r+0x87c>
800090d6:	40 4c       	lddsp	r12,sp[0x10]
800090d8:	30 1b       	mov	r11,1
800090da:	2f fc       	sub	r12,-1
800090dc:	2f f0       	sub	r0,-1
800090de:	50 4c       	stdsp	sp[0x10],r12
800090e0:	50 6b       	stdsp	sp[0x18],r11
800090e2:	c0 38       	rjmp	800090e8 <_dtoa_r+0x880>
800090e4:	30 0a       	mov	r10,0
800090e6:	50 6a       	stdsp	sp[0x18],r10
800090e8:	41 19       	lddsp	r9,sp[0x44]
800090ea:	58 09       	cp.w	r9,0
800090ec:	c0 31       	brne	800090f2 <_dtoa_r+0x88a>
800090ee:	30 1c       	mov	r12,1
800090f0:	c0 98       	rjmp	80009102 <_dtoa_r+0x89a>
800090f2:	64 48       	ld.w	r8,r2[0x10]
800090f4:	2f c8       	sub	r8,-4
800090f6:	e4 08 03 2c 	ld.w	r12,r2[r8<<0x2]
800090fa:	e0 a0 08 08 	rcall	8000a10a <__hi0bits>
800090fe:	f8 0c 11 20 	rsub	r12,r12,32
80009102:	40 4b       	lddsp	r11,sp[0x10]
80009104:	f8 0b 00 08 	add	r8,r12,r11
80009108:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000910c:	c0 c0       	breq	80009124 <_dtoa_r+0x8bc>
8000910e:	f0 08 11 20 	rsub	r8,r8,32
80009112:	58 48       	cp.w	r8,4
80009114:	e0 8a 00 06 	brle	80009120 <_dtoa_r+0x8b8>
80009118:	20 48       	sub	r8,4
8000911a:	10 0b       	add	r11,r8
8000911c:	50 4b       	stdsp	sp[0x10],r11
8000911e:	c0 78       	rjmp	8000912c <_dtoa_r+0x8c4>
80009120:	58 48       	cp.w	r8,4
80009122:	c0 70       	breq	80009130 <_dtoa_r+0x8c8>
80009124:	40 4a       	lddsp	r10,sp[0x10]
80009126:	2e 48       	sub	r8,-28
80009128:	10 0a       	add	r10,r8
8000912a:	50 4a       	stdsp	sp[0x10],r10
8000912c:	10 00       	add	r0,r8
8000912e:	10 05       	add	r5,r8
80009130:	58 00       	cp.w	r0,0
80009132:	e0 8a 00 08 	brle	80009142 <_dtoa_r+0x8da>
80009136:	06 9b       	mov	r11,r3
80009138:	00 9a       	mov	r10,r0
8000913a:	0e 9c       	mov	r12,r7
8000913c:	e0 a0 09 82 	rcall	8000a440 <__lshift>
80009140:	18 93       	mov	r3,r12
80009142:	40 49       	lddsp	r9,sp[0x10]
80009144:	58 09       	cp.w	r9,0
80009146:	e0 8a 00 08 	brle	80009156 <_dtoa_r+0x8ee>
8000914a:	04 9b       	mov	r11,r2
8000914c:	12 9a       	mov	r10,r9
8000914e:	0e 9c       	mov	r12,r7
80009150:	e0 a0 09 78 	rcall	8000a440 <__lshift>
80009154:	18 92       	mov	r2,r12
80009156:	41 48       	lddsp	r8,sp[0x50]
80009158:	58 08       	cp.w	r8,0
8000915a:	c1 b0       	breq	80009190 <_dtoa_r+0x928>
8000915c:	04 9b       	mov	r11,r2
8000915e:	06 9c       	mov	r12,r3
80009160:	e0 a0 08 4c 	rcall	8000a1f8 <__mcmp>
80009164:	c1 64       	brge	80009190 <_dtoa_r+0x928>
80009166:	06 9b       	mov	r11,r3
80009168:	30 09       	mov	r9,0
8000916a:	30 aa       	mov	r10,10
8000916c:	0e 9c       	mov	r12,r7
8000916e:	e0 a0 0a 35 	rcall	8000a5d8 <__multadd>
80009172:	20 16       	sub	r6,1
80009174:	18 93       	mov	r3,r12
80009176:	40 dc       	lddsp	r12,sp[0x34]
80009178:	58 0c       	cp.w	r12,0
8000917a:	c0 31       	brne	80009180 <_dtoa_r+0x918>
8000917c:	40 91       	lddsp	r1,sp[0x24]
8000917e:	c0 98       	rjmp	80009190 <_dtoa_r+0x928>
80009180:	08 9b       	mov	r11,r4
80009182:	40 91       	lddsp	r1,sp[0x24]
80009184:	30 09       	mov	r9,0
80009186:	30 aa       	mov	r10,10
80009188:	0e 9c       	mov	r12,r7
8000918a:	e0 a0 0a 27 	rcall	8000a5d8 <__multadd>
8000918e:	18 94       	mov	r4,r12
80009190:	58 01       	cp.w	r1,0
80009192:	5f a9       	srle	r9
80009194:	40 cb       	lddsp	r11,sp[0x30]
80009196:	58 2b       	cp.w	r11,2
80009198:	5f 98       	srgt	r8
8000919a:	f3 e8 00 08 	and	r8,r9,r8
8000919e:	c2 50       	breq	800091e8 <_dtoa_r+0x980>
800091a0:	58 01       	cp.w	r1,0
800091a2:	c1 11       	brne	800091c4 <_dtoa_r+0x95c>
800091a4:	04 9b       	mov	r11,r2
800091a6:	02 99       	mov	r9,r1
800091a8:	30 5a       	mov	r10,5
800091aa:	0e 9c       	mov	r12,r7
800091ac:	e0 a0 0a 16 	rcall	8000a5d8 <__multadd>
800091b0:	18 92       	mov	r2,r12
800091b2:	18 9b       	mov	r11,r12
800091b4:	06 9c       	mov	r12,r3
800091b6:	e0 a0 08 21 	rcall	8000a1f8 <__mcmp>
800091ba:	e0 89 00 0f 	brgt	800091d8 <_dtoa_r+0x970>
800091be:	c0 38       	rjmp	800091c4 <_dtoa_r+0x95c>
800091c0:	30 02       	mov	r2,0
800091c2:	04 94       	mov	r4,r2
800091c4:	40 ea       	lddsp	r10,sp[0x38]
800091c6:	30 09       	mov	r9,0
800091c8:	5c da       	com	r10
800091ca:	40 85       	lddsp	r5,sp[0x20]
800091cc:	50 6a       	stdsp	sp[0x18],r10
800091ce:	50 49       	stdsp	sp[0x10],r9
800091d0:	c0 f9       	rjmp	800093ee <_dtoa_r+0xb86>
800091d2:	08 92       	mov	r2,r4
800091d4:	40 66       	lddsp	r6,sp[0x18]
800091d6:	04 94       	mov	r4,r2
800091d8:	2f f6       	sub	r6,-1
800091da:	50 66       	stdsp	sp[0x18],r6
800091dc:	33 18       	mov	r8,49
800091de:	40 85       	lddsp	r5,sp[0x20]
800091e0:	0a c8       	st.b	r5++,r8
800091e2:	30 08       	mov	r8,0
800091e4:	50 48       	stdsp	sp[0x10],r8
800091e6:	c0 49       	rjmp	800093ee <_dtoa_r+0xb86>
800091e8:	40 dc       	lddsp	r12,sp[0x34]
800091ea:	58 0c       	cp.w	r12,0
800091ec:	e0 80 00 b5 	breq	80009356 <_dtoa_r+0xaee>
800091f0:	58 05       	cp.w	r5,0
800091f2:	e0 8a 00 08 	brle	80009202 <_dtoa_r+0x99a>
800091f6:	08 9b       	mov	r11,r4
800091f8:	0a 9a       	mov	r10,r5
800091fa:	0e 9c       	mov	r12,r7
800091fc:	e0 a0 09 22 	rcall	8000a440 <__lshift>
80009200:	18 94       	mov	r4,r12
80009202:	40 6b       	lddsp	r11,sp[0x18]
80009204:	58 0b       	cp.w	r11,0
80009206:	c0 31       	brne	8000920c <_dtoa_r+0x9a4>
80009208:	08 9c       	mov	r12,r4
8000920a:	c1 38       	rjmp	80009230 <_dtoa_r+0x9c8>
8000920c:	68 1b       	ld.w	r11,r4[0x4]
8000920e:	0e 9c       	mov	r12,r7
80009210:	e0 a0 08 28 	rcall	8000a260 <_Balloc>
80009214:	68 4a       	ld.w	r10,r4[0x10]
80009216:	18 95       	mov	r5,r12
80009218:	e8 cb ff f4 	sub	r11,r4,-12
8000921c:	2f ea       	sub	r10,-2
8000921e:	2f 4c       	sub	r12,-12
80009220:	a3 6a       	lsl	r10,0x2
80009222:	fe b0 e8 42 	rcall	800062a6 <memcpy>
80009226:	0a 9b       	mov	r11,r5
80009228:	30 1a       	mov	r10,1
8000922a:	0e 9c       	mov	r12,r7
8000922c:	e0 a0 09 0a 	rcall	8000a440 <__lshift>
80009230:	50 44       	stdsp	sp[0x10],r4
80009232:	40 3a       	lddsp	r10,sp[0xc]
80009234:	30 19       	mov	r9,1
80009236:	f5 da c0 01 	bfextu	r10,r10,0x0,0x1
8000923a:	18 94       	mov	r4,r12
8000923c:	50 da       	stdsp	sp[0x34],r10
8000923e:	40 85       	lddsp	r5,sp[0x20]
80009240:	50 99       	stdsp	sp[0x24],r9
80009242:	50 26       	stdsp	sp[0x8],r6
80009244:	50 e1       	stdsp	sp[0x38],r1
80009246:	04 9b       	mov	r11,r2
80009248:	06 9c       	mov	r12,r3
8000924a:	fe b0 fa 7f 	rcall	80008748 <quorem>
8000924e:	40 4b       	lddsp	r11,sp[0x10]
80009250:	f8 c0 ff d0 	sub	r0,r12,-48
80009254:	06 9c       	mov	r12,r3
80009256:	e0 a0 07 d1 	rcall	8000a1f8 <__mcmp>
8000925a:	08 9a       	mov	r10,r4
8000925c:	50 6c       	stdsp	sp[0x18],r12
8000925e:	04 9b       	mov	r11,r2
80009260:	0e 9c       	mov	r12,r7
80009262:	e0 a0 08 87 	rcall	8000a370 <__mdiff>
80009266:	18 91       	mov	r1,r12
80009268:	78 38       	ld.w	r8,r12[0xc]
8000926a:	58 08       	cp.w	r8,0
8000926c:	c0 30       	breq	80009272 <_dtoa_r+0xa0a>
8000926e:	30 16       	mov	r6,1
80009270:	c0 68       	rjmp	8000927c <_dtoa_r+0xa14>
80009272:	18 9b       	mov	r11,r12
80009274:	06 9c       	mov	r12,r3
80009276:	e0 a0 07 c1 	rcall	8000a1f8 <__mcmp>
8000927a:	18 96       	mov	r6,r12
8000927c:	0e 9c       	mov	r12,r7
8000927e:	02 9b       	mov	r11,r1
80009280:	e0 a0 07 d6 	rcall	8000a22c <_Bfree>
80009284:	40 cc       	lddsp	r12,sp[0x30]
80009286:	ed ec 10 08 	or	r8,r6,r12
8000928a:	c0 d1       	brne	800092a4 <_dtoa_r+0xa3c>
8000928c:	40 db       	lddsp	r11,sp[0x34]
8000928e:	58 0b       	cp.w	r11,0
80009290:	c0 a1       	brne	800092a4 <_dtoa_r+0xa3c>
80009292:	40 26       	lddsp	r6,sp[0x8]
80009294:	e0 40 00 39 	cp.w	r0,57
80009298:	c3 00       	breq	800092f8 <_dtoa_r+0xa90>
8000929a:	40 6a       	lddsp	r10,sp[0x18]
8000929c:	58 0a       	cp.w	r10,0
8000929e:	e0 89 00 24 	brgt	800092e6 <_dtoa_r+0xa7e>
800092a2:	c2 f8       	rjmp	80009300 <_dtoa_r+0xa98>
800092a4:	40 69       	lddsp	r9,sp[0x18]
800092a6:	58 09       	cp.w	r9,0
800092a8:	c0 85       	brlt	800092b8 <_dtoa_r+0xa50>
800092aa:	12 98       	mov	r8,r9
800092ac:	40 cc       	lddsp	r12,sp[0x30]
800092ae:	18 48       	or	r8,r12
800092b0:	c1 d1       	brne	800092ea <_dtoa_r+0xa82>
800092b2:	40 db       	lddsp	r11,sp[0x34]
800092b4:	58 0b       	cp.w	r11,0
800092b6:	c1 a1       	brne	800092ea <_dtoa_r+0xa82>
800092b8:	0c 99       	mov	r9,r6
800092ba:	40 26       	lddsp	r6,sp[0x8]
800092bc:	58 09       	cp.w	r9,0
800092be:	e0 8a 00 21 	brle	80009300 <_dtoa_r+0xa98>
800092c2:	06 9b       	mov	r11,r3
800092c4:	30 1a       	mov	r10,1
800092c6:	0e 9c       	mov	r12,r7
800092c8:	e0 a0 08 bc 	rcall	8000a440 <__lshift>
800092cc:	04 9b       	mov	r11,r2
800092ce:	18 93       	mov	r3,r12
800092d0:	e0 a0 07 94 	rcall	8000a1f8 <__mcmp>
800092d4:	e0 89 00 06 	brgt	800092e0 <_dtoa_r+0xa78>
800092d8:	c1 41       	brne	80009300 <_dtoa_r+0xa98>
800092da:	ed b0 00 00 	bld	r0,0x0
800092de:	c1 11       	brne	80009300 <_dtoa_r+0xa98>
800092e0:	e0 40 00 39 	cp.w	r0,57
800092e4:	c0 a0       	breq	800092f8 <_dtoa_r+0xa90>
800092e6:	2f f0       	sub	r0,-1
800092e8:	c0 c8       	rjmp	80009300 <_dtoa_r+0xa98>
800092ea:	58 06       	cp.w	r6,0
800092ec:	e0 8a 00 0c 	brle	80009304 <_dtoa_r+0xa9c>
800092f0:	40 26       	lddsp	r6,sp[0x8]
800092f2:	e0 40 00 39 	cp.w	r0,57
800092f6:	c0 41       	brne	800092fe <_dtoa_r+0xa96>
800092f8:	33 98       	mov	r8,57
800092fa:	0a c8       	st.b	r5++,r8
800092fc:	c6 78       	rjmp	800093ca <_dtoa_r+0xb62>
800092fe:	2f f0       	sub	r0,-1
80009300:	0a c0       	st.b	r5++,r0
80009302:	c7 58       	rjmp	800093ec <_dtoa_r+0xb84>
80009304:	0a c0       	st.b	r5++,r0
80009306:	40 9a       	lddsp	r10,sp[0x24]
80009308:	40 e9       	lddsp	r9,sp[0x38]
8000930a:	12 3a       	cp.w	r10,r9
8000930c:	c4 30       	breq	80009392 <_dtoa_r+0xb2a>
8000930e:	06 9b       	mov	r11,r3
80009310:	30 09       	mov	r9,0
80009312:	30 aa       	mov	r10,10
80009314:	0e 9c       	mov	r12,r7
80009316:	e0 a0 09 61 	rcall	8000a5d8 <__multadd>
8000931a:	40 48       	lddsp	r8,sp[0x10]
8000931c:	18 93       	mov	r3,r12
8000931e:	08 38       	cp.w	r8,r4
80009320:	c0 91       	brne	80009332 <_dtoa_r+0xaca>
80009322:	10 9b       	mov	r11,r8
80009324:	30 09       	mov	r9,0
80009326:	30 aa       	mov	r10,10
80009328:	0e 9c       	mov	r12,r7
8000932a:	e0 a0 09 57 	rcall	8000a5d8 <__multadd>
8000932e:	50 4c       	stdsp	sp[0x10],r12
80009330:	c0 e8       	rjmp	8000934c <_dtoa_r+0xae4>
80009332:	40 4b       	lddsp	r11,sp[0x10]
80009334:	30 09       	mov	r9,0
80009336:	30 aa       	mov	r10,10
80009338:	0e 9c       	mov	r12,r7
8000933a:	e0 a0 09 4f 	rcall	8000a5d8 <__multadd>
8000933e:	08 9b       	mov	r11,r4
80009340:	50 4c       	stdsp	sp[0x10],r12
80009342:	30 09       	mov	r9,0
80009344:	30 aa       	mov	r10,10
80009346:	0e 9c       	mov	r12,r7
80009348:	e0 a0 09 48 	rcall	8000a5d8 <__multadd>
8000934c:	18 94       	mov	r4,r12
8000934e:	40 9c       	lddsp	r12,sp[0x24]
80009350:	2f fc       	sub	r12,-1
80009352:	50 9c       	stdsp	sp[0x24],r12
80009354:	c7 9b       	rjmp	80009246 <_dtoa_r+0x9de>
80009356:	30 18       	mov	r8,1
80009358:	06 90       	mov	r0,r3
8000935a:	40 85       	lddsp	r5,sp[0x20]
8000935c:	08 93       	mov	r3,r4
8000935e:	0c 94       	mov	r4,r6
80009360:	10 96       	mov	r6,r8
80009362:	04 9b       	mov	r11,r2
80009364:	00 9c       	mov	r12,r0
80009366:	fe b0 f9 f1 	rcall	80008748 <quorem>
8000936a:	2d 0c       	sub	r12,-48
8000936c:	0a cc       	st.b	r5++,r12
8000936e:	02 36       	cp.w	r6,r1
80009370:	c0 a4       	brge	80009384 <_dtoa_r+0xb1c>
80009372:	00 9b       	mov	r11,r0
80009374:	30 09       	mov	r9,0
80009376:	30 aa       	mov	r10,10
80009378:	0e 9c       	mov	r12,r7
8000937a:	2f f6       	sub	r6,-1
8000937c:	e0 a0 09 2e 	rcall	8000a5d8 <__multadd>
80009380:	18 90       	mov	r0,r12
80009382:	cf 0b       	rjmp	80009362 <_dtoa_r+0xafa>
80009384:	08 96       	mov	r6,r4
80009386:	30 0b       	mov	r11,0
80009388:	06 94       	mov	r4,r3
8000938a:	50 4b       	stdsp	sp[0x10],r11
8000938c:	00 93       	mov	r3,r0
8000938e:	18 90       	mov	r0,r12
80009390:	c0 28       	rjmp	80009394 <_dtoa_r+0xb2c>
80009392:	40 26       	lddsp	r6,sp[0x8]
80009394:	06 9b       	mov	r11,r3
80009396:	30 1a       	mov	r10,1
80009398:	0e 9c       	mov	r12,r7
8000939a:	e0 a0 08 53 	rcall	8000a440 <__lshift>
8000939e:	04 9b       	mov	r11,r2
800093a0:	18 93       	mov	r3,r12
800093a2:	e0 a0 07 2b 	rcall	8000a1f8 <__mcmp>
800093a6:	e0 89 00 12 	brgt	800093ca <_dtoa_r+0xb62>
800093aa:	c1 b1       	brne	800093e0 <_dtoa_r+0xb78>
800093ac:	e1 d0 c0 01 	bfextu	r0,r0,0x0,0x1
800093b0:	c0 d1       	brne	800093ca <_dtoa_r+0xb62>
800093b2:	c1 78       	rjmp	800093e0 <_dtoa_r+0xb78>
800093b4:	40 89       	lddsp	r9,sp[0x20]
800093b6:	12 38       	cp.w	r8,r9
800093b8:	c0 30       	breq	800093be <_dtoa_r+0xb56>
800093ba:	10 95       	mov	r5,r8
800093bc:	c0 88       	rjmp	800093cc <_dtoa_r+0xb64>
800093be:	2f f6       	sub	r6,-1
800093c0:	50 66       	stdsp	sp[0x18],r6
800093c2:	33 18       	mov	r8,49
800093c4:	40 8c       	lddsp	r12,sp[0x20]
800093c6:	b8 88       	st.b	r12[0x0],r8
800093c8:	c1 38       	rjmp	800093ee <_dtoa_r+0xb86>
800093ca:	33 9a       	mov	r10,57
800093cc:	0a 98       	mov	r8,r5
800093ce:	11 79       	ld.ub	r9,--r8
800093d0:	f4 09 18 00 	cp.b	r9,r10
800093d4:	cf 00       	breq	800093b4 <_dtoa_r+0xb4c>
800093d6:	2f f9       	sub	r9,-1
800093d8:	b0 89       	st.b	r8[0x0],r9
800093da:	c0 98       	rjmp	800093ec <_dtoa_r+0xb84>
800093dc:	10 95       	mov	r5,r8
800093de:	c0 28       	rjmp	800093e2 <_dtoa_r+0xb7a>
800093e0:	33 09       	mov	r9,48
800093e2:	0a 98       	mov	r8,r5
800093e4:	11 7a       	ld.ub	r10,--r8
800093e6:	f2 0a 18 00 	cp.b	r10,r9
800093ea:	cf 90       	breq	800093dc <_dtoa_r+0xb74>
800093ec:	50 66       	stdsp	sp[0x18],r6
800093ee:	04 9b       	mov	r11,r2
800093f0:	0e 9c       	mov	r12,r7
800093f2:	e0 a0 07 1d 	rcall	8000a22c <_Bfree>
800093f6:	58 04       	cp.w	r4,0
800093f8:	c1 20       	breq	8000941c <_dtoa_r+0xbb4>
800093fa:	40 4b       	lddsp	r11,sp[0x10]
800093fc:	08 3b       	cp.w	r11,r4
800093fe:	5f 19       	srne	r9
80009400:	58 0b       	cp.w	r11,0
80009402:	5f 18       	srne	r8
80009404:	f3 e8 00 08 	and	r8,r9,r8
80009408:	c0 40       	breq	80009410 <_dtoa_r+0xba8>
8000940a:	0e 9c       	mov	r12,r7
8000940c:	e0 a0 07 10 	rcall	8000a22c <_Bfree>
80009410:	08 9b       	mov	r11,r4
80009412:	0e 9c       	mov	r12,r7
80009414:	e0 a0 07 0c 	rcall	8000a22c <_Bfree>
80009418:	c0 28       	rjmp	8000941c <_dtoa_r+0xbb4>
8000941a:	50 66       	stdsp	sp[0x18],r6
8000941c:	0e 9c       	mov	r12,r7
8000941e:	06 9b       	mov	r11,r3
80009420:	e0 a0 07 06 	rcall	8000a22c <_Bfree>
80009424:	30 08       	mov	r8,0
80009426:	aa 88       	st.b	r5[0x0],r8
80009428:	40 68       	lddsp	r8,sp[0x18]
8000942a:	41 5a       	lddsp	r10,sp[0x54]
8000942c:	2f f8       	sub	r8,-1
8000942e:	41 29       	lddsp	r9,sp[0x48]
80009430:	95 08       	st.w	r10[0x0],r8
80009432:	40 8c       	lddsp	r12,sp[0x20]
80009434:	58 09       	cp.w	r9,0
80009436:	fb f8 10 12 	ld.wne	r8,sp[0x48]
8000943a:	f1 f5 1a 00 	st.wne	r8[0x0],r5
8000943e:	2e 6d       	sub	sp,-104
80009440:	d8 32       	popm	r0-r7,pc
80009442:	d7 03       	nop

80009444 <_fflush_r>:
80009444:	d4 21       	pushm	r4-r7,lr
80009446:	16 97       	mov	r7,r11
80009448:	18 96       	mov	r6,r12
8000944a:	76 48       	ld.w	r8,r11[0x10]
8000944c:	58 08       	cp.w	r8,0
8000944e:	c7 f0       	breq	8000954c <_fflush_r+0x108>
80009450:	58 0c       	cp.w	r12,0
80009452:	c0 50       	breq	8000945c <_fflush_r+0x18>
80009454:	78 68       	ld.w	r8,r12[0x18]
80009456:	58 08       	cp.w	r8,0
80009458:	c0 21       	brne	8000945c <_fflush_r+0x18>
8000945a:	cc dc       	rcall	800095f4 <__sinit>
8000945c:	fe c8 d7 fc 	sub	r8,pc,-10244
80009460:	10 37       	cp.w	r7,r8
80009462:	c0 31       	brne	80009468 <_fflush_r+0x24>
80009464:	6c 07       	ld.w	r7,r6[0x0]
80009466:	c0 c8       	rjmp	8000947e <_fflush_r+0x3a>
80009468:	fe c8 d7 e8 	sub	r8,pc,-10264
8000946c:	10 37       	cp.w	r7,r8
8000946e:	c0 31       	brne	80009474 <_fflush_r+0x30>
80009470:	6c 17       	ld.w	r7,r6[0x4]
80009472:	c0 68       	rjmp	8000947e <_fflush_r+0x3a>
80009474:	fe c8 d7 d4 	sub	r8,pc,-10284
80009478:	10 37       	cp.w	r7,r8
8000947a:	ed f7 00 02 	ld.weq	r7,r6[0x8]
8000947e:	8e 6a       	ld.sh	r10,r7[0xc]
80009480:	14 98       	mov	r8,r10
80009482:	ed ba 00 03 	bld	r10,0x3
80009486:	c4 20       	breq	8000950a <_fflush_r+0xc6>
80009488:	ab ba       	sbr	r10,0xb
8000948a:	ae 6a       	st.h	r7[0xc],r10
8000948c:	6e 18       	ld.w	r8,r7[0x4]
8000948e:	58 08       	cp.w	r8,0
80009490:	e0 89 00 06 	brgt	8000949c <_fflush_r+0x58>
80009494:	6f 08       	ld.w	r8,r7[0x40]
80009496:	58 08       	cp.w	r8,0
80009498:	e0 8a 00 5a 	brle	8000954c <_fflush_r+0x108>
8000949c:	6e b8       	ld.w	r8,r7[0x2c]
8000949e:	58 08       	cp.w	r8,0
800094a0:	c5 60       	breq	8000954c <_fflush_r+0x108>
800094a2:	e2 1a 10 00 	andl	r10,0x1000,COH
800094a6:	c0 30       	breq	800094ac <_fflush_r+0x68>
800094a8:	6f 55       	ld.w	r5,r7[0x54]
800094aa:	c0 f8       	rjmp	800094c8 <_fflush_r+0x84>
800094ac:	30 19       	mov	r9,1
800094ae:	6e 8b       	ld.w	r11,r7[0x20]
800094b0:	0c 9c       	mov	r12,r6
800094b2:	5d 18       	icall	r8
800094b4:	18 95       	mov	r5,r12
800094b6:	5b fc       	cp.w	r12,-1
800094b8:	c0 81       	brne	800094c8 <_fflush_r+0x84>
800094ba:	6c 38       	ld.w	r8,r6[0xc]
800094bc:	59 d8       	cp.w	r8,29
800094be:	c4 70       	breq	8000954c <_fflush_r+0x108>
800094c0:	8e 68       	ld.sh	r8,r7[0xc]
800094c2:	a7 a8       	sbr	r8,0x6
800094c4:	ae 68       	st.h	r7[0xc],r8
800094c6:	d8 22       	popm	r4-r7,pc
800094c8:	8e 68       	ld.sh	r8,r7[0xc]
800094ca:	ed b8 00 02 	bld	r8,0x2
800094ce:	c0 91       	brne	800094e0 <_fflush_r+0x9c>
800094d0:	6e 18       	ld.w	r8,r7[0x4]
800094d2:	10 15       	sub	r5,r8
800094d4:	6e d8       	ld.w	r8,r7[0x34]
800094d6:	58 08       	cp.w	r8,0
800094d8:	ef f8 10 10 	ld.wne	r8,r7[0x40]
800094dc:	eb d8 e1 15 	subne	r5,r5,r8
800094e0:	6e b8       	ld.w	r8,r7[0x2c]
800094e2:	0c 9c       	mov	r12,r6
800094e4:	30 09       	mov	r9,0
800094e6:	0a 9a       	mov	r10,r5
800094e8:	6e 8b       	ld.w	r11,r7[0x20]
800094ea:	5d 18       	icall	r8
800094ec:	8e 68       	ld.sh	r8,r7[0xc]
800094ee:	0a 3c       	cp.w	r12,r5
800094f0:	c2 61       	brne	8000953c <_fflush_r+0xf8>
800094f2:	ab d8       	cbr	r8,0xb
800094f4:	30 0c       	mov	r12,0
800094f6:	6e 49       	ld.w	r9,r7[0x10]
800094f8:	ae 68       	st.h	r7[0xc],r8
800094fa:	8f 1c       	st.w	r7[0x4],r12
800094fc:	8f 09       	st.w	r7[0x0],r9
800094fe:	ed b8 00 0c 	bld	r8,0xc
80009502:	c2 51       	brne	8000954c <_fflush_r+0x108>
80009504:	ef 45 00 54 	st.w	r7[84],r5
80009508:	d8 22       	popm	r4-r7,pc
8000950a:	6e 45       	ld.w	r5,r7[0x10]
8000950c:	58 05       	cp.w	r5,0
8000950e:	c1 f0       	breq	8000954c <_fflush_r+0x108>
80009510:	6e 04       	ld.w	r4,r7[0x0]
80009512:	f5 da c0 02 	bfextu	r10,r10,0x0,0x2
80009516:	8f 05       	st.w	r7[0x0],r5
80009518:	f9 b8 01 00 	movne	r8,0
8000951c:	ef f8 00 05 	ld.weq	r8,r7[0x14]
80009520:	0a 14       	sub	r4,r5
80009522:	8f 28       	st.w	r7[0x8],r8
80009524:	c1 18       	rjmp	80009546 <_fflush_r+0x102>
80009526:	08 99       	mov	r9,r4
80009528:	0a 9a       	mov	r10,r5
8000952a:	6e a8       	ld.w	r8,r7[0x28]
8000952c:	6e 8b       	ld.w	r11,r7[0x20]
8000952e:	0c 9c       	mov	r12,r6
80009530:	5d 18       	icall	r8
80009532:	18 14       	sub	r4,r12
80009534:	58 0c       	cp.w	r12,0
80009536:	e0 89 00 07 	brgt	80009544 <_fflush_r+0x100>
8000953a:	8e 68       	ld.sh	r8,r7[0xc]
8000953c:	a7 a8       	sbr	r8,0x6
8000953e:	3f fc       	mov	r12,-1
80009540:	ae 68       	st.h	r7[0xc],r8
80009542:	d8 22       	popm	r4-r7,pc
80009544:	18 05       	add	r5,r12
80009546:	58 04       	cp.w	r4,0
80009548:	fe 99 ff ef 	brgt	80009526 <_fflush_r+0xe2>
8000954c:	d8 2a       	popm	r4-r7,pc,r12=0
8000954e:	d7 03       	nop

80009550 <__sfp_lock_acquire>:
80009550:	5e fc       	retal	r12

80009552 <__sfp_lock_release>:
80009552:	5e fc       	retal	r12

80009554 <_cleanup_r>:
80009554:	d4 01       	pushm	lr
80009556:	fe cb e8 6a 	sub	r11,pc,-6038
8000955a:	e0 a0 02 fd 	rcall	80009b54 <_fwalk>
8000955e:	d8 02       	popm	pc

80009560 <__sfmoreglue>:
80009560:	d4 21       	pushm	r4-r7,lr
80009562:	16 95       	mov	r5,r11
80009564:	f6 06 10 5c 	mul	r6,r11,92
80009568:	ec cb ff f4 	sub	r11,r6,-12
8000956c:	e0 a0 03 84 	rcall	80009c74 <_malloc_r>
80009570:	18 97       	mov	r7,r12
80009572:	c0 90       	breq	80009584 <__sfmoreglue+0x24>
80009574:	99 15       	st.w	r12[0x4],r5
80009576:	30 0b       	mov	r11,0
80009578:	2f 4c       	sub	r12,-12
8000957a:	0c 9a       	mov	r10,r6
8000957c:	8f 2c       	st.w	r7[0x8],r12
8000957e:	8f 0b       	st.w	r7[0x0],r11
80009580:	e0 a0 05 bc 	rcall	8000a0f8 <memset>
80009584:	0e 9c       	mov	r12,r7
80009586:	d8 22       	popm	r4-r7,pc

80009588 <__sfp>:
80009588:	d4 21       	pushm	r4-r7,lr
8000958a:	fe c8 d8 c6 	sub	r8,pc,-10042
8000958e:	18 96       	mov	r6,r12
80009590:	70 07       	ld.w	r7,r8[0x0]
80009592:	6e 68       	ld.w	r8,r7[0x18]
80009594:	58 08       	cp.w	r8,0
80009596:	c0 31       	brne	8000959c <__sfp+0x14>
80009598:	0e 9c       	mov	r12,r7
8000959a:	c2 dc       	rcall	800095f4 <__sinit>
8000959c:	ee c7 ff 28 	sub	r7,r7,-216
800095a0:	30 05       	mov	r5,0
800095a2:	6e 2c       	ld.w	r12,r7[0x8]
800095a4:	6e 18       	ld.w	r8,r7[0x4]
800095a6:	c0 68       	rjmp	800095b2 <__sfp+0x2a>
800095a8:	98 69       	ld.sh	r9,r12[0xc]
800095aa:	ea 09 19 00 	cp.h	r9,r5
800095ae:	c1 10       	breq	800095d0 <__sfp+0x48>
800095b0:	2a 4c       	sub	r12,-92
800095b2:	20 18       	sub	r8,1
800095b4:	cf a7       	brpl	800095a8 <__sfp+0x20>
800095b6:	6e 08       	ld.w	r8,r7[0x0]
800095b8:	58 08       	cp.w	r8,0
800095ba:	c0 61       	brne	800095c6 <__sfp+0x3e>
800095bc:	30 4b       	mov	r11,4
800095be:	0c 9c       	mov	r12,r6
800095c0:	cd 0f       	rcall	80009560 <__sfmoreglue>
800095c2:	8f 0c       	st.w	r7[0x0],r12
800095c4:	c0 30       	breq	800095ca <__sfp+0x42>
800095c6:	6e 07       	ld.w	r7,r7[0x0]
800095c8:	ce db       	rjmp	800095a2 <__sfp+0x1a>
800095ca:	30 c8       	mov	r8,12
800095cc:	8d 38       	st.w	r6[0xc],r8
800095ce:	d8 22       	popm	r4-r7,pc
800095d0:	30 08       	mov	r8,0
800095d2:	f9 48 00 4c 	st.w	r12[76],r8
800095d6:	99 08       	st.w	r12[0x0],r8
800095d8:	99 28       	st.w	r12[0x8],r8
800095da:	99 18       	st.w	r12[0x4],r8
800095dc:	99 48       	st.w	r12[0x10],r8
800095de:	99 58       	st.w	r12[0x14],r8
800095e0:	99 68       	st.w	r12[0x18],r8
800095e2:	99 d8       	st.w	r12[0x34],r8
800095e4:	99 e8       	st.w	r12[0x38],r8
800095e6:	f9 48 00 48 	st.w	r12[72],r8
800095ea:	3f f8       	mov	r8,-1
800095ec:	b8 78       	st.h	r12[0xe],r8
800095ee:	30 18       	mov	r8,1
800095f0:	b8 68       	st.h	r12[0xc],r8
800095f2:	d8 22       	popm	r4-r7,pc

800095f4 <__sinit>:
800095f4:	d4 21       	pushm	r4-r7,lr
800095f6:	18 96       	mov	r6,r12
800095f8:	78 67       	ld.w	r7,r12[0x18]
800095fa:	58 07       	cp.w	r7,0
800095fc:	c4 91       	brne	8000968e <__sinit+0x9a>
800095fe:	fe c8 00 aa 	sub	r8,pc,170
80009602:	30 15       	mov	r5,1
80009604:	99 a8       	st.w	r12[0x28],r8
80009606:	f9 47 00 d8 	st.w	r12[216],r7
8000960a:	f9 47 00 dc 	st.w	r12[220],r7
8000960e:	f9 47 00 e0 	st.w	r12[224],r7
80009612:	99 65       	st.w	r12[0x18],r5
80009614:	cb af       	rcall	80009588 <__sfp>
80009616:	8d 0c       	st.w	r6[0x0],r12
80009618:	0c 9c       	mov	r12,r6
8000961a:	cb 7f       	rcall	80009588 <__sfp>
8000961c:	8d 1c       	st.w	r6[0x4],r12
8000961e:	0c 9c       	mov	r12,r6
80009620:	cb 4f       	rcall	80009588 <__sfp>
80009622:	6c 09       	ld.w	r9,r6[0x0]
80009624:	30 48       	mov	r8,4
80009626:	93 07       	st.w	r9[0x0],r7
80009628:	b2 68       	st.h	r9[0xc],r8
8000962a:	93 17       	st.w	r9[0x4],r7
8000962c:	93 27       	st.w	r9[0x8],r7
8000962e:	6c 18       	ld.w	r8,r6[0x4]
80009630:	b2 77       	st.h	r9[0xe],r7
80009632:	93 47       	st.w	r9[0x10],r7
80009634:	93 57       	st.w	r9[0x14],r7
80009636:	93 67       	st.w	r9[0x18],r7
80009638:	93 89       	st.w	r9[0x20],r9
8000963a:	91 07       	st.w	r8[0x0],r7
8000963c:	91 17       	st.w	r8[0x4],r7
8000963e:	91 27       	st.w	r8[0x8],r7
80009640:	fe ce eb e4 	sub	lr,pc,-5148
80009644:	fe cb ec 14 	sub	r11,pc,-5100
80009648:	93 9e       	st.w	r9[0x24],lr
8000964a:	93 ab       	st.w	r9[0x28],r11
8000964c:	fe ca ec 3c 	sub	r10,pc,-5060
80009650:	fe c4 ec 48 	sub	r4,pc,-5048
80009654:	93 ba       	st.w	r9[0x2c],r10
80009656:	93 c4       	st.w	r9[0x30],r4
80009658:	30 99       	mov	r9,9
8000965a:	b0 69       	st.h	r8[0xc],r9
8000965c:	b0 75       	st.h	r8[0xe],r5
8000965e:	91 c4       	st.w	r8[0x30],r4
80009660:	91 47       	st.w	r8[0x10],r7
80009662:	91 57       	st.w	r8[0x14],r7
80009664:	91 67       	st.w	r8[0x18],r7
80009666:	91 88       	st.w	r8[0x20],r8
80009668:	91 9e       	st.w	r8[0x24],lr
8000966a:	91 ab       	st.w	r8[0x28],r11
8000966c:	91 ba       	st.w	r8[0x2c],r10
8000966e:	8d 2c       	st.w	r6[0x8],r12
80009670:	31 28       	mov	r8,18
80009672:	99 07       	st.w	r12[0x0],r7
80009674:	b8 68       	st.h	r12[0xc],r8
80009676:	99 17       	st.w	r12[0x4],r7
80009678:	99 27       	st.w	r12[0x8],r7
8000967a:	30 28       	mov	r8,2
8000967c:	b8 78       	st.h	r12[0xe],r8
8000967e:	99 c4       	st.w	r12[0x30],r4
80009680:	99 67       	st.w	r12[0x18],r7
80009682:	99 9e       	st.w	r12[0x24],lr
80009684:	99 ab       	st.w	r12[0x28],r11
80009686:	99 ba       	st.w	r12[0x2c],r10
80009688:	99 47       	st.w	r12[0x10],r7
8000968a:	99 57       	st.w	r12[0x14],r7
8000968c:	99 8c       	st.w	r12[0x20],r12
8000968e:	d8 22       	popm	r4-r7,pc

80009690 <_malloc_trim_r>:
80009690:	d4 21       	pushm	r4-r7,lr
80009692:	16 95       	mov	r5,r11
80009694:	18 97       	mov	r7,r12
80009696:	e0 a0 05 38 	rcall	8000a106 <__malloc_lock>
8000969a:	e0 64 01 18 	mov	r4,280
8000969e:	68 28       	ld.w	r8,r4[0x8]
800096a0:	70 16       	ld.w	r6,r8[0x4]
800096a2:	e0 16 ff fc 	andl	r6,0xfffc
800096a6:	ec c8 ff 91 	sub	r8,r6,-111
800096aa:	f0 05 01 05 	sub	r5,r8,r5
800096ae:	e0 15 ff 80 	andl	r5,0xff80
800096b2:	ea c5 00 80 	sub	r5,r5,128
800096b6:	e0 45 00 7f 	cp.w	r5,127
800096ba:	e0 8a 00 25 	brle	80009704 <_malloc_trim_r+0x74>
800096be:	30 0b       	mov	r11,0
800096c0:	0e 9c       	mov	r12,r7
800096c2:	e0 a0 09 93 	rcall	8000a9e8 <_sbrk_r>
800096c6:	68 28       	ld.w	r8,r4[0x8]
800096c8:	0c 08       	add	r8,r6
800096ca:	10 3c       	cp.w	r12,r8
800096cc:	c1 c1       	brne	80009704 <_malloc_trim_r+0x74>
800096ce:	ea 0b 11 00 	rsub	r11,r5,0
800096d2:	0e 9c       	mov	r12,r7
800096d4:	e0 a0 09 8a 	rcall	8000a9e8 <_sbrk_r>
800096d8:	5b fc       	cp.w	r12,-1
800096da:	c1 91       	brne	8000970c <_malloc_trim_r+0x7c>
800096dc:	30 0b       	mov	r11,0
800096de:	0e 9c       	mov	r12,r7
800096e0:	e0 a0 09 84 	rcall	8000a9e8 <_sbrk_r>
800096e4:	68 28       	ld.w	r8,r4[0x8]
800096e6:	f8 08 01 09 	sub	r9,r12,r8
800096ea:	58 f9       	cp.w	r9,15
800096ec:	e0 8a 00 0c 	brle	80009704 <_malloc_trim_r+0x74>
800096f0:	a1 a9       	sbr	r9,0x0
800096f2:	91 19       	st.w	r8[0x4],r9
800096f4:	e0 68 05 24 	mov	r8,1316
800096f8:	70 09       	ld.w	r9,r8[0x0]
800096fa:	e0 68 06 48 	mov	r8,1608
800096fe:	f8 09 01 09 	sub	r9,r12,r9
80009702:	91 09       	st.w	r8[0x0],r9
80009704:	0e 9c       	mov	r12,r7
80009706:	e0 a0 05 01 	rcall	8000a108 <__malloc_unlock>
8000970a:	d8 2a       	popm	r4-r7,pc,r12=0
8000970c:	68 28       	ld.w	r8,r4[0x8]
8000970e:	0a 16       	sub	r6,r5
80009710:	a1 a6       	sbr	r6,0x0
80009712:	91 16       	st.w	r8[0x4],r6
80009714:	e0 68 06 48 	mov	r8,1608
80009718:	70 09       	ld.w	r9,r8[0x0]
8000971a:	0a 19       	sub	r9,r5
8000971c:	0e 9c       	mov	r12,r7
8000971e:	91 09       	st.w	r8[0x0],r9
80009720:	e0 a0 04 f4 	rcall	8000a108 <__malloc_unlock>
80009724:	da 2a       	popm	r4-r7,pc,r12=1
80009726:	d7 03       	nop

80009728 <_free_r>:
80009728:	d4 21       	pushm	r4-r7,lr
8000972a:	16 96       	mov	r6,r11
8000972c:	18 97       	mov	r7,r12
8000972e:	58 0b       	cp.w	r11,0
80009730:	e0 80 00 c0 	breq	800098b0 <_free_r+0x188>
80009734:	e0 a0 04 e9 	rcall	8000a106 <__malloc_lock>
80009738:	20 86       	sub	r6,8
8000973a:	e0 6a 01 18 	mov	r10,280
8000973e:	6c 18       	ld.w	r8,r6[0x4]
80009740:	74 2e       	ld.w	lr,r10[0x8]
80009742:	f9 d8 c0 01 	bfextu	r12,r8,0x0,0x1
80009746:	a1 c8       	cbr	r8,0x0
80009748:	ec 08 00 09 	add	r9,r6,r8
8000974c:	72 1b       	ld.w	r11,r9[0x4]
8000974e:	e0 1b ff fc 	andl	r11,0xfffc
80009752:	1c 39       	cp.w	r9,lr
80009754:	c1 e1       	brne	80009790 <_free_r+0x68>
80009756:	f6 08 00 08 	add	r8,r11,r8
8000975a:	58 0c       	cp.w	r12,0
8000975c:	c0 81       	brne	8000976c <_free_r+0x44>
8000975e:	6c 09       	ld.w	r9,r6[0x0]
80009760:	12 16       	sub	r6,r9
80009762:	12 08       	add	r8,r9
80009764:	6c 3b       	ld.w	r11,r6[0xc]
80009766:	6c 29       	ld.w	r9,r6[0x8]
80009768:	97 29       	st.w	r11[0x8],r9
8000976a:	93 3b       	st.w	r9[0xc],r11
8000976c:	10 99       	mov	r9,r8
8000976e:	95 26       	st.w	r10[0x8],r6
80009770:	a1 a9       	sbr	r9,0x0
80009772:	8d 19       	st.w	r6[0x4],r9
80009774:	e0 69 05 20 	mov	r9,1312
80009778:	72 09       	ld.w	r9,r9[0x0]
8000977a:	12 38       	cp.w	r8,r9
8000977c:	c0 63       	brcs	80009788 <_free_r+0x60>
8000977e:	e0 68 06 44 	mov	r8,1604
80009782:	0e 9c       	mov	r12,r7
80009784:	70 0b       	ld.w	r11,r8[0x0]
80009786:	c8 5f       	rcall	80009690 <_malloc_trim_r>
80009788:	0e 9c       	mov	r12,r7
8000978a:	e0 a0 04 bf 	rcall	8000a108 <__malloc_unlock>
8000978e:	d8 22       	popm	r4-r7,pc
80009790:	93 1b       	st.w	r9[0x4],r11
80009792:	58 0c       	cp.w	r12,0
80009794:	c0 30       	breq	8000979a <_free_r+0x72>
80009796:	30 0c       	mov	r12,0
80009798:	c1 08       	rjmp	800097b8 <_free_r+0x90>
8000979a:	6c 0e       	ld.w	lr,r6[0x0]
8000979c:	f4 c5 ff f8 	sub	r5,r10,-8
800097a0:	1c 16       	sub	r6,lr
800097a2:	1c 08       	add	r8,lr
800097a4:	6c 2e       	ld.w	lr,r6[0x8]
800097a6:	0a 3e       	cp.w	lr,r5
800097a8:	f9 bc 00 01 	moveq	r12,1
800097ac:	ed f5 10 03 	ld.wne	r5,r6[0xc]
800097b0:	eb fe 1a 02 	st.wne	r5[0x8],lr
800097b4:	fd f5 1a 03 	st.wne	lr[0xc],r5
800097b8:	f2 0b 00 0e 	add	lr,r9,r11
800097bc:	7c 1e       	ld.w	lr,lr[0x4]
800097be:	ed be 00 00 	bld	lr,0x0
800097c2:	c1 40       	breq	800097ea <_free_r+0xc2>
800097c4:	16 08       	add	r8,r11
800097c6:	58 0c       	cp.w	r12,0
800097c8:	c0 d1       	brne	800097e2 <_free_r+0xba>
800097ca:	e0 6e 01 18 	mov	lr,280
800097ce:	72 2b       	ld.w	r11,r9[0x8]
800097d0:	2f 8e       	sub	lr,-8
800097d2:	1c 3b       	cp.w	r11,lr
800097d4:	c0 71       	brne	800097e2 <_free_r+0xba>
800097d6:	97 36       	st.w	r11[0xc],r6
800097d8:	97 26       	st.w	r11[0x8],r6
800097da:	8d 2b       	st.w	r6[0x8],r11
800097dc:	8d 3b       	st.w	r6[0xc],r11
800097de:	30 1c       	mov	r12,1
800097e0:	c0 58       	rjmp	800097ea <_free_r+0xc2>
800097e2:	72 2b       	ld.w	r11,r9[0x8]
800097e4:	72 39       	ld.w	r9,r9[0xc]
800097e6:	93 2b       	st.w	r9[0x8],r11
800097e8:	97 39       	st.w	r11[0xc],r9
800097ea:	10 99       	mov	r9,r8
800097ec:	ec 08 09 08 	st.w	r6[r8],r8
800097f0:	a1 a9       	sbr	r9,0x0
800097f2:	8d 19       	st.w	r6[0x4],r9
800097f4:	58 0c       	cp.w	r12,0
800097f6:	c5 a1       	brne	800098aa <_free_r+0x182>
800097f8:	e0 48 01 ff 	cp.w	r8,511
800097fc:	e0 8b 00 13 	brhi	80009822 <_free_r+0xfa>
80009800:	a3 98       	lsr	r8,0x3
80009802:	f4 08 00 39 	add	r9,r10,r8<<0x3
80009806:	72 2b       	ld.w	r11,r9[0x8]
80009808:	8d 39       	st.w	r6[0xc],r9
8000980a:	8d 2b       	st.w	r6[0x8],r11
8000980c:	97 36       	st.w	r11[0xc],r6
8000980e:	93 26       	st.w	r9[0x8],r6
80009810:	a3 48       	asr	r8,0x2
80009812:	74 19       	ld.w	r9,r10[0x4]
80009814:	30 1b       	mov	r11,1
80009816:	f6 08 09 48 	lsl	r8,r11,r8
8000981a:	f3 e8 10 08 	or	r8,r9,r8
8000981e:	95 18       	st.w	r10[0x4],r8
80009820:	c4 58       	rjmp	800098aa <_free_r+0x182>
80009822:	f0 0b 16 09 	lsr	r11,r8,0x9
80009826:	58 4b       	cp.w	r11,4
80009828:	e0 8b 00 06 	brhi	80009834 <_free_r+0x10c>
8000982c:	f0 0b 16 06 	lsr	r11,r8,0x6
80009830:	2c 8b       	sub	r11,-56
80009832:	c2 08       	rjmp	80009872 <_free_r+0x14a>
80009834:	59 4b       	cp.w	r11,20
80009836:	e0 8b 00 04 	brhi	8000983e <_free_r+0x116>
8000983a:	2a 5b       	sub	r11,-91
8000983c:	c1 b8       	rjmp	80009872 <_free_r+0x14a>
8000983e:	e0 4b 00 54 	cp.w	r11,84
80009842:	e0 8b 00 06 	brhi	8000984e <_free_r+0x126>
80009846:	f0 0b 16 0c 	lsr	r11,r8,0xc
8000984a:	29 2b       	sub	r11,-110
8000984c:	c1 38       	rjmp	80009872 <_free_r+0x14a>
8000984e:	e0 4b 01 54 	cp.w	r11,340
80009852:	e0 8b 00 06 	brhi	8000985e <_free_r+0x136>
80009856:	f0 0b 16 0f 	lsr	r11,r8,0xf
8000985a:	28 9b       	sub	r11,-119
8000985c:	c0 b8       	rjmp	80009872 <_free_r+0x14a>
8000985e:	e0 4b 05 54 	cp.w	r11,1364
80009862:	e0 88 00 05 	brls	8000986c <_free_r+0x144>
80009866:	37 eb       	mov	r11,126
80009868:	c0 58       	rjmp	80009872 <_free_r+0x14a>
8000986a:	d7 03       	nop
8000986c:	f0 0b 16 12 	lsr	r11,r8,0x12
80009870:	28 4b       	sub	r11,-124
80009872:	f4 0b 00 3c 	add	r12,r10,r11<<0x3
80009876:	78 29       	ld.w	r9,r12[0x8]
80009878:	18 39       	cp.w	r9,r12
8000987a:	c0 e1       	brne	80009896 <_free_r+0x16e>
8000987c:	74 18       	ld.w	r8,r10[0x4]
8000987e:	a3 4b       	asr	r11,0x2
80009880:	30 1c       	mov	r12,1
80009882:	f8 0b 09 4b 	lsl	r11,r12,r11
80009886:	f1 eb 10 0b 	or	r11,r8,r11
8000988a:	12 98       	mov	r8,r9
8000988c:	95 1b       	st.w	r10[0x4],r11
8000988e:	c0 a8       	rjmp	800098a2 <_free_r+0x17a>
80009890:	72 29       	ld.w	r9,r9[0x8]
80009892:	18 39       	cp.w	r9,r12
80009894:	c0 60       	breq	800098a0 <_free_r+0x178>
80009896:	72 1a       	ld.w	r10,r9[0x4]
80009898:	e0 1a ff fc 	andl	r10,0xfffc
8000989c:	14 38       	cp.w	r8,r10
8000989e:	cf 93       	brcs	80009890 <_free_r+0x168>
800098a0:	72 38       	ld.w	r8,r9[0xc]
800098a2:	8d 38       	st.w	r6[0xc],r8
800098a4:	8d 29       	st.w	r6[0x8],r9
800098a6:	93 36       	st.w	r9[0xc],r6
800098a8:	91 26       	st.w	r8[0x8],r6
800098aa:	0e 9c       	mov	r12,r7
800098ac:	e0 a0 04 2e 	rcall	8000a108 <__malloc_unlock>
800098b0:	d8 22       	popm	r4-r7,pc
800098b2:	d7 03       	nop

800098b4 <__sfvwrite_r>:
800098b4:	d4 31       	pushm	r0-r7,lr
800098b6:	20 3d       	sub	sp,12
800098b8:	14 94       	mov	r4,r10
800098ba:	18 95       	mov	r5,r12
800098bc:	16 97       	mov	r7,r11
800098be:	74 28       	ld.w	r8,r10[0x8]
800098c0:	58 08       	cp.w	r8,0
800098c2:	e0 80 01 45 	breq	80009b4c <__sfvwrite_r+0x298>
800098c6:	96 68       	ld.sh	r8,r11[0xc]
800098c8:	ed b8 00 03 	bld	r8,0x3
800098cc:	c0 41       	brne	800098d4 <__sfvwrite_r+0x20>
800098ce:	76 48       	ld.w	r8,r11[0x10]
800098d0:	58 08       	cp.w	r8,0
800098d2:	c0 c1       	brne	800098ea <__sfvwrite_r+0x36>
800098d4:	0e 9b       	mov	r11,r7
800098d6:	0a 9c       	mov	r12,r5
800098d8:	fe b0 f6 ca 	rcall	8000866c <__swsetup_r>
800098dc:	c0 70       	breq	800098ea <__sfvwrite_r+0x36>
800098de:	8e 68       	ld.sh	r8,r7[0xc]
800098e0:	a7 a8       	sbr	r8,0x6
800098e2:	ae 68       	st.h	r7[0xc],r8
800098e4:	30 98       	mov	r8,9
800098e6:	8b 38       	st.w	r5[0xc],r8
800098e8:	c3 09       	rjmp	80009b48 <__sfvwrite_r+0x294>
800098ea:	8e 63       	ld.sh	r3,r7[0xc]
800098ec:	68 00       	ld.w	r0,r4[0x0]
800098ee:	06 96       	mov	r6,r3
800098f0:	e2 16 00 02 	andl	r6,0x2,COH
800098f4:	c2 10       	breq	80009936 <__sfvwrite_r+0x82>
800098f6:	30 03       	mov	r3,0
800098f8:	e0 62 04 00 	mov	r2,1024
800098fc:	06 96       	mov	r6,r3
800098fe:	c0 48       	rjmp	80009906 <__sfvwrite_r+0x52>
80009900:	60 03       	ld.w	r3,r0[0x0]
80009902:	60 16       	ld.w	r6,r0[0x4]
80009904:	2f 80       	sub	r0,-8
80009906:	58 06       	cp.w	r6,0
80009908:	cf c0       	breq	80009900 <__sfvwrite_r+0x4c>
8000990a:	e0 46 04 00 	cp.w	r6,1024
8000990e:	ec 09 17 80 	movls	r9,r6
80009912:	e4 09 17 b0 	movhi	r9,r2
80009916:	06 9a       	mov	r10,r3
80009918:	6e a8       	ld.w	r8,r7[0x28]
8000991a:	6e 8b       	ld.w	r11,r7[0x20]
8000991c:	0a 9c       	mov	r12,r5
8000991e:	5d 18       	icall	r8
80009920:	18 16       	sub	r6,r12
80009922:	58 0c       	cp.w	r12,0
80009924:	e0 8a 01 0f 	brle	80009b42 <__sfvwrite_r+0x28e>
80009928:	68 28       	ld.w	r8,r4[0x8]
8000992a:	18 18       	sub	r8,r12
8000992c:	89 28       	st.w	r4[0x8],r8
8000992e:	e0 80 01 0f 	breq	80009b4c <__sfvwrite_r+0x298>
80009932:	18 03       	add	r3,r12
80009934:	ce 9b       	rjmp	80009906 <__sfvwrite_r+0x52>
80009936:	e7 d3 c0 01 	bfextu	r3,r3,0x0,0x1
8000993a:	c0 70       	breq	80009948 <__sfvwrite_r+0x94>
8000993c:	50 06       	stdsp	sp[0x0],r6
8000993e:	0c 93       	mov	r3,r6
80009940:	0c 91       	mov	r1,r6
80009942:	50 15       	stdsp	sp[0x4],r5
80009944:	08 92       	mov	r2,r4
80009946:	c9 e8       	rjmp	80009a82 <__sfvwrite_r+0x1ce>
80009948:	06 96       	mov	r6,r3
8000994a:	08 91       	mov	r1,r4
8000994c:	c0 48       	rjmp	80009954 <__sfvwrite_r+0xa0>
8000994e:	60 03       	ld.w	r3,r0[0x0]
80009950:	60 16       	ld.w	r6,r0[0x4]
80009952:	2f 80       	sub	r0,-8
80009954:	58 06       	cp.w	r6,0
80009956:	cf c0       	breq	8000994e <__sfvwrite_r+0x9a>
80009958:	8e 68       	ld.sh	r8,r7[0xc]
8000995a:	6e 24       	ld.w	r4,r7[0x8]
8000995c:	10 99       	mov	r9,r8
8000995e:	e2 19 02 00 	andl	r9,0x200,COH
80009962:	c5 50       	breq	80009a0c <__sfvwrite_r+0x158>
80009964:	08 36       	cp.w	r6,r4
80009966:	c4 33       	brcs	800099ec <__sfvwrite_r+0x138>
80009968:	10 99       	mov	r9,r8
8000996a:	e2 19 04 80 	andl	r9,0x480,COH
8000996e:	c3 f0       	breq	800099ec <__sfvwrite_r+0x138>
80009970:	6e 4b       	ld.w	r11,r7[0x10]
80009972:	6e 09       	ld.w	r9,r7[0x0]
80009974:	16 19       	sub	r9,r11
80009976:	50 09       	stdsp	sp[0x0],r9
80009978:	6e 59       	ld.w	r9,r7[0x14]
8000997a:	10 9c       	mov	r12,r8
8000997c:	f2 09 00 1a 	add	r10,r9,r9<<0x1
80009980:	30 28       	mov	r8,2
80009982:	f4 08 0c 08 	divs	r8,r10,r8
80009986:	fa e9 00 04 	st.d	sp[4],r8
8000998a:	10 94       	mov	r4,r8
8000998c:	40 09       	lddsp	r9,sp[0x0]
8000998e:	e2 1c 04 00 	andl	r12,0x400,COH
80009992:	2f f9       	sub	r9,-1
80009994:	0c 09       	add	r9,r6
80009996:	12 38       	cp.w	r8,r9
80009998:	f2 04 17 30 	movlo	r4,r9
8000999c:	58 0c       	cp.w	r12,0
8000999e:	c1 00       	breq	800099be <__sfvwrite_r+0x10a>
800099a0:	08 9b       	mov	r11,r4
800099a2:	0a 9c       	mov	r12,r5
800099a4:	c6 8d       	rcall	80009c74 <_malloc_r>
800099a6:	18 92       	mov	r2,r12
800099a8:	c1 40       	breq	800099d0 <__sfvwrite_r+0x11c>
800099aa:	40 0a       	lddsp	r10,sp[0x0]
800099ac:	6e 4b       	ld.w	r11,r7[0x10]
800099ae:	fe b0 e4 7c 	rcall	800062a6 <memcpy>
800099b2:	8e 68       	ld.sh	r8,r7[0xc]
800099b4:	e0 18 fb 7f 	andl	r8,0xfb7f
800099b8:	a7 b8       	sbr	r8,0x7
800099ba:	ae 68       	st.h	r7[0xc],r8
800099bc:	c0 d8       	rjmp	800099d6 <__sfvwrite_r+0x122>
800099be:	08 9a       	mov	r10,r4
800099c0:	0a 9c       	mov	r12,r5
800099c2:	e0 a0 06 8f 	rcall	8000a6e0 <_realloc_r>
800099c6:	18 92       	mov	r2,r12
800099c8:	c0 71       	brne	800099d6 <__sfvwrite_r+0x122>
800099ca:	6e 4b       	ld.w	r11,r7[0x10]
800099cc:	0a 9c       	mov	r12,r5
800099ce:	ca de       	rcall	80009728 <_free_r>
800099d0:	30 c8       	mov	r8,12
800099d2:	8b 38       	st.w	r5[0xc],r8
800099d4:	cb 78       	rjmp	80009b42 <__sfvwrite_r+0x28e>
800099d6:	40 0a       	lddsp	r10,sp[0x0]
800099d8:	40 09       	lddsp	r9,sp[0x0]
800099da:	e8 0a 01 0a 	sub	r10,r4,r10
800099de:	e4 09 00 08 	add	r8,r2,r9
800099e2:	8f 54       	st.w	r7[0x14],r4
800099e4:	8f 2a       	st.w	r7[0x8],r10
800099e6:	8f 08       	st.w	r7[0x0],r8
800099e8:	8f 42       	st.w	r7[0x10],r2
800099ea:	0c 94       	mov	r4,r6
800099ec:	08 36       	cp.w	r6,r4
800099ee:	ec 04 17 30 	movlo	r4,r6
800099f2:	06 9b       	mov	r11,r3
800099f4:	08 9a       	mov	r10,r4
800099f6:	6e 0c       	ld.w	r12,r7[0x0]
800099f8:	e0 a0 03 61 	rcall	8000a0ba <memmove>
800099fc:	6e 08       	ld.w	r8,r7[0x0]
800099fe:	08 08       	add	r8,r4
80009a00:	8f 08       	st.w	r7[0x0],r8
80009a02:	6e 28       	ld.w	r8,r7[0x8]
80009a04:	08 18       	sub	r8,r4
80009a06:	0c 94       	mov	r4,r6
80009a08:	8f 28       	st.w	r7[0x8],r8
80009a0a:	c3 08       	rjmp	80009a6a <__sfvwrite_r+0x1b6>
80009a0c:	08 36       	cp.w	r6,r4
80009a0e:	5f ba       	srhi	r10
80009a10:	6e 0c       	ld.w	r12,r7[0x0]
80009a12:	6e 48       	ld.w	r8,r7[0x10]
80009a14:	10 3c       	cp.w	r12,r8
80009a16:	5f b8       	srhi	r8
80009a18:	f5 e8 00 08 	and	r8,r10,r8
80009a1c:	f2 08 18 00 	cp.b	r8,r9
80009a20:	c0 e0       	breq	80009a3c <__sfvwrite_r+0x188>
80009a22:	06 9b       	mov	r11,r3
80009a24:	08 9a       	mov	r10,r4
80009a26:	e0 a0 03 4a 	rcall	8000a0ba <memmove>
80009a2a:	6e 08       	ld.w	r8,r7[0x0]
80009a2c:	08 08       	add	r8,r4
80009a2e:	0e 9b       	mov	r11,r7
80009a30:	8f 08       	st.w	r7[0x0],r8
80009a32:	0a 9c       	mov	r12,r5
80009a34:	fe b0 fd 08 	rcall	80009444 <_fflush_r>
80009a38:	c1 90       	breq	80009a6a <__sfvwrite_r+0x1b6>
80009a3a:	c8 48       	rjmp	80009b42 <__sfvwrite_r+0x28e>
80009a3c:	6e 59       	ld.w	r9,r7[0x14]
80009a3e:	12 36       	cp.w	r6,r9
80009a40:	c0 a3       	brcs	80009a54 <__sfvwrite_r+0x1a0>
80009a42:	6e a8       	ld.w	r8,r7[0x28]
80009a44:	06 9a       	mov	r10,r3
80009a46:	6e 8b       	ld.w	r11,r7[0x20]
80009a48:	0a 9c       	mov	r12,r5
80009a4a:	5d 18       	icall	r8
80009a4c:	18 94       	mov	r4,r12
80009a4e:	e0 89 00 0e 	brgt	80009a6a <__sfvwrite_r+0x1b6>
80009a52:	c7 88       	rjmp	80009b42 <__sfvwrite_r+0x28e>
80009a54:	0c 9a       	mov	r10,r6
80009a56:	06 9b       	mov	r11,r3
80009a58:	e0 a0 03 31 	rcall	8000a0ba <memmove>
80009a5c:	6e 08       	ld.w	r8,r7[0x0]
80009a5e:	0c 08       	add	r8,r6
80009a60:	0c 94       	mov	r4,r6
80009a62:	8f 08       	st.w	r7[0x0],r8
80009a64:	6e 28       	ld.w	r8,r7[0x8]
80009a66:	0c 18       	sub	r8,r6
80009a68:	8f 28       	st.w	r7[0x8],r8
80009a6a:	62 28       	ld.w	r8,r1[0x8]
80009a6c:	08 18       	sub	r8,r4
80009a6e:	83 28       	st.w	r1[0x8],r8
80009a70:	c6 e0       	breq	80009b4c <__sfvwrite_r+0x298>
80009a72:	08 16       	sub	r6,r4
80009a74:	08 03       	add	r3,r4
80009a76:	c6 fb       	rjmp	80009954 <__sfvwrite_r+0xa0>
80009a78:	60 03       	ld.w	r3,r0[0x0]
80009a7a:	60 11       	ld.w	r1,r0[0x4]
80009a7c:	30 08       	mov	r8,0
80009a7e:	2f 80       	sub	r0,-8
80009a80:	50 08       	stdsp	sp[0x0],r8
80009a82:	58 01       	cp.w	r1,0
80009a84:	cf a0       	breq	80009a78 <__sfvwrite_r+0x1c4>
80009a86:	40 0a       	lddsp	r10,sp[0x0]
80009a88:	58 0a       	cp.w	r10,0
80009a8a:	c1 51       	brne	80009ab4 <__sfvwrite_r+0x200>
80009a8c:	e2 c6 ff ff 	sub	r6,r1,-1
80009a90:	02 9a       	mov	r10,r1
80009a92:	30 ab       	mov	r11,10
80009a94:	06 9c       	mov	r12,r3
80009a96:	e0 a0 03 07 	rcall	8000a0a4 <memchr>
80009a9a:	f8 c8 ff ff 	sub	r8,r12,-1
80009a9e:	58 0c       	cp.w	r12,0
80009aa0:	f1 d3 e1 16 	subne	r6,r8,r3
80009aa4:	f9 b9 01 01 	movne	r9,1
80009aa8:	fb f9 1a 00 	st.wne	sp[0x0],r9
80009aac:	f9 b8 00 01 	moveq	r8,1
80009ab0:	fb f8 0a 00 	st.weq	sp[0x0],r8
80009ab4:	02 36       	cp.w	r6,r1
80009ab6:	ec 04 17 80 	movls	r4,r6
80009aba:	e2 04 17 b0 	movhi	r4,r1
80009abe:	6e 59       	ld.w	r9,r7[0x14]
80009ac0:	6e 25       	ld.w	r5,r7[0x8]
80009ac2:	f2 05 00 05 	add	r5,r9,r5
80009ac6:	0a 34       	cp.w	r4,r5
80009ac8:	5f 9a       	srgt	r10
80009aca:	6e 0c       	ld.w	r12,r7[0x0]
80009acc:	6e 48       	ld.w	r8,r7[0x10]
80009ace:	10 3c       	cp.w	r12,r8
80009ad0:	5f b8       	srhi	r8
80009ad2:	f5 e8 00 08 	and	r8,r10,r8
80009ad6:	30 0a       	mov	r10,0
80009ad8:	f4 08 18 00 	cp.b	r8,r10
80009adc:	c0 e0       	breq	80009af8 <__sfvwrite_r+0x244>
80009ade:	06 9b       	mov	r11,r3
80009ae0:	0a 9a       	mov	r10,r5
80009ae2:	e0 a0 02 ec 	rcall	8000a0ba <memmove>
80009ae6:	6e 08       	ld.w	r8,r7[0x0]
80009ae8:	0a 08       	add	r8,r5
80009aea:	0e 9b       	mov	r11,r7
80009aec:	8f 08       	st.w	r7[0x0],r8
80009aee:	40 1c       	lddsp	r12,sp[0x4]
80009af0:	fe b0 fc aa 	rcall	80009444 <_fflush_r>
80009af4:	c1 80       	breq	80009b24 <__sfvwrite_r+0x270>
80009af6:	c2 68       	rjmp	80009b42 <__sfvwrite_r+0x28e>
80009af8:	12 34       	cp.w	r4,r9
80009afa:	c0 a5       	brlt	80009b0e <__sfvwrite_r+0x25a>
80009afc:	6e a8       	ld.w	r8,r7[0x28]
80009afe:	06 9a       	mov	r10,r3
80009b00:	6e 8b       	ld.w	r11,r7[0x20]
80009b02:	40 1c       	lddsp	r12,sp[0x4]
80009b04:	5d 18       	icall	r8
80009b06:	18 95       	mov	r5,r12
80009b08:	e0 89 00 0e 	brgt	80009b24 <__sfvwrite_r+0x270>
80009b0c:	c1 b8       	rjmp	80009b42 <__sfvwrite_r+0x28e>
80009b0e:	08 9a       	mov	r10,r4
80009b10:	06 9b       	mov	r11,r3
80009b12:	e0 a0 02 d4 	rcall	8000a0ba <memmove>
80009b16:	6e 08       	ld.w	r8,r7[0x0]
80009b18:	08 08       	add	r8,r4
80009b1a:	08 95       	mov	r5,r4
80009b1c:	8f 08       	st.w	r7[0x0],r8
80009b1e:	6e 28       	ld.w	r8,r7[0x8]
80009b20:	08 18       	sub	r8,r4
80009b22:	8f 28       	st.w	r7[0x8],r8
80009b24:	0a 16       	sub	r6,r5
80009b26:	c0 71       	brne	80009b34 <__sfvwrite_r+0x280>
80009b28:	0e 9b       	mov	r11,r7
80009b2a:	40 1c       	lddsp	r12,sp[0x4]
80009b2c:	fe b0 fc 8c 	rcall	80009444 <_fflush_r>
80009b30:	c0 91       	brne	80009b42 <__sfvwrite_r+0x28e>
80009b32:	50 06       	stdsp	sp[0x0],r6
80009b34:	64 28       	ld.w	r8,r2[0x8]
80009b36:	0a 18       	sub	r8,r5
80009b38:	85 28       	st.w	r2[0x8],r8
80009b3a:	c0 90       	breq	80009b4c <__sfvwrite_r+0x298>
80009b3c:	0a 11       	sub	r1,r5
80009b3e:	0a 03       	add	r3,r5
80009b40:	ca 1b       	rjmp	80009a82 <__sfvwrite_r+0x1ce>
80009b42:	8e 68       	ld.sh	r8,r7[0xc]
80009b44:	a7 a8       	sbr	r8,0x6
80009b46:	ae 68       	st.h	r7[0xc],r8
80009b48:	3f fc       	mov	r12,-1
80009b4a:	c0 28       	rjmp	80009b4e <__sfvwrite_r+0x29a>
80009b4c:	30 0c       	mov	r12,0
80009b4e:	2f dd       	sub	sp,-12
80009b50:	d8 32       	popm	r0-r7,pc
80009b52:	d7 03       	nop

80009b54 <_fwalk>:
80009b54:	d4 31       	pushm	r0-r7,lr
80009b56:	30 05       	mov	r5,0
80009b58:	16 91       	mov	r1,r11
80009b5a:	f8 c7 ff 28 	sub	r7,r12,-216
80009b5e:	0a 92       	mov	r2,r5
80009b60:	fe b0 fc f8 	rcall	80009550 <__sfp_lock_acquire>
80009b64:	3f f3       	mov	r3,-1
80009b66:	c1 68       	rjmp	80009b92 <_fwalk+0x3e>
80009b68:	6e 26       	ld.w	r6,r7[0x8]
80009b6a:	6e 14       	ld.w	r4,r7[0x4]
80009b6c:	2f 46       	sub	r6,-12
80009b6e:	c0 c8       	rjmp	80009b86 <_fwalk+0x32>
80009b70:	8c 08       	ld.sh	r8,r6[0x0]
80009b72:	e4 08 19 00 	cp.h	r8,r2
80009b76:	c0 70       	breq	80009b84 <_fwalk+0x30>
80009b78:	8c 18       	ld.sh	r8,r6[0x2]
80009b7a:	e6 08 19 00 	cp.h	r8,r3
80009b7e:	c0 30       	breq	80009b84 <_fwalk+0x30>
80009b80:	5d 11       	icall	r1
80009b82:	18 45       	or	r5,r12
80009b84:	2a 46       	sub	r6,-92
80009b86:	20 14       	sub	r4,1
80009b88:	ec cc 00 0c 	sub	r12,r6,12
80009b8c:	58 04       	cp.w	r4,0
80009b8e:	cf 14       	brge	80009b70 <_fwalk+0x1c>
80009b90:	6e 07       	ld.w	r7,r7[0x0]
80009b92:	58 07       	cp.w	r7,0
80009b94:	ce a1       	brne	80009b68 <_fwalk+0x14>
80009b96:	fe b0 fc de 	rcall	80009552 <__sfp_lock_release>
80009b9a:	0a 9c       	mov	r12,r5
80009b9c:	d8 32       	popm	r0-r7,pc
80009b9e:	d7 03       	nop

80009ba0 <_localeconv_r>:
80009ba0:	fe cc de d8 	sub	r12,pc,-8488
80009ba4:	5e fc       	retal	r12
80009ba6:	d7 03       	nop

80009ba8 <__smakebuf_r>:
80009ba8:	d4 21       	pushm	r4-r7,lr
80009baa:	20 fd       	sub	sp,60
80009bac:	96 68       	ld.sh	r8,r11[0xc]
80009bae:	16 97       	mov	r7,r11
80009bb0:	18 96       	mov	r6,r12
80009bb2:	e2 18 00 02 	andl	r8,0x2,COH
80009bb6:	c3 c1       	brne	80009c2e <__smakebuf_r+0x86>
80009bb8:	96 7b       	ld.sh	r11,r11[0xe]
80009bba:	f0 0b 19 00 	cp.h	r11,r8
80009bbe:	c0 55       	brlt	80009bc8 <__smakebuf_r+0x20>
80009bc0:	1a 9a       	mov	r10,sp
80009bc2:	e0 a0 08 9d 	rcall	8000acfc <_fstat_r>
80009bc6:	c0 f4       	brge	80009be4 <__smakebuf_r+0x3c>
80009bc8:	8e 65       	ld.sh	r5,r7[0xc]
80009bca:	0a 98       	mov	r8,r5
80009bcc:	ab b8       	sbr	r8,0xb
80009bce:	e2 15 00 80 	andl	r5,0x80,COH
80009bd2:	ae 68       	st.h	r7[0xc],r8
80009bd4:	30 04       	mov	r4,0
80009bd6:	e0 68 04 00 	mov	r8,1024
80009bda:	f9 b5 01 40 	movne	r5,64
80009bde:	f0 05 17 00 	moveq	r5,r8
80009be2:	c1 c8       	rjmp	80009c1a <__smakebuf_r+0x72>
80009be4:	40 18       	lddsp	r8,sp[0x4]
80009be6:	e2 18 f0 00 	andl	r8,0xf000,COH
80009bea:	e0 48 20 00 	cp.w	r8,8192
80009bee:	5f 04       	sreq	r4
80009bf0:	e0 48 80 00 	cp.w	r8,32768
80009bf4:	c0 e1       	brne	80009c10 <__smakebuf_r+0x68>
80009bf6:	6e b9       	ld.w	r9,r7[0x2c]
80009bf8:	fe c8 f1 e8 	sub	r8,pc,-3608
80009bfc:	10 39       	cp.w	r9,r8
80009bfe:	c0 91       	brne	80009c10 <__smakebuf_r+0x68>
80009c00:	8e 68       	ld.sh	r8,r7[0xc]
80009c02:	e0 65 04 00 	mov	r5,1024
80009c06:	ab a8       	sbr	r8,0xa
80009c08:	ef 45 00 50 	st.w	r7[80],r5
80009c0c:	ae 68       	st.h	r7[0xc],r8
80009c0e:	c0 68       	rjmp	80009c1a <__smakebuf_r+0x72>
80009c10:	8e 68       	ld.sh	r8,r7[0xc]
80009c12:	e0 65 04 00 	mov	r5,1024
80009c16:	ab b8       	sbr	r8,0xb
80009c18:	ae 68       	st.h	r7[0xc],r8
80009c1a:	0a 9b       	mov	r11,r5
80009c1c:	0c 9c       	mov	r12,r6
80009c1e:	c2 bc       	rcall	80009c74 <_malloc_r>
80009c20:	8e 68       	ld.sh	r8,r7[0xc]
80009c22:	c0 d1       	brne	80009c3c <__smakebuf_r+0x94>
80009c24:	ed b8 00 09 	bld	r8,0x9
80009c28:	c1 b0       	breq	80009c5e <__smakebuf_r+0xb6>
80009c2a:	a1 b8       	sbr	r8,0x1
80009c2c:	ae 68       	st.h	r7[0xc],r8
80009c2e:	ee c8 ff b9 	sub	r8,r7,-71
80009c32:	8f 48       	st.w	r7[0x10],r8
80009c34:	8f 08       	st.w	r7[0x0],r8
80009c36:	30 18       	mov	r8,1
80009c38:	8f 58       	st.w	r7[0x14],r8
80009c3a:	c1 28       	rjmp	80009c5e <__smakebuf_r+0xb6>
80009c3c:	a7 b8       	sbr	r8,0x7
80009c3e:	8f 4c       	st.w	r7[0x10],r12
80009c40:	ae 68       	st.h	r7[0xc],r8
80009c42:	8f 55       	st.w	r7[0x14],r5
80009c44:	fe c8 06 f0 	sub	r8,pc,1776
80009c48:	8f 0c       	st.w	r7[0x0],r12
80009c4a:	8d a8       	st.w	r6[0x28],r8
80009c4c:	58 04       	cp.w	r4,0
80009c4e:	c0 80       	breq	80009c5e <__smakebuf_r+0xb6>
80009c50:	8e 7c       	ld.sh	r12,r7[0xe]
80009c52:	e0 a0 07 47 	rcall	8000aae0 <isatty>
80009c56:	c0 40       	breq	80009c5e <__smakebuf_r+0xb6>
80009c58:	8e 68       	ld.sh	r8,r7[0xc]
80009c5a:	a1 a8       	sbr	r8,0x0
80009c5c:	ae 68       	st.h	r7[0xc],r8
80009c5e:	2f 1d       	sub	sp,-60
80009c60:	d8 22       	popm	r4-r7,pc
80009c62:	d7 03       	nop

80009c64 <malloc>:
80009c64:	d4 01       	pushm	lr
80009c66:	e0 68 01 14 	mov	r8,276
80009c6a:	18 9b       	mov	r11,r12
80009c6c:	70 0c       	ld.w	r12,r8[0x0]
80009c6e:	c0 3c       	rcall	80009c74 <_malloc_r>
80009c70:	d8 02       	popm	pc
80009c72:	d7 03       	nop

80009c74 <_malloc_r>:
80009c74:	d4 31       	pushm	r0-r7,lr
80009c76:	f6 c8 ff f5 	sub	r8,r11,-11
80009c7a:	18 95       	mov	r5,r12
80009c7c:	10 97       	mov	r7,r8
80009c7e:	e0 17 ff f8 	andl	r7,0xfff8
80009c82:	59 68       	cp.w	r8,22
80009c84:	f9 b7 08 10 	movls	r7,16
80009c88:	16 37       	cp.w	r7,r11
80009c8a:	5f 38       	srlo	r8
80009c8c:	f1 e7 13 f8 	or	r8,r8,r7>>0x1f
80009c90:	c0 50       	breq	80009c9a <_malloc_r+0x26>
80009c92:	30 c8       	mov	r8,12
80009c94:	99 38       	st.w	r12[0xc],r8
80009c96:	e0 8f 01 f7 	bral	8000a084 <_malloc_r+0x410>
80009c9a:	e0 a0 02 36 	rcall	8000a106 <__malloc_lock>
80009c9e:	e0 47 01 f7 	cp.w	r7,503
80009ca2:	e0 8b 00 1d 	brhi	80009cdc <_malloc_r+0x68>
80009ca6:	ee 03 16 03 	lsr	r3,r7,0x3
80009caa:	e0 68 01 18 	mov	r8,280
80009cae:	f0 03 00 38 	add	r8,r8,r3<<0x3
80009cb2:	70 36       	ld.w	r6,r8[0xc]
80009cb4:	10 36       	cp.w	r6,r8
80009cb6:	c0 61       	brne	80009cc2 <_malloc_r+0x4e>
80009cb8:	ec c8 ff f8 	sub	r8,r6,-8
80009cbc:	70 36       	ld.w	r6,r8[0xc]
80009cbe:	10 36       	cp.w	r6,r8
80009cc0:	c0 c0       	breq	80009cd8 <_malloc_r+0x64>
80009cc2:	6c 18       	ld.w	r8,r6[0x4]
80009cc4:	e0 18 ff fc 	andl	r8,0xfffc
80009cc8:	6c 3a       	ld.w	r10,r6[0xc]
80009cca:	ec 08 00 09 	add	r9,r6,r8
80009cce:	0a 9c       	mov	r12,r5
80009cd0:	6c 28       	ld.w	r8,r6[0x8]
80009cd2:	95 28       	st.w	r10[0x8],r8
80009cd4:	91 3a       	st.w	r8[0xc],r10
80009cd6:	c4 78       	rjmp	80009d64 <_malloc_r+0xf0>
80009cd8:	2f e3       	sub	r3,-2
80009cda:	c4 d8       	rjmp	80009d74 <_malloc_r+0x100>
80009cdc:	ee 03 16 09 	lsr	r3,r7,0x9
80009ce0:	c0 41       	brne	80009ce8 <_malloc_r+0x74>
80009ce2:	ee 03 16 03 	lsr	r3,r7,0x3
80009ce6:	c2 68       	rjmp	80009d32 <_malloc_r+0xbe>
80009ce8:	58 43       	cp.w	r3,4
80009cea:	e0 8b 00 06 	brhi	80009cf6 <_malloc_r+0x82>
80009cee:	ee 03 16 06 	lsr	r3,r7,0x6
80009cf2:	2c 83       	sub	r3,-56
80009cf4:	c1 f8       	rjmp	80009d32 <_malloc_r+0xbe>
80009cf6:	59 43       	cp.w	r3,20
80009cf8:	e0 8b 00 04 	brhi	80009d00 <_malloc_r+0x8c>
80009cfc:	2a 53       	sub	r3,-91
80009cfe:	c1 a8       	rjmp	80009d32 <_malloc_r+0xbe>
80009d00:	e0 43 00 54 	cp.w	r3,84
80009d04:	e0 8b 00 06 	brhi	80009d10 <_malloc_r+0x9c>
80009d08:	ee 03 16 0c 	lsr	r3,r7,0xc
80009d0c:	29 23       	sub	r3,-110
80009d0e:	c1 28       	rjmp	80009d32 <_malloc_r+0xbe>
80009d10:	e0 43 01 54 	cp.w	r3,340
80009d14:	e0 8b 00 06 	brhi	80009d20 <_malloc_r+0xac>
80009d18:	ee 03 16 0f 	lsr	r3,r7,0xf
80009d1c:	28 93       	sub	r3,-119
80009d1e:	c0 a8       	rjmp	80009d32 <_malloc_r+0xbe>
80009d20:	e0 43 05 54 	cp.w	r3,1364
80009d24:	e0 88 00 04 	brls	80009d2c <_malloc_r+0xb8>
80009d28:	37 e3       	mov	r3,126
80009d2a:	c0 48       	rjmp	80009d32 <_malloc_r+0xbe>
80009d2c:	ee 03 16 12 	lsr	r3,r7,0x12
80009d30:	28 43       	sub	r3,-124
80009d32:	e0 6a 01 18 	mov	r10,280
80009d36:	f4 03 00 3a 	add	r10,r10,r3<<0x3
80009d3a:	74 36       	ld.w	r6,r10[0xc]
80009d3c:	c1 98       	rjmp	80009d6e <_malloc_r+0xfa>
80009d3e:	6c 19       	ld.w	r9,r6[0x4]
80009d40:	e0 19 ff fc 	andl	r9,0xfffc
80009d44:	f2 07 01 0b 	sub	r11,r9,r7
80009d48:	58 fb       	cp.w	r11,15
80009d4a:	e0 8a 00 04 	brle	80009d52 <_malloc_r+0xde>
80009d4e:	20 13       	sub	r3,1
80009d50:	c1 18       	rjmp	80009d72 <_malloc_r+0xfe>
80009d52:	6c 38       	ld.w	r8,r6[0xc]
80009d54:	58 0b       	cp.w	r11,0
80009d56:	c0 b5       	brlt	80009d6c <_malloc_r+0xf8>
80009d58:	6c 2a       	ld.w	r10,r6[0x8]
80009d5a:	ec 09 00 09 	add	r9,r6,r9
80009d5e:	0a 9c       	mov	r12,r5
80009d60:	91 2a       	st.w	r8[0x8],r10
80009d62:	95 38       	st.w	r10[0xc],r8
80009d64:	72 18       	ld.w	r8,r9[0x4]
80009d66:	a1 a8       	sbr	r8,0x0
80009d68:	93 18       	st.w	r9[0x4],r8
80009d6a:	cb c8       	rjmp	80009ee2 <_malloc_r+0x26e>
80009d6c:	10 96       	mov	r6,r8
80009d6e:	14 36       	cp.w	r6,r10
80009d70:	ce 71       	brne	80009d3e <_malloc_r+0xca>
80009d72:	2f f3       	sub	r3,-1
80009d74:	e0 6a 01 18 	mov	r10,280
80009d78:	f4 cc ff f8 	sub	r12,r10,-8
80009d7c:	78 26       	ld.w	r6,r12[0x8]
80009d7e:	18 36       	cp.w	r6,r12
80009d80:	c6 c0       	breq	80009e58 <_malloc_r+0x1e4>
80009d82:	6c 19       	ld.w	r9,r6[0x4]
80009d84:	e0 19 ff fc 	andl	r9,0xfffc
80009d88:	f2 07 01 08 	sub	r8,r9,r7
80009d8c:	58 f8       	cp.w	r8,15
80009d8e:	e0 89 00 8f 	brgt	80009eac <_malloc_r+0x238>
80009d92:	99 3c       	st.w	r12[0xc],r12
80009d94:	99 2c       	st.w	r12[0x8],r12
80009d96:	58 08       	cp.w	r8,0
80009d98:	c0 55       	brlt	80009da2 <_malloc_r+0x12e>
80009d9a:	ec 09 00 09 	add	r9,r6,r9
80009d9e:	0a 9c       	mov	r12,r5
80009da0:	ce 2b       	rjmp	80009d64 <_malloc_r+0xf0>
80009da2:	e0 49 01 ff 	cp.w	r9,511
80009da6:	e0 8b 00 13 	brhi	80009dcc <_malloc_r+0x158>
80009daa:	a3 99       	lsr	r9,0x3
80009dac:	f4 09 00 38 	add	r8,r10,r9<<0x3
80009db0:	70 2b       	ld.w	r11,r8[0x8]
80009db2:	8d 38       	st.w	r6[0xc],r8
80009db4:	8d 2b       	st.w	r6[0x8],r11
80009db6:	97 36       	st.w	r11[0xc],r6
80009db8:	91 26       	st.w	r8[0x8],r6
80009dba:	a3 49       	asr	r9,0x2
80009dbc:	74 18       	ld.w	r8,r10[0x4]
80009dbe:	30 1b       	mov	r11,1
80009dc0:	f6 09 09 49 	lsl	r9,r11,r9
80009dc4:	f1 e9 10 09 	or	r9,r8,r9
80009dc8:	95 19       	st.w	r10[0x4],r9
80009dca:	c4 78       	rjmp	80009e58 <_malloc_r+0x1e4>
80009dcc:	f2 0a 16 09 	lsr	r10,r9,0x9
80009dd0:	58 4a       	cp.w	r10,4
80009dd2:	e0 8b 00 07 	brhi	80009de0 <_malloc_r+0x16c>
80009dd6:	f2 0a 16 06 	lsr	r10,r9,0x6
80009dda:	2c 8a       	sub	r10,-56
80009ddc:	c2 08       	rjmp	80009e1c <_malloc_r+0x1a8>
80009dde:	d7 03       	nop
80009de0:	59 4a       	cp.w	r10,20
80009de2:	e0 8b 00 04 	brhi	80009dea <_malloc_r+0x176>
80009de6:	2a 5a       	sub	r10,-91
80009de8:	c1 a8       	rjmp	80009e1c <_malloc_r+0x1a8>
80009dea:	e0 4a 00 54 	cp.w	r10,84
80009dee:	e0 8b 00 06 	brhi	80009dfa <_malloc_r+0x186>
80009df2:	f2 0a 16 0c 	lsr	r10,r9,0xc
80009df6:	29 2a       	sub	r10,-110
80009df8:	c1 28       	rjmp	80009e1c <_malloc_r+0x1a8>
80009dfa:	e0 4a 01 54 	cp.w	r10,340
80009dfe:	e0 8b 00 06 	brhi	80009e0a <_malloc_r+0x196>
80009e02:	f2 0a 16 0f 	lsr	r10,r9,0xf
80009e06:	28 9a       	sub	r10,-119
80009e08:	c0 a8       	rjmp	80009e1c <_malloc_r+0x1a8>
80009e0a:	e0 4a 05 54 	cp.w	r10,1364
80009e0e:	e0 88 00 04 	brls	80009e16 <_malloc_r+0x1a2>
80009e12:	37 ea       	mov	r10,126
80009e14:	c0 48       	rjmp	80009e1c <_malloc_r+0x1a8>
80009e16:	f2 0a 16 12 	lsr	r10,r9,0x12
80009e1a:	28 4a       	sub	r10,-124
80009e1c:	e0 6b 01 18 	mov	r11,280
80009e20:	f6 0a 00 34 	add	r4,r11,r10<<0x3
80009e24:	68 28       	ld.w	r8,r4[0x8]
80009e26:	08 38       	cp.w	r8,r4
80009e28:	c0 e1       	brne	80009e44 <_malloc_r+0x1d0>
80009e2a:	76 19       	ld.w	r9,r11[0x4]
80009e2c:	a3 4a       	asr	r10,0x2
80009e2e:	30 1e       	mov	lr,1
80009e30:	fc 0a 09 4a 	lsl	r10,lr,r10
80009e34:	f3 ea 10 0a 	or	r10,r9,r10
80009e38:	10 99       	mov	r9,r8
80009e3a:	97 1a       	st.w	r11[0x4],r10
80009e3c:	c0 a8       	rjmp	80009e50 <_malloc_r+0x1dc>
80009e3e:	70 28       	ld.w	r8,r8[0x8]
80009e40:	08 38       	cp.w	r8,r4
80009e42:	c0 60       	breq	80009e4e <_malloc_r+0x1da>
80009e44:	70 1a       	ld.w	r10,r8[0x4]
80009e46:	e0 1a ff fc 	andl	r10,0xfffc
80009e4a:	14 39       	cp.w	r9,r10
80009e4c:	cf 93       	brcs	80009e3e <_malloc_r+0x1ca>
80009e4e:	70 39       	ld.w	r9,r8[0xc]
80009e50:	8d 39       	st.w	r6[0xc],r9
80009e52:	8d 28       	st.w	r6[0x8],r8
80009e54:	91 36       	st.w	r8[0xc],r6
80009e56:	93 26       	st.w	r9[0x8],r6
80009e58:	e6 08 14 02 	asr	r8,r3,0x2
80009e5c:	30 1b       	mov	r11,1
80009e5e:	e0 64 01 18 	mov	r4,280
80009e62:	f6 08 09 4b 	lsl	r11,r11,r8
80009e66:	68 18       	ld.w	r8,r4[0x4]
80009e68:	10 3b       	cp.w	r11,r8
80009e6a:	e0 8b 00 69 	brhi	80009f3c <_malloc_r+0x2c8>
80009e6e:	f7 e8 00 09 	and	r9,r11,r8
80009e72:	c0 b1       	brne	80009e88 <_malloc_r+0x214>
80009e74:	e0 13 ff fc 	andl	r3,0xfffc
80009e78:	a1 7b       	lsl	r11,0x1
80009e7a:	2f c3       	sub	r3,-4
80009e7c:	c0 38       	rjmp	80009e82 <_malloc_r+0x20e>
80009e7e:	2f c3       	sub	r3,-4
80009e80:	a1 7b       	lsl	r11,0x1
80009e82:	f7 e8 00 09 	and	r9,r11,r8
80009e86:	cf c0       	breq	80009e7e <_malloc_r+0x20a>
80009e88:	e8 03 00 3e 	add	lr,r4,r3<<0x3
80009e8c:	06 92       	mov	r2,r3
80009e8e:	1c 91       	mov	r1,lr
80009e90:	62 36       	ld.w	r6,r1[0xc]
80009e92:	c2 d8       	rjmp	80009eec <_malloc_r+0x278>
80009e94:	6c 1a       	ld.w	r10,r6[0x4]
80009e96:	e0 1a ff fc 	andl	r10,0xfffc
80009e9a:	f4 07 01 08 	sub	r8,r10,r7
80009e9e:	58 f8       	cp.w	r8,15
80009ea0:	e0 8a 00 15 	brle	80009eca <_malloc_r+0x256>
80009ea4:	6c 3a       	ld.w	r10,r6[0xc]
80009ea6:	6c 29       	ld.w	r9,r6[0x8]
80009ea8:	95 29       	st.w	r10[0x8],r9
80009eaa:	93 3a       	st.w	r9[0xc],r10
80009eac:	0e 99       	mov	r9,r7
80009eae:	ec 07 00 07 	add	r7,r6,r7
80009eb2:	a1 a9       	sbr	r9,0x0
80009eb4:	99 37       	st.w	r12[0xc],r7
80009eb6:	99 27       	st.w	r12[0x8],r7
80009eb8:	8d 19       	st.w	r6[0x4],r9
80009eba:	ee 08 09 08 	st.w	r7[r8],r8
80009ebe:	8f 2c       	st.w	r7[0x8],r12
80009ec0:	8f 3c       	st.w	r7[0xc],r12
80009ec2:	a1 a8       	sbr	r8,0x0
80009ec4:	0a 9c       	mov	r12,r5
80009ec6:	8f 18       	st.w	r7[0x4],r8
80009ec8:	c0 d8       	rjmp	80009ee2 <_malloc_r+0x26e>
80009eca:	6c 39       	ld.w	r9,r6[0xc]
80009ecc:	58 08       	cp.w	r8,0
80009ece:	c0 e5       	brlt	80009eea <_malloc_r+0x276>
80009ed0:	ec 0a 00 0a 	add	r10,r6,r10
80009ed4:	74 18       	ld.w	r8,r10[0x4]
80009ed6:	a1 a8       	sbr	r8,0x0
80009ed8:	0a 9c       	mov	r12,r5
80009eda:	95 18       	st.w	r10[0x4],r8
80009edc:	6c 28       	ld.w	r8,r6[0x8]
80009ede:	93 28       	st.w	r9[0x8],r8
80009ee0:	91 39       	st.w	r8[0xc],r9
80009ee2:	c1 3d       	rcall	8000a108 <__malloc_unlock>
80009ee4:	ec cc ff f8 	sub	r12,r6,-8
80009ee8:	d8 32       	popm	r0-r7,pc
80009eea:	12 96       	mov	r6,r9
80009eec:	02 36       	cp.w	r6,r1
80009eee:	cd 31       	brne	80009e94 <_malloc_r+0x220>
80009ef0:	2f f2       	sub	r2,-1
80009ef2:	f1 d2 c0 02 	bfextu	r8,r2,0x0,0x2
80009ef6:	c0 30       	breq	80009efc <_malloc_r+0x288>
80009ef8:	2f 81       	sub	r1,-8
80009efa:	cc bb       	rjmp	80009e90 <_malloc_r+0x21c>
80009efc:	1c 98       	mov	r8,lr
80009efe:	f3 d3 c0 02 	bfextu	r9,r3,0x0,0x2
80009f02:	c0 81       	brne	80009f12 <_malloc_r+0x29e>
80009f04:	68 19       	ld.w	r9,r4[0x4]
80009f06:	f6 08 11 ff 	rsub	r8,r11,-1
80009f0a:	f3 e8 00 08 	and	r8,r9,r8
80009f0e:	89 18       	st.w	r4[0x4],r8
80009f10:	c0 78       	rjmp	80009f1e <_malloc_r+0x2aa>
80009f12:	f0 c9 00 08 	sub	r9,r8,8
80009f16:	20 13       	sub	r3,1
80009f18:	70 08       	ld.w	r8,r8[0x0]
80009f1a:	12 38       	cp.w	r8,r9
80009f1c:	cf 10       	breq	80009efe <_malloc_r+0x28a>
80009f1e:	a1 7b       	lsl	r11,0x1
80009f20:	68 18       	ld.w	r8,r4[0x4]
80009f22:	10 3b       	cp.w	r11,r8
80009f24:	e0 8b 00 0c 	brhi	80009f3c <_malloc_r+0x2c8>
80009f28:	58 0b       	cp.w	r11,0
80009f2a:	c0 90       	breq	80009f3c <_malloc_r+0x2c8>
80009f2c:	04 93       	mov	r3,r2
80009f2e:	c0 38       	rjmp	80009f34 <_malloc_r+0x2c0>
80009f30:	2f c3       	sub	r3,-4
80009f32:	a1 7b       	lsl	r11,0x1
80009f34:	f7 e8 00 09 	and	r9,r11,r8
80009f38:	ca 81       	brne	80009e88 <_malloc_r+0x214>
80009f3a:	cf bb       	rjmp	80009f30 <_malloc_r+0x2bc>
80009f3c:	68 23       	ld.w	r3,r4[0x8]
80009f3e:	66 12       	ld.w	r2,r3[0x4]
80009f40:	e0 12 ff fc 	andl	r2,0xfffc
80009f44:	0e 32       	cp.w	r2,r7
80009f46:	5f 39       	srlo	r9
80009f48:	e4 07 01 08 	sub	r8,r2,r7
80009f4c:	58 f8       	cp.w	r8,15
80009f4e:	5f aa       	srle	r10
80009f50:	f5 e9 10 09 	or	r9,r10,r9
80009f54:	e0 80 00 9a 	breq	8000a088 <_malloc_r+0x414>
80009f58:	e0 68 06 44 	mov	r8,1604
80009f5c:	70 01       	ld.w	r1,r8[0x0]
80009f5e:	e0 68 05 24 	mov	r8,1316
80009f62:	2f 01       	sub	r1,-16
80009f64:	70 08       	ld.w	r8,r8[0x0]
80009f66:	0e 01       	add	r1,r7
80009f68:	5b f8       	cp.w	r8,-1
80009f6a:	c0 40       	breq	80009f72 <_malloc_r+0x2fe>
80009f6c:	28 11       	sub	r1,-127
80009f6e:	e0 11 ff 80 	andl	r1,0xff80
80009f72:	02 9b       	mov	r11,r1
80009f74:	0a 9c       	mov	r12,r5
80009f76:	e0 a0 05 39 	rcall	8000a9e8 <_sbrk_r>
80009f7a:	18 96       	mov	r6,r12
80009f7c:	5b fc       	cp.w	r12,-1
80009f7e:	c7 50       	breq	8000a068 <_malloc_r+0x3f4>
80009f80:	e6 02 00 08 	add	r8,r3,r2
80009f84:	10 3c       	cp.w	r12,r8
80009f86:	c0 32       	brcc	80009f8c <_malloc_r+0x318>
80009f88:	08 33       	cp.w	r3,r4
80009f8a:	c6 f1       	brne	8000a068 <_malloc_r+0x3f4>
80009f8c:	e0 6a 06 48 	mov	r10,1608
80009f90:	74 09       	ld.w	r9,r10[0x0]
80009f92:	e2 09 00 09 	add	r9,r1,r9
80009f96:	95 09       	st.w	r10[0x0],r9
80009f98:	10 36       	cp.w	r6,r8
80009f9a:	c0 a1       	brne	80009fae <_malloc_r+0x33a>
80009f9c:	f5 d6 c0 07 	bfextu	r10,r6,0x0,0x7
80009fa0:	c0 71       	brne	80009fae <_malloc_r+0x33a>
80009fa2:	e2 02 00 02 	add	r2,r1,r2
80009fa6:	68 28       	ld.w	r8,r4[0x8]
80009fa8:	a1 a2       	sbr	r2,0x0
80009faa:	91 12       	st.w	r8[0x4],r2
80009fac:	c4 f8       	rjmp	8000a04a <_malloc_r+0x3d6>
80009fae:	e0 6a 05 24 	mov	r10,1316
80009fb2:	74 0b       	ld.w	r11,r10[0x0]
80009fb4:	5b fb       	cp.w	r11,-1
80009fb6:	c0 31       	brne	80009fbc <_malloc_r+0x348>
80009fb8:	95 06       	st.w	r10[0x0],r6
80009fba:	c0 78       	rjmp	80009fc8 <_malloc_r+0x354>
80009fbc:	ec 09 00 09 	add	r9,r6,r9
80009fc0:	e0 6a 06 48 	mov	r10,1608
80009fc4:	10 19       	sub	r9,r8
80009fc6:	95 09       	st.w	r10[0x0],r9
80009fc8:	f1 d6 c0 03 	bfextu	r8,r6,0x0,0x3
80009fcc:	f0 09 11 08 	rsub	r9,r8,8
80009fd0:	58 08       	cp.w	r8,0
80009fd2:	f2 08 17 10 	movne	r8,r9
80009fd6:	ed d8 e1 06 	addne	r6,r6,r8
80009fda:	28 08       	sub	r8,-128
80009fdc:	ec 01 00 01 	add	r1,r6,r1
80009fe0:	0a 9c       	mov	r12,r5
80009fe2:	e3 d1 c0 07 	bfextu	r1,r1,0x0,0x7
80009fe6:	f0 01 01 01 	sub	r1,r8,r1
80009fea:	02 9b       	mov	r11,r1
80009fec:	e0 a0 04 fe 	rcall	8000a9e8 <_sbrk_r>
80009ff0:	e0 68 06 48 	mov	r8,1608
80009ff4:	5b fc       	cp.w	r12,-1
80009ff6:	ec 0c 17 00 	moveq	r12,r6
80009ffa:	f9 b1 00 00 	moveq	r1,0
80009ffe:	70 09       	ld.w	r9,r8[0x0]
8000a000:	0c 1c       	sub	r12,r6
8000a002:	89 26       	st.w	r4[0x8],r6
8000a004:	02 0c       	add	r12,r1
8000a006:	12 01       	add	r1,r9
8000a008:	a1 ac       	sbr	r12,0x0
8000a00a:	91 01       	st.w	r8[0x0],r1
8000a00c:	8d 1c       	st.w	r6[0x4],r12
8000a00e:	08 33       	cp.w	r3,r4
8000a010:	c1 d0       	breq	8000a04a <_malloc_r+0x3d6>
8000a012:	58 f2       	cp.w	r2,15
8000a014:	e0 8b 00 05 	brhi	8000a01e <_malloc_r+0x3aa>
8000a018:	30 18       	mov	r8,1
8000a01a:	8d 18       	st.w	r6[0x4],r8
8000a01c:	c2 68       	rjmp	8000a068 <_malloc_r+0x3f4>
8000a01e:	30 59       	mov	r9,5
8000a020:	20 c2       	sub	r2,12
8000a022:	e0 12 ff f8 	andl	r2,0xfff8
8000a026:	e6 02 00 08 	add	r8,r3,r2
8000a02a:	91 29       	st.w	r8[0x8],r9
8000a02c:	91 19       	st.w	r8[0x4],r9
8000a02e:	66 18       	ld.w	r8,r3[0x4]
8000a030:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000a034:	e5 e8 10 08 	or	r8,r2,r8
8000a038:	87 18       	st.w	r3[0x4],r8
8000a03a:	58 f2       	cp.w	r2,15
8000a03c:	e0 88 00 07 	brls	8000a04a <_malloc_r+0x3d6>
8000a040:	e6 cb ff f8 	sub	r11,r3,-8
8000a044:	0a 9c       	mov	r12,r5
8000a046:	fe b0 fb 71 	rcall	80009728 <_free_r>
8000a04a:	e0 69 06 40 	mov	r9,1600
8000a04e:	72 0a       	ld.w	r10,r9[0x0]
8000a050:	e0 68 06 48 	mov	r8,1608
8000a054:	70 08       	ld.w	r8,r8[0x0]
8000a056:	14 38       	cp.w	r8,r10
8000a058:	f3 f8 ba 00 	st.whi	r9[0x0],r8
8000a05c:	e0 69 06 3c 	mov	r9,1596
8000a060:	72 0a       	ld.w	r10,r9[0x0]
8000a062:	14 38       	cp.w	r8,r10
8000a064:	f3 f8 ba 00 	st.whi	r9[0x0],r8
8000a068:	68 28       	ld.w	r8,r4[0x8]
8000a06a:	70 18       	ld.w	r8,r8[0x4]
8000a06c:	e0 18 ff fc 	andl	r8,0xfffc
8000a070:	0e 38       	cp.w	r8,r7
8000a072:	5f 39       	srlo	r9
8000a074:	0e 18       	sub	r8,r7
8000a076:	58 f8       	cp.w	r8,15
8000a078:	5f aa       	srle	r10
8000a07a:	f5 e9 10 09 	or	r9,r10,r9
8000a07e:	c0 50       	breq	8000a088 <_malloc_r+0x414>
8000a080:	0a 9c       	mov	r12,r5
8000a082:	c4 3c       	rcall	8000a108 <__malloc_unlock>
8000a084:	d8 3a       	popm	r0-r7,pc,r12=0
8000a086:	d7 03       	nop
8000a088:	68 26       	ld.w	r6,r4[0x8]
8000a08a:	a1 a8       	sbr	r8,0x0
8000a08c:	0e 99       	mov	r9,r7
8000a08e:	a1 a9       	sbr	r9,0x0
8000a090:	8d 19       	st.w	r6[0x4],r9
8000a092:	ec 07 00 07 	add	r7,r6,r7
8000a096:	0a 9c       	mov	r12,r5
8000a098:	89 27       	st.w	r4[0x8],r7
8000a09a:	8f 18       	st.w	r7[0x4],r8
8000a09c:	c3 6c       	rcall	8000a108 <__malloc_unlock>
8000a09e:	ec cc ff f8 	sub	r12,r6,-8
8000a0a2:	d8 32       	popm	r0-r7,pc

8000a0a4 <memchr>:
8000a0a4:	f7 db c0 08 	bfextu	r11,r11,0x0,0x8
8000a0a8:	c0 68       	rjmp	8000a0b4 <memchr+0x10>
8000a0aa:	20 1a       	sub	r10,1
8000a0ac:	19 88       	ld.ub	r8,r12[0x0]
8000a0ae:	16 38       	cp.w	r8,r11
8000a0b0:	5e 0c       	reteq	r12
8000a0b2:	2f fc       	sub	r12,-1
8000a0b4:	58 0a       	cp.w	r10,0
8000a0b6:	cf a1       	brne	8000a0aa <memchr+0x6>
8000a0b8:	5e fa       	retal	r10

8000a0ba <memmove>:
8000a0ba:	d4 01       	pushm	lr
8000a0bc:	18 3b       	cp.w	r11,r12
8000a0be:	c1 92       	brcc	8000a0f0 <memmove+0x36>
8000a0c0:	f6 0a 00 09 	add	r9,r11,r10
8000a0c4:	12 3c       	cp.w	r12,r9
8000a0c6:	c1 52       	brcc	8000a0f0 <memmove+0x36>
8000a0c8:	f8 0a 00 0b 	add	r11,r12,r10
8000a0cc:	30 08       	mov	r8,0
8000a0ce:	c0 68       	rjmp	8000a0da <memmove+0x20>
8000a0d0:	f2 08 07 0e 	ld.ub	lr,r9[r8]
8000a0d4:	20 1a       	sub	r10,1
8000a0d6:	f6 08 0b 0e 	st.b	r11[r8],lr
8000a0da:	20 18       	sub	r8,1
8000a0dc:	58 0a       	cp.w	r10,0
8000a0de:	cf 91       	brne	8000a0d0 <memmove+0x16>
8000a0e0:	d8 02       	popm	pc
8000a0e2:	f6 08 07 09 	ld.ub	r9,r11[r8]
8000a0e6:	20 1a       	sub	r10,1
8000a0e8:	f8 08 0b 09 	st.b	r12[r8],r9
8000a0ec:	2f f8       	sub	r8,-1
8000a0ee:	c0 28       	rjmp	8000a0f2 <memmove+0x38>
8000a0f0:	30 08       	mov	r8,0
8000a0f2:	58 0a       	cp.w	r10,0
8000a0f4:	cf 71       	brne	8000a0e2 <memmove+0x28>
8000a0f6:	d8 02       	popm	pc

8000a0f8 <memset>:
8000a0f8:	18 98       	mov	r8,r12
8000a0fa:	c0 38       	rjmp	8000a100 <memset+0x8>
8000a0fc:	10 cb       	st.b	r8++,r11
8000a0fe:	20 1a       	sub	r10,1
8000a100:	58 0a       	cp.w	r10,0
8000a102:	cf d1       	brne	8000a0fc <memset+0x4>
8000a104:	5e fc       	retal	r12

8000a106 <__malloc_lock>:
8000a106:	5e fc       	retal	r12

8000a108 <__malloc_unlock>:
8000a108:	5e fc       	retal	r12

8000a10a <__hi0bits>:
8000a10a:	18 98       	mov	r8,r12
8000a10c:	e0 1c 00 00 	andl	r12,0x0
8000a110:	f0 09 15 10 	lsl	r9,r8,0x10
8000a114:	58 0c       	cp.w	r12,0
8000a116:	f2 08 17 00 	moveq	r8,r9
8000a11a:	f9 bc 00 10 	moveq	r12,16
8000a11e:	f9 bc 01 00 	movne	r12,0
8000a122:	10 9a       	mov	r10,r8
8000a124:	f0 09 15 08 	lsl	r9,r8,0x8
8000a128:	e6 1a ff 00 	andh	r10,0xff00,COH
8000a12c:	f7 bc 00 f8 	subeq	r12,-8
8000a130:	f2 08 17 00 	moveq	r8,r9
8000a134:	10 9a       	mov	r10,r8
8000a136:	f0 09 15 04 	lsl	r9,r8,0x4
8000a13a:	e6 1a f0 00 	andh	r10,0xf000,COH
8000a13e:	f7 bc 00 fc 	subeq	r12,-4
8000a142:	f2 08 17 00 	moveq	r8,r9
8000a146:	10 9a       	mov	r10,r8
8000a148:	f0 09 15 02 	lsl	r9,r8,0x2
8000a14c:	e6 1a c0 00 	andh	r10,0xc000,COH
8000a150:	f7 bc 00 fe 	subeq	r12,-2
8000a154:	f2 08 17 00 	moveq	r8,r9
8000a158:	58 08       	cp.w	r8,0
8000a15a:	5e 5c       	retlt	r12
8000a15c:	ed b8 00 1e 	bld	r8,0x1e
8000a160:	f9 bc 01 20 	movne	r12,32
8000a164:	f7 bc 00 ff 	subeq	r12,-1
8000a168:	5e fc       	retal	r12

8000a16a <__lo0bits>:
8000a16a:	18 99       	mov	r9,r12
8000a16c:	78 08       	ld.w	r8,r12[0x0]
8000a16e:	f9 d8 c0 03 	bfextu	r12,r8,0x0,0x3
8000a172:	c1 50       	breq	8000a19c <__lo0bits+0x32>
8000a174:	ed b8 00 00 	bld	r8,0x0
8000a178:	c0 21       	brne	8000a17c <__lo0bits+0x12>
8000a17a:	5e fd       	retal	0
8000a17c:	10 9b       	mov	r11,r8
8000a17e:	f0 0a 16 01 	lsr	r10,r8,0x1
8000a182:	e2 1b 00 02 	andl	r11,0x2,COH
8000a186:	a3 88       	lsr	r8,0x2
8000a188:	58 0b       	cp.w	r11,0
8000a18a:	f3 fa 1a 00 	st.wne	r9[0x0],r10
8000a18e:	f9 bc 01 01 	movne	r12,1
8000a192:	f3 f8 0a 00 	st.weq	r9[0x0],r8
8000a196:	f9 bc 00 02 	moveq	r12,2
8000a19a:	5e fc       	retal	r12
8000a19c:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
8000a1a0:	f0 0b 16 10 	lsr	r11,r8,0x10
8000a1a4:	58 0a       	cp.w	r10,0
8000a1a6:	f6 08 17 00 	moveq	r8,r11
8000a1aa:	f9 bc 00 10 	moveq	r12,16
8000a1ae:	f7 d8 c0 08 	bfextu	r11,r8,0x0,0x8
8000a1b2:	f0 0a 16 08 	lsr	r10,r8,0x8
8000a1b6:	58 0b       	cp.w	r11,0
8000a1b8:	f7 bc 00 f8 	subeq	r12,-8
8000a1bc:	f4 08 17 00 	moveq	r8,r10
8000a1c0:	f7 d8 c0 04 	bfextu	r11,r8,0x0,0x4
8000a1c4:	f0 0a 16 04 	lsr	r10,r8,0x4
8000a1c8:	58 0b       	cp.w	r11,0
8000a1ca:	f7 bc 00 fc 	subeq	r12,-4
8000a1ce:	f4 08 17 00 	moveq	r8,r10
8000a1d2:	f7 d8 c0 02 	bfextu	r11,r8,0x0,0x2
8000a1d6:	f0 0a 16 02 	lsr	r10,r8,0x2
8000a1da:	58 0b       	cp.w	r11,0
8000a1dc:	f7 bc 00 fe 	subeq	r12,-2
8000a1e0:	f4 08 17 00 	moveq	r8,r10
8000a1e4:	ed b8 00 00 	bld	r8,0x0
8000a1e8:	c0 60       	breq	8000a1f4 <__lo0bits+0x8a>
8000a1ea:	a1 98       	lsr	r8,0x1
8000a1ec:	c0 31       	brne	8000a1f2 <__lo0bits+0x88>
8000a1ee:	32 0c       	mov	r12,32
8000a1f0:	5e fc       	retal	r12
8000a1f2:	2f fc       	sub	r12,-1
8000a1f4:	93 08       	st.w	r9[0x0],r8
8000a1f6:	5e fc       	retal	r12

8000a1f8 <__mcmp>:
8000a1f8:	d4 01       	pushm	lr
8000a1fa:	18 98       	mov	r8,r12
8000a1fc:	76 49       	ld.w	r9,r11[0x10]
8000a1fe:	78 4c       	ld.w	r12,r12[0x10]
8000a200:	12 1c       	sub	r12,r9
8000a202:	c1 31       	brne	8000a228 <__mcmp+0x30>
8000a204:	2f b9       	sub	r9,-5
8000a206:	a3 69       	lsl	r9,0x2
8000a208:	12 0b       	add	r11,r9
8000a20a:	f0 09 00 09 	add	r9,r8,r9
8000a20e:	2e c8       	sub	r8,-20
8000a210:	13 4e       	ld.w	lr,--r9
8000a212:	17 4a       	ld.w	r10,--r11
8000a214:	14 3e       	cp.w	lr,r10
8000a216:	c0 60       	breq	8000a222 <__mcmp+0x2a>
8000a218:	f9 bc 03 ff 	movlo	r12,-1
8000a21c:	f9 bc 02 01 	movhs	r12,1
8000a220:	d8 02       	popm	pc
8000a222:	10 39       	cp.w	r9,r8
8000a224:	fe 9b ff f6 	brhi	8000a210 <__mcmp+0x18>
8000a228:	d8 02       	popm	pc
8000a22a:	d7 03       	nop

8000a22c <_Bfree>:
8000a22c:	d4 21       	pushm	r4-r7,lr
8000a22e:	18 97       	mov	r7,r12
8000a230:	16 95       	mov	r5,r11
8000a232:	78 96       	ld.w	r6,r12[0x24]
8000a234:	58 06       	cp.w	r6,0
8000a236:	c0 91       	brne	8000a248 <_Bfree+0x1c>
8000a238:	31 0c       	mov	r12,16
8000a23a:	fe b0 fd 15 	rcall	80009c64 <malloc>
8000a23e:	99 36       	st.w	r12[0xc],r6
8000a240:	8f 9c       	st.w	r7[0x24],r12
8000a242:	99 16       	st.w	r12[0x4],r6
8000a244:	99 26       	st.w	r12[0x8],r6
8000a246:	99 06       	st.w	r12[0x0],r6
8000a248:	58 05       	cp.w	r5,0
8000a24a:	c0 90       	breq	8000a25c <_Bfree+0x30>
8000a24c:	6a 19       	ld.w	r9,r5[0x4]
8000a24e:	6e 98       	ld.w	r8,r7[0x24]
8000a250:	70 38       	ld.w	r8,r8[0xc]
8000a252:	f0 09 03 2a 	ld.w	r10,r8[r9<<0x2]
8000a256:	8b 0a       	st.w	r5[0x0],r10
8000a258:	f0 09 09 25 	st.w	r8[r9<<0x2],r5
8000a25c:	d8 22       	popm	r4-r7,pc
8000a25e:	d7 03       	nop

8000a260 <_Balloc>:
8000a260:	d4 21       	pushm	r4-r7,lr
8000a262:	18 97       	mov	r7,r12
8000a264:	16 96       	mov	r6,r11
8000a266:	78 95       	ld.w	r5,r12[0x24]
8000a268:	58 05       	cp.w	r5,0
8000a26a:	c0 91       	brne	8000a27c <_Balloc+0x1c>
8000a26c:	31 0c       	mov	r12,16
8000a26e:	fe b0 fc fb 	rcall	80009c64 <malloc>
8000a272:	99 35       	st.w	r12[0xc],r5
8000a274:	8f 9c       	st.w	r7[0x24],r12
8000a276:	99 15       	st.w	r12[0x4],r5
8000a278:	99 25       	st.w	r12[0x8],r5
8000a27a:	99 05       	st.w	r12[0x0],r5
8000a27c:	6e 95       	ld.w	r5,r7[0x24]
8000a27e:	6a 38       	ld.w	r8,r5[0xc]
8000a280:	58 08       	cp.w	r8,0
8000a282:	c0 b1       	brne	8000a298 <_Balloc+0x38>
8000a284:	31 0a       	mov	r10,16
8000a286:	30 4b       	mov	r11,4
8000a288:	0e 9c       	mov	r12,r7
8000a28a:	e0 a0 04 93 	rcall	8000abb0 <_calloc_r>
8000a28e:	8b 3c       	st.w	r5[0xc],r12
8000a290:	6e 98       	ld.w	r8,r7[0x24]
8000a292:	70 3c       	ld.w	r12,r8[0xc]
8000a294:	58 0c       	cp.w	r12,0
8000a296:	c1 b0       	breq	8000a2cc <_Balloc+0x6c>
8000a298:	6e 98       	ld.w	r8,r7[0x24]
8000a29a:	70 38       	ld.w	r8,r8[0xc]
8000a29c:	f0 06 00 28 	add	r8,r8,r6<<0x2
8000a2a0:	70 0c       	ld.w	r12,r8[0x0]
8000a2a2:	58 0c       	cp.w	r12,0
8000a2a4:	c0 40       	breq	8000a2ac <_Balloc+0x4c>
8000a2a6:	78 09       	ld.w	r9,r12[0x0]
8000a2a8:	91 09       	st.w	r8[0x0],r9
8000a2aa:	c0 e8       	rjmp	8000a2c6 <_Balloc+0x66>
8000a2ac:	0e 9c       	mov	r12,r7
8000a2ae:	30 17       	mov	r7,1
8000a2b0:	0e 9b       	mov	r11,r7
8000a2b2:	ee 06 09 47 	lsl	r7,r7,r6
8000a2b6:	ee ca ff fb 	sub	r10,r7,-5
8000a2ba:	a3 6a       	lsl	r10,0x2
8000a2bc:	e0 a0 04 7a 	rcall	8000abb0 <_calloc_r>
8000a2c0:	c0 60       	breq	8000a2cc <_Balloc+0x6c>
8000a2c2:	99 16       	st.w	r12[0x4],r6
8000a2c4:	99 27       	st.w	r12[0x8],r7
8000a2c6:	30 08       	mov	r8,0
8000a2c8:	99 38       	st.w	r12[0xc],r8
8000a2ca:	99 48       	st.w	r12[0x10],r8
8000a2cc:	d8 22       	popm	r4-r7,pc
8000a2ce:	d7 03       	nop

8000a2d0 <__d2b>:
8000a2d0:	d4 31       	pushm	r0-r7,lr
8000a2d2:	20 2d       	sub	sp,8
8000a2d4:	16 93       	mov	r3,r11
8000a2d6:	12 96       	mov	r6,r9
8000a2d8:	10 95       	mov	r5,r8
8000a2da:	14 92       	mov	r2,r10
8000a2dc:	30 1b       	mov	r11,1
8000a2de:	cc 1f       	rcall	8000a260 <_Balloc>
8000a2e0:	f3 d3 c0 14 	bfextu	r9,r3,0x0,0x14
8000a2e4:	50 09       	stdsp	sp[0x0],r9
8000a2e6:	f1 d3 c0 1f 	bfextu	r8,r3,0x0,0x1f
8000a2ea:	b5 a9       	sbr	r9,0x14
8000a2ec:	f0 01 16 14 	lsr	r1,r8,0x14
8000a2f0:	fb f9 1a 00 	st.wne	sp[0x0],r9
8000a2f4:	18 94       	mov	r4,r12
8000a2f6:	58 02       	cp.w	r2,0
8000a2f8:	c1 d0       	breq	8000a332 <__d2b+0x62>
8000a2fa:	fa cc ff f8 	sub	r12,sp,-8
8000a2fe:	18 d2       	st.w	--r12,r2
8000a300:	c3 5f       	rcall	8000a16a <__lo0bits>
8000a302:	40 18       	lddsp	r8,sp[0x4]
8000a304:	c0 d0       	breq	8000a31e <__d2b+0x4e>
8000a306:	40 09       	lddsp	r9,sp[0x0]
8000a308:	f8 0a 11 20 	rsub	r10,r12,32
8000a30c:	f2 0a 09 4a 	lsl	r10,r9,r10
8000a310:	f5 e8 10 08 	or	r8,r10,r8
8000a314:	89 58       	st.w	r4[0x14],r8
8000a316:	f2 0c 0a 49 	lsr	r9,r9,r12
8000a31a:	50 09       	stdsp	sp[0x0],r9
8000a31c:	c0 28       	rjmp	8000a320 <__d2b+0x50>
8000a31e:	89 58       	st.w	r4[0x14],r8
8000a320:	40 08       	lddsp	r8,sp[0x0]
8000a322:	58 08       	cp.w	r8,0
8000a324:	f9 b3 01 02 	movne	r3,2
8000a328:	f9 b3 00 01 	moveq	r3,1
8000a32c:	89 68       	st.w	r4[0x18],r8
8000a32e:	89 43       	st.w	r4[0x10],r3
8000a330:	c0 88       	rjmp	8000a340 <__d2b+0x70>
8000a332:	1a 9c       	mov	r12,sp
8000a334:	c1 bf       	rcall	8000a16a <__lo0bits>
8000a336:	30 13       	mov	r3,1
8000a338:	40 08       	lddsp	r8,sp[0x0]
8000a33a:	2e 0c       	sub	r12,-32
8000a33c:	89 43       	st.w	r4[0x10],r3
8000a33e:	89 58       	st.w	r4[0x14],r8
8000a340:	58 01       	cp.w	r1,0
8000a342:	c0 90       	breq	8000a354 <__d2b+0x84>
8000a344:	e2 c1 04 33 	sub	r1,r1,1075
8000a348:	18 01       	add	r1,r12
8000a34a:	8d 01       	st.w	r6[0x0],r1
8000a34c:	f8 0c 11 35 	rsub	r12,r12,53
8000a350:	8b 0c       	st.w	r5[0x0],r12
8000a352:	c0 c8       	rjmp	8000a36a <__d2b+0x9a>
8000a354:	e6 c8 ff fc 	sub	r8,r3,-4
8000a358:	f8 cc 04 32 	sub	r12,r12,1074
8000a35c:	a5 73       	lsl	r3,0x5
8000a35e:	8d 0c       	st.w	r6[0x0],r12
8000a360:	e8 08 03 2c 	ld.w	r12,r4[r8<<0x2]
8000a364:	cd 3e       	rcall	8000a10a <__hi0bits>
8000a366:	18 13       	sub	r3,r12
8000a368:	8b 03       	st.w	r5[0x0],r3
8000a36a:	08 9c       	mov	r12,r4
8000a36c:	2f ed       	sub	sp,-8
8000a36e:	d8 32       	popm	r0-r7,pc

8000a370 <__mdiff>:
8000a370:	d4 31       	pushm	r0-r7,lr
8000a372:	74 48       	ld.w	r8,r10[0x10]
8000a374:	76 45       	ld.w	r5,r11[0x10]
8000a376:	16 97       	mov	r7,r11
8000a378:	14 96       	mov	r6,r10
8000a37a:	10 15       	sub	r5,r8
8000a37c:	c1 31       	brne	8000a3a2 <__mdiff+0x32>
8000a37e:	2f b8       	sub	r8,-5
8000a380:	ee ce ff ec 	sub	lr,r7,-20
8000a384:	a3 68       	lsl	r8,0x2
8000a386:	f4 08 00 0b 	add	r11,r10,r8
8000a38a:	ee 08 00 08 	add	r8,r7,r8
8000a38e:	11 4a       	ld.w	r10,--r8
8000a390:	17 49       	ld.w	r9,--r11
8000a392:	12 3a       	cp.w	r10,r9
8000a394:	c0 30       	breq	8000a39a <__mdiff+0x2a>
8000a396:	c0 e2       	brcc	8000a3b2 <__mdiff+0x42>
8000a398:	c0 78       	rjmp	8000a3a6 <__mdiff+0x36>
8000a39a:	1c 38       	cp.w	r8,lr
8000a39c:	fe 9b ff f9 	brhi	8000a38e <__mdiff+0x1e>
8000a3a0:	c4 98       	rjmp	8000a432 <__mdiff+0xc2>
8000a3a2:	58 05       	cp.w	r5,0
8000a3a4:	c0 64       	brge	8000a3b0 <__mdiff+0x40>
8000a3a6:	0e 98       	mov	r8,r7
8000a3a8:	30 15       	mov	r5,1
8000a3aa:	0c 97       	mov	r7,r6
8000a3ac:	10 96       	mov	r6,r8
8000a3ae:	c0 28       	rjmp	8000a3b2 <__mdiff+0x42>
8000a3b0:	30 05       	mov	r5,0
8000a3b2:	6e 1b       	ld.w	r11,r7[0x4]
8000a3b4:	c5 6f       	rcall	8000a260 <_Balloc>
8000a3b6:	6e 49       	ld.w	r9,r7[0x10]
8000a3b8:	6c 44       	ld.w	r4,r6[0x10]
8000a3ba:	99 35       	st.w	r12[0xc],r5
8000a3bc:	2f b4       	sub	r4,-5
8000a3be:	f2 c5 ff fb 	sub	r5,r9,-5
8000a3c2:	ec 04 00 24 	add	r4,r6,r4<<0x2
8000a3c6:	ee 05 00 25 	add	r5,r7,r5<<0x2
8000a3ca:	2e c6       	sub	r6,-20
8000a3cc:	2e c7       	sub	r7,-20
8000a3ce:	f8 c8 ff ec 	sub	r8,r12,-20
8000a3d2:	30 0a       	mov	r10,0
8000a3d4:	0f 0e       	ld.w	lr,r7++
8000a3d6:	0d 0b       	ld.w	r11,r6++
8000a3d8:	fc 02 16 10 	lsr	r2,lr,0x10
8000a3dc:	f6 03 16 10 	lsr	r3,r11,0x10
8000a3e0:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
8000a3e4:	e4 03 01 03 	sub	r3,r2,r3
8000a3e8:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
8000a3ec:	fc 0b 01 0b 	sub	r11,lr,r11
8000a3f0:	f6 0a 00 0a 	add	r10,r11,r10
8000a3f4:	b0 1a       	st.h	r8[0x2],r10
8000a3f6:	b1 4a       	asr	r10,0x10
8000a3f8:	e6 0a 00 0a 	add	r10,r3,r10
8000a3fc:	b0 0a       	st.h	r8[0x0],r10
8000a3fe:	2f c8       	sub	r8,-4
8000a400:	b1 4a       	asr	r10,0x10
8000a402:	08 36       	cp.w	r6,r4
8000a404:	ce 83       	brcs	8000a3d4 <__mdiff+0x64>
8000a406:	c0 d8       	rjmp	8000a420 <__mdiff+0xb0>
8000a408:	0f 0b       	ld.w	r11,r7++
8000a40a:	f6 0e 16 10 	lsr	lr,r11,0x10
8000a40e:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
8000a412:	16 0a       	add	r10,r11
8000a414:	b0 1a       	st.h	r8[0x2],r10
8000a416:	b1 4a       	asr	r10,0x10
8000a418:	1c 0a       	add	r10,lr
8000a41a:	b0 0a       	st.h	r8[0x0],r10
8000a41c:	2f c8       	sub	r8,-4
8000a41e:	b1 4a       	asr	r10,0x10
8000a420:	0a 37       	cp.w	r7,r5
8000a422:	cf 33       	brcs	8000a408 <__mdiff+0x98>
8000a424:	c0 28       	rjmp	8000a428 <__mdiff+0xb8>
8000a426:	20 19       	sub	r9,1
8000a428:	11 4a       	ld.w	r10,--r8
8000a42a:	58 0a       	cp.w	r10,0
8000a42c:	cf d0       	breq	8000a426 <__mdiff+0xb6>
8000a42e:	99 49       	st.w	r12[0x10],r9
8000a430:	d8 32       	popm	r0-r7,pc
8000a432:	30 0b       	mov	r11,0
8000a434:	c1 6f       	rcall	8000a260 <_Balloc>
8000a436:	30 18       	mov	r8,1
8000a438:	99 48       	st.w	r12[0x10],r8
8000a43a:	30 08       	mov	r8,0
8000a43c:	99 58       	st.w	r12[0x14],r8
8000a43e:	d8 32       	popm	r0-r7,pc

8000a440 <__lshift>:
8000a440:	d4 31       	pushm	r0-r7,lr
8000a442:	16 97       	mov	r7,r11
8000a444:	76 46       	ld.w	r6,r11[0x10]
8000a446:	f4 02 14 05 	asr	r2,r10,0x5
8000a44a:	2f f6       	sub	r6,-1
8000a44c:	14 93       	mov	r3,r10
8000a44e:	18 94       	mov	r4,r12
8000a450:	04 06       	add	r6,r2
8000a452:	76 1b       	ld.w	r11,r11[0x4]
8000a454:	6e 28       	ld.w	r8,r7[0x8]
8000a456:	c0 38       	rjmp	8000a45c <__lshift+0x1c>
8000a458:	2f fb       	sub	r11,-1
8000a45a:	a1 78       	lsl	r8,0x1
8000a45c:	10 36       	cp.w	r6,r8
8000a45e:	fe 99 ff fd 	brgt	8000a458 <__lshift+0x18>
8000a462:	08 9c       	mov	r12,r4
8000a464:	cf ee       	rcall	8000a260 <_Balloc>
8000a466:	30 09       	mov	r9,0
8000a468:	18 95       	mov	r5,r12
8000a46a:	f8 c8 ff ec 	sub	r8,r12,-20
8000a46e:	12 9a       	mov	r10,r9
8000a470:	c0 38       	rjmp	8000a476 <__lshift+0x36>
8000a472:	10 aa       	st.w	r8++,r10
8000a474:	2f f9       	sub	r9,-1
8000a476:	04 39       	cp.w	r9,r2
8000a478:	cf d5       	brlt	8000a472 <__lshift+0x32>
8000a47a:	6e 4b       	ld.w	r11,r7[0x10]
8000a47c:	e7 d3 c0 05 	bfextu	r3,r3,0x0,0x5
8000a480:	2f bb       	sub	r11,-5
8000a482:	ee c9 ff ec 	sub	r9,r7,-20
8000a486:	ee 0b 00 2b 	add	r11,r7,r11<<0x2
8000a48a:	58 03       	cp.w	r3,0
8000a48c:	c1 30       	breq	8000a4b2 <__lshift+0x72>
8000a48e:	e6 0c 11 20 	rsub	r12,r3,32
8000a492:	30 0a       	mov	r10,0
8000a494:	72 02       	ld.w	r2,r9[0x0]
8000a496:	e4 03 09 42 	lsl	r2,r2,r3
8000a49a:	04 4a       	or	r10,r2
8000a49c:	10 aa       	st.w	r8++,r10
8000a49e:	13 0a       	ld.w	r10,r9++
8000a4a0:	f4 0c 0a 4a 	lsr	r10,r10,r12
8000a4a4:	16 39       	cp.w	r9,r11
8000a4a6:	cf 73       	brcs	8000a494 <__lshift+0x54>
8000a4a8:	91 0a       	st.w	r8[0x0],r10
8000a4aa:	58 0a       	cp.w	r10,0
8000a4ac:	c0 70       	breq	8000a4ba <__lshift+0x7a>
8000a4ae:	2f f6       	sub	r6,-1
8000a4b0:	c0 58       	rjmp	8000a4ba <__lshift+0x7a>
8000a4b2:	13 0a       	ld.w	r10,r9++
8000a4b4:	10 aa       	st.w	r8++,r10
8000a4b6:	16 39       	cp.w	r9,r11
8000a4b8:	cf d3       	brcs	8000a4b2 <__lshift+0x72>
8000a4ba:	08 9c       	mov	r12,r4
8000a4bc:	20 16       	sub	r6,1
8000a4be:	0e 9b       	mov	r11,r7
8000a4c0:	8b 46       	st.w	r5[0x10],r6
8000a4c2:	cb 5e       	rcall	8000a22c <_Bfree>
8000a4c4:	0a 9c       	mov	r12,r5
8000a4c6:	d8 32       	popm	r0-r7,pc

8000a4c8 <__multiply>:
8000a4c8:	d4 31       	pushm	r0-r7,lr
8000a4ca:	20 2d       	sub	sp,8
8000a4cc:	76 49       	ld.w	r9,r11[0x10]
8000a4ce:	74 48       	ld.w	r8,r10[0x10]
8000a4d0:	16 96       	mov	r6,r11
8000a4d2:	14 95       	mov	r5,r10
8000a4d4:	10 39       	cp.w	r9,r8
8000a4d6:	ec 08 17 50 	movlt	r8,r6
8000a4da:	ea 06 17 50 	movlt	r6,r5
8000a4de:	f0 05 17 50 	movlt	r5,r8
8000a4e2:	6c 28       	ld.w	r8,r6[0x8]
8000a4e4:	76 43       	ld.w	r3,r11[0x10]
8000a4e6:	74 42       	ld.w	r2,r10[0x10]
8000a4e8:	76 1b       	ld.w	r11,r11[0x4]
8000a4ea:	e4 03 00 07 	add	r7,r2,r3
8000a4ee:	10 37       	cp.w	r7,r8
8000a4f0:	f7 bb 09 ff 	subgt	r11,-1
8000a4f4:	cb 6e       	rcall	8000a260 <_Balloc>
8000a4f6:	ee c4 ff fb 	sub	r4,r7,-5
8000a4fa:	f8 c9 ff ec 	sub	r9,r12,-20
8000a4fe:	f8 04 00 24 	add	r4,r12,r4<<0x2
8000a502:	30 0a       	mov	r10,0
8000a504:	12 98       	mov	r8,r9
8000a506:	c0 28       	rjmp	8000a50a <__multiply+0x42>
8000a508:	10 aa       	st.w	r8++,r10
8000a50a:	08 38       	cp.w	r8,r4
8000a50c:	cf e3       	brcs	8000a508 <__multiply+0x40>
8000a50e:	2f b3       	sub	r3,-5
8000a510:	2f b2       	sub	r2,-5
8000a512:	ec 03 00 23 	add	r3,r6,r3<<0x2
8000a516:	ea 02 00 22 	add	r2,r5,r2<<0x2
8000a51a:	ec cb ff ec 	sub	r11,r6,-20
8000a51e:	50 12       	stdsp	sp[0x4],r2
8000a520:	ea ca ff ec 	sub	r10,r5,-20
8000a524:	c4 48       	rjmp	8000a5ac <__multiply+0xe4>
8000a526:	94 95       	ld.uh	r5,r10[0x2]
8000a528:	58 05       	cp.w	r5,0
8000a52a:	c2 00       	breq	8000a56a <__multiply+0xa2>
8000a52c:	12 98       	mov	r8,r9
8000a52e:	16 96       	mov	r6,r11
8000a530:	30 0e       	mov	lr,0
8000a532:	50 09       	stdsp	sp[0x0],r9
8000a534:	0d 02       	ld.w	r2,r6++
8000a536:	e4 00 16 10 	lsr	r0,r2,0x10
8000a53a:	70 01       	ld.w	r1,r8[0x0]
8000a53c:	70 09       	ld.w	r9,r8[0x0]
8000a53e:	b1 81       	lsr	r1,0x10
8000a540:	e5 d2 c0 10 	bfextu	r2,r2,0x0,0x10
8000a544:	e0 05 03 41 	mac	r1,r0,r5
8000a548:	ab 32       	mul	r2,r5
8000a54a:	e1 d9 c0 10 	bfextu	r0,r9,0x0,0x10
8000a54e:	00 02       	add	r2,r0
8000a550:	e4 0e 00 0e 	add	lr,r2,lr
8000a554:	b0 1e       	st.h	r8[0x2],lr
8000a556:	b1 8e       	lsr	lr,0x10
8000a558:	1c 01       	add	r1,lr
8000a55a:	b0 01       	st.h	r8[0x0],r1
8000a55c:	e2 0e 16 10 	lsr	lr,r1,0x10
8000a560:	2f c8       	sub	r8,-4
8000a562:	06 36       	cp.w	r6,r3
8000a564:	ce 83       	brcs	8000a534 <__multiply+0x6c>
8000a566:	40 09       	lddsp	r9,sp[0x0]
8000a568:	91 0e       	st.w	r8[0x0],lr
8000a56a:	94 86       	ld.uh	r6,r10[0x0]
8000a56c:	58 06       	cp.w	r6,0
8000a56e:	c1 d0       	breq	8000a5a8 <__multiply+0xe0>
8000a570:	72 02       	ld.w	r2,r9[0x0]
8000a572:	12 98       	mov	r8,r9
8000a574:	16 9e       	mov	lr,r11
8000a576:	30 05       	mov	r5,0
8000a578:	b0 12       	st.h	r8[0x2],r2
8000a57a:	1d 01       	ld.w	r1,lr++
8000a57c:	90 82       	ld.uh	r2,r8[0x0]
8000a57e:	e1 d1 c0 10 	bfextu	r0,r1,0x0,0x10
8000a582:	ad 30       	mul	r0,r6
8000a584:	e0 02 00 02 	add	r2,r0,r2
8000a588:	e4 05 00 05 	add	r5,r2,r5
8000a58c:	b0 05       	st.h	r8[0x0],r5
8000a58e:	b1 85       	lsr	r5,0x10
8000a590:	b1 81       	lsr	r1,0x10
8000a592:	2f c8       	sub	r8,-4
8000a594:	ad 31       	mul	r1,r6
8000a596:	90 92       	ld.uh	r2,r8[0x2]
8000a598:	e2 02 00 02 	add	r2,r1,r2
8000a59c:	0a 02       	add	r2,r5
8000a59e:	e4 05 16 10 	lsr	r5,r2,0x10
8000a5a2:	06 3e       	cp.w	lr,r3
8000a5a4:	ce a3       	brcs	8000a578 <__multiply+0xb0>
8000a5a6:	91 02       	st.w	r8[0x0],r2
8000a5a8:	2f ca       	sub	r10,-4
8000a5aa:	2f c9       	sub	r9,-4
8000a5ac:	40 18       	lddsp	r8,sp[0x4]
8000a5ae:	10 3a       	cp.w	r10,r8
8000a5b0:	cb b3       	brcs	8000a526 <__multiply+0x5e>
8000a5b2:	c0 28       	rjmp	8000a5b6 <__multiply+0xee>
8000a5b4:	20 17       	sub	r7,1
8000a5b6:	58 07       	cp.w	r7,0
8000a5b8:	e0 8a 00 05 	brle	8000a5c2 <__multiply+0xfa>
8000a5bc:	09 48       	ld.w	r8,--r4
8000a5be:	58 08       	cp.w	r8,0
8000a5c0:	cf a0       	breq	8000a5b4 <__multiply+0xec>
8000a5c2:	99 47       	st.w	r12[0x10],r7
8000a5c4:	2f ed       	sub	sp,-8
8000a5c6:	d8 32       	popm	r0-r7,pc

8000a5c8 <__i2b>:
8000a5c8:	d4 21       	pushm	r4-r7,lr
8000a5ca:	16 97       	mov	r7,r11
8000a5cc:	30 1b       	mov	r11,1
8000a5ce:	c4 9e       	rcall	8000a260 <_Balloc>
8000a5d0:	30 19       	mov	r9,1
8000a5d2:	99 57       	st.w	r12[0x14],r7
8000a5d4:	99 49       	st.w	r12[0x10],r9
8000a5d6:	d8 22       	popm	r4-r7,pc

8000a5d8 <__multadd>:
8000a5d8:	d4 31       	pushm	r0-r7,lr
8000a5da:	30 08       	mov	r8,0
8000a5dc:	12 95       	mov	r5,r9
8000a5de:	16 97       	mov	r7,r11
8000a5e0:	18 96       	mov	r6,r12
8000a5e2:	76 44       	ld.w	r4,r11[0x10]
8000a5e4:	f6 c9 ff ec 	sub	r9,r11,-20
8000a5e8:	72 0b       	ld.w	r11,r9[0x0]
8000a5ea:	f6 0c 16 10 	lsr	r12,r11,0x10
8000a5ee:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
8000a5f2:	f4 0c 02 4c 	mul	r12,r10,r12
8000a5f6:	f4 0b 03 45 	mac	r5,r10,r11
8000a5fa:	f7 d5 c0 10 	bfextu	r11,r5,0x0,0x10
8000a5fe:	b1 85       	lsr	r5,0x10
8000a600:	18 05       	add	r5,r12
8000a602:	ea 0c 15 10 	lsl	r12,r5,0x10
8000a606:	f8 0b 00 0b 	add	r11,r12,r11
8000a60a:	12 ab       	st.w	r9++,r11
8000a60c:	2f f8       	sub	r8,-1
8000a60e:	b1 85       	lsr	r5,0x10
8000a610:	08 38       	cp.w	r8,r4
8000a612:	ce b5       	brlt	8000a5e8 <__multadd+0x10>
8000a614:	58 05       	cp.w	r5,0
8000a616:	c1 c0       	breq	8000a64e <__multadd+0x76>
8000a618:	6e 28       	ld.w	r8,r7[0x8]
8000a61a:	10 34       	cp.w	r4,r8
8000a61c:	c1 35       	brlt	8000a642 <__multadd+0x6a>
8000a61e:	6e 1b       	ld.w	r11,r7[0x4]
8000a620:	0c 9c       	mov	r12,r6
8000a622:	2f fb       	sub	r11,-1
8000a624:	c1 ee       	rcall	8000a260 <_Balloc>
8000a626:	6e 4a       	ld.w	r10,r7[0x10]
8000a628:	ee cb ff f4 	sub	r11,r7,-12
8000a62c:	18 93       	mov	r3,r12
8000a62e:	2f ea       	sub	r10,-2
8000a630:	2f 4c       	sub	r12,-12
8000a632:	a3 6a       	lsl	r10,0x2
8000a634:	fe b0 de 39 	rcall	800062a6 <memcpy>
8000a638:	0e 9b       	mov	r11,r7
8000a63a:	0c 9c       	mov	r12,r6
8000a63c:	fe b0 fd f8 	rcall	8000a22c <_Bfree>
8000a640:	06 97       	mov	r7,r3
8000a642:	e8 c8 ff ff 	sub	r8,r4,-1
8000a646:	2f b4       	sub	r4,-5
8000a648:	8f 48       	st.w	r7[0x10],r8
8000a64a:	ee 04 09 25 	st.w	r7[r4<<0x2],r5
8000a64e:	0e 9c       	mov	r12,r7
8000a650:	d8 32       	popm	r0-r7,pc
8000a652:	d7 03       	nop

8000a654 <__pow5mult>:
8000a654:	d4 31       	pushm	r0-r7,lr
8000a656:	14 96       	mov	r6,r10
8000a658:	18 97       	mov	r7,r12
8000a65a:	16 94       	mov	r4,r11
8000a65c:	f1 da c0 02 	bfextu	r8,r10,0x0,0x2
8000a660:	c0 90       	breq	8000a672 <__pow5mult+0x1e>
8000a662:	20 18       	sub	r8,1
8000a664:	fe c9 e9 5c 	sub	r9,pc,-5796
8000a668:	f2 08 03 2a 	ld.w	r10,r9[r8<<0x2]
8000a66c:	30 09       	mov	r9,0
8000a66e:	cb 5f       	rcall	8000a5d8 <__multadd>
8000a670:	18 94       	mov	r4,r12
8000a672:	a3 46       	asr	r6,0x2
8000a674:	c3 40       	breq	8000a6dc <__pow5mult+0x88>
8000a676:	6e 95       	ld.w	r5,r7[0x24]
8000a678:	58 05       	cp.w	r5,0
8000a67a:	c0 91       	brne	8000a68c <__pow5mult+0x38>
8000a67c:	31 0c       	mov	r12,16
8000a67e:	fe b0 fa f3 	rcall	80009c64 <malloc>
8000a682:	99 35       	st.w	r12[0xc],r5
8000a684:	8f 9c       	st.w	r7[0x24],r12
8000a686:	99 15       	st.w	r12[0x4],r5
8000a688:	99 25       	st.w	r12[0x8],r5
8000a68a:	99 05       	st.w	r12[0x0],r5
8000a68c:	6e 93       	ld.w	r3,r7[0x24]
8000a68e:	66 25       	ld.w	r5,r3[0x8]
8000a690:	58 05       	cp.w	r5,0
8000a692:	c0 c1       	brne	8000a6aa <__pow5mult+0x56>
8000a694:	e0 6b 02 71 	mov	r11,625
8000a698:	0e 9c       	mov	r12,r7
8000a69a:	c9 7f       	rcall	8000a5c8 <__i2b>
8000a69c:	87 2c       	st.w	r3[0x8],r12
8000a69e:	30 08       	mov	r8,0
8000a6a0:	18 95       	mov	r5,r12
8000a6a2:	99 08       	st.w	r12[0x0],r8
8000a6a4:	c0 38       	rjmp	8000a6aa <__pow5mult+0x56>
8000a6a6:	06 9c       	mov	r12,r3
8000a6a8:	18 95       	mov	r5,r12
8000a6aa:	ed b6 00 00 	bld	r6,0x0
8000a6ae:	c0 b1       	brne	8000a6c4 <__pow5mult+0x70>
8000a6b0:	08 9b       	mov	r11,r4
8000a6b2:	0a 9a       	mov	r10,r5
8000a6b4:	0e 9c       	mov	r12,r7
8000a6b6:	c0 9f       	rcall	8000a4c8 <__multiply>
8000a6b8:	08 9b       	mov	r11,r4
8000a6ba:	18 93       	mov	r3,r12
8000a6bc:	0e 9c       	mov	r12,r7
8000a6be:	06 94       	mov	r4,r3
8000a6c0:	fe b0 fd b6 	rcall	8000a22c <_Bfree>
8000a6c4:	a1 56       	asr	r6,0x1
8000a6c6:	c0 b0       	breq	8000a6dc <__pow5mult+0x88>
8000a6c8:	6a 03       	ld.w	r3,r5[0x0]
8000a6ca:	58 03       	cp.w	r3,0
8000a6cc:	ce d1       	brne	8000a6a6 <__pow5mult+0x52>
8000a6ce:	0a 9a       	mov	r10,r5
8000a6d0:	0a 9b       	mov	r11,r5
8000a6d2:	0e 9c       	mov	r12,r7
8000a6d4:	cf ae       	rcall	8000a4c8 <__multiply>
8000a6d6:	8b 0c       	st.w	r5[0x0],r12
8000a6d8:	99 03       	st.w	r12[0x0],r3
8000a6da:	ce 7b       	rjmp	8000a6a8 <__pow5mult+0x54>
8000a6dc:	08 9c       	mov	r12,r4
8000a6de:	d8 32       	popm	r0-r7,pc

8000a6e0 <_realloc_r>:
8000a6e0:	d4 31       	pushm	r0-r7,lr
8000a6e2:	20 1d       	sub	sp,4
8000a6e4:	16 94       	mov	r4,r11
8000a6e6:	18 92       	mov	r2,r12
8000a6e8:	14 9b       	mov	r11,r10
8000a6ea:	58 04       	cp.w	r4,0
8000a6ec:	c0 51       	brne	8000a6f6 <_realloc_r+0x16>
8000a6ee:	fe b0 fa c3 	rcall	80009c74 <_malloc_r>
8000a6f2:	18 95       	mov	r5,r12
8000a6f4:	c5 39       	rjmp	8000a99a <_realloc_r+0x2ba>
8000a6f6:	50 0a       	stdsp	sp[0x0],r10
8000a6f8:	fe b0 fd 07 	rcall	8000a106 <__malloc_lock>
8000a6fc:	40 0b       	lddsp	r11,sp[0x0]
8000a6fe:	f6 c8 ff f5 	sub	r8,r11,-11
8000a702:	e8 c1 00 08 	sub	r1,r4,8
8000a706:	10 96       	mov	r6,r8
8000a708:	62 1c       	ld.w	r12,r1[0x4]
8000a70a:	e0 16 ff f8 	andl	r6,0xfff8
8000a70e:	59 68       	cp.w	r8,22
8000a710:	f9 b6 08 10 	movls	r6,16
8000a714:	16 36       	cp.w	r6,r11
8000a716:	5f 38       	srlo	r8
8000a718:	f1 e6 13 f8 	or	r8,r8,r6>>0x1f
8000a71c:	c0 50       	breq	8000a726 <_realloc_r+0x46>
8000a71e:	30 c8       	mov	r8,12
8000a720:	30 05       	mov	r5,0
8000a722:	85 38       	st.w	r2[0xc],r8
8000a724:	c3 b9       	rjmp	8000a99a <_realloc_r+0x2ba>
8000a726:	18 90       	mov	r0,r12
8000a728:	e0 10 ff fc 	andl	r0,0xfffc
8000a72c:	0c 30       	cp.w	r0,r6
8000a72e:	e0 84 01 0b 	brge	8000a944 <_realloc_r+0x264>
8000a732:	e0 68 01 18 	mov	r8,280
8000a736:	e2 00 00 09 	add	r9,r1,r0
8000a73a:	70 25       	ld.w	r5,r8[0x8]
8000a73c:	0a 39       	cp.w	r9,r5
8000a73e:	c0 90       	breq	8000a750 <_realloc_r+0x70>
8000a740:	72 1a       	ld.w	r10,r9[0x4]
8000a742:	a1 ca       	cbr	r10,0x0
8000a744:	f2 0a 00 0a 	add	r10,r9,r10
8000a748:	74 1a       	ld.w	r10,r10[0x4]
8000a74a:	ed ba 00 00 	bld	r10,0x0
8000a74e:	c2 20       	breq	8000a792 <_realloc_r+0xb2>
8000a750:	72 1a       	ld.w	r10,r9[0x4]
8000a752:	e0 1a ff fc 	andl	r10,0xfffc
8000a756:	f4 00 00 03 	add	r3,r10,r0
8000a75a:	0a 39       	cp.w	r9,r5
8000a75c:	c1 31       	brne	8000a782 <_realloc_r+0xa2>
8000a75e:	ec c7 ff f0 	sub	r7,r6,-16
8000a762:	0e 33       	cp.w	r3,r7
8000a764:	c1 95       	brlt	8000a796 <_realloc_r+0xb6>
8000a766:	e2 06 00 09 	add	r9,r1,r6
8000a76a:	0c 13       	sub	r3,r6
8000a76c:	a1 a3       	sbr	r3,0x0
8000a76e:	93 13       	st.w	r9[0x4],r3
8000a770:	91 29       	st.w	r8[0x8],r9
8000a772:	04 9c       	mov	r12,r2
8000a774:	62 18       	ld.w	r8,r1[0x4]
8000a776:	08 95       	mov	r5,r4
8000a778:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000a77c:	10 46       	or	r6,r8
8000a77e:	83 16       	st.w	r1[0x4],r6
8000a780:	c0 b9       	rjmp	8000a996 <_realloc_r+0x2b6>
8000a782:	0c 33       	cp.w	r3,r6
8000a784:	c0 95       	brlt	8000a796 <_realloc_r+0xb6>
8000a786:	72 28       	ld.w	r8,r9[0x8]
8000a788:	02 97       	mov	r7,r1
8000a78a:	72 39       	ld.w	r9,r9[0xc]
8000a78c:	93 28       	st.w	r9[0x8],r8
8000a78e:	91 39       	st.w	r8[0xc],r9
8000a790:	cd c8       	rjmp	8000a948 <_realloc_r+0x268>
8000a792:	30 0a       	mov	r10,0
8000a794:	14 99       	mov	r9,r10
8000a796:	ed bc 00 00 	bld	r12,0x0
8000a79a:	e0 80 00 95 	breq	8000a8c4 <_realloc_r+0x1e4>
8000a79e:	62 07       	ld.w	r7,r1[0x0]
8000a7a0:	e2 07 01 07 	sub	r7,r1,r7
8000a7a4:	6e 1c       	ld.w	r12,r7[0x4]
8000a7a6:	e0 1c ff fc 	andl	r12,0xfffc
8000a7aa:	58 09       	cp.w	r9,0
8000a7ac:	c5 60       	breq	8000a858 <_realloc_r+0x178>
8000a7ae:	f8 00 00 03 	add	r3,r12,r0
8000a7b2:	0a 39       	cp.w	r9,r5
8000a7b4:	c4 81       	brne	8000a844 <_realloc_r+0x164>
8000a7b6:	14 03       	add	r3,r10
8000a7b8:	ec c9 ff f0 	sub	r9,r6,-16
8000a7bc:	12 33       	cp.w	r3,r9
8000a7be:	c4 d5       	brlt	8000a858 <_realloc_r+0x178>
8000a7c0:	6e 3a       	ld.w	r10,r7[0xc]
8000a7c2:	6e 29       	ld.w	r9,r7[0x8]
8000a7c4:	95 29       	st.w	r10[0x8],r9
8000a7c6:	93 3a       	st.w	r9[0xc],r10
8000a7c8:	ee c5 ff f8 	sub	r5,r7,-8
8000a7cc:	e0 ca 00 04 	sub	r10,r0,4
8000a7d0:	e0 4a 00 24 	cp.w	r10,36
8000a7d4:	e0 8b 00 25 	brhi	8000a81e <_realloc_r+0x13e>
8000a7d8:	0a 99       	mov	r9,r5
8000a7da:	59 3a       	cp.w	r10,19
8000a7dc:	e0 88 00 1a 	brls	8000a810 <_realloc_r+0x130>
8000a7e0:	09 09       	ld.w	r9,r4++
8000a7e2:	8b 09       	st.w	r5[0x0],r9
8000a7e4:	09 09       	ld.w	r9,r4++
8000a7e6:	8f 39       	st.w	r7[0xc],r9
8000a7e8:	ee c9 ff f0 	sub	r9,r7,-16
8000a7ec:	59 ba       	cp.w	r10,27
8000a7ee:	e0 88 00 11 	brls	8000a810 <_realloc_r+0x130>
8000a7f2:	09 0b       	ld.w	r11,r4++
8000a7f4:	93 0b       	st.w	r9[0x0],r11
8000a7f6:	09 09       	ld.w	r9,r4++
8000a7f8:	8f 59       	st.w	r7[0x14],r9
8000a7fa:	ee c9 ff e8 	sub	r9,r7,-24
8000a7fe:	e0 4a 00 24 	cp.w	r10,36
8000a802:	c0 71       	brne	8000a810 <_realloc_r+0x130>
8000a804:	09 0a       	ld.w	r10,r4++
8000a806:	93 0a       	st.w	r9[0x0],r10
8000a808:	ee c9 ff e0 	sub	r9,r7,-32
8000a80c:	09 0a       	ld.w	r10,r4++
8000a80e:	8f 7a       	st.w	r7[0x1c],r10
8000a810:	09 0a       	ld.w	r10,r4++
8000a812:	12 aa       	st.w	r9++,r10
8000a814:	68 0a       	ld.w	r10,r4[0x0]
8000a816:	93 0a       	st.w	r9[0x0],r10
8000a818:	68 1a       	ld.w	r10,r4[0x4]
8000a81a:	93 1a       	st.w	r9[0x4],r10
8000a81c:	c0 78       	rjmp	8000a82a <_realloc_r+0x14a>
8000a81e:	50 08       	stdsp	sp[0x0],r8
8000a820:	08 9b       	mov	r11,r4
8000a822:	0a 9c       	mov	r12,r5
8000a824:	fe b0 fc 4b 	rcall	8000a0ba <memmove>
8000a828:	40 08       	lddsp	r8,sp[0x0]
8000a82a:	ee 06 00 09 	add	r9,r7,r6
8000a82e:	0c 13       	sub	r3,r6
8000a830:	a1 a3       	sbr	r3,0x0
8000a832:	93 13       	st.w	r9[0x4],r3
8000a834:	91 29       	st.w	r8[0x8],r9
8000a836:	04 9c       	mov	r12,r2
8000a838:	6e 18       	ld.w	r8,r7[0x4]
8000a83a:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000a83e:	10 46       	or	r6,r8
8000a840:	8f 16       	st.w	r7[0x4],r6
8000a842:	ca a8       	rjmp	8000a996 <_realloc_r+0x2b6>
8000a844:	14 03       	add	r3,r10
8000a846:	0c 33       	cp.w	r3,r6
8000a848:	c0 85       	brlt	8000a858 <_realloc_r+0x178>
8000a84a:	72 28       	ld.w	r8,r9[0x8]
8000a84c:	72 39       	ld.w	r9,r9[0xc]
8000a84e:	93 28       	st.w	r9[0x8],r8
8000a850:	91 39       	st.w	r8[0xc],r9
8000a852:	6e 28       	ld.w	r8,r7[0x8]
8000a854:	6e 39       	ld.w	r9,r7[0xc]
8000a856:	c0 78       	rjmp	8000a864 <_realloc_r+0x184>
8000a858:	f8 00 00 03 	add	r3,r12,r0
8000a85c:	0c 33       	cp.w	r3,r6
8000a85e:	c3 35       	brlt	8000a8c4 <_realloc_r+0x1e4>
8000a860:	6e 39       	ld.w	r9,r7[0xc]
8000a862:	6e 28       	ld.w	r8,r7[0x8]
8000a864:	93 28       	st.w	r9[0x8],r8
8000a866:	91 39       	st.w	r8[0xc],r9
8000a868:	e0 ca 00 04 	sub	r10,r0,4
8000a86c:	ee cc ff f8 	sub	r12,r7,-8
8000a870:	e0 4a 00 24 	cp.w	r10,36
8000a874:	e0 8b 00 24 	brhi	8000a8bc <_realloc_r+0x1dc>
8000a878:	59 3a       	cp.w	r10,19
8000a87a:	e0 88 00 1a 	brls	8000a8ae <_realloc_r+0x1ce>
8000a87e:	09 08       	ld.w	r8,r4++
8000a880:	99 08       	st.w	r12[0x0],r8
8000a882:	09 08       	ld.w	r8,r4++
8000a884:	8f 38       	st.w	r7[0xc],r8
8000a886:	ee cc ff f0 	sub	r12,r7,-16
8000a88a:	59 ba       	cp.w	r10,27
8000a88c:	e0 88 00 11 	brls	8000a8ae <_realloc_r+0x1ce>
8000a890:	09 08       	ld.w	r8,r4++
8000a892:	99 08       	st.w	r12[0x0],r8
8000a894:	09 08       	ld.w	r8,r4++
8000a896:	8f 58       	st.w	r7[0x14],r8
8000a898:	ee cc ff e8 	sub	r12,r7,-24
8000a89c:	e0 4a 00 24 	cp.w	r10,36
8000a8a0:	c0 71       	brne	8000a8ae <_realloc_r+0x1ce>
8000a8a2:	09 08       	ld.w	r8,r4++
8000a8a4:	99 08       	st.w	r12[0x0],r8
8000a8a6:	ee cc ff e0 	sub	r12,r7,-32
8000a8aa:	09 08       	ld.w	r8,r4++
8000a8ac:	8f 78       	st.w	r7[0x1c],r8
8000a8ae:	09 08       	ld.w	r8,r4++
8000a8b0:	18 a8       	st.w	r12++,r8
8000a8b2:	68 08       	ld.w	r8,r4[0x0]
8000a8b4:	99 08       	st.w	r12[0x0],r8
8000a8b6:	68 18       	ld.w	r8,r4[0x4]
8000a8b8:	99 18       	st.w	r12[0x4],r8
8000a8ba:	c4 78       	rjmp	8000a948 <_realloc_r+0x268>
8000a8bc:	08 9b       	mov	r11,r4
8000a8be:	fe b0 fb fe 	rcall	8000a0ba <memmove>
8000a8c2:	c4 38       	rjmp	8000a948 <_realloc_r+0x268>
8000a8c4:	04 9c       	mov	r12,r2
8000a8c6:	fe b0 f9 d7 	rcall	80009c74 <_malloc_r>
8000a8ca:	18 95       	mov	r5,r12
8000a8cc:	c3 a0       	breq	8000a940 <_realloc_r+0x260>
8000a8ce:	62 18       	ld.w	r8,r1[0x4]
8000a8d0:	f8 c9 00 08 	sub	r9,r12,8
8000a8d4:	a1 c8       	cbr	r8,0x0
8000a8d6:	e2 08 00 08 	add	r8,r1,r8
8000a8da:	10 39       	cp.w	r9,r8
8000a8dc:	c0 71       	brne	8000a8ea <_realloc_r+0x20a>
8000a8de:	72 13       	ld.w	r3,r9[0x4]
8000a8e0:	02 97       	mov	r7,r1
8000a8e2:	e0 13 ff fc 	andl	r3,0xfffc
8000a8e6:	00 03       	add	r3,r0
8000a8e8:	c3 08       	rjmp	8000a948 <_realloc_r+0x268>
8000a8ea:	e0 ca 00 04 	sub	r10,r0,4
8000a8ee:	e0 4a 00 24 	cp.w	r10,36
8000a8f2:	e0 8b 00 20 	brhi	8000a932 <_realloc_r+0x252>
8000a8f6:	08 99       	mov	r9,r4
8000a8f8:	18 98       	mov	r8,r12
8000a8fa:	59 3a       	cp.w	r10,19
8000a8fc:	e0 88 00 14 	brls	8000a924 <_realloc_r+0x244>
8000a900:	13 0b       	ld.w	r11,r9++
8000a902:	10 ab       	st.w	r8++,r11
8000a904:	13 0b       	ld.w	r11,r9++
8000a906:	10 ab       	st.w	r8++,r11
8000a908:	59 ba       	cp.w	r10,27
8000a90a:	e0 88 00 0d 	brls	8000a924 <_realloc_r+0x244>
8000a90e:	13 0b       	ld.w	r11,r9++
8000a910:	10 ab       	st.w	r8++,r11
8000a912:	13 0b       	ld.w	r11,r9++
8000a914:	10 ab       	st.w	r8++,r11
8000a916:	e0 4a 00 24 	cp.w	r10,36
8000a91a:	c0 51       	brne	8000a924 <_realloc_r+0x244>
8000a91c:	13 0a       	ld.w	r10,r9++
8000a91e:	10 aa       	st.w	r8++,r10
8000a920:	13 0a       	ld.w	r10,r9++
8000a922:	10 aa       	st.w	r8++,r10
8000a924:	13 0a       	ld.w	r10,r9++
8000a926:	10 aa       	st.w	r8++,r10
8000a928:	72 0a       	ld.w	r10,r9[0x0]
8000a92a:	91 0a       	st.w	r8[0x0],r10
8000a92c:	72 19       	ld.w	r9,r9[0x4]
8000a92e:	91 19       	st.w	r8[0x4],r9
8000a930:	c0 48       	rjmp	8000a938 <_realloc_r+0x258>
8000a932:	08 9b       	mov	r11,r4
8000a934:	fe b0 fb c3 	rcall	8000a0ba <memmove>
8000a938:	08 9b       	mov	r11,r4
8000a93a:	04 9c       	mov	r12,r2
8000a93c:	fe b0 f6 f6 	rcall	80009728 <_free_r>
8000a940:	04 9c       	mov	r12,r2
8000a942:	c2 a8       	rjmp	8000a996 <_realloc_r+0x2b6>
8000a944:	00 93       	mov	r3,r0
8000a946:	02 97       	mov	r7,r1
8000a948:	e6 06 01 09 	sub	r9,r3,r6
8000a94c:	6e 18       	ld.w	r8,r7[0x4]
8000a94e:	58 f9       	cp.w	r9,15
8000a950:	e0 88 00 16 	brls	8000a97c <_realloc_r+0x29c>
8000a954:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000a958:	ed e8 10 08 	or	r8,r6,r8
8000a95c:	8f 18       	st.w	r7[0x4],r8
8000a95e:	12 98       	mov	r8,r9
8000a960:	a1 a8       	sbr	r8,0x0
8000a962:	ee 06 00 0b 	add	r11,r7,r6
8000a966:	f6 09 00 09 	add	r9,r11,r9
8000a96a:	97 18       	st.w	r11[0x4],r8
8000a96c:	72 18       	ld.w	r8,r9[0x4]
8000a96e:	a1 a8       	sbr	r8,0x0
8000a970:	2f 8b       	sub	r11,-8
8000a972:	93 18       	st.w	r9[0x4],r8
8000a974:	04 9c       	mov	r12,r2
8000a976:	fe b0 f6 d9 	rcall	80009728 <_free_r>
8000a97a:	c0 b8       	rjmp	8000a990 <_realloc_r+0x2b0>
8000a97c:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000a980:	e7 e8 10 08 	or	r8,r3,r8
8000a984:	8f 18       	st.w	r7[0x4],r8
8000a986:	ee 03 00 03 	add	r3,r7,r3
8000a98a:	66 18       	ld.w	r8,r3[0x4]
8000a98c:	a1 a8       	sbr	r8,0x0
8000a98e:	87 18       	st.w	r3[0x4],r8
8000a990:	04 9c       	mov	r12,r2
8000a992:	ee c5 ff f8 	sub	r5,r7,-8
8000a996:	fe b0 fb b9 	rcall	8000a108 <__malloc_unlock>
8000a99a:	0a 9c       	mov	r12,r5
8000a99c:	2f fd       	sub	sp,-4
8000a99e:	d8 32       	popm	r0-r7,pc

8000a9a0 <__isinfd>:
8000a9a0:	14 98       	mov	r8,r10
8000a9a2:	fc 19 7f f0 	movh	r9,0x7ff0
8000a9a6:	f5 db c0 1f 	bfextu	r10,r11,0x0,0x1f
8000a9aa:	f0 0b 11 00 	rsub	r11,r8,0
8000a9ae:	f7 e8 10 08 	or	r8,r11,r8
8000a9b2:	f5 e8 13 f8 	or	r8,r10,r8>>0x1f
8000a9b6:	f2 08 01 08 	sub	r8,r9,r8
8000a9ba:	f0 0c 11 00 	rsub	r12,r8,0
8000a9be:	f9 e8 10 08 	or	r8,r12,r8
8000a9c2:	f0 0c 14 1f 	asr	r12,r8,0x1f
8000a9c6:	2f fc       	sub	r12,-1
8000a9c8:	5e fc       	retal	r12

8000a9ca <__isnand>:
8000a9ca:	14 98       	mov	r8,r10
8000a9cc:	f5 db c0 1f 	bfextu	r10,r11,0x0,0x1f
8000a9d0:	f0 0c 11 00 	rsub	r12,r8,0
8000a9d4:	10 4c       	or	r12,r8
8000a9d6:	fc 18 7f f0 	movh	r8,0x7ff0
8000a9da:	f5 ec 13 fc 	or	r12,r10,r12>>0x1f
8000a9de:	f0 0c 01 0c 	sub	r12,r8,r12
8000a9e2:	bf 9c       	lsr	r12,0x1f
8000a9e4:	5e fc       	retal	r12
8000a9e6:	d7 03       	nop

8000a9e8 <_sbrk_r>:
8000a9e8:	d4 21       	pushm	r4-r7,lr
8000a9ea:	30 08       	mov	r8,0
8000a9ec:	18 97       	mov	r7,r12
8000a9ee:	e0 66 06 a4 	mov	r6,1700
8000a9f2:	16 9c       	mov	r12,r11
8000a9f4:	8d 08       	st.w	r6[0x0],r8
8000a9f6:	ca fc       	rcall	8000ab54 <_sbrk>
8000a9f8:	5b fc       	cp.w	r12,-1
8000a9fa:	c0 51       	brne	8000aa04 <_sbrk_r+0x1c>
8000a9fc:	6c 08       	ld.w	r8,r6[0x0]
8000a9fe:	58 08       	cp.w	r8,0
8000aa00:	ef f8 1a 03 	st.wne	r7[0xc],r8
8000aa04:	d8 22       	popm	r4-r7,pc
8000aa06:	d7 03       	nop

8000aa08 <__sclose>:
8000aa08:	d4 01       	pushm	lr
8000aa0a:	96 7b       	ld.sh	r11,r11[0xe]
8000aa0c:	cf ec       	rcall	8000ac08 <_close_r>
8000aa0e:	d8 02       	popm	pc

8000aa10 <__sseek>:
8000aa10:	d4 21       	pushm	r4-r7,lr
8000aa12:	16 97       	mov	r7,r11
8000aa14:	96 7b       	ld.sh	r11,r11[0xe]
8000aa16:	c8 5d       	rcall	8000ad20 <_lseek_r>
8000aa18:	8e 68       	ld.sh	r8,r7[0xc]
8000aa1a:	10 99       	mov	r9,r8
8000aa1c:	ad c8       	cbr	r8,0xc
8000aa1e:	ad a9       	sbr	r9,0xc
8000aa20:	5b fc       	cp.w	r12,-1
8000aa22:	ef f8 0c 06 	st.heq	r7[0xc],r8
8000aa26:	ef f9 1c 06 	st.hne	r7[0xc],r9
8000aa2a:	ef fc 1a 15 	st.wne	r7[0x54],r12
8000aa2e:	d8 22       	popm	r4-r7,pc

8000aa30 <__swrite>:
8000aa30:	d4 21       	pushm	r4-r7,lr
8000aa32:	96 68       	ld.sh	r8,r11[0xc]
8000aa34:	16 97       	mov	r7,r11
8000aa36:	14 95       	mov	r5,r10
8000aa38:	12 94       	mov	r4,r9
8000aa3a:	e2 18 01 00 	andl	r8,0x100,COH
8000aa3e:	18 96       	mov	r6,r12
8000aa40:	c0 50       	breq	8000aa4a <__swrite+0x1a>
8000aa42:	30 29       	mov	r9,2
8000aa44:	30 0a       	mov	r10,0
8000aa46:	96 7b       	ld.sh	r11,r11[0xe]
8000aa48:	c6 cd       	rcall	8000ad20 <_lseek_r>
8000aa4a:	8e 68       	ld.sh	r8,r7[0xc]
8000aa4c:	ad c8       	cbr	r8,0xc
8000aa4e:	08 99       	mov	r9,r4
8000aa50:	0a 9a       	mov	r10,r5
8000aa52:	8e 7b       	ld.sh	r11,r7[0xe]
8000aa54:	0c 9c       	mov	r12,r6
8000aa56:	ae 68       	st.h	r7[0xc],r8
8000aa58:	c9 ac       	rcall	8000ab8c <_write_r>
8000aa5a:	d8 22       	popm	r4-r7,pc

8000aa5c <__sread>:
8000aa5c:	d4 21       	pushm	r4-r7,lr
8000aa5e:	16 97       	mov	r7,r11
8000aa60:	96 7b       	ld.sh	r11,r11[0xe]
8000aa62:	c7 1d       	rcall	8000ad44 <_read_r>
8000aa64:	c0 65       	brlt	8000aa70 <__sread+0x14>
8000aa66:	6f 58       	ld.w	r8,r7[0x54]
8000aa68:	18 08       	add	r8,r12
8000aa6a:	ef 48 00 54 	st.w	r7[84],r8
8000aa6e:	d8 22       	popm	r4-r7,pc
8000aa70:	8e 68       	ld.sh	r8,r7[0xc]
8000aa72:	ad c8       	cbr	r8,0xc
8000aa74:	ae 68       	st.h	r7[0xc],r8
8000aa76:	d8 22       	popm	r4-r7,pc

8000aa78 <strlen>:
8000aa78:	30 09       	mov	r9,0
8000aa7a:	18 98       	mov	r8,r12
8000aa7c:	c0 28       	rjmp	8000aa80 <strlen+0x8>
8000aa7e:	2f f8       	sub	r8,-1
8000aa80:	11 8a       	ld.ub	r10,r8[0x0]
8000aa82:	f2 0a 18 00 	cp.b	r10,r9
8000aa86:	cf c1       	brne	8000aa7e <strlen+0x6>
8000aa88:	f0 0c 01 0c 	sub	r12,r8,r12
8000aa8c:	5e fc       	retal	r12
8000aa8e:	d7 03       	nop

8000aa90 <_close>:
8000aa90:	30 28       	mov	r8,2
8000aa92:	d6 73       	breakpoint
8000aa94:	3f fc       	mov	r12,-1
8000aa96:	35 8b       	mov	r11,88
8000aa98:	58 0c       	cp.w	r12,0
8000aa9a:	5e 4c       	retge	r12
8000aa9c:	e0 6a 06 a4 	mov	r10,1700
8000aaa0:	95 0b       	st.w	r10[0x0],r11
8000aaa2:	5e fc       	retal	r12

8000aaa4 <_lseek>:
8000aaa4:	30 58       	mov	r8,5
8000aaa6:	d6 73       	breakpoint
8000aaa8:	3f fc       	mov	r12,-1
8000aaaa:	35 8b       	mov	r11,88
8000aaac:	58 0c       	cp.w	r12,0
8000aaae:	5e 4c       	retge	r12
8000aab0:	e0 6a 06 a4 	mov	r10,1700
8000aab4:	95 0b       	st.w	r10[0x0],r11
8000aab6:	5e fc       	retal	r12

8000aab8 <_read>:
8000aab8:	30 38       	mov	r8,3
8000aaba:	d6 73       	breakpoint
8000aabc:	3f fc       	mov	r12,-1
8000aabe:	35 8b       	mov	r11,88
8000aac0:	58 0c       	cp.w	r12,0
8000aac2:	5e 4c       	retge	r12
8000aac4:	e0 6a 06 a4 	mov	r10,1700
8000aac8:	95 0b       	st.w	r10[0x0],r11
8000aaca:	5e fc       	retal	r12

8000aacc <_write>:
8000aacc:	30 48       	mov	r8,4
8000aace:	d6 73       	breakpoint
8000aad0:	3f fc       	mov	r12,-1
8000aad2:	35 8b       	mov	r11,88
8000aad4:	58 0c       	cp.w	r12,0
8000aad6:	5e 4c       	retge	r12
8000aad8:	e0 6a 06 a4 	mov	r10,1700
8000aadc:	95 0b       	st.w	r10[0x0],r11
8000aade:	5e fc       	retal	r12

8000aae0 <isatty>:
8000aae0:	30 b8       	mov	r8,11
8000aae2:	d6 73       	breakpoint
8000aae4:	3f fc       	mov	r12,-1
8000aae6:	35 8b       	mov	r11,88
8000aae8:	58 0c       	cp.w	r12,0
8000aaea:	5e 4c       	retge	r12
8000aaec:	e0 6a 06 a4 	mov	r10,1700
8000aaf0:	95 0b       	st.w	r10[0x0],r11
8000aaf2:	5e fc       	retal	r12

8000aaf4 <_fstat_host>:
8000aaf4:	30 98       	mov	r8,9
8000aaf6:	d6 73       	breakpoint
8000aaf8:	3f fc       	mov	r12,-1
8000aafa:	35 8b       	mov	r11,88
8000aafc:	58 0c       	cp.w	r12,0
8000aafe:	5e 4c       	retge	r12
8000ab00:	e0 6a 06 a4 	mov	r10,1700
8000ab04:	95 0b       	st.w	r10[0x0],r11
8000ab06:	5e fc       	retal	r12

8000ab08 <_fstat>:
8000ab08:	d4 21       	pushm	r4-r7,lr
8000ab0a:	21 0d       	sub	sp,64
8000ab0c:	16 97       	mov	r7,r11
8000ab0e:	1a 9b       	mov	r11,sp
8000ab10:	cf 2f       	rcall	8000aaf4 <_fstat_host>
8000ab12:	c0 34       	brge	8000ab18 <_fstat+0x10>
8000ab14:	3f fc       	mov	r12,-1
8000ab16:	c1 c8       	rjmp	8000ab4e <_fstat+0x46>
8000ab18:	40 08       	lddsp	r8,sp[0x0]
8000ab1a:	ae 08       	st.h	r7[0x0],r8
8000ab1c:	40 18       	lddsp	r8,sp[0x4]
8000ab1e:	ae 18       	st.h	r7[0x2],r8
8000ab20:	40 28       	lddsp	r8,sp[0x8]
8000ab22:	8f 18       	st.w	r7[0x4],r8
8000ab24:	40 38       	lddsp	r8,sp[0xc]
8000ab26:	ae 48       	st.h	r7[0x8],r8
8000ab28:	40 48       	lddsp	r8,sp[0x10]
8000ab2a:	ae 58       	st.h	r7[0xa],r8
8000ab2c:	40 58       	lddsp	r8,sp[0x14]
8000ab2e:	ae 68       	st.h	r7[0xc],r8
8000ab30:	40 68       	lddsp	r8,sp[0x18]
8000ab32:	ae 78       	st.h	r7[0xe],r8
8000ab34:	40 88       	lddsp	r8,sp[0x20]
8000ab36:	8f 48       	st.w	r7[0x10],r8
8000ab38:	40 a8       	lddsp	r8,sp[0x28]
8000ab3a:	8f b8       	st.w	r7[0x2c],r8
8000ab3c:	40 c8       	lddsp	r8,sp[0x30]
8000ab3e:	8f c8       	st.w	r7[0x30],r8
8000ab40:	40 d8       	lddsp	r8,sp[0x34]
8000ab42:	8f 58       	st.w	r7[0x14],r8
8000ab44:	40 e8       	lddsp	r8,sp[0x38]
8000ab46:	30 0c       	mov	r12,0
8000ab48:	8f 78       	st.w	r7[0x1c],r8
8000ab4a:	40 f8       	lddsp	r8,sp[0x3c]
8000ab4c:	8f 98       	st.w	r7[0x24],r8
8000ab4e:	2f 0d       	sub	sp,-64
8000ab50:	d8 22       	popm	r4-r7,pc
8000ab52:	d7 03       	nop

8000ab54 <_sbrk>:
8000ab54:	d4 01       	pushm	lr
8000ab56:	e0 68 06 70 	mov	r8,1648
8000ab5a:	70 09       	ld.w	r9,r8[0x0]
8000ab5c:	58 09       	cp.w	r9,0
8000ab5e:	c0 41       	brne	8000ab66 <_sbrk+0x12>
8000ab60:	e0 69 06 a8 	mov	r9,1704
8000ab64:	91 09       	st.w	r8[0x0],r9
8000ab66:	e0 69 06 70 	mov	r9,1648
8000ab6a:	e0 6a f0 00 	mov	r10,61440
8000ab6e:	72 08       	ld.w	r8,r9[0x0]
8000ab70:	f0 0c 00 0c 	add	r12,r8,r12
8000ab74:	14 3c       	cp.w	r12,r10
8000ab76:	e0 8b 00 04 	brhi	8000ab7e <_sbrk+0x2a>
8000ab7a:	93 0c       	st.w	r9[0x0],r12
8000ab7c:	c0 58       	rjmp	8000ab86 <_sbrk+0x32>
8000ab7e:	c5 5c       	rcall	8000ac28 <__errno>
8000ab80:	30 c8       	mov	r8,12
8000ab82:	99 08       	st.w	r12[0x0],r8
8000ab84:	3f f8       	mov	r8,-1
8000ab86:	10 9c       	mov	r12,r8
8000ab88:	d8 02       	popm	pc
8000ab8a:	d7 03       	nop

8000ab8c <_write_r>:
8000ab8c:	d4 21       	pushm	r4-r7,lr
8000ab8e:	16 98       	mov	r8,r11
8000ab90:	18 97       	mov	r7,r12
8000ab92:	10 9c       	mov	r12,r8
8000ab94:	30 08       	mov	r8,0
8000ab96:	14 9b       	mov	r11,r10
8000ab98:	e0 66 06 a4 	mov	r6,1700
8000ab9c:	12 9a       	mov	r10,r9
8000ab9e:	8d 08       	st.w	r6[0x0],r8
8000aba0:	c9 6f       	rcall	8000aacc <_write>
8000aba2:	5b fc       	cp.w	r12,-1
8000aba4:	c0 51       	brne	8000abae <_write_r+0x22>
8000aba6:	6c 08       	ld.w	r8,r6[0x0]
8000aba8:	58 08       	cp.w	r8,0
8000abaa:	ef f8 1a 03 	st.wne	r7[0xc],r8
8000abae:	d8 22       	popm	r4-r7,pc

8000abb0 <_calloc_r>:
8000abb0:	d4 21       	pushm	r4-r7,lr
8000abb2:	f4 0b 02 4b 	mul	r11,r10,r11
8000abb6:	fe b0 f8 5f 	rcall	80009c74 <_malloc_r>
8000abba:	18 97       	mov	r7,r12
8000abbc:	c2 30       	breq	8000ac02 <_calloc_r+0x52>
8000abbe:	f8 fa ff fc 	ld.w	r10,r12[-4]
8000abc2:	e0 1a ff fc 	andl	r10,0xfffc
8000abc6:	20 4a       	sub	r10,4
8000abc8:	e0 4a 00 24 	cp.w	r10,36
8000abcc:	e0 8b 00 18 	brhi	8000abfc <_calloc_r+0x4c>
8000abd0:	18 98       	mov	r8,r12
8000abd2:	59 3a       	cp.w	r10,19
8000abd4:	e0 88 00 0f 	brls	8000abf2 <_calloc_r+0x42>
8000abd8:	30 09       	mov	r9,0
8000abda:	10 a9       	st.w	r8++,r9
8000abdc:	10 a9       	st.w	r8++,r9
8000abde:	59 ba       	cp.w	r10,27
8000abe0:	e0 88 00 09 	brls	8000abf2 <_calloc_r+0x42>
8000abe4:	10 a9       	st.w	r8++,r9
8000abe6:	10 a9       	st.w	r8++,r9
8000abe8:	e0 4a 00 24 	cp.w	r10,36
8000abec:	c0 31       	brne	8000abf2 <_calloc_r+0x42>
8000abee:	10 a9       	st.w	r8++,r9
8000abf0:	10 a9       	st.w	r8++,r9
8000abf2:	30 09       	mov	r9,0
8000abf4:	10 a9       	st.w	r8++,r9
8000abf6:	91 19       	st.w	r8[0x4],r9
8000abf8:	91 09       	st.w	r8[0x0],r9
8000abfa:	c0 48       	rjmp	8000ac02 <_calloc_r+0x52>
8000abfc:	30 0b       	mov	r11,0
8000abfe:	fe b0 fa 7d 	rcall	8000a0f8 <memset>
8000ac02:	0e 9c       	mov	r12,r7
8000ac04:	d8 22       	popm	r4-r7,pc
8000ac06:	d7 03       	nop

8000ac08 <_close_r>:
8000ac08:	d4 21       	pushm	r4-r7,lr
8000ac0a:	30 08       	mov	r8,0
8000ac0c:	18 97       	mov	r7,r12
8000ac0e:	e0 66 06 a4 	mov	r6,1700
8000ac12:	16 9c       	mov	r12,r11
8000ac14:	8d 08       	st.w	r6[0x0],r8
8000ac16:	c3 df       	rcall	8000aa90 <_close>
8000ac18:	5b fc       	cp.w	r12,-1
8000ac1a:	c0 51       	brne	8000ac24 <_close_r+0x1c>
8000ac1c:	6c 08       	ld.w	r8,r6[0x0]
8000ac1e:	58 08       	cp.w	r8,0
8000ac20:	ef f8 1a 03 	st.wne	r7[0xc],r8
8000ac24:	d8 22       	popm	r4-r7,pc
8000ac26:	d7 03       	nop

8000ac28 <__errno>:
8000ac28:	e0 68 01 14 	mov	r8,276
8000ac2c:	70 0c       	ld.w	r12,r8[0x0]
8000ac2e:	2f 4c       	sub	r12,-12
8000ac30:	5e fc       	retal	r12
8000ac32:	d7 03       	nop

8000ac34 <_fclose_r>:
8000ac34:	d4 21       	pushm	r4-r7,lr
8000ac36:	18 96       	mov	r6,r12
8000ac38:	16 97       	mov	r7,r11
8000ac3a:	58 0b       	cp.w	r11,0
8000ac3c:	c0 31       	brne	8000ac42 <_fclose_r+0xe>
8000ac3e:	16 95       	mov	r5,r11
8000ac40:	c5 38       	rjmp	8000ace6 <_fclose_r+0xb2>
8000ac42:	fe b0 f4 87 	rcall	80009550 <__sfp_lock_acquire>
8000ac46:	58 06       	cp.w	r6,0
8000ac48:	c0 70       	breq	8000ac56 <_fclose_r+0x22>
8000ac4a:	6c 68       	ld.w	r8,r6[0x18]
8000ac4c:	58 08       	cp.w	r8,0
8000ac4e:	c0 41       	brne	8000ac56 <_fclose_r+0x22>
8000ac50:	0c 9c       	mov	r12,r6
8000ac52:	fe b0 f4 d1 	rcall	800095f4 <__sinit>
8000ac56:	fe c8 ef f6 	sub	r8,pc,-4106
8000ac5a:	10 37       	cp.w	r7,r8
8000ac5c:	c0 31       	brne	8000ac62 <_fclose_r+0x2e>
8000ac5e:	6c 07       	ld.w	r7,r6[0x0]
8000ac60:	c0 c8       	rjmp	8000ac78 <_fclose_r+0x44>
8000ac62:	fe c8 ef e2 	sub	r8,pc,-4126
8000ac66:	10 37       	cp.w	r7,r8
8000ac68:	c0 31       	brne	8000ac6e <_fclose_r+0x3a>
8000ac6a:	6c 17       	ld.w	r7,r6[0x4]
8000ac6c:	c0 68       	rjmp	8000ac78 <_fclose_r+0x44>
8000ac6e:	fe c8 ef ce 	sub	r8,pc,-4146
8000ac72:	10 37       	cp.w	r7,r8
8000ac74:	ed f7 00 02 	ld.weq	r7,r6[0x8]
8000ac78:	8e 69       	ld.sh	r9,r7[0xc]
8000ac7a:	30 08       	mov	r8,0
8000ac7c:	f0 09 19 00 	cp.h	r9,r8
8000ac80:	c0 51       	brne	8000ac8a <_fclose_r+0x56>
8000ac82:	fe b0 f4 68 	rcall	80009552 <__sfp_lock_release>
8000ac86:	30 05       	mov	r5,0
8000ac88:	c2 f8       	rjmp	8000ace6 <_fclose_r+0xb2>
8000ac8a:	0e 9b       	mov	r11,r7
8000ac8c:	0c 9c       	mov	r12,r6
8000ac8e:	fe b0 f3 db 	rcall	80009444 <_fflush_r>
8000ac92:	6e c8       	ld.w	r8,r7[0x30]
8000ac94:	18 95       	mov	r5,r12
8000ac96:	58 08       	cp.w	r8,0
8000ac98:	c0 60       	breq	8000aca4 <_fclose_r+0x70>
8000ac9a:	6e 8b       	ld.w	r11,r7[0x20]
8000ac9c:	0c 9c       	mov	r12,r6
8000ac9e:	5d 18       	icall	r8
8000aca0:	f9 b5 05 ff 	movlt	r5,-1
8000aca4:	8e 68       	ld.sh	r8,r7[0xc]
8000aca6:	ed b8 00 07 	bld	r8,0x7
8000acaa:	c0 51       	brne	8000acb4 <_fclose_r+0x80>
8000acac:	6e 4b       	ld.w	r11,r7[0x10]
8000acae:	0c 9c       	mov	r12,r6
8000acb0:	fe b0 f5 3c 	rcall	80009728 <_free_r>
8000acb4:	6e db       	ld.w	r11,r7[0x34]
8000acb6:	58 0b       	cp.w	r11,0
8000acb8:	c0 a0       	breq	8000accc <_fclose_r+0x98>
8000acba:	ee c8 ff bc 	sub	r8,r7,-68
8000acbe:	10 3b       	cp.w	r11,r8
8000acc0:	c0 40       	breq	8000acc8 <_fclose_r+0x94>
8000acc2:	0c 9c       	mov	r12,r6
8000acc4:	fe b0 f5 32 	rcall	80009728 <_free_r>
8000acc8:	30 08       	mov	r8,0
8000acca:	8f d8       	st.w	r7[0x34],r8
8000accc:	6f 2b       	ld.w	r11,r7[0x48]
8000acce:	58 0b       	cp.w	r11,0
8000acd0:	c0 70       	breq	8000acde <_fclose_r+0xaa>
8000acd2:	0c 9c       	mov	r12,r6
8000acd4:	fe b0 f5 2a 	rcall	80009728 <_free_r>
8000acd8:	30 08       	mov	r8,0
8000acda:	ef 48 00 48 	st.w	r7[72],r8
8000acde:	30 08       	mov	r8,0
8000ace0:	ae 68       	st.h	r7[0xc],r8
8000ace2:	fe b0 f4 38 	rcall	80009552 <__sfp_lock_release>
8000ace6:	0a 9c       	mov	r12,r5
8000ace8:	d8 22       	popm	r4-r7,pc
8000acea:	d7 03       	nop

8000acec <fclose>:
8000acec:	d4 01       	pushm	lr
8000acee:	e0 68 01 14 	mov	r8,276
8000acf2:	18 9b       	mov	r11,r12
8000acf4:	70 0c       	ld.w	r12,r8[0x0]
8000acf6:	c9 ff       	rcall	8000ac34 <_fclose_r>
8000acf8:	d8 02       	popm	pc
8000acfa:	d7 03       	nop

8000acfc <_fstat_r>:
8000acfc:	d4 21       	pushm	r4-r7,lr
8000acfe:	16 98       	mov	r8,r11
8000ad00:	18 97       	mov	r7,r12
8000ad02:	10 9c       	mov	r12,r8
8000ad04:	30 08       	mov	r8,0
8000ad06:	e0 66 06 a4 	mov	r6,1700
8000ad0a:	14 9b       	mov	r11,r10
8000ad0c:	8d 08       	st.w	r6[0x0],r8
8000ad0e:	cf de       	rcall	8000ab08 <_fstat>
8000ad10:	5b fc       	cp.w	r12,-1
8000ad12:	c0 51       	brne	8000ad1c <_fstat_r+0x20>
8000ad14:	6c 08       	ld.w	r8,r6[0x0]
8000ad16:	58 08       	cp.w	r8,0
8000ad18:	ef f8 1a 03 	st.wne	r7[0xc],r8
8000ad1c:	d8 22       	popm	r4-r7,pc
8000ad1e:	d7 03       	nop

8000ad20 <_lseek_r>:
8000ad20:	d4 21       	pushm	r4-r7,lr
8000ad22:	16 98       	mov	r8,r11
8000ad24:	18 97       	mov	r7,r12
8000ad26:	10 9c       	mov	r12,r8
8000ad28:	30 08       	mov	r8,0
8000ad2a:	14 9b       	mov	r11,r10
8000ad2c:	e0 66 06 a4 	mov	r6,1700
8000ad30:	12 9a       	mov	r10,r9
8000ad32:	8d 08       	st.w	r6[0x0],r8
8000ad34:	cb 8e       	rcall	8000aaa4 <_lseek>
8000ad36:	5b fc       	cp.w	r12,-1
8000ad38:	c0 51       	brne	8000ad42 <_lseek_r+0x22>
8000ad3a:	6c 08       	ld.w	r8,r6[0x0]
8000ad3c:	58 08       	cp.w	r8,0
8000ad3e:	ef f8 1a 03 	st.wne	r7[0xc],r8
8000ad42:	d8 22       	popm	r4-r7,pc

8000ad44 <_read_r>:
8000ad44:	d4 21       	pushm	r4-r7,lr
8000ad46:	16 98       	mov	r8,r11
8000ad48:	18 97       	mov	r7,r12
8000ad4a:	10 9c       	mov	r12,r8
8000ad4c:	30 08       	mov	r8,0
8000ad4e:	14 9b       	mov	r11,r10
8000ad50:	e0 66 06 a4 	mov	r6,1700
8000ad54:	12 9a       	mov	r10,r9
8000ad56:	8d 08       	st.w	r6[0x0],r8
8000ad58:	cb 0e       	rcall	8000aab8 <_read>
8000ad5a:	5b fc       	cp.w	r12,-1
8000ad5c:	c0 51       	brne	8000ad66 <_read_r+0x22>
8000ad5e:	6c 08       	ld.w	r8,r6[0x0]
8000ad60:	58 08       	cp.w	r8,0
8000ad62:	ef f8 1a 03 	st.wne	r7[0xc],r8
8000ad66:	d8 22       	popm	r4-r7,pc

8000ad68 <__avr32_f64_mul>:
8000ad68:	f5 eb 10 1c 	or	r12,r10,r11<<0x1
8000ad6c:	e0 80 00 dc 	breq	8000af24 <__avr32_f64_mul_op1_zero>
8000ad70:	d4 21       	pushm	r4-r7,lr
8000ad72:	f7 e9 20 0e 	eor	lr,r11,r9
8000ad76:	ef db c2 8b 	bfextu	r7,r11,0x14,0xb
8000ad7a:	30 15       	mov	r5,1
8000ad7c:	c4 30       	breq	8000ae02 <__avr32_f64_mul_op1_subnormal>
8000ad7e:	ab 6b       	lsl	r11,0xa
8000ad80:	f7 ea 13 6b 	or	r11,r11,r10>>0x16
8000ad84:	ab 6a       	lsl	r10,0xa
8000ad86:	f7 d5 d3 c2 	bfins	r11,r5,0x1e,0x2
8000ad8a:	ed d9 c2 8b 	bfextu	r6,r9,0x14,0xb
8000ad8e:	c5 c0       	breq	8000ae46 <__avr32_f64_mul_op2_subnormal>
8000ad90:	a1 78       	lsl	r8,0x1
8000ad92:	5c f9       	rol	r9
8000ad94:	f3 d5 d2 ab 	bfins	r9,r5,0x15,0xb
8000ad98:	e0 47 07 ff 	cp.w	r7,2047
8000ad9c:	c7 70       	breq	8000ae8a <__avr32_f64_mul_op_nan_or_inf>
8000ad9e:	e0 46 07 ff 	cp.w	r6,2047
8000ada2:	c7 40       	breq	8000ae8a <__avr32_f64_mul_op_nan_or_inf>
8000ada4:	ee 06 00 0c 	add	r12,r7,r6
8000ada8:	e0 2c 03 fe 	sub	r12,1022
8000adac:	f6 08 06 44 	mulu.d	r4,r11,r8
8000adb0:	f4 09 07 44 	macu.d	r4,r10,r9
8000adb4:	f4 08 06 46 	mulu.d	r6,r10,r8
8000adb8:	f6 09 06 4a 	mulu.d	r10,r11,r9
8000adbc:	08 07       	add	r7,r4
8000adbe:	f4 05 00 4a 	adc	r10,r10,r5
8000adc2:	5c 0b       	acr	r11
8000adc4:	ed bb 00 14 	bld	r11,0x14
8000adc8:	c0 50       	breq	8000add2 <__avr32_f64_mul+0x6a>
8000adca:	a1 77       	lsl	r7,0x1
8000adcc:	5c fa       	rol	r10
8000adce:	5c fb       	rol	r11
8000add0:	20 1c       	sub	r12,1
8000add2:	58 0c       	cp.w	r12,0
8000add4:	e0 8a 00 6f 	brle	8000aeb2 <__avr32_f64_mul_res_subnormal>
8000add8:	e0 4c 07 ff 	cp.w	r12,2047
8000addc:	e0 84 00 9c 	brge	8000af14 <__avr32_f64_mul_res_inf>
8000ade0:	f7 dc d2 8b 	bfins	r11,r12,0x14,0xb
8000ade4:	ed ea 11 f6 	or	r6,r6,r10<<0x1f
8000ade8:	ef e6 12 17 	or	r7,r7,r6>>0x1
8000adec:	ee 17 80 00 	eorh	r7,0x8000
8000adf0:	f1 b7 04 20 	satu	r7,0x1
8000adf4:	0e 0a       	add	r10,r7
8000adf6:	5c 0b       	acr	r11
8000adf8:	ed be 00 1f 	bld	lr,0x1f
8000adfc:	ef bb 00 1f 	bst	r11,0x1f
8000ae00:	d8 22       	popm	r4-r7,pc

8000ae02 <__avr32_f64_mul_op1_subnormal>:
8000ae02:	e4 1b 00 0f 	andh	r11,0xf
8000ae06:	f4 0c 12 00 	clz	r12,r10
8000ae0a:	f6 06 12 00 	clz	r6,r11
8000ae0e:	f7 bc 03 e1 	sublo	r12,-31
8000ae12:	f8 06 17 30 	movlo	r6,r12
8000ae16:	f7 b6 02 01 	subhs	r6,1
8000ae1a:	e0 46 00 20 	cp.w	r6,32
8000ae1e:	c0 d4       	brge	8000ae38 <__avr32_f64_mul_op1_subnormal+0x36>
8000ae20:	ec 0c 11 20 	rsub	r12,r6,32
8000ae24:	f6 06 09 4b 	lsl	r11,r11,r6
8000ae28:	f4 0c 0a 4c 	lsr	r12,r10,r12
8000ae2c:	18 4b       	or	r11,r12
8000ae2e:	f4 06 09 4a 	lsl	r10,r10,r6
8000ae32:	20 b6       	sub	r6,11
8000ae34:	0c 17       	sub	r7,r6
8000ae36:	ca ab       	rjmp	8000ad8a <__avr32_f64_mul+0x22>
8000ae38:	f4 06 09 4b 	lsl	r11,r10,r6
8000ae3c:	c6 40       	breq	8000af04 <__avr32_f64_mul_res_zero>
8000ae3e:	30 0a       	mov	r10,0
8000ae40:	20 b6       	sub	r6,11
8000ae42:	0c 17       	sub	r7,r6
8000ae44:	ca 3b       	rjmp	8000ad8a <__avr32_f64_mul+0x22>

8000ae46 <__avr32_f64_mul_op2_subnormal>:
8000ae46:	e4 19 00 0f 	andh	r9,0xf
8000ae4a:	f0 0c 12 00 	clz	r12,r8
8000ae4e:	f2 05 12 00 	clz	r5,r9
8000ae52:	f7 bc 03 ea 	sublo	r12,-22
8000ae56:	f8 05 17 30 	movlo	r5,r12
8000ae5a:	f7 b5 02 0a 	subhs	r5,10
8000ae5e:	e0 45 00 20 	cp.w	r5,32
8000ae62:	c0 d4       	brge	8000ae7c <__avr32_f64_mul_op2_subnormal+0x36>
8000ae64:	ea 0c 11 20 	rsub	r12,r5,32
8000ae68:	f2 05 09 49 	lsl	r9,r9,r5
8000ae6c:	f0 0c 0a 4c 	lsr	r12,r8,r12
8000ae70:	18 49       	or	r9,r12
8000ae72:	f0 05 09 48 	lsl	r8,r8,r5
8000ae76:	20 25       	sub	r5,2
8000ae78:	0a 16       	sub	r6,r5
8000ae7a:	c8 fb       	rjmp	8000ad98 <__avr32_f64_mul+0x30>
8000ae7c:	f0 05 09 49 	lsl	r9,r8,r5
8000ae80:	c4 20       	breq	8000af04 <__avr32_f64_mul_res_zero>
8000ae82:	30 08       	mov	r8,0
8000ae84:	20 25       	sub	r5,2
8000ae86:	0a 16       	sub	r6,r5
8000ae88:	c8 8b       	rjmp	8000ad98 <__avr32_f64_mul+0x30>

8000ae8a <__avr32_f64_mul_op_nan_or_inf>:
8000ae8a:	e4 19 00 0f 	andh	r9,0xf
8000ae8e:	e4 1b 00 0f 	andh	r11,0xf
8000ae92:	14 4b       	or	r11,r10
8000ae94:	10 49       	or	r9,r8
8000ae96:	e0 47 07 ff 	cp.w	r7,2047
8000ae9a:	c0 91       	brne	8000aeac <__avr32_f64_mul_op1_not_naninf>
8000ae9c:	58 0b       	cp.w	r11,0
8000ae9e:	c3 81       	brne	8000af0e <__avr32_f64_mul_res_nan>
8000aea0:	e0 46 07 ff 	cp.w	r6,2047
8000aea4:	c3 81       	brne	8000af14 <__avr32_f64_mul_res_inf>
8000aea6:	58 09       	cp.w	r9,0
8000aea8:	c3 60       	breq	8000af14 <__avr32_f64_mul_res_inf>
8000aeaa:	c3 28       	rjmp	8000af0e <__avr32_f64_mul_res_nan>

8000aeac <__avr32_f64_mul_op1_not_naninf>:
8000aeac:	58 09       	cp.w	r9,0
8000aeae:	c3 30       	breq	8000af14 <__avr32_f64_mul_res_inf>
8000aeb0:	c2 f8       	rjmp	8000af0e <__avr32_f64_mul_res_nan>

8000aeb2 <__avr32_f64_mul_res_subnormal>:
8000aeb2:	5c 3c       	neg	r12
8000aeb4:	2f fc       	sub	r12,-1
8000aeb6:	f1 bc 04 c0 	satu	r12,0x6
8000aeba:	e0 4c 00 20 	cp.w	r12,32
8000aebe:	c1 14       	brge	8000aee0 <__avr32_f64_mul_res_subnormal+0x2e>
8000aec0:	f8 08 11 20 	rsub	r8,r12,32
8000aec4:	0e 46       	or	r6,r7
8000aec6:	ee 0c 0a 47 	lsr	r7,r7,r12
8000aeca:	f4 08 09 49 	lsl	r9,r10,r8
8000aece:	12 47       	or	r7,r9
8000aed0:	f4 0c 0a 4a 	lsr	r10,r10,r12
8000aed4:	f6 08 09 49 	lsl	r9,r11,r8
8000aed8:	12 4a       	or	r10,r9
8000aeda:	f6 0c 0a 4b 	lsr	r11,r11,r12
8000aede:	c8 3b       	rjmp	8000ade4 <__avr32_f64_mul+0x7c>
8000aee0:	f8 08 11 20 	rsub	r8,r12,32
8000aee4:	f9 b9 00 00 	moveq	r9,0
8000aee8:	c0 30       	breq	8000aeee <__avr32_f64_mul_res_subnormal+0x3c>
8000aeea:	f6 08 09 49 	lsl	r9,r11,r8
8000aeee:	0e 46       	or	r6,r7
8000aef0:	ed ea 10 16 	or	r6,r6,r10<<0x1
8000aef4:	f4 0c 0a 4a 	lsr	r10,r10,r12
8000aef8:	f3 ea 10 07 	or	r7,r9,r10
8000aefc:	f6 0c 0a 4a 	lsr	r10,r11,r12
8000af00:	30 0b       	mov	r11,0
8000af02:	c7 1b       	rjmp	8000ade4 <__avr32_f64_mul+0x7c>

8000af04 <__avr32_f64_mul_res_zero>:
8000af04:	1c 9b       	mov	r11,lr
8000af06:	e6 1b 80 00 	andh	r11,0x8000,COH
8000af0a:	30 0a       	mov	r10,0
8000af0c:	d8 22       	popm	r4-r7,pc

8000af0e <__avr32_f64_mul_res_nan>:
8000af0e:	3f fb       	mov	r11,-1
8000af10:	3f fa       	mov	r10,-1
8000af12:	d8 22       	popm	r4-r7,pc

8000af14 <__avr32_f64_mul_res_inf>:
8000af14:	f0 6b 00 00 	mov	r11,-1048576
8000af18:	ed be 00 1f 	bld	lr,0x1f
8000af1c:	ef bb 00 1f 	bst	r11,0x1f
8000af20:	30 0a       	mov	r10,0
8000af22:	d8 22       	popm	r4-r7,pc

8000af24 <__avr32_f64_mul_op1_zero>:
8000af24:	f7 e9 20 0b 	eor	r11,r11,r9
8000af28:	e6 1b 80 00 	andh	r11,0x8000,COH
8000af2c:	f9 d9 c2 8b 	bfextu	r12,r9,0x14,0xb
8000af30:	e0 4c 07 ff 	cp.w	r12,2047
8000af34:	5e 1c       	retne	r12
8000af36:	3f fa       	mov	r10,-1
8000af38:	3f fb       	mov	r11,-1
8000af3a:	5e fc       	retal	r12

8000af3c <__avr32_f64_to_u32>:
8000af3c:	58 0b       	cp.w	r11,0
8000af3e:	5e 6d       	retmi	0

8000af40 <__avr32_f64_to_s32>:
8000af40:	f6 0c 15 01 	lsl	r12,r11,0x1
8000af44:	b5 9c       	lsr	r12,0x15
8000af46:	e0 2c 03 ff 	sub	r12,1023
8000af4a:	5e 3d       	retlo	0
8000af4c:	f8 0c 11 1f 	rsub	r12,r12,31
8000af50:	16 99       	mov	r9,r11
8000af52:	ab 7b       	lsl	r11,0xb
8000af54:	bf bb       	sbr	r11,0x1f
8000af56:	f7 ea 13 5b 	or	r11,r11,r10>>0x15
8000af5a:	f6 0c 0a 4b 	lsr	r11,r11,r12
8000af5e:	a1 79       	lsl	r9,0x1
8000af60:	5e 2b       	reths	r11
8000af62:	5c 3b       	neg	r11
8000af64:	5e fb       	retal	r11

8000af66 <__avr32_u32_to_f64>:
8000af66:	f8 cb 00 00 	sub	r11,r12,0
8000af6a:	30 0c       	mov	r12,0
8000af6c:	c0 38       	rjmp	8000af72 <__avr32_s32_to_f64+0x4>

8000af6e <__avr32_s32_to_f64>:
8000af6e:	18 9b       	mov	r11,r12
8000af70:	5c 4b       	abs	r11
8000af72:	30 0a       	mov	r10,0
8000af74:	5e 0b       	reteq	r11
8000af76:	d4 01       	pushm	lr
8000af78:	e0 69 04 1e 	mov	r9,1054
8000af7c:	f6 08 12 00 	clz	r8,r11
8000af80:	c1 70       	breq	8000afae <__avr32_s32_to_f64+0x40>
8000af82:	c0 c3       	brcs	8000af9a <__avr32_s32_to_f64+0x2c>
8000af84:	f0 0e 11 20 	rsub	lr,r8,32
8000af88:	f6 08 09 4b 	lsl	r11,r11,r8
8000af8c:	f4 0e 0a 4e 	lsr	lr,r10,lr
8000af90:	1c 4b       	or	r11,lr
8000af92:	f4 08 09 4a 	lsl	r10,r10,r8
8000af96:	10 19       	sub	r9,r8
8000af98:	c0 b8       	rjmp	8000afae <__avr32_s32_to_f64+0x40>
8000af9a:	f4 08 12 00 	clz	r8,r10
8000af9e:	f9 b8 03 00 	movlo	r8,0
8000afa2:	f7 b8 02 e0 	subhs	r8,-32
8000afa6:	f4 08 09 4b 	lsl	r11,r10,r8
8000afaa:	30 0a       	mov	r10,0
8000afac:	10 19       	sub	r9,r8
8000afae:	58 09       	cp.w	r9,0
8000afb0:	e0 89 00 30 	brgt	8000b010 <__avr32_s32_to_f64+0xa2>
8000afb4:	5c 39       	neg	r9
8000afb6:	2f f9       	sub	r9,-1
8000afb8:	e0 49 00 36 	cp.w	r9,54
8000afbc:	c0 43       	brcs	8000afc4 <__avr32_s32_to_f64+0x56>
8000afbe:	30 0b       	mov	r11,0
8000afc0:	30 0a       	mov	r10,0
8000afc2:	c2 68       	rjmp	8000b00e <__avr32_s32_to_f64+0xa0>
8000afc4:	2f 69       	sub	r9,-10
8000afc6:	f2 08 11 20 	rsub	r8,r9,32
8000afca:	e0 49 00 20 	cp.w	r9,32
8000afce:	c0 b2       	brcc	8000afe4 <__avr32_s32_to_f64+0x76>
8000afd0:	f4 08 09 4e 	lsl	lr,r10,r8
8000afd4:	f6 08 09 48 	lsl	r8,r11,r8
8000afd8:	f4 09 0a 4a 	lsr	r10,r10,r9
8000afdc:	f6 09 0a 4b 	lsr	r11,r11,r9
8000afe0:	10 4b       	or	r11,r8
8000afe2:	c0 88       	rjmp	8000aff2 <__avr32_s32_to_f64+0x84>
8000afe4:	f6 08 09 4e 	lsl	lr,r11,r8
8000afe8:	14 4e       	or	lr,r10
8000afea:	16 9a       	mov	r10,r11
8000afec:	30 0b       	mov	r11,0
8000afee:	f4 09 0a 4a 	lsr	r10,r10,r9
8000aff2:	ed ba 00 00 	bld	r10,0x0
8000aff6:	c0 92       	brcc	8000b008 <__avr32_s32_to_f64+0x9a>
8000aff8:	1c 7e       	tst	lr,lr
8000affa:	c0 41       	brne	8000b002 <__avr32_s32_to_f64+0x94>
8000affc:	ed ba 00 01 	bld	r10,0x1
8000b000:	c0 42       	brcc	8000b008 <__avr32_s32_to_f64+0x9a>
8000b002:	2f fa       	sub	r10,-1
8000b004:	f7 bb 02 ff 	subhs	r11,-1
8000b008:	5c fc       	rol	r12
8000b00a:	5d 0b       	ror	r11
8000b00c:	5d 0a       	ror	r10
8000b00e:	d8 02       	popm	pc
8000b010:	e0 68 03 ff 	mov	r8,1023
8000b014:	ed ba 00 0b 	bld	r10,0xb
8000b018:	f7 b8 00 ff 	subeq	r8,-1
8000b01c:	10 0a       	add	r10,r8
8000b01e:	5c 0b       	acr	r11
8000b020:	f7 b9 03 fe 	sublo	r9,-2
8000b024:	e0 49 07 ff 	cp.w	r9,2047
8000b028:	c0 55       	brlt	8000b032 <__avr32_s32_to_f64+0xc4>
8000b02a:	30 0a       	mov	r10,0
8000b02c:	fc 1b ff e0 	movh	r11,0xffe0
8000b030:	c0 c8       	rjmp	8000b048 <__floatsidf_return_op1>
8000b032:	ed bb 00 1f 	bld	r11,0x1f
8000b036:	f7 b9 01 01 	subne	r9,1
8000b03a:	ab 9a       	lsr	r10,0xb
8000b03c:	f5 eb 11 5a 	or	r10,r10,r11<<0x15
8000b040:	a1 7b       	lsl	r11,0x1
8000b042:	ab 9b       	lsr	r11,0xb
8000b044:	f7 e9 11 5b 	or	r11,r11,r9<<0x15

8000b048 <__floatsidf_return_op1>:
8000b048:	a1 7c       	lsl	r12,0x1
8000b04a:	5d 0b       	ror	r11
8000b04c:	d8 02       	popm	pc

8000b04e <__avr32_f64_cmp_eq>:
8000b04e:	10 3a       	cp.w	r10,r8
8000b050:	f2 0b 13 00 	cpc	r11,r9
8000b054:	c0 80       	breq	8000b064 <__avr32_f64_cmp_eq+0x16>
8000b056:	a1 7b       	lsl	r11,0x1
8000b058:	a1 79       	lsl	r9,0x1
8000b05a:	14 4b       	or	r11,r10
8000b05c:	12 4b       	or	r11,r9
8000b05e:	10 4b       	or	r11,r8
8000b060:	5e 0f       	reteq	1
8000b062:	5e fd       	retal	0
8000b064:	a1 7b       	lsl	r11,0x1
8000b066:	fc 1c ff e0 	movh	r12,0xffe0
8000b06a:	58 0a       	cp.w	r10,0
8000b06c:	f8 0b 13 00 	cpc	r11,r12
8000b070:	5e 8f       	retls	1
8000b072:	5e fd       	retal	0

8000b074 <__avr32_f64_cmp_ge>:
8000b074:	1a de       	st.w	--sp,lr
8000b076:	1a d7       	st.w	--sp,r7
8000b078:	a1 7b       	lsl	r11,0x1
8000b07a:	5f 3c       	srlo	r12
8000b07c:	a1 79       	lsl	r9,0x1
8000b07e:	5f 37       	srlo	r7
8000b080:	5c fc       	rol	r12
8000b082:	fc 1e ff e0 	movh	lr,0xffe0
8000b086:	58 0a       	cp.w	r10,0
8000b088:	fc 0b 13 00 	cpc	r11,lr
8000b08c:	e0 8b 00 1d 	brhi	8000b0c6 <__avr32_f64_cmp_ge+0x52>
8000b090:	58 08       	cp.w	r8,0
8000b092:	fc 09 13 00 	cpc	r9,lr
8000b096:	e0 8b 00 18 	brhi	8000b0c6 <__avr32_f64_cmp_ge+0x52>
8000b09a:	58 0b       	cp.w	r11,0
8000b09c:	f5 ba 00 00 	subfeq	r10,0
8000b0a0:	c1 50       	breq	8000b0ca <__avr32_f64_cmp_ge+0x56>
8000b0a2:	1b 07       	ld.w	r7,sp++
8000b0a4:	1b 0e       	ld.w	lr,sp++
8000b0a6:	58 3c       	cp.w	r12,3
8000b0a8:	c0 a0       	breq	8000b0bc <__avr32_f64_cmp_ge+0x48>
8000b0aa:	58 1c       	cp.w	r12,1
8000b0ac:	c0 33       	brcs	8000b0b2 <__avr32_f64_cmp_ge+0x3e>
8000b0ae:	5e 0f       	reteq	1
8000b0b0:	5e 1d       	retne	0
8000b0b2:	10 3a       	cp.w	r10,r8
8000b0b4:	f2 0b 13 00 	cpc	r11,r9
8000b0b8:	5e 2f       	reths	1
8000b0ba:	5e 3d       	retlo	0
8000b0bc:	14 38       	cp.w	r8,r10
8000b0be:	f6 09 13 00 	cpc	r9,r11
8000b0c2:	5e 2f       	reths	1
8000b0c4:	5e 3d       	retlo	0
8000b0c6:	1b 07       	ld.w	r7,sp++
8000b0c8:	d8 0a       	popm	pc,r12=0
8000b0ca:	58 17       	cp.w	r7,1
8000b0cc:	5f 0c       	sreq	r12
8000b0ce:	58 09       	cp.w	r9,0
8000b0d0:	f5 b8 00 00 	subfeq	r8,0
8000b0d4:	1b 07       	ld.w	r7,sp++
8000b0d6:	1b 0e       	ld.w	lr,sp++
8000b0d8:	5e 0f       	reteq	1
8000b0da:	5e fc       	retal	r12

8000b0dc <__avr32_f64_cmp_lt>:
8000b0dc:	1a de       	st.w	--sp,lr
8000b0de:	1a d7       	st.w	--sp,r7
8000b0e0:	a1 7b       	lsl	r11,0x1
8000b0e2:	5f 3c       	srlo	r12
8000b0e4:	a1 79       	lsl	r9,0x1
8000b0e6:	5f 37       	srlo	r7
8000b0e8:	5c fc       	rol	r12
8000b0ea:	fc 1e ff e0 	movh	lr,0xffe0
8000b0ee:	58 0a       	cp.w	r10,0
8000b0f0:	fc 0b 13 00 	cpc	r11,lr
8000b0f4:	e0 8b 00 1d 	brhi	8000b12e <__avr32_f64_cmp_lt+0x52>
8000b0f8:	58 08       	cp.w	r8,0
8000b0fa:	fc 09 13 00 	cpc	r9,lr
8000b0fe:	e0 8b 00 18 	brhi	8000b12e <__avr32_f64_cmp_lt+0x52>
8000b102:	58 0b       	cp.w	r11,0
8000b104:	f5 ba 00 00 	subfeq	r10,0
8000b108:	c1 50       	breq	8000b132 <__avr32_f64_cmp_lt+0x56>
8000b10a:	1b 07       	ld.w	r7,sp++
8000b10c:	1b 0e       	ld.w	lr,sp++
8000b10e:	58 3c       	cp.w	r12,3
8000b110:	c0 a0       	breq	8000b124 <__avr32_f64_cmp_lt+0x48>
8000b112:	58 1c       	cp.w	r12,1
8000b114:	c0 33       	brcs	8000b11a <__avr32_f64_cmp_lt+0x3e>
8000b116:	5e 0d       	reteq	0
8000b118:	5e 1f       	retne	1
8000b11a:	10 3a       	cp.w	r10,r8
8000b11c:	f2 0b 13 00 	cpc	r11,r9
8000b120:	5e 2d       	reths	0
8000b122:	5e 3f       	retlo	1
8000b124:	14 38       	cp.w	r8,r10
8000b126:	f6 09 13 00 	cpc	r9,r11
8000b12a:	5e 2d       	reths	0
8000b12c:	5e 3f       	retlo	1
8000b12e:	1b 07       	ld.w	r7,sp++
8000b130:	d8 0a       	popm	pc,r12=0
8000b132:	58 17       	cp.w	r7,1
8000b134:	5f 1c       	srne	r12
8000b136:	58 09       	cp.w	r9,0
8000b138:	f5 b8 00 00 	subfeq	r8,0
8000b13c:	1b 07       	ld.w	r7,sp++
8000b13e:	1b 0e       	ld.w	lr,sp++
8000b140:	5e 0d       	reteq	0
8000b142:	5e fc       	retal	r12

8000b144 <__avr32_umod64>:
8000b144:	d4 31       	pushm	r0-r7,lr
8000b146:	1a 97       	mov	r7,sp
8000b148:	20 3d       	sub	sp,12
8000b14a:	10 9c       	mov	r12,r8
8000b14c:	12 95       	mov	r5,r9
8000b14e:	14 9e       	mov	lr,r10
8000b150:	16 91       	mov	r1,r11
8000b152:	16 96       	mov	r6,r11
8000b154:	58 09       	cp.w	r9,0
8000b156:	e0 81 00 81 	brne	8000b258 <__avr32_umod64+0x114>
8000b15a:	16 38       	cp.w	r8,r11
8000b15c:	e0 88 00 12 	brls	8000b180 <__avr32_umod64+0x3c>
8000b160:	f0 08 12 00 	clz	r8,r8
8000b164:	c4 e0       	breq	8000b200 <__avr32_umod64+0xbc>
8000b166:	f6 08 09 46 	lsl	r6,r11,r8
8000b16a:	f8 08 09 4c 	lsl	r12,r12,r8
8000b16e:	f0 0b 11 20 	rsub	r11,r8,32
8000b172:	f4 08 09 4e 	lsl	lr,r10,r8
8000b176:	f4 0b 0a 4b 	lsr	r11,r10,r11
8000b17a:	f7 e6 10 06 	or	r6,r11,r6
8000b17e:	c4 18       	rjmp	8000b200 <__avr32_umod64+0xbc>
8000b180:	58 08       	cp.w	r8,0
8000b182:	c0 51       	brne	8000b18c <__avr32_umod64+0x48>
8000b184:	30 19       	mov	r9,1
8000b186:	f2 08 0d 08 	divu	r8,r9,r8
8000b18a:	10 9c       	mov	r12,r8
8000b18c:	f8 08 12 00 	clz	r8,r12
8000b190:	c0 31       	brne	8000b196 <__avr32_umod64+0x52>
8000b192:	18 16       	sub	r6,r12
8000b194:	c3 68       	rjmp	8000b200 <__avr32_umod64+0xbc>
8000b196:	f0 03 11 20 	rsub	r3,r8,32
8000b19a:	f4 03 0a 4b 	lsr	r11,r10,r3
8000b19e:	f8 08 09 4c 	lsl	r12,r12,r8
8000b1a2:	ec 08 09 49 	lsl	r9,r6,r8
8000b1a6:	ec 03 0a 43 	lsr	r3,r6,r3
8000b1aa:	f7 e9 10 09 	or	r9,r11,r9
8000b1ae:	f8 05 16 10 	lsr	r5,r12,0x10
8000b1b2:	ed dc c0 10 	bfextu	r6,r12,0x0,0x10
8000b1b6:	e6 05 0d 02 	divu	r2,r3,r5
8000b1ba:	f2 0e 16 10 	lsr	lr,r9,0x10
8000b1be:	ec 02 02 4b 	mul	r11,r6,r2
8000b1c2:	fd e3 11 0e 	or	lr,lr,r3<<0x10
8000b1c6:	16 3e       	cp.w	lr,r11
8000b1c8:	c0 72       	brcc	8000b1d6 <__avr32_umod64+0x92>
8000b1ca:	18 0e       	add	lr,r12
8000b1cc:	18 3e       	cp.w	lr,r12
8000b1ce:	c0 43       	brcs	8000b1d6 <__avr32_umod64+0x92>
8000b1d0:	16 3e       	cp.w	lr,r11
8000b1d2:	fd dc e3 0e 	addcs	lr,lr,r12
8000b1d6:	fc 0b 01 03 	sub	r3,lr,r11
8000b1da:	f3 d9 c0 10 	bfextu	r9,r9,0x0,0x10
8000b1de:	e6 05 0d 02 	divu	r2,r3,r5
8000b1e2:	f3 e3 11 09 	or	r9,r9,r3<<0x10
8000b1e6:	a5 36       	mul	r6,r2
8000b1e8:	0c 39       	cp.w	r9,r6
8000b1ea:	c0 72       	brcc	8000b1f8 <__avr32_umod64+0xb4>
8000b1ec:	18 09       	add	r9,r12
8000b1ee:	18 39       	cp.w	r9,r12
8000b1f0:	c0 43       	brcs	8000b1f8 <__avr32_umod64+0xb4>
8000b1f2:	0c 39       	cp.w	r9,r6
8000b1f4:	f3 dc e3 09 	addcs	r9,r9,r12
8000b1f8:	f2 06 01 06 	sub	r6,r9,r6
8000b1fc:	f4 08 09 4e 	lsl	lr,r10,r8
8000b200:	f8 0a 16 10 	lsr	r10,r12,0x10
8000b204:	eb dc c0 10 	bfextu	r5,r12,0x0,0x10
8000b208:	ec 0a 0d 02 	divu	r2,r6,r10
8000b20c:	fc 09 16 10 	lsr	r9,lr,0x10
8000b210:	ea 02 02 4b 	mul	r11,r5,r2
8000b214:	f3 e3 11 09 	or	r9,r9,r3<<0x10
8000b218:	16 39       	cp.w	r9,r11
8000b21a:	c0 72       	brcc	8000b228 <__avr32_umod64+0xe4>
8000b21c:	18 09       	add	r9,r12
8000b21e:	18 39       	cp.w	r9,r12
8000b220:	c0 43       	brcs	8000b228 <__avr32_umod64+0xe4>
8000b222:	16 39       	cp.w	r9,r11
8000b224:	f3 dc e3 09 	addcs	r9,r9,r12
8000b228:	f2 0b 01 0b 	sub	r11,r9,r11
8000b22c:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
8000b230:	f6 0a 0d 0a 	divu	r10,r11,r10
8000b234:	fd eb 11 0e 	or	lr,lr,r11<<0x10
8000b238:	ea 0a 02 4a 	mul	r10,r5,r10
8000b23c:	14 3e       	cp.w	lr,r10
8000b23e:	c0 72       	brcc	8000b24c <__avr32_umod64+0x108>
8000b240:	18 0e       	add	lr,r12
8000b242:	18 3e       	cp.w	lr,r12
8000b244:	c0 43       	brcs	8000b24c <__avr32_umod64+0x108>
8000b246:	14 3e       	cp.w	lr,r10
8000b248:	fd dc e3 0e 	addcs	lr,lr,r12
8000b24c:	fc 0a 01 0a 	sub	r10,lr,r10
8000b250:	30 0b       	mov	r11,0
8000b252:	f4 08 0a 4a 	lsr	r10,r10,r8
8000b256:	c7 b8       	rjmp	8000b34c <__avr32_umod64+0x208>
8000b258:	16 39       	cp.w	r9,r11
8000b25a:	e0 8b 00 79 	brhi	8000b34c <__avr32_umod64+0x208>
8000b25e:	f2 09 12 00 	clz	r9,r9
8000b262:	c1 21       	brne	8000b286 <__avr32_umod64+0x142>
8000b264:	10 3a       	cp.w	r10,r8
8000b266:	5f 2b       	srhs	r11
8000b268:	0a 31       	cp.w	r1,r5
8000b26a:	5f ba       	srhi	r10
8000b26c:	f7 ea 10 0a 	or	r10,r11,r10
8000b270:	f2 0a 18 00 	cp.b	r10,r9
8000b274:	c0 60       	breq	8000b280 <__avr32_umod64+0x13c>
8000b276:	fc 08 01 0c 	sub	r12,lr,r8
8000b27a:	e2 05 01 46 	sbc	r6,r1,r5
8000b27e:	18 9e       	mov	lr,r12
8000b280:	0c 9b       	mov	r11,r6
8000b282:	1c 9a       	mov	r10,lr
8000b284:	c6 48       	rjmp	8000b34c <__avr32_umod64+0x208>
8000b286:	ea 09 09 4c 	lsl	r12,r5,r9
8000b28a:	f2 06 11 20 	rsub	r6,r9,32
8000b28e:	f6 09 09 4b 	lsl	r11,r11,r9
8000b292:	f0 09 09 42 	lsl	r2,r8,r9
8000b296:	ef 46 ff f4 	st.w	r7[-12],r6
8000b29a:	f0 06 0a 48 	lsr	r8,r8,r6
8000b29e:	18 48       	or	r8,r12
8000b2a0:	e2 06 0a 4c 	lsr	r12,r1,r6
8000b2a4:	f4 09 09 43 	lsl	r3,r10,r9
8000b2a8:	fd d8 c0 10 	bfextu	lr,r8,0x0,0x10
8000b2ac:	f4 06 0a 4a 	lsr	r10,r10,r6
8000b2b0:	16 4a       	or	r10,r11
8000b2b2:	f0 0b 16 10 	lsr	r11,r8,0x10
8000b2b6:	f8 0b 0d 04 	divu	r4,r12,r11
8000b2ba:	f4 0c 16 10 	lsr	r12,r10,0x10
8000b2be:	08 91       	mov	r1,r4
8000b2c0:	f9 e5 11 0c 	or	r12,r12,r5<<0x10
8000b2c4:	e8 0e 02 46 	mul	r6,r4,lr
8000b2c8:	0c 3c       	cp.w	r12,r6
8000b2ca:	c0 a2       	brcc	8000b2de <__avr32_umod64+0x19a>
8000b2cc:	20 11       	sub	r1,1
8000b2ce:	10 0c       	add	r12,r8
8000b2d0:	10 3c       	cp.w	r12,r8
8000b2d2:	c0 63       	brcs	8000b2de <__avr32_umod64+0x19a>
8000b2d4:	0c 3c       	cp.w	r12,r6
8000b2d6:	f7 b1 03 01 	sublo	r1,1
8000b2da:	f9 d8 e3 0c 	addcs	r12,r12,r8
8000b2de:	0c 1c       	sub	r12,r6
8000b2e0:	f5 da c0 10 	bfextu	r10,r10,0x0,0x10
8000b2e4:	f8 0b 0d 04 	divu	r4,r12,r11
8000b2e8:	f5 e5 11 0b 	or	r11,r10,r5<<0x10
8000b2ec:	08 96       	mov	r6,r4
8000b2ee:	e8 0e 02 4e 	mul	lr,r4,lr
8000b2f2:	1c 3b       	cp.w	r11,lr
8000b2f4:	c0 a2       	brcc	8000b308 <__avr32_umod64+0x1c4>
8000b2f6:	20 16       	sub	r6,1
8000b2f8:	10 0b       	add	r11,r8
8000b2fa:	10 3b       	cp.w	r11,r8
8000b2fc:	c0 63       	brcs	8000b308 <__avr32_umod64+0x1c4>
8000b2fe:	1c 3b       	cp.w	r11,lr
8000b300:	f7 b6 03 01 	sublo	r6,1
8000b304:	f7 d8 e3 0b 	addcs	r11,r11,r8
8000b308:	ed e1 11 01 	or	r1,r6,r1<<0x10
8000b30c:	1c 1b       	sub	r11,lr
8000b30e:	e2 02 06 40 	mulu.d	r0,r1,r2
8000b312:	00 9e       	mov	lr,r0
8000b314:	02 9c       	mov	r12,r1
8000b316:	16 3c       	cp.w	r12,r11
8000b318:	e0 8b 00 08 	brhi	8000b328 <__avr32_umod64+0x1e4>
8000b31c:	5f 06       	sreq	r6
8000b31e:	06 30       	cp.w	r0,r3
8000b320:	5f ba       	srhi	r10
8000b322:	ed ea 00 0a 	and	r10,r6,r10
8000b326:	c0 60       	breq	8000b332 <__avr32_umod64+0x1ee>
8000b328:	fc 02 01 04 	sub	r4,lr,r2
8000b32c:	f8 08 01 4c 	sbc	r12,r12,r8
8000b330:	08 9e       	mov	lr,r4
8000b332:	e6 0e 01 0a 	sub	r10,r3,lr
8000b336:	f6 0c 01 4c 	sbc	r12,r11,r12
8000b33a:	ee f1 ff f4 	ld.w	r1,r7[-12]
8000b33e:	f8 09 0a 4b 	lsr	r11,r12,r9
8000b342:	f4 09 0a 4a 	lsr	r10,r10,r9
8000b346:	f8 01 09 4c 	lsl	r12,r12,r1
8000b34a:	18 4a       	or	r10,r12
8000b34c:	2f dd       	sub	sp,-12
8000b34e:	d8 32       	popm	r0-r7,pc

Disassembly of section .exception:

8000b400 <_evba>:
_evba:

	.org  0x000
	// Unrecoverable Exception.
_handle_Unrecoverable_Exception:
	rjmp $
8000b400:	c0 08       	rjmp	8000b400 <_evba>
	...

8000b404 <_handle_TLB_Multiple_Hit>:

	.org  0x004
	// TLB Multiple Hit.
_handle_TLB_Multiple_Hit:
	rjmp $
8000b404:	c0 08       	rjmp	8000b404 <_handle_TLB_Multiple_Hit>
	...

8000b408 <_handle_Bus_Error_Data_Fetch>:

	.org  0x008
	// Bus Error Data Fetch.
_handle_Bus_Error_Data_Fetch:
	rjmp $
8000b408:	c0 08       	rjmp	8000b408 <_handle_Bus_Error_Data_Fetch>
	...

8000b40c <_handle_Bus_Error_Instruction_Fetch>:

	.org  0x00C
	// Bus Error Instruction Fetch.
_handle_Bus_Error_Instruction_Fetch:
	rjmp $
8000b40c:	c0 08       	rjmp	8000b40c <_handle_Bus_Error_Instruction_Fetch>
	...

8000b410 <_handle_NMI>:

	.org  0x010
	// NMI.
_handle_NMI:
	rjmp $
8000b410:	c0 08       	rjmp	8000b410 <_handle_NMI>
	...

8000b414 <_handle_Instruction_Address>:

	.org  0x014
	// Instruction Address.
_handle_Instruction_Address:
	rjmp $
8000b414:	c0 08       	rjmp	8000b414 <_handle_Instruction_Address>
	...

8000b418 <_handle_ITLB_Protection>:

	.org  0x018
	// ITLB Protection.
_handle_ITLB_Protection:
	rjmp $
8000b418:	c0 08       	rjmp	8000b418 <_handle_ITLB_Protection>
	...

8000b41c <_handle_Breakpoint>:

	.org  0x01C
	// Breakpoint.
_handle_Breakpoint:
	rjmp $
8000b41c:	c0 08       	rjmp	8000b41c <_handle_Breakpoint>
	...

8000b420 <_handle_Illegal_Opcode>:

	.org  0x020
	// Illegal Opcode.
_handle_Illegal_Opcode:
	rjmp $
8000b420:	c0 08       	rjmp	8000b420 <_handle_Illegal_Opcode>
	...

8000b424 <_handle_Unimplemented_Instruction>:

	.org  0x024
	// Unimplemented Instruction.
_handle_Unimplemented_Instruction:
	rjmp $
8000b424:	c0 08       	rjmp	8000b424 <_handle_Unimplemented_Instruction>
	...

8000b428 <_handle_Privilege_Violation>:

	.org  0x028
	// Privilege Violation.
_handle_Privilege_Violation:
	rjmp $
8000b428:	c0 08       	rjmp	8000b428 <_handle_Privilege_Violation>
	...

8000b42c <_handle_Floating_Point>:

	.org  0x02C
	// Floating-Point: UNUSED IN AVR32UC and AVR32AP.
_handle_Floating_Point:
	rjmp $
8000b42c:	c0 08       	rjmp	8000b42c <_handle_Floating_Point>
	...

8000b430 <_handle_Coprocessor_Absent>:

	.org  0x030
	// Coprocessor Absent: UNUSED IN AVR32UC.
_handle_Coprocessor_Absent:
	rjmp $
8000b430:	c0 08       	rjmp	8000b430 <_handle_Coprocessor_Absent>
	...

8000b434 <_handle_Data_Address_Read>:

	.org  0x034
	// Data Address (Read).
_handle_Data_Address_Read:
	rjmp $
8000b434:	c0 08       	rjmp	8000b434 <_handle_Data_Address_Read>
	...

8000b438 <_handle_Data_Address_Write>:

	.org  0x038
	// Data Address (Write).
_handle_Data_Address_Write:
	rjmp $
8000b438:	c0 08       	rjmp	8000b438 <_handle_Data_Address_Write>
	...

8000b43c <_handle_DTLB_Protection_Read>:

	.org  0x03C
	// DTLB Protection (Read).
_handle_DTLB_Protection_Read:
	rjmp $
8000b43c:	c0 08       	rjmp	8000b43c <_handle_DTLB_Protection_Read>
	...

8000b440 <_handle_DTLB_Protection_Write>:

	.org  0x040
	// DTLB Protection (Write).
_handle_DTLB_Protection_Write:
	rjmp $
8000b440:	c0 08       	rjmp	8000b440 <_handle_DTLB_Protection_Write>
	...

8000b444 <_handle_DTLB_Modified>:

	.org  0x044
	// DTLB Modified: UNUSED IN AVR32UC.
_handle_DTLB_Modified:
	rjmp $
8000b444:	c0 08       	rjmp	8000b444 <_handle_DTLB_Modified>
	...

8000b450 <_handle_ITLB_Miss>:

	.org  0x050
	// ITLB Miss.
_handle_ITLB_Miss:
	rjmp $
8000b450:	c0 08       	rjmp	8000b450 <_handle_ITLB_Miss>
	...

8000b460 <_handle_DTLB_Miss_Read>:

	.org  0x060
	// DTLB Miss (Read).
_handle_DTLB_Miss_Read:
	rjmp $
8000b460:	c0 08       	rjmp	8000b460 <_handle_DTLB_Miss_Read>
	...

8000b470 <_handle_DTLB_Miss_Write>:

	.org  0x070
	// DTLB Miss (Write).
_handle_DTLB_Miss_Write:
	rjmp $
8000b470:	c0 08       	rjmp	8000b470 <_handle_DTLB_Miss_Write>
	...

8000b500 <_handle_Supervisor_Call>:

	.org  0x100
	// Supervisor Call.
_handle_Supervisor_Call:
	rjmp $
8000b500:	c0 08       	rjmp	8000b500 <_handle_Supervisor_Call>
8000b502:	d7 03       	nop

8000b504 <_int0>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
8000b504:	30 0c       	mov	r12,0
8000b506:	fe b0 cb 05 	rcall	80004b10 <_get_interrupt_handler>
8000b50a:	58 0c       	cp.w	r12,0
8000b50c:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000b510:	d6 03       	rete

8000b512 <_int1>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
8000b512:	30 1c       	mov	r12,1
8000b514:	fe b0 ca fe 	rcall	80004b10 <_get_interrupt_handler>
8000b518:	58 0c       	cp.w	r12,0
8000b51a:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000b51e:	d6 03       	rete

8000b520 <_int2>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
8000b520:	30 2c       	mov	r12,2
8000b522:	fe b0 ca f7 	rcall	80004b10 <_get_interrupt_handler>
8000b526:	58 0c       	cp.w	r12,0
8000b528:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000b52c:	d6 03       	rete

8000b52e <_int3>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
8000b52e:	30 3c       	mov	r12,3
8000b530:	fe b0 ca f0 	rcall	80004b10 <_get_interrupt_handler>
8000b534:	58 0c       	cp.w	r12,0
8000b536:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000b53a:	d6 03       	rete
8000b53c:	d7 03       	nop
8000b53e:	d7 03       	nop
8000b540:	d7 03       	nop
8000b542:	d7 03       	nop
8000b544:	d7 03       	nop
8000b546:	d7 03       	nop
8000b548:	d7 03       	nop
8000b54a:	d7 03       	nop
8000b54c:	d7 03       	nop
8000b54e:	d7 03       	nop
8000b550:	d7 03       	nop
8000b552:	d7 03       	nop
8000b554:	d7 03       	nop
8000b556:	d7 03       	nop
8000b558:	d7 03       	nop
8000b55a:	d7 03       	nop
8000b55c:	d7 03       	nop
8000b55e:	d7 03       	nop
8000b560:	d7 03       	nop
8000b562:	d7 03       	nop
8000b564:	d7 03       	nop
8000b566:	d7 03       	nop
8000b568:	d7 03       	nop
8000b56a:	d7 03       	nop
8000b56c:	d7 03       	nop
8000b56e:	d7 03       	nop
8000b570:	d7 03       	nop
8000b572:	d7 03       	nop
8000b574:	d7 03       	nop
8000b576:	d7 03       	nop
8000b578:	d7 03       	nop
8000b57a:	d7 03       	nop
8000b57c:	d7 03       	nop
8000b57e:	d7 03       	nop
8000b580:	d7 03       	nop
8000b582:	d7 03       	nop
8000b584:	d7 03       	nop
8000b586:	d7 03       	nop
8000b588:	d7 03       	nop
8000b58a:	d7 03       	nop
8000b58c:	d7 03       	nop
8000b58e:	d7 03       	nop
8000b590:	d7 03       	nop
8000b592:	d7 03       	nop
8000b594:	d7 03       	nop
8000b596:	d7 03       	nop
8000b598:	d7 03       	nop
8000b59a:	d7 03       	nop
8000b59c:	d7 03       	nop
8000b59e:	d7 03       	nop
8000b5a0:	d7 03       	nop
8000b5a2:	d7 03       	nop
8000b5a4:	d7 03       	nop
8000b5a6:	d7 03       	nop
8000b5a8:	d7 03       	nop
8000b5aa:	d7 03       	nop
8000b5ac:	d7 03       	nop
8000b5ae:	d7 03       	nop
8000b5b0:	d7 03       	nop
8000b5b2:	d7 03       	nop
8000b5b4:	d7 03       	nop
8000b5b6:	d7 03       	nop
8000b5b8:	d7 03       	nop
8000b5ba:	d7 03       	nop
8000b5bc:	d7 03       	nop
8000b5be:	d7 03       	nop
8000b5c0:	d7 03       	nop
8000b5c2:	d7 03       	nop
8000b5c4:	d7 03       	nop
8000b5c6:	d7 03       	nop
8000b5c8:	d7 03       	nop
8000b5ca:	d7 03       	nop
8000b5cc:	d7 03       	nop
8000b5ce:	d7 03       	nop
8000b5d0:	d7 03       	nop
8000b5d2:	d7 03       	nop
8000b5d4:	d7 03       	nop
8000b5d6:	d7 03       	nop
8000b5d8:	d7 03       	nop
8000b5da:	d7 03       	nop
8000b5dc:	d7 03       	nop
8000b5de:	d7 03       	nop
8000b5e0:	d7 03       	nop
8000b5e2:	d7 03       	nop
8000b5e4:	d7 03       	nop
8000b5e6:	d7 03       	nop
8000b5e8:	d7 03       	nop
8000b5ea:	d7 03       	nop
8000b5ec:	d7 03       	nop
8000b5ee:	d7 03       	nop
8000b5f0:	d7 03       	nop
8000b5f2:	d7 03       	nop
8000b5f4:	d7 03       	nop
8000b5f6:	d7 03       	nop
8000b5f8:	d7 03       	nop
8000b5fa:	d7 03       	nop
8000b5fc:	d7 03       	nop
8000b5fe:	d7 03       	nop
