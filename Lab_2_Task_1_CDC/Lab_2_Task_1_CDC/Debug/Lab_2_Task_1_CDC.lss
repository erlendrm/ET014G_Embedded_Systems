
Lab_2_Task_1_CDC.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00002008  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80002008  80002008  00002408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000048dc  80002008  80002008  00002408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .exception    00000200  80006a00  80006a00  00006e00  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       00000110  80006c00  80006c00  00007000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .dalign       00000004  00000004  00000004  00000000  2**0
                  ALLOC
  6 .data         000000a5  00000008  80006d10  00007408  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .balign       00000003  000000ad  80006db5  000074ad  2**0
                  ALLOC
  8 .bss          000002b8  000000b0  000000b0  00000000  2**2
                  ALLOC
  9 .heap         0000ec98  00000368  00000368  00000000  2**0
                  ALLOC
 10 .comment      00000030  00000000  00000000  000074ad  2**0
                  CONTENTS, READONLY
 11 .debug_aranges 00000940  00000000  00000000  000074e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubnames 00001336  00000000  00000000  00007e20  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_info   00013e1f  00000000  00000000  00009156  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 00001368  00000000  00000000  0001cf75  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00007338  00000000  00000000  0001e2dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00001cf4  00000000  00000000  00025618  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000063e7  00000000  00000000  0002730c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_loc    00002b00  00000000  00000000  0002d6f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_macinfo 00a4a910  00000000  00000000  000301f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .stack        00001000  0000f000  0000f000  00000000  2**0
                  ALLOC
 21 .debug_ranges 000008c8  00000000  00000000  00a7ab08  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_start>:

  .global _start
  .type _start, @function
_start:
  // Jump to the C runtime startup routine.
  lda.w   pc, _stext
80000000:	fe cf 99 ac 	sub	pc,pc,-26196

80000004 <_trampoline>:
80000004:	e0 8f 10 00 	bral	80002004 <program_start>
	...

80002004 <program_start>:
  rjmp    program_start

  .org  PROGRAM_START_OFFSET
program_start:
  // Jump to the C runtime startup routine.
  lda.w   pc, _stext
80002004:	fe cf b9 b0 	sub	pc,pc,-18000

Disassembly of section .text:

80002008 <flashc_set_wait_state>:
80002008:	eb cd 40 80 	pushm	r7,lr
	return (AVR32_FLASHC.fcr & AVR32_FLASHC_FCR_FWS_MASK) >> AVR32_FLASHC_FCR_FWS_OFFSET;
}


void flashc_set_wait_state(unsigned int wait_state)
{
8000200c:	1a 97       	mov	r7,sp
8000200e:	20 2d       	sub	sp,8
80002010:	ef 4c ff f8 	st.w	r7[-8],r12
	u_avr32_flashc_fcr_t u_avr32_flashc_fcr = {AVR32_FLASHC.fcr};
80002014:	fe 68 14 00 	mov	r8,-125952
80002018:	70 08       	ld.w	r8,r8[0x0]
8000201a:	30 09       	mov	r9,0
8000201c:	ef 49 ff fc 	st.w	r7[-4],r9
80002020:	ef 48 ff fc 	st.w	r7[-4],r8
	u_avr32_flashc_fcr.FCR.fws = wait_state;
80002024:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002028:	5c 58       	castu.b	r8
8000202a:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000202e:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80002032:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002036:	f1 d9 d0 c1 	bfins	r8,r9,0x6,0x1
8000203a:	ef 48 ff fc 	st.w	r7[-4],r8
	AVR32_FLASHC.fcr = u_avr32_flashc_fcr.fcr;
8000203e:	fe 68 14 00 	mov	r8,-125952
80002042:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002046:	91 09       	st.w	r8[0x0],r9
}
80002048:	2f ed       	sub	sp,-8
8000204a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000204e:	d7 03       	nop

80002050 <flashc_set_bus_freq>:


void flashc_set_bus_freq(unsigned int cpu_f_hz)
{
80002050:	eb cd 40 80 	pushm	r7,lr
80002054:	1a 97       	mov	r7,sp
80002056:	20 1d       	sub	sp,4
80002058:	ef 4c ff fc 	st.w	r7[-4],r12
	if (cpu_f_hz >= AVR32_FLASHC_FWS_0_MAX_FREQ) {
8000205c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002060:	e0 69 8a 3f 	mov	r9,35391
80002064:	ea 19 01 f7 	orh	r9,0x1f7
80002068:	12 38       	cp.w	r8,r9
8000206a:	e0 88 00 06 	brls	80002076 <flashc_set_bus_freq+0x26>
		// Set 1 WS.
		flashc_set_wait_state(1);
8000206e:	30 1c       	mov	r12,1
80002070:	f0 1f 00 05 	mcall	80002084 <flashc_set_bus_freq+0x34>
80002074:	c0 48       	rjmp	8000207c <flashc_set_bus_freq+0x2c>
	} else {
		// Set 0 WS.
		flashc_set_wait_state(0);
80002076:	30 0c       	mov	r12,0
80002078:	f0 1f 00 03 	mcall	80002084 <flashc_set_bus_freq+0x34>
	}
}
8000207c:	2f fd       	sub	sp,-4
8000207e:	e3 cd 80 80 	ldm	sp++,r7,pc
80002082:	00 00       	add	r0,r0
80002084:	80 00       	ld.sh	r0,r0[0x0]
80002086:	20 08       	sub	r8,0

80002088 <cpu_irq_save>:
#endif

typedef uint32_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
80002088:	eb cd 40 80 	pushm	r7,lr
8000208c:	1a 97       	mov	r7,sp
8000208e:	20 1d       	sub	sp,4
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002090:	e1 b8 00 00 	mfsr	r8,0x0
80002094:	ef 48 ff fc 	st.w	r7[-4],r8
	cpu_irq_disable();
80002098:	d3 03       	ssrf	0x10

	return flags;
8000209a:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8000209e:	10 9c       	mov	r12,r8
800020a0:	2f fd       	sub	sp,-4
800020a2:	e3 cd 80 80 	ldm	sp++,r7,pc

800020a6 <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
800020a6:	eb cd 40 80 	pushm	r7,lr
800020aa:	1a 97       	mov	r7,sp
800020ac:	20 1d       	sub	sp,4
800020ae:	ef 4c ff fc 	st.w	r7[-4],r12
	return !(flags & AVR32_SR_GM_MASK);
800020b2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800020b6:	e6 18 00 01 	andh	r8,0x1,COH
800020ba:	5f 08       	sreq	r8
800020bc:	5c 58       	castu.b	r8
}
800020be:	10 9c       	mov	r12,r8
800020c0:	2f fd       	sub	sp,-4
800020c2:	e3 cd 80 80 	ldm	sp++,r7,pc
800020c6:	d7 03       	nop

800020c8 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
800020c8:	eb cd 40 80 	pushm	r7,lr
800020cc:	1a 97       	mov	r7,sp
800020ce:	20 1d       	sub	sp,4
800020d0:	ef 4c ff fc 	st.w	r7[-4],r12
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
800020d4:	ee fc ff fc 	ld.w	r12,r7[-4]
800020d8:	f0 1f 00 05 	mcall	800020ec <cpu_irq_restore+0x24>
800020dc:	18 98       	mov	r8,r12
800020de:	58 08       	cp.w	r8,0
800020e0:	c0 20       	breq	800020e4 <cpu_irq_restore+0x1c>
      cpu_irq_enable();
800020e2:	d5 03       	csrf	0x10
   }

	barrier();
}
800020e4:	2f fd       	sub	sp,-4
800020e6:	e3 cd 80 80 	ldm	sp++,r7,pc
800020ea:	00 00       	add	r0,r0
800020ec:	80 00       	ld.sh	r0,r0[0x0]
800020ee:	20 a6       	sub	r6,10

800020f0 <sleepmgr_lock_mode>:
 * not put the device to sleep in the deeper sleep modes.
 *
 * \param mode Sleep mode to lock.
 */
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
800020f0:	eb cd 40 80 	pushm	r7,lr
800020f4:	1a 97       	mov	r7,sp
800020f6:	20 2d       	sub	sp,8
800020f8:	ef 4c ff f8 	st.w	r7[-8],r12
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
800020fc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002100:	48 f9       	lddpc	r9,8000213c <sleepmgr_lock_mode+0x4c>
80002102:	f2 08 07 09 	ld.ub	r9,r9[r8]
80002106:	3f f8       	mov	r8,-1
80002108:	f0 09 18 00 	cp.b	r9,r8
8000210c:	c0 21       	brne	80002110 <sleepmgr_lock_mode+0x20>
		while (true) {
			// Warning: maximum value of sleepmgr_locks buffer is no more than 255.
			// Check APP or change the data type to uint16_t.
		}
8000210e:	c0 08       	rjmp	8000210e <sleepmgr_lock_mode+0x1e>
	}

	// Enter a critical section
	flags = cpu_irq_save();
80002110:	f0 1f 00 0c 	mcall	80002140 <sleepmgr_lock_mode+0x50>
80002114:	18 98       	mov	r8,r12
80002116:	ef 48 ff fc 	st.w	r7[-4],r8

	++sleepmgr_locks[mode];
8000211a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000211e:	48 89       	lddpc	r9,8000213c <sleepmgr_lock_mode+0x4c>
80002120:	f2 08 07 09 	ld.ub	r9,r9[r8]
80002124:	2f f9       	sub	r9,-1
80002126:	5c 59       	castu.b	r9
80002128:	48 5a       	lddpc	r10,8000213c <sleepmgr_lock_mode+0x4c>
8000212a:	f4 08 0b 09 	st.b	r10[r8],r9

	// Leave the critical section
	cpu_irq_restore(flags);
8000212e:	ee fc ff fc 	ld.w	r12,r7[-4]
80002132:	f0 1f 00 05 	mcall	80002144 <sleepmgr_lock_mode+0x54>
#else
	UNUSED(mode);
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
80002136:	2f ed       	sub	sp,-8
80002138:	e3 cd 80 80 	ldm	sp++,r7,pc
8000213c:	00 00       	add	r0,r0
8000213e:	03 60       	ld.uh	r0,--r1
80002140:	80 00       	ld.sh	r0,r0[0x0]
80002142:	20 88       	sub	r8,8
80002144:	80 00       	ld.sh	r0,r0[0x0]
80002146:	20 c8       	sub	r8,12

80002148 <sleepmgr_unlock_mode>:
 * manager can put the device to sleep in the deeper sleep modes.
 *
 * \param mode Sleep mode to unlock.
 */
static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
{
80002148:	eb cd 40 80 	pushm	r7,lr
8000214c:	1a 97       	mov	r7,sp
8000214e:	20 2d       	sub	sp,8
80002150:	ef 4c ff f8 	st.w	r7[-8],r12
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] == 0) {
80002154:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002158:	48 e9       	lddpc	r9,80002190 <sleepmgr_unlock_mode+0x48>
8000215a:	f2 08 07 08 	ld.ub	r8,r9[r8]
8000215e:	58 08       	cp.w	r8,0
80002160:	c0 21       	brne	80002164 <sleepmgr_unlock_mode+0x1c>
		while (true) {
			// Warning: minimum value of sleepmgr_locks buffer is no less than 0.
			// Check APP.
		}
80002162:	c0 08       	rjmp	80002162 <sleepmgr_unlock_mode+0x1a>
	}

	// Enter a critical section
	flags = cpu_irq_save();
80002164:	f0 1f 00 0c 	mcall	80002194 <sleepmgr_unlock_mode+0x4c>
80002168:	18 98       	mov	r8,r12
8000216a:	ef 48 ff fc 	st.w	r7[-4],r8

	--sleepmgr_locks[mode];
8000216e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002172:	48 89       	lddpc	r9,80002190 <sleepmgr_unlock_mode+0x48>
80002174:	f2 08 07 09 	ld.ub	r9,r9[r8]
80002178:	20 19       	sub	r9,1
8000217a:	5c 59       	castu.b	r9
8000217c:	48 5a       	lddpc	r10,80002190 <sleepmgr_unlock_mode+0x48>
8000217e:	f4 08 0b 09 	st.b	r10[r8],r9

	// Leave the critical section
	cpu_irq_restore(flags);
80002182:	ee fc ff fc 	ld.w	r12,r7[-4]
80002186:	f0 1f 00 05 	mcall	80002198 <sleepmgr_unlock_mode+0x50>
#else
	UNUSED(mode);
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
8000218a:	2f ed       	sub	sp,-8
8000218c:	e3 cd 80 80 	ldm	sp++,r7,pc
80002190:	00 00       	add	r0,r0
80002192:	03 60       	ld.uh	r0,--r1
80002194:	80 00       	ld.sh	r0,r0[0x0]
80002196:	20 88       	sub	r8,8
80002198:	80 00       	ld.sh	r0,r0[0x0]
8000219a:	20 c8       	sub	r8,12

8000219c <udd_sleep_mode>:
/*! \brief Authorize or not the CPU powerdown mode
 *
 * \param b_enable   true to authorize powerdown mode
 */
static void udd_sleep_mode(bool b_idle)
{
8000219c:	eb cd 40 80 	pushm	r7,lr
800021a0:	1a 97       	mov	r7,sp
800021a2:	20 1d       	sub	sp,4
800021a4:	18 98       	mov	r8,r12
800021a6:	ef 68 ff fc 	st.b	r7[-4],r8
	if (!b_idle && udd_b_idle) {
800021aa:	ef 38 ff fc 	ld.ub	r8,r7[-4]
800021ae:	ec 18 00 01 	eorl	r8,0x1
800021b2:	5c 58       	castu.b	r8
800021b4:	c0 80       	breq	800021c4 <udd_sleep_mode+0x28>
800021b6:	48 f8       	lddpc	r8,800021f0 <udd_sleep_mode+0x54>
800021b8:	11 88       	ld.ub	r8,r8[0x0]
800021ba:	58 08       	cp.w	r8,0
800021bc:	c0 40       	breq	800021c4 <udd_sleep_mode+0x28>
		sleepmgr_unlock_mode(USBB_SLEEP_MODE_USB_IDLE);
800021be:	30 1c       	mov	r12,1
800021c0:	f0 1f 00 0d 	mcall	800021f4 <udd_sleep_mode+0x58>
	}
	if (b_idle && !udd_b_idle) {
800021c4:	ef 39 ff fc 	ld.ub	r9,r7[-4]
800021c8:	30 08       	mov	r8,0
800021ca:	f0 09 18 00 	cp.b	r9,r8
800021ce:	c0 a0       	breq	800021e2 <udd_sleep_mode+0x46>
800021d0:	48 88       	lddpc	r8,800021f0 <udd_sleep_mode+0x54>
800021d2:	11 88       	ld.ub	r8,r8[0x0]
800021d4:	ec 18 00 01 	eorl	r8,0x1
800021d8:	5c 58       	castu.b	r8
800021da:	c0 40       	breq	800021e2 <udd_sleep_mode+0x46>
		sleepmgr_lock_mode(USBB_SLEEP_MODE_USB_IDLE);
800021dc:	30 1c       	mov	r12,1
800021de:	f0 1f 00 07 	mcall	800021f8 <udd_sleep_mode+0x5c>
	}
	udd_b_idle = b_idle;
800021e2:	48 49       	lddpc	r9,800021f0 <udd_sleep_mode+0x54>
800021e4:	ef 38 ff fc 	ld.ub	r8,r7[-4]
800021e8:	b2 88       	st.b	r9[0x0],r8
}
800021ea:	2f fd       	sub	sp,-4
800021ec:	e3 cd 80 80 	ldm	sp++,r7,pc
800021f0:	00 00       	add	r0,r0
800021f2:	00 b0       	st.h	r0++,r0
800021f4:	80 00       	ld.sh	r0,r0[0x0]
800021f6:	21 48       	sub	r8,20
800021f8:	80 00       	ld.sh	r0,r0[0x0]
800021fa:	20 f0       	sub	r0,15

800021fc <udd_interrupt>:
ISR_FREERTOS(udd_interrupt, AVR32_USBB_IRQ_GROUP, UDD_USB_INT_LEVEL)
#  else
ISR(udd_interrupt, AVR32_USBB_IRQ_GROUP, UDD_USB_INT_LEVEL)
#  endif
#endif
{
800021fc:	eb cd 40 80 	pushm	r7,lr
80002200:	1a 97       	mov	r7,sp
	if (Is_udd_sof()) {
80002202:	fe 68 00 04 	mov	r8,-131068
80002206:	70 08       	ld.w	r8,r8[0x0]
80002208:	e2 18 00 04 	andl	r8,0x4,COH
8000220c:	c1 00       	breq	8000222c <udd_interrupt+0x30>
		udd_ack_sof();
8000220e:	fe 68 00 08 	mov	r8,-131064
80002212:	30 49       	mov	r9,4
80002214:	91 09       	st.w	r8[0x0],r9
		if (Is_udd_full_speed_mode()) {
80002216:	fe 68 08 04 	mov	r8,-129020
8000221a:	70 08       	ld.w	r8,r8[0x0]
8000221c:	e2 18 30 00 	andl	r8,0x3000,COH
80002220:	ad 88       	lsr	r8,0xc
80002222:	e0 81 00 a2 	brne	80002366 <udd_interrupt+0x16a>
			udc_sof_notify();
80002226:	f0 1f 00 57 	mcall	80002380 <udd_interrupt+0x184>
		}
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
#endif
		goto udd_interrupt_end;
8000222a:	ca 38       	rjmp	80002370 <udd_interrupt+0x174>
	}
	if (Is_udd_msof()) {
8000222c:	fe 68 00 04 	mov	r8,-131068
80002230:	70 08       	ld.w	r8,r8[0x0]
80002232:	e2 18 00 02 	andl	r8,0x2,COH
80002236:	c0 80       	breq	80002246 <udd_interrupt+0x4a>
		udd_ack_msof();
80002238:	fe 68 00 08 	mov	r8,-131064
8000223c:	30 29       	mov	r9,2
8000223e:	91 09       	st.w	r8[0x0],r9
		udc_sof_notify();
80002240:	f0 1f 00 50 	mcall	80002380 <udd_interrupt+0x184>
		goto udd_interrupt_end;
80002244:	c9 68       	rjmp	80002370 <udd_interrupt+0x174>
	}

	if (udd_ctrl_interrupt())
80002246:	f0 1f 00 50 	mcall	80002384 <udd_interrupt+0x188>
8000224a:	18 98       	mov	r8,r12
8000224c:	58 08       	cp.w	r8,0
8000224e:	e0 81 00 8e 	brne	8000236a <udd_interrupt+0x16e>
		goto udd_interrupt_end; // Interrupt acked by control endpoint managed

#if (0 != USB_DEVICE_MAX_EP)
	if (udd_ep_interrupt())
80002252:	f0 1f 00 4e 	mcall	80002388 <udd_interrupt+0x18c>
80002256:	18 98       	mov	r8,r12
80002258:	58 08       	cp.w	r8,0
8000225a:	e0 81 00 8a 	brne	8000236e <udd_interrupt+0x172>
		goto udd_interrupt_end; // Interrupt acked by bulk/interrupt/isochronous endpoint managed
#endif

	// USB bus reset detection
	if (Is_udd_reset()) {
8000225e:	fe 68 00 04 	mov	r8,-131068
80002262:	70 08       	ld.w	r8,r8[0x0]
80002264:	e2 18 00 08 	andl	r8,0x8,COH
80002268:	c0 e0       	breq	80002284 <udd_interrupt+0x88>
		udd_ack_reset();
8000226a:	fe 68 00 08 	mov	r8,-131064
8000226e:	30 89       	mov	r9,8
80002270:	91 09       	st.w	r8[0x0],r9
		// Abort all jobs on-going
#if (USB_DEVICE_MAX_EP != 0)
		udd_ep_job_table_kill();
80002272:	f0 1f 00 47 	mcall	8000238c <udd_interrupt+0x190>
#endif
		// Reset USB Device Stack Core
		udc_reset();
80002276:	f0 1f 00 47 	mcall	80002390 <udd_interrupt+0x194>
		// Reset endpoint control
		udd_reset_ep_ctrl();
8000227a:	f0 1f 00 47 	mcall	80002394 <udd_interrupt+0x198>
		// Reset endpoint control management
		udd_ctrl_init();
8000227e:	f0 1f 00 47 	mcall	80002398 <udd_interrupt+0x19c>
		goto udd_interrupt_end;
80002282:	c7 78       	rjmp	80002370 <udd_interrupt+0x174>
	}

	if (Is_udd_suspend_interrupt_enabled() && Is_udd_suspend()) {
80002284:	fe 68 00 10 	mov	r8,-131056
80002288:	70 08       	ld.w	r8,r8[0x0]
8000228a:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000228e:	5c 58       	castu.b	r8
80002290:	c2 20       	breq	800022d4 <udd_interrupt+0xd8>
80002292:	fe 68 00 04 	mov	r8,-131068
80002296:	70 08       	ld.w	r8,r8[0x0]
80002298:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000229c:	5c 58       	castu.b	r8
8000229e:	c1 b0       	breq	800022d4 <udd_interrupt+0xd8>
		otg_unfreeze_clock();
800022a0:	fe 68 08 00 	mov	r8,-129024
800022a4:	fe 69 08 00 	mov	r9,-129024
800022a8:	72 09       	ld.w	r9,r9[0x0]
800022aa:	af c9       	cbr	r9,0xe
800022ac:	91 09       	st.w	r8[0x0],r9
		// The suspend interrupt is automatic acked when a wakeup occur
		udd_disable_suspend_interrupt();
800022ae:	fe 68 00 14 	mov	r8,-131052
800022b2:	30 19       	mov	r9,1
800022b4:	91 09       	st.w	r8[0x0],r9
		udd_enable_wake_up_interrupt();
800022b6:	fe 68 00 18 	mov	r8,-131048
800022ba:	31 09       	mov	r9,16
800022bc:	91 09       	st.w	r8[0x0],r9
		otg_freeze_clock(); // Mandatory to exit of sleep mode after a wakeup event
800022be:	fe 68 08 00 	mov	r8,-129024
800022c2:	fe 69 08 00 	mov	r9,-129024
800022c6:	72 09       	ld.w	r9,r9[0x0]
800022c8:	af a9       	sbr	r9,0xe
800022ca:	91 09       	st.w	r8[0x0],r9
		udd_sleep_mode(false); // Enter in SUSPEND mode
800022cc:	30 0c       	mov	r12,0
800022ce:	f0 1f 00 34 	mcall	8000239c <udd_interrupt+0x1a0>
#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
#endif
		goto udd_interrupt_end;
800022d2:	c4 f8       	rjmp	80002370 <udd_interrupt+0x174>
	}

	if (Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) {
800022d4:	fe 68 00 10 	mov	r8,-131056
800022d8:	70 08       	ld.w	r8,r8[0x0]
800022da:	e2 18 00 10 	andl	r8,0x10,COH
800022de:	c2 00       	breq	8000231e <udd_interrupt+0x122>
800022e0:	fe 68 00 04 	mov	r8,-131068
800022e4:	70 08       	ld.w	r8,r8[0x0]
800022e6:	e2 18 00 10 	andl	r8,0x10,COH
800022ea:	c1 a0       	breq	8000231e <udd_interrupt+0x122>
		// Ack wakeup interrupt and enable suspend interrupt
		otg_unfreeze_clock();
800022ec:	fe 68 08 00 	mov	r8,-129024
800022f0:	fe 69 08 00 	mov	r9,-129024
800022f4:	72 09       	ld.w	r9,r9[0x0]
800022f6:	af c9       	cbr	r9,0xe
800022f8:	91 09       	st.w	r8[0x0],r9

		// Check USB clock ready after suspend and eventually sleep USB clock
		while( !Is_otg_clock_usable() );
800022fa:	fe 68 08 04 	mov	r8,-129020
800022fe:	70 08       	ld.w	r8,r8[0x0]
80002300:	e2 18 40 00 	andl	r8,0x4000,COH
80002304:	cf b0       	breq	800022fa <udd_interrupt+0xfe>

		// The wakeup interrupt is automatic acked when a suspend occur
		udd_disable_wake_up_interrupt();
80002306:	fe 68 00 14 	mov	r8,-131052
8000230a:	31 09       	mov	r9,16
8000230c:	91 09       	st.w	r8[0x0],r9
		udd_enable_suspend_interrupt();
8000230e:	fe 68 00 18 	mov	r8,-131048
80002312:	30 19       	mov	r9,1
80002314:	91 09       	st.w	r8[0x0],r9
		udd_sleep_mode(true); // Enter in IDLE mode
80002316:	30 1c       	mov	r12,1
80002318:	f0 1f 00 21 	mcall	8000239c <udd_interrupt+0x1a0>
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
#endif
		goto udd_interrupt_end;
8000231c:	c2 a8       	rjmp	80002370 <udd_interrupt+0x174>
	}

	if (Is_otg_vbus_transition()) {
8000231e:	fe 68 08 04 	mov	r8,-129020
80002322:	70 08       	ld.w	r8,r8[0x0]
80002324:	e2 18 00 02 	andl	r8,0x2,COH
80002328:	c2 40       	breq	80002370 <udd_interrupt+0x174>
		// Ack Vbus transition and send status to high level
		otg_unfreeze_clock();
8000232a:	fe 68 08 00 	mov	r8,-129024
8000232e:	fe 69 08 00 	mov	r9,-129024
80002332:	72 09       	ld.w	r9,r9[0x0]
80002334:	af c9       	cbr	r9,0xe
80002336:	91 09       	st.w	r8[0x0],r9
		otg_ack_vbus_transition();
80002338:	fe 68 08 08 	mov	r8,-129016
8000233c:	30 29       	mov	r9,2
8000233e:	91 09       	st.w	r8[0x0],r9
		otg_freeze_clock();
80002340:	fe 68 08 00 	mov	r8,-129024
80002344:	fe 69 08 00 	mov	r9,-129024
80002348:	72 09       	ld.w	r9,r9[0x0]
8000234a:	af a9       	sbr	r9,0xe
8000234c:	91 09       	st.w	r8[0x0],r9
#ifndef USB_DEVICE_ATTACH_AUTO_DISABLE
		if (Is_otg_vbus_high()) {
8000234e:	fe 68 08 04 	mov	r8,-129020
80002352:	70 08       	ld.w	r8,r8[0x0]
80002354:	e2 18 08 00 	andl	r8,0x800,COH
80002358:	c0 40       	breq	80002360 <udd_interrupt+0x164>
			udd_attach();
8000235a:	f0 1f 00 12 	mcall	800023a0 <udd_interrupt+0x1a4>
8000235e:	c0 98       	rjmp	80002370 <udd_interrupt+0x174>
		} else {
			udd_detach();
80002360:	f0 1f 00 11 	mcall	800023a4 <udd_interrupt+0x1a8>
80002364:	c0 68       	rjmp	80002370 <udd_interrupt+0x174>
			udc_sof_notify();
		}
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
#endif
		goto udd_interrupt_end;
80002366:	d7 03       	nop
80002368:	c0 48       	rjmp	80002370 <udd_interrupt+0x174>
		udc_sof_notify();
		goto udd_interrupt_end;
	}

	if (udd_ctrl_interrupt())
		goto udd_interrupt_end; // Interrupt acked by control endpoint managed
8000236a:	d7 03       	nop
8000236c:	c0 28       	rjmp	80002370 <udd_interrupt+0x174>

#if (0 != USB_DEVICE_MAX_EP)
	if (udd_ep_interrupt())
		goto udd_interrupt_end; // Interrupt acked by bulk/interrupt/isochronous endpoint managed
8000236e:	d7 03       	nop
		UDC_VBUS_EVENT(Is_otg_vbus_high());
#endif
		goto udd_interrupt_end;
	}
udd_interrupt_end:
	otg_data_memory_barrier();
80002370:	fe 68 00 00 	mov	r8,-131072
80002374:	f0 f8 08 18 	ld.w	r8,r8[2072]
	// consider that exiting from the USB interrupt will require a context switch.
	return pdTRUE;
#else
	return;
#endif
}
80002378:	e3 cd 40 80 	ldm	sp++,r7,lr
8000237c:	d6 03       	rete
8000237e:	00 00       	add	r0,r0
80002380:	80 00       	ld.sh	r0,r0[0x0]
80002382:	4d 00       	lddpc	r0,800024c0 <udd_enable+0x118>
80002384:	80 00       	ld.sh	r0,r0[0x0]
80002386:	36 3c       	mov	r12,99
80002388:	80 00       	ld.sh	r0,r0[0x0]
8000238a:	3a ec       	mov	r12,-82
8000238c:	80 00       	ld.sh	r0,r0[0x0]
8000238e:	37 70       	mov	r0,119
80002390:	80 00       	ld.sh	r0,r0[0x0]
80002392:	4c 9c       	lddpc	r12,800024b4 <udd_enable+0x10c>
80002394:	80 00       	ld.sh	r0,r0[0x0]
80002396:	2e bc       	sub	r12,-21
80002398:	80 00       	ld.sh	r0,r0[0x0]
8000239a:	2f a0       	sub	r0,-6
8000239c:	80 00       	ld.sh	r0,r0[0x0]
8000239e:	21 9c       	sub	r12,25
800023a0:	80 00       	ld.sh	r0,r0[0x0]
800023a2:	24 c8       	sub	r8,76
800023a4:	80 00       	ld.sh	r0,r0[0x0]
800023a6:	25 78       	sub	r8,87

800023a8 <udd_enable>:
	return true;
}


void udd_enable(void)
{
800023a8:	eb cd 40 80 	pushm	r7,lr
800023ac:	1a 97       	mov	r7,sp
800023ae:	20 2d       	sub	sp,8
	irqflags_t flags;

	flags = cpu_irq_save();
800023b0:	f0 1f 00 3e 	mcall	800024a8 <udd_enable+0x100>
800023b4:	18 98       	mov	r8,r12
800023b6:	ef 48 ff f8 	st.w	r7[-8],r8
		cpu_irq_restore(flags);
		return;
	}
#else
	//* SINGLE DEVICE MODE INITIALIZATION
	sysclk_enable_usb();
800023ba:	f0 1f 00 3d 	mcall	800024ac <udd_enable+0x104>

	// Here, only the device mode is possible, then link USBB interrupt to UDD interrupt
	irq_register_handler(
800023be:	30 0a       	mov	r10,0
800023c0:	e0 6b 02 20 	mov	r11,544
800023c4:	4b bc       	lddpc	r12,800024b0 <udd_enable+0x108>
800023c6:	f0 1f 00 3c 	mcall	800024b4 <udd_enable+0x10c>
800023ca:	30 18       	mov	r8,1
800023cc:	ef 48 ff fc 	st.w	r7[-4],r8
 *  AVR32_PM_AWEN_xxxxWEN_MASK in the part-specific header file under
 *  "toolchain folder"/avr32/inc(lude)/avr32/)
 */
__always_inline static void pm_asyn_wake_up_enable(unsigned long awen_mask)
{
  AVR32_PM.awen |= awen_mask;
800023d0:	fe 78 0c 00 	mov	r8,-62464
800023d4:	fe 79 0c 00 	mov	r9,-62464
800023d8:	f2 fa 01 44 	ld.w	r10,r9[324]
800023dc:	ee f9 ff fc 	ld.w	r9,r7[-4]
800023e0:	f5 e9 10 09 	or	r9,r10,r9
800023e4:	f1 49 01 44 	st.w	r8[324],r9
		cpu_irq_restore(flags);
		return; // Device is not the current mode
	}
# else
	// ID pin not used then force device mode
	otg_disable_id_pin();
800023e8:	fe 68 08 00 	mov	r8,-129024
800023ec:	fe 69 08 00 	mov	r9,-129024
800023f0:	72 09       	ld.w	r9,r9[0x0]
800023f2:	b9 c9       	cbr	r9,0x18
800023f4:	91 09       	st.w	r8[0x0],r9
	otg_force_device_mode();
800023f6:	fe 68 08 00 	mov	r8,-129024
800023fa:	fe 69 08 00 	mov	r9,-129024
800023fe:	72 09       	ld.w	r9,r9[0x0]
80002400:	b9 b9       	sbr	r9,0x19
80002402:	91 09       	st.w	r8[0x0],r9
# endif

	// Enable USB hardware
	otg_enable_pad();
80002404:	fe 68 08 00 	mov	r8,-129024
80002408:	fe 69 08 00 	mov	r9,-129024
8000240c:	72 09       	ld.w	r9,r9[0x0]
8000240e:	ad a9       	sbr	r9,0xc
80002410:	91 09       	st.w	r8[0x0],r9
	otg_enable();
80002412:	fe 68 08 00 	mov	r8,-129024
80002416:	fe 69 08 00 	mov	r9,-129024
8000241a:	72 09       	ld.w	r9,r9[0x0]
8000241c:	af b9       	sbr	r9,0xf
8000241e:	91 09       	st.w	r8[0x0],r9
	otg_unfreeze_clock();
80002420:	fe 68 08 00 	mov	r8,-129024
80002424:	fe 69 08 00 	mov	r9,-129024
80002428:	72 09       	ld.w	r9,r9[0x0]
8000242a:	af c9       	cbr	r9,0xe
8000242c:	91 09       	st.w	r8[0x0],r9
	(void)Is_otg_clock_frozen();
8000242e:	fe 68 08 00 	mov	r8,-129024
80002432:	70 08       	ld.w	r8,r8[0x0]

	// Reset internal variables
#if (0!=USB_DEVICE_MAX_EP)
	udd_ep_job_table_reset();
80002434:	f0 1f 00 21 	mcall	800024b8 <udd_enable+0x110>

	// Set the USB speed requested by configuration file
#ifdef USB_DEVICE_LOW_SPEED
	udd_low_speed_enable();
#else
	udd_low_speed_disable();
80002438:	fe 68 00 00 	mov	r8,-131072
8000243c:	fe 69 00 00 	mov	r9,-131072
80002440:	72 09       	ld.w	r9,r9[0x0]
80002442:	ad c9       	cbr	r9,0xc
80002444:	91 09       	st.w	r8[0x0],r9
#  ifdef USB_DEVICE_HS_SUPPORT
	udd_high_speed_enable();
#  else
	udd_high_speed_disable();
80002446:	fe 68 00 00 	mov	r8,-131072
8000244a:	fe 69 00 00 	mov	r9,-131072
8000244e:	72 09       	ld.w	r9,r9[0x0]
80002450:	e8 19 0c 00 	orl	r9,0xc00
80002454:	91 09       	st.w	r8[0x0],r9
#  endif
#endif
	otg_ack_vbus_transition();
80002456:	fe 68 08 08 	mov	r8,-129016
8000245a:	30 29       	mov	r9,2
8000245c:	91 09       	st.w	r8[0x0],r9
	// Force Vbus interrupt in case of Vbus always with a high level
	// This is possible with a short timing between a Host mode stop/start.
	if (Is_otg_vbus_high()) {
8000245e:	fe 68 08 04 	mov	r8,-129020
80002462:	70 08       	ld.w	r8,r8[0x0]
80002464:	e2 18 08 00 	andl	r8,0x800,COH
80002468:	c0 50       	breq	80002472 <udd_enable+0xca>
		otg_raise_vbus_transition();
8000246a:	fe 68 08 0c 	mov	r8,-129012
8000246e:	30 29       	mov	r9,2
80002470:	91 09       	st.w	r8[0x0],r9
	}
	otg_enable_vbus_interrupt();
80002472:	fe 68 08 00 	mov	r8,-129024
80002476:	fe 69 08 00 	mov	r9,-129024
8000247a:	72 09       	ld.w	r9,r9[0x0]
8000247c:	a1 b9       	sbr	r9,0x1
8000247e:	91 09       	st.w	r8[0x0],r9
	otg_freeze_clock();
80002480:	fe 68 08 00 	mov	r8,-129024
80002484:	fe 69 08 00 	mov	r9,-129024
80002488:	72 09       	ld.w	r9,r9[0x0]
8000248a:	af a9       	sbr	r9,0xe
8000248c:	91 09       	st.w	r8[0x0],r9

#ifndef UDD_NO_SLEEP_MGR
	// Initialize the sleep mode authorized for the USB suspend mode
	udd_b_idle = false;
8000248e:	48 c9       	lddpc	r9,800024bc <udd_enable+0x114>
80002490:	30 08       	mov	r8,0
80002492:	b2 88       	st.b	r9[0x0],r8
	sleepmgr_lock_mode(USBB_SLEEP_MODE_USB_SUSPEND);
80002494:	30 3c       	mov	r12,3
80002496:	f0 1f 00 0b 	mcall	800024c0 <udd_enable+0x118>
#endif

	cpu_irq_restore(flags);
8000249a:	ee fc ff f8 	ld.w	r12,r7[-8]
8000249e:	f0 1f 00 0a 	mcall	800024c4 <udd_enable+0x11c>
}
800024a2:	2f ed       	sub	sp,-8
800024a4:	e3 cd 80 80 	ldm	sp++,r7,pc
800024a8:	80 00       	ld.sh	r0,r0[0x0]
800024aa:	20 88       	sub	r8,8
800024ac:	80 00       	ld.sh	r0,r0[0x0]
800024ae:	5d 70       	*unknown*
800024b0:	80 00       	ld.sh	r0,r0[0x0]
800024b2:	21 fc       	sub	r12,31
800024b4:	80 00       	ld.sh	r0,r0[0x0]
800024b6:	65 80       	ld.w	r0,r2[0x60]
800024b8:	80 00       	ld.sh	r0,r0[0x0]
800024ba:	37 04       	mov	r4,112
800024bc:	00 00       	add	r0,r0
800024be:	00 b0       	st.h	r0++,r0
800024c0:	80 00       	ld.sh	r0,r0[0x0]
800024c2:	20 f0       	sub	r0,15
800024c4:	80 00       	ld.sh	r0,r0[0x0]
800024c6:	20 c8       	sub	r8,12

800024c8 <udd_attach>:
	cpu_irq_restore(flags);
}


void udd_attach(void)
{
800024c8:	eb cd 40 80 	pushm	r7,lr
800024cc:	1a 97       	mov	r7,sp
800024ce:	20 1d       	sub	sp,4
	irqflags_t flags;
	flags = cpu_irq_save();
800024d0:	f0 1f 00 27 	mcall	8000256c <udd_attach+0xa4>
800024d4:	18 98       	mov	r8,r12
800024d6:	ef 48 ff fc 	st.w	r7[-4],r8

	// At startup the USB bus state is unknown,
	// therefore the state is considered IDLE to not miss any USB event
	udd_sleep_mode(true);
800024da:	30 1c       	mov	r12,1
800024dc:	f0 1f 00 25 	mcall	80002570 <udd_attach+0xa8>
	otg_unfreeze_clock();
800024e0:	fe 68 08 00 	mov	r8,-129024
800024e4:	fe 69 08 00 	mov	r9,-129024
800024e8:	72 09       	ld.w	r9,r9[0x0]
800024ea:	af c9       	cbr	r9,0xe
800024ec:	91 09       	st.w	r8[0x0],r9
	while( !Is_otg_clock_usable() );
800024ee:	fe 68 08 04 	mov	r8,-129020
800024f2:	70 08       	ld.w	r8,r8[0x0]
800024f4:	e2 18 40 00 	andl	r8,0x4000,COH
800024f8:	cf b0       	breq	800024ee <udd_attach+0x26>

	// Authorize attach if Vbus is present
	udd_attach_device();
800024fa:	fe 68 00 00 	mov	r8,-131072
800024fe:	fe 69 00 00 	mov	r9,-131072
80002502:	72 09       	ld.w	r9,r9[0x0]
80002504:	a9 c9       	cbr	r9,0x8
80002506:	91 09       	st.w	r8[0x0],r9

	// Enable USB line events
	udd_enable_reset_interrupt();
80002508:	fe 68 00 18 	mov	r8,-131048
8000250c:	30 89       	mov	r9,8
8000250e:	91 09       	st.w	r8[0x0],r9
	udd_enable_suspend_interrupt();
80002510:	fe 68 00 18 	mov	r8,-131048
80002514:	30 19       	mov	r9,1
80002516:	91 09       	st.w	r8[0x0],r9
	udd_enable_wake_up_interrupt();
80002518:	fe 68 00 18 	mov	r8,-131048
8000251c:	31 09       	mov	r9,16
8000251e:	91 09       	st.w	r8[0x0],r9
	udd_enable_sof_interrupt();
80002520:	fe 68 00 18 	mov	r8,-131048
80002524:	30 49       	mov	r9,4
80002526:	91 09       	st.w	r8[0x0],r9
#ifdef USB_DEVICE_HS_SUPPORT
	udd_enable_msof_interrupt();
#endif
	// Reset following interrupts flag
	udd_ack_reset();
80002528:	fe 68 00 08 	mov	r8,-131064
8000252c:	30 89       	mov	r9,8
8000252e:	91 09       	st.w	r8[0x0],r9
	udd_ack_sof();
80002530:	fe 68 00 08 	mov	r8,-131064
80002534:	30 49       	mov	r9,4
80002536:	91 09       	st.w	r8[0x0],r9
	udd_ack_msof();
80002538:	fe 68 00 08 	mov	r8,-131064
8000253c:	30 29       	mov	r9,2
8000253e:	91 09       	st.w	r8[0x0],r9
#if UC3A3
	// With UTMI, the first suspend is detected but must be cleared to reoccur interrupt
	udd_ack_suspend();
#else
	// The first suspend interrupt is not detected else raise it
	udd_raise_suspend();
80002540:	fe 68 00 0c 	mov	r8,-131060
80002544:	30 19       	mov	r9,1
80002546:	91 09       	st.w	r8[0x0],r9
#endif
	udd_ack_wake_up();
80002548:	fe 68 00 08 	mov	r8,-131064
8000254c:	31 09       	mov	r9,16
8000254e:	91 09       	st.w	r8[0x0],r9
	otg_freeze_clock();
80002550:	fe 68 08 00 	mov	r8,-129024
80002554:	fe 69 08 00 	mov	r9,-129024
80002558:	72 09       	ld.w	r9,r9[0x0]
8000255a:	af a9       	sbr	r9,0xe
8000255c:	91 09       	st.w	r8[0x0],r9
	cpu_irq_restore(flags);
8000255e:	ee fc ff fc 	ld.w	r12,r7[-4]
80002562:	f0 1f 00 05 	mcall	80002574 <udd_attach+0xac>
}
80002566:	2f fd       	sub	sp,-4
80002568:	e3 cd 80 80 	ldm	sp++,r7,pc
8000256c:	80 00       	ld.sh	r0,r0[0x0]
8000256e:	20 88       	sub	r8,8
80002570:	80 00       	ld.sh	r0,r0[0x0]
80002572:	21 9c       	sub	r12,25
80002574:	80 00       	ld.sh	r0,r0[0x0]
80002576:	20 c8       	sub	r8,12

80002578 <udd_detach>:


void udd_detach(void)
{
80002578:	eb cd 40 80 	pushm	r7,lr
8000257c:	1a 97       	mov	r7,sp
	otg_unfreeze_clock();
8000257e:	fe 68 08 00 	mov	r8,-129024
80002582:	fe 69 08 00 	mov	r9,-129024
80002586:	72 09       	ld.w	r9,r9[0x0]
80002588:	af c9       	cbr	r9,0xe
8000258a:	91 09       	st.w	r8[0x0],r9

	// Detach device from the bus
	udd_detach_device();
8000258c:	fe 68 00 00 	mov	r8,-131072
80002590:	fe 69 00 00 	mov	r9,-131072
80002594:	72 09       	ld.w	r9,r9[0x0]
80002596:	a9 a9       	sbr	r9,0x8
80002598:	91 09       	st.w	r8[0x0],r9
	otg_freeze_clock();
8000259a:	fe 68 08 00 	mov	r8,-129024
8000259e:	fe 69 08 00 	mov	r9,-129024
800025a2:	72 09       	ld.w	r9,r9[0x0]
800025a4:	af a9       	sbr	r9,0xe
800025a6:	91 09       	st.w	r8[0x0],r9
	udd_sleep_mode(false);
800025a8:	30 0c       	mov	r12,0
800025aa:	f0 1f 00 03 	mcall	800025b4 <udd_detach+0x3c>
}
800025ae:	e3 cd 80 80 	ldm	sp++,r7,pc
800025b2:	00 00       	add	r0,r0
800025b4:	80 00       	ld.sh	r0,r0[0x0]
800025b6:	21 9c       	sub	r12,25

800025b8 <udd_is_high_speed>:


bool udd_is_high_speed(void)
{
800025b8:	eb cd 40 80 	pushm	r7,lr
800025bc:	1a 97       	mov	r7,sp
#ifdef USB_DEVICE_HS_SUPPORT
	return !Is_udd_full_speed_mode();
#else
	return false;
800025be:	30 08       	mov	r8,0
#endif
}
800025c0:	10 9c       	mov	r12,r8
800025c2:	e3 cd 80 80 	ldm	sp++,r7,pc

800025c6 <udd_set_address>:


void udd_set_address(uint8_t address)
{
800025c6:	eb cd 40 80 	pushm	r7,lr
800025ca:	1a 97       	mov	r7,sp
800025cc:	20 1d       	sub	sp,4
800025ce:	18 98       	mov	r8,r12
800025d0:	ef 68 ff fc 	st.b	r7[-4],r8
	udd_disable_address();
800025d4:	fe 68 00 00 	mov	r8,-131072
800025d8:	fe 69 00 00 	mov	r9,-131072
800025dc:	72 09       	ld.w	r9,r9[0x0]
800025de:	a7 d9       	cbr	r9,0x7
800025e0:	91 09       	st.w	r8[0x0],r9
	udd_configure_address(address);
800025e2:	fe 68 00 00 	mov	r8,-131072
800025e6:	fe 69 00 00 	mov	r9,-131072
800025ea:	72 09       	ld.w	r9,r9[0x0]
800025ec:	12 9a       	mov	r10,r9
800025ee:	e0 1a ff 80 	andl	r10,0xff80
800025f2:	ef 39 ff fc 	ld.ub	r9,r7[-4]
800025f6:	f3 d9 c0 07 	bfextu	r9,r9,0x0,0x7
800025fa:	f5 e9 10 09 	or	r9,r10,r9
800025fe:	91 09       	st.w	r8[0x0],r9
	udd_enable_address();
80002600:	fe 68 00 00 	mov	r8,-131072
80002604:	fe 69 00 00 	mov	r9,-131072
80002608:	72 09       	ld.w	r9,r9[0x0]
8000260a:	a7 b9       	sbr	r9,0x7
8000260c:	91 09       	st.w	r8[0x0],r9
}
8000260e:	2f fd       	sub	sp,-4
80002610:	e3 cd 80 80 	ldm	sp++,r7,pc

80002614 <udd_getaddress>:


uint8_t udd_getaddress(void)
{
80002614:	eb cd 40 80 	pushm	r7,lr
80002618:	1a 97       	mov	r7,sp
	return udd_get_configured_address();
8000261a:	fe 68 00 00 	mov	r8,-131072
8000261e:	70 08       	ld.w	r8,r8[0x0]
80002620:	5c 58       	castu.b	r8
80002622:	f1 d8 c0 07 	bfextu	r8,r8,0x0,0x7
}
80002626:	10 9c       	mov	r12,r8
80002628:	e3 cd 80 80 	ldm	sp++,r7,pc

8000262c <udd_get_frame_number>:


uint16_t udd_get_frame_number(void)
{
8000262c:	eb cd 40 80 	pushm	r7,lr
80002630:	1a 97       	mov	r7,sp
	return udd_frame_number();
80002632:	fe 68 00 20 	mov	r8,-131040
80002636:	70 08       	ld.w	r8,r8[0x0]
80002638:	e2 18 3f f8 	andl	r8,0x3ff8,COH
8000263c:	a3 98       	lsr	r8,0x3
8000263e:	5c 88       	casts.h	r8
}
80002640:	10 9c       	mov	r12,r8
80002642:	e3 cd 80 80 	ldm	sp++,r7,pc

80002646 <udd_get_micro_frame_number>:

uint16_t udd_get_micro_frame_number(void)
{
80002646:	eb cd 40 80 	pushm	r7,lr
8000264a:	1a 97       	mov	r7,sp
	return udd_micro_frame_number();
8000264c:	fe 68 00 00 	mov	r8,-131072
80002650:	70 88       	ld.w	r8,r8[0x20]
80002652:	5c 88       	casts.h	r8
80002654:	5c 88       	casts.h	r8
80002656:	f1 d8 c0 0e 	bfextu	r8,r8,0x0,0xe
}
8000265a:	10 9c       	mov	r12,r8
8000265c:	e3 cd 80 80 	ldm	sp++,r7,pc

80002660 <udd_set_setup_payload>:
	}
}


void udd_set_setup_payload( uint8_t *payload, uint16_t payload_size )
{
80002660:	eb cd 40 80 	pushm	r7,lr
80002664:	1a 97       	mov	r7,sp
80002666:	20 2d       	sub	sp,8
80002668:	ef 4c ff fc 	st.w	r7[-4],r12
8000266c:	16 98       	mov	r8,r11
8000266e:	ef 58 ff f8 	st.h	r7[-8],r8
	udd_g_ctrlreq.payload = payload;
80002672:	48 68       	lddpc	r8,80002688 <udd_set_setup_payload+0x28>
80002674:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002678:	91 29       	st.w	r8[0x8],r9
	udd_g_ctrlreq.payload_size = payload_size;
8000267a:	48 49       	lddpc	r9,80002688 <udd_set_setup_payload+0x28>
8000267c:	ef 08 ff f8 	ld.sh	r8,r7[-8]
80002680:	b2 68       	st.h	r9[0xc],r8
}
80002682:	2f ed       	sub	sp,-8
80002684:	e3 cd 80 80 	ldm	sp++,r7,pc
80002688:	00 00       	add	r0,r0
8000268a:	03 48       	ld.w	r8,--r1

8000268c <udd_ep_alloc>:


#if (0!=USB_DEVICE_MAX_EP)
bool udd_ep_alloc(udd_ep_id_t ep, uint8_t bmAttributes,
		uint16_t MaxEndpointSize)
{
8000268c:	eb cd 40 80 	pushm	r7,lr
80002690:	1a 97       	mov	r7,sp
80002692:	20 dd       	sub	sp,52
80002694:	16 99       	mov	r9,r11
80002696:	14 98       	mov	r8,r10
80002698:	18 9a       	mov	r10,r12
8000269a:	ef 6a ff d4 	st.b	r7[-44],r10
8000269e:	ef 69 ff d0 	st.b	r7[-48],r9
800026a2:	ef 58 ff cc 	st.h	r7[-52],r8
	bool b_dir_in;
	uint16_t ep_allocated;
	uint8_t bank, i;

	b_dir_in = ep & USB_EP_DIR_IN;
800026a6:	ef 38 ff d4 	ld.ub	r8,r7[-44]
800026aa:	a7 98       	lsr	r8,0x7
800026ac:	ef 68 ff db 	st.b	r7[-37],r8
	ep = ep & USB_EP_ADDR_MASK;
800026b0:	ef 38 ff d4 	ld.ub	r8,r7[-44]
800026b4:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
800026b8:	ef 68 ff d4 	st.b	r7[-44],r8

	if (ep > USB_DEVICE_MAX_EP) {
800026bc:	ef 39 ff d4 	ld.ub	r9,r7[-44]
800026c0:	30 38       	mov	r8,3
800026c2:	f0 09 18 00 	cp.b	r9,r8
800026c6:	e0 88 00 04 	brls	800026ce <udd_ep_alloc+0x42>
		return false;
800026ca:	30 08       	mov	r8,0
800026cc:	c7 f9       	rjmp	800029ca <udd_ep_alloc+0x33e>
	}
	if (Is_udd_endpoint_enabled(ep)) {
800026ce:	fe 68 00 00 	mov	r8,-131072
800026d2:	70 79       	ld.w	r9,r8[0x1c]
800026d4:	ef 38 ff d4 	ld.ub	r8,r7[-44]
800026d8:	30 1a       	mov	r10,1
800026da:	f4 08 09 48 	lsl	r8,r10,r8
800026de:	f3 e8 00 08 	and	r8,r9,r8
800026e2:	c0 30       	breq	800026e8 <udd_ep_alloc+0x5c>
		return false;
800026e4:	30 08       	mov	r8,0
800026e6:	c7 29       	rjmp	800029ca <udd_ep_alloc+0x33e>
	}

	// Bank choice
	switch(bmAttributes&USB_EP_TYPE_MASK) {
800026e8:	ef 38 ff d0 	ld.ub	r8,r7[-48]
800026ec:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
800026f0:	58 28       	cp.w	r8,2
800026f2:	c0 d0       	breq	8000270c <udd_ep_alloc+0x80>
800026f4:	58 38       	cp.w	r8,3
800026f6:	c0 70       	breq	80002704 <udd_ep_alloc+0x78>
800026f8:	58 18       	cp.w	r8,1
800026fa:	c0 d1       	brne	80002714 <udd_ep_alloc+0x88>
	case USB_EP_TYPE_ISOCHRONOUS:
		bank = UDD_ISOCHRONOUS_NB_BANK(ep);
800026fc:	30 28       	mov	r8,2
800026fe:	ef 68 ff de 	st.b	r7[-34],r8
		break;
80002702:	c0 b8       	rjmp	80002718 <udd_ep_alloc+0x8c>
	case USB_EP_TYPE_INTERRUPT:
		bank = UDD_INTERRUPT_NB_BANK(ep);
80002704:	30 18       	mov	r8,1
80002706:	ef 68 ff de 	st.b	r7[-34],r8
		break;
8000270a:	c0 78       	rjmp	80002718 <udd_ep_alloc+0x8c>
	case USB_EP_TYPE_BULK:
		bank = UDD_BULK_NB_BANK(ep);
8000270c:	30 28       	mov	r8,2
8000270e:	ef 68 ff de 	st.b	r7[-34],r8
		break;
80002712:	c0 38       	rjmp	80002718 <udd_ep_alloc+0x8c>
	default:
		Assert(false);
		return false;
80002714:	30 08       	mov	r8,0
80002716:	c5 a9       	rjmp	800029ca <udd_ep_alloc+0x33e>
	}
	switch(bank) {
80002718:	ef 38 ff de 	ld.ub	r8,r7[-34]
8000271c:	58 28       	cp.w	r8,2
8000271e:	c0 90       	breq	80002730 <udd_ep_alloc+0xa4>
80002720:	58 38       	cp.w	r8,3
80002722:	c0 b0       	breq	80002738 <udd_ep_alloc+0xac>
80002724:	58 18       	cp.w	r8,1
80002726:	c0 d1       	brne	80002740 <udd_ep_alloc+0xb4>
	case 1:
		bank = AVR32_USBB_UECFG0_EPBK_SINGLE;
80002728:	30 08       	mov	r8,0
8000272a:	ef 68 ff de 	st.b	r7[-34],r8
		break;
8000272e:	c0 b8       	rjmp	80002744 <udd_ep_alloc+0xb8>
	case 2:
		bank = AVR32_USBB_UECFG0_EPBK_DOUBLE;
80002730:	30 18       	mov	r8,1
80002732:	ef 68 ff de 	st.b	r7[-34],r8
		break;
80002736:	c0 78       	rjmp	80002744 <udd_ep_alloc+0xb8>
	case 3:
		bank = AVR32_USBB_UECFG0_EPBK_TRIPLE;
80002738:	30 28       	mov	r8,2
8000273a:	ef 68 ff de 	st.b	r7[-34],r8
		break;
8000273e:	c0 38       	rjmp	80002744 <udd_ep_alloc+0xb8>
	default:
		Assert(false);
		return false;
80002740:	30 08       	mov	r8,0
80002742:	c4 49       	rjmp	800029ca <udd_ep_alloc+0x33e>
	Assert(MaxEndpointSize < 1024);
	Assert((MaxEndpointSize == 1023) || !(MaxEndpointSize & (MaxEndpointSize - 1)));
	Assert(MaxEndpointSize >= 8);

	// Set configuration of new endpoint
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
80002744:	ef 38 ff d4 	ld.ub	r8,r7[-44]
80002748:	a3 68       	lsl	r8,0x2
8000274a:	e0 38 ff 00 	sub	r8,130816
8000274e:	ef 39 ff d4 	ld.ub	r9,r7[-44]
80002752:	a3 69       	lsl	r9,0x2
80002754:	e0 39 ff 00 	sub	r9,130816
80002758:	72 09       	ld.w	r9,r9[0x0]
8000275a:	12 9a       	mov	r10,r9
8000275c:	e0 1a e6 83 	andl	r10,0xe683
80002760:	ef 39 ff d0 	ld.ub	r9,r7[-48]
80002764:	ab 79       	lsl	r9,0xb
80002766:	12 9b       	mov	r11,r9
80002768:	e2 1b 18 00 	andl	r11,0x1800,COH
8000276c:	ef 39 ff db 	ld.ub	r9,r7[-37]
80002770:	a9 69       	lsl	r9,0x8
80002772:	e2 19 01 00 	andl	r9,0x100,COH
80002776:	12 4b       	or	r11,r9
80002778:	ef 19 ff cc 	ld.uh	r9,r7[-52]
8000277c:	ef 49 ff f0 	st.w	r7[-16],r9
80002780:	30 89       	mov	r9,8
80002782:	ef 49 ff f4 	st.w	r7[-12],r9
80002786:	ee f9 ff f0 	ld.w	r9,r7[-16]
8000278a:	ee fc ff f4 	ld.w	r12,r7[-12]
8000278e:	f2 0c 0c 49 	max	r9,r9,r12
80002792:	ef 49 ff ec 	st.w	r7[-20],r9
80002796:	ee f9 ff ec 	ld.w	r9,r7[-20]
8000279a:	ef 49 ff e4 	st.w	r7[-28],r9
8000279e:	e0 69 04 00 	mov	r9,1024
800027a2:	ef 49 ff e8 	st.w	r7[-24],r9
800027a6:	ee f9 ff e4 	ld.w	r9,r7[-28]
800027aa:	ee fc ff e8 	ld.w	r12,r7[-24]
800027ae:	f2 0c 0d 49 	min	r9,r9,r12
800027b2:	ef 49 ff e0 	st.w	r7[-32],r9
800027b6:	ee f9 ff e0 	ld.w	r9,r7[-32]
800027ba:	a1 79       	lsl	r9,0x1
800027bc:	20 19       	sub	r9,1
800027be:	f2 09 12 00 	clz	r9,r9
800027c2:	f2 09 11 1c 	rsub	r9,r9,28
800027c6:	a5 69       	lsl	r9,0x4
800027c8:	12 4b       	or	r11,r9
800027ca:	ef 39 ff de 	ld.ub	r9,r7[-34]
800027ce:	a3 69       	lsl	r9,0x2
800027d0:	e2 19 00 0c 	andl	r9,0xc,COH
800027d4:	f7 e9 10 09 	or	r9,r11,r9
800027d8:	e2 19 19 7c 	andl	r9,0x197c,COH
800027dc:	f5 e9 10 09 	or	r9,r10,r9
800027e0:	91 09       	st.w	r8[0x0],r9
			MaxEndpointSize, bank);
	ep_allocated = 1 << ep;
800027e2:	ef 38 ff d4 	ld.ub	r8,r7[-44]
800027e6:	30 19       	mov	r9,1
800027e8:	f2 08 09 48 	lsl	r8,r9,r8
800027ec:	ef 58 ff dc 	st.h	r7[-36],r8

	// Unalloc endpoints superior
	for (i = USB_DEVICE_MAX_EP; i > ep; i--) {
800027f0:	30 38       	mov	r8,3
800027f2:	ef 68 ff df 	st.b	r7[-33],r8
800027f6:	c3 a8       	rjmp	8000286a <udd_ep_alloc+0x1de>
		if (Is_udd_endpoint_enabled(i)) {
800027f8:	fe 68 00 00 	mov	r8,-131072
800027fc:	70 79       	ld.w	r9,r8[0x1c]
800027fe:	ef 38 ff df 	ld.ub	r8,r7[-33]
80002802:	30 1a       	mov	r10,1
80002804:	f4 08 09 48 	lsl	r8,r10,r8
80002808:	f3 e8 00 08 	and	r8,r9,r8
8000280c:	c2 a0       	breq	80002860 <udd_ep_alloc+0x1d4>
			ep_allocated |= 1 << i;
8000280e:	ef 38 ff df 	ld.ub	r8,r7[-33]
80002812:	30 19       	mov	r9,1
80002814:	f2 08 09 48 	lsl	r8,r9,r8
80002818:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
8000281c:	ef 08 ff dc 	ld.sh	r8,r7[-36]
80002820:	f3 e8 10 08 	or	r8,r9,r8
80002824:	5c 88       	casts.h	r8
80002826:	ef 58 ff dc 	st.h	r7[-36],r8
			udd_disable_endpoint(i);
8000282a:	fe 68 00 00 	mov	r8,-131072
8000282e:	fe 69 00 00 	mov	r9,-131072
80002832:	72 7a       	ld.w	r10,r9[0x1c]
80002834:	ef 39 ff df 	ld.ub	r9,r7[-33]
80002838:	30 1b       	mov	r11,1
8000283a:	f6 09 09 49 	lsl	r9,r11,r9
8000283e:	5c d9       	com	r9
80002840:	f5 e9 00 09 	and	r9,r10,r9
80002844:	91 79       	st.w	r8[0x1c],r9
			udd_unallocate_memory(i);
80002846:	ef 38 ff df 	ld.ub	r8,r7[-33]
8000284a:	a3 68       	lsl	r8,0x2
8000284c:	e0 38 ff 00 	sub	r8,130816
80002850:	ef 39 ff df 	ld.ub	r9,r7[-33]
80002854:	a3 69       	lsl	r9,0x2
80002856:	e0 39 ff 00 	sub	r9,130816
8000285a:	72 09       	ld.w	r9,r9[0x0]
8000285c:	a1 d9       	cbr	r9,0x1
8000285e:	91 09       	st.w	r8[0x0],r9
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
			MaxEndpointSize, bank);
	ep_allocated = 1 << ep;

	// Unalloc endpoints superior
	for (i = USB_DEVICE_MAX_EP; i > ep; i--) {
80002860:	ef 38 ff df 	ld.ub	r8,r7[-33]
80002864:	20 18       	sub	r8,1
80002866:	ef 68 ff df 	st.b	r7[-33],r8
8000286a:	ef 39 ff df 	ld.ub	r9,r7[-33]
8000286e:	ef 38 ff d4 	ld.ub	r8,r7[-44]
80002872:	f0 09 18 00 	cp.b	r9,r8
80002876:	fe 9b ff c1 	brhi	800027f8 <udd_ep_alloc+0x16c>
			udd_unallocate_memory(i);
		}
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
8000287a:	ef 38 ff d4 	ld.ub	r8,r7[-44]
8000287e:	ef 68 ff df 	st.b	r7[-33],r8
80002882:	c9 c8       	rjmp	800029ba <udd_ep_alloc+0x32e>
		if (ep_allocated & (1 << i)) {
80002884:	ef 19 ff dc 	ld.uh	r9,r7[-36]
80002888:	ef 38 ff df 	ld.ub	r8,r7[-33]
8000288c:	f2 08 08 48 	asr	r8,r9,r8
80002890:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80002894:	5c 58       	castu.b	r8
80002896:	e0 80 00 8d 	breq	800029b0 <udd_ep_alloc+0x324>
			udd_ep_job_t *ptr_job = &udd_ep_job[i - 1];
8000289a:	ef 38 ff df 	ld.ub	r8,r7[-33]
8000289e:	f0 c9 00 01 	sub	r9,r8,1
800028a2:	12 98       	mov	r8,r9
800028a4:	a3 68       	lsl	r8,0x2
800028a6:	12 08       	add	r8,r9
800028a8:	a3 68       	lsl	r8,0x2
800028aa:	10 99       	mov	r9,r8
800028ac:	4c a8       	lddpc	r8,800029d4 <udd_ep_alloc+0x348>
800028ae:	f2 08 00 08 	add	r8,r9,r8
800028b2:	ef 48 ff f8 	st.w	r7[-8],r8
			bool b_restart = ptr_job->busy;
800028b6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800028ba:	70 08       	ld.w	r8,r8[0x0]
800028bc:	e6 18 80 00 	andh	r8,0x8000,COH
800028c0:	5f 18       	srne	r8
800028c2:	ef 68 ff ff 	st.b	r7[-1],r8
			ptr_job->busy = false;
800028c6:	ee f9 ff f8 	ld.w	r9,r7[-8]
800028ca:	72 08       	ld.w	r8,r9[0x0]
800028cc:	30 0a       	mov	r10,0
800028ce:	f1 da d3 e1 	bfins	r8,r10,0x1f,0x1
800028d2:	93 08       	st.w	r9[0x0],r8

			udd_allocate_memory(i);
800028d4:	ef 38 ff df 	ld.ub	r8,r7[-33]
800028d8:	a3 68       	lsl	r8,0x2
800028da:	e0 38 ff 00 	sub	r8,130816
800028de:	ef 39 ff df 	ld.ub	r9,r7[-33]
800028e2:	a3 69       	lsl	r9,0x2
800028e4:	e0 39 ff 00 	sub	r9,130816
800028e8:	72 09       	ld.w	r9,r9[0x0]
800028ea:	a1 b9       	sbr	r9,0x1
800028ec:	91 09       	st.w	r8[0x0],r9
			udd_enable_endpoint(i);
800028ee:	fe 68 00 00 	mov	r8,-131072
800028f2:	fe 69 00 00 	mov	r9,-131072
800028f6:	72 7a       	ld.w	r10,r9[0x1c]
800028f8:	ef 39 ff df 	ld.ub	r9,r7[-33]
800028fc:	30 1b       	mov	r11,1
800028fe:	f6 09 09 49 	lsl	r9,r11,r9
80002902:	f5 e9 10 09 	or	r9,r10,r9
80002906:	91 79       	st.w	r8[0x1c],r9
			if (!Is_udd_endpoint_configured(i)) {
80002908:	ef 38 ff df 	ld.ub	r8,r7[-33]
8000290c:	a3 68       	lsl	r8,0x2
8000290e:	e0 38 fe d0 	sub	r8,130768
80002912:	70 08       	ld.w	r8,r8[0x0]
80002914:	e6 18 00 04 	andh	r8,0x4,COH
80002918:	c2 61       	brne	80002964 <udd_ep_alloc+0x2d8>
				if (NULL == ptr_job->call_trans) {
8000291a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000291e:	70 48       	ld.w	r8,r8[0x10]
80002920:	58 08       	cp.w	r8,0
80002922:	c0 31       	brne	80002928 <udd_ep_alloc+0x29c>
					return false;
80002924:	30 08       	mov	r8,0
80002926:	c5 28       	rjmp	800029ca <udd_ep_alloc+0x33e>
				}
				if (Is_udd_endpoint_in(i)) {
80002928:	ef 38 ff df 	ld.ub	r8,r7[-33]
8000292c:	a3 68       	lsl	r8,0x2
8000292e:	e0 38 ff 00 	sub	r8,130816
80002932:	70 08       	ld.w	r8,r8[0x0]
80002934:	e2 18 01 00 	andl	r8,0x100,COH
80002938:	c0 90       	breq	8000294a <udd_ep_alloc+0x2be>
					i |= USB_EP_DIR_IN;
8000293a:	ef 38 ff df 	ld.ub	r8,r7[-33]
8000293e:	ea 18 ff ff 	orh	r8,0xffff
80002942:	e8 18 ff 80 	orl	r8,0xff80
80002946:	ef 68 ff df 	st.b	r7[-33],r8
				}				
				ptr_job->call_trans(UDD_EP_TRANSFER_ABORT,
8000294a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000294e:	70 48       	ld.w	r8,r8[0x10]
80002950:	ef 3a ff df 	ld.ub	r10,r7[-33]
80002954:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002958:	72 29       	ld.w	r9,r9[0x8]
8000295a:	12 9b       	mov	r11,r9
8000295c:	30 1c       	mov	r12,1
8000295e:	5d 18       	icall	r8
						ptr_job->buf_size, i);
				return false;
80002960:	30 08       	mov	r8,0
80002962:	c3 48       	rjmp	800029ca <udd_ep_alloc+0x33e>
			}
			udd_enable_endpoint_bank_autoswitch(i);
80002964:	ef 38 ff df 	ld.ub	r8,r7[-33]
80002968:	a3 68       	lsl	r8,0x2
8000296a:	e0 38 ff 00 	sub	r8,130816
8000296e:	ef 39 ff df 	ld.ub	r9,r7[-33]
80002972:	a3 69       	lsl	r9,0x2
80002974:	e0 39 ff 00 	sub	r9,130816
80002978:	72 09       	ld.w	r9,r9[0x0]
8000297a:	a9 b9       	sbr	r9,0x9
8000297c:	91 09       	st.w	r8[0x0],r9
			if (b_restart) {
8000297e:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80002982:	30 08       	mov	r8,0
80002984:	f0 09 18 00 	cp.b	r9,r8
80002988:	c1 40       	breq	800029b0 <udd_ep_alloc+0x324>
				// Re-run the job
				udd_ep_run(i, ptr_job->b_shortpacket,
8000298a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000298e:	70 48       	ld.w	r8,r8[0x10]
80002990:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002994:	72 29       	ld.w	r9,r9[0x8]
80002996:	ee fa ff f8 	ld.w	r10,r7[-8]
8000299a:	74 1a       	ld.w	r10,r10[0x4]
8000299c:	ee fb ff f8 	ld.w	r11,r7[-8]
800029a0:	76 0b       	ld.w	r11,r11[0x0]
800029a2:	e6 1b 40 00 	andh	r11,0x4000,COH
800029a6:	5f 1b       	srne	r11
800029a8:	ef 3c ff df 	ld.ub	r12,r7[-33]
800029ac:	f0 1f 00 0b 	mcall	800029d8 <udd_ep_alloc+0x34c>
			udd_unallocate_memory(i);
		}
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
800029b0:	ef 38 ff df 	ld.ub	r8,r7[-33]
800029b4:	2f f8       	sub	r8,-1
800029b6:	ef 68 ff df 	st.b	r7[-33],r8
800029ba:	ef 39 ff df 	ld.ub	r9,r7[-33]
800029be:	30 38       	mov	r8,3
800029c0:	f0 09 18 00 	cp.b	r9,r8
800029c4:	fe 98 ff 60 	brls	80002884 <udd_ep_alloc+0x1f8>
						ptr_job->buf_size,
						ptr_job->call_trans);
			}
		}
	}
	return true;
800029c8:	30 18       	mov	r8,1
}
800029ca:	10 9c       	mov	r12,r8
800029cc:	2f 3d       	sub	sp,-52
800029ce:	e3 cd 80 80 	ldm	sp++,r7,pc
800029d2:	00 00       	add	r0,r0
800029d4:	00 00       	add	r0,r0
800029d6:	00 bc       	st.h	r0++,r12
800029d8:	80 00       	ld.sh	r0,r0[0x0]
800029da:	2c fc       	sub	r12,-49

800029dc <udd_ep_free>:


void udd_ep_free(udd_ep_id_t ep)
{
800029dc:	eb cd 40 80 	pushm	r7,lr
800029e0:	1a 97       	mov	r7,sp
800029e2:	20 2d       	sub	sp,8
800029e4:	18 98       	mov	r8,r12
800029e6:	ef 68 ff f8 	st.b	r7[-8],r8
	uint8_t index = ep & USB_EP_ADDR_MASK;
800029ea:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800029ee:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
800029f2:	ef 68 ff ff 	st.b	r7[-1],r8

	if (USB_DEVICE_MAX_EP < index) {
800029f6:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800029fa:	30 38       	mov	r8,3
800029fc:	f0 09 18 00 	cp.b	r9,r8
80002a00:	e0 8b 00 33 	brhi	80002a66 <udd_ep_free+0x8a>
		return;
	}
	udd_disable_endpoint(index);
80002a04:	fe 68 00 00 	mov	r8,-131072
80002a08:	fe 69 00 00 	mov	r9,-131072
80002a0c:	72 7a       	ld.w	r10,r9[0x1c]
80002a0e:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80002a12:	30 1b       	mov	r11,1
80002a14:	f6 09 09 49 	lsl	r9,r11,r9
80002a18:	5c d9       	com	r9
80002a1a:	f5 e9 00 09 	and	r9,r10,r9
80002a1e:	91 79       	st.w	r8[0x1c],r9
	udd_unallocate_memory(index);
80002a20:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80002a24:	a3 68       	lsl	r8,0x2
80002a26:	e0 38 ff 00 	sub	r8,130816
80002a2a:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80002a2e:	a3 69       	lsl	r9,0x2
80002a30:	e0 39 ff 00 	sub	r9,130816
80002a34:	72 09       	ld.w	r9,r9[0x0]
80002a36:	a1 d9       	cbr	r9,0x1
80002a38:	91 09       	st.w	r8[0x0],r9
	udd_ep_abort_job(ep);
80002a3a:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80002a3e:	10 9c       	mov	r12,r8
80002a40:	f0 1f 00 0c 	mcall	80002a70 <udd_ep_free+0x94>
	udd_ep_job[index - 1].stall_requested = false;
80002a44:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80002a48:	f0 c9 00 01 	sub	r9,r8,1
80002a4c:	48 aa       	lddpc	r10,80002a74 <udd_ep_free+0x98>
80002a4e:	12 98       	mov	r8,r9
80002a50:	a3 68       	lsl	r8,0x2
80002a52:	12 08       	add	r8,r9
80002a54:	a3 68       	lsl	r8,0x2
80002a56:	f4 08 00 09 	add	r9,r10,r8
80002a5a:	72 08       	ld.w	r8,r9[0x0]
80002a5c:	30 0a       	mov	r10,0
80002a5e:	f1 da d3 a1 	bfins	r8,r10,0x1d,0x1
80002a62:	93 08       	st.w	r9[0x0],r8
80002a64:	c0 28       	rjmp	80002a68 <udd_ep_free+0x8c>
void udd_ep_free(udd_ep_id_t ep)
{
	uint8_t index = ep & USB_EP_ADDR_MASK;

	if (USB_DEVICE_MAX_EP < index) {
		return;
80002a66:	d7 03       	nop
	}
	udd_disable_endpoint(index);
	udd_unallocate_memory(index);
	udd_ep_abort_job(ep);
	udd_ep_job[index - 1].stall_requested = false;
}
80002a68:	2f ed       	sub	sp,-8
80002a6a:	e3 cd 80 80 	ldm	sp++,r7,pc
80002a6e:	00 00       	add	r0,r0
80002a70:	80 00       	ld.sh	r0,r0[0x0]
80002a72:	37 cc       	mov	r12,124
80002a74:	00 00       	add	r0,r0
80002a76:	00 bc       	st.h	r0++,r12

80002a78 <udd_ep_is_halted>:


bool udd_ep_is_halted(udd_ep_id_t ep)
{
80002a78:	eb cd 40 80 	pushm	r7,lr
80002a7c:	1a 97       	mov	r7,sp
80002a7e:	20 1d       	sub	sp,4
80002a80:	18 98       	mov	r8,r12
80002a82:	ef 68 ff fc 	st.b	r7[-4],r8
	return Is_udd_endpoint_stall_requested(ep & USB_EP_ADDR_MASK);
80002a86:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80002a8a:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80002a8e:	a3 68       	lsl	r8,0x2
80002a90:	e0 38 fe 40 	sub	r8,130624
80002a94:	70 08       	ld.w	r8,r8[0x0]
80002a96:	e6 18 00 08 	andh	r8,0x8,COH
80002a9a:	5f 18       	srne	r8
80002a9c:	5c 58       	castu.b	r8
}
80002a9e:	10 9c       	mov	r12,r8
80002aa0:	2f fd       	sub	sp,-4
80002aa2:	e3 cd 80 80 	ldm	sp++,r7,pc
80002aa6:	d7 03       	nop

80002aa8 <udd_ep_set_halt>:


bool udd_ep_set_halt(udd_ep_id_t ep)
{
80002aa8:	eb cd 40 80 	pushm	r7,lr
80002aac:	1a 97       	mov	r7,sp
80002aae:	20 3d       	sub	sp,12
80002ab0:	18 98       	mov	r8,r12
80002ab2:	ef 68 ff f4 	st.b	r7[-12],r8
	udd_ep_job_t *ptr_job;
	uint8_t index = ep & USB_EP_ADDR_MASK;
80002ab6:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80002aba:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80002abe:	ef 68 ff ff 	st.b	r7[-1],r8

	if (USB_DEVICE_MAX_EP < index) {
80002ac2:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80002ac6:	30 38       	mov	r8,3
80002ac8:	f0 09 18 00 	cp.b	r9,r8
80002acc:	e0 88 00 04 	brls	80002ad4 <udd_ep_set_halt+0x2c>
		return false;
80002ad0:	30 08       	mov	r8,0
80002ad2:	c6 f8       	rjmp	80002bb0 <udd_ep_set_halt+0x108>
	}

	ptr_job = &udd_ep_job[index - 1];
80002ad4:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80002ad8:	f0 c9 00 01 	sub	r9,r8,1
80002adc:	12 98       	mov	r8,r9
80002ade:	a3 68       	lsl	r8,0x2
80002ae0:	12 08       	add	r8,r9
80002ae2:	a3 68       	lsl	r8,0x2
80002ae4:	10 99       	mov	r9,r8
80002ae6:	4b 58       	lddpc	r8,80002bb8 <udd_ep_set_halt+0x110>
80002ae8:	f2 08 00 08 	add	r8,r9,r8
80002aec:	ef 48 ff f8 	st.w	r7[-8],r8

	if (Is_udd_endpoint_stall_requested(index) // Endpoint stalled
80002af0:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80002af4:	a3 68       	lsl	r8,0x2
80002af6:	e0 38 fe 40 	sub	r8,130624
80002afa:	70 08       	ld.w	r8,r8[0x0]
80002afc:	e6 18 00 08 	andh	r8,0x8,COH
80002b00:	c0 71       	brne	80002b0e <udd_ep_set_halt+0x66>
			|| ptr_job->stall_requested) { // Endpoint stall is requested
80002b02:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002b06:	70 08       	ld.w	r8,r8[0x0]
80002b08:	e6 18 20 00 	andh	r8,0x2000,COH
		return false;
	}

	ptr_job = &udd_ep_job[index - 1];

	if (Is_udd_endpoint_stall_requested(index) // Endpoint stalled
80002b0c:	c0 30       	breq	80002b12 <udd_ep_set_halt+0x6a>
			|| ptr_job->stall_requested) { // Endpoint stall is requested
		return true; // Already STALL
80002b0e:	30 18       	mov	r8,1
80002b10:	c5 08       	rjmp	80002bb0 <udd_ep_set_halt+0x108>
	}

	if (ptr_job->busy == true) {
80002b12:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002b16:	70 08       	ld.w	r8,r8[0x0]
80002b18:	e6 18 80 00 	andh	r8,0x8000,COH
80002b1c:	c0 30       	breq	80002b22 <udd_ep_set_halt+0x7a>
		return false; // Job on going, stall impossible
80002b1e:	30 08       	mov	r8,0
80002b20:	c4 88       	rjmp	80002bb0 <udd_ep_set_halt+0x108>
	}

	if ((ep & USB_EP_DIR_IN) && (0 != udd_nb_busy_bank(index))) {
80002b22:	ef 39 ff f4 	ld.ub	r9,r7[-12]
80002b26:	30 08       	mov	r8,0
80002b28:	f0 09 18 00 	cp.b	r9,r8
80002b2c:	c2 54       	brge	80002b76 <udd_ep_set_halt+0xce>
80002b2e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80002b32:	a3 68       	lsl	r8,0x2
80002b34:	e0 38 fe d0 	sub	r8,130768
80002b38:	70 08       	ld.w	r8,r8[0x0]
80002b3a:	e2 18 30 00 	andl	r8,0x3000,COH
80002b3e:	ad 88       	lsr	r8,0xc
80002b40:	c1 b0       	breq	80002b76 <udd_ep_set_halt+0xce>
			// Delay the stall after the end of IN transfer on USB line
			ptr_job->stall_requested = true;
80002b42:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002b46:	72 08       	ld.w	r8,r9[0x0]
80002b48:	30 1a       	mov	r10,1
80002b4a:	f1 da d3 a1 	bfins	r8,r10,0x1d,0x1
80002b4e:	93 08       	st.w	r9[0x0],r8
			udd_enable_bank_interrupt(index);
80002b50:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80002b54:	a3 68       	lsl	r8,0x2
80002b56:	e0 38 fe 10 	sub	r8,130576
80002b5a:	e0 69 10 00 	mov	r9,4096
80002b5e:	91 09       	st.w	r8[0x0],r9
			udd_enable_endpoint_interrupt(index);
80002b60:	fe 68 00 00 	mov	r8,-131072
80002b64:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80002b68:	e0 6a 10 00 	mov	r10,4096
80002b6c:	f4 09 09 49 	lsl	r9,r10,r9
80002b70:	91 69       	st.w	r8[0x18],r9
			return true;
80002b72:	30 18       	mov	r8,1
80002b74:	c1 e8       	rjmp	80002bb0 <udd_ep_set_halt+0x108>
	}
	
	// Stall endpoint immediately
	udd_disable_endpoint_bank_autoswitch(index);
80002b76:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80002b7a:	a3 68       	lsl	r8,0x2
80002b7c:	e0 38 ff 00 	sub	r8,130816
80002b80:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80002b84:	a3 69       	lsl	r9,0x2
80002b86:	e0 39 ff 00 	sub	r9,130816
80002b8a:	72 09       	ld.w	r9,r9[0x0]
80002b8c:	a9 d9       	cbr	r9,0x9
80002b8e:	91 09       	st.w	r8[0x0],r9
	udd_ack_stall(index);
80002b90:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80002b94:	a3 68       	lsl	r8,0x2
80002b96:	e0 38 fe a0 	sub	r8,130720
80002b9a:	34 09       	mov	r9,64
80002b9c:	91 09       	st.w	r8[0x0],r9
	udd_enable_stall_handshake(index);
80002b9e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80002ba2:	a3 68       	lsl	r8,0x2
80002ba4:	e0 38 fe 10 	sub	r8,130576
80002ba8:	e8 69 00 00 	mov	r9,524288
80002bac:	91 09       	st.w	r8[0x0],r9
	return true;
80002bae:	30 18       	mov	r8,1
}
80002bb0:	10 9c       	mov	r12,r8
80002bb2:	2f dd       	sub	sp,-12
80002bb4:	e3 cd 80 80 	ldm	sp++,r7,pc
80002bb8:	00 00       	add	r0,r0
80002bba:	00 bc       	st.h	r0++,r12

80002bbc <udd_ep_clear_halt>:


bool udd_ep_clear_halt(udd_ep_id_t ep)
{
80002bbc:	eb cd 40 80 	pushm	r7,lr
80002bc0:	1a 97       	mov	r7,sp
80002bc2:	20 3d       	sub	sp,12
80002bc4:	18 98       	mov	r8,r12
80002bc6:	ef 68 ff f4 	st.b	r7[-12],r8
	bool b_stall_cleared = false;
80002bca:	30 08       	mov	r8,0
80002bcc:	ef 68 ff fb 	st.b	r7[-5],r8
	udd_ep_job_t *ptr_job;

	ep &= USB_EP_ADDR_MASK;
80002bd0:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80002bd4:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80002bd8:	ef 68 ff f4 	st.b	r7[-12],r8
	if (USB_DEVICE_MAX_EP < ep)
80002bdc:	ef 39 ff f4 	ld.ub	r9,r7[-12]
80002be0:	30 38       	mov	r8,3
80002be2:	f0 09 18 00 	cp.b	r9,r8
80002be6:	e0 88 00 04 	brls	80002bee <udd_ep_clear_halt+0x32>
		return false;
80002bea:	30 08       	mov	r8,0
80002bec:	c8 18       	rjmp	80002cee <udd_ep_clear_halt+0x132>
	ptr_job = &udd_ep_job[ep - 1];
80002bee:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80002bf2:	f0 c9 00 01 	sub	r9,r8,1
80002bf6:	12 98       	mov	r8,r9
80002bf8:	a3 68       	lsl	r8,0x2
80002bfa:	12 08       	add	r8,r9
80002bfc:	a3 68       	lsl	r8,0x2
80002bfe:	10 99       	mov	r9,r8
80002c00:	4b e8       	lddpc	r8,80002cf8 <udd_ep_clear_halt+0x13c>
80002c02:	f2 08 00 08 	add	r8,r9,r8
80002c06:	ef 48 ff fc 	st.w	r7[-4],r8

	if (ptr_job->stall_requested) {
80002c0a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002c0e:	70 08       	ld.w	r8,r8[0x0]
80002c10:	e6 18 20 00 	andh	r8,0x2000,COH
80002c14:	c1 c0       	breq	80002c4c <udd_ep_clear_halt+0x90>
		// Endpoint stall has been requested but not done
		// Remove stall request
		ptr_job->stall_requested = false;
80002c16:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002c1a:	72 08       	ld.w	r8,r9[0x0]
80002c1c:	30 0a       	mov	r10,0
80002c1e:	f1 da d3 a1 	bfins	r8,r10,0x1d,0x1
80002c22:	93 08       	st.w	r9[0x0],r8
		udd_disable_bank_interrupt(ep);
80002c24:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80002c28:	a3 68       	lsl	r8,0x2
80002c2a:	e0 38 fd e0 	sub	r8,130528
80002c2e:	e0 69 10 00 	mov	r9,4096
80002c32:	91 09       	st.w	r8[0x0],r9
		udd_disable_endpoint_interrupt(ep);
80002c34:	fe 68 00 00 	mov	r8,-131072
80002c38:	ef 39 ff f4 	ld.ub	r9,r7[-12]
80002c3c:	e0 6a 10 00 	mov	r10,4096
80002c40:	f4 09 09 49 	lsl	r9,r10,r9
80002c44:	91 59       	st.w	r8[0x14],r9
		b_stall_cleared = true;
80002c46:	30 18       	mov	r8,1
80002c48:	ef 68 ff fb 	st.b	r7[-5],r8
	}
	if (Is_udd_endpoint_stall_requested(ep)) { 
80002c4c:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80002c50:	a3 68       	lsl	r8,0x2
80002c52:	e0 38 fe 40 	sub	r8,130624
80002c56:	70 08       	ld.w	r8,r8[0x0]
80002c58:	e6 18 00 08 	andh	r8,0x8,COH
80002c5c:	c3 10       	breq	80002cbe <udd_ep_clear_halt+0x102>
		if (Is_udd_stall(ep)) {
80002c5e:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80002c62:	a3 68       	lsl	r8,0x2
80002c64:	e0 38 fe d0 	sub	r8,130768
80002c68:	70 08       	ld.w	r8,r8[0x0]
80002c6a:	e2 18 00 40 	andl	r8,0x40,COH
80002c6e:	c1 00       	breq	80002c8e <udd_ep_clear_halt+0xd2>
			udd_ack_stall(ep);
80002c70:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80002c74:	a3 68       	lsl	r8,0x2
80002c76:	e0 38 fe a0 	sub	r8,130720
80002c7a:	34 09       	mov	r9,64
80002c7c:	91 09       	st.w	r8[0x0],r9
			// A packet has been stalled
			// then reset datatoggle
			udd_reset_data_toggle(ep);
80002c7e:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80002c82:	a3 68       	lsl	r8,0x2
80002c84:	e0 38 fe 10 	sub	r8,130576
80002c88:	e4 69 00 00 	mov	r9,262144
80002c8c:	91 09       	st.w	r8[0x0],r9
		}
		// Disable stall
		udd_disable_stall_handshake(ep);
80002c8e:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80002c92:	a3 68       	lsl	r8,0x2
80002c94:	e0 38 fd e0 	sub	r8,130528
80002c98:	e8 69 00 00 	mov	r9,524288
80002c9c:	91 09       	st.w	r8[0x0],r9
		udd_enable_endpoint_bank_autoswitch(ep);
80002c9e:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80002ca2:	a3 68       	lsl	r8,0x2
80002ca4:	e0 38 ff 00 	sub	r8,130816
80002ca8:	ef 39 ff f4 	ld.ub	r9,r7[-12]
80002cac:	a3 69       	lsl	r9,0x2
80002cae:	e0 39 ff 00 	sub	r9,130816
80002cb2:	72 09       	ld.w	r9,r9[0x0]
80002cb4:	a9 b9       	sbr	r9,0x9
80002cb6:	91 09       	st.w	r8[0x0],r9
		b_stall_cleared = true;
80002cb8:	30 18       	mov	r8,1
80002cba:	ef 68 ff fb 	st.b	r7[-5],r8
	}
	if (b_stall_cleared) {
80002cbe:	ef 39 ff fb 	ld.ub	r9,r7[-5]
80002cc2:	30 08       	mov	r8,0
80002cc4:	f0 09 18 00 	cp.b	r9,r8
80002cc8:	c1 20       	breq	80002cec <udd_ep_clear_halt+0x130>
		// If a job is register on clear halt action
		// then execute callback
		if (ptr_job->busy == true) {
80002cca:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002cce:	70 08       	ld.w	r8,r8[0x0]
80002cd0:	e6 18 80 00 	andh	r8,0x8000,COH
80002cd4:	c0 c0       	breq	80002cec <udd_ep_clear_halt+0x130>
			ptr_job->busy = false;
80002cd6:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002cda:	72 08       	ld.w	r8,r9[0x0]
80002cdc:	30 0a       	mov	r10,0
80002cde:	f1 da d3 e1 	bfins	r8,r10,0x1f,0x1
80002ce2:	93 08       	st.w	r9[0x0],r8
			ptr_job->call_nohalt();
80002ce4:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002ce8:	70 48       	ld.w	r8,r8[0x10]
80002cea:	5d 18       	icall	r8
		}
	}
	return true;
80002cec:	30 18       	mov	r8,1
}
80002cee:	10 9c       	mov	r12,r8
80002cf0:	2f dd       	sub	sp,-12
80002cf2:	e3 cd 80 80 	ldm	sp++,r7,pc
80002cf6:	00 00       	add	r0,r0
80002cf8:	00 00       	add	r0,r0
80002cfa:	00 bc       	st.h	r0++,r12

80002cfc <udd_ep_run>:


bool udd_ep_run(udd_ep_id_t ep, bool b_shortpacket,
		uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
80002cfc:	eb cd 40 80 	pushm	r7,lr
80002d00:	1a 97       	mov	r7,sp
80002d02:	20 7d       	sub	sp,28
80002d04:	ef 4a ff ec 	st.w	r7[-20],r10
80002d08:	ef 49 ff e8 	st.w	r7[-24],r9
80002d0c:	ef 48 ff e4 	st.w	r7[-28],r8
80002d10:	18 98       	mov	r8,r12
80002d12:	ef 68 ff f4 	st.b	r7[-12],r8
80002d16:	16 98       	mov	r8,r11
80002d18:	ef 68 ff f0 	st.b	r7[-16],r8
	udd_ep_job_t *ptr_job;
	irqflags_t flags;

	ep &= USB_EP_ADDR_MASK;
80002d1c:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80002d20:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80002d24:	ef 68 ff f4 	st.b	r7[-12],r8
	if (USB_DEVICE_MAX_EP < ep) {
80002d28:	ef 39 ff f4 	ld.ub	r9,r7[-12]
80002d2c:	30 38       	mov	r8,3
80002d2e:	f0 09 18 00 	cp.b	r9,r8
80002d32:	e0 88 00 04 	brls	80002d3a <udd_ep_run+0x3e>
		return false;
80002d36:	30 08       	mov	r8,0
80002d38:	c6 88       	rjmp	80002e08 <udd_ep_run+0x10c>
	}

	// Get job about endpoint
	ptr_job = &udd_ep_job[ep - 1];
80002d3a:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80002d3e:	f0 c9 00 01 	sub	r9,r8,1
80002d42:	12 98       	mov	r8,r9
80002d44:	a3 68       	lsl	r8,0x2
80002d46:	12 08       	add	r8,r9
80002d48:	a3 68       	lsl	r8,0x2
80002d4a:	10 99       	mov	r9,r8
80002d4c:	4b 18       	lddpc	r8,80002e10 <udd_ep_run+0x114>
80002d4e:	f2 08 00 08 	add	r8,r9,r8
80002d52:	ef 48 ff f8 	st.w	r7[-8],r8

	if ((!Is_udd_endpoint_enabled(ep))
80002d56:	fe 68 00 00 	mov	r8,-131072
80002d5a:	70 79       	ld.w	r9,r8[0x1c]
80002d5c:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80002d60:	30 1a       	mov	r10,1
80002d62:	f4 08 09 48 	lsl	r8,r10,r8
80002d66:	f3 e8 00 08 	and	r8,r9,r8
80002d6a:	c1 00       	breq	80002d8a <udd_ep_run+0x8e>
			|| Is_udd_endpoint_stall_requested(ep)
80002d6c:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80002d70:	a3 68       	lsl	r8,0x2
80002d72:	e0 38 fe 40 	sub	r8,130624
80002d76:	70 08       	ld.w	r8,r8[0x0]
80002d78:	e6 18 00 08 	andh	r8,0x8,COH
	}

	// Get job about endpoint
	ptr_job = &udd_ep_job[ep - 1];

	if ((!Is_udd_endpoint_enabled(ep))
80002d7c:	c0 71       	brne	80002d8a <udd_ep_run+0x8e>
			|| Is_udd_endpoint_stall_requested(ep)
			|| ptr_job->stall_requested) {
80002d7e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002d82:	70 08       	ld.w	r8,r8[0x0]
80002d84:	e6 18 20 00 	andh	r8,0x2000,COH
	}

	// Get job about endpoint
	ptr_job = &udd_ep_job[ep - 1];

	if ((!Is_udd_endpoint_enabled(ep))
80002d88:	c0 30       	breq	80002d8e <udd_ep_run+0x92>
			|| Is_udd_endpoint_stall_requested(ep)
			|| ptr_job->stall_requested) {
		return false; // Endpoint is halted
80002d8a:	30 08       	mov	r8,0
80002d8c:	c3 e8       	rjmp	80002e08 <udd_ep_run+0x10c>
	}

	flags = cpu_irq_save();
80002d8e:	f0 1f 00 22 	mcall	80002e14 <udd_ep_run+0x118>
80002d92:	18 98       	mov	r8,r12
80002d94:	ef 48 ff fc 	st.w	r7[-4],r8
	if (ptr_job->busy == true) {
80002d98:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002d9c:	70 08       	ld.w	r8,r8[0x0]
80002d9e:	e6 18 80 00 	andh	r8,0x8000,COH
80002da2:	c0 70       	breq	80002db0 <udd_ep_run+0xb4>
		cpu_irq_restore(flags);
80002da4:	ee fc ff fc 	ld.w	r12,r7[-4]
80002da8:	f0 1f 00 1c 	mcall	80002e18 <udd_ep_run+0x11c>
		return false; // Job already on going
80002dac:	30 08       	mov	r8,0
80002dae:	c2 d8       	rjmp	80002e08 <udd_ep_run+0x10c>
	}
	ptr_job->busy = true;
80002db0:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002db4:	72 08       	ld.w	r8,r9[0x0]
80002db6:	30 1a       	mov	r10,1
80002db8:	f1 da d3 e1 	bfins	r8,r10,0x1f,0x1
80002dbc:	93 08       	st.w	r9[0x0],r8
	cpu_irq_restore(flags);
80002dbe:	ee fc ff fc 	ld.w	r12,r7[-4]
80002dc2:	f0 1f 00 16 	mcall	80002e18 <udd_ep_run+0x11c>

	// No job running. Let's setup a new one.
	//
	ptr_job->buf = buf;
80002dc6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002dca:	ee f9 ff ec 	ld.w	r9,r7[-20]
80002dce:	91 19       	st.w	r8[0x4],r9
	ptr_job->buf_size = buf_size;
80002dd0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002dd4:	ee f9 ff e8 	ld.w	r9,r7[-24]
80002dd8:	91 29       	st.w	r8[0x8],r9
	ptr_job->nb_trans = 0;
80002dda:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002dde:	30 09       	mov	r9,0
80002de0:	91 39       	st.w	r8[0xc],r9
	ptr_job->call_trans = callback;
80002de2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002de6:	ee f9 ff e4 	ld.w	r9,r7[-28]
80002dea:	91 49       	st.w	r8[0x10],r9
	ptr_job->b_shortpacket = b_shortpacket;
80002dec:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002df0:	72 08       	ld.w	r8,r9[0x0]
80002df2:	ef 3a ff f0 	ld.ub	r10,r7[-16]
80002df6:	f1 da d3 c1 	bfins	r8,r10,0x1e,0x1
80002dfa:	93 08       	st.w	r9[0x0],r8


	// Request first transfer
	udd_ep_trans_done(ep);
80002dfc:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80002e00:	10 9c       	mov	r12,r8
80002e02:	f0 1f 00 07 	mcall	80002e1c <udd_ep_run+0x120>
	return true;
80002e06:	30 18       	mov	r8,1
}
80002e08:	10 9c       	mov	r12,r8
80002e0a:	2f 9d       	sub	sp,-28
80002e0c:	e3 cd 80 80 	ldm	sp++,r7,pc
80002e10:	00 00       	add	r0,r0
80002e12:	00 bc       	st.h	r0++,r12
80002e14:	80 00       	ld.sh	r0,r0[0x0]
80002e16:	20 88       	sub	r8,8
80002e18:	80 00       	ld.sh	r0,r0[0x0]
80002e1a:	20 c8       	sub	r8,12
80002e1c:	80 00       	ld.sh	r0,r0[0x0]
80002e1e:	38 9c       	mov	r12,-119

80002e20 <udd_ep_abort>:


void udd_ep_abort(udd_ep_id_t ep)
{
80002e20:	eb cd 40 80 	pushm	r7,lr
80002e24:	1a 97       	mov	r7,sp
80002e26:	20 2d       	sub	sp,8
80002e28:	18 98       	mov	r8,r12
80002e2a:	ef 68 ff f8 	st.b	r7[-8],r8
	uint8_t index = ep & USB_EP_ADDR_MASK;
80002e2e:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80002e32:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80002e36:	ef 68 ff ff 	st.b	r7[-1],r8

	// Stop DMA transfer
	udd_disable_endpoint_dma_interrupt(index);
80002e3a:	fe 68 00 00 	mov	r8,-131072
80002e3e:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80002e42:	20 19       	sub	r9,1
80002e44:	fc 1a 02 00 	movh	r10,0x200
80002e48:	f4 09 09 49 	lsl	r9,r10,r9
80002e4c:	91 59       	st.w	r8[0x14],r9
	udd_endpoint_dma_set_control(index, 0);
80002e4e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80002e52:	a5 68       	lsl	r8,0x4
80002e54:	e0 38 fd 00 	sub	r8,130304
80002e58:	30 09       	mov	r9,0
80002e5a:	91 29       	st.w	r8[0x8],r9
	// Kill banks
	udd_disable_endpoint_interrupt(index);
80002e5c:	fe 68 00 00 	mov	r8,-131072
80002e60:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80002e64:	e0 6a 10 00 	mov	r10,4096
80002e68:	f4 09 09 49 	lsl	r9,r10,r9
80002e6c:	91 59       	st.w	r8[0x14],r9
	while (udd_nb_busy_bank(index)) {
80002e6e:	c1 28       	rjmp	80002e92 <udd_ep_abort+0x72>
		udd_kill_last_in_bank(index);
80002e70:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80002e74:	a3 68       	lsl	r8,0x2
80002e76:	e0 38 fe 10 	sub	r8,130576
80002e7a:	e0 69 20 00 	mov	r9,8192
80002e7e:	91 09       	st.w	r8[0x0],r9
		while(Is_udd_killing_last_in_bank(index));
80002e80:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80002e84:	a3 68       	lsl	r8,0x2
80002e86:	e0 38 fe 40 	sub	r8,130624
80002e8a:	70 08       	ld.w	r8,r8[0x0]
80002e8c:	e2 18 20 00 	andl	r8,0x2000,COH
80002e90:	cf 81       	brne	80002e80 <udd_ep_abort+0x60>
	// Stop DMA transfer
	udd_disable_endpoint_dma_interrupt(index);
	udd_endpoint_dma_set_control(index, 0);
	// Kill banks
	udd_disable_endpoint_interrupt(index);
	while (udd_nb_busy_bank(index)) {
80002e92:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80002e96:	a3 68       	lsl	r8,0x2
80002e98:	e0 38 fe d0 	sub	r8,130768
80002e9c:	70 08       	ld.w	r8,r8[0x0]
80002e9e:	e2 18 30 00 	andl	r8,0x3000,COH
80002ea2:	ad 88       	lsr	r8,0xc
80002ea4:	ce 61       	brne	80002e70 <udd_ep_abort+0x50>
		udd_kill_last_in_bank(index);
		while(Is_udd_killing_last_in_bank(index));
	}
	udd_ep_abort_job(ep);
80002ea6:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80002eaa:	10 9c       	mov	r12,r8
80002eac:	f0 1f 00 03 	mcall	80002eb8 <udd_ep_abort+0x98>
}
80002eb0:	2f ed       	sub	sp,-8
80002eb2:	e3 cd 80 80 	ldm	sp++,r7,pc
80002eb6:	00 00       	add	r0,r0
80002eb8:	80 00       	ld.sh	r0,r0[0x0]
80002eba:	37 cc       	mov	r12,124

80002ebc <udd_reset_ep_ctrl>:

//--------------------------------------------------------
//--- INTERNAL ROUTINES TO MANAGED THE CONTROL ENDPOINT

static void udd_reset_ep_ctrl(void)
{
80002ebc:	eb cd 40 80 	pushm	r7,lr
80002ec0:	1a 97       	mov	r7,sp
80002ec2:	20 7d       	sub	sp,28
	irqflags_t flags;

	// Reset USB address to 0
	udd_configure_address(0);
80002ec4:	fe 68 00 00 	mov	r8,-131072
80002ec8:	fe 69 00 00 	mov	r9,-131072
80002ecc:	72 09       	ld.w	r9,r9[0x0]
80002ece:	e0 19 ff 80 	andl	r9,0xff80
80002ed2:	91 09       	st.w	r8[0x0],r9
	udd_enable_address();
80002ed4:	fe 68 00 00 	mov	r8,-131072
80002ed8:	fe 69 00 00 	mov	r9,-131072
80002edc:	72 09       	ld.w	r9,r9[0x0]
80002ede:	a7 b9       	sbr	r9,0x7
80002ee0:	91 09       	st.w	r8[0x0],r9

	// Alloc and configure control endpoint
	udd_configure_endpoint(0,
80002ee2:	fe 68 01 00 	mov	r8,-130816
80002ee6:	fe 69 01 00 	mov	r9,-130816
80002eea:	72 09       	ld.w	r9,r9[0x0]
80002eec:	12 9a       	mov	r10,r9
80002eee:	e0 1a e6 83 	andl	r10,0xe683
80002ef2:	34 09       	mov	r9,64
80002ef4:	ef 49 ff f8 	st.w	r7[-8],r9
80002ef8:	30 89       	mov	r9,8
80002efa:	ef 49 ff fc 	st.w	r7[-4],r9
80002efe:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002f02:	ee fb ff fc 	ld.w	r11,r7[-4]
80002f06:	f2 0b 0c 49 	max	r9,r9,r11
80002f0a:	ef 49 ff f4 	st.w	r7[-12],r9
80002f0e:	ee f9 ff f4 	ld.w	r9,r7[-12]
80002f12:	ef 49 ff ec 	st.w	r7[-20],r9
80002f16:	e0 69 04 00 	mov	r9,1024
80002f1a:	ef 49 ff f0 	st.w	r7[-16],r9
80002f1e:	ee f9 ff ec 	ld.w	r9,r7[-20]
80002f22:	ee fb ff f0 	ld.w	r11,r7[-16]
80002f26:	f2 0b 0d 49 	min	r9,r9,r11
80002f2a:	ef 49 ff e8 	st.w	r7[-24],r9
80002f2e:	ee f9 ff e8 	ld.w	r9,r7[-24]
80002f32:	a1 79       	lsl	r9,0x1
80002f34:	20 19       	sub	r9,1
80002f36:	f2 09 12 00 	clz	r9,r9
80002f3a:	f2 09 11 1c 	rsub	r9,r9,28
80002f3e:	a5 69       	lsl	r9,0x4
80002f40:	e2 19 19 7c 	andl	r9,0x197c,COH
80002f44:	f5 e9 10 09 	or	r9,r10,r9
80002f48:	91 09       	st.w	r8[0x0],r9
			USB_EP_TYPE_CONTROL,
			0,
			USB_DEVICE_EP_CTRL_SIZE, AVR32_USBB_UECFG0_EPBK_SINGLE);

	udd_allocate_memory(0);
80002f4a:	fe 68 01 00 	mov	r8,-130816
80002f4e:	fe 69 01 00 	mov	r9,-130816
80002f52:	72 09       	ld.w	r9,r9[0x0]
80002f54:	a1 b9       	sbr	r9,0x1
80002f56:	91 09       	st.w	r8[0x0],r9
	udd_enable_endpoint(0);
80002f58:	fe 68 00 00 	mov	r8,-131072
80002f5c:	fe 69 00 00 	mov	r9,-131072
80002f60:	72 79       	ld.w	r9,r9[0x1c]
80002f62:	a1 a9       	sbr	r9,0x0
80002f64:	91 79       	st.w	r8[0x1c],r9
	flags = cpu_irq_save();
80002f66:	f0 1f 00 0d 	mcall	80002f98 <udd_reset_ep_ctrl+0xdc>
80002f6a:	18 98       	mov	r8,r12
80002f6c:	ef 48 ff e4 	st.w	r7[-28],r8
	udd_enable_setup_received_interrupt(0);
80002f70:	fe 68 01 f0 	mov	r8,-130576
80002f74:	30 49       	mov	r9,4
80002f76:	91 09       	st.w	r8[0x0],r9
	udd_enable_out_received_interrupt(0);
80002f78:	fe 68 01 f0 	mov	r8,-130576
80002f7c:	30 29       	mov	r9,2
80002f7e:	91 09       	st.w	r8[0x0],r9
	udd_enable_endpoint_interrupt(0);
80002f80:	fe 68 00 00 	mov	r8,-131072
80002f84:	e0 69 10 00 	mov	r9,4096
80002f88:	91 69       	st.w	r8[0x18],r9
	cpu_irq_restore(flags);
80002f8a:	ee fc ff e4 	ld.w	r12,r7[-28]
80002f8e:	f0 1f 00 04 	mcall	80002f9c <udd_reset_ep_ctrl+0xe0>
}
80002f92:	2f 9d       	sub	sp,-28
80002f94:	e3 cd 80 80 	ldm	sp++,r7,pc
80002f98:	80 00       	ld.sh	r0,r0[0x0]
80002f9a:	20 88       	sub	r8,8
80002f9c:	80 00       	ld.sh	r0,r0[0x0]
80002f9e:	20 c8       	sub	r8,12

80002fa0 <udd_ctrl_init>:

static void udd_ctrl_init(void)
{
80002fa0:	eb cd 40 80 	pushm	r7,lr
80002fa4:	1a 97       	mov	r7,sp
80002fa6:	20 1d       	sub	sp,4
	irqflags_t flags;
	flags = cpu_irq_save();
80002fa8:	f0 1f 00 10 	mcall	80002fe8 <udd_ctrl_init+0x48>
80002fac:	18 98       	mov	r8,r12
80002fae:	ef 48 ff fc 	st.w	r7[-4],r8
	// In case of abort of IN Data Phase:
	// No need to abort IN transfer (rise TXINI),
	// because it is automatically done by hardware when a Setup packet is received.
	// But the interrupt must be disabled to don't generate interrupt TXINI
	// after SETUP reception.
	udd_disable_in_send_interrupt(0);
80002fb2:	fe 68 02 20 	mov	r8,-130528
80002fb6:	30 19       	mov	r9,1
80002fb8:	91 09       	st.w	r8[0x0],r9
	cpu_irq_restore(flags);
80002fba:	ee fc ff fc 	ld.w	r12,r7[-4]
80002fbe:	f0 1f 00 0c 	mcall	80002fec <udd_ctrl_init+0x4c>

	// In case of OUT ZLP event is no processed before Setup event occurs
	udd_ack_out_received(0);
80002fc2:	fe 68 01 60 	mov	r8,-130720
80002fc6:	30 29       	mov	r9,2
80002fc8:	91 09       	st.w	r8[0x0],r9

	udd_g_ctrlreq.callback = NULL;
80002fca:	48 a8       	lddpc	r8,80002ff0 <udd_ctrl_init+0x50>
80002fcc:	30 09       	mov	r9,0
80002fce:	91 49       	st.w	r8[0x10],r9
	udd_g_ctrlreq.over_under_run = NULL;
80002fd0:	48 88       	lddpc	r8,80002ff0 <udd_ctrl_init+0x50>
80002fd2:	30 09       	mov	r9,0
80002fd4:	91 59       	st.w	r8[0x14],r9
	udd_g_ctrlreq.payload_size = 0;
80002fd6:	48 79       	lddpc	r9,80002ff0 <udd_ctrl_init+0x50>
80002fd8:	30 08       	mov	r8,0
80002fda:	b2 68       	st.h	r9[0xc],r8
	udd_ep_control_state = UDD_EPCTRL_SETUP;
80002fdc:	48 68       	lddpc	r8,80002ff4 <udd_ctrl_init+0x54>
80002fde:	30 09       	mov	r9,0
80002fe0:	91 09       	st.w	r8[0x0],r9
}
80002fe2:	2f fd       	sub	sp,-4
80002fe4:	e3 cd 80 80 	ldm	sp++,r7,pc
80002fe8:	80 00       	ld.sh	r0,r0[0x0]
80002fea:	20 88       	sub	r8,8
80002fec:	80 00       	ld.sh	r0,r0[0x0]
80002fee:	20 c8       	sub	r8,12
80002ff0:	00 00       	add	r0,r0
80002ff2:	03 48       	ld.w	r8,--r1
80002ff4:	00 00       	add	r0,r0
80002ff6:	00 b4       	st.h	r0++,r4

80002ff8 <udd_ctrl_setup_received>:


static void udd_ctrl_setup_received(void)
{
80002ff8:	eb cd 40 80 	pushm	r7,lr
80002ffc:	1a 97       	mov	r7,sp
80002ffe:	20 3d       	sub	sp,12
	irqflags_t flags;
	uint8_t i;

	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
80003000:	4c b8       	lddpc	r8,8000312c <udd_ctrl_setup_received+0x134>
80003002:	70 08       	ld.w	r8,r8[0x0]
80003004:	58 08       	cp.w	r8,0
80003006:	c0 50       	breq	80003010 <udd_ctrl_setup_received+0x18>
		// May be a hidden DATA or ZLP phase
		// or protocol abort
		udd_ctrl_endofrequest();
80003008:	f0 1f 00 4a 	mcall	80003130 <udd_ctrl_setup_received+0x138>

		// Reinitializes control endpoint management
		udd_ctrl_init();
8000300c:	f0 1f 00 4a 	mcall	80003134 <udd_ctrl_setup_received+0x13c>
	}
	// Fill setup request structure
	if (8 != udd_byte_count(0)) {
80003010:	fe 68 01 30 	mov	r8,-130768
80003014:	70 08       	ld.w	r8,r8[0x0]
80003016:	e6 18 7f f0 	andh	r8,0x7ff0,COH
8000301a:	b5 88       	lsr	r8,0x14
8000301c:	58 88       	cp.w	r8,8
8000301e:	c0 80       	breq	8000302e <udd_ctrl_setup_received+0x36>
		udd_ctrl_stall_data();
80003020:	f0 1f 00 46 	mcall	80003138 <udd_ctrl_setup_received+0x140>
		udd_ack_setup_received(0);
80003024:	fe 68 01 60 	mov	r8,-130720
80003028:	30 49       	mov	r9,4
8000302a:	91 09       	st.w	r8[0x0],r9
		return; // Error data number doesn't correspond to SETUP packet
8000302c:	c7 d8       	rjmp	80003126 <udd_ctrl_setup_received+0x12e>
	}
	uint8_t *ptr = (uint8_t *) & udd_get_endpoint_fifo_access(0,8);
8000302e:	fc 18 e0 00 	movh	r8,0xe000
80003032:	ef 48 ff fc 	st.w	r7[-4],r8
	for (i = 0; i < 8; i++) {
80003036:	30 08       	mov	r8,0
80003038:	ef 68 ff fb 	st.b	r7[-5],r8
8000303c:	c1 38       	rjmp	80003062 <udd_ctrl_setup_received+0x6a>
		((uint8_t*) &udd_g_ctrlreq.req)[i] = *ptr++;
8000303e:	ef 39 ff fb 	ld.ub	r9,r7[-5]
80003042:	4b f8       	lddpc	r8,8000313c <udd_ctrl_setup_received+0x144>
80003044:	10 09       	add	r9,r8
80003046:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000304a:	11 88       	ld.ub	r8,r8[0x0]
8000304c:	b2 88       	st.b	r9[0x0],r8
8000304e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003052:	2f f8       	sub	r8,-1
80003054:	ef 48 ff fc 	st.w	r7[-4],r8
		udd_ctrl_stall_data();
		udd_ack_setup_received(0);
		return; // Error data number doesn't correspond to SETUP packet
	}
	uint8_t *ptr = (uint8_t *) & udd_get_endpoint_fifo_access(0,8);
	for (i = 0; i < 8; i++) {
80003058:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000305c:	2f f8       	sub	r8,-1
8000305e:	ef 68 ff fb 	st.b	r7[-5],r8
80003062:	ef 39 ff fb 	ld.ub	r9,r7[-5]
80003066:	30 78       	mov	r8,7
80003068:	f0 09 18 00 	cp.b	r9,r8
8000306c:	fe 98 ff e9 	brls	8000303e <udd_ctrl_setup_received+0x46>
		((uint8_t*) &udd_g_ctrlreq.req)[i] = *ptr++;
	}
	// Manage LSB/MSB to fit with CPU usage
	udd_g_ctrlreq.req.wValue = le16_to_cpu(udd_g_ctrlreq.req.wValue);
80003070:	4b 38       	lddpc	r8,8000313c <udd_ctrl_setup_received+0x144>
80003072:	90 18       	ld.sh	r8,r8[0x2]
80003074:	5c 88       	casts.h	r8
80003076:	5c c8       	swap.bh	r8
80003078:	5c 88       	casts.h	r8
8000307a:	4b 19       	lddpc	r9,8000313c <udd_ctrl_setup_received+0x144>
8000307c:	b2 18       	st.h	r9[0x2],r8
	udd_g_ctrlreq.req.wIndex = le16_to_cpu(udd_g_ctrlreq.req.wIndex);
8000307e:	4b 08       	lddpc	r8,8000313c <udd_ctrl_setup_received+0x144>
80003080:	90 28       	ld.sh	r8,r8[0x4]
80003082:	5c 88       	casts.h	r8
80003084:	5c c8       	swap.bh	r8
80003086:	5c 88       	casts.h	r8
80003088:	4a d9       	lddpc	r9,8000313c <udd_ctrl_setup_received+0x144>
8000308a:	b2 28       	st.h	r9[0x4],r8
	udd_g_ctrlreq.req.wLength = le16_to_cpu(udd_g_ctrlreq.req.wLength);
8000308c:	4a c8       	lddpc	r8,8000313c <udd_ctrl_setup_received+0x144>
8000308e:	90 38       	ld.sh	r8,r8[0x6]
80003090:	5c 88       	casts.h	r8
80003092:	5c c8       	swap.bh	r8
80003094:	5c 88       	casts.h	r8
80003096:	4a a9       	lddpc	r9,8000313c <udd_ctrl_setup_received+0x144>
80003098:	b2 38       	st.h	r9[0x6],r8

	// Decode setup request
	if (udc_process_setup() == false) {
8000309a:	f0 1f 00 2a 	mcall	80003140 <udd_ctrl_setup_received+0x148>
8000309e:	18 98       	mov	r8,r12
800030a0:	ec 18 00 01 	eorl	r8,0x1
800030a4:	5c 58       	castu.b	r8
800030a6:	c0 80       	breq	800030b6 <udd_ctrl_setup_received+0xbe>
		// Setup request unknown then stall it
		udd_ctrl_stall_data();
800030a8:	f0 1f 00 24 	mcall	80003138 <udd_ctrl_setup_received+0x140>
		udd_ack_setup_received(0);
800030ac:	fe 68 01 60 	mov	r8,-130720
800030b0:	30 49       	mov	r9,4
800030b2:	91 09       	st.w	r8[0x0],r9
		return;
800030b4:	c3 98       	rjmp	80003126 <udd_ctrl_setup_received+0x12e>
	}
	udd_ack_setup_received(0);
800030b6:	fe 68 01 60 	mov	r8,-130720
800030ba:	30 49       	mov	r9,4
800030bc:	91 09       	st.w	r8[0x0],r9

	if (Udd_setup_is_in()) {
800030be:	4a 08       	lddpc	r8,8000313c <udd_ctrl_setup_received+0x144>
800030c0:	11 88       	ld.ub	r8,r8[0x0]
800030c2:	10 99       	mov	r9,r8
800030c4:	30 08       	mov	r8,0
800030c6:	f0 09 18 00 	cp.b	r9,r8
800030ca:	c0 d4       	brge	800030e4 <udd_ctrl_setup_received+0xec>
		// IN data phase requested
		udd_ctrl_prev_payload_nb_trans = 0;
800030cc:	49 e9       	lddpc	r9,80003144 <udd_ctrl_setup_received+0x14c>
800030ce:	30 08       	mov	r8,0
800030d0:	b2 08       	st.h	r9[0x0],r8
		udd_ctrl_payload_nb_trans = 0;
800030d2:	49 e9       	lddpc	r9,80003148 <udd_ctrl_setup_received+0x150>
800030d4:	30 08       	mov	r8,0
800030d6:	b2 08       	st.h	r9[0x0],r8
		udd_ep_control_state = UDD_EPCTRL_DATA_IN;
800030d8:	49 58       	lddpc	r8,8000312c <udd_ctrl_setup_received+0x134>
800030da:	30 29       	mov	r9,2
800030dc:	91 09       	st.w	r8[0x0],r9
		udd_ctrl_in_sent(); // Send first data transfer
800030de:	f0 1f 00 1c 	mcall	8000314c <udd_ctrl_setup_received+0x154>
800030e2:	c2 28       	rjmp	80003126 <udd_ctrl_setup_received+0x12e>
	} else {
		if (0 == udd_g_ctrlreq.req.wLength) {
800030e4:	49 68       	lddpc	r8,8000313c <udd_ctrl_setup_received+0x144>
800030e6:	90 38       	ld.sh	r8,r8[0x6]
800030e8:	58 08       	cp.w	r8,0
800030ea:	c0 41       	brne	800030f2 <udd_ctrl_setup_received+0xfa>
			// No data phase requested
			// Send IN ZLP to ACK setup request
			udd_ctrl_send_zlp_in();
800030ec:	f0 1f 00 19 	mcall	80003150 <udd_ctrl_setup_received+0x158>
			return;
800030f0:	c1 b8       	rjmp	80003126 <udd_ctrl_setup_received+0x12e>
		}
		// OUT data phase requested
		udd_ctrl_prev_payload_nb_trans = 0;
800030f2:	49 59       	lddpc	r9,80003144 <udd_ctrl_setup_received+0x14c>
800030f4:	30 08       	mov	r8,0
800030f6:	b2 08       	st.h	r9[0x0],r8
		udd_ctrl_payload_nb_trans = 0;
800030f8:	49 49       	lddpc	r9,80003148 <udd_ctrl_setup_received+0x150>
800030fa:	30 08       	mov	r8,0
800030fc:	b2 08       	st.h	r9[0x0],r8
		udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
800030fe:	48 c8       	lddpc	r8,8000312c <udd_ctrl_setup_received+0x134>
80003100:	30 19       	mov	r9,1
80003102:	91 09       	st.w	r8[0x0],r9
		// To detect a protocol error, enable nak interrupt on data IN phase
		udd_ack_nak_in(0);
80003104:	fe 68 01 60 	mov	r8,-130720
80003108:	31 09       	mov	r9,16
8000310a:	91 09       	st.w	r8[0x0],r9
		flags = cpu_irq_save();
8000310c:	f0 1f 00 12 	mcall	80003154 <udd_ctrl_setup_received+0x15c>
80003110:	18 98       	mov	r8,r12
80003112:	ef 48 ff f4 	st.w	r7[-12],r8
		udd_enable_nak_in_interrupt(0);
80003116:	fe 68 01 f0 	mov	r8,-130576
8000311a:	31 09       	mov	r9,16
8000311c:	91 09       	st.w	r8[0x0],r9
		cpu_irq_restore(flags);
8000311e:	ee fc ff f4 	ld.w	r12,r7[-12]
80003122:	f0 1f 00 0e 	mcall	80003158 <udd_ctrl_setup_received+0x160>
	}
}
80003126:	2f dd       	sub	sp,-12
80003128:	e3 cd 80 80 	ldm	sp++,r7,pc
8000312c:	00 00       	add	r0,r0
8000312e:	00 b4       	st.h	r0++,r4
80003130:	80 00       	ld.sh	r0,r0[0x0]
80003132:	36 20       	mov	r0,98
80003134:	80 00       	ld.sh	r0,r0[0x0]
80003136:	2f a0       	sub	r0,-6
80003138:	80 00       	ld.sh	r0,r0[0x0]
8000313a:	35 68       	mov	r8,86
8000313c:	00 00       	add	r0,r0
8000313e:	03 48       	ld.w	r8,--r1
80003140:	80 00       	ld.sh	r0,r0[0x0]
80003142:	55 d4       	stdsp	sp[0x174],r4
80003144:	00 00       	add	r0,r0
80003146:	00 b8       	st.h	r0++,r8
80003148:	00 00       	add	r0,r0
8000314a:	00 ba       	st.h	r0++,r10
8000314c:	80 00       	ld.sh	r0,r0[0x0]
8000314e:	31 5c       	mov	r12,21
80003150:	80 00       	ld.sh	r0,r0[0x0]
80003152:	35 88       	mov	r8,88
80003154:	80 00       	ld.sh	r0,r0[0x0]
80003156:	20 88       	sub	r8,8
80003158:	80 00       	ld.sh	r0,r0[0x0]
8000315a:	20 c8       	sub	r8,12

8000315c <udd_ctrl_in_sent>:


static void udd_ctrl_in_sent(void)
{
8000315c:	eb cd 40 80 	pushm	r7,lr
80003160:	1a 97       	mov	r7,sp
80003162:	20 4d       	sub	sp,16
	uint16_t nb_remain;
	uint8_t i;
	uint8_t *ptr_dest, *ptr_src;
	irqflags_t flags;

	flags = cpu_irq_save();
80003164:	f0 1f 00 5c 	mcall	800032d4 <udd_ctrl_in_sent+0x178>
80003168:	18 98       	mov	r8,r12
8000316a:	ef 48 ff fc 	st.w	r7[-4],r8
	udd_disable_in_send_interrupt(0);
8000316e:	fe 68 02 20 	mov	r8,-130528
80003172:	30 19       	mov	r9,1
80003174:	91 09       	st.w	r8[0x0],r9
	cpu_irq_restore(flags);
80003176:	ee fc ff fc 	ld.w	r12,r7[-4]
8000317a:	f0 1f 00 58 	mcall	800032d8 <udd_ctrl_in_sent+0x17c>

	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
8000317e:	4d 88       	lddpc	r8,800032dc <udd_ctrl_in_sent+0x180>
80003180:	70 08       	ld.w	r8,r8[0x0]
80003182:	58 38       	cp.w	r8,3
80003184:	c0 61       	brne	80003190 <udd_ctrl_in_sent+0x34>
		// ZLP on IN is sent, then valid end of setup request
		udd_ctrl_endofrequest();
80003186:	f0 1f 00 57 	mcall	800032e0 <udd_ctrl_in_sent+0x184>
		// Reinitializes control endpoint management
		udd_ctrl_init();
8000318a:	f0 1f 00 57 	mcall	800032e4 <udd_ctrl_in_sent+0x188>
		return;
8000318e:	c9 f8       	rjmp	800032cc <udd_ctrl_in_sent+0x170>
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_IN);

	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
80003190:	4d 68       	lddpc	r8,800032e8 <udd_ctrl_in_sent+0x18c>
80003192:	90 69       	ld.sh	r9,r8[0xc]
80003194:	4d 68       	lddpc	r8,800032ec <udd_ctrl_in_sent+0x190>
80003196:	90 08       	ld.sh	r8,r8[0x0]
80003198:	10 19       	sub	r9,r8
8000319a:	ef 59 ff f0 	st.h	r7[-16],r9
	if (0 == nb_remain) {
8000319e:	ef 09 ff f0 	ld.sh	r9,r7[-16]
800031a2:	30 08       	mov	r8,0
800031a4:	f0 09 19 00 	cp.h	r9,r8
800031a8:	c2 b1       	brne	800031fe <udd_ctrl_in_sent+0xa2>
		// All content of current buffer payload are sent
		// Update number of total data sending by previous payload buffer
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
800031aa:	4d 28       	lddpc	r8,800032f0 <udd_ctrl_in_sent+0x194>
800031ac:	90 09       	ld.sh	r9,r8[0x0]
800031ae:	4d 08       	lddpc	r8,800032ec <udd_ctrl_in_sent+0x190>
800031b0:	90 08       	ld.sh	r8,r8[0x0]
800031b2:	f2 08 00 08 	add	r8,r9,r8
800031b6:	5c 88       	casts.h	r8
800031b8:	4c e9       	lddpc	r9,800032f0 <udd_ctrl_in_sent+0x194>
800031ba:	b2 08       	st.h	r9[0x0],r8
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_nb_trans)
800031bc:	4c b8       	lddpc	r8,800032e8 <udd_ctrl_in_sent+0x18c>
800031be:	90 39       	ld.sh	r9,r8[0x6]
800031c0:	4c c8       	lddpc	r8,800032f0 <udd_ctrl_in_sent+0x194>
800031c2:	90 08       	ld.sh	r8,r8[0x0]
800031c4:	f0 09 19 00 	cp.h	r9,r8
800031c8:	c0 50       	breq	800031d2 <udd_ctrl_in_sent+0x76>
800031ca:	4c b8       	lddpc	r8,800032f4 <udd_ctrl_in_sent+0x198>
800031cc:	11 88       	ld.ub	r8,r8[0x0]
800031ce:	58 08       	cp.w	r8,0
800031d0:	c0 40       	breq	800031d8 <udd_ctrl_in_sent+0x7c>
					|| b_shortpacket) {
			// All data requested are transfered or a short packet has been sent
			// then it is the end of data phase.
			// Generate an OUT ZLP for handshake phase.
			udd_ctrl_send_zlp_out();
800031d2:	f0 1f 00 4a 	mcall	800032f8 <udd_ctrl_in_sent+0x19c>
			return;
800031d6:	c7 b8       	rjmp	800032cc <udd_ctrl_in_sent+0x170>
		}
		// Need of new buffer because the data phase is not complete
		if ((!udd_g_ctrlreq.over_under_run)
800031d8:	4c 48       	lddpc	r8,800032e8 <udd_ctrl_in_sent+0x18c>
800031da:	70 58       	ld.w	r8,r8[0x14]
800031dc:	58 08       	cp.w	r8,0
800031de:	c1 00       	breq	800031fe <udd_ctrl_in_sent+0xa2>
800031e0:	4c 28       	lddpc	r8,800032e8 <udd_ctrl_in_sent+0x18c>
800031e2:	70 58       	ld.w	r8,r8[0x14]
800031e4:	5d 18       	icall	r8
800031e6:	18 98       	mov	r8,r12
800031e8:	ec 18 00 01 	eorl	r8,0x1
800031ec:	5c 58       	castu.b	r8
800031ee:	c0 81       	brne	800031fe <udd_ctrl_in_sent+0xa2>
				|| (!udd_g_ctrlreq.over_under_run())) {
			// Underrun then send zlp on IN
			// Here nb_remain=0 and allows to send a IN ZLP
		} else {
			// A new payload buffer is given
			udd_ctrl_payload_nb_trans = 0;
800031f0:	4b f9       	lddpc	r9,800032ec <udd_ctrl_in_sent+0x190>
800031f2:	30 08       	mov	r8,0
800031f4:	b2 08       	st.h	r9[0x0],r8
			nb_remain = udd_g_ctrlreq.payload_size;
800031f6:	4b d8       	lddpc	r8,800032e8 <udd_ctrl_in_sent+0x18c>
800031f8:	90 68       	ld.sh	r8,r8[0xc]
800031fa:	ef 58 ff f0 	st.h	r7[-16],r8
		}
	}
	// Continue transfer and send next data
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
800031fe:	ef 09 ff f0 	ld.sh	r9,r7[-16]
80003202:	33 f8       	mov	r8,63
80003204:	f0 09 19 00 	cp.h	r9,r8
80003208:	e0 88 00 09 	brls	8000321a <udd_ctrl_in_sent+0xbe>
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
8000320c:	34 08       	mov	r8,64
8000320e:	ef 58 ff f0 	st.h	r7[-16],r8
		b_shortpacket = false;
80003212:	4b 99       	lddpc	r9,800032f4 <udd_ctrl_in_sent+0x198>
80003214:	30 08       	mov	r8,0
80003216:	b2 88       	st.b	r9[0x0],r8
80003218:	c0 48       	rjmp	80003220 <udd_ctrl_in_sent+0xc4>
	} else {
		b_shortpacket = true;
8000321a:	4b 79       	lddpc	r9,800032f4 <udd_ctrl_in_sent+0x198>
8000321c:	30 18       	mov	r8,1
8000321e:	b2 88       	st.b	r9[0x0],r8
	}
	// Fill buffer of endpoint control
	ptr_dest = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
80003220:	fc 18 e0 00 	movh	r8,0xe000
80003224:	ef 48 ff f4 	st.w	r7[-12],r8
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
80003228:	4b 08       	lddpc	r8,800032e8 <udd_ctrl_in_sent+0x18c>
8000322a:	70 29       	ld.w	r9,r8[0x8]
8000322c:	4b 08       	lddpc	r8,800032ec <udd_ctrl_in_sent+0x190>
8000322e:	90 08       	ld.sh	r8,r8[0x0]
80003230:	5c 78       	castu.h	r8
80003232:	f2 08 00 08 	add	r8,r9,r8
80003236:	ef 48 ff f8 	st.w	r7[-8],r8
	// The IN data don't must be written in endpoint 0 DPRAM during
	// a next setup reception in same endpoint 0 DPRAM.
	// Thereby, an OUT ZLP reception must check before IN data write
	// and if no OUT ZLP is received the data must be written quickly (800us)
	// before an eventually ZLP OUT and SETUP reception
	flags = cpu_irq_save();
8000323a:	f0 1f 00 27 	mcall	800032d4 <udd_ctrl_in_sent+0x178>
8000323e:	18 98       	mov	r8,r12
80003240:	ef 48 ff fc 	st.w	r7[-4],r8
	if (Is_udd_out_received(0)) {
80003244:	fe 68 01 30 	mov	r8,-130768
80003248:	70 08       	ld.w	r8,r8[0x0]
8000324a:	e2 18 00 02 	andl	r8,0x2,COH
8000324e:	c0 90       	breq	80003260 <udd_ctrl_in_sent+0x104>
		// IN DATA phase aborted by OUT ZLP
		cpu_irq_restore(flags);
80003250:	ee fc ff fc 	ld.w	r12,r7[-4]
80003254:	f0 1f 00 21 	mcall	800032d8 <udd_ctrl_in_sent+0x17c>
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
80003258:	4a 18       	lddpc	r8,800032dc <udd_ctrl_in_sent+0x180>
8000325a:	30 49       	mov	r9,4
8000325c:	91 09       	st.w	r8[0x0],r9
		return; // Exit of IN DATA phase
8000325e:	c3 78       	rjmp	800032cc <udd_ctrl_in_sent+0x170>
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
80003260:	30 08       	mov	r8,0
80003262:	ef 68 ff f3 	st.b	r7[-13],r8
80003266:	c1 68       	rjmp	80003292 <udd_ctrl_in_sent+0x136>
		*ptr_dest++ = *ptr_src++;
80003268:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000326c:	11 88       	ld.ub	r8,r8[0x0]
8000326e:	ee f9 ff f4 	ld.w	r9,r7[-12]
80003272:	b2 88       	st.b	r9[0x0],r8
80003274:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003278:	2f f8       	sub	r8,-1
8000327a:	ef 48 ff f4 	st.w	r7[-12],r8
8000327e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003282:	2f f8       	sub	r8,-1
80003284:	ef 48 ff f8 	st.w	r7[-8],r8
		cpu_irq_restore(flags);
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
		return; // Exit of IN DATA phase
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
80003288:	ef 38 ff f3 	ld.ub	r8,r7[-13]
8000328c:	2f f8       	sub	r8,-1
8000328e:	ef 68 ff f3 	st.b	r7[-13],r8
80003292:	ef 38 ff f3 	ld.ub	r8,r7[-13]
80003296:	ef 09 ff f0 	ld.sh	r9,r7[-16]
8000329a:	f0 09 19 00 	cp.h	r9,r8
8000329e:	fe 9b ff e5 	brhi	80003268 <udd_ctrl_in_sent+0x10c>
		*ptr_dest++ = *ptr_src++;
	}
	udd_ctrl_payload_nb_trans += nb_remain;
800032a2:	49 38       	lddpc	r8,800032ec <udd_ctrl_in_sent+0x190>
800032a4:	90 08       	ld.sh	r8,r8[0x0]
800032a6:	ef 09 ff f0 	ld.sh	r9,r7[-16]
800032aa:	f2 08 00 08 	add	r8,r9,r8
800032ae:	5c 88       	casts.h	r8
800032b0:	48 f9       	lddpc	r9,800032ec <udd_ctrl_in_sent+0x190>
800032b2:	b2 08       	st.h	r9[0x0],r8

	// Validate and send the data available in the control endpoint buffer
	udd_ack_in_send(0);
800032b4:	fe 68 01 60 	mov	r8,-130720
800032b8:	30 19       	mov	r9,1
800032ba:	91 09       	st.w	r8[0x0],r9
	udd_enable_in_send_interrupt(0);
800032bc:	fe 68 01 f0 	mov	r8,-130576
800032c0:	30 19       	mov	r9,1
800032c2:	91 09       	st.w	r8[0x0],r9
	// In case of abort of DATA IN phase, no need to enable nak OUT interrupt
	// because OUT endpoint is already free and ZLP OUT accepted.
	cpu_irq_restore(flags);
800032c4:	ee fc ff fc 	ld.w	r12,r7[-4]
800032c8:	f0 1f 00 04 	mcall	800032d8 <udd_ctrl_in_sent+0x17c>
}
800032cc:	2f cd       	sub	sp,-16
800032ce:	e3 cd 80 80 	ldm	sp++,r7,pc
800032d2:	00 00       	add	r0,r0
800032d4:	80 00       	ld.sh	r0,r0[0x0]
800032d6:	20 88       	sub	r8,8
800032d8:	80 00       	ld.sh	r0,r0[0x0]
800032da:	20 c8       	sub	r8,12
800032dc:	00 00       	add	r0,r0
800032de:	00 b4       	st.h	r0++,r4
800032e0:	80 00       	ld.sh	r0,r0[0x0]
800032e2:	36 20       	mov	r0,98
800032e4:	80 00       	ld.sh	r0,r0[0x0]
800032e6:	2f a0       	sub	r0,-6
800032e8:	00 00       	add	r0,r0
800032ea:	03 48       	ld.w	r8,--r1
800032ec:	00 00       	add	r0,r0
800032ee:	00 ba       	st.h	r0++,r10
800032f0:	00 00       	add	r0,r0
800032f2:	00 b8       	st.h	r0++,r8
800032f4:	00 00       	add	r0,r0
800032f6:	00 f8       	st.b	--r0,r8
800032f8:	80 00       	ld.sh	r0,r0[0x0]
800032fa:	35 dc       	mov	r12,93

800032fc <udd_ctrl_out_received>:


static void udd_ctrl_out_received(void)
{
800032fc:	eb cd 40 80 	pushm	r7,lr
80003300:	1a 97       	mov	r7,sp
80003302:	20 4d       	sub	sp,16
	irqflags_t flags;
	uint8_t i;
	uint16_t nb_data;

	if (UDD_EPCTRL_DATA_OUT != udd_ep_control_state) {
80003304:	4f 18       	lddpc	r8,800034c8 <udd_ctrl_out_received+0x1cc>
80003306:	70 08       	ld.w	r8,r8[0x0]
80003308:	58 18       	cp.w	r8,1
8000330a:	c1 10       	breq	8000332c <udd_ctrl_out_received+0x30>
		if ((UDD_EPCTRL_DATA_IN == udd_ep_control_state)
8000330c:	4e f8       	lddpc	r8,800034c8 <udd_ctrl_out_received+0x1cc>
8000330e:	70 08       	ld.w	r8,r8[0x0]
80003310:	58 28       	cp.w	r8,2
80003312:	c0 50       	breq	8000331c <udd_ctrl_out_received+0x20>
				|| (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP ==
80003314:	4e d8       	lddpc	r8,800034c8 <udd_ctrl_out_received+0x1cc>
80003316:	70 08       	ld.w	r8,r8[0x0]
	irqflags_t flags;
	uint8_t i;
	uint16_t nb_data;

	if (UDD_EPCTRL_DATA_OUT != udd_ep_control_state) {
		if ((UDD_EPCTRL_DATA_IN == udd_ep_control_state)
80003318:	58 48       	cp.w	r8,4
8000331a:	c0 41       	brne	80003322 <udd_ctrl_out_received+0x26>
						udd_ep_control_state)) {
			// End of SETUP request:
			// - Data IN Phase aborted,
			// - or last Data IN Phase hidden by ZLP OUT sending quickly,
			// - or ZLP OUT received normally.
			udd_ctrl_endofrequest();
8000331c:	f0 1f 00 6c 	mcall	800034cc <udd_ctrl_out_received+0x1d0>
	irqflags_t flags;
	uint8_t i;
	uint16_t nb_data;

	if (UDD_EPCTRL_DATA_OUT != udd_ep_control_state) {
		if ((UDD_EPCTRL_DATA_IN == udd_ep_control_state)
80003320:	c0 38       	rjmp	80003326 <udd_ctrl_out_received+0x2a>
			// - or last Data IN Phase hidden by ZLP OUT sending quickly,
			// - or ZLP OUT received normally.
			udd_ctrl_endofrequest();
		} else {
			// Protocol error during SETUP request
			udd_ctrl_stall_data();
80003322:	f0 1f 00 6c 	mcall	800034d0 <udd_ctrl_out_received+0x1d4>
		}
		// Reinitializes control endpoint management
		udd_ctrl_init();
80003326:	f0 1f 00 6c 	mcall	800034d4 <udd_ctrl_out_received+0x1d8>
		return;
8000332a:	cc b8       	rjmp	800034c0 <udd_ctrl_out_received+0x1c4>
	}
	// Read data received during OUT phase
	nb_data = udd_byte_count(0);
8000332c:	fe 68 01 30 	mov	r8,-130768
80003330:	70 08       	ld.w	r8,r8[0x0]
80003332:	e6 18 7f f0 	andh	r8,0x7ff0,COH
80003336:	b5 88       	lsr	r8,0x14
80003338:	ef 58 ff f6 	st.h	r7[-10],r8
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
8000333c:	4e 78       	lddpc	r8,800034d8 <udd_ctrl_out_received+0x1dc>
8000333e:	90 68       	ld.sh	r8,r8[0xc]
80003340:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
80003344:	4e 68       	lddpc	r8,800034dc <udd_ctrl_out_received+0x1e0>
80003346:	90 08       	ld.sh	r8,r8[0x0]
80003348:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
8000334c:	ef 18 ff f6 	ld.uh	r8,r7[-10]
80003350:	f4 08 00 08 	add	r8,r10,r8
80003354:	10 39       	cp.w	r9,r8
80003356:	c0 84       	brge	80003366 <udd_ctrl_out_received+0x6a>
		// Payload buffer too small
		nb_data = udd_g_ctrlreq.payload_size -
80003358:	4e 08       	lddpc	r8,800034d8 <udd_ctrl_out_received+0x1dc>
8000335a:	90 69       	ld.sh	r9,r8[0xc]
8000335c:	4e 08       	lddpc	r8,800034dc <udd_ctrl_out_received+0x1e0>
8000335e:	90 08       	ld.sh	r8,r8[0x0]
80003360:	10 19       	sub	r9,r8
80003362:	ef 59 ff f6 	st.h	r7[-10],r9
				udd_ctrl_payload_nb_trans;
	}
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
80003366:	fc 18 e0 00 	movh	r8,0xe000
8000336a:	ef 48 ff f8 	st.w	r7[-8],r8
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
8000336e:	4d b8       	lddpc	r8,800034d8 <udd_ctrl_out_received+0x1dc>
80003370:	70 29       	ld.w	r9,r8[0x8]
80003372:	4d b8       	lddpc	r8,800034dc <udd_ctrl_out_received+0x1e0>
80003374:	90 08       	ld.sh	r8,r8[0x0]
80003376:	5c 78       	castu.h	r8
80003378:	f2 08 00 08 	add	r8,r9,r8
8000337c:	ef 48 ff fc 	st.w	r7[-4],r8
	for (i = 0; i < nb_data; i++) {
80003380:	30 08       	mov	r8,0
80003382:	ef 68 ff f5 	st.b	r7[-11],r8
80003386:	c1 68       	rjmp	800033b2 <udd_ctrl_out_received+0xb6>
		*ptr_dest++ = *ptr_src++;
80003388:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000338c:	11 88       	ld.ub	r8,r8[0x0]
8000338e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80003392:	b2 88       	st.b	r9[0x0],r8
80003394:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003398:	2f f8       	sub	r8,-1
8000339a:	ef 48 ff fc 	st.w	r7[-4],r8
8000339e:	ee f8 ff f8 	ld.w	r8,r7[-8]
800033a2:	2f f8       	sub	r8,-1
800033a4:	ef 48 ff f8 	st.w	r7[-8],r8
		nb_data = udd_g_ctrlreq.payload_size -
				udd_ctrl_payload_nb_trans;
	}
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
	for (i = 0; i < nb_data; i++) {
800033a8:	ef 38 ff f5 	ld.ub	r8,r7[-11]
800033ac:	2f f8       	sub	r8,-1
800033ae:	ef 68 ff f5 	st.b	r7[-11],r8
800033b2:	ef 38 ff f5 	ld.ub	r8,r7[-11]
800033b6:	ef 09 ff f6 	ld.sh	r9,r7[-10]
800033ba:	f0 09 19 00 	cp.h	r9,r8
800033be:	fe 9b ff e5 	brhi	80003388 <udd_ctrl_out_received+0x8c>
		*ptr_dest++ = *ptr_src++;
	}
	udd_ctrl_payload_nb_trans += nb_data;
800033c2:	4c 78       	lddpc	r8,800034dc <udd_ctrl_out_received+0x1e0>
800033c4:	90 08       	ld.sh	r8,r8[0x0]
800033c6:	ef 09 ff f6 	ld.sh	r9,r7[-10]
800033ca:	f2 08 00 08 	add	r8,r9,r8
800033ce:	5c 88       	casts.h	r8
800033d0:	4c 39       	lddpc	r9,800034dc <udd_ctrl_out_received+0x1e0>
800033d2:	b2 08       	st.h	r9[0x0],r8

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
800033d4:	ef 09 ff f6 	ld.sh	r9,r7[-10]
800033d8:	34 08       	mov	r8,64
800033da:	f0 09 19 00 	cp.h	r9,r8
800033de:	c1 11       	brne	80003400 <udd_ctrl_out_received+0x104>
			|| (udd_g_ctrlreq.req.wLength <=
800033e0:	4b e8       	lddpc	r8,800034d8 <udd_ctrl_out_received+0x1dc>
800033e2:	90 38       	ld.sh	r8,r8[0x6]
800033e4:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
					(udd_ctrl_prev_payload_nb_trans +
800033e8:	4b e8       	lddpc	r8,800034e0 <udd_ctrl_out_received+0x1e4>
800033ea:	90 08       	ld.sh	r8,r8[0x0]
800033ec:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
800033f0:	4b b8       	lddpc	r8,800034dc <udd_ctrl_out_received+0x1e0>
800033f2:	90 08       	ld.sh	r8,r8[0x0]
800033f4:	5c 78       	castu.h	r8
800033f6:	f4 08 00 08 	add	r8,r10,r8
	for (i = 0; i < nb_data; i++) {
		*ptr_dest++ = *ptr_src++;
	}
	udd_ctrl_payload_nb_trans += nb_data;

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
800033fa:	10 39       	cp.w	r9,r8
800033fc:	e0 89 00 20 	brgt	8000343c <udd_ctrl_out_received+0x140>
							udd_ctrl_payload_nb_trans)))
	{
		// End of reception because it is a short packet
		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
80003400:	4b 78       	lddpc	r8,800034dc <udd_ctrl_out_received+0x1e0>
80003402:	90 08       	ld.sh	r8,r8[0x0]
80003404:	4b 59       	lddpc	r9,800034d8 <udd_ctrl_out_received+0x1dc>
80003406:	b2 68       	st.h	r9[0xc],r8
		if (NULL != udd_g_ctrlreq.over_under_run) {
80003408:	4b 48       	lddpc	r8,800034d8 <udd_ctrl_out_received+0x1dc>
8000340a:	70 58       	ld.w	r8,r8[0x14]
8000340c:	58 08       	cp.w	r8,0
8000340e:	c1 00       	breq	8000342e <udd_ctrl_out_received+0x132>
			if (!udd_g_ctrlreq.over_under_run()) {
80003410:	4b 28       	lddpc	r8,800034d8 <udd_ctrl_out_received+0x1dc>
80003412:	70 58       	ld.w	r8,r8[0x14]
80003414:	5d 18       	icall	r8
80003416:	18 98       	mov	r8,r12
80003418:	ec 18 00 01 	eorl	r8,0x1
8000341c:	5c 58       	castu.b	r8
8000341e:	c0 80       	breq	8000342e <udd_ctrl_out_received+0x132>
				// Stall ZLP
				udd_ctrl_stall_data();
80003420:	f0 1f 00 2c 	mcall	800034d0 <udd_ctrl_out_received+0x1d4>
				// Ack reception of OUT to replace NAK by a STALL
				udd_ack_out_received(0);
80003424:	fe 68 01 60 	mov	r8,-130720
80003428:	30 29       	mov	r9,2
8000342a:	91 09       	st.w	r8[0x0],r9
				return;
8000342c:	c4 a8       	rjmp	800034c0 <udd_ctrl_out_received+0x1c4>
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ack_out_received(0);
8000342e:	fe 68 01 60 	mov	r8,-130720
80003432:	30 29       	mov	r9,2
80003434:	91 09       	st.w	r8[0x0],r9
		udd_ctrl_send_zlp_in();
80003436:	f0 1f 00 2c 	mcall	800034e4 <udd_ctrl_out_received+0x1e8>
		return;
8000343a:	c4 38       	rjmp	800034c0 <udd_ctrl_out_received+0x1c4>
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
8000343c:	4a 78       	lddpc	r8,800034d8 <udd_ctrl_out_received+0x1dc>
8000343e:	90 69       	ld.sh	r9,r8[0xc]
80003440:	4a 78       	lddpc	r8,800034dc <udd_ctrl_out_received+0x1e0>
80003442:	90 08       	ld.sh	r8,r8[0x0]
80003444:	f0 09 19 00 	cp.h	r9,r8
80003448:	c2 71       	brne	80003496 <udd_ctrl_out_received+0x19a>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
8000344a:	4a 48       	lddpc	r8,800034d8 <udd_ctrl_out_received+0x1dc>
8000344c:	70 58       	ld.w	r8,r8[0x14]
8000344e:	58 08       	cp.w	r8,0
80003450:	c0 81       	brne	80003460 <udd_ctrl_out_received+0x164>
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
80003452:	f0 1f 00 20 	mcall	800034d0 <udd_ctrl_out_received+0x1d4>
			// Ack reception of OUT to replace NAK by a STALL
			udd_ack_out_received(0);
80003456:	fe 68 01 60 	mov	r8,-130720
8000345a:	30 29       	mov	r9,2
8000345c:	91 09       	st.w	r8[0x0],r9
			return;
8000345e:	c3 18       	rjmp	800034c0 <udd_ctrl_out_received+0x1c4>
		}
		if (!udd_g_ctrlreq.over_under_run()) {
80003460:	49 e8       	lddpc	r8,800034d8 <udd_ctrl_out_received+0x1dc>
80003462:	70 58       	ld.w	r8,r8[0x14]
80003464:	5d 18       	icall	r8
80003466:	18 98       	mov	r8,r12
80003468:	ec 18 00 01 	eorl	r8,0x1
8000346c:	5c 58       	castu.b	r8
8000346e:	c0 80       	breq	8000347e <udd_ctrl_out_received+0x182>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
80003470:	f0 1f 00 18 	mcall	800034d0 <udd_ctrl_out_received+0x1d4>
			// Ack reception of OUT to replace NAK by a STALL
			udd_ack_out_received(0);
80003474:	fe 68 01 60 	mov	r8,-130720
80003478:	30 29       	mov	r9,2
8000347a:	91 09       	st.w	r8[0x0],r9
			return;
8000347c:	c2 28       	rjmp	800034c0 <udd_ctrl_out_received+0x1c4>
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
8000347e:	49 98       	lddpc	r8,800034e0 <udd_ctrl_out_received+0x1e4>
80003480:	90 09       	ld.sh	r9,r8[0x0]
80003482:	49 78       	lddpc	r8,800034dc <udd_ctrl_out_received+0x1e0>
80003484:	90 08       	ld.sh	r8,r8[0x0]
80003486:	f2 08 00 08 	add	r8,r9,r8
8000348a:	5c 88       	casts.h	r8
8000348c:	49 59       	lddpc	r9,800034e0 <udd_ctrl_out_received+0x1e4>
8000348e:	b2 08       	st.h	r9[0x0],r8
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
80003490:	49 39       	lddpc	r9,800034dc <udd_ctrl_out_received+0x1e0>
80003492:	30 08       	mov	r8,0
80003494:	b2 08       	st.h	r9[0x0],r8
	}
	// Free buffer of control endpoint to authorize next reception
	udd_ack_out_received(0);
80003496:	fe 68 01 60 	mov	r8,-130720
8000349a:	30 29       	mov	r9,2
8000349c:	91 09       	st.w	r8[0x0],r9
	// To detect a protocol error, enable nak interrupt on data IN phase
	udd_ack_nak_in(0);
8000349e:	fe 68 01 60 	mov	r8,-130720
800034a2:	31 09       	mov	r9,16
800034a4:	91 09       	st.w	r8[0x0],r9
	flags = cpu_irq_save();
800034a6:	f0 1f 00 11 	mcall	800034e8 <udd_ctrl_out_received+0x1ec>
800034aa:	18 98       	mov	r8,r12
800034ac:	ef 48 ff f0 	st.w	r7[-16],r8
	udd_enable_nak_in_interrupt(0);
800034b0:	fe 68 01 f0 	mov	r8,-130576
800034b4:	31 09       	mov	r9,16
800034b6:	91 09       	st.w	r8[0x0],r9
	cpu_irq_restore(flags);
800034b8:	ee fc ff f0 	ld.w	r12,r7[-16]
800034bc:	f0 1f 00 0c 	mcall	800034ec <udd_ctrl_out_received+0x1f0>
}
800034c0:	2f cd       	sub	sp,-16
800034c2:	e3 cd 80 80 	ldm	sp++,r7,pc
800034c6:	00 00       	add	r0,r0
800034c8:	00 00       	add	r0,r0
800034ca:	00 b4       	st.h	r0++,r4
800034cc:	80 00       	ld.sh	r0,r0[0x0]
800034ce:	36 20       	mov	r0,98
800034d0:	80 00       	ld.sh	r0,r0[0x0]
800034d2:	35 68       	mov	r8,86
800034d4:	80 00       	ld.sh	r0,r0[0x0]
800034d6:	2f a0       	sub	r0,-6
800034d8:	00 00       	add	r0,r0
800034da:	03 48       	ld.w	r8,--r1
800034dc:	00 00       	add	r0,r0
800034de:	00 ba       	st.h	r0++,r10
800034e0:	00 00       	add	r0,r0
800034e2:	00 b8       	st.h	r0++,r8
800034e4:	80 00       	ld.sh	r0,r0[0x0]
800034e6:	35 88       	mov	r8,88
800034e8:	80 00       	ld.sh	r0,r0[0x0]
800034ea:	20 88       	sub	r8,8
800034ec:	80 00       	ld.sh	r0,r0[0x0]
800034ee:	20 c8       	sub	r8,12

800034f0 <udd_ctrl_underflow>:


static void udd_ctrl_underflow(void)
{
800034f0:	eb cd 40 80 	pushm	r7,lr
800034f4:	1a 97       	mov	r7,sp
	if (Is_udd_out_received(0))
800034f6:	fe 68 01 30 	mov	r8,-130768
800034fa:	70 08       	ld.w	r8,r8[0x0]
800034fc:	e2 18 00 02 	andl	r8,0x2,COH
80003500:	c1 21       	brne	80003524 <udd_ctrl_underflow+0x34>
		return; // underflow ignored if OUT data is received

	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
80003502:	48 b8       	lddpc	r8,8000352c <udd_ctrl_underflow+0x3c>
80003504:	70 08       	ld.w	r8,r8[0x0]
80003506:	58 18       	cp.w	r8,1
80003508:	c0 41       	brne	80003510 <udd_ctrl_underflow+0x20>
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
8000350a:	f0 1f 00 0a 	mcall	80003530 <udd_ctrl_underflow+0x40>
8000350e:	c0 c8       	rjmp	80003526 <udd_ctrl_underflow+0x36>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
80003510:	48 78       	lddpc	r8,8000352c <udd_ctrl_underflow+0x3c>
80003512:	70 08       	ld.w	r8,r8[0x0]
80003514:	58 48       	cp.w	r8,4
80003516:	c0 81       	brne	80003526 <udd_ctrl_underflow+0x36>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data
		udd_enable_stall_handshake(0);
80003518:	fe 68 01 f0 	mov	r8,-130576
8000351c:	e8 69 00 00 	mov	r9,524288
80003520:	91 09       	st.w	r8[0x0],r9
80003522:	c0 28       	rjmp	80003526 <udd_ctrl_underflow+0x36>


static void udd_ctrl_underflow(void)
{
	if (Is_udd_out_received(0))
		return; // underflow ignored if OUT data is received
80003524:	d7 03       	nop
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data
		udd_enable_stall_handshake(0);
	}
}
80003526:	e3 cd 80 80 	ldm	sp++,r7,pc
8000352a:	00 00       	add	r0,r0
8000352c:	00 00       	add	r0,r0
8000352e:	00 b4       	st.h	r0++,r4
80003530:	80 00       	ld.sh	r0,r0[0x0]
80003532:	35 88       	mov	r8,88

80003534 <udd_ctrl_overflow>:


static void udd_ctrl_overflow(void)
{
80003534:	eb cd 40 80 	pushm	r7,lr
80003538:	1a 97       	mov	r7,sp
	if (Is_udd_in_send(0))
8000353a:	fe 68 01 30 	mov	r8,-130768
8000353e:	70 08       	ld.w	r8,r8[0x0]
80003540:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80003544:	5c 58       	castu.b	r8
80003546:	c0 b1       	brne	8000355c <udd_ctrl_overflow+0x28>
		return; // overflow ignored if IN data is received

	// The case of UDD_EPCTRL_DATA_IN is not managed
	// because the OUT endpoint is already free and OUT ZLP accepted

	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
80003548:	48 78       	lddpc	r8,80003564 <udd_ctrl_overflow+0x30>
8000354a:	70 08       	ld.w	r8,r8[0x0]
8000354c:	58 38       	cp.w	r8,3
8000354e:	c0 81       	brne	8000355e <udd_ctrl_overflow+0x2a>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data
		udd_enable_stall_handshake(0);
80003550:	fe 68 01 f0 	mov	r8,-130576
80003554:	e8 69 00 00 	mov	r9,524288
80003558:	91 09       	st.w	r8[0x0],r9
8000355a:	c0 28       	rjmp	8000355e <udd_ctrl_overflow+0x2a>


static void udd_ctrl_overflow(void)
{
	if (Is_udd_in_send(0))
		return; // overflow ignored if IN data is received
8000355c:	d7 03       	nop
	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data
		udd_enable_stall_handshake(0);
	}
}
8000355e:	e3 cd 80 80 	ldm	sp++,r7,pc
80003562:	00 00       	add	r0,r0
80003564:	00 00       	add	r0,r0
80003566:	00 b4       	st.h	r0++,r4

80003568 <udd_ctrl_stall_data>:


static void udd_ctrl_stall_data(void)
{
80003568:	eb cd 40 80 	pushm	r7,lr
8000356c:	1a 97       	mov	r7,sp
	// Stall all packets on IN & OUT control endpoint
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
8000356e:	48 68       	lddpc	r8,80003584 <udd_ctrl_stall_data+0x1c>
80003570:	30 59       	mov	r9,5
80003572:	91 09       	st.w	r8[0x0],r9
	udd_enable_stall_handshake(0);
80003574:	fe 68 01 f0 	mov	r8,-130576
80003578:	e8 69 00 00 	mov	r9,524288
8000357c:	91 09       	st.w	r8[0x0],r9
}
8000357e:	e3 cd 80 80 	ldm	sp++,r7,pc
80003582:	00 00       	add	r0,r0
80003584:	00 00       	add	r0,r0
80003586:	00 b4       	st.h	r0++,r4

80003588 <udd_ctrl_send_zlp_in>:


static void udd_ctrl_send_zlp_in(void)
{
80003588:	eb cd 40 80 	pushm	r7,lr
8000358c:	1a 97       	mov	r7,sp
8000358e:	20 1d       	sub	sp,4
	irqflags_t flags;

	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
80003590:	49 08       	lddpc	r8,800035d0 <udd_ctrl_send_zlp_in+0x48>
80003592:	30 39       	mov	r9,3
80003594:	91 09       	st.w	r8[0x0],r9

	// Validate and send empty IN packet on control endpoint
	flags = cpu_irq_save();
80003596:	f0 1f 00 10 	mcall	800035d4 <udd_ctrl_send_zlp_in+0x4c>
8000359a:	18 98       	mov	r8,r12
8000359c:	ef 48 ff fc 	st.w	r7[-4],r8
	// Send ZLP on IN endpoint
	udd_ack_in_send(0);
800035a0:	fe 68 01 60 	mov	r8,-130720
800035a4:	30 19       	mov	r9,1
800035a6:	91 09       	st.w	r8[0x0],r9
	udd_enable_in_send_interrupt(0);
800035a8:	fe 68 01 f0 	mov	r8,-130576
800035ac:	30 19       	mov	r9,1
800035ae:	91 09       	st.w	r8[0x0],r9
	// To detect a protocol error, enable nak interrupt on data OUT phase
	udd_ack_nak_out(0);
800035b0:	fe 68 01 60 	mov	r8,-130720
800035b4:	30 89       	mov	r9,8
800035b6:	91 09       	st.w	r8[0x0],r9
	udd_enable_nak_out_interrupt(0);
800035b8:	fe 68 01 f0 	mov	r8,-130576
800035bc:	30 89       	mov	r9,8
800035be:	91 09       	st.w	r8[0x0],r9
	cpu_irq_restore(flags);
800035c0:	ee fc ff fc 	ld.w	r12,r7[-4]
800035c4:	f0 1f 00 05 	mcall	800035d8 <udd_ctrl_send_zlp_in+0x50>
}
800035c8:	2f fd       	sub	sp,-4
800035ca:	e3 cd 80 80 	ldm	sp++,r7,pc
800035ce:	00 00       	add	r0,r0
800035d0:	00 00       	add	r0,r0
800035d2:	00 b4       	st.h	r0++,r4
800035d4:	80 00       	ld.sh	r0,r0[0x0]
800035d6:	20 88       	sub	r8,8
800035d8:	80 00       	ld.sh	r0,r0[0x0]
800035da:	20 c8       	sub	r8,12

800035dc <udd_ctrl_send_zlp_out>:


static void udd_ctrl_send_zlp_out(void)
{
800035dc:	eb cd 40 80 	pushm	r7,lr
800035e0:	1a 97       	mov	r7,sp
800035e2:	20 1d       	sub	sp,4
	irqflags_t flags;

	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
800035e4:	48 c8       	lddpc	r8,80003614 <udd_ctrl_send_zlp_out+0x38>
800035e6:	30 49       	mov	r9,4
800035e8:	91 09       	st.w	r8[0x0],r9
	// No action is necessary to accept OUT ZLP
	// because the buffer of control endpoint is already free

	// To detect a protocol error, enable nak interrupt on data IN phase
	flags = cpu_irq_save();
800035ea:	f0 1f 00 0c 	mcall	80003618 <udd_ctrl_send_zlp_out+0x3c>
800035ee:	18 98       	mov	r8,r12
800035f0:	ef 48 ff fc 	st.w	r7[-4],r8
	udd_ack_nak_in(0);
800035f4:	fe 68 01 60 	mov	r8,-130720
800035f8:	31 09       	mov	r9,16
800035fa:	91 09       	st.w	r8[0x0],r9
	udd_enable_nak_in_interrupt(0);
800035fc:	fe 68 01 f0 	mov	r8,-130576
80003600:	31 09       	mov	r9,16
80003602:	91 09       	st.w	r8[0x0],r9
	cpu_irq_restore(flags);
80003604:	ee fc ff fc 	ld.w	r12,r7[-4]
80003608:	f0 1f 00 05 	mcall	8000361c <udd_ctrl_send_zlp_out+0x40>
}
8000360c:	2f fd       	sub	sp,-4
8000360e:	e3 cd 80 80 	ldm	sp++,r7,pc
80003612:	00 00       	add	r0,r0
80003614:	00 00       	add	r0,r0
80003616:	00 b4       	st.h	r0++,r4
80003618:	80 00       	ld.sh	r0,r0[0x0]
8000361a:	20 88       	sub	r8,8
8000361c:	80 00       	ld.sh	r0,r0[0x0]
8000361e:	20 c8       	sub	r8,12

80003620 <udd_ctrl_endofrequest>:


static void udd_ctrl_endofrequest(void)
{
80003620:	eb cd 40 80 	pushm	r7,lr
80003624:	1a 97       	mov	r7,sp
	// If a callback is registered then call it
	if (udd_g_ctrlreq.callback) {
80003626:	48 58       	lddpc	r8,80003638 <udd_ctrl_endofrequest+0x18>
80003628:	70 48       	ld.w	r8,r8[0x10]
8000362a:	58 08       	cp.w	r8,0
8000362c:	c0 40       	breq	80003634 <udd_ctrl_endofrequest+0x14>
		udd_g_ctrlreq.callback();
8000362e:	48 38       	lddpc	r8,80003638 <udd_ctrl_endofrequest+0x18>
80003630:	70 48       	ld.w	r8,r8[0x10]
80003632:	5d 18       	icall	r8
	}
}
80003634:	e3 cd 80 80 	ldm	sp++,r7,pc
80003638:	00 00       	add	r0,r0
8000363a:	03 48       	ld.w	r8,--r1

8000363c <udd_ctrl_interrupt>:


static bool udd_ctrl_interrupt(void)
{
8000363c:	eb cd 40 80 	pushm	r7,lr
80003640:	1a 97       	mov	r7,sp

	if (!Is_udd_endpoint_interrupt(0))
80003642:	fe 68 00 00 	mov	r8,-131072
80003646:	70 18       	ld.w	r8,r8[0x4]
80003648:	e2 18 10 00 	andl	r8,0x1000,COH
8000364c:	c0 31       	brne	80003652 <udd_ctrl_interrupt+0x16>
		return false; // No interrupt events on control endpoint
8000364e:	30 08       	mov	r8,0
80003650:	c4 c8       	rjmp	800036e8 <udd_ctrl_interrupt+0xac>

	// By default disable overflow and underflow interrupt
	udd_disable_nak_in_interrupt(0);
80003652:	fe 68 02 20 	mov	r8,-130528
80003656:	31 09       	mov	r9,16
80003658:	91 09       	st.w	r8[0x0],r9
	udd_disable_nak_out_interrupt(0);
8000365a:	fe 68 02 20 	mov	r8,-130528
8000365e:	30 89       	mov	r9,8
80003660:	91 09       	st.w	r8[0x0],r9


	// Search event on control endpoint
	if (Is_udd_setup_received(0)) {
80003662:	fe 68 01 30 	mov	r8,-130768
80003666:	70 08       	ld.w	r8,r8[0x0]
80003668:	e2 18 00 04 	andl	r8,0x4,COH
8000366c:	c0 50       	breq	80003676 <udd_ctrl_interrupt+0x3a>
		// SETUP packet received
		udd_ctrl_setup_received();
8000366e:	f0 1f 00 21 	mcall	800036f0 <udd_ctrl_interrupt+0xb4>
		return true;
80003672:	30 18       	mov	r8,1
80003674:	c3 a8       	rjmp	800036e8 <udd_ctrl_interrupt+0xac>
	}
	if (Is_udd_in_send(0) && Is_udd_in_send_interrupt_enabled(0)) {
80003676:	fe 68 01 30 	mov	r8,-130768
8000367a:	70 08       	ld.w	r8,r8[0x0]
8000367c:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80003680:	5c 58       	castu.b	r8
80003682:	c0 c0       	breq	8000369a <udd_ctrl_interrupt+0x5e>
80003684:	fe 68 01 c0 	mov	r8,-130624
80003688:	70 08       	ld.w	r8,r8[0x0]
8000368a:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000368e:	5c 58       	castu.b	r8
80003690:	c0 50       	breq	8000369a <udd_ctrl_interrupt+0x5e>
		// IN packet sent
		udd_ctrl_in_sent();
80003692:	f0 1f 00 19 	mcall	800036f4 <udd_ctrl_interrupt+0xb8>
		return true;
80003696:	30 18       	mov	r8,1
80003698:	c2 88       	rjmp	800036e8 <udd_ctrl_interrupt+0xac>
	}
	if (Is_udd_out_received(0)) {
8000369a:	fe 68 01 30 	mov	r8,-130768
8000369e:	70 08       	ld.w	r8,r8[0x0]
800036a0:	e2 18 00 02 	andl	r8,0x2,COH
800036a4:	c0 50       	breq	800036ae <udd_ctrl_interrupt+0x72>
		// OUT packet received
		udd_ctrl_out_received();
800036a6:	f0 1f 00 15 	mcall	800036f8 <udd_ctrl_interrupt+0xbc>
		return true;
800036aa:	30 18       	mov	r8,1
800036ac:	c1 e8       	rjmp	800036e8 <udd_ctrl_interrupt+0xac>
	}
	if (Is_udd_nak_out(0)) {
800036ae:	fe 68 01 30 	mov	r8,-130768
800036b2:	70 08       	ld.w	r8,r8[0x0]
800036b4:	e2 18 00 08 	andl	r8,0x8,COH
800036b8:	c0 90       	breq	800036ca <udd_ctrl_interrupt+0x8e>
		// Overflow on OUT packet
		udd_ack_nak_out(0);
800036ba:	fe 68 01 60 	mov	r8,-130720
800036be:	30 89       	mov	r9,8
800036c0:	91 09       	st.w	r8[0x0],r9
		udd_ctrl_overflow();
800036c2:	f0 1f 00 0f 	mcall	800036fc <udd_ctrl_interrupt+0xc0>
		return true;
800036c6:	30 18       	mov	r8,1
800036c8:	c1 08       	rjmp	800036e8 <udd_ctrl_interrupt+0xac>
	}
	if (Is_udd_nak_in(0)) {
800036ca:	fe 68 01 30 	mov	r8,-130768
800036ce:	70 08       	ld.w	r8,r8[0x0]
800036d0:	e2 18 00 10 	andl	r8,0x10,COH
800036d4:	c0 90       	breq	800036e6 <udd_ctrl_interrupt+0xaa>
		// Underflow on IN packet
		udd_ack_nak_in(0);
800036d6:	fe 68 01 60 	mov	r8,-130720
800036da:	31 09       	mov	r9,16
800036dc:	91 09       	st.w	r8[0x0],r9
		udd_ctrl_underflow();
800036de:	f0 1f 00 09 	mcall	80003700 <udd_ctrl_interrupt+0xc4>
		return true;
800036e2:	30 18       	mov	r8,1
800036e4:	c0 28       	rjmp	800036e8 <udd_ctrl_interrupt+0xac>
	}
	return false;
800036e6:	30 08       	mov	r8,0
}
800036e8:	10 9c       	mov	r12,r8
800036ea:	e3 cd 80 80 	ldm	sp++,r7,pc
800036ee:	00 00       	add	r0,r0
800036f0:	80 00       	ld.sh	r0,r0[0x0]
800036f2:	2f f8       	sub	r8,-1
800036f4:	80 00       	ld.sh	r0,r0[0x0]
800036f6:	31 5c       	mov	r12,21
800036f8:	80 00       	ld.sh	r0,r0[0x0]
800036fa:	32 fc       	mov	r12,47
800036fc:	80 00       	ld.sh	r0,r0[0x0]
800036fe:	35 34       	mov	r4,83
80003700:	80 00       	ld.sh	r0,r0[0x0]
80003702:	34 f0       	mov	r0,79

80003704 <udd_ep_job_table_reset>:
//--- INTERNAL ROUTINES TO MANAGED THE BULK/INTERRUPT/ISOCHRONOUS ENDPOINTS

#if (0!=USB_DEVICE_MAX_EP)

static void udd_ep_job_table_reset(void)
{
80003704:	eb cd 40 80 	pushm	r7,lr
80003708:	1a 97       	mov	r7,sp
8000370a:	20 1d       	sub	sp,4
	uint8_t i;
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
8000370c:	30 08       	mov	r8,0
8000370e:	ef 68 ff ff 	st.b	r7[-1],r8
80003712:	c2 28       	rjmp	80003756 <udd_ep_job_table_reset+0x52>
		udd_ep_job[i].busy = false;
80003714:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80003718:	49 5a       	lddpc	r10,8000376c <udd_ep_job_table_reset+0x68>
8000371a:	12 98       	mov	r8,r9
8000371c:	a3 68       	lsl	r8,0x2
8000371e:	12 08       	add	r8,r9
80003720:	a3 68       	lsl	r8,0x2
80003722:	f4 08 00 09 	add	r9,r10,r8
80003726:	72 08       	ld.w	r8,r9[0x0]
80003728:	30 0a       	mov	r10,0
8000372a:	f1 da d3 e1 	bfins	r8,r10,0x1f,0x1
8000372e:	93 08       	st.w	r9[0x0],r8
		udd_ep_job[i].stall_requested = false;
80003730:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80003734:	48 ea       	lddpc	r10,8000376c <udd_ep_job_table_reset+0x68>
80003736:	12 98       	mov	r8,r9
80003738:	a3 68       	lsl	r8,0x2
8000373a:	12 08       	add	r8,r9
8000373c:	a3 68       	lsl	r8,0x2
8000373e:	f4 08 00 09 	add	r9,r10,r8
80003742:	72 08       	ld.w	r8,r9[0x0]
80003744:	30 0a       	mov	r10,0
80003746:	f1 da d3 a1 	bfins	r8,r10,0x1d,0x1
8000374a:	93 08       	st.w	r9[0x0],r8
#if (0!=USB_DEVICE_MAX_EP)

static void udd_ep_job_table_reset(void)
{
	uint8_t i;
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
8000374c:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80003750:	2f f8       	sub	r8,-1
80003752:	ef 68 ff ff 	st.b	r7[-1],r8
80003756:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000375a:	30 28       	mov	r8,2
8000375c:	f0 09 18 00 	cp.b	r9,r8
80003760:	fe 98 ff da 	brls	80003714 <udd_ep_job_table_reset+0x10>
		udd_ep_job[i].busy = false;
		udd_ep_job[i].stall_requested = false;
	}
}
80003764:	2f fd       	sub	sp,-4
80003766:	e3 cd 80 80 	ldm	sp++,r7,pc
8000376a:	00 00       	add	r0,r0
8000376c:	00 00       	add	r0,r0
8000376e:	00 bc       	st.h	r0++,r12

80003770 <udd_ep_job_table_kill>:


static void udd_ep_job_table_kill(void)
{
80003770:	eb cd 40 80 	pushm	r7,lr
80003774:	1a 97       	mov	r7,sp
80003776:	20 1d       	sub	sp,4
	uint8_t i;

	// For each endpoint, kill job
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
80003778:	30 08       	mov	r8,0
8000377a:	ef 68 ff ff 	st.b	r7[-1],r8
8000377e:	c1 98       	rjmp	800037b0 <udd_ep_job_table_kill+0x40>
		udd_ep_finish_job(&udd_ep_job[i], true, i + 1);
80003780:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80003784:	2f f8       	sub	r8,-1
80003786:	5c 58       	castu.b	r8
80003788:	10 9a       	mov	r10,r8
8000378a:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000378e:	12 98       	mov	r8,r9
80003790:	a3 68       	lsl	r8,0x2
80003792:	12 08       	add	r8,r9
80003794:	a3 68       	lsl	r8,0x2
80003796:	10 99       	mov	r9,r8
80003798:	48 b8       	lddpc	r8,800037c4 <udd_ep_job_table_kill+0x54>
8000379a:	f2 08 00 08 	add	r8,r9,r8
8000379e:	30 1b       	mov	r11,1
800037a0:	10 9c       	mov	r12,r8
800037a2:	f0 1f 00 0a 	mcall	800037c8 <udd_ep_job_table_kill+0x58>
static void udd_ep_job_table_kill(void)
{
	uint8_t i;

	// For each endpoint, kill job
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
800037a6:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800037aa:	2f f8       	sub	r8,-1
800037ac:	ef 68 ff ff 	st.b	r7[-1],r8
800037b0:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800037b4:	30 28       	mov	r8,2
800037b6:	f0 09 18 00 	cp.b	r9,r8
800037ba:	fe 98 ff e3 	brls	80003780 <udd_ep_job_table_kill+0x10>
		udd_ep_finish_job(&udd_ep_job[i], true, i + 1);
	}
}
800037be:	2f fd       	sub	sp,-4
800037c0:	e3 cd 80 80 	ldm	sp++,r7,pc
800037c4:	00 00       	add	r0,r0
800037c6:	00 bc       	st.h	r0++,r12
800037c8:	80 00       	ld.sh	r0,r0[0x0]
800037ca:	38 18       	mov	r8,-127

800037cc <udd_ep_abort_job>:


static void udd_ep_abort_job(udd_ep_id_t ep)
{
800037cc:	eb cd 40 80 	pushm	r7,lr
800037d0:	1a 97       	mov	r7,sp
800037d2:	20 1d       	sub	sp,4
800037d4:	18 98       	mov	r8,r12
800037d6:	ef 68 ff fc 	st.b	r7[-4],r8
	ep &= USB_EP_ADDR_MASK;
800037da:	ef 38 ff fc 	ld.ub	r8,r7[-4]
800037de:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
800037e2:	ef 68 ff fc 	st.b	r7[-4],r8

	// Abort job on endpoint
	udd_ep_finish_job(&udd_ep_job[ep - 1], true, ep);
800037e6:	ef 3a ff fc 	ld.ub	r10,r7[-4]
800037ea:	ef 38 ff fc 	ld.ub	r8,r7[-4]
800037ee:	f0 c9 00 01 	sub	r9,r8,1
800037f2:	12 98       	mov	r8,r9
800037f4:	a3 68       	lsl	r8,0x2
800037f6:	12 08       	add	r8,r9
800037f8:	a3 68       	lsl	r8,0x2
800037fa:	10 99       	mov	r9,r8
800037fc:	48 58       	lddpc	r8,80003810 <udd_ep_abort_job+0x44>
800037fe:	f2 08 00 08 	add	r8,r9,r8
80003802:	30 1b       	mov	r11,1
80003804:	10 9c       	mov	r12,r8
80003806:	f0 1f 00 04 	mcall	80003814 <udd_ep_abort_job+0x48>
}
8000380a:	2f fd       	sub	sp,-4
8000380c:	e3 cd 80 80 	ldm	sp++,r7,pc
80003810:	00 00       	add	r0,r0
80003812:	00 bc       	st.h	r0++,r12
80003814:	80 00       	ld.sh	r0,r0[0x0]
80003816:	38 18       	mov	r8,-127

80003818 <udd_ep_finish_job>:


static void udd_ep_finish_job(udd_ep_job_t * ptr_job, bool b_abort, uint8_t ep_num)
{
80003818:	eb cd 40 80 	pushm	r7,lr
8000381c:	1a 97       	mov	r7,sp
8000381e:	20 3d       	sub	sp,12
80003820:	ef 4c ff fc 	st.w	r7[-4],r12
80003824:	16 99       	mov	r9,r11
80003826:	14 98       	mov	r8,r10
80003828:	ef 69 ff f8 	st.b	r7[-8],r9
8000382c:	ef 68 ff f4 	st.b	r7[-12],r8
	if (ptr_job->busy == false) {
80003830:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003834:	70 08       	ld.w	r8,r8[0x0]
80003836:	e6 18 80 00 	andh	r8,0x8000,COH
8000383a:	c2 b0       	breq	80003890 <udd_ep_finish_job+0x78>
		return; // No on-going job
	}
	ptr_job->busy = false;
8000383c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80003840:	72 08       	ld.w	r8,r9[0x0]
80003842:	30 0a       	mov	r10,0
80003844:	f1 da d3 e1 	bfins	r8,r10,0x1f,0x1
80003848:	93 08       	st.w	r9[0x0],r8
	if (NULL == ptr_job->call_trans) {
8000384a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000384e:	70 48       	ld.w	r8,r8[0x10]
80003850:	58 08       	cp.w	r8,0
80003852:	c2 10       	breq	80003894 <udd_ep_finish_job+0x7c>
		return; // No callback linked to job
	}
	if (Is_udd_endpoint_in(ep_num)) {
80003854:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80003858:	a3 68       	lsl	r8,0x2
8000385a:	e0 38 ff 00 	sub	r8,130816
8000385e:	70 08       	ld.w	r8,r8[0x0]
80003860:	e2 18 01 00 	andl	r8,0x100,COH
80003864:	c0 90       	breq	80003876 <udd_ep_finish_job+0x5e>
		ep_num |= USB_EP_DIR_IN;
80003866:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000386a:	ea 18 ff ff 	orh	r8,0xffff
8000386e:	e8 18 ff 80 	orl	r8,0xff80
80003872:	ef 68 ff f4 	st.b	r7[-12],r8
	}
	ptr_job->call_trans((b_abort) ? UDD_EP_TRANSFER_ABORT :
80003876:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000387a:	70 48       	ld.w	r8,r8[0x10]
8000387c:	ef 3a ff f4 	ld.ub	r10,r7[-12]
80003880:	ee f9 ff fc 	ld.w	r9,r7[-4]
80003884:	72 2b       	ld.w	r11,r9[0x8]
80003886:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000388a:	12 9c       	mov	r12,r9
8000388c:	5d 18       	icall	r8
8000388e:	c0 48       	rjmp	80003896 <udd_ep_finish_job+0x7e>


static void udd_ep_finish_job(udd_ep_job_t * ptr_job, bool b_abort, uint8_t ep_num)
{
	if (ptr_job->busy == false) {
		return; // No on-going job
80003890:	d7 03       	nop
80003892:	c0 28       	rjmp	80003896 <udd_ep_finish_job+0x7e>
	}
	ptr_job->busy = false;
	if (NULL == ptr_job->call_trans) {
		return; // No callback linked to job
80003894:	d7 03       	nop
	if (Is_udd_endpoint_in(ep_num)) {
		ep_num |= USB_EP_DIR_IN;
	}
	ptr_job->call_trans((b_abort) ? UDD_EP_TRANSFER_ABORT :
			UDD_EP_TRANSFER_OK, ptr_job->buf_size, ep_num);
}
80003896:	2f dd       	sub	sp,-12
80003898:	e3 cd 80 80 	ldm	sp++,r7,pc

8000389c <udd_ep_trans_done>:

static void udd_ep_trans_done(udd_ep_id_t ep)
{
8000389c:	eb cd 40 80 	pushm	r7,lr
800038a0:	1a 97       	mov	r7,sp
800038a2:	20 5d       	sub	sp,20
800038a4:	18 98       	mov	r8,r12
800038a6:	ef 68 ff ec 	st.b	r7[-20],r8
	uint32_t udd_dma_ctrl = 0;
800038aa:	30 08       	mov	r8,0
800038ac:	ef 48 ff f0 	st.w	r7[-16],r8
	udd_ep_job_t *ptr_job;
	iram_size_t next_trans;
	irqflags_t flags;

	// Get job corresponding at endpoint
	ptr_job = &udd_ep_job[ep - 1];
800038b0:	ef 38 ff ec 	ld.ub	r8,r7[-20]
800038b4:	f0 c9 00 01 	sub	r9,r8,1
800038b8:	12 98       	mov	r8,r9
800038ba:	a3 68       	lsl	r8,0x2
800038bc:	12 08       	add	r8,r9
800038be:	a3 68       	lsl	r8,0x2
800038c0:	10 99       	mov	r9,r8
800038c2:	fe f8 02 1a 	ld.w	r8,pc[538]
800038c6:	f2 08 00 08 	add	r8,r9,r8
800038ca:	ef 48 ff f4 	st.w	r7[-12],r8

	if (!ptr_job->busy) {
800038ce:	ee f8 ff f4 	ld.w	r8,r7[-12]
800038d2:	70 08       	ld.w	r8,r8[0x0]
800038d4:	e6 18 80 00 	andh	r8,0x8000,COH
800038d8:	e0 80 00 fe 	breq	80003ad4 <udd_ep_trans_done+0x238>
		return; // No job is running, then ignore it (system error)
	}

	if (ptr_job->nb_trans != ptr_job->buf_size) {
800038dc:	ee f8 ff f4 	ld.w	r8,r7[-12]
800038e0:	70 39       	ld.w	r9,r8[0xc]
800038e2:	ee f8 ff f4 	ld.w	r8,r7[-12]
800038e6:	70 28       	ld.w	r8,r8[0x8]
800038e8:	10 39       	cp.w	r9,r8
800038ea:	e0 80 00 b5 	breq	80003a54 <udd_ep_trans_done+0x1b8>
		// Need to send or receive other data
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
800038ee:	ee f8 ff f4 	ld.w	r8,r7[-12]
800038f2:	70 29       	ld.w	r9,r8[0x8]
800038f4:	ee f8 ff f4 	ld.w	r8,r7[-12]
800038f8:	70 38       	ld.w	r8,r8[0xc]
800038fa:	10 19       	sub	r9,r8
800038fc:	ef 49 ff f8 	st.w	r7[-8],r9

		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
80003900:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003904:	e0 58 00 00 	cp.w	r8,65536
80003908:	e0 88 00 0a 	brls	8000391c <udd_ep_trans_done+0x80>
			// The USB hardware support a maximum
			// transfer size of UDD_ENDPOINT_MAX_TRANS Bytes
			next_trans = UDD_ENDPOINT_MAX_TRANS;
8000390c:	e0 78 00 00 	mov	r8,65536
80003910:	ef 48 ff f8 	st.w	r7[-8],r8

			// Set 0 to transfer the maximum
			udd_dma_ctrl = (0 <<
80003914:	30 08       	mov	r8,0
80003916:	ef 48 ff f0 	st.w	r7[-16],r8
8000391a:	c0 68       	rjmp	80003926 <udd_ep_trans_done+0x8a>
					AVR32_USBB_UDDMA1_CONTROL_CH_BYTE_LENGTH_OFFSET)
					& AVR32_USBB_UDDMA1_CONTROL_CH_BYTE_LENGTH_MASK;
		} else {
			udd_dma_ctrl = (next_trans <<
8000391c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003920:	b1 68       	lsl	r8,0x10
80003922:	ef 48 ff f0 	st.w	r7[-16],r8
					AVR32_USBB_UDDMA1_CONTROL_CH_BYTE_LENGTH_OFFSET)
					& AVR32_USBB_UDDMA1_CONTROL_CH_BYTE_LENGTH_MASK;
		}
		if (Is_udd_endpoint_in(ep)) {
80003926:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8000392a:	a3 68       	lsl	r8,0x2
8000392c:	e0 38 ff 00 	sub	r8,130816
80003930:	70 08       	ld.w	r8,r8[0x0]
80003932:	e2 18 01 00 	andl	r8,0x100,COH
80003936:	c2 10       	breq	80003978 <udd_ep_trans_done+0xdc>
			if (0 != next_trans % udd_get_endpoint_size(ep)) {
80003938:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8000393c:	a3 68       	lsl	r8,0x2
8000393e:	e0 38 ff 00 	sub	r8,130816
80003942:	70 08       	ld.w	r8,r8[0x0]
80003944:	e2 18 00 70 	andl	r8,0x70,COH
80003948:	a5 88       	lsr	r8,0x4
8000394a:	30 89       	mov	r9,8
8000394c:	f2 08 09 48 	lsl	r8,r9,r8
80003950:	20 18       	sub	r8,1
80003952:	10 99       	mov	r9,r8
80003954:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003958:	f3 e8 00 08 	and	r8,r9,r8
8000395c:	c3 00       	breq	800039bc <udd_ep_trans_done+0x120>
				// Enable short packet option
				// else the DMA transfer is accepted
				// and interrupt DMA valid but nothing is sent.
				udd_dma_ctrl |= AVR32_USBB_UDDMA1_CONTROL_DMAEND_EN_MASK;
8000395e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003962:	a3 b8       	sbr	r8,0x3
80003964:	ef 48 ff f0 	st.w	r7[-16],r8
				// No need to request another ZLP
				ptr_job->b_shortpacket = false;
80003968:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000396c:	72 08       	ld.w	r8,r9[0x0]
8000396e:	30 0a       	mov	r10,0
80003970:	f1 da d3 c1 	bfins	r8,r10,0x1e,0x1
80003974:	93 08       	st.w	r9[0x0],r8
80003976:	c2 38       	rjmp	800039bc <udd_ep_trans_done+0x120>
			}
		} else {
			if ((USB_EP_TYPE_ISOCHRONOUS != udd_get_endpoint_type(ep))
80003978:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8000397c:	a3 68       	lsl	r8,0x2
8000397e:	e0 38 ff 00 	sub	r8,130816
80003982:	70 08       	ld.w	r8,r8[0x0]
80003984:	e2 18 18 00 	andl	r8,0x1800,COH
80003988:	ab 98       	lsr	r8,0xb
8000398a:	58 18       	cp.w	r8,1
8000398c:	c1 21       	brne	800039b0 <udd_ep_trans_done+0x114>
					|| (next_trans <= udd_get_endpoint_size(ep))) {
8000398e:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80003992:	a3 68       	lsl	r8,0x2
80003994:	e0 38 ff 00 	sub	r8,130816
80003998:	70 08       	ld.w	r8,r8[0x0]
8000399a:	e2 18 00 70 	andl	r8,0x70,COH
8000399e:	a5 88       	lsr	r8,0x4
800039a0:	30 89       	mov	r9,8
800039a2:	f2 08 09 48 	lsl	r8,r9,r8
800039a6:	10 99       	mov	r9,r8
				udd_dma_ctrl |= AVR32_USBB_UDDMA1_CONTROL_DMAEND_EN_MASK;
				// No need to request another ZLP
				ptr_job->b_shortpacket = false;
			}
		} else {
			if ((USB_EP_TYPE_ISOCHRONOUS != udd_get_endpoint_type(ep))
800039a8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800039ac:	10 39       	cp.w	r9,r8
800039ae:	c0 73       	brcs	800039bc <udd_ep_trans_done+0x120>
					|| (next_trans <= udd_get_endpoint_size(ep))) {

				// Enable short packet reception
				udd_dma_ctrl |= AVR32_USBB_UDDMA1_CONTROL_EOT_IRQ_EN_MASK
800039b0:	ee f8 ff f0 	ld.w	r8,r7[-16]
800039b4:	e8 18 00 14 	orl	r8,0x14
800039b8:	ef 48 ff f0 	st.w	r7[-16],r8
						| AVR32_USBB_UDDMA1_CONTROL_BUFF_CLOSE_IN_EN_MASK;
			}
		}

		// Start USB DMA to fill or read fifo of the selected endpoint
		udd_endpoint_dma_set_addr(ep, (U32) &ptr_job->buf[ptr_job->nb_trans]);
800039bc:	ef 38 ff ec 	ld.ub	r8,r7[-20]
800039c0:	a5 68       	lsl	r8,0x4
800039c2:	e0 38 fd 00 	sub	r8,130304
800039c6:	ee f9 ff f4 	ld.w	r9,r7[-12]
800039ca:	72 1a       	ld.w	r10,r9[0x4]
800039cc:	ee f9 ff f4 	ld.w	r9,r7[-12]
800039d0:	72 39       	ld.w	r9,r9[0xc]
800039d2:	f4 09 00 09 	add	r9,r10,r9
800039d6:	91 19       	st.w	r8[0x4],r9
		udd_dma_ctrl |= AVR32_USBB_UDDMA1_CONTROL_EOBUFF_IRQ_EN_MASK |
800039d8:	ee f8 ff f0 	ld.w	r8,r7[-16]
800039dc:	e8 18 00 21 	orl	r8,0x21
800039e0:	ef 48 ff f0 	st.w	r7[-16],r8
				AVR32_USBB_UDDMA1_CONTROL_CH_EN_MASK;

		// Disable IRQs to have a short sequence
		// between read of EOT_STA and DMA enable
		flags = cpu_irq_save();
800039e4:	f0 1f 00 3f 	mcall	80003ae0 <udd_ep_trans_done+0x244>
800039e8:	18 98       	mov	r8,r12
800039ea:	ef 48 ff fc 	st.w	r7[-4],r8
		if ( !(udd_endpoint_dma_get_status(ep)
800039ee:	ef 38 ff ec 	ld.ub	r8,r7[-20]
800039f2:	a5 68       	lsl	r8,0x4
800039f4:	e0 38 fd 00 	sub	r8,130304
800039f8:	70 38       	ld.w	r8,r8[0xc]
800039fa:	e2 18 00 10 	andl	r8,0x10,COH
800039fe:	c2 11       	brne	80003a40 <udd_ep_trans_done+0x1a4>
				& AVR32_USBB_UDDMA1_STATUS_EOT_STA_MASK)) {
			udd_endpoint_dma_set_control(ep, udd_dma_ctrl);
80003a00:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80003a04:	a5 68       	lsl	r8,0x4
80003a06:	e0 38 fd 00 	sub	r8,130304
80003a0a:	ee f9 ff f0 	ld.w	r9,r7[-16]
80003a0e:	91 29       	st.w	r8[0x8],r9
			ptr_job->nb_trans += next_trans;
80003a10:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003a14:	70 39       	ld.w	r9,r8[0xc]
80003a16:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003a1a:	10 09       	add	r9,r8
80003a1c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003a20:	91 39       	st.w	r8[0xc],r9
			udd_enable_endpoint_dma_interrupt(ep);
80003a22:	fe 68 00 00 	mov	r8,-131072
80003a26:	ef 39 ff ec 	ld.ub	r9,r7[-20]
80003a2a:	20 19       	sub	r9,1
80003a2c:	fc 1a 02 00 	movh	r10,0x200
80003a30:	f4 09 09 49 	lsl	r9,r10,r9
80003a34:	91 69       	st.w	r8[0x18],r9
			cpu_irq_restore(flags);
80003a36:	ee fc ff fc 	ld.w	r12,r7[-4]
80003a3a:	f0 1f 00 2b 	mcall	80003ae4 <udd_ep_trans_done+0x248>
			return;
80003a3e:	c4 c8       	rjmp	80003ad6 <udd_ep_trans_done+0x23a>
		}
		cpu_irq_restore(flags);
80003a40:	ee fc ff fc 	ld.w	r12,r7[-4]
80003a44:	f0 1f 00 28 	mcall	80003ae4 <udd_ep_trans_done+0x248>

		// Here a ZLP has been received
		// and the DMA transfer must be not started.
		// It is the end of transfer
		ptr_job->buf_size = ptr_job->nb_trans;
80003a48:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003a4c:	70 39       	ld.w	r9,r8[0xc]
80003a4e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003a52:	91 29       	st.w	r8[0x8],r9
	}
	if (Is_udd_endpoint_in(ep)) {
80003a54:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80003a58:	a3 68       	lsl	r8,0x2
80003a5a:	e0 38 ff 00 	sub	r8,130816
80003a5e:	70 08       	ld.w	r8,r8[0x0]
80003a60:	e2 18 01 00 	andl	r8,0x100,COH
80003a64:	c2 f0       	breq	80003ac2 <udd_ep_trans_done+0x226>
		if (ptr_job->b_shortpacket) {
80003a66:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003a6a:	70 08       	ld.w	r8,r8[0x0]
80003a6c:	e6 18 40 00 	andh	r8,0x4000,COH
80003a70:	c2 90       	breq	80003ac2 <udd_ep_trans_done+0x226>
			// Need to send a ZLP (No possible with USB DMA)
			// enable interrupt to wait a free bank to sent ZLP
			udd_ack_in_send(ep);
80003a72:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80003a76:	a3 68       	lsl	r8,0x2
80003a78:	e0 38 fe a0 	sub	r8,130720
80003a7c:	30 19       	mov	r9,1
80003a7e:	91 09       	st.w	r8[0x0],r9
			if (Is_udd_write_enabled(ep)) {
80003a80:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80003a84:	a3 68       	lsl	r8,0x2
80003a86:	e0 38 fe d0 	sub	r8,130768
80003a8a:	70 08       	ld.w	r8,r8[0x0]
80003a8c:	e6 18 00 01 	andh	r8,0x1,COH
80003a90:	c0 80       	breq	80003aa0 <udd_ep_trans_done+0x204>
				// Force interrupt in case of ep already free
				udd_raise_in_send(ep);
80003a92:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80003a96:	a3 68       	lsl	r8,0x2
80003a98:	e0 38 fe 70 	sub	r8,130672
80003a9c:	30 19       	mov	r9,1
80003a9e:	91 09       	st.w	r8[0x0],r9
			}
			udd_enable_in_send_interrupt(ep);
80003aa0:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80003aa4:	a3 68       	lsl	r8,0x2
80003aa6:	e0 38 fe 10 	sub	r8,130576
80003aaa:	30 19       	mov	r9,1
80003aac:	91 09       	st.w	r8[0x0],r9
			udd_enable_endpoint_interrupt(ep);
80003aae:	fe 68 00 00 	mov	r8,-131072
80003ab2:	ef 39 ff ec 	ld.ub	r9,r7[-20]
80003ab6:	e0 6a 10 00 	mov	r10,4096
80003aba:	f4 09 09 49 	lsl	r9,r10,r9
80003abe:	91 69       	st.w	r8[0x18],r9
			return;
80003ac0:	c0 b8       	rjmp	80003ad6 <udd_ep_trans_done+0x23a>
		}
	}
	// Call callback to signal end of transfer
	udd_ep_finish_job(ptr_job, false, ep);
80003ac2:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80003ac6:	10 9a       	mov	r10,r8
80003ac8:	30 0b       	mov	r11,0
80003aca:	ee fc ff f4 	ld.w	r12,r7[-12]
80003ace:	f0 1f 00 07 	mcall	80003ae8 <udd_ep_trans_done+0x24c>
80003ad2:	c0 28       	rjmp	80003ad6 <udd_ep_trans_done+0x23a>

	// Get job corresponding at endpoint
	ptr_job = &udd_ep_job[ep - 1];

	if (!ptr_job->busy) {
		return; // No job is running, then ignore it (system error)
80003ad4:	d7 03       	nop
			return;
		}
	}
	// Call callback to signal end of transfer
	udd_ep_finish_job(ptr_job, false, ep);
}
80003ad6:	2f bd       	sub	sp,-20
80003ad8:	e3 cd 80 80 	ldm	sp++,r7,pc
80003adc:	00 00       	add	r0,r0
80003ade:	00 bc       	st.h	r0++,r12
80003ae0:	80 00       	ld.sh	r0,r0[0x0]
80003ae2:	20 88       	sub	r8,8
80003ae4:	80 00       	ld.sh	r0,r0[0x0]
80003ae6:	20 c8       	sub	r8,12
80003ae8:	80 00       	ld.sh	r0,r0[0x0]
80003aea:	38 18       	mov	r8,-127

80003aec <udd_ep_interrupt>:


static bool udd_ep_interrupt(void)
{
80003aec:	eb cd 40 80 	pushm	r7,lr
80003af0:	1a 97       	mov	r7,sp
80003af2:	20 3d       	sub	sp,12
	udd_ep_id_t ep;
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
80003af4:	30 18       	mov	r8,1
80003af6:	ef 68 ff f7 	st.b	r7[-9],r8
80003afa:	cf 18       	rjmp	80003cdc <udd_ep_interrupt+0x1f0>
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
80003afc:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80003b00:	f0 c9 00 01 	sub	r9,r8,1
80003b04:	12 98       	mov	r8,r9
80003b06:	a3 68       	lsl	r8,0x2
80003b08:	12 08       	add	r8,r9
80003b0a:	a3 68       	lsl	r8,0x2
80003b0c:	10 99       	mov	r9,r8
80003b0e:	4f a8       	lddpc	r8,80003cf4 <udd_ep_interrupt+0x208>
80003b10:	f2 08 00 08 	add	r8,r9,r8
80003b14:	ef 48 ff f8 	st.w	r7[-8],r8

		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
80003b18:	fe 68 00 00 	mov	r8,-131072
80003b1c:	70 49       	ld.w	r9,r8[0x10]
80003b1e:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80003b22:	20 18       	sub	r8,1
80003b24:	fc 1a 02 00 	movh	r10,0x200
80003b28:	f4 08 09 48 	lsl	r8,r10,r8
80003b2c:	f3 e8 00 08 	and	r8,r9,r8
80003b30:	c4 70       	breq	80003bbe <udd_ep_interrupt+0xd2>
				&& Is_udd_endpoint_dma_interrupt(ep)) {
80003b32:	fe 68 00 00 	mov	r8,-131072
80003b36:	70 19       	ld.w	r9,r8[0x4]
80003b38:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80003b3c:	20 18       	sub	r8,1
80003b3e:	fc 1a 02 00 	movh	r10,0x200
80003b42:	f4 08 09 48 	lsl	r8,r10,r8
80003b46:	f3 e8 00 08 	and	r8,r9,r8
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];

		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
80003b4a:	c3 a0       	breq	80003bbe <udd_ep_interrupt+0xd2>
				&& Is_udd_endpoint_dma_interrupt(ep)) {
			uint32_t nb_remaining;
			if( udd_endpoint_dma_get_status(ep)
80003b4c:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80003b50:	a5 68       	lsl	r8,0x4
80003b52:	e0 38 fd 00 	sub	r8,130304
80003b56:	70 38       	ld.w	r8,r8[0xc]
80003b58:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80003b5c:	5c 58       	castu.b	r8
80003b5e:	c0 30       	breq	80003b64 <udd_ep_interrupt+0x78>
					& AVR32_USBB_UDDMA1_STATUS_CH_EN_MASK) {
				return true; // Ignore EOT_STA interrupt
80003b60:	30 18       	mov	r8,1
80003b62:	cc 58       	rjmp	80003cec <udd_ep_interrupt+0x200>
			}
			udd_disable_endpoint_dma_interrupt(ep);
80003b64:	fe 68 00 00 	mov	r8,-131072
80003b68:	ef 39 ff f7 	ld.ub	r9,r7[-9]
80003b6c:	20 19       	sub	r9,1
80003b6e:	fc 1a 02 00 	movh	r10,0x200
80003b72:	f4 09 09 49 	lsl	r9,r10,r9
80003b76:	91 59       	st.w	r8[0x14],r9
			// Save number of data no transfered
			nb_remaining = (udd_endpoint_dma_get_status(ep) &
80003b78:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80003b7c:	a5 68       	lsl	r8,0x4
80003b7e:	e0 38 fd 00 	sub	r8,130304
80003b82:	70 38       	ld.w	r8,r8[0xc]
80003b84:	b1 88       	lsr	r8,0x10
80003b86:	ef 48 ff fc 	st.w	r7[-4],r8
					AVR32_USBB_UDDMA1_STATUS_CH_BYTE_CNT_MASK)
					>> AVR32_USBB_UDDMA1_STATUS_CH_BYTE_CNT_OFFSET;
			if (nb_remaining) {
80003b8a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003b8e:	58 08       	cp.w	r8,0
80003b90:	c1 00       	breq	80003bb0 <udd_ep_interrupt+0xc4>
				// Transfer no complete (short packet or ZLP) then:
				// Update number of data transfered
				ptr_job->nb_trans -= nb_remaining;
80003b92:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003b96:	70 39       	ld.w	r9,r8[0xc]
80003b98:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003b9c:	10 19       	sub	r9,r8
80003b9e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003ba2:	91 39       	st.w	r8[0xc],r9
				// Set transfer complete to stop the transfer
				ptr_job->buf_size = ptr_job->nb_trans;
80003ba4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003ba8:	70 39       	ld.w	r9,r8[0xc]
80003baa:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003bae:	91 29       	st.w	r8[0x8],r9
			}
			udd_ep_trans_done(ep);
80003bb0:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80003bb4:	10 9c       	mov	r12,r8
80003bb6:	f0 1f 00 51 	mcall	80003cf8 <udd_ep_interrupt+0x20c>
			return true;
80003bba:	30 18       	mov	r8,1
80003bbc:	c9 88       	rjmp	80003cec <udd_ep_interrupt+0x200>
		}
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
80003bbe:	fe 68 00 00 	mov	r8,-131072
80003bc2:	70 49       	ld.w	r9,r8[0x10]
80003bc4:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80003bc8:	e0 6a 10 00 	mov	r10,4096
80003bcc:	f4 08 09 48 	lsl	r8,r10,r8
80003bd0:	f3 e8 00 08 	and	r8,r9,r8
80003bd4:	c7 f0       	breq	80003cd2 <udd_ep_interrupt+0x1e6>
			if (Is_udd_in_send_interrupt_enabled(ep) && Is_udd_in_send(ep)) {
80003bd6:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80003bda:	a3 68       	lsl	r8,0x2
80003bdc:	e0 38 fe 40 	sub	r8,130624
80003be0:	70 08       	ld.w	r8,r8[0x0]
80003be2:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80003be6:	5c 58       	castu.b	r8
80003be8:	c2 b0       	breq	80003c3e <udd_ep_interrupt+0x152>
80003bea:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80003bee:	a3 68       	lsl	r8,0x2
80003bf0:	e0 38 fe d0 	sub	r8,130768
80003bf4:	70 08       	ld.w	r8,r8[0x0]
80003bf6:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80003bfa:	5c 58       	castu.b	r8
80003bfc:	c2 10       	breq	80003c3e <udd_ep_interrupt+0x152>
				udd_disable_in_send_interrupt(ep);
80003bfe:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80003c02:	a3 68       	lsl	r8,0x2
80003c04:	e0 38 fd e0 	sub	r8,130528
80003c08:	30 19       	mov	r9,1
80003c0a:	91 09       	st.w	r8[0x0],r9
				// One bank is free then send a ZLP
				udd_ack_in_send(ep);
80003c0c:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80003c10:	a3 68       	lsl	r8,0x2
80003c12:	e0 38 fe a0 	sub	r8,130720
80003c16:	30 19       	mov	r9,1
80003c18:	91 09       	st.w	r8[0x0],r9
				udd_ack_fifocon(ep);
80003c1a:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80003c1e:	a3 68       	lsl	r8,0x2
80003c20:	e0 38 fd e0 	sub	r8,130528
80003c24:	e0 69 40 00 	mov	r9,16384
80003c28:	91 09       	st.w	r8[0x0],r9
				udd_ep_finish_job(ptr_job, false, ep);
80003c2a:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80003c2e:	10 9a       	mov	r10,r8
80003c30:	30 0b       	mov	r11,0
80003c32:	ee fc ff f8 	ld.w	r12,r7[-8]
80003c36:	f0 1f 00 32 	mcall	80003cfc <udd_ep_interrupt+0x210>
				return true;
80003c3a:	30 18       	mov	r8,1
80003c3c:	c5 88       	rjmp	80003cec <udd_ep_interrupt+0x200>
			}
			if (Is_udd_bank_interrupt_enabled(ep) && (0 == udd_nb_busy_bank(ep))) {
80003c3e:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80003c42:	a3 68       	lsl	r8,0x2
80003c44:	e0 38 fe 40 	sub	r8,130624
80003c48:	70 08       	ld.w	r8,r8[0x0]
80003c4a:	e2 18 10 00 	andl	r8,0x1000,COH
80003c4e:	c4 20       	breq	80003cd2 <udd_ep_interrupt+0x1e6>
80003c50:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80003c54:	a3 68       	lsl	r8,0x2
80003c56:	e0 38 fe d0 	sub	r8,130768
80003c5a:	70 08       	ld.w	r8,r8[0x0]
80003c5c:	e2 18 30 00 	andl	r8,0x3000,COH
80003c60:	ad 88       	lsr	r8,0xc
80003c62:	c3 81       	brne	80003cd2 <udd_ep_interrupt+0x1e6>
				// End of background transfer on IN endpoint
				udd_disable_bank_interrupt(ep);
80003c64:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80003c68:	a3 68       	lsl	r8,0x2
80003c6a:	e0 38 fd e0 	sub	r8,130528
80003c6e:	e0 69 10 00 	mov	r9,4096
80003c72:	91 09       	st.w	r8[0x0],r9
				udd_disable_endpoint_interrupt(ep);
80003c74:	fe 68 00 00 	mov	r8,-131072
80003c78:	ef 39 ff f7 	ld.ub	r9,r7[-9]
80003c7c:	e0 6a 10 00 	mov	r10,4096
80003c80:	f4 09 09 49 	lsl	r9,r10,r9
80003c84:	91 59       	st.w	r8[0x14],r9

				Assert(ptr_job->stall_requested);
				// A stall has been requested during background transfer
				ptr_job->stall_requested = false;
80003c86:	ee f9 ff f8 	ld.w	r9,r7[-8]
80003c8a:	72 08       	ld.w	r8,r9[0x0]
80003c8c:	30 0a       	mov	r10,0
80003c8e:	f1 da d3 a1 	bfins	r8,r10,0x1d,0x1
80003c92:	93 08       	st.w	r9[0x0],r8
				udd_disable_endpoint_bank_autoswitch(ep);
80003c94:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80003c98:	a3 68       	lsl	r8,0x2
80003c9a:	e0 38 ff 00 	sub	r8,130816
80003c9e:	ef 39 ff f7 	ld.ub	r9,r7[-9]
80003ca2:	a3 69       	lsl	r9,0x2
80003ca4:	e0 39 ff 00 	sub	r9,130816
80003ca8:	72 09       	ld.w	r9,r9[0x0]
80003caa:	a9 d9       	cbr	r9,0x9
80003cac:	91 09       	st.w	r8[0x0],r9
				udd_enable_stall_handshake(ep);
80003cae:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80003cb2:	a3 68       	lsl	r8,0x2
80003cb4:	e0 38 fe 10 	sub	r8,130576
80003cb8:	e8 69 00 00 	mov	r9,524288
80003cbc:	91 09       	st.w	r8[0x0],r9
				udd_reset_data_toggle(ep);
80003cbe:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80003cc2:	a3 68       	lsl	r8,0x2
80003cc4:	e0 38 fe 10 	sub	r8,130576
80003cc8:	e4 69 00 00 	mov	r9,262144
80003ccc:	91 09       	st.w	r8[0x0],r9
				return true;
80003cce:	30 18       	mov	r8,1
80003cd0:	c0 e8       	rjmp	80003cec <udd_ep_interrupt+0x200>
{
	udd_ep_id_t ep;
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
80003cd2:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80003cd6:	2f f8       	sub	r8,-1
80003cd8:	ef 68 ff f7 	st.b	r7[-9],r8
80003cdc:	ef 39 ff f7 	ld.ub	r9,r7[-9]
80003ce0:	30 38       	mov	r8,3
80003ce2:	f0 09 18 00 	cp.b	r9,r8
80003ce6:	fe 98 ff 0b 	brls	80003afc <udd_ep_interrupt+0x10>
				udd_reset_data_toggle(ep);
				return true;
			}
		}
	}
	return false;
80003cea:	30 08       	mov	r8,0
}
80003cec:	10 9c       	mov	r12,r8
80003cee:	2f dd       	sub	sp,-12
80003cf0:	e3 cd 80 80 	ldm	sp++,r7,pc
80003cf4:	00 00       	add	r0,r0
80003cf6:	00 bc       	st.h	r0++,r12
80003cf8:	80 00       	ld.sh	r0,r0[0x0]
80003cfa:	38 9c       	mov	r12,-119
80003cfc:	80 00       	ld.sh	r0,r0[0x0]
80003cfe:	38 18       	mov	r8,-127

80003d00 <cpu_irq_save>:
#endif

typedef uint32_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
80003d00:	eb cd 40 80 	pushm	r7,lr
80003d04:	1a 97       	mov	r7,sp
80003d06:	20 1d       	sub	sp,4
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80003d08:	e1 b8 00 00 	mfsr	r8,0x0
80003d0c:	ef 48 ff fc 	st.w	r7[-4],r8
	cpu_irq_disable();
80003d10:	d3 03       	ssrf	0x10

	return flags;
80003d12:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
80003d16:	10 9c       	mov	r12,r8
80003d18:	2f fd       	sub	sp,-4
80003d1a:	e3 cd 80 80 	ldm	sp++,r7,pc

80003d1e <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
80003d1e:	eb cd 40 80 	pushm	r7,lr
80003d22:	1a 97       	mov	r7,sp
80003d24:	20 1d       	sub	sp,4
80003d26:	ef 4c ff fc 	st.w	r7[-4],r12
	return !(flags & AVR32_SR_GM_MASK);
80003d2a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003d2e:	e6 18 00 01 	andh	r8,0x1,COH
80003d32:	5f 08       	sreq	r8
80003d34:	5c 58       	castu.b	r8
}
80003d36:	10 9c       	mov	r12,r8
80003d38:	2f fd       	sub	sp,-4
80003d3a:	e3 cd 80 80 	ldm	sp++,r7,pc
80003d3e:	d7 03       	nop

80003d40 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
80003d40:	eb cd 40 80 	pushm	r7,lr
80003d44:	1a 97       	mov	r7,sp
80003d46:	20 1d       	sub	sp,4
80003d48:	ef 4c ff fc 	st.w	r7[-4],r12
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80003d4c:	ee fc ff fc 	ld.w	r12,r7[-4]
80003d50:	f0 1f 00 05 	mcall	80003d64 <cpu_irq_restore+0x24>
80003d54:	18 98       	mov	r8,r12
80003d56:	58 08       	cp.w	r8,0
80003d58:	c0 20       	breq	80003d5c <cpu_irq_restore+0x1c>
      cpu_irq_enable();
80003d5a:	d5 03       	csrf	0x10
   }

	barrier();
}
80003d5c:	2f fd       	sub	sp,-4
80003d5e:	e3 cd 80 80 	ldm	sp++,r7,pc
80003d62:	00 00       	add	r0,r0
80003d64:	80 00       	ld.sh	r0,r0[0x0]
80003d66:	3d 1e       	mov	lr,-47

80003d68 <udi_cdc_comm_enable>:
static volatile bool udi_cdc_tx_both_buf_to_send[UDI_CDC_PORT_NB];

//@}

bool udi_cdc_comm_enable(void)
{
80003d68:	eb cd 40 80 	pushm	r7,lr
80003d6c:	1a 97       	mov	r7,sp
80003d6e:	20 1d       	sub	sp,4
	uint8_t port;
	uint8_t iface_comm_num;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
80003d70:	30 08       	mov	r8,0
80003d72:	ef 68 ff fe 	st.b	r7[-2],r8
	udi_cdc_nb_comm_enabled = 0;
80003d76:	4d c9       	lddpc	r9,80003ee4 <udi_cdc_comm_enable+0x17c>
80003d78:	30 08       	mov	r8,0
80003d7a:	b2 88       	st.b	r9[0x0],r8
	}
	port = udi_cdc_nb_comm_enabled;
#endif

	// Initialize control signal management
	udi_cdc_state[port] = CPU_TO_LE16(0);
80003d7c:	ef 3a ff fe 	ld.ub	r10,r7[-2]
80003d80:	4d a9       	lddpc	r9,80003ee8 <udi_cdc_comm_enable+0x180>
80003d82:	30 08       	mov	r8,0
80003d84:	f2 0a 0a 18 	st.h	r9[r10<<0x1],r8

	uid_cdc_state_msg[port].header.bmRequestType =
80003d88:	ef 39 ff fe 	ld.ub	r9,r7[-2]
80003d8c:	4d 8a       	lddpc	r10,80003eec <udi_cdc_comm_enable+0x184>
80003d8e:	12 98       	mov	r8,r9
80003d90:	a3 68       	lsl	r8,0x2
80003d92:	12 08       	add	r8,r9
80003d94:	a1 78       	lsl	r8,0x1
80003d96:	f4 08 00 09 	add	r9,r10,r8
80003d9a:	3a 18       	mov	r8,-95
80003d9c:	b2 88       	st.b	r9[0x0],r8
			USB_REQ_DIR_IN | USB_REQ_TYPE_CLASS |
			USB_REQ_RECIP_INTERFACE;
	uid_cdc_state_msg[port].header.bNotification = USB_REQ_CDC_NOTIFY_SERIAL_STATE;
80003d9e:	ef 39 ff fe 	ld.ub	r9,r7[-2]
80003da2:	4d 3a       	lddpc	r10,80003eec <udi_cdc_comm_enable+0x184>
80003da4:	12 98       	mov	r8,r9
80003da6:	a3 68       	lsl	r8,0x2
80003da8:	12 08       	add	r8,r9
80003daa:	a1 78       	lsl	r8,0x1
80003dac:	f4 08 00 09 	add	r9,r10,r8
80003db0:	32 08       	mov	r8,32
80003db2:	b2 98       	st.b	r9[0x1],r8
	uid_cdc_state_msg[port].header.wValue = LE16(0);
80003db4:	ef 39 ff fe 	ld.ub	r9,r7[-2]
80003db8:	4c da       	lddpc	r10,80003eec <udi_cdc_comm_enable+0x184>
80003dba:	12 98       	mov	r8,r9
80003dbc:	a3 68       	lsl	r8,0x2
80003dbe:	12 08       	add	r8,r9
80003dc0:	a1 78       	lsl	r8,0x1
80003dc2:	f4 08 00 09 	add	r9,r10,r8
80003dc6:	30 08       	mov	r8,0
80003dc8:	b2 18       	st.h	r9[0x2],r8

	switch (port) {
80003dca:	ef 38 ff fe 	ld.ub	r8,r7[-2]
80003dce:	58 08       	cp.w	r8,0
80003dd0:	c0 51       	brne	80003dda <udi_cdc_comm_enable+0x72>
#define UDI_CDC_PORT_TO_IFACE_COMM(index, unused) \
	case index: \
		iface_comm_num = UDI_CDC_COMM_IFACE_NUMBER_##index; \
		break;
	MREPEAT(UDI_CDC_PORT_NB, UDI_CDC_PORT_TO_IFACE_COMM, ~)
80003dd2:	30 08       	mov	r8,0
80003dd4:	ef 68 ff ff 	st.b	r7[-1],r8
80003dd8:	c0 48       	rjmp	80003de0 <udi_cdc_comm_enable+0x78>
#undef UDI_CDC_PORT_TO_IFACE_COMM
	default:
		iface_comm_num = UDI_CDC_COMM_IFACE_NUMBER_0;
80003dda:	30 08       	mov	r8,0
80003ddc:	ef 68 ff ff 	st.b	r7[-1],r8
		break;
	}

	uid_cdc_state_msg[port].header.wIndex = LE16(iface_comm_num);
80003de0:	ef 39 ff fe 	ld.ub	r9,r7[-2]
80003de4:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80003de8:	a9 48       	asr	r8,0x8
80003dea:	f5 d8 b0 10 	bfexts	r10,r8,0x0,0x10
80003dee:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80003df2:	a9 68       	lsl	r8,0x8
80003df4:	5c 88       	casts.h	r8
80003df6:	f5 e8 10 08 	or	r8,r10,r8
80003dfa:	5c 88       	casts.h	r8
80003dfc:	10 9a       	mov	r10,r8
80003dfe:	4b cb       	lddpc	r11,80003eec <udi_cdc_comm_enable+0x184>
80003e00:	12 98       	mov	r8,r9
80003e02:	a3 68       	lsl	r8,0x2
80003e04:	12 08       	add	r8,r9
80003e06:	a1 78       	lsl	r8,0x1
80003e08:	f6 08 00 08 	add	r8,r11,r8
80003e0c:	f0 c9 ff fc 	sub	r9,r8,-4
80003e10:	14 98       	mov	r8,r10
80003e12:	b2 08       	st.h	r9[0x0],r8
	uid_cdc_state_msg[port].header.wLength = LE16(2);
80003e14:	ef 39 ff fe 	ld.ub	r9,r7[-2]
80003e18:	4b 5a       	lddpc	r10,80003eec <udi_cdc_comm_enable+0x184>
80003e1a:	12 98       	mov	r8,r9
80003e1c:	a3 68       	lsl	r8,0x2
80003e1e:	12 08       	add	r8,r9
80003e20:	a1 78       	lsl	r8,0x1
80003e22:	f4 08 00 08 	add	r8,r10,r8
80003e26:	f0 c9 ff fc 	sub	r9,r8,-4
80003e2a:	e0 68 02 00 	mov	r8,512
80003e2e:	b2 18       	st.h	r9[0x2],r8
	uid_cdc_state_msg[port].value = CPU_TO_LE16(0);
80003e30:	ef 39 ff fe 	ld.ub	r9,r7[-2]
80003e34:	4a ea       	lddpc	r10,80003eec <udi_cdc_comm_enable+0x184>
80003e36:	12 98       	mov	r8,r9
80003e38:	a3 68       	lsl	r8,0x2
80003e3a:	12 08       	add	r8,r9
80003e3c:	a1 78       	lsl	r8,0x1
80003e3e:	f4 08 00 08 	add	r8,r10,r8
80003e42:	f0 c9 ff f8 	sub	r9,r8,-8
80003e46:	30 08       	mov	r8,0
80003e48:	b2 08       	st.h	r9[0x0],r8

	udi_cdc_line_coding[port].dwDTERate = CPU_TO_LE32(UDI_CDC_DEFAULT_RATE);
80003e4a:	ef 39 ff fe 	ld.ub	r9,r7[-2]
80003e4e:	4a 9a       	lddpc	r10,80003ef0 <udi_cdc_comm_enable+0x188>
80003e50:	12 98       	mov	r8,r9
80003e52:	a3 78       	lsl	r8,0x3
80003e54:	12 18       	sub	r8,r9
80003e56:	f4 08 00 08 	add	r8,r10,r8
80003e5a:	11 89       	ld.ub	r9,r8[0x0]
80003e5c:	e2 19 00 00 	andl	r9,0x0,COH
80003e60:	b0 89       	st.b	r8[0x0],r9
80003e62:	11 99       	ld.ub	r9,r8[0x1]
80003e64:	e2 19 00 00 	andl	r9,0x0,COH
80003e68:	ea 19 ff ff 	orh	r9,0xffff
80003e6c:	e8 19 ff c2 	orl	r9,0xffc2
80003e70:	b0 99       	st.b	r8[0x1],r9
80003e72:	11 a9       	ld.ub	r9,r8[0x2]
80003e74:	e2 19 00 00 	andl	r9,0x0,COH
80003e78:	a1 a9       	sbr	r9,0x0
80003e7a:	b0 a9       	st.b	r8[0x2],r9
80003e7c:	11 b9       	ld.ub	r9,r8[0x3]
80003e7e:	e2 19 00 00 	andl	r9,0x0,COH
80003e82:	b0 b9       	st.b	r8[0x3],r9
	udi_cdc_line_coding[port].bCharFormat = UDI_CDC_DEFAULT_STOPBITS;
80003e84:	ef 39 ff fe 	ld.ub	r9,r7[-2]
80003e88:	49 aa       	lddpc	r10,80003ef0 <udi_cdc_comm_enable+0x188>
80003e8a:	12 98       	mov	r8,r9
80003e8c:	a3 78       	lsl	r8,0x3
80003e8e:	12 18       	sub	r8,r9
80003e90:	f4 08 00 08 	add	r8,r10,r8
80003e94:	f0 c9 ff fc 	sub	r9,r8,-4
80003e98:	30 08       	mov	r8,0
80003e9a:	b2 88       	st.b	r9[0x0],r8
	udi_cdc_line_coding[port].bParityType = UDI_CDC_DEFAULT_PARITY;
80003e9c:	ef 39 ff fe 	ld.ub	r9,r7[-2]
80003ea0:	49 4a       	lddpc	r10,80003ef0 <udi_cdc_comm_enable+0x188>
80003ea2:	12 98       	mov	r8,r9
80003ea4:	a3 78       	lsl	r8,0x3
80003ea6:	12 18       	sub	r8,r9
80003ea8:	f4 08 00 08 	add	r8,r10,r8
80003eac:	f0 c9 ff fc 	sub	r9,r8,-4
80003eb0:	30 08       	mov	r8,0
80003eb2:	b2 98       	st.b	r9[0x1],r8
	udi_cdc_line_coding[port].bDataBits = UDI_CDC_DEFAULT_DATABITS;
80003eb4:	ef 39 ff fe 	ld.ub	r9,r7[-2]
80003eb8:	48 ea       	lddpc	r10,80003ef0 <udi_cdc_comm_enable+0x188>
80003eba:	12 98       	mov	r8,r9
80003ebc:	a3 78       	lsl	r8,0x3
80003ebe:	12 18       	sub	r8,r9
80003ec0:	f4 08 00 08 	add	r8,r10,r8
80003ec4:	f0 c9 ff fc 	sub	r9,r8,-4
80003ec8:	30 88       	mov	r8,8
80003eca:	b2 a8       	st.b	r9[0x2],r8
	// to initialize memories or indicate that interface is enabled
	UDI_CDC_SET_CODING_EXT(port,(&udi_cdc_line_coding[port]));
	if (!UDI_CDC_ENABLE_EXT(port)) {
		return false;
	}
	udi_cdc_nb_comm_enabled++;
80003ecc:	48 68       	lddpc	r8,80003ee4 <udi_cdc_comm_enable+0x17c>
80003ece:	11 88       	ld.ub	r8,r8[0x0]
80003ed0:	5c 58       	castu.b	r8
80003ed2:	2f f8       	sub	r8,-1
80003ed4:	5c 58       	castu.b	r8
80003ed6:	48 49       	lddpc	r9,80003ee4 <udi_cdc_comm_enable+0x17c>
80003ed8:	b2 88       	st.b	r9[0x0],r8
	return true;
80003eda:	30 18       	mov	r8,1
}
80003edc:	10 9c       	mov	r12,r8
80003ede:	2f fd       	sub	sp,-4
80003ee0:	e3 cd 80 80 	ldm	sp++,r7,pc
80003ee4:	00 00       	add	r0,r0
80003ee6:	01 14       	ld.sh	r4,r0++
80003ee8:	00 00       	add	r0,r0
80003eea:	01 04       	ld.w	r4,r0++
80003eec:	00 00       	add	r0,r0
80003eee:	01 08       	ld.w	r8,r0++
80003ef0:	00 00       	add	r0,r0
80003ef2:	00 fc       	st.b	--r0,r12

80003ef4 <udi_cdc_data_enable>:

bool udi_cdc_data_enable(void)
{
80003ef4:	eb cd 40 80 	pushm	r7,lr
80003ef8:	1a 97       	mov	r7,sp
80003efa:	20 1d       	sub	sp,4
	uint8_t port;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
80003efc:	30 08       	mov	r8,0
80003efe:	ef 68 ff ff 	st.b	r7[-1],r8
	udi_cdc_nb_data_enabled = 0;
80003f02:	4b a9       	lddpc	r9,80003fe8 <udi_cdc_data_enable+0xf4>
80003f04:	30 08       	mov	r8,0
80003f06:	b2 88       	st.b	r9[0x0],r8
	}
	port = udi_cdc_nb_data_enabled;
#endif

	// Initialize TX management
	udi_cdc_tx_trans_ongoing[port] = false;
80003f08:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80003f0c:	4b 8a       	lddpc	r10,80003fec <udi_cdc_data_enable+0xf8>
80003f0e:	30 08       	mov	r8,0
80003f10:	f4 09 0b 08 	st.b	r10[r9],r8
	udi_cdc_tx_both_buf_to_send[port] = false;
80003f14:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80003f18:	4b 6a       	lddpc	r10,80003ff0 <udi_cdc_data_enable+0xfc>
80003f1a:	30 08       	mov	r8,0
80003f1c:	f4 09 0b 08 	st.b	r10[r9],r8
	udi_cdc_tx_buf_sel[port] = 0;
80003f20:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80003f24:	4b 4a       	lddpc	r10,80003ff4 <udi_cdc_data_enable+0x100>
80003f26:	30 08       	mov	r8,0
80003f28:	f4 09 0b 08 	st.b	r10[r9],r8
	udi_cdc_tx_buf_nb[port][0] = 0;
80003f2c:	ef 3a ff ff 	ld.ub	r10,r7[-1]
80003f30:	4b 29       	lddpc	r9,80003ff8 <udi_cdc_data_enable+0x104>
80003f32:	30 08       	mov	r8,0
80003f34:	f2 0a 0a 28 	st.h	r9[r10<<0x2],r8
	udi_cdc_tx_buf_nb[port][1] = 0;
80003f38:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80003f3c:	4a f9       	lddpc	r9,80003ff8 <udi_cdc_data_enable+0x104>
80003f3e:	a1 78       	lsl	r8,0x1
80003f40:	f0 ca ff ff 	sub	r10,r8,-1
80003f44:	30 08       	mov	r8,0
80003f46:	f2 0a 0a 18 	st.h	r9[r10<<0x1],r8
	udi_cdc_tx_sof_num[port] = 0;
80003f4a:	ef 3a ff ff 	ld.ub	r10,r7[-1]
80003f4e:	4a c9       	lddpc	r9,80003ffc <udi_cdc_data_enable+0x108>
80003f50:	30 08       	mov	r8,0
80003f52:	f2 0a 0a 18 	st.h	r9[r10<<0x1],r8
	udi_cdc_tx_send(port);
80003f56:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80003f5a:	10 9c       	mov	r12,r8
80003f5c:	f0 1f 00 29 	mcall	80004000 <udi_cdc_data_enable+0x10c>

	// Initialize RX management
	udi_cdc_rx_trans_ongoing[port] = false;
80003f60:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80003f64:	4a 8a       	lddpc	r10,80004004 <udi_cdc_data_enable+0x110>
80003f66:	30 08       	mov	r8,0
80003f68:	f4 09 0b 08 	st.b	r10[r9],r8
	udi_cdc_rx_buf_sel[port] = 0;
80003f6c:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80003f70:	4a 6a       	lddpc	r10,80004008 <udi_cdc_data_enable+0x114>
80003f72:	30 08       	mov	r8,0
80003f74:	f4 09 0b 08 	st.b	r10[r9],r8
	udi_cdc_rx_buf_nb[port][0] = 0;
80003f78:	ef 3a ff ff 	ld.ub	r10,r7[-1]
80003f7c:	4a 49       	lddpc	r9,8000400c <udi_cdc_data_enable+0x118>
80003f7e:	30 08       	mov	r8,0
80003f80:	f2 0a 0a 28 	st.h	r9[r10<<0x2],r8
	udi_cdc_rx_buf_nb[port][1] = 0;
80003f84:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80003f88:	4a 19       	lddpc	r9,8000400c <udi_cdc_data_enable+0x118>
80003f8a:	a1 78       	lsl	r8,0x1
80003f8c:	f0 ca ff ff 	sub	r10,r8,-1
80003f90:	30 08       	mov	r8,0
80003f92:	f2 0a 0a 18 	st.h	r9[r10<<0x1],r8
	udi_cdc_rx_pos[port] = 0;
80003f96:	ef 3a ff ff 	ld.ub	r10,r7[-1]
80003f9a:	49 e9       	lddpc	r9,80004010 <udi_cdc_data_enable+0x11c>
80003f9c:	30 08       	mov	r8,0
80003f9e:	f2 0a 0a 18 	st.h	r9[r10<<0x1],r8
	if (!udi_cdc_rx_start(port)) {
80003fa2:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80003fa6:	10 9c       	mov	r12,r8
80003fa8:	f0 1f 00 1b 	mcall	80004014 <udi_cdc_data_enable+0x120>
80003fac:	18 98       	mov	r8,r12
80003fae:	ec 18 00 01 	eorl	r8,0x1
80003fb2:	5c 58       	castu.b	r8
80003fb4:	c0 30       	breq	80003fba <udi_cdc_data_enable+0xc6>
		return false;
80003fb6:	30 08       	mov	r8,0
80003fb8:	c1 48       	rjmp	80003fe0 <udi_cdc_data_enable+0xec>
	}
	udi_cdc_nb_data_enabled++;
80003fba:	48 c8       	lddpc	r8,80003fe8 <udi_cdc_data_enable+0xf4>
80003fbc:	11 88       	ld.ub	r8,r8[0x0]
80003fbe:	5c 58       	castu.b	r8
80003fc0:	2f f8       	sub	r8,-1
80003fc2:	5c 58       	castu.b	r8
80003fc4:	48 99       	lddpc	r9,80003fe8 <udi_cdc_data_enable+0xf4>
80003fc6:	b2 88       	st.b	r9[0x0],r8
	if (udi_cdc_nb_data_enabled == UDI_CDC_PORT_NB) {
80003fc8:	48 88       	lddpc	r8,80003fe8 <udi_cdc_data_enable+0xf4>
80003fca:	11 88       	ld.ub	r8,r8[0x0]
80003fcc:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80003fd0:	30 18       	mov	r8,1
80003fd2:	f0 09 18 00 	cp.b	r9,r8
80003fd6:	c0 41       	brne	80003fde <udi_cdc_data_enable+0xea>
		udi_cdc_data_running = true;
80003fd8:	49 09       	lddpc	r9,80004018 <udi_cdc_data_enable+0x124>
80003fda:	30 18       	mov	r8,1
80003fdc:	b2 88       	st.b	r9[0x0],r8
	}
	return true;
80003fde:	30 18       	mov	r8,1
}
80003fe0:	10 9c       	mov	r12,r8
80003fe2:	2f fd       	sub	sp,-4
80003fe4:	e3 cd 80 80 	ldm	sp++,r7,pc
80003fe8:	00 00       	add	r0,r0
80003fea:	01 15       	ld.sh	r5,r0++
80003fec:	00 00       	add	r0,r0
80003fee:	02 34       	cp.w	r4,r1
80003ff0:	00 00       	add	r0,r0
80003ff2:	02 38       	cp.w	r8,r1
80003ff4:	00 00       	add	r0,r0
80003ff6:	02 2c       	rsub	r12,r1
80003ff8:	00 00       	add	r0,r0
80003ffa:	02 28       	rsub	r8,r1
80003ffc:	00 00       	add	r0,r0
80003ffe:	02 30       	cp.w	r0,r1
80004000:	80 00       	ld.sh	r0,r0[0x0]
80004002:	44 6c       	lddsp	r12,sp[0x118]
80004004:	00 00       	add	r0,r0
80004006:	01 a4       	ld.ub	r4,r0[0x2]
80004008:	00 00       	add	r0,r0
8000400a:	01 9c       	ld.ub	r12,r0[0x1]
8000400c:	00 00       	add	r0,r0
8000400e:	01 98       	ld.ub	r8,r0[0x1]
80004010:	00 00       	add	r0,r0
80004012:	01 a0       	ld.ub	r0,r0[0x2]
80004014:	80 00       	ld.sh	r0,r0[0x0]
80004016:	41 dc       	lddsp	r12,sp[0x74]
80004018:	00 00       	add	r0,r0
8000401a:	01 16       	ld.sh	r6,r0++

8000401c <udi_cdc_comm_disable>:

void udi_cdc_comm_disable(void)
{
8000401c:	eb cd 40 80 	pushm	r7,lr
80004020:	1a 97       	mov	r7,sp
	Assert(udi_cdc_nb_comm_enabled != 0);
	udi_cdc_nb_comm_enabled--;
80004022:	48 58       	lddpc	r8,80004034 <udi_cdc_comm_disable+0x18>
80004024:	11 88       	ld.ub	r8,r8[0x0]
80004026:	5c 58       	castu.b	r8
80004028:	20 18       	sub	r8,1
8000402a:	5c 58       	castu.b	r8
8000402c:	48 29       	lddpc	r9,80004034 <udi_cdc_comm_disable+0x18>
8000402e:	b2 88       	st.b	r9[0x0],r8
}
80004030:	e3 cd 80 80 	ldm	sp++,r7,pc
80004034:	00 00       	add	r0,r0
80004036:	01 14       	ld.sh	r4,r0++

80004038 <udi_cdc_data_disable>:

void udi_cdc_data_disable(void)
{
80004038:	eb cd 40 80 	pushm	r7,lr
8000403c:	1a 97       	mov	r7,sp
8000403e:	20 1d       	sub	sp,4
	uint8_t port;

	Assert(udi_cdc_nb_data_enabled != 0);
	udi_cdc_nb_data_enabled--;
80004040:	48 98       	lddpc	r8,80004064 <udi_cdc_data_disable+0x2c>
80004042:	11 88       	ld.ub	r8,r8[0x0]
80004044:	5c 58       	castu.b	r8
80004046:	20 18       	sub	r8,1
80004048:	5c 58       	castu.b	r8
8000404a:	48 79       	lddpc	r9,80004064 <udi_cdc_data_disable+0x2c>
8000404c:	b2 88       	st.b	r9[0x0],r8
	port = udi_cdc_nb_data_enabled;
8000404e:	48 68       	lddpc	r8,80004064 <udi_cdc_data_disable+0x2c>
80004050:	11 88       	ld.ub	r8,r8[0x0]
80004052:	ef 68 ff ff 	st.b	r7[-1],r8
	UDI_CDC_DISABLE_EXT(port);
	udi_cdc_data_running = false;
80004056:	48 59       	lddpc	r9,80004068 <udi_cdc_data_disable+0x30>
80004058:	30 08       	mov	r8,0
8000405a:	b2 88       	st.b	r9[0x0],r8
}
8000405c:	2f fd       	sub	sp,-4
8000405e:	e3 cd 80 80 	ldm	sp++,r7,pc
80004062:	00 00       	add	r0,r0
80004064:	00 00       	add	r0,r0
80004066:	01 15       	ld.sh	r5,r0++
80004068:	00 00       	add	r0,r0
8000406a:	01 16       	ld.sh	r6,r0++

8000406c <udi_cdc_comm_setup>:

bool udi_cdc_comm_setup(void)
{
8000406c:	eb cd 40 80 	pushm	r7,lr
80004070:	1a 97       	mov	r7,sp
80004072:	20 1d       	sub	sp,4
	uint8_t port = udi_cdc_setup_to_port();
80004074:	f0 1f 00 34 	mcall	80004144 <udi_cdc_comm_setup+0xd8>
80004078:	18 98       	mov	r8,r12
8000407a:	ef 68 ff ff 	st.b	r7[-1],r8

	if (Udd_setup_is_in()) {
8000407e:	4b 38       	lddpc	r8,80004148 <udi_cdc_comm_setup+0xdc>
80004080:	11 88       	ld.ub	r8,r8[0x0]
80004082:	10 99       	mov	r9,r8
80004084:	30 08       	mov	r8,0
80004086:	f0 09 18 00 	cp.b	r9,r8
8000408a:	c2 44       	brge	800040d2 <udi_cdc_comm_setup+0x66>
		// GET Interface Requests
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
8000408c:	4a f8       	lddpc	r8,80004148 <udi_cdc_comm_setup+0xdc>
8000408e:	11 88       	ld.ub	r8,r8[0x0]
80004090:	e2 18 00 60 	andl	r8,0x60,COH
80004094:	e0 48 00 20 	cp.w	r8,32
80004098:	c1 d1       	brne	800040d2 <udi_cdc_comm_setup+0x66>
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
8000409a:	4a c8       	lddpc	r8,80004148 <udi_cdc_comm_setup+0xdc>
8000409c:	11 98       	ld.ub	r8,r8[0x1]
8000409e:	e0 48 00 21 	cp.w	r8,33
800040a2:	c1 81       	brne	800040d2 <udi_cdc_comm_setup+0x66>
			case USB_REQ_CDC_GET_LINE_CODING:
				// Get configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
800040a4:	4a 98       	lddpc	r8,80004148 <udi_cdc_comm_setup+0xdc>
800040a6:	90 39       	ld.sh	r9,r8[0x6]
800040a8:	30 78       	mov	r8,7
800040aa:	f0 09 19 00 	cp.h	r9,r8
800040ae:	c0 30       	breq	800040b4 <udi_cdc_comm_setup+0x48>
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
800040b0:	30 08       	mov	r8,0
800040b2:	c4 48       	rjmp	8000413a <udi_cdc_comm_setup+0xce>
				udd_g_ctrlreq.payload =
						(uint8_t *) &
800040b4:	4a 6a       	lddpc	r10,8000414c <udi_cdc_comm_setup+0xe0>
800040b6:	ef 39 ff ff 	ld.ub	r9,r7[-1]
						udi_cdc_line_coding[port];
800040ba:	12 98       	mov	r8,r9
800040bc:	a3 78       	lsl	r8,0x3
800040be:	12 18       	sub	r8,r9
				// Get configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
				udd_g_ctrlreq.payload =
						(uint8_t *) &
800040c0:	f4 08 00 09 	add	r9,r10,r8
			case USB_REQ_CDC_GET_LINE_CODING:
				// Get configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
				udd_g_ctrlreq.payload =
800040c4:	4a 18       	lddpc	r8,80004148 <udi_cdc_comm_setup+0xdc>
800040c6:	91 29       	st.w	r8[0x8],r9
						(uint8_t *) &
						udi_cdc_line_coding[port];
				udd_g_ctrlreq.payload_size =
800040c8:	4a 09       	lddpc	r9,80004148 <udi_cdc_comm_setup+0xdc>
800040ca:	30 78       	mov	r8,7
800040cc:	b2 68       	st.h	r9[0xc],r8
						sizeof(usb_cdc_line_coding_t);
				return true;
800040ce:	30 18       	mov	r8,1
800040d0:	c3 58       	rjmp	8000413a <udi_cdc_comm_setup+0xce>
			}
		}
	}
	if (Udd_setup_is_out()) {
800040d2:	49 e8       	lddpc	r8,80004148 <udi_cdc_comm_setup+0xdc>
800040d4:	11 88       	ld.ub	r8,r8[0x0]
800040d6:	10 99       	mov	r9,r8
800040d8:	30 08       	mov	r8,0
800040da:	f0 09 18 00 	cp.b	r9,r8
800040de:	c2 d5       	brlt	80004138 <udi_cdc_comm_setup+0xcc>
		// SET Interface Requests
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
800040e0:	49 a8       	lddpc	r8,80004148 <udi_cdc_comm_setup+0xdc>
800040e2:	11 88       	ld.ub	r8,r8[0x0]
800040e4:	e2 18 00 60 	andl	r8,0x60,COH
800040e8:	e0 48 00 20 	cp.w	r8,32
800040ec:	c2 61       	brne	80004138 <udi_cdc_comm_setup+0xcc>
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
800040ee:	49 78       	lddpc	r8,80004148 <udi_cdc_comm_setup+0xdc>
800040f0:	11 98       	ld.ub	r8,r8[0x1]
800040f2:	e0 48 00 20 	cp.w	r8,32
800040f6:	c0 50       	breq	80004100 <udi_cdc_comm_setup+0x94>
800040f8:	e0 48 00 22 	cp.w	r8,34
800040fc:	c1 c0       	breq	80004134 <udi_cdc_comm_setup+0xc8>
800040fe:	c1 d8       	rjmp	80004138 <udi_cdc_comm_setup+0xcc>
			case USB_REQ_CDC_SET_LINE_CODING:
				// Change configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
80004100:	49 28       	lddpc	r8,80004148 <udi_cdc_comm_setup+0xdc>
80004102:	90 39       	ld.sh	r9,r8[0x6]
80004104:	30 78       	mov	r8,7
80004106:	f0 09 19 00 	cp.h	r9,r8
8000410a:	c0 30       	breq	80004110 <udi_cdc_comm_setup+0xa4>
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
8000410c:	30 08       	mov	r8,0
8000410e:	c1 68       	rjmp	8000413a <udi_cdc_comm_setup+0xce>
				udd_g_ctrlreq.callback =
80004110:	48 e8       	lddpc	r8,80004148 <udi_cdc_comm_setup+0xdc>
80004112:	49 09       	lddpc	r9,80004150 <udi_cdc_comm_setup+0xe4>
80004114:	91 49       	st.w	r8[0x10],r9
						udi_cdc_line_coding_received;
				udd_g_ctrlreq.payload =
						(uint8_t *) &
80004116:	48 ea       	lddpc	r10,8000414c <udi_cdc_comm_setup+0xe0>
80004118:	ef 39 ff ff 	ld.ub	r9,r7[-1]
						udi_cdc_line_coding[port];
8000411c:	12 98       	mov	r8,r9
8000411e:	a3 78       	lsl	r8,0x3
80004120:	12 18       	sub	r8,r9
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
				udd_g_ctrlreq.callback =
						udi_cdc_line_coding_received;
				udd_g_ctrlreq.payload =
						(uint8_t *) &
80004122:	f4 08 00 09 	add	r9,r10,r8
				if (sizeof(usb_cdc_line_coding_t) !=
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
				udd_g_ctrlreq.callback =
						udi_cdc_line_coding_received;
				udd_g_ctrlreq.payload =
80004126:	48 98       	lddpc	r8,80004148 <udi_cdc_comm_setup+0xdc>
80004128:	91 29       	st.w	r8[0x8],r9
						(uint8_t *) &
						udi_cdc_line_coding[port];
				udd_g_ctrlreq.payload_size =
8000412a:	48 89       	lddpc	r9,80004148 <udi_cdc_comm_setup+0xdc>
8000412c:	30 78       	mov	r8,7
8000412e:	b2 68       	st.h	r9[0xc],r8
						sizeof(usb_cdc_line_coding_t);
				return true;
80004130:	30 18       	mov	r8,1
80004132:	c0 48       	rjmp	8000413a <udi_cdc_comm_setup+0xce>
						(udd_g_ctrlreq.req.wValue
						 & CDC_CTRL_SIGNAL_DTE_PRESENT)));
				UDI_CDC_SET_RTS_EXT(port, (0 !=
						(udd_g_ctrlreq.req.wValue
						 & CDC_CTRL_SIGNAL_ACTIVATE_CARRIER)));
				return true;
80004134:	30 18       	mov	r8,1
80004136:	c0 28       	rjmp	8000413a <udi_cdc_comm_setup+0xce>
			}
		}
	}
	return false;  // request Not supported
80004138:	30 08       	mov	r8,0
}
8000413a:	10 9c       	mov	r12,r8
8000413c:	2f fd       	sub	sp,-4
8000413e:	e3 cd 80 80 	ldm	sp++,r7,pc
80004142:	00 00       	add	r0,r0
80004144:	80 00       	ld.sh	r0,r0[0x0]
80004146:	41 8c       	lddsp	r12,sp[0x60]
80004148:	00 00       	add	r0,r0
8000414a:	03 48       	ld.w	r8,--r1
8000414c:	00 00       	add	r0,r0
8000414e:	00 fc       	st.b	--r0,r12
80004150:	80 00       	ld.sh	r0,r0[0x0]
80004152:	41 c0       	lddsp	r0,sp[0x70]

80004154 <udi_cdc_data_setup>:

bool udi_cdc_data_setup(void)
{
80004154:	eb cd 40 80 	pushm	r7,lr
80004158:	1a 97       	mov	r7,sp
	return false;  // request Not supported
8000415a:	30 08       	mov	r8,0
}
8000415c:	10 9c       	mov	r12,r8
8000415e:	e3 cd 80 80 	ldm	sp++,r7,pc

80004162 <udi_cdc_getsetting>:

uint8_t udi_cdc_getsetting(void)
{
80004162:	eb cd 40 80 	pushm	r7,lr
80004166:	1a 97       	mov	r7,sp
	return 0;      // CDC don't have multiple alternate setting
80004168:	30 08       	mov	r8,0
}
8000416a:	10 9c       	mov	r12,r8
8000416c:	e3 cd 80 80 	ldm	sp++,r7,pc

80004170 <udi_cdc_data_sof_notify>:

void udi_cdc_data_sof_notify(void)
{
80004170:	eb cd 40 80 	pushm	r7,lr
80004174:	1a 97       	mov	r7,sp
	static uint8_t port_notify = 0;

	// A call of udi_cdc_data_sof_notify() is done for each port
	udi_cdc_tx_send(port_notify);
80004176:	48 48       	lddpc	r8,80004184 <udi_cdc_data_sof_notify+0x14>
80004178:	11 88       	ld.ub	r8,r8[0x0]
8000417a:	10 9c       	mov	r12,r8
8000417c:	f0 1f 00 03 	mcall	80004188 <udi_cdc_data_sof_notify+0x18>
	port_notify++;
	if (port_notify >= UDI_CDC_PORT_NB) {
		port_notify = 0;
	}
#endif
}
80004180:	e3 cd 80 80 	ldm	sp++,r7,pc
80004184:	00 00       	add	r0,r0
80004186:	02 3e       	cp.w	lr,r1
80004188:	80 00       	ld.sh	r0,r0[0x0]
8000418a:	44 6c       	lddsp	r12,sp[0x118]

8000418c <udi_cdc_setup_to_port>:

//-------------------------------------------------
//------- Internal routines to control serial line

static uint8_t udi_cdc_setup_to_port(void)
{
8000418c:	eb cd 40 80 	pushm	r7,lr
80004190:	1a 97       	mov	r7,sp
80004192:	20 1d       	sub	sp,4
	uint8_t port;

	switch (udd_g_ctrlreq.req.wIndex & 0xFF) {
80004194:	48 a8       	lddpc	r8,800041bc <udi_cdc_setup_to_port+0x30>
80004196:	90 28       	ld.sh	r8,r8[0x4]
80004198:	5c 78       	castu.h	r8
8000419a:	f1 d8 c0 08 	bfextu	r8,r8,0x0,0x8
8000419e:	c0 51       	brne	800041a8 <udi_cdc_setup_to_port+0x1c>
#define UDI_CDC_IFACE_COMM_TO_PORT(iface, unused) \
	case UDI_CDC_COMM_IFACE_NUMBER_##iface: \
		port = iface; \
		break;
	MREPEAT(UDI_CDC_PORT_NB, UDI_CDC_IFACE_COMM_TO_PORT, ~)
800041a0:	30 08       	mov	r8,0
800041a2:	ef 68 ff ff 	st.b	r7[-1],r8
800041a6:	c0 48       	rjmp	800041ae <udi_cdc_setup_to_port+0x22>
#undef UDI_CDC_IFACE_COMM_TO_PORT
	default:
		port = 0;
800041a8:	30 08       	mov	r8,0
800041aa:	ef 68 ff ff 	st.b	r7[-1],r8
		break;
	}
	return port;
800041ae:	ef 38 ff ff 	ld.ub	r8,r7[-1]
}
800041b2:	10 9c       	mov	r12,r8
800041b4:	2f fd       	sub	sp,-4
800041b6:	e3 cd 80 80 	ldm	sp++,r7,pc
800041ba:	00 00       	add	r0,r0
800041bc:	00 00       	add	r0,r0
800041be:	03 48       	ld.w	r8,--r1

800041c0 <udi_cdc_line_coding_received>:

static void udi_cdc_line_coding_received(void)
{
800041c0:	eb cd 40 80 	pushm	r7,lr
800041c4:	1a 97       	mov	r7,sp
800041c6:	20 1d       	sub	sp,4
	uint8_t port = udi_cdc_setup_to_port();
800041c8:	f0 1f 00 04 	mcall	800041d8 <udi_cdc_line_coding_received+0x18>
800041cc:	18 98       	mov	r8,r12
800041ce:	ef 68 ff ff 	st.b	r7[-1],r8
	UNUSED(port);

	UDI_CDC_SET_CODING_EXT(port, (&udi_cdc_line_coding[port]));
}
800041d2:	2f fd       	sub	sp,-4
800041d4:	e3 cd 80 80 	ldm	sp++,r7,pc
800041d8:	80 00       	ld.sh	r0,r0[0x0]
800041da:	41 8c       	lddsp	r12,sp[0x60]

800041dc <udi_cdc_rx_start>:
//-------------------------------------------------
//------- Internal routines to process data transfer


static bool udi_cdc_rx_start(uint8_t port)
{
800041dc:	eb cd 40 80 	pushm	r7,lr
800041e0:	1a 97       	mov	r7,sp
800041e2:	20 3d       	sub	sp,12
800041e4:	18 98       	mov	r8,r12
800041e6:	ef 68 ff f4 	st.b	r7[-12],r8
	irqflags_t flags;
	uint8_t buf_sel_trans;
	udd_ep_id_t ep;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
800041ea:	30 08       	mov	r8,0
800041ec:	ef 68 ff f4 	st.b	r7[-12],r8
#endif

	flags = cpu_irq_save();
800041f0:	f0 1f 00 39 	mcall	800042d4 <udi_cdc_rx_start+0xf8>
800041f4:	18 98       	mov	r8,r12
800041f6:	ef 48 ff f8 	st.w	r7[-8],r8
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
800041fa:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800041fe:	4b 79       	lddpc	r9,800042d8 <udi_cdc_rx_start+0xfc>
80004200:	f2 08 07 08 	ld.ub	r8,r9[r8]
80004204:	ef 68 ff fe 	st.b	r7[-2],r8
	if (udi_cdc_rx_trans_ongoing[port] ||
80004208:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000420c:	4b 49       	lddpc	r9,800042dc <udi_cdc_rx_start+0x100>
8000420e:	f2 08 07 08 	ld.ub	r8,r9[r8]
80004212:	5c 58       	castu.b	r8
80004214:	c1 61       	brne	80004240 <udi_cdc_rx_start+0x64>
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
80004216:	ef 39 ff f4 	ld.ub	r9,r7[-12]
8000421a:	4b 28       	lddpc	r8,800042e0 <udi_cdc_rx_start+0x104>
8000421c:	f0 09 04 18 	ld.sh	r8,r8[r9<<0x1]
80004220:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
80004224:	ef 3b ff f4 	ld.ub	r11,r7[-12]
80004228:	ef 3a ff fe 	ld.ub	r10,r7[-2]
8000422c:	4a e8       	lddpc	r8,800042e4 <udi_cdc_rx_start+0x108>
8000422e:	a1 7b       	lsl	r11,0x1
80004230:	f6 0a 00 0a 	add	r10,r11,r10
80004234:	f0 0a 04 18 	ld.sh	r8,r8[r10<<0x1]
80004238:	5c 88       	casts.h	r8
	port = 0;
#endif

	flags = cpu_irq_save();
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
	if (udi_cdc_rx_trans_ongoing[port] ||
8000423a:	f0 09 19 00 	cp.h	r9,r8
8000423e:	c0 72       	brcc	8000424c <udi_cdc_rx_start+0x70>
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
		// Transfer already on-going or current buffer no empty
		cpu_irq_restore(flags);
80004240:	ee fc ff f8 	ld.w	r12,r7[-8]
80004244:	f0 1f 00 29 	mcall	800042e8 <udi_cdc_rx_start+0x10c>
		return false;
80004248:	30 08       	mov	r8,0
8000424a:	c4 08       	rjmp	800042ca <udi_cdc_rx_start+0xee>
	}

	// Change current buffer
	udi_cdc_rx_pos[port] = 0;
8000424c:	ef 3a ff f4 	ld.ub	r10,r7[-12]
80004250:	4a 49       	lddpc	r9,800042e0 <udi_cdc_rx_start+0x104>
80004252:	30 08       	mov	r8,0
80004254:	f2 0a 0a 18 	st.h	r9[r10<<0x1],r8
	udi_cdc_rx_buf_sel[port] = (buf_sel_trans==0)?1:0;
80004258:	ef 3a ff f4 	ld.ub	r10,r7[-12]
8000425c:	ef 39 ff fe 	ld.ub	r9,r7[-2]
80004260:	30 08       	mov	r8,0
80004262:	f0 09 18 00 	cp.b	r9,r8
80004266:	5f 08       	sreq	r8
80004268:	49 c9       	lddpc	r9,800042d8 <udi_cdc_rx_start+0xfc>
8000426a:	f2 0a 0b 08 	st.b	r9[r10],r8

	// Start transfer on RX
	udi_cdc_rx_trans_ongoing[port] = true;
8000426e:	ef 39 ff f4 	ld.ub	r9,r7[-12]
80004272:	49 ba       	lddpc	r10,800042dc <udi_cdc_rx_start+0x100>
80004274:	30 18       	mov	r8,1
80004276:	f4 09 0b 08 	st.b	r10[r9],r8
	cpu_irq_restore(flags);
8000427a:	ee fc ff f8 	ld.w	r12,r7[-8]
8000427e:	f0 1f 00 1b 	mcall	800042e8 <udi_cdc_rx_start+0x10c>

	if (udi_cdc_multi_is_rx_ready(port)) {
80004282:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80004286:	10 9c       	mov	r12,r8
80004288:	f0 1f 00 19 	mcall	800042ec <udi_cdc_rx_start+0x110>
		UDI_CDC_RX_NOTIFY(port);
	}
	// Send the buffer with enable of short packet
	switch (port) {
8000428c:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80004290:	58 08       	cp.w	r8,0
80004292:	c0 51       	brne	8000429c <udi_cdc_rx_start+0xc0>
#define UDI_CDC_PORT_TO_DATA_EP_OUT(index, unused) \
	case index: \
		ep = UDI_CDC_DATA_EP_OUT_##index; \
		break;
	MREPEAT(UDI_CDC_PORT_NB, UDI_CDC_PORT_TO_DATA_EP_OUT, ~)
80004294:	30 28       	mov	r8,2
80004296:	ef 68 ff ff 	st.b	r7[-1],r8
8000429a:	c0 48       	rjmp	800042a2 <udi_cdc_rx_start+0xc6>
#undef UDI_CDC_PORT_TO_DATA_EP_OUT
	default:
		ep = UDI_CDC_DATA_EP_OUT_0;
8000429c:	30 28       	mov	r8,2
8000429e:	ef 68 ff ff 	st.b	r7[-1],r8
		break;
	}
	return udd_ep_run(ep,
800042a2:	49 49       	lddpc	r9,800042f0 <udi_cdc_rx_start+0x114>
800042a4:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800042a8:	f0 0a 15 01 	lsl	r10,r8,0x1
800042ac:	ef 38 ff fe 	ld.ub	r8,r7[-2]
800042b0:	f4 08 00 08 	add	r8,r10,r8
800042b4:	a7 68       	lsl	r8,0x6
800042b6:	f2 08 00 0a 	add	r10,r9,r8
800042ba:	ef 3c ff ff 	ld.ub	r12,r7[-1]
800042be:	48 e8       	lddpc	r8,800042f4 <udi_cdc_rx_start+0x118>
800042c0:	34 09       	mov	r9,64
800042c2:	30 1b       	mov	r11,1
800042c4:	f0 1f 00 0d 	mcall	800042f8 <udi_cdc_rx_start+0x11c>
800042c8:	18 98       	mov	r8,r12
			true,
			udi_cdc_rx_buf[port][buf_sel_trans],
			UDI_CDC_RX_BUFFERS,
			udi_cdc_data_received);
}
800042ca:	10 9c       	mov	r12,r8
800042cc:	2f dd       	sub	sp,-12
800042ce:	e3 cd 80 80 	ldm	sp++,r7,pc
800042d2:	00 00       	add	r0,r0
800042d4:	80 00       	ld.sh	r0,r0[0x0]
800042d6:	3d 00       	mov	r0,-48
800042d8:	00 00       	add	r0,r0
800042da:	01 9c       	ld.ub	r12,r0[0x1]
800042dc:	00 00       	add	r0,r0
800042de:	01 a4       	ld.ub	r4,r0[0x2]
800042e0:	00 00       	add	r0,r0
800042e2:	01 a0       	ld.ub	r0,r0[0x2]
800042e4:	00 00       	add	r0,r0
800042e6:	01 98       	ld.ub	r8,r0[0x1]
800042e8:	80 00       	ld.sh	r0,r0[0x0]
800042ea:	3d 40       	mov	r0,-44
800042ec:	80 00       	ld.sh	r0,r0[0x0]
800042ee:	47 28       	lddsp	r8,sp[0x1c8]
800042f0:	00 00       	add	r0,r0
800042f2:	01 18       	ld.sh	r8,r0++
800042f4:	80 00       	ld.sh	r0,r0[0x0]
800042f6:	42 fc       	lddsp	r12,sp[0xbc]
800042f8:	80 00       	ld.sh	r0,r0[0x0]
800042fa:	2c fc       	sub	r12,-49

800042fc <udi_cdc_data_received>:


static void udi_cdc_data_received(udd_ep_status_t status, iram_size_t n, udd_ep_id_t ep)
{
800042fc:	eb cd 40 80 	pushm	r7,lr
80004300:	1a 97       	mov	r7,sp
80004302:	20 4d       	sub	sp,16
80004304:	ef 4c ff f8 	st.w	r7[-8],r12
80004308:	ef 4b ff f4 	st.w	r7[-12],r11
8000430c:	14 98       	mov	r8,r10
8000430e:	ef 68 ff f0 	st.b	r7[-16],r8
	uint8_t buf_sel_trans;
	uint8_t port;

	switch (ep) {
80004312:	ef 38 ff f0 	ld.ub	r8,r7[-16]
80004316:	58 28       	cp.w	r8,2
80004318:	c0 51       	brne	80004322 <udi_cdc_data_received+0x26>
#define UDI_CDC_DATA_EP_OUT_TO_PORT(index, unused) \
	case UDI_CDC_DATA_EP_OUT_##index: \
		port = index; \
		break;
	MREPEAT(UDI_CDC_PORT_NB, UDI_CDC_DATA_EP_OUT_TO_PORT, ~)
8000431a:	30 08       	mov	r8,0
8000431c:	ef 68 ff ff 	st.b	r7[-1],r8
80004320:	c0 48       	rjmp	80004328 <udi_cdc_data_received+0x2c>
#undef UDI_CDC_DATA_EP_OUT_TO_PORT
	default:
		port = 0;
80004322:	30 08       	mov	r8,0
80004324:	ef 68 ff ff 	st.b	r7[-1],r8
		break;
	}

	if (UDD_EP_TRANSFER_OK != status) {
80004328:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000432c:	58 08       	cp.w	r8,0
8000432e:	c4 01       	brne	800043ae <udi_cdc_data_received+0xb2>
		// Abort reception
		return;
	}
	buf_sel_trans = (udi_cdc_rx_buf_sel[port]==0)?1:0;
80004330:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80004334:	4a 19       	lddpc	r9,800043b8 <udi_cdc_data_received+0xbc>
80004336:	f2 08 07 08 	ld.ub	r8,r9[r8]
8000433a:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8000433e:	30 08       	mov	r8,0
80004340:	f0 09 18 00 	cp.b	r9,r8
80004344:	5f 08       	sreq	r8
80004346:	ef 68 ff fe 	st.b	r7[-2],r8
	if (!n) {
8000434a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000434e:	58 08       	cp.w	r8,0
80004350:	c1 61       	brne	8000437c <udi_cdc_data_received+0x80>
		udd_ep_run( ep,
80004352:	49 b9       	lddpc	r9,800043bc <udi_cdc_data_received+0xc0>
80004354:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80004358:	f0 0a 15 01 	lsl	r10,r8,0x1
8000435c:	ef 38 ff fe 	ld.ub	r8,r7[-2]
80004360:	f4 08 00 08 	add	r8,r10,r8
80004364:	a7 68       	lsl	r8,0x6
80004366:	f2 08 00 0a 	add	r10,r9,r8
8000436a:	ef 3c ff f0 	ld.ub	r12,r7[-16]
8000436e:	fe c8 00 72 	sub	r8,pc,114
80004372:	34 09       	mov	r9,64
80004374:	30 1b       	mov	r11,1
80004376:	f0 1f 00 13 	mcall	800043c0 <udi_cdc_data_received+0xc4>
				true,
				udi_cdc_rx_buf[port][buf_sel_trans],
				UDI_CDC_RX_BUFFERS,
				udi_cdc_data_received);
		return;
8000437a:	c1 b8       	rjmp	800043b0 <udi_cdc_data_received+0xb4>
	}
	udi_cdc_rx_buf_nb[port][buf_sel_trans] = n;
8000437c:	ef 3b ff ff 	ld.ub	r11,r7[-1]
80004380:	ef 3a ff fe 	ld.ub	r10,r7[-2]
80004384:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004388:	5c 88       	casts.h	r8
8000438a:	48 f9       	lddpc	r9,800043c4 <udi_cdc_data_received+0xc8>
8000438c:	a1 7b       	lsl	r11,0x1
8000438e:	f6 0a 00 0a 	add	r10,r11,r10
80004392:	f2 0a 0a 18 	st.h	r9[r10<<0x1],r8
	udi_cdc_rx_trans_ongoing[port] = false;
80004396:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000439a:	48 ca       	lddpc	r10,800043c8 <udi_cdc_data_received+0xcc>
8000439c:	30 08       	mov	r8,0
8000439e:	f4 09 0b 08 	st.b	r10[r9],r8
	udi_cdc_rx_start(port);
800043a2:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800043a6:	10 9c       	mov	r12,r8
800043a8:	f0 1f 00 09 	mcall	800043cc <udi_cdc_data_received+0xd0>
800043ac:	c0 28       	rjmp	800043b0 <udi_cdc_data_received+0xb4>
		break;
	}

	if (UDD_EP_TRANSFER_OK != status) {
		// Abort reception
		return;
800043ae:	d7 03       	nop
		return;
	}
	udi_cdc_rx_buf_nb[port][buf_sel_trans] = n;
	udi_cdc_rx_trans_ongoing[port] = false;
	udi_cdc_rx_start(port);
}
800043b0:	2f cd       	sub	sp,-16
800043b2:	e3 cd 80 80 	ldm	sp++,r7,pc
800043b6:	00 00       	add	r0,r0
800043b8:	00 00       	add	r0,r0
800043ba:	01 9c       	ld.ub	r12,r0[0x1]
800043bc:	00 00       	add	r0,r0
800043be:	01 18       	ld.sh	r8,r0++
800043c0:	80 00       	ld.sh	r0,r0[0x0]
800043c2:	2c fc       	sub	r12,-49
800043c4:	00 00       	add	r0,r0
800043c6:	01 98       	ld.ub	r8,r0[0x1]
800043c8:	00 00       	add	r0,r0
800043ca:	01 a4       	ld.ub	r4,r0[0x2]
800043cc:	80 00       	ld.sh	r0,r0[0x0]
800043ce:	41 dc       	lddsp	r12,sp[0x74]

800043d0 <udi_cdc_data_sent>:


static void udi_cdc_data_sent(udd_ep_status_t status, iram_size_t n, udd_ep_id_t ep)
{
800043d0:	eb cd 40 80 	pushm	r7,lr
800043d4:	1a 97       	mov	r7,sp
800043d6:	20 4d       	sub	sp,16
800043d8:	ef 4c ff f8 	st.w	r7[-8],r12
800043dc:	ef 4b ff f4 	st.w	r7[-12],r11
800043e0:	14 98       	mov	r8,r10
800043e2:	ef 68 ff f0 	st.b	r7[-16],r8
	uint8_t port;
	UNUSED(n);

	switch (ep) {
800043e6:	ef 38 ff f0 	ld.ub	r8,r7[-16]
800043ea:	e0 48 00 81 	cp.w	r8,129
800043ee:	c0 51       	brne	800043f8 <udi_cdc_data_sent+0x28>
#define UDI_CDC_DATA_EP_IN_TO_PORT(index, unused) \
	case UDI_CDC_DATA_EP_IN_##index: \
		port = index; \
		break;
	MREPEAT(UDI_CDC_PORT_NB, UDI_CDC_DATA_EP_IN_TO_PORT, ~)
800043f0:	30 08       	mov	r8,0
800043f2:	ef 68 ff ff 	st.b	r7[-1],r8
800043f6:	c0 48       	rjmp	800043fe <udi_cdc_data_sent+0x2e>
#undef UDI_CDC_DATA_EP_IN_TO_PORT
	default:
		port = 0;
800043f8:	30 08       	mov	r8,0
800043fa:	ef 68 ff ff 	st.b	r7[-1],r8
		break;
	}

	if (UDD_EP_TRANSFER_OK != status) {
800043fe:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004402:	58 08       	cp.w	r8,0
80004404:	c2 61       	brne	80004450 <udi_cdc_data_sent+0x80>
		// Abort transfer
		return;
	}
	udi_cdc_tx_buf_nb[port][(udi_cdc_tx_buf_sel[port]==0)?1:0] = 0;
80004406:	ef 3a ff ff 	ld.ub	r10,r7[-1]
8000440a:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000440e:	49 39       	lddpc	r9,80004458 <udi_cdc_data_sent+0x88>
80004410:	f2 08 07 08 	ld.ub	r8,r9[r8]
80004414:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80004418:	30 08       	mov	r8,0
8000441a:	f0 09 18 00 	cp.b	r9,r8
8000441e:	5f 08       	sreq	r8
80004420:	48 f9       	lddpc	r9,8000445c <udi_cdc_data_sent+0x8c>
80004422:	a1 7a       	lsl	r10,0x1
80004424:	10 0a       	add	r10,r8
80004426:	30 08       	mov	r8,0
80004428:	f2 0a 0a 18 	st.h	r9[r10<<0x1],r8
	udi_cdc_tx_both_buf_to_send[port] = false;
8000442c:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80004430:	48 ca       	lddpc	r10,80004460 <udi_cdc_data_sent+0x90>
80004432:	30 08       	mov	r8,0
80004434:	f4 09 0b 08 	st.b	r10[r9],r8
	udi_cdc_tx_trans_ongoing[port] = false;
80004438:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000443c:	48 aa       	lddpc	r10,80004464 <udi_cdc_data_sent+0x94>
8000443e:	30 08       	mov	r8,0
80004440:	f4 09 0b 08 	st.b	r10[r9],r8

	if (n != 0) {
		UDI_CDC_TX_EMPTY_NOTIFY(port);
	}
	udi_cdc_tx_send(port);
80004444:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80004448:	10 9c       	mov	r12,r8
8000444a:	f0 1f 00 08 	mcall	80004468 <udi_cdc_data_sent+0x98>
8000444e:	c0 28       	rjmp	80004452 <udi_cdc_data_sent+0x82>
		break;
	}

	if (UDD_EP_TRANSFER_OK != status) {
		// Abort transfer
		return;
80004450:	d7 03       	nop

	if (n != 0) {
		UDI_CDC_TX_EMPTY_NOTIFY(port);
	}
	udi_cdc_tx_send(port);
}
80004452:	2f cd       	sub	sp,-16
80004454:	e3 cd 80 80 	ldm	sp++,r7,pc
80004458:	00 00       	add	r0,r0
8000445a:	02 2c       	rsub	r12,r1
8000445c:	00 00       	add	r0,r0
8000445e:	02 28       	rsub	r8,r1
80004460:	00 00       	add	r0,r0
80004462:	02 38       	cp.w	r8,r1
80004464:	00 00       	add	r0,r0
80004466:	02 34       	cp.w	r4,r1
80004468:	80 00       	ld.sh	r0,r0[0x0]
8000446a:	44 6c       	lddsp	r12,sp[0x118]

8000446c <udi_cdc_tx_send>:


static void udi_cdc_tx_send(uint8_t port)
{
8000446c:	eb cd 40 c0 	pushm	r6-r7,lr
80004470:	1a 97       	mov	r7,sp
80004472:	20 3d       	sub	sp,12
80004474:	18 98       	mov	r8,r12
80004476:	ef 68 ff f4 	st.b	r7[-12],r8
	bool b_short_packet;
	udd_ep_id_t ep;
	static uint16_t sof_zlp_counter = 0;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
8000447a:	30 08       	mov	r8,0
8000447c:	ef 68 ff f4 	st.b	r7[-12],r8
#endif

	if (udi_cdc_tx_trans_ongoing[port]) {
80004480:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80004484:	4f a9       	lddpc	r9,8000466c <udi_cdc_tx_send+0x200>
80004486:	f2 08 07 08 	ld.ub	r8,r9[r8]
8000448a:	5c 58       	castu.b	r8
8000448c:	e0 81 00 e9 	brne	8000465e <udi_cdc_tx_send+0x1f2>
		return; // Already on going or wait next SOF to send next data
	}
	if (udd_is_high_speed()) {
80004490:	f0 1f 00 78 	mcall	80004670 <udi_cdc_tx_send+0x204>
80004494:	18 98       	mov	r8,r12
80004496:	58 08       	cp.w	r8,0
80004498:	c0 e0       	breq	800044b4 <udi_cdc_tx_send+0x48>
		if (udi_cdc_tx_sof_num[port] == udd_get_micro_frame_number()) {
8000449a:	ef 39 ff f4 	ld.ub	r9,r7[-12]
8000449e:	4f 68       	lddpc	r8,80004674 <udi_cdc_tx_send+0x208>
800044a0:	f0 09 04 16 	ld.sh	r6,r8[r9<<0x1]
800044a4:	f0 1f 00 75 	mcall	80004678 <udi_cdc_tx_send+0x20c>
800044a8:	18 98       	mov	r8,r12
800044aa:	5c 88       	casts.h	r8
800044ac:	f0 06 19 00 	cp.h	r6,r8
800044b0:	c0 f1       	brne	800044ce <udi_cdc_tx_send+0x62>
			return; // Wait next SOF to send next data
800044b2:	cd 98       	rjmp	80004664 <udi_cdc_tx_send+0x1f8>
		}
	}else{
		if (udi_cdc_tx_sof_num[port] == udd_get_frame_number()) {
800044b4:	ef 39 ff f4 	ld.ub	r9,r7[-12]
800044b8:	4e f8       	lddpc	r8,80004674 <udi_cdc_tx_send+0x208>
800044ba:	f0 09 04 16 	ld.sh	r6,r8[r9<<0x1]
800044be:	f0 1f 00 70 	mcall	8000467c <udi_cdc_tx_send+0x210>
800044c2:	18 98       	mov	r8,r12
800044c4:	5c 88       	casts.h	r8
800044c6:	f0 06 19 00 	cp.h	r6,r8
800044ca:	e0 80 00 cc 	breq	80004662 <udi_cdc_tx_send+0x1f6>
			return; // Wait next SOF to send next data
		}
	}

	flags = cpu_irq_save(); // to protect udi_cdc_tx_buf_sel
800044ce:	f0 1f 00 6d 	mcall	80004680 <udi_cdc_tx_send+0x214>
800044d2:	18 98       	mov	r8,r12
800044d4:	ef 48 ff f8 	st.w	r7[-8],r8
	buf_sel_trans = udi_cdc_tx_buf_sel[port];
800044d8:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800044dc:	4e a9       	lddpc	r9,80004684 <udi_cdc_tx_send+0x218>
800044de:	f2 08 07 08 	ld.ub	r8,r9[r8]
800044e2:	ef 68 ff fd 	st.b	r7[-3],r8
	if (udi_cdc_tx_buf_nb[port][buf_sel_trans] == 0) {
800044e6:	ef 3a ff f4 	ld.ub	r10,r7[-12]
800044ea:	ef 39 ff fd 	ld.ub	r9,r7[-3]
800044ee:	4e 78       	lddpc	r8,80004688 <udi_cdc_tx_send+0x21c>
800044f0:	a1 7a       	lsl	r10,0x1
800044f2:	f4 09 00 09 	add	r9,r10,r9
800044f6:	f0 09 04 18 	ld.sh	r8,r8[r9<<0x1]
800044fa:	58 08       	cp.w	r8,0
800044fc:	c2 71       	brne	8000454a <udi_cdc_tx_send+0xde>
		sof_zlp_counter++;
800044fe:	4e 48       	lddpc	r8,8000468c <udi_cdc_tx_send+0x220>
80004500:	90 08       	ld.sh	r8,r8[0x0]
80004502:	2f f8       	sub	r8,-1
80004504:	5c 88       	casts.h	r8
80004506:	4e 29       	lddpc	r9,8000468c <udi_cdc_tx_send+0x220>
80004508:	b2 08       	st.h	r9[0x0],r8
		if (((!udd_is_high_speed()) && (sof_zlp_counter < 100))
8000450a:	f0 1f 00 5a 	mcall	80004670 <udi_cdc_tx_send+0x204>
8000450e:	18 98       	mov	r8,r12
80004510:	ec 18 00 01 	eorl	r8,0x1
80004514:	5c 58       	castu.b	r8
80004516:	c0 80       	breq	80004526 <udi_cdc_tx_send+0xba>
80004518:	4d d8       	lddpc	r8,8000468c <udi_cdc_tx_send+0x220>
8000451a:	90 09       	ld.sh	r9,r8[0x0]
8000451c:	36 38       	mov	r8,99
8000451e:	f0 09 19 00 	cp.h	r9,r8
80004522:	e0 88 00 0f 	brls	80004540 <udi_cdc_tx_send+0xd4>
80004526:	f0 1f 00 53 	mcall	80004670 <udi_cdc_tx_send+0x204>
8000452a:	18 98       	mov	r8,r12
8000452c:	58 08       	cp.w	r8,0
8000452e:	c0 e0       	breq	8000454a <udi_cdc_tx_send+0xde>
				|| (udd_is_high_speed() && (sof_zlp_counter < 800))) {
80004530:	4d 78       	lddpc	r8,8000468c <udi_cdc_tx_send+0x220>
80004532:	90 09       	ld.sh	r9,r8[0x0]

	flags = cpu_irq_save(); // to protect udi_cdc_tx_buf_sel
	buf_sel_trans = udi_cdc_tx_buf_sel[port];
	if (udi_cdc_tx_buf_nb[port][buf_sel_trans] == 0) {
		sof_zlp_counter++;
		if (((!udd_is_high_speed()) && (sof_zlp_counter < 100))
80004534:	e0 68 03 1f 	mov	r8,799
80004538:	f0 09 19 00 	cp.h	r9,r8
8000453c:	e0 8b 00 07 	brhi	8000454a <udi_cdc_tx_send+0xde>
				|| (udd_is_high_speed() && (sof_zlp_counter < 800))) {
			cpu_irq_restore(flags);
80004540:	ee fc ff f8 	ld.w	r12,r7[-8]
80004544:	f0 1f 00 53 	mcall	80004690 <udi_cdc_tx_send+0x224>
			return;
80004548:	c8 e8       	rjmp	80004664 <udi_cdc_tx_send+0x1f8>
		}
	}
	sof_zlp_counter = 0;
8000454a:	4d 19       	lddpc	r9,8000468c <udi_cdc_tx_send+0x220>
8000454c:	30 08       	mov	r8,0
8000454e:	b2 08       	st.h	r9[0x0],r8

	if (!udi_cdc_tx_both_buf_to_send[port]) {
80004550:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80004554:	4d 09       	lddpc	r9,80004694 <udi_cdc_tx_send+0x228>
80004556:	f2 08 07 08 	ld.ub	r8,r9[r8]
8000455a:	5c 58       	castu.b	r8
8000455c:	ec 18 00 01 	eorl	r8,0x1
80004560:	5c 58       	castu.b	r8
80004562:	c0 d0       	breq	8000457c <udi_cdc_tx_send+0x110>
		// Send current Buffer
		// and switch the current buffer
		udi_cdc_tx_buf_sel[port] = (buf_sel_trans==0)?1:0;
80004564:	ef 3a ff f4 	ld.ub	r10,r7[-12]
80004568:	ef 39 ff fd 	ld.ub	r9,r7[-3]
8000456c:	30 08       	mov	r8,0
8000456e:	f0 09 18 00 	cp.b	r9,r8
80004572:	5f 08       	sreq	r8
80004574:	4c 49       	lddpc	r9,80004684 <udi_cdc_tx_send+0x218>
80004576:	f2 0a 0b 08 	st.b	r9[r10],r8
8000457a:	c0 98       	rjmp	8000458c <udi_cdc_tx_send+0x120>
	}else{
		// Send the other Buffer
		// and no switch the current buffer
		buf_sel_trans = (buf_sel_trans==0)?1:0;
8000457c:	ef 39 ff fd 	ld.ub	r9,r7[-3]
80004580:	30 08       	mov	r8,0
80004582:	f0 09 18 00 	cp.b	r9,r8
80004586:	5f 08       	sreq	r8
80004588:	ef 68 ff fd 	st.b	r7[-3],r8
	}
	udi_cdc_tx_trans_ongoing[port] = true;
8000458c:	ef 39 ff f4 	ld.ub	r9,r7[-12]
80004590:	4b 7a       	lddpc	r10,8000466c <udi_cdc_tx_send+0x200>
80004592:	30 18       	mov	r8,1
80004594:	f4 09 0b 08 	st.b	r10[r9],r8
	cpu_irq_restore(flags);
80004598:	ee fc ff f8 	ld.w	r12,r7[-8]
8000459c:	f0 1f 00 3d 	mcall	80004690 <udi_cdc_tx_send+0x224>

	b_short_packet = (udi_cdc_tx_buf_nb[port][buf_sel_trans] != UDI_CDC_TX_BUFFERS);
800045a0:	ef 3a ff f4 	ld.ub	r10,r7[-12]
800045a4:	ef 39 ff fd 	ld.ub	r9,r7[-3]
800045a8:	4b 88       	lddpc	r8,80004688 <udi_cdc_tx_send+0x21c>
800045aa:	a1 7a       	lsl	r10,0x1
800045ac:	f4 09 00 09 	add	r9,r10,r9
800045b0:	f0 09 04 19 	ld.sh	r9,r8[r9<<0x1]
800045b4:	34 08       	mov	r8,64
800045b6:	f0 09 19 00 	cp.h	r9,r8
800045ba:	5f 18       	srne	r8
800045bc:	ef 68 ff fe 	st.b	r7[-2],r8
	if (b_short_packet) {
800045c0:	ef 39 ff fe 	ld.ub	r9,r7[-2]
800045c4:	30 08       	mov	r8,0
800045c6:	f0 09 18 00 	cp.b	r9,r8
800045ca:	c1 a0       	breq	800045fe <udi_cdc_tx_send+0x192>
		if (udd_is_high_speed()) {
800045cc:	f0 1f 00 29 	mcall	80004670 <udi_cdc_tx_send+0x204>
800045d0:	18 98       	mov	r8,r12
800045d2:	58 08       	cp.w	r8,0
800045d4:	c0 b0       	breq	800045ea <udi_cdc_tx_send+0x17e>
			udi_cdc_tx_sof_num[port] = udd_get_micro_frame_number();
800045d6:	ef 36 ff f4 	ld.ub	r6,r7[-12]
800045da:	f0 1f 00 28 	mcall	80004678 <udi_cdc_tx_send+0x20c>
800045de:	18 98       	mov	r8,r12
800045e0:	5c 88       	casts.h	r8
800045e2:	4a 59       	lddpc	r9,80004674 <udi_cdc_tx_send+0x208>
800045e4:	f2 06 0a 18 	st.h	r9[r6<<0x1],r8
800045e8:	c1 18       	rjmp	8000460a <udi_cdc_tx_send+0x19e>
		}else{
			udi_cdc_tx_sof_num[port] = udd_get_frame_number();
800045ea:	ef 36 ff f4 	ld.ub	r6,r7[-12]
800045ee:	f0 1f 00 24 	mcall	8000467c <udi_cdc_tx_send+0x210>
800045f2:	18 98       	mov	r8,r12
800045f4:	5c 88       	casts.h	r8
800045f6:	4a 09       	lddpc	r9,80004674 <udi_cdc_tx_send+0x208>
800045f8:	f2 06 0a 18 	st.h	r9[r6<<0x1],r8
800045fc:	c0 78       	rjmp	8000460a <udi_cdc_tx_send+0x19e>
		}
	}else{
		udi_cdc_tx_sof_num[port] = 0; // Force next transfer without wait SOF
800045fe:	ef 3a ff f4 	ld.ub	r10,r7[-12]
80004602:	49 d9       	lddpc	r9,80004674 <udi_cdc_tx_send+0x208>
80004604:	30 08       	mov	r8,0
80004606:	f2 0a 0a 18 	st.h	r9[r10<<0x1],r8
	}

	// Send the buffer with enable of short packet
	switch (port) {
8000460a:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000460e:	58 08       	cp.w	r8,0
80004610:	c0 51       	brne	8000461a <udi_cdc_tx_send+0x1ae>
#define UDI_CDC_PORT_TO_DATA_EP_IN(index, unused) \
	case index: \
		ep = UDI_CDC_DATA_EP_IN_##index; \
		break;
	MREPEAT(UDI_CDC_PORT_NB, UDI_CDC_PORT_TO_DATA_EP_IN, ~)
80004612:	38 18       	mov	r8,-127
80004614:	ef 68 ff ff 	st.b	r7[-1],r8
80004618:	c0 48       	rjmp	80004620 <udi_cdc_tx_send+0x1b4>
#undef UDI_CDC_PORT_TO_DATA_EP_IN
	default:
		ep = UDI_CDC_DATA_EP_IN_0;
8000461a:	38 18       	mov	r8,-127
8000461c:	ef 68 ff ff 	st.b	r7[-1],r8
		break;
	}
	udd_ep_run( ep,
			b_short_packet,
			udi_cdc_tx_buf[port][buf_sel_trans],
			udi_cdc_tx_buf_nb[port][buf_sel_trans],
80004620:	ef 3a ff f4 	ld.ub	r10,r7[-12]
80004624:	ef 39 ff fd 	ld.ub	r9,r7[-3]
80004628:	49 88       	lddpc	r8,80004688 <udi_cdc_tx_send+0x21c>
8000462a:	a1 7a       	lsl	r10,0x1
8000462c:	f4 09 00 09 	add	r9,r10,r9
80004630:	f0 09 04 18 	ld.sh	r8,r8[r9<<0x1]
#undef UDI_CDC_PORT_TO_DATA_EP_IN
	default:
		ep = UDI_CDC_DATA_EP_IN_0;
		break;
	}
	udd_ep_run( ep,
80004634:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
80004638:	49 8a       	lddpc	r10,80004698 <udi_cdc_tx_send+0x22c>
8000463a:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000463e:	f0 0b 15 01 	lsl	r11,r8,0x1
80004642:	ef 38 ff fd 	ld.ub	r8,r7[-3]
80004646:	f6 08 00 08 	add	r8,r11,r8
8000464a:	a7 68       	lsl	r8,0x6
8000464c:	10 0a       	add	r10,r8
8000464e:	ef 3b ff fe 	ld.ub	r11,r7[-2]
80004652:	ef 3c ff ff 	ld.ub	r12,r7[-1]
80004656:	49 28       	lddpc	r8,8000469c <udi_cdc_tx_send+0x230>
80004658:	f0 1f 00 12 	mcall	800046a0 <udi_cdc_tx_send+0x234>
8000465c:	c0 48       	rjmp	80004664 <udi_cdc_tx_send+0x1f8>
#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	if (udi_cdc_tx_trans_ongoing[port]) {
		return; // Already on going or wait next SOF to send next data
8000465e:	d7 03       	nop
80004660:	c0 28       	rjmp	80004664 <udi_cdc_tx_send+0x1f8>
		if (udi_cdc_tx_sof_num[port] == udd_get_micro_frame_number()) {
			return; // Wait next SOF to send next data
		}
	}else{
		if (udi_cdc_tx_sof_num[port] == udd_get_frame_number()) {
			return; // Wait next SOF to send next data
80004662:	d7 03       	nop
	udd_ep_run( ep,
			b_short_packet,
			udi_cdc_tx_buf[port][buf_sel_trans],
			udi_cdc_tx_buf_nb[port][buf_sel_trans],
			udi_cdc_data_sent);
}
80004664:	2f dd       	sub	sp,-12
80004666:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000466a:	00 00       	add	r0,r0
8000466c:	00 00       	add	r0,r0
8000466e:	02 34       	cp.w	r4,r1
80004670:	80 00       	ld.sh	r0,r0[0x0]
80004672:	25 b8       	sub	r8,91
80004674:	00 00       	add	r0,r0
80004676:	02 30       	cp.w	r0,r1
80004678:	80 00       	ld.sh	r0,r0[0x0]
8000467a:	26 46       	sub	r6,100
8000467c:	80 00       	ld.sh	r0,r0[0x0]
8000467e:	26 2c       	sub	r12,98
80004680:	80 00       	ld.sh	r0,r0[0x0]
80004682:	3d 00       	mov	r0,-48
80004684:	00 00       	add	r0,r0
80004686:	02 2c       	rsub	r12,r1
80004688:	00 00       	add	r0,r0
8000468a:	02 28       	rsub	r8,r1
8000468c:	00 00       	add	r0,r0
8000468e:	02 3c       	cp.w	r12,r1
80004690:	80 00       	ld.sh	r0,r0[0x0]
80004692:	3d 40       	mov	r0,-44
80004694:	00 00       	add	r0,r0
80004696:	02 38       	cp.w	r8,r1
80004698:	00 00       	add	r0,r0
8000469a:	01 a8       	ld.ub	r8,r0[0x2]
8000469c:	80 00       	ld.sh	r0,r0[0x0]
8000469e:	43 d0       	lddsp	r0,sp[0xf4]
800046a0:	80 00       	ld.sh	r0,r0[0x0]
800046a2:	2c fc       	sub	r12,-49

800046a4 <udi_cdc_multi_get_nb_received_data>:
{
	udi_cdc_ctrl_state_change(port, true, CDC_SERIAL_STATE_OVERRUN);
}

iram_size_t udi_cdc_multi_get_nb_received_data(uint8_t port)
{
800046a4:	eb cd 40 80 	pushm	r7,lr
800046a8:	1a 97       	mov	r7,sp
800046aa:	20 4d       	sub	sp,16
800046ac:	18 98       	mov	r8,r12
800046ae:	ef 68 ff f0 	st.b	r7[-16],r8
	irqflags_t flags;
	uint16_t pos;
	iram_size_t nb_received;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
800046b2:	30 08       	mov	r8,0
800046b4:	ef 68 ff f0 	st.b	r7[-16],r8
#endif
	flags = cpu_irq_save();
800046b8:	f0 1f 00 17 	mcall	80004714 <udi_cdc_multi_get_nb_received_data+0x70>
800046bc:	18 98       	mov	r8,r12
800046be:	ef 48 ff f4 	st.w	r7[-12],r8
	pos = udi_cdc_rx_pos[port];
800046c2:	ef 39 ff f0 	ld.ub	r9,r7[-16]
800046c6:	49 58       	lddpc	r8,80004718 <udi_cdc_multi_get_nb_received_data+0x74>
800046c8:	f0 09 04 18 	ld.sh	r8,r8[r9<<0x1]
800046cc:	ef 58 ff fa 	st.h	r7[-6],r8
	nb_received = udi_cdc_rx_buf_nb[port][udi_cdc_rx_buf_sel[port]] - pos;
800046d0:	ef 3a ff f0 	ld.ub	r10,r7[-16]
800046d4:	ef 38 ff f0 	ld.ub	r8,r7[-16]
800046d8:	49 19       	lddpc	r9,8000471c <udi_cdc_multi_get_nb_received_data+0x78>
800046da:	f2 08 07 08 	ld.ub	r8,r9[r8]
800046de:	5c 58       	castu.b	r8
800046e0:	10 99       	mov	r9,r8
800046e2:	49 08       	lddpc	r8,80004720 <udi_cdc_multi_get_nb_received_data+0x7c>
800046e4:	a1 7a       	lsl	r10,0x1
800046e6:	f4 09 00 09 	add	r9,r10,r9
800046ea:	f0 09 04 18 	ld.sh	r8,r8[r9<<0x1]
800046ee:	5c 88       	casts.h	r8
800046f0:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
800046f4:	ef 18 ff fa 	ld.uh	r8,r7[-6]
800046f8:	f2 08 01 08 	sub	r8,r9,r8
800046fc:	ef 48 ff fc 	st.w	r7[-4],r8
	cpu_irq_restore(flags);
80004700:	ee fc ff f4 	ld.w	r12,r7[-12]
80004704:	f0 1f 00 08 	mcall	80004724 <udi_cdc_multi_get_nb_received_data+0x80>
	return nb_received;
80004708:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8000470c:	10 9c       	mov	r12,r8
8000470e:	2f cd       	sub	sp,-16
80004710:	e3 cd 80 80 	ldm	sp++,r7,pc
80004714:	80 00       	ld.sh	r0,r0[0x0]
80004716:	3d 00       	mov	r0,-48
80004718:	00 00       	add	r0,r0
8000471a:	01 a0       	ld.ub	r0,r0[0x2]
8000471c:	00 00       	add	r0,r0
8000471e:	01 9c       	ld.ub	r12,r0[0x1]
80004720:	00 00       	add	r0,r0
80004722:	01 98       	ld.ub	r8,r0[0x1]
80004724:	80 00       	ld.sh	r0,r0[0x0]
80004726:	3d 40       	mov	r0,-44

80004728 <udi_cdc_multi_is_rx_ready>:
{
	return udi_cdc_multi_get_nb_received_data(0);
}

bool udi_cdc_multi_is_rx_ready(uint8_t port)
{
80004728:	eb cd 40 80 	pushm	r7,lr
8000472c:	1a 97       	mov	r7,sp
8000472e:	20 1d       	sub	sp,4
80004730:	18 98       	mov	r8,r12
80004732:	ef 68 ff fc 	st.b	r7[-4],r8
	return (udi_cdc_multi_get_nb_received_data(port) > 0);
80004736:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000473a:	10 9c       	mov	r12,r8
8000473c:	f0 1f 00 05 	mcall	80004750 <udi_cdc_multi_is_rx_ready+0x28>
80004740:	18 98       	mov	r8,r12
80004742:	58 08       	cp.w	r8,0
80004744:	5f 18       	srne	r8
80004746:	5c 58       	castu.b	r8
}
80004748:	10 9c       	mov	r12,r8
8000474a:	2f fd       	sub	sp,-4
8000474c:	e3 cd 80 80 	ldm	sp++,r7,pc
80004750:	80 00       	ld.sh	r0,r0[0x0]
80004752:	46 a4       	lddsp	r4,sp[0x1a8]

80004754 <udi_cdc_multi_get_free_tx_buffer>:
{
	return udi_cdc_multi_read_buf(0, buf, size);
}

iram_size_t udi_cdc_multi_get_free_tx_buffer(uint8_t port)
{
80004754:	eb cd 40 80 	pushm	r7,lr
80004758:	1a 97       	mov	r7,sp
8000475a:	20 5d       	sub	sp,20
8000475c:	18 98       	mov	r8,r12
8000475e:	ef 68 ff ec 	st.b	r7[-20],r8
	irqflags_t flags;
	iram_size_t buf_sel_nb, retval;
	uint8_t buf_sel;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
80004762:	30 08       	mov	r8,0
80004764:	ef 68 ff ec 	st.b	r7[-20],r8
#endif

	flags = cpu_irq_save();
80004768:	f0 1f 00 2b 	mcall	80004814 <udi_cdc_multi_get_free_tx_buffer+0xc0>
8000476c:	18 98       	mov	r8,r12
8000476e:	ef 48 ff f0 	st.w	r7[-16],r8
	buf_sel = udi_cdc_tx_buf_sel[port];
80004772:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80004776:	4a 99       	lddpc	r9,80004818 <udi_cdc_multi_get_free_tx_buffer+0xc4>
80004778:	f2 08 07 08 	ld.ub	r8,r9[r8]
8000477c:	ef 68 ff ff 	st.b	r7[-1],r8
	buf_sel_nb = udi_cdc_tx_buf_nb[port][buf_sel];
80004780:	ef 3a ff ec 	ld.ub	r10,r7[-20]
80004784:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80004788:	4a 58       	lddpc	r8,8000481c <udi_cdc_multi_get_free_tx_buffer+0xc8>
8000478a:	a1 7a       	lsl	r10,0x1
8000478c:	f4 09 00 09 	add	r9,r10,r9
80004790:	f0 09 04 18 	ld.sh	r8,r8[r9<<0x1]
80004794:	5c 78       	castu.h	r8
80004796:	ef 48 ff f4 	st.w	r7[-12],r8
	if (buf_sel_nb == UDI_CDC_TX_BUFFERS) {
8000479a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000479e:	e0 48 00 40 	cp.w	r8,64
800047a2:	c2 91       	brne	800047f4 <udi_cdc_multi_get_free_tx_buffer+0xa0>
		if ((!udi_cdc_tx_trans_ongoing[port])
800047a4:	ef 38 ff ec 	ld.ub	r8,r7[-20]
800047a8:	49 e9       	lddpc	r9,80004820 <udi_cdc_multi_get_free_tx_buffer+0xcc>
800047aa:	f2 08 07 08 	ld.ub	r8,r9[r8]
800047ae:	5c 58       	castu.b	r8
800047b0:	ec 18 00 01 	eorl	r8,0x1
800047b4:	5c 58       	castu.b	r8
800047b6:	c1 f0       	breq	800047f4 <udi_cdc_multi_get_free_tx_buffer+0xa0>
800047b8:	ef 38 ff ec 	ld.ub	r8,r7[-20]
			&& (!udi_cdc_tx_both_buf_to_send[port])) {
800047bc:	49 a9       	lddpc	r9,80004824 <udi_cdc_multi_get_free_tx_buffer+0xd0>
800047be:	f2 08 07 08 	ld.ub	r8,r9[r8]
800047c2:	5c 58       	castu.b	r8

	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
	buf_sel_nb = udi_cdc_tx_buf_nb[port][buf_sel];
	if (buf_sel_nb == UDI_CDC_TX_BUFFERS) {
		if ((!udi_cdc_tx_trans_ongoing[port])
800047c4:	ec 18 00 01 	eorl	r8,0x1
800047c8:	5c 58       	castu.b	r8
800047ca:	c1 50       	breq	800047f4 <udi_cdc_multi_get_free_tx_buffer+0xa0>
			&& (!udi_cdc_tx_both_buf_to_send[port])) {
			/* One buffer is full, but the other buffer is not used.
			 * (not used = transfer on-going)
			 * then move to the other buffer to store data */
			udi_cdc_tx_both_buf_to_send[port] = true;
800047cc:	ef 39 ff ec 	ld.ub	r9,r7[-20]
800047d0:	49 5a       	lddpc	r10,80004824 <udi_cdc_multi_get_free_tx_buffer+0xd0>
800047d2:	30 18       	mov	r8,1
800047d4:	f4 09 0b 08 	st.b	r10[r9],r8
			udi_cdc_tx_buf_sel[port] = (buf_sel == 0)? 1 : 0;
800047d8:	ef 3a ff ec 	ld.ub	r10,r7[-20]
800047dc:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800047e0:	30 08       	mov	r8,0
800047e2:	f0 09 18 00 	cp.b	r9,r8
800047e6:	5f 08       	sreq	r8
800047e8:	48 c9       	lddpc	r9,80004818 <udi_cdc_multi_get_free_tx_buffer+0xc4>
800047ea:	f2 0a 0b 08 	st.b	r9[r10],r8
			buf_sel_nb = 0;
800047ee:	30 08       	mov	r8,0
800047f0:	ef 48 ff f4 	st.w	r7[-12],r8
		}
	}
	retval = UDI_CDC_TX_BUFFERS - buf_sel_nb;  
800047f4:	ee f8 ff f4 	ld.w	r8,r7[-12]
800047f8:	f0 08 11 40 	rsub	r8,r8,64
800047fc:	ef 48 ff f8 	st.w	r7[-8],r8
	cpu_irq_restore(flags);
80004800:	ee fc ff f0 	ld.w	r12,r7[-16]
80004804:	f0 1f 00 09 	mcall	80004828 <udi_cdc_multi_get_free_tx_buffer+0xd4>
	return retval;
80004808:	ee f8 ff f8 	ld.w	r8,r7[-8]
}
8000480c:	10 9c       	mov	r12,r8
8000480e:	2f bd       	sub	sp,-20
80004810:	e3 cd 80 80 	ldm	sp++,r7,pc
80004814:	80 00       	ld.sh	r0,r0[0x0]
80004816:	3d 00       	mov	r0,-48
80004818:	00 00       	add	r0,r0
8000481a:	02 2c       	rsub	r12,r1
8000481c:	00 00       	add	r0,r0
8000481e:	02 28       	rsub	r8,r1
80004820:	00 00       	add	r0,r0
80004822:	02 34       	cp.w	r4,r1
80004824:	00 00       	add	r0,r0
80004826:	02 38       	cp.w	r8,r1
80004828:	80 00       	ld.sh	r0,r0[0x0]
8000482a:	3d 40       	mov	r0,-44

8000482c <udi_cdc_multi_is_tx_ready>:
{
	return udi_cdc_multi_get_free_tx_buffer(0);
}

bool udi_cdc_multi_is_tx_ready(uint8_t port)
{
8000482c:	eb cd 40 80 	pushm	r7,lr
80004830:	1a 97       	mov	r7,sp
80004832:	20 1d       	sub	sp,4
80004834:	18 98       	mov	r8,r12
80004836:	ef 68 ff fc 	st.b	r7[-4],r8
	return (udi_cdc_multi_get_free_tx_buffer(port) != 0);
8000483a:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000483e:	10 9c       	mov	r12,r8
80004840:	f0 1f 00 05 	mcall	80004854 <udi_cdc_multi_is_tx_ready+0x28>
80004844:	18 98       	mov	r8,r12
80004846:	58 08       	cp.w	r8,0
80004848:	5f 18       	srne	r8
8000484a:	5c 58       	castu.b	r8
}
8000484c:	10 9c       	mov	r12,r8
8000484e:	2f fd       	sub	sp,-4
80004850:	e3 cd 80 80 	ldm	sp++,r7,pc
80004854:	80 00       	ld.sh	r0,r0[0x0]
80004856:	47 54       	lddsp	r4,sp[0x1d4]

80004858 <udi_cdc_multi_putc>:
{
	return udi_cdc_multi_is_tx_ready(0);
}

int udi_cdc_multi_putc(uint8_t port, int value)
{
80004858:	eb cd 40 e0 	pushm	r5-r7,lr
8000485c:	1a 97       	mov	r7,sp
8000485e:	20 4d       	sub	sp,16
80004860:	18 98       	mov	r8,r12
80004862:	ef 4b ff f0 	st.w	r7[-16],r11
80004866:	ef 68 ff f4 	st.b	r7[-12],r8
	irqflags_t flags;
	bool b_databit_9;
	uint8_t buf_sel;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
8000486a:	30 08       	mov	r8,0
8000486c:	ef 68 ff f4 	st.b	r7[-12],r8
#endif

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);
80004870:	ef 39 ff f4 	ld.ub	r9,r7[-12]
80004874:	4b 6a       	lddpc	r10,8000494c <udi_cdc_multi_putc+0xf4>
80004876:	12 98       	mov	r8,r9
80004878:	a3 78       	lsl	r8,0x3
8000487a:	12 18       	sub	r8,r9
8000487c:	f4 08 00 08 	add	r8,r10,r8
80004880:	2f c8       	sub	r8,-4
80004882:	11 a9       	ld.ub	r9,r8[0x2]
80004884:	30 98       	mov	r8,9
80004886:	f0 09 18 00 	cp.b	r9,r8
8000488a:	5f 08       	sreq	r8
8000488c:	ef 68 ff fe 	st.b	r7[-2],r8
80004890:	c0 28       	rjmp	80004894 <udi_cdc_multi_putc+0x3c>
	// Check available space
	if (!udi_cdc_multi_is_tx_ready(port)) {
		if (!udi_cdc_data_running) {
			return false;
		}
		goto udi_cdc_putc_process_one_byte;
80004892:	d7 03       	nop

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);

udi_cdc_putc_process_one_byte:
	// Check available space
	if (!udi_cdc_multi_is_tx_ready(port)) {
80004894:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80004898:	10 9c       	mov	r12,r8
8000489a:	f0 1f 00 2e 	mcall	80004950 <udi_cdc_multi_putc+0xf8>
8000489e:	18 98       	mov	r8,r12
800048a0:	ec 18 00 01 	eorl	r8,0x1
800048a4:	5c 58       	castu.b	r8
800048a6:	c0 a0       	breq	800048ba <udi_cdc_multi_putc+0x62>
		if (!udi_cdc_data_running) {
800048a8:	4a b8       	lddpc	r8,80004954 <udi_cdc_multi_putc+0xfc>
800048aa:	11 88       	ld.ub	r8,r8[0x0]
800048ac:	5c 58       	castu.b	r8
800048ae:	ec 18 00 01 	eorl	r8,0x1
800048b2:	5c 58       	castu.b	r8
800048b4:	ce f0       	breq	80004892 <udi_cdc_multi_putc+0x3a>
			return false;
800048b6:	30 08       	mov	r8,0
800048b8:	c4 68       	rjmp	80004944 <udi_cdc_multi_putc+0xec>
		}
		goto udi_cdc_putc_process_one_byte;
	}

	// Write value
	flags = cpu_irq_save();
800048ba:	f0 1f 00 28 	mcall	80004958 <udi_cdc_multi_putc+0x100>
800048be:	18 98       	mov	r8,r12
800048c0:	ef 48 ff f8 	st.w	r7[-8],r8
	buf_sel = udi_cdc_tx_buf_sel[port];
800048c4:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800048c8:	4a 59       	lddpc	r9,8000495c <udi_cdc_multi_putc+0x104>
800048ca:	f2 08 07 08 	ld.ub	r8,r9[r8]
800048ce:	ef 68 ff ff 	st.b	r7[-1],r8
	udi_cdc_tx_buf[port][buf_sel][udi_cdc_tx_buf_nb[port][buf_sel]++] = value;
800048d2:	ef 35 ff f4 	ld.ub	r5,r7[-12]
800048d6:	ef 36 ff ff 	ld.ub	r6,r7[-1]
800048da:	ef 3a ff f4 	ld.ub	r10,r7[-12]
800048de:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800048e2:	4a 08       	lddpc	r8,80004960 <udi_cdc_multi_putc+0x108>
800048e4:	f4 0b 15 01 	lsl	r11,r10,0x1
800048e8:	12 0b       	add	r11,r9
800048ea:	f0 0b 04 18 	ld.sh	r8,r8[r11<<0x1]
800048ee:	f9 d8 c0 10 	bfextu	r12,r8,0x0,0x10
800048f2:	ee fb ff f0 	ld.w	r11,r7[-16]
800048f6:	5c 5b       	castu.b	r11
800048f8:	49 be       	lddpc	lr,80004964 <udi_cdc_multi_putc+0x10c>
800048fa:	a1 75       	lsl	r5,0x1
800048fc:	ea 06 00 06 	add	r6,r5,r6
80004900:	a7 66       	lsl	r6,0x6
80004902:	ec 0c 00 0c 	add	r12,r6,r12
80004906:	fc 0c 00 0c 	add	r12,lr,r12
8000490a:	b8 8b       	st.b	r12[0x0],r11
8000490c:	2f f8       	sub	r8,-1
8000490e:	5c 88       	casts.h	r8
80004910:	49 4b       	lddpc	r11,80004960 <udi_cdc_multi_putc+0x108>
80004912:	a1 7a       	lsl	r10,0x1
80004914:	f4 09 00 09 	add	r9,r10,r9
80004918:	f6 09 0a 18 	st.h	r11[r9<<0x1],r8
	cpu_irq_restore(flags);
8000491c:	ee fc ff f8 	ld.w	r12,r7[-8]
80004920:	f0 1f 00 12 	mcall	80004968 <udi_cdc_multi_putc+0x110>

	if (b_databit_9) {
80004924:	ef 39 ff fe 	ld.ub	r9,r7[-2]
80004928:	30 08       	mov	r8,0
8000492a:	f0 09 18 00 	cp.b	r9,r8
8000492e:	c0 a0       	breq	80004942 <udi_cdc_multi_putc+0xea>
		// Send MSB
		b_databit_9 = false;
80004930:	30 08       	mov	r8,0
80004932:	ef 68 ff fe 	st.b	r7[-2],r8
		value = value >> 8;
80004936:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000493a:	a9 48       	asr	r8,0x8
8000493c:	ef 48 ff f0 	st.w	r7[-16],r8
		goto udi_cdc_putc_process_one_byte;
80004940:	ca ab       	rjmp	80004894 <udi_cdc_multi_putc+0x3c>
	}
	return true;
80004942:	30 18       	mov	r8,1
}
80004944:	10 9c       	mov	r12,r8
80004946:	2f cd       	sub	sp,-16
80004948:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000494c:	00 00       	add	r0,r0
8000494e:	00 fc       	st.b	--r0,r12
80004950:	80 00       	ld.sh	r0,r0[0x0]
80004952:	48 2c       	lddpc	r12,80004958 <udi_cdc_multi_putc+0x100>
80004954:	00 00       	add	r0,r0
80004956:	01 16       	ld.sh	r6,r0++
80004958:	80 00       	ld.sh	r0,r0[0x0]
8000495a:	3d 00       	mov	r0,-48
8000495c:	00 00       	add	r0,r0
8000495e:	02 2c       	rsub	r12,r1
80004960:	00 00       	add	r0,r0
80004962:	02 28       	rsub	r8,r1
80004964:	00 00       	add	r0,r0
80004966:	01 a8       	ld.ub	r8,r0[0x2]
80004968:	80 00       	ld.sh	r0,r0[0x0]
8000496a:	3d 40       	mov	r0,-44

8000496c <udi_cdc_putc>:

int udi_cdc_putc(int value)
{
8000496c:	eb cd 40 80 	pushm	r7,lr
80004970:	1a 97       	mov	r7,sp
80004972:	20 1d       	sub	sp,4
80004974:	ef 4c ff fc 	st.w	r7[-4],r12
	return udi_cdc_multi_putc(0, value);
80004978:	ee fb ff fc 	ld.w	r11,r7[-4]
8000497c:	30 0c       	mov	r12,0
8000497e:	f0 1f 00 04 	mcall	8000498c <udi_cdc_putc+0x20>
80004982:	18 98       	mov	r8,r12
}
80004984:	10 9c       	mov	r12,r8
80004986:	2f fd       	sub	sp,-4
80004988:	e3 cd 80 80 	ldm	sp++,r7,pc
8000498c:	80 00       	ld.sh	r0,r0[0x0]
8000498e:	48 58       	lddpc	r8,800049a0 <udc_get_eof_conf+0x10>

80004990 <udc_get_eof_conf>:
 * \brief Returns a value to check the end of USB Configuration descriptor
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
80004990:	eb cd 40 80 	pushm	r7,lr
80004994:	1a 97       	mov	r7,sp
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
80004996:	48 b8       	lddpc	r8,800049c0 <udc_get_eof_conf+0x30>
80004998:	70 08       	ld.w	r8,r8[0x0]
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
8000499a:	70 09       	ld.w	r9,r8[0x0]
			udc_ptr_conf->desc +
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
8000499c:	48 98       	lddpc	r8,800049c0 <udc_get_eof_conf+0x30>
8000499e:	70 08       	ld.w	r8,r8[0x0]
800049a0:	70 08       	ld.w	r8,r8[0x0]
800049a2:	11 aa       	ld.ub	r10,r8[0x2]
800049a4:	a9 6a       	lsl	r10,0x8
800049a6:	11 b8       	ld.ub	r8,r8[0x3]
800049a8:	14 48       	or	r8,r10
800049aa:	5c 88       	casts.h	r8
800049ac:	5c 88       	casts.h	r8
800049ae:	5c c8       	swap.bh	r8
800049b0:	5c 88       	casts.h	r8
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
800049b2:	5c 78       	castu.h	r8
800049b4:	f2 08 00 08 	add	r8,r9,r8
			udc_ptr_conf->desc +
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
}
800049b8:	10 9c       	mov	r12,r8
800049ba:	e3 cd 80 80 	ldm	sp++,r7,pc
800049be:	00 00       	add	r0,r0
800049c0:	00 00       	add	r0,r0
800049c2:	02 4c       	or	r12,r1

800049c4 <udc_next_desc_in_iface>:
 * \return address of specific descriptor found
 * \return NULL if it is the end of global interface descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_next_desc_in_iface(usb_conf_desc_t
		UDC_DESC_STORAGE * desc, uint8_t desc_id)
{
800049c4:	eb cd 40 80 	pushm	r7,lr
800049c8:	1a 97       	mov	r7,sp
800049ca:	20 3d       	sub	sp,12
800049cc:	ef 4c ff f8 	st.w	r7[-8],r12
800049d0:	16 98       	mov	r8,r11
800049d2:	ef 68 ff f4 	st.b	r7[-12],r8
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
800049d6:	f0 1f 00 1d 	mcall	80004a48 <udc_next_desc_in_iface+0x84>
800049da:	18 98       	mov	r8,r12
800049dc:	ef 48 ff fc 	st.w	r7[-4],r8
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
800049e0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800049e4:	11 88       	ld.ub	r8,r8[0x0]
800049e6:	ee f9 ff f8 	ld.w	r9,r7[-8]
800049ea:	f2 08 00 08 	add	r8,r9,r8
800049ee:	ef 48 ff f8 	st.w	r7[-8],r8
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
800049f2:	c1 c8       	rjmp	80004a2a <udc_next_desc_in_iface+0x66>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
800049f4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800049f8:	11 99       	ld.ub	r9,r8[0x1]
800049fa:	30 48       	mov	r8,4
800049fc:	f0 09 18 00 	cp.b	r9,r8
80004a00:	c1 d0       	breq	80004a3a <udc_next_desc_in_iface+0x76>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
80004a02:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004a06:	11 98       	ld.ub	r8,r8[0x1]
80004a08:	ef 39 ff f4 	ld.ub	r9,r7[-12]
80004a0c:	f0 09 18 00 	cp.b	r9,r8
80004a10:	c0 41       	brne	80004a18 <udc_next_desc_in_iface+0x54>
			return desc; // Specific descriptor found
80004a12:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004a16:	c1 48       	rjmp	80004a3e <udc_next_desc_in_iface+0x7a>
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
80004a18:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004a1c:	11 88       	ld.ub	r8,r8[0x0]
80004a1e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80004a22:	f2 08 00 08 	add	r8,r9,r8
80004a26:	ef 48 ff f8 	st.w	r7[-8],r8
	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
80004a2a:	ee f9 ff fc 	ld.w	r9,r7[-4]
80004a2e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004a32:	10 39       	cp.w	r9,r8
80004a34:	fe 9b ff e0 	brhi	800049f4 <udc_next_desc_in_iface+0x30>
80004a38:	c0 28       	rjmp	80004a3c <udc_next_desc_in_iface+0x78>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
			break; // End of global interface descriptor
80004a3a:	d7 03       	nop
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
	}
	return NULL; // No specific descriptor found
80004a3c:	30 08       	mov	r8,0
}
80004a3e:	10 9c       	mov	r12,r8
80004a40:	2f dd       	sub	sp,-12
80004a42:	e3 cd 80 80 	ldm	sp++,r7,pc
80004a46:	00 00       	add	r0,r0
80004a48:	80 00       	ld.sh	r0,r0[0x0]
80004a4a:	49 90       	lddpc	r0,80004aac <udc_update_iface_desc+0x60>

80004a4c <udc_update_iface_desc>:
 * \param setting_num   Setting number of interface to find
 *
 * \return 1 if found or 0 if not found
 */
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
80004a4c:	eb cd 40 80 	pushm	r7,lr
80004a50:	1a 97       	mov	r7,sp
80004a52:	20 3d       	sub	sp,12
80004a54:	18 99       	mov	r9,r12
80004a56:	16 98       	mov	r8,r11
80004a58:	ef 69 ff f8 	st.b	r7[-8],r9
80004a5c:	ef 68 ff f4 	st.b	r7[-12],r8
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_end_desc;

	if (0 == udc_num_configuration) {
80004a60:	4a 58       	lddpc	r8,80004af4 <udc_update_iface_desc+0xa8>
80004a62:	11 88       	ld.ub	r8,r8[0x0]
80004a64:	58 08       	cp.w	r8,0
80004a66:	c0 31       	brne	80004a6c <udc_update_iface_desc+0x20>
		return false;
80004a68:	30 08       	mov	r8,0
80004a6a:	c4 18       	rjmp	80004aec <udc_update_iface_desc+0xa0>
	}

	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
80004a6c:	4a 38       	lddpc	r8,80004af8 <udc_update_iface_desc+0xac>
80004a6e:	70 08       	ld.w	r8,r8[0x0]
80004a70:	70 08       	ld.w	r8,r8[0x0]
80004a72:	11 c8       	ld.ub	r8,r8[0x4]
80004a74:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80004a78:	f0 09 18 00 	cp.b	r9,r8
80004a7c:	c0 33       	brcs	80004a82 <udc_update_iface_desc+0x36>
		return false;
80004a7e:	30 08       	mov	r8,0
80004a80:	c3 68       	rjmp	80004aec <udc_update_iface_desc+0xa0>
	}

	// Start at the beginning of configuration descriptor
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;
80004a82:	49 e8       	lddpc	r8,80004af8 <udc_update_iface_desc+0xac>
80004a84:	70 08       	ld.w	r8,r8[0x0]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
		return false;
	}

	// Start at the beginning of configuration descriptor
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
80004a86:	70 08       	ld.w	r8,r8[0x0]
80004a88:	10 99       	mov	r9,r8
80004a8a:	49 d8       	lddpc	r8,80004afc <udc_update_iface_desc+0xb0>
80004a8c:	91 09       	st.w	r8[0x0],r9
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
80004a8e:	f0 1f 00 1d 	mcall	80004b00 <udc_update_iface_desc+0xb4>
80004a92:	18 98       	mov	r8,r12
80004a94:	ef 48 ff fc 	st.w	r7[-4],r8
	while (ptr_end_desc >
80004a98:	c2 28       	rjmp	80004adc <udc_update_iface_desc+0x90>
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
80004a9a:	49 98       	lddpc	r8,80004afc <udc_update_iface_desc+0xb0>
80004a9c:	70 08       	ld.w	r8,r8[0x0]
80004a9e:	11 99       	ld.ub	r9,r8[0x1]
80004aa0:	30 48       	mov	r8,4
80004aa2:	f0 09 18 00 	cp.b	r9,r8
80004aa6:	c1 31       	brne	80004acc <udc_update_iface_desc+0x80>
			// A interface descriptor is found
			// Check interface and alternate setting number
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
80004aa8:	49 58       	lddpc	r8,80004afc <udc_update_iface_desc+0xb0>
80004aaa:	70 08       	ld.w	r8,r8[0x0]
80004aac:	11 a8       	ld.ub	r8,r8[0x2]
80004aae:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80004ab2:	f0 09 18 00 	cp.b	r9,r8
80004ab6:	c0 b1       	brne	80004acc <udc_update_iface_desc+0x80>
					(setting_num ==
					udc_ptr_iface->bAlternateSetting)) {
80004ab8:	49 18       	lddpc	r8,80004afc <udc_update_iface_desc+0xb0>
80004aba:	70 08       	ld.w	r8,r8[0x0]
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
			// A interface descriptor is found
			// Check interface and alternate setting number
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
					(setting_num ==
80004abc:	11 b8       	ld.ub	r8,r8[0x3]
	while (ptr_end_desc >
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
			// A interface descriptor is found
			// Check interface and alternate setting number
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
80004abe:	ef 39 ff f4 	ld.ub	r9,r7[-12]
80004ac2:	f0 09 18 00 	cp.b	r9,r8
80004ac6:	c0 31       	brne	80004acc <udc_update_iface_desc+0x80>
					(setting_num ==
					udc_ptr_iface->bAlternateSetting)) {
				return true; // Interface found
80004ac8:	30 18       	mov	r8,1
80004aca:	c1 18       	rjmp	80004aec <udc_update_iface_desc+0xa0>
			}
		}
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
80004acc:	48 c8       	lddpc	r8,80004afc <udc_update_iface_desc+0xb0>
80004ace:	70 09       	ld.w	r9,r8[0x0]
				(uint8_t *) udc_ptr_iface +
				udc_ptr_iface->bLength);
80004ad0:	48 b8       	lddpc	r8,80004afc <udc_update_iface_desc+0xb0>
80004ad2:	70 08       	ld.w	r8,r8[0x0]
					udc_ptr_iface->bAlternateSetting)) {
				return true; // Interface found
			}
		}
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
80004ad4:	11 88       	ld.ub	r8,r8[0x0]
80004ad6:	10 09       	add	r9,r8
80004ad8:	48 98       	lddpc	r8,80004afc <udc_update_iface_desc+0xb0>
80004ada:	91 09       	st.w	r8[0x0],r9
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
80004adc:	48 88       	lddpc	r8,80004afc <udc_update_iface_desc+0xb0>
80004ade:	70 08       	ld.w	r8,r8[0x0]
80004ae0:	ee f9 ff fc 	ld.w	r9,r7[-4]
80004ae4:	10 39       	cp.w	r9,r8
80004ae6:	fe 9b ff da 	brhi	80004a9a <udc_update_iface_desc+0x4e>
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
				(uint8_t *) udc_ptr_iface +
				udc_ptr_iface->bLength);
	}
	return false; // Interface not found
80004aea:	30 08       	mov	r8,0
}
80004aec:	10 9c       	mov	r12,r8
80004aee:	2f dd       	sub	sp,-12
80004af0:	e3 cd 80 80 	ldm	sp++,r7,pc
80004af4:	00 00       	add	r0,r0
80004af6:	02 48       	or	r8,r1
80004af8:	00 00       	add	r0,r0
80004afa:	02 4c       	or	r12,r1
80004afc:	00 00       	add	r0,r0
80004afe:	02 50       	eor	r0,r1
80004b00:	80 00       	ld.sh	r0,r0[0x0]
80004b02:	49 90       	lddpc	r0,80004b64 <udc_iface_disable+0x60>

80004b04 <udc_iface_disable>:
 * \param iface_num     Interface number to disable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_disable(uint8_t iface_num)
{
80004b04:	eb cd 40 80 	pushm	r7,lr
80004b08:	1a 97       	mov	r7,sp
80004b0a:	20 3d       	sub	sp,12
80004b0c:	18 98       	mov	r8,r12
80004b0e:	ef 68 ff f4 	st.b	r7[-12],r8
	udi_api_t UDC_DESC_STORAGE *udi_api;

	// Select first alternate setting of the interface
	// to update udc_ptr_iface before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
80004b12:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80004b16:	30 0b       	mov	r11,0
80004b18:	10 9c       	mov	r12,r8
80004b1a:	f0 1f 00 25 	mcall	80004bac <udc_iface_disable+0xa8>
80004b1e:	18 98       	mov	r8,r12
80004b20:	ec 18 00 01 	eorl	r8,0x1
80004b24:	5c 58       	castu.b	r8
80004b26:	c0 30       	breq	80004b2c <udc_iface_disable+0x28>
		return false;
80004b28:	30 08       	mov	r8,0
80004b2a:	c3 d8       	rjmp	80004ba4 <udc_iface_disable+0xa0>
	}

	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
80004b2c:	4a 18       	lddpc	r8,80004bb0 <udc_iface_disable+0xac>
80004b2e:	70 08       	ld.w	r8,r8[0x0]
80004b30:	70 19       	ld.w	r9,r8[0x4]
80004b32:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80004b36:	a3 68       	lsl	r8,0x2
80004b38:	f2 08 00 08 	add	r8,r9,r8
80004b3c:	70 08       	ld.w	r8,r8[0x0]
80004b3e:	ef 48 ff f8 	st.w	r7[-8],r8

#if (0!=USB_DEVICE_MAX_EP)
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
80004b42:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004b46:	70 38       	ld.w	r8,r8[0xc]
80004b48:	5d 18       	icall	r8
80004b4a:	18 98       	mov	r8,r12
80004b4c:	10 99       	mov	r9,r8
80004b4e:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80004b52:	12 9b       	mov	r11,r9
80004b54:	10 9c       	mov	r12,r8
80004b56:	f0 1f 00 16 	mcall	80004bac <udc_iface_disable+0xa8>
80004b5a:	18 98       	mov	r8,r12
80004b5c:	ec 18 00 01 	eorl	r8,0x1
80004b60:	5c 58       	castu.b	r8
80004b62:	c0 30       	breq	80004b68 <udc_iface_disable+0x64>
		return false;
80004b64:	30 08       	mov	r8,0
80004b66:	c1 f8       	rjmp	80004ba4 <udc_iface_disable+0xa0>
	}

	// Start at the beginning of interface descriptor
	{
		usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
80004b68:	49 38       	lddpc	r8,80004bb4 <udc_iface_disable+0xb0>
80004b6a:	70 08       	ld.w	r8,r8[0x0]
80004b6c:	ef 48 ff fc 	st.w	r7[-4],r8
		while (1) {
			// Search Endpoint descriptor included in global interface descriptor
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
80004b70:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004b74:	30 5b       	mov	r11,5
80004b76:	10 9c       	mov	r12,r8
80004b78:	f0 1f 00 10 	mcall	80004bb8 <udc_iface_disable+0xb4>
80004b7c:	18 98       	mov	r8,r12
80004b7e:	ef 48 ff fc 	st.w	r7[-4],r8
					udc_next_desc_in_iface((UDC_DESC_STORAGE
					usb_conf_desc_t *)
					ep_desc, USB_DT_ENDPOINT);
			if (NULL == ep_desc) {
80004b82:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004b86:	58 08       	cp.w	r8,0
80004b88:	c0 71       	brne	80004b96 <udc_iface_disable+0x92>
		}
	}
#endif

	// Disable interface
	udi_api->disable();
80004b8a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004b8e:	70 18       	ld.w	r8,r8[0x4]
80004b90:	5d 18       	icall	r8
	return true;
80004b92:	30 18       	mov	r8,1
80004b94:	c0 88       	rjmp	80004ba4 <udc_iface_disable+0xa0>
					ep_desc, USB_DT_ENDPOINT);
			if (NULL == ep_desc) {
				break;
			}
			// Free the endpoint used by the interface
			udd_ep_free(ep_desc->bEndpointAddress);
80004b96:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004b9a:	11 a8       	ld.ub	r8,r8[0x2]
80004b9c:	10 9c       	mov	r12,r8
80004b9e:	f0 1f 00 08 	mcall	80004bbc <udc_iface_disable+0xb8>
		}
80004ba2:	ce 7b       	rjmp	80004b70 <udc_iface_disable+0x6c>
#endif

	// Disable interface
	udi_api->disable();
	return true;
}
80004ba4:	10 9c       	mov	r12,r8
80004ba6:	2f dd       	sub	sp,-12
80004ba8:	e3 cd 80 80 	ldm	sp++,r7,pc
80004bac:	80 00       	ld.sh	r0,r0[0x0]
80004bae:	4a 4c       	lddpc	r12,80004c3c <udc_iface_enable+0x7c>
80004bb0:	00 00       	add	r0,r0
80004bb2:	02 4c       	or	r12,r1
80004bb4:	00 00       	add	r0,r0
80004bb6:	02 50       	eor	r0,r1
80004bb8:	80 00       	ld.sh	r0,r0[0x0]
80004bba:	49 c4       	lddpc	r4,80004c28 <udc_iface_enable+0x68>
80004bbc:	80 00       	ld.sh	r0,r0[0x0]
80004bbe:	29 dc       	sub	r12,-99

80004bc0 <udc_iface_enable>:
 * \param setting_num   Setting number to enable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_enable(uint8_t iface_num, uint8_t setting_num)
{
80004bc0:	eb cd 40 80 	pushm	r7,lr
80004bc4:	1a 97       	mov	r7,sp
80004bc6:	20 3d       	sub	sp,12
80004bc8:	18 99       	mov	r9,r12
80004bca:	16 98       	mov	r8,r11
80004bcc:	ef 69 ff f8 	st.b	r7[-8],r9
80004bd0:	ef 68 ff f4 	st.b	r7[-12],r8
	// Select the interface descriptor
	if (!udc_update_iface_desc(iface_num, setting_num)) {
80004bd4:	ef 39 ff f4 	ld.ub	r9,r7[-12]
80004bd8:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80004bdc:	12 9b       	mov	r11,r9
80004bde:	10 9c       	mov	r12,r8
80004be0:	f0 1f 00 25 	mcall	80004c74 <udc_iface_enable+0xb4>
80004be4:	18 98       	mov	r8,r12
80004be6:	ec 18 00 01 	eorl	r8,0x1
80004bea:	5c 58       	castu.b	r8
80004bec:	c0 30       	breq	80004bf2 <udc_iface_enable+0x32>
		return false;
80004bee:	30 08       	mov	r8,0
80004bf0:	c3 e8       	rjmp	80004c6c <udc_iface_enable+0xac>

#if (0!=USB_DEVICE_MAX_EP)
	usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;

	// Start at the beginning of the global interface descriptor
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
80004bf2:	4a 28       	lddpc	r8,80004c78 <udc_iface_enable+0xb8>
80004bf4:	70 08       	ld.w	r8,r8[0x0]
80004bf6:	ef 48 ff fc 	st.w	r7[-4],r8
80004bfa:	c0 28       	rjmp	80004bfe <udc_iface_enable+0x3e>
				ep_desc->bmAttributes,
				le16_to_cpu
				(ep_desc->wMaxPacketSize))) {
			return false;
		}
	}
80004bfc:	d7 03       	nop

	// Start at the beginning of the global interface descriptor
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
	while (1) {
		// Search Endpoint descriptor included in the global interface descriptor
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
80004bfe:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004c02:	30 5b       	mov	r11,5
80004c04:	10 9c       	mov	r12,r8
80004c06:	f0 1f 00 1e 	mcall	80004c7c <udc_iface_enable+0xbc>
80004c0a:	18 98       	mov	r8,r12
80004c0c:	ef 48 ff fc 	st.w	r7[-4],r8
				udc_next_desc_in_iface((UDC_DESC_STORAGE
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
80004c10:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004c14:	58 08       	cp.w	r8,0
80004c16:	c0 e1       	brne	80004c32 <udc_iface_enable+0x72>
			return false;
		}
	}
#endif
	// Enable the interface
	return udc_ptr_conf->udi_apis[iface_num]->enable();
80004c18:	49 a8       	lddpc	r8,80004c80 <udc_iface_enable+0xc0>
80004c1a:	70 08       	ld.w	r8,r8[0x0]
80004c1c:	70 19       	ld.w	r9,r8[0x4]
80004c1e:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80004c22:	a3 68       	lsl	r8,0x2
80004c24:	f2 08 00 08 	add	r8,r9,r8
80004c28:	70 08       	ld.w	r8,r8[0x0]
80004c2a:	70 08       	ld.w	r8,r8[0x0]
80004c2c:	5d 18       	icall	r8
80004c2e:	18 98       	mov	r8,r12
80004c30:	c1 e8       	rjmp	80004c6c <udc_iface_enable+0xac>
		if (NULL == ep_desc)
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
				ep_desc->bmAttributes,
				le16_to_cpu
80004c32:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004c36:	11 c9       	ld.ub	r9,r8[0x4]
80004c38:	a9 69       	lsl	r9,0x8
80004c3a:	11 d8       	ld.ub	r8,r8[0x5]
80004c3c:	12 48       	or	r8,r9
80004c3e:	5c 88       	casts.h	r8
80004c40:	5c 88       	casts.h	r8
80004c42:	5c c8       	swap.bh	r8
80004c44:	5c 88       	casts.h	r8
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
80004c46:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
				ep_desc->bmAttributes,
80004c4a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004c4e:	11 b8       	ld.ub	r8,r8[0x3]
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
80004c50:	10 99       	mov	r9,r8
80004c52:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004c56:	11 a8       	ld.ub	r8,r8[0x2]
80004c58:	12 9b       	mov	r11,r9
80004c5a:	10 9c       	mov	r12,r8
80004c5c:	f0 1f 00 0a 	mcall	80004c84 <udc_iface_enable+0xc4>
80004c60:	18 98       	mov	r8,r12
80004c62:	ec 18 00 01 	eorl	r8,0x1
80004c66:	5c 58       	castu.b	r8
80004c68:	cc a0       	breq	80004bfc <udc_iface_enable+0x3c>
				ep_desc->bmAttributes,
				le16_to_cpu
				(ep_desc->wMaxPacketSize))) {
			return false;
80004c6a:	30 08       	mov	r8,0
		}
	}
#endif
	// Enable the interface
	return udc_ptr_conf->udi_apis[iface_num]->enable();
}
80004c6c:	10 9c       	mov	r12,r8
80004c6e:	2f dd       	sub	sp,-12
80004c70:	e3 cd 80 80 	ldm	sp++,r7,pc
80004c74:	80 00       	ld.sh	r0,r0[0x0]
80004c76:	4a 4c       	lddpc	r12,80004d04 <udc_sof_notify+0x4>
80004c78:	00 00       	add	r0,r0
80004c7a:	02 50       	eor	r0,r1
80004c7c:	80 00       	ld.sh	r0,r0[0x0]
80004c7e:	49 c4       	lddpc	r4,80004cec <udc_reset+0x50>
80004c80:	00 00       	add	r0,r0
80004c82:	02 4c       	or	r12,r1
80004c84:	80 00       	ld.sh	r0,r0[0x0]
80004c86:	26 8c       	sub	r12,104

80004c88 <udc_start>:

/*! \brief Start the USB Device stack
 */
void udc_start(void)
{
80004c88:	eb cd 40 80 	pushm	r7,lr
80004c8c:	1a 97       	mov	r7,sp
	udd_enable();
80004c8e:	f0 1f 00 03 	mcall	80004c98 <udc_start+0x10>
}
80004c92:	e3 cd 80 80 	ldm	sp++,r7,pc
80004c96:	00 00       	add	r0,r0
80004c98:	80 00       	ld.sh	r0,r0[0x0]
80004c9a:	23 a8       	sub	r8,58

80004c9c <udc_reset>:
/**
 * \brief Reset the current configuration of the USB device,
 * This routines can be called by UDD when a RESET on the USB line occurs.
 */
void udc_reset(void)
{
80004c9c:	eb cd 40 80 	pushm	r7,lr
80004ca0:	1a 97       	mov	r7,sp
80004ca2:	20 1d       	sub	sp,4
	uint8_t iface_num;

	if (udc_num_configuration) {
80004ca4:	49 38       	lddpc	r8,80004cf0 <udc_reset+0x54>
80004ca6:	11 88       	ld.ub	r8,r8[0x0]
80004ca8:	58 08       	cp.w	r8,0
80004caa:	c1 80       	breq	80004cda <udc_reset+0x3e>
		for (iface_num = 0;
80004cac:	30 08       	mov	r8,0
80004cae:	ef 68 ff ff 	st.b	r7[-1],r8
80004cb2:	c0 b8       	rjmp	80004cc8 <udc_reset+0x2c>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
80004cb4:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80004cb8:	10 9c       	mov	r12,r8
80004cba:	f0 1f 00 0f 	mcall	80004cf4 <udc_reset+0x58>
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
80004cbe:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80004cc2:	2f f8       	sub	r8,-1
80004cc4:	ef 68 ff ff 	st.b	r7[-1],r8
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
80004cc8:	48 c8       	lddpc	r8,80004cf8 <udc_reset+0x5c>
80004cca:	70 08       	ld.w	r8,r8[0x0]
80004ccc:	70 08       	ld.w	r8,r8[0x0]
80004cce:	11 c8       	ld.ub	r8,r8[0x4]
void udc_reset(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
80004cd0:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80004cd4:	f0 09 18 00 	cp.b	r9,r8
80004cd8:	ce e3       	brcs	80004cb4 <udc_reset+0x18>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
		}
	}
	udc_num_configuration = 0;
80004cda:	48 69       	lddpc	r9,80004cf0 <udc_reset+0x54>
80004cdc:	30 08       	mov	r8,0
80004cde:	b2 88       	st.b	r9[0x0],r8
	if (CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP) & udc_device_status) {
		// Remote wakeup is enabled then disable it
		UDC_REMOTEWAKEUP_DISABLE();
	}
#endif
	udc_device_status =
80004ce0:	48 79       	lddpc	r9,80004cfc <udc_reset+0x60>
80004ce2:	e0 68 01 00 	mov	r8,256
80004ce6:	b2 08       	st.h	r9[0x0],r8
#if (USB_DEVICE_ATTR & USB_CONFIG_ATTR_SELF_POWERED)
			CPU_TO_LE16(USB_DEV_STATUS_SELF_POWERED);
#else
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}
80004ce8:	2f fd       	sub	sp,-4
80004cea:	e3 cd 80 80 	ldm	sp++,r7,pc
80004cee:	00 00       	add	r0,r0
80004cf0:	00 00       	add	r0,r0
80004cf2:	02 48       	or	r8,r1
80004cf4:	80 00       	ld.sh	r0,r0[0x0]
80004cf6:	4b 04       	lddpc	r4,80004db4 <udc_req_std_ep_get_status+0x10>
80004cf8:	00 00       	add	r0,r0
80004cfa:	02 4c       	or	r12,r1
80004cfc:	00 00       	add	r0,r0
80004cfe:	02 40       	or	r0,r1

80004d00 <udc_sof_notify>:

void udc_sof_notify(void)
{
80004d00:	eb cd 40 80 	pushm	r7,lr
80004d04:	1a 97       	mov	r7,sp
80004d06:	20 1d       	sub	sp,4
	uint8_t iface_num;

	if (udc_num_configuration) {
80004d08:	49 88       	lddpc	r8,80004d68 <udc_sof_notify+0x68>
80004d0a:	11 88       	ld.ub	r8,r8[0x0]
80004d0c:	58 08       	cp.w	r8,0
80004d0e:	c2 a0       	breq	80004d62 <udc_sof_notify+0x62>
		for (iface_num = 0;
80004d10:	30 08       	mov	r8,0
80004d12:	ef 68 ff ff 	st.b	r7[-1],r8
80004d16:	c1 d8       	rjmp	80004d50 <udc_sof_notify+0x50>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
80004d18:	49 58       	lddpc	r8,80004d6c <udc_sof_notify+0x6c>
80004d1a:	70 08       	ld.w	r8,r8[0x0]
80004d1c:	70 19       	ld.w	r9,r8[0x4]
80004d1e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80004d22:	a3 68       	lsl	r8,0x2
80004d24:	f2 08 00 08 	add	r8,r9,r8
80004d28:	70 08       	ld.w	r8,r8[0x0]
80004d2a:	70 48       	ld.w	r8,r8[0x10]
80004d2c:	58 08       	cp.w	r8,0
80004d2e:	c0 c0       	breq	80004d46 <udc_sof_notify+0x46>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
80004d30:	48 f8       	lddpc	r8,80004d6c <udc_sof_notify+0x6c>
80004d32:	70 08       	ld.w	r8,r8[0x0]
80004d34:	70 19       	ld.w	r9,r8[0x4]
80004d36:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80004d3a:	a3 68       	lsl	r8,0x2
80004d3c:	f2 08 00 08 	add	r8,r9,r8
80004d40:	70 08       	ld.w	r8,r8[0x0]
80004d42:	70 48       	ld.w	r8,r8[0x10]
80004d44:	5d 18       	icall	r8
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
80004d46:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80004d4a:	2f f8       	sub	r8,-1
80004d4c:	ef 68 ff ff 	st.b	r7[-1],r8
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
80004d50:	48 78       	lddpc	r8,80004d6c <udc_sof_notify+0x6c>
80004d52:	70 08       	ld.w	r8,r8[0x0]
80004d54:	70 08       	ld.w	r8,r8[0x0]
80004d56:	11 c8       	ld.ub	r8,r8[0x4]
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
80004d58:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80004d5c:	f0 09 18 00 	cp.b	r9,r8
80004d60:	cd c3       	brcs	80004d18 <udc_sof_notify+0x18>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
			}
		}
	}
}
80004d62:	2f fd       	sub	sp,-4
80004d64:	e3 cd 80 80 	ldm	sp++,r7,pc
80004d68:	00 00       	add	r0,r0
80004d6a:	02 48       	or	r8,r1
80004d6c:	00 00       	add	r0,r0
80004d6e:	02 4c       	or	r12,r1

80004d70 <udc_req_std_dev_get_status>:
 * \brief Standard device request to get device status
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
80004d70:	eb cd 40 80 	pushm	r7,lr
80004d74:	1a 97       	mov	r7,sp
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
80004d76:	48 98       	lddpc	r8,80004d98 <udc_req_std_dev_get_status+0x28>
80004d78:	90 39       	ld.sh	r9,r8[0x6]
80004d7a:	30 28       	mov	r8,2
80004d7c:	f0 09 19 00 	cp.h	r9,r8
80004d80:	c0 30       	breq	80004d86 <udc_req_std_dev_get_status+0x16>
		return false;
80004d82:	30 08       	mov	r8,0
80004d84:	c0 78       	rjmp	80004d92 <udc_req_std_dev_get_status+0x22>
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
80004d86:	48 68       	lddpc	r8,80004d9c <udc_req_std_dev_get_status+0x2c>
80004d88:	30 2b       	mov	r11,2
80004d8a:	10 9c       	mov	r12,r8
80004d8c:	f0 1f 00 05 	mcall	80004da0 <udc_req_std_dev_get_status+0x30>
			sizeof(udc_device_status));
	return true;
80004d90:	30 18       	mov	r8,1
}
80004d92:	10 9c       	mov	r12,r8
80004d94:	e3 cd 80 80 	ldm	sp++,r7,pc
80004d98:	00 00       	add	r0,r0
80004d9a:	03 48       	ld.w	r8,--r1
80004d9c:	00 00       	add	r0,r0
80004d9e:	02 40       	or	r0,r1
80004da0:	80 00       	ld.sh	r0,r0[0x0]
80004da2:	26 60       	sub	r0,102

80004da4 <udc_req_std_ep_get_status>:
 * \brief Standard endpoint request to get endpoint status
 *
 * \return true if success
 */
static bool udc_req_std_ep_get_status(void)
{
80004da4:	eb cd 40 80 	pushm	r7,lr
80004da8:	1a 97       	mov	r7,sp
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
80004daa:	49 18       	lddpc	r8,80004dec <udc_req_std_ep_get_status+0x48>
80004dac:	90 39       	ld.sh	r9,r8[0x6]
80004dae:	30 28       	mov	r8,2
80004db0:	f0 09 19 00 	cp.h	r9,r8
80004db4:	c0 30       	breq	80004dba <udc_req_std_ep_get_status+0x16>
		return false;
80004db6:	30 08       	mov	r8,0
80004db8:	c1 68       	rjmp	80004de4 <udc_req_std_ep_get_status+0x40>
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
80004dba:	48 d8       	lddpc	r8,80004dec <udc_req_std_ep_get_status+0x48>
80004dbc:	90 28       	ld.sh	r8,r8[0x4]
80004dbe:	5c 58       	castu.b	r8
80004dc0:	10 9c       	mov	r12,r8
80004dc2:	f0 1f 00 0c 	mcall	80004df0 <udc_req_std_ep_get_status+0x4c>
80004dc6:	18 98       	mov	r8,r12
80004dc8:	58 08       	cp.w	r8,0
80004dca:	c0 40       	breq	80004dd2 <udc_req_std_ep_get_status+0x2e>
80004dcc:	e0 68 01 00 	mov	r8,256
80004dd0:	c0 28       	rjmp	80004dd4 <udc_req_std_ep_get_status+0x30>
80004dd2:	30 08       	mov	r8,0
80004dd4:	48 89       	lddpc	r9,80004df4 <udc_req_std_ep_get_status+0x50>
80004dd6:	b2 08       	st.h	r9[0x0],r8
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
80004dd8:	48 78       	lddpc	r8,80004df4 <udc_req_std_ep_get_status+0x50>
80004dda:	30 2b       	mov	r11,2
80004ddc:	10 9c       	mov	r12,r8
80004dde:	f0 1f 00 07 	mcall	80004df8 <udc_req_std_ep_get_status+0x54>
			sizeof(udc_ep_status));
	return true;
80004de2:	30 18       	mov	r8,1
}
80004de4:	10 9c       	mov	r12,r8
80004de6:	e3 cd 80 80 	ldm	sp++,r7,pc
80004dea:	00 00       	add	r0,r0
80004dec:	00 00       	add	r0,r0
80004dee:	03 48       	ld.w	r8,--r1
80004df0:	80 00       	ld.sh	r0,r0[0x0]
80004df2:	2a 78       	sub	r8,-89
80004df4:	00 00       	add	r0,r0
80004df6:	02 54       	eor	r4,r1
80004df8:	80 00       	ld.sh	r0,r0[0x0]
80004dfa:	26 60       	sub	r0,102

80004dfc <udc_req_std_dev_clear_feature>:
 * \brief Standard device request to change device status
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
80004dfc:	eb cd 40 80 	pushm	r7,lr
80004e00:	1a 97       	mov	r7,sp
	if (udd_g_ctrlreq.req.wLength) {
80004e02:	48 d8       	lddpc	r8,80004e34 <udc_req_std_dev_clear_feature+0x38>
80004e04:	90 38       	ld.sh	r8,r8[0x6]
80004e06:	58 08       	cp.w	r8,0
80004e08:	c0 30       	breq	80004e0e <udc_req_std_dev_clear_feature+0x12>
		return false;
80004e0a:	30 08       	mov	r8,0
80004e0c:	c1 08       	rjmp	80004e2c <udc_req_std_dev_clear_feature+0x30>
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
80004e0e:	48 a8       	lddpc	r8,80004e34 <udc_req_std_dev_clear_feature+0x38>
80004e10:	90 19       	ld.sh	r9,r8[0x2]
80004e12:	30 18       	mov	r8,1
80004e14:	f0 09 19 00 	cp.h	r9,r8
80004e18:	c0 91       	brne	80004e2a <udc_req_std_dev_clear_feature+0x2e>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
80004e1a:	48 88       	lddpc	r8,80004e38 <udc_req_std_dev_clear_feature+0x3c>
80004e1c:	90 08       	ld.sh	r8,r8[0x0]
80004e1e:	a9 d8       	cbr	r8,0x9
80004e20:	5c 88       	casts.h	r8
80004e22:	48 69       	lddpc	r9,80004e38 <udc_req_std_dev_clear_feature+0x3c>
80004e24:	b2 08       	st.h	r9[0x0],r8
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
#endif
		return true;
80004e26:	30 18       	mov	r8,1
80004e28:	c0 28       	rjmp	80004e2c <udc_req_std_dev_clear_feature+0x30>
	}
	return false;
80004e2a:	30 08       	mov	r8,0
}
80004e2c:	10 9c       	mov	r12,r8
80004e2e:	e3 cd 80 80 	ldm	sp++,r7,pc
80004e32:	00 00       	add	r0,r0
80004e34:	00 00       	add	r0,r0
80004e36:	03 48       	ld.w	r8,--r1
80004e38:	00 00       	add	r0,r0
80004e3a:	02 40       	or	r0,r1

80004e3c <udc_req_std_ep_clear_feature>:
 * \brief Standard endpoint request to clear endpoint feature
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
80004e3c:	eb cd 40 80 	pushm	r7,lr
80004e40:	1a 97       	mov	r7,sp
	if (udd_g_ctrlreq.req.wLength) {
80004e42:	48 c8       	lddpc	r8,80004e70 <udc_req_std_ep_clear_feature+0x34>
80004e44:	90 38       	ld.sh	r8,r8[0x6]
80004e46:	58 08       	cp.w	r8,0
80004e48:	c0 30       	breq	80004e4e <udc_req_std_ep_clear_feature+0x12>
		return false;
80004e4a:	30 08       	mov	r8,0
80004e4c:	c0 e8       	rjmp	80004e68 <udc_req_std_ep_clear_feature+0x2c>
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
80004e4e:	48 98       	lddpc	r8,80004e70 <udc_req_std_ep_clear_feature+0x34>
80004e50:	90 18       	ld.sh	r8,r8[0x2]
80004e52:	58 08       	cp.w	r8,0
80004e54:	c0 91       	brne	80004e66 <udc_req_std_ep_clear_feature+0x2a>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
80004e56:	48 78       	lddpc	r8,80004e70 <udc_req_std_ep_clear_feature+0x34>
80004e58:	90 28       	ld.sh	r8,r8[0x4]
80004e5a:	5c 58       	castu.b	r8
80004e5c:	10 9c       	mov	r12,r8
80004e5e:	f0 1f 00 06 	mcall	80004e74 <udc_req_std_ep_clear_feature+0x38>
80004e62:	18 98       	mov	r8,r12
80004e64:	c0 28       	rjmp	80004e68 <udc_req_std_ep_clear_feature+0x2c>
	}
	return false;
80004e66:	30 08       	mov	r8,0
}
80004e68:	10 9c       	mov	r12,r8
80004e6a:	e3 cd 80 80 	ldm	sp++,r7,pc
80004e6e:	00 00       	add	r0,r0
80004e70:	00 00       	add	r0,r0
80004e72:	03 48       	ld.w	r8,--r1
80004e74:	80 00       	ld.sh	r0,r0[0x0]
80004e76:	2b bc       	sub	r12,-69

80004e78 <udc_req_std_dev_set_feature>:
 * \brief Standard device request to set a feature
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_feature(void)
{
80004e78:	eb cd 40 80 	pushm	r7,lr
80004e7c:	1a 97       	mov	r7,sp
	if (udd_g_ctrlreq.req.wLength) {
80004e7e:	48 98       	lddpc	r8,80004ea0 <udc_req_std_dev_set_feature+0x28>
80004e80:	90 38       	ld.sh	r8,r8[0x6]
80004e82:	58 08       	cp.w	r8,0
80004e84:	c0 30       	breq	80004e8a <udc_req_std_dev_set_feature+0x12>
		return false;
80004e86:	30 08       	mov	r8,0
80004e88:	c0 98       	rjmp	80004e9a <udc_req_std_dev_set_feature+0x22>
	}

	switch (udd_g_ctrlreq.req.wValue) {
80004e8a:	48 68       	lddpc	r8,80004ea0 <udc_req_std_dev_set_feature+0x28>
80004e8c:	90 18       	ld.sh	r8,r8[0x2]
80004e8e:	5c 78       	castu.h	r8
80004e90:	58 18       	cp.w	r8,1
80004e92:	c0 31       	brne	80004e98 <udc_req_std_dev_set_feature+0x20>
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		udc_device_status |= CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP);
		UDC_REMOTEWAKEUP_ENABLE();
		return true;
#else
		return false;
80004e94:	30 08       	mov	r8,0
80004e96:	c0 28       	rjmp	80004e9a <udc_req_std_dev_set_feature+0x22>
		break;
#endif
	default:
		break;
	}
	return false;
80004e98:	30 08       	mov	r8,0
}
80004e9a:	10 9c       	mov	r12,r8
80004e9c:	e3 cd 80 80 	ldm	sp++,r7,pc
80004ea0:	00 00       	add	r0,r0
80004ea2:	03 48       	ld.w	r8,--r1

80004ea4 <udc_req_std_ep_set_feature>:
 *
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
80004ea4:	eb cd 40 80 	pushm	r7,lr
80004ea8:	1a 97       	mov	r7,sp
	if (udd_g_ctrlreq.req.wLength) {
80004eaa:	48 f8       	lddpc	r8,80004ee4 <udc_req_std_ep_set_feature+0x40>
80004eac:	90 38       	ld.sh	r8,r8[0x6]
80004eae:	58 08       	cp.w	r8,0
80004eb0:	c0 30       	breq	80004eb6 <udc_req_std_ep_set_feature+0x12>
		return false;
80004eb2:	30 08       	mov	r8,0
80004eb4:	c1 48       	rjmp	80004edc <udc_req_std_ep_set_feature+0x38>
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
80004eb6:	48 c8       	lddpc	r8,80004ee4 <udc_req_std_ep_set_feature+0x40>
80004eb8:	90 18       	ld.sh	r8,r8[0x2]
80004eba:	58 08       	cp.w	r8,0
80004ebc:	c0 f1       	brne	80004eda <udc_req_std_ep_set_feature+0x36>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
80004ebe:	48 a8       	lddpc	r8,80004ee4 <udc_req_std_ep_set_feature+0x40>
80004ec0:	90 28       	ld.sh	r8,r8[0x4]
80004ec2:	5c 58       	castu.b	r8
80004ec4:	10 9c       	mov	r12,r8
80004ec6:	f0 1f 00 09 	mcall	80004ee8 <udc_req_std_ep_set_feature+0x44>
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
80004eca:	48 78       	lddpc	r8,80004ee4 <udc_req_std_ep_set_feature+0x40>
80004ecc:	90 28       	ld.sh	r8,r8[0x4]
80004ece:	5c 58       	castu.b	r8
80004ed0:	10 9c       	mov	r12,r8
80004ed2:	f0 1f 00 07 	mcall	80004eec <udc_req_std_ep_set_feature+0x48>
80004ed6:	18 98       	mov	r8,r12
80004ed8:	c0 28       	rjmp	80004edc <udc_req_std_ep_set_feature+0x38>
	}
	return false;
80004eda:	30 08       	mov	r8,0
}
80004edc:	10 9c       	mov	r12,r8
80004ede:	e3 cd 80 80 	ldm	sp++,r7,pc
80004ee2:	00 00       	add	r0,r0
80004ee4:	00 00       	add	r0,r0
80004ee6:	03 48       	ld.w	r8,--r1
80004ee8:	80 00       	ld.sh	r0,r0[0x0]
80004eea:	2e 20       	sub	r0,-30
80004eec:	80 00       	ld.sh	r0,r0[0x0]
80004eee:	2a a8       	sub	r8,-86

80004ef0 <udc_valid_address>:
/**
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
80004ef0:	eb cd 40 80 	pushm	r7,lr
80004ef4:	1a 97       	mov	r7,sp
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
80004ef6:	48 68       	lddpc	r8,80004f0c <udc_valid_address+0x1c>
80004ef8:	90 18       	ld.sh	r8,r8[0x2]
80004efa:	5c 58       	castu.b	r8
80004efc:	f1 d8 c0 07 	bfextu	r8,r8,0x0,0x7
80004f00:	10 9c       	mov	r12,r8
80004f02:	f0 1f 00 04 	mcall	80004f10 <udc_valid_address+0x20>
}
80004f06:	e3 cd 80 80 	ldm	sp++,r7,pc
80004f0a:	00 00       	add	r0,r0
80004f0c:	00 00       	add	r0,r0
80004f0e:	03 48       	ld.w	r8,--r1
80004f10:	80 00       	ld.sh	r0,r0[0x0]
80004f12:	25 c6       	sub	r6,92

80004f14 <udc_req_std_dev_set_address>:
 * \brief Standard device request to set device address
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
80004f14:	eb cd 40 80 	pushm	r7,lr
80004f18:	1a 97       	mov	r7,sp
	if (udd_g_ctrlreq.req.wLength) {
80004f1a:	48 78       	lddpc	r8,80004f34 <udc_req_std_dev_set_address+0x20>
80004f1c:	90 38       	ld.sh	r8,r8[0x6]
80004f1e:	58 08       	cp.w	r8,0
80004f20:	c0 30       	breq	80004f26 <udc_req_std_dev_set_address+0x12>
		return false;
80004f22:	30 08       	mov	r8,0
80004f24:	c0 58       	rjmp	80004f2e <udc_req_std_dev_set_address+0x1a>
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
80004f26:	48 48       	lddpc	r8,80004f34 <udc_req_std_dev_set_address+0x20>
80004f28:	48 49       	lddpc	r9,80004f38 <udc_req_std_dev_set_address+0x24>
80004f2a:	91 49       	st.w	r8[0x10],r9
	return true;
80004f2c:	30 18       	mov	r8,1
}
80004f2e:	10 9c       	mov	r12,r8
80004f30:	e3 cd 80 80 	ldm	sp++,r7,pc
80004f34:	00 00       	add	r0,r0
80004f36:	03 48       	ld.w	r8,--r1
80004f38:	80 00       	ld.sh	r0,r0[0x0]
80004f3a:	4e f0       	lddpc	r0,800050f4 <udc_req_std_dev_get_descriptor+0x108>

80004f3c <udc_req_std_dev_get_str_desc>:
 * \brief Standard device request to get device string descriptor
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_str_desc(void)
{
80004f3c:	eb cd 40 80 	pushm	r7,lr
80004f40:	1a 97       	mov	r7,sp
80004f42:	20 3d       	sub	sp,12
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;
80004f44:	30 08       	mov	r8,0
80004f46:	ef 68 ff ff 	st.b	r7[-1],r8

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
80004f4a:	4a 58       	lddpc	r8,80004fdc <udc_req_std_dev_get_str_desc+0xa0>
80004f4c:	90 18       	ld.sh	r8,r8[0x2]
80004f4e:	5c 78       	castu.h	r8
80004f50:	f1 d8 c0 08 	bfextu	r8,r8,0x0,0x8
80004f54:	c0 c1       	brne	80004f6c <udc_req_std_dev_get_str_desc+0x30>
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
80004f56:	30 4b       	mov	r11,4
80004f58:	4a 2c       	lddpc	r12,80004fe0 <udc_req_std_dev_get_str_desc+0xa4>
80004f5a:	f0 1f 00 23 	mcall	80004fe4 <udc_req_std_dev_get_str_desc+0xa8>
		}
#endif
		return false;
	}

	if (str_length) {
80004f5e:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80004f62:	30 08       	mov	r8,0
80004f64:	f0 09 18 00 	cp.b	r9,r8
80004f68:	c0 41       	brne	80004f70 <udc_req_std_dev_get_str_desc+0x34>
80004f6a:	c3 38       	rjmp	80004fd0 <udc_req_std_dev_get_str_desc+0x94>
#ifdef UDC_GET_EXTRA_STRING
		if (UDC_GET_EXTRA_STRING()) {
			break;
		}
#endif
		return false;
80004f6c:	30 08       	mov	r8,0
80004f6e:	c3 28       	rjmp	80004fd2 <udc_req_std_dev_get_str_desc+0x96>
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
80004f70:	30 08       	mov	r8,0
80004f72:	ef 68 ff f7 	st.b	r7[-9],r8
80004f76:	c1 88       	rjmp	80004fa6 <udc_req_std_dev_get_str_desc+0x6a>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
80004f78:	ef 3b ff f7 	ld.ub	r11,r7[-9]
80004f7c:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80004f80:	ee f9 ff f8 	ld.w	r9,r7[-8]
80004f84:	f2 08 00 08 	add	r8,r9,r8
80004f88:	11 88       	ld.ub	r8,r8[0x0]
80004f8a:	5c c8       	swap.bh	r8
80004f8c:	5c 88       	casts.h	r8
80004f8e:	10 99       	mov	r9,r8
80004f90:	49 6a       	lddpc	r10,80004fe8 <udc_req_std_dev_get_str_desc+0xac>
80004f92:	f6 08 15 01 	lsl	r8,r11,0x1
80004f96:	f4 08 00 08 	add	r8,r10,r8
80004f9a:	b0 19       	st.h	r8[0x2],r9
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
80004f9c:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80004fa0:	2f f8       	sub	r8,-1
80004fa2:	ef 68 ff f7 	st.b	r7[-9],r8
80004fa6:	ef 39 ff f7 	ld.ub	r9,r7[-9]
80004faa:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80004fae:	f0 09 18 00 	cp.b	r9,r8
80004fb2:	ce 33       	brcs	80004f78 <udc_req_std_dev_get_str_desc+0x3c>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
80004fb4:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80004fb8:	2f f8       	sub	r8,-1
80004fba:	5c 58       	castu.b	r8
80004fbc:	a1 78       	lsl	r8,0x1
80004fbe:	5c 58       	castu.b	r8
80004fc0:	48 a9       	lddpc	r9,80004fe8 <udc_req_std_dev_get_str_desc+0xac>
80004fc2:	b2 88       	st.b	r9[0x0],r8
		udd_set_setup_payload(
			(uint8_t *) &udc_string_desc,
			udc_string_desc.header.bLength);
80004fc4:	48 98       	lddpc	r8,80004fe8 <udc_req_std_dev_get_str_desc+0xac>
80004fc6:	11 88       	ld.ub	r8,r8[0x0]
		for(i = 0; i < str_length; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
		udd_set_setup_payload(
80004fc8:	10 9b       	mov	r11,r8
80004fca:	48 8c       	lddpc	r12,80004fe8 <udc_req_std_dev_get_str_desc+0xac>
80004fcc:	f0 1f 00 06 	mcall	80004fe4 <udc_req_std_dev_get_str_desc+0xa8>
			(uint8_t *) &udc_string_desc,
			udc_string_desc.header.bLength);
	}

	return true;
80004fd0:	30 18       	mov	r8,1
}
80004fd2:	10 9c       	mov	r12,r8
80004fd4:	2f dd       	sub	sp,-12
80004fd6:	e3 cd 80 80 	ldm	sp++,r7,pc
80004fda:	00 00       	add	r0,r0
80004fdc:	00 00       	add	r0,r0
80004fde:	03 48       	ld.w	r8,--r1
80004fe0:	00 00       	add	r0,r0
80004fe2:	00 30       	cp.w	r0,r0
80004fe4:	80 00       	ld.sh	r0,r0[0x0]
80004fe6:	26 60       	sub	r0,102
80004fe8:	00 00       	add	r0,r0
80004fea:	00 34       	cp.w	r4,r0

80004fec <udc_req_std_dev_get_descriptor>:
 * \brief Standard device request to get descriptors about USB device
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_descriptor(void)
{
80004fec:	eb cd 40 80 	pushm	r7,lr
80004ff0:	1a 97       	mov	r7,sp
80004ff2:	20 1d       	sub	sp,4
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
80004ff4:	4c 18       	lddpc	r8,800050f8 <udc_req_std_dev_get_descriptor+0x10c>
80004ff6:	90 18       	ld.sh	r8,r8[0x2]
80004ff8:	ef 68 ff ff 	st.b	r7[-1],r8

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
80004ffc:	4b f8       	lddpc	r8,800050f8 <udc_req_std_dev_get_descriptor+0x10c>
80004ffe:	90 18       	ld.sh	r8,r8[0x2]
80005000:	5c 78       	castu.h	r8
80005002:	a9 88       	lsr	r8,0x8
80005004:	5c 88       	casts.h	r8
80005006:	5c 58       	castu.b	r8
80005008:	58 28       	cp.w	r8,2
8000500a:	c1 60       	breq	80005036 <udc_req_std_dev_get_descriptor+0x4a>
8000500c:	e0 89 00 05 	brgt	80005016 <udc_req_std_dev_get_descriptor+0x2a>
80005010:	58 18       	cp.w	r8,1
80005012:	c0 70       	breq	80005020 <udc_req_std_dev_get_descriptor+0x34>
80005014:	c5 f8       	rjmp	800050d2 <udc_req_std_dev_get_descriptor+0xe6>
80005016:	58 38       	cp.w	r8,3
80005018:	c5 40       	breq	800050c0 <udc_req_std_dev_get_descriptor+0xd4>
8000501a:	58 f8       	cp.w	r8,15
8000501c:	c3 c0       	breq	80005094 <udc_req_std_dev_get_descriptor+0xa8>
8000501e:	c5 a8       	rjmp	800050d2 <udc_req_std_dev_get_descriptor+0xe6>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
80005020:	4b 78       	lddpc	r8,800050fc <udc_req_std_dev_get_descriptor+0x110>
80005022:	70 08       	ld.w	r8,r8[0x0]
80005024:	11 88       	ld.ub	r8,r8[0x0]
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
80005026:	10 99       	mov	r9,r8
80005028:	4b 58       	lddpc	r8,800050fc <udc_req_std_dev_get_descriptor+0x110>
8000502a:	70 08       	ld.w	r8,r8[0x0]
8000502c:	12 9b       	mov	r11,r9
8000502e:	10 9c       	mov	r12,r8
80005030:	f0 1f 00 34 	mcall	80005100 <udc_req_std_dev_get_descriptor+0x114>
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
		}
		break;
80005034:	c5 28       	rjmp	800050d8 <udc_req_std_dev_get_descriptor+0xec>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
80005036:	4b 28       	lddpc	r8,800050fc <udc_req_std_dev_get_descriptor+0x110>
80005038:	70 08       	ld.w	r8,r8[0x0]
8000503a:	f1 38 00 11 	ld.ub	r8,r8[17]
8000503e:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80005042:	f0 09 18 00 	cp.b	r9,r8
80005046:	c0 33       	brcs	8000504c <udc_req_std_dev_get_descriptor+0x60>
					bNumConfigurations) {
				return false;
80005048:	30 08       	mov	r8,0
8000504a:	c5 38       	rjmp	800050f0 <udc_req_std_dev_get_descriptor+0x104>
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
8000504c:	4a c8       	lddpc	r8,800050fc <udc_req_std_dev_get_descriptor+0x110>
8000504e:	70 19       	ld.w	r9,r8[0x4]
80005050:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80005054:	a3 78       	lsl	r8,0x3
80005056:	f2 08 00 08 	add	r8,r9,r8
8000505a:	70 08       	ld.w	r8,r8[0x0]
8000505c:	11 a9       	ld.ub	r9,r8[0x2]
8000505e:	a9 69       	lsl	r9,0x8
80005060:	11 b8       	ld.ub	r8,r8[0x3]
80005062:	12 48       	or	r8,r9
80005064:	5c 88       	casts.h	r8
80005066:	5c 88       	casts.h	r8
80005068:	5c c8       	swap.bh	r8
8000506a:	5c 88       	casts.h	r8
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
8000506c:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
80005070:	4a 38       	lddpc	r8,800050fc <udc_req_std_dev_get_descriptor+0x110>
80005072:	70 1a       	ld.w	r10,r8[0x4]
80005074:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80005078:	a3 78       	lsl	r8,0x3
8000507a:	f4 08 00 08 	add	r8,r10,r8
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
8000507e:	70 08       	ld.w	r8,r8[0x0]
80005080:	12 9b       	mov	r11,r9
80005082:	10 9c       	mov	r12,r8
80005084:	f0 1f 00 1f 	mcall	80005100 <udc_req_std_dev_get_descriptor+0x114>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
80005088:	49 c8       	lddpc	r8,800050f8 <udc_req_std_dev_get_descriptor+0x10c>
8000508a:	70 28       	ld.w	r8,r8[0x8]
8000508c:	10 99       	mov	r9,r8
8000508e:	30 28       	mov	r8,2
80005090:	b2 98       	st.b	r9[0x1],r8
				USB_DT_CONFIGURATION;
		break;
80005092:	c2 38       	rjmp	800050d8 <udc_req_std_dev_get_descriptor+0xec>
		break;
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
80005094:	49 a8       	lddpc	r8,800050fc <udc_req_std_dev_get_descriptor+0x110>
80005096:	70 28       	ld.w	r8,r8[0x8]
80005098:	58 08       	cp.w	r8,0
8000509a:	c0 31       	brne	800050a0 <udc_req_std_dev_get_descriptor+0xb4>
			return false;
8000509c:	30 08       	mov	r8,0
8000509e:	c2 98       	rjmp	800050f0 <udc_req_std_dev_get_descriptor+0x104>
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
				udc_config.conf_bos->wTotalLength);
800050a0:	49 78       	lddpc	r8,800050fc <udc_req_std_dev_get_descriptor+0x110>
800050a2:	70 28       	ld.w	r8,r8[0x8]
800050a4:	11 a9       	ld.ub	r9,r8[0x2]
800050a6:	a9 69       	lsl	r9,0x8
800050a8:	11 b8       	ld.ub	r8,r8[0x3]
800050aa:	12 48       	or	r8,r9
800050ac:	5c 88       	casts.h	r8
	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
			return false;
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
800050ae:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
800050b2:	49 38       	lddpc	r8,800050fc <udc_req_std_dev_get_descriptor+0x110>
800050b4:	70 28       	ld.w	r8,r8[0x8]
800050b6:	12 9b       	mov	r11,r9
800050b8:	10 9c       	mov	r12,r8
800050ba:	f0 1f 00 12 	mcall	80005100 <udc_req_std_dev_get_descriptor+0x114>
				udc_config.conf_bos->wTotalLength);
		break;
800050be:	c0 d8       	rjmp	800050d8 <udc_req_std_dev_get_descriptor+0xec>

	case USB_DT_STRING:
		// String descriptor requested
		if (!udc_req_std_dev_get_str_desc()) {
800050c0:	f0 1f 00 11 	mcall	80005104 <udc_req_std_dev_get_descriptor+0x118>
800050c4:	18 98       	mov	r8,r12
800050c6:	ec 18 00 01 	eorl	r8,0x1
800050ca:	5c 58       	castu.b	r8
800050cc:	c0 50       	breq	800050d6 <udc_req_std_dev_get_descriptor+0xea>
			return false;
800050ce:	30 08       	mov	r8,0
800050d0:	c1 08       	rjmp	800050f0 <udc_req_std_dev_get_descriptor+0x104>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
800050d2:	30 08       	mov	r8,0
800050d4:	c0 e8       	rjmp	800050f0 <udc_req_std_dev_get_descriptor+0x104>
	case USB_DT_STRING:
		// String descriptor requested
		if (!udc_req_std_dev_get_str_desc()) {
			return false;
		}
		break;
800050d6:	d7 03       	nop
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
800050d8:	48 88       	lddpc	r8,800050f8 <udc_req_std_dev_get_descriptor+0x10c>
800050da:	90 39       	ld.sh	r9,r8[0x6]
800050dc:	48 78       	lddpc	r8,800050f8 <udc_req_std_dev_get_descriptor+0x10c>
800050de:	90 68       	ld.sh	r8,r8[0xc]
800050e0:	f0 09 19 00 	cp.h	r9,r8
800050e4:	c0 52       	brcc	800050ee <udc_req_std_dev_get_descriptor+0x102>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
800050e6:	48 58       	lddpc	r8,800050f8 <udc_req_std_dev_get_descriptor+0x10c>
800050e8:	90 38       	ld.sh	r8,r8[0x6]
800050ea:	48 49       	lddpc	r9,800050f8 <udc_req_std_dev_get_descriptor+0x10c>
800050ec:	b2 68       	st.h	r9[0xc],r8
	}
	return true;
800050ee:	30 18       	mov	r8,1
}
800050f0:	10 9c       	mov	r12,r8
800050f2:	2f fd       	sub	sp,-4
800050f4:	e3 cd 80 80 	ldm	sp++,r7,pc
800050f8:	00 00       	add	r0,r0
800050fa:	03 48       	ld.w	r8,--r1
800050fc:	00 00       	add	r0,r0
800050fe:	00 a0       	st.w	r0++,r0
80005100:	80 00       	ld.sh	r0,r0[0x0]
80005102:	26 60       	sub	r0,102
80005104:	80 00       	ld.sh	r0,r0[0x0]
80005106:	4f 3c       	lddpc	r12,800052d0 <udc_req_std_iface_set_setting+0x18>

80005108 <udc_req_std_dev_get_configuration>:
 * \brief Standard device request to get configuration number
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
80005108:	eb cd 40 80 	pushm	r7,lr
8000510c:	1a 97       	mov	r7,sp
	if (udd_g_ctrlreq.req.wLength != 1) {
8000510e:	48 98       	lddpc	r8,80005130 <udc_req_std_dev_get_configuration+0x28>
80005110:	90 39       	ld.sh	r9,r8[0x6]
80005112:	30 18       	mov	r8,1
80005114:	f0 09 19 00 	cp.h	r9,r8
80005118:	c0 30       	breq	8000511e <udc_req_std_dev_get_configuration+0x16>
		return false;
8000511a:	30 08       	mov	r8,0
8000511c:	c0 68       	rjmp	80005128 <udc_req_std_dev_get_configuration+0x20>
	}

	udd_set_setup_payload(&udc_num_configuration,1);
8000511e:	30 1b       	mov	r11,1
80005120:	48 5c       	lddpc	r12,80005134 <udc_req_std_dev_get_configuration+0x2c>
80005122:	f0 1f 00 06 	mcall	80005138 <udc_req_std_dev_get_configuration+0x30>
	return true;
80005126:	30 18       	mov	r8,1
}
80005128:	10 9c       	mov	r12,r8
8000512a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000512e:	00 00       	add	r0,r0
80005130:	00 00       	add	r0,r0
80005132:	03 48       	ld.w	r8,--r1
80005134:	00 00       	add	r0,r0
80005136:	02 48       	or	r8,r1
80005138:	80 00       	ld.sh	r0,r0[0x0]
8000513a:	26 60       	sub	r0,102

8000513c <udc_req_std_dev_set_configuration>:
 * \brief Standard device request to enable a configuration
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_configuration(void)
{
8000513c:	eb cd 40 80 	pushm	r7,lr
80005140:	1a 97       	mov	r7,sp
80005142:	20 1d       	sub	sp,4
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
80005144:	4a b8       	lddpc	r8,800051f0 <udc_req_std_dev_set_configuration+0xb4>
80005146:	90 38       	ld.sh	r8,r8[0x6]
80005148:	58 08       	cp.w	r8,0
8000514a:	c0 30       	breq	80005150 <udc_req_std_dev_set_configuration+0x14>
		return false;
8000514c:	30 08       	mov	r8,0
8000514e:	c4 c8       	rjmp	800051e6 <udc_req_std_dev_set_configuration+0xaa>
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
80005150:	f0 1f 00 29 	mcall	800051f4 <udc_req_std_dev_set_configuration+0xb8>
80005154:	18 98       	mov	r8,r12
80005156:	58 08       	cp.w	r8,0
80005158:	c0 31       	brne	8000515e <udc_req_std_dev_set_configuration+0x22>
		return false;
8000515a:	30 08       	mov	r8,0
8000515c:	c4 58       	rjmp	800051e6 <udc_req_std_dev_set_configuration+0xaa>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
8000515e:	4a 58       	lddpc	r8,800051f0 <udc_req_std_dev_set_configuration+0xb4>
80005160:	90 18       	ld.sh	r8,r8[0x2]
80005162:	5c 78       	castu.h	r8
80005164:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
				udc_config.confdev_lsfs->bNumConfigurations) {
80005168:	4a 48       	lddpc	r8,800051f8 <udc_req_std_dev_set_configuration+0xbc>
8000516a:	70 08       	ld.w	r8,r8[0x0]
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
8000516c:	f1 38 00 11 	ld.ub	r8,r8[17]
80005170:	10 39       	cp.w	r9,r8
80005172:	e0 8a 00 04 	brle	8000517a <udc_req_std_dev_set_configuration+0x3e>
				udc_config.confdev_lsfs->bNumConfigurations) {
			return false;
80005176:	30 08       	mov	r8,0
80005178:	c3 78       	rjmp	800051e6 <udc_req_std_dev_set_configuration+0xaa>
		}
	}

	// Reset current configuration
	udc_reset();
8000517a:	f0 1f 00 21 	mcall	800051fc <udc_req_std_dev_set_configuration+0xc0>

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
8000517e:	49 d8       	lddpc	r8,800051f0 <udc_req_std_dev_set_configuration+0xb4>
80005180:	90 18       	ld.sh	r8,r8[0x2]
80005182:	5c 58       	castu.b	r8
80005184:	49 f9       	lddpc	r9,80005200 <udc_req_std_dev_set_configuration+0xc4>
80005186:	b2 88       	st.b	r9[0x0],r8
	if (udc_num_configuration == 0) {
80005188:	49 e8       	lddpc	r8,80005200 <udc_req_std_dev_set_configuration+0xc4>
8000518a:	11 88       	ld.ub	r8,r8[0x0]
8000518c:	58 08       	cp.w	r8,0
8000518e:	c0 31       	brne	80005194 <udc_req_std_dev_set_configuration+0x58>
		return true; // Default empty configuration requested
80005190:	30 18       	mov	r8,1
80005192:	c2 a8       	rjmp	800051e6 <udc_req_std_dev_set_configuration+0xaa>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
80005194:	49 98       	lddpc	r8,800051f8 <udc_req_std_dev_set_configuration+0xbc>
80005196:	70 19       	ld.w	r9,r8[0x4]
80005198:	49 a8       	lddpc	r8,80005200 <udc_req_std_dev_set_configuration+0xc4>
8000519a:	11 88       	ld.ub	r8,r8[0x0]
8000519c:	20 18       	sub	r8,1
8000519e:	a3 78       	lsl	r8,0x3
800051a0:	10 09       	add	r9,r8
800051a2:	49 98       	lddpc	r8,80005204 <udc_req_std_dev_set_configuration+0xc8>
800051a4:	91 09       	st.w	r8[0x0],r9
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
800051a6:	30 08       	mov	r8,0
800051a8:	ef 68 ff ff 	st.b	r7[-1],r8
800051ac:	c1 38       	rjmp	800051d2 <udc_req_std_dev_set_configuration+0x96>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
800051ae:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800051b2:	30 0b       	mov	r11,0
800051b4:	10 9c       	mov	r12,r8
800051b6:	f0 1f 00 15 	mcall	80005208 <udc_req_std_dev_set_configuration+0xcc>
800051ba:	18 98       	mov	r8,r12
800051bc:	ec 18 00 01 	eorl	r8,0x1
800051c0:	5c 58       	castu.b	r8
800051c2:	c0 30       	breq	800051c8 <udc_req_std_dev_set_configuration+0x8c>
			return false;
800051c4:	30 08       	mov	r8,0
800051c6:	c1 08       	rjmp	800051e6 <udc_req_std_dev_set_configuration+0xaa>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
800051c8:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800051cc:	2f f8       	sub	r8,-1
800051ce:	ef 68 ff ff 	st.b	r7[-1],r8
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
800051d2:	48 d8       	lddpc	r8,80005204 <udc_req_std_dev_set_configuration+0xc8>
800051d4:	70 08       	ld.w	r8,r8[0x0]
800051d6:	70 08       	ld.w	r8,r8[0x0]
800051d8:	11 c8       	ld.ub	r8,r8[0x4]
800051da:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800051de:	f0 09 18 00 	cp.b	r9,r8
800051e2:	ce 63       	brcs	800051ae <udc_req_std_dev_set_configuration+0x72>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
			return false;
		}
	}
	return true;
800051e4:	30 18       	mov	r8,1
}
800051e6:	10 9c       	mov	r12,r8
800051e8:	2f fd       	sub	sp,-4
800051ea:	e3 cd 80 80 	ldm	sp++,r7,pc
800051ee:	00 00       	add	r0,r0
800051f0:	00 00       	add	r0,r0
800051f2:	03 48       	ld.w	r8,--r1
800051f4:	80 00       	ld.sh	r0,r0[0x0]
800051f6:	26 14       	sub	r4,97
800051f8:	00 00       	add	r0,r0
800051fa:	00 a0       	st.w	r0++,r0
800051fc:	80 00       	ld.sh	r0,r0[0x0]
800051fe:	4c 9c       	lddpc	r12,80005320 <udc_req_std_iface_set_setting+0x68>
80005200:	00 00       	add	r0,r0
80005202:	02 48       	or	r8,r1
80005204:	00 00       	add	r0,r0
80005206:	02 4c       	or	r12,r1
80005208:	80 00       	ld.sh	r0,r0[0x0]
8000520a:	4b c0       	lddpc	r0,800052f8 <udc_req_std_iface_set_setting+0x40>

8000520c <udc_req_std_iface_get_setting>:
 * to get the alternate setting number of an interface
 *
 * \return true if success
 */
static bool udc_req_std_iface_get_setting(void)
{
8000520c:	eb cd 40 80 	pushm	r7,lr
80005210:	1a 97       	mov	r7,sp
80005212:	20 2d       	sub	sp,8
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
80005214:	4a 38       	lddpc	r8,800052a0 <udc_req_std_iface_get_setting+0x94>
80005216:	90 39       	ld.sh	r9,r8[0x6]
80005218:	30 18       	mov	r8,1
8000521a:	f0 09 19 00 	cp.h	r9,r8
8000521e:	c0 30       	breq	80005224 <udc_req_std_iface_get_setting+0x18>
		return false; // Error in request
80005220:	30 08       	mov	r8,0
80005222:	c3 a8       	rjmp	80005296 <udc_req_std_iface_get_setting+0x8a>
	}
	if (!udc_num_configuration) {
80005224:	4a 08       	lddpc	r8,800052a4 <udc_req_std_iface_get_setting+0x98>
80005226:	11 88       	ld.ub	r8,r8[0x0]
80005228:	58 08       	cp.w	r8,0
8000522a:	c0 31       	brne	80005230 <udc_req_std_iface_get_setting+0x24>
		return false; // The device is not is configured state yet
8000522c:	30 08       	mov	r8,0
8000522e:	c3 48       	rjmp	80005296 <udc_req_std_iface_get_setting+0x8a>
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
80005230:	49 c8       	lddpc	r8,800052a0 <udc_req_std_iface_get_setting+0x94>
80005232:	90 28       	ld.sh	r8,r8[0x4]
80005234:	ef 68 ff fb 	st.b	r7[-5],r8
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
80005238:	49 c8       	lddpc	r8,800052a8 <udc_req_std_iface_get_setting+0x9c>
8000523a:	70 08       	ld.w	r8,r8[0x0]
8000523c:	70 08       	ld.w	r8,r8[0x0]
8000523e:	11 c8       	ld.ub	r8,r8[0x4]
80005240:	ef 39 ff fb 	ld.ub	r9,r7[-5]
80005244:	f0 09 18 00 	cp.b	r9,r8
80005248:	c0 33       	brcs	8000524e <udc_req_std_iface_get_setting+0x42>
		return false;
8000524a:	30 08       	mov	r8,0
8000524c:	c2 58       	rjmp	80005296 <udc_req_std_iface_get_setting+0x8a>
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
8000524e:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80005252:	30 0b       	mov	r11,0
80005254:	10 9c       	mov	r12,r8
80005256:	f0 1f 00 16 	mcall	800052ac <udc_req_std_iface_get_setting+0xa0>
8000525a:	18 98       	mov	r8,r12
8000525c:	ec 18 00 01 	eorl	r8,0x1
80005260:	5c 58       	castu.b	r8
80005262:	c0 30       	breq	80005268 <udc_req_std_iface_get_setting+0x5c>
		return false;
80005264:	30 08       	mov	r8,0
80005266:	c1 88       	rjmp	80005296 <udc_req_std_iface_get_setting+0x8a>
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
80005268:	49 08       	lddpc	r8,800052a8 <udc_req_std_iface_get_setting+0x9c>
8000526a:	70 08       	ld.w	r8,r8[0x0]
8000526c:	70 19       	ld.w	r9,r8[0x4]
8000526e:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80005272:	a3 68       	lsl	r8,0x2
80005274:	f2 08 00 08 	add	r8,r9,r8
80005278:	70 08       	ld.w	r8,r8[0x0]
8000527a:	ef 48 ff fc 	st.w	r7[-4],r8
	udc_iface_setting = udi_api->getsetting();
8000527e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005282:	70 38       	ld.w	r8,r8[0xc]
80005284:	5d 18       	icall	r8
80005286:	18 98       	mov	r8,r12
80005288:	48 a9       	lddpc	r9,800052b0 <udc_req_std_iface_get_setting+0xa4>
8000528a:	b2 88       	st.b	r9[0x0],r8

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
8000528c:	30 1b       	mov	r11,1
8000528e:	48 9c       	lddpc	r12,800052b0 <udc_req_std_iface_get_setting+0xa4>
80005290:	f0 1f 00 09 	mcall	800052b4 <udc_req_std_iface_get_setting+0xa8>
	return true;
80005294:	30 18       	mov	r8,1
}
80005296:	10 9c       	mov	r12,r8
80005298:	2f ed       	sub	sp,-8
8000529a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000529e:	00 00       	add	r0,r0
800052a0:	00 00       	add	r0,r0
800052a2:	03 48       	ld.w	r8,--r1
800052a4:	00 00       	add	r0,r0
800052a6:	02 48       	or	r8,r1
800052a8:	00 00       	add	r0,r0
800052aa:	02 4c       	or	r12,r1
800052ac:	80 00       	ld.sh	r0,r0[0x0]
800052ae:	4a 4c       	lddpc	r12,8000533c <udc_reqstd+0x10>
800052b0:	00 00       	add	r0,r0
800052b2:	02 44       	or	r4,r1
800052b4:	80 00       	ld.sh	r0,r0[0x0]
800052b6:	26 60       	sub	r0,102

800052b8 <udc_req_std_iface_set_setting>:
 * to set an alternate setting of an interface
 *
 * \return true if success
 */
static bool udc_req_std_iface_set_setting(void)
{
800052b8:	eb cd 40 80 	pushm	r7,lr
800052bc:	1a 97       	mov	r7,sp
800052be:	20 1d       	sub	sp,4
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
800052c0:	49 78       	lddpc	r8,8000531c <udc_req_std_iface_set_setting+0x64>
800052c2:	90 38       	ld.sh	r8,r8[0x6]
800052c4:	58 08       	cp.w	r8,0
800052c6:	c0 30       	breq	800052cc <udc_req_std_iface_set_setting+0x14>
		return false; // Error in request
800052c8:	30 08       	mov	r8,0
800052ca:	c2 48       	rjmp	80005312 <udc_req_std_iface_set_setting+0x5a>
	}
	if (!udc_num_configuration) {
800052cc:	49 58       	lddpc	r8,80005320 <udc_req_std_iface_set_setting+0x68>
800052ce:	11 88       	ld.ub	r8,r8[0x0]
800052d0:	58 08       	cp.w	r8,0
800052d2:	c0 31       	brne	800052d8 <udc_req_std_iface_set_setting+0x20>
		return false; // The device is not is configured state yet
800052d4:	30 08       	mov	r8,0
800052d6:	c1 e8       	rjmp	80005312 <udc_req_std_iface_set_setting+0x5a>
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
800052d8:	49 18       	lddpc	r8,8000531c <udc_req_std_iface_set_setting+0x64>
800052da:	90 28       	ld.sh	r8,r8[0x4]
800052dc:	ef 68 ff fe 	st.b	r7[-2],r8
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
800052e0:	48 f8       	lddpc	r8,8000531c <udc_req_std_iface_set_setting+0x64>
800052e2:	90 18       	ld.sh	r8,r8[0x2]
800052e4:	ef 68 ff ff 	st.b	r7[-1],r8

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
800052e8:	ef 38 ff fe 	ld.ub	r8,r7[-2]
800052ec:	10 9c       	mov	r12,r8
800052ee:	f0 1f 00 0e 	mcall	80005324 <udc_req_std_iface_set_setting+0x6c>
800052f2:	18 98       	mov	r8,r12
800052f4:	ec 18 00 01 	eorl	r8,0x1
800052f8:	5c 58       	castu.b	r8
800052fa:	c0 30       	breq	80005300 <udc_req_std_iface_set_setting+0x48>
		return false;
800052fc:	30 08       	mov	r8,0
800052fe:	c0 a8       	rjmp	80005312 <udc_req_std_iface_set_setting+0x5a>
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
80005300:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80005304:	ef 38 ff fe 	ld.ub	r8,r7[-2]
80005308:	12 9b       	mov	r11,r9
8000530a:	10 9c       	mov	r12,r8
8000530c:	f0 1f 00 07 	mcall	80005328 <udc_req_std_iface_set_setting+0x70>
80005310:	18 98       	mov	r8,r12
}
80005312:	10 9c       	mov	r12,r8
80005314:	2f fd       	sub	sp,-4
80005316:	e3 cd 80 80 	ldm	sp++,r7,pc
8000531a:	00 00       	add	r0,r0
8000531c:	00 00       	add	r0,r0
8000531e:	03 48       	ld.w	r8,--r1
80005320:	00 00       	add	r0,r0
80005322:	02 48       	or	r8,r1
80005324:	80 00       	ld.sh	r0,r0[0x0]
80005326:	4b 04       	lddpc	r4,800053e4 <udc_reqstd+0xb8>
80005328:	80 00       	ld.sh	r0,r0[0x0]
8000532a:	4b c0       	lddpc	r0,80005418 <udc_reqstd+0xec>

8000532c <udc_reqstd>:
 * \brief Main routine to manage the standard USB SETUP request
 *
 * \return true if the request is supported
 */
static bool udc_reqstd(void)
{
8000532c:	eb cd 40 80 	pushm	r7,lr
80005330:	1a 97       	mov	r7,sp
	if (Udd_setup_is_in()) {
80005332:	4c 78       	lddpc	r8,8000544c <udc_reqstd+0x120>
80005334:	11 88       	ld.ub	r8,r8[0x0]
80005336:	10 99       	mov	r9,r8
80005338:	30 08       	mov	r8,0
8000533a:	f0 09 18 00 	cp.b	r9,r8
8000533e:	c3 c4       	brge	800053b6 <udc_reqstd+0x8a>
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
80005340:	4c 38       	lddpc	r8,8000544c <udc_reqstd+0x120>
80005342:	90 38       	ld.sh	r8,r8[0x6]
80005344:	58 08       	cp.w	r8,0
80005346:	c0 31       	brne	8000534c <udc_reqstd+0x20>
			return false; // Error for USB host
80005348:	30 08       	mov	r8,0
8000534a:	c7 d8       	rjmp	80005444 <udc_reqstd+0x118>
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
8000534c:	4c 08       	lddpc	r8,8000544c <udc_reqstd+0x120>
8000534e:	11 88       	ld.ub	r8,r8[0x0]
80005350:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80005354:	c1 51       	brne	8000537e <udc_reqstd+0x52>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
80005356:	4b e8       	lddpc	r8,8000544c <udc_reqstd+0x120>
80005358:	11 98       	ld.ub	r8,r8[0x1]
8000535a:	58 68       	cp.w	r8,6
8000535c:	c0 90       	breq	8000536e <udc_reqstd+0x42>
8000535e:	58 88       	cp.w	r8,8
80005360:	c0 b0       	breq	80005376 <udc_reqstd+0x4a>
80005362:	58 08       	cp.w	r8,0
80005364:	c0 d1       	brne	8000537e <udc_reqstd+0x52>
			case USB_REQ_GET_STATUS:
				return udc_req_std_dev_get_status();
80005366:	f0 1f 00 3b 	mcall	80005450 <udc_reqstd+0x124>
8000536a:	18 98       	mov	r8,r12
8000536c:	c6 c8       	rjmp	80005444 <udc_reqstd+0x118>
			case USB_REQ_GET_DESCRIPTOR:
				return udc_req_std_dev_get_descriptor();
8000536e:	f0 1f 00 3a 	mcall	80005454 <udc_reqstd+0x128>
80005372:	18 98       	mov	r8,r12
80005374:	c6 88       	rjmp	80005444 <udc_reqstd+0x118>
			case USB_REQ_GET_CONFIGURATION:
				return udc_req_std_dev_get_configuration();
80005376:	f0 1f 00 39 	mcall	80005458 <udc_reqstd+0x12c>
8000537a:	18 98       	mov	r8,r12
8000537c:	c6 48       	rjmp	80005444 <udc_reqstd+0x118>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
8000537e:	4b 48       	lddpc	r8,8000544c <udc_reqstd+0x120>
80005380:	11 88       	ld.ub	r8,r8[0x0]
80005382:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80005386:	58 18       	cp.w	r8,1
80005388:	c0 91       	brne	8000539a <udc_reqstd+0x6e>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
8000538a:	4b 18       	lddpc	r8,8000544c <udc_reqstd+0x120>
8000538c:	11 98       	ld.ub	r8,r8[0x1]
8000538e:	58 a8       	cp.w	r8,10
80005390:	c0 51       	brne	8000539a <udc_reqstd+0x6e>
			case USB_REQ_GET_INTERFACE:
				return udc_req_std_iface_get_setting();
80005392:	f0 1f 00 33 	mcall	8000545c <udc_reqstd+0x130>
80005396:	18 98       	mov	r8,r12
80005398:	c5 68       	rjmp	80005444 <udc_reqstd+0x118>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
8000539a:	4a d8       	lddpc	r8,8000544c <udc_reqstd+0x120>
8000539c:	11 88       	ld.ub	r8,r8[0x0]
8000539e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800053a2:	58 28       	cp.w	r8,2
800053a4:	c4 f1       	brne	80005442 <udc_reqstd+0x116>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
800053a6:	4a a8       	lddpc	r8,8000544c <udc_reqstd+0x120>
800053a8:	11 98       	ld.ub	r8,r8[0x1]
800053aa:	58 08       	cp.w	r8,0
800053ac:	c4 b1       	brne	80005442 <udc_reqstd+0x116>
			case USB_REQ_GET_STATUS:
				return udc_req_std_ep_get_status();
800053ae:	f0 1f 00 2d 	mcall	80005460 <udc_reqstd+0x134>
800053b2:	18 98       	mov	r8,r12
800053b4:	c4 88       	rjmp	80005444 <udc_reqstd+0x118>
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
800053b6:	4a 68       	lddpc	r8,8000544c <udc_reqstd+0x120>
800053b8:	11 88       	ld.ub	r8,r8[0x0]
800053ba:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800053be:	c1 f1       	brne	800053fc <udc_reqstd+0xd0>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
800053c0:	4a 38       	lddpc	r8,8000544c <udc_reqstd+0x120>
800053c2:	11 98       	ld.ub	r8,r8[0x1]
800053c4:	58 38       	cp.w	r8,3
800053c6:	c1 30       	breq	800053ec <udc_reqstd+0xc0>
800053c8:	e0 89 00 05 	brgt	800053d2 <udc_reqstd+0xa6>
800053cc:	58 18       	cp.w	r8,1
800053ce:	c0 b0       	breq	800053e4 <udc_reqstd+0xb8>
800053d0:	c1 68       	rjmp	800053fc <udc_reqstd+0xd0>
800053d2:	58 58       	cp.w	r8,5
800053d4:	c0 40       	breq	800053dc <udc_reqstd+0xb0>
800053d6:	58 98       	cp.w	r8,9
800053d8:	c0 e0       	breq	800053f4 <udc_reqstd+0xc8>
800053da:	c1 18       	rjmp	800053fc <udc_reqstd+0xd0>
			case USB_REQ_SET_ADDRESS:
				return udc_req_std_dev_set_address();
800053dc:	f0 1f 00 22 	mcall	80005464 <udc_reqstd+0x138>
800053e0:	18 98       	mov	r8,r12
800053e2:	c3 18       	rjmp	80005444 <udc_reqstd+0x118>
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_dev_clear_feature();
800053e4:	f0 1f 00 21 	mcall	80005468 <udc_reqstd+0x13c>
800053e8:	18 98       	mov	r8,r12
800053ea:	c2 d8       	rjmp	80005444 <udc_reqstd+0x118>
			case USB_REQ_SET_FEATURE:
				return udc_req_std_dev_set_feature();
800053ec:	f0 1f 00 20 	mcall	8000546c <udc_reqstd+0x140>
800053f0:	18 98       	mov	r8,r12
800053f2:	c2 98       	rjmp	80005444 <udc_reqstd+0x118>
			case USB_REQ_SET_CONFIGURATION:
				return udc_req_std_dev_set_configuration();
800053f4:	f0 1f 00 1f 	mcall	80005470 <udc_reqstd+0x144>
800053f8:	18 98       	mov	r8,r12
800053fa:	c2 58       	rjmp	80005444 <udc_reqstd+0x118>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
800053fc:	49 48       	lddpc	r8,8000544c <udc_reqstd+0x120>
800053fe:	11 88       	ld.ub	r8,r8[0x0]
80005400:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80005404:	58 18       	cp.w	r8,1
80005406:	c0 91       	brne	80005418 <udc_reqstd+0xec>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
80005408:	49 18       	lddpc	r8,8000544c <udc_reqstd+0x120>
8000540a:	11 98       	ld.ub	r8,r8[0x1]
8000540c:	58 b8       	cp.w	r8,11
8000540e:	c0 51       	brne	80005418 <udc_reqstd+0xec>
			case USB_REQ_SET_INTERFACE:
				return udc_req_std_iface_set_setting();
80005410:	f0 1f 00 19 	mcall	80005474 <udc_reqstd+0x148>
80005414:	18 98       	mov	r8,r12
80005416:	c1 78       	rjmp	80005444 <udc_reqstd+0x118>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
80005418:	48 d8       	lddpc	r8,8000544c <udc_reqstd+0x120>
8000541a:	11 88       	ld.ub	r8,r8[0x0]
8000541c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80005420:	58 28       	cp.w	r8,2
80005422:	c1 01       	brne	80005442 <udc_reqstd+0x116>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
80005424:	48 a8       	lddpc	r8,8000544c <udc_reqstd+0x120>
80005426:	11 98       	ld.ub	r8,r8[0x1]
80005428:	58 18       	cp.w	r8,1
8000542a:	c0 40       	breq	80005432 <udc_reqstd+0x106>
8000542c:	58 38       	cp.w	r8,3
8000542e:	c0 60       	breq	8000543a <udc_reqstd+0x10e>
80005430:	c0 98       	rjmp	80005442 <udc_reqstd+0x116>
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_ep_clear_feature();
80005432:	f0 1f 00 12 	mcall	80005478 <udc_reqstd+0x14c>
80005436:	18 98       	mov	r8,r12
80005438:	c0 68       	rjmp	80005444 <udc_reqstd+0x118>
			case USB_REQ_SET_FEATURE:
				return udc_req_std_ep_set_feature();
8000543a:	f0 1f 00 11 	mcall	8000547c <udc_reqstd+0x150>
8000543e:	18 98       	mov	r8,r12
80005440:	c0 28       	rjmp	80005444 <udc_reqstd+0x118>
				break;
			}
		}
#endif
	}
	return false;
80005442:	30 08       	mov	r8,0
}
80005444:	10 9c       	mov	r12,r8
80005446:	e3 cd 80 80 	ldm	sp++,r7,pc
8000544a:	00 00       	add	r0,r0
8000544c:	00 00       	add	r0,r0
8000544e:	03 48       	ld.w	r8,--r1
80005450:	80 00       	ld.sh	r0,r0[0x0]
80005452:	4d 70       	lddpc	r0,800055ac <udc_req_ep+0x80>
80005454:	80 00       	ld.sh	r0,r0[0x0]
80005456:	4f ec       	lddpc	r12,8000564c <udc_process_setup+0x78>
80005458:	80 00       	ld.sh	r0,r0[0x0]
8000545a:	51 08       	stdsp	sp[0x40],r8
8000545c:	80 00       	ld.sh	r0,r0[0x0]
8000545e:	52 0c       	stdsp	sp[0x80],r12
80005460:	80 00       	ld.sh	r0,r0[0x0]
80005462:	4d a4       	lddpc	r4,800055c8 <udc_req_ep+0x9c>
80005464:	80 00       	ld.sh	r0,r0[0x0]
80005466:	4f 14       	lddpc	r4,80005628 <udc_process_setup+0x54>
80005468:	80 00       	ld.sh	r0,r0[0x0]
8000546a:	4d fc       	lddpc	r12,800055e4 <udc_process_setup+0x10>
8000546c:	80 00       	ld.sh	r0,r0[0x0]
8000546e:	4e 78       	lddpc	r8,80005608 <udc_process_setup+0x34>
80005470:	80 00       	ld.sh	r0,r0[0x0]
80005472:	51 3c       	stdsp	sp[0x4c],r12
80005474:	80 00       	ld.sh	r0,r0[0x0]
80005476:	52 b8       	stdsp	sp[0xac],r8
80005478:	80 00       	ld.sh	r0,r0[0x0]
8000547a:	4e 3c       	lddpc	r12,80005604 <udc_process_setup+0x30>
8000547c:	80 00       	ld.sh	r0,r0[0x0]
8000547e:	4e a4       	lddpc	r4,80005624 <udc_process_setup+0x50>

80005480 <udc_req_iface>:
 * \brief Send the SETUP interface request to UDI
 *
 * \return true if the request is supported
 */
static bool udc_req_iface(void)
{
80005480:	eb cd 40 80 	pushm	r7,lr
80005484:	1a 97       	mov	r7,sp
80005486:	20 2d       	sub	sp,8
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
80005488:	4a 58       	lddpc	r8,8000551c <udc_req_iface+0x9c>
8000548a:	11 88       	ld.ub	r8,r8[0x0]
8000548c:	58 08       	cp.w	r8,0
8000548e:	c0 31       	brne	80005494 <udc_req_iface+0x14>
		return false; // The device is not is configured state yet
80005490:	30 08       	mov	r8,0
80005492:	c4 08       	rjmp	80005512 <udc_req_iface+0x92>
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
80005494:	4a 38       	lddpc	r8,80005520 <udc_req_iface+0xa0>
80005496:	90 28       	ld.sh	r8,r8[0x4]
80005498:	ef 68 ff fb 	st.b	r7[-5],r8
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
8000549c:	4a 28       	lddpc	r8,80005524 <udc_req_iface+0xa4>
8000549e:	70 08       	ld.w	r8,r8[0x0]
800054a0:	70 08       	ld.w	r8,r8[0x0]
800054a2:	11 c8       	ld.ub	r8,r8[0x4]
800054a4:	ef 39 ff fb 	ld.ub	r9,r7[-5]
800054a8:	f0 09 18 00 	cp.b	r9,r8
800054ac:	c0 33       	brcs	800054b2 <udc_req_iface+0x32>
		return false;
800054ae:	30 08       	mov	r8,0
800054b0:	c3 18       	rjmp	80005512 <udc_req_iface+0x92>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
800054b2:	ef 38 ff fb 	ld.ub	r8,r7[-5]
800054b6:	30 0b       	mov	r11,0
800054b8:	10 9c       	mov	r12,r8
800054ba:	f0 1f 00 1c 	mcall	80005528 <udc_req_iface+0xa8>
800054be:	18 98       	mov	r8,r12
800054c0:	ec 18 00 01 	eorl	r8,0x1
800054c4:	5c 58       	castu.b	r8
800054c6:	c0 30       	breq	800054cc <udc_req_iface+0x4c>
		return false;
800054c8:	30 08       	mov	r8,0
800054ca:	c2 48       	rjmp	80005512 <udc_req_iface+0x92>
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
800054cc:	49 68       	lddpc	r8,80005524 <udc_req_iface+0xa4>
800054ce:	70 08       	ld.w	r8,r8[0x0]
800054d0:	70 19       	ld.w	r9,r8[0x4]
800054d2:	ef 38 ff fb 	ld.ub	r8,r7[-5]
800054d6:	a3 68       	lsl	r8,0x2
800054d8:	f2 08 00 08 	add	r8,r9,r8
800054dc:	70 08       	ld.w	r8,r8[0x0]
800054de:	ef 48 ff fc 	st.w	r7[-4],r8
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
800054e2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800054e6:	70 38       	ld.w	r8,r8[0xc]
800054e8:	5d 18       	icall	r8
800054ea:	18 98       	mov	r8,r12
800054ec:	10 99       	mov	r9,r8
800054ee:	ef 38 ff fb 	ld.ub	r8,r7[-5]
800054f2:	12 9b       	mov	r11,r9
800054f4:	10 9c       	mov	r12,r8
800054f6:	f0 1f 00 0d 	mcall	80005528 <udc_req_iface+0xa8>
800054fa:	18 98       	mov	r8,r12
800054fc:	ec 18 00 01 	eorl	r8,0x1
80005500:	5c 58       	castu.b	r8
80005502:	c0 30       	breq	80005508 <udc_req_iface+0x88>
		return false;
80005504:	30 08       	mov	r8,0
80005506:	c0 68       	rjmp	80005512 <udc_req_iface+0x92>
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
80005508:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000550c:	70 28       	ld.w	r8,r8[0x8]
8000550e:	5d 18       	icall	r8
80005510:	18 98       	mov	r8,r12
}
80005512:	10 9c       	mov	r12,r8
80005514:	2f ed       	sub	sp,-8
80005516:	e3 cd 80 80 	ldm	sp++,r7,pc
8000551a:	00 00       	add	r0,r0
8000551c:	00 00       	add	r0,r0
8000551e:	02 48       	or	r8,r1
80005520:	00 00       	add	r0,r0
80005522:	03 48       	ld.w	r8,--r1
80005524:	00 00       	add	r0,r0
80005526:	02 4c       	or	r12,r1
80005528:	80 00       	ld.sh	r0,r0[0x0]
8000552a:	4a 4c       	lddpc	r12,800055b8 <udc_req_ep+0x8c>

8000552c <udc_req_ep>:
 * \brief Send the SETUP interface request to UDI
 *
 * \return true if the request is supported
 */
static bool udc_req_ep(void)
{
8000552c:	eb cd 40 80 	pushm	r7,lr
80005530:	1a 97       	mov	r7,sp
80005532:	20 2d       	sub	sp,8
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
80005534:	4a 48       	lddpc	r8,800055c4 <udc_req_ep+0x98>
80005536:	11 88       	ld.ub	r8,r8[0x0]
80005538:	58 08       	cp.w	r8,0
8000553a:	c0 31       	brne	80005540 <udc_req_ep+0x14>
		return false; // The device is not is configured state yet
8000553c:	30 08       	mov	r8,0
8000553e:	c3 f8       	rjmp	800055bc <udc_req_ep+0x90>
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
80005540:	4a 28       	lddpc	r8,800055c8 <udc_req_ep+0x9c>
80005542:	90 28       	ld.sh	r8,r8[0x4]
80005544:	ef 68 ff fb 	st.b	r7[-5],r8
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
80005548:	30 08       	mov	r8,0
8000554a:	ef 68 ff fb 	st.b	r7[-5],r8
8000554e:	c2 d8       	rjmp	800055a8 <udc_req_ep+0x7c>
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
80005550:	49 f8       	lddpc	r8,800055cc <udc_req_ep+0xa0>
80005552:	70 08       	ld.w	r8,r8[0x0]
80005554:	70 19       	ld.w	r9,r8[0x4]
80005556:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000555a:	a3 68       	lsl	r8,0x2
8000555c:	f2 08 00 08 	add	r8,r9,r8
80005560:	70 08       	ld.w	r8,r8[0x0]
80005562:	ef 48 ff fc 	st.w	r7[-4],r8
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
80005566:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000556a:	70 38       	ld.w	r8,r8[0xc]
8000556c:	5d 18       	icall	r8
8000556e:	18 98       	mov	r8,r12
80005570:	10 99       	mov	r9,r8
80005572:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80005576:	12 9b       	mov	r11,r9
80005578:	10 9c       	mov	r12,r8
8000557a:	f0 1f 00 16 	mcall	800055d0 <udc_req_ep+0xa4>
8000557e:	18 98       	mov	r8,r12
80005580:	ec 18 00 01 	eorl	r8,0x1
80005584:	5c 58       	castu.b	r8
80005586:	c0 30       	breq	8000558c <udc_req_ep+0x60>
			return false;
80005588:	30 08       	mov	r8,0
8000558a:	c1 98       	rjmp	800055bc <udc_req_ep+0x90>
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
8000558c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005590:	70 28       	ld.w	r8,r8[0x8]
80005592:	5d 18       	icall	r8
80005594:	18 98       	mov	r8,r12
80005596:	58 08       	cp.w	r8,0
80005598:	c0 30       	breq	8000559e <udc_req_ep+0x72>
			return true;
8000559a:	30 18       	mov	r8,1
8000559c:	c1 08       	rjmp	800055bc <udc_req_ep+0x90>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
8000559e:	ef 38 ff fb 	ld.ub	r8,r7[-5]
800055a2:	2f f8       	sub	r8,-1
800055a4:	ef 68 ff fb 	st.b	r7[-5],r8
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
800055a8:	48 98       	lddpc	r8,800055cc <udc_req_ep+0xa0>
800055aa:	70 08       	ld.w	r8,r8[0x0]
800055ac:	70 08       	ld.w	r8,r8[0x0]
800055ae:	11 c8       	ld.ub	r8,r8[0x4]
800055b0:	ef 39 ff fb 	ld.ub	r9,r7[-5]
800055b4:	f0 09 18 00 	cp.b	r9,r8
800055b8:	cc c3       	brcs	80005550 <udc_req_ep+0x24>
		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
		}
	}
	return false;
800055ba:	30 08       	mov	r8,0
}
800055bc:	10 9c       	mov	r12,r8
800055be:	2f ed       	sub	sp,-8
800055c0:	e3 cd 80 80 	ldm	sp++,r7,pc
800055c4:	00 00       	add	r0,r0
800055c6:	02 48       	or	r8,r1
800055c8:	00 00       	add	r0,r0
800055ca:	03 48       	ld.w	r8,--r1
800055cc:	00 00       	add	r0,r0
800055ce:	02 4c       	or	r12,r1
800055d0:	80 00       	ld.sh	r0,r0[0x0]
800055d2:	4a 4c       	lddpc	r12,80005660 <udc_process_setup+0x8c>

800055d4 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
800055d4:	eb cd 40 80 	pushm	r7,lr
800055d8:	1a 97       	mov	r7,sp
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
800055da:	4a 19       	lddpc	r9,8000565c <udc_process_setup+0x88>
800055dc:	30 08       	mov	r8,0
800055de:	b2 68       	st.h	r9[0xc],r8
	udd_g_ctrlreq.callback = NULL;
800055e0:	49 f8       	lddpc	r8,8000565c <udc_process_setup+0x88>
800055e2:	30 09       	mov	r9,0
800055e4:	91 49       	st.w	r8[0x10],r9
	udd_g_ctrlreq.over_under_run = NULL;
800055e6:	49 e8       	lddpc	r8,8000565c <udc_process_setup+0x88>
800055e8:	30 09       	mov	r9,0
800055ea:	91 59       	st.w	r8[0x14],r9

	if (Udd_setup_is_in()) {
800055ec:	49 c8       	lddpc	r8,8000565c <udc_process_setup+0x88>
800055ee:	11 88       	ld.ub	r8,r8[0x0]
800055f0:	10 99       	mov	r9,r8
800055f2:	30 08       	mov	r8,0
800055f4:	f0 09 18 00 	cp.b	r9,r8
800055f8:	c0 74       	brge	80005606 <udc_process_setup+0x32>
		if (udd_g_ctrlreq.req.wLength == 0) {
800055fa:	49 98       	lddpc	r8,8000565c <udc_process_setup+0x88>
800055fc:	90 38       	ld.sh	r8,r8[0x6]
800055fe:	58 08       	cp.w	r8,0
80005600:	c0 31       	brne	80005606 <udc_process_setup+0x32>
			return false; // Error from USB host
80005602:	30 08       	mov	r8,0
80005604:	c2 88       	rjmp	80005654 <udc_process_setup+0x80>
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
80005606:	49 68       	lddpc	r8,8000565c <udc_process_setup+0x88>
80005608:	11 88       	ld.ub	r8,r8[0x0]
8000560a:	e2 18 00 60 	andl	r8,0x60,COH
8000560e:	c0 81       	brne	8000561e <udc_process_setup+0x4a>
		if (udc_reqstd()) {
80005610:	f0 1f 00 14 	mcall	80005660 <udc_process_setup+0x8c>
80005614:	18 98       	mov	r8,r12
80005616:	58 08       	cp.w	r8,0
80005618:	c0 30       	breq	8000561e <udc_process_setup+0x4a>
			return true;
8000561a:	30 18       	mov	r8,1
8000561c:	c1 c8       	rjmp	80005654 <udc_process_setup+0x80>
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
8000561e:	49 08       	lddpc	r8,8000565c <udc_process_setup+0x88>
80005620:	11 88       	ld.ub	r8,r8[0x0]
80005622:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80005626:	58 18       	cp.w	r8,1
80005628:	c0 81       	brne	80005638 <udc_process_setup+0x64>
		if (udc_req_iface()) {
8000562a:	f0 1f 00 0f 	mcall	80005664 <udc_process_setup+0x90>
8000562e:	18 98       	mov	r8,r12
80005630:	58 08       	cp.w	r8,0
80005632:	c0 30       	breq	80005638 <udc_process_setup+0x64>
			return true;
80005634:	30 18       	mov	r8,1
80005636:	c0 f8       	rjmp	80005654 <udc_process_setup+0x80>
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
80005638:	48 98       	lddpc	r8,8000565c <udc_process_setup+0x88>
8000563a:	11 88       	ld.ub	r8,r8[0x0]
8000563c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80005640:	58 28       	cp.w	r8,2
80005642:	c0 81       	brne	80005652 <udc_process_setup+0x7e>
		if (udc_req_ep()) {
80005644:	f0 1f 00 09 	mcall	80005668 <udc_process_setup+0x94>
80005648:	18 98       	mov	r8,r12
8000564a:	58 08       	cp.w	r8,0
8000564c:	c0 30       	breq	80005652 <udc_process_setup+0x7e>
			return true;
8000564e:	30 18       	mov	r8,1
80005650:	c0 28       	rjmp	80005654 <udc_process_setup+0x80>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
80005652:	30 08       	mov	r8,0
#endif
}
80005654:	10 9c       	mov	r12,r8
80005656:	e3 cd 80 80 	ldm	sp++,r7,pc
8000565a:	00 00       	add	r0,r0
8000565c:	00 00       	add	r0,r0
8000565e:	03 48       	ld.w	r8,--r1
80005660:	80 00       	ld.sh	r0,r0[0x0]
80005662:	53 2c       	stdsp	sp[0xc8],r12
80005664:	80 00       	ld.sh	r0,r0[0x0]
80005666:	54 80       	stdsp	sp[0x120],r0
80005668:	80 00       	ld.sh	r0,r0[0x0]
8000566a:	55 2c       	stdsp	sp[0x148],r12

8000566c <cpu_irq_save>:
#endif

typedef uint32_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
8000566c:	eb cd 40 80 	pushm	r7,lr
80005670:	1a 97       	mov	r7,sp
80005672:	20 1d       	sub	sp,4
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80005674:	e1 b8 00 00 	mfsr	r8,0x0
80005678:	ef 48 ff fc 	st.w	r7[-4],r8
	cpu_irq_disable();
8000567c:	d3 03       	ssrf	0x10

	return flags;
8000567e:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
80005682:	10 9c       	mov	r12,r8
80005684:	2f fd       	sub	sp,-4
80005686:	e3 cd 80 80 	ldm	sp++,r7,pc

8000568a <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
8000568a:	eb cd 40 80 	pushm	r7,lr
8000568e:	1a 97       	mov	r7,sp
80005690:	20 1d       	sub	sp,4
80005692:	ef 4c ff fc 	st.w	r7[-4],r12
	return !(flags & AVR32_SR_GM_MASK);
80005696:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000569a:	e6 18 00 01 	andh	r8,0x1,COH
8000569e:	5f 08       	sreq	r8
800056a0:	5c 58       	castu.b	r8
}
800056a2:	10 9c       	mov	r12,r8
800056a4:	2f fd       	sub	sp,-4
800056a6:	e3 cd 80 80 	ldm	sp++,r7,pc
800056aa:	d7 03       	nop

800056ac <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
800056ac:	eb cd 40 80 	pushm	r7,lr
800056b0:	1a 97       	mov	r7,sp
800056b2:	20 1d       	sub	sp,4
800056b4:	ef 4c ff fc 	st.w	r7[-4],r12
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
800056b8:	ee fc ff fc 	ld.w	r12,r7[-4]
800056bc:	f0 1f 00 05 	mcall	800056d0 <cpu_irq_restore+0x24>
800056c0:	18 98       	mov	r8,r12
800056c2:	58 08       	cp.w	r8,0
800056c4:	c0 20       	breq	800056c8 <cpu_irq_restore+0x1c>
      cpu_irq_enable();
800056c6:	d5 03       	csrf	0x10
   }

	barrier();
}
800056c8:	2f fd       	sub	sp,-4
800056ca:	e3 cd 80 80 	ldm	sp++,r7,pc
800056ce:	00 00       	add	r0,r0
800056d0:	80 00       	ld.sh	r0,r0[0x0]
800056d2:	56 8a       	stdsp	sp[0x1a0],r10

800056d4 <osc_enable>:
#include <stdbool.h>
#include <stdint.h>
#include <avr32/io.h>

static inline void osc_enable(uint8_t id)
{
800056d4:	eb cd 40 80 	pushm	r7,lr
800056d8:	1a 97       	mov	r7,sp
800056da:	20 3d       	sub	sp,12
800056dc:	18 98       	mov	r8,r12
800056de:	ef 68 ff f4 	st.b	r7[-12],r8
	irqflags_t flags;
	uint32_t   oscctrl;

	flags = cpu_irq_save();
800056e2:	f0 1f 00 1f 	mcall	8000575c <osc_enable+0x88>
800056e6:	18 98       	mov	r8,r12
800056e8:	ef 48 ff f8 	st.w	r7[-8],r8

	switch (id) {
800056ec:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800056f0:	58 08       	cp.w	r8,0
800056f2:	c0 40       	breq	800056fa <osc_enable+0x26>
800056f4:	58 28       	cp.w	r8,2
800056f6:	c1 90       	breq	80005728 <osc_enable+0x54>
800056f8:	c2 b8       	rjmp	8000574e <osc_enable+0x7a>
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		oscctrl = OSC0_STARTUP_VALUE <<
800056fa:	e0 68 03 00 	mov	r8,768
800056fe:	ef 48 ff fc 	st.w	r7[-4],r8
				AVR32_PM_OSCCTRL0_STARTUP_OFFSET;
		oscctrl |= OSC0_MODE_VALUE << AVR32_PM_OSCCTRL0_MODE_OFFSET;
80005702:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005706:	e8 18 00 07 	orl	r8,0x7
8000570a:	ef 48 ff fc 	st.w	r7[-4],r8
		AVR32_PM.oscctrl0 = oscctrl;
8000570e:	fe 78 0c 00 	mov	r8,-62464
80005712:	ee f9 ff fc 	ld.w	r9,r7[-4]
80005716:	91 a9       	st.w	r8[0x28],r9
		AVR32_PM.mcctrl |= 1U << AVR32_PM_MCCTRL_OSC0EN;
80005718:	fe 78 0c 00 	mov	r8,-62464
8000571c:	fe 79 0c 00 	mov	r9,-62464
80005720:	72 09       	ld.w	r9,r9[0x0]
80005722:	a3 a9       	sbr	r9,0x2
80005724:	91 09       	st.w	r8[0x0],r9
		break;
80005726:	c1 48       	rjmp	8000574e <osc_enable+0x7a>
		break;
#endif

#ifdef BOARD_OSC32_HZ
	case OSC_ID_OSC32:
		oscctrl = OSC32_STARTUP_VALUE
80005728:	e2 68 00 00 	mov	r8,131072
8000572c:	ef 48 ff fc 	st.w	r7[-4],r8
				<< AVR32_PM_OSCCTRL32_STARTUP_OFFSET;
		oscctrl |= OSC32_MODE_VALUE << AVR32_PM_OSCCTRL32_MODE_OFFSET;
80005730:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005734:	a9 a8       	sbr	r8,0x8
80005736:	ef 48 ff fc 	st.w	r7[-4],r8
		oscctrl |= 1 << AVR32_PM_OSCCTRL32_OSC32EN_OFFSET;
8000573a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000573e:	a1 a8       	sbr	r8,0x0
80005740:	ef 48 ff fc 	st.w	r7[-4],r8
		AVR32_PM.oscctrl32 = oscctrl;
80005744:	fe 78 0c 00 	mov	r8,-62464
80005748:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000574c:	91 c9       	st.w	r8[0x30],r9
	default:
		/* unhandled_case(id); */
		break;
	}

	cpu_irq_restore(flags);
8000574e:	ee fc ff f8 	ld.w	r12,r7[-8]
80005752:	f0 1f 00 04 	mcall	80005760 <osc_enable+0x8c>
}
80005756:	2f dd       	sub	sp,-12
80005758:	e3 cd 80 80 	ldm	sp++,r7,pc
8000575c:	80 00       	ld.sh	r0,r0[0x0]
8000575e:	56 6c       	stdsp	sp[0x198],r12
80005760:	80 00       	ld.sh	r0,r0[0x0]
80005762:	56 ac       	stdsp	sp[0x1a8],r12

80005764 <osc_is_ready>:
	}
	cpu_irq_restore(flags);
}

static inline bool osc_is_ready(uint8_t id)
{
80005764:	eb cd 40 80 	pushm	r7,lr
80005768:	1a 97       	mov	r7,sp
8000576a:	20 1d       	sub	sp,4
8000576c:	18 98       	mov	r8,r12
8000576e:	ef 68 ff fc 	st.b	r7[-4],r8
	switch (id) {
80005772:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80005776:	58 08       	cp.w	r8,0
80005778:	c0 40       	breq	80005780 <osc_is_ready+0x1c>
8000577a:	58 28       	cp.w	r8,2
8000577c:	c0 a0       	breq	80005790 <osc_is_ready+0x2c>
8000577e:	c1 18       	rjmp	800057a0 <osc_is_ready+0x3c>
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		return !!(AVR32_PM.poscsr & (1U << AVR32_PM_POSCSR_OSC0RDY));
80005780:	fe 78 0c 00 	mov	r8,-62464
80005784:	71 58       	ld.w	r8,r8[0x54]
80005786:	e2 18 00 80 	andl	r8,0x80,COH
8000578a:	5f 18       	srne	r8
8000578c:	5c 58       	castu.b	r8
8000578e:	c0 a8       	rjmp	800057a2 <osc_is_ready+0x3e>
		return !!(AVR32_PM.poscsr & (1U << AVR32_PM_POSCSR_OSC1RDY));
#endif

#ifdef BOARD_OSC32_HZ
	case OSC_ID_OSC32:
		return !!(AVR32_PM.poscsr & (1U << AVR32_PM_POSCSR_OSC32RDY));
80005790:	fe 78 0c 00 	mov	r8,-62464
80005794:	71 58       	ld.w	r8,r8[0x54]
80005796:	e2 18 02 00 	andl	r8,0x200,COH
8000579a:	5f 18       	srne	r8
8000579c:	5c 58       	castu.b	r8
8000579e:	c0 28       	rjmp	800057a2 <osc_is_ready+0x3e>
#endif

	default:
		/* unhandled_case(id); */
		return false;
800057a0:	30 08       	mov	r8,0
	}
}
800057a2:	10 9c       	mov	r12,r8
800057a4:	2f fd       	sub	sp,-4
800057a6:	e3 cd 80 80 	ldm	sp++,r7,pc

800057aa <osc_get_rate>:

static inline uint32_t osc_get_rate(uint8_t id)
{
800057aa:	eb cd 40 80 	pushm	r7,lr
800057ae:	1a 97       	mov	r7,sp
800057b0:	20 1d       	sub	sp,4
800057b2:	18 98       	mov	r8,r12
800057b4:	ef 68 ff fc 	st.b	r7[-4],r8
	switch (id) {
800057b8:	ef 38 ff fc 	ld.ub	r8,r7[-4]
800057bc:	58 08       	cp.w	r8,0
800057be:	c0 40       	breq	800057c6 <osc_get_rate+0x1c>
800057c0:	58 28       	cp.w	r8,2
800057c2:	c0 70       	breq	800057d0 <osc_get_rate+0x26>
800057c4:	c0 98       	rjmp	800057d6 <osc_get_rate+0x2c>
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		return BOARD_OSC0_HZ;
800057c6:	e0 68 1b 00 	mov	r8,6912
800057ca:	ea 18 00 b7 	orh	r8,0xb7
800057ce:	c0 58       	rjmp	800057d8 <osc_get_rate+0x2e>
		return BOARD_OSC1_HZ;
#endif

#ifdef BOARD_OSC32_HZ
	case OSC_ID_OSC32:
		return BOARD_OSC32_HZ;
800057d0:	e0 68 80 00 	mov	r8,32768
800057d4:	c0 28       	rjmp	800057d8 <osc_get_rate+0x2e>
#endif
	default:
		/* unhandled_case(id); */
		return 0;
800057d6:	30 08       	mov	r8,0
	}
}
800057d8:	10 9c       	mov	r12,r8
800057da:	2f fd       	sub	sp,-4
800057dc:	e3 cd 80 80 	ldm	sp++,r7,pc

800057e0 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
800057e0:	eb cd 40 80 	pushm	r7,lr
800057e4:	1a 97       	mov	r7,sp
800057e6:	20 1d       	sub	sp,4
800057e8:	18 98       	mov	r8,r12
800057ea:	ef 68 ff fc 	st.b	r7[-4],r8
	while (!osc_is_ready(id)) {
800057ee:	ef 38 ff fc 	ld.ub	r8,r7[-4]
800057f2:	10 9c       	mov	r12,r8
800057f4:	f0 1f 00 05 	mcall	80005808 <osc_wait_ready+0x28>
800057f8:	18 98       	mov	r8,r12
800057fa:	ec 18 00 01 	eorl	r8,0x1
800057fe:	5c 58       	castu.b	r8
80005800:	cf 71       	brne	800057ee <osc_wait_ready+0xe>
		/* Do nothing */
	}
}
80005802:	2f fd       	sub	sp,-4
80005804:	e3 cd 80 80 	ldm	sp++,r7,pc
80005808:	80 00       	ld.sh	r0,r0[0x0]
8000580a:	57 64       	stdsp	sp[0x1d8],r4

8000580c <pll_config_set_option>:
			* CONFIG_PLL##pll_id##_MUL)                            \
			/ CONFIG_PLL##pll_id##_DIV)

static inline void pll_config_set_option(struct pll_config *cfg,
		unsigned int option)
{
8000580c:	eb cd 40 80 	pushm	r7,lr
80005810:	1a 97       	mov	r7,sp
80005812:	20 2d       	sub	sp,8
80005814:	ef 4c ff fc 	st.w	r7[-4],r12
80005818:	ef 4b ff f8 	st.w	r7[-8],r11
	Assert(option < PLL_NR_OPTIONS);

	cfg->ctrl |= 1U << (AVR32_PM_PLL0_PLLOPT + option);
8000581c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005820:	70 09       	ld.w	r9,r8[0x0]
80005822:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005826:	2f e8       	sub	r8,-2
80005828:	30 1a       	mov	r10,1
8000582a:	f4 08 09 48 	lsl	r8,r10,r8
8000582e:	10 49       	or	r9,r8
80005830:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005834:	91 09       	st.w	r8[0x0],r9
}
80005836:	2f ed       	sub	sp,-8
80005838:	e3 cd 80 80 	ldm	sp++,r7,pc

8000583c <pll_config_init>:
 * The PLL options #PLL_OPT_VCO_RANGE_LOW and #PLL_OPT_OUTPUT_DIV will
 * be set automatically based on the calculated target frequency.
 */
static inline void pll_config_init(struct pll_config *cfg,
		enum pll_source src, unsigned int div, unsigned int mul)
{
8000583c:	eb cd 40 80 	pushm	r7,lr
80005840:	1a 97       	mov	r7,sp
80005842:	20 5d       	sub	sp,20
80005844:	ef 4c ff f8 	st.w	r7[-8],r12
80005848:	ef 4b ff f4 	st.w	r7[-12],r11
8000584c:	ef 4a ff f0 	st.w	r7[-16],r10
80005850:	ef 49 ff ec 	st.w	r7[-20],r9
	uint32_t vco_hz;

	Assert(src < PLL_NR_SOURCES);

	/* Calculate internal VCO frequency */
	vco_hz = osc_get_rate(src) * mul;
80005854:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005858:	5c 58       	castu.b	r8
8000585a:	10 9c       	mov	r12,r8
8000585c:	f0 1f 00 2e 	mcall	80005914 <pll_config_init+0xd8>
80005860:	18 99       	mov	r9,r12
80005862:	ee f8 ff ec 	ld.w	r8,r7[-20]
80005866:	f2 08 02 48 	mul	r8,r9,r8
8000586a:	ef 48 ff fc 	st.w	r7[-4],r8
	vco_hz /= div;
8000586e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005872:	ee f9 ff f0 	ld.w	r9,r7[-16]
80005876:	f0 09 0d 08 	divu	r8,r8,r9
8000587a:	ef 48 ff fc 	st.w	r7[-4],r8
	Assert(vco_hz >= PLL_MIN_HZ);
	Assert(vco_hz <= PLL_MAX_HZ);

	cfg->ctrl = 0;
8000587e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005882:	30 09       	mov	r9,0
80005884:	91 09       	st.w	r8[0x0],r9

	/* Bring the internal VCO frequency up to the minimum value */
	if ((vco_hz < PLL_MIN_HZ * 2) && (mul <= 8)) {
80005886:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000588a:	e0 69 b3 ff 	mov	r9,46079
8000588e:	ea 19 04 c4 	orh	r9,0x4c4
80005892:	12 38       	cp.w	r8,r9
80005894:	e0 8b 00 16 	brhi	800058c0 <pll_config_init+0x84>
80005898:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000589c:	58 88       	cp.w	r8,8
8000589e:	e0 8b 00 11 	brhi	800058c0 <pll_config_init+0x84>
		mul *= 2;
800058a2:	ee f8 ff ec 	ld.w	r8,r7[-20]
800058a6:	a1 78       	lsl	r8,0x1
800058a8:	ef 48 ff ec 	st.w	r7[-20],r8
		vco_hz *= 2;
800058ac:	ee f8 ff fc 	ld.w	r8,r7[-4]
800058b0:	a1 78       	lsl	r8,0x1
800058b2:	ef 48 ff fc 	st.w	r7[-4],r8
		pll_config_set_option(cfg, PLL_OPT_OUTPUT_DIV);
800058b6:	30 1b       	mov	r11,1
800058b8:	ee fc ff f8 	ld.w	r12,r7[-8]
800058bc:	f0 1f 00 17 	mcall	80005918 <pll_config_init+0xdc>
	}

	/* Set VCO frequency range according to calculated value */
	if (vco_hz < PLL_VCO_LOW_THRESHOLD)
800058c0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800058c4:	e0 69 fe 7f 	mov	r9,65151
800058c8:	ea 19 0a 21 	orh	r9,0xa21
800058cc:	12 38       	cp.w	r8,r9
800058ce:	e0 8b 00 07 	brhi	800058dc <pll_config_init+0xa0>
		pll_config_set_option(cfg, PLL_OPT_VCO_RANGE_LOW);
800058d2:	30 0b       	mov	r11,0
800058d4:	ee fc ff f8 	ld.w	r12,r7[-8]
800058d8:	f0 1f 00 10 	mcall	80005918 <pll_config_init+0xdc>

	Assert((mul > 2) && (mul <= 16));
	Assert((div > 0) && (div <= 15));

	cfg->ctrl |= ((mul - 1) << AVR32_PM_PLL0_PLLMUL)
800058dc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800058e0:	70 09       	ld.w	r9,r8[0x0]
800058e2:	ee f8 ff ec 	ld.w	r8,r7[-20]
800058e6:	20 18       	sub	r8,1
800058e8:	f0 0a 15 10 	lsl	r10,r8,0x10
			| (div << AVR32_PM_PLL0_PLLDIV)
800058ec:	ee f8 ff f0 	ld.w	r8,r7[-16]
800058f0:	a9 68       	lsl	r8,0x8
			| (PLL_MAX_STARTUP_CYCLES << AVR32_PM_PLL0_PLLCOUNT)
800058f2:	10 4a       	or	r10,r8
			| (src << AVR32_PM_PLL0_PLLOSC);
800058f4:	ee f8 ff f4 	ld.w	r8,r7[-12]
800058f8:	a1 78       	lsl	r8,0x1
		pll_config_set_option(cfg, PLL_OPT_VCO_RANGE_LOW);

	Assert((mul > 2) && (mul <= 16));
	Assert((div > 0) && (div <= 15));

	cfg->ctrl |= ((mul - 1) << AVR32_PM_PLL0_PLLMUL)
800058fa:	f5 e8 10 08 	or	r8,r10,r8
800058fe:	f3 e8 10 08 	or	r8,r9,r8
80005902:	10 99       	mov	r9,r8
80005904:	ea 19 3f 00 	orh	r9,0x3f00
80005908:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000590c:	91 09       	st.w	r8[0x0],r9
			| (div << AVR32_PM_PLL0_PLLDIV)
			| (PLL_MAX_STARTUP_CYCLES << AVR32_PM_PLL0_PLLCOUNT)
			| (src << AVR32_PM_PLL0_PLLOSC);
}
8000590e:	2f bd       	sub	sp,-20
80005910:	e3 cd 80 80 	ldm	sp++,r7,pc
80005914:	80 00       	ld.sh	r0,r0[0x0]
80005916:	57 aa       	stdsp	sp[0x1e8],r10
80005918:	80 00       	ld.sh	r0,r0[0x0]
8000591a:	58 0c       	cp.w	r12,0

8000591c <pll_enable>:
	AVR32_PM.pll[pll_id] = cfg->ctrl;
}

static inline void pll_enable(const struct pll_config *cfg,
		unsigned int pll_id)
{
8000591c:	eb cd 40 80 	pushm	r7,lr
80005920:	1a 97       	mov	r7,sp
80005922:	20 2d       	sub	sp,8
80005924:	ef 4c ff fc 	st.w	r7[-4],r12
80005928:	ef 4b ff f8 	st.w	r7[-8],r11
	Assert(pll_id < NR_PLLS);

	AVR32_PM.pll[pll_id] = cfg->ctrl | (1U << AVR32_PM_PLL0_PLLEN);
8000592c:	fe 78 0c 00 	mov	r8,-62464
80005930:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005934:	ee fa ff fc 	ld.w	r10,r7[-4]
80005938:	74 0a       	ld.w	r10,r10[0x0]
8000593a:	a1 aa       	sbr	r10,0x0
8000593c:	2f 89       	sub	r9,-8
8000593e:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
}
80005942:	2f ed       	sub	sp,-8
80005944:	e3 cd 80 80 	ldm	sp++,r7,pc

80005948 <pll_is_locked>:

	AVR32_PM.pll[pll_id] = 0;
}

static inline bool pll_is_locked(unsigned int pll_id)
{
80005948:	eb cd 40 80 	pushm	r7,lr
8000594c:	1a 97       	mov	r7,sp
8000594e:	20 1d       	sub	sp,4
80005950:	ef 4c ff fc 	st.w	r7[-4],r12
	Assert(pll_id < NR_PLLS);

	return !!(AVR32_PM.poscsr & (1U << (AVR32_PM_POSCSR_LOCK0 + pll_id)));
80005954:	fe 78 0c 00 	mov	r8,-62464
80005958:	71 59       	ld.w	r9,r8[0x54]
8000595a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000595e:	30 1a       	mov	r10,1
80005960:	f4 08 09 48 	lsl	r8,r10,r8
80005964:	f3 e8 00 08 	and	r8,r9,r8
80005968:	5f 18       	srne	r8
8000596a:	5c 58       	castu.b	r8
}
8000596c:	10 9c       	mov	r12,r8
8000596e:	2f fd       	sub	sp,-4
80005970:	e3 cd 80 80 	ldm	sp++,r7,pc

80005974 <pll_enable_source>:

static inline void pll_enable_source(enum pll_source src)
{
80005974:	eb cd 40 80 	pushm	r7,lr
80005978:	1a 97       	mov	r7,sp
8000597a:	20 1d       	sub	sp,4
8000597c:	ef 4c ff fc 	st.w	r7[-4],r12
	switch (src) {
80005980:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005984:	58 08       	cp.w	r8,0
80005986:	c0 40       	breq	8000598e <pll_enable_source+0x1a>
80005988:	58 18       	cp.w	r8,1
8000598a:	c1 10       	breq	800059ac <pll_enable_source+0x38>
8000598c:	c2 08       	rjmp	800059cc <pll_enable_source+0x58>
	case PLL_SRC_OSC0:
		if (!osc_is_ready(OSC_ID_OSC0)) {
8000598e:	30 0c       	mov	r12,0
80005990:	f0 1f 00 11 	mcall	800059d4 <pll_enable_source+0x60>
80005994:	18 98       	mov	r8,r12
80005996:	ec 18 00 01 	eorl	r8,0x1
8000599a:	5c 58       	castu.b	r8
8000599c:	c1 70       	breq	800059ca <pll_enable_source+0x56>
			osc_enable(OSC_ID_OSC0);
8000599e:	30 0c       	mov	r12,0
800059a0:	f0 1f 00 0e 	mcall	800059d8 <pll_enable_source+0x64>
			osc_wait_ready(OSC_ID_OSC0);
800059a4:	30 0c       	mov	r12,0
800059a6:	f0 1f 00 0e 	mcall	800059dc <pll_enable_source+0x68>
		}
		break;
800059aa:	c1 18       	rjmp	800059cc <pll_enable_source+0x58>

	case PLL_SRC_OSC1:
		if (!osc_is_ready(OSC_ID_OSC1)) {
800059ac:	30 1c       	mov	r12,1
800059ae:	f0 1f 00 0a 	mcall	800059d4 <pll_enable_source+0x60>
800059b2:	18 98       	mov	r8,r12
800059b4:	ec 18 00 01 	eorl	r8,0x1
800059b8:	5c 58       	castu.b	r8
800059ba:	c0 90       	breq	800059cc <pll_enable_source+0x58>
			osc_enable(OSC_ID_OSC1);
800059bc:	30 1c       	mov	r12,1
800059be:	f0 1f 00 07 	mcall	800059d8 <pll_enable_source+0x64>
			osc_wait_ready(OSC_ID_OSC1);
800059c2:	30 1c       	mov	r12,1
800059c4:	f0 1f 00 06 	mcall	800059dc <pll_enable_source+0x68>
800059c8:	c0 28       	rjmp	800059cc <pll_enable_source+0x58>
	case PLL_SRC_OSC0:
		if (!osc_is_ready(OSC_ID_OSC0)) {
			osc_enable(OSC_ID_OSC0);
			osc_wait_ready(OSC_ID_OSC0);
		}
		break;
800059ca:	d7 03       	nop

	default:
		Assert(false);
		break;
	}
}
800059cc:	2f fd       	sub	sp,-4
800059ce:	e3 cd 80 80 	ldm	sp++,r7,pc
800059d2:	00 00       	add	r0,r0
800059d4:	80 00       	ld.sh	r0,r0[0x0]
800059d6:	57 64       	stdsp	sp[0x1d8],r4
800059d8:	80 00       	ld.sh	r0,r0[0x0]
800059da:	56 d4       	stdsp	sp[0x1b4],r4
800059dc:	80 00       	ld.sh	r0,r0[0x0]
800059de:	57 e0       	stdsp	sp[0x1f8],r0

800059e0 <pll_enable_config_defaults>:

static inline void pll_enable_config_defaults(unsigned int pll_id)
{
800059e0:	eb cd 40 80 	pushm	r7,lr
800059e4:	1a 97       	mov	r7,sp
800059e6:	20 2d       	sub	sp,8
800059e8:	ef 4c ff f8 	st.w	r7[-8],r12
	struct pll_config pllcfg;

	if (pll_is_locked(pll_id)) {
800059ec:	ee fc ff f8 	ld.w	r12,r7[-8]
800059f0:	f0 1f 00 15 	mcall	80005a44 <pll_enable_config_defaults+0x64>
800059f4:	18 98       	mov	r8,r12
800059f6:	58 08       	cp.w	r8,0
800059f8:	c2 11       	brne	80005a3a <pll_enable_config_defaults+0x5a>
		return; // Pll already running
	}
	switch (pll_id) {
800059fa:	ee f8 ff f8 	ld.w	r8,r7[-8]
800059fe:	58 08       	cp.w	r8,0
80005a00:	c0 c1       	brne	80005a18 <pll_enable_config_defaults+0x38>
#ifdef CONFIG_PLL0_SOURCE
	case 0:
		pll_enable_source(CONFIG_PLL0_SOURCE);
80005a02:	30 0c       	mov	r12,0
80005a04:	f0 1f 00 11 	mcall	80005a48 <pll_enable_config_defaults+0x68>
		pll_config_init(&pllcfg,
80005a08:	ee c8 00 04 	sub	r8,r7,4
80005a0c:	30 89       	mov	r9,8
80005a0e:	30 2a       	mov	r10,2
80005a10:	30 0b       	mov	r11,0
80005a12:	10 9c       	mov	r12,r8
80005a14:	f0 1f 00 0e 	mcall	80005a4c <pll_enable_config_defaults+0x6c>
#endif
	default:
		Assert(false);
		break;
	}
	pll_enable(&pllcfg, pll_id);
80005a18:	ee c8 00 04 	sub	r8,r7,4
80005a1c:	ee fb ff f8 	ld.w	r11,r7[-8]
80005a20:	10 9c       	mov	r12,r8
80005a22:	f0 1f 00 0c 	mcall	80005a50 <pll_enable_config_defaults+0x70>
	while (!pll_is_locked(pll_id));
80005a26:	ee fc ff f8 	ld.w	r12,r7[-8]
80005a2a:	f0 1f 00 07 	mcall	80005a44 <pll_enable_config_defaults+0x64>
80005a2e:	18 98       	mov	r8,r12
80005a30:	ec 18 00 01 	eorl	r8,0x1
80005a34:	5c 58       	castu.b	r8
80005a36:	cf 81       	brne	80005a26 <pll_enable_config_defaults+0x46>
80005a38:	c0 28       	rjmp	80005a3c <pll_enable_config_defaults+0x5c>
static inline void pll_enable_config_defaults(unsigned int pll_id)
{
	struct pll_config pllcfg;

	if (pll_is_locked(pll_id)) {
		return; // Pll already running
80005a3a:	d7 03       	nop
		Assert(false);
		break;
	}
	pll_enable(&pllcfg, pll_id);
	while (!pll_is_locked(pll_id));
}
80005a3c:	2f ed       	sub	sp,-8
80005a3e:	e3 cd 80 80 	ldm	sp++,r7,pc
80005a42:	00 00       	add	r0,r0
80005a44:	80 00       	ld.sh	r0,r0[0x0]
80005a46:	59 48       	cp.w	r8,20
80005a48:	80 00       	ld.sh	r0,r0[0x0]
80005a4a:	59 74       	cp.w	r4,23
80005a4c:	80 00       	ld.sh	r0,r0[0x0]
80005a4e:	58 3c       	cp.w	r12,3
80005a50:	80 00       	ld.sh	r0,r0[0x0]
80005a52:	59 1c       	cp.w	r12,17

80005a54 <genclk_config_defaults>:
	uint32_t ctrl;
};

static inline void genclk_config_defaults(struct genclk_config *cfg,
		unsigned int id)
{
80005a54:	eb cd 40 80 	pushm	r7,lr
80005a58:	1a 97       	mov	r7,sp
80005a5a:	20 2d       	sub	sp,8
80005a5c:	ef 4c ff fc 	st.w	r7[-4],r12
80005a60:	ef 4b ff f8 	st.w	r7[-8],r11
	cfg->ctrl = 0;
80005a64:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005a68:	30 09       	mov	r9,0
80005a6a:	91 09       	st.w	r8[0x0],r9
}
80005a6c:	2f ed       	sub	sp,-8
80005a6e:	e3 cd 80 80 	ldm	sp++,r7,pc

80005a72 <genclk_config_set_source>:
	AVR32_PM.gcctrl[id] = cfg->ctrl;
}

static inline void genclk_config_set_source(struct genclk_config *cfg,
		enum genclk_source src)
{
80005a72:	eb cd 40 80 	pushm	r7,lr
80005a76:	1a 97       	mov	r7,sp
80005a78:	20 3d       	sub	sp,12
80005a7a:	ef 4c ff f8 	st.w	r7[-8],r12
80005a7e:	ef 4b ff f4 	st.w	r7[-12],r11
	uint32_t mask;

	mask = AVR32_PM_GCCTRL_OSCSEL_MASK | AVR32_PM_GCCTRL_PLLSEL_MASK;
80005a82:	30 38       	mov	r8,3
80005a84:	ef 48 ff fc 	st.w	r7[-4],r8
	Assert(!(src & ~mask));

	cfg->ctrl = (cfg->ctrl & ~mask) | (src << AVR32_PM_GCCTRL_OSCSEL);
80005a88:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005a8c:	70 09       	ld.w	r9,r8[0x0]
80005a8e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005a92:	5c d8       	com	r8
80005a94:	10 69       	and	r9,r8
80005a96:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005a9a:	10 49       	or	r9,r8
80005a9c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005aa0:	91 09       	st.w	r8[0x0],r9
}
80005aa2:	2f dd       	sub	sp,-12
80005aa4:	e3 cd 80 80 	ldm	sp++,r7,pc

80005aa8 <genclk_config_set_divider>:

static inline void genclk_config_set_divider(struct genclk_config *cfg,
		unsigned int divider)
{
80005aa8:	eb cd 40 80 	pushm	r7,lr
80005aac:	1a 97       	mov	r7,sp
80005aae:	20 2d       	sub	sp,8
80005ab0:	ef 4c ff fc 	st.w	r7[-4],r12
80005ab4:	ef 4b ff f8 	st.w	r7[-8],r11
	Assert((divider > 0) && (divider <= GENCLK_DIV_MAX));

	/* Clear all the bits we're about to modify */
	cfg->ctrl &= ~(AVR32_PM_GCCTRL_DIVEN_MASK | AVR32_PM_GCCTRL_DIV_MASK);
80005ab8:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005abc:	70 08       	ld.w	r8,r8[0x0]
80005abe:	10 99       	mov	r9,r8
80005ac0:	e0 19 00 ef 	andl	r9,0xef
80005ac4:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005ac8:	91 09       	st.w	r8[0x0],r9

	if (divider > 1) {
80005aca:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005ace:	58 18       	cp.w	r8,1
80005ad0:	e0 88 00 16 	brls	80005afc <genclk_config_set_divider+0x54>
		cfg->ctrl |= 1U << AVR32_PM_GCCTRL_DIVEN;
80005ad4:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005ad8:	70 08       	ld.w	r8,r8[0x0]
80005ada:	10 99       	mov	r9,r8
80005adc:	a5 a9       	sbr	r9,0x4
80005ade:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005ae2:	91 09       	st.w	r8[0x0],r9
		cfg->ctrl |= ((divider >> 1) - 1) << AVR32_PM_GCCTRL_DIV;
80005ae4:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005ae8:	70 09       	ld.w	r9,r8[0x0]
80005aea:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005aee:	a1 98       	lsr	r8,0x1
80005af0:	20 18       	sub	r8,1
80005af2:	a9 68       	lsl	r8,0x8
80005af4:	10 49       	or	r9,r8
80005af6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005afa:	91 09       	st.w	r8[0x0],r9
	}
}
80005afc:	2f ed       	sub	sp,-8
80005afe:	e3 cd 80 80 	ldm	sp++,r7,pc

80005b02 <genclk_enable>:

static inline void genclk_enable(const struct genclk_config *cfg,
		unsigned int id)
{
80005b02:	eb cd 40 80 	pushm	r7,lr
80005b06:	1a 97       	mov	r7,sp
80005b08:	20 2d       	sub	sp,8
80005b0a:	ef 4c ff fc 	st.w	r7[-4],r12
80005b0e:	ef 4b ff f8 	st.w	r7[-8],r11
	AVR32_PM.gcctrl[id] = cfg->ctrl | (1U << AVR32_PM_GCCTRL_CEN);
80005b12:	fe 78 0c 00 	mov	r8,-62464
80005b16:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005b1a:	ee fa ff fc 	ld.w	r10,r7[-4]
80005b1e:	74 0a       	ld.w	r10,r10[0x0]
80005b20:	a3 aa       	sbr	r10,0x2
80005b22:	2e 89       	sub	r9,-24
80005b24:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
}
80005b28:	2f ed       	sub	sp,-8
80005b2a:	e3 cd 80 80 	ldm	sp++,r7,pc
80005b2e:	d7 03       	nop

80005b30 <genclk_enable_source>:
{
	AVR32_PM.gcctrl[id] = 0;
}

static inline void genclk_enable_source(enum genclk_source src)
{
80005b30:	eb cd 40 80 	pushm	r7,lr
80005b34:	1a 97       	mov	r7,sp
80005b36:	20 1d       	sub	sp,4
80005b38:	ef 4c ff fc 	st.w	r7[-4],r12
	switch (src) {
80005b3c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005b40:	58 08       	cp.w	r8,0
80005b42:	c0 40       	breq	80005b4a <genclk_enable_source+0x1a>
80005b44:	58 28       	cp.w	r8,2
80005b46:	c1 10       	breq	80005b68 <genclk_enable_source+0x38>
80005b48:	c1 58       	rjmp	80005b72 <genclk_enable_source+0x42>
#ifdef BOARD_OSC0_HZ
	case GENCLK_SRC_OSC0:
		if (!osc_is_ready(OSC_ID_OSC0)) {
80005b4a:	30 0c       	mov	r12,0
80005b4c:	f0 1f 00 0b 	mcall	80005b78 <genclk_enable_source+0x48>
80005b50:	18 98       	mov	r8,r12
80005b52:	ec 18 00 01 	eorl	r8,0x1
80005b56:	5c 58       	castu.b	r8
80005b58:	c0 c0       	breq	80005b70 <genclk_enable_source+0x40>
			osc_enable(OSC_ID_OSC0);
80005b5a:	30 0c       	mov	r12,0
80005b5c:	f0 1f 00 08 	mcall	80005b7c <genclk_enable_source+0x4c>
			osc_wait_ready(OSC_ID_OSC0);
80005b60:	30 0c       	mov	r12,0
80005b62:	f0 1f 00 08 	mcall	80005b80 <genclk_enable_source+0x50>
		}
		break;
80005b66:	c0 68       	rjmp	80005b72 <genclk_enable_source+0x42>
		break;
#endif

#ifdef CONFIG_PLL0_SOURCE
	case GENCLK_SRC_PLL0: {
		pll_enable_config_defaults(0);
80005b68:	30 0c       	mov	r12,0
80005b6a:	f0 1f 00 07 	mcall	80005b84 <genclk_enable_source+0x54>
80005b6e:	c0 28       	rjmp	80005b72 <genclk_enable_source+0x42>
	case GENCLK_SRC_OSC0:
		if (!osc_is_ready(OSC_ID_OSC0)) {
			osc_enable(OSC_ID_OSC0);
			osc_wait_ready(OSC_ID_OSC0);
		}
		break;
80005b70:	d7 03       	nop

	default:
		Assert(false);
		break;
	}
}
80005b72:	2f fd       	sub	sp,-4
80005b74:	e3 cd 80 80 	ldm	sp++,r7,pc
80005b78:	80 00       	ld.sh	r0,r0[0x0]
80005b7a:	57 64       	stdsp	sp[0x1d8],r4
80005b7c:	80 00       	ld.sh	r0,r0[0x0]
80005b7e:	56 d4       	stdsp	sp[0x1b4],r4
80005b80:	80 00       	ld.sh	r0,r0[0x0]
80005b82:	57 e0       	stdsp	sp[0x1f8],r0
80005b84:	80 00       	ld.sh	r0,r0[0x0]
80005b86:	59 e0       	cp.w	r0,30

80005b88 <genclk_enable_config>:
 * \param id      The ID of the generic clock.
 * \param src     The source clock of the generic clock.
 * \param divider The divider used to generate the generic clock.
 */
static inline void genclk_enable_config(unsigned int id, enum genclk_source src, unsigned int divider)
{
80005b88:	eb cd 40 80 	pushm	r7,lr
80005b8c:	1a 97       	mov	r7,sp
80005b8e:	20 4d       	sub	sp,16
80005b90:	ef 4c ff f8 	st.w	r7[-8],r12
80005b94:	ef 4b ff f4 	st.w	r7[-12],r11
80005b98:	ef 4a ff f0 	st.w	r7[-16],r10
	struct genclk_config gcfg;

	genclk_config_defaults(&gcfg, id);
80005b9c:	ee c8 00 04 	sub	r8,r7,4
80005ba0:	ee fb ff f8 	ld.w	r11,r7[-8]
80005ba4:	10 9c       	mov	r12,r8
80005ba6:	f0 1f 00 10 	mcall	80005be4 <genclk_enable_config+0x5c>
	genclk_enable_source(src);
80005baa:	ee fc ff f4 	ld.w	r12,r7[-12]
80005bae:	f0 1f 00 0f 	mcall	80005be8 <genclk_enable_config+0x60>
	genclk_config_set_source(&gcfg, src);
80005bb2:	ee c8 00 04 	sub	r8,r7,4
80005bb6:	ee fb ff f4 	ld.w	r11,r7[-12]
80005bba:	10 9c       	mov	r12,r8
80005bbc:	f0 1f 00 0c 	mcall	80005bec <genclk_enable_config+0x64>
	genclk_config_set_divider(&gcfg, divider);
80005bc0:	ee c8 00 04 	sub	r8,r7,4
80005bc4:	ee fb ff f0 	ld.w	r11,r7[-16]
80005bc8:	10 9c       	mov	r12,r8
80005bca:	f0 1f 00 0a 	mcall	80005bf0 <genclk_enable_config+0x68>
	genclk_enable(&gcfg, id);
80005bce:	ee c8 00 04 	sub	r8,r7,4
80005bd2:	ee fb ff f8 	ld.w	r11,r7[-8]
80005bd6:	10 9c       	mov	r12,r8
80005bd8:	f0 1f 00 07 	mcall	80005bf4 <genclk_enable_config+0x6c>
}
80005bdc:	2f cd       	sub	sp,-16
80005bde:	e3 cd 80 80 	ldm	sp++,r7,pc
80005be2:	00 00       	add	r0,r0
80005be4:	80 00       	ld.sh	r0,r0[0x0]
80005be6:	5a 54       	cp.w	r4,-27
80005be8:	80 00       	ld.sh	r0,r0[0x0]
80005bea:	5b 30       	cp.w	r0,-13
80005bec:	80 00       	ld.sh	r0,r0[0x0]
80005bee:	5a 72       	cp.w	r2,-25
80005bf0:	80 00       	ld.sh	r0,r0[0x0]
80005bf2:	5a a8       	cp.w	r8,-22
80005bf4:	80 00       	ld.sh	r0,r0[0x0]
80005bf6:	5b 02       	cp.w	r2,-16

80005bf8 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern bool sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
80005bf8:	eb cd 40 80 	pushm	r7,lr
80005bfc:	1a 97       	mov	r7,sp
		return BOARD_OSC0_HZ;
#endif

#ifdef CONFIG_PLL0_SOURCE
	case SYSCLK_SRC_PLL0:
		return pll_get_default_rate(0);
80005bfe:	30 0c       	mov	r12,0
80005c00:	f0 1f 00 04 	mcall	80005c10 <sysclk_get_main_hz+0x18>
80005c04:	18 98       	mov	r8,r12
80005c06:	a3 78       	lsl	r8,0x3
80005c08:	a1 98       	lsr	r8,0x1

	default:
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
80005c0a:	10 9c       	mov	r12,r8
80005c0c:	e3 cd 80 80 	ldm	sp++,r7,pc
80005c10:	80 00       	ld.sh	r0,r0[0x0]
80005c12:	57 aa       	stdsp	sp[0x1e8],r10

80005c14 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
80005c14:	eb cd 40 80 	pushm	r7,lr
80005c18:	1a 97       	mov	r7,sp
	return sysclk_get_main_hz() >> CONFIG_SYSCLK_CPU_DIV;
80005c1a:	f0 1f 00 04 	mcall	80005c28 <sysclk_get_cpu_hz+0x14>
80005c1e:	18 98       	mov	r8,r12
}
80005c20:	10 9c       	mov	r12,r8
80005c22:	e3 cd 80 80 	ldm	sp++,r7,pc
80005c26:	00 00       	add	r0,r0
80005c28:	80 00       	ld.sh	r0,r0[0x0]
80005c2a:	5b f8       	cp.w	r8,-1

80005c2c <sysclk_enable_hsb_module>:
/**
 * \brief Enable a module clock derived from the HSB clock
 * \param index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_enable_hsb_module(unsigned int index)
{
80005c2c:	eb cd 40 80 	pushm	r7,lr
80005c30:	1a 97       	mov	r7,sp
80005c32:	20 1d       	sub	sp,4
80005c34:	ef 4c ff fc 	st.w	r7[-4],r12
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_HSB, index);
80005c38:	ee fb ff fc 	ld.w	r11,r7[-4]
80005c3c:	30 1c       	mov	r12,1
80005c3e:	f0 1f 00 03 	mcall	80005c48 <sysclk_enable_hsb_module+0x1c>
}
80005c42:	2f fd       	sub	sp,-4
80005c44:	e3 cd 80 80 	ldm	sp++,r7,pc
80005c48:	80 00       	ld.sh	r0,r0[0x0]
80005c4a:	5c a0       	swap.h	r0

80005c4c <sysclk_set_source>:
 *
 * \param src The new system clock source. Must be one of the constants
 * from the <em>System Clock Sources</em> section.
 */
static inline void sysclk_set_source(uint_fast8_t src)
{
80005c4c:	eb cd 40 80 	pushm	r7,lr
80005c50:	1a 97       	mov	r7,sp
80005c52:	20 3d       	sub	sp,12
80005c54:	ef 4c ff f4 	st.w	r7[-12],r12
	irqflags_t flags;
	uint32_t   mcctrl;

	Assert(src <= SYSCLK_SRC_PLL0);

	flags = cpu_irq_save();
80005c58:	f0 1f 00 10 	mcall	80005c98 <sysclk_set_source+0x4c>
80005c5c:	18 98       	mov	r8,r12
80005c5e:	ef 48 ff f8 	st.w	r7[-8],r8
	mcctrl = AVR32_PM.mcctrl & ~AVR32_PM_MCCTRL_MCSEL_MASK;
80005c62:	fe 78 0c 00 	mov	r8,-62464
80005c66:	70 08       	ld.w	r8,r8[0x0]
80005c68:	e0 18 ff fc 	andl	r8,0xfffc
80005c6c:	ef 48 ff fc 	st.w	r7[-4],r8
	mcctrl |= src << AVR32_PM_MCCTRL_MCSEL;
80005c70:	ee f9 ff fc 	ld.w	r9,r7[-4]
80005c74:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005c78:	f3 e8 10 08 	or	r8,r9,r8
80005c7c:	ef 48 ff fc 	st.w	r7[-4],r8
	AVR32_PM.mcctrl = mcctrl;
80005c80:	fe 78 0c 00 	mov	r8,-62464
80005c84:	ee f9 ff fc 	ld.w	r9,r7[-4]
80005c88:	91 09       	st.w	r8[0x0],r9
	cpu_irq_restore(flags);
80005c8a:	ee fc ff f8 	ld.w	r12,r7[-8]
80005c8e:	f0 1f 00 04 	mcall	80005c9c <sysclk_set_source+0x50>
}
80005c92:	2f dd       	sub	sp,-12
80005c94:	e3 cd 80 80 	ldm	sp++,r7,pc
80005c98:	80 00       	ld.sh	r0,r0[0x0]
80005c9a:	56 6c       	stdsp	sp[0x198],r12
80005c9c:	80 00       	ld.sh	r0,r0[0x0]
80005c9e:	56 ac       	stdsp	sp[0x1a8],r12

80005ca0 <sysclk_priv_enable_module>:
 * \param bus_id Bus index, given by the \c AVR32_PM_CLK_GRP_xxx definitions.
 * \param module_index Index of the module to be enabled. This is the
 * bit number in the corresponding xxxMASK register.
 */
void sysclk_priv_enable_module(unsigned int bus_id, unsigned int module_index)
{
80005ca0:	eb cd 40 80 	pushm	r7,lr
80005ca4:	1a 97       	mov	r7,sp
80005ca6:	20 4d       	sub	sp,16
80005ca8:	ef 4c ff f4 	st.w	r7[-12],r12
80005cac:	ef 4b ff f0 	st.w	r7[-16],r11
	irqflags_t flags;
	uint32_t   mask;

	flags = cpu_irq_save();
80005cb0:	f0 1f 00 17 	mcall	80005d0c <sysclk_priv_enable_module+0x6c>
80005cb4:	18 98       	mov	r8,r12
80005cb6:	ef 48 ff f8 	st.w	r7[-8],r8

	/*
	 * Poll MSKRDY before changing mask rather than after, as it's
	 * highly unlikely to actually be cleared at this point.
	 */
	while (!(AVR32_PM.poscsr & (1U << AVR32_PM_POSCSR_MSKRDY))) {
80005cba:	fe 78 0c 00 	mov	r8,-62464
80005cbe:	71 58       	ld.w	r8,r8[0x54]
80005cc0:	e2 18 00 40 	andl	r8,0x40,COH
80005cc4:	cf b0       	breq	80005cba <sysclk_priv_enable_module+0x1a>
		/* Do nothing */
	}

	/* Enable the clock */
	mask = *(&AVR32_PM.cpumask + bus_id);
80005cc6:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005cca:	a3 68       	lsl	r8,0x2
80005ccc:	e0 28 f3 f8 	sub	r8,62456
80005cd0:	70 08       	ld.w	r8,r8[0x0]
80005cd2:	ef 48 ff fc 	st.w	r7[-4],r8
	mask |= 1U << module_index;
80005cd6:	ee f8 ff f0 	ld.w	r8,r7[-16]
80005cda:	30 19       	mov	r9,1
80005cdc:	f2 08 09 48 	lsl	r8,r9,r8
80005ce0:	ee f9 ff fc 	ld.w	r9,r7[-4]
80005ce4:	f3 e8 10 08 	or	r8,r9,r8
80005ce8:	ef 48 ff fc 	st.w	r7[-4],r8
	*(&AVR32_PM.cpumask + bus_id) = mask;
80005cec:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005cf0:	a3 68       	lsl	r8,0x2
80005cf2:	e0 28 f3 f8 	sub	r8,62456
80005cf6:	ee f9 ff fc 	ld.w	r9,r7[-4]
80005cfa:	91 09       	st.w	r8[0x0],r9

	cpu_irq_restore(flags);
80005cfc:	ee fc ff f8 	ld.w	r12,r7[-8]
80005d00:	f0 1f 00 04 	mcall	80005d10 <sysclk_priv_enable_module+0x70>
}
80005d04:	2f cd       	sub	sp,-16
80005d06:	e3 cd 80 80 	ldm	sp++,r7,pc
80005d0a:	00 00       	add	r0,r0
80005d0c:	80 00       	ld.sh	r0,r0[0x0]
80005d0e:	56 6c       	stdsp	sp[0x198],r12
80005d10:	80 00       	ld.sh	r0,r0[0x0]
80005d12:	56 ac       	stdsp	sp[0x1a8],r12

80005d14 <sysclk_enable_pbb_module>:
/**
 * \brief Enable a module clock derived from the PBB clock
 * \param index Index of the module clock in the PBBMASK register
 */
void sysclk_enable_pbb_module(unsigned int index)
{
80005d14:	eb cd 40 80 	pushm	r7,lr
80005d18:	1a 97       	mov	r7,sp
80005d1a:	20 2d       	sub	sp,8
80005d1c:	ef 4c ff f8 	st.w	r7[-8],r12
	irqflags_t flags;

	/* Enable the bridge if necessary */
	flags = cpu_irq_save();
80005d20:	f0 1f 00 0f 	mcall	80005d5c <sysclk_enable_pbb_module+0x48>
80005d24:	18 98       	mov	r8,r12
80005d26:	ef 48 ff fc 	st.w	r7[-4],r8

	if (!sysclk_pbb_refcount)
80005d2a:	48 e8       	lddpc	r8,80005d60 <sysclk_enable_pbb_module+0x4c>
80005d2c:	11 88       	ld.ub	r8,r8[0x0]
80005d2e:	58 08       	cp.w	r8,0
80005d30:	c0 41       	brne	80005d38 <sysclk_enable_pbb_module+0x24>
		sysclk_enable_hsb_module(SYSCLK_PBB_BRIDGE);
80005d32:	30 2c       	mov	r12,2
80005d34:	f0 1f 00 0c 	mcall	80005d64 <sysclk_enable_pbb_module+0x50>

	sysclk_pbb_refcount++;
80005d38:	48 a8       	lddpc	r8,80005d60 <sysclk_enable_pbb_module+0x4c>
80005d3a:	11 88       	ld.ub	r8,r8[0x0]
80005d3c:	2f f8       	sub	r8,-1
80005d3e:	5c 58       	castu.b	r8
80005d40:	48 89       	lddpc	r9,80005d60 <sysclk_enable_pbb_module+0x4c>
80005d42:	b2 88       	st.b	r9[0x0],r8

	cpu_irq_restore(flags);
80005d44:	ee fc ff fc 	ld.w	r12,r7[-4]
80005d48:	f0 1f 00 08 	mcall	80005d68 <sysclk_enable_pbb_module+0x54>

	/* Enable the module */
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_PBB, index);
80005d4c:	ee fb ff f8 	ld.w	r11,r7[-8]
80005d50:	30 3c       	mov	r12,3
80005d52:	f0 1f 00 07 	mcall	80005d6c <sysclk_enable_pbb_module+0x58>
}
80005d56:	2f ed       	sub	sp,-8
80005d58:	e3 cd 80 80 	ldm	sp++,r7,pc
80005d5c:	80 00       	ld.sh	r0,r0[0x0]
80005d5e:	56 6c       	stdsp	sp[0x198],r12
80005d60:	00 00       	add	r0,r0
80005d62:	02 56       	eor	r6,r1
80005d64:	80 00       	ld.sh	r0,r0[0x0]
80005d66:	5c 2c       	cpc	r12
80005d68:	80 00       	ld.sh	r0,r0[0x0]
80005d6a:	56 ac       	stdsp	sp[0x1a8],r12
80005d6c:	80 00       	ld.sh	r0,r0[0x0]
80005d6e:	5c a0       	swap.h	r0

80005d70 <sysclk_enable_usb>:
 * \pre The USB generic clock must be configured to 48MHz.
 * CONFIG_USBCLK_SOURCE and CONFIG_USBCLK_DIV must be defined with proper
 * configuration. The selected clock source must also be configured.
 */
void sysclk_enable_usb(void)
{
80005d70:	eb cd 40 80 	pushm	r7,lr
80005d74:	1a 97       	mov	r7,sp
	sysclk_enable_pbb_module(SYSCLK_USBB_REGS);
80005d76:	30 1c       	mov	r12,1
80005d78:	f0 1f 00 06 	mcall	80005d90 <sysclk_enable_usb+0x20>
	sysclk_enable_hsb_module(SYSCLK_USBB_DATA);
80005d7c:	30 3c       	mov	r12,3
80005d7e:	f0 1f 00 06 	mcall	80005d94 <sysclk_enable_usb+0x24>
	genclk_enable_config(AVR32_PM_GCLK_USBB, CONFIG_USBCLK_SOURCE, CONFIG_USBCLK_DIV);
80005d82:	30 1a       	mov	r10,1
80005d84:	30 2b       	mov	r11,2
80005d86:	30 4c       	mov	r12,4
80005d88:	f0 1f 00 04 	mcall	80005d98 <sysclk_enable_usb+0x28>
}
80005d8c:	e3 cd 80 80 	ldm	sp++,r7,pc
80005d90:	80 00       	ld.sh	r0,r0[0x0]
80005d92:	5d 14       	icall	r4
80005d94:	80 00       	ld.sh	r0,r0[0x0]
80005d96:	5c 2c       	cpc	r12
80005d98:	80 00       	ld.sh	r0,r0[0x0]
80005d9a:	5b 88       	cp.w	r8,-8

80005d9c <sysclk_init>:
}
#endif // CONFIG_USBCLK_SOURCE


void sysclk_init(void)
{
80005d9c:	eb cd 40 80 	pushm	r7,lr
80005da0:	1a 97       	mov	r7,sp
		break;
#endif

#ifdef CONFIG_PLL0_SOURCE
	case SYSCLK_SRC_PLL0: {
		pll_enable_config_defaults(0);
80005da2:	30 0c       	mov	r12,0
80005da4:	f0 1f 00 07 	mcall	80005dc0 <sysclk_init+0x24>
		// Set a flash wait state depending on the new cpu frequency.
		flash_set_bus_freq(sysclk_get_cpu_hz());
80005da8:	f0 1f 00 07 	mcall	80005dc4 <sysclk_init+0x28>
80005dac:	18 98       	mov	r8,r12
80005dae:	10 9c       	mov	r12,r8
80005db0:	f0 1f 00 06 	mcall	80005dc8 <sysclk_init+0x2c>
		sysclk_set_source(SYSCLK_SRC_PLL0);
80005db4:	30 2c       	mov	r12,2
80005db6:	f0 1f 00 06 	mcall	80005dcc <sysclk_init+0x30>

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = true;
#endif
}
80005dba:	e3 cd 80 80 	ldm	sp++,r7,pc
80005dbe:	00 00       	add	r0,r0
80005dc0:	80 00       	ld.sh	r0,r0[0x0]
80005dc2:	59 e0       	cp.w	r0,30
80005dc4:	80 00       	ld.sh	r0,r0[0x0]
80005dc6:	5c 14       	scr	r4
80005dc8:	80 00       	ld.sh	r0,r0[0x0]
80005dca:	20 50       	sub	r0,5
80005dcc:	80 00       	ld.sh	r0,r0[0x0]
80005dce:	5c 4c       	abs	r12

80005dd0 <board_init>:
#if defined (CONF_BOARD_AT45DBX)
#  define AT45DBX_MEM_CNT  1
#endif

void board_init(void)
{
80005dd0:	eb cd 40 80 	pushm	r7,lr
80005dd4:	1a 97       	mov	r7,sp
	gpio_configure_pin(LED0_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80005dd6:	30 3b       	mov	r11,3
80005dd8:	33 bc       	mov	r12,59
80005dda:	f0 1f 00 2d 	mcall	80005e8c <board_init+0xbc>
	gpio_configure_pin(LED1_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80005dde:	30 3b       	mov	r11,3
80005de0:	33 cc       	mov	r12,60
80005de2:	f0 1f 00 2b 	mcall	80005e8c <board_init+0xbc>
	gpio_configure_pin(LED2_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80005de6:	30 3b       	mov	r11,3
80005de8:	33 dc       	mov	r12,61
80005dea:	f0 1f 00 29 	mcall	80005e8c <board_init+0xbc>
	gpio_configure_pin(LED3_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80005dee:	30 3b       	mov	r11,3
80005df0:	33 ec       	mov	r12,62
80005df2:	f0 1f 00 27 	mcall	80005e8c <board_init+0xbc>
	gpio_configure_pin(LED4_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80005df6:	30 3b       	mov	r11,3
80005df8:	33 3c       	mov	r12,51
80005dfa:	f0 1f 00 25 	mcall	80005e8c <board_init+0xbc>
	gpio_configure_pin(LED5_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80005dfe:	30 3b       	mov	r11,3
80005e00:	33 4c       	mov	r12,52
80005e02:	f0 1f 00 23 	mcall	80005e8c <board_init+0xbc>
	gpio_configure_pin(LED6_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80005e06:	30 3b       	mov	r11,3
80005e08:	33 5c       	mov	r12,53
80005e0a:	f0 1f 00 21 	mcall	80005e8c <board_init+0xbc>
	gpio_configure_pin(LED7_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80005e0e:	30 3b       	mov	r11,3
80005e10:	33 6c       	mov	r12,54
80005e12:	f0 1f 00 1f 	mcall	80005e8c <board_init+0xbc>

	gpio_configure_pin(GPIO_PUSH_BUTTON_0,GPIO_DIR_INPUT);
80005e16:	30 0b       	mov	r11,0
80005e18:	35 8c       	mov	r12,88
80005e1a:	f0 1f 00 1d 	mcall	80005e8c <board_init+0xbc>
	gpio_configure_pin(GPIO_PUSH_BUTTON_1,GPIO_DIR_INPUT);
80005e1e:	30 0b       	mov	r11,0
80005e20:	35 5c       	mov	r12,85
80005e22:	f0 1f 00 1b 	mcall	80005e8c <board_init+0xbc>
	gpio_configure_pin(GPIO_PUSH_BUTTON_2,GPIO_DIR_INPUT);
80005e26:	30 0b       	mov	r11,0
80005e28:	35 2c       	mov	r12,82
80005e2a:	f0 1f 00 19 	mcall	80005e8c <board_init+0xbc>
	gpio_configure_pin(GPIO_JOYSTICK_PUSH,GPIO_DIR_INPUT);
80005e2e:	30 0b       	mov	r11,0
80005e30:	31 4c       	mov	r12,20
80005e32:	f0 1f 00 17 	mcall	80005e8c <board_init+0xbc>
	gpio_configure_pin(GPIO_JOYSTICK_LEFT,GPIO_DIR_INPUT);
80005e36:	30 0b       	mov	r11,0
80005e38:	31 9c       	mov	r12,25
80005e3a:	f0 1f 00 15 	mcall	80005e8c <board_init+0xbc>
	gpio_configure_pin(GPIO_JOYSTICK_UP,GPIO_DIR_INPUT);
80005e3e:	30 0b       	mov	r11,0
80005e40:	31 ac       	mov	r12,26
80005e42:	f0 1f 00 13 	mcall	80005e8c <board_init+0xbc>
	gpio_configure_pin(GPIO_JOYSTICK_DOWN,GPIO_DIR_INPUT);
80005e46:	30 0b       	mov	r11,0
80005e48:	31 bc       	mov	r12,27
80005e4a:	f0 1f 00 11 	mcall	80005e8c <board_init+0xbc>
		MREPEAT(AT45DBX_MEM_CNT, AT45DBX_ENABLE_NPCS_PIN, ~)
#  undef AT45DBX_ENABLE_NPCS_PIN
	};

	// Assign I/Os to SPI.
	gpio_enable_module(AT45DBX_SPI_GPIO_MAP,
80005e4e:	30 4b       	mov	r11,4
80005e50:	49 0c       	lddpc	r12,80005e90 <board_init+0xc0>
80005e52:	f0 1f 00 11 	mcall	80005e94 <board_init+0xc4>
		{SD_MMC_SPI_MOSI_PIN, SD_MMC_SPI_MOSI_FUNCTION},
		{SD_MMC_SPI_NPCS_PIN, SD_MMC_SPI_NPCS_FUNCTION},
	};

	// Assign I/Os to SPI.
	gpio_enable_module(SD_MMC_SPI_GPIO_MAP,
80005e56:	30 4b       	mov	r11,4
80005e58:	49 0c       	lddpc	r12,80005e98 <board_init+0xc8>
80005e5a:	f0 1f 00 0f 	mcall	80005e94 <board_init+0xc4>

	// Configure SD/MMC card detect and write protect pins
#  define SD_MMC_CONFIGURE_CD_WP_PIN(slot, unused) \
	gpio_configure_pin(SD_MMC_##slot##_CD_GPIO,GPIO_DIR_INPUT); \
	gpio_configure_pin(SD_MMC_##slot##_WP_GPIO,GPIO_DIR_INPUT);
	MREPEAT(SD_MMC_SPI_MEM_CNT, SD_MMC_CONFIGURE_CD_WP_PIN, ~)
80005e5e:	30 0b       	mov	r11,0
80005e60:	30 2c       	mov	r12,2
80005e62:	f0 1f 00 0b 	mcall	80005e8c <board_init+0xbc>
80005e66:	30 0b       	mov	r11,0
80005e68:	30 7c       	mov	r12,7
80005e6a:	f0 1f 00 09 	mcall	80005e8c <board_init+0xbc>
		{AVR32_TWI_SDA_0_0_PIN, AVR32_TWI_SDA_0_0_FUNCTION},
		{AVR32_TWI_SCL_0_0_PIN, AVR32_TWI_SCL_0_0_FUNCTION},
	};

	// TWI gpio pins configuration
	gpio_enable_module(TWI_GPIO_MAP,
80005e6e:	30 2b       	mov	r11,2
80005e70:	48 bc       	lddpc	r12,80005e9c <board_init+0xcc>
80005e72:	f0 1f 00 09 	mcall	80005e94 <board_init+0xc4>
	// USART GPIO pin configuration.
	static const gpio_map_t COMPORT_GPIO_MAP = {
		{USART_RXD_PIN, USART_RXD_FUNCTION },
		{USART_TXD_PIN, USART_TXD_FUNCTION },
	};
	gpio_enable_module(COMPORT_GPIO_MAP,
80005e76:	30 2b       	mov	r11,2
80005e78:	48 ac       	lddpc	r12,80005ea0 <board_init+0xd0>
80005e7a:	f0 1f 00 07 	mcall	80005e94 <board_init+0xc4>
	// USART GPIO pin configuration.
	static const gpio_map_t COMPORT0_GPIO_MAP = {
		{USART0_RXD_PIN, USART0_RXD_FUNCTION },
		{USART0_TXD_PIN, USART0_TXD_FUNCTION },
	};
	gpio_enable_module(COMPORT0_GPIO_MAP,
80005e7e:	30 2b       	mov	r11,2
80005e80:	48 9c       	lddpc	r12,80005ea4 <board_init+0xd4>
80005e82:	f0 1f 00 05 	mcall	80005e94 <board_init+0xc4>
			sizeof(COMPORT0_GPIO_MAP) / sizeof(COMPORT0_GPIO_MAP[0]));
#endif
}
80005e86:	e3 cd 80 80 	ldm	sp++,r7,pc
80005e8a:	00 00       	add	r0,r0
80005e8c:	80 00       	ld.sh	r0,r0[0x0]
80005e8e:	60 78       	ld.w	r8,r0[0x1c]
80005e90:	80 00       	ld.sh	r0,r0[0x0]
80005e92:	6c 00       	ld.w	r0,r6[0x0]
80005e94:	80 00       	ld.sh	r0,r0[0x0]
80005e96:	5e a8       	retle	r8
80005e98:	80 00       	ld.sh	r0,r0[0x0]
80005e9a:	6c 20       	ld.w	r0,r6[0x8]
80005e9c:	80 00       	ld.sh	r0,r0[0x0]
80005e9e:	6c 40       	ld.w	r0,r6[0x10]
80005ea0:	80 00       	ld.sh	r0,r0[0x0]
80005ea2:	6c 50       	ld.w	r0,r6[0x14]
80005ea4:	80 00       	ld.sh	r0,r0[0x0]
80005ea6:	6c 60       	ld.w	r0,r6[0x18]

80005ea8 <gpio_enable_module>:
 * \param size The number of pins in \a gpiomap.
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
80005ea8:	eb cd 40 80 	pushm	r7,lr
80005eac:	1a 97       	mov	r7,sp
80005eae:	20 4d       	sub	sp,16
80005eb0:	ef 4c ff f4 	st.w	r7[-12],r12
80005eb4:	ef 4b ff f0 	st.w	r7[-16],r11
	uint32_t status = GPIO_SUCCESS;
80005eb8:	30 08       	mov	r8,0
80005eba:	ef 48 ff f8 	st.w	r7[-8],r8
	uint32_t i;

	for (i = 0; i < size; i++) {
80005ebe:	30 08       	mov	r8,0
80005ec0:	ef 48 ff fc 	st.w	r7[-4],r8
80005ec4:	c1 c8       	rjmp	80005efc <gpio_enable_module+0x54>
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
80005ec6:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005eca:	70 19       	ld.w	r9,r8[0x4]
80005ecc:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005ed0:	70 08       	ld.w	r8,r8[0x0]
80005ed2:	12 9b       	mov	r11,r9
80005ed4:	10 9c       	mov	r12,r8
80005ed6:	f0 1f 00 10 	mcall	80005f14 <gpio_enable_module+0x6c>
80005eda:	18 98       	mov	r8,r12
80005edc:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005ee0:	f3 e8 10 08 	or	r8,r9,r8
80005ee4:	ef 48 ff f8 	st.w	r7[-8],r8
		gpiomap++;
80005ee8:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005eec:	2f 88       	sub	r8,-8
80005eee:	ef 48 ff f4 	st.w	r7[-12],r8
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
80005ef2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005ef6:	2f f8       	sub	r8,-1
80005ef8:	ef 48 ff fc 	st.w	r7[-4],r8
80005efc:	ee f9 ff fc 	ld.w	r9,r7[-4]
80005f00:	ee f8 ff f0 	ld.w	r8,r7[-16]
80005f04:	10 39       	cp.w	r9,r8
80005f06:	ce 03       	brcs	80005ec6 <gpio_enable_module+0x1e>
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
		gpiomap++;
	}

	return status;
80005f08:	ee f8 ff f8 	ld.w	r8,r7[-8]
}
80005f0c:	10 9c       	mov	r12,r8
80005f0e:	2f cd       	sub	sp,-16
80005f10:	e3 cd 80 80 	ldm	sp++,r7,pc
80005f14:	80 00       	ld.sh	r0,r0[0x0]
80005f16:	5f 18       	srne	r8

80005f18 <gpio_enable_module_pin>:
 * \param function The pin function.
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module_pin(uint32_t pin, uint32_t function)
{
80005f18:	eb cd 40 80 	pushm	r7,lr
80005f1c:	1a 97       	mov	r7,sp
80005f1e:	20 3d       	sub	sp,12
80005f20:	ef 4c ff f8 	st.w	r7[-8],r12
80005f24:	ef 4b ff f4 	st.w	r7[-12],r11
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80005f28:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005f2c:	a5 98       	lsr	r8,0x5
80005f2e:	a9 68       	lsl	r8,0x8
80005f30:	e0 28 f0 00 	sub	r8,61440
80005f34:	ef 48 ff fc 	st.w	r7[-4],r8

	/* Enable the correct function. */
	switch (function) {
80005f38:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005f3c:	58 18       	cp.w	r8,1
80005f3e:	c1 e0       	breq	80005f7a <gpio_enable_module_pin+0x62>
80005f40:	c0 63       	brcs	80005f4c <gpio_enable_module_pin+0x34>
80005f42:	58 28       	cp.w	r8,2
80005f44:	c3 20       	breq	80005fa8 <gpio_enable_module_pin+0x90>
80005f46:	58 38       	cp.w	r8,3
80005f48:	c4 70       	breq	80005fd6 <gpio_enable_module_pin+0xbe>
80005f4a:	c5 d8       	rjmp	80006004 <gpio_enable_module_pin+0xec>
	case 0: /* A function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
80005f4c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005f50:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80005f54:	30 19       	mov	r9,1
80005f56:	f2 08 09 48 	lsl	r8,r9,r8
80005f5a:	10 99       	mov	r9,r8
80005f5c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005f60:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
80005f62:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005f66:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80005f6a:	30 19       	mov	r9,1
80005f6c:	f2 08 09 48 	lsl	r8,r9,r8
80005f70:	10 99       	mov	r9,r8
80005f72:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005f76:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
		break;
80005f78:	c4 88       	rjmp	80006008 <gpio_enable_module_pin+0xf0>

	case 1: /* B function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
80005f7a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005f7e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80005f82:	30 19       	mov	r9,1
80005f84:	f2 08 09 48 	lsl	r8,r9,r8
80005f88:	10 99       	mov	r9,r8
80005f8a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005f8e:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
80005f90:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005f94:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80005f98:	30 19       	mov	r9,1
80005f9a:	f2 08 09 48 	lsl	r8,r9,r8
80005f9e:	10 99       	mov	r9,r8
80005fa0:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005fa4:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
		break;
80005fa6:	c3 18       	rjmp	80006008 <gpio_enable_module_pin+0xf0>

	case 2: /* C function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
80005fa8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005fac:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80005fb0:	30 19       	mov	r9,1
80005fb2:	f2 08 09 48 	lsl	r8,r9,r8
80005fb6:	10 99       	mov	r9,r8
80005fb8:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005fbc:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
80005fbe:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005fc2:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80005fc6:	30 19       	mov	r9,1
80005fc8:	f2 08 09 48 	lsl	r8,r9,r8
80005fcc:	10 99       	mov	r9,r8
80005fce:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005fd2:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
		break;
80005fd4:	c1 a8       	rjmp	80006008 <gpio_enable_module_pin+0xf0>

	case 3: /* D function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
80005fd6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005fda:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80005fde:	30 19       	mov	r9,1
80005fe0:	f2 08 09 48 	lsl	r8,r9,r8
80005fe4:	10 99       	mov	r9,r8
80005fe6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005fea:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
80005fec:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005ff0:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80005ff4:	30 19       	mov	r9,1
80005ff6:	f2 08 09 48 	lsl	r8,r9,r8
80005ffa:	10 99       	mov	r9,r8
80005ffc:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006000:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
		break;
80006002:	c0 38       	rjmp	80006008 <gpio_enable_module_pin+0xf0>
		gpio_port->pmr2s = 1 << (pin & 0x1F);
		break;
#endif

	default:
		return GPIO_INVALID_ARGUMENT;
80006004:	30 18       	mov	r8,1
80006006:	c0 d8       	rjmp	80006020 <gpio_enable_module_pin+0x108>
	}

	/* Disable GPIO control. */
	gpio_port->gperc = 1 << (pin & 0x1F);
80006008:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000600c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80006010:	30 19       	mov	r9,1
80006012:	f2 08 09 48 	lsl	r8,r9,r8
80006016:	10 99       	mov	r9,r8
80006018:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000601c:	91 29       	st.w	r8[0x8],r9

	return GPIO_SUCCESS;
8000601e:	30 08       	mov	r8,0
}
80006020:	10 9c       	mov	r12,r8
80006022:	2f dd       	sub	sp,-12
80006024:	e3 cd 80 80 	ldm	sp++,r7,pc

80006028 <gpio_enable_gpio_pin>:
 *            GPIO mode of PX21, AVR32_PIN_PX21 can be used. Module pins such as
 *            AVR32_PWM_3_PIN for PWM channel 3 can also be used to release
 *            module pins for GPIO.
 */
void gpio_enable_gpio_pin(uint32_t pin)
{
80006028:	eb cd 40 80 	pushm	r7,lr
8000602c:	1a 97       	mov	r7,sp
8000602e:	20 2d       	sub	sp,8
80006030:	ef 4c ff f8 	st.w	r7[-8],r12
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80006034:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006038:	a5 98       	lsr	r8,0x5
8000603a:	a9 68       	lsl	r8,0x8
8000603c:	e0 28 f0 00 	sub	r8,61440
80006040:	ef 48 ff fc 	st.w	r7[-4],r8
	
	gpio_port->oderc = 1 << (pin & 0x1F);
80006044:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006048:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000604c:	30 19       	mov	r9,1
8000604e:	f2 08 09 48 	lsl	r8,r9,r8
80006052:	10 99       	mov	r9,r8
80006054:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006058:	f1 49 00 48 	st.w	r8[72],r9
	gpio_port->gpers = 1 << (pin & 0x1F);
8000605c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006060:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80006064:	30 19       	mov	r9,1
80006066:	f2 08 09 48 	lsl	r8,r9,r8
8000606a:	10 99       	mov	r9,r8
8000606c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006070:	91 19       	st.w	r8[0x4],r9
}
80006072:	2f ed       	sub	sp,-8
80006074:	e3 cd 80 80 	ldm	sp++,r7,pc

80006078 <gpio_configure_pin>:
 *
 * \param pin The pin number.
 * \param flags The configuration.
 */
void gpio_configure_pin(uint32_t pin, uint32_t flags)
{
80006078:	eb cd 40 80 	pushm	r7,lr
8000607c:	1a 97       	mov	r7,sp
8000607e:	20 3d       	sub	sp,12
80006080:	ef 4c ff f8 	st.w	r7[-8],r12
80006084:	ef 4b ff f4 	st.w	r7[-12],r11
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80006088:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000608c:	a5 98       	lsr	r8,0x5
8000608e:	a9 68       	lsl	r8,0x8
80006090:	e0 28 f0 00 	sub	r8,61440
80006094:	ef 48 ff fc 	st.w	r7[-4],r8
	} else {
		gpio_port->pderc = 1 << (pin & 0x1F);
	}

#endif
	if (flags & GPIO_PULL_UP) {
80006098:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000609c:	e2 18 00 04 	andl	r8,0x4,COH
800060a0:	c0 e0       	breq	800060bc <gpio_configure_pin+0x44>
		gpio_port->puers = 1 << (pin & 0x1F);
800060a2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800060a6:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800060aa:	30 19       	mov	r9,1
800060ac:	f2 08 09 48 	lsl	r8,r9,r8
800060b0:	10 99       	mov	r9,r8
800060b2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800060b6:	f1 49 00 74 	st.w	r8[116],r9
800060ba:	c0 d8       	rjmp	800060d4 <gpio_configure_pin+0x5c>
	} else {
		gpio_port->puerc = 1 << (pin & 0x1F);
800060bc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800060c0:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800060c4:	30 19       	mov	r9,1
800060c6:	f2 08 09 48 	lsl	r8,r9,r8
800060ca:	10 99       	mov	r9,r8
800060cc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800060d0:	f1 49 00 78 	st.w	r8[120],r9
	}

#endif

	/* Select interrupt level for group */
	if (flags & GPIO_INTERRUPT) {
800060d4:	ee f8 ff f4 	ld.w	r8,r7[-12]
800060d8:	e2 18 00 80 	andl	r8,0x80,COH
800060dc:	c5 a0       	breq	80006190 <gpio_configure_pin+0x118>
		if (flags & GPIO_BOTHEDGES) {
800060de:	ee f8 ff f4 	ld.w	r8,r7[-12]
800060e2:	e2 18 01 80 	andl	r8,0x180,COH
800060e6:	c1 a0       	breq	8000611a <gpio_configure_pin+0xa2>
			gpio_port->imr0c = 1 << (pin & 0x1F);
800060e8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800060ec:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800060f0:	30 19       	mov	r9,1
800060f2:	f2 08 09 48 	lsl	r8,r9,r8
800060f6:	10 99       	mov	r9,r8
800060f8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800060fc:	f1 49 00 a8 	st.w	r8[168],r9
			gpio_port->imr1c = 1 << (pin & 0x1F);
80006100:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006104:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80006108:	30 19       	mov	r9,1
8000610a:	f2 08 09 48 	lsl	r8,r9,r8
8000610e:	10 99       	mov	r9,r8
80006110:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006114:	f1 49 00 b8 	st.w	r8[184],r9
80006118:	c3 c8       	rjmp	80006190 <gpio_configure_pin+0x118>
		} else if (flags & GPIO_RISING) {
8000611a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000611e:	e2 18 02 80 	andl	r8,0x280,COH
80006122:	c1 a0       	breq	80006156 <gpio_configure_pin+0xde>
			gpio_port->imr0s = 1 << (pin & 0x1F);
80006124:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006128:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000612c:	30 19       	mov	r9,1
8000612e:	f2 08 09 48 	lsl	r8,r9,r8
80006132:	10 99       	mov	r9,r8
80006134:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006138:	f1 49 00 a4 	st.w	r8[164],r9
			gpio_port->imr1c = 1 << (pin & 0x1F);
8000613c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006140:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80006144:	30 19       	mov	r9,1
80006146:	f2 08 09 48 	lsl	r8,r9,r8
8000614a:	10 99       	mov	r9,r8
8000614c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006150:	f1 49 00 b8 	st.w	r8[184],r9
80006154:	c1 e8       	rjmp	80006190 <gpio_configure_pin+0x118>
		} else if (flags & GPIO_FALLING) {
80006156:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000615a:	e2 18 03 80 	andl	r8,0x380,COH
8000615e:	c1 90       	breq	80006190 <gpio_configure_pin+0x118>
			gpio_port->imr0c = 1 << (pin & 0x1F);
80006160:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006164:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80006168:	30 19       	mov	r9,1
8000616a:	f2 08 09 48 	lsl	r8,r9,r8
8000616e:	10 99       	mov	r9,r8
80006170:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006174:	f1 49 00 a8 	st.w	r8[168],r9
			gpio_port->imr1s = 1 << (pin & 0x1F);
80006178:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000617c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80006180:	30 19       	mov	r9,1
80006182:	f2 08 09 48 	lsl	r8,r9,r8
80006186:	10 99       	mov	r9,r8
80006188:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000618c:	f1 49 00 b4 	st.w	r8[180],r9
		}
	}

	/* Select direction and initial pin state */
	if (flags & GPIO_DIR_OUTPUT) {
80006190:	ee f8 ff f4 	ld.w	r8,r7[-12]
80006194:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80006198:	5c 58       	castu.b	r8
8000619a:	c2 c0       	breq	800061f2 <gpio_configure_pin+0x17a>
		if (flags & GPIO_INIT_HIGH) {
8000619c:	ee f8 ff f4 	ld.w	r8,r7[-12]
800061a0:	e2 18 00 02 	andl	r8,0x2,COH
800061a4:	c0 e0       	breq	800061c0 <gpio_configure_pin+0x148>
			gpio_port->ovrs = 1 << (pin & 0x1F);
800061a6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800061aa:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800061ae:	30 19       	mov	r9,1
800061b0:	f2 08 09 48 	lsl	r8,r9,r8
800061b4:	10 99       	mov	r9,r8
800061b6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800061ba:	f1 49 00 54 	st.w	r8[84],r9
800061be:	c0 d8       	rjmp	800061d8 <gpio_configure_pin+0x160>
		} else {
			gpio_port->ovrc = 1 << (pin & 0x1F);
800061c0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800061c4:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800061c8:	30 19       	mov	r9,1
800061ca:	f2 08 09 48 	lsl	r8,r9,r8
800061ce:	10 99       	mov	r9,r8
800061d0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800061d4:	f1 49 00 58 	st.w	r8[88],r9
		}

		gpio_port->oders = 1 << (pin & 0x1F);
800061d8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800061dc:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800061e0:	30 19       	mov	r9,1
800061e2:	f2 08 09 48 	lsl	r8,r9,r8
800061e6:	10 99       	mov	r9,r8
800061e8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800061ec:	f1 49 00 44 	st.w	r8[68],r9
800061f0:	c0 d8       	rjmp	8000620a <gpio_configure_pin+0x192>
	} else {
		gpio_port->oderc = 1 << (pin & 0x1F);
800061f2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800061f6:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800061fa:	30 19       	mov	r9,1
800061fc:	f2 08 09 48 	lsl	r8,r9,r8
80006200:	10 99       	mov	r9,r8
80006202:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006206:	f1 49 00 48 	st.w	r8[72],r9
	}

	/* Enable GPIO */
	gpio_port->gpers = 1 << (pin & 0x1F);
8000620a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000620e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80006212:	30 19       	mov	r9,1
80006214:	f2 08 09 48 	lsl	r8,r9,r8
80006218:	10 99       	mov	r9,r8
8000621a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000621e:	91 19       	st.w	r8[0x4],r9
}
80006220:	2f dd       	sub	sp,-12
80006222:	e3 cd 80 80 	ldm	sp++,r7,pc

80006226 <gpio_set_pin_high>:
 * \param pin The pin number.
 *
 * \note The function \ref gpio_configure_pin must be called before.
 */
void gpio_set_pin_high(uint32_t pin)
{
80006226:	eb cd 40 80 	pushm	r7,lr
8000622a:	1a 97       	mov	r7,sp
8000622c:	20 2d       	sub	sp,8
8000622e:	ef 4c ff f8 	st.w	r7[-8],r12
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80006232:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006236:	a5 98       	lsr	r8,0x5
80006238:	a9 68       	lsl	r8,0x8
8000623a:	e0 28 f0 00 	sub	r8,61440
8000623e:	ef 48 ff fc 	st.w	r7[-4],r8
	
	/* Value to be driven on the I/O line: 1. */
	gpio_port->ovrs  = 1 << (pin & 0x1F);
80006242:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006246:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000624a:	30 19       	mov	r9,1
8000624c:	f2 08 09 48 	lsl	r8,r9,r8
80006250:	10 99       	mov	r9,r8
80006252:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006256:	f1 49 00 54 	st.w	r8[84],r9
}
8000625a:	2f ed       	sub	sp,-8
8000625c:	e3 cd 80 80 	ldm	sp++,r7,pc

80006260 <gpio_set_pin_low>:
 * \param pin The pin number.
 *
 * \note The function \ref gpio_configure_pin must be called before.
 */
void gpio_set_pin_low(uint32_t pin)
{
80006260:	eb cd 40 80 	pushm	r7,lr
80006264:	1a 97       	mov	r7,sp
80006266:	20 2d       	sub	sp,8
80006268:	ef 4c ff f8 	st.w	r7[-8],r12
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
8000626c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006270:	a5 98       	lsr	r8,0x5
80006272:	a9 68       	lsl	r8,0x8
80006274:	e0 28 f0 00 	sub	r8,61440
80006278:	ef 48 ff fc 	st.w	r7[-4],r8
	
	/* Value to be driven on the I/O line: 0. */
	gpio_port->ovrc  = 1 << (pin & 0x1F);
8000627c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006280:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80006284:	30 19       	mov	r9,1
80006286:	f2 08 09 48 	lsl	r8,r9,r8
8000628a:	10 99       	mov	r9,r8
8000628c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006290:	f1 49 00 58 	st.w	r8[88],r9
}
80006294:	2f ed       	sub	sp,-8
80006296:	e3 cd 80 80 	ldm	sp++,r7,pc

8000629a <gpio_configure_edge_detector>:
 *             \ref GPIO_RISING_EDGE or \ref GPIO_FALLING_EDGE).
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
static uint32_t gpio_configure_edge_detector(uint32_t pin, uint32_t mode)
{
8000629a:	eb cd 40 80 	pushm	r7,lr
8000629e:	1a 97       	mov	r7,sp
800062a0:	20 3d       	sub	sp,12
800062a2:	ef 4c ff f8 	st.w	r7[-8],r12
800062a6:	ef 4b ff f4 	st.w	r7[-12],r11
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
800062aa:	ee f8 ff f8 	ld.w	r8,r7[-8]
800062ae:	a5 98       	lsr	r8,0x5
800062b0:	a9 68       	lsl	r8,0x8
800062b2:	e0 28 f0 00 	sub	r8,61440
800062b6:	ef 48 ff fc 	st.w	r7[-4],r8

	/* Configure the edge detector. */
	switch (mode) {
800062ba:	ee f8 ff f4 	ld.w	r8,r7[-12]
800062be:	58 18       	cp.w	r8,1
800062c0:	c1 e0       	breq	800062fc <gpio_configure_edge_detector+0x62>
800062c2:	c0 43       	brcs	800062ca <gpio_configure_edge_detector+0x30>
800062c4:	58 28       	cp.w	r8,2
800062c6:	c3 40       	breq	8000632e <gpio_configure_edge_detector+0x94>
800062c8:	c4 c8       	rjmp	80006360 <gpio_configure_edge_detector+0xc6>
	case GPIO_PIN_CHANGE:
		gpio_port->imr0c = 1 << (pin & 0x1F);
800062ca:	ee f8 ff f8 	ld.w	r8,r7[-8]
800062ce:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800062d2:	30 19       	mov	r9,1
800062d4:	f2 08 09 48 	lsl	r8,r9,r8
800062d8:	10 99       	mov	r9,r8
800062da:	ee f8 ff fc 	ld.w	r8,r7[-4]
800062de:	f1 49 00 a8 	st.w	r8[168],r9
		gpio_port->imr1c = 1 << (pin & 0x1F);
800062e2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800062e6:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800062ea:	30 19       	mov	r9,1
800062ec:	f2 08 09 48 	lsl	r8,r9,r8
800062f0:	10 99       	mov	r9,r8
800062f2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800062f6:	f1 49 00 b8 	st.w	r8[184],r9
		break;
800062fa:	c3 58       	rjmp	80006364 <gpio_configure_edge_detector+0xca>

	case GPIO_RISING_EDGE:
		gpio_port->imr0s = 1 << (pin & 0x1F);
800062fc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006300:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80006304:	30 19       	mov	r9,1
80006306:	f2 08 09 48 	lsl	r8,r9,r8
8000630a:	10 99       	mov	r9,r8
8000630c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006310:	f1 49 00 a4 	st.w	r8[164],r9
		gpio_port->imr1c = 1 << (pin & 0x1F);
80006314:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006318:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000631c:	30 19       	mov	r9,1
8000631e:	f2 08 09 48 	lsl	r8,r9,r8
80006322:	10 99       	mov	r9,r8
80006324:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006328:	f1 49 00 b8 	st.w	r8[184],r9
		break;
8000632c:	c1 c8       	rjmp	80006364 <gpio_configure_edge_detector+0xca>

	case GPIO_FALLING_EDGE:
		gpio_port->imr0c = 1 << (pin & 0x1F);
8000632e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006332:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80006336:	30 19       	mov	r9,1
80006338:	f2 08 09 48 	lsl	r8,r9,r8
8000633c:	10 99       	mov	r9,r8
8000633e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006342:	f1 49 00 a8 	st.w	r8[168],r9
		gpio_port->imr1s = 1 << (pin & 0x1F);
80006346:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000634a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000634e:	30 19       	mov	r9,1
80006350:	f2 08 09 48 	lsl	r8,r9,r8
80006354:	10 99       	mov	r9,r8
80006356:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000635a:	f1 49 00 b4 	st.w	r8[180],r9
		break;
8000635e:	c0 38       	rjmp	80006364 <gpio_configure_edge_detector+0xca>

	default:
		return GPIO_INVALID_ARGUMENT;
80006360:	30 18       	mov	r8,1
80006362:	c0 28       	rjmp	80006366 <gpio_configure_edge_detector+0xcc>
	}

	return GPIO_SUCCESS;
80006364:	30 08       	mov	r8,0
}
80006366:	10 9c       	mov	r12,r8
80006368:	2f dd       	sub	sp,-12
8000636a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000636e:	d7 03       	nop

80006370 <gpio_enable_pin_interrupt>:
 *             \ref GPIO_FALLING_EDGE).
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_pin_interrupt(uint32_t pin, uint32_t mode)
{
80006370:	eb cd 40 80 	pushm	r7,lr
80006374:	1a 97       	mov	r7,sp
80006376:	20 3d       	sub	sp,12
80006378:	ef 4c ff f8 	st.w	r7[-8],r12
8000637c:	ef 4b ff f4 	st.w	r7[-12],r11
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80006380:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006384:	a5 98       	lsr	r8,0x5
80006386:	a9 68       	lsl	r8,0x8
80006388:	e0 28 f0 00 	sub	r8,61440
8000638c:	ef 48 ff fc 	st.w	r7[-4],r8

	/* Enable the glitch filter. */
	gpio_port->gfers = 1 << (pin & 0x1F);
80006390:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006394:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80006398:	30 19       	mov	r9,1
8000639a:	f2 08 09 48 	lsl	r8,r9,r8
8000639e:	10 99       	mov	r9,r8
800063a0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800063a4:	f1 49 00 c4 	st.w	r8[196],r9

	/* Configure the edge detector. */
	if (GPIO_INVALID_ARGUMENT == gpio_configure_edge_detector(pin, mode)) {
800063a8:	ee fb ff f4 	ld.w	r11,r7[-12]
800063ac:	ee fc ff f8 	ld.w	r12,r7[-8]
800063b0:	f0 1f 00 0c 	mcall	800063e0 <gpio_enable_pin_interrupt+0x70>
800063b4:	18 98       	mov	r8,r12
800063b6:	58 18       	cp.w	r8,1
800063b8:	c0 31       	brne	800063be <gpio_enable_pin_interrupt+0x4e>
		return(GPIO_INVALID_ARGUMENT);
800063ba:	30 18       	mov	r8,1
800063bc:	c0 e8       	rjmp	800063d8 <gpio_enable_pin_interrupt+0x68>
	}

	/* Enable interrupt. */
	gpio_port->iers = 1 << (pin & 0x1F);
800063be:	ee f8 ff f8 	ld.w	r8,r7[-8]
800063c2:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800063c6:	30 19       	mov	r9,1
800063c8:	f2 08 09 48 	lsl	r8,r9,r8
800063cc:	10 99       	mov	r9,r8
800063ce:	ee f8 ff fc 	ld.w	r8,r7[-4]
800063d2:	f1 49 00 94 	st.w	r8[148],r9

	return GPIO_SUCCESS;
800063d6:	30 08       	mov	r8,0
}
800063d8:	10 9c       	mov	r12,r8
800063da:	2f dd       	sub	sp,-12
800063dc:	e3 cd 80 80 	ldm	sp++,r7,pc
800063e0:	80 00       	ld.sh	r0,r0[0x0]
800063e2:	62 9a       	ld.w	r10,r1[0x24]

800063e4 <gpio_get_pin_interrupt_flag>:
 * \param pin The pin number.
 *
 * \return The pin interrupt flag.
 */
bool gpio_get_pin_interrupt_flag(uint32_t pin)
{
800063e4:	eb cd 40 80 	pushm	r7,lr
800063e8:	1a 97       	mov	r7,sp
800063ea:	20 2d       	sub	sp,8
800063ec:	ef 4c ff f8 	st.w	r7[-8],r12
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
800063f0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800063f4:	a5 98       	lsr	r8,0x5
800063f6:	a9 68       	lsl	r8,0x8
800063f8:	e0 28 f0 00 	sub	r8,61440
800063fc:	ef 48 ff fc 	st.w	r7[-4],r8
	
	return (gpio_port->ifr >> (pin & 0x1F)) & 1;
80006400:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006404:	f0 f9 00 d0 	ld.w	r9,r8[208]
80006408:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000640c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80006410:	f2 08 0a 48 	lsr	r8,r9,r8
80006414:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80006418:	5c 58       	castu.b	r8
}
8000641a:	10 9c       	mov	r12,r8
8000641c:	2f ed       	sub	sp,-8
8000641e:	e3 cd 80 80 	ldm	sp++,r7,pc

80006422 <gpio_clear_pin_interrupt_flag>:
/** \brief Clears the interrupt flag of a pin.
 *
 * \param pin The pin number.
 */
void gpio_clear_pin_interrupt_flag(uint32_t pin)
{
80006422:	eb cd 40 80 	pushm	r7,lr
80006426:	1a 97       	mov	r7,sp
80006428:	20 2d       	sub	sp,8
8000642a:	ef 4c ff f8 	st.w	r7[-8],r12
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
8000642e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006432:	a5 98       	lsr	r8,0x5
80006434:	a9 68       	lsl	r8,0x8
80006436:	e0 28 f0 00 	sub	r8,61440
8000643a:	ef 48 ff fc 	st.w	r7[-4],r8
	gpio_port->ifrc = 1 << (pin & 0x1F);

	/* Restore interrupt enable register. */
	gpio_port->ier = gpio_ier;
#else
	gpio_port->ifrc = 1 << (pin & 0x1F);
8000643e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006442:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80006446:	30 19       	mov	r9,1
80006448:	f2 08 09 48 	lsl	r8,r9,r8
8000644c:	10 99       	mov	r9,r8
8000644e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006452:	f1 49 00 d8 	st.w	r8[216],r9
#endif
}
80006456:	2f ed       	sub	sp,-8
80006458:	e3 cd 80 80 	ldm	sp++,r7,pc

8000645c <_unhandled_interrupt>:
__attribute__((__interrupt__))
#elif (defined __ICCAVR32__)
__interrupt
#endif
static void _unhandled_interrupt(void)
{
8000645c:	eb cd 40 80 	pushm	r7,lr
80006460:	1a 97       	mov	r7,sp
	// Catch unregistered interrupts.
	while (true);
80006462:	c0 08       	rjmp	80006462 <_unhandled_interrupt+0x6>

80006464 <_get_interrupt_handler>:
 *
 * \return Interrupt handler to execute.
 */
__int_handler _get_interrupt_handler(uint32_t int_level);
__int_handler _get_interrupt_handler(uint32_t int_level)
{
80006464:	eb cd 40 80 	pushm	r7,lr
80006468:	1a 97       	mov	r7,sp
8000646a:	20 3d       	sub	sp,12
8000646c:	ef 4c ff f4 	st.w	r7[-12],r12
	/* ICR3 is mapped first, ICR0 last.
	Code in exception.S puts int_level in R12 which is used by the compiler
	to pass a single argument to a function. */
	uint32_t int_grp = AVR32_INTC.icr[AVR32_INTC_INT3 - int_level];
80006470:	fe 78 08 00 	mov	r8,-63488
80006474:	ee f9 ff f4 	ld.w	r9,r7[-12]
80006478:	f2 09 11 03 	rsub	r9,r9,3
8000647c:	28 09       	sub	r9,-128
8000647e:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80006482:	ef 48 ff f8 	st.w	r7[-8],r8
	uint32_t int_req = AVR32_INTC.irr[int_grp];
80006486:	fe 78 08 00 	mov	r8,-63488
8000648a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000648e:	2c 09       	sub	r9,-64
80006490:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80006494:	ef 48 ff fc 	st.w	r7[-4],r8
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
80006498:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000649c:	58 08       	cp.w	r8,0
8000649e:	c1 30       	breq	800064c4 <_get_interrupt_handler+0x60>
		? _int_handler_table[int_grp]._int_line_handler_table[32
800064a0:	ee f9 ff f8 	ld.w	r9,r7[-8]
800064a4:	48 b8       	lddpc	r8,800064d0 <_get_interrupt_handler+0x6c>
800064a6:	a1 79       	lsl	r9,0x1
800064a8:	2f f9       	sub	r9,-1
800064aa:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
800064ae:	ee f8 ff fc 	ld.w	r8,r7[-4]
800064b2:	f0 08 12 00 	clz	r8,r8
800064b6:	f0 08 11 1f 	rsub	r8,r8,31
			- clz(int_req) - 1]
800064ba:	a3 68       	lsl	r8,0x2
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
		? _int_handler_table[int_grp]._int_line_handler_table[32
800064bc:	f2 08 00 08 	add	r8,r9,r8
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
800064c0:	70 08       	ld.w	r8,r8[0x0]
800064c2:	c0 28       	rjmp	800064c6 <_get_interrupt_handler+0x62>
800064c4:	30 08       	mov	r8,0
		? _int_handler_table[int_grp]._int_line_handler_table[32
			- clz(int_req) - 1]
		: NULL;
}
800064c6:	10 9c       	mov	r12,r8
800064c8:	2f dd       	sub	sp,-12
800064ca:	e3 cd 80 80 	ldm	sp++,r7,pc
800064ce:	00 00       	add	r0,r0
800064d0:	80 00       	ld.sh	r0,r0[0x0]
800064d2:	6c 70       	ld.w	r0,r6[0x1c]

800064d4 <INTC_init_evba>:
 * \internal
 * \brief Init EVBA address. This operation may or may not have been done by the
 * C startup process.
 */
static __inline__ void INTC_init_evba(void)
{
800064d4:	eb cd 40 80 	pushm	r7,lr
800064d8:	1a 97       	mov	r7,sp
  Set_system_register(AVR32_EVBA, (int32_t)&_evba );
800064da:	48 38       	lddpc	r8,800064e4 <INTC_init_evba+0x10>
800064dc:	e3 b8 00 01 	mtsr	0x4,r8
}
800064e0:	e3 cd 80 80 	ldm	sp++,r7,pc
800064e4:	80 00       	ld.sh	r0,r0[0x0]
800064e6:	6a 00       	ld.w	r0,r5[0x0]

800064e8 <INTC_init_interrupts>:
/**
 * \brief Initializes the hardware interrupt controller driver.
 *
 */
void INTC_init_interrupts(void)
{
800064e8:	eb cd 40 80 	pushm	r7,lr
800064ec:	1a 97       	mov	r7,sp
800064ee:	20 2d       	sub	sp,8
	uint32_t int_grp, int_req;

	INTC_init_evba();
800064f0:	f0 1f 00 1f 	mcall	8000656c <INTC_init_interrupts+0x84>

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
800064f4:	30 08       	mov	r8,0
800064f6:	ef 48 ff f8 	st.w	r7[-8],r8
800064fa:	c3 18       	rjmp	8000655c <INTC_init_interrupts+0x74>
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
800064fc:	30 08       	mov	r8,0
800064fe:	ef 48 ff fc 	st.w	r7[-4],r8
80006502:	c1 48       	rjmp	8000652a <INTC_init_interrupts+0x42>
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
				._int_line_handler_table[int_req]
80006504:	ee f9 ff f8 	ld.w	r9,r7[-8]
80006508:	49 a8       	lddpc	r8,80006570 <INTC_init_interrupts+0x88>
8000650a:	a1 79       	lsl	r9,0x1
8000650c:	2f f9       	sub	r9,-1
8000650e:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80006512:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006516:	a3 68       	lsl	r8,0x2
80006518:	f2 08 00 08 	add	r8,r9,r8
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
8000651c:	49 69       	lddpc	r9,80006574 <INTC_init_interrupts+0x8c>
8000651e:	91 09       	st.w	r8[0x0],r9
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
80006520:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006524:	2f f8       	sub	r8,-1
80006526:	ef 48 ff fc 	st.w	r7[-4],r8
	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
			int_req < _int_handler_table[int_grp].num_irqs;
8000652a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000652e:	49 18       	lddpc	r8,80006570 <INTC_init_interrupts+0x88>
80006530:	f0 09 03 39 	ld.w	r9,r8[r9<<0x3]

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
80006534:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006538:	10 39       	cp.w	r9,r8
8000653a:	fe 9b ff e5 	brhi	80006504 <INTC_init_interrupts+0x1c>

		/* Set the interrupt group priority register to its default
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
8000653e:	fe 78 08 00 	mov	r8,-63488
80006542:	ee f9 ff f8 	ld.w	r9,r7[-8]
80006546:	48 db       	lddpc	r11,80006578 <INTC_init_interrupts+0x90>
80006548:	48 da       	lddpc	r10,8000657c <INTC_init_interrupts+0x94>
8000654a:	f6 0a 01 0a 	sub	r10,r11,r10
8000654e:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	uint32_t int_grp, int_req;

	INTC_init_evba();

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
80006552:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006556:	2f f8       	sub	r8,-1
80006558:	ef 48 ff f8 	st.w	r7[-8],r8
8000655c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006560:	59 38       	cp.w	r8,19
80006562:	fe 98 ff cd 	brls	800064fc <INTC_init_interrupts+0x14>
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
	}
}
80006566:	2f ed       	sub	sp,-8
80006568:	e3 cd 80 80 	ldm	sp++,r7,pc
8000656c:	80 00       	ld.sh	r0,r0[0x0]
8000656e:	64 d4       	ld.w	r4,r2[0x34]
80006570:	80 00       	ld.sh	r0,r0[0x0]
80006572:	6c 70       	ld.w	r0,r6[0x1c]
80006574:	80 00       	ld.sh	r0,r0[0x0]
80006576:	64 5c       	ld.w	r12,r2[0x14]
80006578:	80 00       	ld.sh	r0,r0[0x0]
8000657a:	6b 04       	ld.w	r4,r5[0x40]
8000657c:	80 00       	ld.sh	r0,r0[0x0]
8000657e:	6a 00       	ld.w	r0,r5[0x0]

80006580 <INTC_register_interrupt>:
 *          be effective.
 *
 */
void INTC_register_interrupt(__int_handler handler, uint32_t irq,
	uint32_t int_level)
{
80006580:	eb cd 40 80 	pushm	r7,lr
80006584:	1a 97       	mov	r7,sp
80006586:	20 4d       	sub	sp,16
80006588:	ef 4c ff f8 	st.w	r7[-8],r12
8000658c:	ef 4b ff f4 	st.w	r7[-12],r11
80006590:	ef 4a ff f0 	st.w	r7[-16],r10
	// Determine the group of the IRQ.
	uint32_t int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;
80006594:	ee f8 ff f4 	ld.w	r8,r7[-12]
80006598:	a5 98       	lsr	r8,0x5
8000659a:	ef 48 ff fc 	st.w	r7[-4],r8

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
		._int_line_handler_table[irq % AVR32_INTC_MAX_NUM_IRQS_PER_GRP]
8000659e:	ee f9 ff fc 	ld.w	r9,r7[-4]
800065a2:	4a 78       	lddpc	r8,8000663c <INTC_register_interrupt+0xbc>
800065a4:	a1 79       	lsl	r9,0x1
800065a6:	2f f9       	sub	r9,-1
800065a8:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
800065ac:	ee f8 ff f4 	ld.w	r8,r7[-12]
800065b0:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800065b4:	a3 68       	lsl	r8,0x2
800065b6:	f2 08 00 08 	add	r8,r9,r8
	uint32_t int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
800065ba:	ee f9 ff f8 	ld.w	r9,r7[-8]
800065be:	91 09       	st.w	r8[0x0],r9
	/* Program the corresponding IPRX register to set the interrupt priority
	level and the interrupt vector offset that will be fetched by the core
	interrupt system.
	NOTE: The _intx functions are intermediate assembly functions between
	the core interrupt system and the user interrupt handler. */
	if (int_level == AVR32_INTC_INT0) {
800065c0:	ee f8 ff f0 	ld.w	r8,r7[-16]
800065c4:	58 08       	cp.w	r8,0
800065c6:	c0 c1       	brne	800065de <INTC_register_interrupt+0x5e>
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
800065c8:	fe 78 08 00 	mov	r8,-63488
800065cc:	ee f9 ff fc 	ld.w	r9,r7[-4]
800065d0:	49 cb       	lddpc	r11,80006640 <INTC_register_interrupt+0xc0>
800065d2:	49 da       	lddpc	r10,80006644 <INTC_register_interrupt+0xc4>
800065d4:	f6 0a 01 0a 	sub	r10,r11,r10
800065d8:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
800065dc:	c2 d8       	rjmp	80006636 <INTC_register_interrupt+0xb6>
	} else if (int_level == AVR32_INTC_INT1) {
800065de:	ee f8 ff f0 	ld.w	r8,r7[-16]
800065e2:	58 18       	cp.w	r8,1
800065e4:	c0 d1       	brne	800065fe <INTC_register_interrupt+0x7e>
		AVR32_INTC.ipr[int_grp] = IPR_INT1;
800065e6:	fe 78 08 00 	mov	r8,-63488
800065ea:	ee f9 ff fc 	ld.w	r9,r7[-4]
800065ee:	49 7b       	lddpc	r11,80006648 <INTC_register_interrupt+0xc8>
800065f0:	49 5a       	lddpc	r10,80006644 <INTC_register_interrupt+0xc4>
800065f2:	f6 0a 01 0a 	sub	r10,r11,r10
800065f6:	bf aa       	sbr	r10,0x1e
800065f8:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
800065fc:	c1 d8       	rjmp	80006636 <INTC_register_interrupt+0xb6>
	} else if (int_level == AVR32_INTC_INT2) {
800065fe:	ee f8 ff f0 	ld.w	r8,r7[-16]
80006602:	58 28       	cp.w	r8,2
80006604:	c0 d1       	brne	8000661e <INTC_register_interrupt+0x9e>
		AVR32_INTC.ipr[int_grp] = IPR_INT2;
80006606:	fe 78 08 00 	mov	r8,-63488
8000660a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000660e:	49 0b       	lddpc	r11,8000664c <INTC_register_interrupt+0xcc>
80006610:	48 da       	lddpc	r10,80006644 <INTC_register_interrupt+0xc4>
80006612:	f6 0a 01 0a 	sub	r10,r11,r10
80006616:	bf ba       	sbr	r10,0x1f
80006618:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
8000661c:	c0 d8       	rjmp	80006636 <INTC_register_interrupt+0xb6>
	} else {
		AVR32_INTC.ipr[int_grp] = IPR_INT3;
8000661e:	fe 78 08 00 	mov	r8,-63488
80006622:	ee f9 ff fc 	ld.w	r9,r7[-4]
80006626:	48 bb       	lddpc	r11,80006650 <INTC_register_interrupt+0xd0>
80006628:	48 7a       	lddpc	r10,80006644 <INTC_register_interrupt+0xc4>
8000662a:	f6 0a 01 0a 	sub	r10,r11,r10
8000662e:	ea 1a c0 00 	orh	r10,0xc000
80006632:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	}
}
80006636:	2f cd       	sub	sp,-16
80006638:	e3 cd 80 80 	ldm	sp++,r7,pc
8000663c:	80 00       	ld.sh	r0,r0[0x0]
8000663e:	6c 70       	ld.w	r0,r6[0x1c]
80006640:	80 00       	ld.sh	r0,r0[0x0]
80006642:	6b 04       	ld.w	r4,r5[0x40]
80006644:	80 00       	ld.sh	r0,r0[0x0]
80006646:	6a 00       	ld.w	r0,r5[0x0]
80006648:	80 00       	ld.sh	r0,r0[0x0]
8000664a:	6b 12       	ld.w	r2,r5[0x44]
8000664c:	80 00       	ld.sh	r0,r0[0x0]
8000664e:	6b 20       	ld.w	r0,r5[0x48]
80006650:	80 00       	ld.sh	r0,r0[0x0]
80006652:	6b 2e       	ld.w	lr,r5[0x48]

80006654 <_stext>:

  .global _stext
  .type _stext, @function
_stext:
  // Set initial stack pointer.
  lda.w   sp, _estack
80006654:	e0 7d 00 00 	mov	sp,65536

  // Set up EVBA so interrupts can be enabled.
  lda.w   r0, _evba
  mtsr    AVR32_EVBA, r0
80006658:	fe c0 fc 58 	sub	r0,pc,-936

  // Enable the exception processing.
  csrf    AVR32_SR_EM_OFFSET
8000665c:	e3 b0 00 01 	mtsr	0x4,r0

  // Load initialized data having a global lifetime from the data LMA.
  lda.w   r0, _data
  lda.w   r1, _edata
80006660:	d5 53       	csrf	0x15
  cp      r0, r1
80006662:	30 80       	mov	r0,8
  brhs    idata_load_loop_end
80006664:	e0 61 00 b0 	mov	r1,176
  lda.w   r2, _data_lma
idata_load_loop:
  ld.d    r4, r2++
80006668:	02 30       	cp.w	r0,r1
  st.d    r0++, r4
8000666a:	c0 72       	brcc	80006678 <idata_load_loop_end>
  cp      r0, r1
8000666c:	fe c2 f9 5c 	sub	r2,pc,-1700

80006670 <idata_load_loop>:
  brlo    idata_load_loop
idata_load_loop_end:

  // Clear uninitialized data having a global lifetime in the blank static storage section.
  lda.w   r0, __bss_start
80006670:	a5 05       	ld.d	r4,r2++
  lda.w   r1, _end
80006672:	a1 24       	st.d	r0++,r4
  cp      r0, r1
80006674:	02 30       	cp.w	r0,r1
  brhs    udata_clear_loop_end
80006676:	cf d3       	brcs	80006670 <idata_load_loop>

80006678 <idata_load_loop_end>:
  mov     r2, 0
80006678:	e0 60 00 b0 	mov	r0,176
  mov     r3, 0
udata_clear_loop:
  st.d    r0++, r2
8000667c:	e0 61 03 68 	mov	r1,872
  cp      r0, r1
  brlo    udata_clear_loop
80006680:	02 30       	cp.w	r0,r1
  // Safety: Set the default "return" @ to the exit routine address.
  lda.w   lr, exit
#endif

  // Start the show.
  lda.w   pc, main
80006682:	c0 62       	brcc	8000668e <udata_clear_loop_end>
80006684:	30 02       	mov	r2,0
80006686:	30 03       	mov	r3,0

80006688 <udata_clear_loop>:
80006688:	a1 22       	st.d	r0++,r2
8000668a:	02 30       	cp.w	r0,r1
8000668c:	cf e3       	brcs	80006688 <udata_clear_loop>

8000668e <udata_clear_loop_end>:
8000668e:	fe cf fe e2 	sub	pc,pc,-286
80006692:	d7 03       	nop
80006694:	2d 2d       	sub	sp,-184
80006696:	2d 2d       	sub	sp,-184
80006698:	2d 2d       	sub	sp,-184
8000669a:	2d 2d       	sub	sp,-184
8000669c:	2d 2d       	sub	sp,-184
8000669e:	2d 2d       	sub	sp,-184
800066a0:	2d 2d       	sub	sp,-184
800066a2:	00 00       	add	r0,r0
800066a4:	49 6e       	lddpc	lr,800066fc <udata_clear_loop_end+0x6e>
800066a6:	74 65       	ld.w	r5,r10[0x18]
800066a8:	72 72       	ld.w	r2,r9[0x1c]
800066aa:	75 70       	ld.w	r0,r10[0x5c]
800066ac:	74 20       	ld.w	r0,r10[0x8]
800066ae:	64 65       	ld.w	r5,r2[0x18]
800066b0:	74 65       	ld.w	r5,r10[0x18]
800066b2:	63 74       	ld.w	r4,r1[0x5c]
800066b4:	65 64       	ld.w	r4,r2[0x58]
800066b6:	20 6f       	sub	pc,6
800066b8:	6e 20       	ld.w	r0,r7[0x8]
800066ba:	50 42       	stdsp	sp[0x10],r2
800066bc:	31 00       	mov	r0,16
800066be:	00 00       	add	r0,r0
800066c0:	53 54       	stdsp	sp[0xd4],r4
800066c2:	41 54       	lddsp	r4,sp[0x54]
800066c4:	45 5f       	lddsp	pc,sp[0x154]
800066c6:	31 20       	mov	r0,18
800066c8:	65 6e       	ld.w	lr,r2[0x58]
800066ca:	67 61       	ld.w	r1,r3[0x58]
800066cc:	67 65       	ld.w	r5,r3[0x58]
800066ce:	64 21       	ld.w	r1,r2[0x8]
800066d0:	00 00       	add	r0,r0
800066d2:	00 00       	add	r0,r0
800066d4:	4c 45       	lddpc	r5,800067e4 <main+0x38>
800066d6:	44 31       	lddsp	r1,sp[0x10c]
800066d8:	20 3d       	sub	sp,12
800066da:	20 4f       	sub	pc,4
800066dc:	4e 00       	lddpc	r0,8000685c <main+0xb0>
800066de:	00 00       	add	r0,r0
800066e0:	4c 45       	lddpc	r5,800067f0 <main+0x44>
800066e2:	44 32       	lddsp	r2,sp[0x10c]
800066e4:	20 3d       	sub	sp,12
800066e6:	20 4f       	sub	pc,4
800066e8:	46 46       	lddsp	r6,sp[0x190]
800066ea:	00 00       	add	r0,r0
800066ec:	53 54       	stdsp	sp[0xd4],r4
800066ee:	41 54       	lddsp	r4,sp[0x54]
800066f0:	45 5f       	lddsp	pc,sp[0x154]
800066f2:	32 20       	mov	r0,34
800066f4:	65 6e       	ld.w	lr,r2[0x58]
800066f6:	67 61       	ld.w	r1,r3[0x58]
800066f8:	67 65       	ld.w	r5,r3[0x58]
800066fa:	64 21       	ld.w	r1,r2[0x8]
800066fc:	00 00       	add	r0,r0
800066fe:	00 00       	add	r0,r0
80006700:	4c 45       	lddpc	r5,80006810 <main+0x64>
80006702:	44 31       	lddsp	r1,sp[0x10c]
80006704:	20 3d       	sub	sp,12
80006706:	20 4f       	sub	pc,4
80006708:	46 46       	lddsp	r6,sp[0x190]
8000670a:	00 00       	add	r0,r0
8000670c:	4c 45       	lddpc	r5,8000681c <main+0x70>
8000670e:	44 32       	lddsp	r2,sp[0x10c]
80006710:	20 3d       	sub	sp,12
80006712:	20 4f       	sub	pc,4
80006714:	4e 00       	lddpc	r0,80006894 <main+0xe8>
	...

80006718 <push_button_interrupt_handler>:
__attribute__((__interrupt__))
#elif __ICCAVR32__
__interrupt
#endif
void push_button_interrupt_handler(void)
{
80006718:	eb cd 40 80 	pushm	r7,lr
8000671c:	1a 97       	mov	r7,sp
	if (gpio_get_pin_interrupt_flag(GPIO_PUSH_BUTTON_1))
8000671e:	35 5c       	mov	r12,85
80006720:	f0 1f 00 0e 	mcall	80006758 <push_button_interrupt_handler+0x40>
80006724:	18 98       	mov	r8,r12
80006726:	58 08       	cp.w	r8,0
80006728:	c1 50       	breq	80006752 <push_button_interrupt_handler+0x3a>
	{
		// Switch to next state based on current state
		switch (state_indicator)
8000672a:	48 d8       	lddpc	r8,8000675c <push_button_interrupt_handler+0x44>
8000672c:	11 88       	ld.ub	r8,r8[0x0]
8000672e:	58 18       	cp.w	r8,1
80006730:	c0 40       	breq	80006738 <push_button_interrupt_handler+0x20>
80006732:	58 28       	cp.w	r8,2
80006734:	c0 60       	breq	80006740 <push_button_interrupt_handler+0x28>
80006736:	c0 88       	rjmp	80006746 <push_button_interrupt_handler+0x2e>
		{
			case STATE_1:
				state_indicator = STATE_2;
80006738:	48 99       	lddpc	r9,8000675c <push_button_interrupt_handler+0x44>
8000673a:	30 28       	mov	r8,2
8000673c:	b2 88       	st.b	r9[0x0],r8
			break;
8000673e:	c0 48       	rjmp	80006746 <push_button_interrupt_handler+0x2e>
			case STATE_2:
				state_indicator = STATE_1;
80006740:	48 79       	lddpc	r9,8000675c <push_button_interrupt_handler+0x44>
80006742:	30 18       	mov	r8,1
80006744:	b2 88       	st.b	r9[0x0],r8
			break;
		}
		
		// Set run_once variable to true
		run_once = TRUE;
80006746:	48 79       	lddpc	r9,80006760 <push_button_interrupt_handler+0x48>
80006748:	30 18       	mov	r8,1
8000674a:	b2 88       	st.b	r9[0x0],r8
		
		// Clear interrupt flag to allow new interrupts
		gpio_clear_pin_interrupt_flag(GPIO_PUSH_BUTTON_1);
8000674c:	35 5c       	mov	r12,85
8000674e:	f0 1f 00 06 	mcall	80006764 <push_button_interrupt_handler+0x4c>
	}
}
80006752:	e3 cd 40 80 	ldm	sp++,r7,lr
80006756:	d6 03       	rete
80006758:	80 00       	ld.sh	r0,r0[0x0]
8000675a:	63 e4       	ld.w	r4,r1[0x78]
8000675c:	00 00       	add	r0,r0
8000675e:	00 ac       	st.w	r0++,r12
80006760:	00 00       	add	r0,r0
80006762:	03 44       	ld.w	r4,--r1
80006764:	80 00       	ld.sh	r0,r0[0x0]
80006766:	64 22       	ld.w	r2,r2[0x8]

80006768 <write_println_to_cdc>:
	}
}


void write_println_to_cdc(char *input_string)
{
80006768:	eb cd 40 80 	pushm	r7,lr
8000676c:	1a 97       	mov	r7,sp
8000676e:	20 1d       	sub	sp,4
80006770:	ef 4c ff fc 	st.w	r7[-4],r12
	while (*input_string)
80006774:	c0 c8       	rjmp	8000678c <write_println_to_cdc+0x24>
	{
		udi_cdc_putc(*input_string);
80006776:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000677a:	11 88       	ld.ub	r8,r8[0x0]
8000677c:	10 9c       	mov	r12,r8
8000677e:	f0 1f 00 0b 	mcall	800067a8 <write_println_to_cdc+0x40>
		*input_string++;
80006782:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006786:	2f f8       	sub	r8,-1
80006788:	ef 48 ff fc 	st.w	r7[-4],r8
}


void write_println_to_cdc(char *input_string)
{
	while (*input_string)
8000678c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006790:	11 88       	ld.ub	r8,r8[0x0]
80006792:	58 08       	cp.w	r8,0
80006794:	cf 11       	brne	80006776 <write_println_to_cdc+0xe>
	{
		udi_cdc_putc(*input_string);
		*input_string++;
	}
	udi_cdc_putc('\r');
80006796:	30 dc       	mov	r12,13
80006798:	f0 1f 00 04 	mcall	800067a8 <write_println_to_cdc+0x40>
	udi_cdc_putc('\n');
8000679c:	30 ac       	mov	r12,10
8000679e:	f0 1f 00 03 	mcall	800067a8 <write_println_to_cdc+0x40>
}
800067a2:	2f fd       	sub	sp,-4
800067a4:	e3 cd 80 80 	ldm	sp++,r7,pc
800067a8:	80 00       	ld.sh	r0,r0[0x0]
800067aa:	49 6c       	lddpc	r12,80006800 <main+0x54>

800067ac <main>:


int main (void)
{
800067ac:	eb cd 40 80 	pushm	r7,lr
800067b0:	1a 97       	mov	r7,sp
	// Initialize CPU clock to 48 MHz (configured in conf_clock.h)
	sysclk_init();
800067b2:	f0 1f 00 37 	mcall	8000688c <main+0xe0>
	
	// Initialize the EVK1100 and its pin configuration
	board_init();
800067b6:	f0 1f 00 37 	mcall	80006890 <main+0xe4>
	
	// Enable LED1 and LED2 as GPIO output
	gpio_enable_gpio_pin(LED0_GPIO);
800067ba:	33 bc       	mov	r12,59
800067bc:	f0 1f 00 36 	mcall	80006894 <main+0xe8>
	gpio_enable_gpio_pin(LED1_GPIO);
800067c0:	33 cc       	mov	r12,60
800067c2:	f0 1f 00 35 	mcall	80006894 <main+0xe8>
	gpio_configure_pin(LED0_GPIO, GPIO_DIR_OUTPUT);
800067c6:	30 1b       	mov	r11,1
800067c8:	33 bc       	mov	r12,59
800067ca:	f0 1f 00 34 	mcall	80006898 <main+0xec>
	gpio_configure_pin(LED1_GPIO, GPIO_DIR_OUTPUT);
800067ce:	30 1b       	mov	r11,1
800067d0:	33 cc       	mov	r12,60
800067d2:	f0 1f 00 32 	mcall	80006898 <main+0xec>
	
	// Configure IRQs
	irq_initialize_vectors();
800067d6:	f0 1f 00 32 	mcall	8000689c <main+0xf0>
	cpu_irq_enable();
800067da:	d5 03       	csrf	0x10
	
	// Disable all interrupts
	Disable_global_interrupt();
800067dc:	d3 03       	ssrf	0x10
	
	// Initialize interrupt module
	INTC_init_interrupts();
800067de:	f0 1f 00 30 	mcall	8000689c <main+0xf0>
	
		// Define handler and configure interrupt with INT1 priority
	INTC_register_interrupt(&push_button_interrupt_handler,
800067e2:	30 1a       	mov	r10,1
800067e4:	34 ab       	mov	r11,74
800067e6:	4a fc       	lddpc	r12,800068a0 <main+0xf4>
800067e8:	f0 1f 00 2f 	mcall	800068a4 <main+0xf8>
							AVR32_GPIO_IRQ_0 + (GPIO_PUSH_BUTTON_1/8),
							AVR32_INTC_INT1);
	
	// Enable falling edge interrupt on Push Button 1
	gpio_enable_pin_interrupt(GPIO_PUSH_BUTTON_1, GPIO_FALLING_EDGE);
800067ec:	30 2b       	mov	r11,2
800067ee:	35 5c       	mov	r12,85
800067f0:	f0 1f 00 2e 	mcall	800068a8 <main+0xfc>
	
	// Enable global interrupts
	Enable_global_interrupt();
800067f4:	d5 03       	csrf	0x10
	
	// Start USB CDC
	udc_start();
800067f6:	f0 1f 00 2e 	mcall	800068ac <main+0x100>
	
	// Set initial state
	// STATE_1 = LED0 On, LED1 Off
	// STATE_2 = LED0 Off, LED1 On
	gpio_set_pin_low(LED0_GPIO);
800067fa:	33 bc       	mov	r12,59
800067fc:	f0 1f 00 2d 	mcall	800068b0 <main+0x104>
	gpio_set_pin_high(LED1_GPIO);
80006800:	33 cc       	mov	r12,60
80006802:	f0 1f 00 2d 	mcall	800068b4 <main+0x108>
80006806:	c0 28       	rjmp	8000680a <main+0x5e>
			// Reset run_once to false
			run_once = FALSE;
		}
		
		// Otherwise, do nothing!
	}
80006808:	d7 03       	nop
	gpio_set_pin_high(LED1_GPIO);
	
	while (1)
	{
		// If an interrupt has happened and run_once is true...
		if (run_once)
8000680a:	4a c8       	lddpc	r8,800068b8 <main+0x10c>
8000680c:	11 88       	ld.ub	r8,r8[0x0]
8000680e:	58 08       	cp.w	r8,0
80006810:	cf c0       	breq	80006808 <main+0x5c>
		{
			switch (state_indicator)
80006812:	4a b8       	lddpc	r8,800068bc <main+0x110>
80006814:	11 88       	ld.ub	r8,r8[0x0]
80006816:	58 18       	cp.w	r8,1
80006818:	c0 40       	breq	80006820 <main+0x74>
8000681a:	58 28       	cp.w	r8,2
8000681c:	c1 b0       	breq	80006852 <main+0xa6>
8000681e:	c3 28       	rjmp	80006882 <main+0xd6>
			{
				// ... and if current state is STATE_1...
				case STATE_1:
					// Activate LED0 and deactivate LED1
					gpio_set_pin_low(LED0_GPIO);
80006820:	33 bc       	mov	r12,59
80006822:	f0 1f 00 24 	mcall	800068b0 <main+0x104>
					gpio_set_pin_high(LED1_GPIO);
80006826:	33 cc       	mov	r12,60
80006828:	f0 1f 00 23 	mcall	800068b4 <main+0x108>
					// Send debug message over CDC
					write_println_to_cdc("--------------");
8000682c:	4a 5c       	lddpc	r12,800068c0 <main+0x114>
8000682e:	f0 1f 00 26 	mcall	800068c4 <main+0x118>
					write_println_to_cdc("Interrupt detected on PB1");
80006832:	4a 6c       	lddpc	r12,800068c8 <main+0x11c>
80006834:	f0 1f 00 24 	mcall	800068c4 <main+0x118>
					write_println_to_cdc("STATE_1 engaged!");
80006838:	4a 5c       	lddpc	r12,800068cc <main+0x120>
8000683a:	f0 1f 00 23 	mcall	800068c4 <main+0x118>
					write_println_to_cdc("LED1 = ON");
8000683e:	4a 5c       	lddpc	r12,800068d0 <main+0x124>
80006840:	f0 1f 00 21 	mcall	800068c4 <main+0x118>
					write_println_to_cdc("LED2 = OFF");
80006844:	4a 4c       	lddpc	r12,800068d4 <main+0x128>
80006846:	f0 1f 00 20 	mcall	800068c4 <main+0x118>
					write_println_to_cdc("--------------");
8000684a:	49 ec       	lddpc	r12,800068c0 <main+0x114>
8000684c:	f0 1f 00 1e 	mcall	800068c4 <main+0x118>
				break;
80006850:	c1 98       	rjmp	80006882 <main+0xd6>
				
				// ... and if current state is STATE_2...
				case STATE_2:
					// Activate LED1 and deactivate LED0
					gpio_set_pin_low(LED1_GPIO);
80006852:	33 cc       	mov	r12,60
80006854:	f0 1f 00 17 	mcall	800068b0 <main+0x104>
					gpio_set_pin_high(LED0_GPIO);
80006858:	33 bc       	mov	r12,59
8000685a:	f0 1f 00 17 	mcall	800068b4 <main+0x108>
					// Send debug message over CDC
					write_println_to_cdc("--------------");
8000685e:	49 9c       	lddpc	r12,800068c0 <main+0x114>
80006860:	f0 1f 00 19 	mcall	800068c4 <main+0x118>
					write_println_to_cdc("Interrupt detected on PB1");
80006864:	49 9c       	lddpc	r12,800068c8 <main+0x11c>
80006866:	f0 1f 00 18 	mcall	800068c4 <main+0x118>
					write_println_to_cdc("STATE_2 engaged!");
8000686a:	49 cc       	lddpc	r12,800068d8 <main+0x12c>
8000686c:	f0 1f 00 16 	mcall	800068c4 <main+0x118>
					write_println_to_cdc("LED1 = OFF");
80006870:	49 bc       	lddpc	r12,800068dc <main+0x130>
80006872:	f0 1f 00 15 	mcall	800068c4 <main+0x118>
					write_println_to_cdc("LED2 = ON");
80006876:	49 bc       	lddpc	r12,800068e0 <main+0x134>
80006878:	f0 1f 00 13 	mcall	800068c4 <main+0x118>
					write_println_to_cdc("--------------");
8000687c:	49 1c       	lddpc	r12,800068c0 <main+0x114>
8000687e:	f0 1f 00 12 	mcall	800068c4 <main+0x118>
				break;
			}
			
			// Reset run_once to false
			run_once = FALSE;
80006882:	48 e9       	lddpc	r9,800068b8 <main+0x10c>
80006884:	30 08       	mov	r8,0
80006886:	b2 88       	st.b	r9[0x0],r8
		}
		
		// Otherwise, do nothing!
	}
80006888:	cc 1b       	rjmp	8000680a <main+0x5e>
8000688a:	00 00       	add	r0,r0
8000688c:	80 00       	ld.sh	r0,r0[0x0]
8000688e:	5d 9c       	*unknown*
80006890:	80 00       	ld.sh	r0,r0[0x0]
80006892:	5d d0       	*unknown*
80006894:	80 00       	ld.sh	r0,r0[0x0]
80006896:	60 28       	ld.w	r8,r0[0x8]
80006898:	80 00       	ld.sh	r0,r0[0x0]
8000689a:	60 78       	ld.w	r8,r0[0x1c]
8000689c:	80 00       	ld.sh	r0,r0[0x0]
8000689e:	64 e8       	ld.w	r8,r2[0x38]
800068a0:	80 00       	ld.sh	r0,r0[0x0]
800068a2:	67 18       	ld.w	r8,r3[0x44]
800068a4:	80 00       	ld.sh	r0,r0[0x0]
800068a6:	65 80       	ld.w	r0,r2[0x60]
800068a8:	80 00       	ld.sh	r0,r0[0x0]
800068aa:	63 70       	ld.w	r0,r1[0x5c]
800068ac:	80 00       	ld.sh	r0,r0[0x0]
800068ae:	4c 88       	lddpc	r8,800069cc <main+0x220>
800068b0:	80 00       	ld.sh	r0,r0[0x0]
800068b2:	62 60       	ld.w	r0,r1[0x18]
800068b4:	80 00       	ld.sh	r0,r0[0x0]
800068b6:	62 26       	ld.w	r6,r1[0x8]
800068b8:	00 00       	add	r0,r0
800068ba:	03 44       	ld.w	r4,--r1
800068bc:	00 00       	add	r0,r0
800068be:	00 ac       	st.w	r0++,r12
800068c0:	80 00       	ld.sh	r0,r0[0x0]
800068c2:	66 94       	ld.w	r4,r3[0x24]
800068c4:	80 00       	ld.sh	r0,r0[0x0]
800068c6:	67 68       	ld.w	r8,r3[0x58]
800068c8:	80 00       	ld.sh	r0,r0[0x0]
800068ca:	66 a4       	ld.w	r4,r3[0x28]
800068cc:	80 00       	ld.sh	r0,r0[0x0]
800068ce:	66 c0       	ld.w	r0,r3[0x30]
800068d0:	80 00       	ld.sh	r0,r0[0x0]
800068d2:	66 d4       	ld.w	r4,r3[0x34]
800068d4:	80 00       	ld.sh	r0,r0[0x0]
800068d6:	66 e0       	ld.w	r0,r3[0x38]
800068d8:	80 00       	ld.sh	r0,r0[0x0]
800068da:	66 ec       	ld.w	r12,r3[0x38]
800068dc:	80 00       	ld.sh	r0,r0[0x0]
800068de:	67 00       	ld.w	r0,r3[0x40]
800068e0:	80 00       	ld.sh	r0,r0[0x0]
800068e2:	67 0c       	ld.w	r12,r3[0x40]

Disassembly of section .exception:

80006a00 <_evba>:
_evba:

	.org  0x000
	// Unrecoverable Exception.
_handle_Unrecoverable_Exception:
	rjmp $
80006a00:	c0 08       	rjmp	80006a00 <_evba>
	...

80006a04 <_handle_TLB_Multiple_Hit>:

	.org  0x004
	// TLB Multiple Hit.
_handle_TLB_Multiple_Hit:
	rjmp $
80006a04:	c0 08       	rjmp	80006a04 <_handle_TLB_Multiple_Hit>
	...

80006a08 <_handle_Bus_Error_Data_Fetch>:

	.org  0x008
	// Bus Error Data Fetch.
_handle_Bus_Error_Data_Fetch:
	rjmp $
80006a08:	c0 08       	rjmp	80006a08 <_handle_Bus_Error_Data_Fetch>
	...

80006a0c <_handle_Bus_Error_Instruction_Fetch>:

	.org  0x00C
	// Bus Error Instruction Fetch.
_handle_Bus_Error_Instruction_Fetch:
	rjmp $
80006a0c:	c0 08       	rjmp	80006a0c <_handle_Bus_Error_Instruction_Fetch>
	...

80006a10 <_handle_NMI>:

	.org  0x010
	// NMI.
_handle_NMI:
	rjmp $
80006a10:	c0 08       	rjmp	80006a10 <_handle_NMI>
	...

80006a14 <_handle_Instruction_Address>:

	.org  0x014
	// Instruction Address.
_handle_Instruction_Address:
	rjmp $
80006a14:	c0 08       	rjmp	80006a14 <_handle_Instruction_Address>
	...

80006a18 <_handle_ITLB_Protection>:

	.org  0x018
	// ITLB Protection.
_handle_ITLB_Protection:
	rjmp $
80006a18:	c0 08       	rjmp	80006a18 <_handle_ITLB_Protection>
	...

80006a1c <_handle_Breakpoint>:

	.org  0x01C
	// Breakpoint.
_handle_Breakpoint:
	rjmp $
80006a1c:	c0 08       	rjmp	80006a1c <_handle_Breakpoint>
	...

80006a20 <_handle_Illegal_Opcode>:

	.org  0x020
	// Illegal Opcode.
_handle_Illegal_Opcode:
	rjmp $
80006a20:	c0 08       	rjmp	80006a20 <_handle_Illegal_Opcode>
	...

80006a24 <_handle_Unimplemented_Instruction>:

	.org  0x024
	// Unimplemented Instruction.
_handle_Unimplemented_Instruction:
	rjmp $
80006a24:	c0 08       	rjmp	80006a24 <_handle_Unimplemented_Instruction>
	...

80006a28 <_handle_Privilege_Violation>:

	.org  0x028
	// Privilege Violation.
_handle_Privilege_Violation:
	rjmp $
80006a28:	c0 08       	rjmp	80006a28 <_handle_Privilege_Violation>
	...

80006a2c <_handle_Floating_Point>:

	.org  0x02C
	// Floating-Point: UNUSED IN AVR32UC and AVR32AP.
_handle_Floating_Point:
	rjmp $
80006a2c:	c0 08       	rjmp	80006a2c <_handle_Floating_Point>
	...

80006a30 <_handle_Coprocessor_Absent>:

	.org  0x030
	// Coprocessor Absent: UNUSED IN AVR32UC.
_handle_Coprocessor_Absent:
	rjmp $
80006a30:	c0 08       	rjmp	80006a30 <_handle_Coprocessor_Absent>
	...

80006a34 <_handle_Data_Address_Read>:

	.org  0x034
	// Data Address (Read).
_handle_Data_Address_Read:
	rjmp $
80006a34:	c0 08       	rjmp	80006a34 <_handle_Data_Address_Read>
	...

80006a38 <_handle_Data_Address_Write>:

	.org  0x038
	// Data Address (Write).
_handle_Data_Address_Write:
	rjmp $
80006a38:	c0 08       	rjmp	80006a38 <_handle_Data_Address_Write>
	...

80006a3c <_handle_DTLB_Protection_Read>:

	.org  0x03C
	// DTLB Protection (Read).
_handle_DTLB_Protection_Read:
	rjmp $
80006a3c:	c0 08       	rjmp	80006a3c <_handle_DTLB_Protection_Read>
	...

80006a40 <_handle_DTLB_Protection_Write>:

	.org  0x040
	// DTLB Protection (Write).
_handle_DTLB_Protection_Write:
	rjmp $
80006a40:	c0 08       	rjmp	80006a40 <_handle_DTLB_Protection_Write>
	...

80006a44 <_handle_DTLB_Modified>:

	.org  0x044
	// DTLB Modified: UNUSED IN AVR32UC.
_handle_DTLB_Modified:
	rjmp $
80006a44:	c0 08       	rjmp	80006a44 <_handle_DTLB_Modified>
	...

80006a50 <_handle_ITLB_Miss>:

	.org  0x050
	// ITLB Miss.
_handle_ITLB_Miss:
	rjmp $
80006a50:	c0 08       	rjmp	80006a50 <_handle_ITLB_Miss>
	...

80006a60 <_handle_DTLB_Miss_Read>:

	.org  0x060
	// DTLB Miss (Read).
_handle_DTLB_Miss_Read:
	rjmp $
80006a60:	c0 08       	rjmp	80006a60 <_handle_DTLB_Miss_Read>
	...

80006a70 <_handle_DTLB_Miss_Write>:

	.org  0x070
	// DTLB Miss (Write).
_handle_DTLB_Miss_Write:
	rjmp $
80006a70:	c0 08       	rjmp	80006a70 <_handle_DTLB_Miss_Write>
	...

80006b00 <_handle_Supervisor_Call>:

	.org  0x100
	// Supervisor Call.
_handle_Supervisor_Call:
	rjmp $
80006b00:	c0 08       	rjmp	80006b00 <_handle_Supervisor_Call>
80006b02:	d7 03       	nop

80006b04 <_int0>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80006b04:	30 0c       	mov	r12,0
80006b06:	fe b0 fc af 	rcall	80006464 <_get_interrupt_handler>
80006b0a:	58 0c       	cp.w	r12,0
80006b0c:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
80006b10:	d6 03       	rete

80006b12 <_int1>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80006b12:	30 1c       	mov	r12,1
80006b14:	fe b0 fc a8 	rcall	80006464 <_get_interrupt_handler>
80006b18:	58 0c       	cp.w	r12,0
80006b1a:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
80006b1e:	d6 03       	rete

80006b20 <_int2>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80006b20:	30 2c       	mov	r12,2
80006b22:	fe b0 fc a1 	rcall	80006464 <_get_interrupt_handler>
80006b26:	58 0c       	cp.w	r12,0
80006b28:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
80006b2c:	d6 03       	rete

80006b2e <_int3>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80006b2e:	30 3c       	mov	r12,3
80006b30:	fe b0 fc 9a 	rcall	80006464 <_get_interrupt_handler>
80006b34:	58 0c       	cp.w	r12,0
80006b36:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
80006b3a:	d6 03       	rete
80006b3c:	d7 03       	nop
80006b3e:	d7 03       	nop
80006b40:	d7 03       	nop
80006b42:	d7 03       	nop
80006b44:	d7 03       	nop
80006b46:	d7 03       	nop
80006b48:	d7 03       	nop
80006b4a:	d7 03       	nop
80006b4c:	d7 03       	nop
80006b4e:	d7 03       	nop
80006b50:	d7 03       	nop
80006b52:	d7 03       	nop
80006b54:	d7 03       	nop
80006b56:	d7 03       	nop
80006b58:	d7 03       	nop
80006b5a:	d7 03       	nop
80006b5c:	d7 03       	nop
80006b5e:	d7 03       	nop
80006b60:	d7 03       	nop
80006b62:	d7 03       	nop
80006b64:	d7 03       	nop
80006b66:	d7 03       	nop
80006b68:	d7 03       	nop
80006b6a:	d7 03       	nop
80006b6c:	d7 03       	nop
80006b6e:	d7 03       	nop
80006b70:	d7 03       	nop
80006b72:	d7 03       	nop
80006b74:	d7 03       	nop
80006b76:	d7 03       	nop
80006b78:	d7 03       	nop
80006b7a:	d7 03       	nop
80006b7c:	d7 03       	nop
80006b7e:	d7 03       	nop
80006b80:	d7 03       	nop
80006b82:	d7 03       	nop
80006b84:	d7 03       	nop
80006b86:	d7 03       	nop
80006b88:	d7 03       	nop
80006b8a:	d7 03       	nop
80006b8c:	d7 03       	nop
80006b8e:	d7 03       	nop
80006b90:	d7 03       	nop
80006b92:	d7 03       	nop
80006b94:	d7 03       	nop
80006b96:	d7 03       	nop
80006b98:	d7 03       	nop
80006b9a:	d7 03       	nop
80006b9c:	d7 03       	nop
80006b9e:	d7 03       	nop
80006ba0:	d7 03       	nop
80006ba2:	d7 03       	nop
80006ba4:	d7 03       	nop
80006ba6:	d7 03       	nop
80006ba8:	d7 03       	nop
80006baa:	d7 03       	nop
80006bac:	d7 03       	nop
80006bae:	d7 03       	nop
80006bb0:	d7 03       	nop
80006bb2:	d7 03       	nop
80006bb4:	d7 03       	nop
80006bb6:	d7 03       	nop
80006bb8:	d7 03       	nop
80006bba:	d7 03       	nop
80006bbc:	d7 03       	nop
80006bbe:	d7 03       	nop
80006bc0:	d7 03       	nop
80006bc2:	d7 03       	nop
80006bc4:	d7 03       	nop
80006bc6:	d7 03       	nop
80006bc8:	d7 03       	nop
80006bca:	d7 03       	nop
80006bcc:	d7 03       	nop
80006bce:	d7 03       	nop
80006bd0:	d7 03       	nop
80006bd2:	d7 03       	nop
80006bd4:	d7 03       	nop
80006bd6:	d7 03       	nop
80006bd8:	d7 03       	nop
80006bda:	d7 03       	nop
80006bdc:	d7 03       	nop
80006bde:	d7 03       	nop
80006be0:	d7 03       	nop
80006be2:	d7 03       	nop
80006be4:	d7 03       	nop
80006be6:	d7 03       	nop
80006be8:	d7 03       	nop
80006bea:	d7 03       	nop
80006bec:	d7 03       	nop
80006bee:	d7 03       	nop
80006bf0:	d7 03       	nop
80006bf2:	d7 03       	nop
80006bf4:	d7 03       	nop
80006bf6:	d7 03       	nop
80006bf8:	d7 03       	nop
80006bfa:	d7 03       	nop
80006bfc:	d7 03       	nop
80006bfe:	d7 03       	nop
